
Smart_Joint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016e90  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  08017020  08017020  00018020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080177d0  080177d0  000191ec  2**0
                  CONTENTS
  4 .ARM          00000008  080177d0  080177d0  000187d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080177d8  080177d8  000191ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080177d8  080177d8  000187d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080177dc  080177dc  000187dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080177e0  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c64  200001f0  080179cc  000191f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005e54  080179cc  00019e54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000191ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039c95  00000000  00000000  0001921c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000675b  00000000  00000000  00052eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e38  00000000  00000000  00059610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002418  00000000  00000000  0005c448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031108  00000000  00000000  0005e860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037be6  00000000  00000000  0008f968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124974  00000000  00000000  000c754e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ebec2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d08c  00000000  00000000  001ebf08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001f8f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017008 	.word	0x08017008

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08017008 	.word	0x08017008

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b988 	b.w	8000da4 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	468e      	mov	lr, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	4688      	mov	r8, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d962      	bls.n	8000b88 <__udivmoddi4+0xdc>
 8000ac2:	fab2 f682 	clz	r6, r2
 8000ac6:	b14e      	cbz	r6, 8000adc <__udivmoddi4+0x30>
 8000ac8:	f1c6 0320 	rsb	r3, r6, #32
 8000acc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ad0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad4:	40b7      	lsls	r7, r6
 8000ad6:	ea43 0808 	orr.w	r8, r3, r8
 8000ada:	40b4      	lsls	r4, r6
 8000adc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae0:	fa1f fc87 	uxth.w	ip, r7
 8000ae4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	fb0e 8811 	mls	r8, lr, r1, r8
 8000aee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af2:	fb01 f20c 	mul.w	r2, r1, ip
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b00:	f080 80ea 	bcs.w	8000cd8 <__udivmoddi4+0x22c>
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f240 80e7 	bls.w	8000cd8 <__udivmoddi4+0x22c>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	1a9a      	subs	r2, r3, r2
 8000b10:	b2a3      	uxth	r3, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b22:	459c      	cmp	ip, r3
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0x8e>
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2c:	f080 80d6 	bcs.w	8000cdc <__udivmoddi4+0x230>
 8000b30:	459c      	cmp	ip, r3
 8000b32:	f240 80d3 	bls.w	8000cdc <__udivmoddi4+0x230>
 8000b36:	443b      	add	r3, r7
 8000b38:	3802      	subs	r0, #2
 8000b3a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b3e:	eba3 030c 	sub.w	r3, r3, ip
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11d      	cbz	r5, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40f3      	lsrs	r3, r6
 8000b48:	2200      	movs	r2, #0
 8000b4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d905      	bls.n	8000b62 <__udivmoddi4+0xb6>
 8000b56:	b10d      	cbz	r5, 8000b5c <__udivmoddi4+0xb0>
 8000b58:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e7f5      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b62:	fab3 f183 	clz	r1, r3
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d146      	bne.n	8000bf8 <__udivmoddi4+0x14c>
 8000b6a:	4573      	cmp	r3, lr
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0xc8>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 8105 	bhi.w	8000d7e <__udivmoddi4+0x2d2>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0e5      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b82:	e9c5 4800 	strd	r4, r8, [r5]
 8000b86:	e7e2      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f000 8090 	beq.w	8000cae <__udivmoddi4+0x202>
 8000b8e:	fab2 f682 	clz	r6, r2
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	f040 80a4 	bne.w	8000ce0 <__udivmoddi4+0x234>
 8000b98:	1a8a      	subs	r2, r1, r2
 8000b9a:	0c03      	lsrs	r3, r0, #16
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	b280      	uxth	r0, r0
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000baa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb2:	fb04 f20c 	mul.w	r2, r4, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <__udivmoddi4+0x11e>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x11c>
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f200 80e0 	bhi.w	8000d88 <__udivmoddi4+0x2dc>
 8000bc8:	46c4      	mov	ip, r8
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bd0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bd4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bd8:	fb02 f404 	mul.w	r4, r2, r4
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x144>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x142>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f200 80ca 	bhi.w	8000d82 <__udivmoddi4+0x2d6>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	1b1b      	subs	r3, r3, r4
 8000bf2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bf6:	e7a5      	b.n	8000b44 <__udivmoddi4+0x98>
 8000bf8:	f1c1 0620 	rsb	r6, r1, #32
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000c02:	431f      	orrs	r7, r3
 8000c04:	fa0e f401 	lsl.w	r4, lr, r1
 8000c08:	fa20 f306 	lsr.w	r3, r0, r6
 8000c0c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c10:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c14:	4323      	orrs	r3, r4
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	fa1f fc87 	uxth.w	ip, r7
 8000c1e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c22:	0c1c      	lsrs	r4, r3, #16
 8000c24:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c2c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	fa02 f201 	lsl.w	r2, r2, r1
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x1a0>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c3e:	f080 809c 	bcs.w	8000d7a <__udivmoddi4+0x2ce>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8099 	bls.w	8000d7a <__udivmoddi4+0x2ce>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	fa1f fe83 	uxth.w	lr, r3
 8000c54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c58:	fb09 4413 	mls	r4, r9, r3, r4
 8000c5c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c60:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c64:	45a4      	cmp	ip, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x1ce>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c6e:	f080 8082 	bcs.w	8000d76 <__udivmoddi4+0x2ca>
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	d97f      	bls.n	8000d76 <__udivmoddi4+0x2ca>
 8000c76:	3b02      	subs	r3, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c7e:	eba4 040c 	sub.w	r4, r4, ip
 8000c82:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c86:	4564      	cmp	r4, ip
 8000c88:	4673      	mov	r3, lr
 8000c8a:	46e1      	mov	r9, ip
 8000c8c:	d362      	bcc.n	8000d54 <__udivmoddi4+0x2a8>
 8000c8e:	d05f      	beq.n	8000d50 <__udivmoddi4+0x2a4>
 8000c90:	b15d      	cbz	r5, 8000caa <__udivmoddi4+0x1fe>
 8000c92:	ebb8 0203 	subs.w	r2, r8, r3
 8000c96:	eb64 0409 	sbc.w	r4, r4, r9
 8000c9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000ca2:	431e      	orrs	r6, r3
 8000ca4:	40cc      	lsrs	r4, r1
 8000ca6:	e9c5 6400 	strd	r6, r4, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	e74f      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000cae:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cb2:	0c01      	lsrs	r1, r0, #16
 8000cb4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cb8:	b280      	uxth	r0, r0
 8000cba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	463c      	mov	r4, r7
 8000cc4:	46b8      	mov	r8, r7
 8000cc6:	46be      	mov	lr, r7
 8000cc8:	2620      	movs	r6, #32
 8000cca:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cce:	eba2 0208 	sub.w	r2, r2, r8
 8000cd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cd6:	e766      	b.n	8000ba6 <__udivmoddi4+0xfa>
 8000cd8:	4601      	mov	r1, r0
 8000cda:	e718      	b.n	8000b0e <__udivmoddi4+0x62>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	e72c      	b.n	8000b3a <__udivmoddi4+0x8e>
 8000ce0:	f1c6 0220 	rsb	r2, r6, #32
 8000ce4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ce8:	40b7      	lsls	r7, r6
 8000cea:	40b1      	lsls	r1, r6
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cfa:	b2bc      	uxth	r4, r7
 8000cfc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb08 f904 	mul.w	r9, r8, r4
 8000d0a:	40b0      	lsls	r0, r6
 8000d0c:	4589      	cmp	r9, r1
 8000d0e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d12:	b280      	uxth	r0, r0
 8000d14:	d93e      	bls.n	8000d94 <__udivmoddi4+0x2e8>
 8000d16:	1879      	adds	r1, r7, r1
 8000d18:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d1c:	d201      	bcs.n	8000d22 <__udivmoddi4+0x276>
 8000d1e:	4589      	cmp	r9, r1
 8000d20:	d81f      	bhi.n	8000d62 <__udivmoddi4+0x2b6>
 8000d22:	eba1 0109 	sub.w	r1, r1, r9
 8000d26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2a:	fb09 f804 	mul.w	r8, r9, r4
 8000d2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d32:	b292      	uxth	r2, r2
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	4542      	cmp	r2, r8
 8000d3a:	d229      	bcs.n	8000d90 <__udivmoddi4+0x2e4>
 8000d3c:	18ba      	adds	r2, r7, r2
 8000d3e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d42:	d2c4      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d44:	4542      	cmp	r2, r8
 8000d46:	d2c2      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d48:	f1a9 0102 	sub.w	r1, r9, #2
 8000d4c:	443a      	add	r2, r7
 8000d4e:	e7be      	b.n	8000cce <__udivmoddi4+0x222>
 8000d50:	45f0      	cmp	r8, lr
 8000d52:	d29d      	bcs.n	8000c90 <__udivmoddi4+0x1e4>
 8000d54:	ebbe 0302 	subs.w	r3, lr, r2
 8000d58:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	46e1      	mov	r9, ip
 8000d60:	e796      	b.n	8000c90 <__udivmoddi4+0x1e4>
 8000d62:	eba7 0909 	sub.w	r9, r7, r9
 8000d66:	4449      	add	r1, r9
 8000d68:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d6c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d70:	fb09 f804 	mul.w	r8, r9, r4
 8000d74:	e7db      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d76:	4673      	mov	r3, lr
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1ce>
 8000d7a:	4650      	mov	r0, sl
 8000d7c:	e766      	b.n	8000c4c <__udivmoddi4+0x1a0>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e6fd      	b.n	8000b7e <__udivmoddi4+0xd2>
 8000d82:	443b      	add	r3, r7
 8000d84:	3a02      	subs	r2, #2
 8000d86:	e733      	b.n	8000bf0 <__udivmoddi4+0x144>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	e71c      	b.n	8000bca <__udivmoddi4+0x11e>
 8000d90:	4649      	mov	r1, r9
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x222>
 8000d94:	eba1 0109 	sub.w	r1, r1, r9
 8000d98:	46c4      	mov	ip, r8
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fb09 f804 	mul.w	r8, r9, r4
 8000da2:	e7c4      	b.n	8000d2e <__udivmoddi4+0x282>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
 8000da8:	b480      	push	{r7}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	603b      	str	r3, [r7, #0]
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
#else
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000dbc:	d11a      	bne.n	8000df4 <LL_USART_SetBaudRate+0x4c>
#endif /* USART_PRESC_PRESCALER */
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	005a      	lsls	r2, r3, #1
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	085b      	lsrs	r3, r3, #1
 8000dc6:	441a      	add	r2, r3
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
    brrtemp = usartdiv & 0xFFF0U;
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	085b      	lsrs	r3, r3, #1
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	60da      	str	r2, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif /* USART_PRESC_PRESCALER */
  }
}
 8000df2:	e00a      	b.n	8000e0a <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	085a      	lsrs	r2, r3, #1
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	441a      	add	r2, r3
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	461a      	mov	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	60da      	str	r2, [r3, #12]
}
 8000e0a:	bf00      	nop
 8000e0c:	371c      	adds	r7, #28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <Temp_Sensor_Init>:
#include "stm32l4xx_ll_usart.h"


/*------INIZIALIZZAZIONE SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Init(void)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
	uint8_t data = 0xF0;
 8000e1e:	23f0      	movs	r3, #240	@ 0xf0
 8000e20:	71fb      	strb	r3, [r7, #7]

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 9600);
 8000e22:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e24:	681c      	ldr	r4, [r3, #0]
 8000e26:	f00f f99d 	bl	8010164 <HAL_RCC_GetPCLK2Freq>
 8000e2a:	4601      	mov	r1, r0
 8000e2c:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000e30:	2200      	movs	r2, #0
 8000e32:	4620      	mov	r0, r4
 8000e34:	f7ff ffb8 	bl	8000da8 <LL_USART_SetBaudRate>

	HAL_UART_Transmit(TEMP_UART, &data, 1, 100);  // low for 500+us
 8000e38:	1df9      	adds	r1, r7, #7
 8000e3a:	2364      	movs	r3, #100	@ 0x64
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	4813      	ldr	r0, [pc, #76]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e40:	f013 fc6a 	bl	8014718 <HAL_UART_Transmit>
	if (HAL_UART_Receive(TEMP_UART, &data, 1, 1000) != HAL_OK)
 8000e44:	1df9      	adds	r1, r7, #7
 8000e46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	480f      	ldr	r0, [pc, #60]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e4e:	f013 fcec 	bl	801482a <HAL_UART_Receive>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <Temp_Sensor_Init+0x44>
		while(1);
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <Temp_Sensor_Init+0x40>

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 115200);
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e5e:	681c      	ldr	r4, [r3, #0]
 8000e60:	f00f f980 	bl	8010164 <HAL_RCC_GetPCLK2Freq>
 8000e64:	4601      	mov	r1, r0
 8000e66:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	f7ff ff9b 	bl	8000da8 <LL_USART_SetBaudRate>

	if (data == 0xF0)
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2bf0      	cmp	r3, #240	@ 0xf0
 8000e76:	d101      	bne.n	8000e7c <Temp_Sensor_Init+0x64>
		while(1);
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <Temp_Sensor_Init+0x60>

	Temp_Sensor_Write(0xCC);  // skip ROM
 8000e7c:	20cc      	movs	r0, #204	@ 0xcc
 8000e7e:	f000 f807 	bl	8000e90 <Temp_Sensor_Write>
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd90      	pop	{r4, r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000059c 	.word	0x2000059c

08000e90 <Temp_Sensor_Write>:

/*------SCRITTURA SU SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Write(uint8_t data)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[8];

	for (int i=0; i<8; i++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	e017      	b.n	8000ed0 <Temp_Sensor_Write+0x40>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 8000ea0:	79fa      	ldrb	r2, [r7, #7]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	fa42 f303 	asr.w	r3, r2, r3
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d006      	beq.n	8000ebe <Temp_Sensor_Write+0x2e>
		{
			buffer[i] = 0xFF;  // write 1
 8000eb0:	f107 020c 	add.w	r2, r7, #12
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	22ff      	movs	r2, #255	@ 0xff
 8000eba:	701a      	strb	r2, [r3, #0]
 8000ebc:	e005      	b.n	8000eca <Temp_Sensor_Write+0x3a>
		}
		else  // if the bit is low
		{
			buffer[i] = 0;  // write 0
 8000ebe:	f107 020c 	add.w	r2, r7, #12
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<8; i++)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	2b07      	cmp	r3, #7
 8000ed4:	dde4      	ble.n	8000ea0 <Temp_Sensor_Write+0x10>
		}
	}

	HAL_UART_Transmit(TEMP_UART, buffer, 8, 100);
 8000ed6:	f107 010c 	add.w	r1, r7, #12
 8000eda:	2364      	movs	r3, #100	@ 0x64
 8000edc:	2208      	movs	r2, #8
 8000ede:	4803      	ldr	r0, [pc, #12]	@ (8000eec <Temp_Sensor_Write+0x5c>)
 8000ee0:	f013 fc1a 	bl	8014718 <HAL_UART_Transmit>
}
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	2000059c 	.word	0x2000059c

08000ef0 <Temp_Sensor_ReadByte>:

/*------LETTURA BYTE DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadByte(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
	uint8_t RxByte = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	71bb      	strb	r3, [r7, #6]
 8000efe:	e00e      	b.n	8000f1e <Temp_Sensor_ReadByte+0x2e>
	{
		RxByte >>= 1;
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	085b      	lsrs	r3, r3, #1
 8000f04:	71fb      	strb	r3, [r7, #7]
		if (Temp_Sensor_ReadBit())
 8000f06:	f000 f813 	bl	8000f30 <Temp_Sensor_ReadBit>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <Temp_Sensor_ReadByte+0x28>
		{
			RxByte |= 0x80;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f16:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8000f18:	79bb      	ldrb	r3, [r7, #6]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	71bb      	strb	r3, [r7, #6]
 8000f1e:	79bb      	ldrb	r3, [r7, #6]
 8000f20:	2b07      	cmp	r3, #7
 8000f22:	d9ed      	bls.n	8000f00 <Temp_Sensor_ReadByte+0x10>
		}
	}
	return RxByte;
 8000f24:	79fb      	ldrb	r3, [r7, #7]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <Temp_Sensor_ReadBit>:

/*------LETTURA BIT DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadBit(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
    uint8_t ReadBitCMD = 0xFF;
 8000f36:	23ff      	movs	r3, #255	@ 0xff
 8000f38:	71fb      	strb	r3, [r7, #7]
    uint8_t RxBit;

    // Send Read Bit CMD
    HAL_UART_Transmit(&huart1, &ReadBitCMD, 1, 1);
 8000f3a:	1df9      	adds	r1, r7, #7
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4808      	ldr	r0, [pc, #32]	@ (8000f64 <Temp_Sensor_ReadBit+0x34>)
 8000f42:	f013 fbe9 	bl	8014718 <HAL_UART_Transmit>
    // Receive The Bit
    HAL_UART_Receive(&huart1, &RxBit, 1, 1);
 8000f46:	1db9      	adds	r1, r7, #6
 8000f48:	2301      	movs	r3, #1
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <Temp_Sensor_ReadBit+0x34>)
 8000f4e:	f013 fc6c 	bl	801482a <HAL_UART_Receive>

    return (RxBit & 0x01);
 8000f52:	79bb      	ldrb	r3, [r7, #6]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000624 	.word	0x20000624

08000f68 <Read_Temperature>:

/*------LETTURA TEMPERATURA------*/
uint16_t Read_Temperature(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
	uint8_t Temp_LSB = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_MSB = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	71bb      	strb	r3, [r7, #6]
	uint16_t Temp = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	80bb      	strh	r3, [r7, #4]
	
	Temp_Sensor_Init();
 8000f7a:	f7ff ff4d 	bl	8000e18 <Temp_Sensor_Init>
	Temp_Sensor_Write(0xCC);  // skip ROM
 8000f7e:	20cc      	movs	r0, #204	@ 0xcc
 8000f80:	f7ff ff86 	bl	8000e90 <Temp_Sensor_Write>

	uint8_t status = Temp_Sensor_ReadBit();
 8000f84:	f7ff ffd4 	bl	8000f30 <Temp_Sensor_ReadBit>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	70fb      	strb	r3, [r7, #3]

	if (status) 
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d01d      	beq.n	8000fce <Read_Temperature+0x66>
	{
		Temp_Sensor_Write(0xBE);  // read Scratch-pad
 8000f92:	20be      	movs	r0, #190	@ 0xbe
 8000f94:	f7ff ff7c 	bl	8000e90 <Temp_Sensor_Write>
		Temp_LSB = Temp_Sensor_ReadByte();
 8000f98:	f7ff ffaa 	bl	8000ef0 <Temp_Sensor_ReadByte>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	71fb      	strb	r3, [r7, #7]
	    Temp_MSB = Temp_Sensor_ReadByte();
 8000fa0:	f7ff ffa6 	bl	8000ef0 <Temp_Sensor_ReadByte>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	71bb      	strb	r3, [r7, #6]
		Temp_Sensor_Init();
 8000fa8:	f7ff ff36 	bl	8000e18 <Temp_Sensor_Init>
		Temp_Sensor_Write(0xCC);  // skip ROM
 8000fac:	20cc      	movs	r0, #204	@ 0xcc
 8000fae:	f7ff ff6f 	bl	8000e90 <Temp_Sensor_Write>
		Temp_Sensor_Write(0x44);  // convert t
 8000fb2:	2044      	movs	r0, #68	@ 0x44
 8000fb4:	f7ff ff6c 	bl	8000e90 <Temp_Sensor_Write>
		Temp = ((Temp_MSB << 8)) | Temp_LSB;
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	80bb      	strh	r3, [r7, #4]
		return Temp;
 8000fca:	88bb      	ldrh	r3, [r7, #4]
 8000fcc:	e000      	b.n	8000fd0 <Read_Temperature+0x68>
	}
	
	return 0; 
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <INA3221_Init>:
#include "INA3221.h"
#include "INA3221_reg.h"
#include "peripherals.h"

void INA3221_Init()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
	uint16_t rcheck = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	80fb      	strh	r3, [r7, #6]

	INA3221_write_reg(INA3221_REG_CONFIG, 0x8000);   //RESET
 8000fe2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 f87a 	bl	80010e0 <INA3221_write_reg>

	HAL_Delay(100);
 8000fec:	2064      	movs	r0, #100	@ 0x64
 8000fee:	f009 fe97 	bl	800ad20 <HAL_Delay>

	INA3221_read_reg(INA3221_REG_MID, &rcheck);
 8000ff2:	1dbb      	adds	r3, r7, #6
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	20fe      	movs	r0, #254	@ 0xfe
 8000ff8:	f000 f83c 	bl	8001074 <INA3221_read_reg>

	if(rcheck != INA3221_DEFAULT_MID)
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	f245 4249 	movw	r2, #21577	@ 0x5449
 8001002:	4293      	cmp	r3, r2
 8001004:	d001      	beq.n	800100a <INA3221_Init+0x32>
		while(1);
 8001006:	bf00      	nop
 8001008:	e7fd      	b.n	8001006 <INA3221_Init+0x2e>

	INA3221_write_reg(INA3221_REG_CONFIG, 0x7D27);   //CH1 CH2 CH3 Enabled, 512 AVG, 1.1ms conv time, continous mode
 800100a:	f647 5127 	movw	r1, #32039	@ 0x7d27
 800100e:	2000      	movs	r0, #0
 8001010:	f000 f866 	bl	80010e0 <INA3221_write_reg>
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <INA3221_Read_Measure>:

void INA3221_Read_Measure(supply_bus_t *measure)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_1, (uint16_t *)&(measure->v1));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4619      	mov	r1, r3
 8001028:	2002      	movs	r0, #2
 800102a:	f000 f823 	bl	8001074 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_2, (uint16_t *)&(measure->v2));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3302      	adds	r3, #2
 8001032:	4619      	mov	r1, r3
 8001034:	2004      	movs	r0, #4
 8001036:	f000 f81d 	bl	8001074 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_3, (uint16_t *)&(measure->v3));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3304      	adds	r3, #4
 800103e:	4619      	mov	r1, r3
 8001040:	2006      	movs	r0, #6
 8001042:	f000 f817 	bl	8001074 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_1, (uint16_t *)&(measure->i1));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3306      	adds	r3, #6
 800104a:	4619      	mov	r1, r3
 800104c:	2001      	movs	r0, #1
 800104e:	f000 f811 	bl	8001074 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_2, (uint16_t *)&(measure->i2));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3308      	adds	r3, #8
 8001056:	4619      	mov	r1, r3
 8001058:	2003      	movs	r0, #3
 800105a:	f000 f80b 	bl	8001074 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_3, (uint16_t *)&(measure->i3));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	330a      	adds	r3, #10
 8001062:	4619      	mov	r1, r3
 8001064:	2005      	movs	r0, #5
 8001066:	f000 f805 	bl	8001074 <INA3221_read_reg>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <INA3221_read_reg>:


int INA3221_read_reg(uint8_t reg, uint16_t *rdata)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af02      	add	r7, sp, #8
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
 8001084:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 8001086:	2300      	movs	r3, #0
 8001088:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, &reg, 1, 100) == HAL_OK)
 800108a:	1dfa      	adds	r2, r7, #7
 800108c:	2364      	movs	r3, #100	@ 0x64
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	2180      	movs	r1, #128	@ 0x80
 8001094:	4811      	ldr	r0, [pc, #68]	@ (80010dc <INA3221_read_reg+0x68>)
 8001096:	f00d f8c9 	bl	800e22c <HAL_I2C_Master_Transmit>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d118      	bne.n	80010d2 <INA3221_read_reg+0x5e>
	{

		if(HAL_I2C_Master_Receive(I2C,  INA3221_ADDR_0 << 1, data, 2, 100) == HAL_OK)
 80010a0:	f107 0208 	add.w	r2, r7, #8
 80010a4:	2364      	movs	r3, #100	@ 0x64
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2302      	movs	r3, #2
 80010aa:	2180      	movs	r1, #128	@ 0x80
 80010ac:	480b      	ldr	r0, [pc, #44]	@ (80010dc <INA3221_read_reg+0x68>)
 80010ae:	f00d f9d5 	bl	800e45c <HAL_I2C_Master_Receive>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10c      	bne.n	80010d2 <INA3221_read_reg+0x5e>
		{
			result = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 80010bc:	7a3b      	ldrb	r3, [r7, #8]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	7a7b      	ldrb	r3, [r7, #9]
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200002e8 	.word	0x200002e8

080010e0 <INA3221_write_reg>:


int INA3221_write_reg(uint8_t reg, uint16_t wdata)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	4603      	mov	r3, r0
 80010e8:	460a      	mov	r2, r1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	4613      	mov	r3, r2
 80010ee:	80bb      	strh	r3, [r7, #4]
    int result = -1;
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
 80010f4:	60fb      	str	r3, [r7, #12]
    uint8_t data[3];
    
    data[0] = reg;                    
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	723b      	strb	r3, [r7, #8]
    data[1] = (wdata >> 8);          
 80010fa:	88bb      	ldrh	r3, [r7, #4]
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	b29b      	uxth	r3, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	727b      	strb	r3, [r7, #9]
    data[2] = (wdata & 0xFF);        
 8001104:	88bb      	ldrh	r3, [r7, #4]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	72bb      	strb	r3, [r7, #10]

    if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, data, 3, 100) == HAL_OK)
 800110a:	f107 0208 	add.w	r2, r7, #8
 800110e:	2364      	movs	r3, #100	@ 0x64
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2303      	movs	r3, #3
 8001114:	2180      	movs	r1, #128	@ 0x80
 8001116:	4806      	ldr	r0, [pc, #24]	@ (8001130 <INA3221_write_reg+0x50>)
 8001118:	f00d f888 	bl	800e22c <HAL_I2C_Master_Transmit>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <INA3221_write_reg+0x46>
    {
        result = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
    }
    
    return result;
 8001126:	68fb      	ldr	r3, [r7, #12]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200002e8 	.word	0x200002e8

08001134 <RTC_Init>:
#include "RTC.h"


/*-----INIZiALIZZAZIONE ORA RTC-----*/
void RTC_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
	for (int retry = 0; retry < 3; retry++)
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	e00b      	b.n	8001158 <RTC_Init+0x24>
	{
		if (Get_DateTime_From_Network())
 8001140:	f000 f814 	bl	800116c <Get_DateTime_From_Network>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10c      	bne.n	8001164 <RTC_Init+0x30>
		{
			return;
		}
		HAL_Delay(1000);
 800114a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800114e:	f009 fde7 	bl	800ad20 <HAL_Delay>
	for (int retry = 0; retry < 3; retry++)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3301      	adds	r3, #1
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b02      	cmp	r3, #2
 800115c:	ddf0      	ble.n	8001140 <RTC_Init+0xc>
	}
	Set_Default_DateTime();
 800115e:	f000 f903 	bl	8001368 <Set_Default_DateTime>
 8001162:	e000      	b.n	8001166 <RTC_Init+0x32>
			return;
 8001164:	bf00      	nop
}
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <Get_DateTime_From_Network>:

/*-----SINCRONIZZAZIONE RTC DA RETE-----*/
int Get_DateTime_From_Network(void)
{
 800116c:	b5b0      	push	{r4, r5, r7, lr}
 800116e:	b0a2      	sub	sp, #136	@ 0x88
 8001170:	af00      	add	r7, sp, #0
	char response[100] = {0};
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	2264      	movs	r2, #100	@ 0x64
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f014 fe74 	bl	8015e68 <memset>
	RTC_DateTypeDef sDate = {0};
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
	RTC_TimeTypeDef sTime = {0};
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

	SIM_Send_Command("AT+CCLK?\r");
 8001192:	4871      	ldr	r0, [pc, #452]	@ (8001358 <Get_DateTime_From_Network+0x1ec>)
 8001194:	f000 fc4c 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8001198:	f107 031c 	add.w	r3, r7, #28
 800119c:	4618      	mov	r0, r3
 800119e:	f000 fc73 	bl	8001a88 <SIM_Receive_Response>

    char* cclk_pos = strstr(response, "+CCLK: \"");
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	496d      	ldr	r1, [pc, #436]	@ (800135c <Get_DateTime_From_Network+0x1f0>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f014 fe97 	bl	8015edc <strstr>
 80011ae:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (cclk_pos == NULL)
 80011b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <Get_DateTime_From_Network+0x52>
	{
        return 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e0c8      	b.n	8001350 <Get_DateTime_From_Network+0x1e4>
    }

    char* time_start = cclk_pos + 8;
 80011be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011c2:	3308      	adds	r3, #8
 80011c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    if (strlen(time_start) < 17)
 80011c8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80011cc:	f7ff f80a 	bl	80001e4 <strlen>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b10      	cmp	r3, #16
 80011d4:	d801      	bhi.n	80011da <Get_DateTime_From_Network+0x6e>
	{
		return 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e0ba      	b.n	8001350 <Get_DateTime_From_Network+0x1e4>
	}

	sDate.Year = (time_start[0] - '0') * 10 + (time_start[1] - '0');
 80011da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	3b30      	subs	r3, #48	@ 0x30
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	461a      	mov	r2, r3
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80011f2:	3301      	adds	r3, #1
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	3b30      	subs	r3, #48	@ 0x30
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	76fb      	strb	r3, [r7, #27]
	sDate.Month = (time_start[3] - '0') * 10 + (time_start[4] - '0');
 8001200:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001204:	3303      	adds	r3, #3
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	3b30      	subs	r3, #48	@ 0x30
 800120a:	b2db      	uxtb	r3, r3
 800120c:	461a      	mov	r2, r3
 800120e:	0092      	lsls	r2, r2, #2
 8001210:	4413      	add	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	b2da      	uxtb	r2, r3
 8001216:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800121a:	3304      	adds	r3, #4
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	b2db      	uxtb	r3, r3
 8001222:	3b30      	subs	r3, #48	@ 0x30
 8001224:	b2db      	uxtb	r3, r3
 8001226:	767b      	strb	r3, [r7, #25]
	sDate.Date = (time_start[6] - '0') * 10 + (time_start[7] - '0');
 8001228:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800122c:	3306      	adds	r3, #6
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	3b30      	subs	r3, #48	@ 0x30
 8001232:	b2db      	uxtb	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	4413      	add	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	b2da      	uxtb	r2, r3
 800123e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001242:	3307      	adds	r3, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	b2db      	uxtb	r3, r3
 800124a:	3b30      	subs	r3, #48	@ 0x30
 800124c:	b2db      	uxtb	r3, r3
 800124e:	76bb      	strb	r3, [r7, #26]

	sTime.Hours = (time_start[9] - '0') * 10 + (time_start[10] - '0');
 8001250:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001254:	3309      	adds	r3, #9
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	3b30      	subs	r3, #48	@ 0x30
 800125a:	b2db      	uxtb	r3, r3
 800125c:	461a      	mov	r2, r3
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4413      	add	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	b2da      	uxtb	r2, r3
 8001266:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800126a:	330a      	adds	r3, #10
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	b2db      	uxtb	r3, r3
 8001272:	3b30      	subs	r3, #48	@ 0x30
 8001274:	b2db      	uxtb	r3, r3
 8001276:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = (time_start[12] - '0') * 10 + (time_start[13] - '0');
 8001278:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800127c:	330c      	adds	r3, #12
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	3b30      	subs	r3, #48	@ 0x30
 8001282:	b2db      	uxtb	r3, r3
 8001284:	461a      	mov	r2, r3
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	4413      	add	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	b2da      	uxtb	r2, r3
 800128e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001292:	330d      	adds	r3, #13
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	4413      	add	r3, r2
 8001298:	b2db      	uxtb	r3, r3
 800129a:	3b30      	subs	r3, #48	@ 0x30
 800129c:	b2db      	uxtb	r3, r3
 800129e:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = (time_start[15] - '0') * 10 + (time_start[16] - '0');
 80012a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012a4:	330f      	adds	r3, #15
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	3b30      	subs	r3, #48	@ 0x30
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	461a      	mov	r2, r3
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012ba:	3310      	adds	r3, #16
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	3b30      	subs	r3, #48	@ 0x30
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	71bb      	strb	r3, [r7, #6]

	if (sDate.Month < 1 || sDate.Month > 12 ||
 80012c8:	7e7b      	ldrb	r3, [r7, #25]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d011      	beq.n	80012f2 <Get_DateTime_From_Network+0x186>
 80012ce:	7e7b      	ldrb	r3, [r7, #25]
 80012d0:	2b0c      	cmp	r3, #12
 80012d2:	d80e      	bhi.n	80012f2 <Get_DateTime_From_Network+0x186>
        sDate.Date < 1 || sDate.Date > 31 ||
 80012d4:	7ebb      	ldrb	r3, [r7, #26]
	if (sDate.Month < 1 || sDate.Month > 12 ||
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00b      	beq.n	80012f2 <Get_DateTime_From_Network+0x186>
        sDate.Date < 1 || sDate.Date > 31 ||
 80012da:	7ebb      	ldrb	r3, [r7, #26]
 80012dc:	2b1f      	cmp	r3, #31
 80012de:	d808      	bhi.n	80012f2 <Get_DateTime_From_Network+0x186>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 80012e0:	793b      	ldrb	r3, [r7, #4]
        sDate.Date < 1 || sDate.Date > 31 ||
 80012e2:	2b17      	cmp	r3, #23
 80012e4:	d805      	bhi.n	80012f2 <Get_DateTime_From_Network+0x186>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 80012e6:	797b      	ldrb	r3, [r7, #5]
 80012e8:	2b3b      	cmp	r3, #59	@ 0x3b
 80012ea:	d802      	bhi.n	80012f2 <Get_DateTime_From_Network+0x186>
 80012ec:	79bb      	ldrb	r3, [r7, #6]
 80012ee:	2b3b      	cmp	r3, #59	@ 0x3b
 80012f0:	d901      	bls.n	80012f6 <Get_DateTime_From_Network+0x18a>
        return 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e02c      	b.n	8001350 <Get_DateTime_From_Network+0x1e4>
    }

	sDate.WeekDay = Calculate_Weekday(sDate.Year + 2000, sDate.Month, sDate.Date);
 80012f6:	7efb      	ldrb	r3, [r7, #27]
 80012f8:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	7e79      	ldrb	r1, [r7, #25]
 8001300:	7eba      	ldrb	r2, [r7, #26]
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f874 	bl	80013f0 <Calculate_Weekday>
 8001308:	4603      	mov	r3, r0
 800130a:	763b      	strb	r3, [r7, #24]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001314:	f107 0318 	add.w	r3, r7, #24
 8001318:	2200      	movs	r2, #0
 800131a:	4619      	mov	r1, r3
 800131c:	4810      	ldr	r0, [pc, #64]	@ (8001360 <Get_DateTime_From_Network+0x1f4>)
 800131e:	f00f fdd4 	bl	8010eca <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	4619      	mov	r1, r3
 8001328:	480d      	ldr	r0, [pc, #52]	@ (8001360 <Get_DateTime_From_Network+0x1f4>)
 800132a:	f00f fcd5 	bl	8010cd8 <HAL_RTC_SetTime>

    sys.onDate = sDate;
 800132e:	4b0d      	ldr	r3, [pc, #52]	@ (8001364 <Get_DateTime_From_Network+0x1f8>)
 8001330:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001334:	461a      	mov	r2, r3
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	6413      	str	r3, [r2, #64]	@ 0x40
    sys.onTime = sTime;
 800133a:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <Get_DateTime_From_Network+0x1f8>)
 800133c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001340:	f103 0444 	add.w	r4, r3, #68	@ 0x44
 8001344:	1d3d      	adds	r5, r7, #4
 8001346:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001348:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800134a:	682b      	ldr	r3, [r5, #0]
 800134c:	6023      	str	r3, [r4, #0]
    
	return 1;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	3788      	adds	r7, #136	@ 0x88
 8001354:	46bd      	mov	sp, r7
 8001356:	bdb0      	pop	{r4, r5, r7, pc}
 8001358:	08017020 	.word	0x08017020
 800135c:	0801702c 	.word	0x0801702c
 8001360:	20000380 	.word	0x20000380
 8001364:	20000740 	.word	0x20000740

08001368 <Set_Default_DateTime>:

/*-----DATA E ORA DI DEFAULT 1/1/2020 00:00:00-----*/
void Set_Default_DateTime(void)
{
 8001368:	b5b0      	push	{r4, r5, r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
    RTC_DateTypeDef sDate = {0};
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
    RTC_TimeTypeDef sTime = {0};
 8001372:	463b      	mov	r3, r7
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]

    // Default: 01/01/2020 00:00:00
    sDate.Year = 20;  // 2020
 8001380:	2314      	movs	r3, #20
 8001382:	75fb      	strb	r3, [r7, #23]
    sDate.Month = RTC_MONTH_JANUARY;
 8001384:	2301      	movs	r3, #1
 8001386:	757b      	strb	r3, [r7, #21]
    sDate.Date = 1;
 8001388:	2301      	movs	r3, #1
 800138a:	75bb      	strb	r3, [r7, #22]
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY; // 1 Jan 2020 era mercoledì
 800138c:	2303      	movs	r3, #3
 800138e:	753b      	strb	r3, [r7, #20]

    sTime.Hours = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	703b      	strb	r3, [r7, #0]
    sTime.Minutes = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	707b      	strb	r3, [r7, #1]
    sTime.Seconds = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	70bb      	strb	r3, [r7, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]

    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	4619      	mov	r1, r3
 80013ac:	480e      	ldr	r0, [pc, #56]	@ (80013e8 <Set_Default_DateTime+0x80>)
 80013ae:	f00f fd8c 	bl	8010eca <HAL_RTC_SetDate>
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80013b2:	463b      	mov	r3, r7
 80013b4:	2200      	movs	r2, #0
 80013b6:	4619      	mov	r1, r3
 80013b8:	480b      	ldr	r0, [pc, #44]	@ (80013e8 <Set_Default_DateTime+0x80>)
 80013ba:	f00f fc8d 	bl	8010cd8 <HAL_RTC_SetTime>

    sys.onDate = sDate;
 80013be:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <Set_Default_DateTime+0x84>)
 80013c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013c4:	461a      	mov	r2, r3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	6413      	str	r3, [r2, #64]	@ 0x40
    sys.onTime = sTime;
 80013ca:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <Set_Default_DateTime+0x84>)
 80013cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013d0:	f103 0444 	add.w	r4, r3, #68	@ 0x44
 80013d4:	463d      	mov	r5, r7
 80013d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013da:	682b      	ldr	r3, [r5, #0]
 80013dc:	6023      	str	r3, [r4, #0]
}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bdb0      	pop	{r4, r5, r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000380 	.word	0x20000380
 80013ec:	20000740 	.word	0x20000740

080013f0 <Calculate_Weekday>:

/*-----CALCOLO GIORNO SETTIMANA-----*/
uint8_t Calculate_Weekday(uint16_t year, uint8_t month, uint8_t day)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
 80013fa:	460b      	mov	r3, r1
 80013fc:	717b      	strb	r3, [r7, #5]
 80013fe:	4613      	mov	r3, r2
 8001400:	713b      	strb	r3, [r7, #4]
    // Algoritmo di Zeller per calcolo giorno settimana
    if (month < 3) {
 8001402:	797b      	ldrb	r3, [r7, #5]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d805      	bhi.n	8001414 <Calculate_Weekday+0x24>
        month += 12;
 8001408:	797b      	ldrb	r3, [r7, #5]
 800140a:	330c      	adds	r3, #12
 800140c:	717b      	strb	r3, [r7, #5]
        year--;
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	3b01      	subs	r3, #1
 8001412:	80fb      	strh	r3, [r7, #6]
    }
    uint8_t zeller_day = (day + ((13 * (month + 1)) / 5) + year + (year / 4) - (year / 100) + (year / 400)) % 7;
 8001414:	7939      	ldrb	r1, [r7, #4]
 8001416:	797b      	ldrb	r3, [r7, #5]
 8001418:	1c5a      	adds	r2, r3, #1
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	4a1e      	ldr	r2, [pc, #120]	@ (80014a0 <Calculate_Weekday+0xb0>)
 8001426:	fb82 0203 	smull	r0, r2, r2, r3
 800142a:	1052      	asrs	r2, r2, #1
 800142c:	17db      	asrs	r3, r3, #31
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	18ca      	adds	r2, r1, r3
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	4413      	add	r3, r2
 8001436:	88fa      	ldrh	r2, [r7, #6]
 8001438:	0892      	lsrs	r2, r2, #2
 800143a:	b292      	uxth	r2, r2
 800143c:	4413      	add	r3, r2
 800143e:	88fa      	ldrh	r2, [r7, #6]
 8001440:	4918      	ldr	r1, [pc, #96]	@ (80014a4 <Calculate_Weekday+0xb4>)
 8001442:	fba1 1202 	umull	r1, r2, r1, r2
 8001446:	0952      	lsrs	r2, r2, #5
 8001448:	b292      	uxth	r2, r2
 800144a:	1a9b      	subs	r3, r3, r2
 800144c:	88fa      	ldrh	r2, [r7, #6]
 800144e:	4915      	ldr	r1, [pc, #84]	@ (80014a4 <Calculate_Weekday+0xb4>)
 8001450:	fba1 1202 	umull	r1, r2, r1, r2
 8001454:	09d2      	lsrs	r2, r2, #7
 8001456:	b292      	uxth	r2, r2
 8001458:	441a      	add	r2, r3
 800145a:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <Calculate_Weekday+0xb8>)
 800145c:	fb83 1302 	smull	r1, r3, r3, r2
 8001460:	4413      	add	r3, r2
 8001462:	1099      	asrs	r1, r3, #2
 8001464:	17d3      	asrs	r3, r2, #31
 8001466:	1ac9      	subs	r1, r1, r3
 8001468:	460b      	mov	r3, r1
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	1a5b      	subs	r3, r3, r1
 800146e:	1ad1      	subs	r1, r2, r3
 8001470:	460b      	mov	r3, r1
 8001472:	73fb      	strb	r3, [r7, #15]

    uint8_t hal_weekday_map[] = {RTC_WEEKDAY_SATURDAY, RTC_WEEKDAY_SUNDAY, RTC_WEEKDAY_MONDAY,
 8001474:	4a0d      	ldr	r2, [pc, #52]	@ (80014ac <Calculate_Weekday+0xbc>)
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800147e:	6018      	str	r0, [r3, #0]
 8001480:	3304      	adds	r3, #4
 8001482:	8019      	strh	r1, [r3, #0]
 8001484:	3302      	adds	r3, #2
 8001486:	0c0a      	lsrs	r2, r1, #16
 8001488:	701a      	strb	r2, [r3, #0]
                                 RTC_WEEKDAY_TUESDAY, RTC_WEEKDAY_WEDNESDAY, RTC_WEEKDAY_THURSDAY, RTC_WEEKDAY_FRIDAY};

    return hal_weekday_map[zeller_day];
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	3310      	adds	r3, #16
 800148e:	443b      	add	r3, r7
 8001490:	f813 3c08 	ldrb.w	r3, [r3, #-8]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	66666667 	.word	0x66666667
 80014a4:	51eb851f 	.word	0x51eb851f
 80014a8:	92492493 	.word	0x92492493
 80014ac:	08017038 	.word	0x08017038

080014b0 <SIM_Init>:
#include "process.h"
#include "leds.h"

/*------INIZIALIZZAZIONE DEL MODULO LTE------*/
int SIM_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80014b6:	af00      	add	r7, sp, #0
	char command[256];
	char response[256];
	sprintf(sys.apn, "a");
 80014b8:	49bb      	ldr	r1, [pc, #748]	@ (80017a8 <SIM_Init+0x2f8>)
 80014ba:	48bc      	ldr	r0, [pc, #752]	@ (80017ac <SIM_Init+0x2fc>)
 80014bc:	f014 fc74 	bl	8015da8 <siprintf>
	sprintf(sys.MQTT.clientID, "a");
 80014c0:	49b9      	ldr	r1, [pc, #740]	@ (80017a8 <SIM_Init+0x2f8>)
 80014c2:	48bb      	ldr	r0, [pc, #748]	@ (80017b0 <SIM_Init+0x300>)
 80014c4:	f014 fc70 	bl	8015da8 <siprintf>
	sprintf(sys.MQTT.server_name, "a");
 80014c8:	49b7      	ldr	r1, [pc, #732]	@ (80017a8 <SIM_Init+0x2f8>)
 80014ca:	48ba      	ldr	r0, [pc, #744]	@ (80017b4 <SIM_Init+0x304>)
 80014cc:	f014 fc6c 	bl	8015da8 <siprintf>
	sprintf(sys.MQTT.port, "a");
 80014d0:	49b5      	ldr	r1, [pc, #724]	@ (80017a8 <SIM_Init+0x2f8>)
 80014d2:	48b9      	ldr	r0, [pc, #740]	@ (80017b8 <SIM_Init+0x308>)
 80014d4:	f014 fc68 	bl	8015da8 <siprintf>
	sprintf(sys.MQTT.username, "a");
 80014d8:	49b3      	ldr	r1, [pc, #716]	@ (80017a8 <SIM_Init+0x2f8>)
 80014da:	48b8      	ldr	r0, [pc, #736]	@ (80017bc <SIM_Init+0x30c>)
 80014dc:	f014 fc64 	bl	8015da8 <siprintf>
	sprintf(sys.MQTT.password, "a");
 80014e0:	49b1      	ldr	r1, [pc, #708]	@ (80017a8 <SIM_Init+0x2f8>)
 80014e2:	48b7      	ldr	r0, [pc, #732]	@ (80017c0 <SIM_Init+0x310>)
 80014e4:	f014 fc60 	bl	8015da8 <siprintf>
	sprintf(sys.TCP.IP_address, "a");
 80014e8:	49af      	ldr	r1, [pc, #700]	@ (80017a8 <SIM_Init+0x2f8>)
 80014ea:	48b6      	ldr	r0, [pc, #728]	@ (80017c4 <SIM_Init+0x314>)
 80014ec:	f014 fc5c 	bl	8015da8 <siprintf>
	sprintf(sys.TCP.Port, "a");
 80014f0:	49ad      	ldr	r1, [pc, #692]	@ (80017a8 <SIM_Init+0x2f8>)
 80014f2:	48b5      	ldr	r0, [pc, #724]	@ (80017c8 <SIM_Init+0x318>)
 80014f4:	f014 fc58 	bl	8015da8 <siprintf>
	strcpy(sys.MQTT.Data_Topic, config.data_topic);
 80014f8:	49b4      	ldr	r1, [pc, #720]	@ (80017cc <SIM_Init+0x31c>)
 80014fa:	48b5      	ldr	r0, [pc, #724]	@ (80017d0 <SIM_Init+0x320>)
 80014fc:	f014 fd30 	bl	8015f60 <strcpy>
	strcpy(sys.MQTT.Command_Topic, config.command_topic);
 8001500:	49b4      	ldr	r1, [pc, #720]	@ (80017d4 <SIM_Init+0x324>)
 8001502:	48b5      	ldr	r0, [pc, #724]	@ (80017d8 <SIM_Init+0x328>)
 8001504:	f014 fd2c 	bl	8015f60 <strcpy>
	strcpy(sys.MQTT.OTA_Topic, config.ota_topic);
 8001508:	49b4      	ldr	r1, [pc, #720]	@ (80017dc <SIM_Init+0x32c>)
 800150a:	48b5      	ldr	r0, [pc, #724]	@ (80017e0 <SIM_Init+0x330>)
 800150c:	f014 fd28 	bl	8015f60 <strcpy>
	strcpy(sys.MQTT.Info_Topic, config.info_topic);
 8001510:	49b4      	ldr	r1, [pc, #720]	@ (80017e4 <SIM_Init+0x334>)
 8001512:	48b5      	ldr	r0, [pc, #724]	@ (80017e8 <SIM_Init+0x338>)
 8001514:	f014 fd24 	bl	8015f60 <strcpy>

	SIM_Power_On();
 8001518:	f000 fa74 	bl	8001a04 <SIM_Power_On>
	HAL_Delay(5000);
 800151c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001520:	f009 fbfe 	bl	800ad20 <HAL_Delay>

	SIM_Send_Command("AT\r");                                                                     //Verifica comunicazione
 8001524:	48b1      	ldr	r0, [pc, #708]	@ (80017ec <SIM_Init+0x33c>)
 8001526:	f000 fa83 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 800152a:	48b1      	ldr	r0, [pc, #708]	@ (80017f0 <SIM_Init+0x340>)
 800152c:	f000 feba 	bl	80022a4 <SIM_Wait_Response>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d002      	beq.n	800153c <SIM_Init+0x8c>
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	e23c      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+IPR=921600\r");                                                          //Baudrate a 921600
 800153c:	48ad      	ldr	r0, [pc, #692]	@ (80017f4 <SIM_Init+0x344>)
 800153e:	f000 fa77 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001542:	48ab      	ldr	r0, [pc, #684]	@ (80017f0 <SIM_Init+0x340>)
 8001544:	f000 feae 	bl	80022a4 <SIM_Wait_Response>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d002      	beq.n	8001554 <SIM_Init+0xa4>
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
 8001552:	e230      	b.n	80019b6 <SIM_Init+0x506>

	huart1.Init.BaudRate = 921600;
 8001554:	4ba8      	ldr	r3, [pc, #672]	@ (80017f8 <SIM_Init+0x348>)
 8001556:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800155a:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(SIM_UART);
 800155c:	48a6      	ldr	r0, [pc, #664]	@ (80017f8 <SIM_Init+0x348>)
 800155e:	f013 f837 	bl	80145d0 <HAL_UART_Init>

	SIM_Send_Command("AT+CFUN=1\r");                                                              //Full functionality
 8001562:	48a6      	ldr	r0, [pc, #664]	@ (80017fc <SIM_Init+0x34c>)
 8001564:	f000 fa64 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001568:	48a1      	ldr	r0, [pc, #644]	@ (80017f0 <SIM_Init+0x340>)
 800156a:	f000 fe9b 	bl	80022a4 <SIM_Wait_Response>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <SIM_Init+0xca>
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
 8001578:	e21d      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+CNMP=38\r");                                                             //Modalità solo LTE o NB-IoT
 800157a:	48a1      	ldr	r0, [pc, #644]	@ (8001800 <SIM_Init+0x350>)
 800157c:	f000 fa58 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001580:	489b      	ldr	r0, [pc, #620]	@ (80017f0 <SIM_Init+0x340>)
 8001582:	f000 fe8f 	bl	80022a4 <SIM_Wait_Response>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d002      	beq.n	8001592 <SIM_Init+0xe2>
 800158c:	f04f 33ff 	mov.w	r3, #4294967295
 8001590:	e211      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+CMNB=2\r");                                                              //NB-IoT
 8001592:	489c      	ldr	r0, [pc, #624]	@ (8001804 <SIM_Init+0x354>)
 8001594:	f000 fa4c 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001598:	4895      	ldr	r0, [pc, #596]	@ (80017f0 <SIM_Init+0x340>)
 800159a:	f000 fe83 	bl	80022a4 <SIM_Wait_Response>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d002      	beq.n	80015aa <SIM_Init+0xfa>
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295
 80015a8:	e205      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+NBSC=1\r");                                                              //Abilitazione scrambling feature DA VEDERE SE L'OPERATORE LA RICHIEDE
 80015aa:	4897      	ldr	r0, [pc, #604]	@ (8001808 <SIM_Init+0x358>)
 80015ac:	f000 fa40 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80015b0:	488f      	ldr	r0, [pc, #572]	@ (80017f0 <SIM_Init+0x340>)
 80015b2:	f000 fe77 	bl	80022a4 <SIM_Wait_Response>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d002      	beq.n	80015c2 <SIM_Init+0x112>
 80015bc:	f04f 33ff 	mov.w	r3, #4294967295
 80015c0:	e1f9      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+CEREG?\r");                                                              //Controllo registrazione alla rete
 80015c2:	4892      	ldr	r0, [pc, #584]	@ (800180c <SIM_Init+0x35c>)
 80015c4:	f000 fa34 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response);
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 fa5b 	bl	8001a88 <SIM_Receive_Response>
	int stat = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
	int n, stat_value;
	if(strstr(response, "+CEREG: ") != NULL)
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	498c      	ldr	r1, [pc, #560]	@ (8001810 <SIM_Init+0x360>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f014 fc7c 	bl	8015edc <strstr>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d03a      	beq.n	8001660 <SIM_Init+0x1b0>
	{
		while(stat != 1)
 80015ea:	e035      	b.n	8001658 <SIM_Init+0x1a8>
		{
			if(sscanf(response, "+CEREG: %d,%d", &n, &stat_value) >= 2) 
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	f107 0208 	add.w	r2, r7, #8
 80015f2:	f107 000c 	add.w	r0, r7, #12
 80015f6:	4987      	ldr	r1, [pc, #540]	@ (8001814 <SIM_Init+0x364>)
 80015f8:	f014 fbf8 	bl	8015dec <siscanf>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b01      	cmp	r3, #1
 8001600:	dd1e      	ble.n	8001640 <SIM_Init+0x190>
			{
				if(stat_value == 1 || stat_value == 5)
 8001602:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001606:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d006      	beq.n	800161e <SIM_Init+0x16e>
 8001610:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001614:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b05      	cmp	r3, #5
 800161c:	d103      	bne.n	8001626 <SIM_Init+0x176>
			    {
					 stat = 1;
 800161e:	2301      	movs	r3, #1
 8001620:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8001624:	e018      	b.n	8001658 <SIM_Init+0x1a8>
				}
				 else
				{
					SIM_Send_Command("AT+CEREG?\r");
 8001626:	4879      	ldr	r0, [pc, #484]	@ (800180c <SIM_Init+0x35c>)
 8001628:	f000 fa02 	bl	8001a30 <SIM_Send_Command>
					SIM_Receive_Response(response);
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	4618      	mov	r0, r3
 8001632:	f000 fa29 	bl	8001a88 <SIM_Receive_Response>
					HAL_Delay(1000);
 8001636:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800163a:	f009 fb71 	bl	800ad20 <HAL_Delay>
 800163e:	e00b      	b.n	8001658 <SIM_Init+0x1a8>
				}
			}
			else  
			{
				SIM_Send_Command("AT+CEREG?\r");
 8001640:	4872      	ldr	r0, [pc, #456]	@ (800180c <SIM_Init+0x35c>)
 8001642:	f000 f9f5 	bl	8001a30 <SIM_Send_Command>
				SIM_Receive_Response(response);
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	4618      	mov	r0, r3
 800164c:	f000 fa1c 	bl	8001a88 <SIM_Receive_Response>
				HAL_Delay(1000);
 8001650:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001654:	f009 fb64 	bl	800ad20 <HAL_Delay>
		while(stat != 1)
 8001658:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800165c:	2b01      	cmp	r3, #1
 800165e:	d1c5      	bne.n	80015ec <SIM_Init+0x13c>
			}
		}

	}

	sprintf(command, "AT+CGDCONT=1,\"IP\",\"%s\"\r", sys.apn);                                    //Configurazione APN
 8001660:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001664:	4a51      	ldr	r2, [pc, #324]	@ (80017ac <SIM_Init+0x2fc>)
 8001666:	496c      	ldr	r1, [pc, #432]	@ (8001818 <SIM_Init+0x368>)
 8001668:	4618      	mov	r0, r3
 800166a:	f014 fb9d 	bl	8015da8 <siprintf>
	SIM_Send_Command(command);
 800166e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f9dc 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001678:	485d      	ldr	r0, [pc, #372]	@ (80017f0 <SIM_Init+0x340>)
 800167a:	f000 fe13 	bl	80022a4 <SIM_Wait_Response>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <SIM_Init+0x1da>
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
 8001688:	e195      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+CNACT=1\r");                                                             //Attivazione della rete
 800168a:	4864      	ldr	r0, [pc, #400]	@ (800181c <SIM_Init+0x36c>)
 800168c:	f000 f9d0 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	4618      	mov	r0, r3
 8001696:	f000 f9f7 	bl	8001a88 <SIM_Receive_Response>
	if(strstr(response, "+APP PDP: ACTIVE") == NULL)
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	4960      	ldr	r1, [pc, #384]	@ (8001820 <SIM_Init+0x370>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f014 fc1b 	bl	8015edc <strstr>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d115      	bne.n	80016d8 <SIM_Init+0x228>
	{
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 80016ac:	e00b      	b.n	80016c6 <SIM_Init+0x216>
		{
			SIM_Send_Command("AT+CNACT=1\r");
 80016ae:	485b      	ldr	r0, [pc, #364]	@ (800181c <SIM_Init+0x36c>)
 80016b0:	f000 f9be 	bl	8001a30 <SIM_Send_Command>
			SIM_Receive_Response(response);
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 f9e5 	bl	8001a88 <SIM_Receive_Response>
			HAL_Delay(1000);
 80016be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016c2:	f009 fb2d 	bl	800ad20 <HAL_Delay>
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	4955      	ldr	r1, [pc, #340]	@ (8001820 <SIM_Init+0x370>)
 80016cc:	4618      	mov	r0, r3
 80016ce:	f014 fc05 	bl	8015edc <strstr>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0ea      	beq.n	80016ae <SIM_Init+0x1fe>
		}
	}

	SIM_Send_Command("AT+CNACT?\r");                                                              //Verifica indirizzo IP
 80016d8:	4852      	ldr	r0, [pc, #328]	@ (8001824 <SIM_Init+0x374>)
 80016da:	f000 f9a9 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response);
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f9d0 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_IP(response))
 80016e8:	e00b      	b.n	8001702 <SIM_Init+0x252>
	{
		SIM_Send_Command("AT+CNACT?\r");
 80016ea:	484e      	ldr	r0, [pc, #312]	@ (8001824 <SIM_Init+0x374>)
 80016ec:	f000 f9a0 	bl	8001a30 <SIM_Send_Command>
		SIM_Receive_Response(response);
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 f9c7 	bl	8001a88 <SIM_Receive_Response>
		HAL_Delay(1000);
 80016fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016fe:	f009 fb0f 	bl	800ad20 <HAL_Delay>
	while(!SIM_Check_IP(response))
 8001702:	f107 030c 	add.w	r3, r7, #12
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f9d8 	bl	8001abc <SIM_Check_IP>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0eb      	beq.n	80016ea <SIM_Init+0x23a>
	}

	sprintf(command, "AT+SMCONF=\"URL\",\"%s\",%s\r", sys.MQTT.server_name, sys.MQTT.port);       //Configurazione MQTT
 8001712:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8001716:	4b28      	ldr	r3, [pc, #160]	@ (80017b8 <SIM_Init+0x308>)
 8001718:	4a26      	ldr	r2, [pc, #152]	@ (80017b4 <SIM_Init+0x304>)
 800171a:	4943      	ldr	r1, [pc, #268]	@ (8001828 <SIM_Init+0x378>)
 800171c:	f014 fb44 	bl	8015da8 <siprintf>
	SIM_Send_Command(command);
 8001720:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001724:	4618      	mov	r0, r3
 8001726:	f000 f983 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 800172a:	4831      	ldr	r0, [pc, #196]	@ (80017f0 <SIM_Init+0x340>)
 800172c:	f000 fdba 	bl	80022a4 <SIM_Wait_Response>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <SIM_Init+0x28c>
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
 800173a:	e13c      	b.n	80019b6 <SIM_Init+0x506>

	sprintf(command, "AT+SMCONF=\"CLIENTID\",\"%s\"\r", sys.MQTT.clientID);
 800173c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001740:	4a1b      	ldr	r2, [pc, #108]	@ (80017b0 <SIM_Init+0x300>)
 8001742:	493a      	ldr	r1, [pc, #232]	@ (800182c <SIM_Init+0x37c>)
 8001744:	4618      	mov	r0, r3
 8001746:	f014 fb2f 	bl	8015da8 <siprintf>
	SIM_Send_Command(command);
 800174a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800174e:	4618      	mov	r0, r3
 8001750:	f000 f96e 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001754:	4826      	ldr	r0, [pc, #152]	@ (80017f0 <SIM_Init+0x340>)
 8001756:	f000 fda5 	bl	80022a4 <SIM_Wait_Response>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <SIM_Init+0x2b6>
 8001760:	f04f 33ff 	mov.w	r3, #4294967295
 8001764:	e127      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+SMCONF=\"KEEPTIME\",60\r");
 8001766:	4832      	ldr	r0, [pc, #200]	@ (8001830 <SIM_Init+0x380>)
 8001768:	f000 f962 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 800176c:	4820      	ldr	r0, [pc, #128]	@ (80017f0 <SIM_Init+0x340>)
 800176e:	f000 fd99 	bl	80022a4 <SIM_Wait_Response>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <SIM_Init+0x2ce>
 8001778:	f04f 33ff 	mov.w	r3, #4294967295
 800177c:	e11b      	b.n	80019b6 <SIM_Init+0x506>

	sprintf(command, "AT+SMCONF=\"USERNAME\",\"%s\"\r", sys.MQTT.username);
 800177e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001782:	4a0e      	ldr	r2, [pc, #56]	@ (80017bc <SIM_Init+0x30c>)
 8001784:	492b      	ldr	r1, [pc, #172]	@ (8001834 <SIM_Init+0x384>)
 8001786:	4618      	mov	r0, r3
 8001788:	f014 fb0e 	bl	8015da8 <siprintf>
	SIM_Send_Command(command);
 800178c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001790:	4618      	mov	r0, r3
 8001792:	f000 f94d 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001796:	4816      	ldr	r0, [pc, #88]	@ (80017f0 <SIM_Init+0x340>)
 8001798:	f000 fd84 	bl	80022a4 <SIM_Wait_Response>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d04a      	beq.n	8001838 <SIM_Init+0x388>
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	e106      	b.n	80019b6 <SIM_Init+0x506>
 80017a8:	08017040 	.word	0x08017040
 80017ac:	20001798 	.word	0x20001798
 80017b0:	200019ac 	.word	0x200019ac
 80017b4:	2000181c 	.word	0x2000181c
 80017b8:	20001880 	.word	0x20001880
 80017bc:	200018e4 	.word	0x200018e4
 80017c0:	20001948 	.word	0x20001948
 80017c4:	20001ba0 	.word	0x20001ba0
 80017c8:	20001c04 	.word	0x20001c04
 80017cc:	20001cda 	.word	0x20001cda
 80017d0:	20001a10 	.word	0x20001a10
 80017d4:	20001d1a 	.word	0x20001d1a
 80017d8:	20001a74 	.word	0x20001a74
 80017dc:	20001d5a 	.word	0x20001d5a
 80017e0:	20001ad8 	.word	0x20001ad8
 80017e4:	20001d9a 	.word	0x20001d9a
 80017e8:	20001b3c 	.word	0x20001b3c
 80017ec:	08017044 	.word	0x08017044
 80017f0:	08017048 	.word	0x08017048
 80017f4:	0801704c 	.word	0x0801704c
 80017f8:	20000624 	.word	0x20000624
 80017fc:	0801705c 	.word	0x0801705c
 8001800:	08017068 	.word	0x08017068
 8001804:	08017074 	.word	0x08017074
 8001808:	08017080 	.word	0x08017080
 800180c:	0801708c 	.word	0x0801708c
 8001810:	08017098 	.word	0x08017098
 8001814:	080170a4 	.word	0x080170a4
 8001818:	080170b4 	.word	0x080170b4
 800181c:	080170cc 	.word	0x080170cc
 8001820:	080170d8 	.word	0x080170d8
 8001824:	080170ec 	.word	0x080170ec
 8001828:	080170f8 	.word	0x080170f8
 800182c:	08017114 	.word	0x08017114
 8001830:	08017130 	.word	0x08017130
 8001834:	0801714c 	.word	0x0801714c

	sprintf(command, "AT+SMCONF=\"PASSWORD\",\"%s\"\r", sys.MQTT.password);
 8001838:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800183c:	4a60      	ldr	r2, [pc, #384]	@ (80019c0 <SIM_Init+0x510>)
 800183e:	4961      	ldr	r1, [pc, #388]	@ (80019c4 <SIM_Init+0x514>)
 8001840:	4618      	mov	r0, r3
 8001842:	f014 fab1 	bl	8015da8 <siprintf>
	SIM_Send_Command(command);
 8001846:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f8f0 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001850:	485d      	ldr	r0, [pc, #372]	@ (80019c8 <SIM_Init+0x518>)
 8001852:	f000 fd27 	bl	80022a4 <SIM_Wait_Response>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <SIM_Init+0x3b2>
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
 8001860:	e0a9      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+SMCONF=\"QOS\",1\r");
 8001862:	485a      	ldr	r0, [pc, #360]	@ (80019cc <SIM_Init+0x51c>)
 8001864:	f000 f8e4 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001868:	4857      	ldr	r0, [pc, #348]	@ (80019c8 <SIM_Init+0x518>)
 800186a:	f000 fd1b 	bl	80022a4 <SIM_Wait_Response>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <SIM_Init+0x3ca>
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
 8001878:	e09d      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+SMCONF=\"RETAIN\",0\r");
 800187a:	4855      	ldr	r0, [pc, #340]	@ (80019d0 <SIM_Init+0x520>)
 800187c:	f000 f8d8 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001880:	4851      	ldr	r0, [pc, #324]	@ (80019c8 <SIM_Init+0x518>)
 8001882:	f000 fd0f 	bl	80022a4 <SIM_Wait_Response>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d002      	beq.n	8001892 <SIM_Init+0x3e2>
 800188c:	f04f 33ff 	mov.w	r3, #4294967295
 8001890:	e091      	b.n	80019b6 <SIM_Init+0x506>

	sprintf(command, "AT+SMCONF=\"TOPIC\",\"%s\"\r", sys.MQTT.Data_Topic);
 8001892:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001896:	4a4f      	ldr	r2, [pc, #316]	@ (80019d4 <SIM_Init+0x524>)
 8001898:	494f      	ldr	r1, [pc, #316]	@ (80019d8 <SIM_Init+0x528>)
 800189a:	4618      	mov	r0, r3
 800189c:	f014 fa84 	bl	8015da8 <siprintf>
	SIM_Send_Command(command);
 80018a0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 f8c3 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80018aa:	4847      	ldr	r0, [pc, #284]	@ (80019c8 <SIM_Init+0x518>)
 80018ac:	f000 fcfa 	bl	80022a4 <SIM_Wait_Response>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <SIM_Init+0x40c>
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ba:	e07c      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+SMCONN\r");                                                              //Connessione al broker MQTT
 80018bc:	4847      	ldr	r0, [pc, #284]	@ (80019dc <SIM_Init+0x52c>)
 80018be:	f000 f8b7 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80018c2:	4841      	ldr	r0, [pc, #260]	@ (80019c8 <SIM_Init+0x518>)
 80018c4:	f000 fcee 	bl	80022a4 <SIM_Wait_Response>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <SIM_Init+0x424>
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	e070      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+SMSTATE?\r");                                                            //Verifica connessione al broker MQTT
 80018d4:	4842      	ldr	r0, [pc, #264]	@ (80019e0 <SIM_Init+0x530>)
 80018d6:	f000 f8ab 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response);
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 f8d2 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_MQTT_State(response))
 80018e4:	e00b      	b.n	80018fe <SIM_Init+0x44e>
	{
		SIM_Send_Command("AT+SMSTATE?\r");
 80018e6:	483e      	ldr	r0, [pc, #248]	@ (80019e0 <SIM_Init+0x530>)
 80018e8:	f000 f8a2 	bl	8001a30 <SIM_Send_Command>
		SIM_Receive_Response(response);
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 f8c9 	bl	8001a88 <SIM_Receive_Response>
		HAL_Delay(1000);
 80018f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018fa:	f009 fa11 	bl	800ad20 <HAL_Delay>
	while(!SIM_Check_MQTT_State(response))
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	4618      	mov	r0, r3
 8001904:	f000 f904 	bl	8001b10 <SIM_Check_MQTT_State>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0eb      	beq.n	80018e6 <SIM_Init+0x436>
	}

	sprintf(command, "AT+SMSUB=\"%s\",1\r", sys.MQTT.Command_Topic);                              //Iscrizione al topic per ricezione comandi dal server
 800190e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001912:	4a34      	ldr	r2, [pc, #208]	@ (80019e4 <SIM_Init+0x534>)
 8001914:	4934      	ldr	r1, [pc, #208]	@ (80019e8 <SIM_Init+0x538>)
 8001916:	4618      	mov	r0, r3
 8001918:	f014 fa46 	bl	8015da8 <siprintf>
	SIM_Send_Command(command);
 800191c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001920:	4618      	mov	r0, r3
 8001922:	f000 f885 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001926:	4828      	ldr	r0, [pc, #160]	@ (80019c8 <SIM_Init+0x518>)
 8001928:	f000 fcbc 	bl	80022a4 <SIM_Wait_Response>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <SIM_Init+0x488>
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	e03e      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+CIPRXGET=1\r");                                                         //Impostazione ricezione manuale da server TCP
 8001938:	482c      	ldr	r0, [pc, #176]	@ (80019ec <SIM_Init+0x53c>)
 800193a:	f000 f879 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 800193e:	4822      	ldr	r0, [pc, #136]	@ (80019c8 <SIM_Init+0x518>)
 8001940:	f000 fcb0 	bl	80022a4 <SIM_Wait_Response>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <SIM_Init+0x4a0>
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	e032      	b.n	80019b6 <SIM_Init+0x506>

	sprintf(command, "AT+CIPSTART=\"TCP\",\"%s\",%s\r", sys.TCP.IP_address, sys.TCP.Port);        //Connessione TCP
 8001950:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8001954:	4b26      	ldr	r3, [pc, #152]	@ (80019f0 <SIM_Init+0x540>)
 8001956:	4a27      	ldr	r2, [pc, #156]	@ (80019f4 <SIM_Init+0x544>)
 8001958:	4927      	ldr	r1, [pc, #156]	@ (80019f8 <SIM_Init+0x548>)
 800195a:	f014 fa25 	bl	8015da8 <siprintf>
	SIM_Send_Command(command);
 800195e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f864 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("CONNECT OK") != HAL_OK) return -1;
 8001968:	4824      	ldr	r0, [pc, #144]	@ (80019fc <SIM_Init+0x54c>)
 800196a:	f000 fc9b 	bl	80022a4 <SIM_Wait_Response>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <SIM_Init+0x4ca>
 8001974:	f04f 33ff 	mov.w	r3, #4294967295
 8001978:	e01d      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        //Verifica connessione al server TCP
 800197a:	4821      	ldr	r0, [pc, #132]	@ (8001a00 <SIM_Init+0x550>)
 800197c:	f000 f858 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	4618      	mov	r0, r3
 8001986:	f000 f87f 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_TCP_State(response))
 800198a:	e00b      	b.n	80019a4 <SIM_Init+0x4f4>
	{
		SIM_Send_Command("AT+CIPSTATUS=0\r");
 800198c:	481c      	ldr	r0, [pc, #112]	@ (8001a00 <SIM_Init+0x550>)
 800198e:	f000 f84f 	bl	8001a30 <SIM_Send_Command>
		SIM_Receive_Response(response);
 8001992:	f107 030c 	add.w	r3, r7, #12
 8001996:	4618      	mov	r0, r3
 8001998:	f000 f876 	bl	8001a88 <SIM_Receive_Response>
		HAL_Delay(1000);
 800199c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019a0:	f009 f9be 	bl	800ad20 <HAL_Delay>
	while(!SIM_Check_TCP_State(response))
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 f8d7 	bl	8001b5c <SIM_Check_TCP_State>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0eb      	beq.n	800198c <SIM_Init+0x4dc>
	}

	return 0;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20001948 	.word	0x20001948
 80019c4:	08017168 	.word	0x08017168
 80019c8:	08017048 	.word	0x08017048
 80019cc:	08017184 	.word	0x08017184
 80019d0:	08017198 	.word	0x08017198
 80019d4:	20001a10 	.word	0x20001a10
 80019d8:	080171b0 	.word	0x080171b0
 80019dc:	080171c8 	.word	0x080171c8
 80019e0:	080171d4 	.word	0x080171d4
 80019e4:	20001a74 	.word	0x20001a74
 80019e8:	080171e4 	.word	0x080171e4
 80019ec:	080171f8 	.word	0x080171f8
 80019f0:	20001c04 	.word	0x20001c04
 80019f4:	20001ba0 	.word	0x20001ba0
 80019f8:	08017208 	.word	0x08017208
 80019fc:	08017224 	.word	0x08017224
 8001a00:	08017230 	.word	0x08017230

08001a04 <SIM_Power_On>:

/*------ACCENSIONE DEL MODULO LTE------*/
void SIM_Power_On(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a12:	f00c fb57 	bl	800e0c4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001a16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a1a:	f009 f981 	bl	800ad20 <HAL_Delay>
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a28:	f00c fb4c 	bl	800e0c4 <HAL_GPIO_WritePin>
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <SIM_Send_Command>:
	HAL_GPIO_WritePin(LTE_RESET_GPIO_Port, LTE_RESET_Pin, GPIO_PIN_RESET);
}

/*------INVIO COMANDO AL MODULO LTE------*/
void SIM_Send_Command(char* command)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7fe fbd3 	bl	80001e4 <strlen>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(SIM_UART, (uint8_t*)command, len, 100);
 8001a42:	89fa      	ldrh	r2, [r7, #14]
 8001a44:	2364      	movs	r3, #100	@ 0x64
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4803      	ldr	r0, [pc, #12]	@ (8001a58 <SIM_Send_Command+0x28>)
 8001a4a:	f012 fe65 	bl	8014718 <HAL_UART_Transmit>
}
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000624 	.word	0x20000624

08001a5c <SIM_Send_Command_DMA>:

/*------INVIO COMANDO AL MODULO LTE (DMA)------*/
void SIM_Send_Command_DMA(char* command)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7fe fbbd 	bl	80001e4 <strlen>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit_DMA(SIM_UART, (uint8_t*)command, len);
 8001a6e:	89fb      	ldrh	r3, [r7, #14]
 8001a70:	461a      	mov	r2, r3
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4803      	ldr	r0, [pc, #12]	@ (8001a84 <SIM_Send_Command_DMA+0x28>)
 8001a76:	f012 ffa1 	bl	80149bc <HAL_UART_Transmit_DMA>
}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000624 	.word	0x20000624

08001a88 <SIM_Receive_Response>:

/*------RICEZIONE RISPOSTA DAL MODULO LTE------*/
uint16_t SIM_Receive_Response(char* response)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af02      	add	r7, sp, #8
 8001a8e:	6078      	str	r0, [r7, #4]
	uint16_t max_size = 256;
 8001a90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a94:	81fb      	strh	r3, [r7, #14]
	uint16_t RxLen = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	81bb      	strh	r3, [r7, #12]

	HAL_UARTEx_ReceiveToIdle(SIM_UART, (uint8_t *)response, max_size, &RxLen, 1000);
 8001a9a:	f107 030c 	add.w	r3, r7, #12
 8001a9e:	89fa      	ldrh	r2, [r7, #14]
 8001aa0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001aa4:	9100      	str	r1, [sp, #0]
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	4803      	ldr	r0, [pc, #12]	@ (8001ab8 <SIM_Receive_Response+0x30>)
 8001aaa:	f013 ff9c 	bl	80159e6 <HAL_UARTEx_ReceiveToIdle>
	return RxLen;
 8001aae:	89bb      	ldrh	r3, [r7, #12]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000624 	.word	0x20000624

08001abc <SIM_Check_IP>:

/*------CONTROLLO INDIRIZZO IP------*/
int SIM_Check_IP(const char* response)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	char* cnact_pos = strstr(response, "+CNACT:");
 8001ac4:	4910      	ldr	r1, [pc, #64]	@ (8001b08 <SIM_Check_IP+0x4c>)
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f014 fa08 	bl	8015edc <strstr>
 8001acc:	6178      	str	r0, [r7, #20]
    if(cnact_pos != NULL) {
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d014      	beq.n	8001afe <SIM_Check_IP+0x42>
        int context_id, status;
        if(sscanf(cnact_pos, "+CNACT: %d,%d", &context_id, &status) >= 2) {
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	f107 0210 	add.w	r2, r7, #16
 8001adc:	490b      	ldr	r1, [pc, #44]	@ (8001b0c <SIM_Check_IP+0x50>)
 8001ade:	6978      	ldr	r0, [r7, #20]
 8001ae0:	f014 f984 	bl	8015dec <siscanf>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	dd09      	ble.n	8001afe <SIM_Check_IP+0x42>
            return (context_id == 1 && status == 1) ? 1 : 0;
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d104      	bne.n	8001afa <SIM_Check_IP+0x3e>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <SIM_Check_IP+0x3e>
 8001af6:	2301      	movs	r3, #1
 8001af8:	e002      	b.n	8001b00 <SIM_Check_IP+0x44>
 8001afa:	2300      	movs	r3, #0
 8001afc:	e000      	b.n	8001b00 <SIM_Check_IP+0x44>
        }
    }
    return 0;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	08017240 	.word	0x08017240
 8001b0c:	08017248 	.word	0x08017248

08001b10 <SIM_Check_MQTT_State>:

/*------CONTROLLO STATO CONNESSIONE MQTT------*/
int SIM_Check_MQTT_State(const char* response)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
    char* smstate_pos = strstr(response, "+SMSTATE:");
 8001b18:	490e      	ldr	r1, [pc, #56]	@ (8001b54 <SIM_Check_MQTT_State+0x44>)
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f014 f9de 	bl	8015edc <strstr>
 8001b20:	60f8      	str	r0, [r7, #12]
    if(smstate_pos != NULL) {
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d010      	beq.n	8001b4a <SIM_Check_MQTT_State+0x3a>
        int mqtt_state;
        if(sscanf(smstate_pos, "+SMSTATE: %d", &mqtt_state) >= 1) {
 8001b28:	f107 0308 	add.w	r3, r7, #8
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	490a      	ldr	r1, [pc, #40]	@ (8001b58 <SIM_Check_MQTT_State+0x48>)
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f014 f95b 	bl	8015dec <siscanf>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	dd06      	ble.n	8001b4a <SIM_Check_MQTT_State+0x3a>
            return (mqtt_state == 1) ? 1 : 0;
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	bf0c      	ite	eq
 8001b42:	2301      	moveq	r3, #1
 8001b44:	2300      	movne	r3, #0
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	e000      	b.n	8001b4c <SIM_Check_MQTT_State+0x3c>
        }
    }
    return 0;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	08017258 	.word	0x08017258
 8001b58:	08017264 	.word	0x08017264

08001b5c <SIM_Check_TCP_State>:

/*------CONTROLLO STATO CONNESSIONE TCP------*/
int SIM_Check_TCP_State(const char* response)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
    char* cipstatus_pos = strstr(response, "+CIPSTATUS: 0");
 8001b64:	490a      	ldr	r1, [pc, #40]	@ (8001b90 <SIM_Check_TCP_State+0x34>)
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f014 f9b8 	bl	8015edc <strstr>
 8001b6c:	60f8      	str	r0, [r7, #12]
    if(cipstatus_pos != NULL) {
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <SIM_Check_TCP_State+0x2a>
        // Cerca "CONNECTED" nella stessa riga
        if(strstr(cipstatus_pos, "CONNECTED") != NULL) {
 8001b74:	4907      	ldr	r1, [pc, #28]	@ (8001b94 <SIM_Check_TCP_State+0x38>)
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f014 f9b0 	bl	8015edc <strstr>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <SIM_Check_TCP_State+0x2a>
            return 1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <SIM_Check_TCP_State+0x2c>
        }
    }
    return 0;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	08017274 	.word	0x08017274
 8001b94:	08017284 	.word	0x08017284

08001b98 <SIM_Parse_Command>:

/*------PARSING MESSAGGIO MQTT------*/
void SIM_Parse_Command(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
    char* buf = (char*)sim_rx_buffer;
 8001b9e:	4b78      	ldr	r3, [pc, #480]	@ (8001d80 <SIM_Parse_Command+0x1e8>)
 8001ba0:	61fb      	str	r3, [r7, #28]

    if(strncmp(buf, "+SMSUB: ", 8) == 0)
 8001ba2:	2208      	movs	r2, #8
 8001ba4:	4977      	ldr	r1, [pc, #476]	@ (8001d84 <SIM_Parse_Command+0x1ec>)
 8001ba6:	69f8      	ldr	r0, [r7, #28]
 8001ba8:	f014 f973 	bl	8015e92 <strncmp>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 80e1 	bne.w	8001d76 <SIM_Parse_Command+0x1de>
    {
        char* pos = buf + 8;
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	3308      	adds	r3, #8
 8001bb8:	61bb      	str	r3, [r7, #24]

        char* first_quote = strchr(pos, '"');
 8001bba:	2122      	movs	r1, #34	@ 0x22
 8001bbc:	69b8      	ldr	r0, [r7, #24]
 8001bbe:	f014 f95b 	bl	8015e78 <strchr>
 8001bc2:	6178      	str	r0, [r7, #20]
        if(first_quote) {
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 80d5 	beq.w	8001d76 <SIM_Parse_Command+0x1de>
            char* second_quote = strchr(first_quote + 1, '"');
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	2122      	movs	r1, #34	@ 0x22
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f014 f950 	bl	8015e78 <strchr>
 8001bd8:	6138      	str	r0, [r7, #16]

            if(second_quote) {
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80ca 	beq.w	8001d76 <SIM_Parse_Command+0x1de>
                char* third_quote = strchr(second_quote + 1, '"');
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	3301      	adds	r3, #1
 8001be6:	2122      	movs	r1, #34	@ 0x22
 8001be8:	4618      	mov	r0, r3
 8001bea:	f014 f945 	bl	8015e78 <strchr>
 8001bee:	60f8      	str	r0, [r7, #12]

                if(third_quote) {
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 80bf 	beq.w	8001d76 <SIM_Parse_Command+0x1de>
                    char* cmd_pos = third_quote + 1;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	60bb      	str	r3, [r7, #8]
                    char* fourth_quote = strchr(cmd_pos, '"');
 8001bfe:	2122      	movs	r1, #34	@ 0x22
 8001c00:	68b8      	ldr	r0, [r7, #8]
 8001c02:	f014 f939 	bl	8015e78 <strchr>
 8001c06:	6078      	str	r0, [r7, #4]

                    if(fourth_quote && (fourth_quote - cmd_pos) >= 3) {
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 80b3 	beq.w	8001d76 <SIM_Parse_Command+0x1de>
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	f340 80ad 	ble.w	8001d76 <SIM_Parse_Command+0x1de>

                        uint32_t cmd_val = (cmd_pos[2] << 16) | (cmd_pos[1] << 8) | cmd_pos[0];
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	3302      	adds	r3, #2
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	041a      	lsls	r2, r3, #16
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	3301      	adds	r3, #1
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	7812      	ldrb	r2, [r2, #0]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	603b      	str	r3, [r7, #0]

                        switch(cmd_val) {
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	4a53      	ldr	r2, [pc, #332]	@ (8001d88 <SIM_Parse_Command+0x1f0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	f000 8093 	beq.w	8001d66 <SIM_Parse_Command+0x1ce>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	4a51      	ldr	r2, [pc, #324]	@ (8001d88 <SIM_Parse_Command+0x1f0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	f200 8091 	bhi.w	8001d6c <SIM_Parse_Command+0x1d4>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	4a4f      	ldr	r2, [pc, #316]	@ (8001d8c <SIM_Parse_Command+0x1f4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d03b      	beq.n	8001cca <SIM_Parse_Command+0x132>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	4a4e      	ldr	r2, [pc, #312]	@ (8001d90 <SIM_Parse_Command+0x1f8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	f080 8088 	bcs.w	8001d6c <SIM_Parse_Command+0x1d4>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	4a4d      	ldr	r2, [pc, #308]	@ (8001d94 <SIM_Parse_Command+0x1fc>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d066      	beq.n	8001d32 <SIM_Parse_Command+0x19a>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	4a4c      	ldr	r2, [pc, #304]	@ (8001d98 <SIM_Parse_Command+0x200>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d27f      	bcs.n	8001d6c <SIM_Parse_Command+0x1d4>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	4a4b      	ldr	r2, [pc, #300]	@ (8001d9c <SIM_Parse_Command+0x204>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d06b      	beq.n	8001d4c <SIM_Parse_Command+0x1b4>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	4a49      	ldr	r2, [pc, #292]	@ (8001d9c <SIM_Parse_Command+0x204>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d877      	bhi.n	8001d6c <SIM_Parse_Command+0x1d4>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	4a48      	ldr	r2, [pc, #288]	@ (8001da0 <SIM_Parse_Command+0x208>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d034      	beq.n	8001cee <SIM_Parse_Command+0x156>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	4a46      	ldr	r2, [pc, #280]	@ (8001da0 <SIM_Parse_Command+0x208>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d86f      	bhi.n	8001d6c <SIM_Parse_Command+0x1d4>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	4a45      	ldr	r2, [pc, #276]	@ (8001da4 <SIM_Parse_Command+0x20c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d014      	beq.n	8001cbe <SIM_Parse_Command+0x126>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	4a43      	ldr	r2, [pc, #268]	@ (8001da4 <SIM_Parse_Command+0x20c>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d867      	bhi.n	8001d6c <SIM_Parse_Command+0x1d4>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	4a42      	ldr	r2, [pc, #264]	@ (8001da8 <SIM_Parse_Command+0x210>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d018      	beq.n	8001cd6 <SIM_Parse_Command+0x13e>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	4a40      	ldr	r2, [pc, #256]	@ (8001da8 <SIM_Parse_Command+0x210>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d85f      	bhi.n	8001d6c <SIM_Parse_Command+0x1d4>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	4a3f      	ldr	r2, [pc, #252]	@ (8001dac <SIM_Parse_Command+0x214>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d034      	beq.n	8001d1e <SIM_Parse_Command+0x186>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	4a3e      	ldr	r2, [pc, #248]	@ (8001db0 <SIM_Parse_Command+0x218>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d012      	beq.n	8001ce2 <SIM_Parse_Command+0x14a>
								}
							case 0x545352: // RST
								HAL_NVIC_SystemReset();
								break;
							default: 
								break;
 8001cbc:	e056      	b.n	8001d6c <SIM_Parse_Command+0x1d4>
								flags.CMD.Idle = 1; 
 8001cbe:	4a3d      	ldr	r2, [pc, #244]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001cc0:	7893      	ldrb	r3, [r2, #2]
 8001cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cc6:	7093      	strb	r3, [r2, #2]
								break;    
 8001cc8:	e055      	b.n	8001d76 <SIM_Parse_Command+0x1de>
								flags.CMD.Start_Meas = 1; 
 8001cca:	4a3a      	ldr	r2, [pc, #232]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001ccc:	7893      	ldrb	r3, [r2, #2]
 8001cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cd2:	7093      	strb	r3, [r2, #2]
								break;
 8001cd4:	e04f      	b.n	8001d76 <SIM_Parse_Command+0x1de>
								flags.CMD.Ping = 1; 
 8001cd6:	4a37      	ldr	r2, [pc, #220]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001cd8:	7893      	ldrb	r3, [r2, #2]
 8001cda:	f043 0308 	orr.w	r3, r3, #8
 8001cde:	7093      	strb	r3, [r2, #2]
								break;
 8001ce0:	e049      	b.n	8001d76 <SIM_Parse_Command+0x1de>
								flags.CMD.Data_Request = 1; 
 8001ce2:	4a34      	ldr	r2, [pc, #208]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001ce4:	7893      	ldrb	r3, [r2, #2]
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	7093      	strb	r3, [r2, #2]
								break;
 8001cec:	e043      	b.n	8001d76 <SIM_Parse_Command+0x1de>
								if(!flags.CMD.Measure_Request)
 8001cee:	4b31      	ldr	r3, [pc, #196]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001cf0:	789b      	ldrb	r3, [r3, #2]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d139      	bne.n	8001d70 <SIM_Parse_Command+0x1d8>
									LED_Start(RED_LED, FAST, LOW);
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	2100      	movs	r1, #0
 8001d00:	2004      	movs	r0, #4
 8001d02:	f001 fc19 	bl	8003538 <LED_Start>
									Send_Measure_Addr = Saved_Bytes;
 8001d06:	4b2c      	ldr	r3, [pc, #176]	@ (8001db8 <SIM_Parse_Command+0x220>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a2c      	ldr	r2, [pc, #176]	@ (8001dbc <SIM_Parse_Command+0x224>)
 8001d0c:	6013      	str	r3, [r2, #0]
									flags.CMD.Measure_Request = 1; 
 8001d0e:	4a29      	ldr	r2, [pc, #164]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001d10:	7893      	ldrb	r3, [r2, #2]
 8001d12:	f043 0302 	orr.w	r3, r3, #2
 8001d16:	7093      	strb	r3, [r2, #2]
									Switch_Buffer();
 8001d18:	f003 feea 	bl	8005af0 <Switch_Buffer>
								break;
 8001d1c:	e028      	b.n	8001d70 <SIM_Parse_Command+0x1d8>
								if(state == IDLE)
 8001d1e:	4b28      	ldr	r3, [pc, #160]	@ (8001dc0 <SIM_Parse_Command+0x228>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d126      	bne.n	8001d74 <SIM_Parse_Command+0x1dc>
									flags.CMD.Start_OTA = 1;
 8001d26:	4a23      	ldr	r2, [pc, #140]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001d28:	7893      	ldrb	r3, [r2, #2]
 8001d2a:	f043 0304 	orr.w	r3, r3, #4
 8001d2e:	7093      	strb	r3, [r2, #2]
								break;
 8001d30:	e020      	b.n	8001d74 <SIM_Parse_Command+0x1dc>
								if(state == IDLE)
 8001d32:	4b23      	ldr	r3, [pc, #140]	@ (8001dc0 <SIM_Parse_Command+0x228>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d108      	bne.n	8001d4c <SIM_Parse_Command+0x1b4>
									flags.CMD.Set_Config = 1;
 8001d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001d3c:	7893      	ldrb	r3, [r2, #2]
 8001d3e:	f043 0310 	orr.w	r3, r3, #16
 8001d42:	7093      	strb	r3, [r2, #2]
									SIM_Parse_Cfg(cmd_pos, fourth_quote);
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	68b8      	ldr	r0, [r7, #8]
 8001d48:	f000 f83c 	bl	8001dc4 <SIM_Parse_Cfg>
								if(state == IDLE)
 8001d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc0 <SIM_Parse_Command+0x228>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d108      	bne.n	8001d66 <SIM_Parse_Command+0x1ce>
									flags.CMD.Get_Config = 1;
 8001d54:	4a17      	ldr	r2, [pc, #92]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001d56:	7893      	ldrb	r3, [r2, #2]
 8001d58:	f043 0320 	orr.w	r3, r3, #32
 8001d5c:	7093      	strb	r3, [r2, #2]
									SIM_Get_Cfg(cmd_pos, fourth_quote);
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	68b8      	ldr	r0, [r7, #8]
 8001d62:	f000 f8af 	bl	8001ec4 <SIM_Get_Cfg>
								HAL_NVIC_SystemReset();
 8001d66:	f00a fcb4 	bl	800c6d2 <HAL_NVIC_SystemReset>
								break;
 8001d6a:	e004      	b.n	8001d76 <SIM_Parse_Command+0x1de>
								break;
 8001d6c:	bf00      	nop
 8001d6e:	e002      	b.n	8001d76 <SIM_Parse_Command+0x1de>
								break;
 8001d70:	bf00      	nop
 8001d72:	e000      	b.n	8001d76 <SIM_Parse_Command+0x1de>
								break;
 8001d74:	bf00      	nop
                    }
                }
            }
        }
    }
}
 8001d76:	bf00      	nop
 8001d78:	3720      	adds	r7, #32
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200054f4 	.word	0x200054f4
 8001d84:	08017290 	.word	0x08017290
 8001d88:	00545352 	.word	0x00545352
 8001d8c:	00545253 	.word	0x00545253
 8001d90:	00545254 	.word	0x00545254
 8001d94:	00544553 	.word	0x00544553
 8001d98:	00544554 	.word	0x00544554
 8001d9c:	00544547 	.word	0x00544547
 8001da0:	0052534d 	.word	0x0052534d
 8001da4:	004c4449 	.word	0x004c4449
 8001da8:	00474e50 	.word	0x00474e50
 8001dac:	0041544f 	.word	0x0041544f
 8001db0:	00444e53 	.word	0x00444e53
 8001db4:	20001c68 	.word	0x20001c68
 8001db8:	20004ec0 	.word	0x20004ec0
 8001dbc:	20004ec8 	.word	0x20004ec8
 8001dc0:	2000073c 	.word	0x2000073c

08001dc4 <SIM_Parse_Cfg>:

/*-----PARSING CONFIGURAZIONE-----*/
void SIM_Parse_Cfg(char* cmd_start, char* cmd_end)
{   
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
    memset(cfg_var, 0, sizeof(cfg_var));
 8001dce:	2214      	movs	r2, #20
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4839      	ldr	r0, [pc, #228]	@ (8001eb8 <SIM_Parse_Cfg+0xf4>)
 8001dd4:	f014 f848 	bl	8015e68 <memset>
    memset(new_cfg_val, 0, sizeof(new_cfg_val));
 8001dd8:	220a      	movs	r2, #10
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4837      	ldr	r0, [pc, #220]	@ (8001ebc <SIM_Parse_Cfg+0xf8>)
 8001dde:	f014 f843 	bl	8015e68 <memset>
    
    char* pos = cmd_start + 4; // Salta "SET,"
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3304      	adds	r3, #4
 8001de6:	61fb      	str	r3, [r7, #28]
    
    // Prima virgola (dopo SET)
    char* comma1 = strchr(pos, ',');
 8001de8:	212c      	movs	r1, #44	@ 0x2c
 8001dea:	69f8      	ldr	r0, [r7, #28]
 8001dec:	f014 f844 	bl	8015e78 <strchr>
 8001df0:	61b8      	str	r0, [r7, #24]
    if(!comma1 || comma1 >= cmd_end) return;
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d056      	beq.n	8001ea6 <SIM_Parse_Cfg+0xe2>
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d252      	bcs.n	8001ea6 <SIM_Parse_Cfg+0xe2>
    
    // Seconda virgola
    char* comma2 = strchr(comma1 + 1, ',');
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	3301      	adds	r3, #1
 8001e04:	212c      	movs	r1, #44	@ 0x2c
 8001e06:	4618      	mov	r0, r3
 8001e08:	f014 f836 	bl	8015e78 <strchr>
 8001e0c:	6178      	str	r0, [r7, #20]
    if(!comma2 || comma2 >= cmd_end) return;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d04a      	beq.n	8001eaa <SIM_Parse_Cfg+0xe6>
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d246      	bcs.n	8001eaa <SIM_Parse_Cfg+0xe6>
    
    // Terza virgola
    char* comma3 = strchr(comma2 + 1, ',');
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	212c      	movs	r1, #44	@ 0x2c
 8001e22:	4618      	mov	r0, r3
 8001e24:	f014 f828 	bl	8015e78 <strchr>
 8001e28:	6138      	str	r0, [r7, #16]
    if(!comma3 || comma3 >= cmd_end) return;
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d03e      	beq.n	8001eae <SIM_Parse_Cfg+0xea>
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d23a      	bcs.n	8001eae <SIM_Parse_Cfg+0xea>
    
    // Estrai cfg_var (tra SET, e prima virgola)
    int var_len = comma2 - comma1 - 1;
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	60fb      	str	r3, [r7, #12]
    if(var_len > 0 && var_len < sizeof(cfg_var)) 
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	dd0e      	ble.n	8001e66 <SIM_Parse_Cfg+0xa2>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b13      	cmp	r3, #19
 8001e4c:	d80b      	bhi.n	8001e66 <SIM_Parse_Cfg+0xa2>
	{
        strncpy(cfg_var, comma1 + 1, var_len);
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	3301      	adds	r3, #1
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	4619      	mov	r1, r3
 8001e56:	4818      	ldr	r0, [pc, #96]	@ (8001eb8 <SIM_Parse_Cfg+0xf4>)
 8001e58:	f014 f82d 	bl	8015eb6 <strncpy>
        cfg_var[var_len] = '\0';
 8001e5c:	4a16      	ldr	r2, [pc, #88]	@ (8001eb8 <SIM_Parse_Cfg+0xf4>)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4413      	add	r3, r2
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
    }
    
    // Estrai cfg_idx
    cfg_idx = atoi(comma2 + 1);
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f013 ff12 	bl	8015c94 <atoi>
 8001e70:	4603      	mov	r3, r0
 8001e72:	4a13      	ldr	r2, [pc, #76]	@ (8001ec0 <SIM_Parse_Cfg+0xfc>)
 8001e74:	6013      	str	r3, [r2, #0]
    
    // Estrai new_cfg_val
    int val_len = cmd_end - comma3 - 1;
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	60bb      	str	r3, [r7, #8]
    if(val_len > 0 && val_len < sizeof(new_cfg_val)) 
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	dd14      	ble.n	8001eb0 <SIM_Parse_Cfg+0xec>
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b09      	cmp	r3, #9
 8001e8a:	d811      	bhi.n	8001eb0 <SIM_Parse_Cfg+0xec>
	{
        strncpy(new_cfg_val, comma3 + 1, val_len);
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	4619      	mov	r1, r3
 8001e94:	4809      	ldr	r0, [pc, #36]	@ (8001ebc <SIM_Parse_Cfg+0xf8>)
 8001e96:	f014 f80e 	bl	8015eb6 <strncpy>
        new_cfg_val[val_len] = '\0';
 8001e9a:	4a08      	ldr	r2, [pc, #32]	@ (8001ebc <SIM_Parse_Cfg+0xf8>)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
 8001ea4:	e004      	b.n	8001eb0 <SIM_Parse_Cfg+0xec>
    if(!comma1 || comma1 >= cmd_end) return;
 8001ea6:	bf00      	nop
 8001ea8:	e002      	b.n	8001eb0 <SIM_Parse_Cfg+0xec>
    if(!comma2 || comma2 >= cmd_end) return;
 8001eaa:	bf00      	nop
 8001eac:	e000      	b.n	8001eb0 <SIM_Parse_Cfg+0xec>
    if(!comma3 || comma3 >= cmd_end) return;
 8001eae:	bf00      	nop
    }
}
 8001eb0:	3720      	adds	r7, #32
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20005cc4 	.word	0x20005cc4
 8001ebc:	20005cdc 	.word	0x20005cdc
 8001ec0:	20005cd8 	.word	0x20005cd8

08001ec4 <SIM_Get_Cfg>:

/*-----RECUPERO VALORE DI CONFIGURAZIONE-----*/
void SIM_Get_Cfg(char* cmd_start, char* cmd_end)
{   
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
	memset(cfg_var, 0, sizeof(cfg_var));
 8001ece:	2214      	movs	r2, #20
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4825      	ldr	r0, [pc, #148]	@ (8001f68 <SIM_Get_Cfg+0xa4>)
 8001ed4:	f013 ffc8 	bl	8015e68 <memset>
	memset(new_cfg_val, 0, sizeof(new_cfg_val));
 8001ed8:	220a      	movs	r2, #10
 8001eda:	2100      	movs	r1, #0
 8001edc:	4823      	ldr	r0, [pc, #140]	@ (8001f6c <SIM_Get_Cfg+0xa8>)
 8001ede:	f013 ffc3 	bl	8015e68 <memset>
	
	char* pos = cmd_start + 4; // Salta "GET,"
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	617b      	str	r3, [r7, #20]
	
	// Prima virgola (dopo GET)
	char* comma1 = strchr(pos, ',');
 8001ee8:	212c      	movs	r1, #44	@ 0x2c
 8001eea:	6978      	ldr	r0, [r7, #20]
 8001eec:	f013 ffc4 	bl	8015e78 <strchr>
 8001ef0:	6138      	str	r0, [r7, #16]
	if(!comma1 || comma1 >= cmd_end) return;
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d031      	beq.n	8001f5c <SIM_Get_Cfg+0x98>
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d22d      	bcs.n	8001f5c <SIM_Get_Cfg+0x98>
	
	// Seconda virgola
	char* comma2 = strchr(comma1 + 1, ',');
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	3301      	adds	r3, #1
 8001f04:	212c      	movs	r1, #44	@ 0x2c
 8001f06:	4618      	mov	r0, r3
 8001f08:	f013 ffb6 	bl	8015e78 <strchr>
 8001f0c:	60f8      	str	r0, [r7, #12]
	if(!comma2 || comma2 >= cmd_end) return;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d025      	beq.n	8001f60 <SIM_Get_Cfg+0x9c>
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d221      	bcs.n	8001f60 <SIM_Get_Cfg+0x9c>
	
	// Estrai cfg_var (tra GET, e prima virgola)
	int var_len = comma2 - comma1 - 1;
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	3b01      	subs	r3, #1
 8001f24:	60bb      	str	r3, [r7, #8]
	if(var_len > 0 && var_len < sizeof(cfg_var)) 
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	dd0e      	ble.n	8001f4a <SIM_Get_Cfg+0x86>
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b13      	cmp	r3, #19
 8001f30:	d80b      	bhi.n	8001f4a <SIM_Get_Cfg+0x86>
	{
		strncpy(cfg_var, comma1 + 1, var_len);
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	3301      	adds	r3, #1
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	480b      	ldr	r0, [pc, #44]	@ (8001f68 <SIM_Get_Cfg+0xa4>)
 8001f3c:	f013 ffbb 	bl	8015eb6 <strncpy>
		cfg_var[var_len] = '\0';
 8001f40:	4a09      	ldr	r2, [pc, #36]	@ (8001f68 <SIM_Get_Cfg+0xa4>)
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	4413      	add	r3, r2
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
	}
	
	// Estrai cfg_idx
	cfg_idx = atoi(comma2 + 1);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f013 fea0 	bl	8015c94 <atoi>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4a06      	ldr	r2, [pc, #24]	@ (8001f70 <SIM_Get_Cfg+0xac>)
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	e002      	b.n	8001f62 <SIM_Get_Cfg+0x9e>
	if(!comma1 || comma1 >= cmd_end) return;
 8001f5c:	bf00      	nop
 8001f5e:	e000      	b.n	8001f62 <SIM_Get_Cfg+0x9e>
	if(!comma2 || comma2 >= cmd_end) return;
 8001f60:	bf00      	nop
}
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20005cc4 	.word	0x20005cc4
 8001f6c:	20005cdc 	.word	0x20005cdc
 8001f70:	20005cd8 	.word	0x20005cd8

08001f74 <SIM_publish_MQTT_Message_DMA>:

/*------PUBBLICAZIONE MESSAGGIO MQTT IN MODALITA' DMA------*/
void SIM_publish_MQTT_Message_DMA(const char* topic, const char* message)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b0c4      	sub	sp, #272	@ 0x110
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f82:	6018      	str	r0, [r3, #0]
 8001f84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f88:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001f8c:	6019      	str	r1, [r3, #0]
    char command[256];
    uint16_t len = (uint16_t)strlen(message);
 8001f8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f92:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	f7fe f924 	bl	80001e4 <strlen>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

    if(topic != NULL && strlen(topic) > 0)
 8001fa2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001fa6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d014      	beq.n	8001fda <SIM_publish_MQTT_Message_DMA+0x66>
 8001fb0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001fb4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00c      	beq.n	8001fda <SIM_publish_MQTT_Message_DMA+0x66>
	{
        sprintf(command, "AT+SMPUB=\"%s\",%d,1,0\r", topic, len);
 8001fc0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8001fc4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001fc8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001fcc:	f107 000c 	add.w	r0, r7, #12
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	490b      	ldr	r1, [pc, #44]	@ (8002000 <SIM_publish_MQTT_Message_DMA+0x8c>)
 8001fd4:	f013 fee8 	bl	8015da8 <siprintf>
 8001fd8:	e007      	b.n	8001fea <SIM_publish_MQTT_Message_DMA+0x76>
    } 
	else 
	{
        sprintf(command, "AT+SMPUB=%d\r", len);
 8001fda:	f8b7 210e 	ldrh.w	r2, [r7, #270]	@ 0x10e
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	4908      	ldr	r1, [pc, #32]	@ (8002004 <SIM_publish_MQTT_Message_DMA+0x90>)
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f013 fedf 	bl	8015da8 <siprintf>
    }
    
    SIM_Send_Command_DMA(command);
 8001fea:	f107 030c 	add.w	r3, r7, #12
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fd34 	bl	8001a5c <SIM_Send_Command_DMA>
}
 8001ff4:	bf00      	nop
 8001ff6:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	0801729c 	.word	0x0801729c
 8002004:	080172b4 	.word	0x080172b4

08002008 <SIM_publish_MQTT_Message>:

/*-----PUBBLICAZIONE MESSAGGIO MQTT-----*/
void SIM_publish_MQTT_Message(const char* topic, const char* message)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b0c4      	sub	sp, #272	@ 0x110
 800200c:	af00      	add	r7, sp, #0
 800200e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002012:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002016:	6018      	str	r0, [r3, #0]
 8002018:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800201c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002020:	6019      	str	r1, [r3, #0]
	char command[256];
	uint16_t len = (uint16_t)strlen(message);
 8002022:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002026:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	f7fe f8da 	bl	80001e4 <strlen>
 8002030:	4603      	mov	r3, r0
 8002032:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

	if(topic != NULL && strlen(topic) > 0)
 8002036:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800203a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d014      	beq.n	800206e <SIM_publish_MQTT_Message+0x66>
 8002044:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002048:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00c      	beq.n	800206e <SIM_publish_MQTT_Message+0x66>
	{
		sprintf(command, "AT+SMPUB=\"%s\",%d,1,0\r", topic, len);
 8002054:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8002058:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800205c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002060:	f107 000c 	add.w	r0, r7, #12
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	4917      	ldr	r1, [pc, #92]	@ (80020c4 <SIM_publish_MQTT_Message+0xbc>)
 8002068:	f013 fe9e 	bl	8015da8 <siprintf>
 800206c:	e007      	b.n	800207e <SIM_publish_MQTT_Message+0x76>
	} 
	else 
	{
		sprintf(command, "AT+SMPUB=%d\r", len);
 800206e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	@ 0x10e
 8002072:	f107 030c 	add.w	r3, r7, #12
 8002076:	4914      	ldr	r1, [pc, #80]	@ (80020c8 <SIM_publish_MQTT_Message+0xc0>)
 8002078:	4618      	mov	r0, r3
 800207a:	f013 fe95 	bl	8015da8 <siprintf>
	}
	
	SIM_Send_Command(command);
 800207e:	f107 030c 	add.w	r3, r7, #12
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff fcd4 	bl	8001a30 <SIM_Send_Command>
	SIM_Wait_Response(">");                       
 8002088:	4810      	ldr	r0, [pc, #64]	@ (80020cc <SIM_publish_MQTT_Message+0xc4>)
 800208a:	f000 f90b 	bl	80022a4 <SIM_Wait_Response>
	HAL_UART_Transmit(SIM_UART, (uint8_t*)message, strlen(message), 1000);
 800208e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002092:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	f7fe f8a4 	bl	80001e4 <strlen>
 800209c:	4603      	mov	r3, r0
 800209e:	b29a      	uxth	r2, r3
 80020a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80020a4:	f5a3 7188 	sub.w	r1, r3, #272	@ 0x110
 80020a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ac:	6809      	ldr	r1, [r1, #0]
 80020ae:	4808      	ldr	r0, [pc, #32]	@ (80020d0 <SIM_publish_MQTT_Message+0xc8>)
 80020b0:	f012 fb32 	bl	8014718 <HAL_UART_Transmit>
    SIM_Wait_Response("OK");
 80020b4:	4807      	ldr	r0, [pc, #28]	@ (80020d4 <SIM_publish_MQTT_Message+0xcc>)
 80020b6:	f000 f8f5 	bl	80022a4 <SIM_Wait_Response>
}
 80020ba:	bf00      	nop
 80020bc:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	0801729c 	.word	0x0801729c
 80020c8:	080172b4 	.word	0x080172b4
 80020cc:	080172c4 	.word	0x080172c4
 80020d0:	20000624 	.word	0x20000624
 80020d4:	08017048 	.word	0x08017048

080020d8 <SIM_Send_TCP_Chunk_DMA>:
    SIM_Wait_Response("SEND OK");                              // Attesa invio avvenuto
}

/*-----INVIO DATI AL SERVER TCP CON DMA-----*/
void SIM_Send_TCP_Chunk_DMA(uint8_t* data, uint16_t size)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b090      	sub	sp, #64	@ 0x40
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	807b      	strh	r3, [r7, #2]
    char cmd[50];

    sprintf(cmd, "AT+CIPSEND=%u\r", size);
 80020e4:	887a      	ldrh	r2, [r7, #2]
 80020e6:	f107 030c 	add.w	r3, r7, #12
 80020ea:	490d      	ldr	r1, [pc, #52]	@ (8002120 <SIM_Send_TCP_Chunk_DMA+0x48>)
 80020ec:	4618      	mov	r0, r3
 80020ee:	f013 fe5b 	bl	8015da8 <siprintf>
    SIM_Send_Command_DMA(cmd);
 80020f2:	f107 030c 	add.w	r3, r7, #12
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fcb0 	bl	8001a5c <SIM_Send_Command_DMA>

    SIM_Wait_Response(">");                                    // Attesa prompt '>'
 80020fc:	4809      	ldr	r0, [pc, #36]	@ (8002124 <SIM_Send_TCP_Chunk_DMA+0x4c>)
 80020fe:	f000 f8d1 	bl	80022a4 <SIM_Wait_Response>

    HAL_UART_Transmit(SIM_UART, data, size, 1000);             // Invia dati binari
 8002102:	887a      	ldrh	r2, [r7, #2]
 8002104:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4807      	ldr	r0, [pc, #28]	@ (8002128 <SIM_Send_TCP_Chunk_DMA+0x50>)
 800210c:	f012 fb04 	bl	8014718 <HAL_UART_Transmit>
    
    SIM_Wait_Response("SEND OK");                              // Attesa invio avvenuto
 8002110:	4806      	ldr	r0, [pc, #24]	@ (800212c <SIM_Send_TCP_Chunk_DMA+0x54>)
 8002112:	f000 f8c7 	bl	80022a4 <SIM_Wait_Response>
}
 8002116:	bf00      	nop
 8002118:	3740      	adds	r7, #64	@ 0x40
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	080172c8 	.word	0x080172c8
 8002124:	080172c4 	.word	0x080172c4
 8002128:	20000624 	.word	0x20000624
 800212c:	080172d8 	.word	0x080172d8

08002130 <SIM_Send_Infos>:

/*-----INVIO INFORMAZIONI AL SERVER MQTT-----*/
void SIM_Send_Infos(void)
{
 8002130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002132:	f5ad 7d3d 	sub.w	sp, sp, #756	@ 0x2f4
 8002136:	af10      	add	r7, sp, #64	@ 0x40
	uint16_t len = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	f8a7 32ae 	strh.w	r3, [r7, #686]	@ 0x2ae
	char command[128];
	char infos[512];
	uint16_t new_temp = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	f8a7 32ac 	strh.w	r3, [r7, #684]	@ 0x2ac

	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 8002144:	494c      	ldr	r1, [pc, #304]	@ (8002278 <SIM_Send_Infos+0x148>)
 8002146:	203b      	movs	r0, #59	@ 0x3b
 8002148:	f000 fa04 	bl	8002554 <BC_MultiRead_Reg>
	INA3221_Read_Measure(&Supply);
 800214c:	484b      	ldr	r0, [pc, #300]	@ (800227c <SIM_Send_Infos+0x14c>)
 800214e:	f7fe ff65 	bl	800101c <INA3221_Read_Measure>
	if((new_temp = Read_Temperature()) != 0)
 8002152:	f7fe ff09 	bl	8000f68 <Read_Temperature>
 8002156:	4603      	mov	r3, r0
 8002158:	f8a7 32ac 	strh.w	r3, [r7, #684]	@ 0x2ac
 800215c:	f8b7 32ac 	ldrh.w	r3, [r7, #684]	@ 0x2ac
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <SIM_Send_Infos+0x3c>
	{
		Temperature = new_temp;
 8002164:	4a46      	ldr	r2, [pc, #280]	@ (8002280 <SIM_Send_Infos+0x150>)
 8002166:	f8b7 32ac 	ldrh.w	r3, [r7, #684]	@ 0x2ac
 800216a:	8013      	strh	r3, [r2, #0]
	}

	sprintf(infos, "%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", config.device_id, sys.onDate.Year, sys.onDate.Month, sys.onDate.Date, sys.onTime.Hours, sys.onTime.Minutes, sys.onTime.Seconds, Vbatt, config.samp_freq, config.buffering_secs, Supply.v1, Supply.v2, Supply.v3, Supply.i1, Supply.i2, Supply.i3, Temperature);
 800216c:	4b45      	ldr	r3, [pc, #276]	@ (8002284 <SIM_Send_Infos+0x154>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	469c      	mov	ip, r3
 8002172:	4b45      	ldr	r3, [pc, #276]	@ (8002288 <SIM_Send_Infos+0x158>)
 8002174:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002178:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800217c:	469e      	mov	lr, r3
 800217e:	4b42      	ldr	r3, [pc, #264]	@ (8002288 <SIM_Send_Infos+0x158>)
 8002180:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002188:	461d      	mov	r5, r3
 800218a:	4b3f      	ldr	r3, [pc, #252]	@ (8002288 <SIM_Send_Infos+0x158>)
 800218c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002190:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002194:	461e      	mov	r6, r3
 8002196:	4b3c      	ldr	r3, [pc, #240]	@ (8002288 <SIM_Send_Infos+0x158>)
 8002198:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800219c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80021a2:	4b39      	ldr	r3, [pc, #228]	@ (8002288 <SIM_Send_Infos+0x158>)
 80021a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80021ac:	623b      	str	r3, [r7, #32]
 80021ae:	4b36      	ldr	r3, [pc, #216]	@ (8002288 <SIM_Send_Infos+0x158>)
 80021b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021b4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002278 <SIM_Send_Infos+0x148>)
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	61bb      	str	r3, [r7, #24]
 80021c0:	4b30      	ldr	r3, [pc, #192]	@ (8002284 <SIM_Send_Infos+0x154>)
 80021c2:	885b      	ldrh	r3, [r3, #2]
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002284 <SIM_Send_Infos+0x154>)
 80021c8:	791b      	ldrb	r3, [r3, #4]
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	4b2b      	ldr	r3, [pc, #172]	@ (800227c <SIM_Send_Infos+0x14c>)
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	4b2a      	ldr	r3, [pc, #168]	@ (800227c <SIM_Send_Infos+0x14c>)
 80021d4:	885b      	ldrh	r3, [r3, #2]
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	4b28      	ldr	r3, [pc, #160]	@ (800227c <SIM_Send_Infos+0x14c>)
 80021da:	889b      	ldrh	r3, [r3, #4]
 80021dc:	607b      	str	r3, [r7, #4]
 80021de:	4b27      	ldr	r3, [pc, #156]	@ (800227c <SIM_Send_Infos+0x14c>)
 80021e0:	88db      	ldrh	r3, [r3, #6]
 80021e2:	461c      	mov	r4, r3
 80021e4:	4b25      	ldr	r3, [pc, #148]	@ (800227c <SIM_Send_Infos+0x14c>)
 80021e6:	891b      	ldrh	r3, [r3, #8]
 80021e8:	4619      	mov	r1, r3
 80021ea:	4b24      	ldr	r3, [pc, #144]	@ (800227c <SIM_Send_Infos+0x14c>)
 80021ec:	895b      	ldrh	r3, [r3, #10]
 80021ee:	461a      	mov	r2, r3
 80021f0:	4b23      	ldr	r3, [pc, #140]	@ (8002280 <SIM_Send_Infos+0x150>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80021f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80021fa:	920d      	str	r2, [sp, #52]	@ 0x34
 80021fc:	910c      	str	r1, [sp, #48]	@ 0x30
 80021fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	920a      	str	r2, [sp, #40]	@ 0x28
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	9209      	str	r2, [sp, #36]	@ 0x24
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	9208      	str	r2, [sp, #32]
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	9207      	str	r2, [sp, #28]
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	9206      	str	r2, [sp, #24]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	9205      	str	r2, [sp, #20]
 8002218:	69fa      	ldr	r2, [r7, #28]
 800221a:	9204      	str	r2, [sp, #16]
 800221c:	6a3a      	ldr	r2, [r7, #32]
 800221e:	9203      	str	r2, [sp, #12]
 8002220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002222:	9302      	str	r3, [sp, #8]
 8002224:	9601      	str	r6, [sp, #4]
 8002226:	9500      	str	r5, [sp, #0]
 8002228:	4673      	mov	r3, lr
 800222a:	4662      	mov	r2, ip
 800222c:	4917      	ldr	r1, [pc, #92]	@ (800228c <SIM_Send_Infos+0x15c>)
 800222e:	f013 fdbb 	bl	8015da8 <siprintf>
	len = (uint16_t)strlen(infos);
 8002232:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002236:	4618      	mov	r0, r3
 8002238:	f7fd ffd4 	bl	80001e4 <strlen>
 800223c:	4603      	mov	r3, r0
 800223e:	f8a7 32ae 	strh.w	r3, [r7, #686]	@ 0x2ae

	sprintf(command, "AT+SMPUB=\"%s\",%d,1,0\r", sys.MQTT.Info_Topic, len);
 8002242:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	@ 0x2ae
 8002246:	f507 700b 	add.w	r0, r7, #556	@ 0x22c
 800224a:	4a11      	ldr	r2, [pc, #68]	@ (8002290 <SIM_Send_Infos+0x160>)
 800224c:	4911      	ldr	r1, [pc, #68]	@ (8002294 <SIM_Send_Infos+0x164>)
 800224e:	f013 fdab 	bl	8015da8 <siprintf>
	SIM_Wait_Response(">"); 
 8002252:	4811      	ldr	r0, [pc, #68]	@ (8002298 <SIM_Send_Infos+0x168>)
 8002254:	f000 f826 	bl	80022a4 <SIM_Wait_Response>
	HAL_UART_Transmit(SIM_UART, (uint8_t*)infos, len, 100);
 8002258:	f8b7 22ae 	ldrh.w	r2, [r7, #686]	@ 0x2ae
 800225c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8002260:	2364      	movs	r3, #100	@ 0x64
 8002262:	480e      	ldr	r0, [pc, #56]	@ (800229c <SIM_Send_Infos+0x16c>)
 8002264:	f012 fa58 	bl	8014718 <HAL_UART_Transmit>
	SIM_Wait_Response("OK");
 8002268:	480d      	ldr	r0, [pc, #52]	@ (80022a0 <SIM_Send_Infos+0x170>)
 800226a:	f000 f81b 	bl	80022a4 <SIM_Wait_Response>
}
 800226e:	bf00      	nop
 8002270:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 8002274:	46bd      	mov	sp, r7
 8002276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002278:	20004722 	.word	0x20004722
 800227c:	20003e44 	.word	0x20003e44
 8002280:	20004720 	.word	0x20004720
 8002284:	20001c6c 	.word	0x20001c6c
 8002288:	20000740 	.word	0x20000740
 800228c:	080172e0 	.word	0x080172e0
 8002290:	20001b3c 	.word	0x20001b3c
 8002294:	0801729c 	.word	0x0801729c
 8002298:	080172c4 	.word	0x080172c4
 800229c:	20000624 	.word	0x20000624
 80022a0:	08017048 	.word	0x08017048

080022a4 <SIM_Wait_Response>:

/*-----ATTESA RISPOSTA-----*/
int SIM_Wait_Response(const char* expected)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b0c8      	sub	sp, #288	@ 0x120
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022ae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80022b2:	6018      	str	r0, [r3, #0]
    char response[256];
    uint16_t timeout = 10000; // 10 secondi
 80022b4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80022b8:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    uint32_t start_time = HAL_GetTick();
 80022bc:	f008 fd24 	bl	800ad08 <HAL_GetTick>
 80022c0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    
    while((HAL_GetTick() - start_time) < timeout)
 80022c4:	e02a      	b.n	800231c <SIM_Wait_Response+0x78>
    {
        uint16_t RxLen = 0;
 80022c6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022ca:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80022ce:	2200      	movs	r2, #0
 80022d0:	801a      	strh	r2, [r3, #0]
        HAL_UARTEx_ReceiveToIdle(SIM_UART, (uint8_t*)response, sizeof(response), &RxLen, 500);
 80022d2:	f107 030e 	add.w	r3, r7, #14
 80022d6:	f107 0110 	add.w	r1, r7, #16
 80022da:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80022de:	9200      	str	r2, [sp, #0]
 80022e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022e4:	4816      	ldr	r0, [pc, #88]	@ (8002340 <SIM_Wait_Response+0x9c>)
 80022e6:	f013 fb7e 	bl	80159e6 <HAL_UARTEx_ReceiveToIdle>
        
        if(RxLen > 0 && strstr(response, expected) != NULL)
 80022ea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022ee:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00e      	beq.n	8002316 <SIM_Wait_Response+0x72>
 80022f8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022fc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002300:	f107 0210 	add.w	r2, r7, #16
 8002304:	6819      	ldr	r1, [r3, #0]
 8002306:	4610      	mov	r0, r2
 8002308:	f013 fde8 	bl	8015edc <strstr>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <SIM_Wait_Response+0x72>
        {
            return 0; 
 8002312:	2300      	movs	r3, #0
 8002314:	e00e      	b.n	8002334 <SIM_Wait_Response+0x90>
        }
        
        HAL_Delay(10);
 8002316:	200a      	movs	r0, #10
 8002318:	f008 fd02 	bl	800ad20 <HAL_Delay>
    while((HAL_GetTick() - start_time) < timeout)
 800231c:	f008 fcf4 	bl	800ad08 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002326:	1ad2      	subs	r2, r2, r3
 8002328:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 800232c:	429a      	cmp	r2, r3
 800232e:	d3ca      	bcc.n	80022c6 <SIM_Wait_Response+0x22>
    }
	return -1;
 8002330:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002334:	4618      	mov	r0, r3
 8002336:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000624 	.word	0x20000624

08002344 <SIM_Check_Connection>:

/*-----CONTROLLA STATO CONNESSIONE MQTT E TCP-----*/
void SIM_Check_Connection(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800234a:	af00      	add	r7, sp, #0
	char command_sim[256];
	char response_sim[256];

	SIM_Send_Command("AT+SMSTATE?\r");                                                            
 800234c:	4823      	ldr	r0, [pc, #140]	@ (80023dc <SIM_Check_Connection+0x98>)
 800234e:	f7ff fb6f 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response_sim);
 8002352:	463b      	mov	r3, r7
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fb97 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_MQTT_State(response_sim))
 800235a:	e00c      	b.n	8002376 <SIM_Check_Connection+0x32>
	{
		SIM_Send_Command("AT+SMCONN\r");                                                              
 800235c:	4820      	ldr	r0, [pc, #128]	@ (80023e0 <SIM_Check_Connection+0x9c>)
 800235e:	f7ff fb67 	bl	8001a30 <SIM_Send_Command>
		SIM_Wait_Response("OK");
 8002362:	4820      	ldr	r0, [pc, #128]	@ (80023e4 <SIM_Check_Connection+0xa0>)
 8002364:	f7ff ff9e 	bl	80022a4 <SIM_Wait_Response>
		SIM_Send_Command("AT+SMSTATE?\r");                                                            
 8002368:	481c      	ldr	r0, [pc, #112]	@ (80023dc <SIM_Check_Connection+0x98>)
 800236a:	f7ff fb61 	bl	8001a30 <SIM_Send_Command>
		SIM_Receive_Response(response_sim);
 800236e:	463b      	mov	r3, r7
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fb89 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_MQTT_State(response_sim))
 8002376:	463b      	mov	r3, r7
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fbc9 	bl	8001b10 <SIM_Check_MQTT_State>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0eb      	beq.n	800235c <SIM_Check_Connection+0x18>
	}
	SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        
 8002384:	4818      	ldr	r0, [pc, #96]	@ (80023e8 <SIM_Check_Connection+0xa4>)
 8002386:	f7ff fb53 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response_sim);
 800238a:	463b      	mov	r3, r7
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fb7b 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_TCP_State(response_sim))
 8002392:	e015      	b.n	80023c0 <SIM_Check_Connection+0x7c>
	{
		sprintf(command_sim, "AT+CIPSTART=\"TCP\",\"%s\",%s\r", sys.TCP.IP_address, sys.TCP.Port);       
 8002394:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8002398:	4b14      	ldr	r3, [pc, #80]	@ (80023ec <SIM_Check_Connection+0xa8>)
 800239a:	4a15      	ldr	r2, [pc, #84]	@ (80023f0 <SIM_Check_Connection+0xac>)
 800239c:	4915      	ldr	r1, [pc, #84]	@ (80023f4 <SIM_Check_Connection+0xb0>)
 800239e:	f013 fd03 	bl	8015da8 <siprintf>
		SIM_Send_Command(command_sim);
 80023a2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fb42 	bl	8001a30 <SIM_Send_Command>
		SIM_Wait_Response("CONNECT OK");
 80023ac:	4812      	ldr	r0, [pc, #72]	@ (80023f8 <SIM_Check_Connection+0xb4>)
 80023ae:	f7ff ff79 	bl	80022a4 <SIM_Wait_Response>
		SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        
 80023b2:	480d      	ldr	r0, [pc, #52]	@ (80023e8 <SIM_Check_Connection+0xa4>)
 80023b4:	f7ff fb3c 	bl	8001a30 <SIM_Send_Command>
		SIM_Receive_Response(response_sim);
 80023b8:	463b      	mov	r3, r7
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fb64 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_TCP_State(response_sim))
 80023c0:	463b      	mov	r3, r7
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fbca 	bl	8001b5c <SIM_Check_TCP_State>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0e2      	beq.n	8002394 <SIM_Check_Connection+0x50>
	}
}
 80023ce:	bf00      	nop
 80023d0:	bf00      	nop
 80023d2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	080171d4 	.word	0x080171d4
 80023e0:	080171c8 	.word	0x080171c8
 80023e4:	08017048 	.word	0x08017048
 80023e8:	08017230 	.word	0x08017230
 80023ec:	20001c04 	.word	0x20001c04
 80023f0:	20001ba0 	.word	0x20001ba0
 80023f4:	08017208 	.word	0x08017208
 80023f8:	08017224 	.word	0x08017224

080023fc <BC_Init>:
#include "global_variables.h"


/*------INIZIALIZZAZIONE BATTERY CHARGER------*/
void BC_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
	BC_Write_Reg(REG00_MINIMAL_SYSTEM_VOLTAGE, 0x1A);           //Tensione minima di uscita con 3 celle = 9V   <----- Senza Batteria il sistema fornisce questa tensione
 8002400:	211a      	movs	r1, #26
 8002402:	2000      	movs	r0, #0
 8002404:	f000 f830 	bl	8002468 <BC_Write_Reg>
	BC_MultiWrite_Reg(REG01_CHARGE_VOLTAGE_LIMIT, 0x04EC);      //Limite tensione di carica con 3 celle = 12.6V
 8002408:	f240 41ec 	movw	r1, #1260	@ 0x4ec
 800240c:	2001      	movs	r0, #1
 800240e:	f000 f877 	bl	8002500 <BC_MultiWrite_Reg>
	BC_MultiWrite_Reg(REG03_CHARGE_CURRENT_LIMIT, 0x0064);      //Limite corrente di carica con 3 celle = 1A
 8002412:	2164      	movs	r1, #100	@ 0x64
 8002414:	2003      	movs	r0, #3
 8002416:	f000 f873 	bl	8002500 <BC_MultiWrite_Reg>
	BC_Write_Reg(REG10_CHARGER_CONTROL_1, 0x85);                //Tensione di OVP in ingresso = 26V
 800241a:	2185      	movs	r1, #133	@ 0x85
 800241c:	2010      	movs	r0, #16
 800241e:	f000 f823 	bl	8002468 <BC_Write_Reg>
	BC_Write_Reg(REG14_CHARGER_CONTROL_5, 0x96);                //Informazione sulla presenza dello Ship-FET
 8002422:	2196      	movs	r1, #150	@ 0x96
 8002424:	2014      	movs	r0, #20
 8002426:	f000 f81f 	bl	8002468 <BC_Write_Reg>
	BC_Write_Reg(REG15_MPPT_CONTROL, 0xAB);                     //MPPT attivato, tensione di MPP = 0.875*Vin, misura di 300ms ogni 2 minuti della Vin
 800242a:	21ab      	movs	r1, #171	@ 0xab
 800242c:	2015      	movs	r0, #21
 800242e:	f000 f81b 	bl	8002468 <BC_Write_Reg>
	BC_Write_Reg(REG28_CHARGER_MASK_0, 0xE1);                   //Interrupt attivati: Poor source, Power good, VAC2 present, VAC1 present
 8002432:	21e1      	movs	r1, #225	@ 0xe1
 8002434:	2028      	movs	r0, #40	@ 0x28
 8002436:	f000 f817 	bl	8002468 <BC_Write_Reg>
	BC_Write_Reg(REG29_CHARGER_MASK_1, 0xD7);                   //Interrupt attivati: nessuno
 800243a:	21d7      	movs	r1, #215	@ 0xd7
 800243c:	2029      	movs	r0, #41	@ 0x29
 800243e:	f000 f813 	bl	8002468 <BC_Write_Reg>
	BC_Write_Reg(REG2A_CHARGER_MASK_2, 0x7F);                   //Interrupt attivati: nessuno
 8002442:	217f      	movs	r1, #127	@ 0x7f
 8002444:	202a      	movs	r0, #42	@ 0x2a
 8002446:	f000 f80f 	bl	8002468 <BC_Write_Reg>
	BC_Write_Reg(REG2B_CHARGER_MASK_3, 0x1F);                   //Interrupt attivati: nessuno
 800244a:	211f      	movs	r1, #31
 800244c:	202b      	movs	r0, #43	@ 0x2b
 800244e:	f000 f80b 	bl	8002468 <BC_Write_Reg>
	BC_Write_Reg(REG2C_FAULT_MASK_0, 0xFC);                     //Interrupt attivati: VAC2 over-voltage, VAC1 over-voltage
 8002452:	21fc      	movs	r1, #252	@ 0xfc
 8002454:	202c      	movs	r0, #44	@ 0x2c
 8002456:	f000 f807 	bl	8002468 <BC_Write_Reg>
	BC_Write_Reg(REG2D_FAULT_MASK_1, 0xF4);                     //Interrupt attivati: nessuno
 800245a:	21f4      	movs	r1, #244	@ 0xf4
 800245c:	202d      	movs	r0, #45	@ 0x2d
 800245e:	f000 f803 	bl	8002468 <BC_Write_Reg>
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <BC_Write_Reg>:

/*------SCRITTURA REGISTRO 8 BIT------*/
int BC_Write_Reg(uint8_t reg, uint8_t wdata)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af02      	add	r7, sp, #8
 800246e:	4603      	mov	r3, r0
 8002470:	460a      	mov	r2, r1
 8002472:	71fb      	strb	r3, [r7, #7]
 8002474:	4613      	mov	r3, r2
 8002476:	71bb      	strb	r3, [r7, #6]
	int result = -1;
 8002478:	f04f 33ff 	mov.w	r3, #4294967295
 800247c:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[2];
	toSend[0] = reg;
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	723b      	strb	r3, [r7, #8]
	toSend[1] = wdata;
 8002482:	79bb      	ldrb	r3, [r7, #6]
 8002484:	727b      	strb	r3, [r7, #9]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 2, 100) == HAL_OK)
 8002486:	f107 0208 	add.w	r2, r7, #8
 800248a:	2364      	movs	r3, #100	@ 0x64
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	2302      	movs	r3, #2
 8002490:	21d6      	movs	r1, #214	@ 0xd6
 8002492:	4806      	ldr	r0, [pc, #24]	@ (80024ac <BC_Write_Reg+0x44>)
 8002494:	f00b feca 	bl	800e22c <HAL_I2C_Master_Transmit>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <BC_Write_Reg+0x3a>
	{
		result = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
	}

	return result;
 80024a2:	68fb      	ldr	r3, [r7, #12]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	200002e8 	.word	0x200002e8

080024b0 <BC_Read_Reg>:

/*------LETTURA REGISTRO 8 BIT------*/
int BC_Read_Reg(uint8_t reg, uint8_t *rdata)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	4603      	mov	r3, r0
 80024b8:	6039      	str	r1, [r7, #0]
 80024ba:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 80024bc:	f04f 33ff 	mov.w	r3, #4294967295
 80024c0:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 80024c2:	1dfa      	adds	r2, r7, #7
 80024c4:	2364      	movs	r3, #100	@ 0x64
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2301      	movs	r3, #1
 80024ca:	21d6      	movs	r1, #214	@ 0xd6
 80024cc:	480b      	ldr	r0, [pc, #44]	@ (80024fc <BC_Read_Reg+0x4c>)
 80024ce:	f00b fead 	bl	800e22c <HAL_I2C_Master_Transmit>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10c      	bne.n	80024f2 <BC_Read_Reg+0x42>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, rdata, 1, 100) == HAL_OK)
 80024d8:	2364      	movs	r3, #100	@ 0x64
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	2301      	movs	r3, #1
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	21d6      	movs	r1, #214	@ 0xd6
 80024e2:	4806      	ldr	r0, [pc, #24]	@ (80024fc <BC_Read_Reg+0x4c>)
 80024e4:	f00b ffba 	bl	800e45c <HAL_I2C_Master_Receive>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <BC_Read_Reg+0x42>
		{
			result = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
		}
	}

	return result;
 80024f2:	68fb      	ldr	r3, [r7, #12]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	200002e8 	.word	0x200002e8

08002500 <BC_MultiWrite_Reg>:

/*------SCRITTURA REGISTRO 16 BIT------*/
int BC_MultiWrite_Reg(uint8_t reg, uint16_t wdata)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af02      	add	r7, sp, #8
 8002506:	4603      	mov	r3, r0
 8002508:	460a      	mov	r2, r1
 800250a:	71fb      	strb	r3, [r7, #7]
 800250c:	4613      	mov	r3, r2
 800250e:	80bb      	strh	r3, [r7, #4]
	int result = -1;
 8002510:	f04f 33ff 	mov.w	r3, #4294967295
 8002514:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[3];
	toSend[0] = reg;
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	723b      	strb	r3, [r7, #8]
	toSend[1] = (wdata & 0xFF00) >> 8;
 800251a:	88bb      	ldrh	r3, [r7, #4]
 800251c:	0a1b      	lsrs	r3, r3, #8
 800251e:	b29b      	uxth	r3, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	727b      	strb	r3, [r7, #9]
	toSend[2] = wdata & 0x00FF;
 8002524:	88bb      	ldrh	r3, [r7, #4]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 3, 100) == HAL_OK)
 800252a:	f107 0208 	add.w	r2, r7, #8
 800252e:	2364      	movs	r3, #100	@ 0x64
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	2303      	movs	r3, #3
 8002534:	21d6      	movs	r1, #214	@ 0xd6
 8002536:	4806      	ldr	r0, [pc, #24]	@ (8002550 <BC_MultiWrite_Reg+0x50>)
 8002538:	f00b fe78 	bl	800e22c <HAL_I2C_Master_Transmit>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <BC_MultiWrite_Reg+0x46>
	{
		result = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8002546:	68fb      	ldr	r3, [r7, #12]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	200002e8 	.word	0x200002e8

08002554 <BC_MultiRead_Reg>:

/*------LETTURA REGISTRO 16 BIT------*/
int BC_MultiRead_Reg(uint8_t reg, uint16_t *rdata)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af02      	add	r7, sp, #8
 800255a:	4603      	mov	r3, r0
 800255c:	6039      	str	r1, [r7, #0]
 800255e:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8002560:	f04f 33ff 	mov.w	r3, #4294967295
 8002564:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 8002566:	2300      	movs	r3, #0
 8002568:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 800256a:	1dfa      	adds	r2, r7, #7
 800256c:	2364      	movs	r3, #100	@ 0x64
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	2301      	movs	r3, #1
 8002572:	21d6      	movs	r1, #214	@ 0xd6
 8002574:	4811      	ldr	r0, [pc, #68]	@ (80025bc <BC_MultiRead_Reg+0x68>)
 8002576:	f00b fe59 	bl	800e22c <HAL_I2C_Master_Transmit>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d118      	bne.n	80025b2 <BC_MultiRead_Reg+0x5e>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, data, 2, 100) == HAL_OK)
 8002580:	f107 0208 	add.w	r2, r7, #8
 8002584:	2364      	movs	r3, #100	@ 0x64
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	2302      	movs	r3, #2
 800258a:	21d6      	movs	r1, #214	@ 0xd6
 800258c:	480b      	ldr	r0, [pc, #44]	@ (80025bc <BC_MultiRead_Reg+0x68>)
 800258e:	f00b ff65 	bl	800e45c <HAL_I2C_Master_Receive>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10c      	bne.n	80025b2 <BC_MultiRead_Reg+0x5e>
		{
			result = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 800259c:	7a3b      	ldrb	r3, [r7, #8]
 800259e:	b21b      	sxth	r3, r3
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	b21a      	sxth	r2, r3
 80025a4:	7a7b      	ldrb	r3, [r7, #9]
 80025a6:	b21b      	sxth	r3, r3
 80025a8:	4313      	orrs	r3, r2
 80025aa:	b21b      	sxth	r3, r3
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 80025b2:	68fb      	ldr	r3, [r7, #12]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	200002e8 	.word	0x200002e8

080025c0 <BC_Read_Flags>:

/*------LETTURA FLAGS DI INTERRUZIONE------*/
int BC_Read_Flags(uint64_t *flags)
{
 80025c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025c4:	b09b      	sub	sp, #108	@ 0x6c
 80025c6:	af02      	add	r7, sp, #8
 80025c8:	64f8      	str	r0, [r7, #76]	@ 0x4c
	int result = -1;
 80025ca:	f04f 33ff 	mov.w	r3, #4294967295
 80025ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint8_t data[6] = {0};
 80025d0:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80025d4:	2300      	movs	r3, #0
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	8093      	strh	r3, [r2, #4]
	uint8_t reg = REG22_CHARGER_FLAG_0;
 80025da:	2322      	movs	r3, #34	@ 0x22
 80025dc:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 80025e0:	f107 0253 	add.w	r2, r7, #83	@ 0x53
 80025e4:	2364      	movs	r3, #100	@ 0x64
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	2301      	movs	r3, #1
 80025ea:	21d6      	movs	r1, #214	@ 0xd6
 80025ec:	484a      	ldr	r0, [pc, #296]	@ (8002718 <BC_Read_Flags+0x158>)
 80025ee:	f00b fe1d 	bl	800e22c <HAL_I2C_Master_Transmit>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f040 8089 	bne.w	800270c <BC_Read_Flags+0x14c>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1 , (uint8_t *)data, 6, 100) == HAL_OK)
 80025fa:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80025fe:	2364      	movs	r3, #100	@ 0x64
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	2306      	movs	r3, #6
 8002604:	21d6      	movs	r1, #214	@ 0xd6
 8002606:	4844      	ldr	r0, [pc, #272]	@ (8002718 <BC_Read_Flags+0x158>)
 8002608:	f00b ff28 	bl	800e45c <HAL_I2C_Master_Receive>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d17c      	bne.n	800270c <BC_Read_Flags+0x14c>
		{
			result = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	65fb      	str	r3, [r7, #92]	@ 0x5c
			*flags = ((uint64_t)data[0] << 40) | ((uint64_t)data[1] << 32) | ((uint64_t)data[2] << 24) | ((uint64_t)data[3] << 16) | ((uint64_t)data[4] << 8) | (uint64_t)data[5];
 8002616:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2200      	movs	r2, #0
 800261e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002620:	647a      	str	r2, [r7, #68]	@ 0x44
 8002622:	f04f 0000 	mov.w	r0, #0
 8002626:	f04f 0100 	mov.w	r1, #0
 800262a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800262c:	0219      	lsls	r1, r3, #8
 800262e:	2000      	movs	r0, #0
 8002630:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2200      	movs	r2, #0
 8002638:	63bb      	str	r3, [r7, #56]	@ 0x38
 800263a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8002646:	0033      	movs	r3, r6
 8002648:	2200      	movs	r2, #0
 800264a:	ea40 0802 	orr.w	r8, r0, r2
 800264e:	ea41 0903 	orr.w	r9, r1, r3
 8002652:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2200      	movs	r2, #0
 800265a:	633b      	str	r3, [r7, #48]	@ 0x30
 800265c:	637a      	str	r2, [r7, #52]	@ 0x34
 800265e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8002662:	460b      	mov	r3, r1
 8002664:	0a1d      	lsrs	r5, r3, #8
 8002666:	460b      	mov	r3, r1
 8002668:	061c      	lsls	r4, r3, #24
 800266a:	ea48 0304 	orr.w	r3, r8, r4
 800266e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002670:	ea49 0305 	orr.w	r3, r9, r5
 8002674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002676:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2200      	movs	r2, #0
 800267e:	623b      	str	r3, [r7, #32]
 8002680:	627a      	str	r2, [r7, #36]	@ 0x24
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800268e:	4629      	mov	r1, r5
 8002690:	040b      	lsls	r3, r1, #16
 8002692:	4621      	mov	r1, r4
 8002694:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8002698:	4621      	mov	r1, r4
 800269a:	040a      	lsls	r2, r1, #16
 800269c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80026a0:	4621      	mov	r1, r4
 80026a2:	4311      	orrs	r1, r2
 80026a4:	61b9      	str	r1, [r7, #24]
 80026a6:	4629      	mov	r1, r5
 80026a8:	4319      	orrs	r1, r3
 80026aa:	61f9      	str	r1, [r7, #28]
 80026ac:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2200      	movs	r2, #0
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	617a      	str	r2, [r7, #20]
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80026c4:	4629      	mov	r1, r5
 80026c6:	020b      	lsls	r3, r1, #8
 80026c8:	4621      	mov	r1, r4
 80026ca:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80026ce:	4621      	mov	r1, r4
 80026d0:	020a      	lsls	r2, r1, #8
 80026d2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80026d6:	4621      	mov	r1, r4
 80026d8:	ea41 0a02 	orr.w	sl, r1, r2
 80026dc:	4629      	mov	r1, r5
 80026de:	ea41 0b03 	orr.w	fp, r1, r3
 80026e2:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2200      	movs	r2, #0
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	60fa      	str	r2, [r7, #12]
 80026ee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80026f2:	460b      	mov	r3, r1
 80026f4:	ea4a 0303 	orr.w	r3, sl, r3
 80026f8:	603b      	str	r3, [r7, #0]
 80026fa:	4613      	mov	r3, r2
 80026fc:	ea4b 0303 	orr.w	r3, fp, r3
 8002700:	607b      	str	r3, [r7, #4]
 8002702:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002704:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002708:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}

	return result;
 800270c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 800270e:	4618      	mov	r0, r3
 8002710:	3764      	adds	r7, #100	@ 0x64
 8002712:	46bd      	mov	sp, r7
 8002714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002718:	200002e8 	.word	0x200002e8

0800271c <BC_Manage_Interrupts>:

/*------GESTIONE DELLE INTERRUZIONI------*/
void BC_Manage_Interrupts(uint64_t flags)
{
 800271c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002720:	b084      	sub	sp, #16
 8002722:	af00      	add	r7, sp, #0
 8002724:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t status = 0;
 8002728:	2100      	movs	r1, #0
 800272a:	73f9      	strb	r1, [r7, #15]

	if((flags & POOR_SOURCE_MASK) != 0)   //INGRESSO NON BUONO
 800272c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002730:	2200      	movs	r2, #0
 8002732:	f401 5380 	and.w	r3, r1, #4096	@ 0x1000
 8002736:	4313      	orrs	r3, r2
 8002738:	d00c      	beq.n	8002754 <BC_Manage_Interrupts+0x38>
	{
		// ...gestione evento...
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 800273a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	0a0a      	lsrs	r2, r1, #8
 8002748:	2300      	movs	r3, #0
 800274a:	b2d3      	uxtb	r3, r2
 800274c:	4619      	mov	r1, r3
 800274e:	2022      	movs	r0, #34	@ 0x22
 8002750:	f7ff fe8a 	bl	8002468 <BC_Write_Reg>
	}

	if((flags & VAC2_CHANGE_MASK) != 0)  //PANNELLO INSERITO O RIMOSSO
 8002754:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002758:	f04f 0800 	mov.w	r8, #0
 800275c:	f403 6980 	and.w	r9, r3, #1024	@ 0x400
 8002760:	ea58 0309 	orrs.w	r3, r8, r9
 8002764:	d020      	beq.n	80027a8 <BC_Manage_Interrupts+0x8c>
	{
		BC_Read_Reg(REG1B_CHARGER_STATUS_0, &status);
 8002766:	f107 030f 	add.w	r3, r7, #15
 800276a:	4619      	mov	r1, r3
 800276c:	201b      	movs	r0, #27
 800276e:	f7ff fe9f 	bl	80024b0 <BC_Read_Reg>
		if((status & VAC2_PRESENT_MASK) != 0)
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d004      	beq.n	8002786 <BC_Manage_Interrupts+0x6a>
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x80);                //Usa Pannello
 800277c:	2180      	movs	r1, #128	@ 0x80
 800277e:	2013      	movs	r0, #19
 8002780:	f7ff fe72 	bl	8002468 <BC_Write_Reg>
 8002784:	e003      	b.n	800278e <BC_Manage_Interrupts+0x72>
		}
		else
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x40);                //Usa Turbina
 8002786:	2140      	movs	r1, #64	@ 0x40
 8002788:	2013      	movs	r0, #19
 800278a:	f7ff fe6d 	bl	8002468 <BC_Write_Reg>
		}
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 800278e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	0a0a      	lsrs	r2, r1, #8
 800279c:	2300      	movs	r3, #0
 800279e:	b2d3      	uxtb	r3, r2
 80027a0:	4619      	mov	r1, r3
 80027a2:	2022      	movs	r0, #34	@ 0x22
 80027a4:	f7ff fe60 	bl	8002468 <BC_Write_Reg>
	}

	if((flags & VAC1_CHANGE_MASK) != 0)  //TURBINA INSERITA O RIMOSSA
 80027a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027ac:	2400      	movs	r4, #0
 80027ae:	f403 7500 	and.w	r5, r3, #512	@ 0x200
 80027b2:	ea54 0305 	orrs.w	r3, r4, r5
 80027b6:	d00c      	beq.n	80027d2 <BC_Manage_Interrupts+0xb6>
	{
		// ...gestione evento...
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 80027b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	0a0a      	lsrs	r2, r1, #8
 80027c6:	2300      	movs	r3, #0
 80027c8:	b2d3      	uxtb	r3, r2
 80027ca:	4619      	mov	r1, r3
 80027cc:	2022      	movs	r0, #34	@ 0x22
 80027ce:	f7ff fe4b 	bl	8002468 <BC_Write_Reg>
	}

	flags = 0;
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	e9c7 2300 	strd	r2, r3, [r7]
}
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080027e8 <HAL_UARTEx_RxEventCallback>:
	}
}

/* ------CALLBACK UART RX IDLE------*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	807b      	strh	r3, [r7, #2]
	if(huart == SIM_UART)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a31      	ldr	r2, [pc, #196]	@ (80028bc <HAL_UARTEx_RxEventCallback+0xd4>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d155      	bne.n	80028a8 <HAL_UARTEx_RxEventCallback+0xc0>
	{
		if(*(uint8_t*)sim_rx_buffer == '>')
 80027fc:	4b30      	ldr	r3, [pc, #192]	@ (80028c0 <HAL_UARTEx_RxEventCallback+0xd8>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b3e      	cmp	r3, #62	@ 0x3e
 8002802:	d120      	bne.n	8002846 <HAL_UARTEx_RxEventCallback+0x5e>
		{
			if(flags.CMD.Measure_Request)
 8002804:	4b2f      	ldr	r3, [pc, #188]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002806:	789b      	ldrb	r3, [r3, #2]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d005      	beq.n	800281e <HAL_UARTEx_RxEventCallback+0x36>
			{
				flags.TCP_ReadytoSend = 1;
 8002812:	4a2c      	ldr	r2, [pc, #176]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002814:	7853      	ldrb	r3, [r2, #1]
 8002816:	f043 0302 	orr.w	r3, r3, #2
 800281a:	7053      	strb	r3, [r2, #1]
 800281c:	e044      	b.n	80028a8 <HAL_UARTEx_RxEventCallback+0xc0>
			}
			else if(flags.CMD.Data_Request)
 800281e:	4b29      	ldr	r3, [pc, #164]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002820:	789b      	ldrb	r3, [r3, #2]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d03d      	beq.n	80028a8 <HAL_UARTEx_RxEventCallback+0xc0>
			{
				flags.MQTT_ReadytoSend = 1;
 800282c:	4a25      	ldr	r2, [pc, #148]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0xdc>)
 800282e:	7853      	ldrb	r3, [r2, #1]
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	7053      	strb	r3, [r2, #1]
				sys.SIM_Prompt_Status = 0;
 8002836:	4b24      	ldr	r3, [pc, #144]	@ (80028c8 <HAL_UARTEx_RxEventCallback+0xe0>)
 8002838:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800283c:	461a      	mov	r2, r3
 800283e:	2300      	movs	r3, #0
 8002840:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002844:	e030      	b.n	80028a8 <HAL_UARTEx_RxEventCallback+0xc0>
			}
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 8002846:	4b1e      	ldr	r3, [pc, #120]	@ (80028c0 <HAL_UARTEx_RxEventCallback+0xd8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a20      	ldr	r2, [pc, #128]	@ (80028cc <HAL_UARTEx_RxEventCallback+0xe4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d10a      	bne.n	8002866 <HAL_UARTEx_RxEventCallback+0x7e>
				*(uint32_t*)(sim_rx_buffer + 4) == 0x203A4255)       // "UB: "
 8002850:	4b1f      	ldr	r3, [pc, #124]	@ (80028d0 <HAL_UARTEx_RxEventCallback+0xe8>)
 8002852:	681b      	ldr	r3, [r3, #0]
		else if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 8002854:	4a1f      	ldr	r2, [pc, #124]	@ (80028d4 <HAL_UARTEx_RxEventCallback+0xec>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d105      	bne.n	8002866 <HAL_UARTEx_RxEventCallback+0x7e>
		{     
			flags.MQTT_Message_Rx = 1;
 800285a:	4a1a      	ldr	r2, [pc, #104]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0xdc>)
 800285c:	7813      	ldrb	r3, [r2, #0]
 800285e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002862:	7013      	strb	r3, [r2, #0]
 8002864:	e020      	b.n	80028a8 <HAL_UARTEx_RxEventCallback+0xc0>
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x444E4553 &&           // "SEND"
 8002866:	4b16      	ldr	r3, [pc, #88]	@ (80028c0 <HAL_UARTEx_RxEventCallback+0xd8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a1b      	ldr	r2, [pc, #108]	@ (80028d8 <HAL_UARTEx_RxEventCallback+0xf0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d10a      	bne.n	8002886 <HAL_UARTEx_RxEventCallback+0x9e>
       			*(uint32_t*)(sim_rx_buffer + 4) == 0x004B204F)       // " OK\0"
 8002870:	4b17      	ldr	r3, [pc, #92]	@ (80028d0 <HAL_UARTEx_RxEventCallback+0xe8>)
 8002872:	681b      	ldr	r3, [r3, #0]
		else if(*(uint32_t*)sim_rx_buffer == 0x444E4553 &&           // "SEND"
 8002874:	4a19      	ldr	r2, [pc, #100]	@ (80028dc <HAL_UARTEx_RxEventCallback+0xf4>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d105      	bne.n	8002886 <HAL_UARTEx_RxEventCallback+0x9e>
		{
			flags.TCP_isSending = 0;
 800287a:	4a12      	ldr	r2, [pc, #72]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0xdc>)
 800287c:	7853      	ldrb	r3, [r2, #1]
 800287e:	f023 0304 	bic.w	r3, r3, #4
 8002882:	7053      	strb	r3, [r2, #1]
 8002884:	e010      	b.n	80028a8 <HAL_UARTEx_RxEventCallback+0xc0>
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x4552524F)            //"ERRO"
 8002886:	4b0e      	ldr	r3, [pc, #56]	@ (80028c0 <HAL_UARTEx_RxEventCallback+0xd8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a15      	ldr	r2, [pc, #84]	@ (80028e0 <HAL_UARTEx_RxEventCallback+0xf8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d10b      	bne.n	80028a8 <HAL_UARTEx_RxEventCallback+0xc0>
		{
			flags.MQTT_ReadytoSend = 0;
 8002890:	4a0c      	ldr	r2, [pc, #48]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002892:	7853      	ldrb	r3, [r2, #1]
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	7053      	strb	r3, [r2, #1]
			sys.SIM_Prompt_Status = 0;
 800289a:	4b0b      	ldr	r3, [pc, #44]	@ (80028c8 <HAL_UARTEx_RxEventCallback+0xe0>)
 800289c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028a0:	461a      	mov	r2, r3
 80028a2:	2300      	movs	r3, #0
 80028a4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
		}
	}
	
	HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 80028a8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80028ac:	4904      	ldr	r1, [pc, #16]	@ (80028c0 <HAL_UARTEx_RxEventCallback+0xd8>)
 80028ae:	4803      	ldr	r0, [pc, #12]	@ (80028bc <HAL_UARTEx_RxEventCallback+0xd4>)
 80028b0:	f013 f99c 	bl	8015bec <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20000624 	.word	0x20000624
 80028c0:	200054f4 	.word	0x200054f4
 80028c4:	20001c68 	.word	0x20001c68
 80028c8:	20000740 	.word	0x20000740
 80028cc:	534d532b 	.word	0x534d532b
 80028d0:	200054f8 	.word	0x200054f8
 80028d4:	203a4255 	.word	0x203a4255
 80028d8:	444e4553 	.word	0x444e4553
 80028dc:	004b204f 	.word	0x004b204f
 80028e0:	4552524f 	.word	0x4552524f

080028e4 <HAL_UART_RxCpltCallback>:

/* ------CALLBACK UART RX COMPLETE------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
	if (huart == SIM_UART)
	{

	}

}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_UART_TxCpltCallback>:

/* ------CALLBACK UART TX COMPLETE------*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
	if (huart == SIM_UART)
	{

	}

}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_ADC_ConvHalfCpltCallback>:

/* ------CALLBACK HALF ADC------*/
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a09      	ldr	r2, [pc, #36]	@ (800293c <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d109      	bne.n	8002930 <HAL_ADC_ConvHalfCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 800291c:	4a08      	ldr	r2, [pc, #32]	@ (8002940 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 800291e:	7813      	ldrb	r3, [r2, #0]
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	7013      	strb	r3, [r2, #0]
		flags.ADC_Half_Buffer = 1;
 8002926:	4a06      	ldr	r2, [pc, #24]	@ (8002940 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8002928:	7813      	ldrb	r3, [r2, #0]
 800292a:	f043 0302 	orr.w	r3, r3, #2
 800292e:	7013      	strb	r3, [r2, #0]
	}
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	20000218 	.word	0x20000218
 8002940:	20001c68 	.word	0x20001c68

08002944 <HAL_ADC_ConvCpltCallback>:

/*------CALLBACK FULL ADC------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a09      	ldr	r2, [pc, #36]	@ (8002974 <HAL_ADC_ConvCpltCallback+0x30>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d109      	bne.n	8002968 <HAL_ADC_ConvCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8002954:	4a08      	ldr	r2, [pc, #32]	@ (8002978 <HAL_ADC_ConvCpltCallback+0x34>)
 8002956:	7813      	ldrb	r3, [r2, #0]
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	7013      	strb	r3, [r2, #0]
		flags.ADC_Full_Buffer = 1;
 800295e:	4a06      	ldr	r2, [pc, #24]	@ (8002978 <HAL_ADC_ConvCpltCallback+0x34>)
 8002960:	7813      	ldrb	r3, [r2, #0]
 8002962:	f043 0304 	orr.w	r3, r3, #4
 8002966:	7013      	strb	r3, [r2, #0]
	}
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	20000218 	.word	0x20000218
 8002978:	20001c68 	.word	0x20001c68

0800297c <HAL_RTC_AlarmAEventCallback>:

/*------CALLBACK RTC CAMBIO ORA------*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b092      	sub	sp, #72	@ 0x48
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef gTime;
	RTC_AlarmTypeDef sAlarm = {0};
 8002984:	f107 0308 	add.w	r3, r7, #8
 8002988:	222c      	movs	r2, #44	@ 0x2c
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f013 fa6b 	bl	8015e68 <memset>

	HAL_RTC_GetTime(hrtc, &gTime, RTC_FORMAT_BIN);
 8002992:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002996:	2200      	movs	r2, #0
 8002998:	4619      	mov	r1, r3
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f00e fa39 	bl	8010e12 <HAL_RTC_GetTime>

	sys.Low_th = Low_TH_Array[gTime.Hours];
 80029a0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80029a4:	461a      	mov	r2, r3
 80029a6:	4b17      	ldr	r3, [pc, #92]	@ (8002a04 <HAL_RTC_AlarmAEventCallback+0x88>)
 80029a8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80029ac:	4b16      	ldr	r3, [pc, #88]	@ (8002a08 <HAL_RTC_AlarmAEventCallback+0x8c>)
 80029ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
	sys.High_th = High_TH_Array[gTime.Hours];
 80029b4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b14      	ldr	r3, [pc, #80]	@ (8002a0c <HAL_RTC_AlarmAEventCallback+0x90>)
 80029bc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80029c0:	4b11      	ldr	r3, [pc, #68]	@ (8002a08 <HAL_RTC_AlarmAEventCallback+0x8c>)
 80029c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029c6:	861a      	strh	r2, [r3, #48]	@ 0x30

	sAlarm.AlarmTime.Hours = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	723b      	strb	r3, [r7, #8]
    sAlarm.AlarmTime.Minutes = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	727b      	strb	r3, [r7, #9]
    sAlarm.AlarmTime.Seconds = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	72bb      	strb	r3, [r7, #10]
    sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS | RTC_ALARMMASK_SECONDS;
 80029d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a10 <HAL_RTC_AlarmAEventCallback+0x94>)
 80029d6:	61fb      	str	r3, [r7, #28]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80029d8:	2300      	movs	r3, #0
 80029da:	627b      	str	r3, [r7, #36]	@ 0x24
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80029dc:	2300      	movs	r3, #0
 80029de:	62bb      	str	r3, [r7, #40]	@ 0x28
    sAlarm.AlarmDateWeekDay = 1;
 80029e0:	2301      	movs	r3, #1
 80029e2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    sAlarm.Alarm = RTC_ALARM_A;
 80029e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029ea:	633b      	str	r3, [r7, #48]	@ 0x30
    
    HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BIN);
 80029ec:	f107 0308 	add.w	r3, r7, #8
 80029f0:	2200      	movs	r2, #0
 80029f2:	4619      	mov	r1, r3
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f00e faef 	bl	8010fd8 <HAL_RTC_SetAlarm_IT>
}
 80029fa:	bf00      	nop
 80029fc:	3748      	adds	r7, #72	@ 0x48
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200054b4 	.word	0x200054b4
 8002a08:	20000740 	.word	0x20000740
 8002a0c:	20005484 	.word	0x20005484
 8002a10:	80800080 	.word	0x80800080

08002a14 <extflash_cs_set>:
uint32_t	exflashNumSectors = 0;
uint8_t		exflashInitDone = 0;


void extflash_cs_set()
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_RESET);
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a1e:	4802      	ldr	r0, [pc, #8]	@ (8002a28 <extflash_cs_set+0x14>)
 8002a20:	f00b fb50 	bl	800e0c4 <HAL_GPIO_WritePin>
}
 8002a24:	bf00      	nop
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	48000400 	.word	0x48000400

08002a2c <extflash_cs_reset>:

void extflash_cs_reset()
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 8002a30:	2201      	movs	r2, #1
 8002a32:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a36:	4802      	ldr	r0, [pc, #8]	@ (8002a40 <extflash_cs_reset+0x14>)
 8002a38:	f00b fb44 	bl	800e0c4 <HAL_GPIO_WritePin>
}
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	48000400 	.word	0x48000400

08002a44 <extflash_wp_reset>:
{
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_RESET);
}

void extflash_wp_reset()
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_SET);
 8002a48:	2201      	movs	r2, #1
 8002a4a:	2140      	movs	r1, #64	@ 0x40
 8002a4c:	4802      	ldr	r0, [pc, #8]	@ (8002a58 <extflash_wp_reset+0x14>)
 8002a4e:	f00b fb39 	bl	800e0c4 <HAL_GPIO_WritePin>
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	48000800 	.word	0x48000800

08002a5c <extflash_hard_reset>:


void extflash_hard_reset()
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_RESET);
 8002a60:	2200      	movs	r2, #0
 8002a62:	2180      	movs	r1, #128	@ 0x80
 8002a64:	4806      	ldr	r0, [pc, #24]	@ (8002a80 <extflash_hard_reset+0x24>)
 8002a66:	f00b fb2d 	bl	800e0c4 <HAL_GPIO_WritePin>

	HAL_Delay(50);
 8002a6a:	2032      	movs	r0, #50	@ 0x32
 8002a6c:	f008 f958 	bl	800ad20 <HAL_Delay>

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_SET);
 8002a70:	2201      	movs	r2, #1
 8002a72:	2180      	movs	r1, #128	@ 0x80
 8002a74:	4802      	ldr	r0, [pc, #8]	@ (8002a80 <extflash_hard_reset+0x24>)
 8002a76:	f00b fb25 	bl	800e0c4 <HAL_GPIO_WritePin>

	return;
 8002a7a:	bf00      	nop
}
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	48000800 	.word	0x48000800

08002a84 <extflash_send_cmd>:


int32_t extflash_send_cmd(extflash_cmd_t command)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]

	uint8_t addr_bytes[4] = {0};
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	61bb      	str	r3, [r7, #24]
	uint8_t dummy_bytes[8] = {0};
 8002a90:	f107 0310 	add.w	r3, r7, #16
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
	uint8_t dummy = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	77fb      	strb	r3, [r7, #31]
	uint8_t cmd_data = command->cmd;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	73fb      	strb	r3, [r7, #15]

	if(command->address_en != 0)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	785b      	ldrb	r3, [r3, #1]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00d      	beq.n	8002ac8 <extflash_send_cmd+0x44>
	{
		addr_bytes[0] = (command->address >> 16) & 0xFF;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	0c1b      	lsrs	r3, r3, #16
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	763b      	strb	r3, [r7, #24]
		addr_bytes[1] = (command->address >> 8) & 0xFF;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	0a1b      	lsrs	r3, r3, #8
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	767b      	strb	r3, [r7, #25]
		addr_bytes[2] = (command->address) & 0xFF;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	76bb      	strb	r3, [r7, #26]
	}

	extflash_cs_set();
 8002ac8:	f7ff ffa4 	bl	8002a14 <extflash_cs_set>

	HAL_SPI_Transmit(EXTFLASH_SPI, &cmd_data, 1, FLASH_SPI_DEF_TIMEOUT);
 8002acc:	f107 010f 	add.w	r1, r7, #15
 8002ad0:	2364      	movs	r3, #100	@ 0x64
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	4823      	ldr	r0, [pc, #140]	@ (8002b64 <extflash_send_cmd+0xe0>)
 8002ad6:	f00e fd7e 	bl	80115d6 <HAL_SPI_Transmit>

	if(command->address_en != 0)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	785b      	ldrb	r3, [r3, #1]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d006      	beq.n	8002af0 <extflash_send_cmd+0x6c>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, addr_bytes, 3, FLASH_SPI_DEF_TIMEOUT);
 8002ae2:	f107 0118 	add.w	r1, r7, #24
 8002ae6:	2364      	movs	r3, #100	@ 0x64
 8002ae8:	2203      	movs	r2, #3
 8002aea:	481e      	ldr	r0, [pc, #120]	@ (8002b64 <extflash_send_cmd+0xe0>)
 8002aec:	f00e fd73 	bl	80115d6 <HAL_SPI_Transmit>
	}

	if(command->dummy_nb > 0)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	88db      	ldrh	r3, [r3, #6]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00e      	beq.n	8002b16 <extflash_send_cmd+0x92>
	{
		dummy = command->dummy_nb > sizeof(dummy_bytes) ? sizeof(dummy_bytes) : command->dummy_nb;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	88db      	ldrh	r3, [r3, #6]
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	bf28      	it	cs
 8002b00:	2308      	movcs	r3, #8
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	77fb      	strb	r3, [r7, #31]
		HAL_SPI_Transmit(EXTFLASH_SPI, dummy_bytes, dummy, FLASH_SPI_DEF_TIMEOUT);
 8002b06:	7ffb      	ldrb	r3, [r7, #31]
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	f107 0110 	add.w	r1, r7, #16
 8002b0e:	2364      	movs	r3, #100	@ 0x64
 8002b10:	4814      	ldr	r0, [pc, #80]	@ (8002b64 <extflash_send_cmd+0xe0>)
 8002b12:	f00e fd60 	bl	80115d6 <HAL_SPI_Transmit>
	}

	if(command->tx_nb > 0 && command->tx_data != NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	885b      	ldrh	r3, [r3, #2]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00b      	beq.n	8002b36 <extflash_send_cmd+0xb2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d007      	beq.n	8002b36 <extflash_send_cmd+0xb2>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, command->tx_data, command->tx_nb, FLASH_SPI_DEF_TIMEOUT);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68d9      	ldr	r1, [r3, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	885a      	ldrh	r2, [r3, #2]
 8002b2e:	2364      	movs	r3, #100	@ 0x64
 8002b30:	480c      	ldr	r0, [pc, #48]	@ (8002b64 <extflash_send_cmd+0xe0>)
 8002b32:	f00e fd50 	bl	80115d6 <HAL_SPI_Transmit>
	}

	if(command->rx_nb > 0 && command->rx_data != NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	889b      	ldrh	r3, [r3, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00b      	beq.n	8002b56 <extflash_send_cmd+0xd2>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d007      	beq.n	8002b56 <extflash_send_cmd+0xd2>
	{
		HAL_SPI_Receive(EXTFLASH_SPI, command->rx_data, command->rx_nb, FLASH_SPI_DEF_TIMEOUT);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6919      	ldr	r1, [r3, #16]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	889a      	ldrh	r2, [r3, #4]
 8002b4e:	2364      	movs	r3, #100	@ 0x64
 8002b50:	4804      	ldr	r0, [pc, #16]	@ (8002b64 <extflash_send_cmd+0xe0>)
 8002b52:	f00e feb6 	bl	80118c2 <HAL_SPI_Receive>
	}

	extflash_cs_reset();
 8002b56:	f7ff ff69 	bl	8002a2c <extflash_cs_reset>

	return 0;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3720      	adds	r7, #32
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	200003a4 	.word	0x200003a4

08002b68 <extflash_read_extended_read_reg>:

}


int extflash_read_extended_read_reg(uint8_t *ereg)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 8002b70:	f107 030c 	add.w	r3, r7, #12
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDERP;
 8002b80:	2381      	movs	r3, #129	@ 0x81
 8002b82:	733b      	strb	r3, [r7, #12]
	command.address_en = 0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	737b      	strb	r3, [r7, #13]
	command.address = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
	command.rx_nb = 1;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	823b      	strh	r3, [r7, #16]
	command.rx_data = ereg;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	61fb      	str	r3, [r7, #28]

	return extflash_send_cmd(&command);
 8002b94:	f107 030c 	add.w	r3, r7, #12
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff73 	bl	8002a84 <extflash_send_cmd>
 8002b9e:	4603      	mov	r3, r0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3720      	adds	r7, #32
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <extflash_clear_extended_read_reg>:


int extflash_clear_extended_read_reg()
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
	extflash_cmd command = {0};
 8002bae:	1d3b      	adds	r3, r7, #4
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_CLERP;
 8002bbc:	2382      	movs	r3, #130	@ 0x82
 8002bbe:	713b      	strb	r3, [r7, #4]

	return extflash_send_cmd(&command);
 8002bc0:	1d3b      	adds	r3, r7, #4
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ff5e 	bl	8002a84 <extflash_send_cmd>
 8002bc8:	4603      	mov	r3, r0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <extflash_set_write_protection>:
	return extflash_send_cmd(&command);

}

int extflash_set_write_protection(uint8_t enable)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b088      	sub	sp, #32
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	4603      	mov	r3, r0
 8002bda:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 8002bdc:	f107 030c 	add.w	r3, r7, #12
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	611a      	str	r2, [r3, #16]
	command.cmd = enable==0 ? EFLASH_CMD_WREN : EFLASH_CMD_WRDI;
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <extflash_set_write_protection+0x24>
 8002bf2:	2306      	movs	r3, #6
 8002bf4:	e000      	b.n	8002bf8 <extflash_set_write_protection+0x26>
 8002bf6:	2304      	movs	r3, #4
 8002bf8:	733b      	strb	r3, [r7, #12]

	return extflash_send_cmd(&command);
 8002bfa:	f107 030c 	add.w	r3, r7, #12
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff ff40 	bl	8002a84 <extflash_send_cmd>
 8002c04:	4603      	mov	r3, r0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3720      	adds	r7, #32
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <extflash_read_sfdp>:

int extflash_read_sfdp(uint32_t regaddr, uint8_t *reg, uint8_t nregs)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b08a      	sub	sp, #40	@ 0x28
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 8002c1c:	f107 0314 	add.w	r3, r7, #20
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDSFDP;
 8002c2c:	235a      	movs	r3, #90	@ 0x5a
 8002c2e:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 8002c30:	2301      	movs	r3, #1
 8002c32:	757b      	strb	r3, [r7, #21]
	command.address = regaddr;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nregs;
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	833b      	strh	r3, [r7, #24]
	command.rx_data = reg;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8002c46:	f107 0314 	add.w	r3, r7, #20
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff ff1a 	bl	8002a84 <extflash_send_cmd>
 8002c50:	4603      	mov	r3, r0

}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3728      	adds	r7, #40	@ 0x28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <extflash_raw_read>:

int extflash_raw_read(uint32_t address, uint8_t *pBuffer, uint16_t nbytes)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b08a      	sub	sp, #40	@ 0x28
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	4613      	mov	r3, r2
 8002c66:	80fb      	strh	r3, [r7, #6]

	extflash_cmd command = {0};
 8002c68:	f107 0314 	add.w	r3, r7, #20
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_FRD;
 8002c78:	230b      	movs	r3, #11
 8002c7a:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	757b      	strb	r3, [r7, #21]
	command.address = address;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8002c84:	2301      	movs	r3, #1
 8002c86:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nbytes;
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	833b      	strh	r3, [r7, #24]
	command.rx_data = pBuffer;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8002c90:	f107 0314 	add.w	r3, r7, #20
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fef5 	bl	8002a84 <extflash_send_cmd>
 8002c9a:	4603      	mov	r3, r0

}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3728      	adds	r7, #40	@ 0x28
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <extflash_raw_erase>:

int extflash_raw_erase(uint32_t address)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 8002cac:	f107 030c 	add.w	r3, r7, #12
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_SER;
 8002cbc:	23d7      	movs	r3, #215	@ 0xd7
 8002cbe:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	737b      	strb	r3, [r7, #13]
	command.address = address;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	617b      	str	r3, [r7, #20]

	return extflash_send_cmd(&command);
 8002cc8:	f107 030c 	add.w	r3, r7, #12
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fed9 	bl	8002a84 <extflash_send_cmd>
 8002cd2:	4603      	mov	r3, r0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3720      	adds	r7, #32
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <extflash_raw_page_write>:

int extflash_raw_page_write(uint32_t address, const uint8_t *pBuffer)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]

	extflash_cmd command = {0};
 8002ce6:	f107 030c 	add.w	r3, r7, #12
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	605a      	str	r2, [r3, #4]
 8002cf0:	609a      	str	r2, [r3, #8]
 8002cf2:	60da      	str	r2, [r3, #12]
 8002cf4:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_PP;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	737b      	strb	r3, [r7, #13]
	command.address = address;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	617b      	str	r3, [r7, #20]
	command.tx_nb = EFLASH_DEF_PAGE_SIZE;
 8002d02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d06:	81fb      	strh	r3, [r7, #14]
	command.tx_data = pBuffer;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	61bb      	str	r3, [r7, #24]

	return extflash_send_cmd(&command);
 8002d0c:	f107 030c 	add.w	r3, r7, #12
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff feb7 	bl	8002a84 <extflash_send_cmd>
 8002d16:	4603      	mov	r3, r0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3720      	adds	r7, #32
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <extflash_sector_read>:


int extflash_sector_read(uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08a      	sub	sp, #40	@ 0x28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
	int result = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
	uint8_t ereg = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	75fb      	strb	r3, [r7, #23]
	uint32_t tmo = HAL_GetTick();
 8002d34:	f007 ffe8 	bl	800ad08 <HAL_GetTick>
 8002d38:	61b8      	str	r0, [r7, #24]
	uint8_t *wPtr = pBuffer;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	031b      	lsls	r3, r3, #12
 8002d42:	623b      	str	r3, [r7, #32]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002d44:	f107 0317 	add.w	r3, r7, #23
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff ff0d 	bl	8002b68 <extflash_read_extended_read_reg>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	da10      	bge.n	8002d76 <extflash_sector_read+0x56>
 8002d54:	f04f 33ff 	mov.w	r3, #4294967295
 8002d58:	e037      	b.n	8002dca <extflash_sector_read+0xaa>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002d5a:	f107 0317 	add.w	r3, r7, #23
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff ff02 	bl	8002b68 <extflash_read_extended_read_reg>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	da02      	bge.n	8002d70 <extflash_sector_read+0x50>
 8002d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6e:	e02c      	b.n	8002dca <extflash_sector_read+0xaa>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8002d70:	2001      	movs	r0, #1
 8002d72:	f007 ffd5 	bl	800ad20 <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
 8002d76:	7dfb      	ldrb	r3, [r7, #23]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d020      	beq.n	8002dc2 <extflash_sector_read+0xa2>
 8002d80:	f007 ffc2 	bl	800ad08 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d8e:	d3e4      	bcc.n	8002d5a <extflash_sector_read+0x3a>
	}

	while(nsectors > 0)
 8002d90:	e017      	b.n	8002dc2 <extflash_sector_read+0xa2>
	{
		result = extflash_raw_read(address, wPtr, EFLASH_DEF_SECTOR_SIZE);
 8002d92:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d98:	6a38      	ldr	r0, [r7, #32]
 8002d9a:	f7ff ff5e 	bl	8002c5a <extflash_raw_read>
 8002d9e:	61f8      	str	r0, [r7, #28]
		if(result < 0)return -1;
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	da02      	bge.n	8002dac <extflash_sector_read+0x8c>
 8002da6:	f04f 33ff 	mov.w	r3, #4294967295
 8002daa:	e00e      	b.n	8002dca <extflash_sector_read+0xaa>

		address += EFLASH_DEF_SECTOR_SIZE;
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002db2:	623b      	str	r3, [r7, #32]
		wPtr += EFLASH_DEF_SECTOR_SIZE;
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dba:	627b      	str	r3, [r7, #36]	@ 0x24
		nsectors--;
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1e4      	bne.n	8002d92 <extflash_sector_read+0x72>
	}

	return 0;
 8002dc8:	2300      	movs	r3, #0

}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3728      	adds	r7, #40	@ 0x28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <extflash_wait_for_wop>:

int extflash_wait_for_wop(uint32_t timeout)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
	uint8_t ereg = 0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	72fb      	strb	r3, [r7, #11]
	uint32_t tmo = HAL_GetTick();
 8002dde:	f007 ff93 	bl	800ad08 <HAL_GetTick>
 8002de2:	60f8      	str	r0, [r7, #12]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002de4:	f107 030b 	add.w	r3, r7, #11
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff febd 	bl	8002b68 <extflash_read_extended_read_reg>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	da10      	bge.n	8002e16 <extflash_wait_for_wop+0x44>
 8002df4:	f04f 33ff 	mov.w	r3, #4294967295
 8002df8:	e023      	b.n	8002e42 <extflash_wait_for_wop+0x70>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002dfa:	f107 030b 	add.w	r3, r7, #11
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff feb2 	bl	8002b68 <extflash_read_extended_read_reg>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	da02      	bge.n	8002e10 <extflash_wait_for_wop+0x3e>
 8002e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0e:	e018      	b.n	8002e42 <extflash_wait_for_wop+0x70>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8002e10:	2001      	movs	r0, #1
 8002e12:	f007 ff85 	bl	800ad20 <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
 8002e16:	7afb      	ldrb	r3, [r7, #11]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d007      	beq.n	8002e30 <extflash_wait_for_wop+0x5e>
 8002e20:	f007 ff72 	bl	800ad08 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d8e4      	bhi.n	8002dfa <extflash_wait_for_wop+0x28>
	}

	if(ereg & (ESTATUS_PROT_ERR | ESTATUS_P_ERR | ESTATUS_E_ERR))
 8002e30:	7afb      	ldrb	r3, [r7, #11]
 8002e32:	f003 030e 	and.w	r3, r3, #14
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d002      	beq.n	8002e40 <extflash_wait_for_wop+0x6e>
	{
		return -2; //Erase o write error
 8002e3a:	f06f 0301 	mvn.w	r3, #1
 8002e3e:	e000      	b.n	8002e42 <extflash_wait_for_wop+0x70>
	}

	return 0;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <extflash_sector_write>:

int extflash_sector_write(uint32_t sector, uint32_t nsectors, const uint8_t *pBuffer)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b088      	sub	sp, #32
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
	int result = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	613b      	str	r3, [r7, #16]
	const uint8_t *wPtr = pBuffer;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	031b      	lsls	r3, r3, #12
 8002e62:	61bb      	str	r3, [r7, #24]

	extflash_clear_extended_read_reg();
 8002e64:	f7ff fea0 	bl	8002ba8 <extflash_clear_extended_read_reg>

	while(nsectors > 0)
 8002e68:	e04e      	b.n	8002f08 <extflash_sector_write+0xbe>
	{
		//Controllo operazioni in corso
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8002e6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e6e:	f7ff ffb0 	bl	8002dd2 <extflash_wait_for_wop>
 8002e72:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	db4a      	blt.n	8002f10 <extflash_sector_write+0xc6>

		//Erase del settore
		result = extflash_set_write_protection(0);
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f7ff fea9 	bl	8002bd2 <extflash_set_write_protection>
 8002e80:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	db45      	blt.n	8002f14 <extflash_sector_write+0xca>
		result = extflash_raw_erase(address);
 8002e88:	69b8      	ldr	r0, [r7, #24]
 8002e8a:	f7ff ff0b 	bl	8002ca4 <extflash_raw_erase>
 8002e8e:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	db40      	blt.n	8002f18 <extflash_sector_write+0xce>

		//Attesa ERASE
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8002e96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e9a:	f7ff ff9a 	bl	8002dd2 <extflash_wait_for_wop>
 8002e9e:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	db3a      	blt.n	8002f1c <extflash_sector_write+0xd2>

		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	e021      	b.n	8002ef0 <extflash_sector_write+0xa6>
		{
			result = extflash_set_write_protection(0);
 8002eac:	2000      	movs	r0, #0
 8002eae:	f7ff fe90 	bl	8002bd2 <extflash_set_write_protection>
 8002eb2:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	db1e      	blt.n	8002ef8 <extflash_sector_write+0xae>
			result = extflash_raw_page_write(address, wPtr);
 8002eba:	69f9      	ldr	r1, [r7, #28]
 8002ebc:	69b8      	ldr	r0, [r7, #24]
 8002ebe:	f7ff ff0d 	bl	8002cdc <extflash_raw_page_write>
 8002ec2:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	db18      	blt.n	8002efc <extflash_sector_write+0xb2>

			address += EFLASH_DEF_PAGE_SIZE;
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002ed0:	61bb      	str	r3, [r7, #24]
			wPtr += EFLASH_DEF_PAGE_SIZE;
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002ed8:	61fb      	str	r3, [r7, #28]
			//Attesa write
			result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8002eda:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ede:	f7ff ff78 	bl	8002dd2 <extflash_wait_for_wop>
 8002ee2:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	db0a      	blt.n	8002f00 <extflash_sector_write+0xb6>
		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	3301      	adds	r3, #1
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	2b0f      	cmp	r3, #15
 8002ef4:	ddda      	ble.n	8002eac <extflash_sector_write+0x62>
 8002ef6:	e004      	b.n	8002f02 <extflash_sector_write+0xb8>
			if(result < 0)break;
 8002ef8:	bf00      	nop
 8002efa:	e002      	b.n	8002f02 <extflash_sector_write+0xb8>
			if(result < 0)break;
 8002efc:	bf00      	nop
 8002efe:	e000      	b.n	8002f02 <extflash_sector_write+0xb8>
			if(result < 0)break;
 8002f00:	bf00      	nop
		}

		nsectors--;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1ad      	bne.n	8002e6a <extflash_sector_write+0x20>
 8002f0e:	e006      	b.n	8002f1e <extflash_sector_write+0xd4>
		if(result < 0)break;
 8002f10:	bf00      	nop
 8002f12:	e004      	b.n	8002f1e <extflash_sector_write+0xd4>
		if(result < 0)break;
 8002f14:	bf00      	nop
 8002f16:	e002      	b.n	8002f1e <extflash_sector_write+0xd4>
		if(result < 0)break;
 8002f18:	bf00      	nop
 8002f1a:	e000      	b.n	8002f1e <extflash_sector_write+0xd4>
		if(result < 0)break;
 8002f1c:	bf00      	nop
	}

	extflash_set_write_protection(1);
 8002f1e:	2001      	movs	r0, #1
 8002f20:	f7ff fe57 	bl	8002bd2 <extflash_set_write_protection>

	return 0;
 8002f24:	2300      	movs	r3, #0

}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3720      	adds	r7, #32
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <extflash_get_sector_size>:


unsigned int extflash_get_sector_size()
{
 8002f2e:	b480      	push	{r7}
 8002f30:	af00      	add	r7, sp, #0
	return EFLASH_DEF_SECTOR_SIZE;
 8002f32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <extflash_get_sector_count>:

unsigned int extflash_get_sector_count()
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
	return exflashNumSectors;
 8002f44:	4b03      	ldr	r3, [pc, #12]	@ (8002f54 <extflash_get_sector_count+0x14>)
 8002f46:	681b      	ldr	r3, [r3, #0]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20000210 	.word	0x20000210

08002f58 <extflash_is_initialized>:
{
	return exflashSize;
}

int extflash_is_initialized()
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
	return exflashInitDone;
 8002f5c:	4b03      	ldr	r3, [pc, #12]	@ (8002f6c <extflash_is_initialized+0x14>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	20000214 	.word	0x20000214

08002f70 <extflash_init>:

int extflash_init()
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b088      	sub	sp, #32
 8002f74:	af00      	add	r7, sp, #0
	uint8_t manufacturer_id[2] = {0};
 8002f76:	2300      	movs	r3, #0
 8002f78:	83bb      	strh	r3, [r7, #28]
	extflash_cmd command = {0};
 8002f7a:	f107 0308 	add.w	r3, r7, #8
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	605a      	str	r2, [r3, #4]
 8002f84:	609a      	str	r2, [r3, #8]
 8002f86:	60da      	str	r2, [r3, #12]
 8002f88:	611a      	str	r2, [r3, #16]
	uint8_t density[4] = {0};
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	607b      	str	r3, [r7, #4]

	exflashInitDone = 0;
 8002f8e:	4b26      	ldr	r3, [pc, #152]	@ (8003028 <extflash_init+0xb8>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	701a      	strb	r2, [r3, #0]
	exflashNumSectors = 0;
 8002f94:	4b25      	ldr	r3, [pc, #148]	@ (800302c <extflash_init+0xbc>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]

	extflash_hard_reset();
 8002f9a:	f7ff fd5f 	bl	8002a5c <extflash_hard_reset>
	extflash_cs_reset();
 8002f9e:	f7ff fd45 	bl	8002a2c <extflash_cs_reset>
	extflash_wp_reset();
 8002fa2:	f7ff fd4f 	bl	8002a44 <extflash_wp_reset>

	command.cmd = EFLASH_CMD_RDMDID;
 8002fa6:	2390      	movs	r3, #144	@ 0x90
 8002fa8:	723b      	strb	r3, [r7, #8]
	command.address_en = 1;
 8002faa:	2301      	movs	r3, #1
 8002fac:	727b      	strb	r3, [r7, #9]
	command.address = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
	command.rx_nb = 2;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	81bb      	strh	r3, [r7, #12]
	command.rx_data = manufacturer_id;
 8002fb6:	f107 031c 	add.w	r3, r7, #28
 8002fba:	61bb      	str	r3, [r7, #24]

	extflash_send_cmd(&command);
 8002fbc:	f107 0308 	add.w	r3, r7, #8
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fd5f 	bl	8002a84 <extflash_send_cmd>

	if(manufacturer_id[0] != EFLASH_DEF_MANIFACTURER || manufacturer_id[1] != EFLASH_DEF_DEVID)
 8002fc6:	7f3b      	ldrb	r3, [r7, #28]
 8002fc8:	2b9d      	cmp	r3, #157	@ 0x9d
 8002fca:	d102      	bne.n	8002fd2 <extflash_init+0x62>
 8002fcc:	7f7b      	ldrb	r3, [r7, #29]
 8002fce:	2b17      	cmp	r3, #23
 8002fd0:	d002      	beq.n	8002fd8 <extflash_init+0x68>
	{
		return -1;
 8002fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd6:	e022      	b.n	800301e <extflash_init+0xae>
	}

	memset((void *)&command, 0, sizeof(command));
 8002fd8:	f107 0308 	add.w	r3, r7, #8
 8002fdc:	2214      	movs	r2, #20
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f012 ff41 	bl	8015e68 <memset>

	extflash_read_sfdp(SFDP_FLASH_DENSITY, density, sizeof(density));
 8002fe6:	1d3b      	adds	r3, r7, #4
 8002fe8:	2204      	movs	r2, #4
 8002fea:	4619      	mov	r1, r3
 8002fec:	2034      	movs	r0, #52	@ 0x34
 8002fee:	f7ff fe0e 	bl	8002c0e <extflash_read_sfdp>

	memcpy(&exflashSize, density, sizeof(uint32_t));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a0e      	ldr	r2, [pc, #56]	@ (8003030 <extflash_init+0xc0>)
 8002ff6:	6013      	str	r3, [r2, #0]

	exflashSize += 1;
 8002ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8003030 <extflash_init+0xc0>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	4a0c      	ldr	r2, [pc, #48]	@ (8003030 <extflash_init+0xc0>)
 8003000:	6013      	str	r3, [r2, #0]
	exflashSize >>= 3;
 8003002:	4b0b      	ldr	r3, [pc, #44]	@ (8003030 <extflash_init+0xc0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	08db      	lsrs	r3, r3, #3
 8003008:	4a09      	ldr	r2, [pc, #36]	@ (8003030 <extflash_init+0xc0>)
 800300a:	6013      	str	r3, [r2, #0]

	exflashNumSectors = exflashSize / EFLASH_DEF_SECTOR_SIZE;
 800300c:	4b08      	ldr	r3, [pc, #32]	@ (8003030 <extflash_init+0xc0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	0b1b      	lsrs	r3, r3, #12
 8003012:	4a06      	ldr	r2, [pc, #24]	@ (800302c <extflash_init+0xbc>)
 8003014:	6013      	str	r3, [r2, #0]

	exflashInitDone = 1;
 8003016:	4b04      	ldr	r3, [pc, #16]	@ (8003028 <extflash_init+0xb8>)
 8003018:	2201      	movs	r2, #1
 800301a:	701a      	strb	r2, [r3, #0]

	return 0;
 800301c:	2300      	movs	r3, #0

}
 800301e:	4618      	mov	r0, r3
 8003020:	3720      	adds	r7, #32
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000214 	.word	0x20000214
 800302c:	20000210 	.word	0x20000210
 8003030:	2000020c 	.word	0x2000020c

08003034 <System_Init>:
#include "lsm6dsv16x_rw.h"
#include "DS18B20.h"

/*-----INIZiALIZZAZIONE SISTEMA-----*/
void System_Init(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
	acc.write_reg = acc_write;
 8003038:	4b22      	ldr	r3, [pc, #136]	@ (80030c4 <System_Init+0x90>)
 800303a:	4a23      	ldr	r2, [pc, #140]	@ (80030c8 <System_Init+0x94>)
 800303c:	601a      	str	r2, [r3, #0]
	acc.read_reg = acc_read;
 800303e:	4b21      	ldr	r3, [pc, #132]	@ (80030c4 <System_Init+0x90>)
 8003040:	4a22      	ldr	r2, [pc, #136]	@ (80030cc <System_Init+0x98>)
 8003042:	605a      	str	r2, [r3, #4]
	acc.handle = &hspi3;
 8003044:	4b1f      	ldr	r3, [pc, #124]	@ (80030c4 <System_Init+0x90>)
 8003046:	4a22      	ldr	r2, [pc, #136]	@ (80030d0 <System_Init+0x9c>)
 8003048:	60da      	str	r2, [r3, #12]

	LED_Start(GRN_LED, SLOW, HIGH);
 800304a:	2205      	movs	r2, #5
 800304c:	2102      	movs	r1, #2
 800304e:	2008      	movs	r0, #8
 8003050:	f000 fa72 	bl	8003538 <LED_Start>

	BC_Init();
 8003054:	f7ff f9d2 	bl	80023fc <BC_Init>
	INA3221_Init();
 8003058:	f7fd ffbe 	bl	8000fd8 <INA3221_Init>
	FatFS_Init();
 800305c:	f000 f840 	bl	80030e0 <FatFS_Init>
	Config_Init();
 8003060:	f000 f986 	bl	8003370 <Config_Init>
	Acc_Init(&acc);
 8003064:	4817      	ldr	r0, [pc, #92]	@ (80030c4 <System_Init+0x90>)
 8003066:	f000 f8d7 	bl	8003218 <Acc_Init>
	LED_Start(ORG_LED, FAST, HALF);
 800306a:	2206      	movs	r2, #6
 800306c:	2100      	movs	r1, #0
 800306e:	2000      	movs	r0, #0
 8003070:	f000 fa62 	bl	8003538 <LED_Start>
	while(SIM_Init() != HAL_OK);
 8003074:	bf00      	nop
 8003076:	f7fe fa1b 	bl	80014b0 <SIM_Init>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1fa      	bne.n	8003076 <System_Init+0x42>
	LED_Stop(ORG_LED);
 8003080:	2000      	movs	r0, #0
 8003082:	f000 fb4b 	bl	800371c <LED_Stop>
	RTC_Init();
 8003086:	f7fe f855 	bl	8001134 <RTC_Init>
	Temperature = Read_Temperature();
 800308a:	f7fd ff6d 	bl	8000f68 <Read_Temperature>
 800308e:	4603      	mov	r3, r0
 8003090:	461a      	mov	r2, r3
 8003092:	4b10      	ldr	r3, [pc, #64]	@ (80030d4 <System_Init+0xa0>)
 8003094:	801a      	strh	r2, [r3, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8003096:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800309a:	490f      	ldr	r1, [pc, #60]	@ (80030d8 <System_Init+0xa4>)
 800309c:	480f      	ldr	r0, [pc, #60]	@ (80030dc <System_Init+0xa8>)
 800309e:	f012 fda5 	bl	8015bec <HAL_UARTEx_ReceiveToIdle_DMA>

	LED_Start(RED_LED, SLOW, FULL);
 80030a2:	2204      	movs	r2, #4
 80030a4:	2102      	movs	r1, #2
 80030a6:	2004      	movs	r0, #4
 80030a8:	f000 fa46 	bl	8003538 <LED_Start>
	HAL_Delay(9000);
 80030ac:	f242 3028 	movw	r0, #9000	@ 0x2328
 80030b0:	f007 fe36 	bl	800ad20 <HAL_Delay>
	LED_Start(GRN_LED, MEDIUM, HALF);
 80030b4:	2206      	movs	r2, #6
 80030b6:	2101      	movs	r1, #1
 80030b8:	2008      	movs	r0, #8
 80030ba:	f000 fa3d 	bl	8003538 <LED_Start>
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	200054e4 	.word	0x200054e4
 80030c8:	08003f3f 	.word	0x08003f3f
 80030cc:	08003f97 	.word	0x08003f97
 80030d0:	20000408 	.word	0x20000408
 80030d4:	20004720 	.word	0x20004720
 80030d8:	200054f4 	.word	0x200054f4
 80030dc:	20000624 	.word	0x20000624

080030e0 <FatFS_Init>:

/*-----INIZiALIZZAZIONE MEMORIE-----*/
void FatFS_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 80030e6:	2300      	movs	r3, #0
 80030e8:	75fb      	strb	r3, [r7, #23]
	MKFS_PARM mkfs_opt = {0};
 80030ea:	1d3b      	adds	r3, r7, #4
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	60da      	str	r2, [r3, #12]

	do
	{
		sys.RAM_Mounted = 0;
 80030f6:	4b41      	ldr	r3, [pc, #260]	@ (80031fc <FatFS_Init+0x11c>)
 80030f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030fc:	461a      	mov	r2, r3
 80030fe:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003102:	f023 0302 	bic.w	r3, r3, #2
 8003106:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		
		mkfs_opt.fmt = FM_FAT32;
 800310a:	2302      	movs	r3, #2
 800310c:	713b      	strb	r3, [r7, #4]
		mkfs_opt.au_size = 1024; 
 800310e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003112:	613b      	str	r3, [r7, #16]
		mkfs_opt.n_fat = 1;
 8003114:	2301      	movs	r3, #1
 8003116:	717b      	strb	r3, [r7, #5]
		mkfs_opt.align = 1;
 8003118:	2301      	movs	r3, #1
 800311a:	60bb      	str	r3, [r7, #8]

		fRes = f_mkfs("/ram", &mkfs_opt, psram_fs.win, sizeof(psram_fs.win));
 800311c:	1d39      	adds	r1, r7, #4
 800311e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003122:	4a37      	ldr	r2, [pc, #220]	@ (8003200 <FatFS_Init+0x120>)
 8003124:	4837      	ldr	r0, [pc, #220]	@ (8003204 <FatFS_Init+0x124>)
 8003126:	f007 f90d 	bl	800a344 <f_mkfs>
 800312a:	4603      	mov	r3, r0
 800312c:	75fb      	strb	r3, [r7, #23]
		if (fRes != FR_OK)
 800312e:	7dfb      	ldrb	r3, [r7, #23]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d114      	bne.n	800315e <FatFS_Init+0x7e>
		{
			break;
		}

		fRes = f_mount(&psram_fs, "/ram", 1);
 8003134:	2201      	movs	r2, #1
 8003136:	4933      	ldr	r1, [pc, #204]	@ (8003204 <FatFS_Init+0x124>)
 8003138:	4833      	ldr	r0, [pc, #204]	@ (8003208 <FatFS_Init+0x128>)
 800313a:	f006 fa81 	bl	8009640 <f_mount>
 800313e:	4603      	mov	r3, r0
 8003140:	75fb      	strb	r3, [r7, #23]

		if (fRes != FR_OK)
 8003142:	7dfb      	ldrb	r3, [r7, #23]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10c      	bne.n	8003162 <FatFS_Init+0x82>
		{
			break;
		}

		sys.RAM_Mounted = 1;
 8003148:	4b2c      	ldr	r3, [pc, #176]	@ (80031fc <FatFS_Init+0x11c>)
 800314a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800314e:	461a      	mov	r2, r3
 8003150:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003154:	f043 0302 	orr.w	r3, r3, #2
 8003158:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 800315c:	e002      	b.n	8003164 <FatFS_Init+0x84>
			break;
 800315e:	bf00      	nop
 8003160:	e000      	b.n	8003164 <FatFS_Init+0x84>
			break;
 8003162:	bf00      	nop
	} while (1);

	do
	{
		sys.FLASH_Mounted = 0;
 8003164:	4b25      	ldr	r3, [pc, #148]	@ (80031fc <FatFS_Init+0x11c>)
 8003166:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800316a:	461a      	mov	r2, r3
 800316c:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003170:	f023 0304 	bic.w	r3, r3, #4
 8003174:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		fRes = f_mount(&flash_fs, "/flash", 1);
 8003178:	2201      	movs	r2, #1
 800317a:	4924      	ldr	r1, [pc, #144]	@ (800320c <FatFS_Init+0x12c>)
 800317c:	4824      	ldr	r0, [pc, #144]	@ (8003210 <FatFS_Init+0x130>)
 800317e:	f006 fa5f 	bl	8009640 <f_mount>
 8003182:	4603      	mov	r3, r0
 8003184:	75fb      	strb	r3, [r7, #23]

		if (fRes == FR_NO_FILESYSTEM)
 8003186:	7dfb      	ldrb	r3, [r7, #23]
 8003188:	2b0d      	cmp	r3, #13
 800318a:	d124      	bne.n	80031d6 <FatFS_Init+0xf6>
		{
			memset((void *)&mkfs_opt, 0, sizeof(mkfs_opt));
 800318c:	1d3b      	adds	r3, r7, #4
 800318e:	2210      	movs	r2, #16
 8003190:	2100      	movs	r1, #0
 8003192:	4618      	mov	r0, r3
 8003194:	f012 fe68 	bl	8015e68 <memset>
			mkfs_opt.fmt = FM_FAT32;
 8003198:	2302      	movs	r3, #2
 800319a:	713b      	strb	r3, [r7, #4]
			mkfs_opt.au_size = 4096;    
 800319c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031a0:	613b      	str	r3, [r7, #16]
			mkfs_opt.n_fat = 1;
 80031a2:	2301      	movs	r3, #1
 80031a4:	717b      	strb	r3, [r7, #5]
			mkfs_opt.align = 1;
 80031a6:	2301      	movs	r3, #1
 80031a8:	60bb      	str	r3, [r7, #8]

			fRes = f_mkfs("/flash", &mkfs_opt, flash_fs.win, sizeof(flash_fs.win));
 80031aa:	1d39      	adds	r1, r7, #4
 80031ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031b0:	4a18      	ldr	r2, [pc, #96]	@ (8003214 <FatFS_Init+0x134>)
 80031b2:	4816      	ldr	r0, [pc, #88]	@ (800320c <FatFS_Init+0x12c>)
 80031b4:	f007 f8c6 	bl	800a344 <f_mkfs>
 80031b8:	4603      	mov	r3, r0
 80031ba:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 80031bc:	7dfb      	ldrb	r3, [r7, #23]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d114      	bne.n	80031ec <FatFS_Init+0x10c>
			{
				break;
			}

			fRes = f_mount(&flash_fs, "/flash", 1);
 80031c2:	2201      	movs	r2, #1
 80031c4:	4911      	ldr	r1, [pc, #68]	@ (800320c <FatFS_Init+0x12c>)
 80031c6:	4812      	ldr	r0, [pc, #72]	@ (8003210 <FatFS_Init+0x130>)
 80031c8:	f006 fa3a 	bl	8009640 <f_mount>
 80031cc:	4603      	mov	r3, r0
 80031ce:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 80031d0:	7dfb      	ldrb	r3, [r7, #23]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10c      	bne.n	80031f0 <FatFS_Init+0x110>
			{
				break;
			}
		}

		sys.FLASH_Mounted = 1;
 80031d6:	4b09      	ldr	r3, [pc, #36]	@ (80031fc <FatFS_Init+0x11c>)
 80031d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031dc:	461a      	mov	r2, r3
 80031de:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80031e2:	f043 0304 	orr.w	r3, r3, #4
 80031e6:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 80031ea:	e002      	b.n	80031f2 <FatFS_Init+0x112>
				break;
 80031ec:	bf00      	nop
 80031ee:	e000      	b.n	80031f2 <FatFS_Init+0x112>
				break;
 80031f0:	bf00      	nop
	} while (1);


}
 80031f2:	bf00      	nop
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	20000740 	.word	0x20000740
 8003200:	20001e10 	.word	0x20001e10
 8003204:	08017314 	.word	0x08017314
 8003208:	20001ddc 	.word	0x20001ddc
 800320c:	0801731c 	.word	0x0801731c
 8003210:	20002e10 	.word	0x20002e10
 8003214:	20002e44 	.word	0x20002e44

08003218 <Acc_Init>:

/*-----INIZiALIZZAZIONE ACCELEROMETRO-----*/
void Acc_Init(stmdev_ctx_t* acc)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
	lsm6dsv16x_reset_t rst;
	lsm6dsv16x_pin_int_route_t pin_int = {0};
 8003220:	f107 0310 	add.w	r3, r7, #16
 8003224:	2100      	movs	r1, #0
 8003226:	460a      	mov	r2, r1
 8003228:	801a      	strh	r2, [r3, #0]
 800322a:	460a      	mov	r2, r1
 800322c:	709a      	strb	r2, [r3, #2]
	uint8_t acc_whoamI = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	73fb      	strb	r3, [r7, #15]
	uint8_t wmi_cnt = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	75fb      	strb	r3, [r7, #23]

	pin_int.fifo_th = PROPERTY_ENABLE;
 8003236:	7c3b      	ldrb	r3, [r7, #16]
 8003238:	f043 0308 	orr.w	r3, r3, #8
 800323c:	743b      	strb	r3, [r7, #16]


	lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 800323e:	f107 030f 	add.w	r3, r7, #15
 8003242:	4619      	mov	r1, r3
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fb4d 	bl	80038e4 <lsm6dsv16x_device_id_get>
	if (acc_whoamI != LSM6DSV16X_ID)
 800324a:	7bfb      	ldrb	r3, [r7, #15]
 800324c:	2b70      	cmp	r3, #112	@ 0x70
 800324e:	d01f      	beq.n	8003290 <Acc_Init+0x78>
		while (acc_whoamI != LSM6DSV16X_ID)
 8003250:	e01b      	b.n	800328a <Acc_Init+0x72>
		{
			lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 8003252:	f107 030f 	add.w	r3, r7, #15
 8003256:	4619      	mov	r1, r3
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 fb43 	bl	80038e4 <lsm6dsv16x_device_id_get>
			wmi_cnt++;
 800325e:	7dfb      	ldrb	r3, [r7, #23]
 8003260:	3301      	adds	r3, #1
 8003262:	75fb      	strb	r3, [r7, #23]
			if (wmi_cnt == 3)
 8003264:	7dfb      	ldrb	r3, [r7, #23]
 8003266:	2b03      	cmp	r3, #3
 8003268:	d10f      	bne.n	800328a <Acc_Init+0x72>
			{
				sys.ACC_Present = 0;
 800326a:	4b3e      	ldr	r3, [pc, #248]	@ (8003364 <Acc_Init+0x14c>)
 800326c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003270:	461a      	mov	r2, r3
 8003272:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003276:	f023 0301 	bic.w	r3, r3, #1
 800327a:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
				flags.ACC_Complete = 1;
 800327e:	4a3a      	ldr	r2, [pc, #232]	@ (8003368 <Acc_Init+0x150>)
 8003280:	7813      	ldrb	r3, [r2, #0]
 8003282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003286:	7013      	strb	r3, [r2, #0]
 8003288:	e069      	b.n	800335e <Acc_Init+0x146>
		while (acc_whoamI != LSM6DSV16X_ID)
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	2b70      	cmp	r3, #112	@ 0x70
 800328e:	d1e0      	bne.n	8003252 <Acc_Init+0x3a>
				return;
			}
		}
	sys.ACC_Present = 1;
 8003290:	4b34      	ldr	r3, [pc, #208]	@ (8003364 <Acc_Init+0x14c>)
 8003292:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003296:	461a      	mov	r2, r3
 8003298:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
	lsm6dsv16x_reset_set(acc, LSM6DSV16X_GLOBAL_RST);
 80032a4:	2101      	movs	r1, #1
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 fa76 	bl	8003798 <lsm6dsv16x_reset_set>
	do {
		lsm6dsv16x_reset_get(acc, &rst);
 80032ac:	f107 0316 	add.w	r3, r7, #22
 80032b0:	4619      	mov	r1, r3
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 fac0 	bl	8003838 <lsm6dsv16x_reset_get>
		HAL_Delay(10);
 80032b8:	200a      	movs	r0, #10
 80032ba:	f007 fd31 	bl	800ad20 <HAL_Delay>
	} while (rst != LSM6DSV16X_READY);
 80032be:	7dbb      	ldrb	r3, [r7, #22]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1f3      	bne.n	80032ac <Acc_Init+0x94>

	lsm6dsv16x_block_data_update_set(acc, PROPERTY_ENABLE);
 80032c4:	2101      	movs	r1, #1
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 fc09 	bl	8003ade <lsm6dsv16x_block_data_update_set>
	lsm6dsv16x_ui_i2c_i3c_mode_set(acc, LSM6DSV16X_I2C_I3C_DISABLE);
 80032cc:	2101      	movs	r1, #1
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fe0f 	bl	8003ef2 <lsm6dsv16x_ui_i2c_i3c_mode_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_HIGH_PERFORMANCE_MD);
 80032d4:	2100      	movs	r1, #0
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fb66 	bl	80039a8 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_HIGH_PERFORMANCE_MD);
 80032dc:	2100      	movs	r1, #0
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fbd7 	bl	8003a92 <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_fifo_xl_batch_set(acc, LSM6DSV16X_XL_BATCHED_AT_960Hz);
 80032e4:	2109      	movs	r1, #9
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 fd91 	bl	8003e0e <lsm6dsv16x_fifo_xl_batch_set>
	lsm6dsv16x_fifo_gy_batch_set(acc, LSM6DSV16X_GY_NOT_BATCHED);
 80032ec:	2100      	movs	r1, #0
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 fdb3 	bl	8003e5a <lsm6dsv16x_fifo_gy_batch_set>
	lsm6dsv16x_fifo_mode_set(acc, LSM6DSV16X_BYPASS_MODE);
 80032f4:	2100      	movs	r1, #0
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fdd5 	bl	8003ea6 <lsm6dsv16x_fifo_mode_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 80032fc:	2100      	movs	r1, #0
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fb01 	bl	8003906 <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_gy_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 8003304:	2100      	movs	r1, #0
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fb74 	bl	80039f4 <lsm6dsv16x_gy_data_rate_set>
	lsm6dsv16x_odr_trig_cfg_set(acc, 16);  //800SPS
 800330c:	2110      	movs	r1, #16
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 fc0b 	bl	8003b2a <lsm6dsv16x_odr_trig_cfg_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_ODR_TRIGGERED_MD);
 8003314:	2103      	movs	r1, #3
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fb46 	bl	80039a8 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_ODR_TRIGGERED_MD);
 800331c:	2103      	movs	r1, #3
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fbb7 	bl	8003a92 <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_den_polarity_set(acc, LSM6DSV16X_DEN_ACT_HIGH);
 8003324:	2101      	movs	r1, #1
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fd2b 	bl	8003d82 <lsm6dsv16x_den_polarity_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_AT_960Hz);
 800332c:	2109      	movs	r1, #9
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fae9 	bl	8003906 <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_xl_full_scale_set(acc, LSM6DSV16X_2g);
 8003334:	2100      	movs	r1, #0
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fc46 	bl	8003bc8 <lsm6dsv16x_xl_full_scale_set>
	lsm6dsv16x_gy_full_scale_set(acc, LSM6DSV16X_2000dps);
 800333c:	2104      	movs	r1, #4
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fc1c 	bl	8003b7c <lsm6dsv16x_gy_full_scale_set>
	lsm6dsv16x_fifo_watermark_set(acc, ACC_FIFO_WATERMARK);
 8003344:	21c8      	movs	r1, #200	@ 0xc8
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fd41 	bl	8003dce <lsm6dsv16x_fifo_watermark_set>
	lsm6dsv16x_pin_int1_route_set(acc, &pin_int);
 800334c:	f107 0310 	add.w	r3, r7, #16
 8003350:	4619      	mov	r1, r3
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fc5e 	bl	8003c14 <lsm6dsv16x_pin_int1_route_set>

	__HAL_GPIO_EXTI_CLEAR_IT(ACC_INTERRUPT);
 8003358:	4b04      	ldr	r3, [pc, #16]	@ (800336c <Acc_Init+0x154>)
 800335a:	2204      	movs	r2, #4
 800335c:	615a      	str	r2, [r3, #20]
}
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	20000740 	.word	0x20000740
 8003368:	20001c68 	.word	0x20001c68
 800336c:	40010400 	.word	0x40010400

08003370 <Config_Init>:

/*-----INIZiALIZZAZIONE CONFIGURAZIONE-----*/
void Config_Init(void)
{
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
    FIL config_file;
    UINT bytes_read;
    UINT bytes_written;

    if (f_open(&config_file, CONFIG_FILE, FA_READ) == FR_OK) 
 800337a:	f107 0318 	add.w	r3, r7, #24
 800337e:	3b0c      	subs	r3, #12
 8003380:	2201      	movs	r2, #1
 8003382:	4963      	ldr	r1, [pc, #396]	@ (8003510 <Config_Init+0x1a0>)
 8003384:	4618      	mov	r0, r3
 8003386:	f006 f9a5 	bl	80096d4 <f_open>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d121      	bne.n	80033d4 <Config_Init+0x64>
	{
        if (f_read(&config_file, &config, sizeof(config), &bytes_read) == FR_OK && bytes_read == sizeof(config))
 8003390:	f107 0318 	add.w	r3, r7, #24
 8003394:	3b10      	subs	r3, #16
 8003396:	f107 0018 	add.w	r0, r7, #24
 800339a:	380c      	subs	r0, #12
 800339c:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80033a0:	495c      	ldr	r1, [pc, #368]	@ (8003514 <Config_Init+0x1a4>)
 80033a2:	f006 fb2f 	bl	8009a04 <f_read>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10d      	bne.n	80033c8 <Config_Init+0x58>
 80033ac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80033b0:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80033b4:	f5b3 7fb8 	cmp.w	r3, #368	@ 0x170
 80033b8:	d106      	bne.n	80033c8 <Config_Init+0x58>
		{
			f_close(&config_file);
 80033ba:	f107 0318 	add.w	r3, r7, #24
 80033be:	3b0c      	subs	r3, #12
 80033c0:	4618      	mov	r0, r3
 80033c2:	f006 fe7b 	bl	800a0bc <f_close>
			return;
 80033c6:	e09e      	b.n	8003506 <Config_Init+0x196>
        }
        f_close(&config_file);
 80033c8:	f107 0318 	add.w	r3, r7, #24
 80033cc:	3b0c      	subs	r3, #12
 80033ce:	4618      	mov	r0, r3
 80033d0:	f006 fe74 	bl	800a0bc <f_close>
    }

    config.device_id = 0;
 80033d4:	4b4f      	ldr	r3, [pc, #316]	@ (8003514 <Config_Init+0x1a4>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	701a      	strb	r2, [r3, #0]
	config.samp_freq = 800;
 80033da:	4b4e      	ldr	r3, [pc, #312]	@ (8003514 <Config_Init+0x1a4>)
 80033dc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80033e0:	805a      	strh	r2, [r3, #2]
	config.buffering_secs = 30;
 80033e2:	4b4c      	ldr	r3, [pc, #304]	@ (8003514 <Config_Init+0x1a4>)
 80033e4:	221e      	movs	r2, #30
 80033e6:	711a      	strb	r2, [r3, #4]
	config.connection_timeout = 60000;
 80033e8:	4b4a      	ldr	r3, [pc, #296]	@ (8003514 <Config_Init+0x1a4>)
 80033ea:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80033ee:	609a      	str	r2, [r3, #8]
	config.hammer_th = 2048;
 80033f0:	4b48      	ldr	r3, [pc, #288]	@ (8003514 <Config_Init+0x1a4>)
 80033f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033f6:	819a      	strh	r2, [r3, #12]
    for(int i = 0; i < 24; i++) 
 80033f8:	2300      	movs	r3, #0
 80033fa:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80033fe:	f102 0214 	add.w	r2, r2, #20
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	e021      	b.n	800344a <Config_Init+0xda>
	{
        config.low_th[i] = 0;
 8003406:	4a43      	ldr	r2, [pc, #268]	@ (8003514 <Config_Init+0x1a4>)
 8003408:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800340c:	f103 0314 	add.w	r3, r3, #20
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	3304      	adds	r3, #4
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	2200      	movs	r2, #0
 800341a:	80da      	strh	r2, [r3, #6]
        config.high_th[i] = 4096;
 800341c:	4a3d      	ldr	r2, [pc, #244]	@ (8003514 <Config_Init+0x1a4>)
 800341e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8003422:	f103 0314 	add.w	r3, r3, #20
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	331c      	adds	r3, #28
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	4413      	add	r3, r2
 800342e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003432:	80da      	strh	r2, [r3, #6]
    for(int i = 0; i < 24; i++) 
 8003434:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8003438:	f103 0314 	add.w	r3, r3, #20
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	3301      	adds	r3, #1
 8003440:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8003444:	f102 0214 	add.w	r2, r2, #20
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800344e:	f103 0314 	add.w	r3, r3, #20
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b17      	cmp	r3, #23
 8003456:	ddd6      	ble.n	8003406 <Config_Init+0x96>
    }
    strcpy(config.data_topic, "Data_Topic");
 8003458:	4a2f      	ldr	r2, [pc, #188]	@ (8003518 <Config_Init+0x1a8>)
 800345a:	4b30      	ldr	r3, [pc, #192]	@ (800351c <Config_Init+0x1ac>)
 800345c:	cb03      	ldmia	r3!, {r0, r1}
 800345e:	6010      	str	r0, [r2, #0]
 8003460:	6051      	str	r1, [r2, #4]
 8003462:	8819      	ldrh	r1, [r3, #0]
 8003464:	789b      	ldrb	r3, [r3, #2]
 8003466:	8111      	strh	r1, [r2, #8]
 8003468:	7293      	strb	r3, [r2, #10]
    strcpy(config.command_topic, "Command_Topic");  
 800346a:	4a2d      	ldr	r2, [pc, #180]	@ (8003520 <Config_Init+0x1b0>)
 800346c:	4b2d      	ldr	r3, [pc, #180]	@ (8003524 <Config_Init+0x1b4>)
 800346e:	4614      	mov	r4, r2
 8003470:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003472:	6020      	str	r0, [r4, #0]
 8003474:	6061      	str	r1, [r4, #4]
 8003476:	60a2      	str	r2, [r4, #8]
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	81a3      	strh	r3, [r4, #12]
    strcpy(config.ota_topic, "OTA_Topic");
 800347c:	4a2a      	ldr	r2, [pc, #168]	@ (8003528 <Config_Init+0x1b8>)
 800347e:	4b2b      	ldr	r3, [pc, #172]	@ (800352c <Config_Init+0x1bc>)
 8003480:	cb03      	ldmia	r3!, {r0, r1}
 8003482:	6010      	str	r0, [r2, #0]
 8003484:	6051      	str	r1, [r2, #4]
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	8113      	strh	r3, [r2, #8]
	strcpy(config.info_topic, "Info_Topic");
 800348a:	4a29      	ldr	r2, [pc, #164]	@ (8003530 <Config_Init+0x1c0>)
 800348c:	4b29      	ldr	r3, [pc, #164]	@ (8003534 <Config_Init+0x1c4>)
 800348e:	cb03      	ldmia	r3!, {r0, r1}
 8003490:	6010      	str	r0, [r2, #0]
 8003492:	6051      	str	r1, [r2, #4]
 8003494:	8819      	ldrh	r1, [r3, #0]
 8003496:	789b      	ldrb	r3, [r3, #2]
 8003498:	8111      	strh	r1, [r2, #8]
 800349a:	7293      	strb	r3, [r2, #10]
    
    if (f_open(&config_file, CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 800349c:	f107 0318 	add.w	r3, r7, #24
 80034a0:	3b0c      	subs	r3, #12
 80034a2:	220a      	movs	r2, #10
 80034a4:	491a      	ldr	r1, [pc, #104]	@ (8003510 <Config_Init+0x1a0>)
 80034a6:	4618      	mov	r0, r3
 80034a8:	f006 f914 	bl	80096d4 <f_open>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d128      	bne.n	8003504 <Config_Init+0x194>
    {
        return;
    }

    if (f_write(&config_file, &config, sizeof(Config_Typedef), &bytes_written) != FR_OK || bytes_written != sizeof(Config_Typedef)) 
 80034b2:	f107 0318 	add.w	r3, r7, #24
 80034b6:	3b14      	subs	r3, #20
 80034b8:	f107 0018 	add.w	r0, r7, #24
 80034bc:	380c      	subs	r0, #12
 80034be:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80034c2:	4914      	ldr	r1, [pc, #80]	@ (8003514 <Config_Init+0x1a4>)
 80034c4:	f006 fbf1 	bl	8009caa <f_write>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <Config_Init+0x16c>
 80034ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80034d2:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80034d6:	f5b3 7fb8 	cmp.w	r3, #368	@ 0x170
 80034da:	d006      	beq.n	80034ea <Config_Init+0x17a>
	{
        f_close(&config_file);
 80034dc:	f107 0318 	add.w	r3, r7, #24
 80034e0:	3b0c      	subs	r3, #12
 80034e2:	4618      	mov	r0, r3
 80034e4:	f006 fdea 	bl	800a0bc <f_close>
        return;
 80034e8:	e00d      	b.n	8003506 <Config_Init+0x196>
    }
    
    f_sync(&config_file);
 80034ea:	f107 0318 	add.w	r3, r7, #24
 80034ee:	3b0c      	subs	r3, #12
 80034f0:	4618      	mov	r0, r3
 80034f2:	f006 fd63 	bl	8009fbc <f_sync>
    f_close(&config_file);
 80034f6:	f107 0318 	add.w	r3, r7, #24
 80034fa:	3b0c      	subs	r3, #12
 80034fc:	4618      	mov	r0, r3
 80034fe:	f006 fddd 	bl	800a0bc <f_close>
 8003502:	e000      	b.n	8003506 <Config_Init+0x196>
        return;
 8003504:	bf00      	nop
}
 8003506:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 800350a:	371c      	adds	r7, #28
 800350c:	46bd      	mov	sp, r7
 800350e:	bd90      	pop	{r4, r7, pc}
 8003510:	08017324 	.word	0x08017324
 8003514:	20001c6c 	.word	0x20001c6c
 8003518:	20001cda 	.word	0x20001cda
 800351c:	08017338 	.word	0x08017338
 8003520:	20001d1a 	.word	0x20001d1a
 8003524:	08017344 	.word	0x08017344
 8003528:	20001d5a 	.word	0x20001d5a
 800352c:	08017354 	.word	0x08017354
 8003530:	20001d9a 	.word	0x20001d9a
 8003534:	08017360 	.word	0x08017360

08003538 <LED_Start>:
#include "leds.h"
#include "peripherals.h"

/*------ACCENSIONE LED------*/
void LED_Start(uint32_t LED, uint8_t freq, uint8_t duty)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	70fb      	strb	r3, [r7, #3]
 8003544:	4613      	mov	r3, r2
 8003546:	70bb      	strb	r3, [r7, #2]
    TIM_HandleTypeDef *htim = LED_TIMER;
 8003548:	4b6f      	ldr	r3, [pc, #444]	@ (8003708 <LED_Start+0x1d0>)
 800354a:	60fb      	str	r3, [r7, #12]
	uint16_t pulse = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	82fb      	strh	r3, [r7, #22]

    uint16_t prescaler = (uint16_t)(SystemCoreClock / 5000 - 1);
 8003550:	4b6e      	ldr	r3, [pc, #440]	@ (800370c <LED_Start+0x1d4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a6e      	ldr	r2, [pc, #440]	@ (8003710 <LED_Start+0x1d8>)
 8003556:	fba2 2303 	umull	r2, r3, r2, r3
 800355a:	0b1b      	lsrs	r3, r3, #12
 800355c:	b29b      	uxth	r3, r3
 800355e:	3b01      	subs	r3, #1
 8003560:	82bb      	strh	r3, [r7, #20]
    uint16_t period = 0;
 8003562:	2300      	movs	r3, #0
 8003564:	827b      	strh	r3, [r7, #18]

    switch(freq)
 8003566:	78fb      	ldrb	r3, [r7, #3]
 8003568:	2b03      	cmp	r3, #3
 800356a:	f200 80c3 	bhi.w	80036f4 <LED_Start+0x1bc>
 800356e:	a201      	add	r2, pc, #4	@ (adr r2, 8003574 <LED_Start+0x3c>)
 8003570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003574:	08003585 	.word	0x08003585
 8003578:	08003591 	.word	0x08003591
 800357c:	08003599 	.word	0x08003599
 8003580:	080035d1 	.word	0x080035d1
    {
        case FAST:  
            period = (uint16_t)((prescaler / 2) - 1);
 8003584:	8abb      	ldrh	r3, [r7, #20]
 8003586:	085b      	lsrs	r3, r3, #1
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b01      	subs	r3, #1
 800358c:	827b      	strh	r3, [r7, #18]
            break;
 800358e:	e03b      	b.n	8003608 <LED_Start+0xd0>
        case MEDIUM:
            period = (uint16_t)(prescaler / 1 - 1);
 8003590:	8abb      	ldrh	r3, [r7, #20]
 8003592:	3b01      	subs	r3, #1
 8003594:	827b      	strh	r3, [r7, #18]
            break;
 8003596:	e037      	b.n	8003608 <LED_Start+0xd0>
        case SLOW:
            prescaler = (uint16_t)(SystemCoreClock / 0.5 - 1);
 8003598:	4b5c      	ldr	r3, [pc, #368]	@ (800370c <LED_Start+0x1d4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f7fc ffc1 	bl	8000524 <__aeabi_ui2d>
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	4b5b      	ldr	r3, [pc, #364]	@ (8003714 <LED_Start+0x1dc>)
 80035a8:	f7fd f960 	bl	800086c <__aeabi_ddiv>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4610      	mov	r0, r2
 80035b2:	4619      	mov	r1, r3
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	4b57      	ldr	r3, [pc, #348]	@ (8003718 <LED_Start+0x1e0>)
 80035ba:	f7fc fe75 	bl	80002a8 <__aeabi_dsub>
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4610      	mov	r0, r2
 80035c4:	4619      	mov	r1, r3
 80035c6:	f7fd fa39 	bl	8000a3c <__aeabi_d2uiz>
 80035ca:	4603      	mov	r3, r0
 80035cc:	82bb      	strh	r3, [r7, #20]
            break;
 80035ce:	e01b      	b.n	8003608 <LED_Start+0xd0>
        case VERY_SLOW:
            prescaler = (uint16_t)(SystemCoreClock / 0.1 - 1);
 80035d0:	4b4e      	ldr	r3, [pc, #312]	@ (800370c <LED_Start+0x1d4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fc ffa5 	bl	8000524 <__aeabi_ui2d>
 80035da:	a349      	add	r3, pc, #292	@ (adr r3, 8003700 <LED_Start+0x1c8>)
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e0:	f7fd f944 	bl	800086c <__aeabi_ddiv>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4610      	mov	r0, r2
 80035ea:	4619      	mov	r1, r3
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	4b49      	ldr	r3, [pc, #292]	@ (8003718 <LED_Start+0x1e0>)
 80035f2:	f7fc fe59 	bl	80002a8 <__aeabi_dsub>
 80035f6:	4602      	mov	r2, r0
 80035f8:	460b      	mov	r3, r1
 80035fa:	4610      	mov	r0, r2
 80035fc:	4619      	mov	r1, r3
 80035fe:	f7fd fa1d 	bl	8000a3c <__aeabi_d2uiz>
 8003602:	4603      	mov	r3, r0
 8003604:	82bb      	strh	r3, [r7, #20]
            break;
 8003606:	bf00      	nop
        default:
            return;
    }

	switch(duty)
 8003608:	78bb      	ldrb	r3, [r7, #2]
 800360a:	3b04      	subs	r3, #4
 800360c:	2b03      	cmp	r3, #3
 800360e:	d873      	bhi.n	80036f8 <LED_Start+0x1c0>
 8003610:	a201      	add	r2, pc, #4	@ (adr r2, 8003618 <LED_Start+0xe0>)
 8003612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003616:	bf00      	nop
 8003618:	08003629 	.word	0x08003629
 800361c:	0800362f 	.word	0x0800362f
 8003620:	08003643 	.word	0x08003643
 8003624:	0800364b 	.word	0x0800364b
	{
		case FULL:
			pulse = period; 
 8003628:	8a7b      	ldrh	r3, [r7, #18]
 800362a:	82fb      	strh	r3, [r7, #22]
		    break;
 800362c:	e011      	b.n	8003652 <LED_Start+0x11a>
        case HIGH:
			pulse = period * 3 / 4;
 800362e:	8a7a      	ldrh	r2, [r7, #18]
 8003630:	4613      	mov	r3, r2
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	4413      	add	r3, r2
 8003636:	2b00      	cmp	r3, #0
 8003638:	da00      	bge.n	800363c <LED_Start+0x104>
 800363a:	3303      	adds	r3, #3
 800363c:	109b      	asrs	r3, r3, #2
 800363e:	82fb      	strh	r3, [r7, #22]
			break;
 8003640:	e007      	b.n	8003652 <LED_Start+0x11a>
		case HALF:
			pulse = period / 2;
 8003642:	8a7b      	ldrh	r3, [r7, #18]
 8003644:	085b      	lsrs	r3, r3, #1
 8003646:	82fb      	strh	r3, [r7, #22]
			break;
 8003648:	e003      	b.n	8003652 <LED_Start+0x11a>
		case LOW:
			pulse = period / 4;
 800364a:	8a7b      	ldrh	r3, [r7, #18]
 800364c:	089b      	lsrs	r3, r3, #2
 800364e:	82fb      	strh	r3, [r7, #22]
			break;
 8003650:	bf00      	nop
        default:
            return;
	}

    // Imposta periodo e prescaler
    htim->Instance->PSC = prescaler;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	8aba      	ldrh	r2, [r7, #20]
 8003658:	629a      	str	r2, [r3, #40]	@ 0x28
    htim->Instance->ARR = period;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	8a7a      	ldrh	r2, [r7, #18]
 8003660:	62da      	str	r2, [r3, #44]	@ 0x2c
    htim->Instance->CCR1 = (LED == GRN_LED) ? pulse : htim->Instance->CCR1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b08      	cmp	r3, #8
 8003666:	d101      	bne.n	800366c <LED_Start+0x134>
 8003668:	8afb      	ldrh	r3, [r7, #22]
 800366a:	e002      	b.n	8003672 <LED_Start+0x13a>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	6812      	ldr	r2, [r2, #0]
 8003676:	6353      	str	r3, [r2, #52]	@ 0x34
    htim->Instance->CCR2 = (LED == ORG_LED) ? pulse : htim->Instance->CCR2;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <LED_Start+0x14a>
 800367e:	8afb      	ldrh	r3, [r7, #22]
 8003680:	e002      	b.n	8003688 <LED_Start+0x150>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	6393      	str	r3, [r2, #56]	@ 0x38
    htim->Instance->CCR3 = (LED == RED_LED) ? pulse : htim->Instance->CCR3;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b04      	cmp	r3, #4
 8003692:	d101      	bne.n	8003698 <LED_Start+0x160>
 8003694:	8afb      	ldrh	r3, [r7, #22]
 8003696:	e002      	b.n	800369e <LED_Start+0x166>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	6812      	ldr	r2, [r2, #0]
 80036a2:	63d3      	str	r3, [r2, #60]	@ 0x3c

    // Avvia PWM solo se non già attivo
    switch(LED)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d009      	beq.n	80036be <LED_Start+0x186>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d824      	bhi.n	80036fa <LED_Start+0x1c2>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00c      	beq.n	80036d0 <LED_Start+0x198>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d012      	beq.n	80036e2 <LED_Start+0x1aa>
 80036bc:	e01d      	b.n	80036fa <LED_Start+0x1c2>
    {
        case GRN_LED:
            htim->Instance->CCER |= TIM_CCER_CC1E;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6a1a      	ldr	r2, [r3, #32]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0201 	orr.w	r2, r2, #1
 80036cc:	621a      	str	r2, [r3, #32]
            break;
 80036ce:	e014      	b.n	80036fa <LED_Start+0x1c2>
        case ORG_LED:
            htim->Instance->CCER |= TIM_CCER_CC2E;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6a1a      	ldr	r2, [r3, #32]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0210 	orr.w	r2, r2, #16
 80036de:	621a      	str	r2, [r3, #32]
            break;
 80036e0:	e00b      	b.n	80036fa <LED_Start+0x1c2>
        case RED_LED:
            htim->Instance->CCER |= TIM_CCER_CC3E;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6a1a      	ldr	r2, [r3, #32]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036f0:	621a      	str	r2, [r3, #32]
            break;
 80036f2:	e002      	b.n	80036fa <LED_Start+0x1c2>
            return;
 80036f4:	bf00      	nop
 80036f6:	e000      	b.n	80036fa <LED_Start+0x1c2>
            return;
 80036f8:	bf00      	nop
    }
}
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	9999999a 	.word	0x9999999a
 8003704:	3fb99999 	.word	0x3fb99999
 8003708:	2000046c 	.word	0x2000046c
 800370c:	20000168 	.word	0x20000168
 8003710:	d1b71759 	.word	0xd1b71759
 8003714:	3fe00000 	.word	0x3fe00000
 8003718:	3ff00000 	.word	0x3ff00000

0800371c <LED_Stop>:

/*------SPEGNIMENTO LED------*/
void LED_Stop(uint32_t LED)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(LED_TIMER, LED);
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	4803      	ldr	r0, [pc, #12]	@ (8003734 <LED_Stop+0x18>)
 8003728:	f00f fa2c 	bl	8012b84 <HAL_TIM_PWM_Stop>
}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	2000046c 	.word	0x2000046c

08003738 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8003738:	b590      	push	{r4, r7, lr}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	607a      	str	r2, [r7, #4]
 8003742:	461a      	mov	r2, r3
 8003744:	460b      	mov	r3, r1
 8003746:	72fb      	strb	r3, [r7, #11]
 8003748:	4613      	mov	r3, r2
 800374a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	685c      	ldr	r4, [r3, #4]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	68d8      	ldr	r0, [r3, #12]
 8003754:	893b      	ldrh	r3, [r7, #8]
 8003756:	7af9      	ldrb	r1, [r7, #11]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	47a0      	blx	r4
 800375c:	6178      	str	r0, [r7, #20]

  return ret;
 800375e:	697b      	ldr	r3, [r7, #20]
}
 8003760:	4618      	mov	r0, r3
 8003762:	371c      	adds	r7, #28
 8003764:	46bd      	mov	sp, r7
 8003766:	bd90      	pop	{r4, r7, pc}

08003768 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8003768:	b590      	push	{r4, r7, lr}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	607a      	str	r2, [r7, #4]
 8003772:	461a      	mov	r2, r3
 8003774:	460b      	mov	r3, r1
 8003776:	72fb      	strb	r3, [r7, #11]
 8003778:	4613      	mov	r3, r2
 800377a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681c      	ldr	r4, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	68d8      	ldr	r0, [r3, #12]
 8003784:	893b      	ldrh	r3, [r7, #8]
 8003786:	7af9      	ldrb	r1, [r7, #11]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	47a0      	blx	r4
 800378c:	6178      	str	r0, [r7, #20]

  return ret;
 800378e:	697b      	ldr	r3, [r7, #20]
}
 8003790:	4618      	mov	r0, r3
 8003792:	371c      	adds	r7, #28
 8003794:	46bd      	mov	sp, r7
 8003796:	bd90      	pop	{r4, r7, pc}

08003798 <lsm6dsv16x_reset_set>:
  * @param  val      Reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_set(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t val)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80037a4:	f107 020c 	add.w	r2, r7, #12
 80037a8:	2301      	movs	r3, #1
 80037aa:	2112      	movs	r1, #18
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7ff ffc3 	bl	8003738 <lsm6dsv16x_read_reg>
 80037b2:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80037b4:	f107 0210 	add.w	r2, r7, #16
 80037b8:	2301      	movs	r3, #1
 80037ba:	2101      	movs	r1, #1
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff ffbb 	bl	8003738 <lsm6dsv16x_read_reg>
 80037c2:	4602      	mov	r2, r0
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	4413      	add	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <lsm6dsv16x_reset_set+0x3c>
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	e02d      	b.n	8003830 <lsm6dsv16x_reset_set+0x98>

  ctrl3.boot = ((uint8_t)val & 0x04U) >> 2;
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	089b      	lsrs	r3, r3, #2
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	7b3b      	ldrb	r3, [r7, #12]
 80037e0:	f362 13c7 	bfi	r3, r2, #7, #1
 80037e4:	733b      	strb	r3, [r7, #12]
  ctrl3.sw_reset = ((uint8_t)val & 0x02U) >> 1;
 80037e6:	78fb      	ldrb	r3, [r7, #3]
 80037e8:	085b      	lsrs	r3, r3, #1
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	7b3b      	ldrb	r3, [r7, #12]
 80037f2:	f362 0300 	bfi	r3, r2, #0, #1
 80037f6:	733b      	strb	r3, [r7, #12]
  func_cfg_access.sw_por = (uint8_t)val & 0x01U;
 80037f8:	78fb      	ldrb	r3, [r7, #3]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	7c3b      	ldrb	r3, [r7, #16]
 8003802:	f362 0382 	bfi	r3, r2, #2, #1
 8003806:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003808:	f107 020c 	add.w	r2, r7, #12
 800380c:	2301      	movs	r3, #1
 800380e:	2112      	movs	r1, #18
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff ffa9 	bl	8003768 <lsm6dsv16x_write_reg>
 8003816:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8003818:	f107 0210 	add.w	r2, r7, #16
 800381c:	2301      	movs	r3, #1
 800381e:	2101      	movs	r1, #1
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff ffa1 	bl	8003768 <lsm6dsv16x_write_reg>
 8003826:	4602      	mov	r2, r0
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	4413      	add	r3, r2
 800382c:	617b      	str	r3, [r7, #20]

  return ret;
 800382e:	697b      	ldr	r3, [r7, #20]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <lsm6dsv16x_reset_get>:
  * @param  val      Global reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_get(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t *val)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003842:	f107 020c 	add.w	r2, r7, #12
 8003846:	2301      	movs	r3, #1
 8003848:	2112      	movs	r1, #18
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff ff74 	bl	8003738 <lsm6dsv16x_read_reg>
 8003850:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8003852:	f107 0210 	add.w	r2, r7, #16
 8003856:	2301      	movs	r3, #1
 8003858:	2101      	movs	r1, #1
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff ff6c 	bl	8003738 <lsm6dsv16x_read_reg>
 8003860:	4602      	mov	r2, r0
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	4413      	add	r3, r2
 8003866:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <lsm6dsv16x_reset_get+0x3a>
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	e033      	b.n	80038da <lsm6dsv16x_reset_get+0xa2>

  switch ((ctrl3.sw_reset << 2) + (ctrl3.boot << 1) + func_cfg_access.sw_por)
 8003872:	7b3b      	ldrb	r3, [r7, #12]
 8003874:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003878:	b2db      	uxtb	r3, r3
 800387a:	009a      	lsls	r2, r3, #2
 800387c:	7b3b      	ldrb	r3, [r7, #12]
 800387e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003882:	b2db      	uxtb	r3, r3
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	4413      	add	r3, r2
 8003888:	7c3a      	ldrb	r2, [r7, #16]
 800388a:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	4413      	add	r3, r2
 8003892:	2b04      	cmp	r3, #4
 8003894:	d81c      	bhi.n	80038d0 <lsm6dsv16x_reset_get+0x98>
 8003896:	a201      	add	r2, pc, #4	@ (adr r2, 800389c <lsm6dsv16x_reset_get+0x64>)
 8003898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389c:	080038b1 	.word	0x080038b1
 80038a0:	080038b9 	.word	0x080038b9
 80038a4:	080038c1 	.word	0x080038c1
 80038a8:	080038d1 	.word	0x080038d1
 80038ac:	080038c9 	.word	0x080038c9
  {
    case LSM6DSV16X_READY:
      *val = LSM6DSV16X_READY;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2200      	movs	r2, #0
 80038b4:	701a      	strb	r2, [r3, #0]
      break;
 80038b6:	e00f      	b.n	80038d8 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_GLOBAL_RST:
      *val = LSM6DSV16X_GLOBAL_RST;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2201      	movs	r2, #1
 80038bc:	701a      	strb	r2, [r3, #0]
      break;
 80038be:	e00b      	b.n	80038d8 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CAL_PARAM:
      *val = LSM6DSV16X_RESTORE_CAL_PARAM;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2202      	movs	r2, #2
 80038c4:	701a      	strb	r2, [r3, #0]
      break;
 80038c6:	e007      	b.n	80038d8 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CTRL_REGS:
      *val = LSM6DSV16X_RESTORE_CTRL_REGS;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2204      	movs	r2, #4
 80038cc:	701a      	strb	r2, [r3, #0]
      break;
 80038ce:	e003      	b.n	80038d8 <lsm6dsv16x_reset_get+0xa0>

    default:
      *val = LSM6DSV16X_GLOBAL_RST;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2201      	movs	r2, #1
 80038d4:	701a      	strb	r2, [r3, #0]
      break;
 80038d6:	bf00      	nop
  }

  return ret;
 80038d8:	697b      	ldr	r3, [r7, #20]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop

080038e4 <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 80038ee:	2301      	movs	r3, #1
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	210f      	movs	r1, #15
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7ff ff1f 	bl	8003738 <lsm6dsv16x_read_reg>
 80038fa:	60f8      	str	r0, [r7, #12]

  return ret;
 80038fc:	68fb      	ldr	r3, [r7, #12]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b086      	sub	sp, #24
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	460b      	mov	r3, r1
 8003910:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8003912:	f107 0210 	add.w	r2, r7, #16
 8003916:	2301      	movs	r3, #1
 8003918:	2110      	movs	r1, #16
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff ff0c 	bl	8003738 <lsm6dsv16x_read_reg>
 8003920:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <lsm6dsv16x_xl_data_rate_set+0x26>
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	e039      	b.n	80039a0 <lsm6dsv16x_xl_data_rate_set+0x9a>

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 800392c:	78fb      	ldrb	r3, [r7, #3]
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	b2da      	uxtb	r2, r3
 8003934:	7c3b      	ldrb	r3, [r7, #16]
 8003936:	f362 0303 	bfi	r3, r2, #0, #4
 800393a:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 800393c:	f107 0210 	add.w	r2, r7, #16
 8003940:	2301      	movs	r3, #1
 8003942:	2110      	movs	r1, #16
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff ff0f 	bl	8003768 <lsm6dsv16x_write_reg>
 800394a:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <lsm6dsv16x_xl_data_rate_set+0x50>
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	e024      	b.n	80039a0 <lsm6dsv16x_xl_data_rate_set+0x9a>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8003956:	78fb      	ldrb	r3, [r7, #3]
 8003958:	091b      	lsrs	r3, r3, #4
 800395a:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 800395c:	7cfb      	ldrb	r3, [r7, #19]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d01d      	beq.n	800399e <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003962:	f107 020c 	add.w	r2, r7, #12
 8003966:	2301      	movs	r3, #1
 8003968:	2162      	movs	r1, #98	@ 0x62
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff fee4 	bl	8003738 <lsm6dsv16x_read_reg>
 8003970:	4602      	mov	r2, r0
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	4413      	add	r3, r2
 8003976:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8003978:	7cfb      	ldrb	r3, [r7, #19]
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	b2da      	uxtb	r2, r3
 8003980:	7b3b      	ldrb	r3, [r7, #12]
 8003982:	f362 0301 	bfi	r3, r2, #0, #2
 8003986:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003988:	f107 020c 	add.w	r2, r7, #12
 800398c:	2301      	movs	r3, #1
 800398e:	2162      	movs	r1, #98	@ 0x62
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff fee9 	bl	8003768 <lsm6dsv16x_write_reg>
 8003996:	4602      	mov	r2, r0
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	4413      	add	r3, r2
 800399c:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800399e:	697b      	ldr	r3, [r7, #20]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <lsm6dsv16x_xl_mode_set>:
  * @param  val      XL_HIGH_PERFORMANCE_MD, XL_HIGH_ACCURACY_ODR_MD, XL_LOW_POWER_2_AVG_MD, XL_LOW_POWER_4_AVG_MD, XL_LOW_POWER_8_AVG_MD, XL_NORMAL_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_xl_mode_t val)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80039b4:	f107 0208 	add.w	r2, r7, #8
 80039b8:	2301      	movs	r3, #1
 80039ba:	2110      	movs	r1, #16
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff febb 	bl	8003738 <lsm6dsv16x_read_reg>
 80039c2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10f      	bne.n	80039ea <lsm6dsv16x_xl_mode_set+0x42>
  {
    ctrl1.op_mode_xl = (uint8_t)val & 0x07U;
 80039ca:	78fb      	ldrb	r3, [r7, #3]
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	7a3b      	ldrb	r3, [r7, #8]
 80039d4:	f362 1306 	bfi	r3, r2, #4, #3
 80039d8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80039da:	f107 0208 	add.w	r2, r7, #8
 80039de:	2301      	movs	r3, #1
 80039e0:	2110      	movs	r1, #16
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff fec0 	bl	8003768 <lsm6dsv16x_write_reg>
 80039e8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80039ea:	68fb      	ldr	r3, [r7, #12]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	460b      	mov	r3, r1
 80039fe:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003a00:	f107 0210 	add.w	r2, r7, #16
 8003a04:	2301      	movs	r3, #1
 8003a06:	2111      	movs	r1, #17
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff fe95 	bl	8003738 <lsm6dsv16x_read_reg>
 8003a0e:	6178      	str	r0, [r7, #20]
  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	7c3b      	ldrb	r3, [r7, #16]
 8003a1a:	f362 0303 	bfi	r3, r2, #0, #4
 8003a1e:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003a20:	f107 0210 	add.w	r2, r7, #16
 8003a24:	2301      	movs	r3, #1
 8003a26:	2111      	movs	r1, #17
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7ff fe9d 	bl	8003768 <lsm6dsv16x_write_reg>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	4413      	add	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <lsm6dsv16x_gy_data_rate_set+0x4c>
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	e024      	b.n	8003a8a <lsm6dsv16x_gy_data_rate_set+0x96>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8003a46:	7cfb      	ldrb	r3, [r7, #19]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d01d      	beq.n	8003a88 <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003a4c:	f107 020c 	add.w	r2, r7, #12
 8003a50:	2301      	movs	r3, #1
 8003a52:	2162      	movs	r1, #98	@ 0x62
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff fe6f 	bl	8003738 <lsm6dsv16x_read_reg>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	4413      	add	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8003a62:	7cfb      	ldrb	r3, [r7, #19]
 8003a64:	f003 0303 	and.w	r3, r3, #3
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	7b3b      	ldrb	r3, [r7, #12]
 8003a6c:	f362 0301 	bfi	r3, r2, #0, #2
 8003a70:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003a72:	f107 020c 	add.w	r2, r7, #12
 8003a76:	2301      	movs	r3, #1
 8003a78:	2162      	movs	r1, #98	@ 0x62
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff fe74 	bl	8003768 <lsm6dsv16x_write_reg>
 8003a80:	4602      	mov	r2, r0
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	4413      	add	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003a88:	697b      	ldr	r3, [r7, #20]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <lsm6dsv16x_gy_mode_set>:
  * @param  val      GY_HIGH_PERFORMANCE_MD, GY_HIGH_ACCURACY_ODR_MD, GY_SLEEP_MD, GY_LOW_POWER_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_gy_mode_t val)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b084      	sub	sp, #16
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003a9e:	f107 0208 	add.w	r2, r7, #8
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	2111      	movs	r1, #17
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff fe46 	bl	8003738 <lsm6dsv16x_read_reg>
 8003aac:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10f      	bne.n	8003ad4 <lsm6dsv16x_gy_mode_set+0x42>
  {
    ctrl2.op_mode_g = (uint8_t)val & 0x07U;
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	7a3b      	ldrb	r3, [r7, #8]
 8003abe:	f362 1306 	bfi	r3, r2, #4, #3
 8003ac2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003ac4:	f107 0208 	add.w	r2, r7, #8
 8003ac8:	2301      	movs	r3, #1
 8003aca:	2111      	movs	r1, #17
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff fe4b 	bl	8003768 <lsm6dsv16x_write_reg>
 8003ad2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003aea:	f107 0208 	add.w	r2, r7, #8
 8003aee:	2301      	movs	r3, #1
 8003af0:	2112      	movs	r1, #18
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff fe20 	bl	8003738 <lsm6dsv16x_read_reg>
 8003af8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10f      	bne.n	8003b20 <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	7a3b      	ldrb	r3, [r7, #8]
 8003b0a:	f362 1386 	bfi	r3, r2, #6, #1
 8003b0e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003b10:	f107 0208 	add.w	r2, r7, #8
 8003b14:	2301      	movs	r3, #1
 8003b16:	2112      	movs	r1, #18
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff fe25 	bl	8003768 <lsm6dsv16x_write_reg>
 8003b1e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003b20:	68fb      	ldr	r3, [r7, #12]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <lsm6dsv16x_odr_trig_cfg_set>:
  * @param  val      number of data in the reference period.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_odr_trig_cfg_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	460b      	mov	r3, r1
 8003b34:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_odr_trig_cfg_t odr_trig;
  int32_t ret;

  if (val >= 1U && val <= 3U) {
 8003b36:	78fb      	ldrb	r3, [r7, #3]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
 8003b3c:	78fb      	ldrb	r3, [r7, #3]
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	d802      	bhi.n	8003b48 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
    return -1;
 8003b42:	f04f 33ff 	mov.w	r3, #4294967295
 8003b46:	e015      	b.n	8003b74 <lsm6dsv16x_odr_trig_cfg_set+0x4a>
  }

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 8003b48:	f107 0208 	add.w	r2, r7, #8
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	2106      	movs	r1, #6
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff fdf1 	bl	8003738 <lsm6dsv16x_read_reg>
 8003b56:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d109      	bne.n	8003b72 <lsm6dsv16x_odr_trig_cfg_set+0x48>
  {
    odr_trig.odr_trig_nodr = val;
 8003b5e:	78fb      	ldrb	r3, [r7, #3]
 8003b60:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 8003b62:	f107 0208 	add.w	r2, r7, #8
 8003b66:	2301      	movs	r3, #1
 8003b68:	2106      	movs	r1, #6
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7ff fdfc 	bl	8003768 <lsm6dsv16x_write_reg>
 8003b70:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003b72:	68fb      	ldr	r3, [r7, #12]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	460b      	mov	r3, r1
 8003b86:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8003b88:	f107 0208 	add.w	r2, r7, #8
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	2115      	movs	r1, #21
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff fdd1 	bl	8003738 <lsm6dsv16x_read_reg>
 8003b96:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10f      	bne.n	8003bbe <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 8003b9e:	78fb      	ldrb	r3, [r7, #3]
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	7a3b      	ldrb	r3, [r7, #8]
 8003ba8:	f362 0303 	bfi	r3, r2, #0, #4
 8003bac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8003bae:	f107 0208 	add.w	r2, r7, #8
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	2115      	movs	r1, #21
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7ff fdd6 	bl	8003768 <lsm6dsv16x_write_reg>
 8003bbc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8003bd4:	f107 0208 	add.w	r2, r7, #8
 8003bd8:	2301      	movs	r3, #1
 8003bda:	2117      	movs	r1, #23
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff fdab 	bl	8003738 <lsm6dsv16x_read_reg>
 8003be2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10f      	bne.n	8003c0a <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	f003 0303 	and.w	r3, r3, #3
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	7a3b      	ldrb	r3, [r7, #8]
 8003bf4:	f362 0301 	bfi	r3, r2, #0, #2
 8003bf8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8003bfa:	f107 0208 	add.w	r2, r7, #8
 8003bfe:	2301      	movs	r3, #1
 8003c00:	2117      	movs	r1, #23
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7ff fdb0 	bl	8003768 <lsm6dsv16x_write_reg>
 8003c08:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <lsm6dsv16x_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsv16x_pin_int1_route_set(stmdev_ctx_t *ctx,
                                      lsm6dsv16x_pin_int_route_t *val)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_int1_ctrl_t          int1_ctrl;
  lsm6dsv16x_md1_cfg_t            md1_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003c1e:	f107 0210 	add.w	r2, r7, #16
 8003c22:	2301      	movs	r3, #1
 8003c24:	210d      	movs	r1, #13
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff fd86 	bl	8003738 <lsm6dsv16x_read_reg>
 8003c2c:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <lsm6dsv16x_pin_int1_route_set+0x24>
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	e0a0      	b.n	8003d7a <lsm6dsv16x_pin_int1_route_set+0x166>

  int1_ctrl.int1_drdy_xl       = val->drdy_xl;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	7c3b      	ldrb	r3, [r7, #16]
 8003c44:	f362 0300 	bfi	r3, r2, #0, #1
 8003c48:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_drdy_g        = val->drdy_g;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	7c3b      	ldrb	r3, [r7, #16]
 8003c56:	f362 0341 	bfi	r3, r2, #1, #1
 8003c5a:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_th       = val->fifo_th;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	7c3b      	ldrb	r3, [r7, #16]
 8003c68:	f362 03c3 	bfi	r3, r2, #3, #1
 8003c6c:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_ovr      = val->fifo_ovr;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	7c3b      	ldrb	r3, [r7, #16]
 8003c7a:	f362 1304 	bfi	r3, r2, #4, #1
 8003c7e:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_full     = val->fifo_full;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	7c3b      	ldrb	r3, [r7, #16]
 8003c8c:	f362 1345 	bfi	r3, r2, #5, #1
 8003c90:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_cnt_bdr       = val->cnt_bdr;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	7c3b      	ldrb	r3, [r7, #16]
 8003c9e:	f362 1386 	bfi	r3, r2, #6, #1
 8003ca2:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003ca4:	f107 0210 	add.w	r2, r7, #16
 8003ca8:	2301      	movs	r3, #1
 8003caa:	210d      	movs	r1, #13
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff fd5b 	bl	8003768 <lsm6dsv16x_write_reg>
 8003cb2:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <lsm6dsv16x_pin_int1_route_set+0xaa>
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	e05d      	b.n	8003d7a <lsm6dsv16x_pin_int1_route_set+0x166>

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8003cbe:	f107 020c 	add.w	r2, r7, #12
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	215e      	movs	r1, #94	@ 0x5e
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7ff fd36 	bl	8003738 <lsm6dsv16x_read_reg>
 8003ccc:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <lsm6dsv16x_pin_int1_route_set+0xc4>
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	e050      	b.n	8003d7a <lsm6dsv16x_pin_int1_route_set+0x166>

  md1_cfg.int1_shub            = val->shub;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	785b      	ldrb	r3, [r3, #1]
 8003cdc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	7b3b      	ldrb	r3, [r7, #12]
 8003ce4:	f362 0300 	bfi	r3, r2, #0, #1
 8003ce8:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_emb_func        = val->emb_func;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	785b      	ldrb	r3, [r3, #1]
 8003cee:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	7b3b      	ldrb	r3, [r7, #12]
 8003cf6:	f362 0341 	bfi	r3, r2, #1, #1
 8003cfa:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_6d              = val->sixd;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	785b      	ldrb	r3, [r3, #1]
 8003d00:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	7b3b      	ldrb	r3, [r7, #12]
 8003d08:	f362 0382 	bfi	r3, r2, #2, #1
 8003d0c:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_single_tap      = val->single_tap;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	785b      	ldrb	r3, [r3, #1]
 8003d12:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	7b3b      	ldrb	r3, [r7, #12]
 8003d1a:	f362 1386 	bfi	r3, r2, #6, #1
 8003d1e:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_double_tap      = val->double_tap;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	785b      	ldrb	r3, [r3, #1]
 8003d24:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	7b3b      	ldrb	r3, [r7, #12]
 8003d2c:	f362 03c3 	bfi	r3, r2, #3, #1
 8003d30:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_wu              = val->wakeup;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	785b      	ldrb	r3, [r3, #1]
 8003d36:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	7b3b      	ldrb	r3, [r7, #12]
 8003d3e:	f362 1345 	bfi	r3, r2, #5, #1
 8003d42:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_ff              = val->freefall;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	785b      	ldrb	r3, [r3, #1]
 8003d48:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	7b3b      	ldrb	r3, [r7, #12]
 8003d50:	f362 1304 	bfi	r3, r2, #4, #1
 8003d54:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_sleep_change    = val->sleep_change;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	789b      	ldrb	r3, [r3, #2]
 8003d5a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	7b3b      	ldrb	r3, [r7, #12]
 8003d62:	f362 13c7 	bfi	r3, r2, #7, #1
 8003d66:	733b      	strb	r3, [r7, #12]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8003d68:	f107 020c 	add.w	r2, r7, #12
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	215e      	movs	r1, #94	@ 0x5e
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff fcf9 	bl	8003768 <lsm6dsv16x_write_reg>
 8003d76:	6178      	str	r0, [r7, #20]

  return ret;
 8003d78:	697b      	ldr	r3, [r7, #20]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <lsm6dsv16x_den_polarity_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_den_polarity_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_den_polarity_t val)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl4_t ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 8003d8e:	f107 0208 	add.w	r2, r7, #8
 8003d92:	2301      	movs	r3, #1
 8003d94:	2113      	movs	r1, #19
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff fcce 	bl	8003738 <lsm6dsv16x_read_reg>
 8003d9c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10f      	bne.n	8003dc4 <lsm6dsv16x_den_polarity_set+0x42>
  {
    ctrl4.int2_in_lh = (uint8_t)val & 0x1U;
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	7a3b      	ldrb	r3, [r7, #8]
 8003dae:	f362 0300 	bfi	r3, r2, #0, #1
 8003db2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 8003db4:	f107 0208 	add.w	r2, r7, #8
 8003db8:	2301      	movs	r3, #1
 8003dba:	2113      	movs	r1, #19
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff fcd3 	bl	8003768 <lsm6dsv16x_write_reg>
 8003dc2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <lsm6dsv16x_fifo_watermark_set>:
  * @param  val      FIFO watermark threshold (1 LSb = TAG (1 Byte) + 1 sensor (6 Bytes) written in FIFO).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_watermark_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b084      	sub	sp, #16
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl1_t fifo_ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8003dda:	f107 0208 	add.w	r2, r7, #8
 8003dde:	2301      	movs	r3, #1
 8003de0:	2107      	movs	r1, #7
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7ff fca8 	bl	8003738 <lsm6dsv16x_read_reg>
 8003de8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d109      	bne.n	8003e04 <lsm6dsv16x_fifo_watermark_set+0x36>
  {
    fifo_ctrl1.wtm = val;
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8003df4:	f107 0208 	add.w	r2, r7, #8
 8003df8:	2301      	movs	r3, #1
 8003dfa:	2107      	movs	r1, #7
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff fcb3 	bl	8003768 <lsm6dsv16x_write_reg>
 8003e02:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003e04:	68fb      	ldr	r3, [r7, #12]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <lsm6dsv16x_fifo_xl_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_xl_batch_t val)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b084      	sub	sp, #16
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	460b      	mov	r3, r1
 8003e18:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8003e1a:	f107 0208 	add.w	r2, r7, #8
 8003e1e:	2301      	movs	r3, #1
 8003e20:	2109      	movs	r1, #9
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff fc88 	bl	8003738 <lsm6dsv16x_read_reg>
 8003e28:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10f      	bne.n	8003e50 <lsm6dsv16x_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val & 0xFu;
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	7a3b      	ldrb	r3, [r7, #8]
 8003e3a:	f362 0303 	bfi	r3, r2, #0, #4
 8003e3e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8003e40:	f107 0208 	add.w	r2, r7, #8
 8003e44:	2301      	movs	r3, #1
 8003e46:	2109      	movs	r1, #9
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff fc8d 	bl	8003768 <lsm6dsv16x_write_reg>
 8003e4e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003e50:	68fb      	ldr	r3, [r7, #12]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <lsm6dsv16x_fifo_gy_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_gy_batch_t val)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b084      	sub	sp, #16
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	460b      	mov	r3, r1
 8003e64:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8003e66:	f107 0208 	add.w	r2, r7, #8
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	2109      	movs	r1, #9
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff fc62 	bl	8003738 <lsm6dsv16x_read_reg>
 8003e74:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10f      	bne.n	8003e9c <lsm6dsv16x_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val & 0x0Fu;
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	7a3b      	ldrb	r3, [r7, #8]
 8003e86:	f362 1307 	bfi	r3, r2, #4, #4
 8003e8a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8003e8c:	f107 0208 	add.w	r2, r7, #8
 8003e90:	2301      	movs	r3, #1
 8003e92:	2109      	movs	r1, #9
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff fc67 	bl	8003768 <lsm6dsv16x_write_reg>
 8003e9a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b084      	sub	sp, #16
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	460b      	mov	r3, r1
 8003eb0:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8003eb2:	f107 0208 	add.w	r2, r7, #8
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	210a      	movs	r1, #10
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7ff fc3c 	bl	8003738 <lsm6dsv16x_read_reg>
 8003ec0:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10f      	bne.n	8003ee8 <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	7a3b      	ldrb	r3, [r7, #8]
 8003ed2:	f362 0302 	bfi	r3, r2, #0, #3
 8003ed6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8003ed8:	f107 0208 	add.w	r2, r7, #8
 8003edc:	2301      	movs	r3, #1
 8003ede:	210a      	movs	r1, #10
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7ff fc41 	bl	8003768 <lsm6dsv16x_write_reg>
 8003ee6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <lsm6dsv16x_ui_i2c_i3c_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ui_i2c_i3c_mode_set(stmdev_ctx_t *ctx,
                                       lsm6dsv16x_ui_i2c_i3c_mode_t val)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b084      	sub	sp, #16
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	460b      	mov	r3, r1
 8003efc:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_if_cfg_t if_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 8003efe:	f107 0208 	add.w	r2, r7, #8
 8003f02:	2301      	movs	r3, #1
 8003f04:	2103      	movs	r1, #3
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff fc16 	bl	8003738 <lsm6dsv16x_read_reg>
 8003f0c:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10f      	bne.n	8003f34 <lsm6dsv16x_ui_i2c_i3c_mode_set+0x42>
  {
    if_cfg.i2c_i3c_disable = (uint8_t)val & 0x1U;
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	7a3b      	ldrb	r3, [r7, #8]
 8003f1e:	f362 0300 	bfi	r3, r2, #0, #1
 8003f22:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 8003f24:	f107 0208 	add.w	r2, r7, #8
 8003f28:	2301      	movs	r3, #1
 8003f2a:	2103      	movs	r1, #3
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff fc1b 	bl	8003768 <lsm6dsv16x_write_reg>
 8003f32:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003f34:	68fb      	ldr	r3, [r7, #12]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <acc_write>:
#include "global_variables.h"
#include "peripherals.h"

/* -------------SCRITTURA ACCELEROMETRO-------------*/
int32_t acc_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	60f8      	str	r0, [r7, #12]
 8003f46:	607a      	str	r2, [r7, #4]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	72fb      	strb	r3, [r7, #11]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8003f52:	2200      	movs	r2, #0
 8003f54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f5c:	f00a f8b2 	bl	800e0c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8003f60:	f107 010b 	add.w	r1, r7, #11
 8003f64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f68:	2201      	movs	r2, #1
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f00d fb33 	bl	80115d6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 8003f70:	893a      	ldrh	r2, [r7, #8]
 8003f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f00d fb2c 	bl	80115d6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f88:	f00a f89c 	bl	800e0c4 <HAL_GPIO_WritePin>
	return 0;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <acc_read>:

/* -------------LETTURA ACCELEROMETRO-------------*/
int32_t acc_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	72fb      	strb	r3, [r7, #11]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	813b      	strh	r3, [r7, #8]
	reg |= 0x80;
 8003faa:	7afb      	ldrb	r3, [r7, #11]
 8003fac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fbe:	f00a f881 	bl	800e0c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8003fc2:	f107 010b 	add.w	r1, r7, #11
 8003fc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fca:	2201      	movs	r2, #1
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f00d fb02 	bl	80115d6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(handle, bufp, len, 1000);
 8003fd2:	893a      	ldrh	r2, [r7, #8]
 8003fd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f00d fc71 	bl	80118c2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fe6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fea:	f00a f86b 	bl	800e0c4 <HAL_GPIO_WritePin>
	return 0;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003ffc:	f3bf 8f4f 	dsb	sy
}
 8004000:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004002:	4b06      	ldr	r3, [pc, #24]	@ (800401c <__NVIC_SystemReset+0x24>)
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800400a:	4904      	ldr	r1, [pc, #16]	@ (800401c <__NVIC_SystemReset+0x24>)
 800400c:	4b04      	ldr	r3, [pc, #16]	@ (8004020 <__NVIC_SystemReset+0x28>)
 800400e:	4313      	orrs	r3, r2
 8004010:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004012:	f3bf 8f4f 	dsb	sy
}
 8004016:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004018:	bf00      	nop
 800401a:	e7fd      	b.n	8004018 <__NVIC_SystemReset+0x20>
 800401c:	e000ed00 	.word	0xe000ed00
 8004020:	05fa0004 	.word	0x05fa0004

08004024 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8004024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004026:	b093      	sub	sp, #76	@ 0x4c
 8004028:	af0c      	add	r7, sp, #48	@ 0x30
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800402a:	f006 fe04 	bl	800ac36 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800402e:	f000 fafd 	bl	800462c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004032:	f000 ffd1 	bl	8004fd8 <MX_GPIO_Init>
	MX_DMA_Init();
 8004036:	f000 ffa1 	bl	8004f7c <MX_DMA_Init>
	MX_QUADSPI_Init();
 800403a:	f000 fc23 	bl	8004884 <MX_QUADSPI_Init>
	MX_SPI2_Init();
 800403e:	f000 fcd9 	bl	80049f4 <MX_SPI2_Init>
	MX_USART1_UART_Init();
 8004042:	f000 ff6b 	bl	8004f1c <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8004046:	f000 fb43 	bl	80046d0 <MX_ADC1_Init>
	MX_I2C3_Init();
 800404a:	f000 fbdb 	bl	8004804 <MX_I2C3_Init>
	MX_TIM2_Init();
 800404e:	f000 fdf5 	bl	8004c3c <MX_TIM2_Init>
	MX_UART4_Init();
 8004052:	f000 ff33 	bl	8004ebc <MX_UART4_Init>
	MX_TIM1_Init();
 8004056:	f000 fd49 	bl	8004aec <MX_TIM1_Init>
	MX_CRC_Init();
 800405a:	f000 fbb1 	bl	80047c0 <MX_CRC_Init>
	MX_TIM4_Init();
 800405e:	f000 feb9 	bl	8004dd4 <MX_TIM4_Init>
	MX_RTC_Init();
 8004062:	f000 fc35 	bl	80048d0 <MX_RTC_Init>
	MX_SPI3_Init();
 8004066:	f000 fd03 	bl	8004a70 <MX_SPI3_Init>
	MX_TIM3_Init();
 800406a:	f000 fe3b 	bl	8004ce4 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	System_Init();
 800406e:	f7fe ffe1 	bl	8003034 <System_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		switch(state)
 8004072:	4bb2      	ldr	r3, [pc, #712]	@ (800433c <main+0x318>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b03      	cmp	r3, #3
 8004078:	f200 82ac 	bhi.w	80045d4 <main+0x5b0>
 800407c:	a201      	add	r2, pc, #4	@ (adr r2, 8004084 <main+0x60>)
 800407e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004082:	bf00      	nop
 8004084:	08004095 	.word	0x08004095
 8004088:	080041b7 	.word	0x080041b7
 800408c:	080041cd 	.word	0x080041cd
 8004090:	080044ab 	.word	0x080044ab
		{
		case IDLE:
			if(flags.MQTT_Message_Rx)
 8004094:	4baa      	ldr	r3, [pc, #680]	@ (8004340 <main+0x31c>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d068      	beq.n	8004174 <main+0x150>
			{
				LED_Start(RED_LED, FAST, HIGH);
 80040a2:	2205      	movs	r2, #5
 80040a4:	2100      	movs	r1, #0
 80040a6:	2004      	movs	r0, #4
 80040a8:	f7ff fa46 	bl	8003538 <LED_Start>
				SIM_Parse_Command();
 80040ac:	f7fd fd74 	bl	8001b98 <SIM_Parse_Command>
				flags.MQTT_Message_Rx = 0;
 80040b0:	4aa3      	ldr	r2, [pc, #652]	@ (8004340 <main+0x31c>)
 80040b2:	7813      	ldrb	r3, [r2, #0]
 80040b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040b8:	7013      	strb	r3, [r2, #0]
				if(flags.CMD.Start_Meas)
 80040ba:	4ba1      	ldr	r3, [pc, #644]	@ (8004340 <main+0x31c>)
 80040bc:	789b      	ldrb	r3, [r3, #2]
 80040be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <main+0xb6>
				{
					state = MEASURE_INIT_STATE;
 80040c8:	4b9c      	ldr	r3, [pc, #624]	@ (800433c <main+0x318>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	701a      	strb	r2, [r3, #0]
					flags.CMD.Start_Meas = 0;
 80040ce:	4a9c      	ldr	r2, [pc, #624]	@ (8004340 <main+0x31c>)
 80040d0:	7893      	ldrb	r3, [r2, #2]
 80040d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040d6:	7093      	strb	r3, [r2, #2]
 80040d8:	e048      	b.n	800416c <main+0x148>
				}
				else if(flags.CMD.Set_Config)
 80040da:	4b99      	ldr	r3, [pc, #612]	@ (8004340 <main+0x31c>)
 80040dc:	789b      	ldrb	r3, [r3, #2]
 80040de:	f003 0310 	and.w	r3, r3, #16
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d007      	beq.n	80040f8 <main+0xd4>
				{
					Apply_Config();
 80040e8:	f002 fa6a 	bl	80065c0 <Apply_Config>
					flags.CMD.Set_Config = 0;
 80040ec:	4a94      	ldr	r2, [pc, #592]	@ (8004340 <main+0x31c>)
 80040ee:	7893      	ldrb	r3, [r2, #2]
 80040f0:	f023 0310 	bic.w	r3, r3, #16
 80040f4:	7093      	strb	r3, [r2, #2]
 80040f6:	e039      	b.n	800416c <main+0x148>
				}
				else if(flags.CMD.Get_Config)
 80040f8:	4b91      	ldr	r3, [pc, #580]	@ (8004340 <main+0x31c>)
 80040fa:	789b      	ldrb	r3, [r3, #2]
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d007      	beq.n	8004116 <main+0xf2>
				{
					Get_Config();
 8004106:	f002 fbf7 	bl	80068f8 <Get_Config>
					flags.CMD.Get_Config = 0;
 800410a:	4a8d      	ldr	r2, [pc, #564]	@ (8004340 <main+0x31c>)
 800410c:	7893      	ldrb	r3, [r2, #2]
 800410e:	f023 0320 	bic.w	r3, r3, #32
 8004112:	7093      	strb	r3, [r2, #2]
 8004114:	e02a      	b.n	800416c <main+0x148>
				}
				else if(flags.CMD.Start_OTA)
 8004116:	4b8a      	ldr	r3, [pc, #552]	@ (8004340 <main+0x31c>)
 8004118:	789b      	ldrb	r3, [r3, #2]
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d015      	beq.n	8004150 <main+0x12c>
				{
					LED_Stop(GRN_LED);
 8004124:	2008      	movs	r0, #8
 8004126:	f7ff faf9 	bl	800371c <LED_Stop>
					LED_Start(ORG_LED, VERY_SLOW, FULL);
 800412a:	2204      	movs	r2, #4
 800412c:	2103      	movs	r1, #3
 800412e:	2000      	movs	r0, #0
 8004130:	f7ff fa02 	bl	8003538 <LED_Start>
					LED_Start(RED_LED, FAST, HIGH);
 8004134:	2205      	movs	r2, #5
 8004136:	2100      	movs	r1, #0
 8004138:	2004      	movs	r0, #4
 800413a:	f7ff f9fd 	bl	8003538 <LED_Start>
					state = OTA_STATE;
 800413e:	4b7f      	ldr	r3, [pc, #508]	@ (800433c <main+0x318>)
 8004140:	2203      	movs	r2, #3
 8004142:	701a      	strb	r2, [r3, #0]
					flags.CMD.Start_OTA = 0;
 8004144:	4a7e      	ldr	r2, [pc, #504]	@ (8004340 <main+0x31c>)
 8004146:	7893      	ldrb	r3, [r2, #2]
 8004148:	f023 0304 	bic.w	r3, r3, #4
 800414c:	7093      	strb	r3, [r2, #2]
 800414e:	e00d      	b.n	800416c <main+0x148>
				}
				else if(flags.CMD.Ping)
 8004150:	4b7b      	ldr	r3, [pc, #492]	@ (8004340 <main+0x31c>)
 8004152:	789b      	ldrb	r3, [r3, #2]
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d006      	beq.n	800416c <main+0x148>
				{
					SIM_Send_Infos();
 800415e:	f7fd ffe7 	bl	8002130 <SIM_Send_Infos>
					flags.CMD.Ping = 0;
 8004162:	4a77      	ldr	r2, [pc, #476]	@ (8004340 <main+0x31c>)
 8004164:	7893      	ldrb	r3, [r2, #2]
 8004166:	f023 0308 	bic.w	r3, r3, #8
 800416a:	7093      	strb	r3, [r2, #2]
				}
				LED_Stop(RED_LED);
 800416c:	2004      	movs	r0, #4
 800416e:	f7ff fad5 	bl	800371c <LED_Stop>
				LED_Start(ORG_LED, FAST, HALF);
				SIM_Check_Connection();
				sys.SIM_Connection_Status = HAL_GetTick();
				LED_Stop(ORG_LED);
			}
			break;
 8004172:	e231      	b.n	80045d8 <main+0x5b4>
			else if(HAL_GetTick() - sys.SIM_Connection_Status > config.connection_timeout)                  // Controllo connessione MQTT e TCP ogni 60 secondi
 8004174:	f006 fdc8 	bl	800ad08 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	4b72      	ldr	r3, [pc, #456]	@ (8004344 <main+0x320>)
 800417c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004180:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004184:	1ad2      	subs	r2, r2, r3
 8004186:	4b70      	ldr	r3, [pc, #448]	@ (8004348 <main+0x324>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	429a      	cmp	r2, r3
 800418c:	f240 8224 	bls.w	80045d8 <main+0x5b4>
				LED_Start(ORG_LED, FAST, HALF);
 8004190:	2206      	movs	r2, #6
 8004192:	2100      	movs	r1, #0
 8004194:	2000      	movs	r0, #0
 8004196:	f7ff f9cf 	bl	8003538 <LED_Start>
				SIM_Check_Connection();
 800419a:	f7fe f8d3 	bl	8002344 <SIM_Check_Connection>
				sys.SIM_Connection_Status = HAL_GetTick();
 800419e:	f006 fdb3 	bl	800ad08 <HAL_GetTick>
 80041a2:	4603      	mov	r3, r0
 80041a4:	4a67      	ldr	r2, [pc, #412]	@ (8004344 <main+0x320>)
 80041a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80041aa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
				LED_Stop(ORG_LED);
 80041ae:	2000      	movs	r0, #0
 80041b0:	f7ff fab4 	bl	800371c <LED_Stop>
			break;
 80041b4:	e210      	b.n	80045d8 <main+0x5b4>

		case MEASURE_INIT_STATE:
			Start_Measure();
 80041b6:	f001 fd13 	bl	8005be0 <Start_Measure>
			LED_Start(GRN_LED, VERY_SLOW, FULL);
 80041ba:	2204      	movs	r2, #4
 80041bc:	2103      	movs	r1, #3
 80041be:	2008      	movs	r0, #8
 80041c0:	f7ff f9ba 	bl	8003538 <LED_Start>
			state = MEASURING_STATE;
 80041c4:	4b5d      	ldr	r3, [pc, #372]	@ (800433c <main+0x318>)
 80041c6:	2202      	movs	r2, #2
 80041c8:	701a      	strb	r2, [r3, #0]
			break;
 80041ca:	e208      	b.n	80045de <main+0x5ba>

		case MEASURING_STATE:
			if(flags.ADC_Complete && flags.ACC_Complete)
 80041cc:	4b5c      	ldr	r3, [pc, #368]	@ (8004340 <main+0x31c>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 8200 	beq.w	80045dc <main+0x5b8>
 80041dc:	4b58      	ldr	r3, [pc, #352]	@ (8004340 <main+0x31c>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 81f8 	beq.w	80045dc <main+0x5b8>
			{
				Save_Data();
 80041ec:	f001 fa4a 	bl	8005684 <Save_Data>
				if(flags.BC_Interrupt)
 80041f0:	4b53      	ldr	r3, [pc, #332]	@ (8004340 <main+0x31c>)
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d010      	beq.n	8004220 <main+0x1fc>
				{
					BC_Read_Flags(&sys.BC_Flags);
 80041fe:	4853      	ldr	r0, [pc, #332]	@ (800434c <main+0x328>)
 8004200:	f7fe f9de 	bl	80025c0 <BC_Read_Flags>
					BC_Manage_Interrupts(sys.BC_Flags);
 8004204:	4b4f      	ldr	r3, [pc, #316]	@ (8004344 <main+0x320>)
 8004206:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800420a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800420e:	4610      	mov	r0, r2
 8004210:	4619      	mov	r1, r3
 8004212:	f7fe fa83 	bl	800271c <BC_Manage_Interrupts>
					flags.BC_Interrupt = 0;
 8004216:	4a4a      	ldr	r2, [pc, #296]	@ (8004340 <main+0x31c>)
 8004218:	7813      	ldrb	r3, [r2, #0]
 800421a:	f023 0320 	bic.w	r3, r3, #32
 800421e:	7013      	strb	r3, [r2, #0]
				}
				if(flags.MQTT_Message_Rx)
 8004220:	4b47      	ldr	r3, [pc, #284]	@ (8004340 <main+0x31c>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00b      	beq.n	8004246 <main+0x222>
				{
					SIM_Parse_Command();
 800422e:	f7fd fcb3 	bl	8001b98 <SIM_Parse_Command>
					flags.SIM_isConnected = 1;
 8004232:	4a43      	ldr	r2, [pc, #268]	@ (8004340 <main+0x31c>)
 8004234:	7853      	ldrb	r3, [r2, #1]
 8004236:	f043 0308 	orr.w	r3, r3, #8
 800423a:	7053      	strb	r3, [r2, #1]
					flags.MQTT_Message_Rx = 0;
 800423c:	4a40      	ldr	r2, [pc, #256]	@ (8004340 <main+0x31c>)
 800423e:	7813      	ldrb	r3, [r2, #0]
 8004240:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004244:	7013      	strb	r3, [r2, #0]
				}
				if(flags.CMD.Data_Request)
 8004246:	4b3e      	ldr	r3, [pc, #248]	@ (8004340 <main+0x31c>)
 8004248:	789b      	ldrb	r3, [r3, #2]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d056      	beq.n	8004302 <main+0x2de>
				{
					LED_Start(ORG_LED, FAST, HIGH);
 8004254:	2205      	movs	r2, #5
 8004256:	2100      	movs	r1, #0
 8004258:	2000      	movs	r0, #0
 800425a:	f7ff f96d 	bl	8003538 <LED_Start>
					sprintf(MQTT_Logging, "%u:%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", config.device_id, Last_Pressure, Last_Volume, Last_Acceleration.x, Last_Acceleration.y, Last_Acceleration.z, Vbatt, Supply.i1, Supply.i2, Supply.i3, Supply.v1, Supply.v2, Supply.v3, Temperature);
 800425e:	4b3a      	ldr	r3, [pc, #232]	@ (8004348 <main+0x324>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	469c      	mov	ip, r3
 8004264:	4b3a      	ldr	r3, [pc, #232]	@ (8004350 <main+0x32c>)
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	469e      	mov	lr, r3
 800426a:	4b3a      	ldr	r3, [pc, #232]	@ (8004354 <main+0x330>)
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	4b39      	ldr	r3, [pc, #228]	@ (8004358 <main+0x334>)
 8004272:	885b      	ldrh	r3, [r3, #2]
 8004274:	4619      	mov	r1, r3
 8004276:	4b38      	ldr	r3, [pc, #224]	@ (8004358 <main+0x334>)
 8004278:	889b      	ldrh	r3, [r3, #4]
 800427a:	4618      	mov	r0, r3
 800427c:	4b36      	ldr	r3, [pc, #216]	@ (8004358 <main+0x334>)
 800427e:	88db      	ldrh	r3, [r3, #6]
 8004280:	461c      	mov	r4, r3
 8004282:	4b36      	ldr	r3, [pc, #216]	@ (800435c <main+0x338>)
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	461d      	mov	r5, r3
 8004288:	4b35      	ldr	r3, [pc, #212]	@ (8004360 <main+0x33c>)
 800428a:	88db      	ldrh	r3, [r3, #6]
 800428c:	461e      	mov	r6, r3
 800428e:	4b34      	ldr	r3, [pc, #208]	@ (8004360 <main+0x33c>)
 8004290:	891b      	ldrh	r3, [r3, #8]
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	4b32      	ldr	r3, [pc, #200]	@ (8004360 <main+0x33c>)
 8004296:	895b      	ldrh	r3, [r3, #10]
 8004298:	613b      	str	r3, [r7, #16]
 800429a:	4b31      	ldr	r3, [pc, #196]	@ (8004360 <main+0x33c>)
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	4b2f      	ldr	r3, [pc, #188]	@ (8004360 <main+0x33c>)
 80042a2:	885b      	ldrh	r3, [r3, #2]
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	4b2e      	ldr	r3, [pc, #184]	@ (8004360 <main+0x33c>)
 80042a8:	889b      	ldrh	r3, [r3, #4]
 80042aa:	607b      	str	r3, [r7, #4]
 80042ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004364 <main+0x340>)
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	9308      	str	r3, [sp, #32]
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	9307      	str	r3, [sp, #28]
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	9306      	str	r3, [sp, #24]
 80042c6:	9605      	str	r6, [sp, #20]
 80042c8:	9504      	str	r5, [sp, #16]
 80042ca:	9403      	str	r4, [sp, #12]
 80042cc:	9002      	str	r0, [sp, #8]
 80042ce:	9101      	str	r1, [sp, #4]
 80042d0:	9200      	str	r2, [sp, #0]
 80042d2:	4673      	mov	r3, lr
 80042d4:	4662      	mov	r2, ip
 80042d6:	4924      	ldr	r1, [pc, #144]	@ (8004368 <main+0x344>)
 80042d8:	4824      	ldr	r0, [pc, #144]	@ (800436c <main+0x348>)
 80042da:	f011 fd65 	bl	8015da8 <siprintf>
					SIM_publish_MQTT_Message_DMA(NULL, MQTT_Logging);
 80042de:	4923      	ldr	r1, [pc, #140]	@ (800436c <main+0x348>)
 80042e0:	2000      	movs	r0, #0
 80042e2:	f7fd fe47 	bl	8001f74 <SIM_publish_MQTT_Message_DMA>
					sys.SIM_Prompt_Status = HAL_GetTick();
 80042e6:	f006 fd0f 	bl	800ad08 <HAL_GetTick>
 80042ea:	4603      	mov	r3, r0
 80042ec:	4a15      	ldr	r2, [pc, #84]	@ (8004344 <main+0x320>)
 80042ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80042f2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
					flags.CMD.Data_Request = 0;
 80042f6:	4a12      	ldr	r2, [pc, #72]	@ (8004340 <main+0x31c>)
 80042f8:	7893      	ldrb	r3, [r2, #2]
 80042fa:	f023 0301 	bic.w	r3, r3, #1
 80042fe:	7093      	strb	r3, [r2, #2]
 8004300:	e07c      	b.n	80043fc <main+0x3d8>
				}
				else if(flags.CMD.Idle)
 8004302:	4b0f      	ldr	r3, [pc, #60]	@ (8004340 <main+0x31c>)
 8004304:	789b      	ldrb	r3, [r3, #2]
 8004306:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	d02f      	beq.n	8004370 <main+0x34c>
				{
					LED_Stop(ORG_LED);
 8004310:	2000      	movs	r0, #0
 8004312:	f7ff fa03 	bl	800371c <LED_Stop>
					LED_Stop(RED_LED);
 8004316:	2004      	movs	r0, #4
 8004318:	f7ff fa00 	bl	800371c <LED_Stop>
					LED_Start(GRN_LED, MEDIUM, HALF);
 800431c:	2206      	movs	r2, #6
 800431e:	2101      	movs	r1, #1
 8004320:	2008      	movs	r0, #8
 8004322:	f7ff f909 	bl	8003538 <LED_Start>
					state = IDLE;
 8004326:	4b05      	ldr	r3, [pc, #20]	@ (800433c <main+0x318>)
 8004328:	2200      	movs	r2, #0
 800432a:	701a      	strb	r2, [r3, #0]
					Stop_Measure();
 800432c:	f001 fd16 	bl	8005d5c <Stop_Measure>
					flags.CMD.Idle = 0;
 8004330:	4a03      	ldr	r2, [pc, #12]	@ (8004340 <main+0x31c>)
 8004332:	7893      	ldrb	r3, [r2, #2]
 8004334:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004338:	7093      	strb	r3, [r2, #2]
 800433a:	e05f      	b.n	80043fc <main+0x3d8>
 800433c:	2000073c 	.word	0x2000073c
 8004340:	20001c68 	.word	0x20001c68
 8004344:	20000740 	.word	0x20000740
 8004348:	20001c6c 	.word	0x20001c6c
 800434c:	20001778 	.word	0x20001778
 8004350:	20004714 	.word	0x20004714
 8004354:	20004716 	.word	0x20004716
 8004358:	20004718 	.word	0x20004718
 800435c:	20004722 	.word	0x20004722
 8004360:	20003e44 	.word	0x20003e44
 8004364:	20004720 	.word	0x20004720
 8004368:	0801736c 	.word	0x0801736c
 800436c:	20004724 	.word	0x20004724
				}
				else if(flags.CMD.Measure_Request)
 8004370:	4b9b      	ldr	r3, [pc, #620]	@ (80045e0 <main+0x5bc>)
 8004372:	789b      	ldrb	r3, [r3, #2]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d03e      	beq.n	80043fc <main+0x3d8>
				{
					if(!flags.TCP_isSending)
 800437e:	4b98      	ldr	r3, [pc, #608]	@ (80045e0 <main+0x5bc>)
 8004380:	785b      	ldrb	r3, [r3, #1]
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d137      	bne.n	80043fc <main+0x3d8>
					{
						Send_Measure_Addr = Send_Measure_Chunk(sys.RAM_Buffer_Base_tosend, sys.Inactive_RAM_Len, Send_Measure_Addr);
 800438c:	4b95      	ldr	r3, [pc, #596]	@ (80045e4 <main+0x5c0>)
 800438e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004392:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004396:	4a93      	ldr	r2, [pc, #588]	@ (80045e4 <main+0x5c0>)
 8004398:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800439c:	f8d2 10d0 	ldr.w	r1, [r2, #208]	@ 0xd0
 80043a0:	4a91      	ldr	r2, [pc, #580]	@ (80045e8 <main+0x5c4>)
 80043a2:	6812      	ldr	r2, [r2, #0]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f001 fdbb 	bl	8005f20 <Send_Measure_Chunk>
 80043aa:	4603      	mov	r3, r0
 80043ac:	4a8e      	ldr	r2, [pc, #568]	@ (80045e8 <main+0x5c4>)
 80043ae:	6013      	str	r3, [r2, #0]
						if(flags.TCP_ReadytoSend)
 80043b0:	4b8b      	ldr	r3, [pc, #556]	@ (80045e0 <main+0x5bc>)
 80043b2:	785b      	ldrb	r3, [r3, #1]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d01e      	beq.n	80043fc <main+0x3d8>
						{
							SIM_Send_Command_DMA(MQTT_Logging);
 80043be:	488b      	ldr	r0, [pc, #556]	@ (80045ec <main+0x5c8>)
 80043c0:	f7fd fb4c 	bl	8001a5c <SIM_Send_Command_DMA>
							flags.TCP_isSending = 1;
 80043c4:	4a86      	ldr	r2, [pc, #536]	@ (80045e0 <main+0x5bc>)
 80043c6:	7853      	ldrb	r3, [r2, #1]
 80043c8:	f043 0304 	orr.w	r3, r3, #4
 80043cc:	7053      	strb	r3, [r2, #1]
							flags.TCP_ReadytoSend = 0;
 80043ce:	4a84      	ldr	r2, [pc, #528]	@ (80045e0 <main+0x5bc>)
 80043d0:	7853      	ldrb	r3, [r2, #1]
 80043d2:	f023 0302 	bic.w	r3, r3, #2
 80043d6:	7053      	strb	r3, [r2, #1]
							if (Send_Measure_Addr == 0)
 80043d8:	4b83      	ldr	r3, [pc, #524]	@ (80045e8 <main+0x5c4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10d      	bne.n	80043fc <main+0x3d8>
							{
								memset(tcp_chunk, 0, 1460);
 80043e0:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80043e4:	2100      	movs	r1, #0
 80043e6:	4882      	ldr	r0, [pc, #520]	@ (80045f0 <main+0x5cc>)
 80043e8:	f011 fd3e 	bl	8015e68 <memset>
								LED_Stop(RED_LED);
 80043ec:	2004      	movs	r0, #4
 80043ee:	f7ff f995 	bl	800371c <LED_Stop>
								flags.CMD.Measure_Request = 0;
 80043f2:	4a7b      	ldr	r2, [pc, #492]	@ (80045e0 <main+0x5bc>)
 80043f4:	7893      	ldrb	r3, [r2, #2]
 80043f6:	f023 0302 	bic.w	r3, r3, #2
 80043fa:	7093      	strb	r3, [r2, #2]
							}
						}
					}
				}
				if(flags.MQTT_ReadytoSend)
 80043fc:	4b78      	ldr	r3, [pc, #480]	@ (80045e0 <main+0x5bc>)
 80043fe:	785b      	ldrb	r3, [r3, #1]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <main+0x3fc>
				{
					SIM_Send_Command_DMA(MQTT_Logging);
 800440a:	4878      	ldr	r0, [pc, #480]	@ (80045ec <main+0x5c8>)
 800440c:	f7fd fb26 	bl	8001a5c <SIM_Send_Command_DMA>
					LED_Stop(ORG_LED);
 8004410:	2000      	movs	r0, #0
 8004412:	f7ff f983 	bl	800371c <LED_Stop>
					flags.MQTT_ReadytoSend = 0;
 8004416:	4a72      	ldr	r2, [pc, #456]	@ (80045e0 <main+0x5bc>)
 8004418:	7853      	ldrb	r3, [r2, #1]
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	7053      	strb	r3, [r2, #1]
				}
				if(sys.SIM_Prompt_Status > 0 && (HAL_GetTick() - sys.SIM_Prompt_Status) > SIM_PROMPT_TIMEOUT_MS)
 8004420:	4b70      	ldr	r3, [pc, #448]	@ (80045e4 <main+0x5c0>)
 8004422:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004426:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800442a:	2b00      	cmp	r3, #0
 800442c:	d016      	beq.n	800445c <main+0x438>
 800442e:	f006 fc6b 	bl	800ad08 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	4b6b      	ldr	r3, [pc, #428]	@ (80045e4 <main+0x5c0>)
 8004436:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800443a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004444:	4293      	cmp	r3, r2
 8004446:	d909      	bls.n	800445c <main+0x438>
				{
					SIM_Send_Command_DMA("AT+SMCONN\r");
 8004448:	486a      	ldr	r0, [pc, #424]	@ (80045f4 <main+0x5d0>)
 800444a:	f7fd fb07 	bl	8001a5c <SIM_Send_Command_DMA>
					sys.SIM_Prompt_Status = 0;
 800444e:	4b65      	ldr	r3, [pc, #404]	@ (80045e4 <main+0x5c0>)
 8004450:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004454:	461a      	mov	r2, r3
 8004456:	2300      	movs	r3, #0
 8004458:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
				}
				if(HAL_GetTick() - sys.SIM_Connection_Status > config.connection_timeout)
 800445c:	f006 fc54 	bl	800ad08 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	4b60      	ldr	r3, [pc, #384]	@ (80045e4 <main+0x5c0>)
 8004464:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004468:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800446c:	1ad2      	subs	r2, r2, r3
 800446e:	4b62      	ldr	r3, [pc, #392]	@ (80045f8 <main+0x5d4>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	429a      	cmp	r2, r3
 8004474:	f240 80b2 	bls.w	80045dc <main+0x5b8>
				{
					sys.SIM_Connection_Status = HAL_GetTick();
 8004478:	f006 fc46 	bl	800ad08 <HAL_GetTick>
 800447c:	4603      	mov	r3, r0
 800447e:	4a59      	ldr	r2, [pc, #356]	@ (80045e4 <main+0x5c0>)
 8004480:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004484:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
					if(flags.SIM_isConnected)
 8004488:	4b55      	ldr	r3, [pc, #340]	@ (80045e0 <main+0x5bc>)
 800448a:	785b      	ldrb	r3, [r3, #1]
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d005      	beq.n	80044a2 <main+0x47e>
					{
						flags.SIM_isConnected = 0;
 8004496:	4a52      	ldr	r2, [pc, #328]	@ (80045e0 <main+0x5bc>)
 8004498:	7853      	ldrb	r3, [r2, #1]
 800449a:	f023 0308 	bic.w	r3, r3, #8
 800449e:	7053      	strb	r3, [r2, #1]
					{
						state = IDLE;
					}
				}
			}
			break;
 80044a0:	e09c      	b.n	80045dc <main+0x5b8>
						state = IDLE;
 80044a2:	4b56      	ldr	r3, [pc, #344]	@ (80045fc <main+0x5d8>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	701a      	strb	r2, [r3, #0]
			break;
 80044a8:	e098      	b.n	80045dc <main+0x5b8>

		case OTA_STATE:
			if(OTA_Init() == HAL_OK)
 80044aa:	f000 fe91 	bl	80051d0 <OTA_Init>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d176      	bne.n	80045a2 <main+0x57e>
			{
				HAL_UART_DMAStop(SIM_UART);
 80044b4:	4852      	ldr	r0, [pc, #328]	@ (8004600 <main+0x5dc>)
 80044b6:	f010 fafd 	bl	8014ab4 <HAL_UART_DMAStop>
				HAL_Delay(100);
 80044ba:	2064      	movs	r0, #100	@ 0x64
 80044bc:	f006 fc30 	bl	800ad20 <HAL_Delay>
				SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_READY");
 80044c0:	4950      	ldr	r1, [pc, #320]	@ (8004604 <main+0x5e0>)
 80044c2:	4851      	ldr	r0, [pc, #324]	@ (8004608 <main+0x5e4>)
 80044c4:	f7fd fda0 	bl	8002008 <SIM_publish_MQTT_Message>
				if(OTA_Receive() == HAL_OK)
 80044c8:	f000 feae 	bl	8005228 <OTA_Receive>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d14e      	bne.n	8004570 <main+0x54c>
				{
					SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_RECEIVED");
 80044d2:	494e      	ldr	r1, [pc, #312]	@ (800460c <main+0x5e8>)
 80044d4:	484c      	ldr	r0, [pc, #304]	@ (8004608 <main+0x5e4>)
 80044d6:	f7fd fd97 	bl	8002008 <SIM_publish_MQTT_Message>
					if(OTA_CRC_Check() == HAL_OK)
 80044da:	f000 ff21 	bl	8005320 <OTA_CRC_Check>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d109      	bne.n	80044f8 <main+0x4d4>
					{
						SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_CRC_OK");
 80044e4:	494a      	ldr	r1, [pc, #296]	@ (8004610 <main+0x5ec>)
 80044e6:	4848      	ldr	r0, [pc, #288]	@ (8004608 <main+0x5e4>)
 80044e8:	f7fd fd8e 	bl	8002008 <SIM_publish_MQTT_Message>
						LED_Start(GRN_LED, MEDIUM, HALF);
						state = IDLE;
						break;
					}

					if(OTA_Apply() == HAL_OK)
 80044ec:	f000 ffcc 	bl	8005488 <OTA_Apply>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d123      	bne.n	800453e <main+0x51a>
 80044f6:	e018      	b.n	800452a <main+0x506>
						SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_CRC_ERROR");
 80044f8:	4946      	ldr	r1, [pc, #280]	@ (8004614 <main+0x5f0>)
 80044fa:	4843      	ldr	r0, [pc, #268]	@ (8004608 <main+0x5e4>)
 80044fc:	f7fd fd84 	bl	8002008 <SIM_publish_MQTT_Message>
						HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8004500:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004504:	4944      	ldr	r1, [pc, #272]	@ (8004618 <main+0x5f4>)
 8004506:	483e      	ldr	r0, [pc, #248]	@ (8004600 <main+0x5dc>)
 8004508:	f011 fb70 	bl	8015bec <HAL_UARTEx_ReceiveToIdle_DMA>
						LED_Stop(ORG_LED);
 800450c:	2000      	movs	r0, #0
 800450e:	f7ff f905 	bl	800371c <LED_Stop>
						LED_Stop(RED_LED);
 8004512:	2004      	movs	r0, #4
 8004514:	f7ff f902 	bl	800371c <LED_Stop>
						LED_Start(GRN_LED, MEDIUM, HALF);
 8004518:	2206      	movs	r2, #6
 800451a:	2101      	movs	r1, #1
 800451c:	2008      	movs	r0, #8
 800451e:	f7ff f80b 	bl	8003538 <LED_Start>
						state = IDLE;
 8004522:	4b36      	ldr	r3, [pc, #216]	@ (80045fc <main+0x5d8>)
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
						break;
 8004528:	e059      	b.n	80045de <main+0x5ba>
					{
						SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_SUCCESS");
 800452a:	493c      	ldr	r1, [pc, #240]	@ (800461c <main+0x5f8>)
 800452c:	4836      	ldr	r0, [pc, #216]	@ (8004608 <main+0x5e4>)
 800452e:	f7fd fd6b 	bl	8002008 <SIM_publish_MQTT_Message>
						HAL_Delay(500);
 8004532:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004536:	f006 fbf3 	bl	800ad20 <HAL_Delay>
						NVIC_SystemReset();
 800453a:	f7ff fd5d 	bl	8003ff8 <__NVIC_SystemReset>
					}
					else
					{
						SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_APPLY_ERROR");
 800453e:	4938      	ldr	r1, [pc, #224]	@ (8004620 <main+0x5fc>)
 8004540:	4831      	ldr	r0, [pc, #196]	@ (8004608 <main+0x5e4>)
 8004542:	f7fd fd61 	bl	8002008 <SIM_publish_MQTT_Message>
						HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8004546:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800454a:	4933      	ldr	r1, [pc, #204]	@ (8004618 <main+0x5f4>)
 800454c:	482c      	ldr	r0, [pc, #176]	@ (8004600 <main+0x5dc>)
 800454e:	f011 fb4d 	bl	8015bec <HAL_UARTEx_ReceiveToIdle_DMA>
						LED_Stop(ORG_LED);
 8004552:	2000      	movs	r0, #0
 8004554:	f7ff f8e2 	bl	800371c <LED_Stop>
						LED_Stop(RED_LED);
 8004558:	2004      	movs	r0, #4
 800455a:	f7ff f8df 	bl	800371c <LED_Stop>
						LED_Start(GRN_LED, MEDIUM, HALF);
 800455e:	2206      	movs	r2, #6
 8004560:	2101      	movs	r1, #1
 8004562:	2008      	movs	r0, #8
 8004564:	f7fe ffe8 	bl	8003538 <LED_Start>
						state = IDLE;
 8004568:	4b24      	ldr	r3, [pc, #144]	@ (80045fc <main+0x5d8>)
 800456a:	2200      	movs	r2, #0
 800456c:	701a      	strb	r2, [r3, #0]
				LED_Stop(ORG_LED);
				LED_Stop(RED_LED);
				LED_Start(GRN_LED, MEDIUM, HALF);
				state = IDLE;
			}
			break;
 800456e:	e036      	b.n	80045de <main+0x5ba>
					SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_RECEIVE_ERROR");
 8004570:	492c      	ldr	r1, [pc, #176]	@ (8004624 <main+0x600>)
 8004572:	4825      	ldr	r0, [pc, #148]	@ (8004608 <main+0x5e4>)
 8004574:	f7fd fd48 	bl	8002008 <SIM_publish_MQTT_Message>
					HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8004578:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800457c:	4926      	ldr	r1, [pc, #152]	@ (8004618 <main+0x5f4>)
 800457e:	4820      	ldr	r0, [pc, #128]	@ (8004600 <main+0x5dc>)
 8004580:	f011 fb34 	bl	8015bec <HAL_UARTEx_ReceiveToIdle_DMA>
					LED_Stop(ORG_LED);
 8004584:	2000      	movs	r0, #0
 8004586:	f7ff f8c9 	bl	800371c <LED_Stop>
					LED_Stop(RED_LED);
 800458a:	2004      	movs	r0, #4
 800458c:	f7ff f8c6 	bl	800371c <LED_Stop>
					LED_Start(GRN_LED, MEDIUM, HALF);
 8004590:	2206      	movs	r2, #6
 8004592:	2101      	movs	r1, #1
 8004594:	2008      	movs	r0, #8
 8004596:	f7fe ffcf 	bl	8003538 <LED_Start>
					state = IDLE;
 800459a:	4b18      	ldr	r3, [pc, #96]	@ (80045fc <main+0x5d8>)
 800459c:	2200      	movs	r2, #0
 800459e:	701a      	strb	r2, [r3, #0]
			break;
 80045a0:	e01d      	b.n	80045de <main+0x5ba>
				SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_INIT_ERROR");
 80045a2:	4921      	ldr	r1, [pc, #132]	@ (8004628 <main+0x604>)
 80045a4:	4818      	ldr	r0, [pc, #96]	@ (8004608 <main+0x5e4>)
 80045a6:	f7fd fd2f 	bl	8002008 <SIM_publish_MQTT_Message>
				HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 80045aa:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80045ae:	491a      	ldr	r1, [pc, #104]	@ (8004618 <main+0x5f4>)
 80045b0:	4813      	ldr	r0, [pc, #76]	@ (8004600 <main+0x5dc>)
 80045b2:	f011 fb1b 	bl	8015bec <HAL_UARTEx_ReceiveToIdle_DMA>
				LED_Stop(ORG_LED);
 80045b6:	2000      	movs	r0, #0
 80045b8:	f7ff f8b0 	bl	800371c <LED_Stop>
				LED_Stop(RED_LED);
 80045bc:	2004      	movs	r0, #4
 80045be:	f7ff f8ad 	bl	800371c <LED_Stop>
				LED_Start(GRN_LED, MEDIUM, HALF);
 80045c2:	2206      	movs	r2, #6
 80045c4:	2101      	movs	r1, #1
 80045c6:	2008      	movs	r0, #8
 80045c8:	f7fe ffb6 	bl	8003538 <LED_Start>
				state = IDLE;
 80045cc:	4b0b      	ldr	r3, [pc, #44]	@ (80045fc <main+0x5d8>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	701a      	strb	r2, [r3, #0]
			break;
 80045d2:	e004      	b.n	80045de <main+0x5ba>

		default:
			break;
 80045d4:	bf00      	nop
 80045d6:	e54c      	b.n	8004072 <main+0x4e>
			break;
 80045d8:	bf00      	nop
 80045da:	e54a      	b.n	8004072 <main+0x4e>
			break;
 80045dc:	bf00      	nop
		switch(state)
 80045de:	e548      	b.n	8004072 <main+0x4e>
 80045e0:	20001c68 	.word	0x20001c68
 80045e4:	20000740 	.word	0x20000740
 80045e8:	20004ec8 	.word	0x20004ec8
 80045ec:	20004724 	.word	0x20004724
 80045f0:	20004ecc 	.word	0x20004ecc
 80045f4:	08017398 	.word	0x08017398
 80045f8:	20001c6c 	.word	0x20001c6c
 80045fc:	2000073c 	.word	0x2000073c
 8004600:	20000624 	.word	0x20000624
 8004604:	080173a4 	.word	0x080173a4
 8004608:	20001b3c 	.word	0x20001b3c
 800460c:	080173b0 	.word	0x080173b0
 8004610:	080173c0 	.word	0x080173c0
 8004614:	080173cc 	.word	0x080173cc
 8004618:	200054f4 	.word	0x200054f4
 800461c:	080173dc 	.word	0x080173dc
 8004620:	080173e8 	.word	0x080173e8
 8004624:	080173f8 	.word	0x080173f8
 8004628:	0801740c 	.word	0x0801740c

0800462c <SystemClock_Config>:
	/**
	 * @brief System Clock Configuration
	 * @retval None
	 */
	void SystemClock_Config(void)
	{
 800462c:	b580      	push	{r7, lr}
 800462e:	b096      	sub	sp, #88	@ 0x58
 8004630:	af00      	add	r7, sp, #0
		RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004632:	f107 0314 	add.w	r3, r7, #20
 8004636:	2244      	movs	r2, #68	@ 0x44
 8004638:	2100      	movs	r1, #0
 800463a:	4618      	mov	r0, r3
 800463c:	f011 fc14 	bl	8015e68 <memset>
		RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004640:	463b      	mov	r3, r7
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	605a      	str	r2, [r3, #4]
 8004648:	609a      	str	r2, [r3, #8]
 800464a:	60da      	str	r2, [r3, #12]
 800464c:	611a      	str	r2, [r3, #16]

		/** Configure the main internal regulator output voltage
		 */
		if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800464e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004652:	f00a fb45 	bl	800ece0 <HAL_PWREx_ControlVoltageScaling>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <SystemClock_Config+0x34>
		{
			Error_Handler();
 800465c:	f000 fdb2 	bl	80051c4 <Error_Handler>
		}

		/** Initializes the RCC Oscillators according to the specified parameters
		 * in the RCC_OscInitTypeDef structure.
		 */
		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004660:	2309      	movs	r3, #9
 8004662:	617b      	str	r3, [r7, #20]
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004664:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004668:	61bb      	str	r3, [r7, #24]
		RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800466a:	2301      	movs	r3, #1
 800466c:	62bb      	str	r3, [r7, #40]	@ 0x28
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800466e:	2302      	movs	r3, #2
 8004670:	63fb      	str	r3, [r7, #60]	@ 0x3c
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004672:	2303      	movs	r3, #3
 8004674:	643b      	str	r3, [r7, #64]	@ 0x40
		RCC_OscInitStruct.PLL.PLLM = 1;
 8004676:	2301      	movs	r3, #1
 8004678:	647b      	str	r3, [r7, #68]	@ 0x44
		RCC_OscInitStruct.PLL.PLLN = 20;
 800467a:	2314      	movs	r3, #20
 800467c:	64bb      	str	r3, [r7, #72]	@ 0x48
		RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800467e:	2307      	movs	r3, #7
 8004680:	64fb      	str	r3, [r7, #76]	@ 0x4c
		RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004682:	2302      	movs	r3, #2
 8004684:	653b      	str	r3, [r7, #80]	@ 0x50
		RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004686:	2302      	movs	r3, #2
 8004688:	657b      	str	r3, [r7, #84]	@ 0x54
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800468a:	f107 0314 	add.w	r3, r7, #20
 800468e:	4618      	mov	r0, r3
 8004690:	f00a ffde 	bl	800f650 <HAL_RCC_OscConfig>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <SystemClock_Config+0x72>
		{
			Error_Handler();
 800469a:	f000 fd93 	bl	80051c4 <Error_Handler>
		}

		/** Initializes the CPU, AHB and APB buses clocks
		 */
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800469e:	230f      	movs	r3, #15
 80046a0:	603b      	str	r3, [r7, #0]
				|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046a2:	2303      	movs	r3, #3
 80046a4:	607b      	str	r3, [r7, #4]
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80046a6:	2300      	movs	r3, #0
 80046a8:	60bb      	str	r3, [r7, #8]
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80046ae:	2300      	movs	r3, #0
 80046b0:	613b      	str	r3, [r7, #16]

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80046b2:	463b      	mov	r3, r7
 80046b4:	2104      	movs	r1, #4
 80046b6:	4618      	mov	r0, r3
 80046b8:	f00b fba6 	bl	800fe08 <HAL_RCC_ClockConfig>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <SystemClock_Config+0x9a>
		{
			Error_Handler();
 80046c2:	f000 fd7f 	bl	80051c4 <Error_Handler>
		}
	}
 80046c6:	bf00      	nop
 80046c8:	3758      	adds	r7, #88	@ 0x58
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <MX_ADC1_Init>:
	 * @brief ADC1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_ADC1_Init(void)
	{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08a      	sub	sp, #40	@ 0x28
 80046d4:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN ADC1_Init 0 */

		/* USER CODE END ADC1_Init 0 */

		ADC_MultiModeTypeDef multimode = {0};
 80046d6:	f107 031c 	add.w	r3, r7, #28
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	605a      	str	r2, [r3, #4]
 80046e0:	609a      	str	r2, [r3, #8]
		ADC_ChannelConfTypeDef sConfig = {0};
 80046e2:	1d3b      	adds	r3, r7, #4
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	609a      	str	r2, [r3, #8]
 80046ec:	60da      	str	r2, [r3, #12]
 80046ee:	611a      	str	r2, [r3, #16]
 80046f0:	615a      	str	r2, [r3, #20]

		/* USER CODE END ADC1_Init 1 */

		/** Common config
		 */
		hadc1.Instance = ADC1;
 80046f2:	4b30      	ldr	r3, [pc, #192]	@ (80047b4 <MX_ADC1_Init+0xe4>)
 80046f4:	4a30      	ldr	r2, [pc, #192]	@ (80047b8 <MX_ADC1_Init+0xe8>)
 80046f6:	601a      	str	r2, [r3, #0]
		hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80046f8:	4b2e      	ldr	r3, [pc, #184]	@ (80047b4 <MX_ADC1_Init+0xe4>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	605a      	str	r2, [r3, #4]
		hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80046fe:	4b2d      	ldr	r3, [pc, #180]	@ (80047b4 <MX_ADC1_Init+0xe4>)
 8004700:	2200      	movs	r2, #0
 8004702:	609a      	str	r2, [r3, #8]
		hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004704:	4b2b      	ldr	r3, [pc, #172]	@ (80047b4 <MX_ADC1_Init+0xe4>)
 8004706:	2200      	movs	r2, #0
 8004708:	60da      	str	r2, [r3, #12]
		hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800470a:	4b2a      	ldr	r3, [pc, #168]	@ (80047b4 <MX_ADC1_Init+0xe4>)
 800470c:	2200      	movs	r2, #0
 800470e:	611a      	str	r2, [r3, #16]
		hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004710:	4b28      	ldr	r3, [pc, #160]	@ (80047b4 <MX_ADC1_Init+0xe4>)
 8004712:	2208      	movs	r2, #8
 8004714:	615a      	str	r2, [r3, #20]
		hadc1.Init.LowPowerAutoWait = DISABLE;
 8004716:	4b27      	ldr	r3, [pc, #156]	@ (80047b4 <MX_ADC1_Init+0xe4>)
 8004718:	2200      	movs	r2, #0
 800471a:	761a      	strb	r2, [r3, #24]
		hadc1.Init.ContinuousConvMode = DISABLE;
 800471c:	4b25      	ldr	r3, [pc, #148]	@ (80047b4 <MX_ADC1_Init+0xe4>)
 800471e:	2200      	movs	r2, #0
 8004720:	765a      	strb	r2, [r3, #25]
		hadc1.Init.NbrOfConversion = 1;
 8004722:	4b24      	ldr	r3, [pc, #144]	@ (80047b4 <MX_ADC1_Init+0xe4>)
 8004724:	2201      	movs	r2, #1
 8004726:	61da      	str	r2, [r3, #28]
		hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004728:	4b22      	ldr	r3, [pc, #136]	@ (80047b4 <MX_ADC1_Init+0xe4>)
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2020 	strb.w	r2, [r3, #32]
		hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8004730:	4b20      	ldr	r3, [pc, #128]	@ (80047b4 <MX_ADC1_Init+0xe4>)
 8004732:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004736:	629a      	str	r2, [r3, #40]	@ 0x28
		hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004738:	4b1e      	ldr	r3, [pc, #120]	@ (80047b4 <MX_ADC1_Init+0xe4>)
 800473a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800473e:	62da      	str	r2, [r3, #44]	@ 0x2c
		hadc1.Init.DMAContinuousRequests = ENABLE;
 8004740:	4b1c      	ldr	r3, [pc, #112]	@ (80047b4 <MX_ADC1_Init+0xe4>)
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004748:	4b1a      	ldr	r3, [pc, #104]	@ (80047b4 <MX_ADC1_Init+0xe4>)
 800474a:	2200      	movs	r2, #0
 800474c:	635a      	str	r2, [r3, #52]	@ 0x34
		hadc1.Init.OversamplingMode = DISABLE;
 800474e:	4b19      	ldr	r3, [pc, #100]	@ (80047b4 <MX_ADC1_Init+0xe4>)
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004756:	4817      	ldr	r0, [pc, #92]	@ (80047b4 <MX_ADC1_Init+0xe4>)
 8004758:	f006 fd2a 	bl	800b1b0 <HAL_ADC_Init>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <MX_ADC1_Init+0x96>
		{
			Error_Handler();
 8004762:	f000 fd2f 	bl	80051c4 <Error_Handler>
		}

		/** Configure the ADC multi-mode
		 */
		multimode.Mode = ADC_MODE_INDEPENDENT;
 8004766:	2300      	movs	r3, #0
 8004768:	61fb      	str	r3, [r7, #28]
		if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800476a:	f107 031c 	add.w	r3, r7, #28
 800476e:	4619      	mov	r1, r3
 8004770:	4810      	ldr	r0, [pc, #64]	@ (80047b4 <MX_ADC1_Init+0xe4>)
 8004772:	f007 fde3 	bl	800c33c <HAL_ADCEx_MultiModeConfigChannel>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <MX_ADC1_Init+0xb0>
		{
			Error_Handler();
 800477c:	f000 fd22 	bl	80051c4 <Error_Handler>
		}

		/** Configure Regular Channel
		 */
		sConfig.Channel = ADC_CHANNEL_9;
 8004780:	4b0e      	ldr	r3, [pc, #56]	@ (80047bc <MX_ADC1_Init+0xec>)
 8004782:	607b      	str	r3, [r7, #4]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8004784:	2306      	movs	r3, #6
 8004786:	60bb      	str	r3, [r7, #8]
		sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]
		sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800478c:	237f      	movs	r3, #127	@ 0x7f
 800478e:	613b      	str	r3, [r7, #16]
		sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004790:	2304      	movs	r3, #4
 8004792:	617b      	str	r3, [r7, #20]
		sConfig.Offset = 0;
 8004794:	2300      	movs	r3, #0
 8004796:	61bb      	str	r3, [r7, #24]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004798:	1d3b      	adds	r3, r7, #4
 800479a:	4619      	mov	r1, r3
 800479c:	4805      	ldr	r0, [pc, #20]	@ (80047b4 <MX_ADC1_Init+0xe4>)
 800479e:	f006 ff7f 	bl	800b6a0 <HAL_ADC_ConfigChannel>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <MX_ADC1_Init+0xdc>
		{
			Error_Handler();
 80047a8:	f000 fd0c 	bl	80051c4 <Error_Handler>
		}
		/* USER CODE BEGIN ADC1_Init 2 */

		/* USER CODE END ADC1_Init 2 */

	}
 80047ac:	bf00      	nop
 80047ae:	3728      	adds	r7, #40	@ 0x28
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	20000218 	.word	0x20000218
 80047b8:	50040000 	.word	0x50040000
 80047bc:	25b00200 	.word	0x25b00200

080047c0 <MX_CRC_Init>:
	 * @brief CRC Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_CRC_Init(void)
	{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
		/* USER CODE END CRC_Init 0 */

		/* USER CODE BEGIN CRC_Init 1 */

		/* USER CODE END CRC_Init 1 */
		hcrc.Instance = CRC;
 80047c4:	4b0d      	ldr	r3, [pc, #52]	@ (80047fc <MX_CRC_Init+0x3c>)
 80047c6:	4a0e      	ldr	r2, [pc, #56]	@ (8004800 <MX_CRC_Init+0x40>)
 80047c8:	601a      	str	r2, [r3, #0]
		hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80047ca:	4b0c      	ldr	r3, [pc, #48]	@ (80047fc <MX_CRC_Init+0x3c>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	711a      	strb	r2, [r3, #4]
		hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80047d0:	4b0a      	ldr	r3, [pc, #40]	@ (80047fc <MX_CRC_Init+0x3c>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	715a      	strb	r2, [r3, #5]
		hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80047d6:	4b09      	ldr	r3, [pc, #36]	@ (80047fc <MX_CRC_Init+0x3c>)
 80047d8:	2200      	movs	r2, #0
 80047da:	615a      	str	r2, [r3, #20]
		hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80047dc:	4b07      	ldr	r3, [pc, #28]	@ (80047fc <MX_CRC_Init+0x3c>)
 80047de:	2200      	movs	r2, #0
 80047e0:	619a      	str	r2, [r3, #24]
		hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80047e2:	4b06      	ldr	r3, [pc, #24]	@ (80047fc <MX_CRC_Init+0x3c>)
 80047e4:	2201      	movs	r2, #1
 80047e6:	621a      	str	r2, [r3, #32]
		if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80047e8:	4804      	ldr	r0, [pc, #16]	@ (80047fc <MX_CRC_Init+0x3c>)
 80047ea:	f007 ff83 	bl	800c6f4 <HAL_CRC_Init>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <MX_CRC_Init+0x38>
		{
			Error_Handler();
 80047f4:	f000 fce6 	bl	80051c4 <Error_Handler>
		}
		/* USER CODE BEGIN CRC_Init 2 */

		/* USER CODE END CRC_Init 2 */

	}
 80047f8:	bf00      	nop
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	200002c4 	.word	0x200002c4
 8004800:	40023000 	.word	0x40023000

08004804 <MX_I2C3_Init>:
	 * @brief I2C3 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_I2C3_Init(void)
	{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
		/* USER CODE END I2C3_Init 0 */

		/* USER CODE BEGIN I2C3_Init 1 */

		/* USER CODE END I2C3_Init 1 */
		hi2c3.Instance = I2C3;
 8004808:	4b1b      	ldr	r3, [pc, #108]	@ (8004878 <MX_I2C3_Init+0x74>)
 800480a:	4a1c      	ldr	r2, [pc, #112]	@ (800487c <MX_I2C3_Init+0x78>)
 800480c:	601a      	str	r2, [r3, #0]
		hi2c3.Init.Timing = 0x10909CEC;
 800480e:	4b1a      	ldr	r3, [pc, #104]	@ (8004878 <MX_I2C3_Init+0x74>)
 8004810:	4a1b      	ldr	r2, [pc, #108]	@ (8004880 <MX_I2C3_Init+0x7c>)
 8004812:	605a      	str	r2, [r3, #4]
		hi2c3.Init.OwnAddress1 = 0;
 8004814:	4b18      	ldr	r3, [pc, #96]	@ (8004878 <MX_I2C3_Init+0x74>)
 8004816:	2200      	movs	r2, #0
 8004818:	609a      	str	r2, [r3, #8]
		hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800481a:	4b17      	ldr	r3, [pc, #92]	@ (8004878 <MX_I2C3_Init+0x74>)
 800481c:	2201      	movs	r2, #1
 800481e:	60da      	str	r2, [r3, #12]
		hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004820:	4b15      	ldr	r3, [pc, #84]	@ (8004878 <MX_I2C3_Init+0x74>)
 8004822:	2200      	movs	r2, #0
 8004824:	611a      	str	r2, [r3, #16]
		hi2c3.Init.OwnAddress2 = 0;
 8004826:	4b14      	ldr	r3, [pc, #80]	@ (8004878 <MX_I2C3_Init+0x74>)
 8004828:	2200      	movs	r2, #0
 800482a:	615a      	str	r2, [r3, #20]
		hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800482c:	4b12      	ldr	r3, [pc, #72]	@ (8004878 <MX_I2C3_Init+0x74>)
 800482e:	2200      	movs	r2, #0
 8004830:	619a      	str	r2, [r3, #24]
		hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004832:	4b11      	ldr	r3, [pc, #68]	@ (8004878 <MX_I2C3_Init+0x74>)
 8004834:	2200      	movs	r2, #0
 8004836:	61da      	str	r2, [r3, #28]
		hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004838:	4b0f      	ldr	r3, [pc, #60]	@ (8004878 <MX_I2C3_Init+0x74>)
 800483a:	2200      	movs	r2, #0
 800483c:	621a      	str	r2, [r3, #32]
		if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800483e:	480e      	ldr	r0, [pc, #56]	@ (8004878 <MX_I2C3_Init+0x74>)
 8004840:	f009 fc58 	bl	800e0f4 <HAL_I2C_Init>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <MX_I2C3_Init+0x4a>
		{
			Error_Handler();
 800484a:	f000 fcbb 	bl	80051c4 <Error_Handler>
		}

		/** Configure Analogue filter
		 */
		if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800484e:	2100      	movs	r1, #0
 8004850:	4809      	ldr	r0, [pc, #36]	@ (8004878 <MX_I2C3_Init+0x74>)
 8004852:	f00a f99f 	bl	800eb94 <HAL_I2CEx_ConfigAnalogFilter>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <MX_I2C3_Init+0x5c>
		{
			Error_Handler();
 800485c:	f000 fcb2 	bl	80051c4 <Error_Handler>
		}

		/** Configure Digital filter
		 */
		if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8004860:	2100      	movs	r1, #0
 8004862:	4805      	ldr	r0, [pc, #20]	@ (8004878 <MX_I2C3_Init+0x74>)
 8004864:	f00a f9e1 	bl	800ec2a <HAL_I2CEx_ConfigDigitalFilter>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <MX_I2C3_Init+0x6e>
		{
			Error_Handler();
 800486e:	f000 fca9 	bl	80051c4 <Error_Handler>
		}
		/* USER CODE BEGIN I2C3_Init 2 */

		/* USER CODE END I2C3_Init 2 */

	}
 8004872:	bf00      	nop
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	200002e8 	.word	0x200002e8
 800487c:	40005c00 	.word	0x40005c00
 8004880:	10909cec 	.word	0x10909cec

08004884 <MX_QUADSPI_Init>:
	 * @brief QUADSPI Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_QUADSPI_Init(void)
	{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN QUADSPI_Init 1 */

		/* USER CODE END QUADSPI_Init 1 */
		/* QUADSPI parameter configuration*/
		hqspi.Instance = QUADSPI;
 8004888:	4b0f      	ldr	r3, [pc, #60]	@ (80048c8 <MX_QUADSPI_Init+0x44>)
 800488a:	4a10      	ldr	r2, [pc, #64]	@ (80048cc <MX_QUADSPI_Init+0x48>)
 800488c:	601a      	str	r2, [r3, #0]
		hqspi.Init.ClockPrescaler = 1;
 800488e:	4b0e      	ldr	r3, [pc, #56]	@ (80048c8 <MX_QUADSPI_Init+0x44>)
 8004890:	2201      	movs	r2, #1
 8004892:	605a      	str	r2, [r3, #4]
		hqspi.Init.FifoThreshold = 1;
 8004894:	4b0c      	ldr	r3, [pc, #48]	@ (80048c8 <MX_QUADSPI_Init+0x44>)
 8004896:	2201      	movs	r2, #1
 8004898:	609a      	str	r2, [r3, #8]
		hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800489a:	4b0b      	ldr	r3, [pc, #44]	@ (80048c8 <MX_QUADSPI_Init+0x44>)
 800489c:	2200      	movs	r2, #0
 800489e:	60da      	str	r2, [r3, #12]
		hqspi.Init.FlashSize = 1;
 80048a0:	4b09      	ldr	r3, [pc, #36]	@ (80048c8 <MX_QUADSPI_Init+0x44>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	611a      	str	r2, [r3, #16]
		hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80048a6:	4b08      	ldr	r3, [pc, #32]	@ (80048c8 <MX_QUADSPI_Init+0x44>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	615a      	str	r2, [r3, #20]
		hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80048ac:	4b06      	ldr	r3, [pc, #24]	@ (80048c8 <MX_QUADSPI_Init+0x44>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	619a      	str	r2, [r3, #24]
		if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80048b2:	4805      	ldr	r0, [pc, #20]	@ (80048c8 <MX_QUADSPI_Init+0x44>)
 80048b4:	f00a fa6a 	bl	800ed8c <HAL_QSPI_Init>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <MX_QUADSPI_Init+0x3e>
		{
			Error_Handler();
 80048be:	f000 fc81 	bl	80051c4 <Error_Handler>
		}
		/* USER CODE BEGIN QUADSPI_Init 2 */

		/* USER CODE END QUADSPI_Init 2 */

	}
 80048c2:	bf00      	nop
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	2000033c 	.word	0x2000033c
 80048cc:	a0001000 	.word	0xa0001000

080048d0 <MX_RTC_Init>:
	 * @brief RTC Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_RTC_Init(void)
	{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b092      	sub	sp, #72	@ 0x48
 80048d4:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN RTC_Init 0 */

		/* USER CODE END RTC_Init 0 */

		RTC_TimeTypeDef sTime = {0};
 80048d6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	605a      	str	r2, [r3, #4]
 80048e0:	609a      	str	r2, [r3, #8]
 80048e2:	60da      	str	r2, [r3, #12]
 80048e4:	611a      	str	r2, [r3, #16]
		RTC_DateTypeDef sDate = {0};
 80048e6:	2300      	movs	r3, #0
 80048e8:	633b      	str	r3, [r7, #48]	@ 0x30
		RTC_AlarmTypeDef sAlarm = {0};
 80048ea:	1d3b      	adds	r3, r7, #4
 80048ec:	222c      	movs	r2, #44	@ 0x2c
 80048ee:	2100      	movs	r1, #0
 80048f0:	4618      	mov	r0, r3
 80048f2:	f011 fab9 	bl	8015e68 <memset>

		/* USER CODE END RTC_Init 1 */

		/** Initialize RTC Only
		 */
		hrtc.Instance = RTC;
 80048f6:	4b3c      	ldr	r3, [pc, #240]	@ (80049e8 <MX_RTC_Init+0x118>)
 80048f8:	4a3c      	ldr	r2, [pc, #240]	@ (80049ec <MX_RTC_Init+0x11c>)
 80048fa:	601a      	str	r2, [r3, #0]
		hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80048fc:	4b3a      	ldr	r3, [pc, #232]	@ (80049e8 <MX_RTC_Init+0x118>)
 80048fe:	2200      	movs	r2, #0
 8004900:	605a      	str	r2, [r3, #4]
		hrtc.Init.AsynchPrediv = 127;
 8004902:	4b39      	ldr	r3, [pc, #228]	@ (80049e8 <MX_RTC_Init+0x118>)
 8004904:	227f      	movs	r2, #127	@ 0x7f
 8004906:	609a      	str	r2, [r3, #8]
		hrtc.Init.SynchPrediv = 255;
 8004908:	4b37      	ldr	r3, [pc, #220]	@ (80049e8 <MX_RTC_Init+0x118>)
 800490a:	22ff      	movs	r2, #255	@ 0xff
 800490c:	60da      	str	r2, [r3, #12]
		hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800490e:	4b36      	ldr	r3, [pc, #216]	@ (80049e8 <MX_RTC_Init+0x118>)
 8004910:	2200      	movs	r2, #0
 8004912:	611a      	str	r2, [r3, #16]
		hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004914:	4b34      	ldr	r3, [pc, #208]	@ (80049e8 <MX_RTC_Init+0x118>)
 8004916:	2200      	movs	r2, #0
 8004918:	615a      	str	r2, [r3, #20]
		hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800491a:	4b33      	ldr	r3, [pc, #204]	@ (80049e8 <MX_RTC_Init+0x118>)
 800491c:	2200      	movs	r2, #0
 800491e:	619a      	str	r2, [r3, #24]
		hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004920:	4b31      	ldr	r3, [pc, #196]	@ (80049e8 <MX_RTC_Init+0x118>)
 8004922:	2200      	movs	r2, #0
 8004924:	61da      	str	r2, [r3, #28]
		if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004926:	4830      	ldr	r0, [pc, #192]	@ (80049e8 <MX_RTC_Init+0x118>)
 8004928:	f00c f94e 	bl	8010bc8 <HAL_RTC_Init>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <MX_RTC_Init+0x66>
		{
			Error_Handler();
 8004932:	f000 fc47 	bl	80051c4 <Error_Handler>

		/* USER CODE END Check_RTC_BKUP */

		/** Initialize RTC and set the Time and Date
		 */
		sTime.Hours = 0;
 8004936:	2300      	movs	r3, #0
 8004938:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
		sTime.Minutes = 0;
 800493c:	2300      	movs	r3, #0
 800493e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
		sTime.Seconds = 0;
 8004942:	2300      	movs	r3, #0
 8004944:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004948:	2300      	movs	r3, #0
 800494a:	643b      	str	r3, [r7, #64]	@ 0x40
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800494c:	2300      	movs	r3, #0
 800494e:	647b      	str	r3, [r7, #68]	@ 0x44
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004950:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004954:	2200      	movs	r2, #0
 8004956:	4619      	mov	r1, r3
 8004958:	4823      	ldr	r0, [pc, #140]	@ (80049e8 <MX_RTC_Init+0x118>)
 800495a:	f00c f9bd 	bl	8010cd8 <HAL_RTC_SetTime>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <MX_RTC_Init+0x98>
		{
			Error_Handler();
 8004964:	f000 fc2e 	bl	80051c4 <Error_Handler>
		}
		sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004968:	2301      	movs	r3, #1
 800496a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
		sDate.Month = RTC_MONTH_JANUARY;
 800496e:	2301      	movs	r3, #1
 8004970:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
		sDate.Date = 1;
 8004974:	2301      	movs	r3, #1
 8004976:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
		sDate.Year = 0;
 800497a:	2300      	movs	r3, #0
 800497c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004980:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004984:	2200      	movs	r2, #0
 8004986:	4619      	mov	r1, r3
 8004988:	4817      	ldr	r0, [pc, #92]	@ (80049e8 <MX_RTC_Init+0x118>)
 800498a:	f00c fa9e 	bl	8010eca <HAL_RTC_SetDate>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <MX_RTC_Init+0xc8>
		{
			Error_Handler();
 8004994:	f000 fc16 	bl	80051c4 <Error_Handler>
		}

		/** Enable the Alarm A
		 */
		sAlarm.AlarmTime.Hours = 0;
 8004998:	2300      	movs	r3, #0
 800499a:	713b      	strb	r3, [r7, #4]
		sAlarm.AlarmTime.Minutes = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	717b      	strb	r3, [r7, #5]
		sAlarm.AlarmTime.Seconds = 0;
 80049a0:	2300      	movs	r3, #0
 80049a2:	71bb      	strb	r3, [r7, #6]
		sAlarm.AlarmTime.SubSeconds = 0;
 80049a4:	2300      	movs	r3, #0
 80049a6:	60bb      	str	r3, [r7, #8]
		sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80049a8:	2300      	movs	r3, #0
 80049aa:	613b      	str	r3, [r7, #16]
		sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80049ac:	2300      	movs	r3, #0
 80049ae:	617b      	str	r3, [r7, #20]
		sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80049b0:	4b0f      	ldr	r3, [pc, #60]	@ (80049f0 <MX_RTC_Init+0x120>)
 80049b2:	61bb      	str	r3, [r7, #24]
				|RTC_ALARMMASK_SECONDS;
		sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80049b4:	2300      	movs	r3, #0
 80049b6:	623b      	str	r3, [r7, #32]
		sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80049b8:	2300      	movs	r3, #0
 80049ba:	627b      	str	r3, [r7, #36]	@ 0x24
		sAlarm.AlarmDateWeekDay = 1;
 80049bc:	2301      	movs	r3, #1
 80049be:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		sAlarm.Alarm = RTC_ALARM_A;
 80049c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80049c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80049c8:	1d3b      	adds	r3, r7, #4
 80049ca:	2200      	movs	r2, #0
 80049cc:	4619      	mov	r1, r3
 80049ce:	4806      	ldr	r0, [pc, #24]	@ (80049e8 <MX_RTC_Init+0x118>)
 80049d0:	f00c fb02 	bl	8010fd8 <HAL_RTC_SetAlarm_IT>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <MX_RTC_Init+0x10e>
		{
			Error_Handler();
 80049da:	f000 fbf3 	bl	80051c4 <Error_Handler>
		}
		/* USER CODE BEGIN RTC_Init 2 */

		/* USER CODE END RTC_Init 2 */

	}
 80049de:	bf00      	nop
 80049e0:	3748      	adds	r7, #72	@ 0x48
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	20000380 	.word	0x20000380
 80049ec:	40002800 	.word	0x40002800
 80049f0:	80800080 	.word	0x80800080

080049f4 <MX_SPI2_Init>:
	 * @brief SPI2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_SPI2_Init(void)
	{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN SPI2_Init 1 */

		/* USER CODE END SPI2_Init 1 */
		/* SPI2 parameter configuration*/
		hspi2.Instance = SPI2;
 80049f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a68 <MX_SPI2_Init+0x74>)
 80049fa:	4a1c      	ldr	r2, [pc, #112]	@ (8004a6c <MX_SPI2_Init+0x78>)
 80049fc:	601a      	str	r2, [r3, #0]
		hspi2.Init.Mode = SPI_MODE_MASTER;
 80049fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004a68 <MX_SPI2_Init+0x74>)
 8004a00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004a04:	605a      	str	r2, [r3, #4]
		hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004a06:	4b18      	ldr	r3, [pc, #96]	@ (8004a68 <MX_SPI2_Init+0x74>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	609a      	str	r2, [r3, #8]
		hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a0c:	4b16      	ldr	r3, [pc, #88]	@ (8004a68 <MX_SPI2_Init+0x74>)
 8004a0e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004a12:	60da      	str	r2, [r3, #12]
		hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a14:	4b14      	ldr	r3, [pc, #80]	@ (8004a68 <MX_SPI2_Init+0x74>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	611a      	str	r2, [r3, #16]
		hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a1a:	4b13      	ldr	r3, [pc, #76]	@ (8004a68 <MX_SPI2_Init+0x74>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	615a      	str	r2, [r3, #20]
		hspi2.Init.NSS = SPI_NSS_SOFT;
 8004a20:	4b11      	ldr	r3, [pc, #68]	@ (8004a68 <MX_SPI2_Init+0x74>)
 8004a22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a26:	619a      	str	r2, [r3, #24]
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a28:	4b0f      	ldr	r3, [pc, #60]	@ (8004a68 <MX_SPI2_Init+0x74>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	61da      	str	r2, [r3, #28]
		hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a68 <MX_SPI2_Init+0x74>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	621a      	str	r2, [r3, #32]
		hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a34:	4b0c      	ldr	r3, [pc, #48]	@ (8004a68 <MX_SPI2_Init+0x74>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	625a      	str	r2, [r3, #36]	@ 0x24
		hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a68 <MX_SPI2_Init+0x74>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	629a      	str	r2, [r3, #40]	@ 0x28
		hspi2.Init.CRCPolynomial = 7;
 8004a40:	4b09      	ldr	r3, [pc, #36]	@ (8004a68 <MX_SPI2_Init+0x74>)
 8004a42:	2207      	movs	r2, #7
 8004a44:	62da      	str	r2, [r3, #44]	@ 0x2c
		hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004a46:	4b08      	ldr	r3, [pc, #32]	@ (8004a68 <MX_SPI2_Init+0x74>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	631a      	str	r2, [r3, #48]	@ 0x30
		hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004a4c:	4b06      	ldr	r3, [pc, #24]	@ (8004a68 <MX_SPI2_Init+0x74>)
 8004a4e:	2208      	movs	r2, #8
 8004a50:	635a      	str	r2, [r3, #52]	@ 0x34
		if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004a52:	4805      	ldr	r0, [pc, #20]	@ (8004a68 <MX_SPI2_Init+0x74>)
 8004a54:	f00c fd1c 	bl	8011490 <HAL_SPI_Init>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <MX_SPI2_Init+0x6e>
		{
			Error_Handler();
 8004a5e:	f000 fbb1 	bl	80051c4 <Error_Handler>
		}
		/* USER CODE BEGIN SPI2_Init 2 */

		/* USER CODE END SPI2_Init 2 */

	}
 8004a62:	bf00      	nop
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	200003a4 	.word	0x200003a4
 8004a6c:	40003800 	.word	0x40003800

08004a70 <MX_SPI3_Init>:
	 * @brief SPI3 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_SPI3_Init(void)
	{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN SPI3_Init 1 */

		/* USER CODE END SPI3_Init 1 */
		/* SPI3 parameter configuration*/
		hspi3.Instance = SPI3;
 8004a74:	4b1b      	ldr	r3, [pc, #108]	@ (8004ae4 <MX_SPI3_Init+0x74>)
 8004a76:	4a1c      	ldr	r2, [pc, #112]	@ (8004ae8 <MX_SPI3_Init+0x78>)
 8004a78:	601a      	str	r2, [r3, #0]
		hspi3.Init.Mode = SPI_MODE_MASTER;
 8004a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ae4 <MX_SPI3_Init+0x74>)
 8004a7c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004a80:	605a      	str	r2, [r3, #4]
		hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004a82:	4b18      	ldr	r3, [pc, #96]	@ (8004ae4 <MX_SPI3_Init+0x74>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	609a      	str	r2, [r3, #8]
		hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8004a88:	4b16      	ldr	r3, [pc, #88]	@ (8004ae4 <MX_SPI3_Init+0x74>)
 8004a8a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004a8e:	60da      	str	r2, [r3, #12]
		hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a90:	4b14      	ldr	r3, [pc, #80]	@ (8004ae4 <MX_SPI3_Init+0x74>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	611a      	str	r2, [r3, #16]
		hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a96:	4b13      	ldr	r3, [pc, #76]	@ (8004ae4 <MX_SPI3_Init+0x74>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	615a      	str	r2, [r3, #20]
		hspi3.Init.NSS = SPI_NSS_SOFT;
 8004a9c:	4b11      	ldr	r3, [pc, #68]	@ (8004ae4 <MX_SPI3_Init+0x74>)
 8004a9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004aa2:	619a      	str	r2, [r3, #24]
		hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae4 <MX_SPI3_Init+0x74>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	61da      	str	r2, [r3, #28]
		hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae4 <MX_SPI3_Init+0x74>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	621a      	str	r2, [r3, #32]
		hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae4 <MX_SPI3_Init+0x74>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	625a      	str	r2, [r3, #36]	@ 0x24
		hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae4 <MX_SPI3_Init+0x74>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	629a      	str	r2, [r3, #40]	@ 0x28
		hspi3.Init.CRCPolynomial = 7;
 8004abc:	4b09      	ldr	r3, [pc, #36]	@ (8004ae4 <MX_SPI3_Init+0x74>)
 8004abe:	2207      	movs	r2, #7
 8004ac0:	62da      	str	r2, [r3, #44]	@ 0x2c
		hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004ac2:	4b08      	ldr	r3, [pc, #32]	@ (8004ae4 <MX_SPI3_Init+0x74>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	631a      	str	r2, [r3, #48]	@ 0x30
		hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004ac8:	4b06      	ldr	r3, [pc, #24]	@ (8004ae4 <MX_SPI3_Init+0x74>)
 8004aca:	2208      	movs	r2, #8
 8004acc:	635a      	str	r2, [r3, #52]	@ 0x34
		if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004ace:	4805      	ldr	r0, [pc, #20]	@ (8004ae4 <MX_SPI3_Init+0x74>)
 8004ad0:	f00c fcde 	bl	8011490 <HAL_SPI_Init>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <MX_SPI3_Init+0x6e>
		{
			Error_Handler();
 8004ada:	f000 fb73 	bl	80051c4 <Error_Handler>
		}
		/* USER CODE BEGIN SPI3_Init 2 */

		/* USER CODE END SPI3_Init 2 */

	}
 8004ade:	bf00      	nop
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000408 	.word	0x20000408
 8004ae8:	40003c00 	.word	0x40003c00

08004aec <MX_TIM1_Init>:
	 * @brief TIM1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM1_Init(void)
	{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b096      	sub	sp, #88	@ 0x58
 8004af0:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM1_Init 0 */

		/* USER CODE END TIM1_Init 0 */

		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004af2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004af6:	2200      	movs	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	605a      	str	r2, [r3, #4]
 8004afc:	609a      	str	r2, [r3, #8]
		TIM_OC_InitTypeDef sConfigOC = {0};
 8004afe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	605a      	str	r2, [r3, #4]
 8004b08:	609a      	str	r2, [r3, #8]
 8004b0a:	60da      	str	r2, [r3, #12]
 8004b0c:	611a      	str	r2, [r3, #16]
 8004b0e:	615a      	str	r2, [r3, #20]
 8004b10:	619a      	str	r2, [r3, #24]
		TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004b12:	1d3b      	adds	r3, r7, #4
 8004b14:	222c      	movs	r2, #44	@ 0x2c
 8004b16:	2100      	movs	r1, #0
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f011 f9a5 	bl	8015e68 <memset>

		/* USER CODE BEGIN TIM1_Init 1 */

		/* USER CODE END TIM1_Init 1 */
		htim1.Instance = TIM1;
 8004b1e:	4b45      	ldr	r3, [pc, #276]	@ (8004c34 <MX_TIM1_Init+0x148>)
 8004b20:	4a45      	ldr	r2, [pc, #276]	@ (8004c38 <MX_TIM1_Init+0x14c>)
 8004b22:	601a      	str	r2, [r3, #0]
		htim1.Init.Prescaler = 1599;
 8004b24:	4b43      	ldr	r3, [pc, #268]	@ (8004c34 <MX_TIM1_Init+0x148>)
 8004b26:	f240 623f 	movw	r2, #1599	@ 0x63f
 8004b2a:	605a      	str	r2, [r3, #4]
		htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b2c:	4b41      	ldr	r3, [pc, #260]	@ (8004c34 <MX_TIM1_Init+0x148>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	609a      	str	r2, [r3, #8]
		htim1.Init.Period = 49999;
 8004b32:	4b40      	ldr	r3, [pc, #256]	@ (8004c34 <MX_TIM1_Init+0x148>)
 8004b34:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8004b38:	60da      	str	r2, [r3, #12]
		htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b3a:	4b3e      	ldr	r3, [pc, #248]	@ (8004c34 <MX_TIM1_Init+0x148>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	611a      	str	r2, [r3, #16]
		htim1.Init.RepetitionCounter = 0;
 8004b40:	4b3c      	ldr	r3, [pc, #240]	@ (8004c34 <MX_TIM1_Init+0x148>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	615a      	str	r2, [r3, #20]
		htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b46:	4b3b      	ldr	r3, [pc, #236]	@ (8004c34 <MX_TIM1_Init+0x148>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8004b4c:	4839      	ldr	r0, [pc, #228]	@ (8004c34 <MX_TIM1_Init+0x148>)
 8004b4e:	f00d fc22 	bl	8012396 <HAL_TIM_OC_Init>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <MX_TIM1_Init+0x70>
		{
			Error_Handler();
 8004b58:	f000 fb34 	bl	80051c4 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004b60:	2300      	movs	r3, #0
 8004b62:	653b      	str	r3, [r7, #80]	@ 0x50
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b64:	2300      	movs	r3, #0
 8004b66:	657b      	str	r3, [r7, #84]	@ 0x54
		if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004b68:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4831      	ldr	r0, [pc, #196]	@ (8004c34 <MX_TIM1_Init+0x148>)
 8004b70:	f00f fc28 	bl	80143c4 <HAL_TIMEx_MasterConfigSynchronization>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <MX_TIM1_Init+0x92>
		{
			Error_Handler();
 8004b7a:	f000 fb23 	bl	80051c4 <Error_Handler>
		}
		sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	633b      	str	r3, [r7, #48]	@ 0x30
		sConfigOC.Pulse = 0;
 8004b82:	2300      	movs	r3, #0
 8004b84:	637b      	str	r3, [r7, #52]	@ 0x34
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b86:	2300      	movs	r3, #0
 8004b88:	63bb      	str	r3, [r7, #56]	@ 0x38
		sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	643b      	str	r3, [r7, #64]	@ 0x40
		sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004b92:	2300      	movs	r3, #0
 8004b94:	647b      	str	r3, [r7, #68]	@ 0x44
		sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004b96:	2300      	movs	r3, #0
 8004b98:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b9a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4824      	ldr	r0, [pc, #144]	@ (8004c34 <MX_TIM1_Init+0x148>)
 8004ba4:	f00e fae4 	bl	8013170 <HAL_TIM_OC_ConfigChannel>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <MX_TIM1_Init+0xc6>
		{
			Error_Handler();
 8004bae:	f000 fb09 	bl	80051c4 <Error_Handler>
		}
		if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004bb2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004bb6:	2204      	movs	r2, #4
 8004bb8:	4619      	mov	r1, r3
 8004bba:	481e      	ldr	r0, [pc, #120]	@ (8004c34 <MX_TIM1_Init+0x148>)
 8004bbc:	f00e fad8 	bl	8013170 <HAL_TIM_OC_ConfigChannel>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <MX_TIM1_Init+0xde>
		{
			Error_Handler();
 8004bc6:	f000 fafd 	bl	80051c4 <Error_Handler>
		}
		if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004bca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004bce:	2208      	movs	r2, #8
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4818      	ldr	r0, [pc, #96]	@ (8004c34 <MX_TIM1_Init+0x148>)
 8004bd4:	f00e facc 	bl	8013170 <HAL_TIM_OC_ConfigChannel>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <MX_TIM1_Init+0xf6>
		{
			Error_Handler();
 8004bde:	f000 faf1 	bl	80051c4 <Error_Handler>
		}
		sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004be2:	2300      	movs	r3, #0
 8004be4:	607b      	str	r3, [r7, #4]
		sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60bb      	str	r3, [r7, #8]
		sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
		sBreakDeadTimeConfig.DeadTime = 0;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	613b      	str	r3, [r7, #16]
		sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]
		sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004bf6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004bfa:	61bb      	str	r3, [r7, #24]
		sBreakDeadTimeConfig.BreakFilter = 0;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	61fb      	str	r3, [r7, #28]
		sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004c00:	2300      	movs	r3, #0
 8004c02:	623b      	str	r3, [r7, #32]
		sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004c04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c08:	627b      	str	r3, [r7, #36]	@ 0x24
		sBreakDeadTimeConfig.Break2Filter = 0;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
		sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004c12:	1d3b      	adds	r3, r7, #4
 8004c14:	4619      	mov	r1, r3
 8004c16:	4807      	ldr	r0, [pc, #28]	@ (8004c34 <MX_TIM1_Init+0x148>)
 8004c18:	f00f fc5c 	bl	80144d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <MX_TIM1_Init+0x13a>
		{
			Error_Handler();
 8004c22:	f000 facf 	bl	80051c4 <Error_Handler>
		}
		/* USER CODE BEGIN TIM1_Init 2 */

		/* USER CODE END TIM1_Init 2 */
		HAL_TIM_MspPostInit(&htim1);
 8004c26:	4803      	ldr	r0, [pc, #12]	@ (8004c34 <MX_TIM1_Init+0x148>)
 8004c28:	f002 fd50 	bl	80076cc <HAL_TIM_MspPostInit>

	}
 8004c2c:	bf00      	nop
 8004c2e:	3758      	adds	r7, #88	@ 0x58
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	2000046c 	.word	0x2000046c
 8004c38:	40012c00 	.word	0x40012c00

08004c3c <MX_TIM2_Init>:
	 * @brief TIM2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM2_Init(void)
	{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM2_Init 0 */

		/* USER CODE END TIM2_Init 0 */

		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c42:	f107 0314 	add.w	r3, r7, #20
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	605a      	str	r2, [r3, #4]
 8004c4c:	609a      	str	r2, [r3, #8]
		TIM_IC_InitTypeDef sConfigIC = {0};
 8004c4e:	1d3b      	adds	r3, r7, #4
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	605a      	str	r2, [r3, #4]
 8004c56:	609a      	str	r2, [r3, #8]
 8004c58:	60da      	str	r2, [r3, #12]

		/* USER CODE BEGIN TIM2_Init 1 */

		/* USER CODE END TIM2_Init 1 */
		htim2.Instance = TIM2;
 8004c5a:	4b21      	ldr	r3, [pc, #132]	@ (8004ce0 <MX_TIM2_Init+0xa4>)
 8004c5c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004c60:	601a      	str	r2, [r3, #0]
		htim2.Init.Prescaler = 0;
 8004c62:	4b1f      	ldr	r3, [pc, #124]	@ (8004ce0 <MX_TIM2_Init+0xa4>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	605a      	str	r2, [r3, #4]
		htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c68:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce0 <MX_TIM2_Init+0xa4>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	609a      	str	r2, [r3, #8]
		htim2.Init.Period = 4294967295;
 8004c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ce0 <MX_TIM2_Init+0xa4>)
 8004c70:	f04f 32ff 	mov.w	r2, #4294967295
 8004c74:	60da      	str	r2, [r3, #12]
		htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c76:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce0 <MX_TIM2_Init+0xa4>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	611a      	str	r2, [r3, #16]
		htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c7c:	4b18      	ldr	r3, [pc, #96]	@ (8004ce0 <MX_TIM2_Init+0xa4>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004c82:	4817      	ldr	r0, [pc, #92]	@ (8004ce0 <MX_TIM2_Init+0xa4>)
 8004c84:	f00e f814 	bl	8012cb0 <HAL_TIM_IC_Init>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <MX_TIM2_Init+0x56>
		{
			Error_Handler();
 8004c8e:	f000 fa99 	bl	80051c4 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c92:	2300      	movs	r3, #0
 8004c94:	617b      	str	r3, [r7, #20]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c96:	2300      	movs	r3, #0
 8004c98:	61fb      	str	r3, [r7, #28]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004c9a:	f107 0314 	add.w	r3, r7, #20
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	480f      	ldr	r0, [pc, #60]	@ (8004ce0 <MX_TIM2_Init+0xa4>)
 8004ca2:	f00f fb8f 	bl	80143c4 <HAL_TIMEx_MasterConfigSynchronization>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <MX_TIM2_Init+0x74>
		{
			Error_Handler();
 8004cac:	f000 fa8a 	bl	80051c4 <Error_Handler>
		}
		sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	607b      	str	r3, [r7, #4]
		sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	60bb      	str	r3, [r7, #8]
		sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60fb      	str	r3, [r7, #12]
		sConfigIC.ICFilter = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	613b      	str	r3, [r7, #16]
		if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004cc0:	1d3b      	adds	r3, r7, #4
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4806      	ldr	r0, [pc, #24]	@ (8004ce0 <MX_TIM2_Init+0xa4>)
 8004cc8:	f00e facc 	bl	8013264 <HAL_TIM_IC_ConfigChannel>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <MX_TIM2_Init+0x9a>
		{
			Error_Handler();
 8004cd2:	f000 fa77 	bl	80051c4 <Error_Handler>
		}
		/* USER CODE BEGIN TIM2_Init 2 */

		/* USER CODE END TIM2_Init 2 */

	}
 8004cd6:	bf00      	nop
 8004cd8:	3720      	adds	r7, #32
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	200004b8 	.word	0x200004b8

08004ce4 <MX_TIM3_Init>:
	 * @brief TIM3 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM3_Init(void)
	{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b090      	sub	sp, #64	@ 0x40
 8004ce8:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM3_Init 0 */

		/* USER CODE END TIM3_Init 0 */

		TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004cea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	605a      	str	r2, [r3, #4]
 8004cf4:	609a      	str	r2, [r3, #8]
 8004cf6:	60da      	str	r2, [r3, #12]
 8004cf8:	611a      	str	r2, [r3, #16]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cfa:	f107 0320 	add.w	r3, r7, #32
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	605a      	str	r2, [r3, #4]
 8004d04:	609a      	str	r2, [r3, #8]
		TIM_OC_InitTypeDef sConfigOC = {0};
 8004d06:	1d3b      	adds	r3, r7, #4
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	605a      	str	r2, [r3, #4]
 8004d0e:	609a      	str	r2, [r3, #8]
 8004d10:	60da      	str	r2, [r3, #12]
 8004d12:	611a      	str	r2, [r3, #16]
 8004d14:	615a      	str	r2, [r3, #20]
 8004d16:	619a      	str	r2, [r3, #24]

		/* USER CODE BEGIN TIM3_Init 1 */

		/* USER CODE END TIM3_Init 1 */
		htim3.Instance = TIM3;
 8004d18:	4b2c      	ldr	r3, [pc, #176]	@ (8004dcc <MX_TIM3_Init+0xe8>)
 8004d1a:	4a2d      	ldr	r2, [pc, #180]	@ (8004dd0 <MX_TIM3_Init+0xec>)
 8004d1c:	601a      	str	r2, [r3, #0]
		htim3.Init.Prescaler = 0;
 8004d1e:	4b2b      	ldr	r3, [pc, #172]	@ (8004dcc <MX_TIM3_Init+0xe8>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	605a      	str	r2, [r3, #4]
		htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d24:	4b29      	ldr	r3, [pc, #164]	@ (8004dcc <MX_TIM3_Init+0xe8>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	609a      	str	r2, [r3, #8]
		htim3.Init.Period = 31;
 8004d2a:	4b28      	ldr	r3, [pc, #160]	@ (8004dcc <MX_TIM3_Init+0xe8>)
 8004d2c:	221f      	movs	r2, #31
 8004d2e:	60da      	str	r2, [r3, #12]
		htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d30:	4b26      	ldr	r3, [pc, #152]	@ (8004dcc <MX_TIM3_Init+0xe8>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	611a      	str	r2, [r3, #16]
		htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d36:	4b25      	ldr	r3, [pc, #148]	@ (8004dcc <MX_TIM3_Init+0xe8>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004d3c:	4823      	ldr	r0, [pc, #140]	@ (8004dcc <MX_TIM3_Init+0xe8>)
 8004d3e:	f00d fad3 	bl	80122e8 <HAL_TIM_Base_Init>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <MX_TIM3_Init+0x68>
		{
			Error_Handler();
 8004d48:	f000 fa3c 	bl	80051c4 <Error_Handler>
		}
		if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004d4c:	481f      	ldr	r0, [pc, #124]	@ (8004dcc <MX_TIM3_Init+0xe8>)
 8004d4e:	f00d fdb1 	bl	80128b4 <HAL_TIM_PWM_Init>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d001      	beq.n	8004d5c <MX_TIM3_Init+0x78>
		{
			Error_Handler();
 8004d58:	f000 fa34 	bl	80051c4 <Error_Handler>
		}
		sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8004d5c:	2307      	movs	r3, #7
 8004d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8004d60:	2330      	movs	r3, #48	@ 0x30
 8004d62:	633b      	str	r3, [r7, #48]	@ 0x30
		if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8004d64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4818      	ldr	r0, [pc, #96]	@ (8004dcc <MX_TIM3_Init+0xe8>)
 8004d6c:	f00e fcf3 	bl	8013756 <HAL_TIM_SlaveConfigSynchro>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <MX_TIM3_Init+0x96>
		{
			Error_Handler();
 8004d76:	f000 fa25 	bl	80051c4 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	623b      	str	r3, [r7, #32]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004d82:	f107 0320 	add.w	r3, r7, #32
 8004d86:	4619      	mov	r1, r3
 8004d88:	4810      	ldr	r0, [pc, #64]	@ (8004dcc <MX_TIM3_Init+0xe8>)
 8004d8a:	f00f fb1b 	bl	80143c4 <HAL_TIMEx_MasterConfigSynchronization>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <MX_TIM3_Init+0xb4>
		{
			Error_Handler();
 8004d94:	f000 fa16 	bl	80051c4 <Error_Handler>
		}
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d98:	2360      	movs	r3, #96	@ 0x60
 8004d9a:	607b      	str	r3, [r7, #4]
		sConfigOC.Pulse = 15;
 8004d9c:	230f      	movs	r3, #15
 8004d9e:	60bb      	str	r3, [r7, #8]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004da0:	2300      	movs	r3, #0
 8004da2:	60fb      	str	r3, [r7, #12]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]
		if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004da8:	1d3b      	adds	r3, r7, #4
 8004daa:	2208      	movs	r2, #8
 8004dac:	4619      	mov	r1, r3
 8004dae:	4807      	ldr	r0, [pc, #28]	@ (8004dcc <MX_TIM3_Init+0xe8>)
 8004db0:	f00e faf4 	bl	801339c <HAL_TIM_PWM_ConfigChannel>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <MX_TIM3_Init+0xda>
		{
			Error_Handler();
 8004dba:	f000 fa03 	bl	80051c4 <Error_Handler>
		}
		/* USER CODE BEGIN TIM3_Init 2 */

		/* USER CODE END TIM3_Init 2 */
		HAL_TIM_MspPostInit(&htim3);
 8004dbe:	4803      	ldr	r0, [pc, #12]	@ (8004dcc <MX_TIM3_Init+0xe8>)
 8004dc0:	f002 fc84 	bl	80076cc <HAL_TIM_MspPostInit>

	}
 8004dc4:	bf00      	nop
 8004dc6:	3740      	adds	r7, #64	@ 0x40
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20000504 	.word	0x20000504
 8004dd0:	40000400 	.word	0x40000400

08004dd4 <MX_TIM4_Init>:
	 * @brief TIM4 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM4_Init(void)
	{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08e      	sub	sp, #56	@ 0x38
 8004dd8:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM4_Init 0 */

		/* USER CODE END TIM4_Init 0 */

		TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004dda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	605a      	str	r2, [r3, #4]
 8004de4:	609a      	str	r2, [r3, #8]
 8004de6:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004de8:	f107 031c 	add.w	r3, r7, #28
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	605a      	str	r2, [r3, #4]
 8004df2:	609a      	str	r2, [r3, #8]
		TIM_OC_InitTypeDef sConfigOC = {0};
 8004df4:	463b      	mov	r3, r7
 8004df6:	2200      	movs	r2, #0
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	605a      	str	r2, [r3, #4]
 8004dfc:	609a      	str	r2, [r3, #8]
 8004dfe:	60da      	str	r2, [r3, #12]
 8004e00:	611a      	str	r2, [r3, #16]
 8004e02:	615a      	str	r2, [r3, #20]
 8004e04:	619a      	str	r2, [r3, #24]

		/* USER CODE BEGIN TIM4_Init 1 */

		/* USER CODE END TIM4_Init 1 */
		htim4.Instance = TIM4;
 8004e06:	4b2b      	ldr	r3, [pc, #172]	@ (8004eb4 <MX_TIM4_Init+0xe0>)
 8004e08:	4a2b      	ldr	r2, [pc, #172]	@ (8004eb8 <MX_TIM4_Init+0xe4>)
 8004e0a:	601a      	str	r2, [r3, #0]
		htim4.Init.Prescaler = 99;
 8004e0c:	4b29      	ldr	r3, [pc, #164]	@ (8004eb4 <MX_TIM4_Init+0xe0>)
 8004e0e:	2263      	movs	r2, #99	@ 0x63
 8004e10:	605a      	str	r2, [r3, #4]
		htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e12:	4b28      	ldr	r3, [pc, #160]	@ (8004eb4 <MX_TIM4_Init+0xe0>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	609a      	str	r2, [r3, #8]
		htim4.Init.Period = 999;
 8004e18:	4b26      	ldr	r3, [pc, #152]	@ (8004eb4 <MX_TIM4_Init+0xe0>)
 8004e1a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004e1e:	60da      	str	r2, [r3, #12]
		htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e20:	4b24      	ldr	r3, [pc, #144]	@ (8004eb4 <MX_TIM4_Init+0xe0>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	611a      	str	r2, [r3, #16]
		htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e26:	4b23      	ldr	r3, [pc, #140]	@ (8004eb4 <MX_TIM4_Init+0xe0>)
 8004e28:	2280      	movs	r2, #128	@ 0x80
 8004e2a:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004e2c:	4821      	ldr	r0, [pc, #132]	@ (8004eb4 <MX_TIM4_Init+0xe0>)
 8004e2e:	f00d fa5b 	bl	80122e8 <HAL_TIM_Base_Init>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <MX_TIM4_Init+0x68>
		{
			Error_Handler();
 8004e38:	f000 f9c4 	bl	80051c4 <Error_Handler>
		}
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e40:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004e42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004e46:	4619      	mov	r1, r3
 8004e48:	481a      	ldr	r0, [pc, #104]	@ (8004eb4 <MX_TIM4_Init+0xe0>)
 8004e4a:	f00e fbbb 	bl	80135c4 <HAL_TIM_ConfigClockSource>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <MX_TIM4_Init+0x84>
		{
			Error_Handler();
 8004e54:	f000 f9b6 	bl	80051c4 <Error_Handler>
		}
		if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8004e58:	4816      	ldr	r0, [pc, #88]	@ (8004eb4 <MX_TIM4_Init+0xe0>)
 8004e5a:	f00d fa9c 	bl	8012396 <HAL_TIM_OC_Init>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <MX_TIM4_Init+0x94>
		{
			Error_Handler();
 8004e64:	f000 f9ae 	bl	80051c4 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004e68:	2320      	movs	r3, #32
 8004e6a:	61fb      	str	r3, [r7, #28]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004e70:	f107 031c 	add.w	r3, r7, #28
 8004e74:	4619      	mov	r1, r3
 8004e76:	480f      	ldr	r0, [pc, #60]	@ (8004eb4 <MX_TIM4_Init+0xe0>)
 8004e78:	f00f faa4 	bl	80143c4 <HAL_TIMEx_MasterConfigSynchronization>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <MX_TIM4_Init+0xb2>
		{
			Error_Handler();
 8004e82:	f000 f99f 	bl	80051c4 <Error_Handler>
		}
		sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004e86:	2300      	movs	r3, #0
 8004e88:	603b      	str	r3, [r7, #0]
		sConfigOC.Pulse = 0;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	607b      	str	r3, [r7, #4]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60bb      	str	r3, [r7, #8]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e92:	2300      	movs	r3, #0
 8004e94:	613b      	str	r3, [r7, #16]
		if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004e96:	463b      	mov	r3, r7
 8004e98:	2208      	movs	r2, #8
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4805      	ldr	r0, [pc, #20]	@ (8004eb4 <MX_TIM4_Init+0xe0>)
 8004e9e:	f00e f967 	bl	8013170 <HAL_TIM_OC_ConfigChannel>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <MX_TIM4_Init+0xd8>
		{
			Error_Handler();
 8004ea8:	f000 f98c 	bl	80051c4 <Error_Handler>
		}
		/* USER CODE BEGIN TIM4_Init 2 */

		/* USER CODE END TIM4_Init 2 */

	}
 8004eac:	bf00      	nop
 8004eae:	3738      	adds	r7, #56	@ 0x38
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	20000550 	.word	0x20000550
 8004eb8:	40000800 	.word	0x40000800

08004ebc <MX_UART4_Init>:
	 * @brief UART4 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_UART4_Init(void)
	{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
		/* USER CODE END UART4_Init 0 */

		/* USER CODE BEGIN UART4_Init 1 */

		/* USER CODE END UART4_Init 1 */
		huart4.Instance = UART4;
 8004ec0:	4b14      	ldr	r3, [pc, #80]	@ (8004f14 <MX_UART4_Init+0x58>)
 8004ec2:	4a15      	ldr	r2, [pc, #84]	@ (8004f18 <MX_UART4_Init+0x5c>)
 8004ec4:	601a      	str	r2, [r3, #0]
		huart4.Init.BaudRate = 115200;
 8004ec6:	4b13      	ldr	r3, [pc, #76]	@ (8004f14 <MX_UART4_Init+0x58>)
 8004ec8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004ecc:	605a      	str	r2, [r3, #4]
		huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004ece:	4b11      	ldr	r3, [pc, #68]	@ (8004f14 <MX_UART4_Init+0x58>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	609a      	str	r2, [r3, #8]
		huart4.Init.StopBits = UART_STOPBITS_1;
 8004ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8004f14 <MX_UART4_Init+0x58>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	60da      	str	r2, [r3, #12]
		huart4.Init.Parity = UART_PARITY_NONE;
 8004eda:	4b0e      	ldr	r3, [pc, #56]	@ (8004f14 <MX_UART4_Init+0x58>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	611a      	str	r2, [r3, #16]
		huart4.Init.Mode = UART_MODE_TX_RX;
 8004ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8004f14 <MX_UART4_Init+0x58>)
 8004ee2:	220c      	movs	r2, #12
 8004ee4:	615a      	str	r2, [r3, #20]
		huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8004f14 <MX_UART4_Init+0x58>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	619a      	str	r2, [r3, #24]
		huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004eec:	4b09      	ldr	r3, [pc, #36]	@ (8004f14 <MX_UART4_Init+0x58>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	61da      	str	r2, [r3, #28]
		huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ef2:	4b08      	ldr	r3, [pc, #32]	@ (8004f14 <MX_UART4_Init+0x58>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	621a      	str	r2, [r3, #32]
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ef8:	4b06      	ldr	r3, [pc, #24]	@ (8004f14 <MX_UART4_Init+0x58>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	625a      	str	r2, [r3, #36]	@ 0x24
		if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8004efe:	4805      	ldr	r0, [pc, #20]	@ (8004f14 <MX_UART4_Init+0x58>)
 8004f00:	f00f fbb4 	bl	801466c <HAL_HalfDuplex_Init>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <MX_UART4_Init+0x52>
		{
			Error_Handler();
 8004f0a:	f000 f95b 	bl	80051c4 <Error_Handler>
		}
		/* USER CODE BEGIN UART4_Init 2 */

		/* USER CODE END UART4_Init 2 */

	}
 8004f0e:	bf00      	nop
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	2000059c 	.word	0x2000059c
 8004f18:	40004c00 	.word	0x40004c00

08004f1c <MX_USART1_UART_Init>:
	 * @brief USART1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_USART1_UART_Init(void)
	{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
		/* USER CODE END USART1_Init 0 */

		/* USER CODE BEGIN USART1_Init 1 */

		/* USER CODE END USART1_Init 1 */
		huart1.Instance = USART1;
 8004f20:	4b14      	ldr	r3, [pc, #80]	@ (8004f74 <MX_USART1_UART_Init+0x58>)
 8004f22:	4a15      	ldr	r2, [pc, #84]	@ (8004f78 <MX_USART1_UART_Init+0x5c>)
 8004f24:	601a      	str	r2, [r3, #0]
		huart1.Init.BaudRate = 115200;
 8004f26:	4b13      	ldr	r3, [pc, #76]	@ (8004f74 <MX_USART1_UART_Init+0x58>)
 8004f28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004f2c:	605a      	str	r2, [r3, #4]
		huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004f2e:	4b11      	ldr	r3, [pc, #68]	@ (8004f74 <MX_USART1_UART_Init+0x58>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	609a      	str	r2, [r3, #8]
		huart1.Init.StopBits = UART_STOPBITS_1;
 8004f34:	4b0f      	ldr	r3, [pc, #60]	@ (8004f74 <MX_USART1_UART_Init+0x58>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	60da      	str	r2, [r3, #12]
		huart1.Init.Parity = UART_PARITY_NONE;
 8004f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004f74 <MX_USART1_UART_Init+0x58>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	611a      	str	r2, [r3, #16]
		huart1.Init.Mode = UART_MODE_TX_RX;
 8004f40:	4b0c      	ldr	r3, [pc, #48]	@ (8004f74 <MX_USART1_UART_Init+0x58>)
 8004f42:	220c      	movs	r2, #12
 8004f44:	615a      	str	r2, [r3, #20]
		huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8004f46:	4b0b      	ldr	r3, [pc, #44]	@ (8004f74 <MX_USART1_UART_Init+0x58>)
 8004f48:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004f4c:	619a      	str	r2, [r3, #24]
		huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f4e:	4b09      	ldr	r3, [pc, #36]	@ (8004f74 <MX_USART1_UART_Init+0x58>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	61da      	str	r2, [r3, #28]
		huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f54:	4b07      	ldr	r3, [pc, #28]	@ (8004f74 <MX_USART1_UART_Init+0x58>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	621a      	str	r2, [r3, #32]
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f5a:	4b06      	ldr	r3, [pc, #24]	@ (8004f74 <MX_USART1_UART_Init+0x58>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	625a      	str	r2, [r3, #36]	@ 0x24
		if (HAL_UART_Init(&huart1) != HAL_OK)
 8004f60:	4804      	ldr	r0, [pc, #16]	@ (8004f74 <MX_USART1_UART_Init+0x58>)
 8004f62:	f00f fb35 	bl	80145d0 <HAL_UART_Init>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <MX_USART1_UART_Init+0x54>
		{
			Error_Handler();
 8004f6c:	f000 f92a 	bl	80051c4 <Error_Handler>
		}
		/* USER CODE BEGIN USART1_Init 2 */

		/* USER CODE END USART1_Init 2 */

	}
 8004f70:	bf00      	nop
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	20000624 	.word	0x20000624
 8004f78:	40013800 	.word	0x40013800

08004f7c <MX_DMA_Init>:

	/**
	 * Enable DMA controller clock
	 */
	static void MX_DMA_Init(void)
	{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0

		/* DMA controller clock enable */
		__HAL_RCC_DMA1_CLK_ENABLE();
 8004f82:	4b14      	ldr	r3, [pc, #80]	@ (8004fd4 <MX_DMA_Init+0x58>)
 8004f84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f86:	4a13      	ldr	r2, [pc, #76]	@ (8004fd4 <MX_DMA_Init+0x58>)
 8004f88:	f043 0301 	orr.w	r3, r3, #1
 8004f8c:	6493      	str	r3, [r2, #72]	@ 0x48
 8004f8e:	4b11      	ldr	r3, [pc, #68]	@ (8004fd4 <MX_DMA_Init+0x58>)
 8004f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	607b      	str	r3, [r7, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]

		/* DMA interrupt init */
		/* DMA1_Channel1_IRQn interrupt configuration */
		HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	200b      	movs	r0, #11
 8004fa0:	f007 fb6d 	bl	800c67e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004fa4:	200b      	movs	r0, #11
 8004fa6:	f007 fb86 	bl	800c6b6 <HAL_NVIC_EnableIRQ>
		/* DMA1_Channel4_IRQn interrupt configuration */
		HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004faa:	2200      	movs	r2, #0
 8004fac:	2100      	movs	r1, #0
 8004fae:	200e      	movs	r0, #14
 8004fb0:	f007 fb65 	bl	800c67e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004fb4:	200e      	movs	r0, #14
 8004fb6:	f007 fb7e 	bl	800c6b6 <HAL_NVIC_EnableIRQ>
		/* DMA1_Channel5_IRQn interrupt configuration */
		HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8004fba:	2200      	movs	r2, #0
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	200f      	movs	r0, #15
 8004fc0:	f007 fb5d 	bl	800c67e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004fc4:	200f      	movs	r0, #15
 8004fc6:	f007 fb76 	bl	800c6b6 <HAL_NVIC_EnableIRQ>

	}
 8004fca:	bf00      	nop
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40021000 	.word	0x40021000

08004fd8 <MX_GPIO_Init>:
	 * @brief GPIO Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_GPIO_Init(void)
	{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08a      	sub	sp, #40	@ 0x28
 8004fdc:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fde:	f107 0314 	add.w	r3, r7, #20
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	605a      	str	r2, [r3, #4]
 8004fe8:	609a      	str	r2, [r3, #8]
 8004fea:	60da      	str	r2, [r3, #12]
 8004fec:	611a      	str	r2, [r3, #16]
		/* USER CODE BEGIN MX_GPIO_Init_1 */
		/* USER CODE END MX_GPIO_Init_1 */

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8004fee:	4b71      	ldr	r3, [pc, #452]	@ (80051b4 <MX_GPIO_Init+0x1dc>)
 8004ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ff2:	4a70      	ldr	r2, [pc, #448]	@ (80051b4 <MX_GPIO_Init+0x1dc>)
 8004ff4:	f043 0304 	orr.w	r3, r3, #4
 8004ff8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ffa:	4b6e      	ldr	r3, [pc, #440]	@ (80051b4 <MX_GPIO_Init+0x1dc>)
 8004ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	613b      	str	r3, [r7, #16]
 8005004:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOH_CLK_ENABLE();
 8005006:	4b6b      	ldr	r3, [pc, #428]	@ (80051b4 <MX_GPIO_Init+0x1dc>)
 8005008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800500a:	4a6a      	ldr	r2, [pc, #424]	@ (80051b4 <MX_GPIO_Init+0x1dc>)
 800500c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005010:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005012:	4b68      	ldr	r3, [pc, #416]	@ (80051b4 <MX_GPIO_Init+0x1dc>)
 8005014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800501e:	4b65      	ldr	r3, [pc, #404]	@ (80051b4 <MX_GPIO_Init+0x1dc>)
 8005020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005022:	4a64      	ldr	r2, [pc, #400]	@ (80051b4 <MX_GPIO_Init+0x1dc>)
 8005024:	f043 0301 	orr.w	r3, r3, #1
 8005028:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800502a:	4b62      	ldr	r3, [pc, #392]	@ (80051b4 <MX_GPIO_Init+0x1dc>)
 800502c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	60bb      	str	r3, [r7, #8]
 8005034:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8005036:	4b5f      	ldr	r3, [pc, #380]	@ (80051b4 <MX_GPIO_Init+0x1dc>)
 8005038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800503a:	4a5e      	ldr	r2, [pc, #376]	@ (80051b4 <MX_GPIO_Init+0x1dc>)
 800503c:	f043 0302 	orr.w	r3, r3, #2
 8005040:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005042:	4b5c      	ldr	r3, [pc, #368]	@ (80051b4 <MX_GPIO_Init+0x1dc>)
 8005044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	607b      	str	r3, [r7, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800504e:	4b59      	ldr	r3, [pc, #356]	@ (80051b4 <MX_GPIO_Init+0x1dc>)
 8005050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005052:	4a58      	ldr	r2, [pc, #352]	@ (80051b4 <MX_GPIO_Init+0x1dc>)
 8005054:	f043 0308 	orr.w	r3, r3, #8
 8005058:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800505a:	4b56      	ldr	r3, [pc, #344]	@ (80051b4 <MX_GPIO_Init+0x1dc>)
 800505c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	683b      	ldr	r3, [r7, #0]

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(DBG_GPIO_Port, DBG_Pin, GPIO_PIN_RESET);
 8005066:	2200      	movs	r2, #0
 8005068:	2108      	movs	r1, #8
 800506a:	4853      	ldr	r0, [pc, #332]	@ (80051b8 <MX_GPIO_Init+0x1e0>)
 800506c:	f009 f82a 	bl	800e0c4 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 8005070:	2201      	movs	r2, #1
 8005072:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005076:	4851      	ldr	r0, [pc, #324]	@ (80051bc <MX_GPIO_Init+0x1e4>)
 8005078:	f009 f824 	bl	800e0c4 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOC, FLASH_nWP_Pin|FLASH_nRESET_Pin, GPIO_PIN_SET);
 800507c:	2201      	movs	r2, #1
 800507e:	21c0      	movs	r1, #192	@ 0xc0
 8005080:	484d      	ldr	r0, [pc, #308]	@ (80051b8 <MX_GPIO_Init+0x1e0>)
 8005082:	f009 f81f 	bl	800e0c4 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOA, LTE_POWER_ON_Pin|LTE_RESET_Pin, GPIO_PIN_SET);
 8005086:	2201      	movs	r2, #1
 8005088:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800508c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005090:	f009 f818 	bl	800e0c4 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8005094:	2200      	movs	r2, #0
 8005096:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800509a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800509e:	f009 f811 	bl	800e0c4 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(DTR_GPIO_Port, DTR_Pin, GPIO_PIN_RESET);
 80050a2:	2200      	movs	r2, #0
 80050a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80050a8:	4844      	ldr	r0, [pc, #272]	@ (80051bc <MX_GPIO_Init+0x1e4>)
 80050aa:	f009 f80b 	bl	800e0c4 <HAL_GPIO_WritePin>

		/*Configure GPIO pins : USR_BTN_Pin PC4 */
		GPIO_InitStruct.Pin = USR_BTN_Pin|GPIO_PIN_4;
 80050ae:	f242 0310 	movw	r3, #8208	@ 0x2010
 80050b2:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80050b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80050b8:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ba:	2300      	movs	r3, #0
 80050bc:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050be:	f107 0314 	add.w	r3, r7, #20
 80050c2:	4619      	mov	r1, r3
 80050c4:	483c      	ldr	r0, [pc, #240]	@ (80051b8 <MX_GPIO_Init+0x1e0>)
 80050c6:	f008 fe53 	bl	800dd70 <HAL_GPIO_Init>

		/*Configure GPIO pins : DBG_Pin FLASH_nWP_Pin FLASH_nRESET_Pin */
		GPIO_InitStruct.Pin = DBG_Pin|FLASH_nWP_Pin|FLASH_nRESET_Pin;
 80050ca:	23c8      	movs	r3, #200	@ 0xc8
 80050cc:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050ce:	2301      	movs	r3, #1
 80050d0:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050d6:	2300      	movs	r3, #0
 80050d8:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050da:	f107 0314 	add.w	r3, r7, #20
 80050de:	4619      	mov	r1, r3
 80050e0:	4835      	ldr	r0, [pc, #212]	@ (80051b8 <MX_GPIO_Init+0x1e0>)
 80050e2:	f008 fe45 	bl	800dd70 <HAL_GPIO_Init>

		/*Configure GPIO pin : PA3 */
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 80050e6:	2308      	movs	r3, #8
 80050e8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050ea:	2300      	movs	r3, #0
 80050ec:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050f2:	f107 0314 	add.w	r3, r7, #20
 80050f6:	4619      	mov	r1, r3
 80050f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80050fc:	f008 fe38 	bl	800dd70 <HAL_GPIO_Init>

		/*Configure GPIO pins : FLASH_nCS_Pin DTR_Pin */
		GPIO_InitStruct.Pin = FLASH_nCS_Pin|DTR_Pin;
 8005100:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8005104:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005106:	2301      	movs	r3, #1
 8005108:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800510a:	2300      	movs	r3, #0
 800510c:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800510e:	2300      	movs	r3, #0
 8005110:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005112:	f107 0314 	add.w	r3, r7, #20
 8005116:	4619      	mov	r1, r3
 8005118:	4828      	ldr	r0, [pc, #160]	@ (80051bc <MX_GPIO_Init+0x1e4>)
 800511a:	f008 fe29 	bl	800dd70 <HAL_GPIO_Init>

		/*Configure GPIO pins : LTE_POWER_ON_Pin LTE_RESET_Pin */
		GPIO_InitStruct.Pin = LTE_POWER_ON_Pin|LTE_RESET_Pin;
 800511e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005122:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005124:	2311      	movs	r3, #17
 8005126:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005128:	2300      	movs	r3, #0
 800512a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800512c:	2300      	movs	r3, #0
 800512e:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005130:	f107 0314 	add.w	r3, r7, #20
 8005134:	4619      	mov	r1, r3
 8005136:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800513a:	f008 fe19 	bl	800dd70 <HAL_GPIO_Init>

		/*Configure GPIO pin : ACC_nCS_Pin */
		GPIO_InitStruct.Pin = ACC_nCS_Pin;
 800513e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005142:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005144:	2301      	movs	r3, #1
 8005146:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005148:	2300      	movs	r3, #0
 800514a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800514c:	2300      	movs	r3, #0
 800514e:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(ACC_nCS_GPIO_Port, &GPIO_InitStruct);
 8005150:	f107 0314 	add.w	r3, r7, #20
 8005154:	4619      	mov	r1, r3
 8005156:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800515a:	f008 fe09 	bl	800dd70 <HAL_GPIO_Init>

		/*Configure GPIO pin : PD2 */
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 800515e:	2304      	movs	r3, #4
 8005160:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005162:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005166:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005168:	2300      	movs	r3, #0
 800516a:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800516c:	f107 0314 	add.w	r3, r7, #20
 8005170:	4619      	mov	r1, r3
 8005172:	4813      	ldr	r0, [pc, #76]	@ (80051c0 <MX_GPIO_Init+0x1e8>)
 8005174:	f008 fdfc 	bl	800dd70 <HAL_GPIO_Init>

		/*Configure GPIO pin : DCD_Pin */
		GPIO_InitStruct.Pin = DCD_Pin;
 8005178:	2320      	movs	r3, #32
 800517a:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800517c:	2300      	movs	r3, #0
 800517e:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005180:	2300      	movs	r3, #0
 8005182:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(DCD_GPIO_Port, &GPIO_InitStruct);
 8005184:	f107 0314 	add.w	r3, r7, #20
 8005188:	4619      	mov	r1, r3
 800518a:	480c      	ldr	r0, [pc, #48]	@ (80051bc <MX_GPIO_Init+0x1e4>)
 800518c:	f008 fdf0 	bl	800dd70 <HAL_GPIO_Init>

		/*Configure GPIO pin : PB8 */
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005190:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005194:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005196:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800519a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519c:	2300      	movs	r3, #0
 800519e:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051a0:	f107 0314 	add.w	r3, r7, #20
 80051a4:	4619      	mov	r1, r3
 80051a6:	4805      	ldr	r0, [pc, #20]	@ (80051bc <MX_GPIO_Init+0x1e4>)
 80051a8:	f008 fde2 	bl	800dd70 <HAL_GPIO_Init>

		/* USER CODE BEGIN MX_GPIO_Init_2 */
		/* USER CODE END MX_GPIO_Init_2 */
	}
 80051ac:	bf00      	nop
 80051ae:	3728      	adds	r7, #40	@ 0x28
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40021000 	.word	0x40021000
 80051b8:	48000800 	.word	0x48000800
 80051bc:	48000400 	.word	0x48000400
 80051c0:	48000c00 	.word	0x48000c00

080051c4 <Error_Handler>:
	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval None
	 */
	void Error_Handler(void)
	{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80051c8:	b672      	cpsid	i
}
 80051ca:	bf00      	nop
		/* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 80051cc:	bf00      	nop
 80051ce:	e7fd      	b.n	80051cc <Error_Handler+0x8>

080051d0 <OTA_Init>:
#include "string.h"


/*-----INIZIALIZZAZIONE OTA-----*/
int OTA_Init(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 80051d6:	2300      	movs	r3, #0
 80051d8:	71fb      	strb	r3, [r7, #7]

	if (sys.OTA_File_isOpen)
 80051da:	4b10      	ldr	r3, [pc, #64]	@ (800521c <OTA_Init+0x4c>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <OTA_Init+0x1e>
	{
		f_close(&sys.OTA_File);
 80051e8:	480d      	ldr	r0, [pc, #52]	@ (8005220 <OTA_Init+0x50>)
 80051ea:	f004 ff67 	bl	800a0bc <f_close>
	}

	sys.OTA_File_isOpen = 0;
 80051ee:	4a0b      	ldr	r2, [pc, #44]	@ (800521c <OTA_Init+0x4c>)
 80051f0:	7813      	ldrb	r3, [r2, #0]
 80051f2:	f023 0301 	bic.w	r3, r3, #1
 80051f6:	7013      	strb	r3, [r2, #0]

	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ | FA_WRITE | FA_CREATE_ALWAYS);
 80051f8:	220b      	movs	r2, #11
 80051fa:	490a      	ldr	r1, [pc, #40]	@ (8005224 <OTA_Init+0x54>)
 80051fc:	4808      	ldr	r0, [pc, #32]	@ (8005220 <OTA_Init+0x50>)
 80051fe:	f004 fa69 	bl	80096d4 <f_open>
 8005202:	4603      	mov	r3, r0
 8005204:	71fb      	strb	r3, [r7, #7]

	if (fRes != FR_OK)
 8005206:	79fb      	ldrb	r3, [r7, #7]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d002      	beq.n	8005212 <OTA_Init+0x42>
	{
		return -1;
 800520c:	f04f 33ff 	mov.w	r3, #4294967295
 8005210:	e000      	b.n	8005214 <OTA_Init+0x44>
	}

	return 0;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	20000740 	.word	0x20000740
 8005220:	20000744 	.word	0x20000744
 8005224:	0801741c 	.word	0x0801741c

08005228 <OTA_Receive>:

/*-----RICEZIONE FILE OTA-----*/
int OTA_Receive(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	f5ad 6d98 	sub.w	sp, sp, #1216	@ 0x4c0
 800522e:	af00      	add	r7, sp, #0
	uint8_t rx_buffer[1200];
	UINT bytes_written = 0;
 8005230:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8005234:	f5a3 6398 	sub.w	r3, r3, #1216	@ 0x4c0
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
	
	SIM_Wait_Response("+CIPRXGET: 1");
 800523c:	4831      	ldr	r0, [pc, #196]	@ (8005304 <OTA_Receive+0xdc>)
 800523e:	f7fd f831 	bl	80022a4 <SIM_Wait_Response>

	while(1)
	{
		SIM_Send_Command("AT+CIPRXGET=2,1024\r");
 8005242:	4831      	ldr	r0, [pc, #196]	@ (8005308 <OTA_Receive+0xe0>)
 8005244:	f7fc fbf4 	bl	8001a30 <SIM_Send_Command>
		SIM_Receive_Response((char*)rx_buffer);
 8005248:	1d3b      	adds	r3, r7, #4
 800524a:	4618      	mov	r0, r3
 800524c:	f7fc fc1c 	bl	8001a88 <SIM_Receive_Response>

		char *info = strstr((char*)rx_buffer, "+CIPRXGET: 2,");
 8005250:	1d3b      	adds	r3, r7, #4
 8005252:	492e      	ldr	r1, [pc, #184]	@ (800530c <OTA_Receive+0xe4>)
 8005254:	4618      	mov	r0, r3
 8005256:	f010 fe41 	bl	8015edc <strstr>
 800525a:	f8c7 04bc 	str.w	r0, [r7, #1212]	@ 0x4bc
		if (info) 
 800525e:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0ed      	beq.n	8005242 <OTA_Receive+0x1a>
		{
			int actual_len = atoi(info + strlen("+CIPRXGET: 2,"));
 8005266:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800526a:	330d      	adds	r3, #13
 800526c:	4618      	mov	r0, r3
 800526e:	f010 fd11 	bl	8015c94 <atoi>
 8005272:	f8c7 04b8 	str.w	r0, [r7, #1208]	@ 0x4b8
			char *data_start = strstr(info, "\r\n");
 8005276:	4926      	ldr	r1, [pc, #152]	@ (8005310 <OTA_Receive+0xe8>)
 8005278:	f8d7 04bc 	ldr.w	r0, [r7, #1212]	@ 0x4bc
 800527c:	f010 fe2e 	bl	8015edc <strstr>
 8005280:	f8c7 04b4 	str.w	r0, [r7, #1204]	@ 0x4b4
			if (actual_len == 0)
 8005284:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8005288:	2b00      	cmp	r3, #0
 800528a:	d02b      	beq.n	80052e4 <OTA_Receive+0xbc>
            {
                break;           // Fine file
            }
			if (data_start) 
 800528c:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	@ 0x4b4
 8005290:	2b00      	cmp	r3, #0
 8005292:	d021      	beq.n	80052d8 <OTA_Receive+0xb0>
			{
				data_start += 2; // Salta "\r\n"
 8005294:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	@ 0x4b4
 8005298:	3302      	adds	r3, #2
 800529a:	f8c7 34b4 	str.w	r3, [r7, #1204]	@ 0x4b4
				SIM_Wait_Response("OK");
 800529e:	481d      	ldr	r0, [pc, #116]	@ (8005314 <OTA_Receive+0xec>)
 80052a0:	f7fd f800 	bl	80022a4 <SIM_Wait_Response>
				SIM_Wait_Response("+CIPRXGET: 1");
 80052a4:	4817      	ldr	r0, [pc, #92]	@ (8005304 <OTA_Receive+0xdc>)
 80052a6:	f7fc fffd 	bl	80022a4 <SIM_Wait_Response>
				f_write(&sys.OTA_File, data_start, actual_len, &bytes_written);
 80052aa:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	@ 0x4b8
 80052ae:	463b      	mov	r3, r7
 80052b0:	f8d7 14b4 	ldr.w	r1, [r7, #1204]	@ 0x4b4
 80052b4:	4818      	ldr	r0, [pc, #96]	@ (8005318 <OTA_Receive+0xf0>)
 80052b6:	f004 fcf8 	bl	8009caa <f_write>
				if(bytes_written != actual_len)
 80052ba:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 80052be:	f5a3 6398 	sub.w	r3, r3, #1216	@ 0x4c0
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d0ba      	beq.n	8005242 <OTA_Receive+0x1a>
				{
					f_close(&sys.OTA_File);
 80052cc:	4812      	ldr	r0, [pc, #72]	@ (8005318 <OTA_Receive+0xf0>)
 80052ce:	f004 fef5 	bl	800a0bc <f_close>
					return -1; 
 80052d2:	f04f 33ff 	mov.w	r3, #4294967295
 80052d6:	e00f      	b.n	80052f8 <OTA_Receive+0xd0>
				}
			}
			else
			{
				f_close(&sys.OTA_File);
 80052d8:	480f      	ldr	r0, [pc, #60]	@ (8005318 <OTA_Receive+0xf0>)
 80052da:	f004 feef 	bl	800a0bc <f_close>
				return -1; 
 80052de:	f04f 33ff 	mov.w	r3, #4294967295
 80052e2:	e009      	b.n	80052f8 <OTA_Receive+0xd0>
                break;           // Fine file
 80052e4:	bf00      	nop
			}
		}
	}

	f_close(&sys.OTA_File);
 80052e6:	480c      	ldr	r0, [pc, #48]	@ (8005318 <OTA_Receive+0xf0>)
 80052e8:	f004 fee8 	bl	800a0bc <f_close>
    sys.OTA_File_isOpen = 0;
 80052ec:	4a0b      	ldr	r2, [pc, #44]	@ (800531c <OTA_Receive+0xf4>)
 80052ee:	7813      	ldrb	r3, [r2, #0]
 80052f0:	f023 0301 	bic.w	r3, r3, #1
 80052f4:	7013      	strb	r3, [r2, #0]
	return 0;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	f507 6798 	add.w	r7, r7, #1216	@ 0x4c0
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	0801742c 	.word	0x0801742c
 8005308:	0801743c 	.word	0x0801743c
 800530c:	08017450 	.word	0x08017450
 8005310:	08017460 	.word	0x08017460
 8005314:	08017464 	.word	0x08017464
 8005318:	20000744 	.word	0x20000744
 800531c:	20000740 	.word	0x20000740

08005320 <OTA_CRC_Check>:

int OTA_CRC_Check(void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	f5ad 6d86 	sub.w	sp, sp, #1072	@ 0x430
 8005326:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 8005328:	2300      	movs	r3, #0
 800532a:	f887 3423 	strb.w	r3, [r7, #1059]	@ 0x423
	UINT read = 0;
 800532e:	2300      	movs	r3, #0
 8005330:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
	uint16_t ota_crc = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	f8a7 342e 	strh.w	r3, [r7, #1070]	@ 0x42e
	uint8_t rx_buffer[20];
	uint32_t calc_crc = 0;
 800533a:	2300      	movs	r3, #0
 800533c:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428

	SIM_Wait_Response("+CIPRXGET: 1");
 8005340:	484a      	ldr	r0, [pc, #296]	@ (800546c <OTA_CRC_Check+0x14c>)
 8005342:	f7fc ffaf 	bl	80022a4 <SIM_Wait_Response>
	SIM_Send_Command("AT+CIPRXGET=2,2\r");
 8005346:	484a      	ldr	r0, [pc, #296]	@ (8005470 <OTA_CRC_Check+0x150>)
 8005348:	f7fc fb72 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response((char*)rx_buffer);
 800534c:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8005350:	4618      	mov	r0, r3
 8005352:	f7fc fb99 	bl	8001a88 <SIM_Receive_Response>
	char *info = strstr((char*)rx_buffer, "+CIPRXGET: 2,");
 8005356:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 800535a:	4946      	ldr	r1, [pc, #280]	@ (8005474 <OTA_CRC_Check+0x154>)
 800535c:	4618      	mov	r0, r3
 800535e:	f010 fdbd 	bl	8015edc <strstr>
 8005362:	f8c7 041c 	str.w	r0, [r7, #1052]	@ 0x41c

	if (info)
 8005366:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800536a:	2b00      	cmp	r3, #0
 800536c:	d008      	beq.n	8005380 <OTA_CRC_Check+0x60>
	{
		ota_crc = atoi(info + strlen("+CIPRXGET: 2,"));
 800536e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8005372:	330d      	adds	r3, #13
 8005374:	4618      	mov	r0, r3
 8005376:	f010 fc8d 	bl	8015c94 <atoi>
 800537a:	4603      	mov	r3, r0
 800537c:	f8a7 342e 	strh.w	r3, [r7, #1070]	@ 0x42e
	}

	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ);
 8005380:	2201      	movs	r2, #1
 8005382:	493d      	ldr	r1, [pc, #244]	@ (8005478 <OTA_CRC_Check+0x158>)
 8005384:	483d      	ldr	r0, [pc, #244]	@ (800547c <OTA_CRC_Check+0x15c>)
 8005386:	f004 f9a5 	bl	80096d4 <f_open>
 800538a:	4603      	mov	r3, r0
 800538c:	f887 3423 	strb.w	r3, [r7, #1059]	@ 0x423
	if (fRes != FR_OK)
 8005390:	f897 3423 	ldrb.w	r3, [r7, #1059]	@ 0x423
 8005394:	2b00      	cmp	r3, #0
 8005396:	d002      	beq.n	800539e <OTA_CRC_Check+0x7e>
	{
		return -1;
 8005398:	f04f 33ff 	mov.w	r3, #4294967295
 800539c:	e061      	b.n	8005462 <OTA_CRC_Check+0x142>
	}

	uint32_t size = f_size(&sys.OTA_File);
 800539e:	4b38      	ldr	r3, [pc, #224]	@ (8005480 <OTA_CRC_Check+0x160>)
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424
    HAL_CRCEx_Input_Data_Reverse(HCRC, CRC_INPUTDATA_INVERSION_BYTE);
 80053a6:	2120      	movs	r1, #32
 80053a8:	4836      	ldr	r0, [pc, #216]	@ (8005484 <OTA_CRC_Check+0x164>)
 80053aa:	f007 fba3 	bl	800caf4 <HAL_CRCEx_Input_Data_Reverse>
    HAL_CRCEx_Output_Data_Reverse(HCRC, CRC_OUTPUTDATA_INVERSION_ENABLE);
 80053ae:	2180      	movs	r1, #128	@ 0x80
 80053b0:	4834      	ldr	r0, [pc, #208]	@ (8005484 <OTA_CRC_Check+0x164>)
 80053b2:	f007 fbbb 	bl	800cb2c <HAL_CRCEx_Output_Data_Reverse>
    HCRC->Instance->INIT = 0xFFFFFFFF;
 80053b6:	4b33      	ldr	r3, [pc, #204]	@ (8005484 <OTA_CRC_Check+0x164>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f04f 32ff 	mov.w	r2, #4294967295
 80053be:	611a      	str	r2, [r3, #16]
    HAL_CRCEx_Polynomial_Set(HCRC, 0x8005, CRC_POLYLENGTH_32B);
 80053c0:	2200      	movs	r2, #0
 80053c2:	f248 0105 	movw	r1, #32773	@ 0x8005
 80053c6:	482f      	ldr	r0, [pc, #188]	@ (8005484 <OTA_CRC_Check+0x164>)
 80053c8:	f007 fb06 	bl	800c9d8 <HAL_CRCEx_Polynomial_Set>

	while (size > 0)
 80053cc:	e038      	b.n	8005440 <OTA_CRC_Check+0x120>
	{
		uint8_t buffer[1024];
		UINT to_read = (size > sizeof(buffer)) ? sizeof(buffer) : size;
 80053ce:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 80053d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053d6:	bf28      	it	cs
 80053d8:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 80053dc:	f8c7 3418 	str.w	r3, [r7, #1048]	@ 0x418
		if (f_read(&sys.OTA_File, buffer, to_read, &read) != FR_OK || read == 0)
 80053e0:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 80053e4:	4639      	mov	r1, r7
 80053e6:	f8d7 2418 	ldr.w	r2, [r7, #1048]	@ 0x418
 80053ea:	4824      	ldr	r0, [pc, #144]	@ (800547c <OTA_CRC_Check+0x15c>)
 80053ec:	f004 fb0a 	bl	8009a04 <f_read>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d103      	bne.n	80053fe <OTA_CRC_Check+0xde>
 80053f6:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d105      	bne.n	800540a <OTA_CRC_Check+0xea>
		{
			f_close(&sys.OTA_File);
 80053fe:	481f      	ldr	r0, [pc, #124]	@ (800547c <OTA_CRC_Check+0x15c>)
 8005400:	f004 fe5c 	bl	800a0bc <f_close>
			return -1;
 8005404:	f04f 33ff 	mov.w	r3, #4294967295
 8005408:	e02b      	b.n	8005462 <OTA_CRC_Check+0x142>
		}
		calc_crc = HAL_CRC_Accumulate(HCRC, (uint32_t *)buffer, read / 4 + (read % 4 != 0));
 800540a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 800540e:	089b      	lsrs	r3, r3, #2
 8005410:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8005414:	f002 0203 	and.w	r2, r2, #3
 8005418:	2a00      	cmp	r2, #0
 800541a:	bf14      	ite	ne
 800541c:	2201      	movne	r2, #1
 800541e:	2200      	moveq	r2, #0
 8005420:	b2d2      	uxtb	r2, r2
 8005422:	441a      	add	r2, r3
 8005424:	463b      	mov	r3, r7
 8005426:	4619      	mov	r1, r3
 8005428:	4816      	ldr	r0, [pc, #88]	@ (8005484 <OTA_CRC_Check+0x164>)
 800542a:	f007 f9c7 	bl	800c7bc <HAL_CRC_Accumulate>
 800542e:	f8c7 0428 	str.w	r0, [r7, #1064]	@ 0x428
		size -= read;
 8005432:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8005436:	f8d7 2424 	ldr.w	r2, [r7, #1060]	@ 0x424
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424
	while (size > 0)
 8005440:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1c2      	bne.n	80053ce <OTA_CRC_Check+0xae>
	}

	f_close(&sys.OTA_File);
 8005448:	480c      	ldr	r0, [pc, #48]	@ (800547c <OTA_CRC_Check+0x15c>)
 800544a:	f004 fe37 	bl	800a0bc <f_close>

	if (calc_crc != ota_crc)
 800544e:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	@ 0x42e
 8005452:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 8005456:	429a      	cmp	r2, r3
 8005458:	d002      	beq.n	8005460 <OTA_CRC_Check+0x140>
	{
		return -1; // CRC non corrisponde
 800545a:	f04f 33ff 	mov.w	r3, #4294967295
 800545e:	e000      	b.n	8005462 <OTA_CRC_Check+0x142>
	}
	
	return 0; // CRC OK
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	f507 6786 	add.w	r7, r7, #1072	@ 0x430
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	0801742c 	.word	0x0801742c
 8005470:	08017468 	.word	0x08017468
 8005474:	08017450 	.word	0x08017450
 8005478:	0801741c 	.word	0x0801741c
 800547c:	20000744 	.word	0x20000744
 8005480:	20000740 	.word	0x20000740
 8005484:	200002c4 	.word	0x200002c4

08005488 <OTA_Apply>:


/*-----APPLICAZIONE UPDATE-----*/
int OTA_Apply(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b098      	sub	sp, #96	@ 0x60
 800548c:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 800548e:	2300      	movs	r3, #0
 8005490:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	int32_t result = 0;
 8005494:	2300      	movs	r3, #0
 8005496:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint8_t ota_bank = 0;
 8005498:	2300      	movs	r3, #0
 800549a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
	uint32_t faddr = 0;
 800549e:	2300      	movs	r3, #0
 80054a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t size = 0;
 80054a2:	2300      	movs	r3, #0
 80054a4:	65bb      	str	r3, [r7, #88]	@ 0x58
	uint64_t pword = 0;
 80054a6:	f04f 0200 	mov.w	r2, #0
 80054aa:	f04f 0300 	mov.w	r3, #0
 80054ae:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	uint32_t faddr_off = 0;
 80054b2:	2300      	movs	r3, #0
 80054b4:	657b      	str	r3, [r7, #84]	@ 0x54
	UINT read = 0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t PageError = 0;
 80054ba:	2300      	movs	r3, #0
 80054bc:	63bb      	str	r3, [r7, #56]	@ 0x38
	FLASH_EraseInitTypeDef erase_cfg = {0};
 80054be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80054c2:	2200      	movs	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	605a      	str	r2, [r3, #4]
 80054c8:	609a      	str	r2, [r3, #8]
 80054ca:	60da      	str	r2, [r3, #12]

	const uint32_t BANKSIZE = FLASH_SIZE >> 1;
 80054cc:	4b68      	ldr	r3, [pc, #416]	@ (8005670 <OTA_Apply+0x1e8>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d006      	beq.n	80054e8 <OTA_Apply+0x60>
 80054da:	4b65      	ldr	r3, [pc, #404]	@ (8005670 <OTA_Apply+0x1e8>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	029b      	lsls	r3, r3, #10
 80054e0:	085a      	lsrs	r2, r3, #1
 80054e2:	4b64      	ldr	r3, [pc, #400]	@ (8005674 <OTA_Apply+0x1ec>)
 80054e4:	4013      	ands	r3, r2
 80054e6:	e001      	b.n	80054ec <OTA_Apply+0x64>
 80054e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80054ec:	64bb      	str	r3, [r7, #72]	@ 0x48

	FLASH_OBProgramInitTypeDef ob = {0};
 80054ee:	463b      	mov	r3, r7
 80054f0:	2228      	movs	r2, #40	@ 0x28
 80054f2:	2100      	movs	r1, #0
 80054f4:	4618      	mov	r0, r3
 80054f6:	f010 fcb7 	bl	8015e68 <memset>

	HAL_FLASHEx_OBGetConfig(&ob);
 80054fa:	463b      	mov	r3, r7
 80054fc:	4618      	mov	r0, r3
 80054fe:	f008 f80b 	bl	800d518 <HAL_FLASHEx_OBGetConfig>

	if ((ob.USERConfig & FLASH_OPTR_DUALBANK) == 0)
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d102      	bne.n	8005512 <OTA_Apply+0x8a>
	{
		return -1;
 800550c:	f04f 33ff 	mov.w	r3, #4294967295
 8005510:	e0aa      	b.n	8005668 <OTA_Apply+0x1e0>
	}

	ota_bank = (ob.USERConfig & FLASH_OPTR_BFB2) ? FLASH_BANK_1 : FLASH_BANK_2;
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <OTA_Apply+0x98>
 800551c:	2301      	movs	r3, #1
 800551e:	e000      	b.n	8005522 <OTA_Apply+0x9a>
 8005520:	2302      	movs	r3, #2
 8005522:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

	// L'indirizzo deve essere sempre quello del banco 2 (se fa il boot da BANK2 il BANK1 viene rimappato)
	faddr = FLASH_BASE + BANKSIZE;
 8005526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005528:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800552c:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_FLASH_Unlock() != HAL_OK)
 800552e:	f007 fdc7 	bl	800d0c0 <HAL_FLASH_Unlock>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d002      	beq.n	800553e <OTA_Apply+0xb6>
	{
		return -1;
 8005538:	f04f 33ff 	mov.w	r3, #4294967295
 800553c:	e094      	b.n	8005668 <OTA_Apply+0x1e0>
	}

	f_close(&sys.OTA_File);
 800553e:	484e      	ldr	r0, [pc, #312]	@ (8005678 <OTA_Apply+0x1f0>)
 8005540:	f004 fdbc 	bl	800a0bc <f_close>
	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ);
 8005544:	2201      	movs	r2, #1
 8005546:	494d      	ldr	r1, [pc, #308]	@ (800567c <OTA_Apply+0x1f4>)
 8005548:	484b      	ldr	r0, [pc, #300]	@ (8005678 <OTA_Apply+0x1f0>)
 800554a:	f004 f8c3 	bl	80096d4 <f_open>
 800554e:	4603      	mov	r3, r0
 8005550:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	if (fRes != FR_OK)
 8005554:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <OTA_Apply+0xdc>
	{
		result = -1;
 800555c:	f04f 33ff 	mov.w	r3, #4294967295
 8005560:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 8005562:	e07b      	b.n	800565c <OTA_Apply+0x1d4>
	}

	if ((size = f_size(&sys.OTA_File)) > BANKSIZE)
 8005564:	4b46      	ldr	r3, [pc, #280]	@ (8005680 <OTA_Apply+0x1f8>)
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	65bb      	str	r3, [r7, #88]	@ 0x58
 800556a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800556c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800556e:	429a      	cmp	r2, r3
 8005570:	d903      	bls.n	800557a <OTA_Apply+0xf2>
	{
		result = -1;
 8005572:	f04f 33ff 	mov.w	r3, #4294967295
 8005576:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 8005578:	e070      	b.n	800565c <OTA_Apply+0x1d4>
	}

	erase_cfg.TypeErase = FLASH_TYPEERASE_MASSERASE;
 800557a:	2301      	movs	r3, #1
 800557c:	62bb      	str	r3, [r7, #40]	@ 0x28
	erase_cfg.Banks = ota_bank;
 800557e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8005582:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_FLASHEx_Erase(&erase_cfg, &PageError) != HAL_OK)
 8005584:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8005588:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800558c:	4611      	mov	r1, r2
 800558e:	4618      	mov	r0, r3
 8005590:	f007 feb8 	bl	800d304 <HAL_FLASHEx_Erase>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d026      	beq.n	80055e8 <OTA_Apply+0x160>
	{
		result = -1;
 800559a:	f04f 33ff 	mov.w	r3, #4294967295
 800559e:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 80055a0:	e05c      	b.n	800565c <OTA_Apply+0x1d4>
	}

	while (size > 0)
	{
		pword = 0;
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	f04f 0300 	mov.w	r3, #0
 80055aa:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		if (f_read(&sys.OTA_File, (uint8_t *)&pword, sizeof(pword), &read) < 0)
 80055ae:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80055b2:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80055b6:	2208      	movs	r2, #8
 80055b8:	482f      	ldr	r0, [pc, #188]	@ (8005678 <OTA_Apply+0x1f0>)
 80055ba:	f004 fa23 	bl	8009a04 <f_read>
			break;
		if (read == 0)
 80055be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d015      	beq.n	80055f0 <OTA_Apply+0x168>
			break;
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, faddr + faddr_off, pword) != HAL_OK)
 80055c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055c8:	18d1      	adds	r1, r2, r3
 80055ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80055ce:	2000      	movs	r0, #0
 80055d0:	f007 fd0a 	bl	800cfe8 <HAL_FLASH_Program>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10c      	bne.n	80055f4 <OTA_Apply+0x16c>
			break;
		faddr_off += sizeof(pword);
 80055da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055dc:	3308      	adds	r3, #8
 80055de:	657b      	str	r3, [r7, #84]	@ 0x54
		size -= read;
 80055e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	65bb      	str	r3, [r7, #88]	@ 0x58
	while (size > 0)
 80055e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1d9      	bne.n	80055a2 <OTA_Apply+0x11a>
 80055ee:	e002      	b.n	80055f6 <OTA_Apply+0x16e>
			break;
 80055f0:	bf00      	nop
 80055f2:	e000      	b.n	80055f6 <OTA_Apply+0x16e>
			break;
 80055f4:	bf00      	nop
	}

	if (size > 0)
 80055f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <OTA_Apply+0x17c>
	{
		result = -1;
 80055fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005600:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 8005602:	e02b      	b.n	800565c <OTA_Apply+0x1d4>
	}

	HAL_FLASH_Lock();
 8005604:	f007 fd7e 	bl	800d104 <HAL_FLASH_Lock>

	HAL_FLASHEx_OBGetConfig(&ob);
 8005608:	463b      	mov	r3, r7
 800560a:	4618      	mov	r0, r3
 800560c:	f007 ff84 	bl	800d518 <HAL_FLASHEx_OBGetConfig>
	HAL_FLASH_Unlock();
 8005610:	f007 fd56 	bl	800d0c0 <HAL_FLASH_Unlock>
	HAL_FLASH_OB_Unlock();
 8005614:	f007 fd86 	bl	800d124 <HAL_FLASH_OB_Unlock>

	ob.OptionType = OPTIONBYTE_USER;
 8005618:	2304      	movs	r3, #4
 800561a:	603b      	str	r3, [r7, #0]
	ob.USERType = OB_USER_BFB2;
 800561c:	2380      	movs	r3, #128	@ 0x80
 800561e:	617b      	str	r3, [r7, #20]
	ob.USERConfig = (ota_bank == FLASH_BANK_2) ? FLASH_OPTR_BFB2 : 0;
 8005620:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8005624:	2b02      	cmp	r3, #2
 8005626:	d102      	bne.n	800562e <OTA_Apply+0x1a6>
 8005628:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800562c:	e000      	b.n	8005630 <OTA_Apply+0x1a8>
 800562e:	2300      	movs	r3, #0
 8005630:	61bb      	str	r3, [r7, #24]

	if (HAL_FLASHEx_OBProgram(&ob) != HAL_OK)
 8005632:	463b      	mov	r3, r7
 8005634:	4618      	mov	r0, r3
 8005636:	f007 ff01 	bl	800d43c <HAL_FLASHEx_OBProgram>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d007      	beq.n	8005650 <OTA_Apply+0x1c8>
	{
		HAL_FLASH_OB_Lock();
 8005640:	f007 fd8c 	bl	800d15c <HAL_FLASH_OB_Lock>
		HAL_FLASH_Lock();
 8005644:	f007 fd5e 	bl	800d104 <HAL_FLASH_Lock>
		result = -1;
 8005648:	f04f 33ff 	mov.w	r3, #4294967295
 800564c:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 800564e:	e005      	b.n	800565c <OTA_Apply+0x1d4>
	}

	HAL_FLASH_OB_Launch();
 8005650:	f007 fd94 	bl	800d17c <HAL_FLASH_OB_Launch>
	HAL_FLASH_OB_Lock();
 8005654:	f007 fd82 	bl	800d15c <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 8005658:	f007 fd54 	bl	800d104 <HAL_FLASH_Lock>

	DONE:

	f_close(&sys.OTA_File);
 800565c:	4806      	ldr	r0, [pc, #24]	@ (8005678 <OTA_Apply+0x1f0>)
 800565e:	f004 fd2d 	bl	800a0bc <f_close>

	HAL_FLASH_Lock();
 8005662:	f007 fd4f 	bl	800d104 <HAL_FLASH_Lock>

	return result;
 8005666:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8005668:	4618      	mov	r0, r3
 800566a:	3760      	adds	r7, #96	@ 0x60
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	1fff75e0 	.word	0x1fff75e0
 8005674:	01fffe00 	.word	0x01fffe00
 8005678:	20000744 	.word	0x20000744
 800567c:	0801741c 	.word	0x0801741c
 8005680:	20000740 	.word	0x20000740

08005684 <Save_Data>:
#include "leds.h"


/*-----ACQUISIZIONE MISURE E LOG DEI DATI-----*/
void Save_Data(void)
{
 8005684:	b590      	push	{r4, r7, lr}
 8005686:	f2ad 4ddc 	subw	sp, sp, #1244	@ 0x4dc
 800568a:	af00      	add	r7, sp, #0
	if(flags.ADC_Half_Buffer)
 800568c:	4b78      	ldr	r3, [pc, #480]	@ (8005870 <Save_Data+0x1ec>)
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d037      	beq.n	800570a <Save_Data+0x86>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[0], PRESS_HALF_LEN);
 800569a:	4b76      	ldr	r3, [pc, #472]	@ (8005874 <Save_Data+0x1f0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	461a      	mov	r2, r3
 80056a0:	4b75      	ldr	r3, [pc, #468]	@ (8005878 <Save_Data+0x1f4>)
 80056a2:	4413      	add	r3, r2
 80056a4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80056a8:	4974      	ldr	r1, [pc, #464]	@ (800587c <Save_Data+0x1f8>)
 80056aa:	4618      	mov	r0, r3
 80056ac:	f010 fc60 	bl	8015f70 <memcpy>
		Last_Pressure = 0;
 80056b0:	4b73      	ldr	r3, [pc, #460]	@ (8005880 <Save_Data+0x1fc>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 80056b6:	2300      	movs	r3, #0
 80056b8:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 80056bc:	e00f      	b.n	80056de <Save_Data+0x5a>
		{
			Last_Pressure += Pressure[i];
 80056be:	4a6f      	ldr	r2, [pc, #444]	@ (800587c <Save_Data+0x1f8>)
 80056c0:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 80056c4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80056c8:	4b6d      	ldr	r3, [pc, #436]	@ (8005880 <Save_Data+0x1fc>)
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	4413      	add	r3, r2
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	4b6b      	ldr	r3, [pc, #428]	@ (8005880 <Save_Data+0x1fc>)
 80056d2:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 80056d4:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 80056d8:	3301      	adds	r3, #1
 80056da:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 80056de:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 80056e2:	2bc7      	cmp	r3, #199	@ 0xc7
 80056e4:	ddeb      	ble.n	80056be <Save_Data+0x3a>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 80056e6:	4b66      	ldr	r3, [pc, #408]	@ (8005880 <Save_Data+0x1fc>)
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	4a66      	ldr	r2, [pc, #408]	@ (8005884 <Save_Data+0x200>)
 80056ec:	fba2 2303 	umull	r2, r3, r2, r3
 80056f0:	099b      	lsrs	r3, r3, #6
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	4b62      	ldr	r3, [pc, #392]	@ (8005880 <Save_Data+0x1fc>)
 80056f6:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[0]);
 80056f8:	4860      	ldr	r0, [pc, #384]	@ (800587c <Save_Data+0x1f8>)
 80056fa:	f000 fb4b 	bl	8005d94 <Warning_Detection>
		flags.ADC_Half_Buffer = 0;
 80056fe:	4a5c      	ldr	r2, [pc, #368]	@ (8005870 <Save_Data+0x1ec>)
 8005700:	7813      	ldrb	r3, [r2, #0]
 8005702:	f023 0302 	bic.w	r3, r3, #2
 8005706:	7013      	strb	r3, [r2, #0]
 8005708:	e03e      	b.n	8005788 <Save_Data+0x104>
	}
	else if(flags.ADC_Full_Buffer)
 800570a:	4b59      	ldr	r3, [pc, #356]	@ (8005870 <Save_Data+0x1ec>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	f003 0304 	and.w	r3, r3, #4
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d037      	beq.n	8005788 <Save_Data+0x104>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[PRESS_HALF_SAMPLES], PRESS_HALF_LEN);
 8005718:	4b56      	ldr	r3, [pc, #344]	@ (8005874 <Save_Data+0x1f0>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	461a      	mov	r2, r3
 800571e:	4b56      	ldr	r3, [pc, #344]	@ (8005878 <Save_Data+0x1f4>)
 8005720:	4413      	add	r3, r2
 8005722:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005726:	4958      	ldr	r1, [pc, #352]	@ (8005888 <Save_Data+0x204>)
 8005728:	4618      	mov	r0, r3
 800572a:	f010 fc21 	bl	8015f70 <memcpy>
		Last_Pressure = 0;
 800572e:	4b54      	ldr	r3, [pc, #336]	@ (8005880 <Save_Data+0x1fc>)
 8005730:	2200      	movs	r2, #0
 8005732:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 8005734:	23c8      	movs	r3, #200	@ 0xc8
 8005736:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 800573a:	e00f      	b.n	800575c <Save_Data+0xd8>
		{
			Last_Pressure += Pressure[i];
 800573c:	4a4f      	ldr	r2, [pc, #316]	@ (800587c <Save_Data+0x1f8>)
 800573e:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 8005742:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005746:	4b4e      	ldr	r3, [pc, #312]	@ (8005880 <Save_Data+0x1fc>)
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	4413      	add	r3, r2
 800574c:	b29a      	uxth	r2, r3
 800574e:	4b4c      	ldr	r3, [pc, #304]	@ (8005880 <Save_Data+0x1fc>)
 8005750:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 8005752:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 8005756:	3301      	adds	r3, #1
 8005758:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 800575c:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 8005760:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8005764:	dbea      	blt.n	800573c <Save_Data+0xb8>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 8005766:	4b46      	ldr	r3, [pc, #280]	@ (8005880 <Save_Data+0x1fc>)
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	4a46      	ldr	r2, [pc, #280]	@ (8005884 <Save_Data+0x200>)
 800576c:	fba2 2303 	umull	r2, r3, r2, r3
 8005770:	099b      	lsrs	r3, r3, #6
 8005772:	b29a      	uxth	r2, r3
 8005774:	4b42      	ldr	r3, [pc, #264]	@ (8005880 <Save_Data+0x1fc>)
 8005776:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[PRESS_HALF_SAMPLES]);
 8005778:	4843      	ldr	r0, [pc, #268]	@ (8005888 <Save_Data+0x204>)
 800577a:	f000 fb0b 	bl	8005d94 <Warning_Detection>
		flags.ADC_Full_Buffer = 0;
 800577e:	4a3c      	ldr	r2, [pc, #240]	@ (8005870 <Save_Data+0x1ec>)
 8005780:	7813      	ldrb	r3, [r2, #0]
 8005782:	f023 0304 	bic.w	r3, r3, #4
 8005786:	7013      	strb	r3, [r2, #0]
	}
	flags.ADC_Complete = 0;
 8005788:	4a39      	ldr	r2, [pc, #228]	@ (8005870 <Save_Data+0x1ec>)
 800578a:	7813      	ldrb	r3, [r2, #0]
 800578c:	f023 0301 	bic.w	r3, r3, #1
 8005790:	7013      	strb	r3, [r2, #0]
	Address_Offset += PRESS_HALF_LEN;
 8005792:	4b38      	ldr	r3, [pc, #224]	@ (8005874 <Save_Data+0x1f0>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800579a:	4a36      	ldr	r2, [pc, #216]	@ (8005874 <Save_Data+0x1f0>)
 800579c:	6013      	str	r3, [r2, #0]

	memcpy(Saving_Buffer + Address_Offset, Volume_Period, MAX_VOLUME_LEN);
 800579e:	4b35      	ldr	r3, [pc, #212]	@ (8005874 <Save_Data+0x1f0>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	4b34      	ldr	r3, [pc, #208]	@ (8005878 <Save_Data+0x1f4>)
 80057a6:	4413      	add	r3, r2
 80057a8:	2228      	movs	r2, #40	@ 0x28
 80057aa:	4938      	ldr	r1, [pc, #224]	@ (800588c <Save_Data+0x208>)
 80057ac:	4618      	mov	r0, r3
 80057ae:	f010 fbdf 	bl	8015f70 <memcpy>
	uint8_t current_period_cnt = Period_cnt;
 80057b2:	4b37      	ldr	r3, [pc, #220]	@ (8005890 <Save_Data+0x20c>)
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
	Last_Volume = 0;
 80057ba:	4b36      	ldr	r3, [pc, #216]	@ (8005894 <Save_Data+0x210>)
 80057bc:	2200      	movs	r2, #0
 80057be:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < current_period_cnt; i++)
 80057c0:	2300      	movs	r3, #0
 80057c2:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 80057c6:	e010      	b.n	80057ea <Save_Data+0x166>
	{
		Last_Volume += Volume_Period[i];
 80057c8:	4a30      	ldr	r2, [pc, #192]	@ (800588c <Save_Data+0x208>)
 80057ca:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 80057ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	4b2f      	ldr	r3, [pc, #188]	@ (8005894 <Save_Data+0x210>)
 80057d6:	881b      	ldrh	r3, [r3, #0]
 80057d8:	4413      	add	r3, r2
 80057da:	b29a      	uxth	r2, r3
 80057dc:	4b2d      	ldr	r3, [pc, #180]	@ (8005894 <Save_Data+0x210>)
 80057de:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < current_period_cnt; i++)
 80057e0:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 80057e4:	3301      	adds	r3, #1
 80057e6:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 80057ea:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 80057ee:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	@ 0x4cc
 80057f2:	429a      	cmp	r2, r3
 80057f4:	dbe8      	blt.n	80057c8 <Save_Data+0x144>
	}
	Last_Volume = (uint16_t)(Last_Volume / current_period_cnt);
 80057f6:	4b27      	ldr	r3, [pc, #156]	@ (8005894 <Save_Data+0x210>)
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	461a      	mov	r2, r3
 80057fc:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 8005800:	fb92 f3f3 	sdiv	r3, r2, r3
 8005804:	b29a      	uxth	r2, r3
 8005806:	4b23      	ldr	r3, [pc, #140]	@ (8005894 <Save_Data+0x210>)
 8005808:	801a      	strh	r2, [r3, #0]
	memset(Volume_Period, 0, sizeof(Volume_Period));
 800580a:	2228      	movs	r2, #40	@ 0x28
 800580c:	2100      	movs	r1, #0
 800580e:	481f      	ldr	r0, [pc, #124]	@ (800588c <Save_Data+0x208>)
 8005810:	f010 fb2a 	bl	8015e68 <memset>
	Period_cnt = 0;
 8005814:	4b1e      	ldr	r3, [pc, #120]	@ (8005890 <Save_Data+0x20c>)
 8005816:	2200      	movs	r2, #0
 8005818:	701a      	strb	r2, [r3, #0]
	Address_Offset += MAX_VOLUME_LEN;
 800581a:	4b16      	ldr	r3, [pc, #88]	@ (8005874 <Save_Data+0x1f0>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	3328      	adds	r3, #40	@ 0x28
 8005820:	4a14      	ldr	r2, [pc, #80]	@ (8005874 <Save_Data+0x1f0>)
 8005822:	6013      	str	r3, [r2, #0]

	if(sys.ACC_Present)
 8005824:	4b1c      	ldr	r3, [pc, #112]	@ (8005898 <Save_Data+0x214>)
 8005826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800582a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 80a4 	beq.w	8005982 <Save_Data+0x2fe>
	{
		memcpy(Saving_Buffer + Address_Offset, Acceleration, ACCELERATION_LEN);
 800583a:	4b0e      	ldr	r3, [pc, #56]	@ (8005874 <Save_Data+0x1f0>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	4b0d      	ldr	r3, [pc, #52]	@ (8005878 <Save_Data+0x1f4>)
 8005842:	4413      	add	r3, r2
 8005844:	4a15      	ldr	r2, [pc, #84]	@ (800589c <Save_Data+0x218>)
 8005846:	4618      	mov	r0, r3
 8005848:	4611      	mov	r1, r2
 800584a:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 800584e:	461a      	mov	r2, r3
 8005850:	f010 fb8e 	bl	8015f70 <memcpy>
		Last_Acceleration.x = 0;
 8005854:	4b12      	ldr	r3, [pc, #72]	@ (80058a0 <Save_Data+0x21c>)
 8005856:	2200      	movs	r2, #0
 8005858:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = 0;
 800585a:	4b11      	ldr	r3, [pc, #68]	@ (80058a0 <Save_Data+0x21c>)
 800585c:	2200      	movs	r2, #0
 800585e:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = 0;
 8005860:	4b0f      	ldr	r3, [pc, #60]	@ (80058a0 <Save_Data+0x21c>)
 8005862:	2200      	movs	r2, #0
 8005864:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 8005866:	2300      	movs	r3, #0
 8005868:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 800586c:	e064      	b.n	8005938 <Save_Data+0x2b4>
 800586e:	bf00      	nop
 8005870:	20001c68 	.word	0x20001c68
 8005874:	20004eb8 	.word	0x20004eb8
 8005878:	20004788 	.word	0x20004788
 800587c:	20003e54 	.word	0x20003e54
 8005880:	20004714 	.word	0x20004714
 8005884:	51eb851f 	.word	0x51eb851f
 8005888:	20003fe4 	.word	0x20003fe4
 800588c:	20004174 	.word	0x20004174
 8005890:	20003e50 	.word	0x20003e50
 8005894:	20004716 	.word	0x20004716
 8005898:	20000740 	.word	0x20000740
 800589c:	2000419c 	.word	0x2000419c
 80058a0:	20004718 	.word	0x20004718
		{
			Last_Acceleration.x += Acceleration[i+1] | (Acceleration[i+2] << 8); 
 80058a4:	4b85      	ldr	r3, [pc, #532]	@ (8005abc <Save_Data+0x438>)
 80058a6:	885a      	ldrh	r2, [r3, #2]
 80058a8:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 80058ac:	3301      	adds	r3, #1
 80058ae:	4984      	ldr	r1, [pc, #528]	@ (8005ac0 <Save_Data+0x43c>)
 80058b0:	5ccb      	ldrb	r3, [r1, r3]
 80058b2:	b219      	sxth	r1, r3
 80058b4:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 80058b8:	3302      	adds	r3, #2
 80058ba:	4881      	ldr	r0, [pc, #516]	@ (8005ac0 <Save_Data+0x43c>)
 80058bc:	5cc3      	ldrb	r3, [r0, r3]
 80058be:	b21b      	sxth	r3, r3
 80058c0:	021b      	lsls	r3, r3, #8
 80058c2:	b21b      	sxth	r3, r3
 80058c4:	430b      	orrs	r3, r1
 80058c6:	b21b      	sxth	r3, r3
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	4413      	add	r3, r2
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	4b7b      	ldr	r3, [pc, #492]	@ (8005abc <Save_Data+0x438>)
 80058d0:	805a      	strh	r2, [r3, #2]
			Last_Acceleration.y += Acceleration[i+3] | (Acceleration[i+4] << 8); 
 80058d2:	4b7a      	ldr	r3, [pc, #488]	@ (8005abc <Save_Data+0x438>)
 80058d4:	889a      	ldrh	r2, [r3, #4]
 80058d6:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 80058da:	3303      	adds	r3, #3
 80058dc:	4978      	ldr	r1, [pc, #480]	@ (8005ac0 <Save_Data+0x43c>)
 80058de:	5ccb      	ldrb	r3, [r1, r3]
 80058e0:	b219      	sxth	r1, r3
 80058e2:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 80058e6:	3304      	adds	r3, #4
 80058e8:	4875      	ldr	r0, [pc, #468]	@ (8005ac0 <Save_Data+0x43c>)
 80058ea:	5cc3      	ldrb	r3, [r0, r3]
 80058ec:	b21b      	sxth	r3, r3
 80058ee:	021b      	lsls	r3, r3, #8
 80058f0:	b21b      	sxth	r3, r3
 80058f2:	430b      	orrs	r3, r1
 80058f4:	b21b      	sxth	r3, r3
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	4413      	add	r3, r2
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	4b6f      	ldr	r3, [pc, #444]	@ (8005abc <Save_Data+0x438>)
 80058fe:	809a      	strh	r2, [r3, #4]
			Last_Acceleration.z += Acceleration[i+5] | (Acceleration[i+6] << 8); 
 8005900:	4b6e      	ldr	r3, [pc, #440]	@ (8005abc <Save_Data+0x438>)
 8005902:	88da      	ldrh	r2, [r3, #6]
 8005904:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005908:	3305      	adds	r3, #5
 800590a:	496d      	ldr	r1, [pc, #436]	@ (8005ac0 <Save_Data+0x43c>)
 800590c:	5ccb      	ldrb	r3, [r1, r3]
 800590e:	b219      	sxth	r1, r3
 8005910:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005914:	3306      	adds	r3, #6
 8005916:	486a      	ldr	r0, [pc, #424]	@ (8005ac0 <Save_Data+0x43c>)
 8005918:	5cc3      	ldrb	r3, [r0, r3]
 800591a:	b21b      	sxth	r3, r3
 800591c:	021b      	lsls	r3, r3, #8
 800591e:	b21b      	sxth	r3, r3
 8005920:	430b      	orrs	r3, r1
 8005922:	b21b      	sxth	r3, r3
 8005924:	b29b      	uxth	r3, r3
 8005926:	4413      	add	r3, r2
 8005928:	b29a      	uxth	r2, r3
 800592a:	4b64      	ldr	r3, [pc, #400]	@ (8005abc <Save_Data+0x438>)
 800592c:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 800592e:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005932:	3307      	adds	r3, #7
 8005934:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 8005938:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 800593c:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 8005940:	dbb0      	blt.n	80058a4 <Save_Data+0x220>
		}
		Last_Acceleration.x = (uint16_t)(Last_Acceleration.x / (ACCELERATION_LEN / 7));
 8005942:	4b5e      	ldr	r3, [pc, #376]	@ (8005abc <Save_Data+0x438>)
 8005944:	885b      	ldrh	r3, [r3, #2]
 8005946:	4a5f      	ldr	r2, [pc, #380]	@ (8005ac4 <Save_Data+0x440>)
 8005948:	fba2 2303 	umull	r2, r3, r2, r3
 800594c:	099b      	lsrs	r3, r3, #6
 800594e:	b29a      	uxth	r2, r3
 8005950:	4b5a      	ldr	r3, [pc, #360]	@ (8005abc <Save_Data+0x438>)
 8005952:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = (uint16_t)(Last_Acceleration.y / (ACCELERATION_LEN / 7));
 8005954:	4b59      	ldr	r3, [pc, #356]	@ (8005abc <Save_Data+0x438>)
 8005956:	889b      	ldrh	r3, [r3, #4]
 8005958:	4a5a      	ldr	r2, [pc, #360]	@ (8005ac4 <Save_Data+0x440>)
 800595a:	fba2 2303 	umull	r2, r3, r2, r3
 800595e:	099b      	lsrs	r3, r3, #6
 8005960:	b29a      	uxth	r2, r3
 8005962:	4b56      	ldr	r3, [pc, #344]	@ (8005abc <Save_Data+0x438>)
 8005964:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = (uint16_t)(Last_Acceleration.z / (ACCELERATION_LEN / 7));
 8005966:	4b55      	ldr	r3, [pc, #340]	@ (8005abc <Save_Data+0x438>)
 8005968:	88db      	ldrh	r3, [r3, #6]
 800596a:	4a56      	ldr	r2, [pc, #344]	@ (8005ac4 <Save_Data+0x440>)
 800596c:	fba2 2303 	umull	r2, r3, r2, r3
 8005970:	099b      	lsrs	r3, r3, #6
 8005972:	b29a      	uxth	r2, r3
 8005974:	4b51      	ldr	r3, [pc, #324]	@ (8005abc <Save_Data+0x438>)
 8005976:	80da      	strh	r2, [r3, #6]
		flags.ACC_Complete = 0;
 8005978:	4a53      	ldr	r2, [pc, #332]	@ (8005ac8 <Save_Data+0x444>)
 800597a:	7813      	ldrb	r3, [r2, #0]
 800597c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005980:	7013      	strb	r3, [r2, #0]
	}
	Address_Offset += ACCELERATION_LEN;
 8005982:	4b52      	ldr	r3, [pc, #328]	@ (8005acc <Save_Data+0x448>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 800598a:	4a50      	ldr	r2, [pc, #320]	@ (8005acc <Save_Data+0x448>)
 800598c:	6013      	str	r3, [r2, #0]

	INA3221_Read_Measure(&Supply);
 800598e:	4850      	ldr	r0, [pc, #320]	@ (8005ad0 <Save_Data+0x44c>)
 8005990:	f7fb fb44 	bl	800101c <INA3221_Read_Measure>
	uint16_t new_temp = 0;
 8005994:	2300      	movs	r3, #0
 8005996:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4
	if((new_temp = Read_Temperature()) != 0)
 800599a:	f7fb fae5 	bl	8000f68 <Read_Temperature>
 800599e:	4603      	mov	r3, r0
 80059a0:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4
 80059a4:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <Save_Data+0x330>
	{
		Temperature = new_temp;
 80059ac:	4a49      	ldr	r2, [pc, #292]	@ (8005ad4 <Save_Data+0x450>)
 80059ae:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 80059b2:	8013      	strh	r3, [r2, #0]
	}
	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 80059b4:	4948      	ldr	r1, [pc, #288]	@ (8005ad8 <Save_Data+0x454>)
 80059b6:	203b      	movs	r0, #59	@ 0x3b
 80059b8:	f7fc fdcc 	bl	8002554 <BC_MultiRead_Reg>

	uint8_t compressed_data[MAX_COMPRESSED_SIZE];
	Compressed_Sample_Typedef sample;
    sample.compressed_size = Compress_Sample(Saving_Buffer, SAVING_BUFFER_LEN, compressed_data);
 80059bc:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80059c0:	f2a3 44cc 	subw	r4, r3, #1228	@ 0x4cc
 80059c4:	4638      	mov	r0, r7
 80059c6:	f107 0314 	add.w	r3, r7, #20
 80059ca:	f44f 62e6 	mov.w	r2, #1840	@ 0x730
 80059ce:	4943      	ldr	r1, [pc, #268]	@ (8005adc <Save_Data+0x458>)
 80059d0:	f000 fb44 	bl	800605c <Compress_Sample>
 80059d4:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80059d8:	f5a3 629b 	sub.w	r2, r3, #1240	@ 0x4d8
 80059dc:	4623      	mov	r3, r4
 80059de:	6810      	ldr	r0, [r2, #0]
 80059e0:	6018      	str	r0, [r3, #0]
 80059e2:	8892      	ldrh	r2, [r2, #4]
 80059e4:	809a      	strh	r2, [r3, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80059e6:	b672      	cpsid	i
}
 80059e8:	bf00      	nop

	__disable_irq();
	RAM_Save_Measure(&sample, compressed_data);
 80059ea:	f107 0214 	add.w	r2, r7, #20
 80059ee:	f107 030c 	add.w	r3, r7, #12
 80059f2:	4611      	mov	r1, r2
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 fa31 	bl	8005e5c <RAM_Save_Measure>
  __ASM volatile ("cpsie i" : : : "memory");
 80059fa:	b662      	cpsie	i
}
 80059fc:	bf00      	nop
	__enable_irq();

	Address_Offset = 0;
 80059fe:	4b33      	ldr	r3, [pc, #204]	@ (8005acc <Save_Data+0x448>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]

	if(flags.Hammer_Detected || flags.Threshold_Detected)
 8005a04:	4b30      	ldr	r3, [pc, #192]	@ (8005ac8 <Save_Data+0x444>)
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	f003 0308 	and.w	r3, r3, #8
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d106      	bne.n	8005a20 <Save_Data+0x39c>
 8005a12:	4b2d      	ldr	r3, [pc, #180]	@ (8005ac8 <Save_Data+0x444>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	f003 0310 	and.w	r3, r3, #16
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d048      	beq.n	8005ab2 <Save_Data+0x42e>
	{
		Cycles_After_Warning++;
 8005a20:	4b2f      	ldr	r3, [pc, #188]	@ (8005ae0 <Save_Data+0x45c>)
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	3301      	adds	r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	4b2d      	ldr	r3, [pc, #180]	@ (8005ae0 <Save_Data+0x45c>)
 8005a2a:	801a      	strh	r2, [r3, #0]
		if(Cycles_After_Warning >= config.buffering_secs * (config.samp_freq / ACC_FIFO_WATERMARK))
 8005a2c:	4b2c      	ldr	r3, [pc, #176]	@ (8005ae0 <Save_Data+0x45c>)
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	4619      	mov	r1, r3
 8005a32:	4b2c      	ldr	r3, [pc, #176]	@ (8005ae4 <Save_Data+0x460>)
 8005a34:	791b      	ldrb	r3, [r3, #4]
 8005a36:	4618      	mov	r0, r3
 8005a38:	4b2a      	ldr	r3, [pc, #168]	@ (8005ae4 <Save_Data+0x460>)
 8005a3a:	885b      	ldrh	r3, [r3, #2]
 8005a3c:	4a21      	ldr	r2, [pc, #132]	@ (8005ac4 <Save_Data+0x440>)
 8005a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a42:	099b      	lsrs	r3, r3, #6
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	fb00 f303 	mul.w	r3, r0, r3
 8005a4a:	4299      	cmp	r1, r3
 8005a4c:	db31      	blt.n	8005ab2 <Save_Data+0x42e>
		{
			if(!flags.CMD.Measure_Request)
 8005a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ac8 <Save_Data+0x444>)
 8005a50:	789b      	ldrb	r3, [r3, #2]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d12a      	bne.n	8005ab2 <Save_Data+0x42e>
			{
				LED_Start(RED_LED, FAST, LOW);
 8005a5c:	2207      	movs	r2, #7
 8005a5e:	2100      	movs	r1, #0
 8005a60:	2004      	movs	r0, #4
 8005a62:	f7fd fd69 	bl	8003538 <LED_Start>
				Switch_Buffer();
 8005a66:	f000 f843 	bl	8005af0 <Switch_Buffer>
				flags.CMD.Measure_Request = 1;
 8005a6a:	4a17      	ldr	r2, [pc, #92]	@ (8005ac8 <Save_Data+0x444>)
 8005a6c:	7893      	ldrb	r3, [r2, #2]
 8005a6e:	f043 0302 	orr.w	r3, r3, #2
 8005a72:	7093      	strb	r3, [r2, #2]
				Send_Measure_Addr = Saved_Bytes;
 8005a74:	4b1c      	ldr	r3, [pc, #112]	@ (8005ae8 <Save_Data+0x464>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a1c      	ldr	r2, [pc, #112]	@ (8005aec <Save_Data+0x468>)
 8005a7a:	6013      	str	r3, [r2, #0]
				Cycles_After_Warning = 0;
 8005a7c:	4b18      	ldr	r3, [pc, #96]	@ (8005ae0 <Save_Data+0x45c>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	801a      	strh	r2, [r3, #0]
				if(flags.Hammer_Detected)
 8005a82:	4b11      	ldr	r3, [pc, #68]	@ (8005ac8 <Save_Data+0x444>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	f003 0308 	and.w	r3, r3, #8
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d004      	beq.n	8005a9a <Save_Data+0x416>
				{
					flags.Hammer_Detected = 0;
 8005a90:	4a0d      	ldr	r2, [pc, #52]	@ (8005ac8 <Save_Data+0x444>)
 8005a92:	7813      	ldrb	r3, [r2, #0]
 8005a94:	f023 0308 	bic.w	r3, r3, #8
 8005a98:	7013      	strb	r3, [r2, #0]
				}
				if(flags.Threshold_Detected)
 8005a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac8 <Save_Data+0x444>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	f003 0310 	and.w	r3, r3, #16
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d004      	beq.n	8005ab2 <Save_Data+0x42e>
				{
					flags.Threshold_Detected = 0;
 8005aa8:	4a07      	ldr	r2, [pc, #28]	@ (8005ac8 <Save_Data+0x444>)
 8005aaa:	7813      	ldrb	r3, [r2, #0]
 8005aac:	f023 0310 	bic.w	r3, r3, #16
 8005ab0:	7013      	strb	r3, [r2, #0]
				}
			}
		}
	}

}
 8005ab2:	bf00      	nop
 8005ab4:	f207 47dc 	addw	r7, r7, #1244	@ 0x4dc
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd90      	pop	{r4, r7, pc}
 8005abc:	20004718 	.word	0x20004718
 8005ac0:	2000419c 	.word	0x2000419c
 8005ac4:	51eb851f 	.word	0x51eb851f
 8005ac8:	20001c68 	.word	0x20001c68
 8005acc:	20004eb8 	.word	0x20004eb8
 8005ad0:	20003e44 	.word	0x20003e44
 8005ad4:	20004720 	.word	0x20004720
 8005ad8:	20004722 	.word	0x20004722
 8005adc:	20004788 	.word	0x20004788
 8005ae0:	20004ebc 	.word	0x20004ebc
 8005ae4:	20001c6c 	.word	0x20001c6c
 8005ae8:	20004ec0 	.word	0x20004ec0
 8005aec:	20004ec8 	.word	0x20004ec8

08005af0 <Switch_Buffer>:

/*-----CAMBIO BUFFER-----*/
void Switch_Buffer(void)
{
 8005af0:	b480      	push	{r7}
 8005af2:	af00      	add	r7, sp, #0
    sys.Inactive_RAM_Len = sys.Current_RAM_Len;
 8005af4:	4b23      	ldr	r3, [pc, #140]	@ (8005b84 <Switch_Buffer+0x94>)
 8005af6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005afa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005afe:	4a21      	ldr	r2, [pc, #132]	@ (8005b84 <Switch_Buffer+0x94>)
 8005b00:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005b04:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

    if (sys.Active_RAM_Buffer == 0) 
 8005b08:	4b1e      	ldr	r3, [pc, #120]	@ (8005b84 <Switch_Buffer+0x94>)
 8005b0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b0e:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d116      	bne.n	8005b44 <Switch_Buffer+0x54>
	{
		sys.RAM_Buffer_Base_tosend = RAM_SECOND_BUFFER_ADD;
 8005b16:	4b1b      	ldr	r3, [pc, #108]	@ (8005b84 <Switch_Buffer+0x94>)
 8005b18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005b22:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
        sys.Active_RAM_Buffer = 1;
 8005b26:	4b17      	ldr	r3, [pc, #92]	@ (8005b84 <Switch_Buffer+0x94>)
 8005b28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        sys.Current_RAM_Base = RAM_SECOND_BUFFER_ADD;
 8005b32:	4b14      	ldr	r3, [pc, #80]	@ (8005b84 <Switch_Buffer+0x94>)
 8005b34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b38:	461a      	mov	r2, r3
 8005b3a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005b3e:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
 8005b42:	e013      	b.n	8005b6c <Switch_Buffer+0x7c>
    } 
	else 
	{
		sys.RAM_Buffer_Base_tosend = RAM_FIRST_BUFFER_ADD;
 8005b44:	4b0f      	ldr	r3, [pc, #60]	@ (8005b84 <Switch_Buffer+0x94>)
 8005b46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
        sys.Active_RAM_Buffer = 0;
 8005b52:	4b0c      	ldr	r3, [pc, #48]	@ (8005b84 <Switch_Buffer+0x94>)
 8005b54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        sys.Current_RAM_Base = RAM_FIRST_BUFFER_ADD;
 8005b5e:	4b09      	ldr	r3, [pc, #36]	@ (8005b84 <Switch_Buffer+0x94>)
 8005b60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b64:	461a      	mov	r2, r3
 8005b66:	2300      	movs	r3, #0
 8005b68:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
    }

    sys.Current_RAM_Len = 0;
 8005b6c:	4b05      	ldr	r3, [pc, #20]	@ (8005b84 <Switch_Buffer+0x94>)
 8005b6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b72:	461a      	mov	r2, r3
 8005b74:	2300      	movs	r3, #0
 8005b76:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8005b7a:	bf00      	nop
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	20000740 	.word	0x20000740

08005b88 <Erase_RAM_Data>:

/*-----CANCELLAZIONE DATI RAM-----*/
void Erase_RAM_Data(void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8005b8e:	af00      	add	r7, sp, #0
	uint8_t zero_buffer[1024] = {0};
 8005b90:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8005b94:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	f010 f961 	bl	8015e68 <memset>
	for (uint32_t addr = 0; addr < 0x800000; addr += sizeof(zero_buffer)) 
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8005bac:	e00d      	b.n	8005bca <Erase_RAM_Data+0x42>
	{
		RAM_Write(addr, sizeof(zero_buffer), zero_buffer);
 8005bae:	1d3b      	adds	r3, r7, #4
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005bb6:	f8d7 0404 	ldr.w	r0, [r7, #1028]	@ 0x404
 8005bba:	f001 fa07 	bl	8006fcc <RAM_Write>
	for (uint32_t addr = 0; addr < 0x800000; addr += sizeof(zero_buffer)) 
 8005bbe:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8005bc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bc6:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8005bca:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8005bce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005bd2:	d3ec      	bcc.n	8005bae <Erase_RAM_Data+0x26>
	}
}
 8005bd4:	bf00      	nop
 8005bd6:	bf00      	nop
 8005bd8:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <Start_Measure>:


/*-----AVVIO MISURA-----*/
void Start_Measure(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
	Erase_RAM_Data();
 8005be4:	f7ff ffd0 	bl	8005b88 <Erase_RAM_Data>
	sys.RAM_Samples_Number = (config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * 2;
 8005be8:	4b4a      	ldr	r3, [pc, #296]	@ (8005d14 <Start_Measure+0x134>)
 8005bea:	885b      	ldrh	r3, [r3, #2]
 8005bec:	4a4a      	ldr	r2, [pc, #296]	@ (8005d18 <Start_Measure+0x138>)
 8005bee:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf2:	099b      	lsrs	r3, r3, #6
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	4b46      	ldr	r3, [pc, #280]	@ (8005d14 <Start_Measure+0x134>)
 8005bfa:	791b      	ldrb	r3, [r3, #4]
 8005bfc:	fb02 f303 	mul.w	r3, r2, r3
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	461a      	mov	r2, r3
 8005c04:	4b45      	ldr	r3, [pc, #276]	@ (8005d1c <Start_Measure+0x13c>)
 8005c06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c0a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	sys.Active_RAM_Buffer = 0;
 8005c0e:	4b43      	ldr	r3, [pc, #268]	@ (8005d1c <Start_Measure+0x13c>)
 8005c10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
	sys.Inactive_RAM_Len = 0;
 8005c1a:	4b40      	ldr	r3, [pc, #256]	@ (8005d1c <Start_Measure+0x13c>)
 8005c1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c20:	461a      	mov	r2, r3
 8005c22:	2300      	movs	r3, #0
 8005c24:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
	sys.Current_RAM_Base = RAM_FIRST_BUFFER_ADD;
 8005c28:	4b3c      	ldr	r3, [pc, #240]	@ (8005d1c <Start_Measure+0x13c>)
 8005c2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c2e:	461a      	mov	r2, r3
 8005c30:	2300      	movs	r3, #0
 8005c32:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
	sys.Current_RAM_Len = 0;
 8005c36:	4b39      	ldr	r3, [pc, #228]	@ (8005d1c <Start_Measure+0x13c>)
 8005c38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	2300      	movs	r3, #0
 8005c40:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
	flags.SIM_isConnected = 1;
 8005c44:	4a36      	ldr	r2, [pc, #216]	@ (8005d20 <Start_Measure+0x140>)
 8005c46:	7853      	ldrb	r3, [r2, #1]
 8005c48:	f043 0308 	orr.w	r3, r3, #8
 8005c4c:	7053      	strb	r3, [r2, #1]
	memset(Pressure, 0, sizeof(Pressure));
 8005c4e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8005c52:	2100      	movs	r1, #0
 8005c54:	4833      	ldr	r0, [pc, #204]	@ (8005d24 <Start_Measure+0x144>)
 8005c56:	f010 f907 	bl	8015e68 <memset>
	memset(Volume_Period, 0, sizeof(Volume_Period));
 8005c5a:	2228      	movs	r2, #40	@ 0x28
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	4832      	ldr	r0, [pc, #200]	@ (8005d28 <Start_Measure+0x148>)
 8005c60:	f010 f902 	bl	8015e68 <memset>
	memset(Acceleration, 0, sizeof(Acceleration));
 8005c64:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8005c68:	2100      	movs	r1, #0
 8005c6a:	4830      	ldr	r0, [pc, #192]	@ (8005d2c <Start_Measure+0x14c>)
 8005c6c:	f010 f8fc 	bl	8015e68 <memset>
	memset(&Supply, 0, sizeof(Supply));
 8005c70:	220c      	movs	r2, #12
 8005c72:	2100      	movs	r1, #0
 8005c74:	482e      	ldr	r0, [pc, #184]	@ (8005d30 <Start_Measure+0x150>)
 8005c76:	f010 f8f7 	bl	8015e68 <memset>
	Temperature = 0;
 8005c7a:	4b2e      	ldr	r3, [pc, #184]	@ (8005d34 <Start_Measure+0x154>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	801a      	strh	r2, [r3, #0]
	Saved_Bytes = 0;
 8005c80:	4b2d      	ldr	r3, [pc, #180]	@ (8005d38 <Start_Measure+0x158>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	601a      	str	r2, [r3, #0]
	Saved_Samples = 0;
 8005c86:	4b2d      	ldr	r3, [pc, #180]	@ (8005d3c <Start_Measure+0x15c>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	801a      	strh	r2, [r3, #0]
	Address_Offset = 0;
 8005c8c:	4b2c      	ldr	r3, [pc, #176]	@ (8005d40 <Start_Measure+0x160>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]
	Cycles_After_Warning = 0;
 8005c92:	4b2c      	ldr	r3, [pc, #176]	@ (8005d44 <Start_Measure+0x164>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	801a      	strh	r2, [r3, #0]
	Clear_Flags();
 8005c98:	f000 ff46 	bl	8006b28 <Clear_Flags>

	ADC_TIMER->Instance->PSC = 100 - 1;
 8005c9c:	4b2a      	ldr	r3, [pc, #168]	@ (8005d48 <Start_Measure+0x168>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2263      	movs	r2, #99	@ 0x63
 8005ca2:	629a      	str	r2, [r3, #40]	@ 0x28
	ADC_TIMER->Instance->ARR = (uint32_t)(SystemCoreClock / (ADC_TIMER->Instance->PSC * config.samp_freq)) - 1;
 8005ca4:	4b29      	ldr	r3, [pc, #164]	@ (8005d4c <Start_Measure+0x16c>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	4b27      	ldr	r3, [pc, #156]	@ (8005d48 <Start_Measure+0x168>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cae:	4919      	ldr	r1, [pc, #100]	@ (8005d14 <Start_Measure+0x134>)
 8005cb0:	8849      	ldrh	r1, [r1, #2]
 8005cb2:	fb01 f303 	mul.w	r3, r1, r3
 8005cb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cba:	4b23      	ldr	r3, [pc, #140]	@ (8005d48 <Start_Measure+0x168>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	3a01      	subs	r2, #1
 8005cc0:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->ARR = (uint32_t)(config.samp_freq / 25) - 1;
 8005cc2:	4b14      	ldr	r3, [pc, #80]	@ (8005d14 <Start_Measure+0x134>)
 8005cc4:	885b      	ldrh	r3, [r3, #2]
 8005cc6:	4a14      	ldr	r2, [pc, #80]	@ (8005d18 <Start_Measure+0x138>)
 8005cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ccc:	08db      	lsrs	r3, r3, #3
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8005d50 <Start_Measure+0x170>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3a01      	subs	r2, #1
 8005cd8:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->CCR3 = (uint32_t)((ACC_TIMER->Instance->ARR + 1) / 2);
 8005cda:	4b1d      	ldr	r3, [pc, #116]	@ (8005d50 <Start_Measure+0x170>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce0:	1c5a      	adds	r2, r3, #1
 8005ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8005d50 <Start_Measure+0x170>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	0852      	lsrs	r2, r2, #1
 8005ce8:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_IC_Start_IT(VOLUME_TIMER, TIM_CHANNEL_1);
 8005cea:	2100      	movs	r1, #0
 8005cec:	4819      	ldr	r0, [pc, #100]	@ (8005d54 <Start_Measure+0x174>)
 8005cee:	f00d f837 	bl	8012d60 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(ACC_TIMER, TIM_CHANNEL_3);
 8005cf2:	2108      	movs	r1, #8
 8005cf4:	4816      	ldr	r0, [pc, #88]	@ (8005d50 <Start_Measure+0x170>)
 8005cf6:	f00c fe3f 	bl	8012978 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(PRESSURE_ADC, (uint32_t*)&Pressure, PRESS_FULL_SAMPLES);
 8005cfa:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005cfe:	4909      	ldr	r1, [pc, #36]	@ (8005d24 <Start_Measure+0x144>)
 8005d00:	4815      	ldr	r0, [pc, #84]	@ (8005d58 <Start_Measure+0x178>)
 8005d02:	f005 fba5 	bl	800b450 <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start_IT(ADC_TIMER, TIM_CHANNEL_3);
 8005d06:	2108      	movs	r1, #8
 8005d08:	480f      	ldr	r0, [pc, #60]	@ (8005d48 <Start_Measure+0x168>)
 8005d0a:	f00c fb9b 	bl	8012444 <HAL_TIM_OC_Start_IT>
}
 8005d0e:	bf00      	nop
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20001c6c 	.word	0x20001c6c
 8005d18:	51eb851f 	.word	0x51eb851f
 8005d1c:	20000740 	.word	0x20000740
 8005d20:	20001c68 	.word	0x20001c68
 8005d24:	20003e54 	.word	0x20003e54
 8005d28:	20004174 	.word	0x20004174
 8005d2c:	2000419c 	.word	0x2000419c
 8005d30:	20003e44 	.word	0x20003e44
 8005d34:	20004720 	.word	0x20004720
 8005d38:	20004ec0 	.word	0x20004ec0
 8005d3c:	20004ec4 	.word	0x20004ec4
 8005d40:	20004eb8 	.word	0x20004eb8
 8005d44:	20004ebc 	.word	0x20004ebc
 8005d48:	20000550 	.word	0x20000550
 8005d4c:	20000168 	.word	0x20000168
 8005d50:	20000504 	.word	0x20000504
 8005d54:	200004b8 	.word	0x200004b8
 8005d58:	20000218 	.word	0x20000218

08005d5c <Stop_Measure>:

/*-----FINE MISURA-----*/
void Stop_Measure(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(PRESSURE_ADC);
 8005d60:	4808      	ldr	r0, [pc, #32]	@ (8005d84 <Stop_Measure+0x28>)
 8005d62:	f005 fc31 	bl	800b5c8 <HAL_ADC_Stop_DMA>
	HAL_TIM_OC_Stop_IT(ADC_TIMER, TIM_CHANNEL_3);
 8005d66:	2108      	movs	r1, #8
 8005d68:	4807      	ldr	r0, [pc, #28]	@ (8005d88 <Stop_Measure+0x2c>)
 8005d6a:	f00c fcbf 	bl	80126ec <HAL_TIM_OC_Stop_IT>
	HAL_TIM_PWM_Stop(ACC_TIMER, TIM_CHANNEL_3);
 8005d6e:	2108      	movs	r1, #8
 8005d70:	4806      	ldr	r0, [pc, #24]	@ (8005d8c <Stop_Measure+0x30>)
 8005d72:	f00c ff07 	bl	8012b84 <HAL_TIM_PWM_Stop>
	HAL_TIM_IC_Stop_IT(VOLUME_TIMER, TIM_CHANNEL_1);
 8005d76:	2100      	movs	r1, #0
 8005d78:	4805      	ldr	r0, [pc, #20]	@ (8005d90 <Stop_Measure+0x34>)
 8005d7a:	f00d f93b 	bl	8012ff4 <HAL_TIM_IC_Stop_IT>
}
 8005d7e:	bf00      	nop
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20000218 	.word	0x20000218
 8005d88:	20000550 	.word	0x20000550
 8005d8c:	20000504 	.word	0x20000504
 8005d90:	200004b8 	.word	0x200004b8

08005d94 <Warning_Detection>:

/*-----DETECTION COLPO D'ARIETE-----*/
void Warning_Detection(uint16_t* Data)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
	uint16_t max = Data[0];
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	881b      	ldrh	r3, [r3, #0]
 8005da0:	81fb      	strh	r3, [r7, #14]
	uint16_t min = Data[0];
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	81bb      	strh	r3, [r7, #12]

	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 8005da8:	2301      	movs	r3, #1
 8005daa:	60bb      	str	r3, [r7, #8]
 8005dac:	e03a      	b.n	8005e24 <Warning_Detection+0x90>
	{
		if(Data[i] > max)
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	4413      	add	r3, r2
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	89fa      	ldrh	r2, [r7, #14]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d206      	bcs.n	8005dcc <Warning_Detection+0x38>
		{
			max = Data[i];
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	81fb      	strh	r3, [r7, #14]
 8005dca:	e00d      	b.n	8005de8 <Warning_Detection+0x54>
		}
		else if(Data[i] < min)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	89ba      	ldrh	r2, [r7, #12]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d905      	bls.n	8005de8 <Warning_Detection+0x54>
		{
			min = Data[i];
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	4413      	add	r3, r2
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	81bb      	strh	r3, [r7, #12]
		}

		if(Data[i] < sys.Low_th || Data[i] > sys.High_th)
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	005b      	lsls	r3, r3, #1
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	4413      	add	r3, r2
 8005df0:	881a      	ldrh	r2, [r3, #0]
 8005df2:	4b17      	ldr	r3, [pc, #92]	@ (8005e50 <Warning_Detection+0xbc>)
 8005df4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005df8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d30a      	bcc.n	8005e14 <Warning_Detection+0x80>
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	4413      	add	r3, r2
 8005e06:	881a      	ldrh	r2, [r3, #0]
 8005e08:	4b11      	ldr	r3, [pc, #68]	@ (8005e50 <Warning_Detection+0xbc>)
 8005e0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e0e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d904      	bls.n	8005e1e <Warning_Detection+0x8a>
		{
			flags.Threshold_Detected= 1;
 8005e14:	4a0f      	ldr	r2, [pc, #60]	@ (8005e54 <Warning_Detection+0xc0>)
 8005e16:	7813      	ldrb	r3, [r2, #0]
 8005e18:	f043 0310 	orr.w	r3, r3, #16
 8005e1c:	7013      	strb	r3, [r2, #0]
	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	3301      	adds	r3, #1
 8005e22:	60bb      	str	r3, [r7, #8]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	2bc7      	cmp	r3, #199	@ 0xc7
 8005e28:	ddc1      	ble.n	8005dae <Warning_Detection+0x1a>
		}
	}

	if(max - min >= Hammer_Th)
 8005e2a:	89fa      	ldrh	r2, [r7, #14]
 8005e2c:	89bb      	ldrh	r3, [r7, #12]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	4a09      	ldr	r2, [pc, #36]	@ (8005e58 <Warning_Detection+0xc4>)
 8005e32:	8812      	ldrh	r2, [r2, #0]
 8005e34:	4293      	cmp	r3, r2
 8005e36:	db04      	blt.n	8005e42 <Warning_Detection+0xae>
	{
		flags.Hammer_Detected = 1;
 8005e38:	4a06      	ldr	r2, [pc, #24]	@ (8005e54 <Warning_Detection+0xc0>)
 8005e3a:	7813      	ldrb	r3, [r2, #0]
 8005e3c:	f043 0308 	orr.w	r3, r3, #8
 8005e40:	7013      	strb	r3, [r2, #0]
	}

}
 8005e42:	bf00      	nop
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	20000740 	.word	0x20000740
 8005e54:	20001c68 	.word	0x20001c68
 8005e58:	20005480 	.word	0x20005480

08005e5c <RAM_Save_Measure>:

/*-----SALVATAGGIO MISURA IN RAM-----*/
void RAM_Save_Measure(Compressed_Sample_Typedef* sample, uint8_t* compressed_data)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
    uint32_t samples_size = sample->compressed_size.pressure_size +
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	461a      	mov	r2, r3
                            sample->compressed_size.volume_size +
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	885b      	ldrh	r3, [r3, #2]
 8005e72:	b29b      	uxth	r3, r3
    uint32_t samples_size = sample->compressed_size.pressure_size +
 8005e74:	4413      	add	r3, r2
                            sample->compressed_size.acceleration_size;
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	8892      	ldrh	r2, [r2, #4]
 8005e7a:	b292      	uxth	r2, r2
                            sample->compressed_size.volume_size +
 8005e7c:	4413      	add	r3, r2
    uint32_t samples_size = sample->compressed_size.pressure_size +
 8005e7e:	613b      	str	r3, [r7, #16]
    uint32_t total_size = METADATA_SIZE + samples_size;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	3306      	adds	r3, #6
 8005e84:	60fb      	str	r3, [r7, #12]
    uint32_t address = sys.Current_RAM_Base + sys.Current_RAM_Len;
 8005e86:	4b23      	ldr	r3, [pc, #140]	@ (8005f14 <RAM_Save_Measure+0xb8>)
 8005e88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e8c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8005e90:	4b20      	ldr	r3, [pc, #128]	@ (8005f14 <RAM_Save_Measure+0xb8>)
 8005e92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e96:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005e9a:	4413      	add	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]

	if(Saved_Samples >= sys.RAM_Samples_Number) 
 8005e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005f18 <RAM_Save_Measure+0xbc>)
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8005f14 <RAM_Save_Measure+0xb8>)
 8005ea6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eaa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d312      	bcc.n	8005ed8 <RAM_Save_Measure+0x7c>
	{
		sys.Current_RAM_Len = Saved_Bytes;
 8005eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8005f1c <RAM_Save_Measure+0xc0>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a17      	ldr	r2, [pc, #92]	@ (8005f14 <RAM_Save_Measure+0xb8>)
 8005eb8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005ebc:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
		Saved_Bytes = 0;
 8005ec0:	4b16      	ldr	r3, [pc, #88]	@ (8005f1c <RAM_Save_Measure+0xc0>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	601a      	str	r2, [r3, #0]
		Saved_Samples = 0;
 8005ec6:	4b14      	ldr	r3, [pc, #80]	@ (8005f18 <RAM_Save_Measure+0xbc>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	801a      	strh	r2, [r3, #0]
		address = sys.Current_RAM_Base;
 8005ecc:	4b11      	ldr	r3, [pc, #68]	@ (8005f14 <RAM_Save_Measure+0xb8>)
 8005ece:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ed2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005ed6:	617b      	str	r3, [r7, #20]
    }

	RAM_Write(address, METADATA_SIZE, (uint8_t*)sample);
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	2106      	movs	r1, #6
 8005edc:	6978      	ldr	r0, [r7, #20]
 8005ede:	f001 f875 	bl	8006fcc <RAM_Write>
    address += METADATA_SIZE;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	3306      	adds	r3, #6
 8005ee6:	617b      	str	r3, [r7, #20]

	RAM_Write(address, samples_size, compressed_data);
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	6939      	ldr	r1, [r7, #16]
 8005eec:	6978      	ldr	r0, [r7, #20]
 8005eee:	f001 f86d 	bl	8006fcc <RAM_Write>
    
    Saved_Bytes += total_size;
 8005ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8005f1c <RAM_Save_Measure+0xc0>)
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4413      	add	r3, r2
 8005efa:	4a08      	ldr	r2, [pc, #32]	@ (8005f1c <RAM_Save_Measure+0xc0>)
 8005efc:	6013      	str	r3, [r2, #0]
	Saved_Samples++;
 8005efe:	4b06      	ldr	r3, [pc, #24]	@ (8005f18 <RAM_Save_Measure+0xbc>)
 8005f00:	881b      	ldrh	r3, [r3, #0]
 8005f02:	3301      	adds	r3, #1
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	4b04      	ldr	r3, [pc, #16]	@ (8005f18 <RAM_Save_Measure+0xbc>)
 8005f08:	801a      	strh	r2, [r3, #0]
}
 8005f0a:	bf00      	nop
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20000740 	.word	0x20000740
 8005f18:	20004ec4 	.word	0x20004ec4
 8005f1c:	20004ec0 	.word	0x20004ec0

08005f20 <Send_Measure_Chunk>:

/*-----INVIO CHUNK MISURA-----*/
uint32_t Send_Measure_Chunk(uint32_t buffer_base, uint32_t buffer_len, uint32_t start_address)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08c      	sub	sp, #48	@ 0x30
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
    uint32_t chunk_fill = 0;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t address = start_address;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t end_address = start_address; // Per fermarsi quando si torna al punto di partenza
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	623b      	str	r3, [r7, #32]
    uint8_t first_loop = 1;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (buffer_len == 0) 
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <Send_Measure_Chunk+0x28>
	{
        return 0;
 8005f44:	2300      	movs	r3, #0
 8005f46:	e083      	b.n	8006050 <Send_Measure_Chunk+0x130>
    }

    do {
        // Gestione wrap-around circolare
        if (address >= buffer_base + buffer_len) 
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d301      	bcc.n	8005f58 <Send_Measure_Chunk+0x38>
		{
            address = buffer_base;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        // Controlla se c'è spazio per i metadata
        if ((buffer_base + buffer_len - address) < METADATA_SIZE && address < buffer_base + buffer_len) 
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	441a      	add	r2, r3
 8005f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b05      	cmp	r3, #5
 8005f64:	d805      	bhi.n	8005f72 <Send_Measure_Chunk+0x52>
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d357      	bcc.n	8006022 <Send_Measure_Chunk+0x102>
		{
            break;
        }
        if ((chunk_fill + METADATA_SIZE) > sizeof(tcp_chunk)) 
 8005f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f74:	3306      	adds	r3, #6
 8005f76:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d853      	bhi.n	8006026 <Send_Measure_Chunk+0x106>
            break;
        }

        // Leggi header sample
        Compressed_Sample_Typedef sample_header;
        RAM_Read(address, METADATA_SIZE, (uint8_t*)&sample_header);
 8005f7e:	f107 0310 	add.w	r3, r7, #16
 8005f82:	461a      	mov	r2, r3
 8005f84:	2106      	movs	r1, #6
 8005f86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f88:	f001 f831 	bl	8006fee <RAM_Read>

        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 8005f8c:	8a3b      	ldrh	r3, [r7, #16]
 8005f8e:	461a      	mov	r2, r3
                               sample_header.compressed_size.volume_size +
 8005f90:	8a7b      	ldrh	r3, [r7, #18]
        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 8005f92:	4413      	add	r3, r2
                               sample_header.compressed_size.acceleration_size;
 8005f94:	8aba      	ldrh	r2, [r7, #20]
                               sample_header.compressed_size.volume_size +
 8005f96:	4413      	add	r3, r2
        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 8005f98:	61fb      	str	r3, [r7, #28]
        uint32_t sample_total_size = METADATA_SIZE + sample_size;
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	3306      	adds	r3, #6
 8005f9e:	61bb      	str	r3, [r7, #24]

        if ((chunk_fill + sample_total_size) > sizeof(tcp_chunk)) 
 8005fa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d83d      	bhi.n	800602a <Send_Measure_Chunk+0x10a>
		{
            break;
        }

        RAM_Read(address, METADATA_SIZE, tcp_chunk + chunk_fill);
 8005fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb0:	4a29      	ldr	r2, [pc, #164]	@ (8006058 <Send_Measure_Chunk+0x138>)
 8005fb2:	4413      	add	r3, r2
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	2106      	movs	r1, #6
 8005fb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fba:	f001 f818 	bl	8006fee <RAM_Read>
        chunk_fill += METADATA_SIZE;
 8005fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc0:	3306      	adds	r3, #6
 8005fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        address += METADATA_SIZE;
 8005fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc6:	3306      	adds	r3, #6
 8005fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (address >= buffer_base + buffer_len) address = buffer_base;
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	4413      	add	r3, r2
 8005fd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d301      	bcc.n	8005fda <Send_Measure_Chunk+0xba>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	62bb      	str	r3, [r7, #40]	@ 0x28

        RAM_Read(address, sample_size, tcp_chunk + chunk_fill);
 8005fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8006058 <Send_Measure_Chunk+0x138>)
 8005fde:	4413      	add	r3, r2
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	69f9      	ldr	r1, [r7, #28]
 8005fe4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fe6:	f001 f802 	bl	8006fee <RAM_Read>
        chunk_fill += sample_size;
 8005fea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	4413      	add	r3, r2
 8005ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        address += sample_size;
 8005ff2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (address >= buffer_base + buffer_len) address = buffer_base;
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	4413      	add	r3, r2
 8006000:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006002:	429a      	cmp	r2, r3
 8006004:	d301      	bcc.n	800600a <Send_Measure_Chunk+0xea>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	62bb      	str	r3, [r7, #40]	@ 0x28

        // Fermati se hai completato il giro
        if (address == end_address && !first_loop) 
 800600a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	429a      	cmp	r2, r3
 8006010:	d103      	bne.n	800601a <Send_Measure_Chunk+0xfa>
 8006012:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006016:	2b00      	cmp	r3, #0
 8006018:	d009      	beq.n	800602e <Send_Measure_Chunk+0x10e>
		{
            break;
        }
        first_loop = 0;
 800601a:	2300      	movs	r3, #0
 800601c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    do {
 8006020:	e792      	b.n	8005f48 <Send_Measure_Chunk+0x28>
            break;
 8006022:	bf00      	nop
 8006024:	e004      	b.n	8006030 <Send_Measure_Chunk+0x110>
            break;
 8006026:	bf00      	nop
 8006028:	e002      	b.n	8006030 <Send_Measure_Chunk+0x110>
            break;
 800602a:	bf00      	nop
 800602c:	e000      	b.n	8006030 <Send_Measure_Chunk+0x110>
            break;
 800602e:	bf00      	nop
    } while (1);

    if (chunk_fill > 0) 
 8006030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006032:	2b00      	cmp	r3, #0
 8006034:	d005      	beq.n	8006042 <Send_Measure_Chunk+0x122>
	{
        SIM_Send_TCP_Chunk_DMA(tcp_chunk, chunk_fill);
 8006036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006038:	b29b      	uxth	r3, r3
 800603a:	4619      	mov	r1, r3
 800603c:	4806      	ldr	r0, [pc, #24]	@ (8006058 <Send_Measure_Chunk+0x138>)
 800603e:	f7fc f84b 	bl	80020d8 <SIM_Send_TCP_Chunk_DMA>
    }

    // Se hai completato il giro, ritorna 0
    if (address == end_address) 
 8006042:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	429a      	cmp	r2, r3
 8006048:	d101      	bne.n	800604e <Send_Measure_Chunk+0x12e>
	{
        return 0;
 800604a:	2300      	movs	r3, #0
 800604c:	e000      	b.n	8006050 <Send_Measure_Chunk+0x130>
    }
    return address;
 800604e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8006050:	4618      	mov	r0, r3
 8006052:	3730      	adds	r7, #48	@ 0x30
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	20004ecc 	.word	0x20004ecc

0800605c <Compress_Sample>:

/*-----COMPRESSIONE DATI-----*/
Compressed_Sizes_Typedef Compress_Sample(uint8_t *input, uint16_t input_len, uint8_t *output)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b09a      	sub	sp, #104	@ 0x68
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	603b      	str	r3, [r7, #0]
 8006068:	4613      	mov	r3, r2
 800606a:	80fb      	strh	r3, [r7, #6]
	uint16_t out_idx = 0;
 800606c:	2300      	movs	r3, #0
 800606e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	uint8_t packed_byte = 0;
 8006072:	2300      	movs	r3, #0
 8006074:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	Compressed_Sizes_Typedef sizes = {0, 0, 0};
 8006078:	2300      	movs	r3, #0
 800607a:	843b      	strh	r3, [r7, #32]
 800607c:	2300      	movs	r3, #0
 800607e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006080:	2300      	movs	r3, #0
 8006082:	84bb      	strh	r3, [r7, #36]	@ 0x24

    AdpcmState_Typedef press_state = {0, 0};
 8006084:	2300      	movs	r3, #0
 8006086:	83bb      	strh	r3, [r7, #28]
 8006088:	2300      	movs	r3, #0
 800608a:	77bb      	strb	r3, [r7, #30]
    AdpcmState_Typedef acc_x_state = {0, 0}, acc_y_state = {0, 0}, acc_z_state = {0, 0};
 800608c:	2300      	movs	r3, #0
 800608e:	833b      	strh	r3, [r7, #24]
 8006090:	2300      	movs	r3, #0
 8006092:	76bb      	strb	r3, [r7, #26]
 8006094:	2300      	movs	r3, #0
 8006096:	82bb      	strh	r3, [r7, #20]
 8006098:	2300      	movs	r3, #0
 800609a:	75bb      	strb	r3, [r7, #22]
 800609c:	2300      	movs	r3, #0
 800609e:	823b      	strh	r3, [r7, #16]
 80060a0:	2300      	movs	r3, #0
 80060a2:	74bb      	strb	r3, [r7, #18]

	// --- 1. Pressione ---
	uint16_t *adc = (uint16_t*)input;
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint16_t pressure_start = out_idx;
 80060a8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80060ac:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	output[out_idx++] = adc[0] & 0xFF;
 80060b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060b2:	881a      	ldrh	r2, [r3, #0]
 80060b4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80060b8:	1c59      	adds	r1, r3, #1
 80060ba:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80060be:	4619      	mov	r1, r3
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	440b      	add	r3, r1
 80060c4:	b2d2      	uxtb	r2, r2
 80060c6:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = adc[0] >> 8;
 80060c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	0a1b      	lsrs	r3, r3, #8
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80060d4:	1c59      	adds	r1, r3, #1
 80060d6:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80060da:	4619      	mov	r1, r3
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	440b      	add	r3, r1
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]
	press_state.previous_value = adc[0];
 80060e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	b21b      	sxth	r3, r3
 80060ea:	83bb      	strh	r3, [r7, #28]
	for (int i = 1; i < PRESS_HALF_SAMPLES; i++) 
 80060ec:	2301      	movs	r3, #1
 80060ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80060f0:	e033      	b.n	800615a <Compress_Sample+0xfe>
	{
		uint8_t nibble = ADPCM_Compression(adc[i], &press_state, step_size_table_12bit);
 80060f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060f8:	4413      	add	r3, r2
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	b21b      	sxth	r3, r3
 80060fe:	f107 011c 	add.w	r1, r7, #28
 8006102:	4a99      	ldr	r2, [pc, #612]	@ (8006368 <Compress_Sample+0x30c>)
 8006104:	4618      	mov	r0, r3
 8006106:	f000 f9cf 	bl	80064a8 <ADPCM_Compression>
 800610a:	4603      	mov	r3, r0
 800610c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (i % 2 != 0) 
 8006110:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d004      	beq.n	8006124 <Compress_Sample+0xc8>
		{
			packed_byte = nibble;
 800611a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800611e:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 8006122:	e017      	b.n	8006154 <Compress_Sample+0xf8>
		} else 
		{
			packed_byte |= (nibble << 4);
 8006124:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006128:	011b      	lsls	r3, r3, #4
 800612a:	b25a      	sxtb	r2, r3
 800612c:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8006130:	4313      	orrs	r3, r2
 8006132:	b25b      	sxtb	r3, r3
 8006134:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
			output[out_idx++] = packed_byte;
 8006138:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800613c:	1c5a      	adds	r2, r3, #1
 800613e:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8006142:	461a      	mov	r2, r3
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	4413      	add	r3, r2
 8006148:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 800614c:	701a      	strb	r2, [r3, #0]
			packed_byte = 0;
 800614e:	2300      	movs	r3, #0
 8006150:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	for (int i = 1; i < PRESS_HALF_SAMPLES; i++) 
 8006154:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006156:	3301      	adds	r3, #1
 8006158:	663b      	str	r3, [r7, #96]	@ 0x60
 800615a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800615c:	2bc7      	cmp	r3, #199	@ 0xc7
 800615e:	ddc8      	ble.n	80060f2 <Compress_Sample+0x96>
	if (PRESS_HALF_SAMPLES % 2 != 0) 
	{
		output[out_idx++] = packed_byte;
		packed_byte = 0;
	}
	sizes.pressure_size = out_idx - pressure_start;
 8006160:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8006164:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	b29b      	uxth	r3, r3
 800616c:	843b      	strh	r3, [r7, #32]

	// --- 2. Flusso (RLE) ---
	uint32_t *counter = (uint32_t*)(input + PRESS_HALF_LEN);
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006174:	643b      	str	r3, [r7, #64]	@ 0x40
	uint16_t volume_start = out_idx;
 8006176:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800617a:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	uint32_t prev = counter[0];
 800617c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint16_t run_len = 1;
 8006182:	2301      	movs	r3, #1
 8006184:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

	for (int i = 1; i < MAX_VOLUME_SAMPLES; i++) {
 8006188:	2301      	movs	r3, #1
 800618a:	657b      	str	r3, [r7, #84]	@ 0x54
 800618c:	e058      	b.n	8006240 <Compress_Sample+0x1e4>
		if (counter[i] == prev && run_len < 255) {
 800618e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006194:	4413      	add	r3, r2
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800619a:	429a      	cmp	r2, r3
 800619c:	d109      	bne.n	80061b2 <Compress_Sample+0x156>
 800619e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80061a2:	2bfe      	cmp	r3, #254	@ 0xfe
 80061a4:	d805      	bhi.n	80061b2 <Compress_Sample+0x156>
			run_len++;
 80061a6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80061aa:	3301      	adds	r3, #1
 80061ac:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80061b0:	e043      	b.n	800623a <Compress_Sample+0x1de>
		} else {
			// Scrivi valore e run_len (4 byte valore + 1 byte run_len)
			output[out_idx++] = prev & 0xFF;
 80061b2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 80061bc:	461a      	mov	r2, r3
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	4413      	add	r3, r2
 80061c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80061c4:	b2d2      	uxtb	r2, r2
 80061c6:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 8) & 0xFF;
 80061c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061ca:	0a1a      	lsrs	r2, r3, #8
 80061cc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80061d0:	1c59      	adds	r1, r3, #1
 80061d2:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80061d6:	4619      	mov	r1, r3
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	440b      	add	r3, r1
 80061dc:	b2d2      	uxtb	r2, r2
 80061de:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 16) & 0xFF;
 80061e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061e2:	0c1a      	lsrs	r2, r3, #16
 80061e4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80061e8:	1c59      	adds	r1, r3, #1
 80061ea:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80061ee:	4619      	mov	r1, r3
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	440b      	add	r3, r1
 80061f4:	b2d2      	uxtb	r2, r2
 80061f6:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 24) & 0xFF;
 80061f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061fa:	0e1a      	lsrs	r2, r3, #24
 80061fc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006200:	1c59      	adds	r1, r3, #1
 8006202:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006206:	4619      	mov	r1, r3
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	440b      	add	r3, r1
 800620c:	b2d2      	uxtb	r2, r2
 800620e:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = run_len;
 8006210:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006214:	1c5a      	adds	r2, r3, #1
 8006216:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 800621a:	461a      	mov	r2, r3
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	4413      	add	r3, r2
 8006220:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8006224:	b2d2      	uxtb	r2, r2
 8006226:	701a      	strb	r2, [r3, #0]
			prev = counter[i];
 8006228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800622e:	4413      	add	r3, r2
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	65fb      	str	r3, [r7, #92]	@ 0x5c
			run_len = 1;
 8006234:	2301      	movs	r3, #1
 8006236:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	for (int i = 1; i < MAX_VOLUME_SAMPLES; i++) {
 800623a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800623c:	3301      	adds	r3, #1
 800623e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006242:	2b09      	cmp	r3, #9
 8006244:	dda3      	ble.n	800618e <Compress_Sample+0x132>
		}
	}
	// Scrivi l'ultimo run
	output[out_idx++] = prev & 0xFF;
 8006246:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8006250:	461a      	mov	r2, r3
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	4413      	add	r3, r2
 8006256:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006258:	b2d2      	uxtb	r2, r2
 800625a:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 8) & 0xFF;
 800625c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800625e:	0a1a      	lsrs	r2, r3, #8
 8006260:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006264:	1c59      	adds	r1, r3, #1
 8006266:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800626a:	4619      	mov	r1, r3
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	440b      	add	r3, r1
 8006270:	b2d2      	uxtb	r2, r2
 8006272:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 16) & 0xFF;
 8006274:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006276:	0c1a      	lsrs	r2, r3, #16
 8006278:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800627c:	1c59      	adds	r1, r3, #1
 800627e:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006282:	4619      	mov	r1, r3
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	440b      	add	r3, r1
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 24) & 0xFF;
 800628c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800628e:	0e1a      	lsrs	r2, r3, #24
 8006290:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006294:	1c59      	adds	r1, r3, #1
 8006296:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800629a:	4619      	mov	r1, r3
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	440b      	add	r3, r1
 80062a0:	b2d2      	uxtb	r2, r2
 80062a2:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = run_len;
 80062a4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 80062ae:	461a      	mov	r2, r3
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	4413      	add	r3, r2
 80062b4:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 80062b8:	b2d2      	uxtb	r2, r2
 80062ba:	701a      	strb	r2, [r3, #0]

	sizes.volume_size = out_idx - volume_start;
 80062bc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 80062c0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	847b      	strh	r3, [r7, #34]	@ 0x22

	// --- 3. Accelerometro (3 canali separati) ---
	uint8_t *accel = input + PRESS_HALF_LEN + MAX_VOLUME_LEN;
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80062ce:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint16_t accel_start = out_idx;
 80062d0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80062d4:	86fb      	strh	r3, [r7, #54]	@ 0x36

	uint16_t x0 = accel[1] | (accel[2] << 8);
 80062d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d8:	3301      	adds	r3, #1
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	b21a      	sxth	r2, r3
 80062de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e0:	3302      	adds	r3, #2
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	b21b      	sxth	r3, r3
 80062e6:	021b      	lsls	r3, r3, #8
 80062e8:	b21b      	sxth	r3, r3
 80062ea:	4313      	orrs	r3, r2
 80062ec:	b21b      	sxth	r3, r3
 80062ee:	86bb      	strh	r3, [r7, #52]	@ 0x34
	uint16_t y0 = accel[3] | (accel[4] << 8);
 80062f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f2:	3303      	adds	r3, #3
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	b21a      	sxth	r2, r3
 80062f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fa:	3304      	adds	r3, #4
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	b21b      	sxth	r3, r3
 8006300:	021b      	lsls	r3, r3, #8
 8006302:	b21b      	sxth	r3, r3
 8006304:	4313      	orrs	r3, r2
 8006306:	b21b      	sxth	r3, r3
 8006308:	867b      	strh	r3, [r7, #50]	@ 0x32
	uint16_t z0 = accel[5] | (accel[6] << 8);
 800630a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800630c:	3305      	adds	r3, #5
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	b21a      	sxth	r2, r3
 8006312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006314:	3306      	adds	r3, #6
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	b21b      	sxth	r3, r3
 800631a:	021b      	lsls	r3, r3, #8
 800631c:	b21b      	sxth	r3, r3
 800631e:	4313      	orrs	r3, r2
 8006320:	b21b      	sxth	r3, r3
 8006322:	863b      	strh	r3, [r7, #48]	@ 0x30
	acc_x_state.previous_value = x0;
 8006324:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8006328:	833b      	strh	r3, [r7, #24]
	acc_y_state.previous_value = y0;
 800632a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800632e:	82bb      	strh	r3, [r7, #20]
	acc_z_state.previous_value = z0;
 8006330:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8006334:	823b      	strh	r3, [r7, #16]
	for(int k=0; k<7; ++k) output[out_idx++] = accel[k];
 8006336:	2300      	movs	r3, #0
 8006338:	653b      	str	r3, [r7, #80]	@ 0x50
 800633a:	e00f      	b.n	800635c <Compress_Sample+0x300>
 800633c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800633e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006340:	441a      	add	r2, r3
 8006342:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006346:	1c59      	adds	r1, r3, #1
 8006348:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800634c:	4619      	mov	r1, r3
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	440b      	add	r3, r1
 8006352:	7812      	ldrb	r2, [r2, #0]
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006358:	3301      	adds	r3, #1
 800635a:	653b      	str	r3, [r7, #80]	@ 0x50
 800635c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800635e:	2b06      	cmp	r3, #6
 8006360:	ddec      	ble.n	800633c <Compress_Sample+0x2e0>
	for (int i = 1; i < ACC_FIFO_WATERMARK; i++) 
 8006362:	2301      	movs	r3, #1
 8006364:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006366:	e087      	b.n	8006478 <Compress_Sample+0x41c>
 8006368:	200000b0 	.word	0x200000b0
	{
		uint16_t x = accel[i*7+1] | (accel[i*7+2] << 8);
 800636c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800636e:	4613      	mov	r3, r2
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	1a9b      	subs	r3, r3, r2
 8006374:	3301      	adds	r3, #1
 8006376:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006378:	4413      	add	r3, r2
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	b219      	sxth	r1, r3
 800637e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006380:	4613      	mov	r3, r2
 8006382:	00db      	lsls	r3, r3, #3
 8006384:	1a9b      	subs	r3, r3, r2
 8006386:	3302      	adds	r3, #2
 8006388:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800638a:	4413      	add	r3, r2
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	b21b      	sxth	r3, r3
 8006390:	021b      	lsls	r3, r3, #8
 8006392:	b21b      	sxth	r3, r3
 8006394:	430b      	orrs	r3, r1
 8006396:	b21b      	sxth	r3, r3
 8006398:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		uint16_t y = accel[i*7+3] | (accel[i*7+4] << 8);
 800639a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800639c:	4613      	mov	r3, r2
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	1a9b      	subs	r3, r3, r2
 80063a2:	3303      	adds	r3, #3
 80063a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063a6:	4413      	add	r3, r2
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	b219      	sxth	r1, r3
 80063ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063ae:	4613      	mov	r3, r2
 80063b0:	00db      	lsls	r3, r3, #3
 80063b2:	1a9b      	subs	r3, r3, r2
 80063b4:	3304      	adds	r3, #4
 80063b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063b8:	4413      	add	r3, r2
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	b21b      	sxth	r3, r3
 80063be:	021b      	lsls	r3, r3, #8
 80063c0:	b21b      	sxth	r3, r3
 80063c2:	430b      	orrs	r3, r1
 80063c4:	b21b      	sxth	r3, r3
 80063c6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		uint16_t z = accel[i*7+5] | (accel[i*7+6] << 8);
 80063c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063ca:	4613      	mov	r3, r2
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	1a9b      	subs	r3, r3, r2
 80063d0:	3305      	adds	r3, #5
 80063d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063d4:	4413      	add	r3, r2
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	b219      	sxth	r1, r3
 80063da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063dc:	4613      	mov	r3, r2
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	1a9b      	subs	r3, r3, r2
 80063e2:	3306      	adds	r3, #6
 80063e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063e6:	4413      	add	r3, r2
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	b21b      	sxth	r3, r3
 80063ec:	021b      	lsls	r3, r3, #8
 80063ee:	b21b      	sxth	r3, r3
 80063f0:	430b      	orrs	r3, r1
 80063f2:	b21b      	sxth	r3, r3
 80063f4:	857b      	strh	r3, [r7, #42]	@ 0x2a
		uint8_t nibble_x = ADPCM_Compression(x, &acc_x_state, step_size_table_16bit);
 80063f6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80063fa:	f107 0118 	add.w	r1, r7, #24
 80063fe:	4a29      	ldr	r2, [pc, #164]	@ (80064a4 <Compress_Sample+0x448>)
 8006400:	4618      	mov	r0, r3
 8006402:	f000 f851 	bl	80064a8 <ADPCM_Compression>
 8006406:	4603      	mov	r3, r0
 8006408:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		uint8_t nibble_y = ADPCM_Compression(y, &acc_y_state, step_size_table_16bit);
 800640c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8006410:	f107 0114 	add.w	r1, r7, #20
 8006414:	4a23      	ldr	r2, [pc, #140]	@ (80064a4 <Compress_Sample+0x448>)
 8006416:	4618      	mov	r0, r3
 8006418:	f000 f846 	bl	80064a8 <ADPCM_Compression>
 800641c:	4603      	mov	r3, r0
 800641e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		uint8_t nibble_z = ADPCM_Compression(z, &acc_z_state, step_size_table_16bit);
 8006422:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8006426:	f107 0110 	add.w	r1, r7, #16
 800642a:	4a1e      	ldr	r2, [pc, #120]	@ (80064a4 <Compress_Sample+0x448>)
 800642c:	4618      	mov	r0, r3
 800642e:	f000 f83b 	bl	80064a8 <ADPCM_Compression>
 8006432:	4603      	mov	r3, r0
 8006434:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		output[out_idx++] = nibble_x | (nibble_y << 4);
 8006438:	f997 3028 	ldrsb.w	r3, [r7, #40]	@ 0x28
 800643c:	011b      	lsls	r3, r3, #4
 800643e:	b25a      	sxtb	r2, r3
 8006440:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 8006444:	4313      	orrs	r3, r2
 8006446:	b25a      	sxtb	r2, r3
 8006448:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800644c:	1c59      	adds	r1, r3, #1
 800644e:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006452:	4619      	mov	r1, r3
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	440b      	add	r3, r1
 8006458:	b2d2      	uxtb	r2, r2
 800645a:	701a      	strb	r2, [r3, #0]
		output[out_idx++] = nibble_z;
 800645c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8006466:	461a      	mov	r2, r3
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	4413      	add	r3, r2
 800646c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006470:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < ACC_FIFO_WATERMARK; i++) 
 8006472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006474:	3301      	adds	r3, #1
 8006476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006478:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800647a:	2bc7      	cmp	r3, #199	@ 0xc7
 800647c:	f77f af76 	ble.w	800636c <Compress_Sample+0x310>
	}
	sizes.acceleration_size = out_idx - accel_start;
 8006480:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8006484:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	b29b      	uxth	r3, r3
 800648a:	84bb      	strh	r3, [r7, #36]	@ 0x24

	return sizes;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	461a      	mov	r2, r3
 8006490:	f107 0320 	add.w	r3, r7, #32
 8006494:	6818      	ldr	r0, [r3, #0]
 8006496:	6010      	str	r0, [r2, #0]
 8006498:	889b      	ldrh	r3, [r3, #4]
 800649a:	8093      	strh	r3, [r2, #4]
}
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	3768      	adds	r7, #104	@ 0x68
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	20000000 	.word	0x20000000

080064a8 <ADPCM_Compression>:

/*-----FUNZIONE DI COMPRESSIONE ADPCM-----*/
uint8_t ADPCM_Compression(int16_t sample, AdpcmState_Typedef* state, uint16_t* step_size_table) 
{
 80064a8:	b480      	push	{r7}
 80064aa:	b08b      	sub	sp, #44	@ 0x2c
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	4603      	mov	r3, r0
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
 80064b4:	81fb      	strh	r3, [r7, #14]
    int32_t diff = (int32_t)sample - state->previous_value;
 80064b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80064c0:	1a9b      	subs	r3, r3, r2
 80064c2:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t step = step_size_table[state->step_index];
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	4413      	add	r3, r2
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	837b      	strh	r3, [r7, #26]
    uint8_t nibble = 0;
 80064d4:	2300      	movs	r3, #0
 80064d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    if (diff < 0) 
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	2b00      	cmp	r3, #0
 80064de:	da05      	bge.n	80064ec <ADPCM_Compression+0x44>
	{
        nibble = 8; // Bit di segno
 80064e0:	2308      	movs	r3, #8
 80064e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        diff = -diff;
 80064e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e8:	425b      	negs	r3, r3
 80064ea:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Calcola il nibble quantizzato
    uint32_t temp = (uint32_t)diff * 4;
 80064ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	617b      	str	r3, [r7, #20]
    if (temp < step) 
 80064f2:	8b7b      	ldrh	r3, [r7, #26]
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d312      	bcc.n	8006520 <ADPCM_Compression+0x78>
	{
        nibble |= 0;
    } 
	else 
	{
        nibble |= (uint8_t)((temp / step > 7) ? 7 : (temp / step));
 80064fa:	8b7b      	ldrh	r3, [r7, #26]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006502:	2b07      	cmp	r3, #7
 8006504:	d805      	bhi.n	8006512 <ADPCM_Compression+0x6a>
 8006506:	8b7b      	ldrh	r3, [r7, #26]
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	fbb2 f3f3 	udiv	r3, r2, r3
 800650e:	b25b      	sxtb	r3, r3
 8006510:	e000      	b.n	8006514 <ADPCM_Compression+0x6c>
 8006512:	2307      	movs	r3, #7
 8006514:	f997 2023 	ldrsb.w	r2, [r7, #35]	@ 0x23
 8006518:	4313      	orrs	r3, r2
 800651a:	b25b      	sxtb	r3, r3
 800651c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }

    // Ricostruisci il valore per la predizione successiva (usando solo il nibble)
    int32_t reconstructed_diff = (step * (nibble & 7)) / 4 + step / 8;
 8006520:	8b7b      	ldrh	r3, [r7, #26]
 8006522:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8006526:	f002 0207 	and.w	r2, r2, #7
 800652a:	fb02 f303 	mul.w	r3, r2, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	da00      	bge.n	8006534 <ADPCM_Compression+0x8c>
 8006532:	3303      	adds	r3, #3
 8006534:	109b      	asrs	r3, r3, #2
 8006536:	461a      	mov	r2, r3
 8006538:	8b7b      	ldrh	r3, [r7, #26]
 800653a:	08db      	lsrs	r3, r3, #3
 800653c:	b29b      	uxth	r3, r3
 800653e:	4413      	add	r3, r2
 8006540:	61fb      	str	r3, [r7, #28]
    if (nibble & 8) {
 8006542:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006546:	f003 0308 	and.w	r3, r3, #8
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <ADPCM_Compression+0xac>
        reconstructed_diff = -reconstructed_diff;
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	425b      	negs	r3, r3
 8006552:	61fb      	str	r3, [r7, #28]
    }
    
    state->previous_value += reconstructed_diff;
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800655a:	b29a      	uxth	r2, r3
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	b29b      	uxth	r3, r3
 8006560:	4413      	add	r3, r2
 8006562:	b29b      	uxth	r3, r3
 8006564:	b21a      	sxth	r2, r3
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	801a      	strh	r2, [r3, #0]
    // Clamp del valore predetto
    if (state->previous_value > 32767) state->previous_value = 32767;
    if (state->previous_value < -32768) state->previous_value = -32768;

    // Aggiorna l'indice dello step
    state->step_index += index_adjustment_table[nibble & 7];
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006570:	b2da      	uxtb	r2, r3
 8006572:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006576:	f003 0307 	and.w	r3, r3, #7
 800657a:	4910      	ldr	r1, [pc, #64]	@ (80065bc <ADPCM_Compression+0x114>)
 800657c:	56cb      	ldrsb	r3, [r1, r3]
 800657e:	b2db      	uxtb	r3, r3
 8006580:	4413      	add	r3, r2
 8006582:	b2db      	uxtb	r3, r3
 8006584:	b25a      	sxtb	r2, r3
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	709a      	strb	r2, [r3, #2]
    if (state->step_index < 0) state->step_index = 0;
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006590:	2b00      	cmp	r3, #0
 8006592:	da02      	bge.n	800659a <ADPCM_Compression+0xf2>
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	2200      	movs	r2, #0
 8006598:	709a      	strb	r2, [r3, #2]
    if (state->step_index > 87) state->step_index = 87;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80065a0:	2b57      	cmp	r3, #87	@ 0x57
 80065a2:	dd02      	ble.n	80065aa <ADPCM_Compression+0x102>
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2257      	movs	r2, #87	@ 0x57
 80065a8:	709a      	strb	r2, [r3, #2]

    return nibble;
 80065aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	372c      	adds	r7, #44	@ 0x2c
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	20000160 	.word	0x20000160

080065c0 <Apply_Config>:


/*-----APPLICA VALORI CONFIGURAZIONE-----*/
void Apply_Config(void)
{
 80065c0:	b590      	push	{r4, r7, lr}
 80065c2:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
	FIL config_file;
	UINT bytes_written;
	
	if(strcmp(cfg_var, "DEVICE_ID") == 0) 
 80065ca:	49af      	ldr	r1, [pc, #700]	@ (8006888 <Apply_Config+0x2c8>)
 80065cc:	48af      	ldr	r0, [pc, #700]	@ (800688c <Apply_Config+0x2cc>)
 80065ce:	f7f9 fdff 	bl	80001d0 <strcmp>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d107      	bne.n	80065e8 <Apply_Config+0x28>
	{
		config.device_id = (uint8_t)atoi(new_cfg_val);
 80065d8:	48ad      	ldr	r0, [pc, #692]	@ (8006890 <Apply_Config+0x2d0>)
 80065da:	f00f fb5b 	bl	8015c94 <atoi>
 80065de:	4603      	mov	r3, r0
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	4bac      	ldr	r3, [pc, #688]	@ (8006894 <Apply_Config+0x2d4>)
 80065e4:	701a      	strb	r2, [r3, #0]
 80065e6:	e11e      	b.n	8006826 <Apply_Config+0x266>
    }
	else if(strcmp(cfg_var, "SAMP_FREQ") == 0)
 80065e8:	49ab      	ldr	r1, [pc, #684]	@ (8006898 <Apply_Config+0x2d8>)
 80065ea:	48a8      	ldr	r0, [pc, #672]	@ (800688c <Apply_Config+0x2cc>)
 80065ec:	f7f9 fdf0 	bl	80001d0 <strcmp>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d132      	bne.n	800665c <Apply_Config+0x9c>
	{
		if((uint16_t)atoi(new_cfg_val) != 800 && (uint16_t)atoi(new_cfg_val) != 1600)
 80065f6:	48a6      	ldr	r0, [pc, #664]	@ (8006890 <Apply_Config+0x2d0>)
 80065f8:	f00f fb4c 	bl	8015c94 <atoi>
 80065fc:	4603      	mov	r3, r0
 80065fe:	b29b      	uxth	r3, r3
 8006600:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8006604:	d008      	beq.n	8006618 <Apply_Config+0x58>
 8006606:	48a2      	ldr	r0, [pc, #648]	@ (8006890 <Apply_Config+0x2d0>)
 8006608:	f00f fb44 	bl	8015c94 <atoi>
 800660c:	4603      	mov	r3, r0
 800660e:	b29b      	uxth	r3, r3
 8006610:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006614:	f040 8131 	bne.w	800687a <Apply_Config+0x2ba>
		{
			return;
		}
		else
		{
			if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 8006618:	4b9e      	ldr	r3, [pc, #632]	@ (8006894 <Apply_Config+0x2d4>)
 800661a:	885b      	ldrh	r3, [r3, #2]
 800661c:	4a9f      	ldr	r2, [pc, #636]	@ (800689c <Apply_Config+0x2dc>)
 800661e:	fba2 2303 	umull	r2, r3, r2, r3
 8006622:	099b      	lsrs	r3, r3, #6
 8006624:	b29b      	uxth	r3, r3
 8006626:	461a      	mov	r2, r3
 8006628:	4b9a      	ldr	r3, [pc, #616]	@ (8006894 <Apply_Config+0x2d4>)
 800662a:	791b      	ldrb	r3, [r3, #4]
 800662c:	fb02 f303 	mul.w	r3, r2, r3
 8006630:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006634:	fb02 f303 	mul.w	r3, r2, r3
 8006638:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 800663c:	005b      	lsls	r3, r3, #1
 800663e:	461c      	mov	r4, r3
 8006640:	f000 fd08 	bl	8007054 <psram_get_size>
 8006644:	4603      	mov	r3, r0
 8006646:	429c      	cmp	r4, r3
 8006648:	f240 80ed 	bls.w	8006826 <Apply_Config+0x266>
			{
				config.samp_freq = (uint16_t)atoi(new_cfg_val);
 800664c:	4890      	ldr	r0, [pc, #576]	@ (8006890 <Apply_Config+0x2d0>)
 800664e:	f00f fb21 	bl	8015c94 <atoi>
 8006652:	4603      	mov	r3, r0
 8006654:	b29a      	uxth	r2, r3
 8006656:	4b8f      	ldr	r3, [pc, #572]	@ (8006894 <Apply_Config+0x2d4>)
 8006658:	805a      	strh	r2, [r3, #2]
 800665a:	e0e4      	b.n	8006826 <Apply_Config+0x266>
			}
		}
	}
	else if(strcmp(cfg_var, "BUFFER_SECS") == 0)
 800665c:	4990      	ldr	r1, [pc, #576]	@ (80068a0 <Apply_Config+0x2e0>)
 800665e:	488b      	ldr	r0, [pc, #556]	@ (800688c <Apply_Config+0x2cc>)
 8006660:	f7f9 fdb6 	bl	80001d0 <strcmp>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d131      	bne.n	80066ce <Apply_Config+0x10e>
	{
		if((uint8_t)atoi(new_cfg_val) < 5 || (uint8_t)atoi(new_cfg_val) > 30)
 800666a:	4889      	ldr	r0, [pc, #548]	@ (8006890 <Apply_Config+0x2d0>)
 800666c:	f00f fb12 	bl	8015c94 <atoi>
 8006670:	4603      	mov	r3, r0
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b04      	cmp	r3, #4
 8006676:	f240 8102 	bls.w	800687e <Apply_Config+0x2be>
 800667a:	4885      	ldr	r0, [pc, #532]	@ (8006890 <Apply_Config+0x2d0>)
 800667c:	f00f fb0a 	bl	8015c94 <atoi>
 8006680:	4603      	mov	r3, r0
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b1e      	cmp	r3, #30
 8006686:	f200 80fa 	bhi.w	800687e <Apply_Config+0x2be>
		{
			return;
		}
		else
		{
			if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 800668a:	4b82      	ldr	r3, [pc, #520]	@ (8006894 <Apply_Config+0x2d4>)
 800668c:	885b      	ldrh	r3, [r3, #2]
 800668e:	4a83      	ldr	r2, [pc, #524]	@ (800689c <Apply_Config+0x2dc>)
 8006690:	fba2 2303 	umull	r2, r3, r2, r3
 8006694:	099b      	lsrs	r3, r3, #6
 8006696:	b29b      	uxth	r3, r3
 8006698:	461a      	mov	r2, r3
 800669a:	4b7e      	ldr	r3, [pc, #504]	@ (8006894 <Apply_Config+0x2d4>)
 800669c:	791b      	ldrb	r3, [r3, #4]
 800669e:	fb02 f303 	mul.w	r3, r2, r3
 80066a2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80066a6:	fb02 f303 	mul.w	r3, r2, r3
 80066aa:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	461c      	mov	r4, r3
 80066b2:	f000 fccf 	bl	8007054 <psram_get_size>
 80066b6:	4603      	mov	r3, r0
 80066b8:	429c      	cmp	r4, r3
 80066ba:	f240 80b4 	bls.w	8006826 <Apply_Config+0x266>
			{
				config.buffering_secs = (uint8_t)atoi(new_cfg_val);
 80066be:	4874      	ldr	r0, [pc, #464]	@ (8006890 <Apply_Config+0x2d0>)
 80066c0:	f00f fae8 	bl	8015c94 <atoi>
 80066c4:	4603      	mov	r3, r0
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	4b72      	ldr	r3, [pc, #456]	@ (8006894 <Apply_Config+0x2d4>)
 80066ca:	711a      	strb	r2, [r3, #4]
 80066cc:	e0ab      	b.n	8006826 <Apply_Config+0x266>
			}
		}
	}
	else if(strcmp(cfg_var, "CONN_TIMEOUT") == 0)
 80066ce:	4975      	ldr	r1, [pc, #468]	@ (80068a4 <Apply_Config+0x2e4>)
 80066d0:	486e      	ldr	r0, [pc, #440]	@ (800688c <Apply_Config+0x2cc>)
 80066d2:	f7f9 fd7d 	bl	80001d0 <strcmp>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d107      	bne.n	80066ec <Apply_Config+0x12c>
	{
		config.connection_timeout = (uint32_t)atoi(new_cfg_val);
 80066dc:	486c      	ldr	r0, [pc, #432]	@ (8006890 <Apply_Config+0x2d0>)
 80066de:	f00f fad9 	bl	8015c94 <atoi>
 80066e2:	4603      	mov	r3, r0
 80066e4:	461a      	mov	r2, r3
 80066e6:	4b6b      	ldr	r3, [pc, #428]	@ (8006894 <Apply_Config+0x2d4>)
 80066e8:	609a      	str	r2, [r3, #8]
 80066ea:	e09c      	b.n	8006826 <Apply_Config+0x266>
	}
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 80066ec:	496e      	ldr	r1, [pc, #440]	@ (80068a8 <Apply_Config+0x2e8>)
 80066ee:	4867      	ldr	r0, [pc, #412]	@ (800688c <Apply_Config+0x2cc>)
 80066f0:	f7f9 fd6e 	bl	80001d0 <strcmp>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d107      	bne.n	800670a <Apply_Config+0x14a>
	{
		config.hammer_th = (uint16_t)atoi(new_cfg_val);
 80066fa:	4865      	ldr	r0, [pc, #404]	@ (8006890 <Apply_Config+0x2d0>)
 80066fc:	f00f faca 	bl	8015c94 <atoi>
 8006700:	4603      	mov	r3, r0
 8006702:	b29a      	uxth	r2, r3
 8006704:	4b63      	ldr	r3, [pc, #396]	@ (8006894 <Apply_Config+0x2d4>)
 8006706:	819a      	strh	r2, [r3, #12]
 8006708:	e08d      	b.n	8006826 <Apply_Config+0x266>
	}
    else if(strcmp(cfg_var, "HIGH_TH") == 0) 
 800670a:	4968      	ldr	r1, [pc, #416]	@ (80068ac <Apply_Config+0x2ec>)
 800670c:	485f      	ldr	r0, [pc, #380]	@ (800688c <Apply_Config+0x2cc>)
 800670e:	f7f9 fd5f 	bl	80001d0 <strcmp>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d116      	bne.n	8006746 <Apply_Config+0x186>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 8006718:	4b65      	ldr	r3, [pc, #404]	@ (80068b0 <Apply_Config+0x2f0>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	f2c0 8082 	blt.w	8006826 <Apply_Config+0x266>
 8006722:	4b63      	ldr	r3, [pc, #396]	@ (80068b0 <Apply_Config+0x2f0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b17      	cmp	r3, #23
 8006728:	dc7d      	bgt.n	8006826 <Apply_Config+0x266>
		{
            config.high_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 800672a:	4859      	ldr	r0, [pc, #356]	@ (8006890 <Apply_Config+0x2d0>)
 800672c:	f00f fab2 	bl	8015c94 <atoi>
 8006730:	4602      	mov	r2, r0
 8006732:	4b5f      	ldr	r3, [pc, #380]	@ (80068b0 <Apply_Config+0x2f0>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	b291      	uxth	r1, r2
 8006738:	4a56      	ldr	r2, [pc, #344]	@ (8006894 <Apply_Config+0x2d4>)
 800673a:	331c      	adds	r3, #28
 800673c:	005b      	lsls	r3, r3, #1
 800673e:	4413      	add	r3, r2
 8006740:	460a      	mov	r2, r1
 8006742:	80da      	strh	r2, [r3, #6]
 8006744:	e06f      	b.n	8006826 <Apply_Config+0x266>
        }
    }
    else if(strcmp(cfg_var, "LOW_TH") == 0) 
 8006746:	495b      	ldr	r1, [pc, #364]	@ (80068b4 <Apply_Config+0x2f4>)
 8006748:	4850      	ldr	r0, [pc, #320]	@ (800688c <Apply_Config+0x2cc>)
 800674a:	f7f9 fd41 	bl	80001d0 <strcmp>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d115      	bne.n	8006780 <Apply_Config+0x1c0>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 8006754:	4b56      	ldr	r3, [pc, #344]	@ (80068b0 <Apply_Config+0x2f0>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	db64      	blt.n	8006826 <Apply_Config+0x266>
 800675c:	4b54      	ldr	r3, [pc, #336]	@ (80068b0 <Apply_Config+0x2f0>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b17      	cmp	r3, #23
 8006762:	dc60      	bgt.n	8006826 <Apply_Config+0x266>
		{
            config.low_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 8006764:	484a      	ldr	r0, [pc, #296]	@ (8006890 <Apply_Config+0x2d0>)
 8006766:	f00f fa95 	bl	8015c94 <atoi>
 800676a:	4602      	mov	r2, r0
 800676c:	4b50      	ldr	r3, [pc, #320]	@ (80068b0 <Apply_Config+0x2f0>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	b291      	uxth	r1, r2
 8006772:	4a48      	ldr	r2, [pc, #288]	@ (8006894 <Apply_Config+0x2d4>)
 8006774:	3304      	adds	r3, #4
 8006776:	005b      	lsls	r3, r3, #1
 8006778:	4413      	add	r3, r2
 800677a:	460a      	mov	r2, r1
 800677c:	80da      	strh	r2, [r3, #6]
 800677e:	e052      	b.n	8006826 <Apply_Config+0x266>
        }
    }
    else if(strcmp(cfg_var, "DATA_TOPIC") == 0) 
 8006780:	494d      	ldr	r1, [pc, #308]	@ (80068b8 <Apply_Config+0x2f8>)
 8006782:	4842      	ldr	r0, [pc, #264]	@ (800688c <Apply_Config+0x2cc>)
 8006784:	f7f9 fd24 	bl	80001d0 <strcmp>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10d      	bne.n	80067aa <Apply_Config+0x1ea>
	{
        strncpy(config.data_topic, new_cfg_val, sizeof(config.data_topic) - 1);
 800678e:	223f      	movs	r2, #63	@ 0x3f
 8006790:	493f      	ldr	r1, [pc, #252]	@ (8006890 <Apply_Config+0x2d0>)
 8006792:	484a      	ldr	r0, [pc, #296]	@ (80068bc <Apply_Config+0x2fc>)
 8006794:	f00f fb8f 	bl	8015eb6 <strncpy>
        config.data_topic[sizeof(config.data_topic) - 1] = '\0';
 8006798:	4b3e      	ldr	r3, [pc, #248]	@ (8006894 <Apply_Config+0x2d4>)
 800679a:	2200      	movs	r2, #0
 800679c:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
		strcpy(sys.MQTT.Data_Topic, config.data_topic);
 80067a0:	4946      	ldr	r1, [pc, #280]	@ (80068bc <Apply_Config+0x2fc>)
 80067a2:	4847      	ldr	r0, [pc, #284]	@ (80068c0 <Apply_Config+0x300>)
 80067a4:	f00f fbdc 	bl	8015f60 <strcpy>
 80067a8:	e03d      	b.n	8006826 <Apply_Config+0x266>
    }
    else if(strcmp(cfg_var, "CMD_TOPIC") == 0) 
 80067aa:	4946      	ldr	r1, [pc, #280]	@ (80068c4 <Apply_Config+0x304>)
 80067ac:	4837      	ldr	r0, [pc, #220]	@ (800688c <Apply_Config+0x2cc>)
 80067ae:	f7f9 fd0f 	bl	80001d0 <strcmp>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10d      	bne.n	80067d4 <Apply_Config+0x214>
	{
        strncpy(config.command_topic, new_cfg_val, sizeof(config.command_topic) - 1);
 80067b8:	223f      	movs	r2, #63	@ 0x3f
 80067ba:	4935      	ldr	r1, [pc, #212]	@ (8006890 <Apply_Config+0x2d0>)
 80067bc:	4842      	ldr	r0, [pc, #264]	@ (80068c8 <Apply_Config+0x308>)
 80067be:	f00f fb7a 	bl	8015eb6 <strncpy>
        config.command_topic[sizeof(config.command_topic) - 1] = '\0';
 80067c2:	4b34      	ldr	r3, [pc, #208]	@ (8006894 <Apply_Config+0x2d4>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
		strcpy(sys.MQTT.Command_Topic, config.command_topic);
 80067ca:	493f      	ldr	r1, [pc, #252]	@ (80068c8 <Apply_Config+0x308>)
 80067cc:	483f      	ldr	r0, [pc, #252]	@ (80068cc <Apply_Config+0x30c>)
 80067ce:	f00f fbc7 	bl	8015f60 <strcpy>
 80067d2:	e028      	b.n	8006826 <Apply_Config+0x266>
    }
	else if(strcmp(cfg_var, "INFO_TOPIC") == 0)
 80067d4:	493e      	ldr	r1, [pc, #248]	@ (80068d0 <Apply_Config+0x310>)
 80067d6:	482d      	ldr	r0, [pc, #180]	@ (800688c <Apply_Config+0x2cc>)
 80067d8:	f7f9 fcfa 	bl	80001d0 <strcmp>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10d      	bne.n	80067fe <Apply_Config+0x23e>
	{
		strncpy(config.info_topic, new_cfg_val, sizeof(config.info_topic) - 1);
 80067e2:	223f      	movs	r2, #63	@ 0x3f
 80067e4:	492a      	ldr	r1, [pc, #168]	@ (8006890 <Apply_Config+0x2d0>)
 80067e6:	483b      	ldr	r0, [pc, #236]	@ (80068d4 <Apply_Config+0x314>)
 80067e8:	f00f fb65 	bl	8015eb6 <strncpy>
		config.info_topic[sizeof(config.info_topic) - 1] = '\0';
 80067ec:	4b29      	ldr	r3, [pc, #164]	@ (8006894 <Apply_Config+0x2d4>)
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 216d 	strb.w	r2, [r3, #365]	@ 0x16d
		strcpy(sys.MQTT.Info_Topic, config.info_topic);
 80067f4:	4937      	ldr	r1, [pc, #220]	@ (80068d4 <Apply_Config+0x314>)
 80067f6:	4838      	ldr	r0, [pc, #224]	@ (80068d8 <Apply_Config+0x318>)
 80067f8:	f00f fbb2 	bl	8015f60 <strcpy>
 80067fc:	e013      	b.n	8006826 <Apply_Config+0x266>
	}
	else if(strcmp(cfg_var, "OTA_TOPIC") == 0)
 80067fe:	4937      	ldr	r1, [pc, #220]	@ (80068dc <Apply_Config+0x31c>)
 8006800:	4822      	ldr	r0, [pc, #136]	@ (800688c <Apply_Config+0x2cc>)
 8006802:	f7f9 fce5 	bl	80001d0 <strcmp>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d13a      	bne.n	8006882 <Apply_Config+0x2c2>
	{
		strncpy(config.ota_topic, new_cfg_val, sizeof(config.ota_topic) - 1);
 800680c:	223f      	movs	r2, #63	@ 0x3f
 800680e:	4920      	ldr	r1, [pc, #128]	@ (8006890 <Apply_Config+0x2d0>)
 8006810:	4833      	ldr	r0, [pc, #204]	@ (80068e0 <Apply_Config+0x320>)
 8006812:	f00f fb50 	bl	8015eb6 <strncpy>
		config.ota_topic[sizeof(config.ota_topic) - 1] = '\0';
 8006816:	4b1f      	ldr	r3, [pc, #124]	@ (8006894 <Apply_Config+0x2d4>)
 8006818:	2200      	movs	r2, #0
 800681a:	f883 212d 	strb.w	r2, [r3, #301]	@ 0x12d
		strcpy(sys.MQTT.OTA_Topic, config.ota_topic);
 800681e:	4930      	ldr	r1, [pc, #192]	@ (80068e0 <Apply_Config+0x320>)
 8006820:	4830      	ldr	r0, [pc, #192]	@ (80068e4 <Apply_Config+0x324>)
 8006822:	f00f fb9d 	bl	8015f60 <strcpy>
	else
	{
		return;
	}

	if (f_open(&config_file, CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) == FR_OK)
 8006826:	f107 0310 	add.w	r3, r7, #16
 800682a:	3b08      	subs	r3, #8
 800682c:	220a      	movs	r2, #10
 800682e:	492e      	ldr	r1, [pc, #184]	@ (80068e8 <Apply_Config+0x328>)
 8006830:	4618      	mov	r0, r3
 8006832:	f002 ff4f 	bl	80096d4 <f_open>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d157      	bne.n	80068ec <Apply_Config+0x32c>
	{
		f_write(&config_file, &config, sizeof(config), &bytes_written);
 800683c:	f107 0310 	add.w	r3, r7, #16
 8006840:	3b0c      	subs	r3, #12
 8006842:	f107 0010 	add.w	r0, r7, #16
 8006846:	3808      	subs	r0, #8
 8006848:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800684c:	4911      	ldr	r1, [pc, #68]	@ (8006894 <Apply_Config+0x2d4>)
 800684e:	f003 fa2c 	bl	8009caa <f_write>
		f_close(&config_file);
 8006852:	f107 0310 	add.w	r3, r7, #16
 8006856:	3b08      	subs	r3, #8
 8006858:	4618      	mov	r0, r3
 800685a:	f003 fc2f 	bl	800a0bc <f_close>
	else
	{
		return;
	}
	
	memset(cfg_var, 0, sizeof(cfg_var));
 800685e:	2214      	movs	r2, #20
 8006860:	2100      	movs	r1, #0
 8006862:	480a      	ldr	r0, [pc, #40]	@ (800688c <Apply_Config+0x2cc>)
 8006864:	f00f fb00 	bl	8015e68 <memset>
	cfg_idx = 0;
 8006868:	4b11      	ldr	r3, [pc, #68]	@ (80068b0 <Apply_Config+0x2f0>)
 800686a:	2200      	movs	r2, #0
 800686c:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 800686e:	220a      	movs	r2, #10
 8006870:	2100      	movs	r1, #0
 8006872:	4807      	ldr	r0, [pc, #28]	@ (8006890 <Apply_Config+0x2d0>)
 8006874:	f00f faf8 	bl	8015e68 <memset>
 8006878:	e039      	b.n	80068ee <Apply_Config+0x32e>
			return;
 800687a:	bf00      	nop
 800687c:	e037      	b.n	80068ee <Apply_Config+0x32e>
			return;
 800687e:	bf00      	nop
 8006880:	e035      	b.n	80068ee <Apply_Config+0x32e>
		return;
 8006882:	bf00      	nop
 8006884:	e033      	b.n	80068ee <Apply_Config+0x32e>
 8006886:	bf00      	nop
 8006888:	0801747c 	.word	0x0801747c
 800688c:	20005cc4 	.word	0x20005cc4
 8006890:	20005cdc 	.word	0x20005cdc
 8006894:	20001c6c 	.word	0x20001c6c
 8006898:	08017488 	.word	0x08017488
 800689c:	51eb851f 	.word	0x51eb851f
 80068a0:	08017494 	.word	0x08017494
 80068a4:	080174a0 	.word	0x080174a0
 80068a8:	080174b0 	.word	0x080174b0
 80068ac:	080174bc 	.word	0x080174bc
 80068b0:	20005cd8 	.word	0x20005cd8
 80068b4:	080174c4 	.word	0x080174c4
 80068b8:	080174cc 	.word	0x080174cc
 80068bc:	20001cda 	.word	0x20001cda
 80068c0:	20001a10 	.word	0x20001a10
 80068c4:	080174d8 	.word	0x080174d8
 80068c8:	20001d1a 	.word	0x20001d1a
 80068cc:	20001a74 	.word	0x20001a74
 80068d0:	080174e4 	.word	0x080174e4
 80068d4:	20001d9a 	.word	0x20001d9a
 80068d8:	20001b3c 	.word	0x20001b3c
 80068dc:	080174f0 	.word	0x080174f0
 80068e0:	20001d5a 	.word	0x20001d5a
 80068e4:	20001ad8 	.word	0x20001ad8
 80068e8:	080174fc 	.word	0x080174fc
		return;
 80068ec:	bf00      	nop
}
 80068ee:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 80068f2:	3714      	adds	r7, #20
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd90      	pop	{r4, r7, pc}

080068f8 <Get_Config>:

/*-----RECUPERO E INVIO VALORE DI CONFIGURAZIONE-----*/
void Get_Config(void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b0a2      	sub	sp, #136	@ 0x88
 80068fc:	af00      	add	r7, sp, #0
	char value_str[128] = {0};
 80068fe:	1d3b      	adds	r3, r7, #4
 8006900:	2280      	movs	r2, #128	@ 0x80
 8006902:	2100      	movs	r1, #0
 8006904:	4618      	mov	r0, r3
 8006906:	f00f faaf 	bl	8015e68 <memset>
	const char* topic = sys.MQTT.Info_Topic;
 800690a:	4b70      	ldr	r3, [pc, #448]	@ (8006acc <Get_Config+0x1d4>)
 800690c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

	if(strcmp(cfg_var, "DEVICE_ID") == 0)
 8006910:	496f      	ldr	r1, [pc, #444]	@ (8006ad0 <Get_Config+0x1d8>)
 8006912:	4870      	ldr	r0, [pc, #448]	@ (8006ad4 <Get_Config+0x1dc>)
 8006914:	f7f9 fc5c 	bl	80001d0 <strcmp>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d108      	bne.n	8006930 <Get_Config+0x38>
	{
		sprintf(value_str, "%u", config.device_id);
 800691e:	4b6e      	ldr	r3, [pc, #440]	@ (8006ad8 <Get_Config+0x1e0>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	1d3b      	adds	r3, r7, #4
 8006926:	496d      	ldr	r1, [pc, #436]	@ (8006adc <Get_Config+0x1e4>)
 8006928:	4618      	mov	r0, r3
 800692a:	f00f fa3d 	bl	8015da8 <siprintf>
 800692e:	e0b6      	b.n	8006a9e <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "SAMP_FREQ") == 0)
 8006930:	496b      	ldr	r1, [pc, #428]	@ (8006ae0 <Get_Config+0x1e8>)
 8006932:	4868      	ldr	r0, [pc, #416]	@ (8006ad4 <Get_Config+0x1dc>)
 8006934:	f7f9 fc4c 	bl	80001d0 <strcmp>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d108      	bne.n	8006950 <Get_Config+0x58>
	{
		sprintf(value_str, "%u", config.samp_freq);
 800693e:	4b66      	ldr	r3, [pc, #408]	@ (8006ad8 <Get_Config+0x1e0>)
 8006940:	885b      	ldrh	r3, [r3, #2]
 8006942:	461a      	mov	r2, r3
 8006944:	1d3b      	adds	r3, r7, #4
 8006946:	4965      	ldr	r1, [pc, #404]	@ (8006adc <Get_Config+0x1e4>)
 8006948:	4618      	mov	r0, r3
 800694a:	f00f fa2d 	bl	8015da8 <siprintf>
 800694e:	e0a6      	b.n	8006a9e <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "BUFFER_SECS") == 0)
 8006950:	4964      	ldr	r1, [pc, #400]	@ (8006ae4 <Get_Config+0x1ec>)
 8006952:	4860      	ldr	r0, [pc, #384]	@ (8006ad4 <Get_Config+0x1dc>)
 8006954:	f7f9 fc3c 	bl	80001d0 <strcmp>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d108      	bne.n	8006970 <Get_Config+0x78>
	{
		sprintf(value_str, "%u", config.buffering_secs);
 800695e:	4b5e      	ldr	r3, [pc, #376]	@ (8006ad8 <Get_Config+0x1e0>)
 8006960:	791b      	ldrb	r3, [r3, #4]
 8006962:	461a      	mov	r2, r3
 8006964:	1d3b      	adds	r3, r7, #4
 8006966:	495d      	ldr	r1, [pc, #372]	@ (8006adc <Get_Config+0x1e4>)
 8006968:	4618      	mov	r0, r3
 800696a:	f00f fa1d 	bl	8015da8 <siprintf>
 800696e:	e096      	b.n	8006a9e <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "CONN_TIMEOUT") == 0)
 8006970:	495d      	ldr	r1, [pc, #372]	@ (8006ae8 <Get_Config+0x1f0>)
 8006972:	4858      	ldr	r0, [pc, #352]	@ (8006ad4 <Get_Config+0x1dc>)
 8006974:	f7f9 fc2c 	bl	80001d0 <strcmp>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d107      	bne.n	800698e <Get_Config+0x96>
	{
		sprintf(value_str, "%lu", config.connection_timeout);
 800697e:	4b56      	ldr	r3, [pc, #344]	@ (8006ad8 <Get_Config+0x1e0>)
 8006980:	689a      	ldr	r2, [r3, #8]
 8006982:	1d3b      	adds	r3, r7, #4
 8006984:	4959      	ldr	r1, [pc, #356]	@ (8006aec <Get_Config+0x1f4>)
 8006986:	4618      	mov	r0, r3
 8006988:	f00f fa0e 	bl	8015da8 <siprintf>
 800698c:	e087      	b.n	8006a9e <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 800698e:	4958      	ldr	r1, [pc, #352]	@ (8006af0 <Get_Config+0x1f8>)
 8006990:	4850      	ldr	r0, [pc, #320]	@ (8006ad4 <Get_Config+0x1dc>)
 8006992:	f7f9 fc1d 	bl	80001d0 <strcmp>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d108      	bne.n	80069ae <Get_Config+0xb6>
	{
		sprintf(value_str, "%u", config.hammer_th);
 800699c:	4b4e      	ldr	r3, [pc, #312]	@ (8006ad8 <Get_Config+0x1e0>)
 800699e:	899b      	ldrh	r3, [r3, #12]
 80069a0:	461a      	mov	r2, r3
 80069a2:	1d3b      	adds	r3, r7, #4
 80069a4:	494d      	ldr	r1, [pc, #308]	@ (8006adc <Get_Config+0x1e4>)
 80069a6:	4618      	mov	r0, r3
 80069a8:	f00f f9fe 	bl	8015da8 <siprintf>
 80069ac:	e077      	b.n	8006a9e <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "HIGH_TH") == 0 && cfg_idx >= 0 && cfg_idx < 24)
 80069ae:	4951      	ldr	r1, [pc, #324]	@ (8006af4 <Get_Config+0x1fc>)
 80069b0:	4848      	ldr	r0, [pc, #288]	@ (8006ad4 <Get_Config+0x1dc>)
 80069b2:	f7f9 fc0d 	bl	80001d0 <strcmp>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d115      	bne.n	80069e8 <Get_Config+0xf0>
 80069bc:	4b4e      	ldr	r3, [pc, #312]	@ (8006af8 <Get_Config+0x200>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	db11      	blt.n	80069e8 <Get_Config+0xf0>
 80069c4:	4b4c      	ldr	r3, [pc, #304]	@ (8006af8 <Get_Config+0x200>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b17      	cmp	r3, #23
 80069ca:	dc0d      	bgt.n	80069e8 <Get_Config+0xf0>
	{
		sprintf(value_str, "%u", config.high_th[cfg_idx]);
 80069cc:	4b4a      	ldr	r3, [pc, #296]	@ (8006af8 <Get_Config+0x200>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a41      	ldr	r2, [pc, #260]	@ (8006ad8 <Get_Config+0x1e0>)
 80069d2:	331c      	adds	r3, #28
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	4413      	add	r3, r2
 80069d8:	88db      	ldrh	r3, [r3, #6]
 80069da:	461a      	mov	r2, r3
 80069dc:	1d3b      	adds	r3, r7, #4
 80069de:	493f      	ldr	r1, [pc, #252]	@ (8006adc <Get_Config+0x1e4>)
 80069e0:	4618      	mov	r0, r3
 80069e2:	f00f f9e1 	bl	8015da8 <siprintf>
 80069e6:	e05a      	b.n	8006a9e <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "LOW_TH") == 0 && cfg_idx >= 0 && cfg_idx < 24)
 80069e8:	4944      	ldr	r1, [pc, #272]	@ (8006afc <Get_Config+0x204>)
 80069ea:	483a      	ldr	r0, [pc, #232]	@ (8006ad4 <Get_Config+0x1dc>)
 80069ec:	f7f9 fbf0 	bl	80001d0 <strcmp>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d115      	bne.n	8006a22 <Get_Config+0x12a>
 80069f6:	4b40      	ldr	r3, [pc, #256]	@ (8006af8 <Get_Config+0x200>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	db11      	blt.n	8006a22 <Get_Config+0x12a>
 80069fe:	4b3e      	ldr	r3, [pc, #248]	@ (8006af8 <Get_Config+0x200>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b17      	cmp	r3, #23
 8006a04:	dc0d      	bgt.n	8006a22 <Get_Config+0x12a>
	{
		sprintf(value_str, "%u", config.low_th[cfg_idx]);
 8006a06:	4b3c      	ldr	r3, [pc, #240]	@ (8006af8 <Get_Config+0x200>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a33      	ldr	r2, [pc, #204]	@ (8006ad8 <Get_Config+0x1e0>)
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	005b      	lsls	r3, r3, #1
 8006a10:	4413      	add	r3, r2
 8006a12:	88db      	ldrh	r3, [r3, #6]
 8006a14:	461a      	mov	r2, r3
 8006a16:	1d3b      	adds	r3, r7, #4
 8006a18:	4930      	ldr	r1, [pc, #192]	@ (8006adc <Get_Config+0x1e4>)
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f00f f9c4 	bl	8015da8 <siprintf>
 8006a20:	e03d      	b.n	8006a9e <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "DATA_TOPIC") == 0)
 8006a22:	4937      	ldr	r1, [pc, #220]	@ (8006b00 <Get_Config+0x208>)
 8006a24:	482b      	ldr	r0, [pc, #172]	@ (8006ad4 <Get_Config+0x1dc>)
 8006a26:	f7f9 fbd3 	bl	80001d0 <strcmp>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d106      	bne.n	8006a3e <Get_Config+0x146>
	{
		strncpy(value_str, config.data_topic, sizeof(value_str)-1);
 8006a30:	1d3b      	adds	r3, r7, #4
 8006a32:	227f      	movs	r2, #127	@ 0x7f
 8006a34:	4933      	ldr	r1, [pc, #204]	@ (8006b04 <Get_Config+0x20c>)
 8006a36:	4618      	mov	r0, r3
 8006a38:	f00f fa3d 	bl	8015eb6 <strncpy>
 8006a3c:	e02f      	b.n	8006a9e <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "CMD_TOPIC") == 0)
 8006a3e:	4932      	ldr	r1, [pc, #200]	@ (8006b08 <Get_Config+0x210>)
 8006a40:	4824      	ldr	r0, [pc, #144]	@ (8006ad4 <Get_Config+0x1dc>)
 8006a42:	f7f9 fbc5 	bl	80001d0 <strcmp>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d106      	bne.n	8006a5a <Get_Config+0x162>
	{
		strncpy(value_str, config.command_topic, sizeof(value_str)-1);
 8006a4c:	1d3b      	adds	r3, r7, #4
 8006a4e:	227f      	movs	r2, #127	@ 0x7f
 8006a50:	492e      	ldr	r1, [pc, #184]	@ (8006b0c <Get_Config+0x214>)
 8006a52:	4618      	mov	r0, r3
 8006a54:	f00f fa2f 	bl	8015eb6 <strncpy>
 8006a58:	e021      	b.n	8006a9e <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "INFO_TOPIC") == 0)
 8006a5a:	492d      	ldr	r1, [pc, #180]	@ (8006b10 <Get_Config+0x218>)
 8006a5c:	481d      	ldr	r0, [pc, #116]	@ (8006ad4 <Get_Config+0x1dc>)
 8006a5e:	f7f9 fbb7 	bl	80001d0 <strcmp>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d106      	bne.n	8006a76 <Get_Config+0x17e>
	{
		strncpy(value_str, config.info_topic, sizeof(value_str)-1);
 8006a68:	1d3b      	adds	r3, r7, #4
 8006a6a:	227f      	movs	r2, #127	@ 0x7f
 8006a6c:	4929      	ldr	r1, [pc, #164]	@ (8006b14 <Get_Config+0x21c>)
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f00f fa21 	bl	8015eb6 <strncpy>
 8006a74:	e013      	b.n	8006a9e <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "OTA_TOPIC") == 0)
 8006a76:	4928      	ldr	r1, [pc, #160]	@ (8006b18 <Get_Config+0x220>)
 8006a78:	4816      	ldr	r0, [pc, #88]	@ (8006ad4 <Get_Config+0x1dc>)
 8006a7a:	f7f9 fba9 	bl	80001d0 <strcmp>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d106      	bne.n	8006a92 <Get_Config+0x19a>
	{
		strncpy(value_str, config.ota_topic, sizeof(value_str)-1);
 8006a84:	1d3b      	adds	r3, r7, #4
 8006a86:	227f      	movs	r2, #127	@ 0x7f
 8006a88:	4924      	ldr	r1, [pc, #144]	@ (8006b1c <Get_Config+0x224>)
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f00f fa13 	bl	8015eb6 <strncpy>
 8006a90:	e005      	b.n	8006a9e <Get_Config+0x1a6>
	}
	else
	{
		strncpy(value_str, "UNKNOWN", sizeof(value_str)-1);
 8006a92:	1d3b      	adds	r3, r7, #4
 8006a94:	227f      	movs	r2, #127	@ 0x7f
 8006a96:	4922      	ldr	r1, [pc, #136]	@ (8006b20 <Get_Config+0x228>)
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f00f fa0c 	bl	8015eb6 <strncpy>
	}

	memset(cfg_var, 0, sizeof(cfg_var));
 8006a9e:	2214      	movs	r2, #20
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	480c      	ldr	r0, [pc, #48]	@ (8006ad4 <Get_Config+0x1dc>)
 8006aa4:	f00f f9e0 	bl	8015e68 <memset>
	cfg_idx = 0;
 8006aa8:	4b13      	ldr	r3, [pc, #76]	@ (8006af8 <Get_Config+0x200>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 8006aae:	220a      	movs	r2, #10
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	481c      	ldr	r0, [pc, #112]	@ (8006b24 <Get_Config+0x22c>)
 8006ab4:	f00f f9d8 	bl	8015e68 <memset>

	SIM_publish_MQTT_Message(topic, value_str);
 8006ab8:	1d3b      	adds	r3, r7, #4
 8006aba:	4619      	mov	r1, r3
 8006abc:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8006ac0:	f7fb faa2 	bl	8002008 <SIM_publish_MQTT_Message>
}
 8006ac4:	bf00      	nop
 8006ac6:	3788      	adds	r7, #136	@ 0x88
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	20001b3c 	.word	0x20001b3c
 8006ad0:	0801747c 	.word	0x0801747c
 8006ad4:	20005cc4 	.word	0x20005cc4
 8006ad8:	20001c6c 	.word	0x20001c6c
 8006adc:	08017510 	.word	0x08017510
 8006ae0:	08017488 	.word	0x08017488
 8006ae4:	08017494 	.word	0x08017494
 8006ae8:	080174a0 	.word	0x080174a0
 8006aec:	08017514 	.word	0x08017514
 8006af0:	080174b0 	.word	0x080174b0
 8006af4:	080174bc 	.word	0x080174bc
 8006af8:	20005cd8 	.word	0x20005cd8
 8006afc:	080174c4 	.word	0x080174c4
 8006b00:	080174cc 	.word	0x080174cc
 8006b04:	20001cda 	.word	0x20001cda
 8006b08:	080174d8 	.word	0x080174d8
 8006b0c:	20001d1a 	.word	0x20001d1a
 8006b10:	080174e4 	.word	0x080174e4
 8006b14:	20001d9a 	.word	0x20001d9a
 8006b18:	080174f0 	.word	0x080174f0
 8006b1c:	20001d5a 	.word	0x20001d5a
 8006b20:	08017518 	.word	0x08017518
 8006b24:	20005cdc 	.word	0x20005cdc

08006b28 <Clear_Flags>:

/*-----AZZERAMENTO FLAG-----*/
void Clear_Flags(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	af00      	add	r7, sp, #0
	memset(&sys, 0, sizeof(sys));
 8006b2c:	f241 5228 	movw	r2, #5416	@ 0x1528
 8006b30:	2100      	movs	r1, #0
 8006b32:	480c      	ldr	r0, [pc, #48]	@ (8006b64 <Clear_Flags+0x3c>)
 8006b34:	f00f f998 	bl	8015e68 <memset>
	if(!sys.ACC_Present)
 8006b38:	4b0a      	ldr	r3, [pc, #40]	@ (8006b64 <Clear_Flags+0x3c>)
 8006b3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b3e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d109      	bne.n	8006b60 <Clear_Flags+0x38>
	{
		sys.ACC_Present = 1;
 8006b4c:	4b05      	ldr	r3, [pc, #20]	@ (8006b64 <Clear_Flags+0x3c>)
 8006b4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b52:	461a      	mov	r2, r3
 8006b54:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8006b58:	f043 0301 	orr.w	r3, r3, #1
 8006b5c:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
	}
}
 8006b60:	bf00      	nop
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	20000740 	.word	0x20000740

08006b68 <psram_reset>:
uint32_t	psramSize = 0;
uint32_t	psramNumPages = 0;


int psram_reset()
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b08e      	sub	sp, #56	@ 0x38
 8006b6c:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = {0};
 8006b6e:	463b      	mov	r3, r7
 8006b70:	2238      	movs	r2, #56	@ 0x38
 8006b72:	2100      	movs	r1, #0
 8006b74:	4618      	mov	r0, r3
 8006b76:	f00f f977 	bl	8015e68 <memset>

	sCommand.Instruction = 0x66;
 8006b7a:	2366      	movs	r3, #102	@ 0x66
 8006b7c:	603b      	str	r3, [r7, #0]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8006b7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006b82:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_NONE;
 8006b84:	2300      	movs	r3, #0
 8006b86:	60fb      	str	r3, [r7, #12]
	sCommand.NbData = 0;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006b8c:	463b      	mov	r3, r7
 8006b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b92:	4619      	mov	r1, r3
 8006b94:	480e      	ldr	r0, [pc, #56]	@ (8006bd0 <psram_reset+0x68>)
 8006b96:	f008 f96f 	bl	800ee78 <HAL_QSPI_Command>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <psram_reset+0x3e>
	{
		return -1;
 8006ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba4:	e00f      	b.n	8006bc6 <psram_reset+0x5e>
	}

	sCommand.Instruction = 0x99;
 8006ba6:	2399      	movs	r3, #153	@ 0x99
 8006ba8:	603b      	str	r3, [r7, #0]

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006baa:	463b      	mov	r3, r7
 8006bac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	4807      	ldr	r0, [pc, #28]	@ (8006bd0 <psram_reset+0x68>)
 8006bb4:	f008 f960 	bl	800ee78 <HAL_QSPI_Command>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d002      	beq.n	8006bc4 <psram_reset+0x5c>
	{
		return -1;
 8006bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8006bc2:	e000      	b.n	8006bc6 <psram_reset+0x5e>
	}

	return 0;
 8006bc4:	2300      	movs	r3, #0

}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3738      	adds	r7, #56	@ 0x38
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	2000033c 	.word	0x2000033c

08006bd4 <psram_qpi_mode>:
{
	return psramQSPI;
}

int psram_qpi_mode(uint8_t enable)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b090      	sub	sp, #64	@ 0x40
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	4603      	mov	r3, r0
 8006bdc:	71fb      	strb	r3, [r7, #7]

	QSPI_CommandTypeDef sCommand = {0};
 8006bde:	f107 0308 	add.w	r3, r7, #8
 8006be2:	2238      	movs	r2, #56	@ 0x38
 8006be4:	2100      	movs	r1, #0
 8006be6:	4618      	mov	r0, r3
 8006be8:	f00f f93e 	bl	8015e68 <memset>

	if(!psramInitDone)return -1;
 8006bec:	4b1c      	ldr	r3, [pc, #112]	@ (8006c60 <psram_qpi_mode+0x8c>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d102      	bne.n	8006bfa <psram_qpi_mode+0x26>
 8006bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf8:	e02d      	b.n	8006c56 <psram_qpi_mode+0x82>

	if(psramQSPI==1 && enable == 0)
 8006bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8006c64 <psram_qpi_mode+0x90>)
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d108      	bne.n	8006c14 <psram_qpi_mode+0x40>
 8006c02:	79fb      	ldrb	r3, [r7, #7]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d105      	bne.n	8006c14 <psram_qpi_mode+0x40>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_DISABLE;
 8006c08:	23f5      	movs	r3, #245	@ 0xf5
 8006c0a:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8006c0c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006c10:	623b      	str	r3, [r7, #32]
 8006c12:	e00e      	b.n	8006c32 <psram_qpi_mode+0x5e>

	}else if(psramQSPI==0 && enable == 1)
 8006c14:	4b13      	ldr	r3, [pc, #76]	@ (8006c64 <psram_qpi_mode+0x90>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d108      	bne.n	8006c2e <psram_qpi_mode+0x5a>
 8006c1c:	79fb      	ldrb	r3, [r7, #7]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d105      	bne.n	8006c2e <psram_qpi_mode+0x5a>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_ENABLE;
 8006c22:	2335      	movs	r3, #53	@ 0x35
 8006c24:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8006c26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006c2a:	623b      	str	r3, [r7, #32]
 8006c2c:	e001      	b.n	8006c32 <psram_qpi_mode+0x5e>

	}else{

		return 0;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	e011      	b.n	8006c56 <psram_qpi_mode+0x82>

	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006c32:	f107 0308 	add.w	r3, r7, #8
 8006c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	480a      	ldr	r0, [pc, #40]	@ (8006c68 <psram_qpi_mode+0x94>)
 8006c3e:	f008 f91b 	bl	800ee78 <HAL_QSPI_Command>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d002      	beq.n	8006c4e <psram_qpi_mode+0x7a>
	{
		return -1;
 8006c48:	f04f 33ff 	mov.w	r3, #4294967295
 8006c4c:	e003      	b.n	8006c56 <psram_qpi_mode+0x82>
	}

	psramQSPI = enable;
 8006c4e:	4a05      	ldr	r2, [pc, #20]	@ (8006c64 <psram_qpi_mode+0x90>)
 8006c50:	79fb      	ldrb	r3, [r7, #7]
 8006c52:	7013      	strb	r3, [r2, #0]

	return 0;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3740      	adds	r7, #64	@ 0x40
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	20005ce6 	.word	0x20005ce6
 8006c64:	20005ce7 	.word	0x20005ce7
 8006c68:	2000033c 	.word	0x2000033c

08006c6c <psram_read_id>:

int psram_read_id(uint8_t *id_data, int id_data_size)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b090      	sub	sp, #64	@ 0x40
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef sCommand = {0};
 8006c76:	f107 0308 	add.w	r3, r7, #8
 8006c7a:	2238      	movs	r2, #56	@ 0x38
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f00f f8f2 	bl	8015e68 <memset>

	if(id_data == NULL || id_data_size < 8)return -2;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d002      	beq.n	8006c90 <psram_read_id+0x24>
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b07      	cmp	r3, #7
 8006c8e:	dc02      	bgt.n	8006c96 <psram_read_id+0x2a>
 8006c90:	f06f 0301 	mvn.w	r3, #1
 8006c94:	e034      	b.n	8006d00 <psram_read_id+0x94>

	sCommand.Instruction = 0x9F;
 8006c96:	239f      	movs	r3, #159	@ 0x9f
 8006c98:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8006c9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006c9e:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	60fb      	str	r3, [r7, #12]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8006ca4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006ca8:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8006caa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006cae:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode    = QSPI_DATA_1_LINE;
 8006cb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.NbData = 8;
 8006cb6:	2308      	movs	r3, #8
 8006cb8:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006cca:	f107 0308 	add.w	r3, r7, #8
 8006cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	480c      	ldr	r0, [pc, #48]	@ (8006d08 <psram_read_id+0x9c>)
 8006cd6:	f008 f8cf 	bl	800ee78 <HAL_QSPI_Command>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <psram_read_id+0x7a>
	{
		return -1;
 8006ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce4:	e00c      	b.n	8006d00 <psram_read_id+0x94>
	}

	if (HAL_QSPI_Receive(PSRAM_SPI, id_data, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cea:	6879      	ldr	r1, [r7, #4]
 8006cec:	4806      	ldr	r0, [pc, #24]	@ (8006d08 <psram_read_id+0x9c>)
 8006cee:	f008 f9b8 	bl	800f062 <HAL_QSPI_Receive>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d002      	beq.n	8006cfe <psram_read_id+0x92>
	{
		return -1;
 8006cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cfc:	e000      	b.n	8006d00 <psram_read_id+0x94>
	}


	return 0;
 8006cfe:	2300      	movs	r3, #0

}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3740      	adds	r7, #64	@ 0x40
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	2000033c 	.word	0x2000033c

08006d0c <psram_internal_read_write>:

int psram_internal_read_write(uint8_t write, uint32_t address, uint16_t nbytes, uint8_t *pBuffer)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b092      	sub	sp, #72	@ 0x48
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60b9      	str	r1, [r7, #8]
 8006d14:	607b      	str	r3, [r7, #4]
 8006d16:	4603      	mov	r3, r0
 8006d18:	73fb      	strb	r3, [r7, #15]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	81bb      	strh	r3, [r7, #12]

	QSPI_CommandTypeDef sCommand = {0};
 8006d1e:	f107 0310 	add.w	r3, r7, #16
 8006d22:	2238      	movs	r2, #56	@ 0x38
 8006d24:	2100      	movs	r1, #0
 8006d26:	4618      	mov	r0, r3
 8006d28:	f00f f89e 	bl	8015e68 <memset>

	sCommand.Address = address;
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006d30:	2300      	movs	r3, #0
 8006d32:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006d34:	2300      	movs	r3, #0
 8006d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.NbData = nbytes;
 8006d40:	89bb      	ldrh	r3, [r7, #12]
 8006d42:	63bb      	str	r3, [r7, #56]	@ 0x38

	if(psramQSPI)
 8006d44:	4b33      	ldr	r3, [pc, #204]	@ (8006e14 <psram_internal_read_write+0x108>)
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d01a      	beq.n	8006d82 <psram_internal_read_write+0x76>
	{
		//QSPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE_QUAD : PSRAM_CMD_READ_FAST_QIO;
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <psram_internal_read_write+0x4a>
 8006d52:	2338      	movs	r3, #56	@ 0x38
 8006d54:	e000      	b.n	8006d58 <psram_internal_read_write+0x4c>
 8006d56:	23eb      	movs	r3, #235	@ 0xeb
 8006d58:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8006d5a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8006d60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006d64:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 8006d66:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_4_LINES;
 8006d6c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8006d70:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_QPI_READ_FAST_QIO_WAIT;
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d001      	beq.n	8006d7c <psram_internal_read_write+0x70>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	e000      	b.n	8006d7e <psram_internal_read_write+0x72>
 8006d7c:	2306      	movs	r3, #6
 8006d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d80:	e019      	b.n	8006db6 <psram_internal_read_write+0xaa>
	}else{
		//SPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE : PSRAM_CMD_READ_FAST;
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <psram_internal_read_write+0x80>
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e000      	b.n	8006d8e <psram_internal_read_write+0x82>
 8006d8c:	230b      	movs	r3, #11
 8006d8e:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8006d90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006d94:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8006d96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006d9a:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8006d9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_1_LINE;
 8006da2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006da6:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_READ_FAST_WAIT;
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <psram_internal_read_write+0xa6>
 8006dae:	2300      	movs	r3, #0
 8006db0:	e000      	b.n	8006db4 <psram_internal_read_write+0xa8>
 8006db2:	2308      	movs	r3, #8
 8006db4:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006db6:	f107 0310 	add.w	r3, r7, #16
 8006dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	4815      	ldr	r0, [pc, #84]	@ (8006e18 <psram_internal_read_write+0x10c>)
 8006dc2:	f008 f859 	bl	800ee78 <HAL_QSPI_Command>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d002      	beq.n	8006dd2 <psram_internal_read_write+0xc6>
	{
		return -1;
 8006dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8006dd0:	e01b      	b.n	8006e0a <psram_internal_read_write+0xfe>
	}

	if(write)
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00b      	beq.n	8006df0 <psram_internal_read_write+0xe4>
	{
		if (HAL_QSPI_Transmit(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ddc:	6879      	ldr	r1, [r7, #4]
 8006dde:	480e      	ldr	r0, [pc, #56]	@ (8006e18 <psram_internal_read_write+0x10c>)
 8006de0:	f008 f8a8 	bl	800ef34 <HAL_QSPI_Transmit>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00e      	beq.n	8006e08 <psram_internal_read_write+0xfc>
		{
			return -1;
 8006dea:	f04f 33ff 	mov.w	r3, #4294967295
 8006dee:	e00c      	b.n	8006e0a <psram_internal_read_write+0xfe>
		}

	}else{

		if (HAL_QSPI_Receive(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006df0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006df4:	6879      	ldr	r1, [r7, #4]
 8006df6:	4808      	ldr	r0, [pc, #32]	@ (8006e18 <psram_internal_read_write+0x10c>)
 8006df8:	f008 f933 	bl	800f062 <HAL_QSPI_Receive>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d002      	beq.n	8006e08 <psram_internal_read_write+0xfc>
		{
			return -1;
 8006e02:	f04f 33ff 	mov.w	r3, #4294967295
 8006e06:	e000      	b.n	8006e0a <psram_internal_read_write+0xfe>
		}

	}

	return 0;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3748      	adds	r7, #72	@ 0x48
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20005ce7 	.word	0x20005ce7
 8006e18:	2000033c 	.word	0x2000033c

08006e1c <psram_sector_read_write>:


//Funzione usata da FatFs
int psram_sector_read_write(uint8_t write, uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b088      	sub	sp, #32
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60b9      	str	r1, [r7, #8]
 8006e24:	607a      	str	r2, [r7, #4]
 8006e26:	603b      	str	r3, [r7, #0]
 8006e28:	4603      	mov	r3, r0
 8006e2a:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * PSRAM_PAGE_SIZE;
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	029b      	lsls	r3, r3, #10
 8006e38:	61bb      	str	r3, [r7, #24]

	while(nsectors > 0)
 8006e3a:	e018      	b.n	8006e6e <psram_sector_read_write+0x52>
	{
		result = psram_internal_read_write(write, address, PSRAM_PAGE_SIZE, wPtr);
 8006e3c:	7bf8      	ldrb	r0, [r7, #15]
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006e44:	69b9      	ldr	r1, [r7, #24]
 8006e46:	f7ff ff61 	bl	8006d0c <psram_internal_read_write>
 8006e4a:	6178      	str	r0, [r7, #20]
		if(result < 0)return -1;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	da02      	bge.n	8006e58 <psram_sector_read_write+0x3c>
 8006e52:	f04f 33ff 	mov.w	r3, #4294967295
 8006e56:	e00e      	b.n	8006e76 <psram_sector_read_write+0x5a>
		address += PSRAM_PAGE_SIZE;
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e5e:	61bb      	str	r3, [r7, #24]
		wPtr += PSRAM_PAGE_SIZE;
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e66:	61fb      	str	r3, [r7, #28]
		nsectors--;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	607b      	str	r3, [r7, #4]
	while(nsectors > 0)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1e3      	bne.n	8006e3c <psram_sector_read_write+0x20>
	}

	return 0;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3720      	adds	r7, #32
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
	...

08006e80 <psram_read_write>:



int psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b088      	sub	sp, #32
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60b9      	str	r1, [r7, #8]
 8006e88:	607a      	str	r2, [r7, #4]
 8006e8a:	603b      	str	r3, [r7, #0]
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8006e90:	2300      	movs	r3, #0
 8006e92:	61bb      	str	r3, [r7, #24]
	uint32_t trBytes = 0;
 8006e94:	2300      	movs	r3, #0
 8006e96:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	61fb      	str	r3, [r7, #28]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 8006e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8006f18 <psram_read_write+0x98>)
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d002      	beq.n	8006eaa <psram_read_write+0x2a>
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d102      	bne.n	8006eb0 <psram_read_write+0x30>
 8006eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8006eae:	e02e      	b.n	8006f0e <psram_read_write+0x8e>
	if(address + nbytes >= psramSize)return -2;
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	441a      	add	r2, r3
 8006eb6:	4b19      	ldr	r3, [pc, #100]	@ (8006f1c <psram_read_write+0x9c>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d323      	bcc.n	8006f06 <psram_read_write+0x86>
 8006ebe:	f06f 0301 	mvn.w	r3, #1
 8006ec2:	e024      	b.n	8006f0e <psram_read_write+0x8e>

	while(nbytes > 0)
	{
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eca:	bf28      	it	cs
 8006ecc:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8006ed0:	617b      	str	r3, [r7, #20]
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	7bf8      	ldrb	r0, [r7, #15]
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	68b9      	ldr	r1, [r7, #8]
 8006edc:	f7ff ff16 	bl	8006d0c <psram_internal_read_write>
 8006ee0:	61b8      	str	r0, [r7, #24]

		if(result < 0)return -1;
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	da02      	bge.n	8006eee <psram_read_write+0x6e>
 8006ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8006eec:	e00f      	b.n	8006f0e <psram_read_write+0x8e>

		address += trBytes;
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 8006ef6:	69fa      	ldr	r2, [r7, #28]
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	4413      	add	r3, r2
 8006efc:	61fb      	str	r3, [r7, #28]
		nbytes -= trBytes;
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	607b      	str	r3, [r7, #4]
	while(nbytes > 0)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1db      	bne.n	8006ec4 <psram_read_write+0x44>
	}

	return 0;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3720      	adds	r7, #32
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	20005ce6 	.word	0x20005ce6
 8006f1c:	20005cf0 	.word	0x20005cf0

08006f20 <raw_psram_read_write>:

int raw_psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b088      	sub	sp, #32
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	607a      	str	r2, [r7, #4]
 8006f2a:	603b      	str	r3, [r7, #0]
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8006f30:	2300      	movs	r3, #0
 8006f32:	617b      	str	r3, [r7, #20]
	uint32_t trBytes = 0;
 8006f34:	2300      	movs	r3, #0
 8006f36:	61fb      	str	r3, [r7, #28]
	uint8_t *wPtr = pBuffer;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	61bb      	str	r3, [r7, #24]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 8006f3c:	4b21      	ldr	r3, [pc, #132]	@ (8006fc4 <raw_psram_read_write+0xa4>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <raw_psram_read_write+0x2a>
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d102      	bne.n	8006f50 <raw_psram_read_write+0x30>
 8006f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f4e:	e035      	b.n	8006fbc <raw_psram_read_write+0x9c>
	if(address + nbytes >= psramSize)return -2;
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	441a      	add	r2, r3
 8006f56:	4b1c      	ldr	r3, [pc, #112]	@ (8006fc8 <raw_psram_read_write+0xa8>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d302      	bcc.n	8006f64 <raw_psram_read_write+0x44>
 8006f5e:	f06f 0301 	mvn.w	r3, #1
 8006f62:	e02b      	b.n	8006fbc <raw_psram_read_write+0x9c>

	trBytes = 1024 - address % 1024;
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f6a:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8006f6e:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 8006f70:	e020      	b.n	8006fb4 <raw_psram_read_write+0x94>
	{
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	7bf8      	ldrb	r0, [r7, #15]
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	68b9      	ldr	r1, [r7, #8]
 8006f7c:	f7ff fec6 	bl	8006d0c <psram_internal_read_write>
 8006f80:	6178      	str	r0, [r7, #20]

		if(result < 0)return -1;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	da02      	bge.n	8006f8e <raw_psram_read_write+0x6e>
 8006f88:	f04f 33ff 	mov.w	r3, #4294967295
 8006f8c:	e016      	b.n	8006fbc <raw_psram_read_write+0x9c>

		address += trBytes;
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	4413      	add	r3, r2
 8006f94:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 8006f96:	69ba      	ldr	r2, [r7, #24]
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	61bb      	str	r3, [r7, #24]
		nbytes -= trBytes;
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	607b      	str	r3, [r7, #4]
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fac:	bf28      	it	cs
 8006fae:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8006fb2:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1db      	bne.n	8006f72 <raw_psram_read_write+0x52>
	}

	return 0;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3720      	adds	r7, #32
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	20005ce6 	.word	0x20005ce6
 8006fc8:	20005cf0 	.word	0x20005cf0

08006fcc <RAM_Write>:
{
	return psram_read_write(1, address, nbytes, pBuffer);
}

int RAM_Write(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
	return raw_psram_read_write(1, address, nbytes, pBuffer);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	68f9      	ldr	r1, [r7, #12]
 8006fde:	2001      	movs	r0, #1
 8006fe0:	f7ff ff9e 	bl	8006f20 <raw_psram_read_write>
 8006fe4:	4603      	mov	r3, r0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <RAM_Read>:

int RAM_Read(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b084      	sub	sp, #16
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	60f8      	str	r0, [r7, #12]
 8006ff6:	60b9      	str	r1, [r7, #8]
 8006ff8:	607a      	str	r2, [r7, #4]
	return psram_read_write(0, address, nbytes, pBuffer);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	68f9      	ldr	r1, [r7, #12]
 8007000:	2000      	movs	r0, #0
 8007002:	f7ff ff3d 	bl	8006e80 <psram_read_write>
 8007006:	4603      	mov	r3, r0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <psram_is_initialized>:


int psram_is_initialized()
{
 8007010:	b480      	push	{r7}
 8007012:	af00      	add	r7, sp, #0
	return psramInitDone;
 8007014:	4b03      	ldr	r3, [pc, #12]	@ (8007024 <psram_is_initialized+0x14>)
 8007016:	781b      	ldrb	r3, [r3, #0]
}
 8007018:	4618      	mov	r0, r3
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	20005ce6 	.word	0x20005ce6

08007028 <psram_get_sector_size>:

unsigned int psram_get_sector_size()
{
 8007028:	b480      	push	{r7}
 800702a:	af00      	add	r7, sp, #0
	return PSRAM_PAGE_SIZE;
 800702c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
}
 8007030:	4618      	mov	r0, r3
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
	...

0800703c <psram_get_sector_count>:

unsigned int psram_get_sector_count()
{
 800703c:	b480      	push	{r7}
 800703e:	af00      	add	r7, sp, #0
	return psramNumPages;
 8007040:	4b03      	ldr	r3, [pc, #12]	@ (8007050 <psram_get_sector_count+0x14>)
 8007042:	681b      	ldr	r3, [r3, #0]
}
 8007044:	4618      	mov	r0, r3
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	20005cf4 	.word	0x20005cf4

08007054 <psram_get_size>:

unsigned int psram_get_size()
{
 8007054:	b480      	push	{r7}
 8007056:	af00      	add	r7, sp, #0
	return psramSize;
 8007058:	4b03      	ldr	r3, [pc, #12]	@ (8007068 <psram_get_size+0x14>)
 800705a:	681b      	ldr	r3, [r3, #0]
}
 800705c:	4618      	mov	r0, r3
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	20005cf0 	.word	0x20005cf0

0800706c <psram_init>:

int psram_init()
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0

	uint8_t density = 0xFF;
 8007072:	23ff      	movs	r3, #255	@ 0xff
 8007074:	71fb      	strb	r3, [r7, #7]

	psramInitDone = 0;
 8007076:	4b20      	ldr	r3, [pc, #128]	@ (80070f8 <psram_init+0x8c>)
 8007078:	2200      	movs	r2, #0
 800707a:	701a      	strb	r2, [r3, #0]

	if(psram_reset() < 0)return -1;
 800707c:	f7ff fd74 	bl	8006b68 <psram_reset>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	da02      	bge.n	800708c <psram_init+0x20>
 8007086:	f04f 33ff 	mov.w	r3, #4294967295
 800708a:	e030      	b.n	80070ee <psram_init+0x82>

	memset(psramId, 0xFF, sizeof(psramId));
 800708c:	2208      	movs	r2, #8
 800708e:	21ff      	movs	r1, #255	@ 0xff
 8007090:	481a      	ldr	r0, [pc, #104]	@ (80070fc <psram_init+0x90>)
 8007092:	f00e fee9 	bl	8015e68 <memset>

	if(psram_read_id(psramId, sizeof(psramId)) < 0)return -1;
 8007096:	2108      	movs	r1, #8
 8007098:	4818      	ldr	r0, [pc, #96]	@ (80070fc <psram_init+0x90>)
 800709a:	f7ff fde7 	bl	8006c6c <psram_read_id>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	da02      	bge.n	80070aa <psram_init+0x3e>
 80070a4:	f04f 33ff 	mov.w	r3, #4294967295
 80070a8:	e021      	b.n	80070ee <psram_init+0x82>

	density = psramId[2] >> 5;
 80070aa:	4b14      	ldr	r3, [pc, #80]	@ (80070fc <psram_init+0x90>)
 80070ac:	789b      	ldrb	r3, [r3, #2]
 80070ae:	095b      	lsrs	r3, r3, #5
 80070b0:	71fb      	strb	r3, [r7, #7]

	if(psramId[0] == PSRAM_MANUFACTURER && psramId[1] == PSRAM_KGD && density <= PSRAM_DENSITY_64MB)
 80070b2:	4b12      	ldr	r3, [pc, #72]	@ (80070fc <psram_init+0x90>)
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	2b0d      	cmp	r3, #13
 80070b8:	d117      	bne.n	80070ea <psram_init+0x7e>
 80070ba:	4b10      	ldr	r3, [pc, #64]	@ (80070fc <psram_init+0x90>)
 80070bc:	785b      	ldrb	r3, [r3, #1]
 80070be:	2b5d      	cmp	r3, #93	@ 0x5d
 80070c0:	d113      	bne.n	80070ea <psram_init+0x7e>
 80070c2:	79fb      	ldrb	r3, [r7, #7]
 80070c4:	2b03      	cmp	r3, #3
 80070c6:	d810      	bhi.n	80070ea <psram_init+0x7e>
	{
		psramSize = PSRAM_DENSITY_64MB_EADDR;
 80070c8:	4b0d      	ldr	r3, [pc, #52]	@ (8007100 <psram_init+0x94>)
 80070ca:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80070ce:	601a      	str	r2, [r3, #0]
		psramNumPages = psramSize / PSRAM_PAGE_SIZE;
 80070d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007100 <psram_init+0x94>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	0a9b      	lsrs	r3, r3, #10
 80070d6:	4a0b      	ldr	r2, [pc, #44]	@ (8007104 <psram_init+0x98>)
 80070d8:	6013      	str	r3, [r2, #0]

		psram_qpi_mode(1);
 80070da:	2001      	movs	r0, #1
 80070dc:	f7ff fd7a 	bl	8006bd4 <psram_qpi_mode>

		psramInitDone = 1;
 80070e0:	4b05      	ldr	r3, [pc, #20]	@ (80070f8 <psram_init+0x8c>)
 80070e2:	2201      	movs	r2, #1
 80070e4:	701a      	strb	r2, [r3, #0]
		return 0;
 80070e6:	2300      	movs	r3, #0
 80070e8:	e001      	b.n	80070ee <psram_init+0x82>
	}else{
		return -1;
 80070ea:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	20005ce6 	.word	0x20005ce6
 80070fc:	20005ce8 	.word	0x20005ce8
 8007100:	20005cf0 	.word	0x20005cf0
 8007104:	20005cf4 	.word	0x20005cf4

08007108 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800710e:	4b0f      	ldr	r3, [pc, #60]	@ (800714c <HAL_MspInit+0x44>)
 8007110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007112:	4a0e      	ldr	r2, [pc, #56]	@ (800714c <HAL_MspInit+0x44>)
 8007114:	f043 0301 	orr.w	r3, r3, #1
 8007118:	6613      	str	r3, [r2, #96]	@ 0x60
 800711a:	4b0c      	ldr	r3, [pc, #48]	@ (800714c <HAL_MspInit+0x44>)
 800711c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	607b      	str	r3, [r7, #4]
 8007124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007126:	4b09      	ldr	r3, [pc, #36]	@ (800714c <HAL_MspInit+0x44>)
 8007128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800712a:	4a08      	ldr	r2, [pc, #32]	@ (800714c <HAL_MspInit+0x44>)
 800712c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007130:	6593      	str	r3, [r2, #88]	@ 0x58
 8007132:	4b06      	ldr	r3, [pc, #24]	@ (800714c <HAL_MspInit+0x44>)
 8007134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800713a:	603b      	str	r3, [r7, #0]
 800713c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800713e:	bf00      	nop
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	40021000 	.word	0x40021000

08007150 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b0ac      	sub	sp, #176	@ 0xb0
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007158:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800715c:	2200      	movs	r2, #0
 800715e:	601a      	str	r2, [r3, #0]
 8007160:	605a      	str	r2, [r3, #4]
 8007162:	609a      	str	r2, [r3, #8]
 8007164:	60da      	str	r2, [r3, #12]
 8007166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007168:	f107 0314 	add.w	r3, r7, #20
 800716c:	2288      	movs	r2, #136	@ 0x88
 800716e:	2100      	movs	r1, #0
 8007170:	4618      	mov	r0, r3
 8007172:	f00e fe79 	bl	8015e68 <memset>
  if(hadc->Instance==ADC1)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a3d      	ldr	r2, [pc, #244]	@ (8007270 <HAL_ADC_MspInit+0x120>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d172      	bne.n	8007266 <HAL_ADC_MspInit+0x116>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8007180:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007184:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8007186:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800718a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800718e:	2303      	movs	r3, #3
 8007190:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8007192:	2301      	movs	r3, #1
 8007194:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8007196:	2308      	movs	r3, #8
 8007198:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800719a:	2307      	movs	r3, #7
 800719c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800719e:	2302      	movs	r3, #2
 80071a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80071a2:	2302      	movs	r3, #2
 80071a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80071a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80071aa:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80071ac:	f107 0314 	add.w	r3, r7, #20
 80071b0:	4618      	mov	r0, r3
 80071b2:	f009 f84d 	bl	8010250 <HAL_RCCEx_PeriphCLKConfig>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d001      	beq.n	80071c0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80071bc:	f7fe f802 	bl	80051c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80071c0:	4b2c      	ldr	r3, [pc, #176]	@ (8007274 <HAL_ADC_MspInit+0x124>)
 80071c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071c4:	4a2b      	ldr	r2, [pc, #172]	@ (8007274 <HAL_ADC_MspInit+0x124>)
 80071c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80071ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80071cc:	4b29      	ldr	r3, [pc, #164]	@ (8007274 <HAL_ADC_MspInit+0x124>)
 80071ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071d4:	613b      	str	r3, [r7, #16]
 80071d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071d8:	4b26      	ldr	r3, [pc, #152]	@ (8007274 <HAL_ADC_MspInit+0x124>)
 80071da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071dc:	4a25      	ldr	r2, [pc, #148]	@ (8007274 <HAL_ADC_MspInit+0x124>)
 80071de:	f043 0301 	orr.w	r3, r3, #1
 80071e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80071e4:	4b23      	ldr	r3, [pc, #140]	@ (8007274 <HAL_ADC_MspInit+0x124>)
 80071e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	60fb      	str	r3, [r7, #12]
 80071ee:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80071f0:	2310      	movs	r3, #16
 80071f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80071f6:	230b      	movs	r3, #11
 80071f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071fc:	2300      	movs	r3, #0
 80071fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007202:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007206:	4619      	mov	r1, r3
 8007208:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800720c:	f006 fdb0 	bl	800dd70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8007210:	4b19      	ldr	r3, [pc, #100]	@ (8007278 <HAL_ADC_MspInit+0x128>)
 8007212:	4a1a      	ldr	r2, [pc, #104]	@ (800727c <HAL_ADC_MspInit+0x12c>)
 8007214:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8007216:	4b18      	ldr	r3, [pc, #96]	@ (8007278 <HAL_ADC_MspInit+0x128>)
 8007218:	2200      	movs	r2, #0
 800721a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800721c:	4b16      	ldr	r3, [pc, #88]	@ (8007278 <HAL_ADC_MspInit+0x128>)
 800721e:	2200      	movs	r2, #0
 8007220:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007222:	4b15      	ldr	r3, [pc, #84]	@ (8007278 <HAL_ADC_MspInit+0x128>)
 8007224:	2200      	movs	r2, #0
 8007226:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007228:	4b13      	ldr	r3, [pc, #76]	@ (8007278 <HAL_ADC_MspInit+0x128>)
 800722a:	2280      	movs	r2, #128	@ 0x80
 800722c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800722e:	4b12      	ldr	r3, [pc, #72]	@ (8007278 <HAL_ADC_MspInit+0x128>)
 8007230:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007234:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007236:	4b10      	ldr	r3, [pc, #64]	@ (8007278 <HAL_ADC_MspInit+0x128>)
 8007238:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800723c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800723e:	4b0e      	ldr	r3, [pc, #56]	@ (8007278 <HAL_ADC_MspInit+0x128>)
 8007240:	2220      	movs	r2, #32
 8007242:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007244:	4b0c      	ldr	r3, [pc, #48]	@ (8007278 <HAL_ADC_MspInit+0x128>)
 8007246:	2200      	movs	r2, #0
 8007248:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800724a:	480b      	ldr	r0, [pc, #44]	@ (8007278 <HAL_ADC_MspInit+0x128>)
 800724c:	f005 fc8a 	bl	800cb64 <HAL_DMA_Init>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8007256:	f7fd ffb5 	bl	80051c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a06      	ldr	r2, [pc, #24]	@ (8007278 <HAL_ADC_MspInit+0x128>)
 800725e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007260:	4a05      	ldr	r2, [pc, #20]	@ (8007278 <HAL_ADC_MspInit+0x128>)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8007266:	bf00      	nop
 8007268:	37b0      	adds	r7, #176	@ 0xb0
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	50040000 	.word	0x50040000
 8007274:	40021000 	.word	0x40021000
 8007278:	2000027c 	.word	0x2000027c
 800727c:	40020008 	.word	0x40020008

08007280 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a0a      	ldr	r2, [pc, #40]	@ (80072b8 <HAL_CRC_MspInit+0x38>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d10b      	bne.n	80072aa <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007292:	4b0a      	ldr	r3, [pc, #40]	@ (80072bc <HAL_CRC_MspInit+0x3c>)
 8007294:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007296:	4a09      	ldr	r2, [pc, #36]	@ (80072bc <HAL_CRC_MspInit+0x3c>)
 8007298:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800729c:	6493      	str	r3, [r2, #72]	@ 0x48
 800729e:	4b07      	ldr	r3, [pc, #28]	@ (80072bc <HAL_CRC_MspInit+0x3c>)
 80072a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80072aa:	bf00      	nop
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	40023000 	.word	0x40023000
 80072bc:	40021000 	.word	0x40021000

080072c0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b0ac      	sub	sp, #176	@ 0xb0
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80072cc:	2200      	movs	r2, #0
 80072ce:	601a      	str	r2, [r3, #0]
 80072d0:	605a      	str	r2, [r3, #4]
 80072d2:	609a      	str	r2, [r3, #8]
 80072d4:	60da      	str	r2, [r3, #12]
 80072d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80072d8:	f107 0314 	add.w	r3, r7, #20
 80072dc:	2288      	movs	r2, #136	@ 0x88
 80072de:	2100      	movs	r1, #0
 80072e0:	4618      	mov	r0, r3
 80072e2:	f00e fdc1 	bl	8015e68 <memset>
  if(hi2c->Instance==I2C3)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a21      	ldr	r2, [pc, #132]	@ (8007370 <HAL_I2C_MspInit+0xb0>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d13b      	bne.n	8007368 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80072f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80072f4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80072f6:	2300      	movs	r3, #0
 80072f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80072fa:	f107 0314 	add.w	r3, r7, #20
 80072fe:	4618      	mov	r0, r3
 8007300:	f008 ffa6 	bl	8010250 <HAL_RCCEx_PeriphCLKConfig>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800730a:	f7fd ff5b 	bl	80051c4 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800730e:	4b19      	ldr	r3, [pc, #100]	@ (8007374 <HAL_I2C_MspInit+0xb4>)
 8007310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007312:	4a18      	ldr	r2, [pc, #96]	@ (8007374 <HAL_I2C_MspInit+0xb4>)
 8007314:	f043 0304 	orr.w	r3, r3, #4
 8007318:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800731a:	4b16      	ldr	r3, [pc, #88]	@ (8007374 <HAL_I2C_MspInit+0xb4>)
 800731c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800731e:	f003 0304 	and.w	r3, r3, #4
 8007322:	613b      	str	r3, [r7, #16]
 8007324:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007326:	2303      	movs	r3, #3
 8007328:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800732c:	2312      	movs	r3, #18
 800732e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007332:	2300      	movs	r3, #0
 8007334:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007338:	2303      	movs	r3, #3
 800733a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800733e:	2304      	movs	r3, #4
 8007340:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007344:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007348:	4619      	mov	r1, r3
 800734a:	480b      	ldr	r0, [pc, #44]	@ (8007378 <HAL_I2C_MspInit+0xb8>)
 800734c:	f006 fd10 	bl	800dd70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007350:	4b08      	ldr	r3, [pc, #32]	@ (8007374 <HAL_I2C_MspInit+0xb4>)
 8007352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007354:	4a07      	ldr	r2, [pc, #28]	@ (8007374 <HAL_I2C_MspInit+0xb4>)
 8007356:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800735a:	6593      	str	r3, [r2, #88]	@ 0x58
 800735c:	4b05      	ldr	r3, [pc, #20]	@ (8007374 <HAL_I2C_MspInit+0xb4>)
 800735e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007360:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007364:	60fb      	str	r3, [r7, #12]
 8007366:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8007368:	bf00      	nop
 800736a:	37b0      	adds	r7, #176	@ 0xb0
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	40005c00 	.word	0x40005c00
 8007374:	40021000 	.word	0x40021000
 8007378:	48000800 	.word	0x48000800

0800737c <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b08a      	sub	sp, #40	@ 0x28
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007384:	f107 0314 	add.w	r3, r7, #20
 8007388:	2200      	movs	r2, #0
 800738a:	601a      	str	r2, [r3, #0]
 800738c:	605a      	str	r2, [r3, #4]
 800738e:	609a      	str	r2, [r3, #8]
 8007390:	60da      	str	r2, [r3, #12]
 8007392:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a26      	ldr	r2, [pc, #152]	@ (8007434 <HAL_QSPI_MspInit+0xb8>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d145      	bne.n	800742a <HAL_QSPI_MspInit+0xae>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800739e:	4b26      	ldr	r3, [pc, #152]	@ (8007438 <HAL_QSPI_MspInit+0xbc>)
 80073a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073a2:	4a25      	ldr	r2, [pc, #148]	@ (8007438 <HAL_QSPI_MspInit+0xbc>)
 80073a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073a8:	6513      	str	r3, [r2, #80]	@ 0x50
 80073aa:	4b23      	ldr	r3, [pc, #140]	@ (8007438 <HAL_QSPI_MspInit+0xbc>)
 80073ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073b2:	613b      	str	r3, [r7, #16]
 80073b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073b6:	4b20      	ldr	r3, [pc, #128]	@ (8007438 <HAL_QSPI_MspInit+0xbc>)
 80073b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073ba:	4a1f      	ldr	r2, [pc, #124]	@ (8007438 <HAL_QSPI_MspInit+0xbc>)
 80073bc:	f043 0301 	orr.w	r3, r3, #1
 80073c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80073c2:	4b1d      	ldr	r3, [pc, #116]	@ (8007438 <HAL_QSPI_MspInit+0xbc>)
 80073c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	60fb      	str	r3, [r7, #12]
 80073cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073ce:	4b1a      	ldr	r3, [pc, #104]	@ (8007438 <HAL_QSPI_MspInit+0xbc>)
 80073d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073d2:	4a19      	ldr	r2, [pc, #100]	@ (8007438 <HAL_QSPI_MspInit+0xbc>)
 80073d4:	f043 0302 	orr.w	r3, r3, #2
 80073d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80073da:	4b17      	ldr	r3, [pc, #92]	@ (8007438 <HAL_QSPI_MspInit+0xbc>)
 80073dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	60bb      	str	r3, [r7, #8]
 80073e4:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80073e6:	23c0      	movs	r3, #192	@ 0xc0
 80073e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073ea:	2302      	movs	r3, #2
 80073ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ee:	2300      	movs	r3, #0
 80073f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073f2:	2303      	movs	r3, #3
 80073f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80073f6:	230a      	movs	r3, #10
 80073f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073fa:	f107 0314 	add.w	r3, r7, #20
 80073fe:	4619      	mov	r1, r3
 8007400:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007404:	f006 fcb4 	bl	800dd70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8007408:	f640 4303 	movw	r3, #3075	@ 0xc03
 800740c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800740e:	2302      	movs	r3, #2
 8007410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007412:	2300      	movs	r3, #0
 8007414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007416:	2303      	movs	r3, #3
 8007418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800741a:	230a      	movs	r3, #10
 800741c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800741e:	f107 0314 	add.w	r3, r7, #20
 8007422:	4619      	mov	r1, r3
 8007424:	4805      	ldr	r0, [pc, #20]	@ (800743c <HAL_QSPI_MspInit+0xc0>)
 8007426:	f006 fca3 	bl	800dd70 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800742a:	bf00      	nop
 800742c:	3728      	adds	r7, #40	@ 0x28
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	a0001000 	.word	0xa0001000
 8007438:	40021000 	.word	0x40021000
 800743c:	48000400 	.word	0x48000400

08007440 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b0a4      	sub	sp, #144	@ 0x90
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007448:	f107 0308 	add.w	r3, r7, #8
 800744c:	2288      	movs	r2, #136	@ 0x88
 800744e:	2100      	movs	r1, #0
 8007450:	4618      	mov	r0, r3
 8007452:	f00e fd09 	bl	8015e68 <memset>
  if(hrtc->Instance==RTC)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a14      	ldr	r2, [pc, #80]	@ (80074ac <HAL_RTC_MspInit+0x6c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d120      	bne.n	80074a2 <HAL_RTC_MspInit+0x62>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007460:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007464:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007466:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800746a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800746e:	f107 0308 	add.w	r3, r7, #8
 8007472:	4618      	mov	r0, r3
 8007474:	f008 feec 	bl	8010250 <HAL_RCCEx_PeriphCLKConfig>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d001      	beq.n	8007482 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800747e:	f7fd fea1 	bl	80051c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007482:	4b0b      	ldr	r3, [pc, #44]	@ (80074b0 <HAL_RTC_MspInit+0x70>)
 8007484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007488:	4a09      	ldr	r2, [pc, #36]	@ (80074b0 <HAL_RTC_MspInit+0x70>)
 800748a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800748e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8007492:	2200      	movs	r2, #0
 8007494:	2100      	movs	r1, #0
 8007496:	2029      	movs	r0, #41	@ 0x29
 8007498:	f005 f8f1 	bl	800c67e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800749c:	2029      	movs	r0, #41	@ 0x29
 800749e:	f005 f90a 	bl	800c6b6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80074a2:	bf00      	nop
 80074a4:	3790      	adds	r7, #144	@ 0x90
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	40002800 	.word	0x40002800
 80074b0:	40021000 	.word	0x40021000

080074b4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08c      	sub	sp, #48	@ 0x30
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074bc:	f107 031c 	add.w	r3, r7, #28
 80074c0:	2200      	movs	r2, #0
 80074c2:	601a      	str	r2, [r3, #0]
 80074c4:	605a      	str	r2, [r3, #4]
 80074c6:	609a      	str	r2, [r3, #8]
 80074c8:	60da      	str	r2, [r3, #12]
 80074ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a2f      	ldr	r2, [pc, #188]	@ (8007590 <HAL_SPI_MspInit+0xdc>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d129      	bne.n	800752a <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80074d6:	4b2f      	ldr	r3, [pc, #188]	@ (8007594 <HAL_SPI_MspInit+0xe0>)
 80074d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074da:	4a2e      	ldr	r2, [pc, #184]	@ (8007594 <HAL_SPI_MspInit+0xe0>)
 80074dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80074e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80074e2:	4b2c      	ldr	r3, [pc, #176]	@ (8007594 <HAL_SPI_MspInit+0xe0>)
 80074e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074ea:	61bb      	str	r3, [r7, #24]
 80074ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074ee:	4b29      	ldr	r3, [pc, #164]	@ (8007594 <HAL_SPI_MspInit+0xe0>)
 80074f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074f2:	4a28      	ldr	r2, [pc, #160]	@ (8007594 <HAL_SPI_MspInit+0xe0>)
 80074f4:	f043 0302 	orr.w	r3, r3, #2
 80074f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80074fa:	4b26      	ldr	r3, [pc, #152]	@ (8007594 <HAL_SPI_MspInit+0xe0>)
 80074fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	617b      	str	r3, [r7, #20]
 8007504:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007506:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800750a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800750c:	2302      	movs	r3, #2
 800750e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007510:	2300      	movs	r3, #0
 8007512:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007514:	2303      	movs	r3, #3
 8007516:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007518:	2305      	movs	r3, #5
 800751a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800751c:	f107 031c 	add.w	r3, r7, #28
 8007520:	4619      	mov	r1, r3
 8007522:	481d      	ldr	r0, [pc, #116]	@ (8007598 <HAL_SPI_MspInit+0xe4>)
 8007524:	f006 fc24 	bl	800dd70 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007528:	e02d      	b.n	8007586 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a1b      	ldr	r2, [pc, #108]	@ (800759c <HAL_SPI_MspInit+0xe8>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d128      	bne.n	8007586 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007534:	4b17      	ldr	r3, [pc, #92]	@ (8007594 <HAL_SPI_MspInit+0xe0>)
 8007536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007538:	4a16      	ldr	r2, [pc, #88]	@ (8007594 <HAL_SPI_MspInit+0xe0>)
 800753a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800753e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007540:	4b14      	ldr	r3, [pc, #80]	@ (8007594 <HAL_SPI_MspInit+0xe0>)
 8007542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007544:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007548:	613b      	str	r3, [r7, #16]
 800754a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800754c:	4b11      	ldr	r3, [pc, #68]	@ (8007594 <HAL_SPI_MspInit+0xe0>)
 800754e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007550:	4a10      	ldr	r2, [pc, #64]	@ (8007594 <HAL_SPI_MspInit+0xe0>)
 8007552:	f043 0304 	orr.w	r3, r3, #4
 8007556:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007558:	4b0e      	ldr	r3, [pc, #56]	@ (8007594 <HAL_SPI_MspInit+0xe0>)
 800755a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	60fb      	str	r3, [r7, #12]
 8007562:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007564:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8007568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800756a:	2302      	movs	r3, #2
 800756c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800756e:	2300      	movs	r3, #0
 8007570:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007572:	2303      	movs	r3, #3
 8007574:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007576:	2306      	movs	r3, #6
 8007578:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800757a:	f107 031c 	add.w	r3, r7, #28
 800757e:	4619      	mov	r1, r3
 8007580:	4807      	ldr	r0, [pc, #28]	@ (80075a0 <HAL_SPI_MspInit+0xec>)
 8007582:	f006 fbf5 	bl	800dd70 <HAL_GPIO_Init>
}
 8007586:	bf00      	nop
 8007588:	3730      	adds	r7, #48	@ 0x30
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	40003800 	.word	0x40003800
 8007594:	40021000 	.word	0x40021000
 8007598:	48000400 	.word	0x48000400
 800759c:	40003c00 	.word	0x40003c00
 80075a0:	48000800 	.word	0x48000800

080075a4 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a0a      	ldr	r2, [pc, #40]	@ (80075dc <HAL_TIM_OC_MspInit+0x38>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d10b      	bne.n	80075ce <HAL_TIM_OC_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80075b6:	4b0a      	ldr	r3, [pc, #40]	@ (80075e0 <HAL_TIM_OC_MspInit+0x3c>)
 80075b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075ba:	4a09      	ldr	r2, [pc, #36]	@ (80075e0 <HAL_TIM_OC_MspInit+0x3c>)
 80075bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80075c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80075c2:	4b07      	ldr	r3, [pc, #28]	@ (80075e0 <HAL_TIM_OC_MspInit+0x3c>)
 80075c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075ca:	60fb      	str	r3, [r7, #12]
 80075cc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80075ce:	bf00      	nop
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	40012c00 	.word	0x40012c00
 80075e0:	40021000 	.word	0x40021000

080075e4 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b08a      	sub	sp, #40	@ 0x28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075ec:	f107 0314 	add.w	r3, r7, #20
 80075f0:	2200      	movs	r2, #0
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	605a      	str	r2, [r3, #4]
 80075f6:	609a      	str	r2, [r3, #8]
 80075f8:	60da      	str	r2, [r3, #12]
 80075fa:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007604:	d128      	bne.n	8007658 <HAL_TIM_IC_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007606:	4b16      	ldr	r3, [pc, #88]	@ (8007660 <HAL_TIM_IC_MspInit+0x7c>)
 8007608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800760a:	4a15      	ldr	r2, [pc, #84]	@ (8007660 <HAL_TIM_IC_MspInit+0x7c>)
 800760c:	f043 0301 	orr.w	r3, r3, #1
 8007610:	6593      	str	r3, [r2, #88]	@ 0x58
 8007612:	4b13      	ldr	r3, [pc, #76]	@ (8007660 <HAL_TIM_IC_MspInit+0x7c>)
 8007614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	613b      	str	r3, [r7, #16]
 800761c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800761e:	4b10      	ldr	r3, [pc, #64]	@ (8007660 <HAL_TIM_IC_MspInit+0x7c>)
 8007620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007622:	4a0f      	ldr	r2, [pc, #60]	@ (8007660 <HAL_TIM_IC_MspInit+0x7c>)
 8007624:	f043 0301 	orr.w	r3, r3, #1
 8007628:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800762a:	4b0d      	ldr	r3, [pc, #52]	@ (8007660 <HAL_TIM_IC_MspInit+0x7c>)
 800762c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007636:	2320      	movs	r3, #32
 8007638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800763a:	2302      	movs	r3, #2
 800763c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800763e:	2301      	movs	r3, #1
 8007640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007642:	2300      	movs	r3, #0
 8007644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007646:	2301      	movs	r3, #1
 8007648:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800764a:	f107 0314 	add.w	r3, r7, #20
 800764e:	4619      	mov	r1, r3
 8007650:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007654:	f006 fb8c 	bl	800dd70 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8007658:	bf00      	nop
 800765a:	3728      	adds	r7, #40	@ 0x28
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	40021000 	.word	0x40021000

08007664 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a13      	ldr	r2, [pc, #76]	@ (80076c0 <HAL_TIM_Base_MspInit+0x5c>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d10c      	bne.n	8007690 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007676:	4b13      	ldr	r3, [pc, #76]	@ (80076c4 <HAL_TIM_Base_MspInit+0x60>)
 8007678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800767a:	4a12      	ldr	r2, [pc, #72]	@ (80076c4 <HAL_TIM_Base_MspInit+0x60>)
 800767c:	f043 0302 	orr.w	r3, r3, #2
 8007680:	6593      	str	r3, [r2, #88]	@ 0x58
 8007682:	4b10      	ldr	r3, [pc, #64]	@ (80076c4 <HAL_TIM_Base_MspInit+0x60>)
 8007684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007686:	f003 0302 	and.w	r3, r3, #2
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800768e:	e010      	b.n	80076b2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a0c      	ldr	r2, [pc, #48]	@ (80076c8 <HAL_TIM_Base_MspInit+0x64>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d10b      	bne.n	80076b2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800769a:	4b0a      	ldr	r3, [pc, #40]	@ (80076c4 <HAL_TIM_Base_MspInit+0x60>)
 800769c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800769e:	4a09      	ldr	r2, [pc, #36]	@ (80076c4 <HAL_TIM_Base_MspInit+0x60>)
 80076a0:	f043 0304 	orr.w	r3, r3, #4
 80076a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80076a6:	4b07      	ldr	r3, [pc, #28]	@ (80076c4 <HAL_TIM_Base_MspInit+0x60>)
 80076a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076aa:	f003 0304 	and.w	r3, r3, #4
 80076ae:	60bb      	str	r3, [r7, #8]
 80076b0:	68bb      	ldr	r3, [r7, #8]
}
 80076b2:	bf00      	nop
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	40000400 	.word	0x40000400
 80076c4:	40021000 	.word	0x40021000
 80076c8:	40000800 	.word	0x40000800

080076cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08a      	sub	sp, #40	@ 0x28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076d4:	f107 0314 	add.w	r3, r7, #20
 80076d8:	2200      	movs	r2, #0
 80076da:	601a      	str	r2, [r3, #0]
 80076dc:	605a      	str	r2, [r3, #4]
 80076de:	609a      	str	r2, [r3, #8]
 80076e0:	60da      	str	r2, [r3, #12]
 80076e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a23      	ldr	r2, [pc, #140]	@ (8007778 <HAL_TIM_MspPostInit+0xac>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d11e      	bne.n	800772c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076ee:	4b23      	ldr	r3, [pc, #140]	@ (800777c <HAL_TIM_MspPostInit+0xb0>)
 80076f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076f2:	4a22      	ldr	r2, [pc, #136]	@ (800777c <HAL_TIM_MspPostInit+0xb0>)
 80076f4:	f043 0301 	orr.w	r3, r3, #1
 80076f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80076fa:	4b20      	ldr	r3, [pc, #128]	@ (800777c <HAL_TIM_MspPostInit+0xb0>)
 80076fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	613b      	str	r3, [r7, #16]
 8007704:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8007706:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800770a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800770c:	2302      	movs	r3, #2
 800770e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007710:	2300      	movs	r3, #0
 8007712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007714:	2300      	movs	r3, #0
 8007716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007718:	2301      	movs	r3, #1
 800771a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800771c:	f107 0314 	add.w	r3, r7, #20
 8007720:	4619      	mov	r1, r3
 8007722:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007726:	f006 fb23 	bl	800dd70 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800772a:	e021      	b.n	8007770 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a13      	ldr	r2, [pc, #76]	@ (8007780 <HAL_TIM_MspPostInit+0xb4>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d11c      	bne.n	8007770 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007736:	4b11      	ldr	r3, [pc, #68]	@ (800777c <HAL_TIM_MspPostInit+0xb0>)
 8007738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800773a:	4a10      	ldr	r2, [pc, #64]	@ (800777c <HAL_TIM_MspPostInit+0xb0>)
 800773c:	f043 0304 	orr.w	r3, r3, #4
 8007740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007742:	4b0e      	ldr	r3, [pc, #56]	@ (800777c <HAL_TIM_MspPostInit+0xb0>)
 8007744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007746:	f003 0304 	and.w	r3, r3, #4
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800774e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007754:	2302      	movs	r3, #2
 8007756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007758:	2300      	movs	r3, #0
 800775a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800775c:	2300      	movs	r3, #0
 800775e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007760:	2302      	movs	r3, #2
 8007762:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007764:	f107 0314 	add.w	r3, r7, #20
 8007768:	4619      	mov	r1, r3
 800776a:	4806      	ldr	r0, [pc, #24]	@ (8007784 <HAL_TIM_MspPostInit+0xb8>)
 800776c:	f006 fb00 	bl	800dd70 <HAL_GPIO_Init>
}
 8007770:	bf00      	nop
 8007772:	3728      	adds	r7, #40	@ 0x28
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	40012c00 	.word	0x40012c00
 800777c:	40021000 	.word	0x40021000
 8007780:	40000400 	.word	0x40000400
 8007784:	48000800 	.word	0x48000800

08007788 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b0ae      	sub	sp, #184	@ 0xb8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007790:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8007794:	2200      	movs	r2, #0
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	605a      	str	r2, [r3, #4]
 800779a:	609a      	str	r2, [r3, #8]
 800779c:	60da      	str	r2, [r3, #12]
 800779e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80077a0:	f107 031c 	add.w	r3, r7, #28
 80077a4:	2288      	movs	r2, #136	@ 0x88
 80077a6:	2100      	movs	r1, #0
 80077a8:	4618      	mov	r0, r3
 80077aa:	f00e fb5d 	bl	8015e68 <memset>
  if(huart->Instance==UART4)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a6b      	ldr	r2, [pc, #428]	@ (8007960 <HAL_UART_MspInit+0x1d8>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d13c      	bne.n	8007832 <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80077b8:	2308      	movs	r3, #8
 80077ba:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80077bc:	2300      	movs	r3, #0
 80077be:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80077c0:	f107 031c 	add.w	r3, r7, #28
 80077c4:	4618      	mov	r0, r3
 80077c6:	f008 fd43 	bl	8010250 <HAL_RCCEx_PeriphCLKConfig>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d001      	beq.n	80077d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80077d0:	f7fd fcf8 	bl	80051c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80077d4:	4b63      	ldr	r3, [pc, #396]	@ (8007964 <HAL_UART_MspInit+0x1dc>)
 80077d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077d8:	4a62      	ldr	r2, [pc, #392]	@ (8007964 <HAL_UART_MspInit+0x1dc>)
 80077da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80077de:	6593      	str	r3, [r2, #88]	@ 0x58
 80077e0:	4b60      	ldr	r3, [pc, #384]	@ (8007964 <HAL_UART_MspInit+0x1dc>)
 80077e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80077e8:	61bb      	str	r3, [r7, #24]
 80077ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077ec:	4b5d      	ldr	r3, [pc, #372]	@ (8007964 <HAL_UART_MspInit+0x1dc>)
 80077ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077f0:	4a5c      	ldr	r2, [pc, #368]	@ (8007964 <HAL_UART_MspInit+0x1dc>)
 80077f2:	f043 0301 	orr.w	r3, r3, #1
 80077f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80077f8:	4b5a      	ldr	r3, [pc, #360]	@ (8007964 <HAL_UART_MspInit+0x1dc>)
 80077fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077fc:	f003 0301 	and.w	r3, r3, #1
 8007800:	617b      	str	r3, [r7, #20]
 8007802:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007804:	2301      	movs	r3, #1
 8007806:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800780a:	2312      	movs	r3, #18
 800780c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007810:	2301      	movs	r3, #1
 8007812:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007816:	2303      	movs	r3, #3
 8007818:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800781c:	2308      	movs	r3, #8
 800781e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007822:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8007826:	4619      	mov	r1, r3
 8007828:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800782c:	f006 faa0 	bl	800dd70 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8007830:	e092      	b.n	8007958 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART1)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a4c      	ldr	r2, [pc, #304]	@ (8007968 <HAL_UART_MspInit+0x1e0>)
 8007838:	4293      	cmp	r3, r2
 800783a:	f040 808d 	bne.w	8007958 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800783e:	2301      	movs	r3, #1
 8007840:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007842:	2300      	movs	r3, #0
 8007844:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007846:	f107 031c 	add.w	r3, r7, #28
 800784a:	4618      	mov	r0, r3
 800784c:	f008 fd00 	bl	8010250 <HAL_RCCEx_PeriphCLKConfig>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8007856:	f7fd fcb5 	bl	80051c4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800785a:	4b42      	ldr	r3, [pc, #264]	@ (8007964 <HAL_UART_MspInit+0x1dc>)
 800785c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800785e:	4a41      	ldr	r2, [pc, #260]	@ (8007964 <HAL_UART_MspInit+0x1dc>)
 8007860:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007864:	6613      	str	r3, [r2, #96]	@ 0x60
 8007866:	4b3f      	ldr	r3, [pc, #252]	@ (8007964 <HAL_UART_MspInit+0x1dc>)
 8007868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800786a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800786e:	613b      	str	r3, [r7, #16]
 8007870:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007872:	4b3c      	ldr	r3, [pc, #240]	@ (8007964 <HAL_UART_MspInit+0x1dc>)
 8007874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007876:	4a3b      	ldr	r2, [pc, #236]	@ (8007964 <HAL_UART_MspInit+0x1dc>)
 8007878:	f043 0302 	orr.w	r3, r3, #2
 800787c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800787e:	4b39      	ldr	r3, [pc, #228]	@ (8007964 <HAL_UART_MspInit+0x1dc>)
 8007880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007882:	f003 0302 	and.w	r3, r3, #2
 8007886:	60fb      	str	r3, [r7, #12]
 8007888:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 800788a:	23d8      	movs	r3, #216	@ 0xd8
 800788c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007890:	2302      	movs	r3, #2
 8007892:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007896:	2300      	movs	r3, #0
 8007898:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800789c:	2303      	movs	r3, #3
 800789e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80078a2:	2307      	movs	r3, #7
 80078a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078a8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80078ac:	4619      	mov	r1, r3
 80078ae:	482f      	ldr	r0, [pc, #188]	@ (800796c <HAL_UART_MspInit+0x1e4>)
 80078b0:	f006 fa5e 	bl	800dd70 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80078b4:	4b2e      	ldr	r3, [pc, #184]	@ (8007970 <HAL_UART_MspInit+0x1e8>)
 80078b6:	4a2f      	ldr	r2, [pc, #188]	@ (8007974 <HAL_UART_MspInit+0x1ec>)
 80078b8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80078ba:	4b2d      	ldr	r3, [pc, #180]	@ (8007970 <HAL_UART_MspInit+0x1e8>)
 80078bc:	2202      	movs	r2, #2
 80078be:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80078c0:	4b2b      	ldr	r3, [pc, #172]	@ (8007970 <HAL_UART_MspInit+0x1e8>)
 80078c2:	2200      	movs	r2, #0
 80078c4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80078c6:	4b2a      	ldr	r3, [pc, #168]	@ (8007970 <HAL_UART_MspInit+0x1e8>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80078cc:	4b28      	ldr	r3, [pc, #160]	@ (8007970 <HAL_UART_MspInit+0x1e8>)
 80078ce:	2280      	movs	r2, #128	@ 0x80
 80078d0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80078d2:	4b27      	ldr	r3, [pc, #156]	@ (8007970 <HAL_UART_MspInit+0x1e8>)
 80078d4:	2200      	movs	r2, #0
 80078d6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80078d8:	4b25      	ldr	r3, [pc, #148]	@ (8007970 <HAL_UART_MspInit+0x1e8>)
 80078da:	2200      	movs	r2, #0
 80078dc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80078de:	4b24      	ldr	r3, [pc, #144]	@ (8007970 <HAL_UART_MspInit+0x1e8>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80078e4:	4b22      	ldr	r3, [pc, #136]	@ (8007970 <HAL_UART_MspInit+0x1e8>)
 80078e6:	2200      	movs	r2, #0
 80078e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80078ea:	4821      	ldr	r0, [pc, #132]	@ (8007970 <HAL_UART_MspInit+0x1e8>)
 80078ec:	f005 f93a 	bl	800cb64 <HAL_DMA_Init>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <HAL_UART_MspInit+0x172>
      Error_Handler();
 80078f6:	f7fd fc65 	bl	80051c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a1c      	ldr	r2, [pc, #112]	@ (8007970 <HAL_UART_MspInit+0x1e8>)
 80078fe:	675a      	str	r2, [r3, #116]	@ 0x74
 8007900:	4a1b      	ldr	r2, [pc, #108]	@ (8007970 <HAL_UART_MspInit+0x1e8>)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007906:	4b1c      	ldr	r3, [pc, #112]	@ (8007978 <HAL_UART_MspInit+0x1f0>)
 8007908:	4a1c      	ldr	r2, [pc, #112]	@ (800797c <HAL_UART_MspInit+0x1f4>)
 800790a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 800790c:	4b1a      	ldr	r3, [pc, #104]	@ (8007978 <HAL_UART_MspInit+0x1f0>)
 800790e:	2202      	movs	r2, #2
 8007910:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007912:	4b19      	ldr	r3, [pc, #100]	@ (8007978 <HAL_UART_MspInit+0x1f0>)
 8007914:	2210      	movs	r2, #16
 8007916:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007918:	4b17      	ldr	r3, [pc, #92]	@ (8007978 <HAL_UART_MspInit+0x1f0>)
 800791a:	2200      	movs	r2, #0
 800791c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800791e:	4b16      	ldr	r3, [pc, #88]	@ (8007978 <HAL_UART_MspInit+0x1f0>)
 8007920:	2280      	movs	r2, #128	@ 0x80
 8007922:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007924:	4b14      	ldr	r3, [pc, #80]	@ (8007978 <HAL_UART_MspInit+0x1f0>)
 8007926:	2200      	movs	r2, #0
 8007928:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800792a:	4b13      	ldr	r3, [pc, #76]	@ (8007978 <HAL_UART_MspInit+0x1f0>)
 800792c:	2200      	movs	r2, #0
 800792e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8007930:	4b11      	ldr	r3, [pc, #68]	@ (8007978 <HAL_UART_MspInit+0x1f0>)
 8007932:	2200      	movs	r2, #0
 8007934:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007936:	4b10      	ldr	r3, [pc, #64]	@ (8007978 <HAL_UART_MspInit+0x1f0>)
 8007938:	2200      	movs	r2, #0
 800793a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800793c:	480e      	ldr	r0, [pc, #56]	@ (8007978 <HAL_UART_MspInit+0x1f0>)
 800793e:	f005 f911 	bl	800cb64 <HAL_DMA_Init>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d001      	beq.n	800794c <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8007948:	f7fd fc3c 	bl	80051c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a0a      	ldr	r2, [pc, #40]	@ (8007978 <HAL_UART_MspInit+0x1f0>)
 8007950:	671a      	str	r2, [r3, #112]	@ 0x70
 8007952:	4a09      	ldr	r2, [pc, #36]	@ (8007978 <HAL_UART_MspInit+0x1f0>)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8007958:	bf00      	nop
 800795a:	37b8      	adds	r7, #184	@ 0xb8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	40004c00 	.word	0x40004c00
 8007964:	40021000 	.word	0x40021000
 8007968:	40013800 	.word	0x40013800
 800796c:	48000400 	.word	0x48000400
 8007970:	200006ac 	.word	0x200006ac
 8007974:	40020058 	.word	0x40020058
 8007978:	200006f4 	.word	0x200006f4
 800797c:	40020044 	.word	0x40020044

08007980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007980:	b480      	push	{r7}
 8007982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007984:	bf00      	nop
 8007986:	e7fd      	b.n	8007984 <NMI_Handler+0x4>

08007988 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007988:	b480      	push	{r7}
 800798a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800798c:	bf00      	nop
 800798e:	e7fd      	b.n	800798c <HardFault_Handler+0x4>

08007990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007990:	b480      	push	{r7}
 8007992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007994:	bf00      	nop
 8007996:	e7fd      	b.n	8007994 <MemManage_Handler+0x4>

08007998 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007998:	b480      	push	{r7}
 800799a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800799c:	bf00      	nop
 800799e:	e7fd      	b.n	800799c <BusFault_Handler+0x4>

080079a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80079a0:	b480      	push	{r7}
 80079a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80079a4:	bf00      	nop
 80079a6:	e7fd      	b.n	80079a4 <UsageFault_Handler+0x4>

080079a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80079a8:	b480      	push	{r7}
 80079aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80079ac:	bf00      	nop
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80079b6:	b480      	push	{r7}
 80079b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80079ba:	bf00      	nop
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80079c4:	b480      	push	{r7}
 80079c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80079c8:	bf00      	nop
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80079d6:	f003 f983 	bl	800ace0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80079da:	bf00      	nop
 80079dc:	bd80      	pop	{r7, pc}
	...

080079e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80079e4:	4802      	ldr	r0, [pc, #8]	@ (80079f0 <DMA1_Channel1_IRQHandler+0x10>)
 80079e6:	f005 fa13 	bl	800ce10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80079ea:	bf00      	nop
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	2000027c 	.word	0x2000027c

080079f4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80079f8:	4802      	ldr	r0, [pc, #8]	@ (8007a04 <DMA1_Channel4_IRQHandler+0x10>)
 80079fa:	f005 fa09 	bl	800ce10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80079fe:	bf00      	nop
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	200006f4 	.word	0x200006f4

08007a08 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007a0c:	4802      	ldr	r0, [pc, #8]	@ (8007a18 <DMA1_Channel5_IRQHandler+0x10>)
 8007a0e:	f005 f9ff 	bl	800ce10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8007a12:	bf00      	nop
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	200006ac 	.word	0x200006ac

08007a1c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8007a20:	4802      	ldr	r0, [pc, #8]	@ (8007a2c <RTC_Alarm_IRQHandler+0x10>)
 8007a22:	f009 fc15 	bl	8011250 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8007a26:	bf00      	nop
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	20000380 	.word	0x20000380

08007a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007a38:	4a14      	ldr	r2, [pc, #80]	@ (8007a8c <_sbrk+0x5c>)
 8007a3a:	4b15      	ldr	r3, [pc, #84]	@ (8007a90 <_sbrk+0x60>)
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007a44:	4b13      	ldr	r3, [pc, #76]	@ (8007a94 <_sbrk+0x64>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d102      	bne.n	8007a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007a4c:	4b11      	ldr	r3, [pc, #68]	@ (8007a94 <_sbrk+0x64>)
 8007a4e:	4a12      	ldr	r2, [pc, #72]	@ (8007a98 <_sbrk+0x68>)
 8007a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007a52:	4b10      	ldr	r3, [pc, #64]	@ (8007a94 <_sbrk+0x64>)
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4413      	add	r3, r2
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d207      	bcs.n	8007a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007a60:	f00e fa52 	bl	8015f08 <__errno>
 8007a64:	4603      	mov	r3, r0
 8007a66:	220c      	movs	r2, #12
 8007a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a6e:	e009      	b.n	8007a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007a70:	4b08      	ldr	r3, [pc, #32]	@ (8007a94 <_sbrk+0x64>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007a76:	4b07      	ldr	r3, [pc, #28]	@ (8007a94 <_sbrk+0x64>)
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	4a05      	ldr	r2, [pc, #20]	@ (8007a94 <_sbrk+0x64>)
 8007a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007a82:	68fb      	ldr	r3, [r7, #12]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3718      	adds	r7, #24
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	20018000 	.word	0x20018000
 8007a90:	00000400 	.word	0x00000400
 8007a94:	20005cf8 	.word	0x20005cf8
 8007a98:	20005e58 	.word	0x20005e58

08007a9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8007aa0:	4b06      	ldr	r3, [pc, #24]	@ (8007abc <SystemInit+0x20>)
 8007aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aa6:	4a05      	ldr	r2, [pc, #20]	@ (8007abc <SystemInit+0x20>)
 8007aa8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007aac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8007ab0:	bf00      	nop
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	e000ed00 	.word	0xe000ed00

08007ac0 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;

	switch (pdrv) {
 8007aca:	79fb      	ldrb	r3, [r7, #7]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <disk_status+0x16>
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d00c      	beq.n	8007aee <disk_status+0x2e>
 8007ad4:	e017      	b.n	8007b06 <disk_status+0x46>
	case DEV_RAM :

		if(!psram_is_initialized())
 8007ad6:	f7ff fa9b 	bl	8007010 <psram_is_initialized>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d102      	bne.n	8007ae6 <disk_status+0x26>
		{
			stat = STA_NOINIT;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	73fb      	strb	r3, [r7, #15]
 8007ae4:	e001      	b.n	8007aea <disk_status+0x2a>
		}else{
			stat = 0;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
 8007aec:	e00c      	b.n	8007b08 <disk_status+0x48>

	case DEV_MMC :

		if(!extflash_is_initialized())
 8007aee:	f7fb fa33 	bl	8002f58 <extflash_is_initialized>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d102      	bne.n	8007afe <disk_status+0x3e>
		{
			stat = STA_NOINIT;
 8007af8:	2301      	movs	r3, #1
 8007afa:	73fb      	strb	r3, [r7, #15]
 8007afc:	e001      	b.n	8007b02 <disk_status+0x42>
		}else{
			stat = 0;
 8007afe:	2300      	movs	r3, #0
 8007b00:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007b02:	7bfb      	ldrb	r3, [r7, #15]
 8007b04:	e000      	b.n	8007b08 <disk_status+0x48>

	}
	return STA_NOINIT;
 8007b06:	2301      	movs	r3, #1
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	4603      	mov	r3, r0
 8007b18:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;
	switch (pdrv) {
 8007b1a:	79fb      	ldrb	r3, [r7, #7]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <disk_initialize+0x16>
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d00c      	beq.n	8007b3e <disk_initialize+0x2e>
 8007b24:	e017      	b.n	8007b56 <disk_initialize+0x46>
	case DEV_RAM :

		if(psram_init() < 0)
 8007b26:	f7ff faa1 	bl	800706c <psram_init>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	da02      	bge.n	8007b36 <disk_initialize+0x26>
		{
			stat = STA_NODISK;
 8007b30:	2302      	movs	r3, #2
 8007b32:	73fb      	strb	r3, [r7, #15]
 8007b34:	e001      	b.n	8007b3a <disk_initialize+0x2a>
		}else{
			stat = 0;
 8007b36:	2300      	movs	r3, #0
 8007b38:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007b3a:	7bfb      	ldrb	r3, [r7, #15]
 8007b3c:	e00c      	b.n	8007b58 <disk_initialize+0x48>

	case DEV_MMC :

		if(extflash_init() < 0)
 8007b3e:	f7fb fa17 	bl	8002f70 <extflash_init>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	da02      	bge.n	8007b4e <disk_initialize+0x3e>
		{
			stat = STA_NODISK;
 8007b48:	2302      	movs	r3, #2
 8007b4a:	73fb      	strb	r3, [r7, #15]
 8007b4c:	e001      	b.n	8007b52 <disk_initialize+0x42>
		}else{
			stat = 0;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007b52:	7bfb      	ldrb	r3, [r7, #15]
 8007b54:	e000      	b.n	8007b58 <disk_initialize+0x48>

	}
	return STA_NOINIT;
 8007b56:	2301      	movs	r3, #1
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60b9      	str	r1, [r7, #8]
 8007b68:	607a      	str	r2, [r7, #4]
 8007b6a:	603b      	str	r3, [r7, #0]
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	73fb      	strb	r3, [r7, #15]
	DRESULT res;
	int result;

	switch (pdrv) {
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d002      	beq.n	8007b7c <disk_read+0x1c>
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d010      	beq.n	8007b9c <disk_read+0x3c>
 8007b7a:	e01e      	b.n	8007bba <disk_read+0x5a>
	case DEV_RAM :

		if(psram_sector_read_write(0, sector, count, buff) < 0)
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	683a      	ldr	r2, [r7, #0]
 8007b80:	6879      	ldr	r1, [r7, #4]
 8007b82:	2000      	movs	r0, #0
 8007b84:	f7ff f94a 	bl	8006e1c <psram_sector_read_write>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	da02      	bge.n	8007b94 <disk_read+0x34>
		{
			res = RES_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	75fb      	strb	r3, [r7, #23]
 8007b92:	e001      	b.n	8007b98 <disk_read+0x38>
		}else{

			res = 0;
 8007b94:	2300      	movs	r3, #0
 8007b96:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007b98:	7dfb      	ldrb	r3, [r7, #23]
 8007b9a:	e00f      	b.n	8007bbc <disk_read+0x5c>

	case DEV_MMC :

		if(extflash_sector_read(sector, count, buff) < 0)
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f7fb f8bd 	bl	8002d20 <extflash_sector_read>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	da02      	bge.n	8007bb2 <disk_read+0x52>
		{
			res = RES_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	75fb      	strb	r3, [r7, #23]
 8007bb0:	e001      	b.n	8007bb6 <disk_read+0x56>
		}else{

			res = 0;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
 8007bb8:	e000      	b.n	8007bbc <disk_read+0x5c>

	}

	return RES_PARERR;
 8007bba:	2304      	movs	r3, #4
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3718      	adds	r7, #24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60b9      	str	r1, [r7, #8]
 8007bcc:	607a      	str	r2, [r7, #4]
 8007bce:	603b      	str	r3, [r7, #0]
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	73fb      	strb	r3, [r7, #15]
	DRESULT res = RES_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	75fb      	strb	r3, [r7, #23]

	switch (pdrv) {
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d002      	beq.n	8007be4 <disk_write+0x20>
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d010      	beq.n	8007c04 <disk_write+0x40>
 8007be2:	e01e      	b.n	8007c22 <disk_write+0x5e>
	case DEV_RAM :

		if(psram_sector_read_write(1, sector, count, (const uint8_t *)buff) < 0)
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	6879      	ldr	r1, [r7, #4]
 8007bea:	2001      	movs	r0, #1
 8007bec:	f7ff f916 	bl	8006e1c <psram_sector_read_write>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	da02      	bge.n	8007bfc <disk_write+0x38>
		{
			res = RES_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	75fb      	strb	r3, [r7, #23]
 8007bfa:	e001      	b.n	8007c00 <disk_write+0x3c>
		}else{

			res = 0;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007c00:	7dfb      	ldrb	r3, [r7, #23]
 8007c02:	e00f      	b.n	8007c24 <disk_write+0x60>

	case DEV_MMC :

		if(extflash_sector_write(sector, count, buff) < 0)
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7fb f91e 	bl	8002e4a <extflash_sector_write>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	da02      	bge.n	8007c1a <disk_write+0x56>
		{
			res = RES_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	75fb      	strb	r3, [r7, #23]
 8007c18:	e001      	b.n	8007c1e <disk_write+0x5a>
		}else{

			res = 0;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007c1e:	7dfb      	ldrb	r3, [r7, #23]
 8007c20:	e000      	b.n	8007c24 <disk_write+0x60>

	}

	return RES_PARERR;
 8007c22:	2304      	movs	r3, #4
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3718      	adds	r7, #24
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	4603      	mov	r3, r0
 8007c34:	603a      	str	r2, [r7, #0]
 8007c36:	71fb      	strb	r3, [r7, #7]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_PARERR;
 8007c3c:	2304      	movs	r3, #4
 8007c3e:	73fb      	strb	r3, [r7, #15]

	switch (pdrv) {
 8007c40:	79fb      	ldrb	r3, [r7, #7]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d002      	beq.n	8007c4c <disk_ioctl+0x20>
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d036      	beq.n	8007cb8 <disk_ioctl+0x8c>
 8007c4a:	e06b      	b.n	8007d24 <disk_ioctl+0xf8>
	case DEV_RAM :

		if(!psram_is_initialized())return RES_NOTRDY;
 8007c4c:	f7ff f9e0 	bl	8007010 <psram_is_initialized>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <disk_ioctl+0x2e>
 8007c56:	2303      	movs	r3, #3
 8007c58:	e065      	b.n	8007d26 <disk_ioctl+0xfa>

		switch(cmd)
 8007c5a:	79bb      	ldrb	r3, [r7, #6]
 8007c5c:	2b04      	cmp	r3, #4
 8007c5e:	d826      	bhi.n	8007cae <disk_ioctl+0x82>
 8007c60:	a201      	add	r2, pc, #4	@ (adr r2, 8007c68 <disk_ioctl+0x3c>)
 8007c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c66:	bf00      	nop
 8007c68:	08007ca9 	.word	0x08007ca9
 8007c6c:	08007c7d 	.word	0x08007c7d
 8007c70:	08007c8d 	.word	0x08007c8d
 8007c74:	08007c9d 	.word	0x08007c9d
 8007c78:	08007ca9 	.word	0x08007ca9
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = psram_get_sector_count();
 8007c7c:	f7ff f9de 	bl	800703c <psram_get_sector_count>
 8007c80:	4602      	mov	r2, r0
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	601a      	str	r2, [r3, #0]
				res = 0;
 8007c86:	2300      	movs	r3, #0
 8007c88:	73fb      	strb	r3, [r7, #15]
				break;
 8007c8a:	e013      	b.n	8007cb4 <disk_ioctl+0x88>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = psram_get_sector_size();
 8007c8c:	f7ff f9cc 	bl	8007028 <psram_get_sector_size>
 8007c90:	4602      	mov	r2, r0
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	601a      	str	r2, [r3, #0]
				res = 0;
 8007c96:	2300      	movs	r3, #0
 8007c98:	73fb      	strb	r3, [r7, #15]
				break;
 8007c9a:	e00b      	b.n	8007cb4 <disk_ioctl+0x88>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	601a      	str	r2, [r3, #0]
				res = 0;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	73fb      	strb	r3, [r7, #15]
				break;
 8007ca6:	e005      	b.n	8007cb4 <disk_ioctl+0x88>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	73fb      	strb	r3, [r7, #15]
				break;
 8007cac:	e002      	b.n	8007cb4 <disk_ioctl+0x88>

			default:
				res = RES_PARERR;
 8007cae:	2304      	movs	r3, #4
 8007cb0:	73fb      	strb	r3, [r7, #15]
				break;
 8007cb2:	bf00      	nop
		}

		return res;
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
 8007cb6:	e036      	b.n	8007d26 <disk_ioctl+0xfa>

	case DEV_MMC :

		if(!extflash_is_initialized())return RES_NOTRDY;
 8007cb8:	f7fb f94e 	bl	8002f58 <extflash_is_initialized>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d101      	bne.n	8007cc6 <disk_ioctl+0x9a>
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e02f      	b.n	8007d26 <disk_ioctl+0xfa>

		switch(cmd)
 8007cc6:	79bb      	ldrb	r3, [r7, #6]
 8007cc8:	2b04      	cmp	r3, #4
 8007cca:	d826      	bhi.n	8007d1a <disk_ioctl+0xee>
 8007ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8007cd4 <disk_ioctl+0xa8>)
 8007cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd2:	bf00      	nop
 8007cd4:	08007d15 	.word	0x08007d15
 8007cd8:	08007ce9 	.word	0x08007ce9
 8007cdc:	08007cf9 	.word	0x08007cf9
 8007ce0:	08007d09 	.word	0x08007d09
 8007ce4:	08007d15 	.word	0x08007d15
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = extflash_get_sector_count();
 8007ce8:	f7fb f92a 	bl	8002f40 <extflash_get_sector_count>
 8007cec:	4602      	mov	r2, r0
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	601a      	str	r2, [r3, #0]
				res = 0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	73fb      	strb	r3, [r7, #15]
				break;
 8007cf6:	e013      	b.n	8007d20 <disk_ioctl+0xf4>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = extflash_get_sector_size();
 8007cf8:	f7fb f919 	bl	8002f2e <extflash_get_sector_size>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	601a      	str	r2, [r3, #0]
				res = 0;
 8007d02:	2300      	movs	r3, #0
 8007d04:	73fb      	strb	r3, [r7, #15]
				break;
 8007d06:	e00b      	b.n	8007d20 <disk_ioctl+0xf4>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	601a      	str	r2, [r3, #0]
				res = 0;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	73fb      	strb	r3, [r7, #15]
				break;
 8007d12:	e005      	b.n	8007d20 <disk_ioctl+0xf4>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 8007d14:	2300      	movs	r3, #0
 8007d16:	73fb      	strb	r3, [r7, #15]
				break;
 8007d18:	e002      	b.n	8007d20 <disk_ioctl+0xf4>

			default:
				res = RES_PARERR;
 8007d1a:	2304      	movs	r3, #4
 8007d1c:	73fb      	strb	r3, [r7, #15]
				break;
 8007d1e:	bf00      	nop
		}

		return res;
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
 8007d22:	e000      	b.n	8007d26 <disk_ioctl+0xfa>

	}

	return RES_PARERR;
 8007d24:	2304      	movs	r3, #4
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop

08007d30 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007d40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d44:	021b      	lsls	r3, r3, #8
 8007d46:	b21a      	sxth	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	b21b      	sxth	r3, r3
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	b21b      	sxth	r3, r3
 8007d52:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007d54:	89fb      	ldrh	r3, [r7, #14]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3714      	adds	r7, #20
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007d62:	b480      	push	{r7}
 8007d64:	b085      	sub	sp, #20
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	3303      	adds	r3, #3
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	021b      	lsls	r3, r3, #8
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	3202      	adds	r2, #2
 8007d7a:	7812      	ldrb	r2, [r2, #0]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	021b      	lsls	r3, r3, #8
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	3201      	adds	r2, #1
 8007d88:	7812      	ldrb	r2, [r2, #0]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	021b      	lsls	r3, r3, #8
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	7812      	ldrb	r2, [r2, #0]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	60fb      	str	r3, [r7, #12]
	return rv;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3714      	adds	r7, #20
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	460b      	mov	r3, r1
 8007db2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	1c5a      	adds	r2, r3, #1
 8007db8:	607a      	str	r2, [r7, #4]
 8007dba:	887a      	ldrh	r2, [r7, #2]
 8007dbc:	b2d2      	uxtb	r2, r2
 8007dbe:	701a      	strb	r2, [r3, #0]
 8007dc0:	887b      	ldrh	r3, [r7, #2]
 8007dc2:	0a1b      	lsrs	r3, r3, #8
 8007dc4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	1c5a      	adds	r2, r3, #1
 8007dca:	607a      	str	r2, [r7, #4]
 8007dcc:	887a      	ldrh	r2, [r7, #2]
 8007dce:	b2d2      	uxtb	r2, r2
 8007dd0:	701a      	strb	r2, [r3, #0]
}
 8007dd2:	bf00      	nop
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007dde:	b480      	push	{r7}
 8007de0:	b083      	sub	sp, #12
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	1c5a      	adds	r2, r3, #1
 8007dec:	607a      	str	r2, [r7, #4]
 8007dee:	683a      	ldr	r2, [r7, #0]
 8007df0:	b2d2      	uxtb	r2, r2
 8007df2:	701a      	strb	r2, [r3, #0]
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	0a1b      	lsrs	r3, r3, #8
 8007df8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	1c5a      	adds	r2, r3, #1
 8007dfe:	607a      	str	r2, [r7, #4]
 8007e00:	683a      	ldr	r2, [r7, #0]
 8007e02:	b2d2      	uxtb	r2, r2
 8007e04:	701a      	strb	r2, [r3, #0]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	0a1b      	lsrs	r3, r3, #8
 8007e0a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	607a      	str	r2, [r7, #4]
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	b2d2      	uxtb	r2, r2
 8007e16:	701a      	strb	r2, [r3, #0]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	0a1b      	lsrs	r3, r3, #8
 8007e1c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	1c5a      	adds	r2, r3, #1
 8007e22:	607a      	str	r2, [r7, #4]
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	b2d2      	uxtb	r2, r2
 8007e28:	701a      	strb	r2, [r3, #0]
}
 8007e2a:	bf00      	nop
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b083      	sub	sp, #12
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8007e40:	79fb      	ldrb	r3, [r7, #7]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <dbc_1st+0x14>
 8007e46:	2300      	movs	r3, #0
 8007e48:	e000      	b.n	8007e4c <dbc_1st+0x16>
#endif
	return 0;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	4603      	mov	r3, r0
 8007e60:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8007e62:	79fb      	ldrb	r3, [r7, #7]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d001      	beq.n	8007e6c <dbc_2nd+0x14>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	e000      	b.n	8007e6e <dbc_2nd+0x16>
#endif
	return 0;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b084      	sub	sp, #16
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	791b      	ldrb	r3, [r3, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d02c      	beq.n	8007ee8 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	7858      	ldrb	r0, [r3, #1]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	f7ff fe91 	bl	8007bc4 <disk_write>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d11d      	bne.n	8007ee4 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb6:	1ad2      	subs	r2, r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	69db      	ldr	r3, [r3, #28]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d213      	bcs.n	8007ee8 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	78db      	ldrb	r3, [r3, #3]
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d10f      	bne.n	8007ee8 <sync_window+0x6e>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	7858      	ldrb	r0, [r3, #1]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	441a      	add	r2, r3
 8007edc:	2301      	movs	r3, #1
 8007ede:	f7ff fe71 	bl	8007bc4 <disk_write>
 8007ee2:	e001      	b.n	8007ee8 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8007ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b084      	sub	sp, #16
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007efc:	2300      	movs	r3, #0
 8007efe:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d01b      	beq.n	8007f42 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7ff ffb5 	bl	8007e7a <sync_window>
 8007f10:	4603      	mov	r3, r0
 8007f12:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d113      	bne.n	8007f42 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	7858      	ldrb	r0, [r3, #1]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007f24:	2301      	movs	r3, #1
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	f7ff fe1a 	bl	8007b60 <disk_read>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d004      	beq.n	8007f3c <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8007f32:	f04f 33ff 	mov.w	r3, #4294967295
 8007f36:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	683a      	ldr	r2, [r7, #0]
 8007f40:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8007f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7ff ff90 	bl	8007e7a <sync_window>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d158      	bne.n	8008016 <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	2b03      	cmp	r3, #3
 8007f6a:	d148      	bne.n	8007ffe <sync_fs+0xb2>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	795b      	ldrb	r3, [r3, #5]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d144      	bne.n	8007ffe <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	3334      	adds	r3, #52	@ 0x34
 8007f78:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f00d ff72 	bl	8015e68 <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	3334      	adds	r3, #52	@ 0x34
 8007f88:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007f8c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7ff ff09 	bl	8007da8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	3334      	adds	r3, #52	@ 0x34
 8007f9a:	4921      	ldr	r1, [pc, #132]	@ (8008020 <sync_fs+0xd4>)
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7ff ff1e 	bl	8007dde <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	3334      	adds	r3, #52	@ 0x34
 8007fa6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007faa:	491e      	ldr	r1, [pc, #120]	@ (8008024 <sync_fs+0xd8>)
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7ff ff16 	bl	8007dde <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	3334      	adds	r3, #52	@ 0x34
 8007fb6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	695b      	ldr	r3, [r3, #20]
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	4610      	mov	r0, r2
 8007fc2:	f7ff ff0c 	bl	8007dde <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	3334      	adds	r3, #52	@ 0x34
 8007fca:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	f7ff ff02 	bl	8007dde <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	1c5a      	adds	r2, r3, #1
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	7858      	ldrb	r0, [r3, #1]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	f7ff fde6 	bl	8007bc4 <disk_write>
			fs->fsi_flag = 0;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	785b      	ldrb	r3, [r3, #1]
 8008002:	2200      	movs	r2, #0
 8008004:	2100      	movs	r1, #0
 8008006:	4618      	mov	r0, r3
 8008008:	f7ff fe10 	bl	8007c2c <disk_ioctl>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <sync_fs+0xca>
 8008012:	2301      	movs	r3, #1
 8008014:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008016:	7bfb      	ldrb	r3, [r7, #15]
}
 8008018:	4618      	mov	r0, r3
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	41615252 	.word	0x41615252
 8008024:	61417272 	.word	0x61417272

08008028 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	3b02      	subs	r3, #2
 8008036:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	3b02      	subs	r3, #2
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	429a      	cmp	r2, r3
 8008042:	d301      	bcc.n	8008048 <clst2sect+0x20>
 8008044:	2300      	movs	r3, #0
 8008046:	e008      	b.n	800805a <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	895b      	ldrh	r3, [r3, #10]
 8008050:	4619      	mov	r1, r3
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	fb01 f303 	mul.w	r3, r1, r3
 8008058:	4413      	add	r3, r2
}
 800805a:	4618      	mov	r0, r3
 800805c:	370c      	adds	r7, #12
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b086      	sub	sp, #24
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
 800806e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d904      	bls.n	8008086 <get_fat+0x20>
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	683a      	ldr	r2, [r7, #0]
 8008082:	429a      	cmp	r2, r3
 8008084:	d302      	bcc.n	800808c <get_fat+0x26>
		val = 1;	/* Internal error */
 8008086:	2301      	movs	r3, #1
 8008088:	617b      	str	r3, [r7, #20]
 800808a:	e0ba      	b.n	8008202 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800808c:	f04f 33ff 	mov.w	r3, #4294967295
 8008090:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	2b03      	cmp	r3, #3
 8008098:	f000 8082 	beq.w	80081a0 <get_fat+0x13a>
 800809c:	2b03      	cmp	r3, #3
 800809e:	f300 80a6 	bgt.w	80081ee <get_fat+0x188>
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d002      	beq.n	80080ac <get_fat+0x46>
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d055      	beq.n	8008156 <get_fat+0xf0>
 80080aa:	e0a0      	b.n	80081ee <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	60fb      	str	r3, [r7, #12]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	085b      	lsrs	r3, r3, #1
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	4413      	add	r3, r2
 80080b8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	899b      	ldrh	r3, [r3, #12]
 80080c2:	4619      	mov	r1, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80080ca:	4413      	add	r3, r2
 80080cc:	4619      	mov	r1, r3
 80080ce:	6938      	ldr	r0, [r7, #16]
 80080d0:	f7ff ff0f 	bl	8007ef2 <move_window>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f040 808c 	bne.w	80081f4 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	1c5a      	adds	r2, r3, #1
 80080e0:	60fa      	str	r2, [r7, #12]
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	8992      	ldrh	r2, [r2, #12]
 80080e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80080ea:	fb01 f202 	mul.w	r2, r1, r2
 80080ee:	1a9b      	subs	r3, r3, r2
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	4413      	add	r3, r2
 80080f4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80080f8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	899b      	ldrh	r3, [r3, #12]
 8008102:	4619      	mov	r1, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	fbb3 f3f1 	udiv	r3, r3, r1
 800810a:	4413      	add	r3, r2
 800810c:	4619      	mov	r1, r3
 800810e:	6938      	ldr	r0, [r7, #16]
 8008110:	f7ff feef 	bl	8007ef2 <move_window>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d16e      	bne.n	80081f8 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	899b      	ldrh	r3, [r3, #12]
 800811e:	461a      	mov	r2, r3
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	fbb3 f1f2 	udiv	r1, r3, r2
 8008126:	fb01 f202 	mul.w	r2, r1, r2
 800812a:	1a9b      	subs	r3, r3, r2
 800812c:	693a      	ldr	r2, [r7, #16]
 800812e:	4413      	add	r3, r2
 8008130:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008134:	021b      	lsls	r3, r3, #8
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	4313      	orrs	r3, r2
 800813a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	2b00      	cmp	r3, #0
 8008144:	d002      	beq.n	800814c <get_fat+0xe6>
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	091b      	lsrs	r3, r3, #4
 800814a:	e002      	b.n	8008152 <get_fat+0xec>
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008152:	617b      	str	r3, [r7, #20]
			break;
 8008154:	e055      	b.n	8008202 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	899b      	ldrh	r3, [r3, #12]
 800815e:	085b      	lsrs	r3, r3, #1
 8008160:	b29b      	uxth	r3, r3
 8008162:	4619      	mov	r1, r3
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	fbb3 f3f1 	udiv	r3, r3, r1
 800816a:	4413      	add	r3, r2
 800816c:	4619      	mov	r1, r3
 800816e:	6938      	ldr	r0, [r7, #16]
 8008170:	f7ff febf 	bl	8007ef2 <move_window>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d140      	bne.n	80081fc <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	005b      	lsls	r3, r3, #1
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	8992      	ldrh	r2, [r2, #12]
 8008188:	fbb3 f0f2 	udiv	r0, r3, r2
 800818c:	fb00 f202 	mul.w	r2, r0, r2
 8008190:	1a9b      	subs	r3, r3, r2
 8008192:	440b      	add	r3, r1
 8008194:	4618      	mov	r0, r3
 8008196:	f7ff fdcb 	bl	8007d30 <ld_word>
 800819a:	4603      	mov	r3, r0
 800819c:	617b      	str	r3, [r7, #20]
			break;
 800819e:	e030      	b.n	8008202 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	899b      	ldrh	r3, [r3, #12]
 80081a8:	089b      	lsrs	r3, r3, #2
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	4619      	mov	r1, r3
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80081b4:	4413      	add	r3, r2
 80081b6:	4619      	mov	r1, r3
 80081b8:	6938      	ldr	r0, [r7, #16]
 80081ba:	f7ff fe9a 	bl	8007ef2 <move_window>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d11d      	bne.n	8008200 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	693a      	ldr	r2, [r7, #16]
 80081d0:	8992      	ldrh	r2, [r2, #12]
 80081d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80081d6:	fb00 f202 	mul.w	r2, r0, r2
 80081da:	1a9b      	subs	r3, r3, r2
 80081dc:	440b      	add	r3, r1
 80081de:	4618      	mov	r0, r3
 80081e0:	f7ff fdbf 	bl	8007d62 <ld_dword>
 80081e4:	4603      	mov	r3, r0
 80081e6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80081ea:	617b      	str	r3, [r7, #20]
			break;
 80081ec:	e009      	b.n	8008202 <get_fat+0x19c>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 80081ee:	2301      	movs	r3, #1
 80081f0:	617b      	str	r3, [r7, #20]
 80081f2:	e006      	b.n	8008202 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80081f4:	bf00      	nop
 80081f6:	e004      	b.n	8008202 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80081f8:	bf00      	nop
 80081fa:	e002      	b.n	8008202 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80081fc:	bf00      	nop
 80081fe:	e000      	b.n	8008202 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008200:	bf00      	nop
		}
	}

	return val;
 8008202:	697b      	ldr	r3, [r7, #20]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3718      	adds	r7, #24
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800820c:	b590      	push	{r4, r7, lr}
 800820e:	b089      	sub	sp, #36	@ 0x24
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008218:	2302      	movs	r3, #2
 800821a:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	2b01      	cmp	r3, #1
 8008220:	f240 8109 	bls.w	8008436 <put_fat+0x22a>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	429a      	cmp	r2, r3
 800822c:	f080 8103 	bcs.w	8008436 <put_fat+0x22a>
		switch (fs->fs_type) {
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	2b03      	cmp	r3, #3
 8008236:	f000 80b6 	beq.w	80083a6 <put_fat+0x19a>
 800823a:	2b03      	cmp	r3, #3
 800823c:	f300 80fb 	bgt.w	8008436 <put_fat+0x22a>
 8008240:	2b01      	cmp	r3, #1
 8008242:	d003      	beq.n	800824c <put_fat+0x40>
 8008244:	2b02      	cmp	r3, #2
 8008246:	f000 8083 	beq.w	8008350 <put_fat+0x144>
 800824a:	e0f4      	b.n	8008436 <put_fat+0x22a>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	61bb      	str	r3, [r7, #24]
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	085b      	lsrs	r3, r3, #1
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	4413      	add	r3, r2
 8008258:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	899b      	ldrh	r3, [r3, #12]
 8008262:	4619      	mov	r1, r3
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	fbb3 f3f1 	udiv	r3, r3, r1
 800826a:	4413      	add	r3, r2
 800826c:	4619      	mov	r1, r3
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f7ff fe3f 	bl	8007ef2 <move_window>
 8008274:	4603      	mov	r3, r0
 8008276:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008278:	7ffb      	ldrb	r3, [r7, #31]
 800827a:	2b00      	cmp	r3, #0
 800827c:	f040 80d4 	bne.w	8008428 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	1c5a      	adds	r2, r3, #1
 800828a:	61ba      	str	r2, [r7, #24]
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	8992      	ldrh	r2, [r2, #12]
 8008290:	fbb3 f0f2 	udiv	r0, r3, r2
 8008294:	fb00 f202 	mul.w	r2, r0, r2
 8008298:	1a9b      	subs	r3, r3, r2
 800829a:	440b      	add	r3, r1
 800829c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	f003 0301 	and.w	r3, r3, #1
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00d      	beq.n	80082c4 <put_fat+0xb8>
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	b25b      	sxtb	r3, r3
 80082ae:	f003 030f 	and.w	r3, r3, #15
 80082b2:	b25a      	sxtb	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	b25b      	sxtb	r3, r3
 80082b8:	011b      	lsls	r3, r3, #4
 80082ba:	b25b      	sxtb	r3, r3
 80082bc:	4313      	orrs	r3, r2
 80082be:	b25b      	sxtb	r3, r3
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	e001      	b.n	80082c8 <put_fat+0xbc>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	697a      	ldr	r2, [r7, #20]
 80082ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2201      	movs	r2, #1
 80082d0:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	899b      	ldrh	r3, [r3, #12]
 80082da:	4619      	mov	r1, r3
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	fbb3 f3f1 	udiv	r3, r3, r1
 80082e2:	4413      	add	r3, r2
 80082e4:	4619      	mov	r1, r3
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f7ff fe03 	bl	8007ef2 <move_window>
 80082ec:	4603      	mov	r3, r0
 80082ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80082f0:	7ffb      	ldrb	r3, [r7, #31]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f040 809a 	bne.w	800842c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	899b      	ldrh	r3, [r3, #12]
 8008302:	461a      	mov	r2, r3
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	fbb3 f0f2 	udiv	r0, r3, r2
 800830a:	fb00 f202 	mul.w	r2, r0, r2
 800830e:	1a9b      	subs	r3, r3, r2
 8008310:	440b      	add	r3, r1
 8008312:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b00      	cmp	r3, #0
 800831c:	d003      	beq.n	8008326 <put_fat+0x11a>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	091b      	lsrs	r3, r3, #4
 8008322:	b2db      	uxtb	r3, r3
 8008324:	e00e      	b.n	8008344 <put_fat+0x138>
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	b25b      	sxtb	r3, r3
 800832c:	f023 030f 	bic.w	r3, r3, #15
 8008330:	b25a      	sxtb	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	0a1b      	lsrs	r3, r3, #8
 8008336:	b25b      	sxtb	r3, r3
 8008338:	f003 030f 	and.w	r3, r3, #15
 800833c:	b25b      	sxtb	r3, r3
 800833e:	4313      	orrs	r3, r2
 8008340:	b25b      	sxtb	r3, r3
 8008342:	b2db      	uxtb	r3, r3
 8008344:	697a      	ldr	r2, [r7, #20]
 8008346:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2201      	movs	r2, #1
 800834c:	711a      	strb	r2, [r3, #4]
			break;
 800834e:	e072      	b.n	8008436 <put_fat+0x22a>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	899b      	ldrh	r3, [r3, #12]
 8008358:	085b      	lsrs	r3, r3, #1
 800835a:	b29b      	uxth	r3, r3
 800835c:	4619      	mov	r1, r3
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	fbb3 f3f1 	udiv	r3, r3, r1
 8008364:	4413      	add	r3, r2
 8008366:	4619      	mov	r1, r3
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f7ff fdc2 	bl	8007ef2 <move_window>
 800836e:	4603      	mov	r3, r0
 8008370:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008372:	7ffb      	ldrb	r3, [r7, #31]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d15b      	bne.n	8008430 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	005b      	lsls	r3, r3, #1
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	8992      	ldrh	r2, [r2, #12]
 8008386:	fbb3 f0f2 	udiv	r0, r3, r2
 800838a:	fb00 f202 	mul.w	r2, r0, r2
 800838e:	1a9b      	subs	r3, r3, r2
 8008390:	440b      	add	r3, r1
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	b292      	uxth	r2, r2
 8008396:	4611      	mov	r1, r2
 8008398:	4618      	mov	r0, r3
 800839a:	f7ff fd05 	bl	8007da8 <st_word>
			fs->wflag = 1;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2201      	movs	r2, #1
 80083a2:	711a      	strb	r2, [r3, #4]
			break;
 80083a4:	e047      	b.n	8008436 <put_fat+0x22a>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	899b      	ldrh	r3, [r3, #12]
 80083ae:	089b      	lsrs	r3, r3, #2
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	4619      	mov	r1, r3
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80083ba:	4413      	add	r3, r2
 80083bc:	4619      	mov	r1, r3
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f7ff fd97 	bl	8007ef2 <move_window>
 80083c4:	4603      	mov	r3, r0
 80083c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80083c8:	7ffb      	ldrb	r3, [r7, #31]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d132      	bne.n	8008434 <put_fat+0x228>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	8992      	ldrh	r2, [r2, #12]
 80083e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80083e6:	fb00 f202 	mul.w	r2, r0, r2
 80083ea:	1a9b      	subs	r3, r3, r2
 80083ec:	440b      	add	r3, r1
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7ff fcb7 	bl	8007d62 <ld_dword>
 80083f4:	4603      	mov	r3, r0
 80083f6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80083fa:	4323      	orrs	r3, r4
 80083fc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	8992      	ldrh	r2, [r2, #12]
 800840c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008410:	fb00 f202 	mul.w	r2, r0, r2
 8008414:	1a9b      	subs	r3, r3, r2
 8008416:	440b      	add	r3, r1
 8008418:	6879      	ldr	r1, [r7, #4]
 800841a:	4618      	mov	r0, r3
 800841c:	f7ff fcdf 	bl	8007dde <st_dword>
			fs->wflag = 1;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2201      	movs	r2, #1
 8008424:	711a      	strb	r2, [r3, #4]
			break;
 8008426:	e006      	b.n	8008436 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008428:	bf00      	nop
 800842a:	e004      	b.n	8008436 <put_fat+0x22a>
			if (res != FR_OK) break;
 800842c:	bf00      	nop
 800842e:	e002      	b.n	8008436 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008430:	bf00      	nop
 8008432:	e000      	b.n	8008436 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008434:	bf00      	nop
		}
	}
	return res;
 8008436:	7ffb      	ldrb	r3, [r7, #31]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3724      	adds	r7, #36	@ 0x24
 800843c:	46bd      	mov	sp, r7
 800843e:	bd90      	pop	{r4, r7, pc}

08008440 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b088      	sub	sp, #32
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800844c:	2300      	movs	r3, #0
 800844e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d904      	bls.n	8008466 <remove_chain+0x26>
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	429a      	cmp	r2, r3
 8008464:	d301      	bcc.n	800846a <remove_chain+0x2a>
 8008466:	2302      	movs	r3, #2
 8008468:	e04b      	b.n	8008502 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00c      	beq.n	800848a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008470:	f04f 32ff 	mov.w	r2, #4294967295
 8008474:	6879      	ldr	r1, [r7, #4]
 8008476:	69b8      	ldr	r0, [r7, #24]
 8008478:	f7ff fec8 	bl	800820c <put_fat>
 800847c:	4603      	mov	r3, r0
 800847e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008480:	7ffb      	ldrb	r3, [r7, #31]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d001      	beq.n	800848a <remove_chain+0x4a>
 8008486:	7ffb      	ldrb	r3, [r7, #31]
 8008488:	e03b      	b.n	8008502 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800848a:	68b9      	ldr	r1, [r7, #8]
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	f7ff fdea 	bl	8008066 <get_fat>
 8008492:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d031      	beq.n	80084fe <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	2b01      	cmp	r3, #1
 800849e:	d101      	bne.n	80084a4 <remove_chain+0x64>
 80084a0:	2302      	movs	r3, #2
 80084a2:	e02e      	b.n	8008502 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084aa:	d101      	bne.n	80084b0 <remove_chain+0x70>
 80084ac:	2301      	movs	r3, #1
 80084ae:	e028      	b.n	8008502 <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80084b0:	2200      	movs	r2, #0
 80084b2:	68b9      	ldr	r1, [r7, #8]
 80084b4:	69b8      	ldr	r0, [r7, #24]
 80084b6:	f7ff fea9 	bl	800820c <put_fat>
 80084ba:	4603      	mov	r3, r0
 80084bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80084be:	7ffb      	ldrb	r3, [r7, #31]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d001      	beq.n	80084c8 <remove_chain+0x88>
 80084c4:	7ffb      	ldrb	r3, [r7, #31]
 80084c6:	e01c      	b.n	8008502 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	695a      	ldr	r2, [r3, #20]
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	3b02      	subs	r3, #2
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d20b      	bcs.n	80084ee <remove_chain+0xae>
			fs->free_clst++;
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	1c5a      	adds	r2, r3, #1
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	795b      	ldrb	r3, [r3, #5]
 80084e4:	f043 0301 	orr.w	r3, r3, #1
 80084e8:	b2da      	uxtb	r2, r3
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	715a      	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d3c6      	bcc.n	800848a <remove_chain+0x4a>
 80084fc:	e000      	b.n	8008500 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80084fe:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3720      	adds	r7, #32
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b088      	sub	sp, #32
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10d      	bne.n	800853c <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d004      	beq.n	8008536 <create_chain+0x2c>
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	69ba      	ldr	r2, [r7, #24]
 8008532:	429a      	cmp	r2, r3
 8008534:	d31b      	bcc.n	800856e <create_chain+0x64>
 8008536:	2301      	movs	r3, #1
 8008538:	61bb      	str	r3, [r7, #24]
 800853a:	e018      	b.n	800856e <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800853c:	6839      	ldr	r1, [r7, #0]
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7ff fd91 	bl	8008066 <get_fat>
 8008544:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d801      	bhi.n	8008550 <create_chain+0x46>
 800854c:	2301      	movs	r3, #1
 800854e:	e0a9      	b.n	80086a4 <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008556:	d101      	bne.n	800855c <create_chain+0x52>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	e0a3      	b.n	80086a4 <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	429a      	cmp	r2, r3
 8008564:	d201      	bcs.n	800856a <create_chain+0x60>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	e09c      	b.n	80086a4 <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d101      	bne.n	800857a <create_chain+0x70>
 8008576:	2300      	movs	r3, #0
 8008578:	e094      	b.n	80086a4 <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 800857a:	2300      	movs	r3, #0
 800857c:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 800857e:	69ba      	ldr	r2, [r7, #24]
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	429a      	cmp	r2, r3
 8008584:	d129      	bne.n	80085da <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	3301      	adds	r3, #1
 800858a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	69fa      	ldr	r2, [r7, #28]
 8008592:	429a      	cmp	r2, r3
 8008594:	d301      	bcc.n	800859a <create_chain+0x90>
 8008596:	2302      	movs	r3, #2
 8008598:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800859a:	69f9      	ldr	r1, [r7, #28]
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f7ff fd62 	bl	8008066 <get_fat>
 80085a2:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d003      	beq.n	80085b2 <create_chain+0xa8>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b0:	d101      	bne.n	80085b6 <create_chain+0xac>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	e076      	b.n	80086a4 <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00e      	beq.n	80085da <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d906      	bls.n	80085d6 <create_chain+0xcc>
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d201      	bcs.n	80085d6 <create_chain+0xcc>
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 80085d6:	2300      	movs	r3, #0
 80085d8:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d129      	bne.n	8008634 <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	3301      	adds	r3, #1
 80085e8:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	69fa      	ldr	r2, [r7, #28]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d307      	bcc.n	8008604 <create_chain+0xfa>
					ncl = 2;
 80085f4:	2302      	movs	r3, #2
 80085f6:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 80085f8:	69fa      	ldr	r2, [r7, #28]
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d901      	bls.n	8008604 <create_chain+0xfa>
 8008600:	2300      	movs	r3, #0
 8008602:	e04f      	b.n	80086a4 <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008604:	69f9      	ldr	r1, [r7, #28]
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f7ff fd2d 	bl	8008066 <get_fat>
 800860c:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00e      	beq.n	8008632 <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d003      	beq.n	8008622 <create_chain+0x118>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008620:	d101      	bne.n	8008626 <create_chain+0x11c>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	e03e      	b.n	80086a4 <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8008626:	69fa      	ldr	r2, [r7, #28]
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	429a      	cmp	r2, r3
 800862c:	d1da      	bne.n	80085e4 <create_chain+0xda>
 800862e:	2300      	movs	r3, #0
 8008630:	e038      	b.n	80086a4 <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 8008632:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8008634:	f04f 32ff 	mov.w	r2, #4294967295
 8008638:	69f9      	ldr	r1, [r7, #28]
 800863a:	6938      	ldr	r0, [r7, #16]
 800863c:	f7ff fde6 	bl	800820c <put_fat>
 8008640:	4603      	mov	r3, r0
 8008642:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008644:	7dfb      	ldrb	r3, [r7, #23]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d109      	bne.n	800865e <create_chain+0x154>
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d006      	beq.n	800865e <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8008650:	69fa      	ldr	r2, [r7, #28]
 8008652:	6839      	ldr	r1, [r7, #0]
 8008654:	6938      	ldr	r0, [r7, #16]
 8008656:	f7ff fdd9 	bl	800820c <put_fat>
 800865a:	4603      	mov	r3, r0
 800865c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800865e:	7dfb      	ldrb	r3, [r7, #23]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d116      	bne.n	8008692 <create_chain+0x188>
		fs->last_clst = ncl;
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	69fa      	ldr	r2, [r7, #28]
 8008668:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	695a      	ldr	r2, [r3, #20]
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	3b02      	subs	r3, #2
 8008674:	429a      	cmp	r2, r3
 8008676:	d804      	bhi.n	8008682 <create_chain+0x178>
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	1e5a      	subs	r2, r3, #1
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	795b      	ldrb	r3, [r3, #5]
 8008686:	f043 0301 	orr.w	r3, r3, #1
 800868a:	b2da      	uxtb	r2, r3
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	715a      	strb	r2, [r3, #5]
 8008690:	e007      	b.n	80086a2 <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008692:	7dfb      	ldrb	r3, [r7, #23]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d102      	bne.n	800869e <create_chain+0x194>
 8008698:	f04f 33ff 	mov.w	r3, #4294967295
 800869c:	e000      	b.n	80086a0 <create_chain+0x196>
 800869e:	2301      	movs	r3, #1
 80086a0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80086a2:	69fb      	ldr	r3, [r7, #28]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3720      	adds	r7, #32
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff fbdf 	bl	8007e7a <sync_window>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d001      	beq.n	80086c6 <dir_clear+0x1a>
 80086c2:	2301      	movs	r3, #1
 80086c4:	e036      	b.n	8008734 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7ff fcad 	bl	8008028 <clst2sect>
 80086ce:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	631a      	str	r2, [r3, #48]	@ 0x30
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	3334      	adds	r3, #52	@ 0x34
 80086da:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80086de:	2100      	movs	r1, #0
 80086e0:	4618      	mov	r0, r3
 80086e2:	f00d fbc1 	bl	8015e68 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	3334      	adds	r3, #52	@ 0x34
 80086ea:	60fb      	str	r3, [r7, #12]
 80086ec:	2301      	movs	r3, #1
 80086ee:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80086f0:	2300      	movs	r3, #0
 80086f2:	617b      	str	r3, [r7, #20]
 80086f4:	e003      	b.n	80086fe <dir_clear+0x52>
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	4413      	add	r3, r2
 80086fc:	617b      	str	r3, [r7, #20]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	895b      	ldrh	r3, [r3, #10]
 8008702:	461a      	mov	r2, r3
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	4293      	cmp	r3, r2
 8008708:	d20b      	bcs.n	8008722 <dir_clear+0x76>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	7858      	ldrb	r0, [r3, #1]
 800870e:	693a      	ldr	r2, [r7, #16]
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	441a      	add	r2, r3
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	68f9      	ldr	r1, [r7, #12]
 8008718:	f7ff fa54 	bl	8007bc4 <disk_write>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d0e9      	beq.n	80086f6 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	895b      	ldrh	r3, [r3, #10]
 8008726:	461a      	mov	r2, r3
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	4293      	cmp	r3, r2
 800872c:	bf14      	ite	ne
 800872e:	2301      	movne	r3, #1
 8008730:	2300      	moveq	r3, #0
 8008732:	b2db      	uxtb	r3, r3
}
 8008734:	4618      	mov	r0, r3
 8008736:	3718      	adds	r7, #24
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b086      	sub	sp, #24
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008752:	d204      	bcs.n	800875e <dir_sdi+0x22>
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	f003 031f 	and.w	r3, r3, #31
 800875a:	2b00      	cmp	r3, #0
 800875c:	d001      	beq.n	8008762 <dir_sdi+0x26>
		return FR_INT_ERR;
 800875e:	2302      	movs	r3, #2
 8008760:	e071      	b.n	8008846 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	683a      	ldr	r2, [r7, #0]
 8008766:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d106      	bne.n	8008782 <dir_sdi+0x46>
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	2b02      	cmp	r3, #2
 800877a:	d902      	bls.n	8008782 <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008780:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10c      	bne.n	80087a2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	095b      	lsrs	r3, r3, #5
 800878c:	693a      	ldr	r2, [r7, #16]
 800878e:	8912      	ldrh	r2, [r2, #8]
 8008790:	4293      	cmp	r3, r2
 8008792:	d301      	bcc.n	8008798 <dir_sdi+0x5c>
 8008794:	2302      	movs	r3, #2
 8008796:	e056      	b.n	8008846 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	619a      	str	r2, [r3, #24]
 80087a0:	e02d      	b.n	80087fe <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	895b      	ldrh	r3, [r3, #10]
 80087a6:	461a      	mov	r2, r3
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	899b      	ldrh	r3, [r3, #12]
 80087ac:	fb02 f303 	mul.w	r3, r2, r3
 80087b0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80087b2:	e019      	b.n	80087e8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6979      	ldr	r1, [r7, #20]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7ff fc54 	bl	8008066 <get_fat>
 80087be:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c6:	d101      	bne.n	80087cc <dir_sdi+0x90>
 80087c8:	2301      	movs	r3, #1
 80087ca:	e03c      	b.n	8008846 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d904      	bls.n	80087dc <dir_sdi+0xa0>
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	699b      	ldr	r3, [r3, #24]
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d301      	bcc.n	80087e0 <dir_sdi+0xa4>
 80087dc:	2302      	movs	r3, #2
 80087de:	e032      	b.n	8008846 <dir_sdi+0x10a>
			ofs -= csz;
 80087e0:	683a      	ldr	r2, [r7, #0]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80087e8:	683a      	ldr	r2, [r7, #0]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d2e1      	bcs.n	80087b4 <dir_sdi+0x78>
		}
		dp->sect = clst2sect(fs, clst);
 80087f0:	6979      	ldr	r1, [r7, #20]
 80087f2:	6938      	ldr	r0, [r7, #16]
 80087f4:	f7ff fc18 	bl	8008028 <clst2sect>
 80087f8:	4602      	mov	r2, r0
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d101      	bne.n	8008810 <dir_sdi+0xd4>
 800880c:	2302      	movs	r3, #2
 800880e:	e01a      	b.n	8008846 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	699a      	ldr	r2, [r3, #24]
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	899b      	ldrh	r3, [r3, #12]
 8008818:	4619      	mov	r1, r3
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008820:	441a      	add	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	899b      	ldrh	r3, [r3, #12]
 8008830:	461a      	mov	r2, r3
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	fbb3 f0f2 	udiv	r0, r3, r2
 8008838:	fb00 f202 	mul.w	r2, r0, r2
 800883c:	1a9b      	subs	r3, r3, r2
 800883e:	18ca      	adds	r2, r1, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3718      	adds	r7, #24
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b086      	sub	sp, #24
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	3320      	adds	r3, #32
 8008864:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800886c:	d302      	bcc.n	8008874 <dir_next+0x26>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d101      	bne.n	8008880 <dir_next+0x32>
 800887c:	2304      	movs	r3, #4
 800887e:	e088      	b.n	8008992 <dir_next+0x144>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	899b      	ldrh	r3, [r3, #12]
 8008884:	461a      	mov	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	fbb3 f1f2 	udiv	r1, r3, r2
 800888c:	fb01 f202 	mul.w	r2, r1, r2
 8008890:	1a9b      	subs	r3, r3, r2
 8008892:	2b00      	cmp	r3, #0
 8008894:	d16a      	bne.n	800896c <dir_next+0x11e>
		dp->sect++;				/* Next sector */
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	699b      	ldr	r3, [r3, #24]
 800889a:	1c5a      	adds	r2, r3, #1
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d10a      	bne.n	80088be <dir_next+0x70>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	095b      	lsrs	r3, r3, #5
 80088ac:	693a      	ldr	r2, [r7, #16]
 80088ae:	8912      	ldrh	r2, [r2, #8]
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d35b      	bcc.n	800896c <dir_next+0x11e>
				dp->sect = 0; return FR_NO_FILE;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	619a      	str	r2, [r3, #24]
 80088ba:	2304      	movs	r3, #4
 80088bc:	e069      	b.n	8008992 <dir_next+0x144>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	899b      	ldrh	r3, [r3, #12]
 80088c2:	461a      	mov	r2, r3
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80088ca:	693a      	ldr	r2, [r7, #16]
 80088cc:	8952      	ldrh	r2, [r2, #10]
 80088ce:	3a01      	subs	r2, #1
 80088d0:	4013      	ands	r3, r2
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d14a      	bne.n	800896c <dir_next+0x11e>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	695b      	ldr	r3, [r3, #20]
 80088dc:	4619      	mov	r1, r3
 80088de:	4610      	mov	r0, r2
 80088e0:	f7ff fbc1 	bl	8008066 <get_fat>
 80088e4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d801      	bhi.n	80088f0 <dir_next+0xa2>
 80088ec:	2302      	movs	r3, #2
 80088ee:	e050      	b.n	8008992 <dir_next+0x144>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f6:	d101      	bne.n	80088fc <dir_next+0xae>
 80088f8:	2301      	movs	r3, #1
 80088fa:	e04a      	b.n	8008992 <dir_next+0x144>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	699b      	ldr	r3, [r3, #24]
 8008900:	697a      	ldr	r2, [r7, #20]
 8008902:	429a      	cmp	r2, r3
 8008904:	d328      	bcc.n	8008958 <dir_next+0x10a>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d104      	bne.n	8008916 <dir_next+0xc8>
						dp->sect = 0; return FR_NO_FILE;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	619a      	str	r2, [r3, #24]
 8008912:	2304      	movs	r3, #4
 8008914:	e03d      	b.n	8008992 <dir_next+0x144>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	695b      	ldr	r3, [r3, #20]
 800891c:	4619      	mov	r1, r3
 800891e:	4610      	mov	r0, r2
 8008920:	f7ff fdf3 	bl	800850a <create_chain>
 8008924:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d101      	bne.n	8008930 <dir_next+0xe2>
 800892c:	2307      	movs	r3, #7
 800892e:	e030      	b.n	8008992 <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	2b01      	cmp	r3, #1
 8008934:	d101      	bne.n	800893a <dir_next+0xec>
 8008936:	2302      	movs	r3, #2
 8008938:	e02b      	b.n	8008992 <dir_next+0x144>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008940:	d101      	bne.n	8008946 <dir_next+0xf8>
 8008942:	2301      	movs	r3, #1
 8008944:	e025      	b.n	8008992 <dir_next+0x144>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8008946:	6979      	ldr	r1, [r7, #20]
 8008948:	6938      	ldr	r0, [r7, #16]
 800894a:	f7ff feaf 	bl	80086ac <dir_clear>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <dir_next+0x10a>
 8008954:	2301      	movs	r3, #1
 8008956:	e01c      	b.n	8008992 <dir_next+0x144>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 800895e:	6979      	ldr	r1, [r7, #20]
 8008960:	6938      	ldr	r0, [r7, #16]
 8008962:	f7ff fb61 	bl	8008028 <clst2sect>
 8008966:	4602      	mov	r2, r0
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	899b      	ldrh	r3, [r3, #12]
 800897c:	461a      	mov	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	fbb3 f0f2 	udiv	r0, r3, r2
 8008984:	fb00 f202 	mul.w	r2, r0, r2
 8008988:	1a9b      	subs	r3, r3, r2
 800898a:	18ca      	adds	r2, r1, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3718      	adds	r7, #24
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b086      	sub	sp, #24
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80089aa:	2100      	movs	r1, #0
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f7ff fec5 	bl	800873c <dir_sdi>
 80089b2:	4603      	mov	r3, r0
 80089b4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d12b      	bne.n	8008a14 <dir_alloc+0x7a>
		n = 0;
 80089bc:	2300      	movs	r3, #0
 80089be:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	4619      	mov	r1, r3
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f7ff fa93 	bl	8007ef2 <move_window>
 80089cc:	4603      	mov	r3, r0
 80089ce:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80089d0:	7dfb      	ldrb	r3, [r7, #23]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d11d      	bne.n	8008a12 <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	69db      	ldr	r3, [r3, #28]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	2be5      	cmp	r3, #229	@ 0xe5
 80089de:	d004      	beq.n	80089ea <dir_alloc+0x50>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	69db      	ldr	r3, [r3, #28]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d107      	bne.n	80089fa <dir_alloc+0x60>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	3301      	adds	r3, #1
 80089ee:	613b      	str	r3, [r7, #16]
 80089f0:	693a      	ldr	r2, [r7, #16]
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d102      	bne.n	80089fe <dir_alloc+0x64>
 80089f8:	e00c      	b.n	8008a14 <dir_alloc+0x7a>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 80089fa:	2300      	movs	r3, #0
 80089fc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 80089fe:	2101      	movs	r1, #1
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f7ff ff24 	bl	800884e <dir_next>
 8008a06:	4603      	mov	r3, r0
 8008a08:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8008a0a:	7dfb      	ldrb	r3, [r7, #23]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d0d7      	beq.n	80089c0 <dir_alloc+0x26>
 8008a10:	e000      	b.n	8008a14 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008a12:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008a14:	7dfb      	ldrb	r3, [r7, #23]
 8008a16:	2b04      	cmp	r3, #4
 8008a18:	d101      	bne.n	8008a1e <dir_alloc+0x84>
 8008a1a:	2307      	movs	r3, #7
 8008a1c:	75fb      	strb	r3, [r7, #23]
	return res;
 8008a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3718      	adds	r7, #24
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	331a      	adds	r3, #26
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7ff f97a 	bl	8007d30 <ld_word>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	2b03      	cmp	r3, #3
 8008a46:	d109      	bne.n	8008a5c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	3314      	adds	r3, #20
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7ff f96f 	bl	8007d30 <ld_word>
 8008a52:	4603      	mov	r3, r0
 8008a54:	041b      	lsls	r3, r3, #16
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b084      	sub	sp, #16
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	60f8      	str	r0, [r7, #12]
 8008a6e:	60b9      	str	r1, [r7, #8]
 8008a70:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	331a      	adds	r3, #26
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	b292      	uxth	r2, r2
 8008a7a:	4611      	mov	r1, r2
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7ff f993 	bl	8007da8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	2b03      	cmp	r3, #3
 8008a88:	d109      	bne.n	8008a9e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	f103 0214 	add.w	r2, r3, #20
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	0c1b      	lsrs	r3, r3, #16
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	4619      	mov	r1, r3
 8008a98:	4610      	mov	r0, r2
 8008a9a:	f7ff f985 	bl	8007da8 <st_word>
	}
}
 8008a9e:	bf00      	nop
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b086      	sub	sp, #24
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f7ff fe40 	bl	800873c <dir_sdi>
 8008abc:	4603      	mov	r3, r0
 8008abe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008ac0:	7dfb      	ldrb	r3, [r7, #23]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d001      	beq.n	8008aca <dir_find+0x24>
 8008ac6:	7dfb      	ldrb	r3, [r7, #23]
 8008ac8:	e03e      	b.n	8008b48 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	699b      	ldr	r3, [r3, #24]
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6938      	ldr	r0, [r7, #16]
 8008ad2:	f7ff fa0e 	bl	8007ef2 <move_window>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008ada:	7dfb      	ldrb	r3, [r7, #23]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d12f      	bne.n	8008b40 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	69db      	ldr	r3, [r3, #28]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d102      	bne.n	8008af4 <dir_find+0x4e>
 8008aee:	2304      	movs	r3, #4
 8008af0:	75fb      	strb	r3, [r7, #23]
 8008af2:	e028      	b.n	8008b46 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	69db      	ldr	r3, [r3, #28]
 8008af8:	330b      	adds	r3, #11
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	69db      	ldr	r3, [r3, #28]
 8008b0a:	330b      	adds	r3, #11
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	f003 0308 	and.w	r3, r3, #8
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d10a      	bne.n	8008b2c <dir_find+0x86>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	69d8      	ldr	r0, [r3, #28]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	3320      	adds	r3, #32
 8008b1e:	220b      	movs	r2, #11
 8008b20:	4619      	mov	r1, r3
 8008b22:	f00d f991 	bl	8015e48 <memcmp>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00b      	beq.n	8008b44 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f7ff fe8d 	bl	800884e <dir_next>
 8008b34:	4603      	mov	r3, r0
 8008b36:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008b38:	7dfb      	ldrb	r3, [r7, #23]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d0c5      	beq.n	8008aca <dir_find+0x24>
 8008b3e:	e002      	b.n	8008b46 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008b40:	bf00      	nop
 8008b42:	e000      	b.n	8008b46 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008b44:	bf00      	nop

	return res;
 8008b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3718      	adds	r7, #24
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --n_ent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008b5e:	2101      	movs	r1, #1
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f7ff ff1a 	bl	800899a <dir_alloc>
 8008b66:	4603      	mov	r3, r0
 8008b68:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008b6a:	7bfb      	ldrb	r3, [r7, #15]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d11c      	bne.n	8008baa <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	699b      	ldr	r3, [r3, #24]
 8008b74:	4619      	mov	r1, r3
 8008b76:	68b8      	ldr	r0, [r7, #8]
 8008b78:	f7ff f9bb 	bl	8007ef2 <move_window>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008b80:	7bfb      	ldrb	r3, [r7, #15]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d111      	bne.n	8008baa <dir_register+0x5a>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	69db      	ldr	r3, [r3, #28]
 8008b8a:	2220      	movs	r2, #32
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f00d f96a 	bl	8015e68 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	69d8      	ldr	r0, [r3, #28]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	3320      	adds	r3, #32
 8008b9c:	220b      	movs	r2, #11
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	f00d f9e6 	bl	8015f70 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8008baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b08a      	sub	sp, #40	@ 0x28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
	BYTE *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	617b      	str	r3, [r7, #20]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	3320      	adds	r3, #32
 8008bc8:	613b      	str	r3, [r7, #16]
	memset(sfn, ' ', 11);
 8008bca:	220b      	movs	r2, #11
 8008bcc:	2120      	movs	r1, #32
 8008bce:	6938      	ldr	r0, [r7, #16]
 8008bd0:	f00d f94a 	bl	8015e68 <memset>
	si = i = 0; ni = 8;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	61bb      	str	r3, [r7, #24]
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	61fb      	str	r3, [r7, #28]
 8008bdc:	2308      	movs	r3, #8
 8008bde:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	1c5a      	adds	r2, r3, #1
 8008be4:	61fa      	str	r2, [r7, #28]
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	4413      	add	r3, r2
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bf4:	2b20      	cmp	r3, #32
 8008bf6:	f240 8089 	bls.w	8008d0c <create_name+0x158>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 8008bfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bfe:	2b2f      	cmp	r3, #47	@ 0x2f
 8008c00:	d007      	beq.n	8008c12 <create_name+0x5e>
 8008c02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c06:	2b5c      	cmp	r3, #92	@ 0x5c
 8008c08:	d110      	bne.n	8008c2c <create_name+0x78>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 8008c0a:	e002      	b.n	8008c12 <create_name+0x5e>
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	61fb      	str	r3, [r7, #28]
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	4413      	add	r3, r2
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	2b2f      	cmp	r3, #47	@ 0x2f
 8008c1c:	d0f6      	beq.n	8008c0c <create_name+0x58>
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	4413      	add	r3, r2
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	2b5c      	cmp	r3, #92	@ 0x5c
 8008c28:	d0f0      	beq.n	8008c0c <create_name+0x58>
			break;
 8008c2a:	e070      	b.n	8008d0e <create_name+0x15a>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8008c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c30:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c32:	d003      	beq.n	8008c3c <create_name+0x88>
 8008c34:	69ba      	ldr	r2, [r7, #24]
 8008c36:	6a3b      	ldr	r3, [r7, #32]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d30d      	bcc.n	8008c58 <create_name+0xa4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8008c3c:	6a3b      	ldr	r3, [r7, #32]
 8008c3e:	2b0b      	cmp	r3, #11
 8008c40:	d003      	beq.n	8008c4a <create_name+0x96>
 8008c42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c46:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c48:	d001      	beq.n	8008c4e <create_name+0x9a>
 8008c4a:	2306      	movs	r3, #6
 8008c4c:	e081      	b.n	8008d52 <create_name+0x19e>
			i = 8; ni = 11;				/* Enter file extension field */
 8008c4e:	2308      	movs	r3, #8
 8008c50:	61bb      	str	r3, [r7, #24]
 8008c52:	230b      	movs	r3, #11
 8008c54:	623b      	str	r3, [r7, #32]
			continue;
 8008c56:	e058      	b.n	8008d0a <create_name+0x156>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
 8008c58:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	da07      	bge.n	8008c70 <create_name+0xbc>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 8008c60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c68:	4a3c      	ldr	r2, [pc, #240]	@ (8008d5c <create_name+0x1a8>)
 8008c6a:	5cd3      	ldrb	r3, [r2, r3]
 8008c6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 8008c70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7ff f8de 	bl	8007e36 <dbc_1st>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d024      	beq.n	8008cca <create_name+0x116>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	1c5a      	adds	r2, r3, #1
 8008c84:	61fa      	str	r2, [r7, #28]
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	4413      	add	r3, r2
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8008c8e:	7bfb      	ldrb	r3, [r7, #15]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7ff f8e1 	bl	8007e58 <dbc_2nd>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d004      	beq.n	8008ca6 <create_name+0xf2>
 8008c9c:	6a3b      	ldr	r3, [r7, #32]
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	69ba      	ldr	r2, [r7, #24]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d301      	bcc.n	8008caa <create_name+0xf6>
 8008ca6:	2306      	movs	r3, #6
 8008ca8:	e053      	b.n	8008d52 <create_name+0x19e>
			sfn[i++] = c;
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	1c5a      	adds	r2, r3, #1
 8008cae:	61ba      	str	r2, [r7, #24]
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008cb8:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	1c5a      	adds	r2, r3, #1
 8008cbe:	61ba      	str	r2, [r7, #24]
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	7bfa      	ldrb	r2, [r7, #15]
 8008cc6:	701a      	strb	r2, [r3, #0]
 8008cc8:	e78a      	b.n	8008be0 <create_name+0x2c>
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008cca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cce:	4619      	mov	r1, r3
 8008cd0:	4823      	ldr	r0, [pc, #140]	@ (8008d60 <create_name+0x1ac>)
 8008cd2:	f00d f8d1 	bl	8015e78 <strchr>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d001      	beq.n	8008ce0 <create_name+0x12c>
 8008cdc:	2306      	movs	r3, #6
 8008cde:	e038      	b.n	8008d52 <create_name+0x19e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ce4:	2b60      	cmp	r3, #96	@ 0x60
 8008ce6:	d908      	bls.n	8008cfa <create_name+0x146>
 8008ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cec:	2b7a      	cmp	r3, #122	@ 0x7a
 8008cee:	d804      	bhi.n	8008cfa <create_name+0x146>
 8008cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cf4:	3b20      	subs	r3, #32
 8008cf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			sfn[i++] = c;
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	1c5a      	adds	r2, r3, #1
 8008cfe:	61ba      	str	r2, [r7, #24]
 8008d00:	693a      	ldr	r2, [r7, #16]
 8008d02:	4413      	add	r3, r2
 8008d04:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008d08:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 8008d0a:	e769      	b.n	8008be0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008d0c:	bf00      	nop
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	441a      	add	r2, r3
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d101      	bne.n	8008d22 <create_name+0x16e>
 8008d1e:	2306      	movs	r3, #6
 8008d20:	e017      	b.n	8008d52 <create_name+0x19e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	2be5      	cmp	r3, #229	@ 0xe5
 8008d28:	d102      	bne.n	8008d30 <create_name+0x17c>
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	2205      	movs	r2, #5
 8008d2e:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 8008d30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d34:	2b20      	cmp	r3, #32
 8008d36:	d905      	bls.n	8008d44 <create_name+0x190>
 8008d38:	697a      	ldr	r2, [r7, #20]
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	2b20      	cmp	r3, #32
 8008d42:	d801      	bhi.n	8008d48 <create_name+0x194>
 8008d44:	2204      	movs	r2, #4
 8008d46:	e000      	b.n	8008d4a <create_name+0x196>
 8008d48:	2200      	movs	r2, #0
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	330b      	adds	r3, #11
 8008d4e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008d50:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3728      	adds	r7, #40	@ 0x28
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	080175d0 	.word	0x080175d0
 8008d60:	0801752c 	.word	0x0801752c

08008d64 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 8008d74:	e002      	b.n	8008d7c <follow_path+0x18>
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	603b      	str	r3, [r7, #0]
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2b2f      	cmp	r3, #47	@ 0x2f
 8008d82:	d0f8      	beq.n	8008d76 <follow_path+0x12>
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	2b5c      	cmp	r3, #92	@ 0x5c
 8008d8a:	d0f4      	beq.n	8008d76 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	2b1f      	cmp	r3, #31
 8008d98:	d80a      	bhi.n	8008db0 <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2280      	movs	r2, #128	@ 0x80
 8008d9e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 8008da2:	2100      	movs	r1, #0
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f7ff fcc9 	bl	800873c <dir_sdi>
 8008daa:	4603      	mov	r3, r0
 8008dac:	75fb      	strb	r3, [r7, #23]
 8008dae:	e048      	b.n	8008e42 <follow_path+0xde>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008db0:	463b      	mov	r3, r7
 8008db2:	4619      	mov	r1, r3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7ff fefd 	bl	8008bb4 <create_name>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d139      	bne.n	8008e38 <follow_path+0xd4>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f7ff fe6e 	bl	8008aa6 <dir_find>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8008dd4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 8008dd6:	7dfb      	ldrb	r3, [r7, #23]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00a      	beq.n	8008df2 <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008ddc:	7dfb      	ldrb	r3, [r7, #23]
 8008dde:	2b04      	cmp	r3, #4
 8008de0:	d12c      	bne.n	8008e3c <follow_path+0xd8>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
 8008de4:	f003 0304 	and.w	r3, r3, #4
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d127      	bne.n	8008e3c <follow_path+0xd8>
 8008dec:	2305      	movs	r3, #5
 8008dee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008df0:	e024      	b.n	8008e3c <follow_path+0xd8>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
 8008df4:	f003 0304 	and.w	r3, r3, #4
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d121      	bne.n	8008e40 <follow_path+0xdc>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	799b      	ldrb	r3, [r3, #6]
 8008e00:	f003 0310 	and.w	r3, r3, #16
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d102      	bne.n	8008e0e <follow_path+0xaa>
				res = FR_NO_PATH; break;
 8008e08:	2305      	movs	r3, #5
 8008e0a:	75fb      	strb	r3, [r7, #23]
 8008e0c:	e019      	b.n	8008e42 <follow_path+0xde>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	693a      	ldr	r2, [r7, #16]
 8008e1a:	8992      	ldrh	r2, [r2, #12]
 8008e1c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e20:	fb00 f202 	mul.w	r2, r0, r2
 8008e24:	1a9b      	subs	r3, r3, r2
 8008e26:	440b      	add	r3, r1
 8008e28:	4619      	mov	r1, r3
 8008e2a:	6938      	ldr	r0, [r7, #16]
 8008e2c:	f7ff fdfc 	bl	8008a28 <ld_clust>
 8008e30:	4602      	mov	r2, r0
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008e36:	e7bb      	b.n	8008db0 <follow_path+0x4c>
			if (res != FR_OK) break;
 8008e38:	bf00      	nop
 8008e3a:	e002      	b.n	8008e42 <follow_path+0xde>
				break;
 8008e3c:	bf00      	nop
 8008e3e:	e000      	b.n	8008e42 <follow_path+0xde>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8008e40:	bf00      	nop
			}
		}
	}

	return res;
 8008e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3718      	adds	r7, #24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b08b      	sub	sp, #44	@ 0x2c
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 8008e54:	f04f 33ff 	mov.w	r3, #4294967295
 8008e58:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e62:	623b      	str	r3, [r7, #32]
	if (!tp) return vol;	/* Invalid path name? */
 8008e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <get_ldnumber+0x22>
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	e080      	b.n	8008f70 <get_ldnumber+0x124>
	do {					/* Find a colon in the path */
		tc = *tt++;
 8008e6e:	6a3b      	ldr	r3, [r7, #32]
 8008e70:	1c5a      	adds	r2, r3, #1
 8008e72:	623a      	str	r2, [r7, #32]
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	77fb      	strb	r3, [r7, #31]
	} while (!IsTerminator(tc) && tc != ':');
 8008e78:	7ffb      	ldrb	r3, [r7, #31]
 8008e7a:	2b20      	cmp	r3, #32
 8008e7c:	d902      	bls.n	8008e84 <get_ldnumber+0x38>
 8008e7e:	7ffb      	ldrb	r3, [r7, #31]
 8008e80:	2b3a      	cmp	r3, #58	@ 0x3a
 8008e82:	d1f4      	bne.n	8008e6e <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8008e84:	7ffb      	ldrb	r3, [r7, #31]
 8008e86:	2b3a      	cmp	r3, #58	@ 0x3a
 8008e88:	d11c      	bne.n	8008ec4 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8008e8a:	2302      	movs	r3, #2
 8008e8c:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8008e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	2b2f      	cmp	r3, #47	@ 0x2f
 8008e94:	d90c      	bls.n	8008eb0 <get_ldnumber+0x64>
 8008e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	2b39      	cmp	r3, #57	@ 0x39
 8008e9c:	d808      	bhi.n	8008eb0 <get_ldnumber+0x64>
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea0:	3302      	adds	r3, #2
 8008ea2:	6a3a      	ldr	r2, [r7, #32]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d103      	bne.n	8008eb0 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	3b30      	subs	r3, #48	@ 0x30
 8008eae:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	dc04      	bgt.n	8008ec0 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a3a      	ldr	r2, [r7, #32]
 8008ebe:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	e055      	b.n	8008f70 <get_ldnumber+0x124>
	}
#if FF_STR_VOLUME_ID == 2		/* Unix style volume ID is enabled */
	if (*tp == '/') {			/* Is there a volume ID? */
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	2b2f      	cmp	r3, #47	@ 0x2f
 8008eca:	d14e      	bne.n	8008f6a <get_ldnumber+0x11e>
		while (*(tp + 1) == '/') tp++;	/* Skip duplicated separator */
 8008ecc:	e002      	b.n	8008ed4 <get_ldnumber+0x88>
 8008ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	2b2f      	cmp	r3, #47	@ 0x2f
 8008edc:	d0f7      	beq.n	8008ece <get_ldnumber+0x82>
		i = 0;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	61bb      	str	r3, [r7, #24]
		do {
			tt = tp; sp = VolumeStr[i]; /* Path name and this string volume ID */
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee4:	623b      	str	r3, [r7, #32]
 8008ee6:	4a25      	ldr	r2, [pc, #148]	@ (8008f7c <get_ldnumber+0x130>)
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eee:	613b      	str	r3, [r7, #16]
			do {	/* Compare the volume ID with path name */
				c = *sp++; tc = *(++tt);
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	1c5a      	adds	r2, r3, #1
 8008ef4:	613a      	str	r2, [r7, #16]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	73fb      	strb	r3, [r7, #15]
 8008efa:	6a3b      	ldr	r3, [r7, #32]
 8008efc:	3301      	adds	r3, #1
 8008efe:	623b      	str	r3, [r7, #32]
 8008f00:	6a3b      	ldr	r3, [r7, #32]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	77fb      	strb	r3, [r7, #31]
				if (IsLower(c)) c -= 0x20;
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
 8008f08:	2b60      	cmp	r3, #96	@ 0x60
 8008f0a:	d905      	bls.n	8008f18 <get_ldnumber+0xcc>
 8008f0c:	7bfb      	ldrb	r3, [r7, #15]
 8008f0e:	2b7a      	cmp	r3, #122	@ 0x7a
 8008f10:	d802      	bhi.n	8008f18 <get_ldnumber+0xcc>
 8008f12:	7bfb      	ldrb	r3, [r7, #15]
 8008f14:	3b20      	subs	r3, #32
 8008f16:	73fb      	strb	r3, [r7, #15]
				if (IsLower(tc)) tc -= 0x20;
 8008f18:	7ffb      	ldrb	r3, [r7, #31]
 8008f1a:	2b60      	cmp	r3, #96	@ 0x60
 8008f1c:	d905      	bls.n	8008f2a <get_ldnumber+0xde>
 8008f1e:	7ffb      	ldrb	r3, [r7, #31]
 8008f20:	2b7a      	cmp	r3, #122	@ 0x7a
 8008f22:	d802      	bhi.n	8008f2a <get_ldnumber+0xde>
 8008f24:	7ffb      	ldrb	r3, [r7, #31]
 8008f26:	3b20      	subs	r3, #32
 8008f28:	77fb      	strb	r3, [r7, #31]
			} while (c && (TCHAR)c == tc);
 8008f2a:	7bfb      	ldrb	r3, [r7, #15]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d003      	beq.n	8008f38 <get_ldnumber+0xec>
 8008f30:	7bfa      	ldrb	r2, [r7, #15]
 8008f32:	7ffb      	ldrb	r3, [r7, #31]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d0db      	beq.n	8008ef0 <get_ldnumber+0xa4>
		} while ((c || (tc != '/' && !IsTerminator(tc))) && ++i < FF_VOLUMES);	/* Repeat for each ID until pattern match */
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d105      	bne.n	8008f4a <get_ldnumber+0xfe>
 8008f3e:	7ffb      	ldrb	r3, [r7, #31]
 8008f40:	2b2f      	cmp	r3, #47	@ 0x2f
 8008f42:	d008      	beq.n	8008f56 <get_ldnumber+0x10a>
 8008f44:	7ffb      	ldrb	r3, [r7, #31]
 8008f46:	2b20      	cmp	r3, #32
 8008f48:	d905      	bls.n	8008f56 <get_ldnumber+0x10a>
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	61bb      	str	r3, [r7, #24]
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	ddc5      	ble.n	8008ee2 <get_ldnumber+0x96>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	dc04      	bgt.n	8008f66 <get_ldnumber+0x11a>
			vol = i;		/* Drive number */
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a3a      	ldr	r2, [r7, #32]
 8008f64:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	e002      	b.n	8008f70 <get_ldnumber+0x124>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8008f6e:	697b      	ldr	r3, [r7, #20]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	372c      	adds	r7, #44	@ 0x2c
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	2000016c 	.word	0x2000016c

08008f80 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	711a      	strb	r2, [r3, #4]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f04f 32ff 	mov.w	r2, #4294967295
 8008f96:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8008f98:	6839      	ldr	r1, [r7, #0]
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f7fe ffa9 	bl	8007ef2 <move_window>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <check_fs+0x2a>
 8008fa6:	2304      	movs	r3, #4
 8008fa8:	e088      	b.n	80090bc <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	3334      	adds	r3, #52	@ 0x34
 8008fae:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7fe febc 	bl	8007d30 <ld_word>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008fc2:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 8008fc4:	7b7b      	ldrb	r3, [r7, #13]
 8008fc6:	2beb      	cmp	r3, #235	@ 0xeb
 8008fc8:	d005      	beq.n	8008fd6 <check_fs+0x56>
 8008fca:	7b7b      	ldrb	r3, [r7, #13]
 8008fcc:	2be9      	cmp	r3, #233	@ 0xe9
 8008fce:	d002      	beq.n	8008fd6 <check_fs+0x56>
 8008fd0:	7b7b      	ldrb	r3, [r7, #13]
 8008fd2:	2be8      	cmp	r3, #232	@ 0xe8
 8008fd4:	d16a      	bne.n	80090ac <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 8008fd6:	89fb      	ldrh	r3, [r7, #14]
 8008fd8:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d10c      	bne.n	8008ffa <check_fs+0x7a>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	3334      	adds	r3, #52	@ 0x34
 8008fe4:	3352      	adds	r3, #82	@ 0x52
 8008fe6:	2208      	movs	r2, #8
 8008fe8:	4936      	ldr	r1, [pc, #216]	@ (80090c4 <check_fs+0x144>)
 8008fea:	4618      	mov	r0, r3
 8008fec:	f00c ff2c 	bl	8015e48 <memcmp>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	e060      	b.n	80090bc <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	3334      	adds	r3, #52	@ 0x34
 8008ffe:	330b      	adds	r3, #11
 8009000:	4618      	mov	r0, r3
 8009002:	f7fe fe95 	bl	8007d30 <ld_word>
 8009006:	4603      	mov	r3, r0
 8009008:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009010:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 8009012:	897a      	ldrh	r2, [r7, #10]
 8009014:	897b      	ldrh	r3, [r7, #10]
 8009016:	3b01      	subs	r3, #1
 8009018:	4013      	ands	r3, r2
 800901a:	2b00      	cmp	r3, #0
 800901c:	d146      	bne.n	80090ac <check_fs+0x12c>
 800901e:	897b      	ldrh	r3, [r7, #10]
 8009020:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009024:	d342      	bcc.n	80090ac <check_fs+0x12c>
 8009026:	897b      	ldrh	r3, [r7, #10]
 8009028:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800902c:	d83e      	bhi.n	80090ac <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800902e:	7b7b      	ldrb	r3, [r7, #13]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d03b      	beq.n	80090ac <check_fs+0x12c>
 8009034:	7b7a      	ldrb	r2, [r7, #13]
 8009036:	7b7b      	ldrb	r3, [r7, #13]
 8009038:	3b01      	subs	r3, #1
 800903a:	4013      	ands	r3, r2
 800903c:	2b00      	cmp	r3, #0
 800903e:	d135      	bne.n	80090ac <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	3334      	adds	r3, #52	@ 0x34
 8009044:	330e      	adds	r3, #14
 8009046:	4618      	mov	r0, r3
 8009048:	f7fe fe72 	bl	8007d30 <ld_word>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	d02c      	beq.n	80090ac <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009058:	3b01      	subs	r3, #1
 800905a:	2b01      	cmp	r3, #1
 800905c:	d826      	bhi.n	80090ac <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	3334      	adds	r3, #52	@ 0x34
 8009062:	3311      	adds	r3, #17
 8009064:	4618      	mov	r0, r3
 8009066:	f7fe fe63 	bl	8007d30 <ld_word>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d01d      	beq.n	80090ac <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	3334      	adds	r3, #52	@ 0x34
 8009074:	3313      	adds	r3, #19
 8009076:	4618      	mov	r0, r3
 8009078:	f7fe fe5a 	bl	8007d30 <ld_word>
 800907c:	4603      	mov	r3, r0
 800907e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009080:	d809      	bhi.n	8009096 <check_fs+0x116>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	3334      	adds	r3, #52	@ 0x34
 8009086:	3320      	adds	r3, #32
 8009088:	4618      	mov	r0, r3
 800908a:	f7fe fe6a 	bl	8007d62 <ld_dword>
 800908e:	4603      	mov	r3, r0
 8009090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009094:	d30a      	bcc.n	80090ac <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	3334      	adds	r3, #52	@ 0x34
 800909a:	3316      	adds	r3, #22
 800909c:	4618      	mov	r0, r3
 800909e:	f7fe fe47 	bl	8007d30 <ld_word>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 80090a8:	2300      	movs	r3, #0
 80090aa:	e007      	b.n	80090bc <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 80090ac:	89fb      	ldrh	r3, [r7, #14]
 80090ae:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d101      	bne.n	80090ba <check_fs+0x13a>
 80090b6:	2302      	movs	r3, #2
 80090b8:	e000      	b.n	80090bc <check_fs+0x13c>
 80090ba:	2303      	movs	r3, #3
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	0801753c 	.word	0x0801753c

080090c8 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b088      	sub	sp, #32
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 80090d2:	2100      	movs	r1, #0
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f7ff ff53 	bl	8008f80 <check_fs>
 80090da:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d007      	beq.n	80090f2 <find_volume+0x2a>
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d802      	bhi.n	80090ee <find_volume+0x26>
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d101      	bne.n	80090f2 <find_volume+0x2a>
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	e045      	b.n	800917e <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 80090f2:	2300      	movs	r3, #0
 80090f4:	61fb      	str	r3, [r7, #28]
 80090f6:	e014      	b.n	8009122 <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	011b      	lsls	r3, r3, #4
 8009102:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 8009106:	4413      	add	r3, r2
 8009108:	4618      	mov	r0, r3
 800910a:	f7fe fe2a 	bl	8007d62 <ld_dword>
 800910e:	4602      	mov	r2, r0
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	3320      	adds	r3, #32
 8009116:	443b      	add	r3, r7
 8009118:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	3301      	adds	r3, #1
 8009120:	61fb      	str	r3, [r7, #28]
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	2b03      	cmp	r3, #3
 8009126:	d9e7      	bls.n	80090f8 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d002      	beq.n	8009134 <find_volume+0x6c>
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	3b01      	subs	r3, #1
 8009132:	e000      	b.n	8009136 <find_volume+0x6e>
 8009134:	2300      	movs	r3, #0
 8009136:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	3320      	adds	r3, #32
 800913e:	443b      	add	r3, r7
 8009140:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00b      	beq.n	8009160 <find_volume+0x98>
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	3320      	adds	r3, #32
 800914e:	443b      	add	r3, r7
 8009150:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8009154:	4619      	mov	r1, r3
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f7ff ff12 	bl	8008f80 <check_fs>
 800915c:	4603      	mov	r3, r0
 800915e:	e000      	b.n	8009162 <find_volume+0x9a>
 8009160:	2303      	movs	r3, #3
 8009162:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d108      	bne.n	800917c <find_volume+0xb4>
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	2b01      	cmp	r3, #1
 800916e:	d905      	bls.n	800917c <find_volume+0xb4>
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	3301      	adds	r3, #1
 8009174:	61fb      	str	r3, [r7, #28]
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	2b03      	cmp	r3, #3
 800917a:	d9dd      	bls.n	8009138 <find_volume+0x70>
	return fmt;
 800917c:	69bb      	ldr	r3, [r7, #24]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3720      	adds	r7, #32
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
	...

08009188 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b090      	sub	sp, #64	@ 0x40
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	4613      	mov	r3, r2
 8009194:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2200      	movs	r2, #0
 800919a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f7ff fe55 	bl	8008e4c <get_ldnumber>
 80091a2:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 80091a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	da01      	bge.n	80091ae <mount_volume+0x26>
 80091aa:	230b      	movs	r3, #11
 80091ac:	e207      	b.n	80095be <mount_volume+0x436>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 80091ae:	4aa2      	ldr	r2, [pc, #648]	@ (8009438 <mount_volume+0x2b0>)
 80091b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 80091b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d101      	bne.n	80091c2 <mount_volume+0x3a>
 80091be:	230c      	movs	r3, #12
 80091c0:	e1fd      	b.n	80095be <mount_volume+0x436>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80091c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80091c8:	79fb      	ldrb	r3, [r7, #7]
 80091ca:	f023 0301 	bic.w	r3, r3, #1
 80091ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 80091d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d01a      	beq.n	800920e <mount_volume+0x86>
		stat = disk_status(fs->pdrv);
 80091d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091da:	785b      	ldrb	r3, [r3, #1]
 80091dc:	4618      	mov	r0, r3
 80091de:	f7fe fc6f 	bl	8007ac0 <disk_status>
 80091e2:	4603      	mov	r3, r0
 80091e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80091e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091ec:	f003 0301 	and.w	r3, r3, #1
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d10c      	bne.n	800920e <mount_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80091f4:	79fb      	ldrb	r3, [r7, #7]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d007      	beq.n	800920a <mount_volume+0x82>
 80091fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091fe:	f003 0304 	and.w	r3, r3, #4
 8009202:	2b00      	cmp	r3, #0
 8009204:	d001      	beq.n	800920a <mount_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009206:	230a      	movs	r3, #10
 8009208:	e1d9      	b.n	80095be <mount_volume+0x436>
			}
			return FR_OK;				/* The filesystem object is already valid */
 800920a:	2300      	movs	r3, #0
 800920c:	e1d7      	b.n	80095be <mount_volume+0x436>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 800920e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009210:	2200      	movs	r2, #0
 8009212:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8009214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009216:	785b      	ldrb	r3, [r3, #1]
 8009218:	4618      	mov	r0, r3
 800921a:	f7fe fc79 	bl	8007b10 <disk_initialize>
 800921e:	4603      	mov	r3, r0
 8009220:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009224:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009228:	f003 0301 	and.w	r3, r3, #1
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <mount_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009230:	2303      	movs	r3, #3
 8009232:	e1c4      	b.n	80095be <mount_volume+0x436>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009234:	79fb      	ldrb	r3, [r7, #7]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d007      	beq.n	800924a <mount_volume+0xc2>
 800923a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800923e:	f003 0304 	and.w	r3, r3, #4
 8009242:	2b00      	cmp	r3, #0
 8009244:	d001      	beq.n	800924a <mount_volume+0xc2>
		return FR_WRITE_PROTECTED;
 8009246:	230a      	movs	r3, #10
 8009248:	e1b9      	b.n	80095be <mount_volume+0x436>
	}
#if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800924a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800924c:	7858      	ldrb	r0, [r3, #1]
 800924e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009250:	330c      	adds	r3, #12
 8009252:	461a      	mov	r2, r3
 8009254:	2102      	movs	r1, #2
 8009256:	f7fe fce9 	bl	8007c2c <disk_ioctl>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d001      	beq.n	8009264 <mount_volume+0xdc>
 8009260:	2301      	movs	r3, #1
 8009262:	e1ac      	b.n	80095be <mount_volume+0x436>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009266:	899b      	ldrh	r3, [r3, #12]
 8009268:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800926c:	d80d      	bhi.n	800928a <mount_volume+0x102>
 800926e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009270:	899b      	ldrh	r3, [r3, #12]
 8009272:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009276:	d308      	bcc.n	800928a <mount_volume+0x102>
 8009278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800927a:	899b      	ldrh	r3, [r3, #12]
 800927c:	461a      	mov	r2, r3
 800927e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009280:	899b      	ldrh	r3, [r3, #12]
 8009282:	3b01      	subs	r3, #1
 8009284:	4013      	ands	r3, r2
 8009286:	2b00      	cmp	r3, #0
 8009288:	d001      	beq.n	800928e <mount_volume+0x106>
 800928a:	2301      	movs	r3, #1
 800928c:	e197      	b.n	80095be <mount_volume+0x436>
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 800928e:	2100      	movs	r1, #0
 8009290:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009292:	f7ff ff19 	bl	80090c8 <find_volume>
 8009296:	6338      	str	r0, [r7, #48]	@ 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 8009298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929a:	2b04      	cmp	r3, #4
 800929c:	d101      	bne.n	80092a2 <mount_volume+0x11a>
 800929e:	2301      	movs	r3, #1
 80092a0:	e18d      	b.n	80095be <mount_volume+0x436>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80092a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d901      	bls.n	80092ac <mount_volume+0x124>
 80092a8:	230d      	movs	r3, #13
 80092aa:	e188      	b.n	80095be <mount_volume+0x436>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 80092ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092b0:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80092b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b4:	3334      	adds	r3, #52	@ 0x34
 80092b6:	330b      	adds	r3, #11
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7fe fd39 	bl	8007d30 <ld_word>
 80092be:	4603      	mov	r3, r0
 80092c0:	461a      	mov	r2, r3
 80092c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c4:	899b      	ldrh	r3, [r3, #12]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d001      	beq.n	80092ce <mount_volume+0x146>
 80092ca:	230d      	movs	r3, #13
 80092cc:	e177      	b.n	80095be <mount_volume+0x436>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80092ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d0:	3334      	adds	r3, #52	@ 0x34
 80092d2:	3316      	adds	r3, #22
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7fe fd2b 	bl	8007d30 <ld_word>
 80092da:	4603      	mov	r3, r0
 80092dc:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80092de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d106      	bne.n	80092f2 <mount_volume+0x16a>
 80092e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e6:	3334      	adds	r3, #52	@ 0x34
 80092e8:	3324      	adds	r3, #36	@ 0x24
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fe fd39 	bl	8007d62 <ld_dword>
 80092f0:	63b8      	str	r0, [r7, #56]	@ 0x38
		fs->fsize = fasize;
 80092f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092f6:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80092f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092fa:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80092fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009300:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009304:	78db      	ldrb	r3, [r3, #3]
 8009306:	2b01      	cmp	r3, #1
 8009308:	d005      	beq.n	8009316 <mount_volume+0x18e>
 800930a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800930c:	78db      	ldrb	r3, [r3, #3]
 800930e:	2b02      	cmp	r3, #2
 8009310:	d001      	beq.n	8009316 <mount_volume+0x18e>
 8009312:	230d      	movs	r3, #13
 8009314:	e153      	b.n	80095be <mount_volume+0x436>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009318:	78db      	ldrb	r3, [r3, #3]
 800931a:	461a      	mov	r2, r3
 800931c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800931e:	fb02 f303 	mul.w	r3, r2, r3
 8009322:	63bb      	str	r3, [r7, #56]	@ 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009326:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800932a:	461a      	mov	r2, r3
 800932c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800932e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009332:	895b      	ldrh	r3, [r3, #10]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d008      	beq.n	800934a <mount_volume+0x1c2>
 8009338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800933a:	895b      	ldrh	r3, [r3, #10]
 800933c:	461a      	mov	r2, r3
 800933e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009340:	895b      	ldrh	r3, [r3, #10]
 8009342:	3b01      	subs	r3, #1
 8009344:	4013      	ands	r3, r2
 8009346:	2b00      	cmp	r3, #0
 8009348:	d001      	beq.n	800934e <mount_volume+0x1c6>
 800934a:	230d      	movs	r3, #13
 800934c:	e137      	b.n	80095be <mount_volume+0x436>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800934e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009350:	3334      	adds	r3, #52	@ 0x34
 8009352:	3311      	adds	r3, #17
 8009354:	4618      	mov	r0, r3
 8009356:	f7fe fceb 	bl	8007d30 <ld_word>
 800935a:	4603      	mov	r3, r0
 800935c:	461a      	mov	r2, r3
 800935e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009360:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009364:	891b      	ldrh	r3, [r3, #8]
 8009366:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009368:	8992      	ldrh	r2, [r2, #12]
 800936a:	0952      	lsrs	r2, r2, #5
 800936c:	b292      	uxth	r2, r2
 800936e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009372:	fb01 f202 	mul.w	r2, r1, r2
 8009376:	1a9b      	subs	r3, r3, r2
 8009378:	b29b      	uxth	r3, r3
 800937a:	2b00      	cmp	r3, #0
 800937c:	d001      	beq.n	8009382 <mount_volume+0x1fa>
 800937e:	230d      	movs	r3, #13
 8009380:	e11d      	b.n	80095be <mount_volume+0x436>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009384:	3334      	adds	r3, #52	@ 0x34
 8009386:	3313      	adds	r3, #19
 8009388:	4618      	mov	r0, r3
 800938a:	f7fe fcd1 	bl	8007d30 <ld_word>
 800938e:	4603      	mov	r3, r0
 8009390:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009394:	2b00      	cmp	r3, #0
 8009396:	d106      	bne.n	80093a6 <mount_volume+0x21e>
 8009398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800939a:	3334      	adds	r3, #52	@ 0x34
 800939c:	3320      	adds	r3, #32
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fe fcdf 	bl	8007d62 <ld_dword>
 80093a4:	63f8      	str	r0, [r7, #60]	@ 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80093a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a8:	3334      	adds	r3, #52	@ 0x34
 80093aa:	330e      	adds	r3, #14
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7fe fcbf 	bl	8007d30 <ld_word>
 80093b2:	4603      	mov	r3, r0
 80093b4:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80093b6:	8bfb      	ldrh	r3, [r7, #30]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d101      	bne.n	80093c0 <mount_volume+0x238>
 80093bc:	230d      	movs	r3, #13
 80093be:	e0fe      	b.n	80095be <mount_volume+0x436>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80093c0:	8bfa      	ldrh	r2, [r7, #30]
 80093c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c4:	4413      	add	r3, r2
 80093c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093c8:	8911      	ldrh	r1, [r2, #8]
 80093ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093cc:	8992      	ldrh	r2, [r2, #12]
 80093ce:	0952      	lsrs	r2, r2, #5
 80093d0:	b292      	uxth	r2, r2
 80093d2:	fbb1 f2f2 	udiv	r2, r1, r2
 80093d6:	b292      	uxth	r2, r2
 80093d8:	4413      	add	r3, r2
 80093da:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80093dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d201      	bcs.n	80093e8 <mount_volume+0x260>
 80093e4:	230d      	movs	r3, #13
 80093e6:	e0ea      	b.n	80095be <mount_volume+0x436>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80093e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	1ad3      	subs	r3, r2, r3
 80093ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093f0:	8952      	ldrh	r2, [r2, #10]
 80093f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80093f6:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d101      	bne.n	8009402 <mount_volume+0x27a>
 80093fe:	230d      	movs	r3, #13
 8009400:	e0dd      	b.n	80095be <mount_volume+0x436>
		fmt = 0;
 8009402:	2300      	movs	r3, #0
 8009404:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	4a0c      	ldr	r2, [pc, #48]	@ (800943c <mount_volume+0x2b4>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d801      	bhi.n	8009412 <mount_volume+0x28a>
 800940e:	2303      	movs	r3, #3
 8009410:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009418:	4293      	cmp	r3, r2
 800941a:	d801      	bhi.n	8009420 <mount_volume+0x298>
 800941c:	2302      	movs	r3, #2
 800941e:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009426:	4293      	cmp	r3, r2
 8009428:	d801      	bhi.n	800942e <mount_volume+0x2a6>
 800942a:	2301      	movs	r3, #1
 800942c:	633b      	str	r3, [r7, #48]	@ 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 800942e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009430:	2b00      	cmp	r3, #0
 8009432:	d105      	bne.n	8009440 <mount_volume+0x2b8>
 8009434:	230d      	movs	r3, #13
 8009436:	e0c2      	b.n	80095be <mount_volume+0x436>
 8009438:	20005cfc 	.word	0x20005cfc
 800943c:	0ffffff5 	.word	0x0ffffff5

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	1c9a      	adds	r2, r3, #2
 8009444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009446:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800944a:	6a3a      	ldr	r2, [r7, #32]
 800944c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800944e:	8bfa      	ldrh	r2, [r7, #30]
 8009450:	6a3b      	ldr	r3, [r7, #32]
 8009452:	441a      	add	r2, r3
 8009454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009456:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009458:	6a3a      	ldr	r2, [r7, #32]
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	441a      	add	r2, r3
 800945e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009460:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8009462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009464:	2b03      	cmp	r3, #3
 8009466:	d11e      	bne.n	80094a6 <mount_volume+0x31e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946a:	3334      	adds	r3, #52	@ 0x34
 800946c:	332a      	adds	r3, #42	@ 0x2a
 800946e:	4618      	mov	r0, r3
 8009470:	f7fe fc5e 	bl	8007d30 <ld_word>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d001      	beq.n	800947e <mount_volume+0x2f6>
 800947a:	230d      	movs	r3, #13
 800947c:	e09f      	b.n	80095be <mount_volume+0x436>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800947e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009480:	891b      	ldrh	r3, [r3, #8]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d001      	beq.n	800948a <mount_volume+0x302>
 8009486:	230d      	movs	r3, #13
 8009488:	e099      	b.n	80095be <mount_volume+0x436>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800948a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800948c:	3334      	adds	r3, #52	@ 0x34
 800948e:	332c      	adds	r3, #44	@ 0x2c
 8009490:	4618      	mov	r0, r3
 8009492:	f7fe fc66 	bl	8007d62 <ld_dword>
 8009496:	4602      	mov	r2, r0
 8009498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800949a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800949c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80094a4:	e01e      	b.n	80094e4 <mount_volume+0x35c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80094a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a8:	891b      	ldrh	r3, [r3, #8]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d101      	bne.n	80094b2 <mount_volume+0x32a>
 80094ae:	230d      	movs	r3, #13
 80094b0:	e085      	b.n	80095be <mount_volume+0x436>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80094b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b8:	441a      	add	r2, r3
 80094ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094bc:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80094be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c0:	2b02      	cmp	r3, #2
 80094c2:	d103      	bne.n	80094cc <mount_volume+0x344>
 80094c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c6:	699b      	ldr	r3, [r3, #24]
 80094c8:	005b      	lsls	r3, r3, #1
 80094ca:	e00a      	b.n	80094e2 <mount_volume+0x35a>
 80094cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ce:	699a      	ldr	r2, [r3, #24]
 80094d0:	4613      	mov	r3, r2
 80094d2:	005b      	lsls	r3, r3, #1
 80094d4:	4413      	add	r3, r2
 80094d6:	085a      	lsrs	r2, r3, #1
 80094d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094da:	699b      	ldr	r3, [r3, #24]
 80094dc:	f003 0301 	and.w	r3, r3, #1
 80094e0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80094e2:	637b      	str	r3, [r7, #52]	@ 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80094e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e6:	69da      	ldr	r2, [r3, #28]
 80094e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ea:	899b      	ldrh	r3, [r3, #12]
 80094ec:	4619      	mov	r1, r3
 80094ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094f0:	440b      	add	r3, r1
 80094f2:	3b01      	subs	r3, #1
 80094f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094f6:	8989      	ldrh	r1, [r1, #12]
 80094f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d201      	bcs.n	8009504 <mount_volume+0x37c>
 8009500:	230d      	movs	r3, #13
 8009502:	e05c      	b.n	80095be <mount_volume+0x436>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009506:	f04f 32ff 	mov.w	r2, #4294967295
 800950a:	615a      	str	r2, [r3, #20]
 800950c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800950e:	695a      	ldr	r2, [r3, #20]
 8009510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009512:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009516:	2280      	movs	r2, #128	@ 0x80
 8009518:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800951a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951c:	2b03      	cmp	r3, #3
 800951e:	d13f      	bne.n	80095a0 <mount_volume+0x418>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009522:	3334      	adds	r3, #52	@ 0x34
 8009524:	3330      	adds	r3, #48	@ 0x30
 8009526:	4618      	mov	r0, r3
 8009528:	f7fe fc02 	bl	8007d30 <ld_word>
 800952c:	4603      	mov	r3, r0
 800952e:	2b01      	cmp	r3, #1
 8009530:	d136      	bne.n	80095a0 <mount_volume+0x418>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009532:	6a3b      	ldr	r3, [r7, #32]
 8009534:	3301      	adds	r3, #1
 8009536:	4619      	mov	r1, r3
 8009538:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800953a:	f7fe fcda 	bl	8007ef2 <move_window>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d12d      	bne.n	80095a0 <mount_volume+0x418>
		{
			fs->fsi_flag = 0;
 8009544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009546:	2200      	movs	r2, #0
 8009548:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800954a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800954c:	3334      	adds	r3, #52	@ 0x34
 800954e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009552:	4618      	mov	r0, r3
 8009554:	f7fe fbec 	bl	8007d30 <ld_word>
 8009558:	4603      	mov	r3, r0
 800955a:	461a      	mov	r2, r3
 800955c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009560:	429a      	cmp	r2, r3
 8009562:	d11d      	bne.n	80095a0 <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009566:	3334      	adds	r3, #52	@ 0x34
 8009568:	4618      	mov	r0, r3
 800956a:	f7fe fbfa 	bl	8007d62 <ld_dword>
 800956e:	4603      	mov	r3, r0
 8009570:	4a15      	ldr	r2, [pc, #84]	@ (80095c8 <mount_volume+0x440>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d114      	bne.n	80095a0 <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009578:	3334      	adds	r3, #52	@ 0x34
 800957a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800957e:	4618      	mov	r0, r3
 8009580:	f7fe fbef 	bl	8007d62 <ld_dword>
 8009584:	4603      	mov	r3, r0
 8009586:	4a11      	ldr	r2, [pc, #68]	@ (80095cc <mount_volume+0x444>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d109      	bne.n	80095a0 <mount_volume+0x418>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800958c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800958e:	3334      	adds	r3, #52	@ 0x34
 8009590:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009594:	4618      	mov	r0, r3
 8009596:	f7fe fbe4 	bl	8007d62 <ld_dword>
 800959a:	4602      	mov	r2, r0
 800959c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800959e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 80095a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 80095a8:	4b09      	ldr	r3, [pc, #36]	@ (80095d0 <mount_volume+0x448>)
 80095aa:	881b      	ldrh	r3, [r3, #0]
 80095ac:	3301      	adds	r3, #1
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	4b07      	ldr	r3, [pc, #28]	@ (80095d0 <mount_volume+0x448>)
 80095b2:	801a      	strh	r2, [r3, #0]
 80095b4:	4b06      	ldr	r3, [pc, #24]	@ (80095d0 <mount_volume+0x448>)
 80095b6:	881a      	ldrh	r2, [r3, #0]
 80095b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ba:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3740      	adds	r7, #64	@ 0x40
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	41615252 	.word	0x41615252
 80095cc:	61417272 	.word	0x61417272
 80095d0:	20005d04 	.word	0x20005d04

080095d4 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80095de:	2309      	movs	r3, #9
 80095e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d01c      	beq.n	8009622 <validate+0x4e>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d018      	beq.n	8009622 <validate+0x4e>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d013      	beq.n	8009622 <validate+0x4e>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	889a      	ldrh	r2, [r3, #4]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	88db      	ldrh	r3, [r3, #6]
 8009604:	429a      	cmp	r2, r3
 8009606:	d10c      	bne.n	8009622 <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	785b      	ldrb	r3, [r3, #1]
 800960e:	4618      	mov	r0, r3
 8009610:	f7fe fa56 	bl	8007ac0 <disk_status>
 8009614:	4603      	mov	r3, r0
 8009616:	f003 0301 	and.w	r3, r3, #1
 800961a:	2b00      	cmp	r3, #0
 800961c:	d101      	bne.n	8009622 <validate+0x4e>
			res = FR_OK;
 800961e:	2300      	movs	r3, #0
 8009620:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d102      	bne.n	800962e <validate+0x5a>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	e000      	b.n	8009630 <validate+0x5c>
 800962e:	2300      	movs	r3, #0
 8009630:	683a      	ldr	r2, [r7, #0]
 8009632:	6013      	str	r3, [r2, #0]
	return res;
 8009634:	7bfb      	ldrb	r3, [r7, #15]
}
 8009636:	4618      	mov	r0, r3
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
	...

08009640 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b088      	sub	sp, #32
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	4613      	mov	r3, r2
 800964c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 8009652:	f107 0310 	add.w	r3, r7, #16
 8009656:	4618      	mov	r0, r3
 8009658:	f7ff fbf8 	bl	8008e4c <get_ldnumber>
 800965c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	2b00      	cmp	r3, #0
 8009662:	da01      	bge.n	8009668 <f_mount+0x28>
 8009664:	230b      	movs	r3, #11
 8009666:	e02e      	b.n	80096c6 <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 8009668:	4a19      	ldr	r2, [pc, #100]	@ (80096d0 <f_mount+0x90>)
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009670:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d007      	beq.n	8009688 <f_mount+0x48>
		FatFs[vol] = 0;
 8009678:	4a15      	ldr	r2, [pc, #84]	@ (80096d0 <f_mount+0x90>)
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	2100      	movs	r1, #0
 800967e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	2200      	movs	r2, #0
 8009686:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00b      	beq.n	80096a6 <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	69fa      	ldr	r2, [r7, #28]
 8009692:	b2d2      	uxtb	r2, r2
 8009694:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	490c      	ldr	r1, [pc, #48]	@ (80096d0 <f_mount+0x90>)
 80096a0:	69fb      	ldr	r3, [r7, #28]
 80096a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 80096a6:	79fb      	ldrb	r3, [r7, #7]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d101      	bne.n	80096b0 <f_mount+0x70>
 80096ac:	2300      	movs	r3, #0
 80096ae:	e00a      	b.n	80096c6 <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 80096b0:	f107 010c 	add.w	r1, r7, #12
 80096b4:	f107 0308 	add.w	r3, r7, #8
 80096b8:	2200      	movs	r2, #0
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7ff fd64 	bl	8009188 <mount_volume>
 80096c0:	4603      	mov	r3, r0
 80096c2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80096c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3720      	adds	r7, #32
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	20005cfc 	.word	0x20005cfc

080096d4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b098      	sub	sp, #96	@ 0x60
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	4613      	mov	r3, r2
 80096e0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <f_open+0x18>
 80096e8:	2309      	movs	r3, #9
 80096ea:	e184      	b.n	80099f6 <f_open+0x322>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 80096ec:	79fb      	ldrb	r3, [r7, #7]
 80096ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80096f2:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 80096f4:	79fa      	ldrb	r2, [r7, #7]
 80096f6:	f107 0114 	add.w	r1, r7, #20
 80096fa:	f107 0308 	add.w	r3, r7, #8
 80096fe:	4618      	mov	r0, r3
 8009700:	f7ff fd42 	bl	8009188 <mount_volume>
 8009704:	4603      	mov	r3, r0
 8009706:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800970a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800970e:	2b00      	cmp	r3, #0
 8009710:	f040 8168 	bne.w	80099e4 <f_open+0x310>
		dj.obj.fs = fs;
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	f107 0318 	add.w	r3, r7, #24
 800971e:	4611      	mov	r1, r2
 8009720:	4618      	mov	r0, r3
 8009722:	f7ff fb1f 	bl	8008d64 <follow_path>
 8009726:	4603      	mov	r3, r0
 8009728:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 800972c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009730:	2b00      	cmp	r3, #0
 8009732:	d107      	bne.n	8009744 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009734:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009738:	b25b      	sxtb	r3, r3
 800973a:	2b00      	cmp	r3, #0
 800973c:	da02      	bge.n	8009744 <f_open+0x70>
				res = FR_INVALID_NAME;
 800973e:	2306      	movs	r3, #6
 8009740:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009744:	79fb      	ldrb	r3, [r7, #7]
 8009746:	f003 031c 	and.w	r3, r3, #28
 800974a:	2b00      	cmp	r3, #0
 800974c:	d077      	beq.n	800983e <f_open+0x16a>
			if (res != FR_OK) {					/* No file, create new */
 800974e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009752:	2b00      	cmp	r3, #0
 8009754:	d010      	beq.n	8009778 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009756:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800975a:	2b04      	cmp	r3, #4
 800975c:	d107      	bne.n	800976e <f_open+0x9a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800975e:	f107 0318 	add.w	r3, r7, #24
 8009762:	4618      	mov	r0, r3
 8009764:	f7ff f9f4 	bl	8008b50 <dir_register>
 8009768:	4603      	mov	r3, r0
 800976a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800976e:	79fb      	ldrb	r3, [r7, #7]
 8009770:	f043 0308 	orr.w	r3, r3, #8
 8009774:	71fb      	strb	r3, [r7, #7]
 8009776:	e010      	b.n	800979a <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009778:	7fbb      	ldrb	r3, [r7, #30]
 800977a:	f003 0311 	and.w	r3, r3, #17
 800977e:	2b00      	cmp	r3, #0
 8009780:	d003      	beq.n	800978a <f_open+0xb6>
					res = FR_DENIED;
 8009782:	2307      	movs	r3, #7
 8009784:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009788:	e007      	b.n	800979a <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800978a:	79fb      	ldrb	r3, [r7, #7]
 800978c:	f003 0304 	and.w	r3, r3, #4
 8009790:	2b00      	cmp	r3, #0
 8009792:	d002      	beq.n	800979a <f_open+0xc6>
 8009794:	2308      	movs	r3, #8
 8009796:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800979a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d167      	bne.n	8009872 <f_open+0x19e>
 80097a2:	79fb      	ldrb	r3, [r7, #7]
 80097a4:	f003 0308 	and.w	r3, r3, #8
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d062      	beq.n	8009872 <f_open+0x19e>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 80097ac:	4b94      	ldr	r3, [pc, #592]	@ (8009a00 <f_open+0x32c>)
 80097ae:	653b      	str	r3, [r7, #80]	@ 0x50
					st_dword(dj.dir + DIR_CrtTime, tm);
 80097b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097b2:	330e      	adds	r3, #14
 80097b4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7fe fb11 	bl	8007dde <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 80097bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097be:	3316      	adds	r3, #22
 80097c0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7fe fb0b 	bl	8007dde <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80097cc:	4611      	mov	r1, r2
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7ff f92a 	bl	8008a28 <ld_clust>
 80097d4:	64f8      	str	r0, [r7, #76]	@ 0x4c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80097d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097d8:	330b      	adds	r3, #11
 80097da:	2220      	movs	r2, #32
 80097dc:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80097e2:	2200      	movs	r2, #0
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7ff f93e 	bl	8008a66 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80097ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097ec:	331c      	adds	r3, #28
 80097ee:	2100      	movs	r1, #0
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fe faf4 	bl	8007dde <st_dword>
					fs->wflag = 1;
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	2201      	movs	r2, #1
 80097fa:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 80097fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d037      	beq.n	8009872 <f_open+0x19e>
						sc = fs->winsect;
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009806:	64bb      	str	r3, [r7, #72]	@ 0x48
						res = remove_chain(&dj.obj, cl, 0);
 8009808:	f107 0318 	add.w	r3, r7, #24
 800980c:	2200      	movs	r2, #0
 800980e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009810:	4618      	mov	r0, r3
 8009812:	f7fe fe15 	bl	8008440 <remove_chain>
 8009816:	4603      	mov	r3, r0
 8009818:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800981c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009820:	2b00      	cmp	r3, #0
 8009822:	d126      	bne.n	8009872 <f_open+0x19e>
							res = move_window(fs, sc);
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009828:	4618      	mov	r0, r3
 800982a:	f7fe fb62 	bl	8007ef2 <move_window>
 800982e:	4603      	mov	r3, r0
 8009830:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009838:	3a01      	subs	r2, #1
 800983a:	611a      	str	r2, [r3, #16]
 800983c:	e019      	b.n	8009872 <f_open+0x19e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 800983e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009842:	2b00      	cmp	r3, #0
 8009844:	d115      	bne.n	8009872 <f_open+0x19e>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8009846:	7fbb      	ldrb	r3, [r7, #30]
 8009848:	f003 0310 	and.w	r3, r3, #16
 800984c:	2b00      	cmp	r3, #0
 800984e:	d003      	beq.n	8009858 <f_open+0x184>
					res = FR_NO_FILE;
 8009850:	2304      	movs	r3, #4
 8009852:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009856:	e00c      	b.n	8009872 <f_open+0x19e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8009858:	79fb      	ldrb	r3, [r7, #7]
 800985a:	f003 0302 	and.w	r3, r3, #2
 800985e:	2b00      	cmp	r3, #0
 8009860:	d007      	beq.n	8009872 <f_open+0x19e>
 8009862:	7fbb      	ldrb	r3, [r7, #30]
 8009864:	f003 0301 	and.w	r3, r3, #1
 8009868:	2b00      	cmp	r3, #0
 800986a:	d002      	beq.n	8009872 <f_open+0x19e>
						res = FR_DENIED;
 800986c:	2307      	movs	r3, #7
 800986e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009872:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10f      	bne.n	800989a <f_open+0x1c6>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800987a:	79fb      	ldrb	r3, [r7, #7]
 800987c:	f003 0308 	and.w	r3, r3, #8
 8009880:	2b00      	cmp	r3, #0
 8009882:	d003      	beq.n	800988c <f_open+0x1b8>
 8009884:	79fb      	ldrb	r3, [r7, #7]
 8009886:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800988a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8009894:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 800989a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f040 80a0 	bne.w	80099e4 <f_open+0x310>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80098a8:	4611      	mov	r1, r2
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7ff f8bc 	bl	8008a28 <ld_clust>
 80098b0:	4602      	mov	r2, r0
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80098b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098b8:	331c      	adds	r3, #28
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7fe fa51 	bl	8007d62 <ld_dword>
 80098c0:	4602      	mov	r2, r0
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 80098c6:	697a      	ldr	r2, [r7, #20]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	88da      	ldrh	r2, [r3, #6]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	79fa      	ldrb	r2, [r7, #7]
 80098d8:	741a      	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2200      	movs	r2, #0
 80098de:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2200      	movs	r2, #0
 80098e4:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2200      	movs	r2, #0
 80098ea:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	3328      	adds	r3, #40	@ 0x28
 80098f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80098f4:	2100      	movs	r1, #0
 80098f6:	4618      	mov	r0, r3
 80098f8:	f00c fab6 	bl	8015e68 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80098fc:	79fb      	ldrb	r3, [r7, #7]
 80098fe:	f003 0320 	and.w	r3, r3, #32
 8009902:	2b00      	cmp	r3, #0
 8009904:	d06e      	beq.n	80099e4 <f_open+0x310>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d06a      	beq.n	80099e4 <f_open+0x310>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	68da      	ldr	r2, [r3, #12]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	895b      	ldrh	r3, [r3, #10]
 800991a:	461a      	mov	r2, r3
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	899b      	ldrh	r3, [r3, #12]
 8009920:	fb02 f303 	mul.w	r3, r2, r3
 8009924:	647b      	str	r3, [r7, #68]	@ 0x44
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	68db      	ldr	r3, [r3, #12]
 8009930:	657b      	str	r3, [r7, #84]	@ 0x54
 8009932:	e016      	b.n	8009962 <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009938:	4618      	mov	r0, r3
 800993a:	f7fe fb94 	bl	8008066 <get_fat>
 800993e:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009940:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009942:	2b01      	cmp	r3, #1
 8009944:	d802      	bhi.n	800994c <f_open+0x278>
 8009946:	2302      	movs	r3, #2
 8009948:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800994c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800994e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009952:	d102      	bne.n	800995a <f_open+0x286>
 8009954:	2301      	movs	r3, #1
 8009956:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800995a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800995c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800995e:	1ad3      	subs	r3, r2, r3
 8009960:	657b      	str	r3, [r7, #84]	@ 0x54
 8009962:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009966:	2b00      	cmp	r3, #0
 8009968:	d103      	bne.n	8009972 <f_open+0x29e>
 800996a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800996c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800996e:	429a      	cmp	r2, r3
 8009970:	d8e0      	bhi.n	8009934 <f_open+0x260>
				}
				fp->clust = clst;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009976:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009978:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800997c:	2b00      	cmp	r3, #0
 800997e:	d131      	bne.n	80099e4 <f_open+0x310>
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	899b      	ldrh	r3, [r3, #12]
 8009984:	461a      	mov	r2, r3
 8009986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009988:	fbb3 f1f2 	udiv	r1, r3, r2
 800998c:	fb01 f202 	mul.w	r2, r1, r2
 8009990:	1a9b      	subs	r3, r3, r2
 8009992:	2b00      	cmp	r3, #0
 8009994:	d026      	beq.n	80099e4 <f_open+0x310>
					sc = clst2sect(fs, clst);
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800999a:	4618      	mov	r0, r3
 800999c:	f7fe fb44 	bl	8008028 <clst2sect>
 80099a0:	64b8      	str	r0, [r7, #72]	@ 0x48
					if (sc == 0) {
 80099a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d103      	bne.n	80099b0 <f_open+0x2dc>
						res = FR_INT_ERR;
 80099a8:	2302      	movs	r3, #2
 80099aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80099ae:	e019      	b.n	80099e4 <f_open+0x310>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	899b      	ldrh	r3, [r3, #12]
 80099b4:	461a      	mov	r2, r3
 80099b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80099bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099be:	441a      	add	r2, r3
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	7858      	ldrb	r0, [r3, #1]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	69da      	ldr	r2, [r3, #28]
 80099d2:	2301      	movs	r3, #1
 80099d4:	f7fe f8c4 	bl	8007b60 <disk_read>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d002      	beq.n	80099e4 <f_open+0x310>
 80099de:	2301      	movs	r3, #1
 80099e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80099e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d002      	beq.n	80099f2 <f_open+0x31e>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2200      	movs	r2, #0
 80099f0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80099f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3760      	adds	r7, #96	@ 0x60
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	54210000 	.word	0x54210000

08009a04 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b08e      	sub	sp, #56	@ 0x38
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	607a      	str	r2, [r7, #4]
 8009a10:	603b      	str	r3, [r7, #0]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f107 0214 	add.w	r2, r7, #20
 8009a22:	4611      	mov	r1, r2
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7ff fdd5 	bl	80095d4 <validate>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009a30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d107      	bne.n	8009a48 <f_read+0x44>
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	7c5b      	ldrb	r3, [r3, #17]
 8009a3c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009a40:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d002      	beq.n	8009a4e <f_read+0x4a>
 8009a48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009a4c:	e129      	b.n	8009ca2 <f_read+0x29e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	7c1b      	ldrb	r3, [r3, #16]
 8009a52:	f003 0301 	and.w	r3, r3, #1
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d101      	bne.n	8009a5e <f_read+0x5a>
 8009a5a:	2307      	movs	r3, #7
 8009a5c:	e121      	b.n	8009ca2 <f_read+0x29e>
	remain = fp->obj.objsize - fp->fptr;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	68da      	ldr	r2, [r3, #12]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	695b      	ldr	r3, [r3, #20]
 8009a66:	1ad3      	subs	r3, r2, r3
 8009a68:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	f240 8112 	bls.w	8009c98 <f_read+0x294>
 8009a74:	6a3b      	ldr	r3, [r7, #32]
 8009a76:	607b      	str	r3, [r7, #4]

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8009a78:	e10e      	b.n	8009c98 <f_read+0x294>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	695b      	ldr	r3, [r3, #20]
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	8992      	ldrh	r2, [r2, #12]
 8009a82:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a86:	fb01 f202 	mul.w	r2, r1, r2
 8009a8a:	1a9b      	subs	r3, r3, r2
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f040 80c9 	bne.w	8009c24 <f_read+0x220>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	695b      	ldr	r3, [r3, #20]
 8009a96:	697a      	ldr	r2, [r7, #20]
 8009a98:	8992      	ldrh	r2, [r2, #12]
 8009a9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a9e:	697a      	ldr	r2, [r7, #20]
 8009aa0:	8952      	ldrh	r2, [r2, #10]
 8009aa2:	3a01      	subs	r2, #1
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d123      	bne.n	8009af6 <f_read+0xf2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	695b      	ldr	r3, [r3, #20]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d103      	bne.n	8009abe <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	633b      	str	r3, [r7, #48]	@ 0x30
 8009abc:	e007      	b.n	8009ace <f_read+0xca>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	699b      	ldr	r3, [r3, #24]
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	f7fe facd 	bl	8008066 <get_fat>
 8009acc:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d804      	bhi.n	8009ade <f_read+0xda>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2202      	movs	r2, #2
 8009ad8:	745a      	strb	r2, [r3, #17]
 8009ada:	2302      	movs	r3, #2
 8009adc:	e0e1      	b.n	8009ca2 <f_read+0x29e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae4:	d104      	bne.n	8009af0 <f_read+0xec>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	745a      	strb	r2, [r3, #17]
 8009aec:	2301      	movs	r3, #1
 8009aee:	e0d8      	b.n	8009ca2 <f_read+0x29e>
				fp->clust = clst;				/* Update current cluster */
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009af4:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8009af6:	697a      	ldr	r2, [r7, #20]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	4619      	mov	r1, r3
 8009afe:	4610      	mov	r0, r2
 8009b00:	f7fe fa92 	bl	8008028 <clst2sect>
 8009b04:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d104      	bne.n	8009b16 <f_read+0x112>
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2202      	movs	r2, #2
 8009b10:	745a      	strb	r2, [r3, #17]
 8009b12:	2302      	movs	r3, #2
 8009b14:	e0c5      	b.n	8009ca2 <f_read+0x29e>
			sect += csect;
 8009b16:	69ba      	ldr	r2, [r7, #24]
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	899b      	ldrh	r3, [r3, #12]
 8009b22:	461a      	mov	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8009b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d041      	beq.n	8009bb6 <f_read+0x1b2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009b32:	69fa      	ldr	r2, [r7, #28]
 8009b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b36:	4413      	add	r3, r2
 8009b38:	697a      	ldr	r2, [r7, #20]
 8009b3a:	8952      	ldrh	r2, [r2, #10]
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d905      	bls.n	8009b4c <f_read+0x148>
					cc = fs->csize - csect;
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	895b      	ldrh	r3, [r3, #10]
 8009b44:	461a      	mov	r2, r3
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	7858      	ldrb	r0, [r3, #1]
 8009b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b52:	69ba      	ldr	r2, [r7, #24]
 8009b54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009b56:	f7fe f803 	bl	8007b60 <disk_read>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d004      	beq.n	8009b6a <f_read+0x166>
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2201      	movs	r2, #1
 8009b64:	745a      	strb	r2, [r3, #17]
 8009b66:	2301      	movs	r3, #1
 8009b68:	e09b      	b.n	8009ca2 <f_read+0x29e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	7c1b      	ldrb	r3, [r3, #16]
 8009b6e:	b25b      	sxtb	r3, r3
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	da18      	bge.n	8009ba6 <f_read+0x1a2>
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	69da      	ldr	r2, [r3, #28]
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	1ad3      	subs	r3, r2, r3
 8009b7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d911      	bls.n	8009ba6 <f_read+0x1a2>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	69da      	ldr	r2, [r3, #28]
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	697a      	ldr	r2, [r7, #20]
 8009b8c:	8992      	ldrh	r2, [r2, #12]
 8009b8e:	fb02 f303 	mul.w	r3, r2, r3
 8009b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b94:	18d0      	adds	r0, r2, r3
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	899b      	ldrh	r3, [r3, #12]
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	f00c f9e5 	bl	8015f70 <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	899b      	ldrh	r3, [r3, #12]
 8009baa:	461a      	mov	r2, r3
 8009bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bae:	fb02 f303 	mul.w	r3, r2, r3
 8009bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009bb4:	e05c      	b.n	8009c70 <f_read+0x26c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	69db      	ldr	r3, [r3, #28]
 8009bba:	69ba      	ldr	r2, [r7, #24]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d02e      	beq.n	8009c1e <f_read+0x21a>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	7c1b      	ldrb	r3, [r3, #16]
 8009bc4:	b25b      	sxtb	r3, r3
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	da18      	bge.n	8009bfc <f_read+0x1f8>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	7858      	ldrb	r0, [r3, #1]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	69da      	ldr	r2, [r3, #28]
 8009bd8:	2301      	movs	r3, #1
 8009bda:	f7fd fff3 	bl	8007bc4 <disk_write>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d004      	beq.n	8009bee <f_read+0x1ea>
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2201      	movs	r2, #1
 8009be8:	745a      	strb	r2, [r3, #17]
 8009bea:	2301      	movs	r3, #1
 8009bec:	e059      	b.n	8009ca2 <f_read+0x29e>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	7c1b      	ldrb	r3, [r3, #16]
 8009bf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bf6:	b2da      	uxtb	r2, r3
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	7858      	ldrb	r0, [r3, #1]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009c06:	2301      	movs	r3, #1
 8009c08:	69ba      	ldr	r2, [r7, #24]
 8009c0a:	f7fd ffa9 	bl	8007b60 <disk_read>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d004      	beq.n	8009c1e <f_read+0x21a>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2201      	movs	r2, #1
 8009c18:	745a      	strb	r2, [r3, #17]
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e041      	b.n	8009ca2 <f_read+0x29e>
			}
#endif
			fp->sect = sect;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	69ba      	ldr	r2, [r7, #24]
 8009c22:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	899b      	ldrh	r3, [r3, #12]
 8009c28:	4618      	mov	r0, r3
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	695b      	ldr	r3, [r3, #20]
 8009c2e:	697a      	ldr	r2, [r7, #20]
 8009c30:	8992      	ldrh	r2, [r2, #12]
 8009c32:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c36:	fb01 f202 	mul.w	r2, r1, r2
 8009c3a:	1a9b      	subs	r3, r3, r2
 8009c3c:	1ac3      	subs	r3, r0, r3
 8009c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009c40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d901      	bls.n	8009c4c <f_read+0x248>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	695b      	ldr	r3, [r3, #20]
 8009c56:	697a      	ldr	r2, [r7, #20]
 8009c58:	8992      	ldrh	r2, [r2, #12]
 8009c5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8009c5e:	fb00 f202 	mul.w	r2, r0, r2
 8009c62:	1a9b      	subs	r3, r3, r2
 8009c64:	440b      	add	r3, r1
 8009c66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009c6c:	f00c f980 	bl	8015f70 <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c74:	1ad3      	subs	r3, r2, r3
 8009c76:	607b      	str	r3, [r7, #4]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c7e:	441a      	add	r2, r3
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	601a      	str	r2, [r3, #0]
 8009c84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c88:	4413      	add	r3, r2
 8009c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	695a      	ldr	r2, [r3, #20]
 8009c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c92:	441a      	add	r2, r3
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	615a      	str	r2, [r3, #20]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	f47f aeed 	bne.w	8009a7a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3738      	adds	r7, #56	@ 0x38
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b08c      	sub	sp, #48	@ 0x30
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	60f8      	str	r0, [r7, #12]
 8009cb2:	60b9      	str	r1, [r7, #8]
 8009cb4:	607a      	str	r2, [r7, #4]
 8009cb6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f107 0210 	add.w	r2, r7, #16
 8009cc8:	4611      	mov	r1, r2
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7ff fc82 	bl	80095d4 <validate>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009cd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d107      	bne.n	8009cee <f_write+0x44>
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	7c5b      	ldrb	r3, [r3, #17]
 8009ce2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009ce6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d002      	beq.n	8009cf4 <f_write+0x4a>
 8009cee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009cf2:	e15e      	b.n	8009fb2 <f_write+0x308>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	7c1b      	ldrb	r3, [r3, #16]
 8009cf8:	f003 0302 	and.w	r3, r3, #2
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d101      	bne.n	8009d04 <f_write+0x5a>
 8009d00:	2307      	movs	r3, #7
 8009d02:	e156      	b.n	8009fb2 <f_write+0x308>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	695a      	ldr	r2, [r3, #20]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	441a      	add	r2, r3
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	695b      	ldr	r3, [r3, #20]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	f080 8140 	bcs.w	8009f96 <f_write+0x2ec>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	695b      	ldr	r3, [r3, #20]
 8009d1a:	43db      	mvns	r3, r3
 8009d1c:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8009d1e:	e13a      	b.n	8009f96 <f_write+0x2ec>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	695b      	ldr	r3, [r3, #20]
 8009d24:	693a      	ldr	r2, [r7, #16]
 8009d26:	8992      	ldrh	r2, [r2, #12]
 8009d28:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d2c:	fb01 f202 	mul.w	r2, r1, r2
 8009d30:	1a9b      	subs	r3, r3, r2
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f040 80e5 	bne.w	8009f02 <f_write+0x258>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	695b      	ldr	r3, [r3, #20]
 8009d3c:	693a      	ldr	r2, [r7, #16]
 8009d3e:	8992      	ldrh	r2, [r2, #12]
 8009d40:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d44:	693a      	ldr	r2, [r7, #16]
 8009d46:	8952      	ldrh	r2, [r2, #10]
 8009d48:	3a01      	subs	r2, #1
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d137      	bne.n	8009dc4 <f_write+0x11a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	695b      	ldr	r3, [r3, #20]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10c      	bne.n	8009d76 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d10e      	bne.n	8009d86 <f_write+0xdc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7fe fbcc 	bl	800850a <create_chain>
 8009d72:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009d74:	e007      	b.n	8009d86 <f_write+0xdc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	4610      	mov	r0, r2
 8009d80:	f7fe fbc3 	bl	800850a <create_chain>
 8009d84:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f000 8109 	beq.w	8009fa0 <f_write+0x2f6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d104      	bne.n	8009d9e <f_write+0xf4>
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2202      	movs	r2, #2
 8009d98:	745a      	strb	r2, [r3, #17]
 8009d9a:	2302      	movs	r3, #2
 8009d9c:	e109      	b.n	8009fb2 <f_write+0x308>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da4:	d104      	bne.n	8009db0 <f_write+0x106>
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2201      	movs	r2, #1
 8009daa:	745a      	strb	r2, [r3, #17]
 8009dac:	2301      	movs	r3, #1
 8009dae:	e100      	b.n	8009fb2 <f_write+0x308>
				fp->clust = clst;			/* Update current cluster */
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009db4:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d102      	bne.n	8009dc4 <f_write+0x11a>
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009dc2:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	7c1b      	ldrb	r3, [r3, #16]
 8009dc8:	b25b      	sxtb	r3, r3
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	da18      	bge.n	8009e00 <f_write+0x156>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	7858      	ldrb	r0, [r3, #1]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	69da      	ldr	r2, [r3, #28]
 8009ddc:	2301      	movs	r3, #1
 8009dde:	f7fd fef1 	bl	8007bc4 <disk_write>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d004      	beq.n	8009df2 <f_write+0x148>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2201      	movs	r2, #1
 8009dec:	745a      	strb	r2, [r3, #17]
 8009dee:	2301      	movs	r3, #1
 8009df0:	e0df      	b.n	8009fb2 <f_write+0x308>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	7c1b      	ldrb	r3, [r3, #16]
 8009df6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dfa:	b2da      	uxtb	r2, r3
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8009e00:	693a      	ldr	r2, [r7, #16]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	699b      	ldr	r3, [r3, #24]
 8009e06:	4619      	mov	r1, r3
 8009e08:	4610      	mov	r0, r2
 8009e0a:	f7fe f90d 	bl	8008028 <clst2sect>
 8009e0e:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d104      	bne.n	8009e20 <f_write+0x176>
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2202      	movs	r2, #2
 8009e1a:	745a      	strb	r2, [r3, #17]
 8009e1c:	2302      	movs	r3, #2
 8009e1e:	e0c8      	b.n	8009fb2 <f_write+0x308>
			sect += csect;
 8009e20:	697a      	ldr	r2, [r7, #20]
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	4413      	add	r3, r2
 8009e26:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	899b      	ldrh	r3, [r3, #12]
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e34:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8009e36:	6a3b      	ldr	r3, [r7, #32]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d043      	beq.n	8009ec4 <f_write+0x21a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009e3c:	69ba      	ldr	r2, [r7, #24]
 8009e3e:	6a3b      	ldr	r3, [r7, #32]
 8009e40:	4413      	add	r3, r2
 8009e42:	693a      	ldr	r2, [r7, #16]
 8009e44:	8952      	ldrh	r2, [r2, #10]
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d905      	bls.n	8009e56 <f_write+0x1ac>
					cc = fs->csize - csect;
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	895b      	ldrh	r3, [r3, #10]
 8009e4e:	461a      	mov	r2, r3
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	1ad3      	subs	r3, r2, r3
 8009e54:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	7858      	ldrb	r0, [r3, #1]
 8009e5a:	6a3b      	ldr	r3, [r7, #32]
 8009e5c:	697a      	ldr	r2, [r7, #20]
 8009e5e:	69f9      	ldr	r1, [r7, #28]
 8009e60:	f7fd feb0 	bl	8007bc4 <disk_write>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d004      	beq.n	8009e74 <f_write+0x1ca>
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	745a      	strb	r2, [r3, #17]
 8009e70:	2301      	movs	r3, #1
 8009e72:	e09e      	b.n	8009fb2 <f_write+0x308>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	69da      	ldr	r2, [r3, #28]
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	1ad3      	subs	r3, r2, r3
 8009e7c:	6a3a      	ldr	r2, [r7, #32]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d918      	bls.n	8009eb4 <f_write+0x20a>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	69da      	ldr	r2, [r3, #28]
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	1ad3      	subs	r3, r2, r3
 8009e90:	693a      	ldr	r2, [r7, #16]
 8009e92:	8992      	ldrh	r2, [r2, #12]
 8009e94:	fb02 f303 	mul.w	r3, r2, r3
 8009e98:	69fa      	ldr	r2, [r7, #28]
 8009e9a:	18d1      	adds	r1, r2, r3
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	899b      	ldrh	r3, [r3, #12]
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	f00c f865 	bl	8015f70 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	7c1b      	ldrb	r3, [r3, #16]
 8009eaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009eae:	b2da      	uxtb	r2, r3
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	899b      	ldrh	r3, [r3, #12]
 8009eb8:	461a      	mov	r2, r3
 8009eba:	6a3b      	ldr	r3, [r7, #32]
 8009ebc:	fb02 f303 	mul.w	r3, r2, r3
 8009ec0:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8009ec2:	e04b      	b.n	8009f5c <f_write+0x2b2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	69db      	ldr	r3, [r3, #28]
 8009ec8:	697a      	ldr	r2, [r7, #20]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d016      	beq.n	8009efc <f_write+0x252>
				fp->fptr < fp->obj.objsize &&
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	695a      	ldr	r2, [r3, #20]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d210      	bcs.n	8009efc <f_write+0x252>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	7858      	ldrb	r0, [r3, #1]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	697a      	ldr	r2, [r7, #20]
 8009ee8:	f7fd fe3a 	bl	8007b60 <disk_read>
 8009eec:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d004      	beq.n	8009efc <f_write+0x252>
					ABORT(fs, FR_DISK_ERR);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	745a      	strb	r2, [r3, #17]
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e05a      	b.n	8009fb2 <f_write+0x308>
			}
#endif
			fp->sect = sect;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	697a      	ldr	r2, [r7, #20]
 8009f00:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	899b      	ldrh	r3, [r3, #12]
 8009f06:	4618      	mov	r0, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	695b      	ldr	r3, [r3, #20]
 8009f0c:	693a      	ldr	r2, [r7, #16]
 8009f0e:	8992      	ldrh	r2, [r2, #12]
 8009f10:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f14:	fb01 f202 	mul.w	r2, r1, r2
 8009f18:	1a9b      	subs	r3, r3, r2
 8009f1a:	1ac3      	subs	r3, r0, r3
 8009f1c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d901      	bls.n	8009f2a <f_write+0x280>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	627b      	str	r3, [r7, #36]	@ 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	695b      	ldr	r3, [r3, #20]
 8009f34:	693a      	ldr	r2, [r7, #16]
 8009f36:	8992      	ldrh	r2, [r2, #12]
 8009f38:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f3c:	fb00 f202 	mul.w	r2, r0, r2
 8009f40:	1a9b      	subs	r3, r3, r2
 8009f42:	440b      	add	r3, r1
 8009f44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f46:	69f9      	ldr	r1, [r7, #28]
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f00c f811 	bl	8015f70 <memcpy>
		fp->flag |= FA_DIRTY;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	7c1b      	ldrb	r3, [r3, #16]
 8009f52:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009f56:	b2da      	uxtb	r2, r3
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	741a      	strb	r2, [r3, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f60:	1ad3      	subs	r3, r2, r3
 8009f62:	607b      	str	r3, [r7, #4]
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f6a:	441a      	add	r2, r3
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	601a      	str	r2, [r3, #0]
 8009f70:	69fa      	ldr	r2, [r7, #28]
 8009f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f74:	4413      	add	r3, r2
 8009f76:	61fb      	str	r3, [r7, #28]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	695a      	ldr	r2, [r3, #20]
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f7e:	441a      	add	r2, r3
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	615a      	str	r2, [r3, #20]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	68da      	ldr	r2, [r3, #12]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	695b      	ldr	r3, [r3, #20]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	bf38      	it	cc
 8009f90:	461a      	movcc	r2, r3
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	60da      	str	r2, [r3, #12]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f47f aec1 	bne.w	8009d20 <f_write+0x76>
 8009f9e:	e000      	b.n	8009fa2 <f_write+0x2f8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009fa0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	7c1b      	ldrb	r3, [r3, #16]
 8009fa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009faa:	b2da      	uxtb	r2, r3
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3730      	adds	r7, #48	@ 0x30
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
	...

08009fbc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b086      	sub	sp, #24
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f107 0208 	add.w	r2, r7, #8
 8009fca:	4611      	mov	r1, r2
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7ff fb01 	bl	80095d4 <validate>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009fd6:	7dfb      	ldrb	r3, [r7, #23]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d167      	bne.n	800a0ac <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	7c1b      	ldrb	r3, [r3, #16]
 8009fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d061      	beq.n	800a0ac <f_sync+0xf0>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	7c1b      	ldrb	r3, [r3, #16]
 8009fec:	b25b      	sxtb	r3, r3
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	da15      	bge.n	800a01e <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	7858      	ldrb	r0, [r3, #1]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	69da      	ldr	r2, [r3, #28]
 800a000:	2301      	movs	r3, #1
 800a002:	f7fd fddf 	bl	8007bc4 <disk_write>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <f_sync+0x54>
 800a00c:	2301      	movs	r3, #1
 800a00e:	e04e      	b.n	800a0ae <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	7c1b      	ldrb	r3, [r3, #16]
 800a014:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a018:	b2da      	uxtb	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a01e:	4b26      	ldr	r3, [pc, #152]	@ (800a0b8 <f_sync+0xfc>)
 800a020:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6a1b      	ldr	r3, [r3, #32]
 800a028:	4619      	mov	r1, r3
 800a02a:	4610      	mov	r0, r2
 800a02c:	f7fd ff61 	bl	8007ef2 <move_window>
 800a030:	4603      	mov	r3, r0
 800a032:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a034:	7dfb      	ldrb	r3, [r7, #23]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d138      	bne.n	800a0ac <f_sync+0xf0>
					dir = fp->dir_ptr;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a03e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	330b      	adds	r3, #11
 800a044:	781a      	ldrb	r2, [r3, #0]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	330b      	adds	r3, #11
 800a04a:	f042 0220 	orr.w	r2, r2, #32
 800a04e:	b2d2      	uxtb	r2, r2
 800a050:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6818      	ldr	r0, [r3, #0]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	461a      	mov	r2, r3
 800a05c:	68f9      	ldr	r1, [r7, #12]
 800a05e:	f7fe fd02 	bl	8008a66 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f103 021c 	add.w	r2, r3, #28
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	4619      	mov	r1, r3
 800a06e:	4610      	mov	r0, r2
 800a070:	f7fd feb5 	bl	8007dde <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	3316      	adds	r3, #22
 800a078:	6939      	ldr	r1, [r7, #16]
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7fd feaf 	bl	8007dde <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	3312      	adds	r3, #18
 800a084:	2100      	movs	r1, #0
 800a086:	4618      	mov	r0, r3
 800a088:	f7fd fe8e 	bl	8007da8 <st_word>
					fs->wflag = 1;
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	2201      	movs	r2, #1
 800a090:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	4618      	mov	r0, r3
 800a096:	f7fd ff59 	bl	8007f4c <sync_fs>
 800a09a:	4603      	mov	r3, r0
 800a09c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	7c1b      	ldrb	r3, [r3, #16]
 800a0a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0a6:	b2da      	uxtb	r2, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a0ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3718      	adds	r7, #24
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	54210000 	.word	0x54210000

0800a0bc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f7ff ff79 	bl	8009fbc <f_sync>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a0ce:	7bfb      	ldrb	r3, [r7, #15]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d10e      	bne.n	800a0f2 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f107 0208 	add.w	r2, r7, #8
 800a0da:	4611      	mov	r1, r2
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7ff fa79 	bl	80095d4 <validate>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a0e6:	7bfb      	ldrb	r3, [r7, #15]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d102      	bne.n	800a0f2 <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3710      	adds	r7, #16
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID for each partition (for only MBR) */
	BYTE *buf			/* Working buffer for a sector */
)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b08e      	sub	sp, #56	@ 0x38
 800a100:	af00      	add	r7, sp, #0
 800a102:	60b9      	str	r1, [r7, #8]
 800a104:	607b      	str	r3, [r7, #4]
 800a106:	4603      	mov	r3, r0
 800a108:	73fb      	strb	r3, [r7, #15]
 800a10a:	4613      	mov	r3, r2
 800a10c:	73bb      	strb	r3, [r7, #14]
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 800a10e:	f107 0210 	add.w	r2, r7, #16
 800a112:	7bfb      	ldrb	r3, [r7, #15]
 800a114:	2101      	movs	r1, #1
 800a116:	4618      	mov	r0, r3
 800a118:	f7fd fd88 	bl	8007c2c <disk_ioctl>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d001      	beq.n	800a126 <create_partition+0x2a>
 800a122:	2301      	movs	r3, #1
 800a124:	e108      	b.n	800a338 <create_partition+0x23c>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	623b      	str	r3, [r7, #32]
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
 800a12a:	233f      	movs	r3, #63	@ 0x3f
 800a12c:	77fb      	strb	r3, [r7, #31]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 800a12e:	2308      	movs	r3, #8
 800a130:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a134:	e004      	b.n	800a140 <create_partition+0x44>
 800a136:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a13a:	005b      	lsls	r3, r3, #1
 800a13c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a140:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00a      	beq.n	800a15e <create_partition+0x62>
 800a148:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a14c:	6a3a      	ldr	r2, [r7, #32]
 800a14e:	fbb2 f2f3 	udiv	r2, r2, r3
 800a152:	7ffb      	ldrb	r3, [r7, #31]
 800a154:	fbb2 f3f3 	udiv	r3, r2, r3
 800a158:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a15c:	d8eb      	bhi.n	800a136 <create_partition+0x3a>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 800a15e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a162:	2b00      	cmp	r3, #0
 800a164:	d102      	bne.n	800a16c <create_partition+0x70>
 800a166:	23ff      	movs	r3, #255	@ 0xff
 800a168:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 800a16c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a170:	2100      	movs	r1, #0
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f00b fe78 	bl	8015e68 <memset>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a17e:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800a180:	2300      	movs	r3, #0
 800a182:	637b      	str	r3, [r7, #52]	@ 0x34
 800a184:	7ffb      	ldrb	r3, [r7, #31]
 800a186:	633b      	str	r3, [r7, #48]	@ 0x30
 800a188:	e0b5      	b.n	800a2f6 <create_partition+0x1fa>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 800a18a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	68ba      	ldr	r2, [r7, #8]
 800a190:	4413      	add	r3, r2
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 800a196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a198:	2b64      	cmp	r3, #100	@ 0x64
 800a19a:	d80d      	bhi.n	800a1b8 <create_partition+0xbc>
 800a19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a19e:	2b64      	cmp	r3, #100	@ 0x64
 800a1a0:	d008      	beq.n	800a1b4 <create_partition+0xb8>
 800a1a2:	6a3b      	ldr	r3, [r7, #32]
 800a1a4:	4a66      	ldr	r2, [pc, #408]	@ (800a340 <create_partition+0x244>)
 800a1a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a1aa:	095b      	lsrs	r3, r3, #5
 800a1ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1ae:	fb02 f303 	mul.w	r3, r2, r3
 800a1b2:	e000      	b.n	800a1b6 <create_partition+0xba>
 800a1b4:	6a3b      	ldr	r3, [r7, #32]
 800a1b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 800a1b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1bc:	4413      	add	r3, r2
 800a1be:	6a3a      	ldr	r2, [r7, #32]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d305      	bcc.n	800a1d0 <create_partition+0xd4>
 800a1c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1c8:	4413      	add	r3, r2
 800a1ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d903      	bls.n	800a1d8 <create_partition+0xdc>
 800a1d0:	6a3a      	ldr	r2, [r7, #32]
 800a1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d4:	1ad3      	subs	r3, r2, r3
 800a1d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800a1d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f000 8097 	beq.w	800a30e <create_partition+0x212>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 800a1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e2:	3308      	adds	r3, #8
 800a1e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7fd fdf9 	bl	8007dde <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 800a1ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ee:	330c      	adds	r3, #12
 800a1f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7fd fdf3 	bl	8007dde <st_dword>
			pte[PTE_System] = sys;					/* System type */
 800a1f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1fa:	3304      	adds	r3, #4
 800a1fc:	7bba      	ldrb	r2, [r7, #14]
 800a1fe:	701a      	strb	r2, [r3, #0]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 800a200:	7ffb      	ldrb	r3, [r7, #31]
 800a202:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a204:	fbb2 f2f3 	udiv	r2, r2, r3
 800a208:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a20c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a210:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 800a212:	7ffb      	ldrb	r3, [r7, #31]
 800a214:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a216:	fbb2 f3f3 	udiv	r3, r2, r3
 800a21a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a21e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a222:	fb01 f202 	mul.w	r2, r1, r2
 800a226:	1a9b      	subs	r3, r3, r2
 800a228:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 800a22a:	7ffa      	ldrb	r2, [r7, #31]
 800a22c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a22e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a232:	fb01 f202 	mul.w	r2, r1, r2
 800a236:	1a9b      	subs	r3, r3, r2
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	3301      	adds	r3, #1
 800a23c:	75bb      	strb	r3, [r7, #22]
			pte[PTE_StHead] = hd;
 800a23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a240:	3301      	adds	r3, #1
 800a242:	7dfa      	ldrb	r2, [r7, #23]
 800a244:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	089b      	lsrs	r3, r3, #2
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a250:	b2d9      	uxtb	r1, r3
 800a252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a254:	3302      	adds	r3, #2
 800a256:	7dba      	ldrb	r2, [r7, #22]
 800a258:	430a      	orrs	r2, r1
 800a25a:	b2d2      	uxtb	r2, r2
 800a25c:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = (BYTE)cy;
 800a25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a260:	3303      	adds	r3, #3
 800a262:	69ba      	ldr	r2, [r7, #24]
 800a264:	b2d2      	uxtb	r2, r2
 800a266:	701a      	strb	r2, [r3, #0]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 800a268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a26a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a26c:	4413      	add	r3, r2
 800a26e:	1e5a      	subs	r2, r3, #1
 800a270:	7ffb      	ldrb	r3, [r7, #31]
 800a272:	fbb2 f2f3 	udiv	r2, r2, r3
 800a276:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a27a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a27e:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 800a280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a284:	4413      	add	r3, r2
 800a286:	1e5a      	subs	r2, r3, #1
 800a288:	7ffb      	ldrb	r3, [r7, #31]
 800a28a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a28e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a292:	fbb3 f1f2 	udiv	r1, r3, r2
 800a296:	fb01 f202 	mul.w	r2, r1, r2
 800a29a:	1a9b      	subs	r3, r3, r2
 800a29c:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 800a29e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2a2:	4413      	add	r3, r2
 800a2a4:	3b01      	subs	r3, #1
 800a2a6:	7ffa      	ldrb	r2, [r7, #31]
 800a2a8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2ac:	fb01 f202 	mul.w	r2, r1, r2
 800a2b0:	1a9b      	subs	r3, r3, r2
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	75bb      	strb	r3, [r7, #22]
			pte[PTE_EdHead] = hd;
 800a2b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ba:	3305      	adds	r3, #5
 800a2bc:	7dfa      	ldrb	r2, [r7, #23]
 800a2be:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800a2c0:	69bb      	ldr	r3, [r7, #24]
 800a2c2:	089b      	lsrs	r3, r3, #2
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a2ca:	b2d9      	uxtb	r1, r3
 800a2cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ce:	3306      	adds	r3, #6
 800a2d0:	7dba      	ldrb	r2, [r7, #22]
 800a2d2:	430a      	orrs	r2, r1
 800a2d4:	b2d2      	uxtb	r2, r2
 800a2d6:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)cy;
 800a2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2da:	3307      	adds	r3, #7
 800a2dc:	69ba      	ldr	r2, [r7, #24]
 800a2de:	b2d2      	uxtb	r2, r2
 800a2e0:	701a      	strb	r2, [r3, #0]

			pte += SZ_PTE;		/* Next entry */
 800a2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e4:	3310      	adds	r3, #16
 800a2e6:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800a2e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2f2:	4413      	add	r3, r2
 800a2f4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2f8:	2b03      	cmp	r3, #3
 800a2fa:	d809      	bhi.n	800a310 <create_partition+0x214>
 800a2fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d006      	beq.n	800a310 <create_partition+0x214>
 800a302:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a304:	6a3b      	ldr	r3, [r7, #32]
 800a306:	429a      	cmp	r2, r3
 800a308:	f4ff af3f 	bcc.w	800a18a <create_partition+0x8e>
 800a30c:	e000      	b.n	800a310 <create_partition+0x214>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800a30e:	bf00      	nop
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a316:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7fd fd44 	bl	8007da8 <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800a320:	7bf8      	ldrb	r0, [r7, #15]
 800a322:	2301      	movs	r3, #1
 800a324:	2200      	movs	r2, #0
 800a326:	6879      	ldr	r1, [r7, #4]
 800a328:	f7fd fc4c 	bl	8007bc4 <disk_write>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d001      	beq.n	800a336 <create_partition+0x23a>
 800a332:	2301      	movs	r3, #1
 800a334:	e000      	b.n	800a338 <create_partition+0x23c>
	}

	return FR_OK;
 800a336:	2300      	movs	r3, #0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3738      	adds	r7, #56	@ 0x38
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	51eb851f 	.word	0x51eb851f

0800a344 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b09e      	sub	sp, #120	@ 0x78
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	607a      	str	r2, [r7, #4]
 800a350:	603b      	str	r3, [r7, #0]
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800a352:	f107 030c 	add.w	r3, r7, #12
 800a356:	4618      	mov	r0, r3
 800a358:	f7fe fd78 	bl	8008e4c <get_ldnumber>
 800a35c:	6478      	str	r0, [r7, #68]	@ 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800a35e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a360:	2b00      	cmp	r3, #0
 800a362:	da02      	bge.n	800a36a <f_mkfs+0x26>
 800a364:	230b      	movs	r3, #11
 800a366:	f000 bc39 	b.w	800abdc <f_mkfs+0x898>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 800a36a:	4a90      	ldr	r2, [pc, #576]	@ (800a5ac <f_mkfs+0x268>)
 800a36c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a36e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d005      	beq.n	800a382 <f_mkfs+0x3e>
 800a376:	4a8d      	ldr	r2, [pc, #564]	@ (800a5ac <f_mkfs+0x268>)
 800a378:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a37a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a37e:	2200      	movs	r2, #0
 800a380:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 800a382:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a384:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */
 800a388:	2300      	movs	r3, #0
 800a38a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 800a38e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a392:	4618      	mov	r0, r3
 800a394:	f7fd fbbc 	bl	8007b10 <disk_initialize>
 800a398:	4603      	mov	r3, r0
 800a39a:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	if (ds & STA_NOINIT) return FR_NOT_READY;
 800a39e:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a3a2:	f003 0301 	and.w	r3, r3, #1
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d002      	beq.n	800a3b0 <f_mkfs+0x6c>
 800a3aa:	2303      	movs	r3, #3
 800a3ac:	f000 bc16 	b.w	800abdc <f_mkfs+0x898>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 800a3b0:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a3b4:	f003 0304 	and.w	r3, r3, #4
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d002      	beq.n	800a3c2 <f_mkfs+0x7e>
 800a3bc:	230a      	movs	r3, #10
 800a3be:	f000 bc0d 	b.w	800abdc <f_mkfs+0x898>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d101      	bne.n	800a3cc <f_mkfs+0x88>
 800a3c8:	4b79      	ldr	r3, [pc, #484]	@ (800a5b0 <f_mkfs+0x26c>)
 800a3ca:	60bb      	str	r3, [r7, #8]
	sz_blk = opt->align;
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	61fb      	str	r3, [r7, #28]
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the paramter or lower layer */
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d107      	bne.n	800a3e8 <f_mkfs+0xa4>
 800a3d8:	f107 021c 	add.w	r2, r7, #28
 800a3dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a3e0:	2103      	movs	r1, #3
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7fd fc22 	bl	8007c2c <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d009      	beq.n	800a402 <f_mkfs+0xbe>
 800a3ee:	69fb      	ldr	r3, [r7, #28]
 800a3f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a3f4:	d805      	bhi.n	800a402 <f_mkfs+0xbe>
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	1e5a      	subs	r2, r3, #1
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	4013      	ands	r3, r2
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d001      	beq.n	800a406 <f_mkfs+0xc2>
 800a402:	2301      	movs	r3, #1
 800a404:	61fb      	str	r3, [r7, #28]
#if FF_MAX_SS != FF_MIN_SS
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 800a406:	f107 0220 	add.w	r2, r7, #32
 800a40a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a40e:	2102      	movs	r1, #2
 800a410:	4618      	mov	r0, r3
 800a412:	f7fd fc0b 	bl	8007c2c <disk_ioctl>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d001      	beq.n	800a420 <f_mkfs+0xdc>
 800a41c:	2301      	movs	r3, #1
 800a41e:	e3dd      	b.n	800abdc <f_mkfs+0x898>
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 800a420:	8c3b      	ldrh	r3, [r7, #32]
 800a422:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a426:	d80a      	bhi.n	800a43e <f_mkfs+0xfa>
 800a428:	8c3b      	ldrh	r3, [r7, #32]
 800a42a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a42e:	d306      	bcc.n	800a43e <f_mkfs+0xfa>
 800a430:	8c3b      	ldrh	r3, [r7, #32]
 800a432:	461a      	mov	r2, r3
 800a434:	8c3b      	ldrh	r3, [r7, #32]
 800a436:	3b01      	subs	r3, #1
 800a438:	4013      	ands	r3, r2
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d001      	beq.n	800a442 <f_mkfs+0xfe>
 800a43e:	2301      	movs	r3, #1
 800a440:	e3cc      	b.n	800abdc <f_mkfs+0x898>
#else
	ss = FF_MAX_SS;
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	f003 030f 	and.w	r3, r3, #15
 800a44a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	785b      	ldrb	r3, [r3, #1]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d006      	beq.n	800a464 <f_mkfs+0x120>
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	785b      	ldrb	r3, [r3, #1]
 800a45a:	2b02      	cmp	r3, #2
 800a45c:	d802      	bhi.n	800a464 <f_mkfs+0x120>
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	785b      	ldrb	r3, [r3, #1]
 800a462:	e000      	b.n	800a466 <f_mkfs+0x122>
 800a464:	2301      	movs	r3, #1
 800a466:	63fb      	str	r3, [r7, #60]	@ 0x3c
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d013      	beq.n	800a498 <f_mkfs+0x154>
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a478:	d80e      	bhi.n	800a498 <f_mkfs+0x154>
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	8c3a      	ldrh	r2, [r7, #32]
 800a480:	0952      	lsrs	r2, r2, #5
 800a482:	b292      	uxth	r2, r2
 800a484:	fbb3 f1f2 	udiv	r1, r3, r2
 800a488:	fb01 f202 	mul.w	r2, r1, r2
 800a48c:	1a9b      	subs	r3, r3, r2
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d102      	bne.n	800a498 <f_mkfs+0x154>
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	e001      	b.n	800a49c <f_mkfs+0x158>
 800a498:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a49c:	63bb      	str	r3, [r7, #56]	@ 0x38
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a4a6:	d80a      	bhi.n	800a4be <f_mkfs+0x17a>
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	68da      	ldr	r2, [r3, #12]
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	3b01      	subs	r3, #1
 800a4b2:	4013      	ands	r3, r2
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d102      	bne.n	800a4be <f_mkfs+0x17a>
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	e000      	b.n	800a4c0 <f_mkfs+0x17c>
 800a4be:	2300      	movs	r3, #0
 800a4c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sz_au /= ss;	/* Byte --> Sector */
 800a4c2:	8c3b      	ldrh	r3, [r7, #32]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4cc:	64fb      	str	r3, [r7, #76]	@ 0x4c

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 800a4ce:	8c3b      	ldrh	r3, [r7, #32]
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4d8:	637b      	str	r3, [r7, #52]	@ 0x34
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 800a4da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d101      	bne.n	800a4e4 <f_mkfs+0x1a0>
 800a4e0:	2311      	movs	r3, #17
 800a4e2:	e37b      	b.n	800abdc <f_mkfs+0x898>
	buf = (BYTE*)work;		/* Working buffer */
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	633b      	str	r3, [r7, #48]	@ 0x30
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 800a4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d101      	bne.n	800a4f2 <f_mkfs+0x1ae>
 800a4ee:	2311      	movs	r3, #17
 800a4f0:	e374      	b.n	800abdc <f_mkfs+0x898>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	61bb      	str	r3, [r7, #24]
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800a4fa:	f107 0218 	add.w	r2, r7, #24
 800a4fe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a502:	2101      	movs	r1, #1
 800a504:	4618      	mov	r0, r3
 800a506:	f7fd fb91 	bl	8007c2c <disk_ioctl>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d001      	beq.n	800a514 <f_mkfs+0x1d0>
 800a510:	2301      	movs	r3, #1
 800a512:	e363      	b.n	800abdc <f_mkfs+0x898>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 800a514:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a518:	f003 0308 	and.w	r3, r3, #8
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d108      	bne.n	800a532 <f_mkfs+0x1ee>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	2b3f      	cmp	r3, #63	@ 0x3f
 800a524:	d905      	bls.n	800a532 <f_mkfs+0x1ee>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 800a526:	233f      	movs	r3, #63	@ 0x3f
 800a528:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a52a:	69ba      	ldr	r2, [r7, #24]
 800a52c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a52e:	1ad3      	subs	r3, r2, r3
 800a530:	61bb      	str	r3, [r7, #24]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	2b7f      	cmp	r3, #127	@ 0x7f
 800a536:	d801      	bhi.n	800a53c <f_mkfs+0x1f8>
 800a538:	230e      	movs	r3, #14
 800a53a:	e34f      	b.n	800abdc <f_mkfs+0x898>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 800a53c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a53e:	2b80      	cmp	r3, #128	@ 0x80
 800a540:	d901      	bls.n	800a546 <f_mkfs+0x202>
 800a542:	2380      	movs	r3, #128	@ 0x80
 800a544:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 800a546:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a54a:	f003 0302 	and.w	r3, r3, #2
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d009      	beq.n	800a566 <f_mkfs+0x222>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 800a552:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a556:	f003 0301 	and.w	r3, r3, #1
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d103      	bne.n	800a566 <f_mkfs+0x222>
				fsty = FS_FAT32; break;
 800a55e:	2303      	movs	r3, #3
 800a560:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800a564:	e00a      	b.n	800a57c <f_mkfs+0x238>
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 800a566:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a56a:	f003 0301 	and.w	r3, r3, #1
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d101      	bne.n	800a576 <f_mkfs+0x232>
 800a572:	2313      	movs	r3, #19
 800a574:	e332      	b.n	800abdc <f_mkfs+0x898>
		fsty = FS_FAT16;
 800a576:	2302      	movs	r3, #2
 800a578:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	f103 43a8 	add.w	r3, r3, #1409286144	@ 0x54000000
 800a582:	f503 1304 	add.w	r3, r3, #2162688	@ 0x210000
 800a586:	62fb      	str	r3, [r7, #44]	@ 0x2c

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
 800a588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a58a:	663b      	str	r3, [r7, #96]	@ 0x60
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 800a58c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a590:	2b03      	cmp	r3, #3
 800a592:	d141      	bne.n	800a618 <f_mkfs+0x2d4>
				if (pau == 0) {	/* AU auto-selection */
 800a594:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a596:	2b00      	cmp	r3, #0
 800a598:	d120      	bne.n	800a5dc <f_mkfs+0x298>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	0c5b      	lsrs	r3, r3, #17
 800a59e:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	663b      	str	r3, [r7, #96]	@ 0x60
 800a5a8:	e00a      	b.n	800a5c0 <f_mkfs+0x27c>
 800a5aa:	bf00      	nop
 800a5ac:	20005cfc 	.word	0x20005cfc
 800a5b0:	08017650 	.word	0x08017650
 800a5b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a5bc:	005b      	lsls	r3, r3, #1
 800a5be:	663b      	str	r3, [r7, #96]	@ 0x60
 800a5c0:	4a95      	ldr	r2, [pc, #596]	@ (800a818 <f_mkfs+0x4d4>)
 800a5c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d007      	beq.n	800a5dc <f_mkfs+0x298>
 800a5cc:	4a92      	ldr	r2, [pc, #584]	@ (800a818 <f_mkfs+0x4d4>)
 800a5ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d2eb      	bcs.n	800a5b4 <f_mkfs+0x270>
				}
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 800a5dc:	69ba      	ldr	r2, [r7, #24]
 800a5de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a5e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5e4:	62bb      	str	r3, [r7, #40]	@ 0x28
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800a5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e8:	3302      	adds	r3, #2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	8c3a      	ldrh	r2, [r7, #32]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	8c3a      	ldrh	r2, [r7, #32]
 800a5f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5f8:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 800a5fa:	2320      	movs	r3, #32
 800a5fc:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = 0;		/* No static directory */
 800a5fe:	2300      	movs	r3, #0
 800a600:	653b      	str	r3, [r7, #80]	@ 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800a602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a604:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a608:	4293      	cmp	r3, r2
 800a60a:	d903      	bls.n	800a614 <f_mkfs+0x2d0>
 800a60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a60e:	4a83      	ldr	r2, [pc, #524]	@ (800a81c <f_mkfs+0x4d8>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d94b      	bls.n	800a6ac <f_mkfs+0x368>
 800a614:	230e      	movs	r3, #14
 800a616:	e2e1      	b.n	800abdc <f_mkfs+0x898>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 800a618:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d11b      	bne.n	800a656 <f_mkfs+0x312>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	0b1b      	lsrs	r3, r3, #12
 800a622:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a624:	2300      	movs	r3, #0
 800a626:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a628:	2301      	movs	r3, #1
 800a62a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a62c:	e005      	b.n	800a63a <f_mkfs+0x2f6>
 800a62e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a630:	3301      	adds	r3, #1
 800a632:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a634:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a636:	005b      	lsls	r3, r3, #1
 800a638:	663b      	str	r3, [r7, #96]	@ 0x60
 800a63a:	4a79      	ldr	r2, [pc, #484]	@ (800a820 <f_mkfs+0x4dc>)
 800a63c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a63e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d007      	beq.n	800a656 <f_mkfs+0x312>
 800a646:	4a76      	ldr	r2, [pc, #472]	@ (800a820 <f_mkfs+0x4dc>)
 800a648:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a64a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a64e:	461a      	mov	r2, r3
 800a650:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a652:	4293      	cmp	r3, r2
 800a654:	d2eb      	bcs.n	800a62e <f_mkfs+0x2ea>
				}
				n_clst = (DWORD)sz_vol / pau;
 800a656:	69ba      	ldr	r2, [r7, #24]
 800a658:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a65a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a65e:	62bb      	str	r3, [r7, #40]	@ 0x28
				if (n_clst > MAX_FAT12) {
 800a660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a662:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a666:	4293      	cmp	r3, r2
 800a668:	d904      	bls.n	800a674 <f_mkfs+0x330>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800a66a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66c:	3302      	adds	r3, #2
 800a66e:	005b      	lsls	r3, r3, #1
 800a670:	667b      	str	r3, [r7, #100]	@ 0x64
 800a672:	e00a      	b.n	800a68a <f_mkfs+0x346>
				} else {
					fsty = FS_FAT12;
 800a674:	2301      	movs	r3, #1
 800a676:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800a67a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a67c:	4613      	mov	r3, r2
 800a67e:	005b      	lsls	r3, r3, #1
 800a680:	4413      	add	r3, r2
 800a682:	3301      	adds	r3, #1
 800a684:	085b      	lsrs	r3, r3, #1
 800a686:	3303      	adds	r3, #3
 800a688:	667b      	str	r3, [r7, #100]	@ 0x64
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800a68a:	8c3b      	ldrh	r3, [r7, #32]
 800a68c:	461a      	mov	r2, r3
 800a68e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a690:	4413      	add	r3, r2
 800a692:	3b01      	subs	r3, #1
 800a694:	8c3a      	ldrh	r2, [r7, #32]
 800a696:	fbb3 f3f2 	udiv	r3, r3, r2
 800a69a:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 800a69c:	2301      	movs	r3, #1
 800a69e:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 800a6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a2:	015b      	lsls	r3, r3, #5
 800a6a4:	8c3a      	ldrh	r2, [r7, #32]
 800a6a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6aa:	653b      	str	r3, [r7, #80]	@ 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800a6ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a6ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a6b0:	4413      	add	r3, r2
 800a6b2:	66bb      	str	r3, [r7, #104]	@ 0x68
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800a6b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a6b8:	fb03 f202 	mul.w	r2, r3, r2
 800a6bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a6be:	4413      	add	r3, r2
 800a6c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a6c2:	4413      	add	r3, r2
 800a6c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 800a6c6:	69fa      	ldr	r2, [r7, #28]
 800a6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ca:	4413      	add	r3, r2
 800a6cc:	1e5a      	subs	r2, r3, #1
 800a6ce:	69fb      	ldr	r3, [r7, #28]
 800a6d0:	425b      	negs	r3, r3
 800a6d2:	401a      	ands	r2, r3
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d6:	1ad3      	subs	r3, r2, r3
 800a6d8:	667b      	str	r3, [r7, #100]	@ 0x64
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 800a6da:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a6de:	2b03      	cmp	r3, #3
 800a6e0:	d108      	bne.n	800a6f4 <f_mkfs+0x3b0>
				sz_rsv += n; b_fat += n;
 800a6e2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a6e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a6e6:	4413      	add	r3, r2
 800a6e8:	677b      	str	r3, [r7, #116]	@ 0x74
 800a6ea:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a6ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a6ee:	4413      	add	r3, r2
 800a6f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a6f2:	e019      	b.n	800a728 <f_mkfs+0x3e4>
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
 800a6f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a6f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a6f8:	fbb3 f2f2 	udiv	r2, r3, r2
 800a6fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a6fe:	fb01 f202 	mul.w	r2, r1, r2
 800a702:	1a9b      	subs	r3, r3, r2
 800a704:	2b00      	cmp	r3, #0
 800a706:	d008      	beq.n	800a71a <f_mkfs+0x3d6>
					n--; sz_rsv++; b_fat++;
 800a708:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a70a:	3b01      	subs	r3, #1
 800a70c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a70e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a710:	3301      	adds	r3, #1
 800a712:	677b      	str	r3, [r7, #116]	@ 0x74
 800a714:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a716:	3301      	adds	r3, #1
 800a718:	66bb      	str	r3, [r7, #104]	@ 0x68
				}
				sz_fat += n / n_fat;
 800a71a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a71c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a71e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a722:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a724:	4413      	add	r3, r2
 800a726:	657b      	str	r3, [r7, #84]	@ 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 800a728:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a72a:	011a      	lsls	r2, r3, #4
 800a72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a72e:	441a      	add	r2, r3
 800a730:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a732:	1ad2      	subs	r2, r2, r3
 800a734:	69bb      	ldr	r3, [r7, #24]
 800a736:	429a      	cmp	r2, r3
 800a738:	d901      	bls.n	800a73e <f_mkfs+0x3fa>
 800a73a:	230e      	movs	r3, #14
 800a73c:	e24e      	b.n	800abdc <f_mkfs+0x898>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 800a73e:	69ba      	ldr	r2, [r7, #24]
 800a740:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a742:	1ad2      	subs	r2, r2, r3
 800a744:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a746:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a748:	fb01 f303 	mul.w	r3, r1, r3
 800a74c:	1ad2      	subs	r2, r2, r3
 800a74e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a750:	1ad2      	subs	r2, r2, r3
 800a752:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a754:	fbb2 f3f3 	udiv	r3, r2, r3
 800a758:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (fsty == FS_FAT32) {
 800a75a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a75e:	2b03      	cmp	r3, #3
 800a760:	d10f      	bne.n	800a782 <f_mkfs+0x43e>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 800a762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a764:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a768:	4293      	cmp	r3, r2
 800a76a:	d80a      	bhi.n	800a782 <f_mkfs+0x43e>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a76c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d105      	bne.n	800a77e <f_mkfs+0x43a>
 800a772:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a774:	085b      	lsrs	r3, r3, #1
 800a776:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a778:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d145      	bne.n	800a80a <f_mkfs+0x4c6>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800a77e:	230e      	movs	r3, #14
 800a780:	e22c      	b.n	800abdc <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT16) {
 800a782:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a786:	2b02      	cmp	r3, #2
 800a788:	d134      	bne.n	800a7f4 <f_mkfs+0x4b0>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800a78a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a78c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a790:	4293      	cmp	r3, r2
 800a792:	d91f      	bls.n	800a7d4 <f_mkfs+0x490>
					if (sz_au == 0 && (pau * 2) <= 64) {
 800a794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a796:	2b00      	cmp	r3, #0
 800a798:	d107      	bne.n	800a7aa <f_mkfs+0x466>
 800a79a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a79c:	005b      	lsls	r3, r3, #1
 800a79e:	2b40      	cmp	r3, #64	@ 0x40
 800a7a0:	d803      	bhi.n	800a7aa <f_mkfs+0x466>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 800a7a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a7a4:	005b      	lsls	r3, r3, #1
 800a7a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7a8:	e034      	b.n	800a814 <f_mkfs+0x4d0>
					}
					if ((fsopt & FM_FAT32)) {
 800a7aa:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a7ae:	f003 0302 	and.w	r3, r3, #2
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d003      	beq.n	800a7be <f_mkfs+0x47a>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800a7b6:	2303      	movs	r3, #3
 800a7b8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800a7bc:	e02a      	b.n	800a814 <f_mkfs+0x4d0>
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a7be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d105      	bne.n	800a7d0 <f_mkfs+0x48c>
 800a7c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a7c6:	005b      	lsls	r3, r3, #1
 800a7c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7cc:	2b80      	cmp	r3, #128	@ 0x80
 800a7ce:	d91e      	bls.n	800a80e <f_mkfs+0x4ca>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800a7d0:	230e      	movs	r3, #14
 800a7d2:	e203      	b.n	800abdc <f_mkfs+0x898>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800a7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d80a      	bhi.n	800a7f4 <f_mkfs+0x4b0>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a7de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d105      	bne.n	800a7f0 <f_mkfs+0x4ac>
 800a7e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a7e6:	005b      	lsls	r3, r3, #1
 800a7e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7ec:	2b80      	cmp	r3, #128	@ 0x80
 800a7ee:	d910      	bls.n	800a812 <f_mkfs+0x4ce>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800a7f0:	230e      	movs	r3, #14
 800a7f2:	e1f3      	b.n	800abdc <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 800a7f4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d113      	bne.n	800a824 <f_mkfs+0x4e0>
 800a7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7fe:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a802:	4293      	cmp	r3, r2
 800a804:	d90e      	bls.n	800a824 <f_mkfs+0x4e0>
 800a806:	230e      	movs	r3, #14
 800a808:	e1e8      	b.n	800abdc <f_mkfs+0x898>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a80a:	bf00      	nop
 800a80c:	e6bc      	b.n	800a588 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a80e:	bf00      	nop
 800a810:	e6ba      	b.n	800a588 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a812:	bf00      	nop
			pau = sz_au;
 800a814:	e6b8      	b.n	800a588 <f_mkfs+0x244>
 800a816:	bf00      	nop
 800a818:	08017660 	.word	0x08017660
 800a81c:	0ffffff5 	.word	0x0ffffff5
 800a820:	08017670 	.word	0x08017670

			/* Ok, it is the valid cluster configuration */
			break;
 800a824:	bf00      	nop
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
 800a826:	8c3b      	ldrh	r3, [r7, #32]
 800a828:	461a      	mov	r2, r3
 800a82a:	2100      	movs	r1, #0
 800a82c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a82e:	f00b fb1b 	bl	8015e68 <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 800a832:	220b      	movs	r2, #11
 800a834:	49b1      	ldr	r1, [pc, #708]	@ (800aafc <f_mkfs+0x7b8>)
 800a836:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a838:	f00b fb9a 	bl	8015f70 <memcpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800a83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a83e:	330b      	adds	r3, #11
 800a840:	8c3a      	ldrh	r2, [r7, #32]
 800a842:	4611      	mov	r1, r2
 800a844:	4618      	mov	r0, r3
 800a846:	f7fd faaf 	bl	8007da8 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800a84a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a84c:	330d      	adds	r3, #13
 800a84e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a850:	b2d2      	uxtb	r2, r2
 800a852:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800a854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a856:	330e      	adds	r3, #14
 800a858:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a85a:	b292      	uxth	r2, r2
 800a85c:	4611      	mov	r1, r2
 800a85e:	4618      	mov	r0, r3
 800a860:	f7fd faa2 	bl	8007da8 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 800a864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a866:	3310      	adds	r3, #16
 800a868:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a86a:	b2d2      	uxtb	r2, r2
 800a86c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 800a86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a870:	f103 0211 	add.w	r2, r3, #17
 800a874:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a878:	2b03      	cmp	r3, #3
 800a87a:	d002      	beq.n	800a882 <f_mkfs+0x53e>
 800a87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a87e:	b29b      	uxth	r3, r3
 800a880:	e000      	b.n	800a884 <f_mkfs+0x540>
 800a882:	2300      	movs	r3, #0
 800a884:	4619      	mov	r1, r3
 800a886:	4610      	mov	r0, r2
 800a888:	f7fd fa8e 	bl	8007da8 <st_word>
		if (sz_vol < 0x10000) {
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a892:	d208      	bcs.n	800a8a6 <f_mkfs+0x562>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800a894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a896:	3313      	adds	r3, #19
 800a898:	69ba      	ldr	r2, [r7, #24]
 800a89a:	b292      	uxth	r2, r2
 800a89c:	4611      	mov	r1, r2
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7fd fa82 	bl	8007da8 <st_word>
 800a8a4:	e006      	b.n	800a8b4 <f_mkfs+0x570>
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 800a8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a8:	3320      	adds	r3, #32
 800a8aa:	69ba      	ldr	r2, [r7, #24]
 800a8ac:	4611      	mov	r1, r2
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7fd fa95 	bl	8007dde <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b6:	3315      	adds	r3, #21
 800a8b8:	22f8      	movs	r2, #248	@ 0xf8
 800a8ba:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800a8bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8be:	3318      	adds	r3, #24
 800a8c0:	213f      	movs	r1, #63	@ 0x3f
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7fd fa70 	bl	8007da8 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800a8c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ca:	331a      	adds	r3, #26
 800a8cc:	21ff      	movs	r1, #255	@ 0xff
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7fd fa6a 	bl	8007da8 <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 800a8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d6:	331c      	adds	r3, #28
 800a8d8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7fd fa7f 	bl	8007dde <st_dword>
		if (fsty == FS_FAT32) {
 800a8e0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a8e4:	2b03      	cmp	r3, #3
 800a8e6:	d12d      	bne.n	800a944 <f_mkfs+0x600>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 800a8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ea:	3343      	adds	r3, #67	@ 0x43
 800a8ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7fd fa75 	bl	8007dde <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800a8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f6:	3324      	adds	r3, #36	@ 0x24
 800a8f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7fd fa6f 	bl	8007dde <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800a900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a902:	332c      	adds	r3, #44	@ 0x2c
 800a904:	2102      	movs	r1, #2
 800a906:	4618      	mov	r0, r3
 800a908:	f7fd fa69 	bl	8007dde <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800a90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a90e:	3330      	adds	r3, #48	@ 0x30
 800a910:	2101      	movs	r1, #1
 800a912:	4618      	mov	r0, r3
 800a914:	f7fd fa48 	bl	8007da8 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800a918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a91a:	3332      	adds	r3, #50	@ 0x32
 800a91c:	2106      	movs	r1, #6
 800a91e:	4618      	mov	r0, r3
 800a920:	f7fd fa42 	bl	8007da8 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800a924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a926:	3340      	adds	r3, #64	@ 0x40
 800a928:	2280      	movs	r2, #128	@ 0x80
 800a92a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800a92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92e:	3342      	adds	r3, #66	@ 0x42
 800a930:	2229      	movs	r2, #41	@ 0x29
 800a932:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800a934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a936:	3347      	adds	r3, #71	@ 0x47
 800a938:	2213      	movs	r2, #19
 800a93a:	4971      	ldr	r1, [pc, #452]	@ (800ab00 <f_mkfs+0x7bc>)
 800a93c:	4618      	mov	r0, r3
 800a93e:	f00b fb17 	bl	8015f70 <memcpy>
 800a942:	e01c      	b.n	800a97e <f_mkfs+0x63a>
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 800a944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a946:	3327      	adds	r3, #39	@ 0x27
 800a948:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7fd fa47 	bl	8007dde <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800a950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a952:	3316      	adds	r3, #22
 800a954:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a956:	b292      	uxth	r2, r2
 800a958:	4611      	mov	r1, r2
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7fd fa24 	bl	8007da8 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800a960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a962:	3324      	adds	r3, #36	@ 0x24
 800a964:	2280      	movs	r2, #128	@ 0x80
 800a966:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800a968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a96a:	3326      	adds	r3, #38	@ 0x26
 800a96c:	2229      	movs	r2, #41	@ 0x29
 800a96e:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800a970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a972:	332b      	adds	r3, #43	@ 0x2b
 800a974:	2213      	movs	r2, #19
 800a976:	4963      	ldr	r1, [pc, #396]	@ (800ab04 <f_mkfs+0x7c0>)
 800a978:	4618      	mov	r0, r3
 800a97a:	f00b faf9 	bl	8015f70 <memcpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800a97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a980:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a984:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a988:	4618      	mov	r0, r3
 800a98a:	f7fd fa0d 	bl	8007da8 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 800a98e:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800a992:	2301      	movs	r3, #1
 800a994:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a996:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a998:	f7fd f914 	bl	8007bc4 <disk_write>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d001      	beq.n	800a9a6 <f_mkfs+0x662>
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e11a      	b.n	800abdc <f_mkfs+0x898>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 800a9a6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a9aa:	2b03      	cmp	r3, #3
 800a9ac:	d140      	bne.n	800aa30 <f_mkfs+0x6ec>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800a9ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9b0:	1d9a      	adds	r2, r3, #6
 800a9b2:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a9ba:	f7fd f903 	bl	8007bc4 <disk_write>
			memset(buf, 0, ss);
 800a9be:	8c3b      	ldrh	r3, [r7, #32]
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	2100      	movs	r1, #0
 800a9c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9c6:	f00b fa4f 	bl	8015e68 <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800a9ca:	494f      	ldr	r1, [pc, #316]	@ (800ab08 <f_mkfs+0x7c4>)
 800a9cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9ce:	f7fd fa06 	bl	8007dde <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800a9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9d4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a9d8:	494c      	ldr	r1, [pc, #304]	@ (800ab0c <f_mkfs+0x7c8>)
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fd f9ff 	bl	8007dde <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800a9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a9e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e8:	3b01      	subs	r3, #1
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	4610      	mov	r0, r2
 800a9ee:	f7fd f9f6 	bl	8007dde <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800a9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a9f8:	2102      	movs	r1, #2
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7fd f9ef 	bl	8007dde <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800aa00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa02:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800aa06:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7fd f9cc 	bl	8007da8 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800aa10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa12:	1dda      	adds	r2, r3, #7
 800aa14:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800aa18:	2301      	movs	r3, #1
 800aa1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aa1c:	f7fd f8d2 	bl	8007bc4 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800aa20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa22:	1c5a      	adds	r2, r3, #1
 800aa24:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800aa28:	2301      	movs	r3, #1
 800aa2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aa2c:	f7fd f8ca 	bl	8007bc4 <disk_write>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
 800aa30:	8c3b      	ldrh	r3, [r7, #32]
 800aa32:	461a      	mov	r2, r3
 800aa34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa36:	fb02 f303 	mul.w	r3, r2, r3
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa40:	f00b fa12 	bl	8015e68 <memset>
		sect = b_fat;		/* FAT start sector */
 800aa44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa46:	673b      	str	r3, [r7, #112]	@ 0x70
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800aa48:	2300      	movs	r3, #0
 800aa4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa4c:	e04b      	b.n	800aae6 <f_mkfs+0x7a2>
			if (fsty == FS_FAT32) {
 800aa4e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800aa52:	2b03      	cmp	r3, #3
 800aa54:	d113      	bne.n	800aa7e <f_mkfs+0x73a>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
 800aa56:	f06f 0107 	mvn.w	r1, #7
 800aa5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa5c:	f7fd f9bf 	bl	8007dde <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
 800aa60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa62:	3304      	adds	r3, #4
 800aa64:	f04f 31ff 	mov.w	r1, #4294967295
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f7fd f9b8 	bl	8007dde <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa70:	3308      	adds	r3, #8
 800aa72:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7fd f9b1 	bl	8007dde <st_dword>
 800aa7c:	e00b      	b.n	800aa96 <f_mkfs+0x752>
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 800aa7e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d101      	bne.n	800aa8a <f_mkfs+0x746>
 800aa86:	4b22      	ldr	r3, [pc, #136]	@ (800ab10 <f_mkfs+0x7cc>)
 800aa88:	e001      	b.n	800aa8e <f_mkfs+0x74a>
 800aa8a:	f06f 0307 	mvn.w	r3, #7
 800aa8e:	4619      	mov	r1, r3
 800aa90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa92:	f7fd f9a4 	bl	8007dde <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800aa96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa98:	65fb      	str	r3, [r7, #92]	@ 0x5c
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800aa9a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800aa9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	bf28      	it	cs
 800aaa2:	4613      	movcs	r3, r2
 800aaa4:	667b      	str	r3, [r7, #100]	@ 0x64
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800aaa6:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800aaaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aaac:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800aaae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aab0:	f7fd f888 	bl	8007bc4 <disk_write>
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d001      	beq.n	800aabe <f_mkfs+0x77a>
 800aaba:	2301      	movs	r3, #1
 800aabc:	e08e      	b.n	800abdc <f_mkfs+0x898>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
 800aabe:	8c3b      	ldrh	r3, [r7, #32]
 800aac0:	461a      	mov	r2, r3
 800aac2:	2100      	movs	r1, #0
 800aac4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aac6:	f00b f9cf 	bl	8015e68 <memset>
				sect += n; nsect -= n;
 800aaca:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800aacc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aace:	4413      	add	r3, r2
 800aad0:	673b      	str	r3, [r7, #112]	@ 0x70
 800aad2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800aad4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aad6:	1ad3      	subs	r3, r2, r3
 800aad8:	65fb      	str	r3, [r7, #92]	@ 0x5c
			} while (nsect);
 800aada:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d1dc      	bne.n	800aa9a <f_mkfs+0x756>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800aae0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aae2:	3301      	adds	r3, #1
 800aae4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aae6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d3af      	bcc.n	800aa4e <f_mkfs+0x70a>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800aaee:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800aaf2:	2b03      	cmp	r3, #3
 800aaf4:	d10e      	bne.n	800ab14 <f_mkfs+0x7d0>
 800aaf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aaf8:	e00d      	b.n	800ab16 <f_mkfs+0x7d2>
 800aafa:	bf00      	nop
 800aafc:	08017548 	.word	0x08017548
 800ab00:	08017554 	.word	0x08017554
 800ab04:	08017568 	.word	0x08017568
 800ab08:	41615252 	.word	0x41615252
 800ab0c:	61417272 	.word	0x61417272
 800ab10:	00fffff8 	.word	0x00fffff8
 800ab14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab16:	65fb      	str	r3, [r7, #92]	@ 0x5c
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800ab18:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ab1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	bf28      	it	cs
 800ab20:	4613      	movcs	r3, r2
 800ab22:	667b      	str	r3, [r7, #100]	@ 0x64
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800ab24:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800ab28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab2a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ab2c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ab2e:	f7fd f849 	bl	8007bc4 <disk_write>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d001      	beq.n	800ab3c <f_mkfs+0x7f8>
 800ab38:	2301      	movs	r3, #1
 800ab3a:	e04f      	b.n	800abdc <f_mkfs+0x898>
			sect += n; nsect -= n;
 800ab3c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ab3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab40:	4413      	add	r3, r2
 800ab42:	673b      	str	r3, [r7, #112]	@ 0x70
 800ab44:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ab46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab48:	1ad3      	subs	r3, r2, r3
 800ab4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		} while (nsect);
 800ab4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d1e2      	bne.n	800ab18 <f_mkfs+0x7d4>
	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;		/* exFAT */
	} else if (fsty == FS_FAT32) {
 800ab52:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ab56:	2b03      	cmp	r3, #3
 800ab58:	d103      	bne.n	800ab62 <f_mkfs+0x81e>
		sys = 0x0C;		/* FAT32X */
 800ab5a:	230c      	movs	r3, #12
 800ab5c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800ab60:	e012      	b.n	800ab88 <f_mkfs+0x844>
	} else if (sz_vol >= 0x10000) {
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab68:	d303      	bcc.n	800ab72 <f_mkfs+0x82e>
		sys = 0x06;		/* FAT12/16 (large) */
 800ab6a:	2306      	movs	r3, #6
 800ab6c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800ab70:	e00a      	b.n	800ab88 <f_mkfs+0x844>
	} else if (fsty == FS_FAT16) {
 800ab72:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ab76:	2b02      	cmp	r3, #2
 800ab78:	d103      	bne.n	800ab82 <f_mkfs+0x83e>
		sys = 0x04;		/* FAT16 */
 800ab7a:	2304      	movs	r3, #4
 800ab7c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800ab80:	e002      	b.n	800ab88 <f_mkfs+0x844>
	} else {
		sys = 0x01;		/* FAT12 */
 800ab82:	2301      	movs	r3, #1
 800ab84:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 800ab88:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800ab8c:	f003 0308 	and.w	r3, r3, #8
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d116      	bne.n	800abc2 <f_mkfs+0x87e>
			lba[0] = sz_vol; lba[1] = 0;
 800ab94:	69bb      	ldr	r3, [r7, #24]
 800ab96:	613b      	str	r3, [r7, #16]
 800ab98:	2300      	movs	r3, #0
 800ab9a:	617b      	str	r3, [r7, #20]
			res = create_partition(pdrv, lba, sys, buf);
 800ab9c:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 800aba0:	f107 0110 	add.w	r1, r7, #16
 800aba4:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800aba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abaa:	f7ff faa7 	bl	800a0fc <create_partition>
 800abae:	4603      	mov	r3, r0
 800abb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			if (res != FR_OK) LEAVE_MKFS(res);
 800abb4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d002      	beq.n	800abc2 <f_mkfs+0x87e>
 800abbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800abc0:	e00c      	b.n	800abdc <f_mkfs+0x898>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800abc2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800abc6:	2200      	movs	r2, #0
 800abc8:	2100      	movs	r1, #0
 800abca:	4618      	mov	r0, r3
 800abcc:	f7fd f82e 	bl	8007c2c <disk_ioctl>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d001      	beq.n	800abda <f_mkfs+0x896>
 800abd6:	2301      	movs	r3, #1
 800abd8:	e000      	b.n	800abdc <f_mkfs+0x898>

	LEAVE_MKFS(FR_OK);
 800abda:	2300      	movs	r3, #0
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3778      	adds	r7, #120	@ 0x78
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800abe4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800ac1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800abe8:	f7fc ff58 	bl	8007a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800abec:	480c      	ldr	r0, [pc, #48]	@ (800ac20 <LoopForever+0x6>)
  ldr r1, =_edata
 800abee:	490d      	ldr	r1, [pc, #52]	@ (800ac24 <LoopForever+0xa>)
  ldr r2, =_sidata
 800abf0:	4a0d      	ldr	r2, [pc, #52]	@ (800ac28 <LoopForever+0xe>)
  movs r3, #0
 800abf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800abf4:	e002      	b.n	800abfc <LoopCopyDataInit>

0800abf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800abf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800abf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800abfa:	3304      	adds	r3, #4

0800abfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800abfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800abfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ac00:	d3f9      	bcc.n	800abf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ac02:	4a0a      	ldr	r2, [pc, #40]	@ (800ac2c <LoopForever+0x12>)
  ldr r4, =_ebss
 800ac04:	4c0a      	ldr	r4, [pc, #40]	@ (800ac30 <LoopForever+0x16>)
  movs r3, #0
 800ac06:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ac08:	e001      	b.n	800ac0e <LoopFillZerobss>

0800ac0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ac0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ac0c:	3204      	adds	r2, #4

0800ac0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ac0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ac10:	d3fb      	bcc.n	800ac0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800ac12:	f00b f97f 	bl	8015f14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800ac16:	f7f9 fa05 	bl	8004024 <main>

0800ac1a <LoopForever>:

LoopForever:
    b LoopForever
 800ac1a:	e7fe      	b.n	800ac1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800ac1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800ac20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ac24:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800ac28:	080177e0 	.word	0x080177e0
  ldr r2, =_sbss
 800ac2c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800ac30:	20005e54 	.word	0x20005e54

0800ac34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800ac34:	e7fe      	b.n	800ac34 <ADC1_2_IRQHandler>

0800ac36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b082      	sub	sp, #8
 800ac3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ac40:	2003      	movs	r0, #3
 800ac42:	f001 fd11 	bl	800c668 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ac46:	200f      	movs	r0, #15
 800ac48:	f000 f80e 	bl	800ac68 <HAL_InitTick>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d002      	beq.n	800ac58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800ac52:	2301      	movs	r3, #1
 800ac54:	71fb      	strb	r3, [r7, #7]
 800ac56:	e001      	b.n	800ac5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800ac58:	f7fc fa56 	bl	8007108 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800ac5c:	79fb      	ldrb	r3, [r7, #7]
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3708      	adds	r7, #8
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
	...

0800ac68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800ac70:	2300      	movs	r3, #0
 800ac72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800ac74:	4b17      	ldr	r3, [pc, #92]	@ (800acd4 <HAL_InitTick+0x6c>)
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d023      	beq.n	800acc4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800ac7c:	4b16      	ldr	r3, [pc, #88]	@ (800acd8 <HAL_InitTick+0x70>)
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	4b14      	ldr	r3, [pc, #80]	@ (800acd4 <HAL_InitTick+0x6c>)
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	4619      	mov	r1, r3
 800ac86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ac8a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac92:	4618      	mov	r0, r3
 800ac94:	f001 fd21 	bl	800c6da <HAL_SYSTICK_Config>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d10f      	bne.n	800acbe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2b0f      	cmp	r3, #15
 800aca2:	d809      	bhi.n	800acb8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800aca4:	2200      	movs	r2, #0
 800aca6:	6879      	ldr	r1, [r7, #4]
 800aca8:	f04f 30ff 	mov.w	r0, #4294967295
 800acac:	f001 fce7 	bl	800c67e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800acb0:	4a0a      	ldr	r2, [pc, #40]	@ (800acdc <HAL_InitTick+0x74>)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6013      	str	r3, [r2, #0]
 800acb6:	e007      	b.n	800acc8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800acb8:	2301      	movs	r3, #1
 800acba:	73fb      	strb	r3, [r7, #15]
 800acbc:	e004      	b.n	800acc8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800acbe:	2301      	movs	r3, #1
 800acc0:	73fb      	strb	r3, [r7, #15]
 800acc2:	e001      	b.n	800acc8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800acc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acca:	4618      	mov	r0, r3
 800accc:	3710      	adds	r7, #16
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	20000178 	.word	0x20000178
 800acd8:	20000168 	.word	0x20000168
 800acdc:	20000174 	.word	0x20000174

0800ace0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ace0:	b480      	push	{r7}
 800ace2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800ace4:	4b06      	ldr	r3, [pc, #24]	@ (800ad00 <HAL_IncTick+0x20>)
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	461a      	mov	r2, r3
 800acea:	4b06      	ldr	r3, [pc, #24]	@ (800ad04 <HAL_IncTick+0x24>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4413      	add	r3, r2
 800acf0:	4a04      	ldr	r2, [pc, #16]	@ (800ad04 <HAL_IncTick+0x24>)
 800acf2:	6013      	str	r3, [r2, #0]
}
 800acf4:	bf00      	nop
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	20000178 	.word	0x20000178
 800ad04:	20005d08 	.word	0x20005d08

0800ad08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	af00      	add	r7, sp, #0
  return uwTick;
 800ad0c:	4b03      	ldr	r3, [pc, #12]	@ (800ad1c <HAL_GetTick+0x14>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr
 800ad1a:	bf00      	nop
 800ad1c:	20005d08 	.word	0x20005d08

0800ad20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ad28:	f7ff ffee 	bl	800ad08 <HAL_GetTick>
 800ad2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad38:	d005      	beq.n	800ad46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800ad3a:	4b0a      	ldr	r3, [pc, #40]	@ (800ad64 <HAL_Delay+0x44>)
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	4413      	add	r3, r2
 800ad44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800ad46:	bf00      	nop
 800ad48:	f7ff ffde 	bl	800ad08 <HAL_GetTick>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	1ad3      	subs	r3, r2, r3
 800ad52:	68fa      	ldr	r2, [r7, #12]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d8f7      	bhi.n	800ad48 <HAL_Delay+0x28>
  {
  }
}
 800ad58:	bf00      	nop
 800ad5a:	bf00      	nop
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	20000178 	.word	0x20000178

0800ad68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	431a      	orrs	r2, r3
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	609a      	str	r2, [r3, #8]
}
 800ad82:	bf00      	nop
 800ad84:	370c      	adds	r7, #12
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800ad8e:	b480      	push	{r7}
 800ad90:	b083      	sub	sp, #12
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
 800ad96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	689b      	ldr	r3, [r3, #8]
 800ad9c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	431a      	orrs	r2, r3
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	609a      	str	r2, [r3, #8]
}
 800ada8:	bf00      	nop
 800adaa:	370c      	adds	r7, #12
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800add0:	b480      	push	{r7}
 800add2:	b087      	sub	sp, #28
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	607a      	str	r2, [r7, #4]
 800addc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	3360      	adds	r3, #96	@ 0x60
 800ade2:	461a      	mov	r2, r3
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	4413      	add	r3, r2
 800adea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	4b08      	ldr	r3, [pc, #32]	@ (800ae14 <LL_ADC_SetOffset+0x44>)
 800adf2:	4013      	ands	r3, r2
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800adfa:	683a      	ldr	r2, [r7, #0]
 800adfc:	430a      	orrs	r2, r1
 800adfe:	4313      	orrs	r3, r2
 800ae00:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800ae08:	bf00      	nop
 800ae0a:	371c      	adds	r7, #28
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr
 800ae14:	03fff000 	.word	0x03fff000

0800ae18 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	3360      	adds	r3, #96	@ 0x60
 800ae26:	461a      	mov	r2, r3
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	4413      	add	r3, r2
 800ae2e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3714      	adds	r7, #20
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b087      	sub	sp, #28
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	3360      	adds	r3, #96	@ 0x60
 800ae54:	461a      	mov	r2, r3
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	4413      	add	r3, r2
 800ae5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	431a      	orrs	r2, r3
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800ae6e:	bf00      	nop
 800ae70:	371c      	adds	r7, #28
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr

0800ae7a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800ae7a:	b480      	push	{r7}
 800ae7c:	b083      	sub	sp, #12
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d101      	bne.n	800ae92 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800ae8e:	2301      	movs	r3, #1
 800ae90:	e000      	b.n	800ae94 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800ae92:	2300      	movs	r3, #0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b087      	sub	sp, #28
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	3330      	adds	r3, #48	@ 0x30
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	0a1b      	lsrs	r3, r3, #8
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	f003 030c 	and.w	r3, r3, #12
 800aebc:	4413      	add	r3, r2
 800aebe:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	f003 031f 	and.w	r3, r3, #31
 800aeca:	211f      	movs	r1, #31
 800aecc:	fa01 f303 	lsl.w	r3, r1, r3
 800aed0:	43db      	mvns	r3, r3
 800aed2:	401a      	ands	r2, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	0e9b      	lsrs	r3, r3, #26
 800aed8:	f003 011f 	and.w	r1, r3, #31
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	f003 031f 	and.w	r3, r3, #31
 800aee2:	fa01 f303 	lsl.w	r3, r1, r3
 800aee6:	431a      	orrs	r2, r3
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800aeec:	bf00      	nop
 800aeee:	371c      	adds	r7, #28
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b087      	sub	sp, #28
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	3314      	adds	r3, #20
 800af08:	461a      	mov	r2, r3
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	0e5b      	lsrs	r3, r3, #25
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	f003 0304 	and.w	r3, r3, #4
 800af14:	4413      	add	r3, r2
 800af16:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	0d1b      	lsrs	r3, r3, #20
 800af20:	f003 031f 	and.w	r3, r3, #31
 800af24:	2107      	movs	r1, #7
 800af26:	fa01 f303 	lsl.w	r3, r1, r3
 800af2a:	43db      	mvns	r3, r3
 800af2c:	401a      	ands	r2, r3
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	0d1b      	lsrs	r3, r3, #20
 800af32:	f003 031f 	and.w	r3, r3, #31
 800af36:	6879      	ldr	r1, [r7, #4]
 800af38:	fa01 f303 	lsl.w	r3, r1, r3
 800af3c:	431a      	orrs	r2, r3
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800af42:	bf00      	nop
 800af44:	371c      	adds	r7, #28
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr
	...

0800af50 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800af50:	b480      	push	{r7}
 800af52:	b085      	sub	sp, #20
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af68:	43db      	mvns	r3, r3
 800af6a:	401a      	ands	r2, r3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f003 0318 	and.w	r3, r3, #24
 800af72:	4908      	ldr	r1, [pc, #32]	@ (800af94 <LL_ADC_SetChannelSingleDiff+0x44>)
 800af74:	40d9      	lsrs	r1, r3
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	400b      	ands	r3, r1
 800af7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af7e:	431a      	orrs	r2, r3
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800af86:	bf00      	nop
 800af88:	3714      	adds	r7, #20
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop
 800af94:	0007ffff 	.word	0x0007ffff

0800af98 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	689b      	ldr	r3, [r3, #8]
 800afa4:	f003 031f 	and.w	r3, r3, #31
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	689b      	ldr	r3, [r3, #8]
 800afc0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800afc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	6093      	str	r3, [r2, #8]
}
 800afcc:	bf00      	nop
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800afd8:	b480      	push	{r7}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	689b      	ldr	r3, [r3, #8]
 800afe4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800afe8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afec:	d101      	bne.n	800aff2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800afee:	2301      	movs	r3, #1
 800aff0:	e000      	b.n	800aff4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800aff2:	2300      	movs	r3, #0
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	370c      	adds	r7, #12
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr

0800b000 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800b010:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b014:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800b01c:	bf00      	nop
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b038:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b03c:	d101      	bne.n	800b042 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800b03e:	2301      	movs	r3, #1
 800b040:	e000      	b.n	800b044 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b060:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b064:	f043 0201 	orr.w	r2, r3, #1
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800b06c:	bf00      	nop
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b088:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b08c:	f043 0202 	orr.w	r2, r3, #2
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800b094:	bf00      	nop
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	f003 0301 	and.w	r3, r3, #1
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d101      	bne.n	800b0b8 <LL_ADC_IsEnabled+0x18>
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	e000      	b.n	800b0ba <LL_ADC_IsEnabled+0x1a>
 800b0b8:	2300      	movs	r3, #0
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	370c      	adds	r7, #12
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr

0800b0c6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800b0c6:	b480      	push	{r7}
 800b0c8:	b083      	sub	sp, #12
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	689b      	ldr	r3, [r3, #8]
 800b0d2:	f003 0302 	and.w	r3, r3, #2
 800b0d6:	2b02      	cmp	r3, #2
 800b0d8:	d101      	bne.n	800b0de <LL_ADC_IsDisableOngoing+0x18>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e000      	b.n	800b0e0 <LL_ADC_IsDisableOngoing+0x1a>
 800b0de:	2300      	movs	r3, #0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	370c      	adds	r7, #12
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b083      	sub	sp, #12
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b0fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b100:	f043 0204 	orr.w	r2, r3, #4
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800b108:	bf00      	nop
 800b10a:	370c      	adds	r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b124:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b128:	f043 0210 	orr.w	r2, r3, #16
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800b130:	bf00      	nop
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	f003 0304 	and.w	r3, r3, #4
 800b14c:	2b04      	cmp	r3, #4
 800b14e:	d101      	bne.n	800b154 <LL_ADC_REG_IsConversionOngoing+0x18>
 800b150:	2301      	movs	r3, #1
 800b152:	e000      	b.n	800b156 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	370c      	adds	r7, #12
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr

0800b162 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800b162:	b480      	push	{r7}
 800b164:	b083      	sub	sp, #12
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	689b      	ldr	r3, [r3, #8]
 800b16e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b172:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b176:	f043 0220 	orr.w	r2, r3, #32
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800b17e:	bf00      	nop
 800b180:	370c      	adds	r7, #12
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr

0800b18a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b18a:	b480      	push	{r7}
 800b18c:	b083      	sub	sp, #12
 800b18e:	af00      	add	r7, sp, #0
 800b190:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	689b      	ldr	r3, [r3, #8]
 800b196:	f003 0308 	and.w	r3, r3, #8
 800b19a:	2b08      	cmp	r3, #8
 800b19c:	d101      	bne.n	800b1a2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e000      	b.n	800b1a4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800b1a2:	2300      	movs	r3, #0
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b1b0:	b590      	push	{r4, r7, lr}
 800b1b2:	b089      	sub	sp, #36	@ 0x24
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d101      	bne.n	800b1ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e130      	b.n	800b42c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	691b      	ldr	r3, [r3, #16]
 800b1ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d109      	bne.n	800b1ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f7fb ffb9 	bl	8007150 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7ff fef1 	bl	800afd8 <LL_ADC_IsDeepPowerDownEnabled>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d004      	beq.n	800b206 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4618      	mov	r0, r3
 800b202:	f7ff fed7 	bl	800afb4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7ff ff0c 	bl	800b028 <LL_ADC_IsInternalRegulatorEnabled>
 800b210:	4603      	mov	r3, r0
 800b212:	2b00      	cmp	r3, #0
 800b214:	d115      	bne.n	800b242 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7ff fef0 	bl	800b000 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b220:	4b84      	ldr	r3, [pc, #528]	@ (800b434 <HAL_ADC_Init+0x284>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	099b      	lsrs	r3, r3, #6
 800b226:	4a84      	ldr	r2, [pc, #528]	@ (800b438 <HAL_ADC_Init+0x288>)
 800b228:	fba2 2303 	umull	r2, r3, r2, r3
 800b22c:	099b      	lsrs	r3, r3, #6
 800b22e:	3301      	adds	r3, #1
 800b230:	005b      	lsls	r3, r3, #1
 800b232:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b234:	e002      	b.n	800b23c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	3b01      	subs	r3, #1
 800b23a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1f9      	bne.n	800b236 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4618      	mov	r0, r3
 800b248:	f7ff feee 	bl	800b028 <LL_ADC_IsInternalRegulatorEnabled>
 800b24c:	4603      	mov	r3, r0
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d10d      	bne.n	800b26e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b256:	f043 0210 	orr.w	r2, r3, #16
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b262:	f043 0201 	orr.w	r2, r3, #1
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800b26a:	2301      	movs	r3, #1
 800b26c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4618      	mov	r0, r3
 800b274:	f7ff ff62 	bl	800b13c <LL_ADC_REG_IsConversionOngoing>
 800b278:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b27e:	f003 0310 	and.w	r3, r3, #16
 800b282:	2b00      	cmp	r3, #0
 800b284:	f040 80c9 	bne.w	800b41a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f040 80c5 	bne.w	800b41a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b294:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800b298:	f043 0202 	orr.w	r2, r3, #2
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7ff fefb 	bl	800b0a0 <LL_ADC_IsEnabled>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d115      	bne.n	800b2dc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b2b0:	4862      	ldr	r0, [pc, #392]	@ (800b43c <HAL_ADC_Init+0x28c>)
 800b2b2:	f7ff fef5 	bl	800b0a0 <LL_ADC_IsEnabled>
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	4861      	ldr	r0, [pc, #388]	@ (800b440 <HAL_ADC_Init+0x290>)
 800b2ba:	f7ff fef1 	bl	800b0a0 <LL_ADC_IsEnabled>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	431c      	orrs	r4, r3
 800b2c2:	4860      	ldr	r0, [pc, #384]	@ (800b444 <HAL_ADC_Init+0x294>)
 800b2c4:	f7ff feec 	bl	800b0a0 <LL_ADC_IsEnabled>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	4323      	orrs	r3, r4
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d105      	bne.n	800b2dc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	485c      	ldr	r0, [pc, #368]	@ (800b448 <HAL_ADC_Init+0x298>)
 800b2d8:	f7ff fd46 	bl	800ad68 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	7e5b      	ldrb	r3, [r3, #25]
 800b2e0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b2e6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800b2ec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800b2f2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b2fa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b306:	2b01      	cmp	r3, #1
 800b308:	d106      	bne.n	800b318 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b30e:	3b01      	subs	r3, #1
 800b310:	045b      	lsls	r3, r3, #17
 800b312:	69ba      	ldr	r2, [r7, #24]
 800b314:	4313      	orrs	r3, r2
 800b316:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d009      	beq.n	800b334 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b324:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b32c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b32e:	69ba      	ldr	r2, [r7, #24]
 800b330:	4313      	orrs	r3, r2
 800b332:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	68da      	ldr	r2, [r3, #12]
 800b33a:	4b44      	ldr	r3, [pc, #272]	@ (800b44c <HAL_ADC_Init+0x29c>)
 800b33c:	4013      	ands	r3, r2
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	6812      	ldr	r2, [r2, #0]
 800b342:	69b9      	ldr	r1, [r7, #24]
 800b344:	430b      	orrs	r3, r1
 800b346:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7ff ff1c 	bl	800b18a <LL_ADC_INJ_IsConversionOngoing>
 800b352:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d13d      	bne.n	800b3d6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d13a      	bne.n	800b3d6 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b364:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b36c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b36e:	4313      	orrs	r3, r2
 800b370:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b37c:	f023 0302 	bic.w	r3, r3, #2
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	6812      	ldr	r2, [r2, #0]
 800b384:	69b9      	ldr	r1, [r7, #24]
 800b386:	430b      	orrs	r3, r1
 800b388:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b390:	2b01      	cmp	r3, #1
 800b392:	d118      	bne.n	800b3c6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	691b      	ldr	r3, [r3, #16]
 800b39a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b39e:	f023 0304 	bic.w	r3, r3, #4
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b3aa:	4311      	orrs	r1, r2
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800b3b0:	4311      	orrs	r1, r2
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b3b6:	430a      	orrs	r2, r1
 800b3b8:	431a      	orrs	r2, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f042 0201 	orr.w	r2, r2, #1
 800b3c2:	611a      	str	r2, [r3, #16]
 800b3c4:	e007      	b.n	800b3d6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	691a      	ldr	r2, [r3, #16]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f022 0201 	bic.w	r2, r2, #1
 800b3d4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	691b      	ldr	r3, [r3, #16]
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d10c      	bne.n	800b3f8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3e4:	f023 010f 	bic.w	r1, r3, #15
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	69db      	ldr	r3, [r3, #28]
 800b3ec:	1e5a      	subs	r2, r3, #1
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	430a      	orrs	r2, r1
 800b3f4:	631a      	str	r2, [r3, #48]	@ 0x30
 800b3f6:	e007      	b.n	800b408 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f022 020f 	bic.w	r2, r2, #15
 800b406:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b40c:	f023 0303 	bic.w	r3, r3, #3
 800b410:	f043 0201 	orr.w	r2, r3, #1
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	655a      	str	r2, [r3, #84]	@ 0x54
 800b418:	e007      	b.n	800b42a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b41e:	f043 0210 	orr.w	r2, r3, #16
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800b426:	2301      	movs	r3, #1
 800b428:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800b42a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3724      	adds	r7, #36	@ 0x24
 800b430:	46bd      	mov	sp, r7
 800b432:	bd90      	pop	{r4, r7, pc}
 800b434:	20000168 	.word	0x20000168
 800b438:	053e2d63 	.word	0x053e2d63
 800b43c:	50040000 	.word	0x50040000
 800b440:	50040100 	.word	0x50040100
 800b444:	50040200 	.word	0x50040200
 800b448:	50040300 	.word	0x50040300
 800b44c:	fff0c007 	.word	0xfff0c007

0800b450 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b086      	sub	sp, #24
 800b454:	af00      	add	r7, sp, #0
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b45c:	4853      	ldr	r0, [pc, #332]	@ (800b5ac <HAL_ADC_Start_DMA+0x15c>)
 800b45e:	f7ff fd9b 	bl	800af98 <LL_ADC_GetMultimode>
 800b462:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4618      	mov	r0, r3
 800b46a:	f7ff fe67 	bl	800b13c <LL_ADC_REG_IsConversionOngoing>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	f040 8093 	bne.w	800b59c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d101      	bne.n	800b484 <HAL_ADC_Start_DMA+0x34>
 800b480:	2302      	movs	r3, #2
 800b482:	e08e      	b.n	800b5a2 <HAL_ADC_Start_DMA+0x152>
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2201      	movs	r2, #1
 800b488:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a47      	ldr	r2, [pc, #284]	@ (800b5b0 <HAL_ADC_Start_DMA+0x160>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d008      	beq.n	800b4a8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d005      	beq.n	800b4a8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	2b05      	cmp	r3, #5
 800b4a0:	d002      	beq.n	800b4a8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	2b09      	cmp	r3, #9
 800b4a6:	d172      	bne.n	800b58e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	f000 fda7 	bl	800bffc <ADC_Enable>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800b4b2:	7dfb      	ldrb	r3, [r7, #23]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d165      	bne.n	800b584 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b4c0:	f023 0301 	bic.w	r3, r3, #1
 800b4c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a38      	ldr	r2, [pc, #224]	@ (800b5b4 <HAL_ADC_Start_DMA+0x164>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d002      	beq.n	800b4dc <HAL_ADC_Start_DMA+0x8c>
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	e000      	b.n	800b4de <HAL_ADC_Start_DMA+0x8e>
 800b4dc:	4b36      	ldr	r3, [pc, #216]	@ (800b5b8 <HAL_ADC_Start_DMA+0x168>)
 800b4de:	68fa      	ldr	r2, [r7, #12]
 800b4e0:	6812      	ldr	r2, [r2, #0]
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d002      	beq.n	800b4ec <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d105      	bne.n	800b4f8 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b500:	2b00      	cmp	r3, #0
 800b502:	d006      	beq.n	800b512 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b508:	f023 0206 	bic.w	r2, r3, #6
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	659a      	str	r2, [r3, #88]	@ 0x58
 800b510:	e002      	b.n	800b518 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2200      	movs	r2, #0
 800b516:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b51c:	4a27      	ldr	r2, [pc, #156]	@ (800b5bc <HAL_ADC_Start_DMA+0x16c>)
 800b51e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b524:	4a26      	ldr	r2, [pc, #152]	@ (800b5c0 <HAL_ADC_Start_DMA+0x170>)
 800b526:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b52c:	4a25      	ldr	r2, [pc, #148]	@ (800b5c4 <HAL_ADC_Start_DMA+0x174>)
 800b52e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	221c      	movs	r2, #28
 800b536:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	685a      	ldr	r2, [r3, #4]
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f042 0210 	orr.w	r2, r2, #16
 800b54e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	68da      	ldr	r2, [r3, #12]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f042 0201 	orr.w	r2, r2, #1
 800b55e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	3340      	adds	r3, #64	@ 0x40
 800b56a:	4619      	mov	r1, r3
 800b56c:	68ba      	ldr	r2, [r7, #8]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f001 fbb0 	bl	800ccd4 <HAL_DMA_Start_IT>
 800b574:	4603      	mov	r3, r0
 800b576:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7ff fdb5 	bl	800b0ec <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800b582:	e00d      	b.n	800b5a0 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2200      	movs	r2, #0
 800b588:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800b58c:	e008      	b.n	800b5a0 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800b58e:	2301      	movs	r3, #1
 800b590:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2200      	movs	r2, #0
 800b596:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800b59a:	e001      	b.n	800b5a0 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800b59c:	2302      	movs	r3, #2
 800b59e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800b5a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3718      	adds	r7, #24
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	50040300 	.word	0x50040300
 800b5b0:	50040200 	.word	0x50040200
 800b5b4:	50040100 	.word	0x50040100
 800b5b8:	50040000 	.word	0x50040000
 800b5bc:	0800c1c7 	.word	0x0800c1c7
 800b5c0:	0800c29f 	.word	0x0800c29f
 800b5c4:	0800c2bb 	.word	0x0800c2bb

0800b5c8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b084      	sub	sp, #16
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d101      	bne.n	800b5de <HAL_ADC_Stop_DMA+0x16>
 800b5da:	2302      	movs	r3, #2
 800b5dc:	e051      	b.n	800b682 <HAL_ADC_Stop_DMA+0xba>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800b5e6:	2103      	movs	r1, #3
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 fc4b 	bl	800be84 <ADC_ConversionStop>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800b5f2:	7bfb      	ldrb	r3, [r7, #15]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d13f      	bne.n	800b678 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	68da      	ldr	r2, [r3, #12]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f022 0201 	bic.w	r2, r2, #1
 800b606:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b60c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b610:	b2db      	uxtb	r3, r3
 800b612:	2b02      	cmp	r3, #2
 800b614:	d10f      	bne.n	800b636 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b61a:	4618      	mov	r0, r3
 800b61c:	f001 fbba 	bl	800cd94 <HAL_DMA_Abort>
 800b620:	4603      	mov	r3, r0
 800b622:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800b624:	7bfb      	ldrb	r3, [r7, #15]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d005      	beq.n	800b636 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b62e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	685a      	ldr	r2, [r3, #4]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f022 0210 	bic.w	r2, r2, #16
 800b644:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800b646:	7bfb      	ldrb	r3, [r7, #15]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d105      	bne.n	800b658 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 fd5b 	bl	800c108 <ADC_Disable>
 800b652:	4603      	mov	r3, r0
 800b654:	73fb      	strb	r3, [r7, #15]
 800b656:	e002      	b.n	800b65e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 fd55 	bl	800c108 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800b65e:	7bfb      	ldrb	r3, [r7, #15]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d109      	bne.n	800b678 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b668:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800b66c:	f023 0301 	bic.w	r3, r3, #1
 800b670:	f043 0201 	orr.w	r2, r3, #1
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800b680:	7bfb      	ldrb	r3, [r7, #15]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3710      	adds	r7, #16
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800b68a:	b480      	push	{r7}
 800b68c:	b083      	sub	sp, #12
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800b692:	bf00      	nop
 800b694:	370c      	adds	r7, #12
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr
	...

0800b6a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b0b6      	sub	sp, #216	@ 0xd8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d101      	bne.n	800b6c2 <HAL_ADC_ConfigChannel+0x22>
 800b6be:	2302      	movs	r3, #2
 800b6c0:	e3c9      	b.n	800be56 <HAL_ADC_ConfigChannel+0x7b6>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f7ff fd34 	bl	800b13c <LL_ADC_REG_IsConversionOngoing>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	f040 83aa 	bne.w	800be30 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	2b05      	cmp	r3, #5
 800b6ea:	d824      	bhi.n	800b736 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	3b02      	subs	r3, #2
 800b6f2:	2b03      	cmp	r3, #3
 800b6f4:	d81b      	bhi.n	800b72e <HAL_ADC_ConfigChannel+0x8e>
 800b6f6:	a201      	add	r2, pc, #4	@ (adr r2, 800b6fc <HAL_ADC_ConfigChannel+0x5c>)
 800b6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6fc:	0800b70d 	.word	0x0800b70d
 800b700:	0800b715 	.word	0x0800b715
 800b704:	0800b71d 	.word	0x0800b71d
 800b708:	0800b725 	.word	0x0800b725
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800b70c:	230c      	movs	r3, #12
 800b70e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800b712:	e010      	b.n	800b736 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800b714:	2312      	movs	r3, #18
 800b716:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800b71a:	e00c      	b.n	800b736 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800b71c:	2318      	movs	r3, #24
 800b71e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800b722:	e008      	b.n	800b736 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800b724:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b728:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800b72c:	e003      	b.n	800b736 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800b72e:	2306      	movs	r3, #6
 800b730:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800b734:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6818      	ldr	r0, [r3, #0]
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	461a      	mov	r2, r3
 800b740:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800b744:	f7ff fbac 	bl	800aea0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7ff fcf5 	bl	800b13c <LL_ADC_REG_IsConversionOngoing>
 800b752:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7ff fd15 	bl	800b18a <LL_ADC_INJ_IsConversionOngoing>
 800b760:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b764:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b768:	2b00      	cmp	r3, #0
 800b76a:	f040 81a4 	bne.w	800bab6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b76e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b772:	2b00      	cmp	r3, #0
 800b774:	f040 819f 	bne.w	800bab6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6818      	ldr	r0, [r3, #0]
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	6819      	ldr	r1, [r3, #0]
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	461a      	mov	r2, r3
 800b786:	f7ff fbb7 	bl	800aef8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	695a      	ldr	r2, [r3, #20]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	08db      	lsrs	r3, r3, #3
 800b796:	f003 0303 	and.w	r3, r3, #3
 800b79a:	005b      	lsls	r3, r3, #1
 800b79c:	fa02 f303 	lsl.w	r3, r2, r3
 800b7a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	691b      	ldr	r3, [r3, #16]
 800b7a8:	2b04      	cmp	r3, #4
 800b7aa:	d00a      	beq.n	800b7c2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6818      	ldr	r0, [r3, #0]
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	6919      	ldr	r1, [r3, #16]
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b7bc:	f7ff fb08 	bl	800add0 <LL_ADC_SetOffset>
 800b7c0:	e179      	b.n	800bab6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2100      	movs	r1, #0
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7ff fb25 	bl	800ae18 <LL_ADC_GetOffsetChannel>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d10a      	bne.n	800b7ee <HAL_ADC_ConfigChannel+0x14e>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2100      	movs	r1, #0
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7ff fb1a 	bl	800ae18 <LL_ADC_GetOffsetChannel>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	0e9b      	lsrs	r3, r3, #26
 800b7e8:	f003 021f 	and.w	r2, r3, #31
 800b7ec:	e01e      	b.n	800b82c <HAL_ADC_ConfigChannel+0x18c>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7ff fb0f 	bl	800ae18 <LL_ADC_GetOffsetChannel>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b800:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b804:	fa93 f3a3 	rbit	r3, r3
 800b808:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800b80c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b810:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800b814:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d101      	bne.n	800b820 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800b81c:	2320      	movs	r3, #32
 800b81e:	e004      	b.n	800b82a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800b820:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b824:	fab3 f383 	clz	r3, r3
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b834:	2b00      	cmp	r3, #0
 800b836:	d105      	bne.n	800b844 <HAL_ADC_ConfigChannel+0x1a4>
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	0e9b      	lsrs	r3, r3, #26
 800b83e:	f003 031f 	and.w	r3, r3, #31
 800b842:	e018      	b.n	800b876 <HAL_ADC_ConfigChannel+0x1d6>
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b84c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b850:	fa93 f3a3 	rbit	r3, r3
 800b854:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800b858:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b85c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800b860:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b864:	2b00      	cmp	r3, #0
 800b866:	d101      	bne.n	800b86c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800b868:	2320      	movs	r3, #32
 800b86a:	e004      	b.n	800b876 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800b86c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b870:	fab3 f383 	clz	r3, r3
 800b874:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b876:	429a      	cmp	r2, r3
 800b878:	d106      	bne.n	800b888 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	2200      	movs	r2, #0
 800b880:	2100      	movs	r1, #0
 800b882:	4618      	mov	r0, r3
 800b884:	f7ff fade 	bl	800ae44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	2101      	movs	r1, #1
 800b88e:	4618      	mov	r0, r3
 800b890:	f7ff fac2 	bl	800ae18 <LL_ADC_GetOffsetChannel>
 800b894:	4603      	mov	r3, r0
 800b896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d10a      	bne.n	800b8b4 <HAL_ADC_ConfigChannel+0x214>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	2101      	movs	r1, #1
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f7ff fab7 	bl	800ae18 <LL_ADC_GetOffsetChannel>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	0e9b      	lsrs	r3, r3, #26
 800b8ae:	f003 021f 	and.w	r2, r3, #31
 800b8b2:	e01e      	b.n	800b8f2 <HAL_ADC_ConfigChannel+0x252>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2101      	movs	r1, #1
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7ff faac 	bl	800ae18 <LL_ADC_GetOffsetChannel>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b8ca:	fa93 f3a3 	rbit	r3, r3
 800b8ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800b8d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b8d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800b8da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d101      	bne.n	800b8e6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800b8e2:	2320      	movs	r3, #32
 800b8e4:	e004      	b.n	800b8f0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800b8e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b8ea:	fab3 f383 	clz	r3, r3
 800b8ee:	b2db      	uxtb	r3, r3
 800b8f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d105      	bne.n	800b90a <HAL_ADC_ConfigChannel+0x26a>
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	0e9b      	lsrs	r3, r3, #26
 800b904:	f003 031f 	and.w	r3, r3, #31
 800b908:	e018      	b.n	800b93c <HAL_ADC_ConfigChannel+0x29c>
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b912:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b916:	fa93 f3a3 	rbit	r3, r3
 800b91a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800b91e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b922:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800b926:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d101      	bne.n	800b932 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800b92e:	2320      	movs	r3, #32
 800b930:	e004      	b.n	800b93c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800b932:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b936:	fab3 f383 	clz	r3, r3
 800b93a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d106      	bne.n	800b94e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	2200      	movs	r2, #0
 800b946:	2101      	movs	r1, #1
 800b948:	4618      	mov	r0, r3
 800b94a:	f7ff fa7b 	bl	800ae44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2102      	movs	r1, #2
 800b954:	4618      	mov	r0, r3
 800b956:	f7ff fa5f 	bl	800ae18 <LL_ADC_GetOffsetChannel>
 800b95a:	4603      	mov	r3, r0
 800b95c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b960:	2b00      	cmp	r3, #0
 800b962:	d10a      	bne.n	800b97a <HAL_ADC_ConfigChannel+0x2da>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	2102      	movs	r1, #2
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7ff fa54 	bl	800ae18 <LL_ADC_GetOffsetChannel>
 800b970:	4603      	mov	r3, r0
 800b972:	0e9b      	lsrs	r3, r3, #26
 800b974:	f003 021f 	and.w	r2, r3, #31
 800b978:	e01e      	b.n	800b9b8 <HAL_ADC_ConfigChannel+0x318>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	2102      	movs	r1, #2
 800b980:	4618      	mov	r0, r3
 800b982:	f7ff fa49 	bl	800ae18 <LL_ADC_GetOffsetChannel>
 800b986:	4603      	mov	r3, r0
 800b988:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b98c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b990:	fa93 f3a3 	rbit	r3, r3
 800b994:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800b998:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b99c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800b9a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d101      	bne.n	800b9ac <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800b9a8:	2320      	movs	r3, #32
 800b9aa:	e004      	b.n	800b9b6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800b9ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b9b0:	fab3 f383 	clz	r3, r3
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d105      	bne.n	800b9d0 <HAL_ADC_ConfigChannel+0x330>
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	0e9b      	lsrs	r3, r3, #26
 800b9ca:	f003 031f 	and.w	r3, r3, #31
 800b9ce:	e014      	b.n	800b9fa <HAL_ADC_ConfigChannel+0x35a>
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b9d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b9d8:	fa93 f3a3 	rbit	r3, r3
 800b9dc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800b9de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b9e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800b9e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d101      	bne.n	800b9f0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800b9ec:	2320      	movs	r3, #32
 800b9ee:	e004      	b.n	800b9fa <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800b9f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b9f4:	fab3 f383 	clz	r3, r3
 800b9f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d106      	bne.n	800ba0c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2200      	movs	r2, #0
 800ba04:	2102      	movs	r1, #2
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7ff fa1c 	bl	800ae44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2103      	movs	r1, #3
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7ff fa00 	bl	800ae18 <LL_ADC_GetOffsetChannel>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d10a      	bne.n	800ba38 <HAL_ADC_ConfigChannel+0x398>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	2103      	movs	r1, #3
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7ff f9f5 	bl	800ae18 <LL_ADC_GetOffsetChannel>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	0e9b      	lsrs	r3, r3, #26
 800ba32:	f003 021f 	and.w	r2, r3, #31
 800ba36:	e017      	b.n	800ba68 <HAL_ADC_ConfigChannel+0x3c8>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2103      	movs	r1, #3
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7ff f9ea 	bl	800ae18 <LL_ADC_GetOffsetChannel>
 800ba44:	4603      	mov	r3, r0
 800ba46:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ba4a:	fa93 f3a3 	rbit	r3, r3
 800ba4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800ba50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba52:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800ba54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d101      	bne.n	800ba5e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800ba5a:	2320      	movs	r3, #32
 800ba5c:	e003      	b.n	800ba66 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800ba5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba60:	fab3 f383 	clz	r3, r3
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d105      	bne.n	800ba80 <HAL_ADC_ConfigChannel+0x3e0>
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	0e9b      	lsrs	r3, r3, #26
 800ba7a:	f003 031f 	and.w	r3, r3, #31
 800ba7e:	e011      	b.n	800baa4 <HAL_ADC_ConfigChannel+0x404>
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba88:	fa93 f3a3 	rbit	r3, r3
 800ba8c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800ba8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba90:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800ba92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d101      	bne.n	800ba9c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800ba98:	2320      	movs	r3, #32
 800ba9a:	e003      	b.n	800baa4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800ba9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba9e:	fab3 f383 	clz	r3, r3
 800baa2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d106      	bne.n	800bab6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2200      	movs	r2, #0
 800baae:	2103      	movs	r1, #3
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7ff f9c7 	bl	800ae44 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4618      	mov	r0, r3
 800babc:	f7ff faf0 	bl	800b0a0 <LL_ADC_IsEnabled>
 800bac0:	4603      	mov	r3, r0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	f040 8140 	bne.w	800bd48 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6818      	ldr	r0, [r3, #0]
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	6819      	ldr	r1, [r3, #0]
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	68db      	ldr	r3, [r3, #12]
 800bad4:	461a      	mov	r2, r3
 800bad6:	f7ff fa3b 	bl	800af50 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	68db      	ldr	r3, [r3, #12]
 800bade:	4a8f      	ldr	r2, [pc, #572]	@ (800bd1c <HAL_ADC_ConfigChannel+0x67c>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	f040 8131 	bne.w	800bd48 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d10b      	bne.n	800bb0e <HAL_ADC_ConfigChannel+0x46e>
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	0e9b      	lsrs	r3, r3, #26
 800bafc:	3301      	adds	r3, #1
 800bafe:	f003 031f 	and.w	r3, r3, #31
 800bb02:	2b09      	cmp	r3, #9
 800bb04:	bf94      	ite	ls
 800bb06:	2301      	movls	r3, #1
 800bb08:	2300      	movhi	r3, #0
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	e019      	b.n	800bb42 <HAL_ADC_ConfigChannel+0x4a2>
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb16:	fa93 f3a3 	rbit	r3, r3
 800bb1a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800bb1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800bb20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d101      	bne.n	800bb2a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800bb26:	2320      	movs	r3, #32
 800bb28:	e003      	b.n	800bb32 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800bb2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb2c:	fab3 f383 	clz	r3, r3
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	3301      	adds	r3, #1
 800bb34:	f003 031f 	and.w	r3, r3, #31
 800bb38:	2b09      	cmp	r3, #9
 800bb3a:	bf94      	ite	ls
 800bb3c:	2301      	movls	r3, #1
 800bb3e:	2300      	movhi	r3, #0
 800bb40:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d079      	beq.n	800bc3a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d107      	bne.n	800bb62 <HAL_ADC_ConfigChannel+0x4c2>
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	0e9b      	lsrs	r3, r3, #26
 800bb58:	3301      	adds	r3, #1
 800bb5a:	069b      	lsls	r3, r3, #26
 800bb5c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bb60:	e015      	b.n	800bb8e <HAL_ADC_ConfigChannel+0x4ee>
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb6a:	fa93 f3a3 	rbit	r3, r3
 800bb6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800bb70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb72:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800bb74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d101      	bne.n	800bb7e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800bb7a:	2320      	movs	r3, #32
 800bb7c:	e003      	b.n	800bb86 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800bb7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb80:	fab3 f383 	clz	r3, r3
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	3301      	adds	r3, #1
 800bb88:	069b      	lsls	r3, r3, #26
 800bb8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d109      	bne.n	800bbae <HAL_ADC_ConfigChannel+0x50e>
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	0e9b      	lsrs	r3, r3, #26
 800bba0:	3301      	adds	r3, #1
 800bba2:	f003 031f 	and.w	r3, r3, #31
 800bba6:	2101      	movs	r1, #1
 800bba8:	fa01 f303 	lsl.w	r3, r1, r3
 800bbac:	e017      	b.n	800bbde <HAL_ADC_ConfigChannel+0x53e>
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bbb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbb6:	fa93 f3a3 	rbit	r3, r3
 800bbba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800bbbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbbe:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800bbc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d101      	bne.n	800bbca <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800bbc6:	2320      	movs	r3, #32
 800bbc8:	e003      	b.n	800bbd2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800bbca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbcc:	fab3 f383 	clz	r3, r3
 800bbd0:	b2db      	uxtb	r3, r3
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	f003 031f 	and.w	r3, r3, #31
 800bbd8:	2101      	movs	r1, #1
 800bbda:	fa01 f303 	lsl.w	r3, r1, r3
 800bbde:	ea42 0103 	orr.w	r1, r2, r3
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d10a      	bne.n	800bc04 <HAL_ADC_ConfigChannel+0x564>
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	0e9b      	lsrs	r3, r3, #26
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	f003 021f 	and.w	r2, r3, #31
 800bbfa:	4613      	mov	r3, r2
 800bbfc:	005b      	lsls	r3, r3, #1
 800bbfe:	4413      	add	r3, r2
 800bc00:	051b      	lsls	r3, r3, #20
 800bc02:	e018      	b.n	800bc36 <HAL_ADC_ConfigChannel+0x596>
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc0c:	fa93 f3a3 	rbit	r3, r3
 800bc10:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800bc12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc14:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800bc16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d101      	bne.n	800bc20 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800bc1c:	2320      	movs	r3, #32
 800bc1e:	e003      	b.n	800bc28 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800bc20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc22:	fab3 f383 	clz	r3, r3
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	3301      	adds	r3, #1
 800bc2a:	f003 021f 	and.w	r2, r3, #31
 800bc2e:	4613      	mov	r3, r2
 800bc30:	005b      	lsls	r3, r3, #1
 800bc32:	4413      	add	r3, r2
 800bc34:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bc36:	430b      	orrs	r3, r1
 800bc38:	e081      	b.n	800bd3e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d107      	bne.n	800bc56 <HAL_ADC_ConfigChannel+0x5b6>
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	0e9b      	lsrs	r3, r3, #26
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	069b      	lsls	r3, r3, #26
 800bc50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bc54:	e015      	b.n	800bc82 <HAL_ADC_ConfigChannel+0x5e2>
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc5e:	fa93 f3a3 	rbit	r3, r3
 800bc62:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800bc64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800bc68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d101      	bne.n	800bc72 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800bc6e:	2320      	movs	r3, #32
 800bc70:	e003      	b.n	800bc7a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800bc72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc74:	fab3 f383 	clz	r3, r3
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	069b      	lsls	r3, r3, #26
 800bc7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d109      	bne.n	800bca2 <HAL_ADC_ConfigChannel+0x602>
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	0e9b      	lsrs	r3, r3, #26
 800bc94:	3301      	adds	r3, #1
 800bc96:	f003 031f 	and.w	r3, r3, #31
 800bc9a:	2101      	movs	r1, #1
 800bc9c:	fa01 f303 	lsl.w	r3, r1, r3
 800bca0:	e017      	b.n	800bcd2 <HAL_ADC_ConfigChannel+0x632>
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bca8:	69fb      	ldr	r3, [r7, #28]
 800bcaa:	fa93 f3a3 	rbit	r3, r3
 800bcae:	61bb      	str	r3, [r7, #24]
  return result;
 800bcb0:	69bb      	ldr	r3, [r7, #24]
 800bcb2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800bcb4:	6a3b      	ldr	r3, [r7, #32]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d101      	bne.n	800bcbe <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800bcba:	2320      	movs	r3, #32
 800bcbc:	e003      	b.n	800bcc6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800bcbe:	6a3b      	ldr	r3, [r7, #32]
 800bcc0:	fab3 f383 	clz	r3, r3
 800bcc4:	b2db      	uxtb	r3, r3
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	f003 031f 	and.w	r3, r3, #31
 800bccc:	2101      	movs	r1, #1
 800bcce:	fa01 f303 	lsl.w	r3, r1, r3
 800bcd2:	ea42 0103 	orr.w	r1, r2, r3
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d10d      	bne.n	800bcfe <HAL_ADC_ConfigChannel+0x65e>
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	0e9b      	lsrs	r3, r3, #26
 800bce8:	3301      	adds	r3, #1
 800bcea:	f003 021f 	and.w	r2, r3, #31
 800bcee:	4613      	mov	r3, r2
 800bcf0:	005b      	lsls	r3, r3, #1
 800bcf2:	4413      	add	r3, r2
 800bcf4:	3b1e      	subs	r3, #30
 800bcf6:	051b      	lsls	r3, r3, #20
 800bcf8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bcfc:	e01e      	b.n	800bd3c <HAL_ADC_ConfigChannel+0x69c>
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	fa93 f3a3 	rbit	r3, r3
 800bd0a:	60fb      	str	r3, [r7, #12]
  return result;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d104      	bne.n	800bd20 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800bd16:	2320      	movs	r3, #32
 800bd18:	e006      	b.n	800bd28 <HAL_ADC_ConfigChannel+0x688>
 800bd1a:	bf00      	nop
 800bd1c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	fab3 f383 	clz	r3, r3
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	3301      	adds	r3, #1
 800bd2a:	f003 021f 	and.w	r2, r3, #31
 800bd2e:	4613      	mov	r3, r2
 800bd30:	005b      	lsls	r3, r3, #1
 800bd32:	4413      	add	r3, r2
 800bd34:	3b1e      	subs	r3, #30
 800bd36:	051b      	lsls	r3, r3, #20
 800bd38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bd3c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800bd3e:	683a      	ldr	r2, [r7, #0]
 800bd40:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bd42:	4619      	mov	r1, r3
 800bd44:	f7ff f8d8 	bl	800aef8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	4b44      	ldr	r3, [pc, #272]	@ (800be60 <HAL_ADC_ConfigChannel+0x7c0>)
 800bd4e:	4013      	ands	r3, r2
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d07a      	beq.n	800be4a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800bd54:	4843      	ldr	r0, [pc, #268]	@ (800be64 <HAL_ADC_ConfigChannel+0x7c4>)
 800bd56:	f7ff f82d 	bl	800adb4 <LL_ADC_GetCommonPathInternalCh>
 800bd5a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a41      	ldr	r2, [pc, #260]	@ (800be68 <HAL_ADC_ConfigChannel+0x7c8>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d12c      	bne.n	800bdc2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800bd68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bd6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d126      	bne.n	800bdc2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a3c      	ldr	r2, [pc, #240]	@ (800be6c <HAL_ADC_ConfigChannel+0x7cc>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d004      	beq.n	800bd88 <HAL_ADC_ConfigChannel+0x6e8>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a3b      	ldr	r2, [pc, #236]	@ (800be70 <HAL_ADC_ConfigChannel+0x7d0>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d15d      	bne.n	800be44 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800bd88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bd8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bd90:	4619      	mov	r1, r3
 800bd92:	4834      	ldr	r0, [pc, #208]	@ (800be64 <HAL_ADC_ConfigChannel+0x7c4>)
 800bd94:	f7fe fffb 	bl	800ad8e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800bd98:	4b36      	ldr	r3, [pc, #216]	@ (800be74 <HAL_ADC_ConfigChannel+0x7d4>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	099b      	lsrs	r3, r3, #6
 800bd9e:	4a36      	ldr	r2, [pc, #216]	@ (800be78 <HAL_ADC_ConfigChannel+0x7d8>)
 800bda0:	fba2 2303 	umull	r2, r3, r2, r3
 800bda4:	099b      	lsrs	r3, r3, #6
 800bda6:	1c5a      	adds	r2, r3, #1
 800bda8:	4613      	mov	r3, r2
 800bdaa:	005b      	lsls	r3, r3, #1
 800bdac:	4413      	add	r3, r2
 800bdae:	009b      	lsls	r3, r3, #2
 800bdb0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800bdb2:	e002      	b.n	800bdba <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	3b01      	subs	r3, #1
 800bdb8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d1f9      	bne.n	800bdb4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800bdc0:	e040      	b.n	800be44 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4a2d      	ldr	r2, [pc, #180]	@ (800be7c <HAL_ADC_ConfigChannel+0x7dc>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d118      	bne.n	800bdfe <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800bdcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bdd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d112      	bne.n	800bdfe <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a23      	ldr	r2, [pc, #140]	@ (800be6c <HAL_ADC_ConfigChannel+0x7cc>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d004      	beq.n	800bdec <HAL_ADC_ConfigChannel+0x74c>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4a22      	ldr	r2, [pc, #136]	@ (800be70 <HAL_ADC_ConfigChannel+0x7d0>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d12d      	bne.n	800be48 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800bdec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bdf0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	481b      	ldr	r0, [pc, #108]	@ (800be64 <HAL_ADC_ConfigChannel+0x7c4>)
 800bdf8:	f7fe ffc9 	bl	800ad8e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800bdfc:	e024      	b.n	800be48 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a1f      	ldr	r2, [pc, #124]	@ (800be80 <HAL_ADC_ConfigChannel+0x7e0>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d120      	bne.n	800be4a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800be08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800be0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be10:	2b00      	cmp	r3, #0
 800be12:	d11a      	bne.n	800be4a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4a14      	ldr	r2, [pc, #80]	@ (800be6c <HAL_ADC_ConfigChannel+0x7cc>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d115      	bne.n	800be4a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800be1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800be22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800be26:	4619      	mov	r1, r3
 800be28:	480e      	ldr	r0, [pc, #56]	@ (800be64 <HAL_ADC_ConfigChannel+0x7c4>)
 800be2a:	f7fe ffb0 	bl	800ad8e <LL_ADC_SetCommonPathInternalCh>
 800be2e:	e00c      	b.n	800be4a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be34:	f043 0220 	orr.w	r2, r3, #32
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800be3c:	2301      	movs	r3, #1
 800be3e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800be42:	e002      	b.n	800be4a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800be44:	bf00      	nop
 800be46:	e000      	b.n	800be4a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800be48:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800be52:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800be56:	4618      	mov	r0, r3
 800be58:	37d8      	adds	r7, #216	@ 0xd8
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop
 800be60:	80080000 	.word	0x80080000
 800be64:	50040300 	.word	0x50040300
 800be68:	c7520000 	.word	0xc7520000
 800be6c:	50040000 	.word	0x50040000
 800be70:	50040200 	.word	0x50040200
 800be74:	20000168 	.word	0x20000168
 800be78:	053e2d63 	.word	0x053e2d63
 800be7c:	cb840000 	.word	0xcb840000
 800be80:	80000001 	.word	0x80000001

0800be84 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b088      	sub	sp, #32
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800be8e:	2300      	movs	r3, #0
 800be90:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7ff f94e 	bl	800b13c <LL_ADC_REG_IsConversionOngoing>
 800bea0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7ff f96f 	bl	800b18a <LL_ADC_INJ_IsConversionOngoing>
 800beac:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d103      	bne.n	800bebc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	f000 8098 	beq.w	800bfec <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d02a      	beq.n	800bf20 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	7e5b      	ldrb	r3, [r3, #25]
 800bece:	2b01      	cmp	r3, #1
 800bed0:	d126      	bne.n	800bf20 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	7e1b      	ldrb	r3, [r3, #24]
 800bed6:	2b01      	cmp	r3, #1
 800bed8:	d122      	bne.n	800bf20 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800beda:	2301      	movs	r3, #1
 800bedc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800bede:	e014      	b.n	800bf0a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	4a45      	ldr	r2, [pc, #276]	@ (800bff8 <ADC_ConversionStop+0x174>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d90d      	bls.n	800bf04 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800beec:	f043 0210 	orr.w	r2, r3, #16
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bef8:	f043 0201 	orr.w	r2, r3, #1
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800bf00:	2301      	movs	r3, #1
 800bf02:	e074      	b.n	800bfee <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	3301      	adds	r3, #1
 800bf08:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf14:	2b40      	cmp	r3, #64	@ 0x40
 800bf16:	d1e3      	bne.n	800bee0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2240      	movs	r2, #64	@ 0x40
 800bf1e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	2b02      	cmp	r3, #2
 800bf24:	d014      	beq.n	800bf50 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7ff f906 	bl	800b13c <LL_ADC_REG_IsConversionOngoing>
 800bf30:	4603      	mov	r3, r0
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d00c      	beq.n	800bf50 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7ff f8c3 	bl	800b0c6 <LL_ADC_IsDisableOngoing>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d104      	bne.n	800bf50 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7ff f8e2 	bl	800b114 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d014      	beq.n	800bf80 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7ff f915 	bl	800b18a <LL_ADC_INJ_IsConversionOngoing>
 800bf60:	4603      	mov	r3, r0
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d00c      	beq.n	800bf80 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7ff f8ab 	bl	800b0c6 <LL_ADC_IsDisableOngoing>
 800bf70:	4603      	mov	r3, r0
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d104      	bne.n	800bf80 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7ff f8f1 	bl	800b162 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	2b02      	cmp	r3, #2
 800bf84:	d005      	beq.n	800bf92 <ADC_ConversionStop+0x10e>
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	2b03      	cmp	r3, #3
 800bf8a:	d105      	bne.n	800bf98 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800bf8c:	230c      	movs	r3, #12
 800bf8e:	617b      	str	r3, [r7, #20]
        break;
 800bf90:	e005      	b.n	800bf9e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800bf92:	2308      	movs	r3, #8
 800bf94:	617b      	str	r3, [r7, #20]
        break;
 800bf96:	e002      	b.n	800bf9e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800bf98:	2304      	movs	r3, #4
 800bf9a:	617b      	str	r3, [r7, #20]
        break;
 800bf9c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800bf9e:	f7fe feb3 	bl	800ad08 <HAL_GetTick>
 800bfa2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800bfa4:	e01b      	b.n	800bfde <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800bfa6:	f7fe feaf 	bl	800ad08 <HAL_GetTick>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	1ad3      	subs	r3, r2, r3
 800bfb0:	2b05      	cmp	r3, #5
 800bfb2:	d914      	bls.n	800bfde <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	689a      	ldr	r2, [r3, #8]
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	4013      	ands	r3, r2
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00d      	beq.n	800bfde <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfc6:	f043 0210 	orr.w	r2, r3, #16
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bfd2:	f043 0201 	orr.w	r2, r3, #1
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e007      	b.n	800bfee <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	689a      	ldr	r2, [r3, #8]
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	4013      	ands	r3, r2
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d1dc      	bne.n	800bfa6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800bfec:	2300      	movs	r3, #0
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3720      	adds	r7, #32
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	a33fffff 	.word	0xa33fffff

0800bffc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800c004:	2300      	movs	r3, #0
 800c006:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7ff f847 	bl	800b0a0 <LL_ADC_IsEnabled>
 800c012:	4603      	mov	r3, r0
 800c014:	2b00      	cmp	r3, #0
 800c016:	d169      	bne.n	800c0ec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	689a      	ldr	r2, [r3, #8]
 800c01e:	4b36      	ldr	r3, [pc, #216]	@ (800c0f8 <ADC_Enable+0xfc>)
 800c020:	4013      	ands	r3, r2
 800c022:	2b00      	cmp	r3, #0
 800c024:	d00d      	beq.n	800c042 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c02a:	f043 0210 	orr.w	r2, r3, #16
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c036:	f043 0201 	orr.w	r2, r3, #1
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800c03e:	2301      	movs	r3, #1
 800c040:	e055      	b.n	800c0ee <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4618      	mov	r0, r3
 800c048:	f7ff f802 	bl	800b050 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800c04c:	482b      	ldr	r0, [pc, #172]	@ (800c0fc <ADC_Enable+0x100>)
 800c04e:	f7fe feb1 	bl	800adb4 <LL_ADC_GetCommonPathInternalCh>
 800c052:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800c054:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d013      	beq.n	800c084 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c05c:	4b28      	ldr	r3, [pc, #160]	@ (800c100 <ADC_Enable+0x104>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	099b      	lsrs	r3, r3, #6
 800c062:	4a28      	ldr	r2, [pc, #160]	@ (800c104 <ADC_Enable+0x108>)
 800c064:	fba2 2303 	umull	r2, r3, r2, r3
 800c068:	099b      	lsrs	r3, r3, #6
 800c06a:	1c5a      	adds	r2, r3, #1
 800c06c:	4613      	mov	r3, r2
 800c06e:	005b      	lsls	r3, r3, #1
 800c070:	4413      	add	r3, r2
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800c076:	e002      	b.n	800c07e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	3b01      	subs	r3, #1
 800c07c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d1f9      	bne.n	800c078 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800c084:	f7fe fe40 	bl	800ad08 <HAL_GetTick>
 800c088:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c08a:	e028      	b.n	800c0de <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4618      	mov	r0, r3
 800c092:	f7ff f805 	bl	800b0a0 <LL_ADC_IsEnabled>
 800c096:	4603      	mov	r3, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d104      	bne.n	800c0a6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7fe ffd5 	bl	800b050 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c0a6:	f7fe fe2f 	bl	800ad08 <HAL_GetTick>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	1ad3      	subs	r3, r2, r3
 800c0b0:	2b02      	cmp	r3, #2
 800c0b2:	d914      	bls.n	800c0de <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f003 0301 	and.w	r3, r3, #1
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d00d      	beq.n	800c0de <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0c6:	f043 0210 	orr.w	r2, r3, #16
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0d2:	f043 0201 	orr.w	r2, r3, #1
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	e007      	b.n	800c0ee <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f003 0301 	and.w	r3, r3, #1
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d1cf      	bne.n	800c08c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3710      	adds	r7, #16
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	8000003f 	.word	0x8000003f
 800c0fc:	50040300 	.word	0x50040300
 800c100:	20000168 	.word	0x20000168
 800c104:	053e2d63 	.word	0x053e2d63

0800c108 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	4618      	mov	r0, r3
 800c116:	f7fe ffd6 	bl	800b0c6 <LL_ADC_IsDisableOngoing>
 800c11a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4618      	mov	r0, r3
 800c122:	f7fe ffbd 	bl	800b0a0 <LL_ADC_IsEnabled>
 800c126:	4603      	mov	r3, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d047      	beq.n	800c1bc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d144      	bne.n	800c1bc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	f003 030d 	and.w	r3, r3, #13
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d10c      	bne.n	800c15a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4618      	mov	r0, r3
 800c146:	f7fe ff97 	bl	800b078 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	2203      	movs	r2, #3
 800c150:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800c152:	f7fe fdd9 	bl	800ad08 <HAL_GetTick>
 800c156:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c158:	e029      	b.n	800c1ae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c15e:	f043 0210 	orr.w	r2, r3, #16
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c16a:	f043 0201 	orr.w	r2, r3, #1
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800c172:	2301      	movs	r3, #1
 800c174:	e023      	b.n	800c1be <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800c176:	f7fe fdc7 	bl	800ad08 <HAL_GetTick>
 800c17a:	4602      	mov	r2, r0
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	1ad3      	subs	r3, r2, r3
 800c180:	2b02      	cmp	r3, #2
 800c182:	d914      	bls.n	800c1ae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	f003 0301 	and.w	r3, r3, #1
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d00d      	beq.n	800c1ae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c196:	f043 0210 	orr.w	r2, r3, #16
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1a2:	f043 0201 	orr.w	r2, r3, #1
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	e007      	b.n	800c1be <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	689b      	ldr	r3, [r3, #8]
 800c1b4:	f003 0301 	and.w	r3, r3, #1
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d1dc      	bne.n	800c176 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c1bc:	2300      	movs	r3, #0
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}

0800c1c6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800c1c6:	b580      	push	{r7, lr}
 800c1c8:	b084      	sub	sp, #16
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1d2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d14b      	bne.n	800c278 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f003 0308 	and.w	r3, r3, #8
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d021      	beq.n	800c23e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7fe fe3b 	bl	800ae7a <LL_ADC_REG_IsTriggerSourceSWStart>
 800c204:	4603      	mov	r3, r0
 800c206:	2b00      	cmp	r3, #0
 800c208:	d032      	beq.n	800c270 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c214:	2b00      	cmp	r3, #0
 800c216:	d12b      	bne.n	800c270 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c21c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c228:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d11f      	bne.n	800c270 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c234:	f043 0201 	orr.w	r2, r3, #1
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	655a      	str	r2, [r3, #84]	@ 0x54
 800c23c:	e018      	b.n	800c270 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	f003 0302 	and.w	r3, r3, #2
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d111      	bne.n	800c270 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c250:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c25c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c260:	2b00      	cmp	r3, #0
 800c262:	d105      	bne.n	800c270 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c268:	f043 0201 	orr.w	r2, r3, #1
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c270:	68f8      	ldr	r0, [r7, #12]
 800c272:	f7f6 fb67 	bl	8002944 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c276:	e00e      	b.n	800c296 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c27c:	f003 0310 	and.w	r3, r3, #16
 800c280:	2b00      	cmp	r3, #0
 800c282:	d003      	beq.n	800c28c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	f7ff fa00 	bl	800b68a <HAL_ADC_ErrorCallback>
}
 800c28a:	e004      	b.n	800c296 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	4798      	blx	r3
}
 800c296:	bf00      	nop
 800c298:	3710      	adds	r7, #16
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}

0800c29e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800c29e:	b580      	push	{r7, lr}
 800c2a0:	b084      	sub	sp, #16
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2aa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	f7f6 fb2d 	bl	800290c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c2b2:	bf00      	nop
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}

0800c2ba <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800c2ba:	b580      	push	{r7, lr}
 800c2bc:	b084      	sub	sp, #16
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2c6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2d8:	f043 0204 	orr.w	r2, r3, #4
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c2e0:	68f8      	ldr	r0, [r7, #12]
 800c2e2:	f7ff f9d2 	bl	800b68a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c2e6:	bf00      	nop
 800c2e8:	3710      	adds	r7, #16
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}

0800c2ee <LL_ADC_IsEnabled>:
{
 800c2ee:	b480      	push	{r7}
 800c2f0:	b083      	sub	sp, #12
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	689b      	ldr	r3, [r3, #8]
 800c2fa:	f003 0301 	and.w	r3, r3, #1
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d101      	bne.n	800c306 <LL_ADC_IsEnabled+0x18>
 800c302:	2301      	movs	r3, #1
 800c304:	e000      	b.n	800c308 <LL_ADC_IsEnabled+0x1a>
 800c306:	2300      	movs	r3, #0
}
 800c308:	4618      	mov	r0, r3
 800c30a:	370c      	adds	r7, #12
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <LL_ADC_REG_IsConversionOngoing>:
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	689b      	ldr	r3, [r3, #8]
 800c320:	f003 0304 	and.w	r3, r3, #4
 800c324:	2b04      	cmp	r3, #4
 800c326:	d101      	bne.n	800c32c <LL_ADC_REG_IsConversionOngoing+0x18>
 800c328:	2301      	movs	r3, #1
 800c32a:	e000      	b.n	800c32e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800c32c:	2300      	movs	r3, #0
}
 800c32e:	4618      	mov	r0, r3
 800c330:	370c      	adds	r7, #12
 800c332:	46bd      	mov	sp, r7
 800c334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c338:	4770      	bx	lr
	...

0800c33c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800c33c:	b590      	push	{r4, r7, lr}
 800c33e:	b09f      	sub	sp, #124	@ 0x7c
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c346:	2300      	movs	r3, #0
 800c348:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c352:	2b01      	cmp	r3, #1
 800c354:	d101      	bne.n	800c35a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800c356:	2302      	movs	r3, #2
 800c358:	e093      	b.n	800c482 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2201      	movs	r2, #1
 800c35e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800c362:	2300      	movs	r3, #0
 800c364:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800c366:	2300      	movs	r3, #0
 800c368:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4a47      	ldr	r2, [pc, #284]	@ (800c48c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d102      	bne.n	800c37a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800c374:	4b46      	ldr	r3, [pc, #280]	@ (800c490 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c376:	60bb      	str	r3, [r7, #8]
 800c378:	e001      	b.n	800c37e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800c37a:	2300      	movs	r3, #0
 800c37c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d10b      	bne.n	800c39c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c388:	f043 0220 	orr.w	r2, r3, #32
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2200      	movs	r2, #0
 800c394:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800c398:	2301      	movs	r3, #1
 800c39a:	e072      	b.n	800c482 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7ff ffb8 	bl	800c314 <LL_ADC_REG_IsConversionOngoing>
 800c3a4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7ff ffb2 	bl	800c314 <LL_ADC_REG_IsConversionOngoing>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d154      	bne.n	800c460 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800c3b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d151      	bne.n	800c460 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800c3bc:	4b35      	ldr	r3, [pc, #212]	@ (800c494 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800c3be:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d02c      	beq.n	800c422 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800c3c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3ca:	689b      	ldr	r3, [r3, #8]
 800c3cc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	6859      	ldr	r1, [r3, #4]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c3da:	035b      	lsls	r3, r3, #13
 800c3dc:	430b      	orrs	r3, r1
 800c3de:	431a      	orrs	r2, r3
 800c3e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3e2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c3e4:	4829      	ldr	r0, [pc, #164]	@ (800c48c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c3e6:	f7ff ff82 	bl	800c2ee <LL_ADC_IsEnabled>
 800c3ea:	4604      	mov	r4, r0
 800c3ec:	4828      	ldr	r0, [pc, #160]	@ (800c490 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c3ee:	f7ff ff7e 	bl	800c2ee <LL_ADC_IsEnabled>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	431c      	orrs	r4, r3
 800c3f6:	4828      	ldr	r0, [pc, #160]	@ (800c498 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800c3f8:	f7ff ff79 	bl	800c2ee <LL_ADC_IsEnabled>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	4323      	orrs	r3, r4
 800c400:	2b00      	cmp	r3, #0
 800c402:	d137      	bne.n	800c474 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800c404:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c40c:	f023 030f 	bic.w	r3, r3, #15
 800c410:	683a      	ldr	r2, [r7, #0]
 800c412:	6811      	ldr	r1, [r2, #0]
 800c414:	683a      	ldr	r2, [r7, #0]
 800c416:	6892      	ldr	r2, [r2, #8]
 800c418:	430a      	orrs	r2, r1
 800c41a:	431a      	orrs	r2, r3
 800c41c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c41e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c420:	e028      	b.n	800c474 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800c422:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c424:	689b      	ldr	r3, [r3, #8]
 800c426:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c42a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c42c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c42e:	4817      	ldr	r0, [pc, #92]	@ (800c48c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c430:	f7ff ff5d 	bl	800c2ee <LL_ADC_IsEnabled>
 800c434:	4604      	mov	r4, r0
 800c436:	4816      	ldr	r0, [pc, #88]	@ (800c490 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c438:	f7ff ff59 	bl	800c2ee <LL_ADC_IsEnabled>
 800c43c:	4603      	mov	r3, r0
 800c43e:	431c      	orrs	r4, r3
 800c440:	4815      	ldr	r0, [pc, #84]	@ (800c498 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800c442:	f7ff ff54 	bl	800c2ee <LL_ADC_IsEnabled>
 800c446:	4603      	mov	r3, r0
 800c448:	4323      	orrs	r3, r4
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d112      	bne.n	800c474 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800c44e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c450:	689b      	ldr	r3, [r3, #8]
 800c452:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c456:	f023 030f 	bic.w	r3, r3, #15
 800c45a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c45c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c45e:	e009      	b.n	800c474 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c464:	f043 0220 	orr.w	r2, r3, #32
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800c46c:	2301      	movs	r3, #1
 800c46e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800c472:	e000      	b.n	800c476 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c474:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2200      	movs	r2, #0
 800c47a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800c47e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800c482:	4618      	mov	r0, r3
 800c484:	377c      	adds	r7, #124	@ 0x7c
 800c486:	46bd      	mov	sp, r7
 800c488:	bd90      	pop	{r4, r7, pc}
 800c48a:	bf00      	nop
 800c48c:	50040000 	.word	0x50040000
 800c490:	50040100 	.word	0x50040100
 800c494:	50040300 	.word	0x50040300
 800c498:	50040200 	.word	0x50040200

0800c49c <__NVIC_SetPriorityGrouping>:
{
 800c49c:	b480      	push	{r7}
 800c49e:	b085      	sub	sp, #20
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f003 0307 	and.w	r3, r3, #7
 800c4aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c4ac:	4b0c      	ldr	r3, [pc, #48]	@ (800c4e0 <__NVIC_SetPriorityGrouping+0x44>)
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c4b2:	68ba      	ldr	r2, [r7, #8]
 800c4b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c4b8:	4013      	ands	r3, r2
 800c4ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c4c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c4c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c4cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c4ce:	4a04      	ldr	r2, [pc, #16]	@ (800c4e0 <__NVIC_SetPriorityGrouping+0x44>)
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	60d3      	str	r3, [r2, #12]
}
 800c4d4:	bf00      	nop
 800c4d6:	3714      	adds	r7, #20
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr
 800c4e0:	e000ed00 	.word	0xe000ed00

0800c4e4 <__NVIC_GetPriorityGrouping>:
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c4e8:	4b04      	ldr	r3, [pc, #16]	@ (800c4fc <__NVIC_GetPriorityGrouping+0x18>)
 800c4ea:	68db      	ldr	r3, [r3, #12]
 800c4ec:	0a1b      	lsrs	r3, r3, #8
 800c4ee:	f003 0307 	and.w	r3, r3, #7
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr
 800c4fc:	e000ed00 	.word	0xe000ed00

0800c500 <__NVIC_EnableIRQ>:
{
 800c500:	b480      	push	{r7}
 800c502:	b083      	sub	sp, #12
 800c504:	af00      	add	r7, sp, #0
 800c506:	4603      	mov	r3, r0
 800c508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c50a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	db0b      	blt.n	800c52a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c512:	79fb      	ldrb	r3, [r7, #7]
 800c514:	f003 021f 	and.w	r2, r3, #31
 800c518:	4907      	ldr	r1, [pc, #28]	@ (800c538 <__NVIC_EnableIRQ+0x38>)
 800c51a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c51e:	095b      	lsrs	r3, r3, #5
 800c520:	2001      	movs	r0, #1
 800c522:	fa00 f202 	lsl.w	r2, r0, r2
 800c526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c52a:	bf00      	nop
 800c52c:	370c      	adds	r7, #12
 800c52e:	46bd      	mov	sp, r7
 800c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c534:	4770      	bx	lr
 800c536:	bf00      	nop
 800c538:	e000e100 	.word	0xe000e100

0800c53c <__NVIC_SetPriority>:
{
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
 800c542:	4603      	mov	r3, r0
 800c544:	6039      	str	r1, [r7, #0]
 800c546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	db0a      	blt.n	800c566 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	b2da      	uxtb	r2, r3
 800c554:	490c      	ldr	r1, [pc, #48]	@ (800c588 <__NVIC_SetPriority+0x4c>)
 800c556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c55a:	0112      	lsls	r2, r2, #4
 800c55c:	b2d2      	uxtb	r2, r2
 800c55e:	440b      	add	r3, r1
 800c560:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c564:	e00a      	b.n	800c57c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	b2da      	uxtb	r2, r3
 800c56a:	4908      	ldr	r1, [pc, #32]	@ (800c58c <__NVIC_SetPriority+0x50>)
 800c56c:	79fb      	ldrb	r3, [r7, #7]
 800c56e:	f003 030f 	and.w	r3, r3, #15
 800c572:	3b04      	subs	r3, #4
 800c574:	0112      	lsls	r2, r2, #4
 800c576:	b2d2      	uxtb	r2, r2
 800c578:	440b      	add	r3, r1
 800c57a:	761a      	strb	r2, [r3, #24]
}
 800c57c:	bf00      	nop
 800c57e:	370c      	adds	r7, #12
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr
 800c588:	e000e100 	.word	0xe000e100
 800c58c:	e000ed00 	.word	0xe000ed00

0800c590 <NVIC_EncodePriority>:
{
 800c590:	b480      	push	{r7}
 800c592:	b089      	sub	sp, #36	@ 0x24
 800c594:	af00      	add	r7, sp, #0
 800c596:	60f8      	str	r0, [r7, #12]
 800c598:	60b9      	str	r1, [r7, #8]
 800c59a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f003 0307 	and.w	r3, r3, #7
 800c5a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c5a4:	69fb      	ldr	r3, [r7, #28]
 800c5a6:	f1c3 0307 	rsb	r3, r3, #7
 800c5aa:	2b04      	cmp	r3, #4
 800c5ac:	bf28      	it	cs
 800c5ae:	2304      	movcs	r3, #4
 800c5b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	3304      	adds	r3, #4
 800c5b6:	2b06      	cmp	r3, #6
 800c5b8:	d902      	bls.n	800c5c0 <NVIC_EncodePriority+0x30>
 800c5ba:	69fb      	ldr	r3, [r7, #28]
 800c5bc:	3b03      	subs	r3, #3
 800c5be:	e000      	b.n	800c5c2 <NVIC_EncodePriority+0x32>
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c5c4:	f04f 32ff 	mov.w	r2, #4294967295
 800c5c8:	69bb      	ldr	r3, [r7, #24]
 800c5ca:	fa02 f303 	lsl.w	r3, r2, r3
 800c5ce:	43da      	mvns	r2, r3
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	401a      	ands	r2, r3
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c5d8:	f04f 31ff 	mov.w	r1, #4294967295
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	fa01 f303 	lsl.w	r3, r1, r3
 800c5e2:	43d9      	mvns	r1, r3
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c5e8:	4313      	orrs	r3, r2
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3724      	adds	r7, #36	@ 0x24
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr
	...

0800c5f8 <__NVIC_SystemReset>:
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800c5fc:	f3bf 8f4f 	dsb	sy
}
 800c600:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800c602:	4b06      	ldr	r3, [pc, #24]	@ (800c61c <__NVIC_SystemReset+0x24>)
 800c604:	68db      	ldr	r3, [r3, #12]
 800c606:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800c60a:	4904      	ldr	r1, [pc, #16]	@ (800c61c <__NVIC_SystemReset+0x24>)
 800c60c:	4b04      	ldr	r3, [pc, #16]	@ (800c620 <__NVIC_SystemReset+0x28>)
 800c60e:	4313      	orrs	r3, r2
 800c610:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c612:	f3bf 8f4f 	dsb	sy
}
 800c616:	bf00      	nop
    __NOP();
 800c618:	bf00      	nop
 800c61a:	e7fd      	b.n	800c618 <__NVIC_SystemReset+0x20>
 800c61c:	e000ed00 	.word	0xe000ed00
 800c620:	05fa0004 	.word	0x05fa0004

0800c624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	3b01      	subs	r3, #1
 800c630:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c634:	d301      	bcc.n	800c63a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c636:	2301      	movs	r3, #1
 800c638:	e00f      	b.n	800c65a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c63a:	4a0a      	ldr	r2, [pc, #40]	@ (800c664 <SysTick_Config+0x40>)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	3b01      	subs	r3, #1
 800c640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c642:	210f      	movs	r1, #15
 800c644:	f04f 30ff 	mov.w	r0, #4294967295
 800c648:	f7ff ff78 	bl	800c53c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c64c:	4b05      	ldr	r3, [pc, #20]	@ (800c664 <SysTick_Config+0x40>)
 800c64e:	2200      	movs	r2, #0
 800c650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c652:	4b04      	ldr	r3, [pc, #16]	@ (800c664 <SysTick_Config+0x40>)
 800c654:	2207      	movs	r2, #7
 800c656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c658:	2300      	movs	r3, #0
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3708      	adds	r7, #8
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop
 800c664:	e000e010 	.word	0xe000e010

0800c668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f7ff ff13 	bl	800c49c <__NVIC_SetPriorityGrouping>
}
 800c676:	bf00      	nop
 800c678:	3708      	adds	r7, #8
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b086      	sub	sp, #24
 800c682:	af00      	add	r7, sp, #0
 800c684:	4603      	mov	r3, r0
 800c686:	60b9      	str	r1, [r7, #8]
 800c688:	607a      	str	r2, [r7, #4]
 800c68a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800c68c:	2300      	movs	r3, #0
 800c68e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c690:	f7ff ff28 	bl	800c4e4 <__NVIC_GetPriorityGrouping>
 800c694:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	68b9      	ldr	r1, [r7, #8]
 800c69a:	6978      	ldr	r0, [r7, #20]
 800c69c:	f7ff ff78 	bl	800c590 <NVIC_EncodePriority>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6a6:	4611      	mov	r1, r2
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f7ff ff47 	bl	800c53c <__NVIC_SetPriority>
}
 800c6ae:	bf00      	nop
 800c6b0:	3718      	adds	r7, #24
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c6b6:	b580      	push	{r7, lr}
 800c6b8:	b082      	sub	sp, #8
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	4603      	mov	r3, r0
 800c6be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c6c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f7ff ff1b 	bl	800c500 <__NVIC_EnableIRQ>
}
 800c6ca:	bf00      	nop
 800c6cc:	3708      	adds	r7, #8
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}

0800c6d2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800c6d2:	b580      	push	{r7, lr}
 800c6d4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800c6d6:	f7ff ff8f 	bl	800c5f8 <__NVIC_SystemReset>

0800c6da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b082      	sub	sp, #8
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f7ff ff9e 	bl	800c624 <SysTick_Config>
 800c6e8:	4603      	mov	r3, r0
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3708      	adds	r7, #8
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
	...

0800c6f4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d101      	bne.n	800c706 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800c702:	2301      	movs	r3, #1
 800c704:	e054      	b.n	800c7b0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	7f5b      	ldrb	r3, [r3, #29]
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d105      	bne.n	800c71c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2200      	movs	r2, #0
 800c714:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f7fa fdb2 	bl	8007280 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2202      	movs	r2, #2
 800c720:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	791b      	ldrb	r3, [r3, #4]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d10c      	bne.n	800c744 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4a22      	ldr	r2, [pc, #136]	@ (800c7b8 <HAL_CRC_Init+0xc4>)
 800c730:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	689a      	ldr	r2, [r3, #8]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f022 0218 	bic.w	r2, r2, #24
 800c740:	609a      	str	r2, [r3, #8]
 800c742:	e00c      	b.n	800c75e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6899      	ldr	r1, [r3, #8]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	68db      	ldr	r3, [r3, #12]
 800c74c:	461a      	mov	r2, r3
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 f942 	bl	800c9d8 <HAL_CRCEx_Polynomial_Set>
 800c754:	4603      	mov	r3, r0
 800c756:	2b00      	cmp	r3, #0
 800c758:	d001      	beq.n	800c75e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800c75a:	2301      	movs	r3, #1
 800c75c:	e028      	b.n	800c7b0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	795b      	ldrb	r3, [r3, #5]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d105      	bne.n	800c772 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f04f 32ff 	mov.w	r2, #4294967295
 800c76e:	611a      	str	r2, [r3, #16]
 800c770:	e004      	b.n	800c77c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	6912      	ldr	r2, [r2, #16]
 800c77a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	695a      	ldr	r2, [r3, #20]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	430a      	orrs	r2, r1
 800c790:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	699a      	ldr	r2, [r3, #24]
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	430a      	orrs	r2, r1
 800c7a6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800c7ae:	2300      	movs	r3, #0
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3708      	adds	r7, #8
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	04c11db7 	.word	0x04c11db7

0800c7bc <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b086      	sub	sp, #24
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2202      	movs	r2, #2
 800c7d0:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	6a1b      	ldr	r3, [r3, #32]
 800c7d6:	2b03      	cmp	r3, #3
 800c7d8:	d006      	beq.n	800c7e8 <HAL_CRC_Accumulate+0x2c>
 800c7da:	2b03      	cmp	r3, #3
 800c7dc:	d829      	bhi.n	800c832 <HAL_CRC_Accumulate+0x76>
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d019      	beq.n	800c816 <HAL_CRC_Accumulate+0x5a>
 800c7e2:	2b02      	cmp	r3, #2
 800c7e4:	d01e      	beq.n	800c824 <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 800c7e6:	e024      	b.n	800c832 <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	617b      	str	r3, [r7, #20]
 800c7ec:	e00a      	b.n	800c804 <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	009b      	lsls	r3, r3, #2
 800c7f2:	68ba      	ldr	r2, [r7, #8]
 800c7f4:	441a      	add	r2, r3
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	6812      	ldr	r2, [r2, #0]
 800c7fc:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	3301      	adds	r3, #1
 800c802:	617b      	str	r3, [r7, #20]
 800c804:	697a      	ldr	r2, [r7, #20]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	429a      	cmp	r2, r3
 800c80a:	d3f0      	bcc.n	800c7ee <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	613b      	str	r3, [r7, #16]
      break;
 800c814:	e00e      	b.n	800c834 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	68b9      	ldr	r1, [r7, #8]
 800c81a:	68f8      	ldr	r0, [r7, #12]
 800c81c:	f000 f812 	bl	800c844 <CRC_Handle_8>
 800c820:	6138      	str	r0, [r7, #16]
      break;
 800c822:	e007      	b.n	800c834 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	68b9      	ldr	r1, [r7, #8]
 800c828:	68f8      	ldr	r0, [r7, #12]
 800c82a:	f000 f89b 	bl	800c964 <CRC_Handle_16>
 800c82e:	6138      	str	r0, [r7, #16]
      break;
 800c830:	e000      	b.n	800c834 <HAL_CRC_Accumulate+0x78>
      break;
 800c832:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	2201      	movs	r2, #1
 800c838:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800c83a:	693b      	ldr	r3, [r7, #16]
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3718      	adds	r7, #24
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800c844:	b480      	push	{r7}
 800c846:	b089      	sub	sp, #36	@ 0x24
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800c850:	2300      	movs	r3, #0
 800c852:	61fb      	str	r3, [r7, #28]
 800c854:	e023      	b.n	800c89e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800c856:	69fb      	ldr	r3, [r7, #28]
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	68ba      	ldr	r2, [r7, #8]
 800c85c:	4413      	add	r3, r2
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800c862:	69fb      	ldr	r3, [r7, #28]
 800c864:	009b      	lsls	r3, r3, #2
 800c866:	3301      	adds	r3, #1
 800c868:	68b9      	ldr	r1, [r7, #8]
 800c86a:	440b      	add	r3, r1
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800c870:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	3302      	adds	r3, #2
 800c878:	68b9      	ldr	r1, [r7, #8]
 800c87a:	440b      	add	r3, r1
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800c880:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800c882:	69fb      	ldr	r3, [r7, #28]
 800c884:	009b      	lsls	r3, r3, #2
 800c886:	3303      	adds	r3, #3
 800c888:	68b9      	ldr	r1, [r7, #8]
 800c88a:	440b      	add	r3, r1
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800c894:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800c896:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800c898:	69fb      	ldr	r3, [r7, #28]
 800c89a:	3301      	adds	r3, #1
 800c89c:	61fb      	str	r3, [r7, #28]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	089b      	lsrs	r3, r3, #2
 800c8a2:	69fa      	ldr	r2, [r7, #28]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d3d6      	bcc.n	800c856 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f003 0303 	and.w	r3, r3, #3
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d04f      	beq.n	800c952 <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f003 0303 	and.w	r3, r3, #3
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	d107      	bne.n	800c8cc <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800c8bc:	69fb      	ldr	r3, [r7, #28]
 800c8be:	009b      	lsls	r3, r3, #2
 800c8c0:	68ba      	ldr	r2, [r7, #8]
 800c8c2:	4413      	add	r3, r2
 800c8c4:	68fa      	ldr	r2, [r7, #12]
 800c8c6:	6812      	ldr	r2, [r2, #0]
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f003 0303 	and.w	r3, r3, #3
 800c8d2:	2b02      	cmp	r3, #2
 800c8d4:	d117      	bne.n	800c906 <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	009b      	lsls	r3, r3, #2
 800c8da:	68ba      	ldr	r2, [r7, #8]
 800c8dc:	4413      	add	r3, r2
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	b21b      	sxth	r3, r3
 800c8e2:	021b      	lsls	r3, r3, #8
 800c8e4:	b21a      	sxth	r2, r3
 800c8e6:	69fb      	ldr	r3, [r7, #28]
 800c8e8:	009b      	lsls	r3, r3, #2
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	68b9      	ldr	r1, [r7, #8]
 800c8ee:	440b      	add	r3, r1
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	b21b      	sxth	r3, r3
 800c8f4:	4313      	orrs	r3, r2
 800c8f6:	b21b      	sxth	r3, r3
 800c8f8:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	8b7a      	ldrh	r2, [r7, #26]
 800c904:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f003 0303 	and.w	r3, r3, #3
 800c90c:	2b03      	cmp	r3, #3
 800c90e:	d120      	bne.n	800c952 <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800c910:	69fb      	ldr	r3, [r7, #28]
 800c912:	009b      	lsls	r3, r3, #2
 800c914:	68ba      	ldr	r2, [r7, #8]
 800c916:	4413      	add	r3, r2
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	b21b      	sxth	r3, r3
 800c91c:	021b      	lsls	r3, r3, #8
 800c91e:	b21a      	sxth	r2, r3
 800c920:	69fb      	ldr	r3, [r7, #28]
 800c922:	009b      	lsls	r3, r3, #2
 800c924:	3301      	adds	r3, #1
 800c926:	68b9      	ldr	r1, [r7, #8]
 800c928:	440b      	add	r3, r1
 800c92a:	781b      	ldrb	r3, [r3, #0]
 800c92c:	b21b      	sxth	r3, r3
 800c92e:	4313      	orrs	r3, r2
 800c930:	b21b      	sxth	r3, r3
 800c932:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	8b7a      	ldrh	r2, [r7, #26]
 800c93e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	009b      	lsls	r3, r3, #2
 800c944:	3302      	adds	r3, #2
 800c946:	68ba      	ldr	r2, [r7, #8]
 800c948:	4413      	add	r3, r2
 800c94a:	68fa      	ldr	r2, [r7, #12]
 800c94c:	6812      	ldr	r2, [r2, #0]
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	681b      	ldr	r3, [r3, #0]
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3724      	adds	r7, #36	@ 0x24
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr

0800c964 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800c964:	b480      	push	{r7}
 800c966:	b087      	sub	sp, #28
 800c968:	af00      	add	r7, sp, #0
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800c970:	2300      	movs	r3, #0
 800c972:	617b      	str	r3, [r7, #20]
 800c974:	e013      	b.n	800c99e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	009b      	lsls	r3, r3, #2
 800c97a:	68ba      	ldr	r2, [r7, #8]
 800c97c:	4413      	add	r3, r2
 800c97e:	881b      	ldrh	r3, [r3, #0]
 800c980:	041a      	lsls	r2, r3, #16
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	009b      	lsls	r3, r3, #2
 800c986:	3302      	adds	r3, #2
 800c988:	68b9      	ldr	r1, [r7, #8]
 800c98a:	440b      	add	r3, r1
 800c98c:	881b      	ldrh	r3, [r3, #0]
 800c98e:	4619      	mov	r1, r3
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	430a      	orrs	r2, r1
 800c996:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	3301      	adds	r3, #1
 800c99c:	617b      	str	r3, [r7, #20]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	085b      	lsrs	r3, r3, #1
 800c9a2:	697a      	ldr	r2, [r7, #20]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d3e6      	bcc.n	800c976 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f003 0301 	and.w	r3, r3, #1
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d009      	beq.n	800c9c6 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	009b      	lsls	r3, r3, #2
 800c9bc:	68ba      	ldr	r2, [r7, #8]
 800c9be:	4413      	add	r3, r2
 800c9c0:	881a      	ldrh	r2, [r3, #0]
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	681b      	ldr	r3, [r3, #0]
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	371c      	adds	r7, #28
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr

0800c9d8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b087      	sub	sp, #28
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800c9e8:	231f      	movs	r3, #31
 800c9ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	f003 0301 	and.w	r3, r3, #1
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d102      	bne.n	800c9fc <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	75fb      	strb	r3, [r7, #23]
 800c9fa:	e063      	b.n	800cac4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800c9fc:	bf00      	nop
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	1e5a      	subs	r2, r3, #1
 800ca02:	613a      	str	r2, [r7, #16]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d009      	beq.n	800ca1c <HAL_CRCEx_Polynomial_Set+0x44>
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	f003 031f 	and.w	r3, r3, #31
 800ca0e:	68ba      	ldr	r2, [r7, #8]
 800ca10:	fa22 f303 	lsr.w	r3, r2, r3
 800ca14:	f003 0301 	and.w	r3, r3, #1
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d0f0      	beq.n	800c9fe <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2b18      	cmp	r3, #24
 800ca20:	d846      	bhi.n	800cab0 <HAL_CRCEx_Polynomial_Set+0xd8>
 800ca22:	a201      	add	r2, pc, #4	@ (adr r2, 800ca28 <HAL_CRCEx_Polynomial_Set+0x50>)
 800ca24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca28:	0800cab7 	.word	0x0800cab7
 800ca2c:	0800cab1 	.word	0x0800cab1
 800ca30:	0800cab1 	.word	0x0800cab1
 800ca34:	0800cab1 	.word	0x0800cab1
 800ca38:	0800cab1 	.word	0x0800cab1
 800ca3c:	0800cab1 	.word	0x0800cab1
 800ca40:	0800cab1 	.word	0x0800cab1
 800ca44:	0800cab1 	.word	0x0800cab1
 800ca48:	0800caa5 	.word	0x0800caa5
 800ca4c:	0800cab1 	.word	0x0800cab1
 800ca50:	0800cab1 	.word	0x0800cab1
 800ca54:	0800cab1 	.word	0x0800cab1
 800ca58:	0800cab1 	.word	0x0800cab1
 800ca5c:	0800cab1 	.word	0x0800cab1
 800ca60:	0800cab1 	.word	0x0800cab1
 800ca64:	0800cab1 	.word	0x0800cab1
 800ca68:	0800ca99 	.word	0x0800ca99
 800ca6c:	0800cab1 	.word	0x0800cab1
 800ca70:	0800cab1 	.word	0x0800cab1
 800ca74:	0800cab1 	.word	0x0800cab1
 800ca78:	0800cab1 	.word	0x0800cab1
 800ca7c:	0800cab1 	.word	0x0800cab1
 800ca80:	0800cab1 	.word	0x0800cab1
 800ca84:	0800cab1 	.word	0x0800cab1
 800ca88:	0800ca8d 	.word	0x0800ca8d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	2b06      	cmp	r3, #6
 800ca90:	d913      	bls.n	800caba <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800ca92:	2301      	movs	r3, #1
 800ca94:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800ca96:	e010      	b.n	800caba <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	2b07      	cmp	r3, #7
 800ca9c:	d90f      	bls.n	800cabe <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800caa2:	e00c      	b.n	800cabe <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	2b0f      	cmp	r3, #15
 800caa8:	d90b      	bls.n	800cac2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800caaa:	2301      	movs	r3, #1
 800caac:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800caae:	e008      	b.n	800cac2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800cab0:	2301      	movs	r3, #1
 800cab2:	75fb      	strb	r3, [r7, #23]
        break;
 800cab4:	e006      	b.n	800cac4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800cab6:	bf00      	nop
 800cab8:	e004      	b.n	800cac4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800caba:	bf00      	nop
 800cabc:	e002      	b.n	800cac4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800cabe:	bf00      	nop
 800cac0:	e000      	b.n	800cac4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800cac2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800cac4:	7dfb      	ldrb	r3, [r7, #23]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d10d      	bne.n	800cae6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	68ba      	ldr	r2, [r7, #8]
 800cad0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	689b      	ldr	r3, [r3, #8]
 800cad8:	f023 0118 	bic.w	r1, r3, #24
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	687a      	ldr	r2, [r7, #4]
 800cae2:	430a      	orrs	r2, r1
 800cae4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800cae6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cae8:	4618      	mov	r0, r3
 800caea:	371c      	adds	r7, #28
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <HAL_CRCEx_Input_Data_Reverse>:
  *          @arg @ref CRC_INPUTDATA_INVERSION_HALFWORD HalfWord-wise bit reversal
  *          @arg @ref CRC_INPUTDATA_INVERSION_WORD     Word-wise bit reversal
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Input_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t InputReverseMode)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b083      	sub	sp, #12
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(InputReverseMode));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2202      	movs	r2, #2
 800cb02:	775a      	strb	r2, [r3, #29]

  /* set input data inversion mode */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, InputReverseMode);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	689b      	ldr	r3, [r3, #8]
 800cb0a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	683a      	ldr	r2, [r7, #0]
 800cb14:	430a      	orrs	r2, r1
 800cb16:	609a      	str	r2, [r3, #8]
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800cb1e:	2300      	movs	r3, #0
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	370c      	adds	r7, #12
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr

0800cb2c <HAL_CRCEx_Output_Data_Reverse>:
  *          @arg @ref CRC_OUTPUTDATA_INVERSION_DISABLE no CRC inversion (default value)
  *          @arg @ref CRC_OUTPUTDATA_INVERSION_ENABLE  bit-level inversion (e.g. for a 8-bit CRC: 0xB5 becomes 0xAD)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Output_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t OutputReverseMode)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b083      	sub	sp, #12
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(OutputReverseMode));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2202      	movs	r2, #2
 800cb3a:	775a      	strb	r2, [r3, #29]

  /* set output data inversion mode */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, OutputReverseMode);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	689b      	ldr	r3, [r3, #8]
 800cb42:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	683a      	ldr	r2, [r7, #0]
 800cb4c:	430a      	orrs	r2, r1
 800cb4e:	609a      	str	r2, [r3, #8]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2201      	movs	r2, #1
 800cb54:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800cb56:	2300      	movs	r3, #0
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	370c      	adds	r7, #12
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr

0800cb64 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b085      	sub	sp, #20
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d101      	bne.n	800cb76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800cb72:	2301      	movs	r3, #1
 800cb74:	e098      	b.n	800cca8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	4b4d      	ldr	r3, [pc, #308]	@ (800ccb4 <HAL_DMA_Init+0x150>)
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d80f      	bhi.n	800cba2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	461a      	mov	r2, r3
 800cb88:	4b4b      	ldr	r3, [pc, #300]	@ (800ccb8 <HAL_DMA_Init+0x154>)
 800cb8a:	4413      	add	r3, r2
 800cb8c:	4a4b      	ldr	r2, [pc, #300]	@ (800ccbc <HAL_DMA_Init+0x158>)
 800cb8e:	fba2 2303 	umull	r2, r3, r2, r3
 800cb92:	091b      	lsrs	r3, r3, #4
 800cb94:	009a      	lsls	r2, r3, #2
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	4a48      	ldr	r2, [pc, #288]	@ (800ccc0 <HAL_DMA_Init+0x15c>)
 800cb9e:	641a      	str	r2, [r3, #64]	@ 0x40
 800cba0:	e00e      	b.n	800cbc0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	461a      	mov	r2, r3
 800cba8:	4b46      	ldr	r3, [pc, #280]	@ (800ccc4 <HAL_DMA_Init+0x160>)
 800cbaa:	4413      	add	r3, r2
 800cbac:	4a43      	ldr	r2, [pc, #268]	@ (800ccbc <HAL_DMA_Init+0x158>)
 800cbae:	fba2 2303 	umull	r2, r3, r2, r3
 800cbb2:	091b      	lsrs	r3, r3, #4
 800cbb4:	009a      	lsls	r2, r3, #2
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	4a42      	ldr	r2, [pc, #264]	@ (800ccc8 <HAL_DMA_Init+0x164>)
 800cbbe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2202      	movs	r2, #2
 800cbc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800cbd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800cbe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	691b      	ldr	r3, [r3, #16]
 800cbea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cbf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	699b      	ldr	r3, [r3, #24]
 800cbf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cbfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6a1b      	ldr	r3, [r3, #32]
 800cc02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800cc04:	68fa      	ldr	r2, [r7, #12]
 800cc06:	4313      	orrs	r3, r2
 800cc08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	68fa      	ldr	r2, [r7, #12]
 800cc10:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	689b      	ldr	r3, [r3, #8]
 800cc16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cc1a:	d039      	beq.n	800cc90 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc20:	4a27      	ldr	r2, [pc, #156]	@ (800ccc0 <HAL_DMA_Init+0x15c>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d11a      	bne.n	800cc5c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800cc26:	4b29      	ldr	r3, [pc, #164]	@ (800cccc <HAL_DMA_Init+0x168>)
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc2e:	f003 031c 	and.w	r3, r3, #28
 800cc32:	210f      	movs	r1, #15
 800cc34:	fa01 f303 	lsl.w	r3, r1, r3
 800cc38:	43db      	mvns	r3, r3
 800cc3a:	4924      	ldr	r1, [pc, #144]	@ (800cccc <HAL_DMA_Init+0x168>)
 800cc3c:	4013      	ands	r3, r2
 800cc3e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800cc40:	4b22      	ldr	r3, [pc, #136]	@ (800cccc <HAL_DMA_Init+0x168>)
 800cc42:	681a      	ldr	r2, [r3, #0]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6859      	ldr	r1, [r3, #4]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc4c:	f003 031c 	and.w	r3, r3, #28
 800cc50:	fa01 f303 	lsl.w	r3, r1, r3
 800cc54:	491d      	ldr	r1, [pc, #116]	@ (800cccc <HAL_DMA_Init+0x168>)
 800cc56:	4313      	orrs	r3, r2
 800cc58:	600b      	str	r3, [r1, #0]
 800cc5a:	e019      	b.n	800cc90 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800cc5c:	4b1c      	ldr	r3, [pc, #112]	@ (800ccd0 <HAL_DMA_Init+0x16c>)
 800cc5e:	681a      	ldr	r2, [r3, #0]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc64:	f003 031c 	and.w	r3, r3, #28
 800cc68:	210f      	movs	r1, #15
 800cc6a:	fa01 f303 	lsl.w	r3, r1, r3
 800cc6e:	43db      	mvns	r3, r3
 800cc70:	4917      	ldr	r1, [pc, #92]	@ (800ccd0 <HAL_DMA_Init+0x16c>)
 800cc72:	4013      	ands	r3, r2
 800cc74:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800cc76:	4b16      	ldr	r3, [pc, #88]	@ (800ccd0 <HAL_DMA_Init+0x16c>)
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6859      	ldr	r1, [r3, #4]
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc82:	f003 031c 	and.w	r3, r3, #28
 800cc86:	fa01 f303 	lsl.w	r3, r1, r3
 800cc8a:	4911      	ldr	r1, [pc, #68]	@ (800ccd0 <HAL_DMA_Init+0x16c>)
 800cc8c:	4313      	orrs	r3, r2
 800cc8e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2200      	movs	r2, #0
 800cc94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2201      	movs	r2, #1
 800cc9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2200      	movs	r2, #0
 800cca2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800cca6:	2300      	movs	r3, #0
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3714      	adds	r7, #20
 800ccac:	46bd      	mov	sp, r7
 800ccae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb2:	4770      	bx	lr
 800ccb4:	40020407 	.word	0x40020407
 800ccb8:	bffdfff8 	.word	0xbffdfff8
 800ccbc:	cccccccd 	.word	0xcccccccd
 800ccc0:	40020000 	.word	0x40020000
 800ccc4:	bffdfbf8 	.word	0xbffdfbf8
 800ccc8:	40020400 	.word	0x40020400
 800cccc:	400200a8 	.word	0x400200a8
 800ccd0:	400204a8 	.word	0x400204a8

0800ccd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b086      	sub	sp, #24
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	60b9      	str	r1, [r7, #8]
 800ccde:	607a      	str	r2, [r7, #4]
 800cce0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cce2:	2300      	movs	r3, #0
 800cce4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d101      	bne.n	800ccf4 <HAL_DMA_Start_IT+0x20>
 800ccf0:	2302      	movs	r3, #2
 800ccf2:	e04b      	b.n	800cd8c <HAL_DMA_Start_IT+0xb8>
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2201      	movs	r2, #1
 800ccf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d13a      	bne.n	800cd7e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2202      	movs	r2, #2
 800cd0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2200      	movs	r2, #0
 800cd14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f022 0201 	bic.w	r2, r2, #1
 800cd24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	687a      	ldr	r2, [r7, #4]
 800cd2a:	68b9      	ldr	r1, [r7, #8]
 800cd2c:	68f8      	ldr	r0, [r7, #12]
 800cd2e:	f000 f92a 	bl	800cf86 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d008      	beq.n	800cd4c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	681a      	ldr	r2, [r3, #0]
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f042 020e 	orr.w	r2, r2, #14
 800cd48:	601a      	str	r2, [r3, #0]
 800cd4a:	e00f      	b.n	800cd6c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	681a      	ldr	r2, [r3, #0]
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f022 0204 	bic.w	r2, r2, #4
 800cd5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f042 020a 	orr.w	r2, r2, #10
 800cd6a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	681a      	ldr	r2, [r3, #0]
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f042 0201 	orr.w	r2, r2, #1
 800cd7a:	601a      	str	r2, [r3, #0]
 800cd7c:	e005      	b.n	800cd8a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2200      	movs	r2, #0
 800cd82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800cd86:	2302      	movs	r3, #2
 800cd88:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800cd8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3718      	adds	r7, #24
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b085      	sub	sp, #20
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	2b02      	cmp	r3, #2
 800cdaa:	d008      	beq.n	800cdbe <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2204      	movs	r2, #4
 800cdb0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	e022      	b.n	800ce04 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	681a      	ldr	r2, [r3, #0]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f022 020e 	bic.w	r2, r2, #14
 800cdcc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	681a      	ldr	r2, [r3, #0]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f022 0201 	bic.w	r2, r2, #1
 800cddc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cde2:	f003 021c 	and.w	r2, r3, #28
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdea:	2101      	movs	r1, #1
 800cdec:	fa01 f202 	lsl.w	r2, r1, r2
 800cdf0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800ce02:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3714      	adds	r7, #20
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b084      	sub	sp, #16
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce2c:	f003 031c 	and.w	r3, r3, #28
 800ce30:	2204      	movs	r2, #4
 800ce32:	409a      	lsls	r2, r3
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	4013      	ands	r3, r2
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d026      	beq.n	800ce8a <HAL_DMA_IRQHandler+0x7a>
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	f003 0304 	and.w	r3, r3, #4
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d021      	beq.n	800ce8a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f003 0320 	and.w	r3, r3, #32
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d107      	bne.n	800ce64 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f022 0204 	bic.w	r2, r2, #4
 800ce62:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce68:	f003 021c 	and.w	r2, r3, #28
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce70:	2104      	movs	r1, #4
 800ce72:	fa01 f202 	lsl.w	r2, r1, r2
 800ce76:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d071      	beq.n	800cf64 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800ce88:	e06c      	b.n	800cf64 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce8e:	f003 031c 	and.w	r3, r3, #28
 800ce92:	2202      	movs	r2, #2
 800ce94:	409a      	lsls	r2, r3
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	4013      	ands	r3, r2
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d02e      	beq.n	800cefc <HAL_DMA_IRQHandler+0xec>
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	f003 0302 	and.w	r3, r3, #2
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d029      	beq.n	800cefc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f003 0320 	and.w	r3, r3, #32
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d10b      	bne.n	800cece <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	681a      	ldr	r2, [r3, #0]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	f022 020a 	bic.w	r2, r2, #10
 800cec4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2201      	movs	r2, #1
 800ceca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ced2:	f003 021c 	and.w	r2, r3, #28
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceda:	2102      	movs	r1, #2
 800cedc:	fa01 f202 	lsl.w	r2, r1, r2
 800cee0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2200      	movs	r2, #0
 800cee6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d038      	beq.n	800cf64 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800cefa:	e033      	b.n	800cf64 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf00:	f003 031c 	and.w	r3, r3, #28
 800cf04:	2208      	movs	r2, #8
 800cf06:	409a      	lsls	r2, r3
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	4013      	ands	r3, r2
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d02a      	beq.n	800cf66 <HAL_DMA_IRQHandler+0x156>
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	f003 0308 	and.w	r3, r3, #8
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d025      	beq.n	800cf66 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	681a      	ldr	r2, [r3, #0]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f022 020e 	bic.w	r2, r2, #14
 800cf28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf2e:	f003 021c 	and.w	r2, r3, #28
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf36:	2101      	movs	r1, #1
 800cf38:	fa01 f202 	lsl.w	r2, r1, r2
 800cf3c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2201      	movs	r2, #1
 800cf42:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2201      	movs	r2, #1
 800cf48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d004      	beq.n	800cf66 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800cf64:	bf00      	nop
 800cf66:	bf00      	nop
}
 800cf68:	3710      	adds	r7, #16
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}

0800cf6e <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800cf6e:	b480      	push	{r7}
 800cf70:	b083      	sub	sp, #12
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	370c      	adds	r7, #12
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr

0800cf86 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cf86:	b480      	push	{r7}
 800cf88:	b085      	sub	sp, #20
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	60f8      	str	r0, [r7, #12]
 800cf8e:	60b9      	str	r1, [r7, #8]
 800cf90:	607a      	str	r2, [r7, #4]
 800cf92:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf98:	f003 021c 	and.w	r2, r3, #28
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfa0:	2101      	movs	r1, #1
 800cfa2:	fa01 f202 	lsl.w	r2, r1, r2
 800cfa6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	683a      	ldr	r2, [r7, #0]
 800cfae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	689b      	ldr	r3, [r3, #8]
 800cfb4:	2b10      	cmp	r3, #16
 800cfb6:	d108      	bne.n	800cfca <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	687a      	ldr	r2, [r7, #4]
 800cfbe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	68ba      	ldr	r2, [r7, #8]
 800cfc6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800cfc8:	e007      	b.n	800cfda <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	68ba      	ldr	r2, [r7, #8]
 800cfd0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	687a      	ldr	r2, [r7, #4]
 800cfd8:	60da      	str	r2, [r3, #12]
}
 800cfda:	bf00      	nop
 800cfdc:	3714      	adds	r7, #20
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe4:	4770      	bx	lr
	...

0800cfe8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b086      	sub	sp, #24
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	60f8      	str	r0, [r7, #12]
 800cff0:	60b9      	str	r1, [r7, #8]
 800cff2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800cff6:	2300      	movs	r3, #0
 800cff8:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800cffa:	4b2f      	ldr	r3, [pc, #188]	@ (800d0b8 <HAL_FLASH_Program+0xd0>)
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	2b01      	cmp	r3, #1
 800d000:	d101      	bne.n	800d006 <HAL_FLASH_Program+0x1e>
 800d002:	2302      	movs	r3, #2
 800d004:	e053      	b.n	800d0ae <HAL_FLASH_Program+0xc6>
 800d006:	4b2c      	ldr	r3, [pc, #176]	@ (800d0b8 <HAL_FLASH_Program+0xd0>)
 800d008:	2201      	movs	r2, #1
 800d00a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d00c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d010:	f000 f8c6 	bl	800d1a0 <FLASH_WaitForLastOperation>
 800d014:	4603      	mov	r3, r0
 800d016:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800d018:	7dfb      	ldrb	r3, [r7, #23]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d143      	bne.n	800d0a6 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d01e:	4b26      	ldr	r3, [pc, #152]	@ (800d0b8 <HAL_FLASH_Program+0xd0>)
 800d020:	2200      	movs	r2, #0
 800d022:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800d024:	4b25      	ldr	r3, [pc, #148]	@ (800d0bc <HAL_FLASH_Program+0xd4>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d009      	beq.n	800d044 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800d030:	4b22      	ldr	r3, [pc, #136]	@ (800d0bc <HAL_FLASH_Program+0xd4>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	4a21      	ldr	r2, [pc, #132]	@ (800d0bc <HAL_FLASH_Program+0xd4>)
 800d036:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d03a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800d03c:	4b1e      	ldr	r3, [pc, #120]	@ (800d0b8 <HAL_FLASH_Program+0xd0>)
 800d03e:	2202      	movs	r2, #2
 800d040:	771a      	strb	r2, [r3, #28]
 800d042:	e002      	b.n	800d04a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800d044:	4b1c      	ldr	r3, [pc, #112]	@ (800d0b8 <HAL_FLASH_Program+0xd0>)
 800d046:	2200      	movs	r2, #0
 800d048:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d107      	bne.n	800d060 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800d050:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d054:	68b8      	ldr	r0, [r7, #8]
 800d056:	f000 f8f9 	bl	800d24c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800d05a:	2301      	movs	r3, #1
 800d05c:	613b      	str	r3, [r7, #16]
 800d05e:	e010      	b.n	800d082 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	2b01      	cmp	r3, #1
 800d064:	d002      	beq.n	800d06c <HAL_FLASH_Program+0x84>
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2b02      	cmp	r3, #2
 800d06a:	d10a      	bne.n	800d082 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	4619      	mov	r1, r3
 800d070:	68b8      	ldr	r0, [r7, #8]
 800d072:	f000 f911 	bl	800d298 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	2b02      	cmp	r3, #2
 800d07a:	d102      	bne.n	800d082 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800d07c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d080:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d082:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d086:	f000 f88b 	bl	800d1a0 <FLASH_WaitForLastOperation>
 800d08a:	4603      	mov	r3, r0
 800d08c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d006      	beq.n	800d0a2 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800d094:	4b09      	ldr	r3, [pc, #36]	@ (800d0bc <HAL_FLASH_Program+0xd4>)
 800d096:	695a      	ldr	r2, [r3, #20]
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	43db      	mvns	r3, r3
 800d09c:	4907      	ldr	r1, [pc, #28]	@ (800d0bc <HAL_FLASH_Program+0xd4>)
 800d09e:	4013      	ands	r3, r2
 800d0a0:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800d0a2:	f000 fae5 	bl	800d670 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d0a6:	4b04      	ldr	r3, [pc, #16]	@ (800d0b8 <HAL_FLASH_Program+0xd0>)
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	701a      	strb	r2, [r3, #0]

  return status;
 800d0ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3718      	adds	r7, #24
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
 800d0b6:	bf00      	nop
 800d0b8:	2000017c 	.word	0x2000017c
 800d0bc:	40022000 	.word	0x40022000

0800d0c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b083      	sub	sp, #12
 800d0c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800d0ca:	4b0b      	ldr	r3, [pc, #44]	@ (800d0f8 <HAL_FLASH_Unlock+0x38>)
 800d0cc:	695b      	ldr	r3, [r3, #20]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	da0b      	bge.n	800d0ea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800d0d2:	4b09      	ldr	r3, [pc, #36]	@ (800d0f8 <HAL_FLASH_Unlock+0x38>)
 800d0d4:	4a09      	ldr	r2, [pc, #36]	@ (800d0fc <HAL_FLASH_Unlock+0x3c>)
 800d0d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800d0d8:	4b07      	ldr	r3, [pc, #28]	@ (800d0f8 <HAL_FLASH_Unlock+0x38>)
 800d0da:	4a09      	ldr	r2, [pc, #36]	@ (800d100 <HAL_FLASH_Unlock+0x40>)
 800d0dc:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800d0de:	4b06      	ldr	r3, [pc, #24]	@ (800d0f8 <HAL_FLASH_Unlock+0x38>)
 800d0e0:	695b      	ldr	r3, [r3, #20]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	da01      	bge.n	800d0ea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800d0ea:	79fb      	ldrb	r3, [r7, #7]
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	370c      	adds	r7, #12
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr
 800d0f8:	40022000 	.word	0x40022000
 800d0fc:	45670123 	.word	0x45670123
 800d100:	cdef89ab 	.word	0xcdef89ab

0800d104 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800d104:	b480      	push	{r7}
 800d106:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800d108:	4b05      	ldr	r3, [pc, #20]	@ (800d120 <HAL_FLASH_Lock+0x1c>)
 800d10a:	695b      	ldr	r3, [r3, #20]
 800d10c:	4a04      	ldr	r2, [pc, #16]	@ (800d120 <HAL_FLASH_Lock+0x1c>)
 800d10e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d112:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800d114:	2300      	movs	r3, #0
}
 800d116:	4618      	mov	r0, r3
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr
 800d120:	40022000 	.word	0x40022000

0800d124 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800d124:	b480      	push	{r7}
 800d126:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 800d128:	4b09      	ldr	r3, [pc, #36]	@ (800d150 <HAL_FLASH_OB_Unlock+0x2c>)
 800d12a:	695b      	ldr	r3, [r3, #20]
 800d12c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d130:	2b00      	cmp	r3, #0
 800d132:	d007      	beq.n	800d144 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800d134:	4b06      	ldr	r3, [pc, #24]	@ (800d150 <HAL_FLASH_OB_Unlock+0x2c>)
 800d136:	4a07      	ldr	r2, [pc, #28]	@ (800d154 <HAL_FLASH_OB_Unlock+0x30>)
 800d138:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800d13a:	4b05      	ldr	r3, [pc, #20]	@ (800d150 <HAL_FLASH_OB_Unlock+0x2c>)
 800d13c:	4a06      	ldr	r2, [pc, #24]	@ (800d158 <HAL_FLASH_OB_Unlock+0x34>)
 800d13e:	60da      	str	r2, [r3, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d140:	2300      	movs	r3, #0
 800d142:	e000      	b.n	800d146 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800d144:	2301      	movs	r3, #1
}
 800d146:	4618      	mov	r0, r3
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr
 800d150:	40022000 	.word	0x40022000
 800d154:	08192a3b 	.word	0x08192a3b
 800d158:	4c5d6e7f 	.word	0x4c5d6e7f

0800d15c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800d15c:	b480      	push	{r7}
 800d15e:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 800d160:	4b05      	ldr	r3, [pc, #20]	@ (800d178 <HAL_FLASH_OB_Lock+0x1c>)
 800d162:	695b      	ldr	r3, [r3, #20]
 800d164:	4a04      	ldr	r2, [pc, #16]	@ (800d178 <HAL_FLASH_OB_Lock+0x1c>)
 800d166:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d16a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800d16c:	2300      	movs	r3, #0
}
 800d16e:	4618      	mov	r0, r3
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr
 800d178:	40022000 	.word	0x40022000

0800d17c <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 800d180:	4b06      	ldr	r3, [pc, #24]	@ (800d19c <HAL_FLASH_OB_Launch+0x20>)
 800d182:	695b      	ldr	r3, [r3, #20]
 800d184:	4a05      	ldr	r2, [pc, #20]	@ (800d19c <HAL_FLASH_OB_Launch+0x20>)
 800d186:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d18a:	6153      	str	r3, [r2, #20]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 800d18c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d190:	f000 f806 	bl	800d1a0 <FLASH_WaitForLastOperation>
 800d194:	4603      	mov	r3, r0
}
 800d196:	4618      	mov	r0, r3
 800d198:	bd80      	pop	{r7, pc}
 800d19a:	bf00      	nop
 800d19c:	40022000 	.word	0x40022000

0800d1a0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b084      	sub	sp, #16
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800d1a8:	f7fd fdae 	bl	800ad08 <HAL_GetTick>
 800d1ac:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800d1ae:	e00d      	b.n	800d1cc <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1b6:	d009      	beq.n	800d1cc <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800d1b8:	f7fd fda6 	bl	800ad08 <HAL_GetTick>
 800d1bc:	4602      	mov	r2, r0
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	1ad3      	subs	r3, r2, r3
 800d1c2:	687a      	ldr	r2, [r7, #4]
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d801      	bhi.n	800d1cc <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800d1c8:	2303      	movs	r3, #3
 800d1ca:	e036      	b.n	800d23a <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800d1cc:	4b1d      	ldr	r3, [pc, #116]	@ (800d244 <FLASH_WaitForLastOperation+0xa4>)
 800d1ce:	691b      	ldr	r3, [r3, #16]
 800d1d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d1eb      	bne.n	800d1b0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800d1d8:	4b1a      	ldr	r3, [pc, #104]	@ (800d244 <FLASH_WaitForLastOperation+0xa4>)
 800d1da:	691a      	ldr	r2, [r3, #16]
 800d1dc:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800d1e0:	4013      	ands	r3, r2
 800d1e2:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d01d      	beq.n	800d226 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800d1ea:	4b17      	ldr	r3, [pc, #92]	@ (800d248 <FLASH_WaitForLastOperation+0xa8>)
 800d1ec:	685a      	ldr	r2, [r3, #4]
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	4a15      	ldr	r2, [pc, #84]	@ (800d248 <FLASH_WaitForLastOperation+0xa8>)
 800d1f4:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d1fc:	d307      	bcc.n	800d20e <FLASH_WaitForLastOperation+0x6e>
 800d1fe:	4b11      	ldr	r3, [pc, #68]	@ (800d244 <FLASH_WaitForLastOperation+0xa4>)
 800d200:	699a      	ldr	r2, [r3, #24]
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800d208:	490e      	ldr	r1, [pc, #56]	@ (800d244 <FLASH_WaitForLastOperation+0xa4>)
 800d20a:	4313      	orrs	r3, r2
 800d20c:	618b      	str	r3, [r1, #24]
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800d214:	2b00      	cmp	r3, #0
 800d216:	d004      	beq.n	800d222 <FLASH_WaitForLastOperation+0x82>
 800d218:	4a0a      	ldr	r2, [pc, #40]	@ (800d244 <FLASH_WaitForLastOperation+0xa4>)
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800d220:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800d222:	2301      	movs	r3, #1
 800d224:	e009      	b.n	800d23a <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800d226:	4b07      	ldr	r3, [pc, #28]	@ (800d244 <FLASH_WaitForLastOperation+0xa4>)
 800d228:	691b      	ldr	r3, [r3, #16]
 800d22a:	f003 0301 	and.w	r3, r3, #1
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d002      	beq.n	800d238 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800d232:	4b04      	ldr	r3, [pc, #16]	@ (800d244 <FLASH_WaitForLastOperation+0xa4>)
 800d234:	2201      	movs	r2, #1
 800d236:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800d238:	2300      	movs	r3, #0
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3710      	adds	r7, #16
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	40022000 	.word	0x40022000
 800d248:	2000017c 	.word	0x2000017c

0800d24c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b085      	sub	sp, #20
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800d258:	4b0e      	ldr	r3, [pc, #56]	@ (800d294 <FLASH_Program_DoubleWord+0x48>)
 800d25a:	695b      	ldr	r3, [r3, #20]
 800d25c:	4a0d      	ldr	r2, [pc, #52]	@ (800d294 <FLASH_Program_DoubleWord+0x48>)
 800d25e:	f043 0301 	orr.w	r3, r3, #1
 800d262:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	683a      	ldr	r2, [r7, #0]
 800d268:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800d26a:	f3bf 8f6f 	isb	sy
}
 800d26e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800d270:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d274:	f04f 0200 	mov.w	r2, #0
 800d278:	f04f 0300 	mov.w	r3, #0
 800d27c:	000a      	movs	r2, r1
 800d27e:	2300      	movs	r3, #0
 800d280:	68f9      	ldr	r1, [r7, #12]
 800d282:	3104      	adds	r1, #4
 800d284:	4613      	mov	r3, r2
 800d286:	600b      	str	r3, [r1, #0]
}
 800d288:	bf00      	nop
 800d28a:	3714      	adds	r7, #20
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	4770      	bx	lr
 800d294:	40022000 	.word	0x40022000

0800d298 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800d298:	b480      	push	{r7}
 800d29a:	b089      	sub	sp, #36	@ 0x24
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800d2a2:	2340      	movs	r3, #64	@ 0x40
 800d2a4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800d2ae:	4b14      	ldr	r3, [pc, #80]	@ (800d300 <FLASH_Program_Fast+0x68>)
 800d2b0:	695b      	ldr	r3, [r3, #20]
 800d2b2:	4a13      	ldr	r2, [pc, #76]	@ (800d300 <FLASH_Program_Fast+0x68>)
 800d2b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d2b8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d2ba:	f3ef 8310 	mrs	r3, PRIMASK
 800d2be:	60fb      	str	r3, [r7, #12]
  return(result);
 800d2c0:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800d2c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d2c4:	b672      	cpsid	i
}
 800d2c6:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	681a      	ldr	r2, [r3, #0]
 800d2cc:	69bb      	ldr	r3, [r7, #24]
 800d2ce:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800d2d0:	69bb      	ldr	r3, [r7, #24]
 800d2d2:	3304      	adds	r3, #4
 800d2d4:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	3304      	adds	r3, #4
 800d2da:	617b      	str	r3, [r7, #20]
    row_index--;
 800d2dc:	7ffb      	ldrb	r3, [r7, #31]
 800d2de:	3b01      	subs	r3, #1
 800d2e0:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800d2e2:	7ffb      	ldrb	r3, [r7, #31]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d1ef      	bne.n	800d2c8 <FLASH_Program_Fast+0x30>
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	f383 8810 	msr	PRIMASK, r3
}
 800d2f2:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800d2f4:	bf00      	nop
 800d2f6:	3724      	adds	r7, #36	@ 0x24
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fe:	4770      	bx	lr
 800d300:	40022000 	.word	0x40022000

0800d304 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d30e:	4b49      	ldr	r3, [pc, #292]	@ (800d434 <HAL_FLASHEx_Erase+0x130>)
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	2b01      	cmp	r3, #1
 800d314:	d101      	bne.n	800d31a <HAL_FLASHEx_Erase+0x16>
 800d316:	2302      	movs	r3, #2
 800d318:	e087      	b.n	800d42a <HAL_FLASHEx_Erase+0x126>
 800d31a:	4b46      	ldr	r3, [pc, #280]	@ (800d434 <HAL_FLASHEx_Erase+0x130>)
 800d31c:	2201      	movs	r2, #1
 800d31e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d320:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d324:	f7ff ff3c 	bl	800d1a0 <FLASH_WaitForLastOperation>
 800d328:	4603      	mov	r3, r0
 800d32a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800d32c:	7bfb      	ldrb	r3, [r7, #15]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d177      	bne.n	800d422 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d332:	4b40      	ldr	r3, [pc, #256]	@ (800d434 <HAL_FLASHEx_Erase+0x130>)
 800d334:	2200      	movs	r2, #0
 800d336:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800d338:	4b3f      	ldr	r3, [pc, #252]	@ (800d438 <HAL_FLASHEx_Erase+0x134>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d340:	2b00      	cmp	r3, #0
 800d342:	d013      	beq.n	800d36c <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800d344:	4b3c      	ldr	r3, [pc, #240]	@ (800d438 <HAL_FLASHEx_Erase+0x134>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d009      	beq.n	800d364 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800d350:	4b39      	ldr	r3, [pc, #228]	@ (800d438 <HAL_FLASHEx_Erase+0x134>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	4a38      	ldr	r2, [pc, #224]	@ (800d438 <HAL_FLASHEx_Erase+0x134>)
 800d356:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d35a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800d35c:	4b35      	ldr	r3, [pc, #212]	@ (800d434 <HAL_FLASHEx_Erase+0x130>)
 800d35e:	2203      	movs	r2, #3
 800d360:	771a      	strb	r2, [r3, #28]
 800d362:	e016      	b.n	800d392 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800d364:	4b33      	ldr	r3, [pc, #204]	@ (800d434 <HAL_FLASHEx_Erase+0x130>)
 800d366:	2201      	movs	r2, #1
 800d368:	771a      	strb	r2, [r3, #28]
 800d36a:	e012      	b.n	800d392 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800d36c:	4b32      	ldr	r3, [pc, #200]	@ (800d438 <HAL_FLASHEx_Erase+0x134>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d374:	2b00      	cmp	r3, #0
 800d376:	d009      	beq.n	800d38c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800d378:	4b2f      	ldr	r3, [pc, #188]	@ (800d438 <HAL_FLASHEx_Erase+0x134>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	4a2e      	ldr	r2, [pc, #184]	@ (800d438 <HAL_FLASHEx_Erase+0x134>)
 800d37e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d382:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800d384:	4b2b      	ldr	r3, [pc, #172]	@ (800d434 <HAL_FLASHEx_Erase+0x130>)
 800d386:	2202      	movs	r2, #2
 800d388:	771a      	strb	r2, [r3, #28]
 800d38a:	e002      	b.n	800d392 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800d38c:	4b29      	ldr	r3, [pc, #164]	@ (800d434 <HAL_FLASHEx_Erase+0x130>)
 800d38e:	2200      	movs	r2, #0
 800d390:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	2b01      	cmp	r3, #1
 800d398:	d113      	bne.n	800d3c2 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	685b      	ldr	r3, [r3, #4]
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f000 f908 	bl	800d5b4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d3a4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d3a8:	f7ff fefa 	bl	800d1a0 <FLASH_WaitForLastOperation>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800d3b0:	4b21      	ldr	r3, [pc, #132]	@ (800d438 <HAL_FLASHEx_Erase+0x134>)
 800d3b2:	695b      	ldr	r3, [r3, #20]
 800d3b4:	4a20      	ldr	r2, [pc, #128]	@ (800d438 <HAL_FLASHEx_Erase+0x134>)
 800d3b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d3ba:	f023 0304 	bic.w	r3, r3, #4
 800d3be:	6153      	str	r3, [r2, #20]
 800d3c0:	e02d      	b.n	800d41e <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3c8:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	689b      	ldr	r3, [r3, #8]
 800d3ce:	60bb      	str	r3, [r7, #8]
 800d3d0:	e01d      	b.n	800d40e <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	685b      	ldr	r3, [r3, #4]
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	68b8      	ldr	r0, [r7, #8]
 800d3da:	f000 f913 	bl	800d604 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d3de:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d3e2:	f7ff fedd 	bl	800d1a0 <FLASH_WaitForLastOperation>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800d3ea:	4b13      	ldr	r3, [pc, #76]	@ (800d438 <HAL_FLASHEx_Erase+0x134>)
 800d3ec:	695b      	ldr	r3, [r3, #20]
 800d3ee:	4a12      	ldr	r2, [pc, #72]	@ (800d438 <HAL_FLASHEx_Erase+0x134>)
 800d3f0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800d3f4:	f023 0302 	bic.w	r3, r3, #2
 800d3f8:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800d3fa:	7bfb      	ldrb	r3, [r7, #15]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d003      	beq.n	800d408 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	68ba      	ldr	r2, [r7, #8]
 800d404:	601a      	str	r2, [r3, #0]
          break;
 800d406:	e00a      	b.n	800d41e <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	3301      	adds	r3, #1
 800d40c:	60bb      	str	r3, [r7, #8]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	689a      	ldr	r2, [r3, #8]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	68db      	ldr	r3, [r3, #12]
 800d416:	4413      	add	r3, r2
 800d418:	68ba      	ldr	r2, [r7, #8]
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d3d9      	bcc.n	800d3d2 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800d41e:	f000 f927 	bl	800d670 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d422:	4b04      	ldr	r3, [pc, #16]	@ (800d434 <HAL_FLASHEx_Erase+0x130>)
 800d424:	2200      	movs	r2, #0
 800d426:	701a      	strb	r2, [r3, #0]

  return status;
 800d428:	7bfb      	ldrb	r3, [r7, #15]
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3710      	adds	r7, #16
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	2000017c 	.word	0x2000017c
 800d438:	40022000 	.word	0x40022000

0800d43c <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d444:	2300      	movs	r3, #0
 800d446:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d448:	4b32      	ldr	r3, [pc, #200]	@ (800d514 <HAL_FLASHEx_OBProgram+0xd8>)
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	d101      	bne.n	800d454 <HAL_FLASHEx_OBProgram+0x18>
 800d450:	2302      	movs	r3, #2
 800d452:	e05a      	b.n	800d50a <HAL_FLASHEx_OBProgram+0xce>
 800d454:	4b2f      	ldr	r3, [pc, #188]	@ (800d514 <HAL_FLASHEx_OBProgram+0xd8>)
 800d456:	2201      	movs	r2, #1
 800d458:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d45a:	4b2e      	ldr	r3, [pc, #184]	@ (800d514 <HAL_FLASHEx_OBProgram+0xd8>)
 800d45c:	2200      	movs	r2, #0
 800d45e:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f003 0301 	and.w	r3, r3, #1
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d00d      	beq.n	800d488 <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if(FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6858      	ldr	r0, [r3, #4]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6899      	ldr	r1, [r3, #8]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	68db      	ldr	r3, [r3, #12]
 800d478:	461a      	mov	r2, r3
 800d47a:	f000 f943 	bl	800d704 <FLASH_OB_WRPConfig>
 800d47e:	4603      	mov	r3, r0
 800d480:	2b00      	cmp	r3, #0
 800d482:	d001      	beq.n	800d488 <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 800d484:	2301      	movs	r3, #1
 800d486:	73fb      	strb	r3, [r7, #15]
    }

  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f003 0302 	and.w	r3, r3, #2
 800d490:	2b00      	cmp	r3, #0
 800d492:	d009      	beq.n	800d4a8 <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	691b      	ldr	r3, [r3, #16]
 800d498:	4618      	mov	r0, r3
 800d49a:	f000 f997 	bl	800d7cc <FLASH_OB_RDPConfig>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d001      	beq.n	800d4a8 <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* User Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f003 0304 	and.w	r3, r3, #4
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d00c      	beq.n	800d4ce <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	695a      	ldr	r2, [r3, #20]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	699b      	ldr	r3, [r3, #24]
 800d4bc:	4619      	mov	r1, r3
 800d4be:	4610      	mov	r0, r2
 800d4c0:	f000 f9b2 	bl	800d828 <FLASH_OB_UserConfig>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d001      	beq.n	800d4ce <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* PCROP Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	f003 0308 	and.w	r3, r3, #8
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d013      	beq.n	800d502 <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6a1a      	ldr	r2, [r3, #32]
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	d00d      	beq.n	800d502 <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	69d8      	ldr	r0, [r3, #28]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6a19      	ldr	r1, [r3, #32]
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	f000 fa90 	bl	800da18 <FLASH_OB_PCROPConfig>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d001      	beq.n	800d502 <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 800d4fe:	2301      	movs	r3, #1
 800d500:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d502:	4b04      	ldr	r3, [pc, #16]	@ (800d514 <HAL_FLASHEx_OBProgram+0xd8>)
 800d504:	2200      	movs	r2, #0
 800d506:	701a      	strb	r2, [r3, #0]

  return status;
 800d508:	7bfb      	ldrb	r3, [r7, #15]
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3710      	adds	r7, #16
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}
 800d512:	bf00      	nop
 800d514:	2000017c 	.word	0x2000017c

0800d518 <HAL_FLASHEx_OBGetConfig>:
  *         which area is requested for the WRP and PCROP, else no information will be returned
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b082      	sub	sp, #8
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2206      	movs	r2, #6
 800d524:	601a      	str	r2, [r3, #0]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	685b      	ldr	r3, [r3, #4]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d00b      	beq.n	800d546 <HAL_FLASHEx_OBGetConfig+0x2e>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	685b      	ldr	r3, [r3, #4]
 800d532:	2b01      	cmp	r3, #1
 800d534:	d007      	beq.n	800d546 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	685b      	ldr	r3, [r3, #4]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800d53a:	2b02      	cmp	r3, #2
 800d53c:	d003      	beq.n	800d546 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	685b      	ldr	r3, [r3, #4]
 800d542:	2b04      	cmp	r3, #4
 800d544:	d10f      	bne.n	800d566 <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f043 0201 	orr.w	r2, r3, #1
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6858      	ldr	r0, [r3, #4]
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f103 0108 	add.w	r1, r3, #8
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	330c      	adds	r3, #12
 800d560:	461a      	mov	r2, r3
 800d562:	f000 fb05 	bl	800db70 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800d566:	f000 fb4d 	bl	800dc04 <FLASH_OB_GetRDP>
 800d56a:	4602      	mov	r2, r0
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800d570:	f000 fb62 	bl	800dc38 <FLASH_OB_GetUser>
 800d574:	4602      	mov	r2, r0
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	619a      	str	r2, [r3, #24]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	69db      	ldr	r3, [r3, #28]
 800d57e:	2b01      	cmp	r3, #1
 800d580:	d003      	beq.n	800d58a <HAL_FLASHEx_OBGetConfig+0x72>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	69db      	ldr	r3, [r3, #28]
 800d586:	2b02      	cmp	r3, #2
 800d588:	d110      	bne.n	800d5ac <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if(pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f043 0208 	orr.w	r2, r3, #8
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f103 001c 	add.w	r0, r3, #28
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f103 0120 	add.w	r1, r3, #32
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	3324      	adds	r3, #36	@ 0x24
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	f000 fb5a 	bl	800dc60 <FLASH_OB_GetPCROP>
  }
}
 800d5ac:	bf00      	nop
 800d5ae:	3708      	adds	r7, #8
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}

0800d5b4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b083      	sub	sp, #12
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f003 0301 	and.w	r3, r3, #1
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d005      	beq.n	800d5d2 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800d5c6:	4b0e      	ldr	r3, [pc, #56]	@ (800d600 <FLASH_MassErase+0x4c>)
 800d5c8:	695b      	ldr	r3, [r3, #20]
 800d5ca:	4a0d      	ldr	r2, [pc, #52]	@ (800d600 <FLASH_MassErase+0x4c>)
 800d5cc:	f043 0304 	orr.w	r3, r3, #4
 800d5d0:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f003 0302 	and.w	r3, r3, #2
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d005      	beq.n	800d5e8 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800d5dc:	4b08      	ldr	r3, [pc, #32]	@ (800d600 <FLASH_MassErase+0x4c>)
 800d5de:	695b      	ldr	r3, [r3, #20]
 800d5e0:	4a07      	ldr	r2, [pc, #28]	@ (800d600 <FLASH_MassErase+0x4c>)
 800d5e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d5e6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d5e8:	4b05      	ldr	r3, [pc, #20]	@ (800d600 <FLASH_MassErase+0x4c>)
 800d5ea:	695b      	ldr	r3, [r3, #20]
 800d5ec:	4a04      	ldr	r2, [pc, #16]	@ (800d600 <FLASH_MassErase+0x4c>)
 800d5ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d5f2:	6153      	str	r3, [r2, #20]
}
 800d5f4:	bf00      	nop
 800d5f6:	370c      	adds	r7, #12
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr
 800d600:	40022000 	.word	0x40022000

0800d604 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800d604:	b480      	push	{r7}
 800d606:	b083      	sub	sp, #12
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	f003 0301 	and.w	r3, r3, #1
 800d614:	2b00      	cmp	r3, #0
 800d616:	d006      	beq.n	800d626 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800d618:	4b14      	ldr	r3, [pc, #80]	@ (800d66c <FLASH_PageErase+0x68>)
 800d61a:	695b      	ldr	r3, [r3, #20]
 800d61c:	4a13      	ldr	r2, [pc, #76]	@ (800d66c <FLASH_PageErase+0x68>)
 800d61e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d622:	6153      	str	r3, [r2, #20]
 800d624:	e005      	b.n	800d632 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800d626:	4b11      	ldr	r3, [pc, #68]	@ (800d66c <FLASH_PageErase+0x68>)
 800d628:	695b      	ldr	r3, [r3, #20]
 800d62a:	4a10      	ldr	r2, [pc, #64]	@ (800d66c <FLASH_PageErase+0x68>)
 800d62c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d630:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800d632:	4b0e      	ldr	r3, [pc, #56]	@ (800d66c <FLASH_PageErase+0x68>)
 800d634:	695b      	ldr	r3, [r3, #20]
 800d636:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	00db      	lsls	r3, r3, #3
 800d63e:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 800d642:	490a      	ldr	r1, [pc, #40]	@ (800d66c <FLASH_PageErase+0x68>)
 800d644:	4313      	orrs	r3, r2
 800d646:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800d648:	4b08      	ldr	r3, [pc, #32]	@ (800d66c <FLASH_PageErase+0x68>)
 800d64a:	695b      	ldr	r3, [r3, #20]
 800d64c:	4a07      	ldr	r2, [pc, #28]	@ (800d66c <FLASH_PageErase+0x68>)
 800d64e:	f043 0302 	orr.w	r3, r3, #2
 800d652:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d654:	4b05      	ldr	r3, [pc, #20]	@ (800d66c <FLASH_PageErase+0x68>)
 800d656:	695b      	ldr	r3, [r3, #20]
 800d658:	4a04      	ldr	r2, [pc, #16]	@ (800d66c <FLASH_PageErase+0x68>)
 800d65a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d65e:	6153      	str	r3, [r2, #20]
}
 800d660:	bf00      	nop
 800d662:	370c      	adds	r7, #12
 800d664:	46bd      	mov	sp, r7
 800d666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66a:	4770      	bx	lr
 800d66c:	40022000 	.word	0x40022000

0800d670 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800d670:	b480      	push	{r7}
 800d672:	b083      	sub	sp, #12
 800d674:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800d676:	4b21      	ldr	r3, [pc, #132]	@ (800d6fc <FLASH_FlushCaches+0x8c>)
 800d678:	7f1b      	ldrb	r3, [r3, #28]
 800d67a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800d67c:	79fb      	ldrb	r3, [r7, #7]
 800d67e:	2b01      	cmp	r3, #1
 800d680:	d002      	beq.n	800d688 <FLASH_FlushCaches+0x18>
 800d682:	79fb      	ldrb	r3, [r7, #7]
 800d684:	2b03      	cmp	r3, #3
 800d686:	d117      	bne.n	800d6b8 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800d688:	4b1d      	ldr	r3, [pc, #116]	@ (800d700 <FLASH_FlushCaches+0x90>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	4a1c      	ldr	r2, [pc, #112]	@ (800d700 <FLASH_FlushCaches+0x90>)
 800d68e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d692:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800d694:	4b1a      	ldr	r3, [pc, #104]	@ (800d700 <FLASH_FlushCaches+0x90>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	4a19      	ldr	r2, [pc, #100]	@ (800d700 <FLASH_FlushCaches+0x90>)
 800d69a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d69e:	6013      	str	r3, [r2, #0]
 800d6a0:	4b17      	ldr	r3, [pc, #92]	@ (800d700 <FLASH_FlushCaches+0x90>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4a16      	ldr	r2, [pc, #88]	@ (800d700 <FLASH_FlushCaches+0x90>)
 800d6a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d6aa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d6ac:	4b14      	ldr	r3, [pc, #80]	@ (800d700 <FLASH_FlushCaches+0x90>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4a13      	ldr	r2, [pc, #76]	@ (800d700 <FLASH_FlushCaches+0x90>)
 800d6b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d6b6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800d6b8:	79fb      	ldrb	r3, [r7, #7]
 800d6ba:	2b02      	cmp	r3, #2
 800d6bc:	d002      	beq.n	800d6c4 <FLASH_FlushCaches+0x54>
 800d6be:	79fb      	ldrb	r3, [r7, #7]
 800d6c0:	2b03      	cmp	r3, #3
 800d6c2:	d111      	bne.n	800d6e8 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800d6c4:	4b0e      	ldr	r3, [pc, #56]	@ (800d700 <FLASH_FlushCaches+0x90>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	4a0d      	ldr	r2, [pc, #52]	@ (800d700 <FLASH_FlushCaches+0x90>)
 800d6ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d6ce:	6013      	str	r3, [r2, #0]
 800d6d0:	4b0b      	ldr	r3, [pc, #44]	@ (800d700 <FLASH_FlushCaches+0x90>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	4a0a      	ldr	r2, [pc, #40]	@ (800d700 <FLASH_FlushCaches+0x90>)
 800d6d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d6da:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800d6dc:	4b08      	ldr	r3, [pc, #32]	@ (800d700 <FLASH_FlushCaches+0x90>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4a07      	ldr	r2, [pc, #28]	@ (800d700 <FLASH_FlushCaches+0x90>)
 800d6e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d6e6:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800d6e8:	4b04      	ldr	r3, [pc, #16]	@ (800d6fc <FLASH_FlushCaches+0x8c>)
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	771a      	strb	r2, [r3, #28]
}
 800d6ee:	bf00      	nop
 800d6f0:	370c      	adds	r7, #12
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f8:	4770      	bx	lr
 800d6fa:	bf00      	nop
 800d6fc:	2000017c 	.word	0x2000017c
 800d700:	40022000 	.word	0x40022000

0800d704 <FLASH_OB_WRPConfig>:
  *          This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1)
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b086      	sub	sp, #24
 800d708:	af00      	add	r7, sp, #0
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	60b9      	str	r1, [r7, #8]
 800d70e:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d710:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d714:	f7ff fd44 	bl	800d1a0 <FLASH_WaitForLastOperation>
 800d718:	4603      	mov	r3, r0
 800d71a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800d71c:	7dfb      	ldrb	r3, [r7, #23]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d14c      	bne.n	800d7bc <FLASH_OB_WRPConfig+0xb8>
  {
    /* Configure the write protected area */
    if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d10b      	bne.n	800d740 <FLASH_OB_WRPConfig+0x3c>
    {
      MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
 800d728:	4b27      	ldr	r3, [pc, #156]	@ (800d7c8 <FLASH_OB_WRPConfig+0xc4>)
 800d72a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d72c:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	0419      	lsls	r1, r3, #16
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	430b      	orrs	r3, r1
 800d738:	4923      	ldr	r1, [pc, #140]	@ (800d7c8 <FLASH_OB_WRPConfig+0xc4>)
 800d73a:	4313      	orrs	r3, r2
 800d73c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800d73e:	e02b      	b.n	800d798 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2b01      	cmp	r3, #1
 800d744:	d10b      	bne.n	800d75e <FLASH_OB_WRPConfig+0x5a>
    {
      MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
 800d746:	4b20      	ldr	r3, [pc, #128]	@ (800d7c8 <FLASH_OB_WRPConfig+0xc4>)
 800d748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d74a:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	0419      	lsls	r1, r3, #16
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	430b      	orrs	r3, r1
 800d756:	491c      	ldr	r1, [pc, #112]	@ (800d7c8 <FLASH_OB_WRPConfig+0xc4>)
 800d758:	4313      	orrs	r3, r2
 800d75a:	630b      	str	r3, [r1, #48]	@ 0x30
 800d75c:	e01c      	b.n	800d798 <FLASH_OB_WRPConfig+0x94>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	2b02      	cmp	r3, #2
 800d762:	d10b      	bne.n	800d77c <FLASH_OB_WRPConfig+0x78>
    {
      MODIFY_REG(FLASH->WRP2AR, (FLASH_WRP2AR_WRP2A_STRT | FLASH_WRP2AR_WRP2A_END),
 800d764:	4b18      	ldr	r3, [pc, #96]	@ (800d7c8 <FLASH_OB_WRPConfig+0xc4>)
 800d766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d768:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	0419      	lsls	r1, r3, #16
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	430b      	orrs	r3, r1
 800d774:	4914      	ldr	r1, [pc, #80]	@ (800d7c8 <FLASH_OB_WRPConfig+0xc4>)
 800d776:	4313      	orrs	r3, r2
 800d778:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800d77a:	e00d      	b.n	800d798 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2b04      	cmp	r3, #4
 800d780:	d10a      	bne.n	800d798 <FLASH_OB_WRPConfig+0x94>
    {
      MODIFY_REG(FLASH->WRP2BR, (FLASH_WRP2BR_WRP2B_STRT | FLASH_WRP2BR_WRP2B_END),
 800d782:	4b11      	ldr	r3, [pc, #68]	@ (800d7c8 <FLASH_OB_WRPConfig+0xc4>)
 800d784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d786:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	0419      	lsls	r1, r3, #16
 800d78e:	68bb      	ldr	r3, [r7, #8]
 800d790:	430b      	orrs	r3, r1
 800d792:	490d      	ldr	r1, [pc, #52]	@ (800d7c8 <FLASH_OB_WRPConfig+0xc4>)
 800d794:	4313      	orrs	r3, r2
 800d796:	650b      	str	r3, [r1, #80]	@ 0x50
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800d798:	4b0b      	ldr	r3, [pc, #44]	@ (800d7c8 <FLASH_OB_WRPConfig+0xc4>)
 800d79a:	695b      	ldr	r3, [r3, #20]
 800d79c:	4a0a      	ldr	r2, [pc, #40]	@ (800d7c8 <FLASH_OB_WRPConfig+0xc4>)
 800d79e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d7a2:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d7a4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d7a8:	f7ff fcfa 	bl	800d1a0 <FLASH_WaitForLastOperation>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	75fb      	strb	r3, [r7, #23]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800d7b0:	4b05      	ldr	r3, [pc, #20]	@ (800d7c8 <FLASH_OB_WRPConfig+0xc4>)
 800d7b2:	695b      	ldr	r3, [r3, #20]
 800d7b4:	4a04      	ldr	r2, [pc, #16]	@ (800d7c8 <FLASH_OB_WRPConfig+0xc4>)
 800d7b6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d7ba:	6153      	str	r3, [r2, #20]
  }

  return status;
 800d7bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3718      	adds	r7, #24
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	40022000 	.word	0x40022000

0800d7cc <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b084      	sub	sp, #16
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d7d4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d7d8:	f7ff fce2 	bl	800d1a0 <FLASH_WaitForLastOperation>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800d7e0:	7bfb      	ldrb	r3, [r7, #15]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d119      	bne.n	800d81a <FLASH_OB_RDPConfig+0x4e>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 800d7e6:	4b0f      	ldr	r3, [pc, #60]	@ (800d824 <FLASH_OB_RDPConfig+0x58>)
 800d7e8:	6a1b      	ldr	r3, [r3, #32]
 800d7ea:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d7ee:	490d      	ldr	r1, [pc, #52]	@ (800d824 <FLASH_OB_RDPConfig+0x58>)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	4313      	orrs	r3, r2
 800d7f4:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800d7f6:	4b0b      	ldr	r3, [pc, #44]	@ (800d824 <FLASH_OB_RDPConfig+0x58>)
 800d7f8:	695b      	ldr	r3, [r3, #20]
 800d7fa:	4a0a      	ldr	r2, [pc, #40]	@ (800d824 <FLASH_OB_RDPConfig+0x58>)
 800d7fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d800:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d802:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d806:	f7ff fccb 	bl	800d1a0 <FLASH_WaitForLastOperation>
 800d80a:	4603      	mov	r3, r0
 800d80c:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800d80e:	4b05      	ldr	r3, [pc, #20]	@ (800d824 <FLASH_OB_RDPConfig+0x58>)
 800d810:	695b      	ldr	r3, [r3, #20]
 800d812:	4a04      	ldr	r2, [pc, #16]	@ (800d824 <FLASH_OB_RDPConfig+0x58>)
 800d814:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d818:	6153      	str	r3, [r2, #20]
  }

  return status;
 800d81a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3710      	adds	r7, #16
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}
 800d824:	40022000 	.word	0x40022000

0800d828 <FLASH_OB_UserConfig>:
  *         DUALBANK(Bit21), nBOOT1(Bit23), SRAM2_PE(Bit24) and SRAM2_RST(Bit25).
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b086      	sub	sp, #24
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 800d832:	2300      	movs	r3, #0
 800d834:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 800d836:	2300      	movs	r3, #0
 800d838:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d83a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d83e:	f7ff fcaf 	bl	800d1a0 <FLASH_WaitForLastOperation>
 800d842:	4603      	mov	r3, r0
 800d844:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800d846:	7bfb      	ldrb	r3, [r7, #15]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	f040 80de 	bne.w	800da0a <FLASH_OB_UserConfig+0x1e2>
  {
    if((UserType & OB_USER_BOR_LEV) != 0U)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f003 0301 	and.w	r3, r3, #1
 800d854:	2b00      	cmp	r3, #0
 800d856:	d009      	beq.n	800d86c <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d85e:	697a      	ldr	r2, [r7, #20]
 800d860:	4313      	orrs	r3, r2
 800d862:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800d86a:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STOP) != 0U)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f003 0302 	and.w	r3, r3, #2
 800d872:	2b00      	cmp	r3, #0
 800d874:	d009      	beq.n	800d88a <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d87c:	697a      	ldr	r2, [r7, #20]
 800d87e:	4313      	orrs	r3, r2
 800d880:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d888:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STDBY) != 0U)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f003 0304 	and.w	r3, r3, #4
 800d890:	2b00      	cmp	r3, #0
 800d892:	d009      	beq.n	800d8a8 <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d89a:	697a      	ldr	r2, [r7, #20]
 800d89c:	4313      	orrs	r3, r2
 800d89e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d8a6:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_SHDW) != 0U)
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d009      	beq.n	800d8c6 <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d8b8:	697a      	ldr	r2, [r7, #20]
 800d8ba:	4313      	orrs	r3, r2
 800d8bc:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d8c4:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_SW) != 0U)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f003 0308 	and.w	r3, r3, #8
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d009      	beq.n	800d8e4 <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d8d6:	697a      	ldr	r2, [r7, #20]
 800d8d8:	4313      	orrs	r3, r2
 800d8da:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d8e2:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STOP) != 0U)
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f003 0310 	and.w	r3, r3, #16
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d009      	beq.n	800d902 <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d8f4:	697a      	ldr	r2, [r7, #20]
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d900:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STDBY) != 0U)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f003 0320 	and.w	r3, r3, #32
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d009      	beq.n	800d920 <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d912:	697a      	ldr	r2, [r7, #20]
 800d914:	4313      	orrs	r3, r2
 800d916:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d91e:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_WWDG_SW) != 0U)
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d926:	2b00      	cmp	r3, #0
 800d928:	d009      	beq.n	800d93e <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d930:	697a      	ldr	r2, [r7, #20]
 800d932:	4313      	orrs	r3, r2
 800d934:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d93c:	613b      	str	r3, [r7, #16]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_BFB2) != 0U)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d944:	2b00      	cmp	r3, #0
 800d946:	d009      	beq.n	800d95c <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d94e:	697a      	ldr	r2, [r7, #20]
 800d950:	4313      	orrs	r3, r2
 800d952:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d95a:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_DUALBANK) != 0U)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d962:	2b00      	cmp	r3, #0
 800d964:	d009      	beq.n	800d97a <FLASH_OB_UserConfig+0x152>
#else
      /* DUALBANK option byte should be modified */
      assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));

      /* Set value and mask for DUALBANK option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d96c:	697a      	ldr	r2, [r7, #20]
 800d96e:	4313      	orrs	r3, r2
 800d970:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_DUALBANK;
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d978:	613b      	str	r3, [r7, #16]
#endif
    }
#endif

    if((UserType & OB_USER_nBOOT1) != 0U)
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d980:	2b00      	cmp	r3, #0
 800d982:	d009      	beq.n	800d998 <FLASH_OB_UserConfig+0x170>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d98a:	697a      	ldr	r2, [r7, #20]
 800d98c:	4313      	orrs	r3, r2
 800d98e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d996:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_PE) != 0U)
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d009      	beq.n	800d9b6 <FLASH_OB_UserConfig+0x18e>
    {
      /* SRAM2_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_PARITY(UserConfig & FLASH_OPTR_SRAM2_PE));

      /* Set value and mask for SRAM2_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_PE);
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d9a8:	697a      	ldr	r2, [r7, #20]
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_PE;
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d9b4:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_RST) != 0U)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d009      	beq.n	800d9d4 <FLASH_OB_UserConfig+0x1ac>
    {
      /* SRAM2_RST option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));

      /* Set value and mask for SRAM2_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d9c6:	697a      	ldr	r2, [r7, #20]
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800d9d2:	613b      	str	r3, [r7, #16]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
    }
#endif

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 800d9d4:	4b0f      	ldr	r3, [pc, #60]	@ (800da14 <FLASH_OB_UserConfig+0x1ec>)
 800d9d6:	6a1a      	ldr	r2, [r3, #32]
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	43db      	mvns	r3, r3
 800d9dc:	401a      	ands	r2, r3
 800d9de:	490d      	ldr	r1, [pc, #52]	@ (800da14 <FLASH_OB_UserConfig+0x1ec>)
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800d9e6:	4b0b      	ldr	r3, [pc, #44]	@ (800da14 <FLASH_OB_UserConfig+0x1ec>)
 800d9e8:	695b      	ldr	r3, [r3, #20]
 800d9ea:	4a0a      	ldr	r2, [pc, #40]	@ (800da14 <FLASH_OB_UserConfig+0x1ec>)
 800d9ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d9f0:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d9f2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d9f6:	f7ff fbd3 	bl	800d1a0 <FLASH_WaitForLastOperation>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800d9fe:	4b05      	ldr	r3, [pc, #20]	@ (800da14 <FLASH_OB_UserConfig+0x1ec>)
 800da00:	695b      	ldr	r3, [r3, #20]
 800da02:	4a04      	ldr	r2, [pc, #16]	@ (800da14 <FLASH_OB_UserConfig+0x1ec>)
 800da04:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800da08:	6153      	str	r3, [r2, #20]
  }

  return status;
 800da0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3718      	adds	r7, #24
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}
 800da14:	40022000 	.word	0x40022000

0800da18 <FLASH_OB_PCROPConfig>:
  *          This parameter can be an address between PCROPStartAddr and end of the bank
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b088      	sub	sp, #32
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	60f8      	str	r0, [r7, #12]
 800da20:	60b9      	str	r1, [r7, #8]
 800da22:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800da24:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800da28:	f7ff fbba 	bl	800d1a0 <FLASH_WaitForLastOperation>
 800da2c:	4603      	mov	r3, r0
 800da2e:	77fb      	strb	r3, [r7, #31]

  if(status == HAL_OK)
 800da30:	7ffb      	ldrb	r3, [r7, #31]
 800da32:	2b00      	cmp	r3, #0
 800da34:	f040 808c 	bne.w	800db50 <FLASH_OB_PCROPConfig+0x138>
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800da38:	4b48      	ldr	r3, [pc, #288]	@ (800db5c <FLASH_OB_PCROPConfig+0x144>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da40:	2b00      	cmp	r3, #0
 800da42:	d115      	bne.n	800da70 <FLASH_OB_PCROPConfig+0x58>
    {
      bank1_addr = FLASH_BASE;
 800da44:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800da48:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800da4a:	4b45      	ldr	r3, [pc, #276]	@ (800db60 <FLASH_OB_PCROPConfig+0x148>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	b29b      	uxth	r3, r3
 800da50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800da54:	4293      	cmp	r3, r2
 800da56:	d008      	beq.n	800da6a <FLASH_OB_PCROPConfig+0x52>
 800da58:	4b41      	ldr	r3, [pc, #260]	@ (800db60 <FLASH_OB_PCROPConfig+0x148>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	029b      	lsls	r3, r3, #10
 800da5e:	085a      	lsrs	r2, r3, #1
 800da60:	4b40      	ldr	r3, [pc, #256]	@ (800db64 <FLASH_OB_PCROPConfig+0x14c>)
 800da62:	4013      	ands	r3, r2
 800da64:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800da68:	e000      	b.n	800da6c <FLASH_OB_PCROPConfig+0x54>
 800da6a:	4b3f      	ldr	r3, [pc, #252]	@ (800db68 <FLASH_OB_PCROPConfig+0x150>)
 800da6c:	617b      	str	r3, [r7, #20]
 800da6e:	e014      	b.n	800da9a <FLASH_OB_PCROPConfig+0x82>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800da70:	4b3b      	ldr	r3, [pc, #236]	@ (800db60 <FLASH_OB_PCROPConfig+0x148>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	b29b      	uxth	r3, r3
 800da76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d008      	beq.n	800da90 <FLASH_OB_PCROPConfig+0x78>
 800da7e:	4b38      	ldr	r3, [pc, #224]	@ (800db60 <FLASH_OB_PCROPConfig+0x148>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	029b      	lsls	r3, r3, #10
 800da84:	085a      	lsrs	r2, r3, #1
 800da86:	4b37      	ldr	r3, [pc, #220]	@ (800db64 <FLASH_OB_PCROPConfig+0x14c>)
 800da88:	4013      	ands	r3, r2
 800da8a:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800da8e:	e000      	b.n	800da92 <FLASH_OB_PCROPConfig+0x7a>
 800da90:	4b35      	ldr	r3, [pc, #212]	@ (800db68 <FLASH_OB_PCROPConfig+0x150>)
 800da92:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 800da94:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800da98:	617b      	str	r3, [r7, #20]
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	f003 0303 	and.w	r3, r3, #3
 800daa0:	2b01      	cmp	r3, #1
 800daa2:	d11a      	bne.n	800dada <FLASH_OB_PCROPConfig+0xc2>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 800daa4:	68ba      	ldr	r2, [r7, #8]
 800daa6:	69bb      	ldr	r3, [r7, #24]
 800daa8:	1ad3      	subs	r3, r2, r3
 800daaa:	08db      	lsrs	r3, r3, #3
 800daac:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 800daae:	4b2f      	ldr	r3, [pc, #188]	@ (800db6c <FLASH_OB_PCROPConfig+0x154>)
 800dab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dab2:	0c1b      	lsrs	r3, r3, #16
 800dab4:	041b      	lsls	r3, r3, #16
 800dab6:	492d      	ldr	r1, [pc, #180]	@ (800db6c <FLASH_OB_PCROPConfig+0x154>)
 800dab8:	693a      	ldr	r2, [r7, #16]
 800daba:	4313      	orrs	r3, r2
 800dabc:	624b      	str	r3, [r1, #36]	@ 0x24

        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 800dabe:	687a      	ldr	r2, [r7, #4]
 800dac0:	69bb      	ldr	r3, [r7, #24]
 800dac2:	1ad3      	subs	r3, r2, r3
 800dac4:	08db      	lsrs	r3, r3, #3
 800dac6:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 800dac8:	4b28      	ldr	r3, [pc, #160]	@ (800db6c <FLASH_OB_PCROPConfig+0x154>)
 800daca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dacc:	0c1b      	lsrs	r3, r3, #16
 800dace:	041b      	lsls	r3, r3, #16
 800dad0:	4926      	ldr	r1, [pc, #152]	@ (800db6c <FLASH_OB_PCROPConfig+0x154>)
 800dad2:	693a      	ldr	r2, [r7, #16]
 800dad4:	4313      	orrs	r3, r2
 800dad6:	628b      	str	r3, [r1, #40]	@ 0x28
 800dad8:	e01e      	b.n	800db18 <FLASH_OB_PCROPConfig+0x100>
      }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f003 0303 	and.w	r3, r3, #3
 800dae0:	2b02      	cmp	r3, #2
 800dae2:	d119      	bne.n	800db18 <FLASH_OB_PCROPConfig+0x100>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 800dae4:	68ba      	ldr	r2, [r7, #8]
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	1ad3      	subs	r3, r2, r3
 800daea:	08db      	lsrs	r3, r3, #3
 800daec:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 800daee:	4b1f      	ldr	r3, [pc, #124]	@ (800db6c <FLASH_OB_PCROPConfig+0x154>)
 800daf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800daf2:	0c1b      	lsrs	r3, r3, #16
 800daf4:	041b      	lsls	r3, r3, #16
 800daf6:	491d      	ldr	r1, [pc, #116]	@ (800db6c <FLASH_OB_PCROPConfig+0x154>)
 800daf8:	693a      	ldr	r2, [r7, #16]
 800dafa:	4313      	orrs	r3, r2
 800dafc:	644b      	str	r3, [r1, #68]	@ 0x44

        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	1ad3      	subs	r3, r2, r3
 800db04:	08db      	lsrs	r3, r3, #3
 800db06:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 800db08:	4b18      	ldr	r3, [pc, #96]	@ (800db6c <FLASH_OB_PCROPConfig+0x154>)
 800db0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800db0c:	0c1b      	lsrs	r3, r3, #16
 800db0e:	041b      	lsls	r3, r3, #16
 800db10:	4916      	ldr	r1, [pc, #88]	@ (800db6c <FLASH_OB_PCROPConfig+0x154>)
 800db12:	693a      	ldr	r2, [r7, #16]
 800db14:	4313      	orrs	r3, r2
 800db16:	648b      	str	r3, [r1, #72]	@ 0x48
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 800db18:	4b14      	ldr	r3, [pc, #80]	@ (800db6c <FLASH_OB_PCROPConfig+0x154>)
 800db1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db1c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800db26:	4911      	ldr	r1, [pc, #68]	@ (800db6c <FLASH_OB_PCROPConfig+0x154>)
 800db28:	4313      	orrs	r3, r2
 800db2a:	628b      	str	r3, [r1, #40]	@ 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800db2c:	4b0f      	ldr	r3, [pc, #60]	@ (800db6c <FLASH_OB_PCROPConfig+0x154>)
 800db2e:	695b      	ldr	r3, [r3, #20]
 800db30:	4a0e      	ldr	r2, [pc, #56]	@ (800db6c <FLASH_OB_PCROPConfig+0x154>)
 800db32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800db36:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800db38:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800db3c:	f7ff fb30 	bl	800d1a0 <FLASH_WaitForLastOperation>
 800db40:	4603      	mov	r3, r0
 800db42:	77fb      	strb	r3, [r7, #31]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800db44:	4b09      	ldr	r3, [pc, #36]	@ (800db6c <FLASH_OB_PCROPConfig+0x154>)
 800db46:	695b      	ldr	r3, [r3, #20]
 800db48:	4a08      	ldr	r2, [pc, #32]	@ (800db6c <FLASH_OB_PCROPConfig+0x154>)
 800db4a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800db4e:	6153      	str	r3, [r2, #20]
  }

  return status;
 800db50:	7ffb      	ldrb	r3, [r7, #31]
}
 800db52:	4618      	mov	r0, r3
 800db54:	3720      	adds	r7, #32
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}
 800db5a:	bf00      	nop
 800db5c:	40010000 	.word	0x40010000
 800db60:	1fff75e0 	.word	0x1fff75e0
 800db64:	01fffe00 	.word	0x01fffe00
 800db68:	08080000 	.word	0x08080000
 800db6c:	40022000 	.word	0x40022000

0800db70 <FLASH_OB_GetWRP>:
  *                        the write protected area
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t * WRPStartOffset, uint32_t * WRDPEndOffset)
{
 800db70:	b480      	push	{r7}
 800db72:	b085      	sub	sp, #20
 800db74:	af00      	add	r7, sp, #0
 800db76:	60f8      	str	r0, [r7, #12]
 800db78:	60b9      	str	r1, [r7, #8]
 800db7a:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d10b      	bne.n	800db9a <FLASH_OB_GetWRP+0x2a>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 800db82:	4b1f      	ldr	r3, [pc, #124]	@ (800dc00 <FLASH_OB_GetWRP+0x90>)
 800db84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db86:	b2da      	uxtb	r2, r3
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 800db8c:	4b1c      	ldr	r3, [pc, #112]	@ (800dc00 <FLASH_OB_GetWRP+0x90>)
 800db8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db90:	0c1b      	lsrs	r3, r3, #16
 800db92:	b2da      	uxtb	r2, r3
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 800db98:	e02b      	b.n	800dbf2 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	2b01      	cmp	r3, #1
 800db9e:	d10b      	bne.n	800dbb8 <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 800dba0:	4b17      	ldr	r3, [pc, #92]	@ (800dc00 <FLASH_OB_GetWRP+0x90>)
 800dba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dba4:	b2da      	uxtb	r2, r3
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 800dbaa:	4b15      	ldr	r3, [pc, #84]	@ (800dc00 <FLASH_OB_GetWRP+0x90>)
 800dbac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbae:	0c1b      	lsrs	r3, r3, #16
 800dbb0:	b2da      	uxtb	r2, r3
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	601a      	str	r2, [r3, #0]
}
 800dbb6:	e01c      	b.n	800dbf2 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2b02      	cmp	r3, #2
 800dbbc:	d10b      	bne.n	800dbd6 <FLASH_OB_GetWRP+0x66>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 800dbbe:	4b10      	ldr	r3, [pc, #64]	@ (800dc00 <FLASH_OB_GetWRP+0x90>)
 800dbc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dbc2:	b2da      	uxtb	r2, r3
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 800dbc8:	4b0d      	ldr	r3, [pc, #52]	@ (800dc00 <FLASH_OB_GetWRP+0x90>)
 800dbca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dbcc:	0c1b      	lsrs	r3, r3, #16
 800dbce:	b2da      	uxtb	r2, r3
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	601a      	str	r2, [r3, #0]
}
 800dbd4:	e00d      	b.n	800dbf2 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	2b04      	cmp	r3, #4
 800dbda:	d10a      	bne.n	800dbf2 <FLASH_OB_GetWRP+0x82>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 800dbdc:	4b08      	ldr	r3, [pc, #32]	@ (800dc00 <FLASH_OB_GetWRP+0x90>)
 800dbde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbe0:	b2da      	uxtb	r2, r3
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 800dbe6:	4b06      	ldr	r3, [pc, #24]	@ (800dc00 <FLASH_OB_GetWRP+0x90>)
 800dbe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbea:	0c1b      	lsrs	r3, r3, #16
 800dbec:	b2da      	uxtb	r2, r3
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	601a      	str	r2, [r3, #0]
}
 800dbf2:	bf00      	nop
 800dbf4:	3714      	adds	r7, #20
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfc:	4770      	bx	lr
 800dbfe:	bf00      	nop
 800dc00:	40022000 	.word	0x40022000

0800dc04 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 800dc04:	b480      	push	{r7}
 800dc06:	b083      	sub	sp, #12
 800dc08:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800dc0a:	4b0a      	ldr	r3, [pc, #40]	@ (800dc34 <FLASH_OB_GetRDP+0x30>)
 800dc0c:	6a1b      	ldr	r3, [r3, #32]
 800dc0e:	b2db      	uxtb	r3, r3
 800dc10:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2baa      	cmp	r3, #170	@ 0xaa
 800dc16:	d004      	beq.n	800dc22 <FLASH_OB_GetRDP+0x1e>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2bcc      	cmp	r3, #204	@ 0xcc
 800dc1c:	d001      	beq.n	800dc22 <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 800dc1e:	23bb      	movs	r3, #187	@ 0xbb
 800dc20:	e002      	b.n	800dc28 <FLASH_OB_GetRDP+0x24>
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 800dc22:	4b04      	ldr	r3, [pc, #16]	@ (800dc34 <FLASH_OB_GetRDP+0x30>)
 800dc24:	6a1b      	ldr	r3, [r3, #32]
 800dc26:	b2db      	uxtb	r3, r3
  }
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	370c      	adds	r7, #12
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc32:	4770      	bx	lr
 800dc34:	40022000 	.word	0x40022000

0800dc38 <FLASH_OB_GetUser>:
  *         BOR_LEV(Bit8-10), nRST_STOP(Bit12), nRST_STDBY(Bit13), nRST_SHDW(Bit14),
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27).
  */
static uint32_t FLASH_OB_GetUser(void)
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b083      	sub	sp, #12
 800dc3c:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 800dc3e:	4b07      	ldr	r3, [pc, #28]	@ (800dc5c <FLASH_OB_GetUser+0x24>)
 800dc40:	6a1b      	ldr	r3, [r3, #32]
 800dc42:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800dc4a:	607b      	str	r3, [r7, #4]

  return user_config;
 800dc4c:	687b      	ldr	r3, [r7, #4]
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	370c      	adds	r7, #12
 800dc52:	46bd      	mov	sp, r7
 800dc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc58:	4770      	bx	lr
 800dc5a:	bf00      	nop
 800dc5c:	40022000 	.word	0x40022000

0800dc60 <FLASH_OB_GetPCROP>:
  *                       the Proprietary code readout protection
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t * PCROPConfig, uint32_t * PCROPStartAddr, uint32_t * PCROPEndAddr)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b089      	sub	sp, #36	@ 0x24
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	60f8      	str	r0, [r7, #12]
 800dc68:	60b9      	str	r1, [r7, #8]
 800dc6a:	607a      	str	r2, [r7, #4]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800dc6c:	4b3b      	ldr	r3, [pc, #236]	@ (800dd5c <FLASH_OB_GetPCROP+0xfc>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d115      	bne.n	800dca4 <FLASH_OB_GetPCROP+0x44>
  {
    bank1_addr = FLASH_BASE;
 800dc78:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dc7c:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800dc7e:	4b38      	ldr	r3, [pc, #224]	@ (800dd60 <FLASH_OB_GetPCROP+0x100>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	b29b      	uxth	r3, r3
 800dc84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	d008      	beq.n	800dc9e <FLASH_OB_GetPCROP+0x3e>
 800dc8c:	4b34      	ldr	r3, [pc, #208]	@ (800dd60 <FLASH_OB_GetPCROP+0x100>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	029b      	lsls	r3, r3, #10
 800dc92:	085a      	lsrs	r2, r3, #1
 800dc94:	4b33      	ldr	r3, [pc, #204]	@ (800dd64 <FLASH_OB_GetPCROP+0x104>)
 800dc96:	4013      	ands	r3, r2
 800dc98:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800dc9c:	e000      	b.n	800dca0 <FLASH_OB_GetPCROP+0x40>
 800dc9e:	4b32      	ldr	r3, [pc, #200]	@ (800dd68 <FLASH_OB_GetPCROP+0x108>)
 800dca0:	61bb      	str	r3, [r7, #24]
 800dca2:	e014      	b.n	800dcce <FLASH_OB_GetPCROP+0x6e>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800dca4:	4b2e      	ldr	r3, [pc, #184]	@ (800dd60 <FLASH_OB_GetPCROP+0x100>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	d008      	beq.n	800dcc4 <FLASH_OB_GetPCROP+0x64>
 800dcb2:	4b2b      	ldr	r3, [pc, #172]	@ (800dd60 <FLASH_OB_GetPCROP+0x100>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	029b      	lsls	r3, r3, #10
 800dcb8:	085a      	lsrs	r2, r3, #1
 800dcba:	4b2a      	ldr	r3, [pc, #168]	@ (800dd64 <FLASH_OB_GetPCROP+0x104>)
 800dcbc:	4013      	ands	r3, r2
 800dcbe:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800dcc2:	e000      	b.n	800dcc6 <FLASH_OB_GetPCROP+0x66>
 800dcc4:	4b28      	ldr	r3, [pc, #160]	@ (800dd68 <FLASH_OB_GetPCROP+0x108>)
 800dcc6:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 800dcc8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dccc:	61bb      	str	r3, [r7, #24]
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f003 0303 	and.w	r3, r3, #3
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	d115      	bne.n	800dd06 <FLASH_OB_GetPCROP+0xa6>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 800dcda:	4b24      	ldr	r3, [pc, #144]	@ (800dd6c <FLASH_OB_GetPCROP+0x10c>)
 800dcdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcde:	b29b      	uxth	r3, r3
 800dce0:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	00da      	lsls	r2, r3, #3
 800dce6:	69fb      	ldr	r3, [r7, #28]
 800dce8:	441a      	add	r2, r3
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 800dcee:	4b1f      	ldr	r3, [pc, #124]	@ (800dd6c <FLASH_OB_GetPCROP+0x10c>)
 800dcf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcf2:	b29b      	uxth	r3, r3
 800dcf4:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	00da      	lsls	r2, r3, #3
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	4413      	add	r3, r2
 800dcfe:	1dda      	adds	r2, r3, #7
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	601a      	str	r2, [r3, #0]
 800dd04:	e01a      	b.n	800dd3c <FLASH_OB_GetPCROP+0xdc>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f003 0303 	and.w	r3, r3, #3
 800dd0e:	2b02      	cmp	r3, #2
 800dd10:	d114      	bne.n	800dd3c <FLASH_OB_GetPCROP+0xdc>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 800dd12:	4b16      	ldr	r3, [pc, #88]	@ (800dd6c <FLASH_OB_GetPCROP+0x10c>)
 800dd14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	00da      	lsls	r2, r3, #3
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	441a      	add	r2, r3
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 800dd26:	4b11      	ldr	r3, [pc, #68]	@ (800dd6c <FLASH_OB_GetPCROP+0x10c>)
 800dd28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr + 0x7U;
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	00da      	lsls	r2, r3, #3
 800dd32:	69bb      	ldr	r3, [r7, #24]
 800dd34:	4413      	add	r3, r2
 800dd36:	1dda      	adds	r2, r3, #7
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 800dd3c:	4b0b      	ldr	r3, [pc, #44]	@ (800dd6c <FLASH_OB_GetPCROP+0x10c>)
 800dd3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd40:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	431a      	orrs	r2, r3
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	601a      	str	r2, [r3, #0]
}
 800dd4e:	bf00      	nop
 800dd50:	3724      	adds	r7, #36	@ 0x24
 800dd52:	46bd      	mov	sp, r7
 800dd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd58:	4770      	bx	lr
 800dd5a:	bf00      	nop
 800dd5c:	40010000 	.word	0x40010000
 800dd60:	1fff75e0 	.word	0x1fff75e0
 800dd64:	01fffe00 	.word	0x01fffe00
 800dd68:	08080000 	.word	0x08080000
 800dd6c:	40022000 	.word	0x40022000

0800dd70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800dd70:	b480      	push	{r7}
 800dd72:	b087      	sub	sp, #28
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800dd7e:	e17f      	b.n	800e080 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	681a      	ldr	r2, [r3, #0]
 800dd84:	2101      	movs	r1, #1
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	fa01 f303 	lsl.w	r3, r1, r3
 800dd8c:	4013      	ands	r3, r2
 800dd8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	f000 8171 	beq.w	800e07a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	685b      	ldr	r3, [r3, #4]
 800dd9c:	f003 0303 	and.w	r3, r3, #3
 800dda0:	2b01      	cmp	r3, #1
 800dda2:	d005      	beq.n	800ddb0 <HAL_GPIO_Init+0x40>
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	685b      	ldr	r3, [r3, #4]
 800dda8:	f003 0303 	and.w	r3, r3, #3
 800ddac:	2b02      	cmp	r3, #2
 800ddae:	d130      	bne.n	800de12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	689b      	ldr	r3, [r3, #8]
 800ddb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	005b      	lsls	r3, r3, #1
 800ddba:	2203      	movs	r2, #3
 800ddbc:	fa02 f303 	lsl.w	r3, r2, r3
 800ddc0:	43db      	mvns	r3, r3
 800ddc2:	693a      	ldr	r2, [r7, #16]
 800ddc4:	4013      	ands	r3, r2
 800ddc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	68da      	ldr	r2, [r3, #12]
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	005b      	lsls	r3, r3, #1
 800ddd0:	fa02 f303 	lsl.w	r3, r2, r3
 800ddd4:	693a      	ldr	r2, [r7, #16]
 800ddd6:	4313      	orrs	r3, r2
 800ddd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	693a      	ldr	r2, [r7, #16]
 800ddde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	685b      	ldr	r3, [r3, #4]
 800dde4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800dde6:	2201      	movs	r2, #1
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	fa02 f303 	lsl.w	r3, r2, r3
 800ddee:	43db      	mvns	r3, r3
 800ddf0:	693a      	ldr	r2, [r7, #16]
 800ddf2:	4013      	ands	r3, r2
 800ddf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	685b      	ldr	r3, [r3, #4]
 800ddfa:	091b      	lsrs	r3, r3, #4
 800ddfc:	f003 0201 	and.w	r2, r3, #1
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	fa02 f303 	lsl.w	r3, r2, r3
 800de06:	693a      	ldr	r2, [r7, #16]
 800de08:	4313      	orrs	r3, r2
 800de0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	693a      	ldr	r2, [r7, #16]
 800de10:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	f003 0303 	and.w	r3, r3, #3
 800de1a:	2b03      	cmp	r3, #3
 800de1c:	d118      	bne.n	800de50 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800de24:	2201      	movs	r2, #1
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	fa02 f303 	lsl.w	r3, r2, r3
 800de2c:	43db      	mvns	r3, r3
 800de2e:	693a      	ldr	r2, [r7, #16]
 800de30:	4013      	ands	r3, r2
 800de32:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	685b      	ldr	r3, [r3, #4]
 800de38:	08db      	lsrs	r3, r3, #3
 800de3a:	f003 0201 	and.w	r2, r3, #1
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	fa02 f303 	lsl.w	r3, r2, r3
 800de44:	693a      	ldr	r2, [r7, #16]
 800de46:	4313      	orrs	r3, r2
 800de48:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	693a      	ldr	r2, [r7, #16]
 800de4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	f003 0303 	and.w	r3, r3, #3
 800de58:	2b03      	cmp	r3, #3
 800de5a:	d017      	beq.n	800de8c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	68db      	ldr	r3, [r3, #12]
 800de60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	005b      	lsls	r3, r3, #1
 800de66:	2203      	movs	r2, #3
 800de68:	fa02 f303 	lsl.w	r3, r2, r3
 800de6c:	43db      	mvns	r3, r3
 800de6e:	693a      	ldr	r2, [r7, #16]
 800de70:	4013      	ands	r3, r2
 800de72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	689a      	ldr	r2, [r3, #8]
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	005b      	lsls	r3, r3, #1
 800de7c:	fa02 f303 	lsl.w	r3, r2, r3
 800de80:	693a      	ldr	r2, [r7, #16]
 800de82:	4313      	orrs	r3, r2
 800de84:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	693a      	ldr	r2, [r7, #16]
 800de8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	685b      	ldr	r3, [r3, #4]
 800de90:	f003 0303 	and.w	r3, r3, #3
 800de94:	2b02      	cmp	r3, #2
 800de96:	d123      	bne.n	800dee0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	08da      	lsrs	r2, r3, #3
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	3208      	adds	r2, #8
 800dea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dea4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	f003 0307 	and.w	r3, r3, #7
 800deac:	009b      	lsls	r3, r3, #2
 800deae:	220f      	movs	r2, #15
 800deb0:	fa02 f303 	lsl.w	r3, r2, r3
 800deb4:	43db      	mvns	r3, r3
 800deb6:	693a      	ldr	r2, [r7, #16]
 800deb8:	4013      	ands	r3, r2
 800deba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	691a      	ldr	r2, [r3, #16]
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	f003 0307 	and.w	r3, r3, #7
 800dec6:	009b      	lsls	r3, r3, #2
 800dec8:	fa02 f303 	lsl.w	r3, r2, r3
 800decc:	693a      	ldr	r2, [r7, #16]
 800dece:	4313      	orrs	r3, r2
 800ded0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	08da      	lsrs	r2, r3, #3
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	3208      	adds	r2, #8
 800deda:	6939      	ldr	r1, [r7, #16]
 800dedc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	005b      	lsls	r3, r3, #1
 800deea:	2203      	movs	r2, #3
 800deec:	fa02 f303 	lsl.w	r3, r2, r3
 800def0:	43db      	mvns	r3, r3
 800def2:	693a      	ldr	r2, [r7, #16]
 800def4:	4013      	ands	r3, r2
 800def6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	685b      	ldr	r3, [r3, #4]
 800defc:	f003 0203 	and.w	r2, r3, #3
 800df00:	697b      	ldr	r3, [r7, #20]
 800df02:	005b      	lsls	r3, r3, #1
 800df04:	fa02 f303 	lsl.w	r3, r2, r3
 800df08:	693a      	ldr	r2, [r7, #16]
 800df0a:	4313      	orrs	r3, r2
 800df0c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	693a      	ldr	r2, [r7, #16]
 800df12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	685b      	ldr	r3, [r3, #4]
 800df18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	f000 80ac 	beq.w	800e07a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800df22:	4b5f      	ldr	r3, [pc, #380]	@ (800e0a0 <HAL_GPIO_Init+0x330>)
 800df24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800df26:	4a5e      	ldr	r2, [pc, #376]	@ (800e0a0 <HAL_GPIO_Init+0x330>)
 800df28:	f043 0301 	orr.w	r3, r3, #1
 800df2c:	6613      	str	r3, [r2, #96]	@ 0x60
 800df2e:	4b5c      	ldr	r3, [pc, #368]	@ (800e0a0 <HAL_GPIO_Init+0x330>)
 800df30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800df32:	f003 0301 	and.w	r3, r3, #1
 800df36:	60bb      	str	r3, [r7, #8]
 800df38:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800df3a:	4a5a      	ldr	r2, [pc, #360]	@ (800e0a4 <HAL_GPIO_Init+0x334>)
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	089b      	lsrs	r3, r3, #2
 800df40:	3302      	adds	r3, #2
 800df42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df46:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	f003 0303 	and.w	r3, r3, #3
 800df4e:	009b      	lsls	r3, r3, #2
 800df50:	220f      	movs	r2, #15
 800df52:	fa02 f303 	lsl.w	r3, r2, r3
 800df56:	43db      	mvns	r3, r3
 800df58:	693a      	ldr	r2, [r7, #16]
 800df5a:	4013      	ands	r3, r2
 800df5c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800df64:	d025      	beq.n	800dfb2 <HAL_GPIO_Init+0x242>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	4a4f      	ldr	r2, [pc, #316]	@ (800e0a8 <HAL_GPIO_Init+0x338>)
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d01f      	beq.n	800dfae <HAL_GPIO_Init+0x23e>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	4a4e      	ldr	r2, [pc, #312]	@ (800e0ac <HAL_GPIO_Init+0x33c>)
 800df72:	4293      	cmp	r3, r2
 800df74:	d019      	beq.n	800dfaa <HAL_GPIO_Init+0x23a>
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	4a4d      	ldr	r2, [pc, #308]	@ (800e0b0 <HAL_GPIO_Init+0x340>)
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d013      	beq.n	800dfa6 <HAL_GPIO_Init+0x236>
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	4a4c      	ldr	r2, [pc, #304]	@ (800e0b4 <HAL_GPIO_Init+0x344>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d00d      	beq.n	800dfa2 <HAL_GPIO_Init+0x232>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	4a4b      	ldr	r2, [pc, #300]	@ (800e0b8 <HAL_GPIO_Init+0x348>)
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d007      	beq.n	800df9e <HAL_GPIO_Init+0x22e>
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	4a4a      	ldr	r2, [pc, #296]	@ (800e0bc <HAL_GPIO_Init+0x34c>)
 800df92:	4293      	cmp	r3, r2
 800df94:	d101      	bne.n	800df9a <HAL_GPIO_Init+0x22a>
 800df96:	2306      	movs	r3, #6
 800df98:	e00c      	b.n	800dfb4 <HAL_GPIO_Init+0x244>
 800df9a:	2307      	movs	r3, #7
 800df9c:	e00a      	b.n	800dfb4 <HAL_GPIO_Init+0x244>
 800df9e:	2305      	movs	r3, #5
 800dfa0:	e008      	b.n	800dfb4 <HAL_GPIO_Init+0x244>
 800dfa2:	2304      	movs	r3, #4
 800dfa4:	e006      	b.n	800dfb4 <HAL_GPIO_Init+0x244>
 800dfa6:	2303      	movs	r3, #3
 800dfa8:	e004      	b.n	800dfb4 <HAL_GPIO_Init+0x244>
 800dfaa:	2302      	movs	r3, #2
 800dfac:	e002      	b.n	800dfb4 <HAL_GPIO_Init+0x244>
 800dfae:	2301      	movs	r3, #1
 800dfb0:	e000      	b.n	800dfb4 <HAL_GPIO_Init+0x244>
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	697a      	ldr	r2, [r7, #20]
 800dfb6:	f002 0203 	and.w	r2, r2, #3
 800dfba:	0092      	lsls	r2, r2, #2
 800dfbc:	4093      	lsls	r3, r2
 800dfbe:	693a      	ldr	r2, [r7, #16]
 800dfc0:	4313      	orrs	r3, r2
 800dfc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800dfc4:	4937      	ldr	r1, [pc, #220]	@ (800e0a4 <HAL_GPIO_Init+0x334>)
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	089b      	lsrs	r3, r3, #2
 800dfca:	3302      	adds	r3, #2
 800dfcc:	693a      	ldr	r2, [r7, #16]
 800dfce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800dfd2:	4b3b      	ldr	r3, [pc, #236]	@ (800e0c0 <HAL_GPIO_Init+0x350>)
 800dfd4:	689b      	ldr	r3, [r3, #8]
 800dfd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	43db      	mvns	r3, r3
 800dfdc:	693a      	ldr	r2, [r7, #16]
 800dfde:	4013      	ands	r3, r2
 800dfe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d003      	beq.n	800dff6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800dfee:	693a      	ldr	r2, [r7, #16]
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	4313      	orrs	r3, r2
 800dff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800dff6:	4a32      	ldr	r2, [pc, #200]	@ (800e0c0 <HAL_GPIO_Init+0x350>)
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800dffc:	4b30      	ldr	r3, [pc, #192]	@ (800e0c0 <HAL_GPIO_Init+0x350>)
 800dffe:	68db      	ldr	r3, [r3, #12]
 800e000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	43db      	mvns	r3, r3
 800e006:	693a      	ldr	r2, [r7, #16]
 800e008:	4013      	ands	r3, r2
 800e00a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	685b      	ldr	r3, [r3, #4]
 800e010:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e014:	2b00      	cmp	r3, #0
 800e016:	d003      	beq.n	800e020 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800e018:	693a      	ldr	r2, [r7, #16]
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	4313      	orrs	r3, r2
 800e01e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800e020:	4a27      	ldr	r2, [pc, #156]	@ (800e0c0 <HAL_GPIO_Init+0x350>)
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800e026:	4b26      	ldr	r3, [pc, #152]	@ (800e0c0 <HAL_GPIO_Init+0x350>)
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	43db      	mvns	r3, r3
 800e030:	693a      	ldr	r2, [r7, #16]
 800e032:	4013      	ands	r3, r2
 800e034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d003      	beq.n	800e04a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800e042:	693a      	ldr	r2, [r7, #16]
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	4313      	orrs	r3, r2
 800e048:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800e04a:	4a1d      	ldr	r2, [pc, #116]	@ (800e0c0 <HAL_GPIO_Init+0x350>)
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800e050:	4b1b      	ldr	r3, [pc, #108]	@ (800e0c0 <HAL_GPIO_Init+0x350>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	43db      	mvns	r3, r3
 800e05a:	693a      	ldr	r2, [r7, #16]
 800e05c:	4013      	ands	r3, r2
 800e05e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	685b      	ldr	r3, [r3, #4]
 800e064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d003      	beq.n	800e074 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800e06c:	693a      	ldr	r2, [r7, #16]
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	4313      	orrs	r3, r2
 800e072:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800e074:	4a12      	ldr	r2, [pc, #72]	@ (800e0c0 <HAL_GPIO_Init+0x350>)
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	3301      	adds	r3, #1
 800e07e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	681a      	ldr	r2, [r3, #0]
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	fa22 f303 	lsr.w	r3, r2, r3
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	f47f ae78 	bne.w	800dd80 <HAL_GPIO_Init+0x10>
  }
}
 800e090:	bf00      	nop
 800e092:	bf00      	nop
 800e094:	371c      	adds	r7, #28
 800e096:	46bd      	mov	sp, r7
 800e098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09c:	4770      	bx	lr
 800e09e:	bf00      	nop
 800e0a0:	40021000 	.word	0x40021000
 800e0a4:	40010000 	.word	0x40010000
 800e0a8:	48000400 	.word	0x48000400
 800e0ac:	48000800 	.word	0x48000800
 800e0b0:	48000c00 	.word	0x48000c00
 800e0b4:	48001000 	.word	0x48001000
 800e0b8:	48001400 	.word	0x48001400
 800e0bc:	48001800 	.word	0x48001800
 800e0c0:	40010400 	.word	0x40010400

0800e0c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e0c4:	b480      	push	{r7}
 800e0c6:	b083      	sub	sp, #12
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	460b      	mov	r3, r1
 800e0ce:	807b      	strh	r3, [r7, #2]
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e0d4:	787b      	ldrb	r3, [r7, #1]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d003      	beq.n	800e0e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800e0da:	887a      	ldrh	r2, [r7, #2]
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800e0e0:	e002      	b.n	800e0e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800e0e2:	887a      	ldrh	r2, [r7, #2]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800e0e8:	bf00      	nop
 800e0ea:	370c      	adds	r7, #12
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr

0800e0f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b082      	sub	sp, #8
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d101      	bne.n	800e106 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e102:	2301      	movs	r3, #1
 800e104:	e08d      	b.n	800e222 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d106      	bne.n	800e120 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2200      	movs	r2, #0
 800e116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f7f9 f8d0 	bl	80072c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2224      	movs	r2, #36	@ 0x24
 800e124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	681a      	ldr	r2, [r3, #0]
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	f022 0201 	bic.w	r2, r2, #1
 800e136:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	685a      	ldr	r2, [r3, #4]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800e144:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	689a      	ldr	r2, [r3, #8]
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e154:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	68db      	ldr	r3, [r3, #12]
 800e15a:	2b01      	cmp	r3, #1
 800e15c:	d107      	bne.n	800e16e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	689a      	ldr	r2, [r3, #8]
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e16a:	609a      	str	r2, [r3, #8]
 800e16c:	e006      	b.n	800e17c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	689a      	ldr	r2, [r3, #8]
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800e17a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	68db      	ldr	r3, [r3, #12]
 800e180:	2b02      	cmp	r3, #2
 800e182:	d108      	bne.n	800e196 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	685a      	ldr	r2, [r3, #4]
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e192:	605a      	str	r2, [r3, #4]
 800e194:	e007      	b.n	800e1a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	685a      	ldr	r2, [r3, #4]
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e1a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	685b      	ldr	r3, [r3, #4]
 800e1ac:	687a      	ldr	r2, [r7, #4]
 800e1ae:	6812      	ldr	r2, [r2, #0]
 800e1b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800e1b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e1b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	68da      	ldr	r2, [r3, #12]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e1c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	691a      	ldr	r2, [r3, #16]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	695b      	ldr	r3, [r3, #20]
 800e1d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	699b      	ldr	r3, [r3, #24]
 800e1da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	430a      	orrs	r2, r1
 800e1e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	69d9      	ldr	r1, [r3, #28]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6a1a      	ldr	r2, [r3, #32]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	430a      	orrs	r2, r1
 800e1f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	681a      	ldr	r2, [r3, #0]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f042 0201 	orr.w	r2, r2, #1
 800e202:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2200      	movs	r2, #0
 800e208:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2220      	movs	r2, #32
 800e20e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2200      	movs	r2, #0
 800e216:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2200      	movs	r2, #0
 800e21c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800e220:	2300      	movs	r3, #0
}
 800e222:	4618      	mov	r0, r3
 800e224:	3708      	adds	r7, #8
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
	...

0800e22c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b088      	sub	sp, #32
 800e230:	af02      	add	r7, sp, #8
 800e232:	60f8      	str	r0, [r7, #12]
 800e234:	607a      	str	r2, [r7, #4]
 800e236:	461a      	mov	r2, r3
 800e238:	460b      	mov	r3, r1
 800e23a:	817b      	strh	r3, [r7, #10]
 800e23c:	4613      	mov	r3, r2
 800e23e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e246:	b2db      	uxtb	r3, r3
 800e248:	2b20      	cmp	r3, #32
 800e24a:	f040 80fd 	bne.w	800e448 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e254:	2b01      	cmp	r3, #1
 800e256:	d101      	bne.n	800e25c <HAL_I2C_Master_Transmit+0x30>
 800e258:	2302      	movs	r3, #2
 800e25a:	e0f6      	b.n	800e44a <HAL_I2C_Master_Transmit+0x21e>
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	2201      	movs	r2, #1
 800e260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e264:	f7fc fd50 	bl	800ad08 <HAL_GetTick>
 800e268:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	9300      	str	r3, [sp, #0]
 800e26e:	2319      	movs	r3, #25
 800e270:	2201      	movs	r2, #1
 800e272:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e276:	68f8      	ldr	r0, [r7, #12]
 800e278:	f000 fa0a 	bl	800e690 <I2C_WaitOnFlagUntilTimeout>
 800e27c:	4603      	mov	r3, r0
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d001      	beq.n	800e286 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800e282:	2301      	movs	r3, #1
 800e284:	e0e1      	b.n	800e44a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	2221      	movs	r2, #33	@ 0x21
 800e28a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	2210      	movs	r2, #16
 800e292:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	2200      	movs	r2, #0
 800e29a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	687a      	ldr	r2, [r7, #4]
 800e2a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	893a      	ldrh	r2, [r7, #8]
 800e2a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	2bff      	cmp	r3, #255	@ 0xff
 800e2b6:	d906      	bls.n	800e2c6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	22ff      	movs	r2, #255	@ 0xff
 800e2bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800e2be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e2c2:	617b      	str	r3, [r7, #20]
 800e2c4:	e007      	b.n	800e2d6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e2ca:	b29a      	uxth	r2, r3
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800e2d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e2d4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d024      	beq.n	800e328 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2e2:	781a      	ldrb	r2, [r3, #0]
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2ee:	1c5a      	adds	r2, r3, #1
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e2f8:	b29b      	uxth	r3, r3
 800e2fa:	3b01      	subs	r3, #1
 800e2fc:	b29a      	uxth	r2, r3
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e306:	3b01      	subs	r3, #1
 800e308:	b29a      	uxth	r2, r3
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e312:	b2db      	uxtb	r3, r3
 800e314:	3301      	adds	r3, #1
 800e316:	b2da      	uxtb	r2, r3
 800e318:	8979      	ldrh	r1, [r7, #10]
 800e31a:	4b4e      	ldr	r3, [pc, #312]	@ (800e454 <HAL_I2C_Master_Transmit+0x228>)
 800e31c:	9300      	str	r3, [sp, #0]
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	68f8      	ldr	r0, [r7, #12]
 800e322:	f000 fc05 	bl	800eb30 <I2C_TransferConfig>
 800e326:	e066      	b.n	800e3f6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e32c:	b2da      	uxtb	r2, r3
 800e32e:	8979      	ldrh	r1, [r7, #10]
 800e330:	4b48      	ldr	r3, [pc, #288]	@ (800e454 <HAL_I2C_Master_Transmit+0x228>)
 800e332:	9300      	str	r3, [sp, #0]
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	68f8      	ldr	r0, [r7, #12]
 800e338:	f000 fbfa 	bl	800eb30 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800e33c:	e05b      	b.n	800e3f6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e33e:	693a      	ldr	r2, [r7, #16]
 800e340:	6a39      	ldr	r1, [r7, #32]
 800e342:	68f8      	ldr	r0, [r7, #12]
 800e344:	f000 f9fd 	bl	800e742 <I2C_WaitOnTXISFlagUntilTimeout>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d001      	beq.n	800e352 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800e34e:	2301      	movs	r3, #1
 800e350:	e07b      	b.n	800e44a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e356:	781a      	ldrb	r2, [r3, #0]
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e362:	1c5a      	adds	r2, r3, #1
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e36c:	b29b      	uxth	r3, r3
 800e36e:	3b01      	subs	r3, #1
 800e370:	b29a      	uxth	r2, r3
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e37a:	3b01      	subs	r3, #1
 800e37c:	b29a      	uxth	r2, r3
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e386:	b29b      	uxth	r3, r3
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d034      	beq.n	800e3f6 <HAL_I2C_Master_Transmit+0x1ca>
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e390:	2b00      	cmp	r3, #0
 800e392:	d130      	bne.n	800e3f6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e394:	693b      	ldr	r3, [r7, #16]
 800e396:	9300      	str	r3, [sp, #0]
 800e398:	6a3b      	ldr	r3, [r7, #32]
 800e39a:	2200      	movs	r2, #0
 800e39c:	2180      	movs	r1, #128	@ 0x80
 800e39e:	68f8      	ldr	r0, [r7, #12]
 800e3a0:	f000 f976 	bl	800e690 <I2C_WaitOnFlagUntilTimeout>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d001      	beq.n	800e3ae <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	e04d      	b.n	800e44a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e3b2:	b29b      	uxth	r3, r3
 800e3b4:	2bff      	cmp	r3, #255	@ 0xff
 800e3b6:	d90e      	bls.n	800e3d6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	22ff      	movs	r2, #255	@ 0xff
 800e3bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e3c2:	b2da      	uxtb	r2, r3
 800e3c4:	8979      	ldrh	r1, [r7, #10]
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	9300      	str	r3, [sp, #0]
 800e3ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e3ce:	68f8      	ldr	r0, [r7, #12]
 800e3d0:	f000 fbae 	bl	800eb30 <I2C_TransferConfig>
 800e3d4:	e00f      	b.n	800e3f6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e3da:	b29a      	uxth	r2, r3
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e3e4:	b2da      	uxtb	r2, r3
 800e3e6:	8979      	ldrh	r1, [r7, #10]
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	9300      	str	r3, [sp, #0]
 800e3ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e3f0:	68f8      	ldr	r0, [r7, #12]
 800e3f2:	f000 fb9d 	bl	800eb30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d19e      	bne.n	800e33e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e400:	693a      	ldr	r2, [r7, #16]
 800e402:	6a39      	ldr	r1, [r7, #32]
 800e404:	68f8      	ldr	r0, [r7, #12]
 800e406:	f000 f9e3 	bl	800e7d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e40a:	4603      	mov	r3, r0
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d001      	beq.n	800e414 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800e410:	2301      	movs	r3, #1
 800e412:	e01a      	b.n	800e44a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	2220      	movs	r2, #32
 800e41a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	6859      	ldr	r1, [r3, #4]
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681a      	ldr	r2, [r3, #0]
 800e426:	4b0c      	ldr	r3, [pc, #48]	@ (800e458 <HAL_I2C_Master_Transmit+0x22c>)
 800e428:	400b      	ands	r3, r1
 800e42a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	2220      	movs	r2, #32
 800e430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2200      	movs	r2, #0
 800e438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2200      	movs	r2, #0
 800e440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e444:	2300      	movs	r3, #0
 800e446:	e000      	b.n	800e44a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800e448:	2302      	movs	r3, #2
  }
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3718      	adds	r7, #24
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
 800e452:	bf00      	nop
 800e454:	80002000 	.word	0x80002000
 800e458:	fe00e800 	.word	0xfe00e800

0800e45c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b088      	sub	sp, #32
 800e460:	af02      	add	r7, sp, #8
 800e462:	60f8      	str	r0, [r7, #12]
 800e464:	607a      	str	r2, [r7, #4]
 800e466:	461a      	mov	r2, r3
 800e468:	460b      	mov	r3, r1
 800e46a:	817b      	strh	r3, [r7, #10]
 800e46c:	4613      	mov	r3, r2
 800e46e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e476:	b2db      	uxtb	r3, r3
 800e478:	2b20      	cmp	r3, #32
 800e47a:	f040 80db 	bne.w	800e634 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e484:	2b01      	cmp	r3, #1
 800e486:	d101      	bne.n	800e48c <HAL_I2C_Master_Receive+0x30>
 800e488:	2302      	movs	r3, #2
 800e48a:	e0d4      	b.n	800e636 <HAL_I2C_Master_Receive+0x1da>
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	2201      	movs	r2, #1
 800e490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e494:	f7fc fc38 	bl	800ad08 <HAL_GetTick>
 800e498:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	9300      	str	r3, [sp, #0]
 800e49e:	2319      	movs	r3, #25
 800e4a0:	2201      	movs	r2, #1
 800e4a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e4a6:	68f8      	ldr	r0, [r7, #12]
 800e4a8:	f000 f8f2 	bl	800e690 <I2C_WaitOnFlagUntilTimeout>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d001      	beq.n	800e4b6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	e0bf      	b.n	800e636 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	2222      	movs	r2, #34	@ 0x22
 800e4ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	2210      	movs	r2, #16
 800e4c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	687a      	ldr	r2, [r7, #4]
 800e4d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	893a      	ldrh	r2, [r7, #8]
 800e4d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e4e2:	b29b      	uxth	r3, r3
 800e4e4:	2bff      	cmp	r3, #255	@ 0xff
 800e4e6:	d90e      	bls.n	800e506 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e4f2:	b2da      	uxtb	r2, r3
 800e4f4:	8979      	ldrh	r1, [r7, #10]
 800e4f6:	4b52      	ldr	r3, [pc, #328]	@ (800e640 <HAL_I2C_Master_Receive+0x1e4>)
 800e4f8:	9300      	str	r3, [sp, #0]
 800e4fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e4fe:	68f8      	ldr	r0, [r7, #12]
 800e500:	f000 fb16 	bl	800eb30 <I2C_TransferConfig>
 800e504:	e06d      	b.n	800e5e2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e50a:	b29a      	uxth	r2, r3
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e514:	b2da      	uxtb	r2, r3
 800e516:	8979      	ldrh	r1, [r7, #10]
 800e518:	4b49      	ldr	r3, [pc, #292]	@ (800e640 <HAL_I2C_Master_Receive+0x1e4>)
 800e51a:	9300      	str	r3, [sp, #0]
 800e51c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e520:	68f8      	ldr	r0, [r7, #12]
 800e522:	f000 fb05 	bl	800eb30 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800e526:	e05c      	b.n	800e5e2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e528:	697a      	ldr	r2, [r7, #20]
 800e52a:	6a39      	ldr	r1, [r7, #32]
 800e52c:	68f8      	ldr	r0, [r7, #12]
 800e52e:	f000 f993 	bl	800e858 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e532:	4603      	mov	r3, r0
 800e534:	2b00      	cmp	r3, #0
 800e536:	d001      	beq.n	800e53c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800e538:	2301      	movs	r3, #1
 800e53a:	e07c      	b.n	800e636 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e546:	b2d2      	uxtb	r2, r2
 800e548:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e54e:	1c5a      	adds	r2, r3, #1
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e558:	3b01      	subs	r3, #1
 800e55a:	b29a      	uxth	r2, r3
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e564:	b29b      	uxth	r3, r3
 800e566:	3b01      	subs	r3, #1
 800e568:	b29a      	uxth	r2, r3
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e572:	b29b      	uxth	r3, r3
 800e574:	2b00      	cmp	r3, #0
 800e576:	d034      	beq.n	800e5e2 <HAL_I2C_Master_Receive+0x186>
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d130      	bne.n	800e5e2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	9300      	str	r3, [sp, #0]
 800e584:	6a3b      	ldr	r3, [r7, #32]
 800e586:	2200      	movs	r2, #0
 800e588:	2180      	movs	r1, #128	@ 0x80
 800e58a:	68f8      	ldr	r0, [r7, #12]
 800e58c:	f000 f880 	bl	800e690 <I2C_WaitOnFlagUntilTimeout>
 800e590:	4603      	mov	r3, r0
 800e592:	2b00      	cmp	r3, #0
 800e594:	d001      	beq.n	800e59a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800e596:	2301      	movs	r3, #1
 800e598:	e04d      	b.n	800e636 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	2bff      	cmp	r3, #255	@ 0xff
 800e5a2:	d90e      	bls.n	800e5c2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	22ff      	movs	r2, #255	@ 0xff
 800e5a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e5ae:	b2da      	uxtb	r2, r3
 800e5b0:	8979      	ldrh	r1, [r7, #10]
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	9300      	str	r3, [sp, #0]
 800e5b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e5ba:	68f8      	ldr	r0, [r7, #12]
 800e5bc:	f000 fab8 	bl	800eb30 <I2C_TransferConfig>
 800e5c0:	e00f      	b.n	800e5e2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e5c6:	b29a      	uxth	r2, r3
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e5d0:	b2da      	uxtb	r2, r3
 800e5d2:	8979      	ldrh	r1, [r7, #10]
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	9300      	str	r3, [sp, #0]
 800e5d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e5dc:	68f8      	ldr	r0, [r7, #12]
 800e5de:	f000 faa7 	bl	800eb30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e5e6:	b29b      	uxth	r3, r3
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d19d      	bne.n	800e528 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e5ec:	697a      	ldr	r2, [r7, #20]
 800e5ee:	6a39      	ldr	r1, [r7, #32]
 800e5f0:	68f8      	ldr	r0, [r7, #12]
 800e5f2:	f000 f8ed 	bl	800e7d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d001      	beq.n	800e600 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	e01a      	b.n	800e636 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	2220      	movs	r2, #32
 800e606:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	6859      	ldr	r1, [r3, #4]
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681a      	ldr	r2, [r3, #0]
 800e612:	4b0c      	ldr	r3, [pc, #48]	@ (800e644 <HAL_I2C_Master_Receive+0x1e8>)
 800e614:	400b      	ands	r3, r1
 800e616:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	2220      	movs	r2, #32
 800e61c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	2200      	movs	r2, #0
 800e624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	2200      	movs	r2, #0
 800e62c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e630:	2300      	movs	r3, #0
 800e632:	e000      	b.n	800e636 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800e634:	2302      	movs	r3, #2
  }
}
 800e636:	4618      	mov	r0, r3
 800e638:	3718      	adds	r7, #24
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}
 800e63e:	bf00      	nop
 800e640:	80002400 	.word	0x80002400
 800e644:	fe00e800 	.word	0xfe00e800

0800e648 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e648:	b480      	push	{r7}
 800e64a:	b083      	sub	sp, #12
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	699b      	ldr	r3, [r3, #24]
 800e656:	f003 0302 	and.w	r3, r3, #2
 800e65a:	2b02      	cmp	r3, #2
 800e65c:	d103      	bne.n	800e666 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	2200      	movs	r2, #0
 800e664:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	699b      	ldr	r3, [r3, #24]
 800e66c:	f003 0301 	and.w	r3, r3, #1
 800e670:	2b01      	cmp	r3, #1
 800e672:	d007      	beq.n	800e684 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	699a      	ldr	r2, [r3, #24]
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	f042 0201 	orr.w	r2, r2, #1
 800e682:	619a      	str	r2, [r3, #24]
  }
}
 800e684:	bf00      	nop
 800e686:	370c      	adds	r7, #12
 800e688:	46bd      	mov	sp, r7
 800e68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68e:	4770      	bx	lr

0800e690 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b084      	sub	sp, #16
 800e694:	af00      	add	r7, sp, #0
 800e696:	60f8      	str	r0, [r7, #12]
 800e698:	60b9      	str	r1, [r7, #8]
 800e69a:	603b      	str	r3, [r7, #0]
 800e69c:	4613      	mov	r3, r2
 800e69e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e6a0:	e03b      	b.n	800e71a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e6a2:	69ba      	ldr	r2, [r7, #24]
 800e6a4:	6839      	ldr	r1, [r7, #0]
 800e6a6:	68f8      	ldr	r0, [r7, #12]
 800e6a8:	f000 f962 	bl	800e970 <I2C_IsErrorOccurred>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d001      	beq.n	800e6b6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	e041      	b.n	800e73a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6bc:	d02d      	beq.n	800e71a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e6be:	f7fc fb23 	bl	800ad08 <HAL_GetTick>
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	69bb      	ldr	r3, [r7, #24]
 800e6c6:	1ad3      	subs	r3, r2, r3
 800e6c8:	683a      	ldr	r2, [r7, #0]
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d302      	bcc.n	800e6d4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d122      	bne.n	800e71a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	699a      	ldr	r2, [r3, #24]
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	4013      	ands	r3, r2
 800e6de:	68ba      	ldr	r2, [r7, #8]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	bf0c      	ite	eq
 800e6e4:	2301      	moveq	r3, #1
 800e6e6:	2300      	movne	r3, #0
 800e6e8:	b2db      	uxtb	r3, r3
 800e6ea:	461a      	mov	r2, r3
 800e6ec:	79fb      	ldrb	r3, [r7, #7]
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d113      	bne.n	800e71a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e6f6:	f043 0220 	orr.w	r2, r3, #32
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	2220      	movs	r2, #32
 800e702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	2200      	movs	r2, #0
 800e70a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	2200      	movs	r2, #0
 800e712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800e716:	2301      	movs	r3, #1
 800e718:	e00f      	b.n	800e73a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	699a      	ldr	r2, [r3, #24]
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	4013      	ands	r3, r2
 800e724:	68ba      	ldr	r2, [r7, #8]
 800e726:	429a      	cmp	r2, r3
 800e728:	bf0c      	ite	eq
 800e72a:	2301      	moveq	r3, #1
 800e72c:	2300      	movne	r3, #0
 800e72e:	b2db      	uxtb	r3, r3
 800e730:	461a      	mov	r2, r3
 800e732:	79fb      	ldrb	r3, [r7, #7]
 800e734:	429a      	cmp	r2, r3
 800e736:	d0b4      	beq.n	800e6a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e738:	2300      	movs	r3, #0
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3710      	adds	r7, #16
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}

0800e742 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e742:	b580      	push	{r7, lr}
 800e744:	b084      	sub	sp, #16
 800e746:	af00      	add	r7, sp, #0
 800e748:	60f8      	str	r0, [r7, #12]
 800e74a:	60b9      	str	r1, [r7, #8]
 800e74c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e74e:	e033      	b.n	800e7b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e750:	687a      	ldr	r2, [r7, #4]
 800e752:	68b9      	ldr	r1, [r7, #8]
 800e754:	68f8      	ldr	r0, [r7, #12]
 800e756:	f000 f90b 	bl	800e970 <I2C_IsErrorOccurred>
 800e75a:	4603      	mov	r3, r0
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d001      	beq.n	800e764 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e760:	2301      	movs	r3, #1
 800e762:	e031      	b.n	800e7c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e76a:	d025      	beq.n	800e7b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e76c:	f7fc facc 	bl	800ad08 <HAL_GetTick>
 800e770:	4602      	mov	r2, r0
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	1ad3      	subs	r3, r2, r3
 800e776:	68ba      	ldr	r2, [r7, #8]
 800e778:	429a      	cmp	r2, r3
 800e77a:	d302      	bcc.n	800e782 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800e77c:	68bb      	ldr	r3, [r7, #8]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d11a      	bne.n	800e7b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	699b      	ldr	r3, [r3, #24]
 800e788:	f003 0302 	and.w	r3, r3, #2
 800e78c:	2b02      	cmp	r3, #2
 800e78e:	d013      	beq.n	800e7b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e794:	f043 0220 	orr.w	r2, r3, #32
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	2220      	movs	r2, #32
 800e7a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	e007      	b.n	800e7c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	699b      	ldr	r3, [r3, #24]
 800e7be:	f003 0302 	and.w	r3, r3, #2
 800e7c2:	2b02      	cmp	r3, #2
 800e7c4:	d1c4      	bne.n	800e750 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e7c6:	2300      	movs	r3, #0
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	3710      	adds	r7, #16
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}

0800e7d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b084      	sub	sp, #16
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	60f8      	str	r0, [r7, #12]
 800e7d8:	60b9      	str	r1, [r7, #8]
 800e7da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e7dc:	e02f      	b.n	800e83e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e7de:	687a      	ldr	r2, [r7, #4]
 800e7e0:	68b9      	ldr	r1, [r7, #8]
 800e7e2:	68f8      	ldr	r0, [r7, #12]
 800e7e4:	f000 f8c4 	bl	800e970 <I2C_IsErrorOccurred>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d001      	beq.n	800e7f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	e02d      	b.n	800e84e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e7f2:	f7fc fa89 	bl	800ad08 <HAL_GetTick>
 800e7f6:	4602      	mov	r2, r0
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	1ad3      	subs	r3, r2, r3
 800e7fc:	68ba      	ldr	r2, [r7, #8]
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d302      	bcc.n	800e808 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d11a      	bne.n	800e83e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	699b      	ldr	r3, [r3, #24]
 800e80e:	f003 0320 	and.w	r3, r3, #32
 800e812:	2b20      	cmp	r3, #32
 800e814:	d013      	beq.n	800e83e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e81a:	f043 0220 	orr.w	r2, r3, #32
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2220      	movs	r2, #32
 800e826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	2200      	movs	r2, #0
 800e82e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	2200      	movs	r2, #0
 800e836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800e83a:	2301      	movs	r3, #1
 800e83c:	e007      	b.n	800e84e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	699b      	ldr	r3, [r3, #24]
 800e844:	f003 0320 	and.w	r3, r3, #32
 800e848:	2b20      	cmp	r3, #32
 800e84a:	d1c8      	bne.n	800e7de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e84c:	2300      	movs	r3, #0
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3710      	adds	r7, #16
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
	...

0800e858 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b086      	sub	sp, #24
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	60f8      	str	r0, [r7, #12]
 800e860:	60b9      	str	r1, [r7, #8]
 800e862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e864:	2300      	movs	r3, #0
 800e866:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800e868:	e071      	b.n	800e94e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e86a:	687a      	ldr	r2, [r7, #4]
 800e86c:	68b9      	ldr	r1, [r7, #8]
 800e86e:	68f8      	ldr	r0, [r7, #12]
 800e870:	f000 f87e 	bl	800e970 <I2C_IsErrorOccurred>
 800e874:	4603      	mov	r3, r0
 800e876:	2b00      	cmp	r3, #0
 800e878:	d001      	beq.n	800e87e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800e87a:	2301      	movs	r3, #1
 800e87c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	699b      	ldr	r3, [r3, #24]
 800e884:	f003 0320 	and.w	r3, r3, #32
 800e888:	2b20      	cmp	r3, #32
 800e88a:	d13b      	bne.n	800e904 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800e88c:	7dfb      	ldrb	r3, [r7, #23]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d138      	bne.n	800e904 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	699b      	ldr	r3, [r3, #24]
 800e898:	f003 0304 	and.w	r3, r3, #4
 800e89c:	2b04      	cmp	r3, #4
 800e89e:	d105      	bne.n	800e8ac <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d001      	beq.n	800e8ac <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	699b      	ldr	r3, [r3, #24]
 800e8b2:	f003 0310 	and.w	r3, r3, #16
 800e8b6:	2b10      	cmp	r3, #16
 800e8b8:	d121      	bne.n	800e8fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	2210      	movs	r2, #16
 800e8c0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2204      	movs	r2, #4
 800e8c6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	2220      	movs	r2, #32
 800e8ce:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	6859      	ldr	r1, [r3, #4]
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	681a      	ldr	r2, [r3, #0]
 800e8da:	4b24      	ldr	r3, [pc, #144]	@ (800e96c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800e8dc:	400b      	ands	r3, r1
 800e8de:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	2220      	movs	r2, #32
 800e8e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	75fb      	strb	r3, [r7, #23]
 800e8fc:	e002      	b.n	800e904 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	2200      	movs	r2, #0
 800e902:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800e904:	f7fc fa00 	bl	800ad08 <HAL_GetTick>
 800e908:	4602      	mov	r2, r0
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	1ad3      	subs	r3, r2, r3
 800e90e:	68ba      	ldr	r2, [r7, #8]
 800e910:	429a      	cmp	r2, r3
 800e912:	d302      	bcc.n	800e91a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d119      	bne.n	800e94e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800e91a:	7dfb      	ldrb	r3, [r7, #23]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d116      	bne.n	800e94e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	699b      	ldr	r3, [r3, #24]
 800e926:	f003 0304 	and.w	r3, r3, #4
 800e92a:	2b04      	cmp	r3, #4
 800e92c:	d00f      	beq.n	800e94e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e932:	f043 0220 	orr.w	r2, r3, #32
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	2220      	movs	r2, #32
 800e93e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	2200      	movs	r2, #0
 800e946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800e94a:	2301      	movs	r3, #1
 800e94c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	699b      	ldr	r3, [r3, #24]
 800e954:	f003 0304 	and.w	r3, r3, #4
 800e958:	2b04      	cmp	r3, #4
 800e95a:	d002      	beq.n	800e962 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800e95c:	7dfb      	ldrb	r3, [r7, #23]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d083      	beq.n	800e86a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800e962:	7dfb      	ldrb	r3, [r7, #23]
}
 800e964:	4618      	mov	r0, r3
 800e966:	3718      	adds	r7, #24
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}
 800e96c:	fe00e800 	.word	0xfe00e800

0800e970 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b08a      	sub	sp, #40	@ 0x28
 800e974:	af00      	add	r7, sp, #0
 800e976:	60f8      	str	r0, [r7, #12]
 800e978:	60b9      	str	r1, [r7, #8]
 800e97a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e97c:	2300      	movs	r3, #0
 800e97e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	699b      	ldr	r3, [r3, #24]
 800e988:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800e98a:	2300      	movs	r3, #0
 800e98c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800e992:	69bb      	ldr	r3, [r7, #24]
 800e994:	f003 0310 	and.w	r3, r3, #16
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d068      	beq.n	800ea6e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	2210      	movs	r2, #16
 800e9a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e9a4:	e049      	b.n	800ea3a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9ac:	d045      	beq.n	800ea3a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e9ae:	f7fc f9ab 	bl	800ad08 <HAL_GetTick>
 800e9b2:	4602      	mov	r2, r0
 800e9b4:	69fb      	ldr	r3, [r7, #28]
 800e9b6:	1ad3      	subs	r3, r2, r3
 800e9b8:	68ba      	ldr	r2, [r7, #8]
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d302      	bcc.n	800e9c4 <I2C_IsErrorOccurred+0x54>
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d13a      	bne.n	800ea3a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	685b      	ldr	r3, [r3, #4]
 800e9ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e9ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e9d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	699b      	ldr	r3, [r3, #24]
 800e9de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e9e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e9e6:	d121      	bne.n	800ea2c <I2C_IsErrorOccurred+0xbc>
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e9ee:	d01d      	beq.n	800ea2c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800e9f0:	7cfb      	ldrb	r3, [r7, #19]
 800e9f2:	2b20      	cmp	r3, #32
 800e9f4:	d01a      	beq.n	800ea2c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	685a      	ldr	r2, [r3, #4]
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ea04:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800ea06:	f7fc f97f 	bl	800ad08 <HAL_GetTick>
 800ea0a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ea0c:	e00e      	b.n	800ea2c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ea0e:	f7fc f97b 	bl	800ad08 <HAL_GetTick>
 800ea12:	4602      	mov	r2, r0
 800ea14:	69fb      	ldr	r3, [r7, #28]
 800ea16:	1ad3      	subs	r3, r2, r3
 800ea18:	2b19      	cmp	r3, #25
 800ea1a:	d907      	bls.n	800ea2c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800ea1c:	6a3b      	ldr	r3, [r7, #32]
 800ea1e:	f043 0320 	orr.w	r3, r3, #32
 800ea22:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800ea24:	2301      	movs	r3, #1
 800ea26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800ea2a:	e006      	b.n	800ea3a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	699b      	ldr	r3, [r3, #24]
 800ea32:	f003 0320 	and.w	r3, r3, #32
 800ea36:	2b20      	cmp	r3, #32
 800ea38:	d1e9      	bne.n	800ea0e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	699b      	ldr	r3, [r3, #24]
 800ea40:	f003 0320 	and.w	r3, r3, #32
 800ea44:	2b20      	cmp	r3, #32
 800ea46:	d003      	beq.n	800ea50 <I2C_IsErrorOccurred+0xe0>
 800ea48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d0aa      	beq.n	800e9a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ea50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d103      	bne.n	800ea60 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	2220      	movs	r2, #32
 800ea5e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ea60:	6a3b      	ldr	r3, [r7, #32]
 800ea62:	f043 0304 	orr.w	r3, r3, #4
 800ea66:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ea68:	2301      	movs	r3, #1
 800ea6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	699b      	ldr	r3, [r3, #24]
 800ea74:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ea76:	69bb      	ldr	r3, [r7, #24]
 800ea78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d00b      	beq.n	800ea98 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ea80:	6a3b      	ldr	r3, [r7, #32]
 800ea82:	f043 0301 	orr.w	r3, r3, #1
 800ea86:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ea90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ea92:	2301      	movs	r3, #1
 800ea94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ea98:	69bb      	ldr	r3, [r7, #24]
 800ea9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d00b      	beq.n	800eaba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800eaa2:	6a3b      	ldr	r3, [r7, #32]
 800eaa4:	f043 0308 	orr.w	r3, r3, #8
 800eaa8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800eab2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800eab4:	2301      	movs	r3, #1
 800eab6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800eaba:	69bb      	ldr	r3, [r7, #24]
 800eabc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d00b      	beq.n	800eadc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800eac4:	6a3b      	ldr	r3, [r7, #32]
 800eac6:	f043 0302 	orr.w	r3, r3, #2
 800eaca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ead4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ead6:	2301      	movs	r3, #1
 800ead8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800eadc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d01c      	beq.n	800eb1e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800eae4:	68f8      	ldr	r0, [r7, #12]
 800eae6:	f7ff fdaf 	bl	800e648 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	6859      	ldr	r1, [r3, #4]
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681a      	ldr	r2, [r3, #0]
 800eaf4:	4b0d      	ldr	r3, [pc, #52]	@ (800eb2c <I2C_IsErrorOccurred+0x1bc>)
 800eaf6:	400b      	ands	r3, r1
 800eaf8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eafe:	6a3b      	ldr	r3, [r7, #32]
 800eb00:	431a      	orrs	r2, r3
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	2220      	movs	r2, #32
 800eb0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2200      	movs	r2, #0
 800eb12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800eb1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	3728      	adds	r7, #40	@ 0x28
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}
 800eb2a:	bf00      	nop
 800eb2c:	fe00e800 	.word	0xfe00e800

0800eb30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800eb30:	b480      	push	{r7}
 800eb32:	b087      	sub	sp, #28
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	60f8      	str	r0, [r7, #12]
 800eb38:	607b      	str	r3, [r7, #4]
 800eb3a:	460b      	mov	r3, r1
 800eb3c:	817b      	strh	r3, [r7, #10]
 800eb3e:	4613      	mov	r3, r2
 800eb40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800eb42:	897b      	ldrh	r3, [r7, #10]
 800eb44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800eb48:	7a7b      	ldrb	r3, [r7, #9]
 800eb4a:	041b      	lsls	r3, r3, #16
 800eb4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800eb50:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800eb56:	6a3b      	ldr	r3, [r7, #32]
 800eb58:	4313      	orrs	r3, r2
 800eb5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800eb5e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	685a      	ldr	r2, [r3, #4]
 800eb66:	6a3b      	ldr	r3, [r7, #32]
 800eb68:	0d5b      	lsrs	r3, r3, #21
 800eb6a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800eb6e:	4b08      	ldr	r3, [pc, #32]	@ (800eb90 <I2C_TransferConfig+0x60>)
 800eb70:	430b      	orrs	r3, r1
 800eb72:	43db      	mvns	r3, r3
 800eb74:	ea02 0103 	and.w	r1, r2, r3
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	697a      	ldr	r2, [r7, #20]
 800eb7e:	430a      	orrs	r2, r1
 800eb80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800eb82:	bf00      	nop
 800eb84:	371c      	adds	r7, #28
 800eb86:	46bd      	mov	sp, r7
 800eb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8c:	4770      	bx	lr
 800eb8e:	bf00      	nop
 800eb90:	03ff63ff 	.word	0x03ff63ff

0800eb94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800eb94:	b480      	push	{r7}
 800eb96:	b083      	sub	sp, #12
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
 800eb9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eba4:	b2db      	uxtb	r3, r3
 800eba6:	2b20      	cmp	r3, #32
 800eba8:	d138      	bne.n	800ec1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ebb0:	2b01      	cmp	r3, #1
 800ebb2:	d101      	bne.n	800ebb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ebb4:	2302      	movs	r3, #2
 800ebb6:	e032      	b.n	800ec1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2201      	movs	r2, #1
 800ebbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2224      	movs	r2, #36	@ 0x24
 800ebc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	681a      	ldr	r2, [r3, #0]
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	f022 0201 	bic.w	r2, r2, #1
 800ebd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	681a      	ldr	r2, [r3, #0]
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ebe6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	6819      	ldr	r1, [r3, #0]
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	683a      	ldr	r2, [r7, #0]
 800ebf4:	430a      	orrs	r2, r1
 800ebf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	681a      	ldr	r2, [r3, #0]
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	f042 0201 	orr.w	r2, r2, #1
 800ec06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2220      	movs	r2, #32
 800ec0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2200      	movs	r2, #0
 800ec14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	e000      	b.n	800ec1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ec1c:	2302      	movs	r3, #2
  }
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	370c      	adds	r7, #12
 800ec22:	46bd      	mov	sp, r7
 800ec24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec28:	4770      	bx	lr

0800ec2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ec2a:	b480      	push	{r7}
 800ec2c:	b085      	sub	sp, #20
 800ec2e:	af00      	add	r7, sp, #0
 800ec30:	6078      	str	r0, [r7, #4]
 800ec32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ec3a:	b2db      	uxtb	r3, r3
 800ec3c:	2b20      	cmp	r3, #32
 800ec3e:	d139      	bne.n	800ecb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d101      	bne.n	800ec4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ec4a:	2302      	movs	r3, #2
 800ec4c:	e033      	b.n	800ecb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2201      	movs	r2, #1
 800ec52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2224      	movs	r2, #36	@ 0x24
 800ec5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	681a      	ldr	r2, [r3, #0]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	f022 0201 	bic.w	r2, r2, #1
 800ec6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ec7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	021b      	lsls	r3, r3, #8
 800ec82:	68fa      	ldr	r2, [r7, #12]
 800ec84:	4313      	orrs	r3, r2
 800ec86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	68fa      	ldr	r2, [r7, #12]
 800ec8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	681a      	ldr	r2, [r3, #0]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	f042 0201 	orr.w	r2, r2, #1
 800ec9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2220      	movs	r2, #32
 800eca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	e000      	b.n	800ecb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ecb4:	2302      	movs	r3, #2
  }
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3714      	adds	r7, #20
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc0:	4770      	bx	lr
	...

0800ecc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800ecc8:	4b04      	ldr	r3, [pc, #16]	@ (800ecdc <HAL_PWREx_GetVoltageRange+0x18>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd8:	4770      	bx	lr
 800ecda:	bf00      	nop
 800ecdc:	40007000 	.word	0x40007000

0800ece0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ece0:	b480      	push	{r7}
 800ece2:	b085      	sub	sp, #20
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ecee:	d130      	bne.n	800ed52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800ecf0:	4b23      	ldr	r3, [pc, #140]	@ (800ed80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ecf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ecfc:	d038      	beq.n	800ed70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ecfe:	4b20      	ldr	r3, [pc, #128]	@ (800ed80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800ed06:	4a1e      	ldr	r2, [pc, #120]	@ (800ed80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ed08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ed0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ed0e:	4b1d      	ldr	r3, [pc, #116]	@ (800ed84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	2232      	movs	r2, #50	@ 0x32
 800ed14:	fb02 f303 	mul.w	r3, r2, r3
 800ed18:	4a1b      	ldr	r2, [pc, #108]	@ (800ed88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800ed1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ed1e:	0c9b      	lsrs	r3, r3, #18
 800ed20:	3301      	adds	r3, #1
 800ed22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ed24:	e002      	b.n	800ed2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	3b01      	subs	r3, #1
 800ed2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ed2c:	4b14      	ldr	r3, [pc, #80]	@ (800ed80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ed2e:	695b      	ldr	r3, [r3, #20]
 800ed30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ed34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ed38:	d102      	bne.n	800ed40 <HAL_PWREx_ControlVoltageScaling+0x60>
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d1f2      	bne.n	800ed26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ed40:	4b0f      	ldr	r3, [pc, #60]	@ (800ed80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ed42:	695b      	ldr	r3, [r3, #20]
 800ed44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ed48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ed4c:	d110      	bne.n	800ed70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800ed4e:	2303      	movs	r3, #3
 800ed50:	e00f      	b.n	800ed72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800ed52:	4b0b      	ldr	r3, [pc, #44]	@ (800ed80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ed5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ed5e:	d007      	beq.n	800ed70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ed60:	4b07      	ldr	r3, [pc, #28]	@ (800ed80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800ed68:	4a05      	ldr	r2, [pc, #20]	@ (800ed80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ed6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ed6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800ed70:	2300      	movs	r3, #0
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	3714      	adds	r7, #20
 800ed76:	46bd      	mov	sp, r7
 800ed78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7c:	4770      	bx	lr
 800ed7e:	bf00      	nop
 800ed80:	40007000 	.word	0x40007000
 800ed84:	20000168 	.word	0x20000168
 800ed88:	431bde83 	.word	0x431bde83

0800ed8c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b086      	sub	sp, #24
 800ed90:	af02      	add	r7, sp, #8
 800ed92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ed94:	f7fb ffb8 	bl	800ad08 <HAL_GetTick>
 800ed98:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d101      	bne.n	800eda4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800eda0:	2301      	movs	r3, #1
 800eda2:	e063      	b.n	800ee6c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800edaa:	b2db      	uxtb	r3, r3
 800edac:	2b00      	cmp	r3, #0
 800edae:	d10b      	bne.n	800edc8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2200      	movs	r2, #0
 800edb4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f7f8 fadf 	bl	800737c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800edbe:	f241 3188 	movw	r1, #5000	@ 0x1388
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f000 fa68 	bl	800f298 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	689b      	ldr	r3, [r3, #8]
 800edd6:	3b01      	subs	r3, #1
 800edd8:	021a      	lsls	r2, r3, #8
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	430a      	orrs	r2, r1
 800ede0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ede6:	9300      	str	r3, [sp, #0]
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	2200      	movs	r2, #0
 800edec:	2120      	movs	r1, #32
 800edee:	6878      	ldr	r0, [r7, #4]
 800edf0:	f000 fa60 	bl	800f2b4 <QSPI_WaitFlagStateUntilTimeout>
 800edf4:	4603      	mov	r3, r0
 800edf6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800edf8:	7afb      	ldrb	r3, [r7, #11]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d131      	bne.n	800ee62 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ee08:	f023 0310 	bic.w	r3, r3, #16
 800ee0c:	687a      	ldr	r2, [r7, #4]
 800ee0e:	6852      	ldr	r2, [r2, #4]
 800ee10:	0611      	lsls	r1, r2, #24
 800ee12:	687a      	ldr	r2, [r7, #4]
 800ee14:	68d2      	ldr	r2, [r2, #12]
 800ee16:	4311      	orrs	r1, r2
 800ee18:	687a      	ldr	r2, [r7, #4]
 800ee1a:	6812      	ldr	r2, [r2, #0]
 800ee1c:	430b      	orrs	r3, r1
 800ee1e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	685a      	ldr	r2, [r3, #4]
 800ee26:	4b13      	ldr	r3, [pc, #76]	@ (800ee74 <HAL_QSPI_Init+0xe8>)
 800ee28:	4013      	ands	r3, r2
 800ee2a:	687a      	ldr	r2, [r7, #4]
 800ee2c:	6912      	ldr	r2, [r2, #16]
 800ee2e:	0411      	lsls	r1, r2, #16
 800ee30:	687a      	ldr	r2, [r7, #4]
 800ee32:	6952      	ldr	r2, [r2, #20]
 800ee34:	4311      	orrs	r1, r2
 800ee36:	687a      	ldr	r2, [r7, #4]
 800ee38:	6992      	ldr	r2, [r2, #24]
 800ee3a:	4311      	orrs	r1, r2
 800ee3c:	687a      	ldr	r2, [r7, #4]
 800ee3e:	6812      	ldr	r2, [r2, #0]
 800ee40:	430b      	orrs	r3, r1
 800ee42:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	681a      	ldr	r2, [r3, #0]
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	f042 0201 	orr.w	r2, r2, #1
 800ee52:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2200      	movs	r2, #0
 800ee58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2201      	movs	r2, #1
 800ee5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2200      	movs	r2, #0
 800ee66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800ee6a:	7afb      	ldrb	r3, [r7, #11]
}
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	3710      	adds	r7, #16
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}
 800ee74:	ffe0f8fe 	.word	0xffe0f8fe

0800ee78 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b088      	sub	sp, #32
 800ee7c:	af02      	add	r7, sp, #8
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	60b9      	str	r1, [r7, #8]
 800ee82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ee84:	f7fb ff40 	bl	800ad08 <HAL_GetTick>
 800ee88:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ee90:	b2db      	uxtb	r3, r3
 800ee92:	2b01      	cmp	r3, #1
 800ee94:	d101      	bne.n	800ee9a <HAL_QSPI_Command+0x22>
 800ee96:	2302      	movs	r3, #2
 800ee98:	e048      	b.n	800ef2c <HAL_QSPI_Command+0xb4>
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	2201      	movs	r2, #1
 800ee9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800eea8:	b2db      	uxtb	r3, r3
 800eeaa:	2b01      	cmp	r3, #1
 800eeac:	d137      	bne.n	800ef1e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	2202      	movs	r2, #2
 800eeb8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	9300      	str	r3, [sp, #0]
 800eec0:	693b      	ldr	r3, [r7, #16]
 800eec2:	2200      	movs	r2, #0
 800eec4:	2120      	movs	r1, #32
 800eec6:	68f8      	ldr	r0, [r7, #12]
 800eec8:	f000 f9f4 	bl	800f2b4 <QSPI_WaitFlagStateUntilTimeout>
 800eecc:	4603      	mov	r3, r0
 800eece:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800eed0:	7dfb      	ldrb	r3, [r7, #23]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d125      	bne.n	800ef22 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800eed6:	2200      	movs	r2, #0
 800eed8:	68b9      	ldr	r1, [r7, #8]
 800eeda:	68f8      	ldr	r0, [r7, #12]
 800eedc:	f000 fa21 	bl	800f322 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d115      	bne.n	800ef14 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	9300      	str	r3, [sp, #0]
 800eeec:	693b      	ldr	r3, [r7, #16]
 800eeee:	2201      	movs	r2, #1
 800eef0:	2102      	movs	r1, #2
 800eef2:	68f8      	ldr	r0, [r7, #12]
 800eef4:	f000 f9de 	bl	800f2b4 <QSPI_WaitFlagStateUntilTimeout>
 800eef8:	4603      	mov	r3, r0
 800eefa:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800eefc:	7dfb      	ldrb	r3, [r7, #23]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d10f      	bne.n	800ef22 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	2202      	movs	r2, #2
 800ef08:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	2201      	movs	r2, #1
 800ef0e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800ef12:	e006      	b.n	800ef22 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	2201      	movs	r2, #1
 800ef18:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800ef1c:	e001      	b.n	800ef22 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800ef1e:	2302      	movs	r3, #2
 800ef20:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	2200      	movs	r2, #0
 800ef26:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800ef2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	3718      	adds	r7, #24
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}

0800ef34 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b08a      	sub	sp, #40	@ 0x28
 800ef38:	af02      	add	r7, sp, #8
 800ef3a:	60f8      	str	r0, [r7, #12]
 800ef3c:	60b9      	str	r1, [r7, #8]
 800ef3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ef40:	2300      	movs	r3, #0
 800ef42:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800ef44:	f7fb fee0 	bl	800ad08 <HAL_GetTick>
 800ef48:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	3320      	adds	r3, #32
 800ef50:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ef58:	b2db      	uxtb	r3, r3
 800ef5a:	2b01      	cmp	r3, #1
 800ef5c:	d101      	bne.n	800ef62 <HAL_QSPI_Transmit+0x2e>
 800ef5e:	2302      	movs	r3, #2
 800ef60:	e07b      	b.n	800f05a <HAL_QSPI_Transmit+0x126>
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	2201      	movs	r2, #1
 800ef66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800ef70:	b2db      	uxtb	r3, r3
 800ef72:	2b01      	cmp	r3, #1
 800ef74:	d16a      	bne.n	800f04c <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	2200      	movs	r2, #0
 800ef7a:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d05b      	beq.n	800f03a <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	2212      	movs	r2, #18
 800ef86:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	691b      	ldr	r3, [r3, #16]
 800ef90:	1c5a      	adds	r2, r3, #1
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	625a      	str	r2, [r3, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	691b      	ldr	r3, [r3, #16]
 800ef9c:	1c5a      	adds	r2, r3, #1
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	68ba      	ldr	r2, [r7, #8]
 800efa6:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	695a      	ldr	r2, [r3, #20]
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800efb6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800efb8:	e01b      	b.n	800eff2 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	9300      	str	r3, [sp, #0]
 800efbe:	69bb      	ldr	r3, [r7, #24]
 800efc0:	2201      	movs	r2, #1
 800efc2:	2104      	movs	r1, #4
 800efc4:	68f8      	ldr	r0, [r7, #12]
 800efc6:	f000 f975 	bl	800f2b4 <QSPI_WaitFlagStateUntilTimeout>
 800efca:	4603      	mov	r3, r0
 800efcc:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800efce:	7ffb      	ldrb	r3, [r7, #31]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d113      	bne.n	800effc <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	69db      	ldr	r3, [r3, #28]
 800efd8:	781a      	ldrb	r2, [r3, #0]
 800efda:	697b      	ldr	r3, [r7, #20]
 800efdc:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	69db      	ldr	r3, [r3, #28]
 800efe2:	1c5a      	adds	r2, r3, #1
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efec:	1e5a      	subs	r2, r3, #1
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	625a      	str	r2, [r3, #36]	@ 0x24
      while(hqspi->TxXferCount > 0U)
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d1df      	bne.n	800efba <HAL_QSPI_Transmit+0x86>
 800effa:	e000      	b.n	800effe <HAL_QSPI_Transmit+0xca>
          break;
 800effc:	bf00      	nop
      }

      if (status == HAL_OK)
 800effe:	7ffb      	ldrb	r3, [r7, #31]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d115      	bne.n	800f030 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	9300      	str	r3, [sp, #0]
 800f008:	69bb      	ldr	r3, [r7, #24]
 800f00a:	2201      	movs	r2, #1
 800f00c:	2102      	movs	r1, #2
 800f00e:	68f8      	ldr	r0, [r7, #12]
 800f010:	f000 f950 	bl	800f2b4 <QSPI_WaitFlagStateUntilTimeout>
 800f014:	4603      	mov	r3, r0
 800f016:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800f018:	7ffb      	ldrb	r3, [r7, #31]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d108      	bne.n	800f030 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	2202      	movs	r2, #2
 800f024:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800f026:	68f8      	ldr	r0, [r7, #12]
 800f028:	f000 f8bd 	bl	800f1a6 <HAL_QSPI_Abort>
 800f02c:	4603      	mov	r3, r0
 800f02e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	2201      	movs	r2, #1
 800f034:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f038:	e00a      	b.n	800f050 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f03e:	f043 0208 	orr.w	r2, r3, #8
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800f046:	2301      	movs	r3, #1
 800f048:	77fb      	strb	r3, [r7, #31]
 800f04a:	e001      	b.n	800f050 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800f04c:	2302      	movs	r3, #2
 800f04e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	2200      	movs	r2, #0
 800f054:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800f058:	7ffb      	ldrb	r3, [r7, #31]
}
 800f05a:	4618      	mov	r0, r3
 800f05c:	3720      	adds	r7, #32
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}

0800f062 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800f062:	b580      	push	{r7, lr}
 800f064:	b08a      	sub	sp, #40	@ 0x28
 800f066:	af02      	add	r7, sp, #8
 800f068:	60f8      	str	r0, [r7, #12]
 800f06a:	60b9      	str	r1, [r7, #8]
 800f06c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f06e:	2300      	movs	r3, #0
 800f070:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800f072:	f7fb fe49 	bl	800ad08 <HAL_GetTick>
 800f076:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	699b      	ldr	r3, [r3, #24]
 800f07e:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	3320      	adds	r3, #32
 800f086:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f08e:	b2db      	uxtb	r3, r3
 800f090:	2b01      	cmp	r3, #1
 800f092:	d101      	bne.n	800f098 <HAL_QSPI_Receive+0x36>
 800f094:	2302      	movs	r3, #2
 800f096:	e082      	b.n	800f19e <HAL_QSPI_Receive+0x13c>
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	2201      	movs	r2, #1
 800f09c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f0a6:	b2db      	uxtb	r3, r3
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	d171      	bne.n	800f190 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d062      	beq.n	800f17e <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	2222      	movs	r2, #34	@ 0x22
 800f0bc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	691b      	ldr	r3, [r3, #16]
 800f0c6:	1c5a      	adds	r2, r3, #1
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	691b      	ldr	r3, [r3, #16]
 800f0d2:	1c5a      	adds	r2, r3, #1
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->pRxBuffPtr = pData;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	68ba      	ldr	r2, [r7, #8]
 800f0dc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	695b      	ldr	r3, [r3, #20]
 800f0e4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800f0f0:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	697a      	ldr	r2, [r7, #20]
 800f0f8:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800f0fa:	e01c      	b.n	800f136 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	9300      	str	r3, [sp, #0]
 800f100:	69bb      	ldr	r3, [r7, #24]
 800f102:	2201      	movs	r2, #1
 800f104:	2106      	movs	r1, #6
 800f106:	68f8      	ldr	r0, [r7, #12]
 800f108:	f000 f8d4 	bl	800f2b4 <QSPI_WaitFlagStateUntilTimeout>
 800f10c:	4603      	mov	r3, r0
 800f10e:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800f110:	7ffb      	ldrb	r3, [r7, #31]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d114      	bne.n	800f140 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f11a:	693a      	ldr	r2, [r7, #16]
 800f11c:	7812      	ldrb	r2, [r2, #0]
 800f11e:	b2d2      	uxtb	r2, r2
 800f120:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f126:	1c5a      	adds	r2, r3, #1
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	629a      	str	r2, [r3, #40]	@ 0x28
        hqspi->RxXferCount--;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f130:	1e5a      	subs	r2, r3, #1
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	631a      	str	r2, [r3, #48]	@ 0x30
      while(hqspi->RxXferCount > 0U)
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d1de      	bne.n	800f0fc <HAL_QSPI_Receive+0x9a>
 800f13e:	e000      	b.n	800f142 <HAL_QSPI_Receive+0xe0>
          break;
 800f140:	bf00      	nop
      }

      if (status == HAL_OK)
 800f142:	7ffb      	ldrb	r3, [r7, #31]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d115      	bne.n	800f174 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	9300      	str	r3, [sp, #0]
 800f14c:	69bb      	ldr	r3, [r7, #24]
 800f14e:	2201      	movs	r2, #1
 800f150:	2102      	movs	r1, #2
 800f152:	68f8      	ldr	r0, [r7, #12]
 800f154:	f000 f8ae 	bl	800f2b4 <QSPI_WaitFlagStateUntilTimeout>
 800f158:	4603      	mov	r3, r0
 800f15a:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800f15c:	7ffb      	ldrb	r3, [r7, #31]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d108      	bne.n	800f174 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	2202      	movs	r2, #2
 800f168:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800f16a:	68f8      	ldr	r0, [r7, #12]
 800f16c:	f000 f81b 	bl	800f1a6 <HAL_QSPI_Abort>
 800f170:	4603      	mov	r3, r0
 800f172:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	2201      	movs	r2, #1
 800f178:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f17c:	e00a      	b.n	800f194 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f182:	f043 0208 	orr.w	r2, r3, #8
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800f18a:	2301      	movs	r3, #1
 800f18c:	77fb      	strb	r3, [r7, #31]
 800f18e:	e001      	b.n	800f194 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800f190:	2302      	movs	r3, #2
 800f192:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	2200      	movs	r2, #0
 800f198:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800f19c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3720      	adds	r7, #32
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}

0800f1a6 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800f1a6:	b580      	push	{r7, lr}
 800f1a8:	b086      	sub	sp, #24
 800f1aa:	af02      	add	r7, sp, #8
 800f1ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800f1b2:	f7fb fda9 	bl	800ad08 <HAL_GetTick>
 800f1b6:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f1be:	b2db      	uxtb	r3, r3
 800f1c0:	f003 0302 	and.w	r3, r3, #2
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d062      	beq.n	800f28e <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f003 0304 	and.w	r3, r3, #4
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d017      	beq.n	800f20e <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	681a      	ldr	r2, [r3, #0]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	f022 0204 	bic.w	r2, r2, #4
 800f1ec:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f7fd fdce 	bl	800cd94 <HAL_DMA_Abort>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800f1fc:	7bfb      	ldrb	r3, [r7, #15]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d005      	beq.n	800f20e <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f206:	f043 0204 	orr.w	r2, r3, #4
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	689b      	ldr	r3, [r3, #8]
 800f214:	f003 0320 	and.w	r3, r3, #32
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d034      	beq.n	800f286 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	f042 0202 	orr.w	r2, r2, #2
 800f22a:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f230:	9300      	str	r3, [sp, #0]
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	2201      	movs	r2, #1
 800f236:	2102      	movs	r1, #2
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f000 f83b 	bl	800f2b4 <QSPI_WaitFlagStateUntilTimeout>
 800f23e:	4603      	mov	r3, r0
 800f240:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 800f242:	7bfb      	ldrb	r3, [r7, #15]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d10e      	bne.n	800f266 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	2202      	movs	r2, #2
 800f24e:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f254:	9300      	str	r3, [sp, #0]
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	2200      	movs	r2, #0
 800f25a:	2120      	movs	r1, #32
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f000 f829 	bl	800f2b4 <QSPI_WaitFlagStateUntilTimeout>
 800f262:	4603      	mov	r3, r0
 800f264:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800f266:	7bfb      	ldrb	r3, [r7, #15]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d110      	bne.n	800f28e <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	695a      	ldr	r2, [r3, #20]
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800f27a:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2201      	movs	r2, #1
 800f280:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f284:	e003      	b.n	800f28e <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2201      	movs	r2, #1
 800f28a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    }
  }

  return status;
 800f28e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f290:	4618      	mov	r0, r3
 800f292:	3710      	adds	r7, #16
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}

0800f298 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800f298:	b480      	push	{r7}
 800f29a:	b083      	sub	sp, #12
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	683a      	ldr	r2, [r7, #0]
 800f2a6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800f2a8:	bf00      	nop
 800f2aa:	370c      	adds	r7, #12
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b2:	4770      	bx	lr

0800f2b4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b084      	sub	sp, #16
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	60f8      	str	r0, [r7, #12]
 800f2bc:	60b9      	str	r1, [r7, #8]
 800f2be:	603b      	str	r3, [r7, #0]
 800f2c0:	4613      	mov	r3, r2
 800f2c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f2c4:	e01a      	b.n	800f2fc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f2c6:	69bb      	ldr	r3, [r7, #24]
 800f2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2cc:	d016      	beq.n	800f2fc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f2ce:	f7fb fd1b 	bl	800ad08 <HAL_GetTick>
 800f2d2:	4602      	mov	r2, r0
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	1ad3      	subs	r3, r2, r3
 800f2d8:	69ba      	ldr	r2, [r7, #24]
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	d302      	bcc.n	800f2e4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800f2de:	69bb      	ldr	r3, [r7, #24]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d10b      	bne.n	800f2fc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	2204      	movs	r2, #4
 800f2e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f2f0:	f043 0201 	orr.w	r2, r3, #1
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	e00e      	b.n	800f31a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	689a      	ldr	r2, [r3, #8]
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	4013      	ands	r3, r2
 800f306:	2b00      	cmp	r3, #0
 800f308:	bf14      	ite	ne
 800f30a:	2301      	movne	r3, #1
 800f30c:	2300      	moveq	r3, #0
 800f30e:	b2db      	uxtb	r3, r3
 800f310:	461a      	mov	r2, r3
 800f312:	79fb      	ldrb	r3, [r7, #7]
 800f314:	429a      	cmp	r2, r3
 800f316:	d1d6      	bne.n	800f2c6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f318:	2300      	movs	r3, #0
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3710      	adds	r7, #16
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}

0800f322 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800f322:	b480      	push	{r7}
 800f324:	b085      	sub	sp, #20
 800f326:	af00      	add	r7, sp, #0
 800f328:	60f8      	str	r0, [r7, #12]
 800f32a:	60b9      	str	r1, [r7, #8]
 800f32c:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f332:	2b00      	cmp	r3, #0
 800f334:	d009      	beq.n	800f34a <QSPI_Config+0x28>
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f33c:	d005      	beq.n	800f34a <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	3a01      	subs	r2, #1
 800f348:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	699b      	ldr	r3, [r3, #24]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	f000 80c1 	beq.w	800f4d6 <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800f354:	68bb      	ldr	r3, [r7, #8]
 800f356:	6a1b      	ldr	r3, [r3, #32]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d063      	beq.n	800f424 <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	68ba      	ldr	r2, [r7, #8]
 800f362:	6892      	ldr	r2, [r2, #8]
 800f364:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	69db      	ldr	r3, [r3, #28]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d031      	beq.n	800f3d2 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f376:	431a      	orrs	r2, r3
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f37c:	431a      	orrs	r2, r3
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f382:	431a      	orrs	r2, r3
 800f384:	68bb      	ldr	r3, [r7, #8]
 800f386:	695b      	ldr	r3, [r3, #20]
 800f388:	049b      	lsls	r3, r3, #18
 800f38a:	431a      	orrs	r2, r3
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	691b      	ldr	r3, [r3, #16]
 800f390:	431a      	orrs	r2, r3
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	6a1b      	ldr	r3, [r3, #32]
 800f396:	431a      	orrs	r2, r3
 800f398:	68bb      	ldr	r3, [r7, #8]
 800f39a:	68db      	ldr	r3, [r3, #12]
 800f39c:	431a      	orrs	r2, r3
 800f39e:	68bb      	ldr	r3, [r7, #8]
 800f3a0:	69db      	ldr	r3, [r3, #28]
 800f3a2:	431a      	orrs	r2, r3
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	699b      	ldr	r3, [r3, #24]
 800f3a8:	431a      	orrs	r2, r3
 800f3aa:	68bb      	ldr	r3, [r7, #8]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	ea42 0103 	orr.w	r1, r2, r3
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	687a      	ldr	r2, [r7, #4]
 800f3b8:	430a      	orrs	r2, r1
 800f3ba:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f3c2:	f000 813f 	beq.w	800f644 <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	68ba      	ldr	r2, [r7, #8]
 800f3cc:	6852      	ldr	r2, [r2, #4]
 800f3ce:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800f3d0:	e138      	b.n	800f644 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3da:	431a      	orrs	r2, r3
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f3e0:	431a      	orrs	r2, r3
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3e6:	431a      	orrs	r2, r3
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	695b      	ldr	r3, [r3, #20]
 800f3ec:	049b      	lsls	r3, r3, #18
 800f3ee:	431a      	orrs	r2, r3
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	691b      	ldr	r3, [r3, #16]
 800f3f4:	431a      	orrs	r2, r3
 800f3f6:	68bb      	ldr	r3, [r7, #8]
 800f3f8:	6a1b      	ldr	r3, [r3, #32]
 800f3fa:	431a      	orrs	r2, r3
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	69db      	ldr	r3, [r3, #28]
 800f400:	431a      	orrs	r2, r3
 800f402:	68bb      	ldr	r3, [r7, #8]
 800f404:	699b      	ldr	r3, [r3, #24]
 800f406:	431a      	orrs	r2, r3
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	ea42 0103 	orr.w	r1, r2, r3
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	687a      	ldr	r2, [r7, #4]
 800f416:	430a      	orrs	r2, r1
 800f418:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	2200      	movs	r2, #0
 800f420:	619a      	str	r2, [r3, #24]
}
 800f422:	e10f      	b.n	800f644 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	69db      	ldr	r3, [r3, #28]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d02e      	beq.n	800f48a <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f434:	431a      	orrs	r2, r3
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f43a:	431a      	orrs	r2, r3
 800f43c:	68bb      	ldr	r3, [r7, #8]
 800f43e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f440:	431a      	orrs	r2, r3
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	695b      	ldr	r3, [r3, #20]
 800f446:	049b      	lsls	r3, r3, #18
 800f448:	431a      	orrs	r2, r3
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	6a1b      	ldr	r3, [r3, #32]
 800f44e:	431a      	orrs	r2, r3
 800f450:	68bb      	ldr	r3, [r7, #8]
 800f452:	68db      	ldr	r3, [r3, #12]
 800f454:	431a      	orrs	r2, r3
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	69db      	ldr	r3, [r3, #28]
 800f45a:	431a      	orrs	r2, r3
 800f45c:	68bb      	ldr	r3, [r7, #8]
 800f45e:	699b      	ldr	r3, [r3, #24]
 800f460:	431a      	orrs	r2, r3
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	ea42 0103 	orr.w	r1, r2, r3
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	687a      	ldr	r2, [r7, #4]
 800f470:	430a      	orrs	r2, r1
 800f472:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f47a:	f000 80e3 	beq.w	800f644 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	68ba      	ldr	r2, [r7, #8]
 800f484:	6852      	ldr	r2, [r2, #4]
 800f486:	619a      	str	r2, [r3, #24]
}
 800f488:	e0dc      	b.n	800f644 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f492:	431a      	orrs	r2, r3
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f498:	431a      	orrs	r2, r3
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f49e:	431a      	orrs	r2, r3
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	695b      	ldr	r3, [r3, #20]
 800f4a4:	049b      	lsls	r3, r3, #18
 800f4a6:	431a      	orrs	r2, r3
 800f4a8:	68bb      	ldr	r3, [r7, #8]
 800f4aa:	6a1b      	ldr	r3, [r3, #32]
 800f4ac:	431a      	orrs	r2, r3
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	69db      	ldr	r3, [r3, #28]
 800f4b2:	431a      	orrs	r2, r3
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	699b      	ldr	r3, [r3, #24]
 800f4b8:	431a      	orrs	r2, r3
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	ea42 0103 	orr.w	r1, r2, r3
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	687a      	ldr	r2, [r7, #4]
 800f4c8:	430a      	orrs	r2, r1
 800f4ca:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	619a      	str	r2, [r3, #24]
}
 800f4d4:	e0b6      	b.n	800f644 <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	6a1b      	ldr	r3, [r3, #32]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d05d      	beq.n	800f59a <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	68ba      	ldr	r2, [r7, #8]
 800f4e4:	6892      	ldr	r2, [r2, #8]
 800f4e6:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	69db      	ldr	r3, [r3, #28]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d02e      	beq.n	800f54e <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4f8:	431a      	orrs	r2, r3
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f4fe:	431a      	orrs	r2, r3
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f504:	431a      	orrs	r2, r3
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	695b      	ldr	r3, [r3, #20]
 800f50a:	049b      	lsls	r3, r3, #18
 800f50c:	431a      	orrs	r2, r3
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	691b      	ldr	r3, [r3, #16]
 800f512:	431a      	orrs	r2, r3
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	6a1b      	ldr	r3, [r3, #32]
 800f518:	431a      	orrs	r2, r3
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	68db      	ldr	r3, [r3, #12]
 800f51e:	431a      	orrs	r2, r3
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	69db      	ldr	r3, [r3, #28]
 800f524:	431a      	orrs	r2, r3
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	699b      	ldr	r3, [r3, #24]
 800f52a:	ea42 0103 	orr.w	r1, r2, r3
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	687a      	ldr	r2, [r7, #4]
 800f534:	430a      	orrs	r2, r1
 800f536:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f53e:	f000 8081 	beq.w	800f644 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	68ba      	ldr	r2, [r7, #8]
 800f548:	6852      	ldr	r2, [r2, #4]
 800f54a:	619a      	str	r2, [r3, #24]
}
 800f54c:	e07a      	b.n	800f644 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f556:	431a      	orrs	r2, r3
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f55c:	431a      	orrs	r2, r3
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f562:	431a      	orrs	r2, r3
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	695b      	ldr	r3, [r3, #20]
 800f568:	049b      	lsls	r3, r3, #18
 800f56a:	431a      	orrs	r2, r3
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	691b      	ldr	r3, [r3, #16]
 800f570:	431a      	orrs	r2, r3
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	6a1b      	ldr	r3, [r3, #32]
 800f576:	431a      	orrs	r2, r3
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	69db      	ldr	r3, [r3, #28]
 800f57c:	431a      	orrs	r2, r3
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	699b      	ldr	r3, [r3, #24]
 800f582:	ea42 0103 	orr.w	r1, r2, r3
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	687a      	ldr	r2, [r7, #4]
 800f58c:	430a      	orrs	r2, r1
 800f58e:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	2200      	movs	r2, #0
 800f596:	619a      	str	r2, [r3, #24]
}
 800f598:	e054      	b.n	800f644 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	69db      	ldr	r3, [r3, #28]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d02a      	beq.n	800f5f8 <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5aa:	431a      	orrs	r2, r3
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f5b0:	431a      	orrs	r2, r3
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5b6:	431a      	orrs	r2, r3
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	695b      	ldr	r3, [r3, #20]
 800f5bc:	049b      	lsls	r3, r3, #18
 800f5be:	431a      	orrs	r2, r3
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	6a1b      	ldr	r3, [r3, #32]
 800f5c4:	431a      	orrs	r2, r3
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	68db      	ldr	r3, [r3, #12]
 800f5ca:	431a      	orrs	r2, r3
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	69db      	ldr	r3, [r3, #28]
 800f5d0:	431a      	orrs	r2, r3
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	699b      	ldr	r3, [r3, #24]
 800f5d6:	ea42 0103 	orr.w	r1, r2, r3
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	687a      	ldr	r2, [r7, #4]
 800f5e0:	430a      	orrs	r2, r1
 800f5e2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f5ea:	d02b      	beq.n	800f644 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	68ba      	ldr	r2, [r7, #8]
 800f5f2:	6852      	ldr	r2, [r2, #4]
 800f5f4:	619a      	str	r2, [r3, #24]
}
 800f5f6:	e025      	b.n	800f644 <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d021      	beq.n	800f644 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f608:	431a      	orrs	r2, r3
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f60e:	431a      	orrs	r2, r3
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f614:	431a      	orrs	r2, r3
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	695b      	ldr	r3, [r3, #20]
 800f61a:	049b      	lsls	r3, r3, #18
 800f61c:	431a      	orrs	r2, r3
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	6a1b      	ldr	r3, [r3, #32]
 800f622:	431a      	orrs	r2, r3
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	69db      	ldr	r3, [r3, #28]
 800f628:	431a      	orrs	r2, r3
 800f62a:	68bb      	ldr	r3, [r7, #8]
 800f62c:	699b      	ldr	r3, [r3, #24]
 800f62e:	ea42 0103 	orr.w	r1, r2, r3
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	687a      	ldr	r2, [r7, #4]
 800f638:	430a      	orrs	r2, r1
 800f63a:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	2200      	movs	r2, #0
 800f642:	619a      	str	r2, [r3, #24]
}
 800f644:	bf00      	nop
 800f646:	3714      	adds	r7, #20
 800f648:	46bd      	mov	sp, r7
 800f64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64e:	4770      	bx	lr

0800f650 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b088      	sub	sp, #32
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d101      	bne.n	800f662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f65e:	2301      	movs	r3, #1
 800f660:	e3ca      	b.n	800fdf8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f662:	4b97      	ldr	r3, [pc, #604]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f664:	689b      	ldr	r3, [r3, #8]
 800f666:	f003 030c 	and.w	r3, r3, #12
 800f66a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f66c:	4b94      	ldr	r3, [pc, #592]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f66e:	68db      	ldr	r3, [r3, #12]
 800f670:	f003 0303 	and.w	r3, r3, #3
 800f674:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	f003 0310 	and.w	r3, r3, #16
 800f67e:	2b00      	cmp	r3, #0
 800f680:	f000 80e4 	beq.w	800f84c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800f684:	69bb      	ldr	r3, [r7, #24]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d007      	beq.n	800f69a <HAL_RCC_OscConfig+0x4a>
 800f68a:	69bb      	ldr	r3, [r7, #24]
 800f68c:	2b0c      	cmp	r3, #12
 800f68e:	f040 808b 	bne.w	800f7a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	2b01      	cmp	r3, #1
 800f696:	f040 8087 	bne.w	800f7a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f69a:	4b89      	ldr	r3, [pc, #548]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	f003 0302 	and.w	r3, r3, #2
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d005      	beq.n	800f6b2 <HAL_RCC_OscConfig+0x62>
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	699b      	ldr	r3, [r3, #24]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d101      	bne.n	800f6b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	e3a2      	b.n	800fdf8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6a1a      	ldr	r2, [r3, #32]
 800f6b6:	4b82      	ldr	r3, [pc, #520]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	f003 0308 	and.w	r3, r3, #8
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d004      	beq.n	800f6cc <HAL_RCC_OscConfig+0x7c>
 800f6c2:	4b7f      	ldr	r3, [pc, #508]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f6ca:	e005      	b.n	800f6d8 <HAL_RCC_OscConfig+0x88>
 800f6cc:	4b7c      	ldr	r3, [pc, #496]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f6ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f6d2:	091b      	lsrs	r3, r3, #4
 800f6d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	d223      	bcs.n	800f724 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	6a1b      	ldr	r3, [r3, #32]
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f000 fd55 	bl	8010190 <RCC_SetFlashLatencyFromMSIRange>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d001      	beq.n	800f6f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	e383      	b.n	800fdf8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f6f0:	4b73      	ldr	r3, [pc, #460]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	4a72      	ldr	r2, [pc, #456]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f6f6:	f043 0308 	orr.w	r3, r3, #8
 800f6fa:	6013      	str	r3, [r2, #0]
 800f6fc:	4b70      	ldr	r3, [pc, #448]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	6a1b      	ldr	r3, [r3, #32]
 800f708:	496d      	ldr	r1, [pc, #436]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f70a:	4313      	orrs	r3, r2
 800f70c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f70e:	4b6c      	ldr	r3, [pc, #432]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	69db      	ldr	r3, [r3, #28]
 800f71a:	021b      	lsls	r3, r3, #8
 800f71c:	4968      	ldr	r1, [pc, #416]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f71e:	4313      	orrs	r3, r2
 800f720:	604b      	str	r3, [r1, #4]
 800f722:	e025      	b.n	800f770 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f724:	4b66      	ldr	r3, [pc, #408]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	4a65      	ldr	r2, [pc, #404]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f72a:	f043 0308 	orr.w	r3, r3, #8
 800f72e:	6013      	str	r3, [r2, #0]
 800f730:	4b63      	ldr	r3, [pc, #396]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6a1b      	ldr	r3, [r3, #32]
 800f73c:	4960      	ldr	r1, [pc, #384]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f73e:	4313      	orrs	r3, r2
 800f740:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f742:	4b5f      	ldr	r3, [pc, #380]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f744:	685b      	ldr	r3, [r3, #4]
 800f746:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	69db      	ldr	r3, [r3, #28]
 800f74e:	021b      	lsls	r3, r3, #8
 800f750:	495b      	ldr	r1, [pc, #364]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f752:	4313      	orrs	r3, r2
 800f754:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f756:	69bb      	ldr	r3, [r7, #24]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d109      	bne.n	800f770 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6a1b      	ldr	r3, [r3, #32]
 800f760:	4618      	mov	r0, r3
 800f762:	f000 fd15 	bl	8010190 <RCC_SetFlashLatencyFromMSIRange>
 800f766:	4603      	mov	r3, r0
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d001      	beq.n	800f770 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800f76c:	2301      	movs	r3, #1
 800f76e:	e343      	b.n	800fdf8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800f770:	f000 fc4a 	bl	8010008 <HAL_RCC_GetSysClockFreq>
 800f774:	4602      	mov	r2, r0
 800f776:	4b52      	ldr	r3, [pc, #328]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f778:	689b      	ldr	r3, [r3, #8]
 800f77a:	091b      	lsrs	r3, r3, #4
 800f77c:	f003 030f 	and.w	r3, r3, #15
 800f780:	4950      	ldr	r1, [pc, #320]	@ (800f8c4 <HAL_RCC_OscConfig+0x274>)
 800f782:	5ccb      	ldrb	r3, [r1, r3]
 800f784:	f003 031f 	and.w	r3, r3, #31
 800f788:	fa22 f303 	lsr.w	r3, r2, r3
 800f78c:	4a4e      	ldr	r2, [pc, #312]	@ (800f8c8 <HAL_RCC_OscConfig+0x278>)
 800f78e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800f790:	4b4e      	ldr	r3, [pc, #312]	@ (800f8cc <HAL_RCC_OscConfig+0x27c>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	4618      	mov	r0, r3
 800f796:	f7fb fa67 	bl	800ac68 <HAL_InitTick>
 800f79a:	4603      	mov	r3, r0
 800f79c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800f79e:	7bfb      	ldrb	r3, [r7, #15]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d052      	beq.n	800f84a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800f7a4:	7bfb      	ldrb	r3, [r7, #15]
 800f7a6:	e327      	b.n	800fdf8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	699b      	ldr	r3, [r3, #24]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d032      	beq.n	800f816 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800f7b0:	4b43      	ldr	r3, [pc, #268]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	4a42      	ldr	r2, [pc, #264]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f7b6:	f043 0301 	orr.w	r3, r3, #1
 800f7ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f7bc:	f7fb faa4 	bl	800ad08 <HAL_GetTick>
 800f7c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f7c2:	e008      	b.n	800f7d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f7c4:	f7fb faa0 	bl	800ad08 <HAL_GetTick>
 800f7c8:	4602      	mov	r2, r0
 800f7ca:	693b      	ldr	r3, [r7, #16]
 800f7cc:	1ad3      	subs	r3, r2, r3
 800f7ce:	2b02      	cmp	r3, #2
 800f7d0:	d901      	bls.n	800f7d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800f7d2:	2303      	movs	r3, #3
 800f7d4:	e310      	b.n	800fdf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f7d6:	4b3a      	ldr	r3, [pc, #232]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	f003 0302 	and.w	r3, r3, #2
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d0f0      	beq.n	800f7c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f7e2:	4b37      	ldr	r3, [pc, #220]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	4a36      	ldr	r2, [pc, #216]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f7e8:	f043 0308 	orr.w	r3, r3, #8
 800f7ec:	6013      	str	r3, [r2, #0]
 800f7ee:	4b34      	ldr	r3, [pc, #208]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	6a1b      	ldr	r3, [r3, #32]
 800f7fa:	4931      	ldr	r1, [pc, #196]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f7fc:	4313      	orrs	r3, r2
 800f7fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f800:	4b2f      	ldr	r3, [pc, #188]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f802:	685b      	ldr	r3, [r3, #4]
 800f804:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	69db      	ldr	r3, [r3, #28]
 800f80c:	021b      	lsls	r3, r3, #8
 800f80e:	492c      	ldr	r1, [pc, #176]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f810:	4313      	orrs	r3, r2
 800f812:	604b      	str	r3, [r1, #4]
 800f814:	e01a      	b.n	800f84c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800f816:	4b2a      	ldr	r3, [pc, #168]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	4a29      	ldr	r2, [pc, #164]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f81c:	f023 0301 	bic.w	r3, r3, #1
 800f820:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f822:	f7fb fa71 	bl	800ad08 <HAL_GetTick>
 800f826:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f828:	e008      	b.n	800f83c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f82a:	f7fb fa6d 	bl	800ad08 <HAL_GetTick>
 800f82e:	4602      	mov	r2, r0
 800f830:	693b      	ldr	r3, [r7, #16]
 800f832:	1ad3      	subs	r3, r2, r3
 800f834:	2b02      	cmp	r3, #2
 800f836:	d901      	bls.n	800f83c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800f838:	2303      	movs	r3, #3
 800f83a:	e2dd      	b.n	800fdf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f83c:	4b20      	ldr	r3, [pc, #128]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	f003 0302 	and.w	r3, r3, #2
 800f844:	2b00      	cmp	r3, #0
 800f846:	d1f0      	bne.n	800f82a <HAL_RCC_OscConfig+0x1da>
 800f848:	e000      	b.n	800f84c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f84a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	f003 0301 	and.w	r3, r3, #1
 800f854:	2b00      	cmp	r3, #0
 800f856:	d074      	beq.n	800f942 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800f858:	69bb      	ldr	r3, [r7, #24]
 800f85a:	2b08      	cmp	r3, #8
 800f85c:	d005      	beq.n	800f86a <HAL_RCC_OscConfig+0x21a>
 800f85e:	69bb      	ldr	r3, [r7, #24]
 800f860:	2b0c      	cmp	r3, #12
 800f862:	d10e      	bne.n	800f882 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	2b03      	cmp	r3, #3
 800f868:	d10b      	bne.n	800f882 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f86a:	4b15      	ldr	r3, [pc, #84]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f872:	2b00      	cmp	r3, #0
 800f874:	d064      	beq.n	800f940 <HAL_RCC_OscConfig+0x2f0>
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	685b      	ldr	r3, [r3, #4]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d160      	bne.n	800f940 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800f87e:	2301      	movs	r3, #1
 800f880:	e2ba      	b.n	800fdf8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	685b      	ldr	r3, [r3, #4]
 800f886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f88a:	d106      	bne.n	800f89a <HAL_RCC_OscConfig+0x24a>
 800f88c:	4b0c      	ldr	r3, [pc, #48]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	4a0b      	ldr	r2, [pc, #44]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f892:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f896:	6013      	str	r3, [r2, #0]
 800f898:	e026      	b.n	800f8e8 <HAL_RCC_OscConfig+0x298>
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	685b      	ldr	r3, [r3, #4]
 800f89e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f8a2:	d115      	bne.n	800f8d0 <HAL_RCC_OscConfig+0x280>
 800f8a4:	4b06      	ldr	r3, [pc, #24]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	4a05      	ldr	r2, [pc, #20]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f8aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f8ae:	6013      	str	r3, [r2, #0]
 800f8b0:	4b03      	ldr	r3, [pc, #12]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	4a02      	ldr	r2, [pc, #8]	@ (800f8c0 <HAL_RCC_OscConfig+0x270>)
 800f8b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f8ba:	6013      	str	r3, [r2, #0]
 800f8bc:	e014      	b.n	800f8e8 <HAL_RCC_OscConfig+0x298>
 800f8be:	bf00      	nop
 800f8c0:	40021000 	.word	0x40021000
 800f8c4:	08017588 	.word	0x08017588
 800f8c8:	20000168 	.word	0x20000168
 800f8cc:	20000174 	.word	0x20000174
 800f8d0:	4ba0      	ldr	r3, [pc, #640]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	4a9f      	ldr	r2, [pc, #636]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800f8d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f8da:	6013      	str	r3, [r2, #0]
 800f8dc:	4b9d      	ldr	r3, [pc, #628]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	4a9c      	ldr	r2, [pc, #624]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800f8e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f8e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	685b      	ldr	r3, [r3, #4]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d013      	beq.n	800f918 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f8f0:	f7fb fa0a 	bl	800ad08 <HAL_GetTick>
 800f8f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f8f6:	e008      	b.n	800f90a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f8f8:	f7fb fa06 	bl	800ad08 <HAL_GetTick>
 800f8fc:	4602      	mov	r2, r0
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	1ad3      	subs	r3, r2, r3
 800f902:	2b64      	cmp	r3, #100	@ 0x64
 800f904:	d901      	bls.n	800f90a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800f906:	2303      	movs	r3, #3
 800f908:	e276      	b.n	800fdf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f90a:	4b92      	ldr	r3, [pc, #584]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f912:	2b00      	cmp	r3, #0
 800f914:	d0f0      	beq.n	800f8f8 <HAL_RCC_OscConfig+0x2a8>
 800f916:	e014      	b.n	800f942 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f918:	f7fb f9f6 	bl	800ad08 <HAL_GetTick>
 800f91c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f91e:	e008      	b.n	800f932 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f920:	f7fb f9f2 	bl	800ad08 <HAL_GetTick>
 800f924:	4602      	mov	r2, r0
 800f926:	693b      	ldr	r3, [r7, #16]
 800f928:	1ad3      	subs	r3, r2, r3
 800f92a:	2b64      	cmp	r3, #100	@ 0x64
 800f92c:	d901      	bls.n	800f932 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800f92e:	2303      	movs	r3, #3
 800f930:	e262      	b.n	800fdf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f932:	4b88      	ldr	r3, [pc, #544]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d1f0      	bne.n	800f920 <HAL_RCC_OscConfig+0x2d0>
 800f93e:	e000      	b.n	800f942 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	f003 0302 	and.w	r3, r3, #2
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d060      	beq.n	800fa10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800f94e:	69bb      	ldr	r3, [r7, #24]
 800f950:	2b04      	cmp	r3, #4
 800f952:	d005      	beq.n	800f960 <HAL_RCC_OscConfig+0x310>
 800f954:	69bb      	ldr	r3, [r7, #24]
 800f956:	2b0c      	cmp	r3, #12
 800f958:	d119      	bne.n	800f98e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	2b02      	cmp	r3, #2
 800f95e:	d116      	bne.n	800f98e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f960:	4b7c      	ldr	r3, [pc, #496]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d005      	beq.n	800f978 <HAL_RCC_OscConfig+0x328>
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	68db      	ldr	r3, [r3, #12]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d101      	bne.n	800f978 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800f974:	2301      	movs	r3, #1
 800f976:	e23f      	b.n	800fdf8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f978:	4b76      	ldr	r3, [pc, #472]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800f97a:	685b      	ldr	r3, [r3, #4]
 800f97c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	691b      	ldr	r3, [r3, #16]
 800f984:	061b      	lsls	r3, r3, #24
 800f986:	4973      	ldr	r1, [pc, #460]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800f988:	4313      	orrs	r3, r2
 800f98a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f98c:	e040      	b.n	800fa10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	68db      	ldr	r3, [r3, #12]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d023      	beq.n	800f9de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f996:	4b6f      	ldr	r3, [pc, #444]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	4a6e      	ldr	r2, [pc, #440]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800f99c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f9a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f9a2:	f7fb f9b1 	bl	800ad08 <HAL_GetTick>
 800f9a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f9a8:	e008      	b.n	800f9bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f9aa:	f7fb f9ad 	bl	800ad08 <HAL_GetTick>
 800f9ae:	4602      	mov	r2, r0
 800f9b0:	693b      	ldr	r3, [r7, #16]
 800f9b2:	1ad3      	subs	r3, r2, r3
 800f9b4:	2b02      	cmp	r3, #2
 800f9b6:	d901      	bls.n	800f9bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800f9b8:	2303      	movs	r3, #3
 800f9ba:	e21d      	b.n	800fdf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f9bc:	4b65      	ldr	r3, [pc, #404]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d0f0      	beq.n	800f9aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f9c8:	4b62      	ldr	r3, [pc, #392]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800f9ca:	685b      	ldr	r3, [r3, #4]
 800f9cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	691b      	ldr	r3, [r3, #16]
 800f9d4:	061b      	lsls	r3, r3, #24
 800f9d6:	495f      	ldr	r1, [pc, #380]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800f9d8:	4313      	orrs	r3, r2
 800f9da:	604b      	str	r3, [r1, #4]
 800f9dc:	e018      	b.n	800fa10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f9de:	4b5d      	ldr	r3, [pc, #372]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	4a5c      	ldr	r2, [pc, #368]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800f9e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f9e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f9ea:	f7fb f98d 	bl	800ad08 <HAL_GetTick>
 800f9ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800f9f0:	e008      	b.n	800fa04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f9f2:	f7fb f989 	bl	800ad08 <HAL_GetTick>
 800f9f6:	4602      	mov	r2, r0
 800f9f8:	693b      	ldr	r3, [r7, #16]
 800f9fa:	1ad3      	subs	r3, r2, r3
 800f9fc:	2b02      	cmp	r3, #2
 800f9fe:	d901      	bls.n	800fa04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800fa00:	2303      	movs	r3, #3
 800fa02:	e1f9      	b.n	800fdf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800fa04:	4b53      	ldr	r3, [pc, #332]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d1f0      	bne.n	800f9f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	f003 0308 	and.w	r3, r3, #8
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d03c      	beq.n	800fa96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	695b      	ldr	r3, [r3, #20]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d01c      	beq.n	800fa5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fa24:	4b4b      	ldr	r3, [pc, #300]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800fa26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fa2a:	4a4a      	ldr	r2, [pc, #296]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800fa2c:	f043 0301 	orr.w	r3, r3, #1
 800fa30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fa34:	f7fb f968 	bl	800ad08 <HAL_GetTick>
 800fa38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800fa3a:	e008      	b.n	800fa4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fa3c:	f7fb f964 	bl	800ad08 <HAL_GetTick>
 800fa40:	4602      	mov	r2, r0
 800fa42:	693b      	ldr	r3, [r7, #16]
 800fa44:	1ad3      	subs	r3, r2, r3
 800fa46:	2b02      	cmp	r3, #2
 800fa48:	d901      	bls.n	800fa4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800fa4a:	2303      	movs	r3, #3
 800fa4c:	e1d4      	b.n	800fdf8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800fa4e:	4b41      	ldr	r3, [pc, #260]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800fa50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fa54:	f003 0302 	and.w	r3, r3, #2
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d0ef      	beq.n	800fa3c <HAL_RCC_OscConfig+0x3ec>
 800fa5c:	e01b      	b.n	800fa96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fa5e:	4b3d      	ldr	r3, [pc, #244]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800fa60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fa64:	4a3b      	ldr	r2, [pc, #236]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800fa66:	f023 0301 	bic.w	r3, r3, #1
 800fa6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fa6e:	f7fb f94b 	bl	800ad08 <HAL_GetTick>
 800fa72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800fa74:	e008      	b.n	800fa88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fa76:	f7fb f947 	bl	800ad08 <HAL_GetTick>
 800fa7a:	4602      	mov	r2, r0
 800fa7c:	693b      	ldr	r3, [r7, #16]
 800fa7e:	1ad3      	subs	r3, r2, r3
 800fa80:	2b02      	cmp	r3, #2
 800fa82:	d901      	bls.n	800fa88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800fa84:	2303      	movs	r3, #3
 800fa86:	e1b7      	b.n	800fdf8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800fa88:	4b32      	ldr	r3, [pc, #200]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800fa8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fa8e:	f003 0302 	and.w	r3, r3, #2
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d1ef      	bne.n	800fa76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	f003 0304 	and.w	r3, r3, #4
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	f000 80a6 	beq.w	800fbf0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800faa4:	2300      	movs	r3, #0
 800faa6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800faa8:	4b2a      	ldr	r3, [pc, #168]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800faaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800faac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d10d      	bne.n	800fad0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fab4:	4b27      	ldr	r3, [pc, #156]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800fab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fab8:	4a26      	ldr	r2, [pc, #152]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800faba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fabe:	6593      	str	r3, [r2, #88]	@ 0x58
 800fac0:	4b24      	ldr	r3, [pc, #144]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800fac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fac4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fac8:	60bb      	str	r3, [r7, #8]
 800faca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800facc:	2301      	movs	r3, #1
 800face:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fad0:	4b21      	ldr	r3, [pc, #132]	@ (800fb58 <HAL_RCC_OscConfig+0x508>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d118      	bne.n	800fb0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fadc:	4b1e      	ldr	r3, [pc, #120]	@ (800fb58 <HAL_RCC_OscConfig+0x508>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	4a1d      	ldr	r2, [pc, #116]	@ (800fb58 <HAL_RCC_OscConfig+0x508>)
 800fae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fae6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fae8:	f7fb f90e 	bl	800ad08 <HAL_GetTick>
 800faec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800faee:	e008      	b.n	800fb02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800faf0:	f7fb f90a 	bl	800ad08 <HAL_GetTick>
 800faf4:	4602      	mov	r2, r0
 800faf6:	693b      	ldr	r3, [r7, #16]
 800faf8:	1ad3      	subs	r3, r2, r3
 800fafa:	2b02      	cmp	r3, #2
 800fafc:	d901      	bls.n	800fb02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800fafe:	2303      	movs	r3, #3
 800fb00:	e17a      	b.n	800fdf8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fb02:	4b15      	ldr	r3, [pc, #84]	@ (800fb58 <HAL_RCC_OscConfig+0x508>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d0f0      	beq.n	800faf0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	689b      	ldr	r3, [r3, #8]
 800fb12:	2b01      	cmp	r3, #1
 800fb14:	d108      	bne.n	800fb28 <HAL_RCC_OscConfig+0x4d8>
 800fb16:	4b0f      	ldr	r3, [pc, #60]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800fb18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb1c:	4a0d      	ldr	r2, [pc, #52]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800fb1e:	f043 0301 	orr.w	r3, r3, #1
 800fb22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800fb26:	e029      	b.n	800fb7c <HAL_RCC_OscConfig+0x52c>
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	689b      	ldr	r3, [r3, #8]
 800fb2c:	2b05      	cmp	r3, #5
 800fb2e:	d115      	bne.n	800fb5c <HAL_RCC_OscConfig+0x50c>
 800fb30:	4b08      	ldr	r3, [pc, #32]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800fb32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb36:	4a07      	ldr	r2, [pc, #28]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800fb38:	f043 0304 	orr.w	r3, r3, #4
 800fb3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800fb40:	4b04      	ldr	r3, [pc, #16]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800fb42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb46:	4a03      	ldr	r2, [pc, #12]	@ (800fb54 <HAL_RCC_OscConfig+0x504>)
 800fb48:	f043 0301 	orr.w	r3, r3, #1
 800fb4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800fb50:	e014      	b.n	800fb7c <HAL_RCC_OscConfig+0x52c>
 800fb52:	bf00      	nop
 800fb54:	40021000 	.word	0x40021000
 800fb58:	40007000 	.word	0x40007000
 800fb5c:	4b9c      	ldr	r3, [pc, #624]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fb5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb62:	4a9b      	ldr	r2, [pc, #620]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fb64:	f023 0301 	bic.w	r3, r3, #1
 800fb68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800fb6c:	4b98      	ldr	r3, [pc, #608]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fb6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb72:	4a97      	ldr	r2, [pc, #604]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fb74:	f023 0304 	bic.w	r3, r3, #4
 800fb78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	689b      	ldr	r3, [r3, #8]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d016      	beq.n	800fbb2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fb84:	f7fb f8c0 	bl	800ad08 <HAL_GetTick>
 800fb88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fb8a:	e00a      	b.n	800fba2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fb8c:	f7fb f8bc 	bl	800ad08 <HAL_GetTick>
 800fb90:	4602      	mov	r2, r0
 800fb92:	693b      	ldr	r3, [r7, #16]
 800fb94:	1ad3      	subs	r3, r2, r3
 800fb96:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fb9a:	4293      	cmp	r3, r2
 800fb9c:	d901      	bls.n	800fba2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800fb9e:	2303      	movs	r3, #3
 800fba0:	e12a      	b.n	800fdf8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fba2:	4b8b      	ldr	r3, [pc, #556]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fba8:	f003 0302 	and.w	r3, r3, #2
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d0ed      	beq.n	800fb8c <HAL_RCC_OscConfig+0x53c>
 800fbb0:	e015      	b.n	800fbde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fbb2:	f7fb f8a9 	bl	800ad08 <HAL_GetTick>
 800fbb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800fbb8:	e00a      	b.n	800fbd0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fbba:	f7fb f8a5 	bl	800ad08 <HAL_GetTick>
 800fbbe:	4602      	mov	r2, r0
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	1ad3      	subs	r3, r2, r3
 800fbc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fbc8:	4293      	cmp	r3, r2
 800fbca:	d901      	bls.n	800fbd0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800fbcc:	2303      	movs	r3, #3
 800fbce:	e113      	b.n	800fdf8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800fbd0:	4b7f      	ldr	r3, [pc, #508]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fbd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fbd6:	f003 0302 	and.w	r3, r3, #2
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d1ed      	bne.n	800fbba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800fbde:	7ffb      	ldrb	r3, [r7, #31]
 800fbe0:	2b01      	cmp	r3, #1
 800fbe2:	d105      	bne.n	800fbf0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fbe4:	4b7a      	ldr	r3, [pc, #488]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fbe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fbe8:	4a79      	ldr	r2, [pc, #484]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fbea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fbee:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	f000 80fe 	beq.w	800fdf6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbfe:	2b02      	cmp	r3, #2
 800fc00:	f040 80d0 	bne.w	800fda4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800fc04:	4b72      	ldr	r3, [pc, #456]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fc06:	68db      	ldr	r3, [r3, #12]
 800fc08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	f003 0203 	and.w	r2, r3, #3
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d130      	bne.n	800fc7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc22:	3b01      	subs	r3, #1
 800fc24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d127      	bne.n	800fc7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d11f      	bne.n	800fc7a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fc40:	687a      	ldr	r2, [r7, #4]
 800fc42:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800fc44:	2a07      	cmp	r2, #7
 800fc46:	bf14      	ite	ne
 800fc48:	2201      	movne	r2, #1
 800fc4a:	2200      	moveq	r2, #0
 800fc4c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800fc4e:	4293      	cmp	r3, r2
 800fc50:	d113      	bne.n	800fc7a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800fc52:	697b      	ldr	r3, [r7, #20]
 800fc54:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc5c:	085b      	lsrs	r3, r3, #1
 800fc5e:	3b01      	subs	r3, #1
 800fc60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800fc62:	429a      	cmp	r2, r3
 800fc64:	d109      	bne.n	800fc7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc70:	085b      	lsrs	r3, r3, #1
 800fc72:	3b01      	subs	r3, #1
 800fc74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d06e      	beq.n	800fd58 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800fc7a:	69bb      	ldr	r3, [r7, #24]
 800fc7c:	2b0c      	cmp	r3, #12
 800fc7e:	d069      	beq.n	800fd54 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800fc80:	4b53      	ldr	r3, [pc, #332]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d105      	bne.n	800fc98 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800fc8c:	4b50      	ldr	r3, [pc, #320]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d001      	beq.n	800fc9c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800fc98:	2301      	movs	r3, #1
 800fc9a:	e0ad      	b.n	800fdf8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800fc9c:	4b4c      	ldr	r3, [pc, #304]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	4a4b      	ldr	r2, [pc, #300]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fca2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fca6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800fca8:	f7fb f82e 	bl	800ad08 <HAL_GetTick>
 800fcac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fcae:	e008      	b.n	800fcc2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fcb0:	f7fb f82a 	bl	800ad08 <HAL_GetTick>
 800fcb4:	4602      	mov	r2, r0
 800fcb6:	693b      	ldr	r3, [r7, #16]
 800fcb8:	1ad3      	subs	r3, r2, r3
 800fcba:	2b02      	cmp	r3, #2
 800fcbc:	d901      	bls.n	800fcc2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800fcbe:	2303      	movs	r3, #3
 800fcc0:	e09a      	b.n	800fdf8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fcc2:	4b43      	ldr	r3, [pc, #268]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d1f0      	bne.n	800fcb0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800fcce:	4b40      	ldr	r3, [pc, #256]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fcd0:	68da      	ldr	r2, [r3, #12]
 800fcd2:	4b40      	ldr	r3, [pc, #256]	@ (800fdd4 <HAL_RCC_OscConfig+0x784>)
 800fcd4:	4013      	ands	r3, r2
 800fcd6:	687a      	ldr	r2, [r7, #4]
 800fcd8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800fcda:	687a      	ldr	r2, [r7, #4]
 800fcdc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800fcde:	3a01      	subs	r2, #1
 800fce0:	0112      	lsls	r2, r2, #4
 800fce2:	4311      	orrs	r1, r2
 800fce4:	687a      	ldr	r2, [r7, #4]
 800fce6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800fce8:	0212      	lsls	r2, r2, #8
 800fcea:	4311      	orrs	r1, r2
 800fcec:	687a      	ldr	r2, [r7, #4]
 800fcee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800fcf0:	0852      	lsrs	r2, r2, #1
 800fcf2:	3a01      	subs	r2, #1
 800fcf4:	0552      	lsls	r2, r2, #21
 800fcf6:	4311      	orrs	r1, r2
 800fcf8:	687a      	ldr	r2, [r7, #4]
 800fcfa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800fcfc:	0852      	lsrs	r2, r2, #1
 800fcfe:	3a01      	subs	r2, #1
 800fd00:	0652      	lsls	r2, r2, #25
 800fd02:	4311      	orrs	r1, r2
 800fd04:	687a      	ldr	r2, [r7, #4]
 800fd06:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800fd08:	0912      	lsrs	r2, r2, #4
 800fd0a:	0452      	lsls	r2, r2, #17
 800fd0c:	430a      	orrs	r2, r1
 800fd0e:	4930      	ldr	r1, [pc, #192]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fd10:	4313      	orrs	r3, r2
 800fd12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800fd14:	4b2e      	ldr	r3, [pc, #184]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	4a2d      	ldr	r2, [pc, #180]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fd1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fd1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800fd20:	4b2b      	ldr	r3, [pc, #172]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fd22:	68db      	ldr	r3, [r3, #12]
 800fd24:	4a2a      	ldr	r2, [pc, #168]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fd26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fd2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800fd2c:	f7fa ffec 	bl	800ad08 <HAL_GetTick>
 800fd30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fd32:	e008      	b.n	800fd46 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fd34:	f7fa ffe8 	bl	800ad08 <HAL_GetTick>
 800fd38:	4602      	mov	r2, r0
 800fd3a:	693b      	ldr	r3, [r7, #16]
 800fd3c:	1ad3      	subs	r3, r2, r3
 800fd3e:	2b02      	cmp	r3, #2
 800fd40:	d901      	bls.n	800fd46 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800fd42:	2303      	movs	r3, #3
 800fd44:	e058      	b.n	800fdf8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fd46:	4b22      	ldr	r3, [pc, #136]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d0f0      	beq.n	800fd34 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800fd52:	e050      	b.n	800fdf6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800fd54:	2301      	movs	r3, #1
 800fd56:	e04f      	b.n	800fdf8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fd58:	4b1d      	ldr	r3, [pc, #116]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d148      	bne.n	800fdf6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800fd64:	4b1a      	ldr	r3, [pc, #104]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	4a19      	ldr	r2, [pc, #100]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fd6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fd6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800fd70:	4b17      	ldr	r3, [pc, #92]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fd72:	68db      	ldr	r3, [r3, #12]
 800fd74:	4a16      	ldr	r2, [pc, #88]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fd76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fd7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800fd7c:	f7fa ffc4 	bl	800ad08 <HAL_GetTick>
 800fd80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fd82:	e008      	b.n	800fd96 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fd84:	f7fa ffc0 	bl	800ad08 <HAL_GetTick>
 800fd88:	4602      	mov	r2, r0
 800fd8a:	693b      	ldr	r3, [r7, #16]
 800fd8c:	1ad3      	subs	r3, r2, r3
 800fd8e:	2b02      	cmp	r3, #2
 800fd90:	d901      	bls.n	800fd96 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800fd92:	2303      	movs	r3, #3
 800fd94:	e030      	b.n	800fdf8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fd96:	4b0e      	ldr	r3, [pc, #56]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d0f0      	beq.n	800fd84 <HAL_RCC_OscConfig+0x734>
 800fda2:	e028      	b.n	800fdf6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800fda4:	69bb      	ldr	r3, [r7, #24]
 800fda6:	2b0c      	cmp	r3, #12
 800fda8:	d023      	beq.n	800fdf2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fdaa:	4b09      	ldr	r3, [pc, #36]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	4a08      	ldr	r2, [pc, #32]	@ (800fdd0 <HAL_RCC_OscConfig+0x780>)
 800fdb0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fdb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fdb6:	f7fa ffa7 	bl	800ad08 <HAL_GetTick>
 800fdba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fdbc:	e00c      	b.n	800fdd8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fdbe:	f7fa ffa3 	bl	800ad08 <HAL_GetTick>
 800fdc2:	4602      	mov	r2, r0
 800fdc4:	693b      	ldr	r3, [r7, #16]
 800fdc6:	1ad3      	subs	r3, r2, r3
 800fdc8:	2b02      	cmp	r3, #2
 800fdca:	d905      	bls.n	800fdd8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800fdcc:	2303      	movs	r3, #3
 800fdce:	e013      	b.n	800fdf8 <HAL_RCC_OscConfig+0x7a8>
 800fdd0:	40021000 	.word	0x40021000
 800fdd4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fdd8:	4b09      	ldr	r3, [pc, #36]	@ (800fe00 <HAL_RCC_OscConfig+0x7b0>)
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d1ec      	bne.n	800fdbe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800fde4:	4b06      	ldr	r3, [pc, #24]	@ (800fe00 <HAL_RCC_OscConfig+0x7b0>)
 800fde6:	68da      	ldr	r2, [r3, #12]
 800fde8:	4905      	ldr	r1, [pc, #20]	@ (800fe00 <HAL_RCC_OscConfig+0x7b0>)
 800fdea:	4b06      	ldr	r3, [pc, #24]	@ (800fe04 <HAL_RCC_OscConfig+0x7b4>)
 800fdec:	4013      	ands	r3, r2
 800fdee:	60cb      	str	r3, [r1, #12]
 800fdf0:	e001      	b.n	800fdf6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	e000      	b.n	800fdf8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800fdf6:	2300      	movs	r3, #0
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	3720      	adds	r7, #32
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}
 800fe00:	40021000 	.word	0x40021000
 800fe04:	feeefffc 	.word	0xfeeefffc

0800fe08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b084      	sub	sp, #16
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
 800fe10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d101      	bne.n	800fe1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fe18:	2301      	movs	r3, #1
 800fe1a:	e0e7      	b.n	800ffec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800fe1c:	4b75      	ldr	r3, [pc, #468]	@ (800fff4 <HAL_RCC_ClockConfig+0x1ec>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	f003 0307 	and.w	r3, r3, #7
 800fe24:	683a      	ldr	r2, [r7, #0]
 800fe26:	429a      	cmp	r2, r3
 800fe28:	d910      	bls.n	800fe4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fe2a:	4b72      	ldr	r3, [pc, #456]	@ (800fff4 <HAL_RCC_ClockConfig+0x1ec>)
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	f023 0207 	bic.w	r2, r3, #7
 800fe32:	4970      	ldr	r1, [pc, #448]	@ (800fff4 <HAL_RCC_ClockConfig+0x1ec>)
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	4313      	orrs	r3, r2
 800fe38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fe3a:	4b6e      	ldr	r3, [pc, #440]	@ (800fff4 <HAL_RCC_ClockConfig+0x1ec>)
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	f003 0307 	and.w	r3, r3, #7
 800fe42:	683a      	ldr	r2, [r7, #0]
 800fe44:	429a      	cmp	r2, r3
 800fe46:	d001      	beq.n	800fe4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800fe48:	2301      	movs	r3, #1
 800fe4a:	e0cf      	b.n	800ffec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	f003 0302 	and.w	r3, r3, #2
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d010      	beq.n	800fe7a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	689a      	ldr	r2, [r3, #8]
 800fe5c:	4b66      	ldr	r3, [pc, #408]	@ (800fff8 <HAL_RCC_ClockConfig+0x1f0>)
 800fe5e:	689b      	ldr	r3, [r3, #8]
 800fe60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fe64:	429a      	cmp	r2, r3
 800fe66:	d908      	bls.n	800fe7a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fe68:	4b63      	ldr	r3, [pc, #396]	@ (800fff8 <HAL_RCC_ClockConfig+0x1f0>)
 800fe6a:	689b      	ldr	r3, [r3, #8]
 800fe6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	689b      	ldr	r3, [r3, #8]
 800fe74:	4960      	ldr	r1, [pc, #384]	@ (800fff8 <HAL_RCC_ClockConfig+0x1f0>)
 800fe76:	4313      	orrs	r3, r2
 800fe78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	f003 0301 	and.w	r3, r3, #1
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d04c      	beq.n	800ff20 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	685b      	ldr	r3, [r3, #4]
 800fe8a:	2b03      	cmp	r3, #3
 800fe8c:	d107      	bne.n	800fe9e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fe8e:	4b5a      	ldr	r3, [pc, #360]	@ (800fff8 <HAL_RCC_ClockConfig+0x1f0>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d121      	bne.n	800fede <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800fe9a:	2301      	movs	r3, #1
 800fe9c:	e0a6      	b.n	800ffec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	685b      	ldr	r3, [r3, #4]
 800fea2:	2b02      	cmp	r3, #2
 800fea4:	d107      	bne.n	800feb6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800fea6:	4b54      	ldr	r3, [pc, #336]	@ (800fff8 <HAL_RCC_ClockConfig+0x1f0>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d115      	bne.n	800fede <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800feb2:	2301      	movs	r3, #1
 800feb4:	e09a      	b.n	800ffec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	685b      	ldr	r3, [r3, #4]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d107      	bne.n	800fece <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800febe:	4b4e      	ldr	r3, [pc, #312]	@ (800fff8 <HAL_RCC_ClockConfig+0x1f0>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	f003 0302 	and.w	r3, r3, #2
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d109      	bne.n	800fede <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800feca:	2301      	movs	r3, #1
 800fecc:	e08e      	b.n	800ffec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800fece:	4b4a      	ldr	r3, [pc, #296]	@ (800fff8 <HAL_RCC_ClockConfig+0x1f0>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d101      	bne.n	800fede <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800feda:	2301      	movs	r3, #1
 800fedc:	e086      	b.n	800ffec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800fede:	4b46      	ldr	r3, [pc, #280]	@ (800fff8 <HAL_RCC_ClockConfig+0x1f0>)
 800fee0:	689b      	ldr	r3, [r3, #8]
 800fee2:	f023 0203 	bic.w	r2, r3, #3
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	685b      	ldr	r3, [r3, #4]
 800feea:	4943      	ldr	r1, [pc, #268]	@ (800fff8 <HAL_RCC_ClockConfig+0x1f0>)
 800feec:	4313      	orrs	r3, r2
 800feee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fef0:	f7fa ff0a 	bl	800ad08 <HAL_GetTick>
 800fef4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fef6:	e00a      	b.n	800ff0e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fef8:	f7fa ff06 	bl	800ad08 <HAL_GetTick>
 800fefc:	4602      	mov	r2, r0
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	1ad3      	subs	r3, r2, r3
 800ff02:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff06:	4293      	cmp	r3, r2
 800ff08:	d901      	bls.n	800ff0e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800ff0a:	2303      	movs	r3, #3
 800ff0c:	e06e      	b.n	800ffec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ff0e:	4b3a      	ldr	r3, [pc, #232]	@ (800fff8 <HAL_RCC_ClockConfig+0x1f0>)
 800ff10:	689b      	ldr	r3, [r3, #8]
 800ff12:	f003 020c 	and.w	r2, r3, #12
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	685b      	ldr	r3, [r3, #4]
 800ff1a:	009b      	lsls	r3, r3, #2
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d1eb      	bne.n	800fef8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	f003 0302 	and.w	r3, r3, #2
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d010      	beq.n	800ff4e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	689a      	ldr	r2, [r3, #8]
 800ff30:	4b31      	ldr	r3, [pc, #196]	@ (800fff8 <HAL_RCC_ClockConfig+0x1f0>)
 800ff32:	689b      	ldr	r3, [r3, #8]
 800ff34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	d208      	bcs.n	800ff4e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ff3c:	4b2e      	ldr	r3, [pc, #184]	@ (800fff8 <HAL_RCC_ClockConfig+0x1f0>)
 800ff3e:	689b      	ldr	r3, [r3, #8]
 800ff40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	689b      	ldr	r3, [r3, #8]
 800ff48:	492b      	ldr	r1, [pc, #172]	@ (800fff8 <HAL_RCC_ClockConfig+0x1f0>)
 800ff4a:	4313      	orrs	r3, r2
 800ff4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ff4e:	4b29      	ldr	r3, [pc, #164]	@ (800fff4 <HAL_RCC_ClockConfig+0x1ec>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	f003 0307 	and.w	r3, r3, #7
 800ff56:	683a      	ldr	r2, [r7, #0]
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	d210      	bcs.n	800ff7e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ff5c:	4b25      	ldr	r3, [pc, #148]	@ (800fff4 <HAL_RCC_ClockConfig+0x1ec>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	f023 0207 	bic.w	r2, r3, #7
 800ff64:	4923      	ldr	r1, [pc, #140]	@ (800fff4 <HAL_RCC_ClockConfig+0x1ec>)
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	4313      	orrs	r3, r2
 800ff6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ff6c:	4b21      	ldr	r3, [pc, #132]	@ (800fff4 <HAL_RCC_ClockConfig+0x1ec>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	f003 0307 	and.w	r3, r3, #7
 800ff74:	683a      	ldr	r2, [r7, #0]
 800ff76:	429a      	cmp	r2, r3
 800ff78:	d001      	beq.n	800ff7e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	e036      	b.n	800ffec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	f003 0304 	and.w	r3, r3, #4
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d008      	beq.n	800ff9c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ff8a:	4b1b      	ldr	r3, [pc, #108]	@ (800fff8 <HAL_RCC_ClockConfig+0x1f0>)
 800ff8c:	689b      	ldr	r3, [r3, #8]
 800ff8e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	68db      	ldr	r3, [r3, #12]
 800ff96:	4918      	ldr	r1, [pc, #96]	@ (800fff8 <HAL_RCC_ClockConfig+0x1f0>)
 800ff98:	4313      	orrs	r3, r2
 800ff9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	f003 0308 	and.w	r3, r3, #8
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d009      	beq.n	800ffbc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ffa8:	4b13      	ldr	r3, [pc, #76]	@ (800fff8 <HAL_RCC_ClockConfig+0x1f0>)
 800ffaa:	689b      	ldr	r3, [r3, #8]
 800ffac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	691b      	ldr	r3, [r3, #16]
 800ffb4:	00db      	lsls	r3, r3, #3
 800ffb6:	4910      	ldr	r1, [pc, #64]	@ (800fff8 <HAL_RCC_ClockConfig+0x1f0>)
 800ffb8:	4313      	orrs	r3, r2
 800ffba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ffbc:	f000 f824 	bl	8010008 <HAL_RCC_GetSysClockFreq>
 800ffc0:	4602      	mov	r2, r0
 800ffc2:	4b0d      	ldr	r3, [pc, #52]	@ (800fff8 <HAL_RCC_ClockConfig+0x1f0>)
 800ffc4:	689b      	ldr	r3, [r3, #8]
 800ffc6:	091b      	lsrs	r3, r3, #4
 800ffc8:	f003 030f 	and.w	r3, r3, #15
 800ffcc:	490b      	ldr	r1, [pc, #44]	@ (800fffc <HAL_RCC_ClockConfig+0x1f4>)
 800ffce:	5ccb      	ldrb	r3, [r1, r3]
 800ffd0:	f003 031f 	and.w	r3, r3, #31
 800ffd4:	fa22 f303 	lsr.w	r3, r2, r3
 800ffd8:	4a09      	ldr	r2, [pc, #36]	@ (8010000 <HAL_RCC_ClockConfig+0x1f8>)
 800ffda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800ffdc:	4b09      	ldr	r3, [pc, #36]	@ (8010004 <HAL_RCC_ClockConfig+0x1fc>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7fa fe41 	bl	800ac68 <HAL_InitTick>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	72fb      	strb	r3, [r7, #11]

  return status;
 800ffea:	7afb      	ldrb	r3, [r7, #11]
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	3710      	adds	r7, #16
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}
 800fff4:	40022000 	.word	0x40022000
 800fff8:	40021000 	.word	0x40021000
 800fffc:	08017588 	.word	0x08017588
 8010000:	20000168 	.word	0x20000168
 8010004:	20000174 	.word	0x20000174

08010008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010008:	b480      	push	{r7}
 801000a:	b089      	sub	sp, #36	@ 0x24
 801000c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 801000e:	2300      	movs	r3, #0
 8010010:	61fb      	str	r3, [r7, #28]
 8010012:	2300      	movs	r3, #0
 8010014:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010016:	4b3e      	ldr	r3, [pc, #248]	@ (8010110 <HAL_RCC_GetSysClockFreq+0x108>)
 8010018:	689b      	ldr	r3, [r3, #8]
 801001a:	f003 030c 	and.w	r3, r3, #12
 801001e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010020:	4b3b      	ldr	r3, [pc, #236]	@ (8010110 <HAL_RCC_GetSysClockFreq+0x108>)
 8010022:	68db      	ldr	r3, [r3, #12]
 8010024:	f003 0303 	and.w	r3, r3, #3
 8010028:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801002a:	693b      	ldr	r3, [r7, #16]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d005      	beq.n	801003c <HAL_RCC_GetSysClockFreq+0x34>
 8010030:	693b      	ldr	r3, [r7, #16]
 8010032:	2b0c      	cmp	r3, #12
 8010034:	d121      	bne.n	801007a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	2b01      	cmp	r3, #1
 801003a:	d11e      	bne.n	801007a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801003c:	4b34      	ldr	r3, [pc, #208]	@ (8010110 <HAL_RCC_GetSysClockFreq+0x108>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	f003 0308 	and.w	r3, r3, #8
 8010044:	2b00      	cmp	r3, #0
 8010046:	d107      	bne.n	8010058 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8010048:	4b31      	ldr	r3, [pc, #196]	@ (8010110 <HAL_RCC_GetSysClockFreq+0x108>)
 801004a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801004e:	0a1b      	lsrs	r3, r3, #8
 8010050:	f003 030f 	and.w	r3, r3, #15
 8010054:	61fb      	str	r3, [r7, #28]
 8010056:	e005      	b.n	8010064 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8010058:	4b2d      	ldr	r3, [pc, #180]	@ (8010110 <HAL_RCC_GetSysClockFreq+0x108>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	091b      	lsrs	r3, r3, #4
 801005e:	f003 030f 	and.w	r3, r3, #15
 8010062:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8010064:	4a2b      	ldr	r2, [pc, #172]	@ (8010114 <HAL_RCC_GetSysClockFreq+0x10c>)
 8010066:	69fb      	ldr	r3, [r7, #28]
 8010068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801006c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d10d      	bne.n	8010090 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8010074:	69fb      	ldr	r3, [r7, #28]
 8010076:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8010078:	e00a      	b.n	8010090 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 801007a:	693b      	ldr	r3, [r7, #16]
 801007c:	2b04      	cmp	r3, #4
 801007e:	d102      	bne.n	8010086 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8010080:	4b25      	ldr	r3, [pc, #148]	@ (8010118 <HAL_RCC_GetSysClockFreq+0x110>)
 8010082:	61bb      	str	r3, [r7, #24]
 8010084:	e004      	b.n	8010090 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8010086:	693b      	ldr	r3, [r7, #16]
 8010088:	2b08      	cmp	r3, #8
 801008a:	d101      	bne.n	8010090 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801008c:	4b23      	ldr	r3, [pc, #140]	@ (801011c <HAL_RCC_GetSysClockFreq+0x114>)
 801008e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8010090:	693b      	ldr	r3, [r7, #16]
 8010092:	2b0c      	cmp	r3, #12
 8010094:	d134      	bne.n	8010100 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8010096:	4b1e      	ldr	r3, [pc, #120]	@ (8010110 <HAL_RCC_GetSysClockFreq+0x108>)
 8010098:	68db      	ldr	r3, [r3, #12]
 801009a:	f003 0303 	and.w	r3, r3, #3
 801009e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80100a0:	68bb      	ldr	r3, [r7, #8]
 80100a2:	2b02      	cmp	r3, #2
 80100a4:	d003      	beq.n	80100ae <HAL_RCC_GetSysClockFreq+0xa6>
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	2b03      	cmp	r3, #3
 80100aa:	d003      	beq.n	80100b4 <HAL_RCC_GetSysClockFreq+0xac>
 80100ac:	e005      	b.n	80100ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80100ae:	4b1a      	ldr	r3, [pc, #104]	@ (8010118 <HAL_RCC_GetSysClockFreq+0x110>)
 80100b0:	617b      	str	r3, [r7, #20]
      break;
 80100b2:	e005      	b.n	80100c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80100b4:	4b19      	ldr	r3, [pc, #100]	@ (801011c <HAL_RCC_GetSysClockFreq+0x114>)
 80100b6:	617b      	str	r3, [r7, #20]
      break;
 80100b8:	e002      	b.n	80100c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80100ba:	69fb      	ldr	r3, [r7, #28]
 80100bc:	617b      	str	r3, [r7, #20]
      break;
 80100be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80100c0:	4b13      	ldr	r3, [pc, #76]	@ (8010110 <HAL_RCC_GetSysClockFreq+0x108>)
 80100c2:	68db      	ldr	r3, [r3, #12]
 80100c4:	091b      	lsrs	r3, r3, #4
 80100c6:	f003 0307 	and.w	r3, r3, #7
 80100ca:	3301      	adds	r3, #1
 80100cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80100ce:	4b10      	ldr	r3, [pc, #64]	@ (8010110 <HAL_RCC_GetSysClockFreq+0x108>)
 80100d0:	68db      	ldr	r3, [r3, #12]
 80100d2:	0a1b      	lsrs	r3, r3, #8
 80100d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80100d8:	697a      	ldr	r2, [r7, #20]
 80100da:	fb03 f202 	mul.w	r2, r3, r2
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80100e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80100e6:	4b0a      	ldr	r3, [pc, #40]	@ (8010110 <HAL_RCC_GetSysClockFreq+0x108>)
 80100e8:	68db      	ldr	r3, [r3, #12]
 80100ea:	0e5b      	lsrs	r3, r3, #25
 80100ec:	f003 0303 	and.w	r3, r3, #3
 80100f0:	3301      	adds	r3, #1
 80100f2:	005b      	lsls	r3, r3, #1
 80100f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80100f6:	697a      	ldr	r2, [r7, #20]
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80100fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8010100:	69bb      	ldr	r3, [r7, #24]
}
 8010102:	4618      	mov	r0, r3
 8010104:	3724      	adds	r7, #36	@ 0x24
 8010106:	46bd      	mov	sp, r7
 8010108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010c:	4770      	bx	lr
 801010e:	bf00      	nop
 8010110:	40021000 	.word	0x40021000
 8010114:	080175a0 	.word	0x080175a0
 8010118:	00f42400 	.word	0x00f42400
 801011c:	007a1200 	.word	0x007a1200

08010120 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010120:	b480      	push	{r7}
 8010122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010124:	4b03      	ldr	r3, [pc, #12]	@ (8010134 <HAL_RCC_GetHCLKFreq+0x14>)
 8010126:	681b      	ldr	r3, [r3, #0]
}
 8010128:	4618      	mov	r0, r3
 801012a:	46bd      	mov	sp, r7
 801012c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010130:	4770      	bx	lr
 8010132:	bf00      	nop
 8010134:	20000168 	.word	0x20000168

08010138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801013c:	f7ff fff0 	bl	8010120 <HAL_RCC_GetHCLKFreq>
 8010140:	4602      	mov	r2, r0
 8010142:	4b06      	ldr	r3, [pc, #24]	@ (801015c <HAL_RCC_GetPCLK1Freq+0x24>)
 8010144:	689b      	ldr	r3, [r3, #8]
 8010146:	0a1b      	lsrs	r3, r3, #8
 8010148:	f003 0307 	and.w	r3, r3, #7
 801014c:	4904      	ldr	r1, [pc, #16]	@ (8010160 <HAL_RCC_GetPCLK1Freq+0x28>)
 801014e:	5ccb      	ldrb	r3, [r1, r3]
 8010150:	f003 031f 	and.w	r3, r3, #31
 8010154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010158:	4618      	mov	r0, r3
 801015a:	bd80      	pop	{r7, pc}
 801015c:	40021000 	.word	0x40021000
 8010160:	08017598 	.word	0x08017598

08010164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8010168:	f7ff ffda 	bl	8010120 <HAL_RCC_GetHCLKFreq>
 801016c:	4602      	mov	r2, r0
 801016e:	4b06      	ldr	r3, [pc, #24]	@ (8010188 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010170:	689b      	ldr	r3, [r3, #8]
 8010172:	0adb      	lsrs	r3, r3, #11
 8010174:	f003 0307 	and.w	r3, r3, #7
 8010178:	4904      	ldr	r1, [pc, #16]	@ (801018c <HAL_RCC_GetPCLK2Freq+0x28>)
 801017a:	5ccb      	ldrb	r3, [r1, r3]
 801017c:	f003 031f 	and.w	r3, r3, #31
 8010180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010184:	4618      	mov	r0, r3
 8010186:	bd80      	pop	{r7, pc}
 8010188:	40021000 	.word	0x40021000
 801018c:	08017598 	.word	0x08017598

08010190 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b086      	sub	sp, #24
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8010198:	2300      	movs	r3, #0
 801019a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 801019c:	4b2a      	ldr	r3, [pc, #168]	@ (8010248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801019e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80101a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d003      	beq.n	80101b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80101a8:	f7fe fd8c 	bl	800ecc4 <HAL_PWREx_GetVoltageRange>
 80101ac:	6178      	str	r0, [r7, #20]
 80101ae:	e014      	b.n	80101da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80101b0:	4b25      	ldr	r3, [pc, #148]	@ (8010248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80101b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80101b4:	4a24      	ldr	r2, [pc, #144]	@ (8010248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80101b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80101ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80101bc:	4b22      	ldr	r3, [pc, #136]	@ (8010248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80101be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80101c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80101c4:	60fb      	str	r3, [r7, #12]
 80101c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80101c8:	f7fe fd7c 	bl	800ecc4 <HAL_PWREx_GetVoltageRange>
 80101cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80101ce:	4b1e      	ldr	r3, [pc, #120]	@ (8010248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80101d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80101d2:	4a1d      	ldr	r2, [pc, #116]	@ (8010248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80101d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80101d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80101da:	697b      	ldr	r3, [r7, #20]
 80101dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80101e0:	d10b      	bne.n	80101fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	2b80      	cmp	r3, #128	@ 0x80
 80101e6:	d919      	bls.n	801021c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2ba0      	cmp	r3, #160	@ 0xa0
 80101ec:	d902      	bls.n	80101f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80101ee:	2302      	movs	r3, #2
 80101f0:	613b      	str	r3, [r7, #16]
 80101f2:	e013      	b.n	801021c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80101f4:	2301      	movs	r3, #1
 80101f6:	613b      	str	r3, [r7, #16]
 80101f8:	e010      	b.n	801021c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	2b80      	cmp	r3, #128	@ 0x80
 80101fe:	d902      	bls.n	8010206 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8010200:	2303      	movs	r3, #3
 8010202:	613b      	str	r3, [r7, #16]
 8010204:	e00a      	b.n	801021c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2b80      	cmp	r3, #128	@ 0x80
 801020a:	d102      	bne.n	8010212 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801020c:	2302      	movs	r3, #2
 801020e:	613b      	str	r3, [r7, #16]
 8010210:	e004      	b.n	801021c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	2b70      	cmp	r3, #112	@ 0x70
 8010216:	d101      	bne.n	801021c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8010218:	2301      	movs	r3, #1
 801021a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801021c:	4b0b      	ldr	r3, [pc, #44]	@ (801024c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f023 0207 	bic.w	r2, r3, #7
 8010224:	4909      	ldr	r1, [pc, #36]	@ (801024c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010226:	693b      	ldr	r3, [r7, #16]
 8010228:	4313      	orrs	r3, r2
 801022a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 801022c:	4b07      	ldr	r3, [pc, #28]	@ (801024c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	f003 0307 	and.w	r3, r3, #7
 8010234:	693a      	ldr	r2, [r7, #16]
 8010236:	429a      	cmp	r2, r3
 8010238:	d001      	beq.n	801023e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 801023a:	2301      	movs	r3, #1
 801023c:	e000      	b.n	8010240 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 801023e:	2300      	movs	r3, #0
}
 8010240:	4618      	mov	r0, r3
 8010242:	3718      	adds	r7, #24
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}
 8010248:	40021000 	.word	0x40021000
 801024c:	40022000 	.word	0x40022000

08010250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b086      	sub	sp, #24
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8010258:	2300      	movs	r3, #0
 801025a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801025c:	2300      	movs	r3, #0
 801025e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010268:	2b00      	cmp	r3, #0
 801026a:	d041      	beq.n	80102f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010270:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8010274:	d02a      	beq.n	80102cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8010276:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 801027a:	d824      	bhi.n	80102c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 801027c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010280:	d008      	beq.n	8010294 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8010282:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010286:	d81e      	bhi.n	80102c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010288:	2b00      	cmp	r3, #0
 801028a:	d00a      	beq.n	80102a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 801028c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010290:	d010      	beq.n	80102b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8010292:	e018      	b.n	80102c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8010294:	4b86      	ldr	r3, [pc, #536]	@ (80104b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010296:	68db      	ldr	r3, [r3, #12]
 8010298:	4a85      	ldr	r2, [pc, #532]	@ (80104b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801029a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801029e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80102a0:	e015      	b.n	80102ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	3304      	adds	r3, #4
 80102a6:	2100      	movs	r1, #0
 80102a8:	4618      	mov	r0, r3
 80102aa:	f000 fabb 	bl	8010824 <RCCEx_PLLSAI1_Config>
 80102ae:	4603      	mov	r3, r0
 80102b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80102b2:	e00c      	b.n	80102ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	3320      	adds	r3, #32
 80102b8:	2100      	movs	r1, #0
 80102ba:	4618      	mov	r0, r3
 80102bc:	f000 fba6 	bl	8010a0c <RCCEx_PLLSAI2_Config>
 80102c0:	4603      	mov	r3, r0
 80102c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80102c4:	e003      	b.n	80102ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80102c6:	2301      	movs	r3, #1
 80102c8:	74fb      	strb	r3, [r7, #19]
      break;
 80102ca:	e000      	b.n	80102ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80102cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80102ce:	7cfb      	ldrb	r3, [r7, #19]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d10b      	bne.n	80102ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80102d4:	4b76      	ldr	r3, [pc, #472]	@ (80104b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80102d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80102da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80102e2:	4973      	ldr	r1, [pc, #460]	@ (80104b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80102e4:	4313      	orrs	r3, r2
 80102e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80102ea:	e001      	b.n	80102f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80102ec:	7cfb      	ldrb	r3, [r7, #19]
 80102ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d041      	beq.n	8010380 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010300:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010304:	d02a      	beq.n	801035c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8010306:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801030a:	d824      	bhi.n	8010356 <HAL_RCCEx_PeriphCLKConfig+0x106>
 801030c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010310:	d008      	beq.n	8010324 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8010312:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010316:	d81e      	bhi.n	8010356 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8010318:	2b00      	cmp	r3, #0
 801031a:	d00a      	beq.n	8010332 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 801031c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010320:	d010      	beq.n	8010344 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8010322:	e018      	b.n	8010356 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8010324:	4b62      	ldr	r3, [pc, #392]	@ (80104b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010326:	68db      	ldr	r3, [r3, #12]
 8010328:	4a61      	ldr	r2, [pc, #388]	@ (80104b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801032a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801032e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010330:	e015      	b.n	801035e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	3304      	adds	r3, #4
 8010336:	2100      	movs	r1, #0
 8010338:	4618      	mov	r0, r3
 801033a:	f000 fa73 	bl	8010824 <RCCEx_PLLSAI1_Config>
 801033e:	4603      	mov	r3, r0
 8010340:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010342:	e00c      	b.n	801035e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	3320      	adds	r3, #32
 8010348:	2100      	movs	r1, #0
 801034a:	4618      	mov	r0, r3
 801034c:	f000 fb5e 	bl	8010a0c <RCCEx_PLLSAI2_Config>
 8010350:	4603      	mov	r3, r0
 8010352:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010354:	e003      	b.n	801035e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010356:	2301      	movs	r3, #1
 8010358:	74fb      	strb	r3, [r7, #19]
      break;
 801035a:	e000      	b.n	801035e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 801035c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801035e:	7cfb      	ldrb	r3, [r7, #19]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d10b      	bne.n	801037c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8010364:	4b52      	ldr	r3, [pc, #328]	@ (80104b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801036a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010372:	494f      	ldr	r1, [pc, #316]	@ (80104b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010374:	4313      	orrs	r3, r2
 8010376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 801037a:	e001      	b.n	8010380 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801037c:	7cfb      	ldrb	r3, [r7, #19]
 801037e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010388:	2b00      	cmp	r3, #0
 801038a:	f000 80a0 	beq.w	80104ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801038e:	2300      	movs	r3, #0
 8010390:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8010392:	4b47      	ldr	r3, [pc, #284]	@ (80104b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801039a:	2b00      	cmp	r3, #0
 801039c:	d101      	bne.n	80103a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 801039e:	2301      	movs	r3, #1
 80103a0:	e000      	b.n	80103a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80103a2:	2300      	movs	r3, #0
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d00d      	beq.n	80103c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80103a8:	4b41      	ldr	r3, [pc, #260]	@ (80104b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80103aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80103ac:	4a40      	ldr	r2, [pc, #256]	@ (80104b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80103ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80103b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80103b4:	4b3e      	ldr	r3, [pc, #248]	@ (80104b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80103b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80103b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80103bc:	60bb      	str	r3, [r7, #8]
 80103be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80103c0:	2301      	movs	r3, #1
 80103c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80103c4:	4b3b      	ldr	r3, [pc, #236]	@ (80104b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	4a3a      	ldr	r2, [pc, #232]	@ (80104b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80103ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80103ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80103d0:	f7fa fc9a 	bl	800ad08 <HAL_GetTick>
 80103d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80103d6:	e009      	b.n	80103ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80103d8:	f7fa fc96 	bl	800ad08 <HAL_GetTick>
 80103dc:	4602      	mov	r2, r0
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	1ad3      	subs	r3, r2, r3
 80103e2:	2b02      	cmp	r3, #2
 80103e4:	d902      	bls.n	80103ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80103e6:	2303      	movs	r3, #3
 80103e8:	74fb      	strb	r3, [r7, #19]
        break;
 80103ea:	e005      	b.n	80103f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80103ec:	4b31      	ldr	r3, [pc, #196]	@ (80104b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d0ef      	beq.n	80103d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80103f8:	7cfb      	ldrb	r3, [r7, #19]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d15c      	bne.n	80104b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80103fe:	4b2c      	ldr	r3, [pc, #176]	@ (80104b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010404:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010408:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d01f      	beq.n	8010450 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010416:	697a      	ldr	r2, [r7, #20]
 8010418:	429a      	cmp	r2, r3
 801041a:	d019      	beq.n	8010450 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801041c:	4b24      	ldr	r3, [pc, #144]	@ (80104b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801041e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010422:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010426:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8010428:	4b21      	ldr	r3, [pc, #132]	@ (80104b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801042a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801042e:	4a20      	ldr	r2, [pc, #128]	@ (80104b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010434:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010438:	4b1d      	ldr	r3, [pc, #116]	@ (80104b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801043a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801043e:	4a1c      	ldr	r2, [pc, #112]	@ (80104b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010440:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8010448:	4a19      	ldr	r2, [pc, #100]	@ (80104b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8010450:	697b      	ldr	r3, [r7, #20]
 8010452:	f003 0301 	and.w	r3, r3, #1
 8010456:	2b00      	cmp	r3, #0
 8010458:	d016      	beq.n	8010488 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801045a:	f7fa fc55 	bl	800ad08 <HAL_GetTick>
 801045e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010460:	e00b      	b.n	801047a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010462:	f7fa fc51 	bl	800ad08 <HAL_GetTick>
 8010466:	4602      	mov	r2, r0
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	1ad3      	subs	r3, r2, r3
 801046c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010470:	4293      	cmp	r3, r2
 8010472:	d902      	bls.n	801047a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8010474:	2303      	movs	r3, #3
 8010476:	74fb      	strb	r3, [r7, #19]
            break;
 8010478:	e006      	b.n	8010488 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801047a:	4b0d      	ldr	r3, [pc, #52]	@ (80104b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801047c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010480:	f003 0302 	and.w	r3, r3, #2
 8010484:	2b00      	cmp	r3, #0
 8010486:	d0ec      	beq.n	8010462 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8010488:	7cfb      	ldrb	r3, [r7, #19]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d10c      	bne.n	80104a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801048e:	4b08      	ldr	r3, [pc, #32]	@ (80104b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010494:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801049e:	4904      	ldr	r1, [pc, #16]	@ (80104b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80104a0:	4313      	orrs	r3, r2
 80104a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80104a6:	e009      	b.n	80104bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80104a8:	7cfb      	ldrb	r3, [r7, #19]
 80104aa:	74bb      	strb	r3, [r7, #18]
 80104ac:	e006      	b.n	80104bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80104ae:	bf00      	nop
 80104b0:	40021000 	.word	0x40021000
 80104b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80104b8:	7cfb      	ldrb	r3, [r7, #19]
 80104ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80104bc:	7c7b      	ldrb	r3, [r7, #17]
 80104be:	2b01      	cmp	r3, #1
 80104c0:	d105      	bne.n	80104ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80104c2:	4b9e      	ldr	r3, [pc, #632]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80104c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80104c6:	4a9d      	ldr	r2, [pc, #628]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80104c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80104cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	f003 0301 	and.w	r3, r3, #1
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d00a      	beq.n	80104f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80104da:	4b98      	ldr	r3, [pc, #608]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80104dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80104e0:	f023 0203 	bic.w	r2, r3, #3
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104e8:	4994      	ldr	r1, [pc, #592]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80104ea:	4313      	orrs	r3, r2
 80104ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	f003 0302 	and.w	r3, r3, #2
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d00a      	beq.n	8010512 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80104fc:	4b8f      	ldr	r3, [pc, #572]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80104fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010502:	f023 020c 	bic.w	r2, r3, #12
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801050a:	498c      	ldr	r1, [pc, #560]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801050c:	4313      	orrs	r3, r2
 801050e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	f003 0304 	and.w	r3, r3, #4
 801051a:	2b00      	cmp	r3, #0
 801051c:	d00a      	beq.n	8010534 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801051e:	4b87      	ldr	r3, [pc, #540]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010524:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801052c:	4983      	ldr	r1, [pc, #524]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801052e:	4313      	orrs	r3, r2
 8010530:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	f003 0308 	and.w	r3, r3, #8
 801053c:	2b00      	cmp	r3, #0
 801053e:	d00a      	beq.n	8010556 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8010540:	4b7e      	ldr	r3, [pc, #504]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010546:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801054e:	497b      	ldr	r1, [pc, #492]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010550:	4313      	orrs	r3, r2
 8010552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	f003 0310 	and.w	r3, r3, #16
 801055e:	2b00      	cmp	r3, #0
 8010560:	d00a      	beq.n	8010578 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8010562:	4b76      	ldr	r3, [pc, #472]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010568:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010570:	4972      	ldr	r1, [pc, #456]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010572:	4313      	orrs	r3, r2
 8010574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	f003 0320 	and.w	r3, r3, #32
 8010580:	2b00      	cmp	r3, #0
 8010582:	d00a      	beq.n	801059a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010584:	4b6d      	ldr	r3, [pc, #436]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801058a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010592:	496a      	ldr	r1, [pc, #424]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010594:	4313      	orrs	r3, r2
 8010596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d00a      	beq.n	80105bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80105a6:	4b65      	ldr	r3, [pc, #404]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80105a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80105ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80105b4:	4961      	ldr	r1, [pc, #388]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80105b6:	4313      	orrs	r3, r2
 80105b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d00a      	beq.n	80105de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80105c8:	4b5c      	ldr	r3, [pc, #368]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80105ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80105ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80105d6:	4959      	ldr	r1, [pc, #356]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80105d8:	4313      	orrs	r3, r2
 80105da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d00a      	beq.n	8010600 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80105ea:	4b54      	ldr	r3, [pc, #336]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80105ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80105f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80105f8:	4950      	ldr	r1, [pc, #320]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80105fa:	4313      	orrs	r3, r2
 80105fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010608:	2b00      	cmp	r3, #0
 801060a:	d00a      	beq.n	8010622 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801060c:	4b4b      	ldr	r3, [pc, #300]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801060e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010612:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801061a:	4948      	ldr	r1, [pc, #288]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801061c:	4313      	orrs	r3, r2
 801061e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801062a:	2b00      	cmp	r3, #0
 801062c:	d00a      	beq.n	8010644 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801062e:	4b43      	ldr	r3, [pc, #268]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010634:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801063c:	493f      	ldr	r1, [pc, #252]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801063e:	4313      	orrs	r3, r2
 8010640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801064c:	2b00      	cmp	r3, #0
 801064e:	d028      	beq.n	80106a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010650:	4b3a      	ldr	r3, [pc, #232]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010656:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801065e:	4937      	ldr	r1, [pc, #220]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010660:	4313      	orrs	r3, r2
 8010662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801066a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801066e:	d106      	bne.n	801067e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010670:	4b32      	ldr	r3, [pc, #200]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010672:	68db      	ldr	r3, [r3, #12]
 8010674:	4a31      	ldr	r2, [pc, #196]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010676:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801067a:	60d3      	str	r3, [r2, #12]
 801067c:	e011      	b.n	80106a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010682:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010686:	d10c      	bne.n	80106a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	3304      	adds	r3, #4
 801068c:	2101      	movs	r1, #1
 801068e:	4618      	mov	r0, r3
 8010690:	f000 f8c8 	bl	8010824 <RCCEx_PLLSAI1_Config>
 8010694:	4603      	mov	r3, r0
 8010696:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8010698:	7cfb      	ldrb	r3, [r7, #19]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d001      	beq.n	80106a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 801069e:	7cfb      	ldrb	r3, [r7, #19]
 80106a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d028      	beq.n	8010700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80106ae:	4b23      	ldr	r3, [pc, #140]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80106b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80106b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106bc:	491f      	ldr	r1, [pc, #124]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80106be:	4313      	orrs	r3, r2
 80106c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80106cc:	d106      	bne.n	80106dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80106ce:	4b1b      	ldr	r3, [pc, #108]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80106d0:	68db      	ldr	r3, [r3, #12]
 80106d2:	4a1a      	ldr	r2, [pc, #104]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80106d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80106d8:	60d3      	str	r3, [r2, #12]
 80106da:	e011      	b.n	8010700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80106e4:	d10c      	bne.n	8010700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	3304      	adds	r3, #4
 80106ea:	2101      	movs	r1, #1
 80106ec:	4618      	mov	r0, r3
 80106ee:	f000 f899 	bl	8010824 <RCCEx_PLLSAI1_Config>
 80106f2:	4603      	mov	r3, r0
 80106f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80106f6:	7cfb      	ldrb	r3, [r7, #19]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d001      	beq.n	8010700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80106fc:	7cfb      	ldrb	r3, [r7, #19]
 80106fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010708:	2b00      	cmp	r3, #0
 801070a:	d02b      	beq.n	8010764 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801070c:	4b0b      	ldr	r3, [pc, #44]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801070e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010712:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801071a:	4908      	ldr	r1, [pc, #32]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801071c:	4313      	orrs	r3, r2
 801071e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010726:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801072a:	d109      	bne.n	8010740 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801072c:	4b03      	ldr	r3, [pc, #12]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801072e:	68db      	ldr	r3, [r3, #12]
 8010730:	4a02      	ldr	r2, [pc, #8]	@ (801073c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010732:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010736:	60d3      	str	r3, [r2, #12]
 8010738:	e014      	b.n	8010764 <HAL_RCCEx_PeriphCLKConfig+0x514>
 801073a:	bf00      	nop
 801073c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010744:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010748:	d10c      	bne.n	8010764 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	3304      	adds	r3, #4
 801074e:	2101      	movs	r1, #1
 8010750:	4618      	mov	r0, r3
 8010752:	f000 f867 	bl	8010824 <RCCEx_PLLSAI1_Config>
 8010756:	4603      	mov	r3, r0
 8010758:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801075a:	7cfb      	ldrb	r3, [r7, #19]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d001      	beq.n	8010764 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8010760:	7cfb      	ldrb	r3, [r7, #19]
 8010762:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801076c:	2b00      	cmp	r3, #0
 801076e:	d02f      	beq.n	80107d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010770:	4b2b      	ldr	r3, [pc, #172]	@ (8010820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010776:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801077e:	4928      	ldr	r1, [pc, #160]	@ (8010820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010780:	4313      	orrs	r3, r2
 8010782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801078a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801078e:	d10d      	bne.n	80107ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	3304      	adds	r3, #4
 8010794:	2102      	movs	r1, #2
 8010796:	4618      	mov	r0, r3
 8010798:	f000 f844 	bl	8010824 <RCCEx_PLLSAI1_Config>
 801079c:	4603      	mov	r3, r0
 801079e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80107a0:	7cfb      	ldrb	r3, [r7, #19]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d014      	beq.n	80107d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80107a6:	7cfb      	ldrb	r3, [r7, #19]
 80107a8:	74bb      	strb	r3, [r7, #18]
 80107aa:	e011      	b.n	80107d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80107b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80107b4:	d10c      	bne.n	80107d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	3320      	adds	r3, #32
 80107ba:	2102      	movs	r1, #2
 80107bc:	4618      	mov	r0, r3
 80107be:	f000 f925 	bl	8010a0c <RCCEx_PLLSAI2_Config>
 80107c2:	4603      	mov	r3, r0
 80107c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80107c6:	7cfb      	ldrb	r3, [r7, #19]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d001      	beq.n	80107d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80107cc:	7cfb      	ldrb	r3, [r7, #19]
 80107ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d00a      	beq.n	80107f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80107dc:	4b10      	ldr	r3, [pc, #64]	@ (8010820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80107de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80107e2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80107ea:	490d      	ldr	r1, [pc, #52]	@ (8010820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80107ec:	4313      	orrs	r3, r2
 80107ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d00b      	beq.n	8010816 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80107fe:	4b08      	ldr	r3, [pc, #32]	@ (8010820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010804:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801080e:	4904      	ldr	r1, [pc, #16]	@ (8010820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010810:	4313      	orrs	r3, r2
 8010812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8010816:	7cbb      	ldrb	r3, [r7, #18]
}
 8010818:	4618      	mov	r0, r3
 801081a:	3718      	adds	r7, #24
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}
 8010820:	40021000 	.word	0x40021000

08010824 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b084      	sub	sp, #16
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801082e:	2300      	movs	r3, #0
 8010830:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8010832:	4b75      	ldr	r3, [pc, #468]	@ (8010a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010834:	68db      	ldr	r3, [r3, #12]
 8010836:	f003 0303 	and.w	r3, r3, #3
 801083a:	2b00      	cmp	r3, #0
 801083c:	d018      	beq.n	8010870 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 801083e:	4b72      	ldr	r3, [pc, #456]	@ (8010a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010840:	68db      	ldr	r3, [r3, #12]
 8010842:	f003 0203 	and.w	r2, r3, #3
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	429a      	cmp	r2, r3
 801084c:	d10d      	bne.n	801086a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
       ||
 8010852:	2b00      	cmp	r3, #0
 8010854:	d009      	beq.n	801086a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8010856:	4b6c      	ldr	r3, [pc, #432]	@ (8010a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010858:	68db      	ldr	r3, [r3, #12]
 801085a:	091b      	lsrs	r3, r3, #4
 801085c:	f003 0307 	and.w	r3, r3, #7
 8010860:	1c5a      	adds	r2, r3, #1
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	685b      	ldr	r3, [r3, #4]
       ||
 8010866:	429a      	cmp	r2, r3
 8010868:	d047      	beq.n	80108fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 801086a:	2301      	movs	r3, #1
 801086c:	73fb      	strb	r3, [r7, #15]
 801086e:	e044      	b.n	80108fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	2b03      	cmp	r3, #3
 8010876:	d018      	beq.n	80108aa <RCCEx_PLLSAI1_Config+0x86>
 8010878:	2b03      	cmp	r3, #3
 801087a:	d825      	bhi.n	80108c8 <RCCEx_PLLSAI1_Config+0xa4>
 801087c:	2b01      	cmp	r3, #1
 801087e:	d002      	beq.n	8010886 <RCCEx_PLLSAI1_Config+0x62>
 8010880:	2b02      	cmp	r3, #2
 8010882:	d009      	beq.n	8010898 <RCCEx_PLLSAI1_Config+0x74>
 8010884:	e020      	b.n	80108c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8010886:	4b60      	ldr	r3, [pc, #384]	@ (8010a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	f003 0302 	and.w	r3, r3, #2
 801088e:	2b00      	cmp	r3, #0
 8010890:	d11d      	bne.n	80108ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8010892:	2301      	movs	r3, #1
 8010894:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010896:	e01a      	b.n	80108ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8010898:	4b5b      	ldr	r3, [pc, #364]	@ (8010a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d116      	bne.n	80108d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80108a4:	2301      	movs	r3, #1
 80108a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80108a8:	e013      	b.n	80108d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80108aa:	4b57      	ldr	r3, [pc, #348]	@ (8010a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d10f      	bne.n	80108d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80108b6:	4b54      	ldr	r3, [pc, #336]	@ (8010a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d109      	bne.n	80108d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80108c2:	2301      	movs	r3, #1
 80108c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80108c6:	e006      	b.n	80108d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80108c8:	2301      	movs	r3, #1
 80108ca:	73fb      	strb	r3, [r7, #15]
      break;
 80108cc:	e004      	b.n	80108d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80108ce:	bf00      	nop
 80108d0:	e002      	b.n	80108d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80108d2:	bf00      	nop
 80108d4:	e000      	b.n	80108d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80108d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80108d8:	7bfb      	ldrb	r3, [r7, #15]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d10d      	bne.n	80108fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80108de:	4b4a      	ldr	r3, [pc, #296]	@ (8010a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80108e0:	68db      	ldr	r3, [r3, #12]
 80108e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	6819      	ldr	r1, [r3, #0]
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	685b      	ldr	r3, [r3, #4]
 80108ee:	3b01      	subs	r3, #1
 80108f0:	011b      	lsls	r3, r3, #4
 80108f2:	430b      	orrs	r3, r1
 80108f4:	4944      	ldr	r1, [pc, #272]	@ (8010a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80108f6:	4313      	orrs	r3, r2
 80108f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80108fa:	7bfb      	ldrb	r3, [r7, #15]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d17d      	bne.n	80109fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8010900:	4b41      	ldr	r3, [pc, #260]	@ (8010a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	4a40      	ldr	r2, [pc, #256]	@ (8010a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010906:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801090a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801090c:	f7fa f9fc 	bl	800ad08 <HAL_GetTick>
 8010910:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8010912:	e009      	b.n	8010928 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010914:	f7fa f9f8 	bl	800ad08 <HAL_GetTick>
 8010918:	4602      	mov	r2, r0
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	1ad3      	subs	r3, r2, r3
 801091e:	2b02      	cmp	r3, #2
 8010920:	d902      	bls.n	8010928 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8010922:	2303      	movs	r3, #3
 8010924:	73fb      	strb	r3, [r7, #15]
        break;
 8010926:	e005      	b.n	8010934 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8010928:	4b37      	ldr	r3, [pc, #220]	@ (8010a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010930:	2b00      	cmp	r3, #0
 8010932:	d1ef      	bne.n	8010914 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8010934:	7bfb      	ldrb	r3, [r7, #15]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d160      	bne.n	80109fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d111      	bne.n	8010964 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010940:	4b31      	ldr	r3, [pc, #196]	@ (8010a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010942:	691b      	ldr	r3, [r3, #16]
 8010944:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8010948:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801094c:	687a      	ldr	r2, [r7, #4]
 801094e:	6892      	ldr	r2, [r2, #8]
 8010950:	0211      	lsls	r1, r2, #8
 8010952:	687a      	ldr	r2, [r7, #4]
 8010954:	68d2      	ldr	r2, [r2, #12]
 8010956:	0912      	lsrs	r2, r2, #4
 8010958:	0452      	lsls	r2, r2, #17
 801095a:	430a      	orrs	r2, r1
 801095c:	492a      	ldr	r1, [pc, #168]	@ (8010a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 801095e:	4313      	orrs	r3, r2
 8010960:	610b      	str	r3, [r1, #16]
 8010962:	e027      	b.n	80109b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8010964:	683b      	ldr	r3, [r7, #0]
 8010966:	2b01      	cmp	r3, #1
 8010968:	d112      	bne.n	8010990 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801096a:	4b27      	ldr	r3, [pc, #156]	@ (8010a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 801096c:	691b      	ldr	r3, [r3, #16]
 801096e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8010972:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8010976:	687a      	ldr	r2, [r7, #4]
 8010978:	6892      	ldr	r2, [r2, #8]
 801097a:	0211      	lsls	r1, r2, #8
 801097c:	687a      	ldr	r2, [r7, #4]
 801097e:	6912      	ldr	r2, [r2, #16]
 8010980:	0852      	lsrs	r2, r2, #1
 8010982:	3a01      	subs	r2, #1
 8010984:	0552      	lsls	r2, r2, #21
 8010986:	430a      	orrs	r2, r1
 8010988:	491f      	ldr	r1, [pc, #124]	@ (8010a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 801098a:	4313      	orrs	r3, r2
 801098c:	610b      	str	r3, [r1, #16]
 801098e:	e011      	b.n	80109b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010990:	4b1d      	ldr	r3, [pc, #116]	@ (8010a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010992:	691b      	ldr	r3, [r3, #16]
 8010994:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8010998:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 801099c:	687a      	ldr	r2, [r7, #4]
 801099e:	6892      	ldr	r2, [r2, #8]
 80109a0:	0211      	lsls	r1, r2, #8
 80109a2:	687a      	ldr	r2, [r7, #4]
 80109a4:	6952      	ldr	r2, [r2, #20]
 80109a6:	0852      	lsrs	r2, r2, #1
 80109a8:	3a01      	subs	r2, #1
 80109aa:	0652      	lsls	r2, r2, #25
 80109ac:	430a      	orrs	r2, r1
 80109ae:	4916      	ldr	r1, [pc, #88]	@ (8010a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80109b0:	4313      	orrs	r3, r2
 80109b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80109b4:	4b14      	ldr	r3, [pc, #80]	@ (8010a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	4a13      	ldr	r2, [pc, #76]	@ (8010a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80109ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80109be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80109c0:	f7fa f9a2 	bl	800ad08 <HAL_GetTick>
 80109c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80109c6:	e009      	b.n	80109dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80109c8:	f7fa f99e 	bl	800ad08 <HAL_GetTick>
 80109cc:	4602      	mov	r2, r0
 80109ce:	68bb      	ldr	r3, [r7, #8]
 80109d0:	1ad3      	subs	r3, r2, r3
 80109d2:	2b02      	cmp	r3, #2
 80109d4:	d902      	bls.n	80109dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80109d6:	2303      	movs	r3, #3
 80109d8:	73fb      	strb	r3, [r7, #15]
          break;
 80109da:	e005      	b.n	80109e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80109dc:	4b0a      	ldr	r3, [pc, #40]	@ (8010a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d0ef      	beq.n	80109c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80109e8:	7bfb      	ldrb	r3, [r7, #15]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d106      	bne.n	80109fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80109ee:	4b06      	ldr	r3, [pc, #24]	@ (8010a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80109f0:	691a      	ldr	r2, [r3, #16]
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	699b      	ldr	r3, [r3, #24]
 80109f6:	4904      	ldr	r1, [pc, #16]	@ (8010a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80109f8:	4313      	orrs	r3, r2
 80109fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80109fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3710      	adds	r7, #16
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}
 8010a06:	bf00      	nop
 8010a08:	40021000 	.word	0x40021000

08010a0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b084      	sub	sp, #16
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
 8010a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010a16:	2300      	movs	r3, #0
 8010a18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8010a1a:	4b6a      	ldr	r3, [pc, #424]	@ (8010bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a1c:	68db      	ldr	r3, [r3, #12]
 8010a1e:	f003 0303 	and.w	r3, r3, #3
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d018      	beq.n	8010a58 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8010a26:	4b67      	ldr	r3, [pc, #412]	@ (8010bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a28:	68db      	ldr	r3, [r3, #12]
 8010a2a:	f003 0203 	and.w	r2, r3, #3
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	429a      	cmp	r2, r3
 8010a34:	d10d      	bne.n	8010a52 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
       ||
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d009      	beq.n	8010a52 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8010a3e:	4b61      	ldr	r3, [pc, #388]	@ (8010bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a40:	68db      	ldr	r3, [r3, #12]
 8010a42:	091b      	lsrs	r3, r3, #4
 8010a44:	f003 0307 	and.w	r3, r3, #7
 8010a48:	1c5a      	adds	r2, r3, #1
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	685b      	ldr	r3, [r3, #4]
       ||
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d047      	beq.n	8010ae2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8010a52:	2301      	movs	r3, #1
 8010a54:	73fb      	strb	r3, [r7, #15]
 8010a56:	e044      	b.n	8010ae2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	2b03      	cmp	r3, #3
 8010a5e:	d018      	beq.n	8010a92 <RCCEx_PLLSAI2_Config+0x86>
 8010a60:	2b03      	cmp	r3, #3
 8010a62:	d825      	bhi.n	8010ab0 <RCCEx_PLLSAI2_Config+0xa4>
 8010a64:	2b01      	cmp	r3, #1
 8010a66:	d002      	beq.n	8010a6e <RCCEx_PLLSAI2_Config+0x62>
 8010a68:	2b02      	cmp	r3, #2
 8010a6a:	d009      	beq.n	8010a80 <RCCEx_PLLSAI2_Config+0x74>
 8010a6c:	e020      	b.n	8010ab0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8010a6e:	4b55      	ldr	r3, [pc, #340]	@ (8010bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	f003 0302 	and.w	r3, r3, #2
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d11d      	bne.n	8010ab6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8010a7a:	2301      	movs	r3, #1
 8010a7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010a7e:	e01a      	b.n	8010ab6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8010a80:	4b50      	ldr	r3, [pc, #320]	@ (8010bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d116      	bne.n	8010aba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010a90:	e013      	b.n	8010aba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8010a92:	4b4c      	ldr	r3, [pc, #304]	@ (8010bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d10f      	bne.n	8010abe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8010a9e:	4b49      	ldr	r3, [pc, #292]	@ (8010bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d109      	bne.n	8010abe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8010aaa:	2301      	movs	r3, #1
 8010aac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010aae:	e006      	b.n	8010abe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8010ab4:	e004      	b.n	8010ac0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8010ab6:	bf00      	nop
 8010ab8:	e002      	b.n	8010ac0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8010aba:	bf00      	nop
 8010abc:	e000      	b.n	8010ac0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8010abe:	bf00      	nop
    }

    if(status == HAL_OK)
 8010ac0:	7bfb      	ldrb	r3, [r7, #15]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d10d      	bne.n	8010ae2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8010ac6:	4b3f      	ldr	r3, [pc, #252]	@ (8010bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010ac8:	68db      	ldr	r3, [r3, #12]
 8010aca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6819      	ldr	r1, [r3, #0]
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	685b      	ldr	r3, [r3, #4]
 8010ad6:	3b01      	subs	r3, #1
 8010ad8:	011b      	lsls	r3, r3, #4
 8010ada:	430b      	orrs	r3, r1
 8010adc:	4939      	ldr	r1, [pc, #228]	@ (8010bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010ade:	4313      	orrs	r3, r2
 8010ae0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8010ae2:	7bfb      	ldrb	r3, [r7, #15]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d167      	bne.n	8010bb8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8010ae8:	4b36      	ldr	r3, [pc, #216]	@ (8010bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	4a35      	ldr	r2, [pc, #212]	@ (8010bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010aee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010af2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010af4:	f7fa f908 	bl	800ad08 <HAL_GetTick>
 8010af8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8010afa:	e009      	b.n	8010b10 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8010afc:	f7fa f904 	bl	800ad08 <HAL_GetTick>
 8010b00:	4602      	mov	r2, r0
 8010b02:	68bb      	ldr	r3, [r7, #8]
 8010b04:	1ad3      	subs	r3, r2, r3
 8010b06:	2b02      	cmp	r3, #2
 8010b08:	d902      	bls.n	8010b10 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8010b0a:	2303      	movs	r3, #3
 8010b0c:	73fb      	strb	r3, [r7, #15]
        break;
 8010b0e:	e005      	b.n	8010b1c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8010b10:	4b2c      	ldr	r3, [pc, #176]	@ (8010bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d1ef      	bne.n	8010afc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8010b1c:	7bfb      	ldrb	r3, [r7, #15]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d14a      	bne.n	8010bb8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d111      	bne.n	8010b4c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8010b28:	4b26      	ldr	r3, [pc, #152]	@ (8010bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b2a:	695b      	ldr	r3, [r3, #20]
 8010b2c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8010b30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010b34:	687a      	ldr	r2, [r7, #4]
 8010b36:	6892      	ldr	r2, [r2, #8]
 8010b38:	0211      	lsls	r1, r2, #8
 8010b3a:	687a      	ldr	r2, [r7, #4]
 8010b3c:	68d2      	ldr	r2, [r2, #12]
 8010b3e:	0912      	lsrs	r2, r2, #4
 8010b40:	0452      	lsls	r2, r2, #17
 8010b42:	430a      	orrs	r2, r1
 8010b44:	491f      	ldr	r1, [pc, #124]	@ (8010bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b46:	4313      	orrs	r3, r2
 8010b48:	614b      	str	r3, [r1, #20]
 8010b4a:	e011      	b.n	8010b70 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8010b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8010bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b4e:	695b      	ldr	r3, [r3, #20]
 8010b50:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8010b54:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8010b58:	687a      	ldr	r2, [r7, #4]
 8010b5a:	6892      	ldr	r2, [r2, #8]
 8010b5c:	0211      	lsls	r1, r2, #8
 8010b5e:	687a      	ldr	r2, [r7, #4]
 8010b60:	6912      	ldr	r2, [r2, #16]
 8010b62:	0852      	lsrs	r2, r2, #1
 8010b64:	3a01      	subs	r2, #1
 8010b66:	0652      	lsls	r2, r2, #25
 8010b68:	430a      	orrs	r2, r1
 8010b6a:	4916      	ldr	r1, [pc, #88]	@ (8010bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b6c:	4313      	orrs	r3, r2
 8010b6e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8010b70:	4b14      	ldr	r3, [pc, #80]	@ (8010bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	4a13      	ldr	r2, [pc, #76]	@ (8010bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010b7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010b7c:	f7fa f8c4 	bl	800ad08 <HAL_GetTick>
 8010b80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8010b82:	e009      	b.n	8010b98 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8010b84:	f7fa f8c0 	bl	800ad08 <HAL_GetTick>
 8010b88:	4602      	mov	r2, r0
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	1ad3      	subs	r3, r2, r3
 8010b8e:	2b02      	cmp	r3, #2
 8010b90:	d902      	bls.n	8010b98 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8010b92:	2303      	movs	r3, #3
 8010b94:	73fb      	strb	r3, [r7, #15]
          break;
 8010b96:	e005      	b.n	8010ba4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8010b98:	4b0a      	ldr	r3, [pc, #40]	@ (8010bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d0ef      	beq.n	8010b84 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8010ba4:	7bfb      	ldrb	r3, [r7, #15]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d106      	bne.n	8010bb8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8010baa:	4b06      	ldr	r3, [pc, #24]	@ (8010bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010bac:	695a      	ldr	r2, [r3, #20]
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	695b      	ldr	r3, [r3, #20]
 8010bb2:	4904      	ldr	r1, [pc, #16]	@ (8010bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010bb4:	4313      	orrs	r3, r2
 8010bb6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8010bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3710      	adds	r7, #16
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}
 8010bc2:	bf00      	nop
 8010bc4:	40021000 	.word	0x40021000

08010bc8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b084      	sub	sp, #16
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010bd0:	2301      	movs	r3, #1
 8010bd2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d079      	beq.n	8010cce <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8010be0:	b2db      	uxtb	r3, r3
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d106      	bne.n	8010bf4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	2200      	movs	r2, #0
 8010bea:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	f7f6 fc26 	bl	8007440 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2202      	movs	r2, #2
 8010bf8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	68db      	ldr	r3, [r3, #12]
 8010c02:	f003 0310 	and.w	r3, r3, #16
 8010c06:	2b10      	cmp	r3, #16
 8010c08:	d058      	beq.n	8010cbc <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	22ca      	movs	r2, #202	@ 0xca
 8010c10:	625a      	str	r2, [r3, #36]	@ 0x24
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	2253      	movs	r2, #83	@ 0x53
 8010c18:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	f000 fb82 	bl	8011324 <RTC_EnterInitMode>
 8010c20:	4603      	mov	r3, r0
 8010c22:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8010c24:	7bfb      	ldrb	r3, [r7, #15]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d127      	bne.n	8010c7a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	689b      	ldr	r3, [r3, #8]
 8010c30:	687a      	ldr	r2, [r7, #4]
 8010c32:	6812      	ldr	r2, [r2, #0]
 8010c34:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010c38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010c3c:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	6899      	ldr	r1, [r3, #8]
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	685a      	ldr	r2, [r3, #4]
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	691b      	ldr	r3, [r3, #16]
 8010c4c:	431a      	orrs	r2, r3
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	699b      	ldr	r3, [r3, #24]
 8010c52:	431a      	orrs	r2, r3
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	430a      	orrs	r2, r1
 8010c5a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	687a      	ldr	r2, [r7, #4]
 8010c62:	68d2      	ldr	r2, [r2, #12]
 8010c64:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	6919      	ldr	r1, [r3, #16]
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	689b      	ldr	r3, [r3, #8]
 8010c70:	041a      	lsls	r2, r3, #16
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	430a      	orrs	r2, r1
 8010c78:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8010c7a:	6878      	ldr	r0, [r7, #4]
 8010c7c:	f000 fb86 	bl	801138c <RTC_ExitInitMode>
 8010c80:	4603      	mov	r3, r0
 8010c82:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8010c84:	7bfb      	ldrb	r3, [r7, #15]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d113      	bne.n	8010cb2 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	f022 0203 	bic.w	r2, r2, #3
 8010c98:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	69da      	ldr	r2, [r3, #28]
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	695b      	ldr	r3, [r3, #20]
 8010ca8:	431a      	orrs	r2, r3
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	430a      	orrs	r2, r1
 8010cb0:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	22ff      	movs	r2, #255	@ 0xff
 8010cb8:	625a      	str	r2, [r3, #36]	@ 0x24
 8010cba:	e001      	b.n	8010cc0 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8010cc0:	7bfb      	ldrb	r3, [r7, #15]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d103      	bne.n	8010cce <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2201      	movs	r2, #1
 8010cca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8010cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3710      	adds	r7, #16
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}

08010cd8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010cd8:	b590      	push	{r4, r7, lr}
 8010cda:	b087      	sub	sp, #28
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	60f8      	str	r0, [r7, #12]
 8010ce0:	60b9      	str	r1, [r7, #8]
 8010ce2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010cea:	2b01      	cmp	r3, #1
 8010cec:	d101      	bne.n	8010cf2 <HAL_RTC_SetTime+0x1a>
 8010cee:	2302      	movs	r3, #2
 8010cf0:	e08b      	b.n	8010e0a <HAL_RTC_SetTime+0x132>
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	2201      	movs	r2, #1
 8010cf6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	2202      	movs	r2, #2
 8010cfe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	22ca      	movs	r2, #202	@ 0xca
 8010d08:	625a      	str	r2, [r3, #36]	@ 0x24
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	2253      	movs	r2, #83	@ 0x53
 8010d10:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010d12:	68f8      	ldr	r0, [r7, #12]
 8010d14:	f000 fb06 	bl	8011324 <RTC_EnterInitMode>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8010d1c:	7cfb      	ldrb	r3, [r7, #19]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d163      	bne.n	8010dea <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d126      	bne.n	8010d76 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	689b      	ldr	r3, [r3, #8]
 8010d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d102      	bne.n	8010d3c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8010d36:	68bb      	ldr	r3, [r7, #8]
 8010d38:	2200      	movs	r2, #0
 8010d3a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	781b      	ldrb	r3, [r3, #0]
 8010d40:	4618      	mov	r0, r3
 8010d42:	f000 fb61 	bl	8011408 <RTC_ByteToBcd2>
 8010d46:	4603      	mov	r3, r0
 8010d48:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010d4a:	68bb      	ldr	r3, [r7, #8]
 8010d4c:	785b      	ldrb	r3, [r3, #1]
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f000 fb5a 	bl	8011408 <RTC_ByteToBcd2>
 8010d54:	4603      	mov	r3, r0
 8010d56:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010d58:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	789b      	ldrb	r3, [r3, #2]
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f000 fb52 	bl	8011408 <RTC_ByteToBcd2>
 8010d64:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010d66:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010d6a:	68bb      	ldr	r3, [r7, #8]
 8010d6c:	78db      	ldrb	r3, [r3, #3]
 8010d6e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010d70:	4313      	orrs	r3, r2
 8010d72:	617b      	str	r3, [r7, #20]
 8010d74:	e018      	b.n	8010da8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	689b      	ldr	r3, [r3, #8]
 8010d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d102      	bne.n	8010d8a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8010d84:	68bb      	ldr	r3, [r7, #8]
 8010d86:	2200      	movs	r2, #0
 8010d88:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010d8a:	68bb      	ldr	r3, [r7, #8]
 8010d8c:	781b      	ldrb	r3, [r3, #0]
 8010d8e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	785b      	ldrb	r3, [r3, #1]
 8010d94:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010d96:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8010d98:	68ba      	ldr	r2, [r7, #8]
 8010d9a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010d9c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	78db      	ldrb	r3, [r3, #3]
 8010da2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010da4:	4313      	orrs	r3, r2
 8010da6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	681a      	ldr	r2, [r3, #0]
 8010dac:	697b      	ldr	r3, [r7, #20]
 8010dae:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8010db2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8010db6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	689a      	ldr	r2, [r3, #8]
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8010dc6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	6899      	ldr	r1, [r3, #8]
 8010dce:	68bb      	ldr	r3, [r7, #8]
 8010dd0:	68da      	ldr	r2, [r3, #12]
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	691b      	ldr	r3, [r3, #16]
 8010dd6:	431a      	orrs	r2, r3
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	430a      	orrs	r2, r1
 8010dde:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010de0:	68f8      	ldr	r0, [r7, #12]
 8010de2:	f000 fad3 	bl	801138c <RTC_ExitInitMode>
 8010de6:	4603      	mov	r3, r0
 8010de8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	22ff      	movs	r2, #255	@ 0xff
 8010df0:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8010df2:	7cfb      	ldrb	r3, [r7, #19]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d103      	bne.n	8010e00 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	2201      	movs	r2, #1
 8010dfc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	2200      	movs	r2, #0
 8010e04:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8010e08:	7cfb      	ldrb	r3, [r7, #19]
}
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	371c      	adds	r7, #28
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	bd90      	pop	{r4, r7, pc}

08010e12 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010e12:	b580      	push	{r7, lr}
 8010e14:	b086      	sub	sp, #24
 8010e16:	af00      	add	r7, sp, #0
 8010e18:	60f8      	str	r0, [r7, #12]
 8010e1a:	60b9      	str	r1, [r7, #8]
 8010e1c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010e24:	68bb      	ldr	r3, [r7, #8]
 8010e26:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	691b      	ldr	r3, [r3, #16]
 8010e2e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8010e40:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8010e44:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8010e46:	697b      	ldr	r3, [r7, #20]
 8010e48:	0c1b      	lsrs	r3, r3, #16
 8010e4a:	b2db      	uxtb	r3, r3
 8010e4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010e50:	b2da      	uxtb	r2, r3
 8010e52:	68bb      	ldr	r3, [r7, #8]
 8010e54:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8010e56:	697b      	ldr	r3, [r7, #20]
 8010e58:	0a1b      	lsrs	r3, r3, #8
 8010e5a:	b2db      	uxtb	r3, r3
 8010e5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010e60:	b2da      	uxtb	r2, r3
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8010e66:	697b      	ldr	r3, [r7, #20]
 8010e68:	b2db      	uxtb	r3, r3
 8010e6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010e6e:	b2da      	uxtb	r2, r3
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8010e74:	697b      	ldr	r3, [r7, #20]
 8010e76:	0d9b      	lsrs	r3, r3, #22
 8010e78:	b2db      	uxtb	r3, r3
 8010e7a:	f003 0301 	and.w	r3, r3, #1
 8010e7e:	b2da      	uxtb	r2, r3
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d11a      	bne.n	8010ec0 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	781b      	ldrb	r3, [r3, #0]
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f000 fada 	bl	8011448 <RTC_Bcd2ToByte>
 8010e94:	4603      	mov	r3, r0
 8010e96:	461a      	mov	r2, r3
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8010e9c:	68bb      	ldr	r3, [r7, #8]
 8010e9e:	785b      	ldrb	r3, [r3, #1]
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f000 fad1 	bl	8011448 <RTC_Bcd2ToByte>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	461a      	mov	r2, r3
 8010eaa:	68bb      	ldr	r3, [r7, #8]
 8010eac:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8010eae:	68bb      	ldr	r3, [r7, #8]
 8010eb0:	789b      	ldrb	r3, [r3, #2]
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f000 fac8 	bl	8011448 <RTC_Bcd2ToByte>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	461a      	mov	r2, r3
 8010ebc:	68bb      	ldr	r3, [r7, #8]
 8010ebe:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8010ec0:	2300      	movs	r3, #0
}
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	3718      	adds	r7, #24
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}

08010eca <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010eca:	b590      	push	{r4, r7, lr}
 8010ecc:	b087      	sub	sp, #28
 8010ece:	af00      	add	r7, sp, #0
 8010ed0:	60f8      	str	r0, [r7, #12]
 8010ed2:	60b9      	str	r1, [r7, #8]
 8010ed4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010edc:	2b01      	cmp	r3, #1
 8010ede:	d101      	bne.n	8010ee4 <HAL_RTC_SetDate+0x1a>
 8010ee0:	2302      	movs	r3, #2
 8010ee2:	e075      	b.n	8010fd0 <HAL_RTC_SetDate+0x106>
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	2201      	movs	r2, #1
 8010ee8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	2202      	movs	r2, #2
 8010ef0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d10e      	bne.n	8010f18 <HAL_RTC_SetDate+0x4e>
 8010efa:	68bb      	ldr	r3, [r7, #8]
 8010efc:	785b      	ldrb	r3, [r3, #1]
 8010efe:	f003 0310 	and.w	r3, r3, #16
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d008      	beq.n	8010f18 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	785b      	ldrb	r3, [r3, #1]
 8010f0a:	f023 0310 	bic.w	r3, r3, #16
 8010f0e:	b2db      	uxtb	r3, r3
 8010f10:	330a      	adds	r3, #10
 8010f12:	b2da      	uxtb	r2, r3
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d11c      	bne.n	8010f58 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8010f1e:	68bb      	ldr	r3, [r7, #8]
 8010f20:	78db      	ldrb	r3, [r3, #3]
 8010f22:	4618      	mov	r0, r3
 8010f24:	f000 fa70 	bl	8011408 <RTC_ByteToBcd2>
 8010f28:	4603      	mov	r3, r0
 8010f2a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8010f2c:	68bb      	ldr	r3, [r7, #8]
 8010f2e:	785b      	ldrb	r3, [r3, #1]
 8010f30:	4618      	mov	r0, r3
 8010f32:	f000 fa69 	bl	8011408 <RTC_ByteToBcd2>
 8010f36:	4603      	mov	r3, r0
 8010f38:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8010f3a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8010f3c:	68bb      	ldr	r3, [r7, #8]
 8010f3e:	789b      	ldrb	r3, [r3, #2]
 8010f40:	4618      	mov	r0, r3
 8010f42:	f000 fa61 	bl	8011408 <RTC_ByteToBcd2>
 8010f46:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8010f48:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	781b      	ldrb	r3, [r3, #0]
 8010f50:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8010f52:	4313      	orrs	r3, r2
 8010f54:	617b      	str	r3, [r7, #20]
 8010f56:	e00e      	b.n	8010f76 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8010f58:	68bb      	ldr	r3, [r7, #8]
 8010f5a:	78db      	ldrb	r3, [r3, #3]
 8010f5c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8010f5e:	68bb      	ldr	r3, [r7, #8]
 8010f60:	785b      	ldrb	r3, [r3, #1]
 8010f62:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8010f64:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8010f66:	68ba      	ldr	r2, [r7, #8]
 8010f68:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8010f6a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	781b      	ldrb	r3, [r3, #0]
 8010f70:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8010f72:	4313      	orrs	r3, r2
 8010f74:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	22ca      	movs	r2, #202	@ 0xca
 8010f7c:	625a      	str	r2, [r3, #36]	@ 0x24
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	2253      	movs	r2, #83	@ 0x53
 8010f84:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010f86:	68f8      	ldr	r0, [r7, #12]
 8010f88:	f000 f9cc 	bl	8011324 <RTC_EnterInitMode>
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8010f90:	7cfb      	ldrb	r3, [r7, #19]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d10c      	bne.n	8010fb0 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	681a      	ldr	r2, [r3, #0]
 8010f9a:	697b      	ldr	r3, [r7, #20]
 8010f9c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010fa0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010fa4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010fa6:	68f8      	ldr	r0, [r7, #12]
 8010fa8:	f000 f9f0 	bl	801138c <RTC_ExitInitMode>
 8010fac:	4603      	mov	r3, r0
 8010fae:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	22ff      	movs	r2, #255	@ 0xff
 8010fb6:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8010fb8:	7cfb      	ldrb	r3, [r7, #19]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d103      	bne.n	8010fc6 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	2201      	movs	r2, #1
 8010fc2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	2200      	movs	r2, #0
 8010fca:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8010fce:	7cfb      	ldrb	r3, [r7, #19]
}
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	371c      	adds	r7, #28
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd90      	pop	{r4, r7, pc}

08010fd8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8010fd8:	b590      	push	{r4, r7, lr}
 8010fda:	b089      	sub	sp, #36	@ 0x24
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	60f8      	str	r0, [r7, #12]
 8010fe0:	60b9      	str	r1, [r7, #8]
 8010fe2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010fea:	2b01      	cmp	r3, #1
 8010fec:	d101      	bne.n	8010ff2 <HAL_RTC_SetAlarm_IT+0x1a>
 8010fee:	2302      	movs	r3, #2
 8010ff0:	e127      	b.n	8011242 <HAL_RTC_SetAlarm_IT+0x26a>
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	2201      	movs	r2, #1
 8010ff6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	2202      	movs	r2, #2
 8010ffe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d137      	bne.n	8011078 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	689b      	ldr	r3, [r3, #8]
 801100e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011012:	2b00      	cmp	r3, #0
 8011014:	d102      	bne.n	801101c <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8011016:	68bb      	ldr	r3, [r7, #8]
 8011018:	2200      	movs	r2, #0
 801101a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 801101c:	68bb      	ldr	r3, [r7, #8]
 801101e:	781b      	ldrb	r3, [r3, #0]
 8011020:	4618      	mov	r0, r3
 8011022:	f000 f9f1 	bl	8011408 <RTC_ByteToBcd2>
 8011026:	4603      	mov	r3, r0
 8011028:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	785b      	ldrb	r3, [r3, #1]
 801102e:	4618      	mov	r0, r3
 8011030:	f000 f9ea 	bl	8011408 <RTC_ByteToBcd2>
 8011034:	4603      	mov	r3, r0
 8011036:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011038:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	789b      	ldrb	r3, [r3, #2]
 801103e:	4618      	mov	r0, r3
 8011040:	f000 f9e2 	bl	8011408 <RTC_ByteToBcd2>
 8011044:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8011046:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 801104a:	68bb      	ldr	r3, [r7, #8]
 801104c:	78db      	ldrb	r3, [r3, #3]
 801104e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8011050:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801105a:	4618      	mov	r0, r3
 801105c:	f000 f9d4 	bl	8011408 <RTC_ByteToBcd2>
 8011060:	4603      	mov	r3, r0
 8011062:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8011064:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8011068:	68bb      	ldr	r3, [r7, #8]
 801106a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 801106c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 801106e:	68bb      	ldr	r3, [r7, #8]
 8011070:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011072:	4313      	orrs	r3, r2
 8011074:	61fb      	str	r3, [r7, #28]
 8011076:	e023      	b.n	80110c0 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	689b      	ldr	r3, [r3, #8]
 801107e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011082:	2b00      	cmp	r3, #0
 8011084:	d102      	bne.n	801108c <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8011086:	68bb      	ldr	r3, [r7, #8]
 8011088:	2200      	movs	r2, #0
 801108a:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	781b      	ldrb	r3, [r3, #0]
 8011090:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	785b      	ldrb	r3, [r3, #1]
 8011096:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011098:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 801109a:	68ba      	ldr	r2, [r7, #8]
 801109c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 801109e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80110a0:	68bb      	ldr	r3, [r7, #8]
 80110a2:	78db      	ldrb	r3, [r3, #3]
 80110a4:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80110a6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80110ae:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80110b0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80110b2:	68bb      	ldr	r3, [r7, #8]
 80110b4:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80110b6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80110b8:	68bb      	ldr	r3, [r7, #8]
 80110ba:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80110bc:	4313      	orrs	r3, r2
 80110be:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80110c0:	68bb      	ldr	r3, [r7, #8]
 80110c2:	685a      	ldr	r2, [r3, #4]
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	69db      	ldr	r3, [r3, #28]
 80110c8:	4313      	orrs	r3, r2
 80110ca:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	22ca      	movs	r2, #202	@ 0xca
 80110d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	2253      	movs	r2, #83	@ 0x53
 80110da:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80110e4:	d14a      	bne.n	801117c <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	689a      	ldr	r2, [r3, #8]
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80110f4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	68db      	ldr	r3, [r3, #12]
 80110fc:	b2da      	uxtb	r2, r3
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8011106:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8011108:	f7f9 fdfe 	bl	800ad08 <HAL_GetTick>
 801110c:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 801110e:	e015      	b.n	801113c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011110:	f7f9 fdfa 	bl	800ad08 <HAL_GetTick>
 8011114:	4602      	mov	r2, r0
 8011116:	693b      	ldr	r3, [r7, #16]
 8011118:	1ad3      	subs	r3, r2, r3
 801111a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801111e:	d90d      	bls.n	801113c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	22ff      	movs	r2, #255	@ 0xff
 8011126:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	2203      	movs	r2, #3
 801112c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	2200      	movs	r2, #0
 8011134:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8011138:	2303      	movs	r3, #3
 801113a:	e082      	b.n	8011242 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	68db      	ldr	r3, [r3, #12]
 8011142:	f003 0301 	and.w	r3, r3, #1
 8011146:	2b00      	cmp	r3, #0
 8011148:	d0e2      	beq.n	8011110 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	69fa      	ldr	r2, [r7, #28]
 8011150:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	69ba      	ldr	r2, [r7, #24]
 8011158:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	689a      	ldr	r2, [r3, #8]
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011168:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	689a      	ldr	r2, [r3, #8]
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011178:	609a      	str	r2, [r3, #8]
 801117a:	e049      	b.n	8011210 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	689a      	ldr	r2, [r3, #8]
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 801118a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	68db      	ldr	r3, [r3, #12]
 8011192:	b2da      	uxtb	r2, r3
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	f462 7220 	orn	r2, r2, #640	@ 0x280
 801119c:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 801119e:	f7f9 fdb3 	bl	800ad08 <HAL_GetTick>
 80111a2:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80111a4:	e015      	b.n	80111d2 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80111a6:	f7f9 fdaf 	bl	800ad08 <HAL_GetTick>
 80111aa:	4602      	mov	r2, r0
 80111ac:	697b      	ldr	r3, [r7, #20]
 80111ae:	1ad3      	subs	r3, r2, r3
 80111b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80111b4:	d90d      	bls.n	80111d2 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	22ff      	movs	r2, #255	@ 0xff
 80111bc:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	2203      	movs	r2, #3
 80111c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	2200      	movs	r2, #0
 80111ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80111ce:	2303      	movs	r3, #3
 80111d0:	e037      	b.n	8011242 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	68db      	ldr	r3, [r3, #12]
 80111d8:	f003 0302 	and.w	r3, r3, #2
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d0e2      	beq.n	80111a6 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	69fa      	ldr	r2, [r7, #28]
 80111e6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	69ba      	ldr	r2, [r7, #24]
 80111ee:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	689a      	ldr	r2, [r3, #8]
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80111fe:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	689a      	ldr	r2, [r3, #8]
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801120e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8011210:	4b0e      	ldr	r3, [pc, #56]	@ (801124c <HAL_RTC_SetAlarm_IT+0x274>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	4a0d      	ldr	r2, [pc, #52]	@ (801124c <HAL_RTC_SetAlarm_IT+0x274>)
 8011216:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801121a:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 801121c:	4b0b      	ldr	r3, [pc, #44]	@ (801124c <HAL_RTC_SetAlarm_IT+0x274>)
 801121e:	689b      	ldr	r3, [r3, #8]
 8011220:	4a0a      	ldr	r2, [pc, #40]	@ (801124c <HAL_RTC_SetAlarm_IT+0x274>)
 8011222:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011226:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	22ff      	movs	r2, #255	@ 0xff
 801122e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	2201      	movs	r2, #1
 8011234:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	2200      	movs	r2, #0
 801123c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8011240:	2300      	movs	r3, #0
}
 8011242:	4618      	mov	r0, r3
 8011244:	3724      	adds	r7, #36	@ 0x24
 8011246:	46bd      	mov	sp, r7
 8011248:	bd90      	pop	{r4, r7, pc}
 801124a:	bf00      	nop
 801124c:	40010400 	.word	0x40010400

08011250 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b082      	sub	sp, #8
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8011258:	4b1f      	ldr	r3, [pc, #124]	@ (80112d8 <HAL_RTC_AlarmIRQHandler+0x88>)
 801125a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801125e:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	689b      	ldr	r3, [r3, #8]
 8011266:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801126a:	2b00      	cmp	r3, #0
 801126c:	d012      	beq.n	8011294 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	68db      	ldr	r3, [r3, #12]
 8011274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011278:	2b00      	cmp	r3, #0
 801127a:	d00b      	beq.n	8011294 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	68db      	ldr	r3, [r3, #12]
 8011282:	b2da      	uxtb	r2, r3
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 801128c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 801128e:	6878      	ldr	r0, [r7, #4]
 8011290:	f7f1 fb74 	bl	800297c <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	689b      	ldr	r3, [r3, #8]
 801129a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d012      	beq.n	80112c8 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	68db      	ldr	r3, [r3, #12]
 80112a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d00b      	beq.n	80112c8 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	68db      	ldr	r3, [r3, #12]
 80112b6:	b2da      	uxtb	r2, r3
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80112c0:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80112c2:	6878      	ldr	r0, [r7, #4]
 80112c4:	f000 f8da 	bl	801147c <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	2201      	movs	r2, #1
 80112cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80112d0:	bf00      	nop
 80112d2:	3708      	adds	r7, #8
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bd80      	pop	{r7, pc}
 80112d8:	40010400 	.word	0x40010400

080112dc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b084      	sub	sp, #16
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	4a0d      	ldr	r2, [pc, #52]	@ (8011320 <HAL_RTC_WaitForSynchro+0x44>)
 80112ea:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80112ec:	f7f9 fd0c 	bl	800ad08 <HAL_GetTick>
 80112f0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80112f2:	e009      	b.n	8011308 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80112f4:	f7f9 fd08 	bl	800ad08 <HAL_GetTick>
 80112f8:	4602      	mov	r2, r0
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	1ad3      	subs	r3, r2, r3
 80112fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011302:	d901      	bls.n	8011308 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8011304:	2303      	movs	r3, #3
 8011306:	e007      	b.n	8011318 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	68db      	ldr	r3, [r3, #12]
 801130e:	f003 0320 	and.w	r3, r3, #32
 8011312:	2b00      	cmp	r3, #0
 8011314:	d0ee      	beq.n	80112f4 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8011316:	2300      	movs	r3, #0
}
 8011318:	4618      	mov	r0, r3
 801131a:	3710      	adds	r7, #16
 801131c:	46bd      	mov	sp, r7
 801131e:	bd80      	pop	{r7, pc}
 8011320:	0003ff5f 	.word	0x0003ff5f

08011324 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b084      	sub	sp, #16
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801132c:	2300      	movs	r3, #0
 801132e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	68db      	ldr	r3, [r3, #12]
 8011336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801133a:	2b00      	cmp	r3, #0
 801133c:	d120      	bne.n	8011380 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	f04f 32ff 	mov.w	r2, #4294967295
 8011346:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011348:	f7f9 fcde 	bl	800ad08 <HAL_GetTick>
 801134c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801134e:	e00d      	b.n	801136c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011350:	f7f9 fcda 	bl	800ad08 <HAL_GetTick>
 8011354:	4602      	mov	r2, r0
 8011356:	68bb      	ldr	r3, [r7, #8]
 8011358:	1ad3      	subs	r3, r2, r3
 801135a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801135e:	d905      	bls.n	801136c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8011360:	2303      	movs	r3, #3
 8011362:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	2203      	movs	r2, #3
 8011368:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	68db      	ldr	r3, [r3, #12]
 8011372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011376:	2b00      	cmp	r3, #0
 8011378:	d102      	bne.n	8011380 <RTC_EnterInitMode+0x5c>
 801137a:	7bfb      	ldrb	r3, [r7, #15]
 801137c:	2b03      	cmp	r3, #3
 801137e:	d1e7      	bne.n	8011350 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8011380:	7bfb      	ldrb	r3, [r7, #15]
}
 8011382:	4618      	mov	r0, r3
 8011384:	3710      	adds	r7, #16
 8011386:	46bd      	mov	sp, r7
 8011388:	bd80      	pop	{r7, pc}
	...

0801138c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b084      	sub	sp, #16
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011394:	2300      	movs	r3, #0
 8011396:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8011398:	4b1a      	ldr	r3, [pc, #104]	@ (8011404 <RTC_ExitInitMode+0x78>)
 801139a:	68db      	ldr	r3, [r3, #12]
 801139c:	4a19      	ldr	r2, [pc, #100]	@ (8011404 <RTC_ExitInitMode+0x78>)
 801139e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80113a2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80113a4:	4b17      	ldr	r3, [pc, #92]	@ (8011404 <RTC_ExitInitMode+0x78>)
 80113a6:	689b      	ldr	r3, [r3, #8]
 80113a8:	f003 0320 	and.w	r3, r3, #32
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d10c      	bne.n	80113ca <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	f7ff ff93 	bl	80112dc <HAL_RTC_WaitForSynchro>
 80113b6:	4603      	mov	r3, r0
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d01e      	beq.n	80113fa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	2203      	movs	r2, #3
 80113c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80113c4:	2303      	movs	r3, #3
 80113c6:	73fb      	strb	r3, [r7, #15]
 80113c8:	e017      	b.n	80113fa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80113ca:	4b0e      	ldr	r3, [pc, #56]	@ (8011404 <RTC_ExitInitMode+0x78>)
 80113cc:	689b      	ldr	r3, [r3, #8]
 80113ce:	4a0d      	ldr	r2, [pc, #52]	@ (8011404 <RTC_ExitInitMode+0x78>)
 80113d0:	f023 0320 	bic.w	r3, r3, #32
 80113d4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	f7ff ff80 	bl	80112dc <HAL_RTC_WaitForSynchro>
 80113dc:	4603      	mov	r3, r0
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d005      	beq.n	80113ee <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	2203      	movs	r2, #3
 80113e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80113ea:	2303      	movs	r3, #3
 80113ec:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80113ee:	4b05      	ldr	r3, [pc, #20]	@ (8011404 <RTC_ExitInitMode+0x78>)
 80113f0:	689b      	ldr	r3, [r3, #8]
 80113f2:	4a04      	ldr	r2, [pc, #16]	@ (8011404 <RTC_ExitInitMode+0x78>)
 80113f4:	f043 0320 	orr.w	r3, r3, #32
 80113f8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80113fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80113fc:	4618      	mov	r0, r3
 80113fe:	3710      	adds	r7, #16
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}
 8011404:	40002800 	.word	0x40002800

08011408 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8011408:	b480      	push	{r7}
 801140a:	b085      	sub	sp, #20
 801140c:	af00      	add	r7, sp, #0
 801140e:	4603      	mov	r3, r0
 8011410:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8011412:	2300      	movs	r3, #0
 8011414:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8011416:	79fb      	ldrb	r3, [r7, #7]
 8011418:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 801141a:	e005      	b.n	8011428 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	3301      	adds	r3, #1
 8011420:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8011422:	7afb      	ldrb	r3, [r7, #11]
 8011424:	3b0a      	subs	r3, #10
 8011426:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8011428:	7afb      	ldrb	r3, [r7, #11]
 801142a:	2b09      	cmp	r3, #9
 801142c:	d8f6      	bhi.n	801141c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	b2db      	uxtb	r3, r3
 8011432:	011b      	lsls	r3, r3, #4
 8011434:	b2da      	uxtb	r2, r3
 8011436:	7afb      	ldrb	r3, [r7, #11]
 8011438:	4313      	orrs	r3, r2
 801143a:	b2db      	uxtb	r3, r3
}
 801143c:	4618      	mov	r0, r3
 801143e:	3714      	adds	r7, #20
 8011440:	46bd      	mov	sp, r7
 8011442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011446:	4770      	bx	lr

08011448 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011448:	b480      	push	{r7}
 801144a:	b085      	sub	sp, #20
 801144c:	af00      	add	r7, sp, #0
 801144e:	4603      	mov	r3, r0
 8011450:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8011452:	79fb      	ldrb	r3, [r7, #7]
 8011454:	091b      	lsrs	r3, r3, #4
 8011456:	b2db      	uxtb	r3, r3
 8011458:	461a      	mov	r2, r3
 801145a:	0092      	lsls	r2, r2, #2
 801145c:	4413      	add	r3, r2
 801145e:	005b      	lsls	r3, r3, #1
 8011460:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8011462:	79fb      	ldrb	r3, [r7, #7]
 8011464:	f003 030f 	and.w	r3, r3, #15
 8011468:	b2da      	uxtb	r2, r3
 801146a:	7bfb      	ldrb	r3, [r7, #15]
 801146c:	4413      	add	r3, r2
 801146e:	b2db      	uxtb	r3, r3
}
 8011470:	4618      	mov	r0, r3
 8011472:	3714      	adds	r7, #20
 8011474:	46bd      	mov	sp, r7
 8011476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147a:	4770      	bx	lr

0801147c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 801147c:	b480      	push	{r7}
 801147e:	b083      	sub	sp, #12
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8011484:	bf00      	nop
 8011486:	370c      	adds	r7, #12
 8011488:	46bd      	mov	sp, r7
 801148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148e:	4770      	bx	lr

08011490 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b084      	sub	sp, #16
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d101      	bne.n	80114a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801149e:	2301      	movs	r3, #1
 80114a0:	e095      	b.n	80115ce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d108      	bne.n	80114bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	685b      	ldr	r3, [r3, #4]
 80114ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80114b2:	d009      	beq.n	80114c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	2200      	movs	r2, #0
 80114b8:	61da      	str	r2, [r3, #28]
 80114ba:	e005      	b.n	80114c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2200      	movs	r2, #0
 80114c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	2200      	movs	r2, #0
 80114c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	2200      	movs	r2, #0
 80114cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80114d4:	b2db      	uxtb	r3, r3
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d106      	bne.n	80114e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	2200      	movs	r2, #0
 80114de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f7f5 ffe6 	bl	80074b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2202      	movs	r2, #2
 80114ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	681a      	ldr	r2, [r3, #0]
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80114fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	68db      	ldr	r3, [r3, #12]
 8011504:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011508:	d902      	bls.n	8011510 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801150a:	2300      	movs	r3, #0
 801150c:	60fb      	str	r3, [r7, #12]
 801150e:	e002      	b.n	8011516 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8011510:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011514:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	68db      	ldr	r3, [r3, #12]
 801151a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 801151e:	d007      	beq.n	8011530 <HAL_SPI_Init+0xa0>
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	68db      	ldr	r3, [r3, #12]
 8011524:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011528:	d002      	beq.n	8011530 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	2200      	movs	r2, #0
 801152e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	685b      	ldr	r3, [r3, #4]
 8011534:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	689b      	ldr	r3, [r3, #8]
 801153c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8011540:	431a      	orrs	r2, r3
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	691b      	ldr	r3, [r3, #16]
 8011546:	f003 0302 	and.w	r3, r3, #2
 801154a:	431a      	orrs	r2, r3
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	695b      	ldr	r3, [r3, #20]
 8011550:	f003 0301 	and.w	r3, r3, #1
 8011554:	431a      	orrs	r2, r3
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	699b      	ldr	r3, [r3, #24]
 801155a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801155e:	431a      	orrs	r2, r3
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	69db      	ldr	r3, [r3, #28]
 8011564:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011568:	431a      	orrs	r2, r3
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	6a1b      	ldr	r3, [r3, #32]
 801156e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011572:	ea42 0103 	orr.w	r1, r2, r3
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801157a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	430a      	orrs	r2, r1
 8011584:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	699b      	ldr	r3, [r3, #24]
 801158a:	0c1b      	lsrs	r3, r3, #16
 801158c:	f003 0204 	and.w	r2, r3, #4
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011594:	f003 0310 	and.w	r3, r3, #16
 8011598:	431a      	orrs	r2, r3
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801159e:	f003 0308 	and.w	r3, r3, #8
 80115a2:	431a      	orrs	r2, r3
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	68db      	ldr	r3, [r3, #12]
 80115a8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80115ac:	ea42 0103 	orr.w	r1, r2, r3
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	430a      	orrs	r2, r1
 80115bc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	2200      	movs	r2, #0
 80115c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	2201      	movs	r2, #1
 80115c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80115cc:	2300      	movs	r3, #0
}
 80115ce:	4618      	mov	r0, r3
 80115d0:	3710      	adds	r7, #16
 80115d2:	46bd      	mov	sp, r7
 80115d4:	bd80      	pop	{r7, pc}

080115d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80115d6:	b580      	push	{r7, lr}
 80115d8:	b088      	sub	sp, #32
 80115da:	af00      	add	r7, sp, #0
 80115dc:	60f8      	str	r0, [r7, #12]
 80115de:	60b9      	str	r1, [r7, #8]
 80115e0:	603b      	str	r3, [r7, #0]
 80115e2:	4613      	mov	r3, r2
 80115e4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80115e6:	f7f9 fb8f 	bl	800ad08 <HAL_GetTick>
 80115ea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80115ec:	88fb      	ldrh	r3, [r7, #6]
 80115ee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80115f6:	b2db      	uxtb	r3, r3
 80115f8:	2b01      	cmp	r3, #1
 80115fa:	d001      	beq.n	8011600 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80115fc:	2302      	movs	r3, #2
 80115fe:	e15c      	b.n	80118ba <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d002      	beq.n	801160c <HAL_SPI_Transmit+0x36>
 8011606:	88fb      	ldrh	r3, [r7, #6]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d101      	bne.n	8011610 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 801160c:	2301      	movs	r3, #1
 801160e:	e154      	b.n	80118ba <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8011616:	2b01      	cmp	r3, #1
 8011618:	d101      	bne.n	801161e <HAL_SPI_Transmit+0x48>
 801161a:	2302      	movs	r3, #2
 801161c:	e14d      	b.n	80118ba <HAL_SPI_Transmit+0x2e4>
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	2201      	movs	r2, #1
 8011622:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	2203      	movs	r2, #3
 801162a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	2200      	movs	r2, #0
 8011632:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	68ba      	ldr	r2, [r7, #8]
 8011638:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	88fa      	ldrh	r2, [r7, #6]
 801163e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	88fa      	ldrh	r2, [r7, #6]
 8011644:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	2200      	movs	r2, #0
 801164a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	2200      	movs	r2, #0
 8011650:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	2200      	movs	r2, #0
 8011658:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	2200      	movs	r2, #0
 8011660:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	2200      	movs	r2, #0
 8011666:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	689b      	ldr	r3, [r3, #8]
 801166c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011670:	d10f      	bne.n	8011692 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	681a      	ldr	r2, [r3, #0]
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011680:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	681a      	ldr	r2, [r3, #0]
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8011690:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801169c:	2b40      	cmp	r3, #64	@ 0x40
 801169e:	d007      	beq.n	80116b0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	681a      	ldr	r2, [r3, #0]
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80116ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	68db      	ldr	r3, [r3, #12]
 80116b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80116b8:	d952      	bls.n	8011760 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	685b      	ldr	r3, [r3, #4]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d002      	beq.n	80116c8 <HAL_SPI_Transmit+0xf2>
 80116c2:	8b7b      	ldrh	r3, [r7, #26]
 80116c4:	2b01      	cmp	r3, #1
 80116c6:	d145      	bne.n	8011754 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116cc:	881a      	ldrh	r2, [r3, #0]
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116d8:	1c9a      	adds	r2, r3, #2
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80116e2:	b29b      	uxth	r3, r3
 80116e4:	3b01      	subs	r3, #1
 80116e6:	b29a      	uxth	r2, r3
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80116ec:	e032      	b.n	8011754 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	689b      	ldr	r3, [r3, #8]
 80116f4:	f003 0302 	and.w	r3, r3, #2
 80116f8:	2b02      	cmp	r3, #2
 80116fa:	d112      	bne.n	8011722 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011700:	881a      	ldrh	r2, [r3, #0]
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801170c:	1c9a      	adds	r2, r3, #2
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011716:	b29b      	uxth	r3, r3
 8011718:	3b01      	subs	r3, #1
 801171a:	b29a      	uxth	r2, r3
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011720:	e018      	b.n	8011754 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011722:	f7f9 faf1 	bl	800ad08 <HAL_GetTick>
 8011726:	4602      	mov	r2, r0
 8011728:	69fb      	ldr	r3, [r7, #28]
 801172a:	1ad3      	subs	r3, r2, r3
 801172c:	683a      	ldr	r2, [r7, #0]
 801172e:	429a      	cmp	r2, r3
 8011730:	d803      	bhi.n	801173a <HAL_SPI_Transmit+0x164>
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011738:	d102      	bne.n	8011740 <HAL_SPI_Transmit+0x16a>
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d109      	bne.n	8011754 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	2201      	movs	r2, #1
 8011744:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	2200      	movs	r2, #0
 801174c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8011750:	2303      	movs	r3, #3
 8011752:	e0b2      	b.n	80118ba <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011758:	b29b      	uxth	r3, r3
 801175a:	2b00      	cmp	r3, #0
 801175c:	d1c7      	bne.n	80116ee <HAL_SPI_Transmit+0x118>
 801175e:	e083      	b.n	8011868 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	685b      	ldr	r3, [r3, #4]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d002      	beq.n	801176e <HAL_SPI_Transmit+0x198>
 8011768:	8b7b      	ldrh	r3, [r7, #26]
 801176a:	2b01      	cmp	r3, #1
 801176c:	d177      	bne.n	801185e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011772:	b29b      	uxth	r3, r3
 8011774:	2b01      	cmp	r3, #1
 8011776:	d912      	bls.n	801179e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801177c:	881a      	ldrh	r2, [r3, #0]
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011788:	1c9a      	adds	r2, r3, #2
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011792:	b29b      	uxth	r3, r3
 8011794:	3b02      	subs	r3, #2
 8011796:	b29a      	uxth	r2, r3
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801179c:	e05f      	b.n	801185e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	330c      	adds	r3, #12
 80117a8:	7812      	ldrb	r2, [r2, #0]
 80117aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117b0:	1c5a      	adds	r2, r3, #1
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80117ba:	b29b      	uxth	r3, r3
 80117bc:	3b01      	subs	r3, #1
 80117be:	b29a      	uxth	r2, r3
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80117c4:	e04b      	b.n	801185e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	689b      	ldr	r3, [r3, #8]
 80117cc:	f003 0302 	and.w	r3, r3, #2
 80117d0:	2b02      	cmp	r3, #2
 80117d2:	d12b      	bne.n	801182c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80117d8:	b29b      	uxth	r3, r3
 80117da:	2b01      	cmp	r3, #1
 80117dc:	d912      	bls.n	8011804 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117e2:	881a      	ldrh	r2, [r3, #0]
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117ee:	1c9a      	adds	r2, r3, #2
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80117f8:	b29b      	uxth	r3, r3
 80117fa:	3b02      	subs	r3, #2
 80117fc:	b29a      	uxth	r2, r3
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011802:	e02c      	b.n	801185e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	330c      	adds	r3, #12
 801180e:	7812      	ldrb	r2, [r2, #0]
 8011810:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011816:	1c5a      	adds	r2, r3, #1
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011820:	b29b      	uxth	r3, r3
 8011822:	3b01      	subs	r3, #1
 8011824:	b29a      	uxth	r2, r3
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801182a:	e018      	b.n	801185e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801182c:	f7f9 fa6c 	bl	800ad08 <HAL_GetTick>
 8011830:	4602      	mov	r2, r0
 8011832:	69fb      	ldr	r3, [r7, #28]
 8011834:	1ad3      	subs	r3, r2, r3
 8011836:	683a      	ldr	r2, [r7, #0]
 8011838:	429a      	cmp	r2, r3
 801183a:	d803      	bhi.n	8011844 <HAL_SPI_Transmit+0x26e>
 801183c:	683b      	ldr	r3, [r7, #0]
 801183e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011842:	d102      	bne.n	801184a <HAL_SPI_Transmit+0x274>
 8011844:	683b      	ldr	r3, [r7, #0]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d109      	bne.n	801185e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	2201      	movs	r2, #1
 801184e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	2200      	movs	r2, #0
 8011856:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 801185a:	2303      	movs	r3, #3
 801185c:	e02d      	b.n	80118ba <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011862:	b29b      	uxth	r3, r3
 8011864:	2b00      	cmp	r3, #0
 8011866:	d1ae      	bne.n	80117c6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011868:	69fa      	ldr	r2, [r7, #28]
 801186a:	6839      	ldr	r1, [r7, #0]
 801186c:	68f8      	ldr	r0, [r7, #12]
 801186e:	f000 fcf5 	bl	801225c <SPI_EndRxTxTransaction>
 8011872:	4603      	mov	r3, r0
 8011874:	2b00      	cmp	r3, #0
 8011876:	d002      	beq.n	801187e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	2220      	movs	r2, #32
 801187c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	689b      	ldr	r3, [r3, #8]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d10a      	bne.n	801189c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011886:	2300      	movs	r3, #0
 8011888:	617b      	str	r3, [r7, #20]
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	68db      	ldr	r3, [r3, #12]
 8011890:	617b      	str	r3, [r7, #20]
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	689b      	ldr	r3, [r3, #8]
 8011898:	617b      	str	r3, [r7, #20]
 801189a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	2201      	movs	r2, #1
 80118a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	2200      	movs	r2, #0
 80118a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d001      	beq.n	80118b8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80118b4:	2301      	movs	r3, #1
 80118b6:	e000      	b.n	80118ba <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80118b8:	2300      	movs	r3, #0
  }
}
 80118ba:	4618      	mov	r0, r3
 80118bc:	3720      	adds	r7, #32
 80118be:	46bd      	mov	sp, r7
 80118c0:	bd80      	pop	{r7, pc}

080118c2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80118c2:	b580      	push	{r7, lr}
 80118c4:	b088      	sub	sp, #32
 80118c6:	af02      	add	r7, sp, #8
 80118c8:	60f8      	str	r0, [r7, #12]
 80118ca:	60b9      	str	r1, [r7, #8]
 80118cc:	603b      	str	r3, [r7, #0]
 80118ce:	4613      	mov	r3, r2
 80118d0:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80118d8:	b2db      	uxtb	r3, r3
 80118da:	2b01      	cmp	r3, #1
 80118dc:	d001      	beq.n	80118e2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80118de:	2302      	movs	r3, #2
 80118e0:	e123      	b.n	8011b2a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	685b      	ldr	r3, [r3, #4]
 80118e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80118ea:	d112      	bne.n	8011912 <HAL_SPI_Receive+0x50>
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	689b      	ldr	r3, [r3, #8]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d10e      	bne.n	8011912 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	2204      	movs	r2, #4
 80118f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80118fc:	88fa      	ldrh	r2, [r7, #6]
 80118fe:	683b      	ldr	r3, [r7, #0]
 8011900:	9300      	str	r3, [sp, #0]
 8011902:	4613      	mov	r3, r2
 8011904:	68ba      	ldr	r2, [r7, #8]
 8011906:	68b9      	ldr	r1, [r7, #8]
 8011908:	68f8      	ldr	r0, [r7, #12]
 801190a:	f000 f912 	bl	8011b32 <HAL_SPI_TransmitReceive>
 801190e:	4603      	mov	r3, r0
 8011910:	e10b      	b.n	8011b2a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011912:	f7f9 f9f9 	bl	800ad08 <HAL_GetTick>
 8011916:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8011918:	68bb      	ldr	r3, [r7, #8]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d002      	beq.n	8011924 <HAL_SPI_Receive+0x62>
 801191e:	88fb      	ldrh	r3, [r7, #6]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d101      	bne.n	8011928 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8011924:	2301      	movs	r3, #1
 8011926:	e100      	b.n	8011b2a <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 801192e:	2b01      	cmp	r3, #1
 8011930:	d101      	bne.n	8011936 <HAL_SPI_Receive+0x74>
 8011932:	2302      	movs	r3, #2
 8011934:	e0f9      	b.n	8011b2a <HAL_SPI_Receive+0x268>
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	2201      	movs	r2, #1
 801193a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	2204      	movs	r2, #4
 8011942:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	2200      	movs	r2, #0
 801194a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	68ba      	ldr	r2, [r7, #8]
 8011950:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	88fa      	ldrh	r2, [r7, #6]
 8011956:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	88fa      	ldrh	r2, [r7, #6]
 801195e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	2200      	movs	r2, #0
 8011966:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	2200      	movs	r2, #0
 801196c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	2200      	movs	r2, #0
 8011972:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	2200      	movs	r2, #0
 8011978:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	2200      	movs	r2, #0
 801197e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	68db      	ldr	r3, [r3, #12]
 8011984:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011988:	d908      	bls.n	801199c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	685a      	ldr	r2, [r3, #4]
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8011998:	605a      	str	r2, [r3, #4]
 801199a:	e007      	b.n	80119ac <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	685a      	ldr	r2, [r3, #4]
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80119aa:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	689b      	ldr	r3, [r3, #8]
 80119b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80119b4:	d10f      	bne.n	80119d6 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	681a      	ldr	r2, [r3, #0]
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80119c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	681a      	ldr	r2, [r3, #0]
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80119d4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119e0:	2b40      	cmp	r3, #64	@ 0x40
 80119e2:	d007      	beq.n	80119f4 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	681a      	ldr	r2, [r3, #0]
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80119f2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	68db      	ldr	r3, [r3, #12]
 80119f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80119fc:	d875      	bhi.n	8011aea <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80119fe:	e037      	b.n	8011a70 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	689b      	ldr	r3, [r3, #8]
 8011a06:	f003 0301 	and.w	r3, r3, #1
 8011a0a:	2b01      	cmp	r3, #1
 8011a0c:	d117      	bne.n	8011a3e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	f103 020c 	add.w	r2, r3, #12
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a1a:	7812      	ldrb	r2, [r2, #0]
 8011a1c:	b2d2      	uxtb	r2, r2
 8011a1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a24:	1c5a      	adds	r2, r3, #1
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011a30:	b29b      	uxth	r3, r3
 8011a32:	3b01      	subs	r3, #1
 8011a34:	b29a      	uxth	r2, r3
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8011a3c:	e018      	b.n	8011a70 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011a3e:	f7f9 f963 	bl	800ad08 <HAL_GetTick>
 8011a42:	4602      	mov	r2, r0
 8011a44:	697b      	ldr	r3, [r7, #20]
 8011a46:	1ad3      	subs	r3, r2, r3
 8011a48:	683a      	ldr	r2, [r7, #0]
 8011a4a:	429a      	cmp	r2, r3
 8011a4c:	d803      	bhi.n	8011a56 <HAL_SPI_Receive+0x194>
 8011a4e:	683b      	ldr	r3, [r7, #0]
 8011a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a54:	d102      	bne.n	8011a5c <HAL_SPI_Receive+0x19a>
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d109      	bne.n	8011a70 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	2201      	movs	r2, #1
 8011a60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	2200      	movs	r2, #0
 8011a68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8011a6c:	2303      	movs	r3, #3
 8011a6e:	e05c      	b.n	8011b2a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011a76:	b29b      	uxth	r3, r3
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d1c1      	bne.n	8011a00 <HAL_SPI_Receive+0x13e>
 8011a7c:	e03b      	b.n	8011af6 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	689b      	ldr	r3, [r3, #8]
 8011a84:	f003 0301 	and.w	r3, r3, #1
 8011a88:	2b01      	cmp	r3, #1
 8011a8a:	d115      	bne.n	8011ab8 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	68da      	ldr	r2, [r3, #12]
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a96:	b292      	uxth	r2, r2
 8011a98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a9e:	1c9a      	adds	r2, r3, #2
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011aaa:	b29b      	uxth	r3, r3
 8011aac:	3b01      	subs	r3, #1
 8011aae:	b29a      	uxth	r2, r3
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8011ab6:	e018      	b.n	8011aea <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011ab8:	f7f9 f926 	bl	800ad08 <HAL_GetTick>
 8011abc:	4602      	mov	r2, r0
 8011abe:	697b      	ldr	r3, [r7, #20]
 8011ac0:	1ad3      	subs	r3, r2, r3
 8011ac2:	683a      	ldr	r2, [r7, #0]
 8011ac4:	429a      	cmp	r2, r3
 8011ac6:	d803      	bhi.n	8011ad0 <HAL_SPI_Receive+0x20e>
 8011ac8:	683b      	ldr	r3, [r7, #0]
 8011aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ace:	d102      	bne.n	8011ad6 <HAL_SPI_Receive+0x214>
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d109      	bne.n	8011aea <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	2201      	movs	r2, #1
 8011ada:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8011ae6:	2303      	movs	r3, #3
 8011ae8:	e01f      	b.n	8011b2a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011af0:	b29b      	uxth	r3, r3
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d1c3      	bne.n	8011a7e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011af6:	697a      	ldr	r2, [r7, #20]
 8011af8:	6839      	ldr	r1, [r7, #0]
 8011afa:	68f8      	ldr	r0, [r7, #12]
 8011afc:	f000 fb56 	bl	80121ac <SPI_EndRxTransaction>
 8011b00:	4603      	mov	r3, r0
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d002      	beq.n	8011b0c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	2220      	movs	r2, #32
 8011b0a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	2201      	movs	r2, #1
 8011b10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	2200      	movs	r2, #0
 8011b18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d001      	beq.n	8011b28 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8011b24:	2301      	movs	r3, #1
 8011b26:	e000      	b.n	8011b2a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8011b28:	2300      	movs	r3, #0
  }
}
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	3718      	adds	r7, #24
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bd80      	pop	{r7, pc}

08011b32 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8011b32:	b580      	push	{r7, lr}
 8011b34:	b08a      	sub	sp, #40	@ 0x28
 8011b36:	af00      	add	r7, sp, #0
 8011b38:	60f8      	str	r0, [r7, #12]
 8011b3a:	60b9      	str	r1, [r7, #8]
 8011b3c:	607a      	str	r2, [r7, #4]
 8011b3e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8011b40:	2301      	movs	r3, #1
 8011b42:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011b44:	f7f9 f8e0 	bl	800ad08 <HAL_GetTick>
 8011b48:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011b50:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	685b      	ldr	r3, [r3, #4]
 8011b56:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8011b58:	887b      	ldrh	r3, [r7, #2]
 8011b5a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8011b5c:	887b      	ldrh	r3, [r7, #2]
 8011b5e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011b60:	7ffb      	ldrb	r3, [r7, #31]
 8011b62:	2b01      	cmp	r3, #1
 8011b64:	d00c      	beq.n	8011b80 <HAL_SPI_TransmitReceive+0x4e>
 8011b66:	69bb      	ldr	r3, [r7, #24]
 8011b68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011b6c:	d106      	bne.n	8011b7c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	689b      	ldr	r3, [r3, #8]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d102      	bne.n	8011b7c <HAL_SPI_TransmitReceive+0x4a>
 8011b76:	7ffb      	ldrb	r3, [r7, #31]
 8011b78:	2b04      	cmp	r3, #4
 8011b7a:	d001      	beq.n	8011b80 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8011b7c:	2302      	movs	r3, #2
 8011b7e:	e1f3      	b.n	8011f68 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8011b80:	68bb      	ldr	r3, [r7, #8]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d005      	beq.n	8011b92 <HAL_SPI_TransmitReceive+0x60>
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d002      	beq.n	8011b92 <HAL_SPI_TransmitReceive+0x60>
 8011b8c:	887b      	ldrh	r3, [r7, #2]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d101      	bne.n	8011b96 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8011b92:	2301      	movs	r3, #1
 8011b94:	e1e8      	b.n	8011f68 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8011b9c:	2b01      	cmp	r3, #1
 8011b9e:	d101      	bne.n	8011ba4 <HAL_SPI_TransmitReceive+0x72>
 8011ba0:	2302      	movs	r3, #2
 8011ba2:	e1e1      	b.n	8011f68 <HAL_SPI_TransmitReceive+0x436>
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	2201      	movs	r2, #1
 8011ba8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011bb2:	b2db      	uxtb	r3, r3
 8011bb4:	2b04      	cmp	r3, #4
 8011bb6:	d003      	beq.n	8011bc0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	2205      	movs	r2, #5
 8011bbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	687a      	ldr	r2, [r7, #4]
 8011bca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	887a      	ldrh	r2, [r7, #2]
 8011bd0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	887a      	ldrh	r2, [r7, #2]
 8011bd8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	68ba      	ldr	r2, [r7, #8]
 8011be0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	887a      	ldrh	r2, [r7, #2]
 8011be6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	887a      	ldrh	r2, [r7, #2]
 8011bec:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	68db      	ldr	r3, [r3, #12]
 8011bfe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011c02:	d802      	bhi.n	8011c0a <HAL_SPI_TransmitReceive+0xd8>
 8011c04:	8abb      	ldrh	r3, [r7, #20]
 8011c06:	2b01      	cmp	r3, #1
 8011c08:	d908      	bls.n	8011c1c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	685a      	ldr	r2, [r3, #4]
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8011c18:	605a      	str	r2, [r3, #4]
 8011c1a:	e007      	b.n	8011c2c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	685a      	ldr	r2, [r3, #4]
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011c2a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c36:	2b40      	cmp	r3, #64	@ 0x40
 8011c38:	d007      	beq.n	8011c4a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	681a      	ldr	r2, [r3, #0]
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011c48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	68db      	ldr	r3, [r3, #12]
 8011c4e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011c52:	f240 8083 	bls.w	8011d5c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	685b      	ldr	r3, [r3, #4]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d002      	beq.n	8011c64 <HAL_SPI_TransmitReceive+0x132>
 8011c5e:	8afb      	ldrh	r3, [r7, #22]
 8011c60:	2b01      	cmp	r3, #1
 8011c62:	d16f      	bne.n	8011d44 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c68:	881a      	ldrh	r2, [r3, #0]
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c74:	1c9a      	adds	r2, r3, #2
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011c7e:	b29b      	uxth	r3, r3
 8011c80:	3b01      	subs	r3, #1
 8011c82:	b29a      	uxth	r2, r3
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011c88:	e05c      	b.n	8011d44 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	689b      	ldr	r3, [r3, #8]
 8011c90:	f003 0302 	and.w	r3, r3, #2
 8011c94:	2b02      	cmp	r3, #2
 8011c96:	d11b      	bne.n	8011cd0 <HAL_SPI_TransmitReceive+0x19e>
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011c9c:	b29b      	uxth	r3, r3
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d016      	beq.n	8011cd0 <HAL_SPI_TransmitReceive+0x19e>
 8011ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ca4:	2b01      	cmp	r3, #1
 8011ca6:	d113      	bne.n	8011cd0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cac:	881a      	ldrh	r2, [r3, #0]
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cb8:	1c9a      	adds	r2, r3, #2
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	3b01      	subs	r3, #1
 8011cc6:	b29a      	uxth	r2, r3
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011ccc:	2300      	movs	r3, #0
 8011cce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	689b      	ldr	r3, [r3, #8]
 8011cd6:	f003 0301 	and.w	r3, r3, #1
 8011cda:	2b01      	cmp	r3, #1
 8011cdc:	d11c      	bne.n	8011d18 <HAL_SPI_TransmitReceive+0x1e6>
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011ce4:	b29b      	uxth	r3, r3
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d016      	beq.n	8011d18 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	68da      	ldr	r2, [r3, #12]
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011cf4:	b292      	uxth	r2, r2
 8011cf6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011cfc:	1c9a      	adds	r2, r3, #2
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011d08:	b29b      	uxth	r3, r3
 8011d0a:	3b01      	subs	r3, #1
 8011d0c:	b29a      	uxth	r2, r3
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011d14:	2301      	movs	r3, #1
 8011d16:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8011d18:	f7f8 fff6 	bl	800ad08 <HAL_GetTick>
 8011d1c:	4602      	mov	r2, r0
 8011d1e:	6a3b      	ldr	r3, [r7, #32]
 8011d20:	1ad3      	subs	r3, r2, r3
 8011d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011d24:	429a      	cmp	r2, r3
 8011d26:	d80d      	bhi.n	8011d44 <HAL_SPI_TransmitReceive+0x212>
 8011d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d2e:	d009      	beq.n	8011d44 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	2201      	movs	r2, #1
 8011d34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8011d40:	2303      	movs	r3, #3
 8011d42:	e111      	b.n	8011f68 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011d48:	b29b      	uxth	r3, r3
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d19d      	bne.n	8011c8a <HAL_SPI_TransmitReceive+0x158>
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011d54:	b29b      	uxth	r3, r3
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d197      	bne.n	8011c8a <HAL_SPI_TransmitReceive+0x158>
 8011d5a:	e0e5      	b.n	8011f28 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	685b      	ldr	r3, [r3, #4]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d003      	beq.n	8011d6c <HAL_SPI_TransmitReceive+0x23a>
 8011d64:	8afb      	ldrh	r3, [r7, #22]
 8011d66:	2b01      	cmp	r3, #1
 8011d68:	f040 80d1 	bne.w	8011f0e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011d70:	b29b      	uxth	r3, r3
 8011d72:	2b01      	cmp	r3, #1
 8011d74:	d912      	bls.n	8011d9c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d7a:	881a      	ldrh	r2, [r3, #0]
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d86:	1c9a      	adds	r2, r3, #2
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011d90:	b29b      	uxth	r3, r3
 8011d92:	3b02      	subs	r3, #2
 8011d94:	b29a      	uxth	r2, r3
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011d9a:	e0b8      	b.n	8011f0e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	330c      	adds	r3, #12
 8011da6:	7812      	ldrb	r2, [r2, #0]
 8011da8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011dae:	1c5a      	adds	r2, r3, #1
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011db8:	b29b      	uxth	r3, r3
 8011dba:	3b01      	subs	r3, #1
 8011dbc:	b29a      	uxth	r2, r3
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011dc2:	e0a4      	b.n	8011f0e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	689b      	ldr	r3, [r3, #8]
 8011dca:	f003 0302 	and.w	r3, r3, #2
 8011dce:	2b02      	cmp	r3, #2
 8011dd0:	d134      	bne.n	8011e3c <HAL_SPI_TransmitReceive+0x30a>
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011dd6:	b29b      	uxth	r3, r3
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d02f      	beq.n	8011e3c <HAL_SPI_TransmitReceive+0x30a>
 8011ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dde:	2b01      	cmp	r3, #1
 8011de0:	d12c      	bne.n	8011e3c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011de6:	b29b      	uxth	r3, r3
 8011de8:	2b01      	cmp	r3, #1
 8011dea:	d912      	bls.n	8011e12 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011df0:	881a      	ldrh	r2, [r3, #0]
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011dfc:	1c9a      	adds	r2, r3, #2
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011e06:	b29b      	uxth	r3, r3
 8011e08:	3b02      	subs	r3, #2
 8011e0a:	b29a      	uxth	r2, r3
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011e10:	e012      	b.n	8011e38 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	330c      	adds	r3, #12
 8011e1c:	7812      	ldrb	r2, [r2, #0]
 8011e1e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e24:	1c5a      	adds	r2, r3, #1
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011e2e:	b29b      	uxth	r3, r3
 8011e30:	3b01      	subs	r3, #1
 8011e32:	b29a      	uxth	r2, r3
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011e38:	2300      	movs	r3, #0
 8011e3a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	689b      	ldr	r3, [r3, #8]
 8011e42:	f003 0301 	and.w	r3, r3, #1
 8011e46:	2b01      	cmp	r3, #1
 8011e48:	d148      	bne.n	8011edc <HAL_SPI_TransmitReceive+0x3aa>
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011e50:	b29b      	uxth	r3, r3
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d042      	beq.n	8011edc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011e5c:	b29b      	uxth	r3, r3
 8011e5e:	2b01      	cmp	r3, #1
 8011e60:	d923      	bls.n	8011eaa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	68da      	ldr	r2, [r3, #12]
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e6c:	b292      	uxth	r2, r2
 8011e6e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e74:	1c9a      	adds	r2, r3, #2
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011e80:	b29b      	uxth	r3, r3
 8011e82:	3b02      	subs	r3, #2
 8011e84:	b29a      	uxth	r2, r3
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011e92:	b29b      	uxth	r3, r3
 8011e94:	2b01      	cmp	r3, #1
 8011e96:	d81f      	bhi.n	8011ed8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	685a      	ldr	r2, [r3, #4]
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011ea6:	605a      	str	r2, [r3, #4]
 8011ea8:	e016      	b.n	8011ed8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	f103 020c 	add.w	r2, r3, #12
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011eb6:	7812      	ldrb	r2, [r2, #0]
 8011eb8:	b2d2      	uxtb	r2, r2
 8011eba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011ec0:	1c5a      	adds	r2, r3, #1
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011ecc:	b29b      	uxth	r3, r3
 8011ece:	3b01      	subs	r3, #1
 8011ed0:	b29a      	uxth	r2, r3
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011ed8:	2301      	movs	r3, #1
 8011eda:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8011edc:	f7f8 ff14 	bl	800ad08 <HAL_GetTick>
 8011ee0:	4602      	mov	r2, r0
 8011ee2:	6a3b      	ldr	r3, [r7, #32]
 8011ee4:	1ad3      	subs	r3, r2, r3
 8011ee6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011ee8:	429a      	cmp	r2, r3
 8011eea:	d803      	bhi.n	8011ef4 <HAL_SPI_TransmitReceive+0x3c2>
 8011eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ef2:	d102      	bne.n	8011efa <HAL_SPI_TransmitReceive+0x3c8>
 8011ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d109      	bne.n	8011f0e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	2201      	movs	r2, #1
 8011efe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	2200      	movs	r2, #0
 8011f06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8011f0a:	2303      	movs	r3, #3
 8011f0c:	e02c      	b.n	8011f68 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011f12:	b29b      	uxth	r3, r3
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	f47f af55 	bne.w	8011dc4 <HAL_SPI_TransmitReceive+0x292>
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011f20:	b29b      	uxth	r3, r3
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	f47f af4e 	bne.w	8011dc4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011f28:	6a3a      	ldr	r2, [r7, #32]
 8011f2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011f2c:	68f8      	ldr	r0, [r7, #12]
 8011f2e:	f000 f995 	bl	801225c <SPI_EndRxTxTransaction>
 8011f32:	4603      	mov	r3, r0
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d008      	beq.n	8011f4a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	2220      	movs	r2, #32
 8011f3c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	2200      	movs	r2, #0
 8011f42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8011f46:	2301      	movs	r3, #1
 8011f48:	e00e      	b.n	8011f68 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	2201      	movs	r2, #1
 8011f4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	2200      	movs	r2, #0
 8011f56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d001      	beq.n	8011f66 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8011f62:	2301      	movs	r3, #1
 8011f64:	e000      	b.n	8011f68 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8011f66:	2300      	movs	r3, #0
  }
}
 8011f68:	4618      	mov	r0, r3
 8011f6a:	3728      	adds	r7, #40	@ 0x28
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	bd80      	pop	{r7, pc}

08011f70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b088      	sub	sp, #32
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	60f8      	str	r0, [r7, #12]
 8011f78:	60b9      	str	r1, [r7, #8]
 8011f7a:	603b      	str	r3, [r7, #0]
 8011f7c:	4613      	mov	r3, r2
 8011f7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8011f80:	f7f8 fec2 	bl	800ad08 <HAL_GetTick>
 8011f84:	4602      	mov	r2, r0
 8011f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f88:	1a9b      	subs	r3, r3, r2
 8011f8a:	683a      	ldr	r2, [r7, #0]
 8011f8c:	4413      	add	r3, r2
 8011f8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8011f90:	f7f8 feba 	bl	800ad08 <HAL_GetTick>
 8011f94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8011f96:	4b39      	ldr	r3, [pc, #228]	@ (801207c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	015b      	lsls	r3, r3, #5
 8011f9c:	0d1b      	lsrs	r3, r3, #20
 8011f9e:	69fa      	ldr	r2, [r7, #28]
 8011fa0:	fb02 f303 	mul.w	r3, r2, r3
 8011fa4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011fa6:	e054      	b.n	8012052 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011fa8:	683b      	ldr	r3, [r7, #0]
 8011faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fae:	d050      	beq.n	8012052 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011fb0:	f7f8 feaa 	bl	800ad08 <HAL_GetTick>
 8011fb4:	4602      	mov	r2, r0
 8011fb6:	69bb      	ldr	r3, [r7, #24]
 8011fb8:	1ad3      	subs	r3, r2, r3
 8011fba:	69fa      	ldr	r2, [r7, #28]
 8011fbc:	429a      	cmp	r2, r3
 8011fbe:	d902      	bls.n	8011fc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8011fc0:	69fb      	ldr	r3, [r7, #28]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d13d      	bne.n	8012042 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	685a      	ldr	r2, [r3, #4]
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8011fd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	685b      	ldr	r3, [r3, #4]
 8011fda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011fde:	d111      	bne.n	8012004 <SPI_WaitFlagStateUntilTimeout+0x94>
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	689b      	ldr	r3, [r3, #8]
 8011fe4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011fe8:	d004      	beq.n	8011ff4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	689b      	ldr	r3, [r3, #8]
 8011fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011ff2:	d107      	bne.n	8012004 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	681a      	ldr	r2, [r3, #0]
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012002:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012008:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801200c:	d10f      	bne.n	801202e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	681a      	ldr	r2, [r3, #0]
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801201c:	601a      	str	r2, [r3, #0]
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	681a      	ldr	r2, [r3, #0]
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801202c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	2201      	movs	r2, #1
 8012032:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	2200      	movs	r2, #0
 801203a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 801203e:	2303      	movs	r3, #3
 8012040:	e017      	b.n	8012072 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8012042:	697b      	ldr	r3, [r7, #20]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d101      	bne.n	801204c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8012048:	2300      	movs	r3, #0
 801204a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801204c:	697b      	ldr	r3, [r7, #20]
 801204e:	3b01      	subs	r3, #1
 8012050:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	689a      	ldr	r2, [r3, #8]
 8012058:	68bb      	ldr	r3, [r7, #8]
 801205a:	4013      	ands	r3, r2
 801205c:	68ba      	ldr	r2, [r7, #8]
 801205e:	429a      	cmp	r2, r3
 8012060:	bf0c      	ite	eq
 8012062:	2301      	moveq	r3, #1
 8012064:	2300      	movne	r3, #0
 8012066:	b2db      	uxtb	r3, r3
 8012068:	461a      	mov	r2, r3
 801206a:	79fb      	ldrb	r3, [r7, #7]
 801206c:	429a      	cmp	r2, r3
 801206e:	d19b      	bne.n	8011fa8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8012070:	2300      	movs	r3, #0
}
 8012072:	4618      	mov	r0, r3
 8012074:	3720      	adds	r7, #32
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}
 801207a:	bf00      	nop
 801207c:	20000168 	.word	0x20000168

08012080 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b08a      	sub	sp, #40	@ 0x28
 8012084:	af00      	add	r7, sp, #0
 8012086:	60f8      	str	r0, [r7, #12]
 8012088:	60b9      	str	r1, [r7, #8]
 801208a:	607a      	str	r2, [r7, #4]
 801208c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801208e:	2300      	movs	r3, #0
 8012090:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8012092:	f7f8 fe39 	bl	800ad08 <HAL_GetTick>
 8012096:	4602      	mov	r2, r0
 8012098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801209a:	1a9b      	subs	r3, r3, r2
 801209c:	683a      	ldr	r2, [r7, #0]
 801209e:	4413      	add	r3, r2
 80120a0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80120a2:	f7f8 fe31 	bl	800ad08 <HAL_GetTick>
 80120a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	330c      	adds	r3, #12
 80120ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80120b0:	4b3d      	ldr	r3, [pc, #244]	@ (80121a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80120b2:	681a      	ldr	r2, [r3, #0]
 80120b4:	4613      	mov	r3, r2
 80120b6:	009b      	lsls	r3, r3, #2
 80120b8:	4413      	add	r3, r2
 80120ba:	00da      	lsls	r2, r3, #3
 80120bc:	1ad3      	subs	r3, r2, r3
 80120be:	0d1b      	lsrs	r3, r3, #20
 80120c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80120c2:	fb02 f303 	mul.w	r3, r2, r3
 80120c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80120c8:	e060      	b.n	801218c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80120ca:	68bb      	ldr	r3, [r7, #8]
 80120cc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80120d0:	d107      	bne.n	80120e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d104      	bne.n	80120e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80120d8:	69fb      	ldr	r3, [r7, #28]
 80120da:	781b      	ldrb	r3, [r3, #0]
 80120dc:	b2db      	uxtb	r3, r3
 80120de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80120e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80120e2:	683b      	ldr	r3, [r7, #0]
 80120e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120e8:	d050      	beq.n	801218c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80120ea:	f7f8 fe0d 	bl	800ad08 <HAL_GetTick>
 80120ee:	4602      	mov	r2, r0
 80120f0:	6a3b      	ldr	r3, [r7, #32]
 80120f2:	1ad3      	subs	r3, r2, r3
 80120f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80120f6:	429a      	cmp	r2, r3
 80120f8:	d902      	bls.n	8012100 <SPI_WaitFifoStateUntilTimeout+0x80>
 80120fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d13d      	bne.n	801217c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	685a      	ldr	r2, [r3, #4]
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 801210e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	685b      	ldr	r3, [r3, #4]
 8012114:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012118:	d111      	bne.n	801213e <SPI_WaitFifoStateUntilTimeout+0xbe>
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	689b      	ldr	r3, [r3, #8]
 801211e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012122:	d004      	beq.n	801212e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	689b      	ldr	r3, [r3, #8]
 8012128:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801212c:	d107      	bne.n	801213e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	681a      	ldr	r2, [r3, #0]
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801213c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012142:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012146:	d10f      	bne.n	8012168 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	681a      	ldr	r2, [r3, #0]
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8012156:	601a      	str	r2, [r3, #0]
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	681a      	ldr	r2, [r3, #0]
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8012166:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	2201      	movs	r2, #1
 801216c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	2200      	movs	r2, #0
 8012174:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8012178:	2303      	movs	r3, #3
 801217a:	e010      	b.n	801219e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801217c:	69bb      	ldr	r3, [r7, #24]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d101      	bne.n	8012186 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8012182:	2300      	movs	r3, #0
 8012184:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8012186:	69bb      	ldr	r3, [r7, #24]
 8012188:	3b01      	subs	r3, #1
 801218a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	689a      	ldr	r2, [r3, #8]
 8012192:	68bb      	ldr	r3, [r7, #8]
 8012194:	4013      	ands	r3, r2
 8012196:	687a      	ldr	r2, [r7, #4]
 8012198:	429a      	cmp	r2, r3
 801219a:	d196      	bne.n	80120ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801219c:	2300      	movs	r3, #0
}
 801219e:	4618      	mov	r0, r3
 80121a0:	3728      	adds	r7, #40	@ 0x28
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}
 80121a6:	bf00      	nop
 80121a8:	20000168 	.word	0x20000168

080121ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b086      	sub	sp, #24
 80121b0:	af02      	add	r7, sp, #8
 80121b2:	60f8      	str	r0, [r7, #12]
 80121b4:	60b9      	str	r1, [r7, #8]
 80121b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	685b      	ldr	r3, [r3, #4]
 80121bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80121c0:	d111      	bne.n	80121e6 <SPI_EndRxTransaction+0x3a>
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	689b      	ldr	r3, [r3, #8]
 80121c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80121ca:	d004      	beq.n	80121d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	689b      	ldr	r3, [r3, #8]
 80121d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80121d4:	d107      	bne.n	80121e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	681a      	ldr	r2, [r3, #0]
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80121e4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	9300      	str	r3, [sp, #0]
 80121ea:	68bb      	ldr	r3, [r7, #8]
 80121ec:	2200      	movs	r2, #0
 80121ee:	2180      	movs	r1, #128	@ 0x80
 80121f0:	68f8      	ldr	r0, [r7, #12]
 80121f2:	f7ff febd 	bl	8011f70 <SPI_WaitFlagStateUntilTimeout>
 80121f6:	4603      	mov	r3, r0
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d007      	beq.n	801220c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012200:	f043 0220 	orr.w	r2, r3, #32
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8012208:	2303      	movs	r3, #3
 801220a:	e023      	b.n	8012254 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	685b      	ldr	r3, [r3, #4]
 8012210:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012214:	d11d      	bne.n	8012252 <SPI_EndRxTransaction+0xa6>
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	689b      	ldr	r3, [r3, #8]
 801221a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801221e:	d004      	beq.n	801222a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	689b      	ldr	r3, [r3, #8]
 8012224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012228:	d113      	bne.n	8012252 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	9300      	str	r3, [sp, #0]
 801222e:	68bb      	ldr	r3, [r7, #8]
 8012230:	2200      	movs	r2, #0
 8012232:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8012236:	68f8      	ldr	r0, [r7, #12]
 8012238:	f7ff ff22 	bl	8012080 <SPI_WaitFifoStateUntilTimeout>
 801223c:	4603      	mov	r3, r0
 801223e:	2b00      	cmp	r3, #0
 8012240:	d007      	beq.n	8012252 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012246:	f043 0220 	orr.w	r2, r3, #32
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 801224e:	2303      	movs	r3, #3
 8012250:	e000      	b.n	8012254 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8012252:	2300      	movs	r3, #0
}
 8012254:	4618      	mov	r0, r3
 8012256:	3710      	adds	r7, #16
 8012258:	46bd      	mov	sp, r7
 801225a:	bd80      	pop	{r7, pc}

0801225c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b086      	sub	sp, #24
 8012260:	af02      	add	r7, sp, #8
 8012262:	60f8      	str	r0, [r7, #12]
 8012264:	60b9      	str	r1, [r7, #8]
 8012266:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	9300      	str	r3, [sp, #0]
 801226c:	68bb      	ldr	r3, [r7, #8]
 801226e:	2200      	movs	r2, #0
 8012270:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8012274:	68f8      	ldr	r0, [r7, #12]
 8012276:	f7ff ff03 	bl	8012080 <SPI_WaitFifoStateUntilTimeout>
 801227a:	4603      	mov	r3, r0
 801227c:	2b00      	cmp	r3, #0
 801227e:	d007      	beq.n	8012290 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012284:	f043 0220 	orr.w	r2, r3, #32
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801228c:	2303      	movs	r3, #3
 801228e:	e027      	b.n	80122e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	9300      	str	r3, [sp, #0]
 8012294:	68bb      	ldr	r3, [r7, #8]
 8012296:	2200      	movs	r2, #0
 8012298:	2180      	movs	r1, #128	@ 0x80
 801229a:	68f8      	ldr	r0, [r7, #12]
 801229c:	f7ff fe68 	bl	8011f70 <SPI_WaitFlagStateUntilTimeout>
 80122a0:	4603      	mov	r3, r0
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d007      	beq.n	80122b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80122aa:	f043 0220 	orr.w	r2, r3, #32
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80122b2:	2303      	movs	r3, #3
 80122b4:	e014      	b.n	80122e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	9300      	str	r3, [sp, #0]
 80122ba:	68bb      	ldr	r3, [r7, #8]
 80122bc:	2200      	movs	r2, #0
 80122be:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80122c2:	68f8      	ldr	r0, [r7, #12]
 80122c4:	f7ff fedc 	bl	8012080 <SPI_WaitFifoStateUntilTimeout>
 80122c8:	4603      	mov	r3, r0
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d007      	beq.n	80122de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80122d2:	f043 0220 	orr.w	r2, r3, #32
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80122da:	2303      	movs	r3, #3
 80122dc:	e000      	b.n	80122e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80122de:	2300      	movs	r3, #0
}
 80122e0:	4618      	mov	r0, r3
 80122e2:	3710      	adds	r7, #16
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}

080122e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b082      	sub	sp, #8
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d101      	bne.n	80122fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80122f6:	2301      	movs	r3, #1
 80122f8:	e049      	b.n	801238e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012300:	b2db      	uxtb	r3, r3
 8012302:	2b00      	cmp	r3, #0
 8012304:	d106      	bne.n	8012314 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	2200      	movs	r2, #0
 801230a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801230e:	6878      	ldr	r0, [r7, #4]
 8012310:	f7f5 f9a8 	bl	8007664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2202      	movs	r2, #2
 8012318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	681a      	ldr	r2, [r3, #0]
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	3304      	adds	r3, #4
 8012324:	4619      	mov	r1, r3
 8012326:	4610      	mov	r0, r2
 8012328:	f001 fa58 	bl	80137dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	2201      	movs	r2, #1
 8012330:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	2201      	movs	r2, #1
 8012338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	2201      	movs	r2, #1
 8012340:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2201      	movs	r2, #1
 8012348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	2201      	movs	r2, #1
 8012350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2201      	movs	r2, #1
 8012358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	2201      	movs	r2, #1
 8012360:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2201      	movs	r2, #1
 8012368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	2201      	movs	r2, #1
 8012370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	2201      	movs	r2, #1
 8012378:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	2201      	movs	r2, #1
 8012380:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	2201      	movs	r2, #1
 8012388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801238c:	2300      	movs	r3, #0
}
 801238e:	4618      	mov	r0, r3
 8012390:	3708      	adds	r7, #8
 8012392:	46bd      	mov	sp, r7
 8012394:	bd80      	pop	{r7, pc}

08012396 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8012396:	b580      	push	{r7, lr}
 8012398:	b082      	sub	sp, #8
 801239a:	af00      	add	r7, sp, #0
 801239c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d101      	bne.n	80123a8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80123a4:	2301      	movs	r3, #1
 80123a6:	e049      	b.n	801243c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80123ae:	b2db      	uxtb	r3, r3
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d106      	bne.n	80123c2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2200      	movs	r2, #0
 80123b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80123bc:	6878      	ldr	r0, [r7, #4]
 80123be:	f7f5 f8f1 	bl	80075a4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	2202      	movs	r2, #2
 80123c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	681a      	ldr	r2, [r3, #0]
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	3304      	adds	r3, #4
 80123d2:	4619      	mov	r1, r3
 80123d4:	4610      	mov	r0, r2
 80123d6:	f001 fa01 	bl	80137dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	2201      	movs	r2, #1
 80123de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	2201      	movs	r2, #1
 80123e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	2201      	movs	r2, #1
 80123ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	2201      	movs	r2, #1
 80123f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	2201      	movs	r2, #1
 80123fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	2201      	movs	r2, #1
 8012406:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2201      	movs	r2, #1
 801240e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	2201      	movs	r2, #1
 8012416:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2201      	movs	r2, #1
 801241e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	2201      	movs	r2, #1
 8012426:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	2201      	movs	r2, #1
 801242e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	2201      	movs	r2, #1
 8012436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801243a:	2300      	movs	r3, #0
}
 801243c:	4618      	mov	r0, r3
 801243e:	3708      	adds	r7, #8
 8012440:	46bd      	mov	sp, r7
 8012442:	bd80      	pop	{r7, pc}

08012444 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012444:	b580      	push	{r7, lr}
 8012446:	b084      	sub	sp, #16
 8012448:	af00      	add	r7, sp, #0
 801244a:	6078      	str	r0, [r7, #4]
 801244c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801244e:	2300      	movs	r3, #0
 8012450:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012452:	683b      	ldr	r3, [r7, #0]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d109      	bne.n	801246c <HAL_TIM_OC_Start_IT+0x28>
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801245e:	b2db      	uxtb	r3, r3
 8012460:	2b01      	cmp	r3, #1
 8012462:	bf14      	ite	ne
 8012464:	2301      	movne	r3, #1
 8012466:	2300      	moveq	r3, #0
 8012468:	b2db      	uxtb	r3, r3
 801246a:	e03c      	b.n	80124e6 <HAL_TIM_OC_Start_IT+0xa2>
 801246c:	683b      	ldr	r3, [r7, #0]
 801246e:	2b04      	cmp	r3, #4
 8012470:	d109      	bne.n	8012486 <HAL_TIM_OC_Start_IT+0x42>
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8012478:	b2db      	uxtb	r3, r3
 801247a:	2b01      	cmp	r3, #1
 801247c:	bf14      	ite	ne
 801247e:	2301      	movne	r3, #1
 8012480:	2300      	moveq	r3, #0
 8012482:	b2db      	uxtb	r3, r3
 8012484:	e02f      	b.n	80124e6 <HAL_TIM_OC_Start_IT+0xa2>
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	2b08      	cmp	r3, #8
 801248a:	d109      	bne.n	80124a0 <HAL_TIM_OC_Start_IT+0x5c>
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012492:	b2db      	uxtb	r3, r3
 8012494:	2b01      	cmp	r3, #1
 8012496:	bf14      	ite	ne
 8012498:	2301      	movne	r3, #1
 801249a:	2300      	moveq	r3, #0
 801249c:	b2db      	uxtb	r3, r3
 801249e:	e022      	b.n	80124e6 <HAL_TIM_OC_Start_IT+0xa2>
 80124a0:	683b      	ldr	r3, [r7, #0]
 80124a2:	2b0c      	cmp	r3, #12
 80124a4:	d109      	bne.n	80124ba <HAL_TIM_OC_Start_IT+0x76>
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80124ac:	b2db      	uxtb	r3, r3
 80124ae:	2b01      	cmp	r3, #1
 80124b0:	bf14      	ite	ne
 80124b2:	2301      	movne	r3, #1
 80124b4:	2300      	moveq	r3, #0
 80124b6:	b2db      	uxtb	r3, r3
 80124b8:	e015      	b.n	80124e6 <HAL_TIM_OC_Start_IT+0xa2>
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	2b10      	cmp	r3, #16
 80124be:	d109      	bne.n	80124d4 <HAL_TIM_OC_Start_IT+0x90>
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80124c6:	b2db      	uxtb	r3, r3
 80124c8:	2b01      	cmp	r3, #1
 80124ca:	bf14      	ite	ne
 80124cc:	2301      	movne	r3, #1
 80124ce:	2300      	moveq	r3, #0
 80124d0:	b2db      	uxtb	r3, r3
 80124d2:	e008      	b.n	80124e6 <HAL_TIM_OC_Start_IT+0xa2>
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80124da:	b2db      	uxtb	r3, r3
 80124dc:	2b01      	cmp	r3, #1
 80124de:	bf14      	ite	ne
 80124e0:	2301      	movne	r3, #1
 80124e2:	2300      	moveq	r3, #0
 80124e4:	b2db      	uxtb	r3, r3
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d001      	beq.n	80124ee <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80124ea:	2301      	movs	r3, #1
 80124ec:	e0e7      	b.n	80126be <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80124ee:	683b      	ldr	r3, [r7, #0]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d104      	bne.n	80124fe <HAL_TIM_OC_Start_IT+0xba>
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	2202      	movs	r2, #2
 80124f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80124fc:	e023      	b.n	8012546 <HAL_TIM_OC_Start_IT+0x102>
 80124fe:	683b      	ldr	r3, [r7, #0]
 8012500:	2b04      	cmp	r3, #4
 8012502:	d104      	bne.n	801250e <HAL_TIM_OC_Start_IT+0xca>
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	2202      	movs	r2, #2
 8012508:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801250c:	e01b      	b.n	8012546 <HAL_TIM_OC_Start_IT+0x102>
 801250e:	683b      	ldr	r3, [r7, #0]
 8012510:	2b08      	cmp	r3, #8
 8012512:	d104      	bne.n	801251e <HAL_TIM_OC_Start_IT+0xda>
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2202      	movs	r2, #2
 8012518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801251c:	e013      	b.n	8012546 <HAL_TIM_OC_Start_IT+0x102>
 801251e:	683b      	ldr	r3, [r7, #0]
 8012520:	2b0c      	cmp	r3, #12
 8012522:	d104      	bne.n	801252e <HAL_TIM_OC_Start_IT+0xea>
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2202      	movs	r2, #2
 8012528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801252c:	e00b      	b.n	8012546 <HAL_TIM_OC_Start_IT+0x102>
 801252e:	683b      	ldr	r3, [r7, #0]
 8012530:	2b10      	cmp	r3, #16
 8012532:	d104      	bne.n	801253e <HAL_TIM_OC_Start_IT+0xfa>
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	2202      	movs	r2, #2
 8012538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801253c:	e003      	b.n	8012546 <HAL_TIM_OC_Start_IT+0x102>
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	2202      	movs	r2, #2
 8012542:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	2b0c      	cmp	r3, #12
 801254a:	d841      	bhi.n	80125d0 <HAL_TIM_OC_Start_IT+0x18c>
 801254c:	a201      	add	r2, pc, #4	@ (adr r2, 8012554 <HAL_TIM_OC_Start_IT+0x110>)
 801254e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012552:	bf00      	nop
 8012554:	08012589 	.word	0x08012589
 8012558:	080125d1 	.word	0x080125d1
 801255c:	080125d1 	.word	0x080125d1
 8012560:	080125d1 	.word	0x080125d1
 8012564:	0801259b 	.word	0x0801259b
 8012568:	080125d1 	.word	0x080125d1
 801256c:	080125d1 	.word	0x080125d1
 8012570:	080125d1 	.word	0x080125d1
 8012574:	080125ad 	.word	0x080125ad
 8012578:	080125d1 	.word	0x080125d1
 801257c:	080125d1 	.word	0x080125d1
 8012580:	080125d1 	.word	0x080125d1
 8012584:	080125bf 	.word	0x080125bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	68da      	ldr	r2, [r3, #12]
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	f042 0202 	orr.w	r2, r2, #2
 8012596:	60da      	str	r2, [r3, #12]
      break;
 8012598:	e01d      	b.n	80125d6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	68da      	ldr	r2, [r3, #12]
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	f042 0204 	orr.w	r2, r2, #4
 80125a8:	60da      	str	r2, [r3, #12]
      break;
 80125aa:	e014      	b.n	80125d6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	68da      	ldr	r2, [r3, #12]
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	f042 0208 	orr.w	r2, r2, #8
 80125ba:	60da      	str	r2, [r3, #12]
      break;
 80125bc:	e00b      	b.n	80125d6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	68da      	ldr	r2, [r3, #12]
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	f042 0210 	orr.w	r2, r2, #16
 80125cc:	60da      	str	r2, [r3, #12]
      break;
 80125ce:	e002      	b.n	80125d6 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80125d0:	2301      	movs	r3, #1
 80125d2:	73fb      	strb	r3, [r7, #15]
      break;
 80125d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80125d6:	7bfb      	ldrb	r3, [r7, #15]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d16f      	bne.n	80126bc <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	2201      	movs	r2, #1
 80125e2:	6839      	ldr	r1, [r7, #0]
 80125e4:	4618      	mov	r0, r3
 80125e6:	f001 fec7 	bl	8014378 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	4a36      	ldr	r2, [pc, #216]	@ (80126c8 <HAL_TIM_OC_Start_IT+0x284>)
 80125f0:	4293      	cmp	r3, r2
 80125f2:	d013      	beq.n	801261c <HAL_TIM_OC_Start_IT+0x1d8>
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	4a34      	ldr	r2, [pc, #208]	@ (80126cc <HAL_TIM_OC_Start_IT+0x288>)
 80125fa:	4293      	cmp	r3, r2
 80125fc:	d00e      	beq.n	801261c <HAL_TIM_OC_Start_IT+0x1d8>
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	4a33      	ldr	r2, [pc, #204]	@ (80126d0 <HAL_TIM_OC_Start_IT+0x28c>)
 8012604:	4293      	cmp	r3, r2
 8012606:	d009      	beq.n	801261c <HAL_TIM_OC_Start_IT+0x1d8>
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	4a31      	ldr	r2, [pc, #196]	@ (80126d4 <HAL_TIM_OC_Start_IT+0x290>)
 801260e:	4293      	cmp	r3, r2
 8012610:	d004      	beq.n	801261c <HAL_TIM_OC_Start_IT+0x1d8>
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	4a30      	ldr	r2, [pc, #192]	@ (80126d8 <HAL_TIM_OC_Start_IT+0x294>)
 8012618:	4293      	cmp	r3, r2
 801261a:	d101      	bne.n	8012620 <HAL_TIM_OC_Start_IT+0x1dc>
 801261c:	2301      	movs	r3, #1
 801261e:	e000      	b.n	8012622 <HAL_TIM_OC_Start_IT+0x1de>
 8012620:	2300      	movs	r3, #0
 8012622:	2b00      	cmp	r3, #0
 8012624:	d007      	beq.n	8012636 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012634:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	4a23      	ldr	r2, [pc, #140]	@ (80126c8 <HAL_TIM_OC_Start_IT+0x284>)
 801263c:	4293      	cmp	r3, r2
 801263e:	d01d      	beq.n	801267c <HAL_TIM_OC_Start_IT+0x238>
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012648:	d018      	beq.n	801267c <HAL_TIM_OC_Start_IT+0x238>
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	4a23      	ldr	r2, [pc, #140]	@ (80126dc <HAL_TIM_OC_Start_IT+0x298>)
 8012650:	4293      	cmp	r3, r2
 8012652:	d013      	beq.n	801267c <HAL_TIM_OC_Start_IT+0x238>
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	4a21      	ldr	r2, [pc, #132]	@ (80126e0 <HAL_TIM_OC_Start_IT+0x29c>)
 801265a:	4293      	cmp	r3, r2
 801265c:	d00e      	beq.n	801267c <HAL_TIM_OC_Start_IT+0x238>
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	4a20      	ldr	r2, [pc, #128]	@ (80126e4 <HAL_TIM_OC_Start_IT+0x2a0>)
 8012664:	4293      	cmp	r3, r2
 8012666:	d009      	beq.n	801267c <HAL_TIM_OC_Start_IT+0x238>
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	4a17      	ldr	r2, [pc, #92]	@ (80126cc <HAL_TIM_OC_Start_IT+0x288>)
 801266e:	4293      	cmp	r3, r2
 8012670:	d004      	beq.n	801267c <HAL_TIM_OC_Start_IT+0x238>
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	4a16      	ldr	r2, [pc, #88]	@ (80126d0 <HAL_TIM_OC_Start_IT+0x28c>)
 8012678:	4293      	cmp	r3, r2
 801267a:	d115      	bne.n	80126a8 <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	689a      	ldr	r2, [r3, #8]
 8012682:	4b19      	ldr	r3, [pc, #100]	@ (80126e8 <HAL_TIM_OC_Start_IT+0x2a4>)
 8012684:	4013      	ands	r3, r2
 8012686:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012688:	68bb      	ldr	r3, [r7, #8]
 801268a:	2b06      	cmp	r3, #6
 801268c:	d015      	beq.n	80126ba <HAL_TIM_OC_Start_IT+0x276>
 801268e:	68bb      	ldr	r3, [r7, #8]
 8012690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012694:	d011      	beq.n	80126ba <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	681a      	ldr	r2, [r3, #0]
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	f042 0201 	orr.w	r2, r2, #1
 80126a4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80126a6:	e008      	b.n	80126ba <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	681a      	ldr	r2, [r3, #0]
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	f042 0201 	orr.w	r2, r2, #1
 80126b6:	601a      	str	r2, [r3, #0]
 80126b8:	e000      	b.n	80126bc <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80126ba:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80126bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80126be:	4618      	mov	r0, r3
 80126c0:	3710      	adds	r7, #16
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}
 80126c6:	bf00      	nop
 80126c8:	40012c00 	.word	0x40012c00
 80126cc:	40013400 	.word	0x40013400
 80126d0:	40014000 	.word	0x40014000
 80126d4:	40014400 	.word	0x40014400
 80126d8:	40014800 	.word	0x40014800
 80126dc:	40000400 	.word	0x40000400
 80126e0:	40000800 	.word	0x40000800
 80126e4:	40000c00 	.word	0x40000c00
 80126e8:	00010007 	.word	0x00010007

080126ec <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b084      	sub	sp, #16
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
 80126f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80126f6:	2300      	movs	r3, #0
 80126f8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80126fa:	683b      	ldr	r3, [r7, #0]
 80126fc:	2b0c      	cmp	r3, #12
 80126fe:	d841      	bhi.n	8012784 <HAL_TIM_OC_Stop_IT+0x98>
 8012700:	a201      	add	r2, pc, #4	@ (adr r2, 8012708 <HAL_TIM_OC_Stop_IT+0x1c>)
 8012702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012706:	bf00      	nop
 8012708:	0801273d 	.word	0x0801273d
 801270c:	08012785 	.word	0x08012785
 8012710:	08012785 	.word	0x08012785
 8012714:	08012785 	.word	0x08012785
 8012718:	0801274f 	.word	0x0801274f
 801271c:	08012785 	.word	0x08012785
 8012720:	08012785 	.word	0x08012785
 8012724:	08012785 	.word	0x08012785
 8012728:	08012761 	.word	0x08012761
 801272c:	08012785 	.word	0x08012785
 8012730:	08012785 	.word	0x08012785
 8012734:	08012785 	.word	0x08012785
 8012738:	08012773 	.word	0x08012773
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	68da      	ldr	r2, [r3, #12]
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	f022 0202 	bic.w	r2, r2, #2
 801274a:	60da      	str	r2, [r3, #12]
      break;
 801274c:	e01d      	b.n	801278a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	68da      	ldr	r2, [r3, #12]
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	f022 0204 	bic.w	r2, r2, #4
 801275c:	60da      	str	r2, [r3, #12]
      break;
 801275e:	e014      	b.n	801278a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	68da      	ldr	r2, [r3, #12]
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	f022 0208 	bic.w	r2, r2, #8
 801276e:	60da      	str	r2, [r3, #12]
      break;
 8012770:	e00b      	b.n	801278a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	68da      	ldr	r2, [r3, #12]
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	f022 0210 	bic.w	r2, r2, #16
 8012780:	60da      	str	r2, [r3, #12]
      break;
 8012782:	e002      	b.n	801278a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8012784:	2301      	movs	r3, #1
 8012786:	73fb      	strb	r3, [r7, #15]
      break;
 8012788:	bf00      	nop
  }

  if (status == HAL_OK)
 801278a:	7bfb      	ldrb	r3, [r7, #15]
 801278c:	2b00      	cmp	r3, #0
 801278e:	f040 8081 	bne.w	8012894 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	2200      	movs	r2, #0
 8012798:	6839      	ldr	r1, [r7, #0]
 801279a:	4618      	mov	r0, r3
 801279c:	f001 fdec 	bl	8014378 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	4a3e      	ldr	r2, [pc, #248]	@ (80128a0 <HAL_TIM_OC_Stop_IT+0x1b4>)
 80127a6:	4293      	cmp	r3, r2
 80127a8:	d013      	beq.n	80127d2 <HAL_TIM_OC_Stop_IT+0xe6>
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	4a3d      	ldr	r2, [pc, #244]	@ (80128a4 <HAL_TIM_OC_Stop_IT+0x1b8>)
 80127b0:	4293      	cmp	r3, r2
 80127b2:	d00e      	beq.n	80127d2 <HAL_TIM_OC_Stop_IT+0xe6>
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	4a3b      	ldr	r2, [pc, #236]	@ (80128a8 <HAL_TIM_OC_Stop_IT+0x1bc>)
 80127ba:	4293      	cmp	r3, r2
 80127bc:	d009      	beq.n	80127d2 <HAL_TIM_OC_Stop_IT+0xe6>
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	4a3a      	ldr	r2, [pc, #232]	@ (80128ac <HAL_TIM_OC_Stop_IT+0x1c0>)
 80127c4:	4293      	cmp	r3, r2
 80127c6:	d004      	beq.n	80127d2 <HAL_TIM_OC_Stop_IT+0xe6>
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	4a38      	ldr	r2, [pc, #224]	@ (80128b0 <HAL_TIM_OC_Stop_IT+0x1c4>)
 80127ce:	4293      	cmp	r3, r2
 80127d0:	d101      	bne.n	80127d6 <HAL_TIM_OC_Stop_IT+0xea>
 80127d2:	2301      	movs	r3, #1
 80127d4:	e000      	b.n	80127d8 <HAL_TIM_OC_Stop_IT+0xec>
 80127d6:	2300      	movs	r3, #0
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d017      	beq.n	801280c <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	6a1a      	ldr	r2, [r3, #32]
 80127e2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80127e6:	4013      	ands	r3, r2
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d10f      	bne.n	801280c <HAL_TIM_OC_Stop_IT+0x120>
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	6a1a      	ldr	r2, [r3, #32]
 80127f2:	f240 4344 	movw	r3, #1092	@ 0x444
 80127f6:	4013      	ands	r3, r2
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d107      	bne.n	801280c <HAL_TIM_OC_Stop_IT+0x120>
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801280a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	6a1a      	ldr	r2, [r3, #32]
 8012812:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012816:	4013      	ands	r3, r2
 8012818:	2b00      	cmp	r3, #0
 801281a:	d10f      	bne.n	801283c <HAL_TIM_OC_Stop_IT+0x150>
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	6a1a      	ldr	r2, [r3, #32]
 8012822:	f240 4344 	movw	r3, #1092	@ 0x444
 8012826:	4013      	ands	r3, r2
 8012828:	2b00      	cmp	r3, #0
 801282a:	d107      	bne.n	801283c <HAL_TIM_OC_Stop_IT+0x150>
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	681a      	ldr	r2, [r3, #0]
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	f022 0201 	bic.w	r2, r2, #1
 801283a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801283c:	683b      	ldr	r3, [r7, #0]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d104      	bne.n	801284c <HAL_TIM_OC_Stop_IT+0x160>
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2201      	movs	r2, #1
 8012846:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801284a:	e023      	b.n	8012894 <HAL_TIM_OC_Stop_IT+0x1a8>
 801284c:	683b      	ldr	r3, [r7, #0]
 801284e:	2b04      	cmp	r3, #4
 8012850:	d104      	bne.n	801285c <HAL_TIM_OC_Stop_IT+0x170>
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	2201      	movs	r2, #1
 8012856:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801285a:	e01b      	b.n	8012894 <HAL_TIM_OC_Stop_IT+0x1a8>
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	2b08      	cmp	r3, #8
 8012860:	d104      	bne.n	801286c <HAL_TIM_OC_Stop_IT+0x180>
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	2201      	movs	r2, #1
 8012866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801286a:	e013      	b.n	8012894 <HAL_TIM_OC_Stop_IT+0x1a8>
 801286c:	683b      	ldr	r3, [r7, #0]
 801286e:	2b0c      	cmp	r3, #12
 8012870:	d104      	bne.n	801287c <HAL_TIM_OC_Stop_IT+0x190>
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	2201      	movs	r2, #1
 8012876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801287a:	e00b      	b.n	8012894 <HAL_TIM_OC_Stop_IT+0x1a8>
 801287c:	683b      	ldr	r3, [r7, #0]
 801287e:	2b10      	cmp	r3, #16
 8012880:	d104      	bne.n	801288c <HAL_TIM_OC_Stop_IT+0x1a0>
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	2201      	movs	r2, #1
 8012886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801288a:	e003      	b.n	8012894 <HAL_TIM_OC_Stop_IT+0x1a8>
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2201      	movs	r2, #1
 8012890:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8012894:	7bfb      	ldrb	r3, [r7, #15]
}
 8012896:	4618      	mov	r0, r3
 8012898:	3710      	adds	r7, #16
 801289a:	46bd      	mov	sp, r7
 801289c:	bd80      	pop	{r7, pc}
 801289e:	bf00      	nop
 80128a0:	40012c00 	.word	0x40012c00
 80128a4:	40013400 	.word	0x40013400
 80128a8:	40014000 	.word	0x40014000
 80128ac:	40014400 	.word	0x40014400
 80128b0:	40014800 	.word	0x40014800

080128b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	b082      	sub	sp, #8
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d101      	bne.n	80128c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80128c2:	2301      	movs	r3, #1
 80128c4:	e049      	b.n	801295a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80128cc:	b2db      	uxtb	r3, r3
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d106      	bne.n	80128e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	2200      	movs	r2, #0
 80128d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80128da:	6878      	ldr	r0, [r7, #4]
 80128dc:	f000 f841 	bl	8012962 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	2202      	movs	r2, #2
 80128e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	681a      	ldr	r2, [r3, #0]
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	3304      	adds	r3, #4
 80128f0:	4619      	mov	r1, r3
 80128f2:	4610      	mov	r0, r2
 80128f4:	f000 ff72 	bl	80137dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	2201      	movs	r2, #1
 80128fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	2201      	movs	r2, #1
 8012904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	2201      	movs	r2, #1
 801290c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	2201      	movs	r2, #1
 8012914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	2201      	movs	r2, #1
 801291c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	2201      	movs	r2, #1
 8012924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	2201      	movs	r2, #1
 801292c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2201      	movs	r2, #1
 8012934:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	2201      	movs	r2, #1
 801293c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	2201      	movs	r2, #1
 8012944:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	2201      	movs	r2, #1
 801294c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2201      	movs	r2, #1
 8012954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012958:	2300      	movs	r3, #0
}
 801295a:	4618      	mov	r0, r3
 801295c:	3708      	adds	r7, #8
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}

08012962 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8012962:	b480      	push	{r7}
 8012964:	b083      	sub	sp, #12
 8012966:	af00      	add	r7, sp, #0
 8012968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801296a:	bf00      	nop
 801296c:	370c      	adds	r7, #12
 801296e:	46bd      	mov	sp, r7
 8012970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012974:	4770      	bx	lr
	...

08012978 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b084      	sub	sp, #16
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
 8012980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d109      	bne.n	801299c <HAL_TIM_PWM_Start+0x24>
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801298e:	b2db      	uxtb	r3, r3
 8012990:	2b01      	cmp	r3, #1
 8012992:	bf14      	ite	ne
 8012994:	2301      	movne	r3, #1
 8012996:	2300      	moveq	r3, #0
 8012998:	b2db      	uxtb	r3, r3
 801299a:	e03c      	b.n	8012a16 <HAL_TIM_PWM_Start+0x9e>
 801299c:	683b      	ldr	r3, [r7, #0]
 801299e:	2b04      	cmp	r3, #4
 80129a0:	d109      	bne.n	80129b6 <HAL_TIM_PWM_Start+0x3e>
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80129a8:	b2db      	uxtb	r3, r3
 80129aa:	2b01      	cmp	r3, #1
 80129ac:	bf14      	ite	ne
 80129ae:	2301      	movne	r3, #1
 80129b0:	2300      	moveq	r3, #0
 80129b2:	b2db      	uxtb	r3, r3
 80129b4:	e02f      	b.n	8012a16 <HAL_TIM_PWM_Start+0x9e>
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	2b08      	cmp	r3, #8
 80129ba:	d109      	bne.n	80129d0 <HAL_TIM_PWM_Start+0x58>
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80129c2:	b2db      	uxtb	r3, r3
 80129c4:	2b01      	cmp	r3, #1
 80129c6:	bf14      	ite	ne
 80129c8:	2301      	movne	r3, #1
 80129ca:	2300      	moveq	r3, #0
 80129cc:	b2db      	uxtb	r3, r3
 80129ce:	e022      	b.n	8012a16 <HAL_TIM_PWM_Start+0x9e>
 80129d0:	683b      	ldr	r3, [r7, #0]
 80129d2:	2b0c      	cmp	r3, #12
 80129d4:	d109      	bne.n	80129ea <HAL_TIM_PWM_Start+0x72>
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80129dc:	b2db      	uxtb	r3, r3
 80129de:	2b01      	cmp	r3, #1
 80129e0:	bf14      	ite	ne
 80129e2:	2301      	movne	r3, #1
 80129e4:	2300      	moveq	r3, #0
 80129e6:	b2db      	uxtb	r3, r3
 80129e8:	e015      	b.n	8012a16 <HAL_TIM_PWM_Start+0x9e>
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	2b10      	cmp	r3, #16
 80129ee:	d109      	bne.n	8012a04 <HAL_TIM_PWM_Start+0x8c>
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80129f6:	b2db      	uxtb	r3, r3
 80129f8:	2b01      	cmp	r3, #1
 80129fa:	bf14      	ite	ne
 80129fc:	2301      	movne	r3, #1
 80129fe:	2300      	moveq	r3, #0
 8012a00:	b2db      	uxtb	r3, r3
 8012a02:	e008      	b.n	8012a16 <HAL_TIM_PWM_Start+0x9e>
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012a0a:	b2db      	uxtb	r3, r3
 8012a0c:	2b01      	cmp	r3, #1
 8012a0e:	bf14      	ite	ne
 8012a10:	2301      	movne	r3, #1
 8012a12:	2300      	moveq	r3, #0
 8012a14:	b2db      	uxtb	r3, r3
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d001      	beq.n	8012a1e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8012a1a:	2301      	movs	r3, #1
 8012a1c:	e09c      	b.n	8012b58 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012a1e:	683b      	ldr	r3, [r7, #0]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d104      	bne.n	8012a2e <HAL_TIM_PWM_Start+0xb6>
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	2202      	movs	r2, #2
 8012a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012a2c:	e023      	b.n	8012a76 <HAL_TIM_PWM_Start+0xfe>
 8012a2e:	683b      	ldr	r3, [r7, #0]
 8012a30:	2b04      	cmp	r3, #4
 8012a32:	d104      	bne.n	8012a3e <HAL_TIM_PWM_Start+0xc6>
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	2202      	movs	r2, #2
 8012a38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012a3c:	e01b      	b.n	8012a76 <HAL_TIM_PWM_Start+0xfe>
 8012a3e:	683b      	ldr	r3, [r7, #0]
 8012a40:	2b08      	cmp	r3, #8
 8012a42:	d104      	bne.n	8012a4e <HAL_TIM_PWM_Start+0xd6>
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	2202      	movs	r2, #2
 8012a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012a4c:	e013      	b.n	8012a76 <HAL_TIM_PWM_Start+0xfe>
 8012a4e:	683b      	ldr	r3, [r7, #0]
 8012a50:	2b0c      	cmp	r3, #12
 8012a52:	d104      	bne.n	8012a5e <HAL_TIM_PWM_Start+0xe6>
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	2202      	movs	r2, #2
 8012a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012a5c:	e00b      	b.n	8012a76 <HAL_TIM_PWM_Start+0xfe>
 8012a5e:	683b      	ldr	r3, [r7, #0]
 8012a60:	2b10      	cmp	r3, #16
 8012a62:	d104      	bne.n	8012a6e <HAL_TIM_PWM_Start+0xf6>
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	2202      	movs	r2, #2
 8012a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012a6c:	e003      	b.n	8012a76 <HAL_TIM_PWM_Start+0xfe>
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	2202      	movs	r2, #2
 8012a72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	2201      	movs	r2, #1
 8012a7c:	6839      	ldr	r1, [r7, #0]
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f001 fc7a 	bl	8014378 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	4a35      	ldr	r2, [pc, #212]	@ (8012b60 <HAL_TIM_PWM_Start+0x1e8>)
 8012a8a:	4293      	cmp	r3, r2
 8012a8c:	d013      	beq.n	8012ab6 <HAL_TIM_PWM_Start+0x13e>
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	4a34      	ldr	r2, [pc, #208]	@ (8012b64 <HAL_TIM_PWM_Start+0x1ec>)
 8012a94:	4293      	cmp	r3, r2
 8012a96:	d00e      	beq.n	8012ab6 <HAL_TIM_PWM_Start+0x13e>
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	4a32      	ldr	r2, [pc, #200]	@ (8012b68 <HAL_TIM_PWM_Start+0x1f0>)
 8012a9e:	4293      	cmp	r3, r2
 8012aa0:	d009      	beq.n	8012ab6 <HAL_TIM_PWM_Start+0x13e>
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	4a31      	ldr	r2, [pc, #196]	@ (8012b6c <HAL_TIM_PWM_Start+0x1f4>)
 8012aa8:	4293      	cmp	r3, r2
 8012aaa:	d004      	beq.n	8012ab6 <HAL_TIM_PWM_Start+0x13e>
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	4a2f      	ldr	r2, [pc, #188]	@ (8012b70 <HAL_TIM_PWM_Start+0x1f8>)
 8012ab2:	4293      	cmp	r3, r2
 8012ab4:	d101      	bne.n	8012aba <HAL_TIM_PWM_Start+0x142>
 8012ab6:	2301      	movs	r3, #1
 8012ab8:	e000      	b.n	8012abc <HAL_TIM_PWM_Start+0x144>
 8012aba:	2300      	movs	r3, #0
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d007      	beq.n	8012ad0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012ace:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	4a22      	ldr	r2, [pc, #136]	@ (8012b60 <HAL_TIM_PWM_Start+0x1e8>)
 8012ad6:	4293      	cmp	r3, r2
 8012ad8:	d01d      	beq.n	8012b16 <HAL_TIM_PWM_Start+0x19e>
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012ae2:	d018      	beq.n	8012b16 <HAL_TIM_PWM_Start+0x19e>
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	4a22      	ldr	r2, [pc, #136]	@ (8012b74 <HAL_TIM_PWM_Start+0x1fc>)
 8012aea:	4293      	cmp	r3, r2
 8012aec:	d013      	beq.n	8012b16 <HAL_TIM_PWM_Start+0x19e>
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	4a21      	ldr	r2, [pc, #132]	@ (8012b78 <HAL_TIM_PWM_Start+0x200>)
 8012af4:	4293      	cmp	r3, r2
 8012af6:	d00e      	beq.n	8012b16 <HAL_TIM_PWM_Start+0x19e>
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	4a1f      	ldr	r2, [pc, #124]	@ (8012b7c <HAL_TIM_PWM_Start+0x204>)
 8012afe:	4293      	cmp	r3, r2
 8012b00:	d009      	beq.n	8012b16 <HAL_TIM_PWM_Start+0x19e>
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	4a17      	ldr	r2, [pc, #92]	@ (8012b64 <HAL_TIM_PWM_Start+0x1ec>)
 8012b08:	4293      	cmp	r3, r2
 8012b0a:	d004      	beq.n	8012b16 <HAL_TIM_PWM_Start+0x19e>
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	4a15      	ldr	r2, [pc, #84]	@ (8012b68 <HAL_TIM_PWM_Start+0x1f0>)
 8012b12:	4293      	cmp	r3, r2
 8012b14:	d115      	bne.n	8012b42 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	689a      	ldr	r2, [r3, #8]
 8012b1c:	4b18      	ldr	r3, [pc, #96]	@ (8012b80 <HAL_TIM_PWM_Start+0x208>)
 8012b1e:	4013      	ands	r3, r2
 8012b20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	2b06      	cmp	r3, #6
 8012b26:	d015      	beq.n	8012b54 <HAL_TIM_PWM_Start+0x1dc>
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012b2e:	d011      	beq.n	8012b54 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	681a      	ldr	r2, [r3, #0]
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	f042 0201 	orr.w	r2, r2, #1
 8012b3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012b40:	e008      	b.n	8012b54 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	681a      	ldr	r2, [r3, #0]
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	f042 0201 	orr.w	r2, r2, #1
 8012b50:	601a      	str	r2, [r3, #0]
 8012b52:	e000      	b.n	8012b56 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012b54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012b56:	2300      	movs	r3, #0
}
 8012b58:	4618      	mov	r0, r3
 8012b5a:	3710      	adds	r7, #16
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bd80      	pop	{r7, pc}
 8012b60:	40012c00 	.word	0x40012c00
 8012b64:	40013400 	.word	0x40013400
 8012b68:	40014000 	.word	0x40014000
 8012b6c:	40014400 	.word	0x40014400
 8012b70:	40014800 	.word	0x40014800
 8012b74:	40000400 	.word	0x40000400
 8012b78:	40000800 	.word	0x40000800
 8012b7c:	40000c00 	.word	0x40000c00
 8012b80:	00010007 	.word	0x00010007

08012b84 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b082      	sub	sp, #8
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
 8012b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	2200      	movs	r2, #0
 8012b94:	6839      	ldr	r1, [r7, #0]
 8012b96:	4618      	mov	r0, r3
 8012b98:	f001 fbee 	bl	8014378 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	4a3e      	ldr	r2, [pc, #248]	@ (8012c9c <HAL_TIM_PWM_Stop+0x118>)
 8012ba2:	4293      	cmp	r3, r2
 8012ba4:	d013      	beq.n	8012bce <HAL_TIM_PWM_Stop+0x4a>
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	4a3d      	ldr	r2, [pc, #244]	@ (8012ca0 <HAL_TIM_PWM_Stop+0x11c>)
 8012bac:	4293      	cmp	r3, r2
 8012bae:	d00e      	beq.n	8012bce <HAL_TIM_PWM_Stop+0x4a>
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	4a3b      	ldr	r2, [pc, #236]	@ (8012ca4 <HAL_TIM_PWM_Stop+0x120>)
 8012bb6:	4293      	cmp	r3, r2
 8012bb8:	d009      	beq.n	8012bce <HAL_TIM_PWM_Stop+0x4a>
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	4a3a      	ldr	r2, [pc, #232]	@ (8012ca8 <HAL_TIM_PWM_Stop+0x124>)
 8012bc0:	4293      	cmp	r3, r2
 8012bc2:	d004      	beq.n	8012bce <HAL_TIM_PWM_Stop+0x4a>
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	4a38      	ldr	r2, [pc, #224]	@ (8012cac <HAL_TIM_PWM_Stop+0x128>)
 8012bca:	4293      	cmp	r3, r2
 8012bcc:	d101      	bne.n	8012bd2 <HAL_TIM_PWM_Stop+0x4e>
 8012bce:	2301      	movs	r3, #1
 8012bd0:	e000      	b.n	8012bd4 <HAL_TIM_PWM_Stop+0x50>
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d017      	beq.n	8012c08 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	6a1a      	ldr	r2, [r3, #32]
 8012bde:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012be2:	4013      	ands	r3, r2
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d10f      	bne.n	8012c08 <HAL_TIM_PWM_Stop+0x84>
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	6a1a      	ldr	r2, [r3, #32]
 8012bee:	f240 4344 	movw	r3, #1092	@ 0x444
 8012bf2:	4013      	ands	r3, r2
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d107      	bne.n	8012c08 <HAL_TIM_PWM_Stop+0x84>
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8012c06:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	6a1a      	ldr	r2, [r3, #32]
 8012c0e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012c12:	4013      	ands	r3, r2
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d10f      	bne.n	8012c38 <HAL_TIM_PWM_Stop+0xb4>
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	6a1a      	ldr	r2, [r3, #32]
 8012c1e:	f240 4344 	movw	r3, #1092	@ 0x444
 8012c22:	4013      	ands	r3, r2
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d107      	bne.n	8012c38 <HAL_TIM_PWM_Stop+0xb4>
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	681a      	ldr	r2, [r3, #0]
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	f022 0201 	bic.w	r2, r2, #1
 8012c36:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012c38:	683b      	ldr	r3, [r7, #0]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d104      	bne.n	8012c48 <HAL_TIM_PWM_Stop+0xc4>
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	2201      	movs	r2, #1
 8012c42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012c46:	e023      	b.n	8012c90 <HAL_TIM_PWM_Stop+0x10c>
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	2b04      	cmp	r3, #4
 8012c4c:	d104      	bne.n	8012c58 <HAL_TIM_PWM_Stop+0xd4>
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	2201      	movs	r2, #1
 8012c52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012c56:	e01b      	b.n	8012c90 <HAL_TIM_PWM_Stop+0x10c>
 8012c58:	683b      	ldr	r3, [r7, #0]
 8012c5a:	2b08      	cmp	r3, #8
 8012c5c:	d104      	bne.n	8012c68 <HAL_TIM_PWM_Stop+0xe4>
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	2201      	movs	r2, #1
 8012c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012c66:	e013      	b.n	8012c90 <HAL_TIM_PWM_Stop+0x10c>
 8012c68:	683b      	ldr	r3, [r7, #0]
 8012c6a:	2b0c      	cmp	r3, #12
 8012c6c:	d104      	bne.n	8012c78 <HAL_TIM_PWM_Stop+0xf4>
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	2201      	movs	r2, #1
 8012c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012c76:	e00b      	b.n	8012c90 <HAL_TIM_PWM_Stop+0x10c>
 8012c78:	683b      	ldr	r3, [r7, #0]
 8012c7a:	2b10      	cmp	r3, #16
 8012c7c:	d104      	bne.n	8012c88 <HAL_TIM_PWM_Stop+0x104>
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	2201      	movs	r2, #1
 8012c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012c86:	e003      	b.n	8012c90 <HAL_TIM_PWM_Stop+0x10c>
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	2201      	movs	r2, #1
 8012c8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8012c90:	2300      	movs	r3, #0
}
 8012c92:	4618      	mov	r0, r3
 8012c94:	3708      	adds	r7, #8
 8012c96:	46bd      	mov	sp, r7
 8012c98:	bd80      	pop	{r7, pc}
 8012c9a:	bf00      	nop
 8012c9c:	40012c00 	.word	0x40012c00
 8012ca0:	40013400 	.word	0x40013400
 8012ca4:	40014000 	.word	0x40014000
 8012ca8:	40014400 	.word	0x40014400
 8012cac:	40014800 	.word	0x40014800

08012cb0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b082      	sub	sp, #8
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d101      	bne.n	8012cc2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8012cbe:	2301      	movs	r3, #1
 8012cc0:	e049      	b.n	8012d56 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012cc8:	b2db      	uxtb	r3, r3
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d106      	bne.n	8012cdc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8012cd6:	6878      	ldr	r0, [r7, #4]
 8012cd8:	f7f4 fc84 	bl	80075e4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	2202      	movs	r2, #2
 8012ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	681a      	ldr	r2, [r3, #0]
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	3304      	adds	r3, #4
 8012cec:	4619      	mov	r1, r3
 8012cee:	4610      	mov	r0, r2
 8012cf0:	f000 fd74 	bl	80137dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2201      	movs	r2, #1
 8012cf8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2201      	movs	r2, #1
 8012d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	2201      	movs	r2, #1
 8012d08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	2201      	movs	r2, #1
 8012d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2201      	movs	r2, #1
 8012d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	2201      	movs	r2, #1
 8012d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	2201      	movs	r2, #1
 8012d28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	2201      	movs	r2, #1
 8012d30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	2201      	movs	r2, #1
 8012d38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2201      	movs	r2, #1
 8012d40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	2201      	movs	r2, #1
 8012d48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	2201      	movs	r2, #1
 8012d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012d54:	2300      	movs	r3, #0
}
 8012d56:	4618      	mov	r0, r3
 8012d58:	3708      	adds	r7, #8
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	bd80      	pop	{r7, pc}
	...

08012d60 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b084      	sub	sp, #16
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
 8012d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012d6e:	683b      	ldr	r3, [r7, #0]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d104      	bne.n	8012d7e <HAL_TIM_IC_Start_IT+0x1e>
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012d7a:	b2db      	uxtb	r3, r3
 8012d7c:	e023      	b.n	8012dc6 <HAL_TIM_IC_Start_IT+0x66>
 8012d7e:	683b      	ldr	r3, [r7, #0]
 8012d80:	2b04      	cmp	r3, #4
 8012d82:	d104      	bne.n	8012d8e <HAL_TIM_IC_Start_IT+0x2e>
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8012d8a:	b2db      	uxtb	r3, r3
 8012d8c:	e01b      	b.n	8012dc6 <HAL_TIM_IC_Start_IT+0x66>
 8012d8e:	683b      	ldr	r3, [r7, #0]
 8012d90:	2b08      	cmp	r3, #8
 8012d92:	d104      	bne.n	8012d9e <HAL_TIM_IC_Start_IT+0x3e>
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012d9a:	b2db      	uxtb	r3, r3
 8012d9c:	e013      	b.n	8012dc6 <HAL_TIM_IC_Start_IT+0x66>
 8012d9e:	683b      	ldr	r3, [r7, #0]
 8012da0:	2b0c      	cmp	r3, #12
 8012da2:	d104      	bne.n	8012dae <HAL_TIM_IC_Start_IT+0x4e>
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012daa:	b2db      	uxtb	r3, r3
 8012dac:	e00b      	b.n	8012dc6 <HAL_TIM_IC_Start_IT+0x66>
 8012dae:	683b      	ldr	r3, [r7, #0]
 8012db0:	2b10      	cmp	r3, #16
 8012db2:	d104      	bne.n	8012dbe <HAL_TIM_IC_Start_IT+0x5e>
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012dba:	b2db      	uxtb	r3, r3
 8012dbc:	e003      	b.n	8012dc6 <HAL_TIM_IC_Start_IT+0x66>
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012dc4:	b2db      	uxtb	r3, r3
 8012dc6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d104      	bne.n	8012dd8 <HAL_TIM_IC_Start_IT+0x78>
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012dd4:	b2db      	uxtb	r3, r3
 8012dd6:	e013      	b.n	8012e00 <HAL_TIM_IC_Start_IT+0xa0>
 8012dd8:	683b      	ldr	r3, [r7, #0]
 8012dda:	2b04      	cmp	r3, #4
 8012ddc:	d104      	bne.n	8012de8 <HAL_TIM_IC_Start_IT+0x88>
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012de4:	b2db      	uxtb	r3, r3
 8012de6:	e00b      	b.n	8012e00 <HAL_TIM_IC_Start_IT+0xa0>
 8012de8:	683b      	ldr	r3, [r7, #0]
 8012dea:	2b08      	cmp	r3, #8
 8012dec:	d104      	bne.n	8012df8 <HAL_TIM_IC_Start_IT+0x98>
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8012df4:	b2db      	uxtb	r3, r3
 8012df6:	e003      	b.n	8012e00 <HAL_TIM_IC_Start_IT+0xa0>
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8012dfe:	b2db      	uxtb	r3, r3
 8012e00:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8012e02:	7bbb      	ldrb	r3, [r7, #14]
 8012e04:	2b01      	cmp	r3, #1
 8012e06:	d102      	bne.n	8012e0e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8012e08:	7b7b      	ldrb	r3, [r7, #13]
 8012e0a:	2b01      	cmp	r3, #1
 8012e0c:	d001      	beq.n	8012e12 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8012e0e:	2301      	movs	r3, #1
 8012e10:	e0dd      	b.n	8012fce <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012e12:	683b      	ldr	r3, [r7, #0]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d104      	bne.n	8012e22 <HAL_TIM_IC_Start_IT+0xc2>
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	2202      	movs	r2, #2
 8012e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012e20:	e023      	b.n	8012e6a <HAL_TIM_IC_Start_IT+0x10a>
 8012e22:	683b      	ldr	r3, [r7, #0]
 8012e24:	2b04      	cmp	r3, #4
 8012e26:	d104      	bne.n	8012e32 <HAL_TIM_IC_Start_IT+0xd2>
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	2202      	movs	r2, #2
 8012e2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012e30:	e01b      	b.n	8012e6a <HAL_TIM_IC_Start_IT+0x10a>
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	2b08      	cmp	r3, #8
 8012e36:	d104      	bne.n	8012e42 <HAL_TIM_IC_Start_IT+0xe2>
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	2202      	movs	r2, #2
 8012e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012e40:	e013      	b.n	8012e6a <HAL_TIM_IC_Start_IT+0x10a>
 8012e42:	683b      	ldr	r3, [r7, #0]
 8012e44:	2b0c      	cmp	r3, #12
 8012e46:	d104      	bne.n	8012e52 <HAL_TIM_IC_Start_IT+0xf2>
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	2202      	movs	r2, #2
 8012e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012e50:	e00b      	b.n	8012e6a <HAL_TIM_IC_Start_IT+0x10a>
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	2b10      	cmp	r3, #16
 8012e56:	d104      	bne.n	8012e62 <HAL_TIM_IC_Start_IT+0x102>
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	2202      	movs	r2, #2
 8012e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012e60:	e003      	b.n	8012e6a <HAL_TIM_IC_Start_IT+0x10a>
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	2202      	movs	r2, #2
 8012e66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d104      	bne.n	8012e7a <HAL_TIM_IC_Start_IT+0x11a>
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	2202      	movs	r2, #2
 8012e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012e78:	e013      	b.n	8012ea2 <HAL_TIM_IC_Start_IT+0x142>
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	2b04      	cmp	r3, #4
 8012e7e:	d104      	bne.n	8012e8a <HAL_TIM_IC_Start_IT+0x12a>
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	2202      	movs	r2, #2
 8012e84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012e88:	e00b      	b.n	8012ea2 <HAL_TIM_IC_Start_IT+0x142>
 8012e8a:	683b      	ldr	r3, [r7, #0]
 8012e8c:	2b08      	cmp	r3, #8
 8012e8e:	d104      	bne.n	8012e9a <HAL_TIM_IC_Start_IT+0x13a>
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	2202      	movs	r2, #2
 8012e94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012e98:	e003      	b.n	8012ea2 <HAL_TIM_IC_Start_IT+0x142>
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	2202      	movs	r2, #2
 8012e9e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8012ea2:	683b      	ldr	r3, [r7, #0]
 8012ea4:	2b0c      	cmp	r3, #12
 8012ea6:	d841      	bhi.n	8012f2c <HAL_TIM_IC_Start_IT+0x1cc>
 8012ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8012eb0 <HAL_TIM_IC_Start_IT+0x150>)
 8012eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012eae:	bf00      	nop
 8012eb0:	08012ee5 	.word	0x08012ee5
 8012eb4:	08012f2d 	.word	0x08012f2d
 8012eb8:	08012f2d 	.word	0x08012f2d
 8012ebc:	08012f2d 	.word	0x08012f2d
 8012ec0:	08012ef7 	.word	0x08012ef7
 8012ec4:	08012f2d 	.word	0x08012f2d
 8012ec8:	08012f2d 	.word	0x08012f2d
 8012ecc:	08012f2d 	.word	0x08012f2d
 8012ed0:	08012f09 	.word	0x08012f09
 8012ed4:	08012f2d 	.word	0x08012f2d
 8012ed8:	08012f2d 	.word	0x08012f2d
 8012edc:	08012f2d 	.word	0x08012f2d
 8012ee0:	08012f1b 	.word	0x08012f1b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	68da      	ldr	r2, [r3, #12]
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	f042 0202 	orr.w	r2, r2, #2
 8012ef2:	60da      	str	r2, [r3, #12]
      break;
 8012ef4:	e01d      	b.n	8012f32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	68da      	ldr	r2, [r3, #12]
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	f042 0204 	orr.w	r2, r2, #4
 8012f04:	60da      	str	r2, [r3, #12]
      break;
 8012f06:	e014      	b.n	8012f32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	68da      	ldr	r2, [r3, #12]
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	f042 0208 	orr.w	r2, r2, #8
 8012f16:	60da      	str	r2, [r3, #12]
      break;
 8012f18:	e00b      	b.n	8012f32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	68da      	ldr	r2, [r3, #12]
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	f042 0210 	orr.w	r2, r2, #16
 8012f28:	60da      	str	r2, [r3, #12]
      break;
 8012f2a:	e002      	b.n	8012f32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8012f2c:	2301      	movs	r3, #1
 8012f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8012f30:	bf00      	nop
  }

  if (status == HAL_OK)
 8012f32:	7bfb      	ldrb	r3, [r7, #15]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d149      	bne.n	8012fcc <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	2201      	movs	r2, #1
 8012f3e:	6839      	ldr	r1, [r7, #0]
 8012f40:	4618      	mov	r0, r3
 8012f42:	f001 fa19 	bl	8014378 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	4a23      	ldr	r2, [pc, #140]	@ (8012fd8 <HAL_TIM_IC_Start_IT+0x278>)
 8012f4c:	4293      	cmp	r3, r2
 8012f4e:	d01d      	beq.n	8012f8c <HAL_TIM_IC_Start_IT+0x22c>
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012f58:	d018      	beq.n	8012f8c <HAL_TIM_IC_Start_IT+0x22c>
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8012fdc <HAL_TIM_IC_Start_IT+0x27c>)
 8012f60:	4293      	cmp	r3, r2
 8012f62:	d013      	beq.n	8012f8c <HAL_TIM_IC_Start_IT+0x22c>
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	4a1d      	ldr	r2, [pc, #116]	@ (8012fe0 <HAL_TIM_IC_Start_IT+0x280>)
 8012f6a:	4293      	cmp	r3, r2
 8012f6c:	d00e      	beq.n	8012f8c <HAL_TIM_IC_Start_IT+0x22c>
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	4a1c      	ldr	r2, [pc, #112]	@ (8012fe4 <HAL_TIM_IC_Start_IT+0x284>)
 8012f74:	4293      	cmp	r3, r2
 8012f76:	d009      	beq.n	8012f8c <HAL_TIM_IC_Start_IT+0x22c>
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	4a1a      	ldr	r2, [pc, #104]	@ (8012fe8 <HAL_TIM_IC_Start_IT+0x288>)
 8012f7e:	4293      	cmp	r3, r2
 8012f80:	d004      	beq.n	8012f8c <HAL_TIM_IC_Start_IT+0x22c>
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	4a19      	ldr	r2, [pc, #100]	@ (8012fec <HAL_TIM_IC_Start_IT+0x28c>)
 8012f88:	4293      	cmp	r3, r2
 8012f8a:	d115      	bne.n	8012fb8 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	689a      	ldr	r2, [r3, #8]
 8012f92:	4b17      	ldr	r3, [pc, #92]	@ (8012ff0 <HAL_TIM_IC_Start_IT+0x290>)
 8012f94:	4013      	ands	r3, r2
 8012f96:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012f98:	68bb      	ldr	r3, [r7, #8]
 8012f9a:	2b06      	cmp	r3, #6
 8012f9c:	d015      	beq.n	8012fca <HAL_TIM_IC_Start_IT+0x26a>
 8012f9e:	68bb      	ldr	r3, [r7, #8]
 8012fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012fa4:	d011      	beq.n	8012fca <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	681a      	ldr	r2, [r3, #0]
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	f042 0201 	orr.w	r2, r2, #1
 8012fb4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012fb6:	e008      	b.n	8012fca <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	681a      	ldr	r2, [r3, #0]
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	f042 0201 	orr.w	r2, r2, #1
 8012fc6:	601a      	str	r2, [r3, #0]
 8012fc8:	e000      	b.n	8012fcc <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012fca:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	3710      	adds	r7, #16
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}
 8012fd6:	bf00      	nop
 8012fd8:	40012c00 	.word	0x40012c00
 8012fdc:	40000400 	.word	0x40000400
 8012fe0:	40000800 	.word	0x40000800
 8012fe4:	40000c00 	.word	0x40000c00
 8012fe8:	40013400 	.word	0x40013400
 8012fec:	40014000 	.word	0x40014000
 8012ff0:	00010007 	.word	0x00010007

08012ff4 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b084      	sub	sp, #16
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
 8012ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012ffe:	2300      	movs	r3, #0
 8013000:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	2b0c      	cmp	r3, #12
 8013006:	d841      	bhi.n	801308c <HAL_TIM_IC_Stop_IT+0x98>
 8013008:	a201      	add	r2, pc, #4	@ (adr r2, 8013010 <HAL_TIM_IC_Stop_IT+0x1c>)
 801300a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801300e:	bf00      	nop
 8013010:	08013045 	.word	0x08013045
 8013014:	0801308d 	.word	0x0801308d
 8013018:	0801308d 	.word	0x0801308d
 801301c:	0801308d 	.word	0x0801308d
 8013020:	08013057 	.word	0x08013057
 8013024:	0801308d 	.word	0x0801308d
 8013028:	0801308d 	.word	0x0801308d
 801302c:	0801308d 	.word	0x0801308d
 8013030:	08013069 	.word	0x08013069
 8013034:	0801308d 	.word	0x0801308d
 8013038:	0801308d 	.word	0x0801308d
 801303c:	0801308d 	.word	0x0801308d
 8013040:	0801307b 	.word	0x0801307b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	68da      	ldr	r2, [r3, #12]
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	f022 0202 	bic.w	r2, r2, #2
 8013052:	60da      	str	r2, [r3, #12]
      break;
 8013054:	e01d      	b.n	8013092 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	68da      	ldr	r2, [r3, #12]
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	f022 0204 	bic.w	r2, r2, #4
 8013064:	60da      	str	r2, [r3, #12]
      break;
 8013066:	e014      	b.n	8013092 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	68da      	ldr	r2, [r3, #12]
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	f022 0208 	bic.w	r2, r2, #8
 8013076:	60da      	str	r2, [r3, #12]
      break;
 8013078:	e00b      	b.n	8013092 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	68da      	ldr	r2, [r3, #12]
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	f022 0210 	bic.w	r2, r2, #16
 8013088:	60da      	str	r2, [r3, #12]
      break;
 801308a:	e002      	b.n	8013092 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 801308c:	2301      	movs	r3, #1
 801308e:	73fb      	strb	r3, [r7, #15]
      break;
 8013090:	bf00      	nop
  }

  if (status == HAL_OK)
 8013092:	7bfb      	ldrb	r3, [r7, #15]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d166      	bne.n	8013166 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	2200      	movs	r2, #0
 801309e:	6839      	ldr	r1, [r7, #0]
 80130a0:	4618      	mov	r0, r3
 80130a2:	f001 f969 	bl	8014378 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	6a1a      	ldr	r2, [r3, #32]
 80130ac:	f241 1311 	movw	r3, #4369	@ 0x1111
 80130b0:	4013      	ands	r3, r2
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d10f      	bne.n	80130d6 <HAL_TIM_IC_Stop_IT+0xe2>
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	6a1a      	ldr	r2, [r3, #32]
 80130bc:	f240 4344 	movw	r3, #1092	@ 0x444
 80130c0:	4013      	ands	r3, r2
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d107      	bne.n	80130d6 <HAL_TIM_IC_Stop_IT+0xe2>
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	681a      	ldr	r2, [r3, #0]
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	f022 0201 	bic.w	r2, r2, #1
 80130d4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80130d6:	683b      	ldr	r3, [r7, #0]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d104      	bne.n	80130e6 <HAL_TIM_IC_Stop_IT+0xf2>
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	2201      	movs	r2, #1
 80130e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80130e4:	e023      	b.n	801312e <HAL_TIM_IC_Stop_IT+0x13a>
 80130e6:	683b      	ldr	r3, [r7, #0]
 80130e8:	2b04      	cmp	r3, #4
 80130ea:	d104      	bne.n	80130f6 <HAL_TIM_IC_Stop_IT+0x102>
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	2201      	movs	r2, #1
 80130f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80130f4:	e01b      	b.n	801312e <HAL_TIM_IC_Stop_IT+0x13a>
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	2b08      	cmp	r3, #8
 80130fa:	d104      	bne.n	8013106 <HAL_TIM_IC_Stop_IT+0x112>
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	2201      	movs	r2, #1
 8013100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013104:	e013      	b.n	801312e <HAL_TIM_IC_Stop_IT+0x13a>
 8013106:	683b      	ldr	r3, [r7, #0]
 8013108:	2b0c      	cmp	r3, #12
 801310a:	d104      	bne.n	8013116 <HAL_TIM_IC_Stop_IT+0x122>
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	2201      	movs	r2, #1
 8013110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013114:	e00b      	b.n	801312e <HAL_TIM_IC_Stop_IT+0x13a>
 8013116:	683b      	ldr	r3, [r7, #0]
 8013118:	2b10      	cmp	r3, #16
 801311a:	d104      	bne.n	8013126 <HAL_TIM_IC_Stop_IT+0x132>
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	2201      	movs	r2, #1
 8013120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013124:	e003      	b.n	801312e <HAL_TIM_IC_Stop_IT+0x13a>
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	2201      	movs	r2, #1
 801312a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801312e:	683b      	ldr	r3, [r7, #0]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d104      	bne.n	801313e <HAL_TIM_IC_Stop_IT+0x14a>
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2201      	movs	r2, #1
 8013138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801313c:	e013      	b.n	8013166 <HAL_TIM_IC_Stop_IT+0x172>
 801313e:	683b      	ldr	r3, [r7, #0]
 8013140:	2b04      	cmp	r3, #4
 8013142:	d104      	bne.n	801314e <HAL_TIM_IC_Stop_IT+0x15a>
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	2201      	movs	r2, #1
 8013148:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801314c:	e00b      	b.n	8013166 <HAL_TIM_IC_Stop_IT+0x172>
 801314e:	683b      	ldr	r3, [r7, #0]
 8013150:	2b08      	cmp	r3, #8
 8013152:	d104      	bne.n	801315e <HAL_TIM_IC_Stop_IT+0x16a>
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	2201      	movs	r2, #1
 8013158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801315c:	e003      	b.n	8013166 <HAL_TIM_IC_Stop_IT+0x172>
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	2201      	movs	r2, #1
 8013162:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 8013166:	7bfb      	ldrb	r3, [r7, #15]
}
 8013168:	4618      	mov	r0, r3
 801316a:	3710      	adds	r7, #16
 801316c:	46bd      	mov	sp, r7
 801316e:	bd80      	pop	{r7, pc}

08013170 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b086      	sub	sp, #24
 8013174:	af00      	add	r7, sp, #0
 8013176:	60f8      	str	r0, [r7, #12]
 8013178:	60b9      	str	r1, [r7, #8]
 801317a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801317c:	2300      	movs	r3, #0
 801317e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013186:	2b01      	cmp	r3, #1
 8013188:	d101      	bne.n	801318e <HAL_TIM_OC_ConfigChannel+0x1e>
 801318a:	2302      	movs	r3, #2
 801318c:	e066      	b.n	801325c <HAL_TIM_OC_ConfigChannel+0xec>
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	2201      	movs	r2, #1
 8013192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	2b14      	cmp	r3, #20
 801319a:	d857      	bhi.n	801324c <HAL_TIM_OC_ConfigChannel+0xdc>
 801319c:	a201      	add	r2, pc, #4	@ (adr r2, 80131a4 <HAL_TIM_OC_ConfigChannel+0x34>)
 801319e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131a2:	bf00      	nop
 80131a4:	080131f9 	.word	0x080131f9
 80131a8:	0801324d 	.word	0x0801324d
 80131ac:	0801324d 	.word	0x0801324d
 80131b0:	0801324d 	.word	0x0801324d
 80131b4:	08013207 	.word	0x08013207
 80131b8:	0801324d 	.word	0x0801324d
 80131bc:	0801324d 	.word	0x0801324d
 80131c0:	0801324d 	.word	0x0801324d
 80131c4:	08013215 	.word	0x08013215
 80131c8:	0801324d 	.word	0x0801324d
 80131cc:	0801324d 	.word	0x0801324d
 80131d0:	0801324d 	.word	0x0801324d
 80131d4:	08013223 	.word	0x08013223
 80131d8:	0801324d 	.word	0x0801324d
 80131dc:	0801324d 	.word	0x0801324d
 80131e0:	0801324d 	.word	0x0801324d
 80131e4:	08013231 	.word	0x08013231
 80131e8:	0801324d 	.word	0x0801324d
 80131ec:	0801324d 	.word	0x0801324d
 80131f0:	0801324d 	.word	0x0801324d
 80131f4:	0801323f 	.word	0x0801323f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	68b9      	ldr	r1, [r7, #8]
 80131fe:	4618      	mov	r0, r3
 8013200:	f000 fb92 	bl	8013928 <TIM_OC1_SetConfig>
      break;
 8013204:	e025      	b.n	8013252 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	68b9      	ldr	r1, [r7, #8]
 801320c:	4618      	mov	r0, r3
 801320e:	f000 fc1b 	bl	8013a48 <TIM_OC2_SetConfig>
      break;
 8013212:	e01e      	b.n	8013252 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	68b9      	ldr	r1, [r7, #8]
 801321a:	4618      	mov	r0, r3
 801321c:	f000 fc9e 	bl	8013b5c <TIM_OC3_SetConfig>
      break;
 8013220:	e017      	b.n	8013252 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	68b9      	ldr	r1, [r7, #8]
 8013228:	4618      	mov	r0, r3
 801322a:	f000 fd1f 	bl	8013c6c <TIM_OC4_SetConfig>
      break;
 801322e:	e010      	b.n	8013252 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	68b9      	ldr	r1, [r7, #8]
 8013236:	4618      	mov	r0, r3
 8013238:	f000 fd82 	bl	8013d40 <TIM_OC5_SetConfig>
      break;
 801323c:	e009      	b.n	8013252 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	68b9      	ldr	r1, [r7, #8]
 8013244:	4618      	mov	r0, r3
 8013246:	f000 fddf 	bl	8013e08 <TIM_OC6_SetConfig>
      break;
 801324a:	e002      	b.n	8013252 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 801324c:	2301      	movs	r3, #1
 801324e:	75fb      	strb	r3, [r7, #23]
      break;
 8013250:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	2200      	movs	r2, #0
 8013256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801325a:	7dfb      	ldrb	r3, [r7, #23]
}
 801325c:	4618      	mov	r0, r3
 801325e:	3718      	adds	r7, #24
 8013260:	46bd      	mov	sp, r7
 8013262:	bd80      	pop	{r7, pc}

08013264 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8013264:	b580      	push	{r7, lr}
 8013266:	b086      	sub	sp, #24
 8013268:	af00      	add	r7, sp, #0
 801326a:	60f8      	str	r0, [r7, #12]
 801326c:	60b9      	str	r1, [r7, #8]
 801326e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013270:	2300      	movs	r3, #0
 8013272:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801327a:	2b01      	cmp	r3, #1
 801327c:	d101      	bne.n	8013282 <HAL_TIM_IC_ConfigChannel+0x1e>
 801327e:	2302      	movs	r3, #2
 8013280:	e088      	b.n	8013394 <HAL_TIM_IC_ConfigChannel+0x130>
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	2201      	movs	r2, #1
 8013286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d11b      	bne.n	80132c8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8013294:	68bb      	ldr	r3, [r7, #8]
 8013296:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8013298:	68bb      	ldr	r3, [r7, #8]
 801329a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80132a0:	f000 feac 	bl	8013ffc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	699a      	ldr	r2, [r3, #24]
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	f022 020c 	bic.w	r2, r2, #12
 80132b2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	6999      	ldr	r1, [r3, #24]
 80132ba:	68bb      	ldr	r3, [r7, #8]
 80132bc:	689a      	ldr	r2, [r3, #8]
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	430a      	orrs	r2, r1
 80132c4:	619a      	str	r2, [r3, #24]
 80132c6:	e060      	b.n	801338a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2b04      	cmp	r3, #4
 80132cc:	d11c      	bne.n	8013308 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80132d2:	68bb      	ldr	r3, [r7, #8]
 80132d4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80132da:	68bb      	ldr	r3, [r7, #8]
 80132dc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80132de:	f000 ff2a 	bl	8014136 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	699a      	ldr	r2, [r3, #24]
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80132f0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	6999      	ldr	r1, [r3, #24]
 80132f8:	68bb      	ldr	r3, [r7, #8]
 80132fa:	689b      	ldr	r3, [r3, #8]
 80132fc:	021a      	lsls	r2, r3, #8
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	430a      	orrs	r2, r1
 8013304:	619a      	str	r2, [r3, #24]
 8013306:	e040      	b.n	801338a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	2b08      	cmp	r3, #8
 801330c:	d11b      	bne.n	8013346 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8013312:	68bb      	ldr	r3, [r7, #8]
 8013314:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8013316:	68bb      	ldr	r3, [r7, #8]
 8013318:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801331a:	68bb      	ldr	r3, [r7, #8]
 801331c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 801331e:	f000 ff77 	bl	8014210 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	69da      	ldr	r2, [r3, #28]
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	f022 020c 	bic.w	r2, r2, #12
 8013330:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	69d9      	ldr	r1, [r3, #28]
 8013338:	68bb      	ldr	r3, [r7, #8]
 801333a:	689a      	ldr	r2, [r3, #8]
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	430a      	orrs	r2, r1
 8013342:	61da      	str	r2, [r3, #28]
 8013344:	e021      	b.n	801338a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	2b0c      	cmp	r3, #12
 801334a:	d11c      	bne.n	8013386 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8013350:	68bb      	ldr	r3, [r7, #8]
 8013352:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8013354:	68bb      	ldr	r3, [r7, #8]
 8013356:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8013358:	68bb      	ldr	r3, [r7, #8]
 801335a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 801335c:	f000 ff94 	bl	8014288 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	69da      	ldr	r2, [r3, #28]
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 801336e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	69d9      	ldr	r1, [r3, #28]
 8013376:	68bb      	ldr	r3, [r7, #8]
 8013378:	689b      	ldr	r3, [r3, #8]
 801337a:	021a      	lsls	r2, r3, #8
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	430a      	orrs	r2, r1
 8013382:	61da      	str	r2, [r3, #28]
 8013384:	e001      	b.n	801338a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8013386:	2301      	movs	r3, #1
 8013388:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	2200      	movs	r2, #0
 801338e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8013392:	7dfb      	ldrb	r3, [r7, #23]
}
 8013394:	4618      	mov	r0, r3
 8013396:	3718      	adds	r7, #24
 8013398:	46bd      	mov	sp, r7
 801339a:	bd80      	pop	{r7, pc}

0801339c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801339c:	b580      	push	{r7, lr}
 801339e:	b086      	sub	sp, #24
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	60f8      	str	r0, [r7, #12]
 80133a4:	60b9      	str	r1, [r7, #8]
 80133a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80133a8:	2300      	movs	r3, #0
 80133aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80133b2:	2b01      	cmp	r3, #1
 80133b4:	d101      	bne.n	80133ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80133b6:	2302      	movs	r3, #2
 80133b8:	e0ff      	b.n	80135ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	2201      	movs	r2, #1
 80133be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	2b14      	cmp	r3, #20
 80133c6:	f200 80f0 	bhi.w	80135aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80133ca:	a201      	add	r2, pc, #4	@ (adr r2, 80133d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80133cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133d0:	08013425 	.word	0x08013425
 80133d4:	080135ab 	.word	0x080135ab
 80133d8:	080135ab 	.word	0x080135ab
 80133dc:	080135ab 	.word	0x080135ab
 80133e0:	08013465 	.word	0x08013465
 80133e4:	080135ab 	.word	0x080135ab
 80133e8:	080135ab 	.word	0x080135ab
 80133ec:	080135ab 	.word	0x080135ab
 80133f0:	080134a7 	.word	0x080134a7
 80133f4:	080135ab 	.word	0x080135ab
 80133f8:	080135ab 	.word	0x080135ab
 80133fc:	080135ab 	.word	0x080135ab
 8013400:	080134e7 	.word	0x080134e7
 8013404:	080135ab 	.word	0x080135ab
 8013408:	080135ab 	.word	0x080135ab
 801340c:	080135ab 	.word	0x080135ab
 8013410:	08013529 	.word	0x08013529
 8013414:	080135ab 	.word	0x080135ab
 8013418:	080135ab 	.word	0x080135ab
 801341c:	080135ab 	.word	0x080135ab
 8013420:	08013569 	.word	0x08013569
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	68b9      	ldr	r1, [r7, #8]
 801342a:	4618      	mov	r0, r3
 801342c:	f000 fa7c 	bl	8013928 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	699a      	ldr	r2, [r3, #24]
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	f042 0208 	orr.w	r2, r2, #8
 801343e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	699a      	ldr	r2, [r3, #24]
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	f022 0204 	bic.w	r2, r2, #4
 801344e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	6999      	ldr	r1, [r3, #24]
 8013456:	68bb      	ldr	r3, [r7, #8]
 8013458:	691a      	ldr	r2, [r3, #16]
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	430a      	orrs	r2, r1
 8013460:	619a      	str	r2, [r3, #24]
      break;
 8013462:	e0a5      	b.n	80135b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	68b9      	ldr	r1, [r7, #8]
 801346a:	4618      	mov	r0, r3
 801346c:	f000 faec 	bl	8013a48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	699a      	ldr	r2, [r3, #24]
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801347e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	699a      	ldr	r2, [r3, #24]
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801348e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	6999      	ldr	r1, [r3, #24]
 8013496:	68bb      	ldr	r3, [r7, #8]
 8013498:	691b      	ldr	r3, [r3, #16]
 801349a:	021a      	lsls	r2, r3, #8
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	430a      	orrs	r2, r1
 80134a2:	619a      	str	r2, [r3, #24]
      break;
 80134a4:	e084      	b.n	80135b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	68b9      	ldr	r1, [r7, #8]
 80134ac:	4618      	mov	r0, r3
 80134ae:	f000 fb55 	bl	8013b5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	69da      	ldr	r2, [r3, #28]
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	f042 0208 	orr.w	r2, r2, #8
 80134c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	69da      	ldr	r2, [r3, #28]
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	f022 0204 	bic.w	r2, r2, #4
 80134d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	69d9      	ldr	r1, [r3, #28]
 80134d8:	68bb      	ldr	r3, [r7, #8]
 80134da:	691a      	ldr	r2, [r3, #16]
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	430a      	orrs	r2, r1
 80134e2:	61da      	str	r2, [r3, #28]
      break;
 80134e4:	e064      	b.n	80135b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	68b9      	ldr	r1, [r7, #8]
 80134ec:	4618      	mov	r0, r3
 80134ee:	f000 fbbd 	bl	8013c6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	69da      	ldr	r2, [r3, #28]
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8013500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	69da      	ldr	r2, [r3, #28]
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8013510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	69d9      	ldr	r1, [r3, #28]
 8013518:	68bb      	ldr	r3, [r7, #8]
 801351a:	691b      	ldr	r3, [r3, #16]
 801351c:	021a      	lsls	r2, r3, #8
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	430a      	orrs	r2, r1
 8013524:	61da      	str	r2, [r3, #28]
      break;
 8013526:	e043      	b.n	80135b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	68b9      	ldr	r1, [r7, #8]
 801352e:	4618      	mov	r0, r3
 8013530:	f000 fc06 	bl	8013d40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	f042 0208 	orr.w	r2, r2, #8
 8013542:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	f022 0204 	bic.w	r2, r2, #4
 8013552:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801355a:	68bb      	ldr	r3, [r7, #8]
 801355c:	691a      	ldr	r2, [r3, #16]
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	430a      	orrs	r2, r1
 8013564:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8013566:	e023      	b.n	80135b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	68b9      	ldr	r1, [r7, #8]
 801356e:	4618      	mov	r0, r3
 8013570:	f000 fc4a 	bl	8013e08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8013582:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8013592:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801359a:	68bb      	ldr	r3, [r7, #8]
 801359c:	691b      	ldr	r3, [r3, #16]
 801359e:	021a      	lsls	r2, r3, #8
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	430a      	orrs	r2, r1
 80135a6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80135a8:	e002      	b.n	80135b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80135aa:	2301      	movs	r3, #1
 80135ac:	75fb      	strb	r3, [r7, #23]
      break;
 80135ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	2200      	movs	r2, #0
 80135b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80135b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80135ba:	4618      	mov	r0, r3
 80135bc:	3718      	adds	r7, #24
 80135be:	46bd      	mov	sp, r7
 80135c0:	bd80      	pop	{r7, pc}
 80135c2:	bf00      	nop

080135c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b084      	sub	sp, #16
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]
 80135cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80135ce:	2300      	movs	r3, #0
 80135d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80135d8:	2b01      	cmp	r3, #1
 80135da:	d101      	bne.n	80135e0 <HAL_TIM_ConfigClockSource+0x1c>
 80135dc:	2302      	movs	r3, #2
 80135de:	e0b6      	b.n	801374e <HAL_TIM_ConfigClockSource+0x18a>
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	2201      	movs	r2, #1
 80135e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	2202      	movs	r2, #2
 80135ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	689b      	ldr	r3, [r3, #8]
 80135f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80135f8:	68bb      	ldr	r3, [r7, #8]
 80135fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80135fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8013602:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013604:	68bb      	ldr	r3, [r7, #8]
 8013606:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801360a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	68ba      	ldr	r2, [r7, #8]
 8013612:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013614:	683b      	ldr	r3, [r7, #0]
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801361c:	d03e      	beq.n	801369c <HAL_TIM_ConfigClockSource+0xd8>
 801361e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013622:	f200 8087 	bhi.w	8013734 <HAL_TIM_ConfigClockSource+0x170>
 8013626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801362a:	f000 8086 	beq.w	801373a <HAL_TIM_ConfigClockSource+0x176>
 801362e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013632:	d87f      	bhi.n	8013734 <HAL_TIM_ConfigClockSource+0x170>
 8013634:	2b70      	cmp	r3, #112	@ 0x70
 8013636:	d01a      	beq.n	801366e <HAL_TIM_ConfigClockSource+0xaa>
 8013638:	2b70      	cmp	r3, #112	@ 0x70
 801363a:	d87b      	bhi.n	8013734 <HAL_TIM_ConfigClockSource+0x170>
 801363c:	2b60      	cmp	r3, #96	@ 0x60
 801363e:	d050      	beq.n	80136e2 <HAL_TIM_ConfigClockSource+0x11e>
 8013640:	2b60      	cmp	r3, #96	@ 0x60
 8013642:	d877      	bhi.n	8013734 <HAL_TIM_ConfigClockSource+0x170>
 8013644:	2b50      	cmp	r3, #80	@ 0x50
 8013646:	d03c      	beq.n	80136c2 <HAL_TIM_ConfigClockSource+0xfe>
 8013648:	2b50      	cmp	r3, #80	@ 0x50
 801364a:	d873      	bhi.n	8013734 <HAL_TIM_ConfigClockSource+0x170>
 801364c:	2b40      	cmp	r3, #64	@ 0x40
 801364e:	d058      	beq.n	8013702 <HAL_TIM_ConfigClockSource+0x13e>
 8013650:	2b40      	cmp	r3, #64	@ 0x40
 8013652:	d86f      	bhi.n	8013734 <HAL_TIM_ConfigClockSource+0x170>
 8013654:	2b30      	cmp	r3, #48	@ 0x30
 8013656:	d064      	beq.n	8013722 <HAL_TIM_ConfigClockSource+0x15e>
 8013658:	2b30      	cmp	r3, #48	@ 0x30
 801365a:	d86b      	bhi.n	8013734 <HAL_TIM_ConfigClockSource+0x170>
 801365c:	2b20      	cmp	r3, #32
 801365e:	d060      	beq.n	8013722 <HAL_TIM_ConfigClockSource+0x15e>
 8013660:	2b20      	cmp	r3, #32
 8013662:	d867      	bhi.n	8013734 <HAL_TIM_ConfigClockSource+0x170>
 8013664:	2b00      	cmp	r3, #0
 8013666:	d05c      	beq.n	8013722 <HAL_TIM_ConfigClockSource+0x15e>
 8013668:	2b10      	cmp	r3, #16
 801366a:	d05a      	beq.n	8013722 <HAL_TIM_ConfigClockSource+0x15e>
 801366c:	e062      	b.n	8013734 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8013672:	683b      	ldr	r3, [r7, #0]
 8013674:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8013676:	683b      	ldr	r3, [r7, #0]
 8013678:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801367e:	f000 fe5b 	bl	8014338 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	689b      	ldr	r3, [r3, #8]
 8013688:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801368a:	68bb      	ldr	r3, [r7, #8]
 801368c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8013690:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	68ba      	ldr	r2, [r7, #8]
 8013698:	609a      	str	r2, [r3, #8]
      break;
 801369a:	e04f      	b.n	801373c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80136a0:	683b      	ldr	r3, [r7, #0]
 80136a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80136a4:	683b      	ldr	r3, [r7, #0]
 80136a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80136a8:	683b      	ldr	r3, [r7, #0]
 80136aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80136ac:	f000 fe44 	bl	8014338 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	689a      	ldr	r2, [r3, #8]
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80136be:	609a      	str	r2, [r3, #8]
      break;
 80136c0:	e03c      	b.n	801373c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80136c6:	683b      	ldr	r3, [r7, #0]
 80136c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80136ca:	683b      	ldr	r3, [r7, #0]
 80136cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80136ce:	461a      	mov	r2, r3
 80136d0:	f000 fd02 	bl	80140d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	2150      	movs	r1, #80	@ 0x50
 80136da:	4618      	mov	r0, r3
 80136dc:	f000 fe11 	bl	8014302 <TIM_ITRx_SetConfig>
      break;
 80136e0:	e02c      	b.n	801373c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80136e6:	683b      	ldr	r3, [r7, #0]
 80136e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80136ea:	683b      	ldr	r3, [r7, #0]
 80136ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80136ee:	461a      	mov	r2, r3
 80136f0:	f000 fd5e 	bl	80141b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	2160      	movs	r1, #96	@ 0x60
 80136fa:	4618      	mov	r0, r3
 80136fc:	f000 fe01 	bl	8014302 <TIM_ITRx_SetConfig>
      break;
 8013700:	e01c      	b.n	801373c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013706:	683b      	ldr	r3, [r7, #0]
 8013708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801370a:	683b      	ldr	r3, [r7, #0]
 801370c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801370e:	461a      	mov	r2, r3
 8013710:	f000 fce2 	bl	80140d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	2140      	movs	r1, #64	@ 0x40
 801371a:	4618      	mov	r0, r3
 801371c:	f000 fdf1 	bl	8014302 <TIM_ITRx_SetConfig>
      break;
 8013720:	e00c      	b.n	801373c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	681a      	ldr	r2, [r3, #0]
 8013726:	683b      	ldr	r3, [r7, #0]
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	4619      	mov	r1, r3
 801372c:	4610      	mov	r0, r2
 801372e:	f000 fde8 	bl	8014302 <TIM_ITRx_SetConfig>
      break;
 8013732:	e003      	b.n	801373c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8013734:	2301      	movs	r3, #1
 8013736:	73fb      	strb	r3, [r7, #15]
      break;
 8013738:	e000      	b.n	801373c <HAL_TIM_ConfigClockSource+0x178>
      break;
 801373a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	2201      	movs	r2, #1
 8013740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	2200      	movs	r2, #0
 8013748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801374c:	7bfb      	ldrb	r3, [r7, #15]
}
 801374e:	4618      	mov	r0, r3
 8013750:	3710      	adds	r7, #16
 8013752:	46bd      	mov	sp, r7
 8013754:	bd80      	pop	{r7, pc}

08013756 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8013756:	b580      	push	{r7, lr}
 8013758:	b082      	sub	sp, #8
 801375a:	af00      	add	r7, sp, #0
 801375c:	6078      	str	r0, [r7, #4]
 801375e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013766:	2b01      	cmp	r3, #1
 8013768:	d101      	bne.n	801376e <HAL_TIM_SlaveConfigSynchro+0x18>
 801376a:	2302      	movs	r3, #2
 801376c:	e031      	b.n	80137d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	2201      	movs	r2, #1
 8013772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	2202      	movs	r2, #2
 801377a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 801377e:	6839      	ldr	r1, [r7, #0]
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	f000 fba7 	bl	8013ed4 <TIM_SlaveTimer_SetConfig>
 8013786:	4603      	mov	r3, r0
 8013788:	2b00      	cmp	r3, #0
 801378a:	d009      	beq.n	80137a0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	2201      	movs	r2, #1
 8013790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	2200      	movs	r2, #0
 8013798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 801379c:	2301      	movs	r3, #1
 801379e:	e018      	b.n	80137d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	68da      	ldr	r2, [r3, #12]
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80137ae:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	68da      	ldr	r2, [r3, #12]
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80137be:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	2201      	movs	r2, #1
 80137c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	2200      	movs	r2, #0
 80137cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80137d0:	2300      	movs	r3, #0
}
 80137d2:	4618      	mov	r0, r3
 80137d4:	3708      	adds	r7, #8
 80137d6:	46bd      	mov	sp, r7
 80137d8:	bd80      	pop	{r7, pc}
	...

080137dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80137dc:	b480      	push	{r7}
 80137de:	b085      	sub	sp, #20
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
 80137e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	4a46      	ldr	r2, [pc, #280]	@ (8013908 <TIM_Base_SetConfig+0x12c>)
 80137f0:	4293      	cmp	r3, r2
 80137f2:	d013      	beq.n	801381c <TIM_Base_SetConfig+0x40>
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80137fa:	d00f      	beq.n	801381c <TIM_Base_SetConfig+0x40>
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	4a43      	ldr	r2, [pc, #268]	@ (801390c <TIM_Base_SetConfig+0x130>)
 8013800:	4293      	cmp	r3, r2
 8013802:	d00b      	beq.n	801381c <TIM_Base_SetConfig+0x40>
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	4a42      	ldr	r2, [pc, #264]	@ (8013910 <TIM_Base_SetConfig+0x134>)
 8013808:	4293      	cmp	r3, r2
 801380a:	d007      	beq.n	801381c <TIM_Base_SetConfig+0x40>
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	4a41      	ldr	r2, [pc, #260]	@ (8013914 <TIM_Base_SetConfig+0x138>)
 8013810:	4293      	cmp	r3, r2
 8013812:	d003      	beq.n	801381c <TIM_Base_SetConfig+0x40>
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	4a40      	ldr	r2, [pc, #256]	@ (8013918 <TIM_Base_SetConfig+0x13c>)
 8013818:	4293      	cmp	r3, r2
 801381a:	d108      	bne.n	801382e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	685b      	ldr	r3, [r3, #4]
 8013828:	68fa      	ldr	r2, [r7, #12]
 801382a:	4313      	orrs	r3, r2
 801382c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	4a35      	ldr	r2, [pc, #212]	@ (8013908 <TIM_Base_SetConfig+0x12c>)
 8013832:	4293      	cmp	r3, r2
 8013834:	d01f      	beq.n	8013876 <TIM_Base_SetConfig+0x9a>
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801383c:	d01b      	beq.n	8013876 <TIM_Base_SetConfig+0x9a>
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	4a32      	ldr	r2, [pc, #200]	@ (801390c <TIM_Base_SetConfig+0x130>)
 8013842:	4293      	cmp	r3, r2
 8013844:	d017      	beq.n	8013876 <TIM_Base_SetConfig+0x9a>
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	4a31      	ldr	r2, [pc, #196]	@ (8013910 <TIM_Base_SetConfig+0x134>)
 801384a:	4293      	cmp	r3, r2
 801384c:	d013      	beq.n	8013876 <TIM_Base_SetConfig+0x9a>
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	4a30      	ldr	r2, [pc, #192]	@ (8013914 <TIM_Base_SetConfig+0x138>)
 8013852:	4293      	cmp	r3, r2
 8013854:	d00f      	beq.n	8013876 <TIM_Base_SetConfig+0x9a>
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	4a2f      	ldr	r2, [pc, #188]	@ (8013918 <TIM_Base_SetConfig+0x13c>)
 801385a:	4293      	cmp	r3, r2
 801385c:	d00b      	beq.n	8013876 <TIM_Base_SetConfig+0x9a>
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	4a2e      	ldr	r2, [pc, #184]	@ (801391c <TIM_Base_SetConfig+0x140>)
 8013862:	4293      	cmp	r3, r2
 8013864:	d007      	beq.n	8013876 <TIM_Base_SetConfig+0x9a>
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	4a2d      	ldr	r2, [pc, #180]	@ (8013920 <TIM_Base_SetConfig+0x144>)
 801386a:	4293      	cmp	r3, r2
 801386c:	d003      	beq.n	8013876 <TIM_Base_SetConfig+0x9a>
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	4a2c      	ldr	r2, [pc, #176]	@ (8013924 <TIM_Base_SetConfig+0x148>)
 8013872:	4293      	cmp	r3, r2
 8013874:	d108      	bne.n	8013888 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801387c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801387e:	683b      	ldr	r3, [r7, #0]
 8013880:	68db      	ldr	r3, [r3, #12]
 8013882:	68fa      	ldr	r2, [r7, #12]
 8013884:	4313      	orrs	r3, r2
 8013886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801388e:	683b      	ldr	r3, [r7, #0]
 8013890:	695b      	ldr	r3, [r3, #20]
 8013892:	4313      	orrs	r3, r2
 8013894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	68fa      	ldr	r2, [r7, #12]
 801389a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801389c:	683b      	ldr	r3, [r7, #0]
 801389e:	689a      	ldr	r2, [r3, #8]
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80138a4:	683b      	ldr	r3, [r7, #0]
 80138a6:	681a      	ldr	r2, [r3, #0]
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	4a16      	ldr	r2, [pc, #88]	@ (8013908 <TIM_Base_SetConfig+0x12c>)
 80138b0:	4293      	cmp	r3, r2
 80138b2:	d00f      	beq.n	80138d4 <TIM_Base_SetConfig+0xf8>
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	4a18      	ldr	r2, [pc, #96]	@ (8013918 <TIM_Base_SetConfig+0x13c>)
 80138b8:	4293      	cmp	r3, r2
 80138ba:	d00b      	beq.n	80138d4 <TIM_Base_SetConfig+0xf8>
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	4a17      	ldr	r2, [pc, #92]	@ (801391c <TIM_Base_SetConfig+0x140>)
 80138c0:	4293      	cmp	r3, r2
 80138c2:	d007      	beq.n	80138d4 <TIM_Base_SetConfig+0xf8>
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	4a16      	ldr	r2, [pc, #88]	@ (8013920 <TIM_Base_SetConfig+0x144>)
 80138c8:	4293      	cmp	r3, r2
 80138ca:	d003      	beq.n	80138d4 <TIM_Base_SetConfig+0xf8>
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	4a15      	ldr	r2, [pc, #84]	@ (8013924 <TIM_Base_SetConfig+0x148>)
 80138d0:	4293      	cmp	r3, r2
 80138d2:	d103      	bne.n	80138dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80138d4:	683b      	ldr	r3, [r7, #0]
 80138d6:	691a      	ldr	r2, [r3, #16]
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	2201      	movs	r2, #1
 80138e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	691b      	ldr	r3, [r3, #16]
 80138e6:	f003 0301 	and.w	r3, r3, #1
 80138ea:	2b01      	cmp	r3, #1
 80138ec:	d105      	bne.n	80138fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	691b      	ldr	r3, [r3, #16]
 80138f2:	f023 0201 	bic.w	r2, r3, #1
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	611a      	str	r2, [r3, #16]
  }
}
 80138fa:	bf00      	nop
 80138fc:	3714      	adds	r7, #20
 80138fe:	46bd      	mov	sp, r7
 8013900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013904:	4770      	bx	lr
 8013906:	bf00      	nop
 8013908:	40012c00 	.word	0x40012c00
 801390c:	40000400 	.word	0x40000400
 8013910:	40000800 	.word	0x40000800
 8013914:	40000c00 	.word	0x40000c00
 8013918:	40013400 	.word	0x40013400
 801391c:	40014000 	.word	0x40014000
 8013920:	40014400 	.word	0x40014400
 8013924:	40014800 	.word	0x40014800

08013928 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013928:	b480      	push	{r7}
 801392a:	b087      	sub	sp, #28
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
 8013930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	6a1b      	ldr	r3, [r3, #32]
 8013936:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	6a1b      	ldr	r3, [r3, #32]
 801393c:	f023 0201 	bic.w	r2, r3, #1
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	685b      	ldr	r3, [r3, #4]
 8013948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	699b      	ldr	r3, [r3, #24]
 801394e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801395a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	f023 0303 	bic.w	r3, r3, #3
 8013962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013964:	683b      	ldr	r3, [r7, #0]
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	68fa      	ldr	r2, [r7, #12]
 801396a:	4313      	orrs	r3, r2
 801396c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801396e:	697b      	ldr	r3, [r7, #20]
 8013970:	f023 0302 	bic.w	r3, r3, #2
 8013974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013976:	683b      	ldr	r3, [r7, #0]
 8013978:	689b      	ldr	r3, [r3, #8]
 801397a:	697a      	ldr	r2, [r7, #20]
 801397c:	4313      	orrs	r3, r2
 801397e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	4a2c      	ldr	r2, [pc, #176]	@ (8013a34 <TIM_OC1_SetConfig+0x10c>)
 8013984:	4293      	cmp	r3, r2
 8013986:	d00f      	beq.n	80139a8 <TIM_OC1_SetConfig+0x80>
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	4a2b      	ldr	r2, [pc, #172]	@ (8013a38 <TIM_OC1_SetConfig+0x110>)
 801398c:	4293      	cmp	r3, r2
 801398e:	d00b      	beq.n	80139a8 <TIM_OC1_SetConfig+0x80>
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	4a2a      	ldr	r2, [pc, #168]	@ (8013a3c <TIM_OC1_SetConfig+0x114>)
 8013994:	4293      	cmp	r3, r2
 8013996:	d007      	beq.n	80139a8 <TIM_OC1_SetConfig+0x80>
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	4a29      	ldr	r2, [pc, #164]	@ (8013a40 <TIM_OC1_SetConfig+0x118>)
 801399c:	4293      	cmp	r3, r2
 801399e:	d003      	beq.n	80139a8 <TIM_OC1_SetConfig+0x80>
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	4a28      	ldr	r2, [pc, #160]	@ (8013a44 <TIM_OC1_SetConfig+0x11c>)
 80139a4:	4293      	cmp	r3, r2
 80139a6:	d10c      	bne.n	80139c2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80139a8:	697b      	ldr	r3, [r7, #20]
 80139aa:	f023 0308 	bic.w	r3, r3, #8
 80139ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80139b0:	683b      	ldr	r3, [r7, #0]
 80139b2:	68db      	ldr	r3, [r3, #12]
 80139b4:	697a      	ldr	r2, [r7, #20]
 80139b6:	4313      	orrs	r3, r2
 80139b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80139ba:	697b      	ldr	r3, [r7, #20]
 80139bc:	f023 0304 	bic.w	r3, r3, #4
 80139c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	4a1b      	ldr	r2, [pc, #108]	@ (8013a34 <TIM_OC1_SetConfig+0x10c>)
 80139c6:	4293      	cmp	r3, r2
 80139c8:	d00f      	beq.n	80139ea <TIM_OC1_SetConfig+0xc2>
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	4a1a      	ldr	r2, [pc, #104]	@ (8013a38 <TIM_OC1_SetConfig+0x110>)
 80139ce:	4293      	cmp	r3, r2
 80139d0:	d00b      	beq.n	80139ea <TIM_OC1_SetConfig+0xc2>
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	4a19      	ldr	r2, [pc, #100]	@ (8013a3c <TIM_OC1_SetConfig+0x114>)
 80139d6:	4293      	cmp	r3, r2
 80139d8:	d007      	beq.n	80139ea <TIM_OC1_SetConfig+0xc2>
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	4a18      	ldr	r2, [pc, #96]	@ (8013a40 <TIM_OC1_SetConfig+0x118>)
 80139de:	4293      	cmp	r3, r2
 80139e0:	d003      	beq.n	80139ea <TIM_OC1_SetConfig+0xc2>
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	4a17      	ldr	r2, [pc, #92]	@ (8013a44 <TIM_OC1_SetConfig+0x11c>)
 80139e6:	4293      	cmp	r3, r2
 80139e8:	d111      	bne.n	8013a0e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80139ea:	693b      	ldr	r3, [r7, #16]
 80139ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80139f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80139f2:	693b      	ldr	r3, [r7, #16]
 80139f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80139f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80139fa:	683b      	ldr	r3, [r7, #0]
 80139fc:	695b      	ldr	r3, [r3, #20]
 80139fe:	693a      	ldr	r2, [r7, #16]
 8013a00:	4313      	orrs	r3, r2
 8013a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013a04:	683b      	ldr	r3, [r7, #0]
 8013a06:	699b      	ldr	r3, [r3, #24]
 8013a08:	693a      	ldr	r2, [r7, #16]
 8013a0a:	4313      	orrs	r3, r2
 8013a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	693a      	ldr	r2, [r7, #16]
 8013a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	68fa      	ldr	r2, [r7, #12]
 8013a18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013a1a:	683b      	ldr	r3, [r7, #0]
 8013a1c:	685a      	ldr	r2, [r3, #4]
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	697a      	ldr	r2, [r7, #20]
 8013a26:	621a      	str	r2, [r3, #32]
}
 8013a28:	bf00      	nop
 8013a2a:	371c      	adds	r7, #28
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a32:	4770      	bx	lr
 8013a34:	40012c00 	.word	0x40012c00
 8013a38:	40013400 	.word	0x40013400
 8013a3c:	40014000 	.word	0x40014000
 8013a40:	40014400 	.word	0x40014400
 8013a44:	40014800 	.word	0x40014800

08013a48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013a48:	b480      	push	{r7}
 8013a4a:	b087      	sub	sp, #28
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
 8013a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	6a1b      	ldr	r3, [r3, #32]
 8013a56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	6a1b      	ldr	r3, [r3, #32]
 8013a5c:	f023 0210 	bic.w	r2, r3, #16
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	685b      	ldr	r3, [r3, #4]
 8013a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	699b      	ldr	r3, [r3, #24]
 8013a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8013a76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013a82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013a84:	683b      	ldr	r3, [r7, #0]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	021b      	lsls	r3, r3, #8
 8013a8a:	68fa      	ldr	r2, [r7, #12]
 8013a8c:	4313      	orrs	r3, r2
 8013a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013a90:	697b      	ldr	r3, [r7, #20]
 8013a92:	f023 0320 	bic.w	r3, r3, #32
 8013a96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013a98:	683b      	ldr	r3, [r7, #0]
 8013a9a:	689b      	ldr	r3, [r3, #8]
 8013a9c:	011b      	lsls	r3, r3, #4
 8013a9e:	697a      	ldr	r2, [r7, #20]
 8013aa0:	4313      	orrs	r3, r2
 8013aa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	4a28      	ldr	r2, [pc, #160]	@ (8013b48 <TIM_OC2_SetConfig+0x100>)
 8013aa8:	4293      	cmp	r3, r2
 8013aaa:	d003      	beq.n	8013ab4 <TIM_OC2_SetConfig+0x6c>
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	4a27      	ldr	r2, [pc, #156]	@ (8013b4c <TIM_OC2_SetConfig+0x104>)
 8013ab0:	4293      	cmp	r3, r2
 8013ab2:	d10d      	bne.n	8013ad0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013ab4:	697b      	ldr	r3, [r7, #20]
 8013ab6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013abc:	683b      	ldr	r3, [r7, #0]
 8013abe:	68db      	ldr	r3, [r3, #12]
 8013ac0:	011b      	lsls	r3, r3, #4
 8013ac2:	697a      	ldr	r2, [r7, #20]
 8013ac4:	4313      	orrs	r3, r2
 8013ac6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013ac8:	697b      	ldr	r3, [r7, #20]
 8013aca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013ace:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	4a1d      	ldr	r2, [pc, #116]	@ (8013b48 <TIM_OC2_SetConfig+0x100>)
 8013ad4:	4293      	cmp	r3, r2
 8013ad6:	d00f      	beq.n	8013af8 <TIM_OC2_SetConfig+0xb0>
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	4a1c      	ldr	r2, [pc, #112]	@ (8013b4c <TIM_OC2_SetConfig+0x104>)
 8013adc:	4293      	cmp	r3, r2
 8013ade:	d00b      	beq.n	8013af8 <TIM_OC2_SetConfig+0xb0>
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	4a1b      	ldr	r2, [pc, #108]	@ (8013b50 <TIM_OC2_SetConfig+0x108>)
 8013ae4:	4293      	cmp	r3, r2
 8013ae6:	d007      	beq.n	8013af8 <TIM_OC2_SetConfig+0xb0>
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	4a1a      	ldr	r2, [pc, #104]	@ (8013b54 <TIM_OC2_SetConfig+0x10c>)
 8013aec:	4293      	cmp	r3, r2
 8013aee:	d003      	beq.n	8013af8 <TIM_OC2_SetConfig+0xb0>
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	4a19      	ldr	r2, [pc, #100]	@ (8013b58 <TIM_OC2_SetConfig+0x110>)
 8013af4:	4293      	cmp	r3, r2
 8013af6:	d113      	bne.n	8013b20 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013af8:	693b      	ldr	r3, [r7, #16]
 8013afa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8013afe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013b00:	693b      	ldr	r3, [r7, #16]
 8013b02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013b06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013b08:	683b      	ldr	r3, [r7, #0]
 8013b0a:	695b      	ldr	r3, [r3, #20]
 8013b0c:	009b      	lsls	r3, r3, #2
 8013b0e:	693a      	ldr	r2, [r7, #16]
 8013b10:	4313      	orrs	r3, r2
 8013b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013b14:	683b      	ldr	r3, [r7, #0]
 8013b16:	699b      	ldr	r3, [r3, #24]
 8013b18:	009b      	lsls	r3, r3, #2
 8013b1a:	693a      	ldr	r2, [r7, #16]
 8013b1c:	4313      	orrs	r3, r2
 8013b1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	693a      	ldr	r2, [r7, #16]
 8013b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	68fa      	ldr	r2, [r7, #12]
 8013b2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013b2c:	683b      	ldr	r3, [r7, #0]
 8013b2e:	685a      	ldr	r2, [r3, #4]
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	697a      	ldr	r2, [r7, #20]
 8013b38:	621a      	str	r2, [r3, #32]
}
 8013b3a:	bf00      	nop
 8013b3c:	371c      	adds	r7, #28
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b44:	4770      	bx	lr
 8013b46:	bf00      	nop
 8013b48:	40012c00 	.word	0x40012c00
 8013b4c:	40013400 	.word	0x40013400
 8013b50:	40014000 	.word	0x40014000
 8013b54:	40014400 	.word	0x40014400
 8013b58:	40014800 	.word	0x40014800

08013b5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013b5c:	b480      	push	{r7}
 8013b5e:	b087      	sub	sp, #28
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
 8013b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	6a1b      	ldr	r3, [r3, #32]
 8013b6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	6a1b      	ldr	r3, [r3, #32]
 8013b70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	685b      	ldr	r3, [r3, #4]
 8013b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	69db      	ldr	r3, [r3, #28]
 8013b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	f023 0303 	bic.w	r3, r3, #3
 8013b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013b98:	683b      	ldr	r3, [r7, #0]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	68fa      	ldr	r2, [r7, #12]
 8013b9e:	4313      	orrs	r3, r2
 8013ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013ba2:	697b      	ldr	r3, [r7, #20]
 8013ba4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8013ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013baa:	683b      	ldr	r3, [r7, #0]
 8013bac:	689b      	ldr	r3, [r3, #8]
 8013bae:	021b      	lsls	r3, r3, #8
 8013bb0:	697a      	ldr	r2, [r7, #20]
 8013bb2:	4313      	orrs	r3, r2
 8013bb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	4a27      	ldr	r2, [pc, #156]	@ (8013c58 <TIM_OC3_SetConfig+0xfc>)
 8013bba:	4293      	cmp	r3, r2
 8013bbc:	d003      	beq.n	8013bc6 <TIM_OC3_SetConfig+0x6a>
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	4a26      	ldr	r2, [pc, #152]	@ (8013c5c <TIM_OC3_SetConfig+0x100>)
 8013bc2:	4293      	cmp	r3, r2
 8013bc4:	d10d      	bne.n	8013be2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013bc6:	697b      	ldr	r3, [r7, #20]
 8013bc8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013bcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013bce:	683b      	ldr	r3, [r7, #0]
 8013bd0:	68db      	ldr	r3, [r3, #12]
 8013bd2:	021b      	lsls	r3, r3, #8
 8013bd4:	697a      	ldr	r2, [r7, #20]
 8013bd6:	4313      	orrs	r3, r2
 8013bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013bda:	697b      	ldr	r3, [r7, #20]
 8013bdc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8013be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	4a1c      	ldr	r2, [pc, #112]	@ (8013c58 <TIM_OC3_SetConfig+0xfc>)
 8013be6:	4293      	cmp	r3, r2
 8013be8:	d00f      	beq.n	8013c0a <TIM_OC3_SetConfig+0xae>
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	4a1b      	ldr	r2, [pc, #108]	@ (8013c5c <TIM_OC3_SetConfig+0x100>)
 8013bee:	4293      	cmp	r3, r2
 8013bf0:	d00b      	beq.n	8013c0a <TIM_OC3_SetConfig+0xae>
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	4a1a      	ldr	r2, [pc, #104]	@ (8013c60 <TIM_OC3_SetConfig+0x104>)
 8013bf6:	4293      	cmp	r3, r2
 8013bf8:	d007      	beq.n	8013c0a <TIM_OC3_SetConfig+0xae>
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	4a19      	ldr	r2, [pc, #100]	@ (8013c64 <TIM_OC3_SetConfig+0x108>)
 8013bfe:	4293      	cmp	r3, r2
 8013c00:	d003      	beq.n	8013c0a <TIM_OC3_SetConfig+0xae>
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	4a18      	ldr	r2, [pc, #96]	@ (8013c68 <TIM_OC3_SetConfig+0x10c>)
 8013c06:	4293      	cmp	r3, r2
 8013c08:	d113      	bne.n	8013c32 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013c0a:	693b      	ldr	r3, [r7, #16]
 8013c0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013c12:	693b      	ldr	r3, [r7, #16]
 8013c14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013c1a:	683b      	ldr	r3, [r7, #0]
 8013c1c:	695b      	ldr	r3, [r3, #20]
 8013c1e:	011b      	lsls	r3, r3, #4
 8013c20:	693a      	ldr	r2, [r7, #16]
 8013c22:	4313      	orrs	r3, r2
 8013c24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013c26:	683b      	ldr	r3, [r7, #0]
 8013c28:	699b      	ldr	r3, [r3, #24]
 8013c2a:	011b      	lsls	r3, r3, #4
 8013c2c:	693a      	ldr	r2, [r7, #16]
 8013c2e:	4313      	orrs	r3, r2
 8013c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	693a      	ldr	r2, [r7, #16]
 8013c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	68fa      	ldr	r2, [r7, #12]
 8013c3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013c3e:	683b      	ldr	r3, [r7, #0]
 8013c40:	685a      	ldr	r2, [r3, #4]
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	697a      	ldr	r2, [r7, #20]
 8013c4a:	621a      	str	r2, [r3, #32]
}
 8013c4c:	bf00      	nop
 8013c4e:	371c      	adds	r7, #28
 8013c50:	46bd      	mov	sp, r7
 8013c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c56:	4770      	bx	lr
 8013c58:	40012c00 	.word	0x40012c00
 8013c5c:	40013400 	.word	0x40013400
 8013c60:	40014000 	.word	0x40014000
 8013c64:	40014400 	.word	0x40014400
 8013c68:	40014800 	.word	0x40014800

08013c6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013c6c:	b480      	push	{r7}
 8013c6e:	b087      	sub	sp, #28
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	6078      	str	r0, [r7, #4]
 8013c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	6a1b      	ldr	r3, [r3, #32]
 8013c7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	6a1b      	ldr	r3, [r3, #32]
 8013c80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	685b      	ldr	r3, [r3, #4]
 8013c8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	69db      	ldr	r3, [r3, #28]
 8013c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8013c9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013ca8:	683b      	ldr	r3, [r7, #0]
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	021b      	lsls	r3, r3, #8
 8013cae:	68fa      	ldr	r2, [r7, #12]
 8013cb0:	4313      	orrs	r3, r2
 8013cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013cb4:	693b      	ldr	r3, [r7, #16]
 8013cb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013cbc:	683b      	ldr	r3, [r7, #0]
 8013cbe:	689b      	ldr	r3, [r3, #8]
 8013cc0:	031b      	lsls	r3, r3, #12
 8013cc2:	693a      	ldr	r2, [r7, #16]
 8013cc4:	4313      	orrs	r3, r2
 8013cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	4a18      	ldr	r2, [pc, #96]	@ (8013d2c <TIM_OC4_SetConfig+0xc0>)
 8013ccc:	4293      	cmp	r3, r2
 8013cce:	d00f      	beq.n	8013cf0 <TIM_OC4_SetConfig+0x84>
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	4a17      	ldr	r2, [pc, #92]	@ (8013d30 <TIM_OC4_SetConfig+0xc4>)
 8013cd4:	4293      	cmp	r3, r2
 8013cd6:	d00b      	beq.n	8013cf0 <TIM_OC4_SetConfig+0x84>
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	4a16      	ldr	r2, [pc, #88]	@ (8013d34 <TIM_OC4_SetConfig+0xc8>)
 8013cdc:	4293      	cmp	r3, r2
 8013cde:	d007      	beq.n	8013cf0 <TIM_OC4_SetConfig+0x84>
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	4a15      	ldr	r2, [pc, #84]	@ (8013d38 <TIM_OC4_SetConfig+0xcc>)
 8013ce4:	4293      	cmp	r3, r2
 8013ce6:	d003      	beq.n	8013cf0 <TIM_OC4_SetConfig+0x84>
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	4a14      	ldr	r2, [pc, #80]	@ (8013d3c <TIM_OC4_SetConfig+0xd0>)
 8013cec:	4293      	cmp	r3, r2
 8013cee:	d109      	bne.n	8013d04 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013cf0:	697b      	ldr	r3, [r7, #20]
 8013cf2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8013cf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013cf8:	683b      	ldr	r3, [r7, #0]
 8013cfa:	695b      	ldr	r3, [r3, #20]
 8013cfc:	019b      	lsls	r3, r3, #6
 8013cfe:	697a      	ldr	r2, [r7, #20]
 8013d00:	4313      	orrs	r3, r2
 8013d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	697a      	ldr	r2, [r7, #20]
 8013d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	68fa      	ldr	r2, [r7, #12]
 8013d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013d10:	683b      	ldr	r3, [r7, #0]
 8013d12:	685a      	ldr	r2, [r3, #4]
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	693a      	ldr	r2, [r7, #16]
 8013d1c:	621a      	str	r2, [r3, #32]
}
 8013d1e:	bf00      	nop
 8013d20:	371c      	adds	r7, #28
 8013d22:	46bd      	mov	sp, r7
 8013d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d28:	4770      	bx	lr
 8013d2a:	bf00      	nop
 8013d2c:	40012c00 	.word	0x40012c00
 8013d30:	40013400 	.word	0x40013400
 8013d34:	40014000 	.word	0x40014000
 8013d38:	40014400 	.word	0x40014400
 8013d3c:	40014800 	.word	0x40014800

08013d40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013d40:	b480      	push	{r7}
 8013d42:	b087      	sub	sp, #28
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
 8013d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	6a1b      	ldr	r3, [r3, #32]
 8013d4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	6a1b      	ldr	r3, [r3, #32]
 8013d54:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	685b      	ldr	r3, [r3, #4]
 8013d60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013d74:	683b      	ldr	r3, [r7, #0]
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	68fa      	ldr	r2, [r7, #12]
 8013d7a:	4313      	orrs	r3, r2
 8013d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013d7e:	693b      	ldr	r3, [r7, #16]
 8013d80:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8013d84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013d86:	683b      	ldr	r3, [r7, #0]
 8013d88:	689b      	ldr	r3, [r3, #8]
 8013d8a:	041b      	lsls	r3, r3, #16
 8013d8c:	693a      	ldr	r2, [r7, #16]
 8013d8e:	4313      	orrs	r3, r2
 8013d90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	4a17      	ldr	r2, [pc, #92]	@ (8013df4 <TIM_OC5_SetConfig+0xb4>)
 8013d96:	4293      	cmp	r3, r2
 8013d98:	d00f      	beq.n	8013dba <TIM_OC5_SetConfig+0x7a>
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	4a16      	ldr	r2, [pc, #88]	@ (8013df8 <TIM_OC5_SetConfig+0xb8>)
 8013d9e:	4293      	cmp	r3, r2
 8013da0:	d00b      	beq.n	8013dba <TIM_OC5_SetConfig+0x7a>
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	4a15      	ldr	r2, [pc, #84]	@ (8013dfc <TIM_OC5_SetConfig+0xbc>)
 8013da6:	4293      	cmp	r3, r2
 8013da8:	d007      	beq.n	8013dba <TIM_OC5_SetConfig+0x7a>
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	4a14      	ldr	r2, [pc, #80]	@ (8013e00 <TIM_OC5_SetConfig+0xc0>)
 8013dae:	4293      	cmp	r3, r2
 8013db0:	d003      	beq.n	8013dba <TIM_OC5_SetConfig+0x7a>
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	4a13      	ldr	r2, [pc, #76]	@ (8013e04 <TIM_OC5_SetConfig+0xc4>)
 8013db6:	4293      	cmp	r3, r2
 8013db8:	d109      	bne.n	8013dce <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013dba:	697b      	ldr	r3, [r7, #20]
 8013dbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8013dc2:	683b      	ldr	r3, [r7, #0]
 8013dc4:	695b      	ldr	r3, [r3, #20]
 8013dc6:	021b      	lsls	r3, r3, #8
 8013dc8:	697a      	ldr	r2, [r7, #20]
 8013dca:	4313      	orrs	r3, r2
 8013dcc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	697a      	ldr	r2, [r7, #20]
 8013dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	68fa      	ldr	r2, [r7, #12]
 8013dd8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013dda:	683b      	ldr	r3, [r7, #0]
 8013ddc:	685a      	ldr	r2, [r3, #4]
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	693a      	ldr	r2, [r7, #16]
 8013de6:	621a      	str	r2, [r3, #32]
}
 8013de8:	bf00      	nop
 8013dea:	371c      	adds	r7, #28
 8013dec:	46bd      	mov	sp, r7
 8013dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df2:	4770      	bx	lr
 8013df4:	40012c00 	.word	0x40012c00
 8013df8:	40013400 	.word	0x40013400
 8013dfc:	40014000 	.word	0x40014000
 8013e00:	40014400 	.word	0x40014400
 8013e04:	40014800 	.word	0x40014800

08013e08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013e08:	b480      	push	{r7}
 8013e0a:	b087      	sub	sp, #28
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
 8013e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	6a1b      	ldr	r3, [r3, #32]
 8013e16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	6a1b      	ldr	r3, [r3, #32]
 8013e1c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	685b      	ldr	r3, [r3, #4]
 8013e28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8013e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013e3c:	683b      	ldr	r3, [r7, #0]
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	021b      	lsls	r3, r3, #8
 8013e42:	68fa      	ldr	r2, [r7, #12]
 8013e44:	4313      	orrs	r3, r2
 8013e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013e48:	693b      	ldr	r3, [r7, #16]
 8013e4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8013e4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013e50:	683b      	ldr	r3, [r7, #0]
 8013e52:	689b      	ldr	r3, [r3, #8]
 8013e54:	051b      	lsls	r3, r3, #20
 8013e56:	693a      	ldr	r2, [r7, #16]
 8013e58:	4313      	orrs	r3, r2
 8013e5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	4a18      	ldr	r2, [pc, #96]	@ (8013ec0 <TIM_OC6_SetConfig+0xb8>)
 8013e60:	4293      	cmp	r3, r2
 8013e62:	d00f      	beq.n	8013e84 <TIM_OC6_SetConfig+0x7c>
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	4a17      	ldr	r2, [pc, #92]	@ (8013ec4 <TIM_OC6_SetConfig+0xbc>)
 8013e68:	4293      	cmp	r3, r2
 8013e6a:	d00b      	beq.n	8013e84 <TIM_OC6_SetConfig+0x7c>
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	4a16      	ldr	r2, [pc, #88]	@ (8013ec8 <TIM_OC6_SetConfig+0xc0>)
 8013e70:	4293      	cmp	r3, r2
 8013e72:	d007      	beq.n	8013e84 <TIM_OC6_SetConfig+0x7c>
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	4a15      	ldr	r2, [pc, #84]	@ (8013ecc <TIM_OC6_SetConfig+0xc4>)
 8013e78:	4293      	cmp	r3, r2
 8013e7a:	d003      	beq.n	8013e84 <TIM_OC6_SetConfig+0x7c>
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	4a14      	ldr	r2, [pc, #80]	@ (8013ed0 <TIM_OC6_SetConfig+0xc8>)
 8013e80:	4293      	cmp	r3, r2
 8013e82:	d109      	bne.n	8013e98 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013e84:	697b      	ldr	r3, [r7, #20]
 8013e86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8013e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013e8c:	683b      	ldr	r3, [r7, #0]
 8013e8e:	695b      	ldr	r3, [r3, #20]
 8013e90:	029b      	lsls	r3, r3, #10
 8013e92:	697a      	ldr	r2, [r7, #20]
 8013e94:	4313      	orrs	r3, r2
 8013e96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	697a      	ldr	r2, [r7, #20]
 8013e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	68fa      	ldr	r2, [r7, #12]
 8013ea2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013ea4:	683b      	ldr	r3, [r7, #0]
 8013ea6:	685a      	ldr	r2, [r3, #4]
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	693a      	ldr	r2, [r7, #16]
 8013eb0:	621a      	str	r2, [r3, #32]
}
 8013eb2:	bf00      	nop
 8013eb4:	371c      	adds	r7, #28
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ebc:	4770      	bx	lr
 8013ebe:	bf00      	nop
 8013ec0:	40012c00 	.word	0x40012c00
 8013ec4:	40013400 	.word	0x40013400
 8013ec8:	40014000 	.word	0x40014000
 8013ecc:	40014400 	.word	0x40014400
 8013ed0:	40014800 	.word	0x40014800

08013ed4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b086      	sub	sp, #24
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
 8013edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013ede:	2300      	movs	r3, #0
 8013ee0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	689b      	ldr	r3, [r3, #8]
 8013ee8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013eea:	693b      	ldr	r3, [r7, #16]
 8013eec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013ef0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8013ef2:	683b      	ldr	r3, [r7, #0]
 8013ef4:	685b      	ldr	r3, [r3, #4]
 8013ef6:	693a      	ldr	r2, [r7, #16]
 8013ef8:	4313      	orrs	r3, r2
 8013efa:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8013efc:	693b      	ldr	r3, [r7, #16]
 8013efe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013f02:	f023 0307 	bic.w	r3, r3, #7
 8013f06:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8013f08:	683b      	ldr	r3, [r7, #0]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	693a      	ldr	r2, [r7, #16]
 8013f0e:	4313      	orrs	r3, r2
 8013f10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	693a      	ldr	r2, [r7, #16]
 8013f18:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	685b      	ldr	r3, [r3, #4]
 8013f1e:	2b70      	cmp	r3, #112	@ 0x70
 8013f20:	d01a      	beq.n	8013f58 <TIM_SlaveTimer_SetConfig+0x84>
 8013f22:	2b70      	cmp	r3, #112	@ 0x70
 8013f24:	d860      	bhi.n	8013fe8 <TIM_SlaveTimer_SetConfig+0x114>
 8013f26:	2b60      	cmp	r3, #96	@ 0x60
 8013f28:	d054      	beq.n	8013fd4 <TIM_SlaveTimer_SetConfig+0x100>
 8013f2a:	2b60      	cmp	r3, #96	@ 0x60
 8013f2c:	d85c      	bhi.n	8013fe8 <TIM_SlaveTimer_SetConfig+0x114>
 8013f2e:	2b50      	cmp	r3, #80	@ 0x50
 8013f30:	d046      	beq.n	8013fc0 <TIM_SlaveTimer_SetConfig+0xec>
 8013f32:	2b50      	cmp	r3, #80	@ 0x50
 8013f34:	d858      	bhi.n	8013fe8 <TIM_SlaveTimer_SetConfig+0x114>
 8013f36:	2b40      	cmp	r3, #64	@ 0x40
 8013f38:	d019      	beq.n	8013f6e <TIM_SlaveTimer_SetConfig+0x9a>
 8013f3a:	2b40      	cmp	r3, #64	@ 0x40
 8013f3c:	d854      	bhi.n	8013fe8 <TIM_SlaveTimer_SetConfig+0x114>
 8013f3e:	2b30      	cmp	r3, #48	@ 0x30
 8013f40:	d055      	beq.n	8013fee <TIM_SlaveTimer_SetConfig+0x11a>
 8013f42:	2b30      	cmp	r3, #48	@ 0x30
 8013f44:	d850      	bhi.n	8013fe8 <TIM_SlaveTimer_SetConfig+0x114>
 8013f46:	2b20      	cmp	r3, #32
 8013f48:	d051      	beq.n	8013fee <TIM_SlaveTimer_SetConfig+0x11a>
 8013f4a:	2b20      	cmp	r3, #32
 8013f4c:	d84c      	bhi.n	8013fe8 <TIM_SlaveTimer_SetConfig+0x114>
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d04d      	beq.n	8013fee <TIM_SlaveTimer_SetConfig+0x11a>
 8013f52:	2b10      	cmp	r3, #16
 8013f54:	d04b      	beq.n	8013fee <TIM_SlaveTimer_SetConfig+0x11a>
 8013f56:	e047      	b.n	8013fe8 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8013f5c:	683b      	ldr	r3, [r7, #0]
 8013f5e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8013f60:	683b      	ldr	r3, [r7, #0]
 8013f62:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8013f64:	683b      	ldr	r3, [r7, #0]
 8013f66:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8013f68:	f000 f9e6 	bl	8014338 <TIM_ETR_SetConfig>
      break;
 8013f6c:	e040      	b.n	8013ff0 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8013f6e:	683b      	ldr	r3, [r7, #0]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	2b05      	cmp	r3, #5
 8013f74:	d101      	bne.n	8013f7a <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8013f76:	2301      	movs	r3, #1
 8013f78:	e03b      	b.n	8013ff2 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	6a1b      	ldr	r3, [r3, #32]
 8013f80:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	6a1a      	ldr	r2, [r3, #32]
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	f022 0201 	bic.w	r2, r2, #1
 8013f90:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	699b      	ldr	r3, [r3, #24]
 8013f98:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013f9a:	68bb      	ldr	r3, [r7, #8]
 8013f9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013fa0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8013fa2:	683b      	ldr	r3, [r7, #0]
 8013fa4:	691b      	ldr	r3, [r3, #16]
 8013fa6:	011b      	lsls	r3, r3, #4
 8013fa8:	68ba      	ldr	r2, [r7, #8]
 8013faa:	4313      	orrs	r3, r2
 8013fac:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	68ba      	ldr	r2, [r7, #8]
 8013fb4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	68fa      	ldr	r2, [r7, #12]
 8013fbc:	621a      	str	r2, [r3, #32]
      break;
 8013fbe:	e017      	b.n	8013ff0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8013fc4:	683b      	ldr	r3, [r7, #0]
 8013fc6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8013fc8:	683b      	ldr	r3, [r7, #0]
 8013fca:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013fcc:	461a      	mov	r2, r3
 8013fce:	f000 f883 	bl	80140d8 <TIM_TI1_ConfigInputStage>
      break;
 8013fd2:	e00d      	b.n	8013ff0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8013fd8:	683b      	ldr	r3, [r7, #0]
 8013fda:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8013fdc:	683b      	ldr	r3, [r7, #0]
 8013fde:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013fe0:	461a      	mov	r2, r3
 8013fe2:	f000 f8e5 	bl	80141b0 <TIM_TI2_ConfigInputStage>
      break;
 8013fe6:	e003      	b.n	8013ff0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8013fe8:	2301      	movs	r3, #1
 8013fea:	75fb      	strb	r3, [r7, #23]
      break;
 8013fec:	e000      	b.n	8013ff0 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8013fee:	bf00      	nop
  }

  return status;
 8013ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	3718      	adds	r7, #24
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	bd80      	pop	{r7, pc}
	...

08013ffc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8013ffc:	b480      	push	{r7}
 8013ffe:	b087      	sub	sp, #28
 8014000:	af00      	add	r7, sp, #0
 8014002:	60f8      	str	r0, [r7, #12]
 8014004:	60b9      	str	r1, [r7, #8]
 8014006:	607a      	str	r2, [r7, #4]
 8014008:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	6a1b      	ldr	r3, [r3, #32]
 801400e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	6a1b      	ldr	r3, [r3, #32]
 8014014:	f023 0201 	bic.w	r2, r3, #1
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	699b      	ldr	r3, [r3, #24]
 8014020:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	4a26      	ldr	r2, [pc, #152]	@ (80140c0 <TIM_TI1_SetConfig+0xc4>)
 8014026:	4293      	cmp	r3, r2
 8014028:	d017      	beq.n	801405a <TIM_TI1_SetConfig+0x5e>
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014030:	d013      	beq.n	801405a <TIM_TI1_SetConfig+0x5e>
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	4a23      	ldr	r2, [pc, #140]	@ (80140c4 <TIM_TI1_SetConfig+0xc8>)
 8014036:	4293      	cmp	r3, r2
 8014038:	d00f      	beq.n	801405a <TIM_TI1_SetConfig+0x5e>
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	4a22      	ldr	r2, [pc, #136]	@ (80140c8 <TIM_TI1_SetConfig+0xcc>)
 801403e:	4293      	cmp	r3, r2
 8014040:	d00b      	beq.n	801405a <TIM_TI1_SetConfig+0x5e>
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	4a21      	ldr	r2, [pc, #132]	@ (80140cc <TIM_TI1_SetConfig+0xd0>)
 8014046:	4293      	cmp	r3, r2
 8014048:	d007      	beq.n	801405a <TIM_TI1_SetConfig+0x5e>
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	4a20      	ldr	r2, [pc, #128]	@ (80140d0 <TIM_TI1_SetConfig+0xd4>)
 801404e:	4293      	cmp	r3, r2
 8014050:	d003      	beq.n	801405a <TIM_TI1_SetConfig+0x5e>
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	4a1f      	ldr	r2, [pc, #124]	@ (80140d4 <TIM_TI1_SetConfig+0xd8>)
 8014056:	4293      	cmp	r3, r2
 8014058:	d101      	bne.n	801405e <TIM_TI1_SetConfig+0x62>
 801405a:	2301      	movs	r3, #1
 801405c:	e000      	b.n	8014060 <TIM_TI1_SetConfig+0x64>
 801405e:	2300      	movs	r3, #0
 8014060:	2b00      	cmp	r3, #0
 8014062:	d008      	beq.n	8014076 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8014064:	697b      	ldr	r3, [r7, #20]
 8014066:	f023 0303 	bic.w	r3, r3, #3
 801406a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801406c:	697a      	ldr	r2, [r7, #20]
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	4313      	orrs	r3, r2
 8014072:	617b      	str	r3, [r7, #20]
 8014074:	e003      	b.n	801407e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8014076:	697b      	ldr	r3, [r7, #20]
 8014078:	f043 0301 	orr.w	r3, r3, #1
 801407c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801407e:	697b      	ldr	r3, [r7, #20]
 8014080:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8014084:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8014086:	683b      	ldr	r3, [r7, #0]
 8014088:	011b      	lsls	r3, r3, #4
 801408a:	b2db      	uxtb	r3, r3
 801408c:	697a      	ldr	r2, [r7, #20]
 801408e:	4313      	orrs	r3, r2
 8014090:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014092:	693b      	ldr	r3, [r7, #16]
 8014094:	f023 030a 	bic.w	r3, r3, #10
 8014098:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801409a:	68bb      	ldr	r3, [r7, #8]
 801409c:	f003 030a 	and.w	r3, r3, #10
 80140a0:	693a      	ldr	r2, [r7, #16]
 80140a2:	4313      	orrs	r3, r2
 80140a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	697a      	ldr	r2, [r7, #20]
 80140aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	693a      	ldr	r2, [r7, #16]
 80140b0:	621a      	str	r2, [r3, #32]
}
 80140b2:	bf00      	nop
 80140b4:	371c      	adds	r7, #28
 80140b6:	46bd      	mov	sp, r7
 80140b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140bc:	4770      	bx	lr
 80140be:	bf00      	nop
 80140c0:	40012c00 	.word	0x40012c00
 80140c4:	40000400 	.word	0x40000400
 80140c8:	40000800 	.word	0x40000800
 80140cc:	40000c00 	.word	0x40000c00
 80140d0:	40013400 	.word	0x40013400
 80140d4:	40014000 	.word	0x40014000

080140d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80140d8:	b480      	push	{r7}
 80140da:	b087      	sub	sp, #28
 80140dc:	af00      	add	r7, sp, #0
 80140de:	60f8      	str	r0, [r7, #12]
 80140e0:	60b9      	str	r1, [r7, #8]
 80140e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	6a1b      	ldr	r3, [r3, #32]
 80140e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	6a1b      	ldr	r3, [r3, #32]
 80140ee:	f023 0201 	bic.w	r2, r3, #1
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	699b      	ldr	r3, [r3, #24]
 80140fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80140fc:	693b      	ldr	r3, [r7, #16]
 80140fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8014102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	011b      	lsls	r3, r3, #4
 8014108:	693a      	ldr	r2, [r7, #16]
 801410a:	4313      	orrs	r3, r2
 801410c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801410e:	697b      	ldr	r3, [r7, #20]
 8014110:	f023 030a 	bic.w	r3, r3, #10
 8014114:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8014116:	697a      	ldr	r2, [r7, #20]
 8014118:	68bb      	ldr	r3, [r7, #8]
 801411a:	4313      	orrs	r3, r2
 801411c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	693a      	ldr	r2, [r7, #16]
 8014122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	697a      	ldr	r2, [r7, #20]
 8014128:	621a      	str	r2, [r3, #32]
}
 801412a:	bf00      	nop
 801412c:	371c      	adds	r7, #28
 801412e:	46bd      	mov	sp, r7
 8014130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014134:	4770      	bx	lr

08014136 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8014136:	b480      	push	{r7}
 8014138:	b087      	sub	sp, #28
 801413a:	af00      	add	r7, sp, #0
 801413c:	60f8      	str	r0, [r7, #12]
 801413e:	60b9      	str	r1, [r7, #8]
 8014140:	607a      	str	r2, [r7, #4]
 8014142:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	6a1b      	ldr	r3, [r3, #32]
 8014148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	6a1b      	ldr	r3, [r3, #32]
 801414e:	f023 0210 	bic.w	r2, r3, #16
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	699b      	ldr	r3, [r3, #24]
 801415a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 801415c:	693b      	ldr	r3, [r7, #16]
 801415e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	021b      	lsls	r3, r3, #8
 8014168:	693a      	ldr	r2, [r7, #16]
 801416a:	4313      	orrs	r3, r2
 801416c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801416e:	693b      	ldr	r3, [r7, #16]
 8014170:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8014174:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8014176:	683b      	ldr	r3, [r7, #0]
 8014178:	031b      	lsls	r3, r3, #12
 801417a:	b29b      	uxth	r3, r3
 801417c:	693a      	ldr	r2, [r7, #16]
 801417e:	4313      	orrs	r3, r2
 8014180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014182:	697b      	ldr	r3, [r7, #20]
 8014184:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8014188:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801418a:	68bb      	ldr	r3, [r7, #8]
 801418c:	011b      	lsls	r3, r3, #4
 801418e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8014192:	697a      	ldr	r2, [r7, #20]
 8014194:	4313      	orrs	r3, r2
 8014196:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	693a      	ldr	r2, [r7, #16]
 801419c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	697a      	ldr	r2, [r7, #20]
 80141a2:	621a      	str	r2, [r3, #32]
}
 80141a4:	bf00      	nop
 80141a6:	371c      	adds	r7, #28
 80141a8:	46bd      	mov	sp, r7
 80141aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ae:	4770      	bx	lr

080141b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80141b0:	b480      	push	{r7}
 80141b2:	b087      	sub	sp, #28
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	60f8      	str	r0, [r7, #12]
 80141b8:	60b9      	str	r1, [r7, #8]
 80141ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	6a1b      	ldr	r3, [r3, #32]
 80141c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	6a1b      	ldr	r3, [r3, #32]
 80141c6:	f023 0210 	bic.w	r2, r3, #16
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	699b      	ldr	r3, [r3, #24]
 80141d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80141d4:	693b      	ldr	r3, [r7, #16]
 80141d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80141da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	031b      	lsls	r3, r3, #12
 80141e0:	693a      	ldr	r2, [r7, #16]
 80141e2:	4313      	orrs	r3, r2
 80141e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80141e6:	697b      	ldr	r3, [r7, #20]
 80141e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80141ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80141ee:	68bb      	ldr	r3, [r7, #8]
 80141f0:	011b      	lsls	r3, r3, #4
 80141f2:	697a      	ldr	r2, [r7, #20]
 80141f4:	4313      	orrs	r3, r2
 80141f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	693a      	ldr	r2, [r7, #16]
 80141fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	697a      	ldr	r2, [r7, #20]
 8014202:	621a      	str	r2, [r3, #32]
}
 8014204:	bf00      	nop
 8014206:	371c      	adds	r7, #28
 8014208:	46bd      	mov	sp, r7
 801420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801420e:	4770      	bx	lr

08014210 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8014210:	b480      	push	{r7}
 8014212:	b087      	sub	sp, #28
 8014214:	af00      	add	r7, sp, #0
 8014216:	60f8      	str	r0, [r7, #12]
 8014218:	60b9      	str	r1, [r7, #8]
 801421a:	607a      	str	r2, [r7, #4]
 801421c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	6a1b      	ldr	r3, [r3, #32]
 8014222:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	6a1b      	ldr	r3, [r3, #32]
 8014228:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	69db      	ldr	r3, [r3, #28]
 8014234:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8014236:	693b      	ldr	r3, [r7, #16]
 8014238:	f023 0303 	bic.w	r3, r3, #3
 801423c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 801423e:	693a      	ldr	r2, [r7, #16]
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	4313      	orrs	r3, r2
 8014244:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8014246:	693b      	ldr	r3, [r7, #16]
 8014248:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801424c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801424e:	683b      	ldr	r3, [r7, #0]
 8014250:	011b      	lsls	r3, r3, #4
 8014252:	b2db      	uxtb	r3, r3
 8014254:	693a      	ldr	r2, [r7, #16]
 8014256:	4313      	orrs	r3, r2
 8014258:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801425a:	697b      	ldr	r3, [r7, #20]
 801425c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8014260:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	021b      	lsls	r3, r3, #8
 8014266:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 801426a:	697a      	ldr	r2, [r7, #20]
 801426c:	4313      	orrs	r3, r2
 801426e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	693a      	ldr	r2, [r7, #16]
 8014274:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	697a      	ldr	r2, [r7, #20]
 801427a:	621a      	str	r2, [r3, #32]
}
 801427c:	bf00      	nop
 801427e:	371c      	adds	r7, #28
 8014280:	46bd      	mov	sp, r7
 8014282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014286:	4770      	bx	lr

08014288 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8014288:	b480      	push	{r7}
 801428a:	b087      	sub	sp, #28
 801428c:	af00      	add	r7, sp, #0
 801428e:	60f8      	str	r0, [r7, #12]
 8014290:	60b9      	str	r1, [r7, #8]
 8014292:	607a      	str	r2, [r7, #4]
 8014294:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	6a1b      	ldr	r3, [r3, #32]
 801429a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	6a1b      	ldr	r3, [r3, #32]
 80142a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	69db      	ldr	r3, [r3, #28]
 80142ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80142ae:	693b      	ldr	r3, [r7, #16]
 80142b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80142b4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	021b      	lsls	r3, r3, #8
 80142ba:	693a      	ldr	r2, [r7, #16]
 80142bc:	4313      	orrs	r3, r2
 80142be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80142c0:	693b      	ldr	r3, [r7, #16]
 80142c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80142c6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80142c8:	683b      	ldr	r3, [r7, #0]
 80142ca:	031b      	lsls	r3, r3, #12
 80142cc:	b29b      	uxth	r3, r3
 80142ce:	693a      	ldr	r2, [r7, #16]
 80142d0:	4313      	orrs	r3, r2
 80142d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80142d4:	697b      	ldr	r3, [r7, #20]
 80142d6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80142da:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80142dc:	68bb      	ldr	r3, [r7, #8]
 80142de:	031b      	lsls	r3, r3, #12
 80142e0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80142e4:	697a      	ldr	r2, [r7, #20]
 80142e6:	4313      	orrs	r3, r2
 80142e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	693a      	ldr	r2, [r7, #16]
 80142ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	697a      	ldr	r2, [r7, #20]
 80142f4:	621a      	str	r2, [r3, #32]
}
 80142f6:	bf00      	nop
 80142f8:	371c      	adds	r7, #28
 80142fa:	46bd      	mov	sp, r7
 80142fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014300:	4770      	bx	lr

08014302 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8014302:	b480      	push	{r7}
 8014304:	b085      	sub	sp, #20
 8014306:	af00      	add	r7, sp, #0
 8014308:	6078      	str	r0, [r7, #4]
 801430a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	689b      	ldr	r3, [r3, #8]
 8014310:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014318:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801431a:	683a      	ldr	r2, [r7, #0]
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	4313      	orrs	r3, r2
 8014320:	f043 0307 	orr.w	r3, r3, #7
 8014324:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	68fa      	ldr	r2, [r7, #12]
 801432a:	609a      	str	r2, [r3, #8]
}
 801432c:	bf00      	nop
 801432e:	3714      	adds	r7, #20
 8014330:	46bd      	mov	sp, r7
 8014332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014336:	4770      	bx	lr

08014338 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8014338:	b480      	push	{r7}
 801433a:	b087      	sub	sp, #28
 801433c:	af00      	add	r7, sp, #0
 801433e:	60f8      	str	r0, [r7, #12]
 8014340:	60b9      	str	r1, [r7, #8]
 8014342:	607a      	str	r2, [r7, #4]
 8014344:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	689b      	ldr	r3, [r3, #8]
 801434a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801434c:	697b      	ldr	r3, [r7, #20]
 801434e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8014352:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8014354:	683b      	ldr	r3, [r7, #0]
 8014356:	021a      	lsls	r2, r3, #8
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	431a      	orrs	r2, r3
 801435c:	68bb      	ldr	r3, [r7, #8]
 801435e:	4313      	orrs	r3, r2
 8014360:	697a      	ldr	r2, [r7, #20]
 8014362:	4313      	orrs	r3, r2
 8014364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	697a      	ldr	r2, [r7, #20]
 801436a:	609a      	str	r2, [r3, #8]
}
 801436c:	bf00      	nop
 801436e:	371c      	adds	r7, #28
 8014370:	46bd      	mov	sp, r7
 8014372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014376:	4770      	bx	lr

08014378 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8014378:	b480      	push	{r7}
 801437a:	b087      	sub	sp, #28
 801437c:	af00      	add	r7, sp, #0
 801437e:	60f8      	str	r0, [r7, #12]
 8014380:	60b9      	str	r1, [r7, #8]
 8014382:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8014384:	68bb      	ldr	r3, [r7, #8]
 8014386:	f003 031f 	and.w	r3, r3, #31
 801438a:	2201      	movs	r2, #1
 801438c:	fa02 f303 	lsl.w	r3, r2, r3
 8014390:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	6a1a      	ldr	r2, [r3, #32]
 8014396:	697b      	ldr	r3, [r7, #20]
 8014398:	43db      	mvns	r3, r3
 801439a:	401a      	ands	r2, r3
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	6a1a      	ldr	r2, [r3, #32]
 80143a4:	68bb      	ldr	r3, [r7, #8]
 80143a6:	f003 031f 	and.w	r3, r3, #31
 80143aa:	6879      	ldr	r1, [r7, #4]
 80143ac:	fa01 f303 	lsl.w	r3, r1, r3
 80143b0:	431a      	orrs	r2, r3
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	621a      	str	r2, [r3, #32]
}
 80143b6:	bf00      	nop
 80143b8:	371c      	adds	r7, #28
 80143ba:	46bd      	mov	sp, r7
 80143bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c0:	4770      	bx	lr
	...

080143c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80143c4:	b480      	push	{r7}
 80143c6:	b085      	sub	sp, #20
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
 80143cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80143d4:	2b01      	cmp	r3, #1
 80143d6:	d101      	bne.n	80143dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80143d8:	2302      	movs	r3, #2
 80143da:	e068      	b.n	80144ae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	2201      	movs	r2, #1
 80143e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	2202      	movs	r2, #2
 80143e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	685b      	ldr	r3, [r3, #4]
 80143f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	689b      	ldr	r3, [r3, #8]
 80143fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	4a2e      	ldr	r2, [pc, #184]	@ (80144bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8014402:	4293      	cmp	r3, r2
 8014404:	d004      	beq.n	8014410 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	4a2d      	ldr	r2, [pc, #180]	@ (80144c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801440c:	4293      	cmp	r3, r2
 801440e:	d108      	bne.n	8014422 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8014416:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8014418:	683b      	ldr	r3, [r7, #0]
 801441a:	685b      	ldr	r3, [r3, #4]
 801441c:	68fa      	ldr	r2, [r7, #12]
 801441e:	4313      	orrs	r3, r2
 8014420:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014428:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801442a:	683b      	ldr	r3, [r7, #0]
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	68fa      	ldr	r2, [r7, #12]
 8014430:	4313      	orrs	r3, r2
 8014432:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	68fa      	ldr	r2, [r7, #12]
 801443a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	4a1e      	ldr	r2, [pc, #120]	@ (80144bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8014442:	4293      	cmp	r3, r2
 8014444:	d01d      	beq.n	8014482 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801444e:	d018      	beq.n	8014482 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	4a1b      	ldr	r2, [pc, #108]	@ (80144c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8014456:	4293      	cmp	r3, r2
 8014458:	d013      	beq.n	8014482 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	4a1a      	ldr	r2, [pc, #104]	@ (80144c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8014460:	4293      	cmp	r3, r2
 8014462:	d00e      	beq.n	8014482 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	4a18      	ldr	r2, [pc, #96]	@ (80144cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801446a:	4293      	cmp	r3, r2
 801446c:	d009      	beq.n	8014482 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	4a13      	ldr	r2, [pc, #76]	@ (80144c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8014474:	4293      	cmp	r3, r2
 8014476:	d004      	beq.n	8014482 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	4a14      	ldr	r2, [pc, #80]	@ (80144d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801447e:	4293      	cmp	r3, r2
 8014480:	d10c      	bne.n	801449c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8014482:	68bb      	ldr	r3, [r7, #8]
 8014484:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014488:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801448a:	683b      	ldr	r3, [r7, #0]
 801448c:	689b      	ldr	r3, [r3, #8]
 801448e:	68ba      	ldr	r2, [r7, #8]
 8014490:	4313      	orrs	r3, r2
 8014492:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	68ba      	ldr	r2, [r7, #8]
 801449a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	2201      	movs	r2, #1
 80144a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	2200      	movs	r2, #0
 80144a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80144ac:	2300      	movs	r3, #0
}
 80144ae:	4618      	mov	r0, r3
 80144b0:	3714      	adds	r7, #20
 80144b2:	46bd      	mov	sp, r7
 80144b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b8:	4770      	bx	lr
 80144ba:	bf00      	nop
 80144bc:	40012c00 	.word	0x40012c00
 80144c0:	40013400 	.word	0x40013400
 80144c4:	40000400 	.word	0x40000400
 80144c8:	40000800 	.word	0x40000800
 80144cc:	40000c00 	.word	0x40000c00
 80144d0:	40014000 	.word	0x40014000

080144d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80144d4:	b480      	push	{r7}
 80144d6:	b085      	sub	sp, #20
 80144d8:	af00      	add	r7, sp, #0
 80144da:	6078      	str	r0, [r7, #4]
 80144dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80144de:	2300      	movs	r3, #0
 80144e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80144e8:	2b01      	cmp	r3, #1
 80144ea:	d101      	bne.n	80144f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80144ec:	2302      	movs	r3, #2
 80144ee:	e065      	b.n	80145bc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	2201      	movs	r2, #1
 80144f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80144fe:	683b      	ldr	r3, [r7, #0]
 8014500:	68db      	ldr	r3, [r3, #12]
 8014502:	4313      	orrs	r3, r2
 8014504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801450c:	683b      	ldr	r3, [r7, #0]
 801450e:	689b      	ldr	r3, [r3, #8]
 8014510:	4313      	orrs	r3, r2
 8014512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801451a:	683b      	ldr	r3, [r7, #0]
 801451c:	685b      	ldr	r3, [r3, #4]
 801451e:	4313      	orrs	r3, r2
 8014520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8014528:	683b      	ldr	r3, [r7, #0]
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	4313      	orrs	r3, r2
 801452e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8014536:	683b      	ldr	r3, [r7, #0]
 8014538:	691b      	ldr	r3, [r3, #16]
 801453a:	4313      	orrs	r3, r2
 801453c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8014544:	683b      	ldr	r3, [r7, #0]
 8014546:	695b      	ldr	r3, [r3, #20]
 8014548:	4313      	orrs	r3, r2
 801454a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8014552:	683b      	ldr	r3, [r7, #0]
 8014554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014556:	4313      	orrs	r3, r2
 8014558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8014560:	683b      	ldr	r3, [r7, #0]
 8014562:	699b      	ldr	r3, [r3, #24]
 8014564:	041b      	lsls	r3, r3, #16
 8014566:	4313      	orrs	r3, r2
 8014568:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	4a16      	ldr	r2, [pc, #88]	@ (80145c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8014570:	4293      	cmp	r3, r2
 8014572:	d004      	beq.n	801457e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	4a14      	ldr	r2, [pc, #80]	@ (80145cc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801457a:	4293      	cmp	r3, r2
 801457c:	d115      	bne.n	80145aa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8014584:	683b      	ldr	r3, [r7, #0]
 8014586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014588:	051b      	lsls	r3, r3, #20
 801458a:	4313      	orrs	r3, r2
 801458c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8014594:	683b      	ldr	r3, [r7, #0]
 8014596:	69db      	ldr	r3, [r3, #28]
 8014598:	4313      	orrs	r3, r2
 801459a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80145a2:	683b      	ldr	r3, [r7, #0]
 80145a4:	6a1b      	ldr	r3, [r3, #32]
 80145a6:	4313      	orrs	r3, r2
 80145a8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	68fa      	ldr	r2, [r7, #12]
 80145b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	2200      	movs	r2, #0
 80145b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80145ba:	2300      	movs	r3, #0
}
 80145bc:	4618      	mov	r0, r3
 80145be:	3714      	adds	r7, #20
 80145c0:	46bd      	mov	sp, r7
 80145c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c6:	4770      	bx	lr
 80145c8:	40012c00 	.word	0x40012c00
 80145cc:	40013400 	.word	0x40013400

080145d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b082      	sub	sp, #8
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d101      	bne.n	80145e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80145de:	2301      	movs	r3, #1
 80145e0:	e040      	b.n	8014664 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d106      	bne.n	80145f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	2200      	movs	r2, #0
 80145ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80145f2:	6878      	ldr	r0, [r7, #4]
 80145f4:	f7f3 f8c8 	bl	8007788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	2224      	movs	r2, #36	@ 0x24
 80145fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	681a      	ldr	r2, [r3, #0]
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	f022 0201 	bic.w	r2, r2, #1
 801460c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014612:	2b00      	cmp	r3, #0
 8014614:	d002      	beq.n	801461c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8014616:	6878      	ldr	r0, [r7, #4]
 8014618:	f000 fdb4 	bl	8015184 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801461c:	6878      	ldr	r0, [r7, #4]
 801461e:	f000 faf9 	bl	8014c14 <UART_SetConfig>
 8014622:	4603      	mov	r3, r0
 8014624:	2b01      	cmp	r3, #1
 8014626:	d101      	bne.n	801462c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8014628:	2301      	movs	r3, #1
 801462a:	e01b      	b.n	8014664 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	685a      	ldr	r2, [r3, #4]
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801463a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	689a      	ldr	r2, [r3, #8]
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801464a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	681a      	ldr	r2, [r3, #0]
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	f042 0201 	orr.w	r2, r2, #1
 801465a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801465c:	6878      	ldr	r0, [r7, #4]
 801465e:	f000 fe33 	bl	80152c8 <UART_CheckIdleState>
 8014662:	4603      	mov	r3, r0
}
 8014664:	4618      	mov	r0, r3
 8014666:	3708      	adds	r7, #8
 8014668:	46bd      	mov	sp, r7
 801466a:	bd80      	pop	{r7, pc}

0801466c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 801466c:	b580      	push	{r7, lr}
 801466e:	b082      	sub	sp, #8
 8014670:	af00      	add	r7, sp, #0
 8014672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d101      	bne.n	801467e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 801467a:	2301      	movs	r3, #1
 801467c:	e048      	b.n	8014710 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014682:	2b00      	cmp	r3, #0
 8014684:	d106      	bne.n	8014694 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	2200      	movs	r2, #0
 801468a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801468e:	6878      	ldr	r0, [r7, #4]
 8014690:	f7f3 f87a 	bl	8007788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	2224      	movs	r2, #36	@ 0x24
 8014698:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	681a      	ldr	r2, [r3, #0]
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	f022 0201 	bic.w	r2, r2, #1
 80146a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d002      	beq.n	80146b8 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80146b2:	6878      	ldr	r0, [r7, #4]
 80146b4:	f000 fd66 	bl	8015184 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80146b8:	6878      	ldr	r0, [r7, #4]
 80146ba:	f000 faab 	bl	8014c14 <UART_SetConfig>
 80146be:	4603      	mov	r3, r0
 80146c0:	2b01      	cmp	r3, #1
 80146c2:	d101      	bne.n	80146c8 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 80146c4:	2301      	movs	r3, #1
 80146c6:	e023      	b.n	8014710 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	685a      	ldr	r2, [r3, #4]
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80146d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	689a      	ldr	r2, [r3, #8]
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80146e6:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	689a      	ldr	r2, [r3, #8]
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	f042 0208 	orr.w	r2, r2, #8
 80146f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	681a      	ldr	r2, [r3, #0]
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	f042 0201 	orr.w	r2, r2, #1
 8014706:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8014708:	6878      	ldr	r0, [r7, #4]
 801470a:	f000 fddd 	bl	80152c8 <UART_CheckIdleState>
 801470e:	4603      	mov	r3, r0
}
 8014710:	4618      	mov	r0, r3
 8014712:	3708      	adds	r7, #8
 8014714:	46bd      	mov	sp, r7
 8014716:	bd80      	pop	{r7, pc}

08014718 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014718:	b580      	push	{r7, lr}
 801471a:	b08a      	sub	sp, #40	@ 0x28
 801471c:	af02      	add	r7, sp, #8
 801471e:	60f8      	str	r0, [r7, #12]
 8014720:	60b9      	str	r1, [r7, #8]
 8014722:	603b      	str	r3, [r7, #0]
 8014724:	4613      	mov	r3, r2
 8014726:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801472c:	2b20      	cmp	r3, #32
 801472e:	d177      	bne.n	8014820 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8014730:	68bb      	ldr	r3, [r7, #8]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d002      	beq.n	801473c <HAL_UART_Transmit+0x24>
 8014736:	88fb      	ldrh	r3, [r7, #6]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d101      	bne.n	8014740 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801473c:	2301      	movs	r3, #1
 801473e:	e070      	b.n	8014822 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	2200      	movs	r2, #0
 8014744:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	2221      	movs	r2, #33	@ 0x21
 801474c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801474e:	f7f6 fadb 	bl	800ad08 <HAL_GetTick>
 8014752:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	88fa      	ldrh	r2, [r7, #6]
 8014758:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	88fa      	ldrh	r2, [r7, #6]
 8014760:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	689b      	ldr	r3, [r3, #8]
 8014768:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801476c:	d108      	bne.n	8014780 <HAL_UART_Transmit+0x68>
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	691b      	ldr	r3, [r3, #16]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d104      	bne.n	8014780 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8014776:	2300      	movs	r3, #0
 8014778:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801477a:	68bb      	ldr	r3, [r7, #8]
 801477c:	61bb      	str	r3, [r7, #24]
 801477e:	e003      	b.n	8014788 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8014780:	68bb      	ldr	r3, [r7, #8]
 8014782:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014784:	2300      	movs	r3, #0
 8014786:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8014788:	e02f      	b.n	80147ea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801478a:	683b      	ldr	r3, [r7, #0]
 801478c:	9300      	str	r3, [sp, #0]
 801478e:	697b      	ldr	r3, [r7, #20]
 8014790:	2200      	movs	r2, #0
 8014792:	2180      	movs	r1, #128	@ 0x80
 8014794:	68f8      	ldr	r0, [r7, #12]
 8014796:	f000 fe3f 	bl	8015418 <UART_WaitOnFlagUntilTimeout>
 801479a:	4603      	mov	r3, r0
 801479c:	2b00      	cmp	r3, #0
 801479e:	d004      	beq.n	80147aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	2220      	movs	r2, #32
 80147a4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80147a6:	2303      	movs	r3, #3
 80147a8:	e03b      	b.n	8014822 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80147aa:	69fb      	ldr	r3, [r7, #28]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d10b      	bne.n	80147c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80147b0:	69bb      	ldr	r3, [r7, #24]
 80147b2:	881a      	ldrh	r2, [r3, #0]
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80147bc:	b292      	uxth	r2, r2
 80147be:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80147c0:	69bb      	ldr	r3, [r7, #24]
 80147c2:	3302      	adds	r3, #2
 80147c4:	61bb      	str	r3, [r7, #24]
 80147c6:	e007      	b.n	80147d8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80147c8:	69fb      	ldr	r3, [r7, #28]
 80147ca:	781a      	ldrb	r2, [r3, #0]
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80147d2:	69fb      	ldr	r3, [r7, #28]
 80147d4:	3301      	adds	r3, #1
 80147d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80147de:	b29b      	uxth	r3, r3
 80147e0:	3b01      	subs	r3, #1
 80147e2:	b29a      	uxth	r2, r3
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80147f0:	b29b      	uxth	r3, r3
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d1c9      	bne.n	801478a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80147f6:	683b      	ldr	r3, [r7, #0]
 80147f8:	9300      	str	r3, [sp, #0]
 80147fa:	697b      	ldr	r3, [r7, #20]
 80147fc:	2200      	movs	r2, #0
 80147fe:	2140      	movs	r1, #64	@ 0x40
 8014800:	68f8      	ldr	r0, [r7, #12]
 8014802:	f000 fe09 	bl	8015418 <UART_WaitOnFlagUntilTimeout>
 8014806:	4603      	mov	r3, r0
 8014808:	2b00      	cmp	r3, #0
 801480a:	d004      	beq.n	8014816 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	2220      	movs	r2, #32
 8014810:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8014812:	2303      	movs	r3, #3
 8014814:	e005      	b.n	8014822 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	2220      	movs	r2, #32
 801481a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801481c:	2300      	movs	r3, #0
 801481e:	e000      	b.n	8014822 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8014820:	2302      	movs	r3, #2
  }
}
 8014822:	4618      	mov	r0, r3
 8014824:	3720      	adds	r7, #32
 8014826:	46bd      	mov	sp, r7
 8014828:	bd80      	pop	{r7, pc}

0801482a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801482a:	b580      	push	{r7, lr}
 801482c:	b08a      	sub	sp, #40	@ 0x28
 801482e:	af02      	add	r7, sp, #8
 8014830:	60f8      	str	r0, [r7, #12]
 8014832:	60b9      	str	r1, [r7, #8]
 8014834:	603b      	str	r3, [r7, #0]
 8014836:	4613      	mov	r3, r2
 8014838:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014840:	2b20      	cmp	r3, #32
 8014842:	f040 80b6 	bne.w	80149b2 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8014846:	68bb      	ldr	r3, [r7, #8]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d002      	beq.n	8014852 <HAL_UART_Receive+0x28>
 801484c:	88fb      	ldrh	r3, [r7, #6]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d101      	bne.n	8014856 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8014852:	2301      	movs	r3, #1
 8014854:	e0ae      	b.n	80149b4 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	2200      	movs	r2, #0
 801485a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	2222      	movs	r2, #34	@ 0x22
 8014862:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	2200      	movs	r2, #0
 801486a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801486c:	f7f6 fa4c 	bl	800ad08 <HAL_GetTick>
 8014870:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	88fa      	ldrh	r2, [r7, #6]
 8014876:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	88fa      	ldrh	r2, [r7, #6]
 801487e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	689b      	ldr	r3, [r3, #8]
 8014886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801488a:	d10e      	bne.n	80148aa <HAL_UART_Receive+0x80>
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	691b      	ldr	r3, [r3, #16]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d105      	bne.n	80148a0 <HAL_UART_Receive+0x76>
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801489a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801489e:	e02d      	b.n	80148fc <HAL_UART_Receive+0xd2>
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	22ff      	movs	r2, #255	@ 0xff
 80148a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80148a8:	e028      	b.n	80148fc <HAL_UART_Receive+0xd2>
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	689b      	ldr	r3, [r3, #8]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d10d      	bne.n	80148ce <HAL_UART_Receive+0xa4>
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	691b      	ldr	r3, [r3, #16]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d104      	bne.n	80148c4 <HAL_UART_Receive+0x9a>
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	22ff      	movs	r2, #255	@ 0xff
 80148be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80148c2:	e01b      	b.n	80148fc <HAL_UART_Receive+0xd2>
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	227f      	movs	r2, #127	@ 0x7f
 80148c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80148cc:	e016      	b.n	80148fc <HAL_UART_Receive+0xd2>
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	689b      	ldr	r3, [r3, #8]
 80148d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80148d6:	d10d      	bne.n	80148f4 <HAL_UART_Receive+0xca>
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	691b      	ldr	r3, [r3, #16]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d104      	bne.n	80148ea <HAL_UART_Receive+0xc0>
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	227f      	movs	r2, #127	@ 0x7f
 80148e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80148e8:	e008      	b.n	80148fc <HAL_UART_Receive+0xd2>
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	223f      	movs	r2, #63	@ 0x3f
 80148ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80148f2:	e003      	b.n	80148fc <HAL_UART_Receive+0xd2>
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	2200      	movs	r2, #0
 80148f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8014902:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	689b      	ldr	r3, [r3, #8]
 8014908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801490c:	d108      	bne.n	8014920 <HAL_UART_Receive+0xf6>
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	691b      	ldr	r3, [r3, #16]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d104      	bne.n	8014920 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8014916:	2300      	movs	r3, #0
 8014918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801491a:	68bb      	ldr	r3, [r7, #8]
 801491c:	61bb      	str	r3, [r7, #24]
 801491e:	e003      	b.n	8014928 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8014920:	68bb      	ldr	r3, [r7, #8]
 8014922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014924:	2300      	movs	r3, #0
 8014926:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8014928:	e037      	b.n	801499a <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801492a:	683b      	ldr	r3, [r7, #0]
 801492c:	9300      	str	r3, [sp, #0]
 801492e:	697b      	ldr	r3, [r7, #20]
 8014930:	2200      	movs	r2, #0
 8014932:	2120      	movs	r1, #32
 8014934:	68f8      	ldr	r0, [r7, #12]
 8014936:	f000 fd6f 	bl	8015418 <UART_WaitOnFlagUntilTimeout>
 801493a:	4603      	mov	r3, r0
 801493c:	2b00      	cmp	r3, #0
 801493e:	d005      	beq.n	801494c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	2220      	movs	r2, #32
 8014944:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8014948:	2303      	movs	r3, #3
 801494a:	e033      	b.n	80149b4 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 801494c:	69fb      	ldr	r3, [r7, #28]
 801494e:	2b00      	cmp	r3, #0
 8014950:	d10c      	bne.n	801496c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014958:	b29a      	uxth	r2, r3
 801495a:	8a7b      	ldrh	r3, [r7, #18]
 801495c:	4013      	ands	r3, r2
 801495e:	b29a      	uxth	r2, r3
 8014960:	69bb      	ldr	r3, [r7, #24]
 8014962:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8014964:	69bb      	ldr	r3, [r7, #24]
 8014966:	3302      	adds	r3, #2
 8014968:	61bb      	str	r3, [r7, #24]
 801496a:	e00d      	b.n	8014988 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014972:	b29b      	uxth	r3, r3
 8014974:	b2da      	uxtb	r2, r3
 8014976:	8a7b      	ldrh	r3, [r7, #18]
 8014978:	b2db      	uxtb	r3, r3
 801497a:	4013      	ands	r3, r2
 801497c:	b2da      	uxtb	r2, r3
 801497e:	69fb      	ldr	r3, [r7, #28]
 8014980:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8014982:	69fb      	ldr	r3, [r7, #28]
 8014984:	3301      	adds	r3, #1
 8014986:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801498e:	b29b      	uxth	r3, r3
 8014990:	3b01      	subs	r3, #1
 8014992:	b29a      	uxth	r2, r3
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80149a0:	b29b      	uxth	r3, r3
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d1c1      	bne.n	801492a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	2220      	movs	r2, #32
 80149aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80149ae:	2300      	movs	r3, #0
 80149b0:	e000      	b.n	80149b4 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80149b2:	2302      	movs	r3, #2
  }
}
 80149b4:	4618      	mov	r0, r3
 80149b6:	3720      	adds	r7, #32
 80149b8:	46bd      	mov	sp, r7
 80149ba:	bd80      	pop	{r7, pc}

080149bc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80149bc:	b580      	push	{r7, lr}
 80149be:	b08a      	sub	sp, #40	@ 0x28
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	60f8      	str	r0, [r7, #12]
 80149c4:	60b9      	str	r1, [r7, #8]
 80149c6:	4613      	mov	r3, r2
 80149c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80149ce:	2b20      	cmp	r3, #32
 80149d0:	d165      	bne.n	8014a9e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80149d2:	68bb      	ldr	r3, [r7, #8]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d002      	beq.n	80149de <HAL_UART_Transmit_DMA+0x22>
 80149d8:	88fb      	ldrh	r3, [r7, #6]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d101      	bne.n	80149e2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80149de:	2301      	movs	r3, #1
 80149e0:	e05e      	b.n	8014aa0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	68ba      	ldr	r2, [r7, #8]
 80149e6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	88fa      	ldrh	r2, [r7, #6]
 80149ec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	88fa      	ldrh	r2, [r7, #6]
 80149f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	2200      	movs	r2, #0
 80149fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	2221      	movs	r2, #33	@ 0x21
 8014a04:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d027      	beq.n	8014a5e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014a12:	4a25      	ldr	r2, [pc, #148]	@ (8014aa8 <HAL_UART_Transmit_DMA+0xec>)
 8014a14:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014a1a:	4a24      	ldr	r2, [pc, #144]	@ (8014aac <HAL_UART_Transmit_DMA+0xf0>)
 8014a1c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014a22:	4a23      	ldr	r2, [pc, #140]	@ (8014ab0 <HAL_UART_Transmit_DMA+0xf4>)
 8014a24:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014a2a:	2200      	movs	r2, #0
 8014a2c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014a36:	4619      	mov	r1, r3
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	3328      	adds	r3, #40	@ 0x28
 8014a3e:	461a      	mov	r2, r3
 8014a40:	88fb      	ldrh	r3, [r7, #6]
 8014a42:	f7f8 f947 	bl	800ccd4 <HAL_DMA_Start_IT>
 8014a46:	4603      	mov	r3, r0
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d008      	beq.n	8014a5e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	2210      	movs	r2, #16
 8014a50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	2220      	movs	r2, #32
 8014a58:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8014a5a:	2301      	movs	r3, #1
 8014a5c:	e020      	b.n	8014aa0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	2240      	movs	r2, #64	@ 0x40
 8014a64:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	3308      	adds	r3, #8
 8014a6c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a6e:	697b      	ldr	r3, [r7, #20]
 8014a70:	e853 3f00 	ldrex	r3, [r3]
 8014a74:	613b      	str	r3, [r7, #16]
   return(result);
 8014a76:	693b      	ldr	r3, [r7, #16]
 8014a78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014a7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	3308      	adds	r3, #8
 8014a84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014a86:	623a      	str	r2, [r7, #32]
 8014a88:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a8a:	69f9      	ldr	r1, [r7, #28]
 8014a8c:	6a3a      	ldr	r2, [r7, #32]
 8014a8e:	e841 2300 	strex	r3, r2, [r1]
 8014a92:	61bb      	str	r3, [r7, #24]
   return(result);
 8014a94:	69bb      	ldr	r3, [r7, #24]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d1e5      	bne.n	8014a66 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	e000      	b.n	8014aa0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8014a9e:	2302      	movs	r3, #2
  }
}
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	3728      	adds	r7, #40	@ 0x28
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	bd80      	pop	{r7, pc}
 8014aa8:	08015749 	.word	0x08015749
 8014aac:	080157e3 	.word	0x080157e3
 8014ab0:	08015969 	.word	0x08015969

08014ab4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b090      	sub	sp, #64	@ 0x40
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014ac8:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	689b      	ldr	r3, [r3, #8]
 8014ad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014ad4:	2b80      	cmp	r3, #128	@ 0x80
 8014ad6:	d139      	bne.n	8014b4c <HAL_UART_DMAStop+0x98>
 8014ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014ada:	2b21      	cmp	r3, #33	@ 0x21
 8014adc:	d136      	bne.n	8014b4c <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	3308      	adds	r3, #8
 8014ae4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ae6:	6a3b      	ldr	r3, [r7, #32]
 8014ae8:	e853 3f00 	ldrex	r3, [r3]
 8014aec:	61fb      	str	r3, [r7, #28]
   return(result);
 8014aee:	69fb      	ldr	r3, [r7, #28]
 8014af0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014af4:	637b      	str	r3, [r7, #52]	@ 0x34
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	3308      	adds	r3, #8
 8014afc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014afe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8014b00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014b04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014b06:	e841 2300 	strex	r3, r2, [r1]
 8014b0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d1e5      	bne.n	8014ade <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d015      	beq.n	8014b46 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f7f8 f938 	bl	800cd94 <HAL_DMA_Abort>
 8014b24:	4603      	mov	r3, r0
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d00d      	beq.n	8014b46 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f7f8 fa1d 	bl	800cf6e <HAL_DMA_GetError>
 8014b34:	4603      	mov	r3, r0
 8014b36:	2b20      	cmp	r3, #32
 8014b38:	d105      	bne.n	8014b46 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	2210      	movs	r2, #16
 8014b3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8014b42:	2303      	movs	r3, #3
 8014b44:	e044      	b.n	8014bd0 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8014b46:	6878      	ldr	r0, [r7, #4]
 8014b48:	f000 fd74 	bl	8015634 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	689b      	ldr	r3, [r3, #8]
 8014b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014b56:	2b40      	cmp	r3, #64	@ 0x40
 8014b58:	d139      	bne.n	8014bce <HAL_UART_DMAStop+0x11a>
 8014b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b5c:	2b22      	cmp	r3, #34	@ 0x22
 8014b5e:	d136      	bne.n	8014bce <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	3308      	adds	r3, #8
 8014b66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	e853 3f00 	ldrex	r3, [r3]
 8014b6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8014b70:	68bb      	ldr	r3, [r7, #8]
 8014b72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014b76:	633b      	str	r3, [r7, #48]	@ 0x30
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	3308      	adds	r3, #8
 8014b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014b80:	61ba      	str	r2, [r7, #24]
 8014b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b84:	6979      	ldr	r1, [r7, #20]
 8014b86:	69ba      	ldr	r2, [r7, #24]
 8014b88:	e841 2300 	strex	r3, r2, [r1]
 8014b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8014b8e:	693b      	ldr	r3, [r7, #16]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d1e5      	bne.n	8014b60 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d015      	beq.n	8014bc8 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	f7f8 f8f7 	bl	800cd94 <HAL_DMA_Abort>
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d00d      	beq.n	8014bc8 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	f7f8 f9dc 	bl	800cf6e <HAL_DMA_GetError>
 8014bb6:	4603      	mov	r3, r0
 8014bb8:	2b20      	cmp	r3, #32
 8014bba:	d105      	bne.n	8014bc8 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	2210      	movs	r2, #16
 8014bc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8014bc4:	2303      	movs	r3, #3
 8014bc6:	e003      	b.n	8014bd0 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8014bc8:	6878      	ldr	r0, [r7, #4]
 8014bca:	f000 fd59 	bl	8015680 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8014bce:	2300      	movs	r3, #0
}
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	3740      	adds	r7, #64	@ 0x40
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	bd80      	pop	{r7, pc}

08014bd8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8014bd8:	b480      	push	{r7}
 8014bda:	b083      	sub	sp, #12
 8014bdc:	af00      	add	r7, sp, #0
 8014bde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8014be0:	bf00      	nop
 8014be2:	370c      	adds	r7, #12
 8014be4:	46bd      	mov	sp, r7
 8014be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bea:	4770      	bx	lr

08014bec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8014bec:	b480      	push	{r7}
 8014bee:	b083      	sub	sp, #12
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8014bf4:	bf00      	nop
 8014bf6:	370c      	adds	r7, #12
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bfe:	4770      	bx	lr

08014c00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014c00:	b480      	push	{r7}
 8014c02:	b083      	sub	sp, #12
 8014c04:	af00      	add	r7, sp, #0
 8014c06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8014c08:	bf00      	nop
 8014c0a:	370c      	adds	r7, #12
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c12:	4770      	bx	lr

08014c14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014c18:	b08a      	sub	sp, #40	@ 0x28
 8014c1a:	af00      	add	r7, sp, #0
 8014c1c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014c1e:	2300      	movs	r3, #0
 8014c20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	689a      	ldr	r2, [r3, #8]
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	691b      	ldr	r3, [r3, #16]
 8014c2c:	431a      	orrs	r2, r3
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	695b      	ldr	r3, [r3, #20]
 8014c32:	431a      	orrs	r2, r3
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	69db      	ldr	r3, [r3, #28]
 8014c38:	4313      	orrs	r3, r2
 8014c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	681a      	ldr	r2, [r3, #0]
 8014c42:	4ba4      	ldr	r3, [pc, #656]	@ (8014ed4 <UART_SetConfig+0x2c0>)
 8014c44:	4013      	ands	r3, r2
 8014c46:	68fa      	ldr	r2, [r7, #12]
 8014c48:	6812      	ldr	r2, [r2, #0]
 8014c4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014c4c:	430b      	orrs	r3, r1
 8014c4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	685b      	ldr	r3, [r3, #4]
 8014c56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	68da      	ldr	r2, [r3, #12]
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	430a      	orrs	r2, r1
 8014c64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	699b      	ldr	r3, [r3, #24]
 8014c6a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	4a99      	ldr	r2, [pc, #612]	@ (8014ed8 <UART_SetConfig+0x2c4>)
 8014c72:	4293      	cmp	r3, r2
 8014c74:	d004      	beq.n	8014c80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	6a1b      	ldr	r3, [r3, #32]
 8014c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014c7c:	4313      	orrs	r3, r2
 8014c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	689b      	ldr	r3, [r3, #8]
 8014c86:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014c90:	430a      	orrs	r2, r1
 8014c92:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	4a90      	ldr	r2, [pc, #576]	@ (8014edc <UART_SetConfig+0x2c8>)
 8014c9a:	4293      	cmp	r3, r2
 8014c9c:	d126      	bne.n	8014cec <UART_SetConfig+0xd8>
 8014c9e:	4b90      	ldr	r3, [pc, #576]	@ (8014ee0 <UART_SetConfig+0x2cc>)
 8014ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014ca4:	f003 0303 	and.w	r3, r3, #3
 8014ca8:	2b03      	cmp	r3, #3
 8014caa:	d81b      	bhi.n	8014ce4 <UART_SetConfig+0xd0>
 8014cac:	a201      	add	r2, pc, #4	@ (adr r2, 8014cb4 <UART_SetConfig+0xa0>)
 8014cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cb2:	bf00      	nop
 8014cb4:	08014cc5 	.word	0x08014cc5
 8014cb8:	08014cd5 	.word	0x08014cd5
 8014cbc:	08014ccd 	.word	0x08014ccd
 8014cc0:	08014cdd 	.word	0x08014cdd
 8014cc4:	2301      	movs	r3, #1
 8014cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014cca:	e116      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014ccc:	2302      	movs	r3, #2
 8014cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014cd2:	e112      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014cd4:	2304      	movs	r3, #4
 8014cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014cda:	e10e      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014cdc:	2308      	movs	r3, #8
 8014cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014ce2:	e10a      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014ce4:	2310      	movs	r3, #16
 8014ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014cea:	e106      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	4a7c      	ldr	r2, [pc, #496]	@ (8014ee4 <UART_SetConfig+0x2d0>)
 8014cf2:	4293      	cmp	r3, r2
 8014cf4:	d138      	bne.n	8014d68 <UART_SetConfig+0x154>
 8014cf6:	4b7a      	ldr	r3, [pc, #488]	@ (8014ee0 <UART_SetConfig+0x2cc>)
 8014cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014cfc:	f003 030c 	and.w	r3, r3, #12
 8014d00:	2b0c      	cmp	r3, #12
 8014d02:	d82d      	bhi.n	8014d60 <UART_SetConfig+0x14c>
 8014d04:	a201      	add	r2, pc, #4	@ (adr r2, 8014d0c <UART_SetConfig+0xf8>)
 8014d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d0a:	bf00      	nop
 8014d0c:	08014d41 	.word	0x08014d41
 8014d10:	08014d61 	.word	0x08014d61
 8014d14:	08014d61 	.word	0x08014d61
 8014d18:	08014d61 	.word	0x08014d61
 8014d1c:	08014d51 	.word	0x08014d51
 8014d20:	08014d61 	.word	0x08014d61
 8014d24:	08014d61 	.word	0x08014d61
 8014d28:	08014d61 	.word	0x08014d61
 8014d2c:	08014d49 	.word	0x08014d49
 8014d30:	08014d61 	.word	0x08014d61
 8014d34:	08014d61 	.word	0x08014d61
 8014d38:	08014d61 	.word	0x08014d61
 8014d3c:	08014d59 	.word	0x08014d59
 8014d40:	2300      	movs	r3, #0
 8014d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014d46:	e0d8      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014d48:	2302      	movs	r3, #2
 8014d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014d4e:	e0d4      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014d50:	2304      	movs	r3, #4
 8014d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014d56:	e0d0      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014d58:	2308      	movs	r3, #8
 8014d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014d5e:	e0cc      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014d60:	2310      	movs	r3, #16
 8014d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014d66:	e0c8      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	4a5e      	ldr	r2, [pc, #376]	@ (8014ee8 <UART_SetConfig+0x2d4>)
 8014d6e:	4293      	cmp	r3, r2
 8014d70:	d125      	bne.n	8014dbe <UART_SetConfig+0x1aa>
 8014d72:	4b5b      	ldr	r3, [pc, #364]	@ (8014ee0 <UART_SetConfig+0x2cc>)
 8014d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014d78:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8014d7c:	2b30      	cmp	r3, #48	@ 0x30
 8014d7e:	d016      	beq.n	8014dae <UART_SetConfig+0x19a>
 8014d80:	2b30      	cmp	r3, #48	@ 0x30
 8014d82:	d818      	bhi.n	8014db6 <UART_SetConfig+0x1a2>
 8014d84:	2b20      	cmp	r3, #32
 8014d86:	d00a      	beq.n	8014d9e <UART_SetConfig+0x18a>
 8014d88:	2b20      	cmp	r3, #32
 8014d8a:	d814      	bhi.n	8014db6 <UART_SetConfig+0x1a2>
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d002      	beq.n	8014d96 <UART_SetConfig+0x182>
 8014d90:	2b10      	cmp	r3, #16
 8014d92:	d008      	beq.n	8014da6 <UART_SetConfig+0x192>
 8014d94:	e00f      	b.n	8014db6 <UART_SetConfig+0x1a2>
 8014d96:	2300      	movs	r3, #0
 8014d98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014d9c:	e0ad      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014d9e:	2302      	movs	r3, #2
 8014da0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014da4:	e0a9      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014da6:	2304      	movs	r3, #4
 8014da8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014dac:	e0a5      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014dae:	2308      	movs	r3, #8
 8014db0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014db4:	e0a1      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014db6:	2310      	movs	r3, #16
 8014db8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014dbc:	e09d      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	4a4a      	ldr	r2, [pc, #296]	@ (8014eec <UART_SetConfig+0x2d8>)
 8014dc4:	4293      	cmp	r3, r2
 8014dc6:	d125      	bne.n	8014e14 <UART_SetConfig+0x200>
 8014dc8:	4b45      	ldr	r3, [pc, #276]	@ (8014ee0 <UART_SetConfig+0x2cc>)
 8014dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014dce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8014dd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8014dd4:	d016      	beq.n	8014e04 <UART_SetConfig+0x1f0>
 8014dd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8014dd8:	d818      	bhi.n	8014e0c <UART_SetConfig+0x1f8>
 8014dda:	2b80      	cmp	r3, #128	@ 0x80
 8014ddc:	d00a      	beq.n	8014df4 <UART_SetConfig+0x1e0>
 8014dde:	2b80      	cmp	r3, #128	@ 0x80
 8014de0:	d814      	bhi.n	8014e0c <UART_SetConfig+0x1f8>
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d002      	beq.n	8014dec <UART_SetConfig+0x1d8>
 8014de6:	2b40      	cmp	r3, #64	@ 0x40
 8014de8:	d008      	beq.n	8014dfc <UART_SetConfig+0x1e8>
 8014dea:	e00f      	b.n	8014e0c <UART_SetConfig+0x1f8>
 8014dec:	2300      	movs	r3, #0
 8014dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014df2:	e082      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014df4:	2302      	movs	r3, #2
 8014df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014dfa:	e07e      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014dfc:	2304      	movs	r3, #4
 8014dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e02:	e07a      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014e04:	2308      	movs	r3, #8
 8014e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e0a:	e076      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014e0c:	2310      	movs	r3, #16
 8014e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e12:	e072      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	4a35      	ldr	r2, [pc, #212]	@ (8014ef0 <UART_SetConfig+0x2dc>)
 8014e1a:	4293      	cmp	r3, r2
 8014e1c:	d12a      	bne.n	8014e74 <UART_SetConfig+0x260>
 8014e1e:	4b30      	ldr	r3, [pc, #192]	@ (8014ee0 <UART_SetConfig+0x2cc>)
 8014e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014e24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8014e28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014e2c:	d01a      	beq.n	8014e64 <UART_SetConfig+0x250>
 8014e2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014e32:	d81b      	bhi.n	8014e6c <UART_SetConfig+0x258>
 8014e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014e38:	d00c      	beq.n	8014e54 <UART_SetConfig+0x240>
 8014e3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014e3e:	d815      	bhi.n	8014e6c <UART_SetConfig+0x258>
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d003      	beq.n	8014e4c <UART_SetConfig+0x238>
 8014e44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014e48:	d008      	beq.n	8014e5c <UART_SetConfig+0x248>
 8014e4a:	e00f      	b.n	8014e6c <UART_SetConfig+0x258>
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e52:	e052      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014e54:	2302      	movs	r3, #2
 8014e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e5a:	e04e      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014e5c:	2304      	movs	r3, #4
 8014e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e62:	e04a      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014e64:	2308      	movs	r3, #8
 8014e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e6a:	e046      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014e6c:	2310      	movs	r3, #16
 8014e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e72:	e042      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	4a17      	ldr	r2, [pc, #92]	@ (8014ed8 <UART_SetConfig+0x2c4>)
 8014e7a:	4293      	cmp	r3, r2
 8014e7c:	d13a      	bne.n	8014ef4 <UART_SetConfig+0x2e0>
 8014e7e:	4b18      	ldr	r3, [pc, #96]	@ (8014ee0 <UART_SetConfig+0x2cc>)
 8014e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014e84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8014e88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8014e8c:	d01a      	beq.n	8014ec4 <UART_SetConfig+0x2b0>
 8014e8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8014e92:	d81b      	bhi.n	8014ecc <UART_SetConfig+0x2b8>
 8014e94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014e98:	d00c      	beq.n	8014eb4 <UART_SetConfig+0x2a0>
 8014e9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014e9e:	d815      	bhi.n	8014ecc <UART_SetConfig+0x2b8>
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d003      	beq.n	8014eac <UART_SetConfig+0x298>
 8014ea4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014ea8:	d008      	beq.n	8014ebc <UART_SetConfig+0x2a8>
 8014eaa:	e00f      	b.n	8014ecc <UART_SetConfig+0x2b8>
 8014eac:	2300      	movs	r3, #0
 8014eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014eb2:	e022      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014eb4:	2302      	movs	r3, #2
 8014eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014eba:	e01e      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014ebc:	2304      	movs	r3, #4
 8014ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014ec2:	e01a      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014ec4:	2308      	movs	r3, #8
 8014ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014eca:	e016      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014ecc:	2310      	movs	r3, #16
 8014ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014ed2:	e012      	b.n	8014efa <UART_SetConfig+0x2e6>
 8014ed4:	efff69f3 	.word	0xefff69f3
 8014ed8:	40008000 	.word	0x40008000
 8014edc:	40013800 	.word	0x40013800
 8014ee0:	40021000 	.word	0x40021000
 8014ee4:	40004400 	.word	0x40004400
 8014ee8:	40004800 	.word	0x40004800
 8014eec:	40004c00 	.word	0x40004c00
 8014ef0:	40005000 	.word	0x40005000
 8014ef4:	2310      	movs	r3, #16
 8014ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	4a9f      	ldr	r2, [pc, #636]	@ (801517c <UART_SetConfig+0x568>)
 8014f00:	4293      	cmp	r3, r2
 8014f02:	d17a      	bne.n	8014ffa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8014f04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014f08:	2b08      	cmp	r3, #8
 8014f0a:	d824      	bhi.n	8014f56 <UART_SetConfig+0x342>
 8014f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8014f14 <UART_SetConfig+0x300>)
 8014f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f12:	bf00      	nop
 8014f14:	08014f39 	.word	0x08014f39
 8014f18:	08014f57 	.word	0x08014f57
 8014f1c:	08014f41 	.word	0x08014f41
 8014f20:	08014f57 	.word	0x08014f57
 8014f24:	08014f47 	.word	0x08014f47
 8014f28:	08014f57 	.word	0x08014f57
 8014f2c:	08014f57 	.word	0x08014f57
 8014f30:	08014f57 	.word	0x08014f57
 8014f34:	08014f4f 	.word	0x08014f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014f38:	f7fb f8fe 	bl	8010138 <HAL_RCC_GetPCLK1Freq>
 8014f3c:	61f8      	str	r0, [r7, #28]
        break;
 8014f3e:	e010      	b.n	8014f62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8014f40:	4b8f      	ldr	r3, [pc, #572]	@ (8015180 <UART_SetConfig+0x56c>)
 8014f42:	61fb      	str	r3, [r7, #28]
        break;
 8014f44:	e00d      	b.n	8014f62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014f46:	f7fb f85f 	bl	8010008 <HAL_RCC_GetSysClockFreq>
 8014f4a:	61f8      	str	r0, [r7, #28]
        break;
 8014f4c:	e009      	b.n	8014f62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014f4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014f52:	61fb      	str	r3, [r7, #28]
        break;
 8014f54:	e005      	b.n	8014f62 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8014f56:	2300      	movs	r3, #0
 8014f58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8014f5a:	2301      	movs	r3, #1
 8014f5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8014f60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8014f62:	69fb      	ldr	r3, [r7, #28]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	f000 80fb 	beq.w	8015160 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	685a      	ldr	r2, [r3, #4]
 8014f6e:	4613      	mov	r3, r2
 8014f70:	005b      	lsls	r3, r3, #1
 8014f72:	4413      	add	r3, r2
 8014f74:	69fa      	ldr	r2, [r7, #28]
 8014f76:	429a      	cmp	r2, r3
 8014f78:	d305      	bcc.n	8014f86 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	685b      	ldr	r3, [r3, #4]
 8014f7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8014f80:	69fa      	ldr	r2, [r7, #28]
 8014f82:	429a      	cmp	r2, r3
 8014f84:	d903      	bls.n	8014f8e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8014f86:	2301      	movs	r3, #1
 8014f88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8014f8c:	e0e8      	b.n	8015160 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8014f8e:	69fb      	ldr	r3, [r7, #28]
 8014f90:	2200      	movs	r2, #0
 8014f92:	461c      	mov	r4, r3
 8014f94:	4615      	mov	r5, r2
 8014f96:	f04f 0200 	mov.w	r2, #0
 8014f9a:	f04f 0300 	mov.w	r3, #0
 8014f9e:	022b      	lsls	r3, r5, #8
 8014fa0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8014fa4:	0222      	lsls	r2, r4, #8
 8014fa6:	68f9      	ldr	r1, [r7, #12]
 8014fa8:	6849      	ldr	r1, [r1, #4]
 8014faa:	0849      	lsrs	r1, r1, #1
 8014fac:	2000      	movs	r0, #0
 8014fae:	4688      	mov	r8, r1
 8014fb0:	4681      	mov	r9, r0
 8014fb2:	eb12 0a08 	adds.w	sl, r2, r8
 8014fb6:	eb43 0b09 	adc.w	fp, r3, r9
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	685b      	ldr	r3, [r3, #4]
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	603b      	str	r3, [r7, #0]
 8014fc2:	607a      	str	r2, [r7, #4]
 8014fc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014fc8:	4650      	mov	r0, sl
 8014fca:	4659      	mov	r1, fp
 8014fcc:	f7eb fd56 	bl	8000a7c <__aeabi_uldivmod>
 8014fd0:	4602      	mov	r2, r0
 8014fd2:	460b      	mov	r3, r1
 8014fd4:	4613      	mov	r3, r2
 8014fd6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8014fd8:	69bb      	ldr	r3, [r7, #24]
 8014fda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014fde:	d308      	bcc.n	8014ff2 <UART_SetConfig+0x3de>
 8014fe0:	69bb      	ldr	r3, [r7, #24]
 8014fe2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014fe6:	d204      	bcs.n	8014ff2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	69ba      	ldr	r2, [r7, #24]
 8014fee:	60da      	str	r2, [r3, #12]
 8014ff0:	e0b6      	b.n	8015160 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8014ff2:	2301      	movs	r3, #1
 8014ff4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8014ff8:	e0b2      	b.n	8015160 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	69db      	ldr	r3, [r3, #28]
 8014ffe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015002:	d15e      	bne.n	80150c2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8015004:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015008:	2b08      	cmp	r3, #8
 801500a:	d828      	bhi.n	801505e <UART_SetConfig+0x44a>
 801500c:	a201      	add	r2, pc, #4	@ (adr r2, 8015014 <UART_SetConfig+0x400>)
 801500e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015012:	bf00      	nop
 8015014:	08015039 	.word	0x08015039
 8015018:	08015041 	.word	0x08015041
 801501c:	08015049 	.word	0x08015049
 8015020:	0801505f 	.word	0x0801505f
 8015024:	0801504f 	.word	0x0801504f
 8015028:	0801505f 	.word	0x0801505f
 801502c:	0801505f 	.word	0x0801505f
 8015030:	0801505f 	.word	0x0801505f
 8015034:	08015057 	.word	0x08015057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015038:	f7fb f87e 	bl	8010138 <HAL_RCC_GetPCLK1Freq>
 801503c:	61f8      	str	r0, [r7, #28]
        break;
 801503e:	e014      	b.n	801506a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015040:	f7fb f890 	bl	8010164 <HAL_RCC_GetPCLK2Freq>
 8015044:	61f8      	str	r0, [r7, #28]
        break;
 8015046:	e010      	b.n	801506a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015048:	4b4d      	ldr	r3, [pc, #308]	@ (8015180 <UART_SetConfig+0x56c>)
 801504a:	61fb      	str	r3, [r7, #28]
        break;
 801504c:	e00d      	b.n	801506a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801504e:	f7fa ffdb 	bl	8010008 <HAL_RCC_GetSysClockFreq>
 8015052:	61f8      	str	r0, [r7, #28]
        break;
 8015054:	e009      	b.n	801506a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015056:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801505a:	61fb      	str	r3, [r7, #28]
        break;
 801505c:	e005      	b.n	801506a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 801505e:	2300      	movs	r3, #0
 8015060:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8015062:	2301      	movs	r3, #1
 8015064:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8015068:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801506a:	69fb      	ldr	r3, [r7, #28]
 801506c:	2b00      	cmp	r3, #0
 801506e:	d077      	beq.n	8015160 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8015070:	69fb      	ldr	r3, [r7, #28]
 8015072:	005a      	lsls	r2, r3, #1
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	685b      	ldr	r3, [r3, #4]
 8015078:	085b      	lsrs	r3, r3, #1
 801507a:	441a      	add	r2, r3
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	685b      	ldr	r3, [r3, #4]
 8015080:	fbb2 f3f3 	udiv	r3, r2, r3
 8015084:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015086:	69bb      	ldr	r3, [r7, #24]
 8015088:	2b0f      	cmp	r3, #15
 801508a:	d916      	bls.n	80150ba <UART_SetConfig+0x4a6>
 801508c:	69bb      	ldr	r3, [r7, #24]
 801508e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015092:	d212      	bcs.n	80150ba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8015094:	69bb      	ldr	r3, [r7, #24]
 8015096:	b29b      	uxth	r3, r3
 8015098:	f023 030f 	bic.w	r3, r3, #15
 801509c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801509e:	69bb      	ldr	r3, [r7, #24]
 80150a0:	085b      	lsrs	r3, r3, #1
 80150a2:	b29b      	uxth	r3, r3
 80150a4:	f003 0307 	and.w	r3, r3, #7
 80150a8:	b29a      	uxth	r2, r3
 80150aa:	8afb      	ldrh	r3, [r7, #22]
 80150ac:	4313      	orrs	r3, r2
 80150ae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	8afa      	ldrh	r2, [r7, #22]
 80150b6:	60da      	str	r2, [r3, #12]
 80150b8:	e052      	b.n	8015160 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80150ba:	2301      	movs	r3, #1
 80150bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80150c0:	e04e      	b.n	8015160 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80150c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80150c6:	2b08      	cmp	r3, #8
 80150c8:	d827      	bhi.n	801511a <UART_SetConfig+0x506>
 80150ca:	a201      	add	r2, pc, #4	@ (adr r2, 80150d0 <UART_SetConfig+0x4bc>)
 80150cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150d0:	080150f5 	.word	0x080150f5
 80150d4:	080150fd 	.word	0x080150fd
 80150d8:	08015105 	.word	0x08015105
 80150dc:	0801511b 	.word	0x0801511b
 80150e0:	0801510b 	.word	0x0801510b
 80150e4:	0801511b 	.word	0x0801511b
 80150e8:	0801511b 	.word	0x0801511b
 80150ec:	0801511b 	.word	0x0801511b
 80150f0:	08015113 	.word	0x08015113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80150f4:	f7fb f820 	bl	8010138 <HAL_RCC_GetPCLK1Freq>
 80150f8:	61f8      	str	r0, [r7, #28]
        break;
 80150fa:	e014      	b.n	8015126 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80150fc:	f7fb f832 	bl	8010164 <HAL_RCC_GetPCLK2Freq>
 8015100:	61f8      	str	r0, [r7, #28]
        break;
 8015102:	e010      	b.n	8015126 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015104:	4b1e      	ldr	r3, [pc, #120]	@ (8015180 <UART_SetConfig+0x56c>)
 8015106:	61fb      	str	r3, [r7, #28]
        break;
 8015108:	e00d      	b.n	8015126 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801510a:	f7fa ff7d 	bl	8010008 <HAL_RCC_GetSysClockFreq>
 801510e:	61f8      	str	r0, [r7, #28]
        break;
 8015110:	e009      	b.n	8015126 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015112:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015116:	61fb      	str	r3, [r7, #28]
        break;
 8015118:	e005      	b.n	8015126 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 801511a:	2300      	movs	r3, #0
 801511c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801511e:	2301      	movs	r3, #1
 8015120:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8015124:	bf00      	nop
    }

    if (pclk != 0U)
 8015126:	69fb      	ldr	r3, [r7, #28]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d019      	beq.n	8015160 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	685b      	ldr	r3, [r3, #4]
 8015130:	085a      	lsrs	r2, r3, #1
 8015132:	69fb      	ldr	r3, [r7, #28]
 8015134:	441a      	add	r2, r3
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	685b      	ldr	r3, [r3, #4]
 801513a:	fbb2 f3f3 	udiv	r3, r2, r3
 801513e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015140:	69bb      	ldr	r3, [r7, #24]
 8015142:	2b0f      	cmp	r3, #15
 8015144:	d909      	bls.n	801515a <UART_SetConfig+0x546>
 8015146:	69bb      	ldr	r3, [r7, #24]
 8015148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801514c:	d205      	bcs.n	801515a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801514e:	69bb      	ldr	r3, [r7, #24]
 8015150:	b29a      	uxth	r2, r3
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	60da      	str	r2, [r3, #12]
 8015158:	e002      	b.n	8015160 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 801515a:	2301      	movs	r3, #1
 801515c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	2200      	movs	r2, #0
 8015164:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	2200      	movs	r2, #0
 801516a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801516c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8015170:	4618      	mov	r0, r3
 8015172:	3728      	adds	r7, #40	@ 0x28
 8015174:	46bd      	mov	sp, r7
 8015176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801517a:	bf00      	nop
 801517c:	40008000 	.word	0x40008000
 8015180:	00f42400 	.word	0x00f42400

08015184 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015184:	b480      	push	{r7}
 8015186:	b083      	sub	sp, #12
 8015188:	af00      	add	r7, sp, #0
 801518a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015190:	f003 0308 	and.w	r3, r3, #8
 8015194:	2b00      	cmp	r3, #0
 8015196:	d00a      	beq.n	80151ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	685b      	ldr	r3, [r3, #4]
 801519e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	430a      	orrs	r2, r1
 80151ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151b2:	f003 0301 	and.w	r3, r3, #1
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d00a      	beq.n	80151d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	685b      	ldr	r3, [r3, #4]
 80151c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	430a      	orrs	r2, r1
 80151ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151d4:	f003 0302 	and.w	r3, r3, #2
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d00a      	beq.n	80151f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	685b      	ldr	r3, [r3, #4]
 80151e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	430a      	orrs	r2, r1
 80151f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151f6:	f003 0304 	and.w	r3, r3, #4
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d00a      	beq.n	8015214 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	685b      	ldr	r3, [r3, #4]
 8015204:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	430a      	orrs	r2, r1
 8015212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015218:	f003 0310 	and.w	r3, r3, #16
 801521c:	2b00      	cmp	r3, #0
 801521e:	d00a      	beq.n	8015236 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	689b      	ldr	r3, [r3, #8]
 8015226:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	430a      	orrs	r2, r1
 8015234:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801523a:	f003 0320 	and.w	r3, r3, #32
 801523e:	2b00      	cmp	r3, #0
 8015240:	d00a      	beq.n	8015258 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	689b      	ldr	r3, [r3, #8]
 8015248:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	430a      	orrs	r2, r1
 8015256:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801525c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015260:	2b00      	cmp	r3, #0
 8015262:	d01a      	beq.n	801529a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	685b      	ldr	r3, [r3, #4]
 801526a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	430a      	orrs	r2, r1
 8015278:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801527e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015282:	d10a      	bne.n	801529a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	685b      	ldr	r3, [r3, #4]
 801528a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	430a      	orrs	r2, r1
 8015298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801529e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d00a      	beq.n	80152bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	685b      	ldr	r3, [r3, #4]
 80152ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	430a      	orrs	r2, r1
 80152ba:	605a      	str	r2, [r3, #4]
  }
}
 80152bc:	bf00      	nop
 80152be:	370c      	adds	r7, #12
 80152c0:	46bd      	mov	sp, r7
 80152c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c6:	4770      	bx	lr

080152c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b098      	sub	sp, #96	@ 0x60
 80152cc:	af02      	add	r7, sp, #8
 80152ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	2200      	movs	r2, #0
 80152d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80152d8:	f7f5 fd16 	bl	800ad08 <HAL_GetTick>
 80152dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	f003 0308 	and.w	r3, r3, #8
 80152e8:	2b08      	cmp	r3, #8
 80152ea:	d12e      	bne.n	801534a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80152ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80152f0:	9300      	str	r3, [sp, #0]
 80152f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80152f4:	2200      	movs	r2, #0
 80152f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80152fa:	6878      	ldr	r0, [r7, #4]
 80152fc:	f000 f88c 	bl	8015418 <UART_WaitOnFlagUntilTimeout>
 8015300:	4603      	mov	r3, r0
 8015302:	2b00      	cmp	r3, #0
 8015304:	d021      	beq.n	801534a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801530c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801530e:	e853 3f00 	ldrex	r3, [r3]
 8015312:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8015314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015316:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801531a:	653b      	str	r3, [r7, #80]	@ 0x50
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	461a      	mov	r2, r3
 8015322:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015324:	647b      	str	r3, [r7, #68]	@ 0x44
 8015326:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015328:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801532a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801532c:	e841 2300 	strex	r3, r2, [r1]
 8015330:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8015332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015334:	2b00      	cmp	r3, #0
 8015336:	d1e6      	bne.n	8015306 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	2220      	movs	r2, #32
 801533c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	2200      	movs	r2, #0
 8015342:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015346:	2303      	movs	r3, #3
 8015348:	e062      	b.n	8015410 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	f003 0304 	and.w	r3, r3, #4
 8015354:	2b04      	cmp	r3, #4
 8015356:	d149      	bne.n	80153ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015358:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801535c:	9300      	str	r3, [sp, #0]
 801535e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015360:	2200      	movs	r2, #0
 8015362:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8015366:	6878      	ldr	r0, [r7, #4]
 8015368:	f000 f856 	bl	8015418 <UART_WaitOnFlagUntilTimeout>
 801536c:	4603      	mov	r3, r0
 801536e:	2b00      	cmp	r3, #0
 8015370:	d03c      	beq.n	80153ec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801537a:	e853 3f00 	ldrex	r3, [r3]
 801537e:	623b      	str	r3, [r7, #32]
   return(result);
 8015380:	6a3b      	ldr	r3, [r7, #32]
 8015382:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8015386:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	461a      	mov	r2, r3
 801538e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015390:	633b      	str	r3, [r7, #48]	@ 0x30
 8015392:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015394:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015398:	e841 2300 	strex	r3, r2, [r1]
 801539c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801539e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d1e6      	bne.n	8015372 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	3308      	adds	r3, #8
 80153aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153ac:	693b      	ldr	r3, [r7, #16]
 80153ae:	e853 3f00 	ldrex	r3, [r3]
 80153b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	f023 0301 	bic.w	r3, r3, #1
 80153ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	3308      	adds	r3, #8
 80153c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80153c4:	61fa      	str	r2, [r7, #28]
 80153c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80153c8:	69b9      	ldr	r1, [r7, #24]
 80153ca:	69fa      	ldr	r2, [r7, #28]
 80153cc:	e841 2300 	strex	r3, r2, [r1]
 80153d0:	617b      	str	r3, [r7, #20]
   return(result);
 80153d2:	697b      	ldr	r3, [r7, #20]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d1e5      	bne.n	80153a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	2220      	movs	r2, #32
 80153dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	2200      	movs	r2, #0
 80153e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80153e8:	2303      	movs	r3, #3
 80153ea:	e011      	b.n	8015410 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	2220      	movs	r2, #32
 80153f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	2220      	movs	r2, #32
 80153f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	2200      	movs	r2, #0
 80153fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	2200      	movs	r2, #0
 8015404:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	2200      	movs	r2, #0
 801540a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 801540e:	2300      	movs	r3, #0
}
 8015410:	4618      	mov	r0, r3
 8015412:	3758      	adds	r7, #88	@ 0x58
 8015414:	46bd      	mov	sp, r7
 8015416:	bd80      	pop	{r7, pc}

08015418 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b084      	sub	sp, #16
 801541c:	af00      	add	r7, sp, #0
 801541e:	60f8      	str	r0, [r7, #12]
 8015420:	60b9      	str	r1, [r7, #8]
 8015422:	603b      	str	r3, [r7, #0]
 8015424:	4613      	mov	r3, r2
 8015426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015428:	e04f      	b.n	80154ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801542a:	69bb      	ldr	r3, [r7, #24]
 801542c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015430:	d04b      	beq.n	80154ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015432:	f7f5 fc69 	bl	800ad08 <HAL_GetTick>
 8015436:	4602      	mov	r2, r0
 8015438:	683b      	ldr	r3, [r7, #0]
 801543a:	1ad3      	subs	r3, r2, r3
 801543c:	69ba      	ldr	r2, [r7, #24]
 801543e:	429a      	cmp	r2, r3
 8015440:	d302      	bcc.n	8015448 <UART_WaitOnFlagUntilTimeout+0x30>
 8015442:	69bb      	ldr	r3, [r7, #24]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d101      	bne.n	801544c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015448:	2303      	movs	r3, #3
 801544a:	e04e      	b.n	80154ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	f003 0304 	and.w	r3, r3, #4
 8015456:	2b00      	cmp	r3, #0
 8015458:	d037      	beq.n	80154ca <UART_WaitOnFlagUntilTimeout+0xb2>
 801545a:	68bb      	ldr	r3, [r7, #8]
 801545c:	2b80      	cmp	r3, #128	@ 0x80
 801545e:	d034      	beq.n	80154ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8015460:	68bb      	ldr	r3, [r7, #8]
 8015462:	2b40      	cmp	r3, #64	@ 0x40
 8015464:	d031      	beq.n	80154ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	69db      	ldr	r3, [r3, #28]
 801546c:	f003 0308 	and.w	r3, r3, #8
 8015470:	2b08      	cmp	r3, #8
 8015472:	d110      	bne.n	8015496 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	2208      	movs	r2, #8
 801547a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801547c:	68f8      	ldr	r0, [r7, #12]
 801547e:	f000 f8ff 	bl	8015680 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	2208      	movs	r2, #8
 8015486:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	2200      	movs	r2, #0
 801548e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8015492:	2301      	movs	r3, #1
 8015494:	e029      	b.n	80154ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	69db      	ldr	r3, [r3, #28]
 801549c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80154a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80154a4:	d111      	bne.n	80154ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80154ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80154b0:	68f8      	ldr	r0, [r7, #12]
 80154b2:	f000 f8e5 	bl	8015680 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	2220      	movs	r2, #32
 80154ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	2200      	movs	r2, #0
 80154c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80154c6:	2303      	movs	r3, #3
 80154c8:	e00f      	b.n	80154ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	69da      	ldr	r2, [r3, #28]
 80154d0:	68bb      	ldr	r3, [r7, #8]
 80154d2:	4013      	ands	r3, r2
 80154d4:	68ba      	ldr	r2, [r7, #8]
 80154d6:	429a      	cmp	r2, r3
 80154d8:	bf0c      	ite	eq
 80154da:	2301      	moveq	r3, #1
 80154dc:	2300      	movne	r3, #0
 80154de:	b2db      	uxtb	r3, r3
 80154e0:	461a      	mov	r2, r3
 80154e2:	79fb      	ldrb	r3, [r7, #7]
 80154e4:	429a      	cmp	r2, r3
 80154e6:	d0a0      	beq.n	801542a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80154e8:	2300      	movs	r3, #0
}
 80154ea:	4618      	mov	r0, r3
 80154ec:	3710      	adds	r7, #16
 80154ee:	46bd      	mov	sp, r7
 80154f0:	bd80      	pop	{r7, pc}
	...

080154f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b096      	sub	sp, #88	@ 0x58
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	60f8      	str	r0, [r7, #12]
 80154fc:	60b9      	str	r1, [r7, #8]
 80154fe:	4613      	mov	r3, r2
 8015500:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	68ba      	ldr	r2, [r7, #8]
 8015506:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	88fa      	ldrh	r2, [r7, #6]
 801550c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	2200      	movs	r2, #0
 8015514:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	2222      	movs	r2, #34	@ 0x22
 801551c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015524:	2b00      	cmp	r3, #0
 8015526:	d028      	beq.n	801557a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801552c:	4a3e      	ldr	r2, [pc, #248]	@ (8015628 <UART_Start_Receive_DMA+0x134>)
 801552e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015534:	4a3d      	ldr	r2, [pc, #244]	@ (801562c <UART_Start_Receive_DMA+0x138>)
 8015536:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801553c:	4a3c      	ldr	r2, [pc, #240]	@ (8015630 <UART_Start_Receive_DMA+0x13c>)
 801553e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015544:	2200      	movs	r2, #0
 8015546:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	3324      	adds	r3, #36	@ 0x24
 8015552:	4619      	mov	r1, r3
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015558:	461a      	mov	r2, r3
 801555a:	88fb      	ldrh	r3, [r7, #6]
 801555c:	f7f7 fbba 	bl	800ccd4 <HAL_DMA_Start_IT>
 8015560:	4603      	mov	r3, r0
 8015562:	2b00      	cmp	r3, #0
 8015564:	d009      	beq.n	801557a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	2210      	movs	r2, #16
 801556a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	2220      	movs	r2, #32
 8015572:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8015576:	2301      	movs	r3, #1
 8015578:	e051      	b.n	801561e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	691b      	ldr	r3, [r3, #16]
 801557e:	2b00      	cmp	r3, #0
 8015580:	d018      	beq.n	80155b4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801558a:	e853 3f00 	ldrex	r3, [r3]
 801558e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8015590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015592:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015596:	657b      	str	r3, [r7, #84]	@ 0x54
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	461a      	mov	r2, r3
 801559e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80155a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80155a2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80155a4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80155a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80155a8:	e841 2300 	strex	r3, r2, [r1]
 80155ac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80155ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d1e6      	bne.n	8015582 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	3308      	adds	r3, #8
 80155ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80155bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155be:	e853 3f00 	ldrex	r3, [r3]
 80155c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80155c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155c6:	f043 0301 	orr.w	r3, r3, #1
 80155ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	3308      	adds	r3, #8
 80155d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80155d4:	637a      	str	r2, [r7, #52]	@ 0x34
 80155d6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80155d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80155da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80155dc:	e841 2300 	strex	r3, r2, [r1]
 80155e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80155e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d1e5      	bne.n	80155b4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	3308      	adds	r3, #8
 80155ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80155f0:	697b      	ldr	r3, [r7, #20]
 80155f2:	e853 3f00 	ldrex	r3, [r3]
 80155f6:	613b      	str	r3, [r7, #16]
   return(result);
 80155f8:	693b      	ldr	r3, [r7, #16]
 80155fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80155fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	3308      	adds	r3, #8
 8015606:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015608:	623a      	str	r2, [r7, #32]
 801560a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801560c:	69f9      	ldr	r1, [r7, #28]
 801560e:	6a3a      	ldr	r2, [r7, #32]
 8015610:	e841 2300 	strex	r3, r2, [r1]
 8015614:	61bb      	str	r3, [r7, #24]
   return(result);
 8015616:	69bb      	ldr	r3, [r7, #24]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d1e5      	bne.n	80155e8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 801561c:	2300      	movs	r3, #0
}
 801561e:	4618      	mov	r0, r3
 8015620:	3758      	adds	r7, #88	@ 0x58
 8015622:	46bd      	mov	sp, r7
 8015624:	bd80      	pop	{r7, pc}
 8015626:	bf00      	nop
 8015628:	080157ff 	.word	0x080157ff
 801562c:	0801592b 	.word	0x0801592b
 8015630:	08015969 	.word	0x08015969

08015634 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8015634:	b480      	push	{r7}
 8015636:	b089      	sub	sp, #36	@ 0x24
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	e853 3f00 	ldrex	r3, [r3]
 8015648:	60bb      	str	r3, [r7, #8]
   return(result);
 801564a:	68bb      	ldr	r3, [r7, #8]
 801564c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8015650:	61fb      	str	r3, [r7, #28]
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	461a      	mov	r2, r3
 8015658:	69fb      	ldr	r3, [r7, #28]
 801565a:	61bb      	str	r3, [r7, #24]
 801565c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801565e:	6979      	ldr	r1, [r7, #20]
 8015660:	69ba      	ldr	r2, [r7, #24]
 8015662:	e841 2300 	strex	r3, r2, [r1]
 8015666:	613b      	str	r3, [r7, #16]
   return(result);
 8015668:	693b      	ldr	r3, [r7, #16]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d1e6      	bne.n	801563c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	2220      	movs	r2, #32
 8015672:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8015674:	bf00      	nop
 8015676:	3724      	adds	r7, #36	@ 0x24
 8015678:	46bd      	mov	sp, r7
 801567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801567e:	4770      	bx	lr

08015680 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015680:	b480      	push	{r7}
 8015682:	b095      	sub	sp, #84	@ 0x54
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801568e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015690:	e853 3f00 	ldrex	r3, [r3]
 8015694:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8015696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015698:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801569c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	461a      	mov	r2, r3
 80156a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80156a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80156a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80156ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80156ae:	e841 2300 	strex	r3, r2, [r1]
 80156b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80156b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d1e6      	bne.n	8015688 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	3308      	adds	r3, #8
 80156c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156c2:	6a3b      	ldr	r3, [r7, #32]
 80156c4:	e853 3f00 	ldrex	r3, [r3]
 80156c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80156ca:	69fb      	ldr	r3, [r7, #28]
 80156cc:	f023 0301 	bic.w	r3, r3, #1
 80156d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	3308      	adds	r3, #8
 80156d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80156da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80156dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80156e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80156e2:	e841 2300 	strex	r3, r2, [r1]
 80156e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80156e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d1e5      	bne.n	80156ba <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80156f2:	2b01      	cmp	r3, #1
 80156f4:	d118      	bne.n	8015728 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	e853 3f00 	ldrex	r3, [r3]
 8015702:	60bb      	str	r3, [r7, #8]
   return(result);
 8015704:	68bb      	ldr	r3, [r7, #8]
 8015706:	f023 0310 	bic.w	r3, r3, #16
 801570a:	647b      	str	r3, [r7, #68]	@ 0x44
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	461a      	mov	r2, r3
 8015712:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015714:	61bb      	str	r3, [r7, #24]
 8015716:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015718:	6979      	ldr	r1, [r7, #20]
 801571a:	69ba      	ldr	r2, [r7, #24]
 801571c:	e841 2300 	strex	r3, r2, [r1]
 8015720:	613b      	str	r3, [r7, #16]
   return(result);
 8015722:	693b      	ldr	r3, [r7, #16]
 8015724:	2b00      	cmp	r3, #0
 8015726:	d1e6      	bne.n	80156f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	2220      	movs	r2, #32
 801572c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	2200      	movs	r2, #0
 8015734:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	2200      	movs	r2, #0
 801573a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801573c:	bf00      	nop
 801573e:	3754      	adds	r7, #84	@ 0x54
 8015740:	46bd      	mov	sp, r7
 8015742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015746:	4770      	bx	lr

08015748 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015748:	b580      	push	{r7, lr}
 801574a:	b090      	sub	sp, #64	@ 0x40
 801574c:	af00      	add	r7, sp, #0
 801574e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015754:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	f003 0320 	and.w	r3, r3, #32
 8015760:	2b00      	cmp	r3, #0
 8015762:	d137      	bne.n	80157d4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8015764:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015766:	2200      	movs	r2, #0
 8015768:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801576c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801576e:	681b      	ldr	r3, [r3, #0]
 8015770:	3308      	adds	r3, #8
 8015772:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015776:	e853 3f00 	ldrex	r3, [r3]
 801577a:	623b      	str	r3, [r7, #32]
   return(result);
 801577c:	6a3b      	ldr	r3, [r7, #32]
 801577e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015782:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	3308      	adds	r3, #8
 801578a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801578c:	633a      	str	r2, [r7, #48]	@ 0x30
 801578e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015790:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015792:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015794:	e841 2300 	strex	r3, r2, [r1]
 8015798:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801579a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801579c:	2b00      	cmp	r3, #0
 801579e:	d1e5      	bne.n	801576c <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80157a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157a6:	693b      	ldr	r3, [r7, #16]
 80157a8:	e853 3f00 	ldrex	r3, [r3]
 80157ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80157b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80157b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	461a      	mov	r2, r3
 80157bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80157be:	61fb      	str	r3, [r7, #28]
 80157c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80157c2:	69b9      	ldr	r1, [r7, #24]
 80157c4:	69fa      	ldr	r2, [r7, #28]
 80157c6:	e841 2300 	strex	r3, r2, [r1]
 80157ca:	617b      	str	r3, [r7, #20]
   return(result);
 80157cc:	697b      	ldr	r3, [r7, #20]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d1e6      	bne.n	80157a0 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80157d2:	e002      	b.n	80157da <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80157d4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80157d6:	f7ed f88f 	bl	80028f8 <HAL_UART_TxCpltCallback>
}
 80157da:	bf00      	nop
 80157dc:	3740      	adds	r7, #64	@ 0x40
 80157de:	46bd      	mov	sp, r7
 80157e0:	bd80      	pop	{r7, pc}

080157e2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80157e2:	b580      	push	{r7, lr}
 80157e4:	b084      	sub	sp, #16
 80157e6:	af00      	add	r7, sp, #0
 80157e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80157ee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80157f0:	68f8      	ldr	r0, [r7, #12]
 80157f2:	f7ff f9f1 	bl	8014bd8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80157f6:	bf00      	nop
 80157f8:	3710      	adds	r7, #16
 80157fa:	46bd      	mov	sp, r7
 80157fc:	bd80      	pop	{r7, pc}

080157fe <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80157fe:	b580      	push	{r7, lr}
 8015800:	b09c      	sub	sp, #112	@ 0x70
 8015802:	af00      	add	r7, sp, #0
 8015804:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801580a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	f003 0320 	and.w	r3, r3, #32
 8015816:	2b00      	cmp	r3, #0
 8015818:	d171      	bne.n	80158fe <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 801581a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801581c:	2200      	movs	r2, #0
 801581e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015822:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015828:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801582a:	e853 3f00 	ldrex	r3, [r3]
 801582e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8015830:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015832:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8015836:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015838:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	461a      	mov	r2, r3
 801583e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015840:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015842:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015844:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8015846:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015848:	e841 2300 	strex	r3, r2, [r1]
 801584c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801584e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015850:	2b00      	cmp	r3, #0
 8015852:	d1e6      	bne.n	8015822 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015854:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	3308      	adds	r3, #8
 801585a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801585c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801585e:	e853 3f00 	ldrex	r3, [r3]
 8015862:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8015864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015866:	f023 0301 	bic.w	r3, r3, #1
 801586a:	667b      	str	r3, [r7, #100]	@ 0x64
 801586c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	3308      	adds	r3, #8
 8015872:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8015874:	647a      	str	r2, [r7, #68]	@ 0x44
 8015876:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015878:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801587a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801587c:	e841 2300 	strex	r3, r2, [r1]
 8015880:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8015882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015884:	2b00      	cmp	r3, #0
 8015886:	d1e5      	bne.n	8015854 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015888:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	3308      	adds	r3, #8
 801588e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015892:	e853 3f00 	ldrex	r3, [r3]
 8015896:	623b      	str	r3, [r7, #32]
   return(result);
 8015898:	6a3b      	ldr	r3, [r7, #32]
 801589a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801589e:	663b      	str	r3, [r7, #96]	@ 0x60
 80158a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	3308      	adds	r3, #8
 80158a6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80158a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80158aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80158ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80158ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80158b0:	e841 2300 	strex	r3, r2, [r1]
 80158b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80158b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d1e5      	bne.n	8015888 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80158bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80158be:	2220      	movs	r2, #32
 80158c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80158c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80158c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80158c8:	2b01      	cmp	r3, #1
 80158ca:	d118      	bne.n	80158fe <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80158cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80158d2:	693b      	ldr	r3, [r7, #16]
 80158d4:	e853 3f00 	ldrex	r3, [r3]
 80158d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	f023 0310 	bic.w	r3, r3, #16
 80158e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80158e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80158e4:	681b      	ldr	r3, [r3, #0]
 80158e6:	461a      	mov	r2, r3
 80158e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80158ea:	61fb      	str	r3, [r7, #28]
 80158ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80158ee:	69b9      	ldr	r1, [r7, #24]
 80158f0:	69fa      	ldr	r2, [r7, #28]
 80158f2:	e841 2300 	strex	r3, r2, [r1]
 80158f6:	617b      	str	r3, [r7, #20]
   return(result);
 80158f8:	697b      	ldr	r3, [r7, #20]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d1e6      	bne.n	80158cc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80158fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015900:	2200      	movs	r2, #0
 8015902:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015904:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015908:	2b01      	cmp	r3, #1
 801590a:	d107      	bne.n	801591c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801590c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801590e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8015912:	4619      	mov	r1, r3
 8015914:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015916:	f7ec ff67 	bl	80027e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801591a:	e002      	b.n	8015922 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 801591c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801591e:	f7ec ffe1 	bl	80028e4 <HAL_UART_RxCpltCallback>
}
 8015922:	bf00      	nop
 8015924:	3770      	adds	r7, #112	@ 0x70
 8015926:	46bd      	mov	sp, r7
 8015928:	bd80      	pop	{r7, pc}

0801592a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801592a:	b580      	push	{r7, lr}
 801592c:	b084      	sub	sp, #16
 801592e:	af00      	add	r7, sp, #0
 8015930:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015936:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	2201      	movs	r2, #1
 801593c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015942:	2b01      	cmp	r3, #1
 8015944:	d109      	bne.n	801595a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801594c:	085b      	lsrs	r3, r3, #1
 801594e:	b29b      	uxth	r3, r3
 8015950:	4619      	mov	r1, r3
 8015952:	68f8      	ldr	r0, [r7, #12]
 8015954:	f7ec ff48 	bl	80027e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015958:	e002      	b.n	8015960 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 801595a:	68f8      	ldr	r0, [r7, #12]
 801595c:	f7ff f946 	bl	8014bec <HAL_UART_RxHalfCpltCallback>
}
 8015960:	bf00      	nop
 8015962:	3710      	adds	r7, #16
 8015964:	46bd      	mov	sp, r7
 8015966:	bd80      	pop	{r7, pc}

08015968 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b086      	sub	sp, #24
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015974:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8015976:	697b      	ldr	r3, [r7, #20]
 8015978:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801597a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801597c:	697b      	ldr	r3, [r7, #20]
 801597e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015982:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8015984:	697b      	ldr	r3, [r7, #20]
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	689b      	ldr	r3, [r3, #8]
 801598a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801598e:	2b80      	cmp	r3, #128	@ 0x80
 8015990:	d109      	bne.n	80159a6 <UART_DMAError+0x3e>
 8015992:	693b      	ldr	r3, [r7, #16]
 8015994:	2b21      	cmp	r3, #33	@ 0x21
 8015996:	d106      	bne.n	80159a6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8015998:	697b      	ldr	r3, [r7, #20]
 801599a:	2200      	movs	r2, #0
 801599c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80159a0:	6978      	ldr	r0, [r7, #20]
 80159a2:	f7ff fe47 	bl	8015634 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80159a6:	697b      	ldr	r3, [r7, #20]
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	689b      	ldr	r3, [r3, #8]
 80159ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80159b0:	2b40      	cmp	r3, #64	@ 0x40
 80159b2:	d109      	bne.n	80159c8 <UART_DMAError+0x60>
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	2b22      	cmp	r3, #34	@ 0x22
 80159b8:	d106      	bne.n	80159c8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80159ba:	697b      	ldr	r3, [r7, #20]
 80159bc:	2200      	movs	r2, #0
 80159be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80159c2:	6978      	ldr	r0, [r7, #20]
 80159c4:	f7ff fe5c 	bl	8015680 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80159c8:	697b      	ldr	r3, [r7, #20]
 80159ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80159ce:	f043 0210 	orr.w	r2, r3, #16
 80159d2:	697b      	ldr	r3, [r7, #20]
 80159d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80159d8:	6978      	ldr	r0, [r7, #20]
 80159da:	f7ff f911 	bl	8014c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80159de:	bf00      	nop
 80159e0:	3718      	adds	r7, #24
 80159e2:	46bd      	mov	sp, r7
 80159e4:	bd80      	pop	{r7, pc}

080159e6 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 80159e6:	b580      	push	{r7, lr}
 80159e8:	b088      	sub	sp, #32
 80159ea:	af00      	add	r7, sp, #0
 80159ec:	60f8      	str	r0, [r7, #12]
 80159ee:	60b9      	str	r1, [r7, #8]
 80159f0:	603b      	str	r3, [r7, #0]
 80159f2:	4613      	mov	r3, r2
 80159f4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80159fc:	2b20      	cmp	r3, #32
 80159fe:	f040 80f0 	bne.w	8015be2 <HAL_UARTEx_ReceiveToIdle+0x1fc>
  {
    if ((pData == NULL) || (Size == 0U))
 8015a02:	68bb      	ldr	r3, [r7, #8]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d002      	beq.n	8015a0e <HAL_UARTEx_ReceiveToIdle+0x28>
 8015a08:	88fb      	ldrh	r3, [r7, #6]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d101      	bne.n	8015a12 <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 8015a0e:	2301      	movs	r3, #1
 8015a10:	e0e8      	b.n	8015be4 <HAL_UARTEx_ReceiveToIdle+0x1fe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	2200      	movs	r2, #0
 8015a16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	2222      	movs	r2, #34	@ 0x22
 8015a1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	2201      	movs	r2, #1
 8015a26:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015a2e:	f7f5 f96b 	bl	800ad08 <HAL_GetTick>
 8015a32:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	88fa      	ldrh	r2, [r7, #6]
 8015a38:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	88fa      	ldrh	r2, [r7, #6]
 8015a40:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	689b      	ldr	r3, [r3, #8]
 8015a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015a4c:	d10e      	bne.n	8015a6c <HAL_UARTEx_ReceiveToIdle+0x86>
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	691b      	ldr	r3, [r3, #16]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d105      	bne.n	8015a62 <HAL_UARTEx_ReceiveToIdle+0x7c>
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8015a5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015a60:	e02d      	b.n	8015abe <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	22ff      	movs	r2, #255	@ 0xff
 8015a66:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015a6a:	e028      	b.n	8015abe <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	689b      	ldr	r3, [r3, #8]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d10d      	bne.n	8015a90 <HAL_UARTEx_ReceiveToIdle+0xaa>
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	691b      	ldr	r3, [r3, #16]
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d104      	bne.n	8015a86 <HAL_UARTEx_ReceiveToIdle+0xa0>
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	22ff      	movs	r2, #255	@ 0xff
 8015a80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015a84:	e01b      	b.n	8015abe <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	227f      	movs	r2, #127	@ 0x7f
 8015a8a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015a8e:	e016      	b.n	8015abe <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	689b      	ldr	r3, [r3, #8]
 8015a94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015a98:	d10d      	bne.n	8015ab6 <HAL_UARTEx_ReceiveToIdle+0xd0>
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	691b      	ldr	r3, [r3, #16]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d104      	bne.n	8015aac <HAL_UARTEx_ReceiveToIdle+0xc6>
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	227f      	movs	r2, #127	@ 0x7f
 8015aa6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015aaa:	e008      	b.n	8015abe <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	223f      	movs	r2, #63	@ 0x3f
 8015ab0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015ab4:	e003      	b.n	8015abe <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	2200      	movs	r2, #0
 8015aba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8015ac4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	689b      	ldr	r3, [r3, #8]
 8015aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015ace:	d108      	bne.n	8015ae2 <HAL_UARTEx_ReceiveToIdle+0xfc>
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	691b      	ldr	r3, [r3, #16]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d104      	bne.n	8015ae2 <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 8015ad8:	2300      	movs	r3, #0
 8015ada:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015adc:	68bb      	ldr	r3, [r7, #8]
 8015ade:	61bb      	str	r3, [r7, #24]
 8015ae0:	e003      	b.n	8015aea <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 8015ae2:	68bb      	ldr	r3, [r7, #8]
 8015ae4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8015aea:	683b      	ldr	r3, [r7, #0]
 8015aec:	2200      	movs	r2, #0
 8015aee:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8015af0:	e060      	b.n	8015bb4 <HAL_UARTEx_ReceiveToIdle+0x1ce>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	69db      	ldr	r3, [r3, #28]
 8015af8:	f003 0310 	and.w	r3, r3, #16
 8015afc:	2b10      	cmp	r3, #16
 8015afe:	d110      	bne.n	8015b22 <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	2210      	movs	r2, #16
 8015b06:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8015b08:	683b      	ldr	r3, [r7, #0]
 8015b0a:	881b      	ldrh	r3, [r3, #0]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d008      	beq.n	8015b22 <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	2202      	movs	r2, #2
 8015b14:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	2220      	movs	r2, #32
 8015b1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_OK;
 8015b1e:	2300      	movs	r3, #0
 8015b20:	e060      	b.n	8015be4 <HAL_UARTEx_ReceiveToIdle+0x1fe>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	69db      	ldr	r3, [r3, #28]
 8015b28:	f003 0320 	and.w	r3, r3, #32
 8015b2c:	2b20      	cmp	r3, #32
 8015b2e:	d12c      	bne.n	8015b8a <HAL_UARTEx_ReceiveToIdle+0x1a4>
      {
        if (pdata8bits == NULL)
 8015b30:	69fb      	ldr	r3, [r7, #28]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d10c      	bne.n	8015b50 <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015b3c:	b29a      	uxth	r2, r3
 8015b3e:	8a7b      	ldrh	r3, [r7, #18]
 8015b40:	4013      	ands	r3, r2
 8015b42:	b29a      	uxth	r2, r3
 8015b44:	69bb      	ldr	r3, [r7, #24]
 8015b46:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8015b48:	69bb      	ldr	r3, [r7, #24]
 8015b4a:	3302      	adds	r3, #2
 8015b4c:	61bb      	str	r3, [r7, #24]
 8015b4e:	e00d      	b.n	8015b6c <HAL_UARTEx_ReceiveToIdle+0x186>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015b56:	b29b      	uxth	r3, r3
 8015b58:	b2da      	uxtb	r2, r3
 8015b5a:	8a7b      	ldrh	r3, [r7, #18]
 8015b5c:	b2db      	uxtb	r3, r3
 8015b5e:	4013      	ands	r3, r2
 8015b60:	b2da      	uxtb	r2, r3
 8015b62:	69fb      	ldr	r3, [r7, #28]
 8015b64:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 8015b66:	69fb      	ldr	r3, [r7, #28]
 8015b68:	3301      	adds	r3, #1
 8015b6a:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8015b6c:	683b      	ldr	r3, [r7, #0]
 8015b6e:	881b      	ldrh	r3, [r3, #0]
 8015b70:	3301      	adds	r3, #1
 8015b72:	b29a      	uxth	r2, r3
 8015b74:	683b      	ldr	r3, [r7, #0]
 8015b76:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015b7e:	b29b      	uxth	r3, r3
 8015b80:	3b01      	subs	r3, #1
 8015b82:	b29a      	uxth	r2, r3
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8015b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b90:	d010      	beq.n	8015bb4 <HAL_UARTEx_ReceiveToIdle+0x1ce>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8015b92:	f7f5 f8b9 	bl	800ad08 <HAL_GetTick>
 8015b96:	4602      	mov	r2, r0
 8015b98:	697b      	ldr	r3, [r7, #20]
 8015b9a:	1ad3      	subs	r3, r2, r3
 8015b9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015b9e:	429a      	cmp	r2, r3
 8015ba0:	d302      	bcc.n	8015ba8 <HAL_UARTEx_ReceiveToIdle+0x1c2>
 8015ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d105      	bne.n	8015bb4 <HAL_UARTEx_ReceiveToIdle+0x1ce>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	2220      	movs	r2, #32
 8015bac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8015bb0:	2303      	movs	r3, #3
 8015bb2:	e017      	b.n	8015be4 <HAL_UARTEx_ReceiveToIdle+0x1fe>
    while (huart->RxXferCount > 0U)
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015bba:	b29b      	uxth	r3, r3
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d198      	bne.n	8015af2 <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015bcc:	b29b      	uxth	r3, r3
 8015bce:	1ad3      	subs	r3, r2, r3
 8015bd0:	b29a      	uxth	r2, r3
 8015bd2:	683b      	ldr	r3, [r7, #0]
 8015bd4:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	2220      	movs	r2, #32
 8015bda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8015bde:	2300      	movs	r3, #0
 8015be0:	e000      	b.n	8015be4 <HAL_UARTEx_ReceiveToIdle+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8015be2:	2302      	movs	r3, #2
  }
}
 8015be4:	4618      	mov	r0, r3
 8015be6:	3720      	adds	r7, #32
 8015be8:	46bd      	mov	sp, r7
 8015bea:	bd80      	pop	{r7, pc}

08015bec <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015bec:	b580      	push	{r7, lr}
 8015bee:	b08c      	sub	sp, #48	@ 0x30
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	60f8      	str	r0, [r7, #12]
 8015bf4:	60b9      	str	r1, [r7, #8]
 8015bf6:	4613      	mov	r3, r2
 8015bf8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015c00:	2b20      	cmp	r3, #32
 8015c02:	d142      	bne.n	8015c8a <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8015c04:	68bb      	ldr	r3, [r7, #8]
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d002      	beq.n	8015c10 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8015c0a:	88fb      	ldrh	r3, [r7, #6]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d101      	bne.n	8015c14 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8015c10:	2301      	movs	r3, #1
 8015c12:	e03b      	b.n	8015c8c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	2201      	movs	r2, #1
 8015c18:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	2200      	movs	r2, #0
 8015c1e:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8015c20:	88fb      	ldrh	r3, [r7, #6]
 8015c22:	461a      	mov	r2, r3
 8015c24:	68b9      	ldr	r1, [r7, #8]
 8015c26:	68f8      	ldr	r0, [r7, #12]
 8015c28:	f7ff fc64 	bl	80154f4 <UART_Start_Receive_DMA>
 8015c2c:	4603      	mov	r3, r0
 8015c2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8015c32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d124      	bne.n	8015c84 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015c3e:	2b01      	cmp	r3, #1
 8015c40:	d11d      	bne.n	8015c7e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	2210      	movs	r2, #16
 8015c48:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c50:	69bb      	ldr	r3, [r7, #24]
 8015c52:	e853 3f00 	ldrex	r3, [r3]
 8015c56:	617b      	str	r3, [r7, #20]
   return(result);
 8015c58:	697b      	ldr	r3, [r7, #20]
 8015c5a:	f043 0310 	orr.w	r3, r3, #16
 8015c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	461a      	mov	r2, r3
 8015c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8015c6a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c6c:	6a39      	ldr	r1, [r7, #32]
 8015c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015c70:	e841 2300 	strex	r3, r2, [r1]
 8015c74:	61fb      	str	r3, [r7, #28]
   return(result);
 8015c76:	69fb      	ldr	r3, [r7, #28]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d1e6      	bne.n	8015c4a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8015c7c:	e002      	b.n	8015c84 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8015c7e:	2301      	movs	r3, #1
 8015c80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8015c84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015c88:	e000      	b.n	8015c8c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8015c8a:	2302      	movs	r3, #2
  }
}
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	3730      	adds	r7, #48	@ 0x30
 8015c90:	46bd      	mov	sp, r7
 8015c92:	bd80      	pop	{r7, pc}

08015c94 <atoi>:
 8015c94:	220a      	movs	r2, #10
 8015c96:	2100      	movs	r1, #0
 8015c98:	f000 b87c 	b.w	8015d94 <strtol>

08015c9c <_strtol_l.isra.0>:
 8015c9c:	2b24      	cmp	r3, #36	@ 0x24
 8015c9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ca2:	4686      	mov	lr, r0
 8015ca4:	4690      	mov	r8, r2
 8015ca6:	d801      	bhi.n	8015cac <_strtol_l.isra.0+0x10>
 8015ca8:	2b01      	cmp	r3, #1
 8015caa:	d106      	bne.n	8015cba <_strtol_l.isra.0+0x1e>
 8015cac:	f000 f92c 	bl	8015f08 <__errno>
 8015cb0:	2316      	movs	r3, #22
 8015cb2:	6003      	str	r3, [r0, #0]
 8015cb4:	2000      	movs	r0, #0
 8015cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cba:	4834      	ldr	r0, [pc, #208]	@ (8015d8c <_strtol_l.isra.0+0xf0>)
 8015cbc:	460d      	mov	r5, r1
 8015cbe:	462a      	mov	r2, r5
 8015cc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015cc4:	5d06      	ldrb	r6, [r0, r4]
 8015cc6:	f016 0608 	ands.w	r6, r6, #8
 8015cca:	d1f8      	bne.n	8015cbe <_strtol_l.isra.0+0x22>
 8015ccc:	2c2d      	cmp	r4, #45	@ 0x2d
 8015cce:	d110      	bne.n	8015cf2 <_strtol_l.isra.0+0x56>
 8015cd0:	782c      	ldrb	r4, [r5, #0]
 8015cd2:	2601      	movs	r6, #1
 8015cd4:	1c95      	adds	r5, r2, #2
 8015cd6:	f033 0210 	bics.w	r2, r3, #16
 8015cda:	d115      	bne.n	8015d08 <_strtol_l.isra.0+0x6c>
 8015cdc:	2c30      	cmp	r4, #48	@ 0x30
 8015cde:	d10d      	bne.n	8015cfc <_strtol_l.isra.0+0x60>
 8015ce0:	782a      	ldrb	r2, [r5, #0]
 8015ce2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015ce6:	2a58      	cmp	r2, #88	@ 0x58
 8015ce8:	d108      	bne.n	8015cfc <_strtol_l.isra.0+0x60>
 8015cea:	786c      	ldrb	r4, [r5, #1]
 8015cec:	3502      	adds	r5, #2
 8015cee:	2310      	movs	r3, #16
 8015cf0:	e00a      	b.n	8015d08 <_strtol_l.isra.0+0x6c>
 8015cf2:	2c2b      	cmp	r4, #43	@ 0x2b
 8015cf4:	bf04      	itt	eq
 8015cf6:	782c      	ldrbeq	r4, [r5, #0]
 8015cf8:	1c95      	addeq	r5, r2, #2
 8015cfa:	e7ec      	b.n	8015cd6 <_strtol_l.isra.0+0x3a>
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d1f6      	bne.n	8015cee <_strtol_l.isra.0+0x52>
 8015d00:	2c30      	cmp	r4, #48	@ 0x30
 8015d02:	bf14      	ite	ne
 8015d04:	230a      	movne	r3, #10
 8015d06:	2308      	moveq	r3, #8
 8015d08:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8015d0c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015d10:	2200      	movs	r2, #0
 8015d12:	fbbc f9f3 	udiv	r9, ip, r3
 8015d16:	4610      	mov	r0, r2
 8015d18:	fb03 ca19 	mls	sl, r3, r9, ip
 8015d1c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8015d20:	2f09      	cmp	r7, #9
 8015d22:	d80f      	bhi.n	8015d44 <_strtol_l.isra.0+0xa8>
 8015d24:	463c      	mov	r4, r7
 8015d26:	42a3      	cmp	r3, r4
 8015d28:	dd1b      	ble.n	8015d62 <_strtol_l.isra.0+0xc6>
 8015d2a:	1c57      	adds	r7, r2, #1
 8015d2c:	d007      	beq.n	8015d3e <_strtol_l.isra.0+0xa2>
 8015d2e:	4581      	cmp	r9, r0
 8015d30:	d314      	bcc.n	8015d5c <_strtol_l.isra.0+0xc0>
 8015d32:	d101      	bne.n	8015d38 <_strtol_l.isra.0+0x9c>
 8015d34:	45a2      	cmp	sl, r4
 8015d36:	db11      	blt.n	8015d5c <_strtol_l.isra.0+0xc0>
 8015d38:	fb00 4003 	mla	r0, r0, r3, r4
 8015d3c:	2201      	movs	r2, #1
 8015d3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015d42:	e7eb      	b.n	8015d1c <_strtol_l.isra.0+0x80>
 8015d44:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8015d48:	2f19      	cmp	r7, #25
 8015d4a:	d801      	bhi.n	8015d50 <_strtol_l.isra.0+0xb4>
 8015d4c:	3c37      	subs	r4, #55	@ 0x37
 8015d4e:	e7ea      	b.n	8015d26 <_strtol_l.isra.0+0x8a>
 8015d50:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8015d54:	2f19      	cmp	r7, #25
 8015d56:	d804      	bhi.n	8015d62 <_strtol_l.isra.0+0xc6>
 8015d58:	3c57      	subs	r4, #87	@ 0x57
 8015d5a:	e7e4      	b.n	8015d26 <_strtol_l.isra.0+0x8a>
 8015d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8015d60:	e7ed      	b.n	8015d3e <_strtol_l.isra.0+0xa2>
 8015d62:	1c53      	adds	r3, r2, #1
 8015d64:	d108      	bne.n	8015d78 <_strtol_l.isra.0+0xdc>
 8015d66:	2322      	movs	r3, #34	@ 0x22
 8015d68:	f8ce 3000 	str.w	r3, [lr]
 8015d6c:	4660      	mov	r0, ip
 8015d6e:	f1b8 0f00 	cmp.w	r8, #0
 8015d72:	d0a0      	beq.n	8015cb6 <_strtol_l.isra.0+0x1a>
 8015d74:	1e69      	subs	r1, r5, #1
 8015d76:	e006      	b.n	8015d86 <_strtol_l.isra.0+0xea>
 8015d78:	b106      	cbz	r6, 8015d7c <_strtol_l.isra.0+0xe0>
 8015d7a:	4240      	negs	r0, r0
 8015d7c:	f1b8 0f00 	cmp.w	r8, #0
 8015d80:	d099      	beq.n	8015cb6 <_strtol_l.isra.0+0x1a>
 8015d82:	2a00      	cmp	r2, #0
 8015d84:	d1f6      	bne.n	8015d74 <_strtol_l.isra.0+0xd8>
 8015d86:	f8c8 1000 	str.w	r1, [r8]
 8015d8a:	e794      	b.n	8015cb6 <_strtol_l.isra.0+0x1a>
 8015d8c:	0801767f 	.word	0x0801767f

08015d90 <_strtol_r>:
 8015d90:	f7ff bf84 	b.w	8015c9c <_strtol_l.isra.0>

08015d94 <strtol>:
 8015d94:	4613      	mov	r3, r2
 8015d96:	460a      	mov	r2, r1
 8015d98:	4601      	mov	r1, r0
 8015d9a:	4802      	ldr	r0, [pc, #8]	@ (8015da4 <strtol+0x10>)
 8015d9c:	6800      	ldr	r0, [r0, #0]
 8015d9e:	f7ff bf7d 	b.w	8015c9c <_strtol_l.isra.0>
 8015da2:	bf00      	nop
 8015da4:	2000019c 	.word	0x2000019c

08015da8 <siprintf>:
 8015da8:	b40e      	push	{r1, r2, r3}
 8015daa:	b510      	push	{r4, lr}
 8015dac:	b09d      	sub	sp, #116	@ 0x74
 8015dae:	ab1f      	add	r3, sp, #124	@ 0x7c
 8015db0:	9002      	str	r0, [sp, #8]
 8015db2:	9006      	str	r0, [sp, #24]
 8015db4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015db8:	480a      	ldr	r0, [pc, #40]	@ (8015de4 <siprintf+0x3c>)
 8015dba:	9107      	str	r1, [sp, #28]
 8015dbc:	9104      	str	r1, [sp, #16]
 8015dbe:	490a      	ldr	r1, [pc, #40]	@ (8015de8 <siprintf+0x40>)
 8015dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8015dc4:	9105      	str	r1, [sp, #20]
 8015dc6:	2400      	movs	r4, #0
 8015dc8:	a902      	add	r1, sp, #8
 8015dca:	6800      	ldr	r0, [r0, #0]
 8015dcc:	9301      	str	r3, [sp, #4]
 8015dce:	941b      	str	r4, [sp, #108]	@ 0x6c
 8015dd0:	f000 fa30 	bl	8016234 <_svfiprintf_r>
 8015dd4:	9b02      	ldr	r3, [sp, #8]
 8015dd6:	701c      	strb	r4, [r3, #0]
 8015dd8:	b01d      	add	sp, #116	@ 0x74
 8015dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015dde:	b003      	add	sp, #12
 8015de0:	4770      	bx	lr
 8015de2:	bf00      	nop
 8015de4:	2000019c 	.word	0x2000019c
 8015de8:	ffff0208 	.word	0xffff0208

08015dec <siscanf>:
 8015dec:	b40e      	push	{r1, r2, r3}
 8015dee:	b570      	push	{r4, r5, r6, lr}
 8015df0:	b09d      	sub	sp, #116	@ 0x74
 8015df2:	ac21      	add	r4, sp, #132	@ 0x84
 8015df4:	2500      	movs	r5, #0
 8015df6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8015dfa:	f854 6b04 	ldr.w	r6, [r4], #4
 8015dfe:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015e02:	951b      	str	r5, [sp, #108]	@ 0x6c
 8015e04:	9002      	str	r0, [sp, #8]
 8015e06:	9006      	str	r0, [sp, #24]
 8015e08:	f7ea f9ec 	bl	80001e4 <strlen>
 8015e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8015e3c <siscanf+0x50>)
 8015e0e:	9003      	str	r0, [sp, #12]
 8015e10:	9007      	str	r0, [sp, #28]
 8015e12:	480b      	ldr	r0, [pc, #44]	@ (8015e40 <siscanf+0x54>)
 8015e14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015e16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015e1a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015e1e:	4632      	mov	r2, r6
 8015e20:	4623      	mov	r3, r4
 8015e22:	a902      	add	r1, sp, #8
 8015e24:	6800      	ldr	r0, [r0, #0]
 8015e26:	950f      	str	r5, [sp, #60]	@ 0x3c
 8015e28:	9514      	str	r5, [sp, #80]	@ 0x50
 8015e2a:	9401      	str	r4, [sp, #4]
 8015e2c:	f000 fb58 	bl	80164e0 <__ssvfiscanf_r>
 8015e30:	b01d      	add	sp, #116	@ 0x74
 8015e32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e36:	b003      	add	sp, #12
 8015e38:	4770      	bx	lr
 8015e3a:	bf00      	nop
 8015e3c:	08015e45 	.word	0x08015e45
 8015e40:	2000019c 	.word	0x2000019c

08015e44 <__seofread>:
 8015e44:	2000      	movs	r0, #0
 8015e46:	4770      	bx	lr

08015e48 <memcmp>:
 8015e48:	b510      	push	{r4, lr}
 8015e4a:	3901      	subs	r1, #1
 8015e4c:	4402      	add	r2, r0
 8015e4e:	4290      	cmp	r0, r2
 8015e50:	d101      	bne.n	8015e56 <memcmp+0xe>
 8015e52:	2000      	movs	r0, #0
 8015e54:	e005      	b.n	8015e62 <memcmp+0x1a>
 8015e56:	7803      	ldrb	r3, [r0, #0]
 8015e58:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015e5c:	42a3      	cmp	r3, r4
 8015e5e:	d001      	beq.n	8015e64 <memcmp+0x1c>
 8015e60:	1b18      	subs	r0, r3, r4
 8015e62:	bd10      	pop	{r4, pc}
 8015e64:	3001      	adds	r0, #1
 8015e66:	e7f2      	b.n	8015e4e <memcmp+0x6>

08015e68 <memset>:
 8015e68:	4402      	add	r2, r0
 8015e6a:	4603      	mov	r3, r0
 8015e6c:	4293      	cmp	r3, r2
 8015e6e:	d100      	bne.n	8015e72 <memset+0xa>
 8015e70:	4770      	bx	lr
 8015e72:	f803 1b01 	strb.w	r1, [r3], #1
 8015e76:	e7f9      	b.n	8015e6c <memset+0x4>

08015e78 <strchr>:
 8015e78:	b2c9      	uxtb	r1, r1
 8015e7a:	4603      	mov	r3, r0
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e82:	b112      	cbz	r2, 8015e8a <strchr+0x12>
 8015e84:	428a      	cmp	r2, r1
 8015e86:	d1f9      	bne.n	8015e7c <strchr+0x4>
 8015e88:	4770      	bx	lr
 8015e8a:	2900      	cmp	r1, #0
 8015e8c:	bf18      	it	ne
 8015e8e:	2000      	movne	r0, #0
 8015e90:	4770      	bx	lr

08015e92 <strncmp>:
 8015e92:	b510      	push	{r4, lr}
 8015e94:	b16a      	cbz	r2, 8015eb2 <strncmp+0x20>
 8015e96:	3901      	subs	r1, #1
 8015e98:	1884      	adds	r4, r0, r2
 8015e9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015e9e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015ea2:	429a      	cmp	r2, r3
 8015ea4:	d103      	bne.n	8015eae <strncmp+0x1c>
 8015ea6:	42a0      	cmp	r0, r4
 8015ea8:	d001      	beq.n	8015eae <strncmp+0x1c>
 8015eaa:	2a00      	cmp	r2, #0
 8015eac:	d1f5      	bne.n	8015e9a <strncmp+0x8>
 8015eae:	1ad0      	subs	r0, r2, r3
 8015eb0:	bd10      	pop	{r4, pc}
 8015eb2:	4610      	mov	r0, r2
 8015eb4:	e7fc      	b.n	8015eb0 <strncmp+0x1e>

08015eb6 <strncpy>:
 8015eb6:	b510      	push	{r4, lr}
 8015eb8:	3901      	subs	r1, #1
 8015eba:	4603      	mov	r3, r0
 8015ebc:	b132      	cbz	r2, 8015ecc <strncpy+0x16>
 8015ebe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015ec2:	f803 4b01 	strb.w	r4, [r3], #1
 8015ec6:	3a01      	subs	r2, #1
 8015ec8:	2c00      	cmp	r4, #0
 8015eca:	d1f7      	bne.n	8015ebc <strncpy+0x6>
 8015ecc:	441a      	add	r2, r3
 8015ece:	2100      	movs	r1, #0
 8015ed0:	4293      	cmp	r3, r2
 8015ed2:	d100      	bne.n	8015ed6 <strncpy+0x20>
 8015ed4:	bd10      	pop	{r4, pc}
 8015ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8015eda:	e7f9      	b.n	8015ed0 <strncpy+0x1a>

08015edc <strstr>:
 8015edc:	780a      	ldrb	r2, [r1, #0]
 8015ede:	b570      	push	{r4, r5, r6, lr}
 8015ee0:	b96a      	cbnz	r2, 8015efe <strstr+0x22>
 8015ee2:	bd70      	pop	{r4, r5, r6, pc}
 8015ee4:	429a      	cmp	r2, r3
 8015ee6:	d109      	bne.n	8015efc <strstr+0x20>
 8015ee8:	460c      	mov	r4, r1
 8015eea:	4605      	mov	r5, r0
 8015eec:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d0f6      	beq.n	8015ee2 <strstr+0x6>
 8015ef4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8015ef8:	429e      	cmp	r6, r3
 8015efa:	d0f7      	beq.n	8015eec <strstr+0x10>
 8015efc:	3001      	adds	r0, #1
 8015efe:	7803      	ldrb	r3, [r0, #0]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d1ef      	bne.n	8015ee4 <strstr+0x8>
 8015f04:	4618      	mov	r0, r3
 8015f06:	e7ec      	b.n	8015ee2 <strstr+0x6>

08015f08 <__errno>:
 8015f08:	4b01      	ldr	r3, [pc, #4]	@ (8015f10 <__errno+0x8>)
 8015f0a:	6818      	ldr	r0, [r3, #0]
 8015f0c:	4770      	bx	lr
 8015f0e:	bf00      	nop
 8015f10:	2000019c 	.word	0x2000019c

08015f14 <__libc_init_array>:
 8015f14:	b570      	push	{r4, r5, r6, lr}
 8015f16:	4d0d      	ldr	r5, [pc, #52]	@ (8015f4c <__libc_init_array+0x38>)
 8015f18:	4c0d      	ldr	r4, [pc, #52]	@ (8015f50 <__libc_init_array+0x3c>)
 8015f1a:	1b64      	subs	r4, r4, r5
 8015f1c:	10a4      	asrs	r4, r4, #2
 8015f1e:	2600      	movs	r6, #0
 8015f20:	42a6      	cmp	r6, r4
 8015f22:	d109      	bne.n	8015f38 <__libc_init_array+0x24>
 8015f24:	4d0b      	ldr	r5, [pc, #44]	@ (8015f54 <__libc_init_array+0x40>)
 8015f26:	4c0c      	ldr	r4, [pc, #48]	@ (8015f58 <__libc_init_array+0x44>)
 8015f28:	f001 f86e 	bl	8017008 <_init>
 8015f2c:	1b64      	subs	r4, r4, r5
 8015f2e:	10a4      	asrs	r4, r4, #2
 8015f30:	2600      	movs	r6, #0
 8015f32:	42a6      	cmp	r6, r4
 8015f34:	d105      	bne.n	8015f42 <__libc_init_array+0x2e>
 8015f36:	bd70      	pop	{r4, r5, r6, pc}
 8015f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8015f3c:	4798      	blx	r3
 8015f3e:	3601      	adds	r6, #1
 8015f40:	e7ee      	b.n	8015f20 <__libc_init_array+0xc>
 8015f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8015f46:	4798      	blx	r3
 8015f48:	3601      	adds	r6, #1
 8015f4a:	e7f2      	b.n	8015f32 <__libc_init_array+0x1e>
 8015f4c:	080177d8 	.word	0x080177d8
 8015f50:	080177d8 	.word	0x080177d8
 8015f54:	080177d8 	.word	0x080177d8
 8015f58:	080177dc 	.word	0x080177dc

08015f5c <__retarget_lock_acquire_recursive>:
 8015f5c:	4770      	bx	lr

08015f5e <__retarget_lock_release_recursive>:
 8015f5e:	4770      	bx	lr

08015f60 <strcpy>:
 8015f60:	4603      	mov	r3, r0
 8015f62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015f66:	f803 2b01 	strb.w	r2, [r3], #1
 8015f6a:	2a00      	cmp	r2, #0
 8015f6c:	d1f9      	bne.n	8015f62 <strcpy+0x2>
 8015f6e:	4770      	bx	lr

08015f70 <memcpy>:
 8015f70:	440a      	add	r2, r1
 8015f72:	4291      	cmp	r1, r2
 8015f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8015f78:	d100      	bne.n	8015f7c <memcpy+0xc>
 8015f7a:	4770      	bx	lr
 8015f7c:	b510      	push	{r4, lr}
 8015f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015f82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015f86:	4291      	cmp	r1, r2
 8015f88:	d1f9      	bne.n	8015f7e <memcpy+0xe>
 8015f8a:	bd10      	pop	{r4, pc}

08015f8c <_free_r>:
 8015f8c:	b538      	push	{r3, r4, r5, lr}
 8015f8e:	4605      	mov	r5, r0
 8015f90:	2900      	cmp	r1, #0
 8015f92:	d041      	beq.n	8016018 <_free_r+0x8c>
 8015f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f98:	1f0c      	subs	r4, r1, #4
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	bfb8      	it	lt
 8015f9e:	18e4      	addlt	r4, r4, r3
 8015fa0:	f000 f8e0 	bl	8016164 <__malloc_lock>
 8015fa4:	4a1d      	ldr	r2, [pc, #116]	@ (801601c <_free_r+0x90>)
 8015fa6:	6813      	ldr	r3, [r2, #0]
 8015fa8:	b933      	cbnz	r3, 8015fb8 <_free_r+0x2c>
 8015faa:	6063      	str	r3, [r4, #4]
 8015fac:	6014      	str	r4, [r2, #0]
 8015fae:	4628      	mov	r0, r5
 8015fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015fb4:	f000 b8dc 	b.w	8016170 <__malloc_unlock>
 8015fb8:	42a3      	cmp	r3, r4
 8015fba:	d908      	bls.n	8015fce <_free_r+0x42>
 8015fbc:	6820      	ldr	r0, [r4, #0]
 8015fbe:	1821      	adds	r1, r4, r0
 8015fc0:	428b      	cmp	r3, r1
 8015fc2:	bf01      	itttt	eq
 8015fc4:	6819      	ldreq	r1, [r3, #0]
 8015fc6:	685b      	ldreq	r3, [r3, #4]
 8015fc8:	1809      	addeq	r1, r1, r0
 8015fca:	6021      	streq	r1, [r4, #0]
 8015fcc:	e7ed      	b.n	8015faa <_free_r+0x1e>
 8015fce:	461a      	mov	r2, r3
 8015fd0:	685b      	ldr	r3, [r3, #4]
 8015fd2:	b10b      	cbz	r3, 8015fd8 <_free_r+0x4c>
 8015fd4:	42a3      	cmp	r3, r4
 8015fd6:	d9fa      	bls.n	8015fce <_free_r+0x42>
 8015fd8:	6811      	ldr	r1, [r2, #0]
 8015fda:	1850      	adds	r0, r2, r1
 8015fdc:	42a0      	cmp	r0, r4
 8015fde:	d10b      	bne.n	8015ff8 <_free_r+0x6c>
 8015fe0:	6820      	ldr	r0, [r4, #0]
 8015fe2:	4401      	add	r1, r0
 8015fe4:	1850      	adds	r0, r2, r1
 8015fe6:	4283      	cmp	r3, r0
 8015fe8:	6011      	str	r1, [r2, #0]
 8015fea:	d1e0      	bne.n	8015fae <_free_r+0x22>
 8015fec:	6818      	ldr	r0, [r3, #0]
 8015fee:	685b      	ldr	r3, [r3, #4]
 8015ff0:	6053      	str	r3, [r2, #4]
 8015ff2:	4408      	add	r0, r1
 8015ff4:	6010      	str	r0, [r2, #0]
 8015ff6:	e7da      	b.n	8015fae <_free_r+0x22>
 8015ff8:	d902      	bls.n	8016000 <_free_r+0x74>
 8015ffa:	230c      	movs	r3, #12
 8015ffc:	602b      	str	r3, [r5, #0]
 8015ffe:	e7d6      	b.n	8015fae <_free_r+0x22>
 8016000:	6820      	ldr	r0, [r4, #0]
 8016002:	1821      	adds	r1, r4, r0
 8016004:	428b      	cmp	r3, r1
 8016006:	bf04      	itt	eq
 8016008:	6819      	ldreq	r1, [r3, #0]
 801600a:	685b      	ldreq	r3, [r3, #4]
 801600c:	6063      	str	r3, [r4, #4]
 801600e:	bf04      	itt	eq
 8016010:	1809      	addeq	r1, r1, r0
 8016012:	6021      	streq	r1, [r4, #0]
 8016014:	6054      	str	r4, [r2, #4]
 8016016:	e7ca      	b.n	8015fae <_free_r+0x22>
 8016018:	bd38      	pop	{r3, r4, r5, pc}
 801601a:	bf00      	nop
 801601c:	20005e50 	.word	0x20005e50

08016020 <sbrk_aligned>:
 8016020:	b570      	push	{r4, r5, r6, lr}
 8016022:	4e0f      	ldr	r6, [pc, #60]	@ (8016060 <sbrk_aligned+0x40>)
 8016024:	460c      	mov	r4, r1
 8016026:	6831      	ldr	r1, [r6, #0]
 8016028:	4605      	mov	r5, r0
 801602a:	b911      	cbnz	r1, 8016032 <sbrk_aligned+0x12>
 801602c:	f000 ff36 	bl	8016e9c <_sbrk_r>
 8016030:	6030      	str	r0, [r6, #0]
 8016032:	4621      	mov	r1, r4
 8016034:	4628      	mov	r0, r5
 8016036:	f000 ff31 	bl	8016e9c <_sbrk_r>
 801603a:	1c43      	adds	r3, r0, #1
 801603c:	d103      	bne.n	8016046 <sbrk_aligned+0x26>
 801603e:	f04f 34ff 	mov.w	r4, #4294967295
 8016042:	4620      	mov	r0, r4
 8016044:	bd70      	pop	{r4, r5, r6, pc}
 8016046:	1cc4      	adds	r4, r0, #3
 8016048:	f024 0403 	bic.w	r4, r4, #3
 801604c:	42a0      	cmp	r0, r4
 801604e:	d0f8      	beq.n	8016042 <sbrk_aligned+0x22>
 8016050:	1a21      	subs	r1, r4, r0
 8016052:	4628      	mov	r0, r5
 8016054:	f000 ff22 	bl	8016e9c <_sbrk_r>
 8016058:	3001      	adds	r0, #1
 801605a:	d1f2      	bne.n	8016042 <sbrk_aligned+0x22>
 801605c:	e7ef      	b.n	801603e <sbrk_aligned+0x1e>
 801605e:	bf00      	nop
 8016060:	20005e4c 	.word	0x20005e4c

08016064 <_malloc_r>:
 8016064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016068:	1ccd      	adds	r5, r1, #3
 801606a:	f025 0503 	bic.w	r5, r5, #3
 801606e:	3508      	adds	r5, #8
 8016070:	2d0c      	cmp	r5, #12
 8016072:	bf38      	it	cc
 8016074:	250c      	movcc	r5, #12
 8016076:	2d00      	cmp	r5, #0
 8016078:	4606      	mov	r6, r0
 801607a:	db01      	blt.n	8016080 <_malloc_r+0x1c>
 801607c:	42a9      	cmp	r1, r5
 801607e:	d904      	bls.n	801608a <_malloc_r+0x26>
 8016080:	230c      	movs	r3, #12
 8016082:	6033      	str	r3, [r6, #0]
 8016084:	2000      	movs	r0, #0
 8016086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801608a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016160 <_malloc_r+0xfc>
 801608e:	f000 f869 	bl	8016164 <__malloc_lock>
 8016092:	f8d8 3000 	ldr.w	r3, [r8]
 8016096:	461c      	mov	r4, r3
 8016098:	bb44      	cbnz	r4, 80160ec <_malloc_r+0x88>
 801609a:	4629      	mov	r1, r5
 801609c:	4630      	mov	r0, r6
 801609e:	f7ff ffbf 	bl	8016020 <sbrk_aligned>
 80160a2:	1c43      	adds	r3, r0, #1
 80160a4:	4604      	mov	r4, r0
 80160a6:	d158      	bne.n	801615a <_malloc_r+0xf6>
 80160a8:	f8d8 4000 	ldr.w	r4, [r8]
 80160ac:	4627      	mov	r7, r4
 80160ae:	2f00      	cmp	r7, #0
 80160b0:	d143      	bne.n	801613a <_malloc_r+0xd6>
 80160b2:	2c00      	cmp	r4, #0
 80160b4:	d04b      	beq.n	801614e <_malloc_r+0xea>
 80160b6:	6823      	ldr	r3, [r4, #0]
 80160b8:	4639      	mov	r1, r7
 80160ba:	4630      	mov	r0, r6
 80160bc:	eb04 0903 	add.w	r9, r4, r3
 80160c0:	f000 feec 	bl	8016e9c <_sbrk_r>
 80160c4:	4581      	cmp	r9, r0
 80160c6:	d142      	bne.n	801614e <_malloc_r+0xea>
 80160c8:	6821      	ldr	r1, [r4, #0]
 80160ca:	1a6d      	subs	r5, r5, r1
 80160cc:	4629      	mov	r1, r5
 80160ce:	4630      	mov	r0, r6
 80160d0:	f7ff ffa6 	bl	8016020 <sbrk_aligned>
 80160d4:	3001      	adds	r0, #1
 80160d6:	d03a      	beq.n	801614e <_malloc_r+0xea>
 80160d8:	6823      	ldr	r3, [r4, #0]
 80160da:	442b      	add	r3, r5
 80160dc:	6023      	str	r3, [r4, #0]
 80160de:	f8d8 3000 	ldr.w	r3, [r8]
 80160e2:	685a      	ldr	r2, [r3, #4]
 80160e4:	bb62      	cbnz	r2, 8016140 <_malloc_r+0xdc>
 80160e6:	f8c8 7000 	str.w	r7, [r8]
 80160ea:	e00f      	b.n	801610c <_malloc_r+0xa8>
 80160ec:	6822      	ldr	r2, [r4, #0]
 80160ee:	1b52      	subs	r2, r2, r5
 80160f0:	d420      	bmi.n	8016134 <_malloc_r+0xd0>
 80160f2:	2a0b      	cmp	r2, #11
 80160f4:	d917      	bls.n	8016126 <_malloc_r+0xc2>
 80160f6:	1961      	adds	r1, r4, r5
 80160f8:	42a3      	cmp	r3, r4
 80160fa:	6025      	str	r5, [r4, #0]
 80160fc:	bf18      	it	ne
 80160fe:	6059      	strne	r1, [r3, #4]
 8016100:	6863      	ldr	r3, [r4, #4]
 8016102:	bf08      	it	eq
 8016104:	f8c8 1000 	streq.w	r1, [r8]
 8016108:	5162      	str	r2, [r4, r5]
 801610a:	604b      	str	r3, [r1, #4]
 801610c:	4630      	mov	r0, r6
 801610e:	f000 f82f 	bl	8016170 <__malloc_unlock>
 8016112:	f104 000b 	add.w	r0, r4, #11
 8016116:	1d23      	adds	r3, r4, #4
 8016118:	f020 0007 	bic.w	r0, r0, #7
 801611c:	1ac2      	subs	r2, r0, r3
 801611e:	bf1c      	itt	ne
 8016120:	1a1b      	subne	r3, r3, r0
 8016122:	50a3      	strne	r3, [r4, r2]
 8016124:	e7af      	b.n	8016086 <_malloc_r+0x22>
 8016126:	6862      	ldr	r2, [r4, #4]
 8016128:	42a3      	cmp	r3, r4
 801612a:	bf0c      	ite	eq
 801612c:	f8c8 2000 	streq.w	r2, [r8]
 8016130:	605a      	strne	r2, [r3, #4]
 8016132:	e7eb      	b.n	801610c <_malloc_r+0xa8>
 8016134:	4623      	mov	r3, r4
 8016136:	6864      	ldr	r4, [r4, #4]
 8016138:	e7ae      	b.n	8016098 <_malloc_r+0x34>
 801613a:	463c      	mov	r4, r7
 801613c:	687f      	ldr	r7, [r7, #4]
 801613e:	e7b6      	b.n	80160ae <_malloc_r+0x4a>
 8016140:	461a      	mov	r2, r3
 8016142:	685b      	ldr	r3, [r3, #4]
 8016144:	42a3      	cmp	r3, r4
 8016146:	d1fb      	bne.n	8016140 <_malloc_r+0xdc>
 8016148:	2300      	movs	r3, #0
 801614a:	6053      	str	r3, [r2, #4]
 801614c:	e7de      	b.n	801610c <_malloc_r+0xa8>
 801614e:	230c      	movs	r3, #12
 8016150:	6033      	str	r3, [r6, #0]
 8016152:	4630      	mov	r0, r6
 8016154:	f000 f80c 	bl	8016170 <__malloc_unlock>
 8016158:	e794      	b.n	8016084 <_malloc_r+0x20>
 801615a:	6005      	str	r5, [r0, #0]
 801615c:	e7d6      	b.n	801610c <_malloc_r+0xa8>
 801615e:	bf00      	nop
 8016160:	20005e50 	.word	0x20005e50

08016164 <__malloc_lock>:
 8016164:	4801      	ldr	r0, [pc, #4]	@ (801616c <__malloc_lock+0x8>)
 8016166:	f7ff bef9 	b.w	8015f5c <__retarget_lock_acquire_recursive>
 801616a:	bf00      	nop
 801616c:	20005e48 	.word	0x20005e48

08016170 <__malloc_unlock>:
 8016170:	4801      	ldr	r0, [pc, #4]	@ (8016178 <__malloc_unlock+0x8>)
 8016172:	f7ff bef4 	b.w	8015f5e <__retarget_lock_release_recursive>
 8016176:	bf00      	nop
 8016178:	20005e48 	.word	0x20005e48

0801617c <__ssputs_r>:
 801617c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016180:	688e      	ldr	r6, [r1, #8]
 8016182:	461f      	mov	r7, r3
 8016184:	42be      	cmp	r6, r7
 8016186:	680b      	ldr	r3, [r1, #0]
 8016188:	4682      	mov	sl, r0
 801618a:	460c      	mov	r4, r1
 801618c:	4690      	mov	r8, r2
 801618e:	d82d      	bhi.n	80161ec <__ssputs_r+0x70>
 8016190:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016194:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016198:	d026      	beq.n	80161e8 <__ssputs_r+0x6c>
 801619a:	6965      	ldr	r5, [r4, #20]
 801619c:	6909      	ldr	r1, [r1, #16]
 801619e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80161a2:	eba3 0901 	sub.w	r9, r3, r1
 80161a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80161aa:	1c7b      	adds	r3, r7, #1
 80161ac:	444b      	add	r3, r9
 80161ae:	106d      	asrs	r5, r5, #1
 80161b0:	429d      	cmp	r5, r3
 80161b2:	bf38      	it	cc
 80161b4:	461d      	movcc	r5, r3
 80161b6:	0553      	lsls	r3, r2, #21
 80161b8:	d527      	bpl.n	801620a <__ssputs_r+0x8e>
 80161ba:	4629      	mov	r1, r5
 80161bc:	f7ff ff52 	bl	8016064 <_malloc_r>
 80161c0:	4606      	mov	r6, r0
 80161c2:	b360      	cbz	r0, 801621e <__ssputs_r+0xa2>
 80161c4:	6921      	ldr	r1, [r4, #16]
 80161c6:	464a      	mov	r2, r9
 80161c8:	f7ff fed2 	bl	8015f70 <memcpy>
 80161cc:	89a3      	ldrh	r3, [r4, #12]
 80161ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80161d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80161d6:	81a3      	strh	r3, [r4, #12]
 80161d8:	6126      	str	r6, [r4, #16]
 80161da:	6165      	str	r5, [r4, #20]
 80161dc:	444e      	add	r6, r9
 80161de:	eba5 0509 	sub.w	r5, r5, r9
 80161e2:	6026      	str	r6, [r4, #0]
 80161e4:	60a5      	str	r5, [r4, #8]
 80161e6:	463e      	mov	r6, r7
 80161e8:	42be      	cmp	r6, r7
 80161ea:	d900      	bls.n	80161ee <__ssputs_r+0x72>
 80161ec:	463e      	mov	r6, r7
 80161ee:	6820      	ldr	r0, [r4, #0]
 80161f0:	4632      	mov	r2, r6
 80161f2:	4641      	mov	r1, r8
 80161f4:	f000 fe37 	bl	8016e66 <memmove>
 80161f8:	68a3      	ldr	r3, [r4, #8]
 80161fa:	1b9b      	subs	r3, r3, r6
 80161fc:	60a3      	str	r3, [r4, #8]
 80161fe:	6823      	ldr	r3, [r4, #0]
 8016200:	4433      	add	r3, r6
 8016202:	6023      	str	r3, [r4, #0]
 8016204:	2000      	movs	r0, #0
 8016206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801620a:	462a      	mov	r2, r5
 801620c:	f000 fe56 	bl	8016ebc <_realloc_r>
 8016210:	4606      	mov	r6, r0
 8016212:	2800      	cmp	r0, #0
 8016214:	d1e0      	bne.n	80161d8 <__ssputs_r+0x5c>
 8016216:	6921      	ldr	r1, [r4, #16]
 8016218:	4650      	mov	r0, sl
 801621a:	f7ff feb7 	bl	8015f8c <_free_r>
 801621e:	230c      	movs	r3, #12
 8016220:	f8ca 3000 	str.w	r3, [sl]
 8016224:	89a3      	ldrh	r3, [r4, #12]
 8016226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801622a:	81a3      	strh	r3, [r4, #12]
 801622c:	f04f 30ff 	mov.w	r0, #4294967295
 8016230:	e7e9      	b.n	8016206 <__ssputs_r+0x8a>
	...

08016234 <_svfiprintf_r>:
 8016234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016238:	4698      	mov	r8, r3
 801623a:	898b      	ldrh	r3, [r1, #12]
 801623c:	061b      	lsls	r3, r3, #24
 801623e:	b09d      	sub	sp, #116	@ 0x74
 8016240:	4607      	mov	r7, r0
 8016242:	460d      	mov	r5, r1
 8016244:	4614      	mov	r4, r2
 8016246:	d510      	bpl.n	801626a <_svfiprintf_r+0x36>
 8016248:	690b      	ldr	r3, [r1, #16]
 801624a:	b973      	cbnz	r3, 801626a <_svfiprintf_r+0x36>
 801624c:	2140      	movs	r1, #64	@ 0x40
 801624e:	f7ff ff09 	bl	8016064 <_malloc_r>
 8016252:	6028      	str	r0, [r5, #0]
 8016254:	6128      	str	r0, [r5, #16]
 8016256:	b930      	cbnz	r0, 8016266 <_svfiprintf_r+0x32>
 8016258:	230c      	movs	r3, #12
 801625a:	603b      	str	r3, [r7, #0]
 801625c:	f04f 30ff 	mov.w	r0, #4294967295
 8016260:	b01d      	add	sp, #116	@ 0x74
 8016262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016266:	2340      	movs	r3, #64	@ 0x40
 8016268:	616b      	str	r3, [r5, #20]
 801626a:	2300      	movs	r3, #0
 801626c:	9309      	str	r3, [sp, #36]	@ 0x24
 801626e:	2320      	movs	r3, #32
 8016270:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016274:	f8cd 800c 	str.w	r8, [sp, #12]
 8016278:	2330      	movs	r3, #48	@ 0x30
 801627a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016418 <_svfiprintf_r+0x1e4>
 801627e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016282:	f04f 0901 	mov.w	r9, #1
 8016286:	4623      	mov	r3, r4
 8016288:	469a      	mov	sl, r3
 801628a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801628e:	b10a      	cbz	r2, 8016294 <_svfiprintf_r+0x60>
 8016290:	2a25      	cmp	r2, #37	@ 0x25
 8016292:	d1f9      	bne.n	8016288 <_svfiprintf_r+0x54>
 8016294:	ebba 0b04 	subs.w	fp, sl, r4
 8016298:	d00b      	beq.n	80162b2 <_svfiprintf_r+0x7e>
 801629a:	465b      	mov	r3, fp
 801629c:	4622      	mov	r2, r4
 801629e:	4629      	mov	r1, r5
 80162a0:	4638      	mov	r0, r7
 80162a2:	f7ff ff6b 	bl	801617c <__ssputs_r>
 80162a6:	3001      	adds	r0, #1
 80162a8:	f000 80a7 	beq.w	80163fa <_svfiprintf_r+0x1c6>
 80162ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80162ae:	445a      	add	r2, fp
 80162b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80162b2:	f89a 3000 	ldrb.w	r3, [sl]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	f000 809f 	beq.w	80163fa <_svfiprintf_r+0x1c6>
 80162bc:	2300      	movs	r3, #0
 80162be:	f04f 32ff 	mov.w	r2, #4294967295
 80162c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80162c6:	f10a 0a01 	add.w	sl, sl, #1
 80162ca:	9304      	str	r3, [sp, #16]
 80162cc:	9307      	str	r3, [sp, #28]
 80162ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80162d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80162d4:	4654      	mov	r4, sl
 80162d6:	2205      	movs	r2, #5
 80162d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162dc:	484e      	ldr	r0, [pc, #312]	@ (8016418 <_svfiprintf_r+0x1e4>)
 80162de:	f7e9 ff8f 	bl	8000200 <memchr>
 80162e2:	9a04      	ldr	r2, [sp, #16]
 80162e4:	b9d8      	cbnz	r0, 801631e <_svfiprintf_r+0xea>
 80162e6:	06d0      	lsls	r0, r2, #27
 80162e8:	bf44      	itt	mi
 80162ea:	2320      	movmi	r3, #32
 80162ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80162f0:	0711      	lsls	r1, r2, #28
 80162f2:	bf44      	itt	mi
 80162f4:	232b      	movmi	r3, #43	@ 0x2b
 80162f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80162fa:	f89a 3000 	ldrb.w	r3, [sl]
 80162fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8016300:	d015      	beq.n	801632e <_svfiprintf_r+0xfa>
 8016302:	9a07      	ldr	r2, [sp, #28]
 8016304:	4654      	mov	r4, sl
 8016306:	2000      	movs	r0, #0
 8016308:	f04f 0c0a 	mov.w	ip, #10
 801630c:	4621      	mov	r1, r4
 801630e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016312:	3b30      	subs	r3, #48	@ 0x30
 8016314:	2b09      	cmp	r3, #9
 8016316:	d94b      	bls.n	80163b0 <_svfiprintf_r+0x17c>
 8016318:	b1b0      	cbz	r0, 8016348 <_svfiprintf_r+0x114>
 801631a:	9207      	str	r2, [sp, #28]
 801631c:	e014      	b.n	8016348 <_svfiprintf_r+0x114>
 801631e:	eba0 0308 	sub.w	r3, r0, r8
 8016322:	fa09 f303 	lsl.w	r3, r9, r3
 8016326:	4313      	orrs	r3, r2
 8016328:	9304      	str	r3, [sp, #16]
 801632a:	46a2      	mov	sl, r4
 801632c:	e7d2      	b.n	80162d4 <_svfiprintf_r+0xa0>
 801632e:	9b03      	ldr	r3, [sp, #12]
 8016330:	1d19      	adds	r1, r3, #4
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	9103      	str	r1, [sp, #12]
 8016336:	2b00      	cmp	r3, #0
 8016338:	bfbb      	ittet	lt
 801633a:	425b      	neglt	r3, r3
 801633c:	f042 0202 	orrlt.w	r2, r2, #2
 8016340:	9307      	strge	r3, [sp, #28]
 8016342:	9307      	strlt	r3, [sp, #28]
 8016344:	bfb8      	it	lt
 8016346:	9204      	strlt	r2, [sp, #16]
 8016348:	7823      	ldrb	r3, [r4, #0]
 801634a:	2b2e      	cmp	r3, #46	@ 0x2e
 801634c:	d10a      	bne.n	8016364 <_svfiprintf_r+0x130>
 801634e:	7863      	ldrb	r3, [r4, #1]
 8016350:	2b2a      	cmp	r3, #42	@ 0x2a
 8016352:	d132      	bne.n	80163ba <_svfiprintf_r+0x186>
 8016354:	9b03      	ldr	r3, [sp, #12]
 8016356:	1d1a      	adds	r2, r3, #4
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	9203      	str	r2, [sp, #12]
 801635c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016360:	3402      	adds	r4, #2
 8016362:	9305      	str	r3, [sp, #20]
 8016364:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016428 <_svfiprintf_r+0x1f4>
 8016368:	7821      	ldrb	r1, [r4, #0]
 801636a:	2203      	movs	r2, #3
 801636c:	4650      	mov	r0, sl
 801636e:	f7e9 ff47 	bl	8000200 <memchr>
 8016372:	b138      	cbz	r0, 8016384 <_svfiprintf_r+0x150>
 8016374:	9b04      	ldr	r3, [sp, #16]
 8016376:	eba0 000a 	sub.w	r0, r0, sl
 801637a:	2240      	movs	r2, #64	@ 0x40
 801637c:	4082      	lsls	r2, r0
 801637e:	4313      	orrs	r3, r2
 8016380:	3401      	adds	r4, #1
 8016382:	9304      	str	r3, [sp, #16]
 8016384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016388:	4824      	ldr	r0, [pc, #144]	@ (801641c <_svfiprintf_r+0x1e8>)
 801638a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801638e:	2206      	movs	r2, #6
 8016390:	f7e9 ff36 	bl	8000200 <memchr>
 8016394:	2800      	cmp	r0, #0
 8016396:	d036      	beq.n	8016406 <_svfiprintf_r+0x1d2>
 8016398:	4b21      	ldr	r3, [pc, #132]	@ (8016420 <_svfiprintf_r+0x1ec>)
 801639a:	bb1b      	cbnz	r3, 80163e4 <_svfiprintf_r+0x1b0>
 801639c:	9b03      	ldr	r3, [sp, #12]
 801639e:	3307      	adds	r3, #7
 80163a0:	f023 0307 	bic.w	r3, r3, #7
 80163a4:	3308      	adds	r3, #8
 80163a6:	9303      	str	r3, [sp, #12]
 80163a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80163aa:	4433      	add	r3, r6
 80163ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80163ae:	e76a      	b.n	8016286 <_svfiprintf_r+0x52>
 80163b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80163b4:	460c      	mov	r4, r1
 80163b6:	2001      	movs	r0, #1
 80163b8:	e7a8      	b.n	801630c <_svfiprintf_r+0xd8>
 80163ba:	2300      	movs	r3, #0
 80163bc:	3401      	adds	r4, #1
 80163be:	9305      	str	r3, [sp, #20]
 80163c0:	4619      	mov	r1, r3
 80163c2:	f04f 0c0a 	mov.w	ip, #10
 80163c6:	4620      	mov	r0, r4
 80163c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80163cc:	3a30      	subs	r2, #48	@ 0x30
 80163ce:	2a09      	cmp	r2, #9
 80163d0:	d903      	bls.n	80163da <_svfiprintf_r+0x1a6>
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d0c6      	beq.n	8016364 <_svfiprintf_r+0x130>
 80163d6:	9105      	str	r1, [sp, #20]
 80163d8:	e7c4      	b.n	8016364 <_svfiprintf_r+0x130>
 80163da:	fb0c 2101 	mla	r1, ip, r1, r2
 80163de:	4604      	mov	r4, r0
 80163e0:	2301      	movs	r3, #1
 80163e2:	e7f0      	b.n	80163c6 <_svfiprintf_r+0x192>
 80163e4:	ab03      	add	r3, sp, #12
 80163e6:	9300      	str	r3, [sp, #0]
 80163e8:	462a      	mov	r2, r5
 80163ea:	4b0e      	ldr	r3, [pc, #56]	@ (8016424 <_svfiprintf_r+0x1f0>)
 80163ec:	a904      	add	r1, sp, #16
 80163ee:	4638      	mov	r0, r7
 80163f0:	f3af 8000 	nop.w
 80163f4:	1c42      	adds	r2, r0, #1
 80163f6:	4606      	mov	r6, r0
 80163f8:	d1d6      	bne.n	80163a8 <_svfiprintf_r+0x174>
 80163fa:	89ab      	ldrh	r3, [r5, #12]
 80163fc:	065b      	lsls	r3, r3, #25
 80163fe:	f53f af2d 	bmi.w	801625c <_svfiprintf_r+0x28>
 8016402:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016404:	e72c      	b.n	8016260 <_svfiprintf_r+0x2c>
 8016406:	ab03      	add	r3, sp, #12
 8016408:	9300      	str	r3, [sp, #0]
 801640a:	462a      	mov	r2, r5
 801640c:	4b05      	ldr	r3, [pc, #20]	@ (8016424 <_svfiprintf_r+0x1f0>)
 801640e:	a904      	add	r1, sp, #16
 8016410:	4638      	mov	r0, r7
 8016412:	f000 fa49 	bl	80168a8 <_printf_i>
 8016416:	e7ed      	b.n	80163f4 <_svfiprintf_r+0x1c0>
 8016418:	0801777f 	.word	0x0801777f
 801641c:	08017789 	.word	0x08017789
 8016420:	00000000 	.word	0x00000000
 8016424:	0801617d 	.word	0x0801617d
 8016428:	08017785 	.word	0x08017785

0801642c <_sungetc_r>:
 801642c:	b538      	push	{r3, r4, r5, lr}
 801642e:	1c4b      	adds	r3, r1, #1
 8016430:	4614      	mov	r4, r2
 8016432:	d103      	bne.n	801643c <_sungetc_r+0x10>
 8016434:	f04f 35ff 	mov.w	r5, #4294967295
 8016438:	4628      	mov	r0, r5
 801643a:	bd38      	pop	{r3, r4, r5, pc}
 801643c:	8993      	ldrh	r3, [r2, #12]
 801643e:	f023 0320 	bic.w	r3, r3, #32
 8016442:	8193      	strh	r3, [r2, #12]
 8016444:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016446:	6852      	ldr	r2, [r2, #4]
 8016448:	b2cd      	uxtb	r5, r1
 801644a:	b18b      	cbz	r3, 8016470 <_sungetc_r+0x44>
 801644c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801644e:	4293      	cmp	r3, r2
 8016450:	dd08      	ble.n	8016464 <_sungetc_r+0x38>
 8016452:	6823      	ldr	r3, [r4, #0]
 8016454:	1e5a      	subs	r2, r3, #1
 8016456:	6022      	str	r2, [r4, #0]
 8016458:	f803 5c01 	strb.w	r5, [r3, #-1]
 801645c:	6863      	ldr	r3, [r4, #4]
 801645e:	3301      	adds	r3, #1
 8016460:	6063      	str	r3, [r4, #4]
 8016462:	e7e9      	b.n	8016438 <_sungetc_r+0xc>
 8016464:	4621      	mov	r1, r4
 8016466:	f000 fcc4 	bl	8016df2 <__submore>
 801646a:	2800      	cmp	r0, #0
 801646c:	d0f1      	beq.n	8016452 <_sungetc_r+0x26>
 801646e:	e7e1      	b.n	8016434 <_sungetc_r+0x8>
 8016470:	6921      	ldr	r1, [r4, #16]
 8016472:	6823      	ldr	r3, [r4, #0]
 8016474:	b151      	cbz	r1, 801648c <_sungetc_r+0x60>
 8016476:	4299      	cmp	r1, r3
 8016478:	d208      	bcs.n	801648c <_sungetc_r+0x60>
 801647a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801647e:	42a9      	cmp	r1, r5
 8016480:	d104      	bne.n	801648c <_sungetc_r+0x60>
 8016482:	3b01      	subs	r3, #1
 8016484:	3201      	adds	r2, #1
 8016486:	6023      	str	r3, [r4, #0]
 8016488:	6062      	str	r2, [r4, #4]
 801648a:	e7d5      	b.n	8016438 <_sungetc_r+0xc>
 801648c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8016490:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016494:	6363      	str	r3, [r4, #52]	@ 0x34
 8016496:	2303      	movs	r3, #3
 8016498:	63a3      	str	r3, [r4, #56]	@ 0x38
 801649a:	4623      	mov	r3, r4
 801649c:	f803 5f46 	strb.w	r5, [r3, #70]!
 80164a0:	6023      	str	r3, [r4, #0]
 80164a2:	2301      	movs	r3, #1
 80164a4:	e7dc      	b.n	8016460 <_sungetc_r+0x34>

080164a6 <__ssrefill_r>:
 80164a6:	b510      	push	{r4, lr}
 80164a8:	460c      	mov	r4, r1
 80164aa:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80164ac:	b169      	cbz	r1, 80164ca <__ssrefill_r+0x24>
 80164ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80164b2:	4299      	cmp	r1, r3
 80164b4:	d001      	beq.n	80164ba <__ssrefill_r+0x14>
 80164b6:	f7ff fd69 	bl	8015f8c <_free_r>
 80164ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80164bc:	6063      	str	r3, [r4, #4]
 80164be:	2000      	movs	r0, #0
 80164c0:	6360      	str	r0, [r4, #52]	@ 0x34
 80164c2:	b113      	cbz	r3, 80164ca <__ssrefill_r+0x24>
 80164c4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80164c6:	6023      	str	r3, [r4, #0]
 80164c8:	bd10      	pop	{r4, pc}
 80164ca:	6923      	ldr	r3, [r4, #16]
 80164cc:	6023      	str	r3, [r4, #0]
 80164ce:	2300      	movs	r3, #0
 80164d0:	6063      	str	r3, [r4, #4]
 80164d2:	89a3      	ldrh	r3, [r4, #12]
 80164d4:	f043 0320 	orr.w	r3, r3, #32
 80164d8:	81a3      	strh	r3, [r4, #12]
 80164da:	f04f 30ff 	mov.w	r0, #4294967295
 80164de:	e7f3      	b.n	80164c8 <__ssrefill_r+0x22>

080164e0 <__ssvfiscanf_r>:
 80164e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164e4:	460c      	mov	r4, r1
 80164e6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80164ea:	2100      	movs	r1, #0
 80164ec:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80164f0:	49a6      	ldr	r1, [pc, #664]	@ (801678c <__ssvfiscanf_r+0x2ac>)
 80164f2:	91a0      	str	r1, [sp, #640]	@ 0x280
 80164f4:	f10d 0804 	add.w	r8, sp, #4
 80164f8:	49a5      	ldr	r1, [pc, #660]	@ (8016790 <__ssvfiscanf_r+0x2b0>)
 80164fa:	4fa6      	ldr	r7, [pc, #664]	@ (8016794 <__ssvfiscanf_r+0x2b4>)
 80164fc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8016500:	4606      	mov	r6, r0
 8016502:	91a1      	str	r1, [sp, #644]	@ 0x284
 8016504:	9300      	str	r3, [sp, #0]
 8016506:	f892 9000 	ldrb.w	r9, [r2]
 801650a:	f1b9 0f00 	cmp.w	r9, #0
 801650e:	f000 8158 	beq.w	80167c2 <__ssvfiscanf_r+0x2e2>
 8016512:	f817 3009 	ldrb.w	r3, [r7, r9]
 8016516:	f013 0308 	ands.w	r3, r3, #8
 801651a:	f102 0501 	add.w	r5, r2, #1
 801651e:	d019      	beq.n	8016554 <__ssvfiscanf_r+0x74>
 8016520:	6863      	ldr	r3, [r4, #4]
 8016522:	2b00      	cmp	r3, #0
 8016524:	dd0f      	ble.n	8016546 <__ssvfiscanf_r+0x66>
 8016526:	6823      	ldr	r3, [r4, #0]
 8016528:	781a      	ldrb	r2, [r3, #0]
 801652a:	5cba      	ldrb	r2, [r7, r2]
 801652c:	0712      	lsls	r2, r2, #28
 801652e:	d401      	bmi.n	8016534 <__ssvfiscanf_r+0x54>
 8016530:	462a      	mov	r2, r5
 8016532:	e7e8      	b.n	8016506 <__ssvfiscanf_r+0x26>
 8016534:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8016536:	3201      	adds	r2, #1
 8016538:	9245      	str	r2, [sp, #276]	@ 0x114
 801653a:	6862      	ldr	r2, [r4, #4]
 801653c:	3301      	adds	r3, #1
 801653e:	3a01      	subs	r2, #1
 8016540:	6062      	str	r2, [r4, #4]
 8016542:	6023      	str	r3, [r4, #0]
 8016544:	e7ec      	b.n	8016520 <__ssvfiscanf_r+0x40>
 8016546:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016548:	4621      	mov	r1, r4
 801654a:	4630      	mov	r0, r6
 801654c:	4798      	blx	r3
 801654e:	2800      	cmp	r0, #0
 8016550:	d0e9      	beq.n	8016526 <__ssvfiscanf_r+0x46>
 8016552:	e7ed      	b.n	8016530 <__ssvfiscanf_r+0x50>
 8016554:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8016558:	f040 8085 	bne.w	8016666 <__ssvfiscanf_r+0x186>
 801655c:	9341      	str	r3, [sp, #260]	@ 0x104
 801655e:	9343      	str	r3, [sp, #268]	@ 0x10c
 8016560:	7853      	ldrb	r3, [r2, #1]
 8016562:	2b2a      	cmp	r3, #42	@ 0x2a
 8016564:	bf02      	ittt	eq
 8016566:	2310      	moveq	r3, #16
 8016568:	1c95      	addeq	r5, r2, #2
 801656a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801656c:	220a      	movs	r2, #10
 801656e:	46aa      	mov	sl, r5
 8016570:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8016574:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8016578:	2b09      	cmp	r3, #9
 801657a:	d91e      	bls.n	80165ba <__ssvfiscanf_r+0xda>
 801657c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8016798 <__ssvfiscanf_r+0x2b8>
 8016580:	2203      	movs	r2, #3
 8016582:	4658      	mov	r0, fp
 8016584:	f7e9 fe3c 	bl	8000200 <memchr>
 8016588:	b138      	cbz	r0, 801659a <__ssvfiscanf_r+0xba>
 801658a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801658c:	eba0 000b 	sub.w	r0, r0, fp
 8016590:	2301      	movs	r3, #1
 8016592:	4083      	lsls	r3, r0
 8016594:	4313      	orrs	r3, r2
 8016596:	9341      	str	r3, [sp, #260]	@ 0x104
 8016598:	4655      	mov	r5, sl
 801659a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801659e:	2b78      	cmp	r3, #120	@ 0x78
 80165a0:	d806      	bhi.n	80165b0 <__ssvfiscanf_r+0xd0>
 80165a2:	2b57      	cmp	r3, #87	@ 0x57
 80165a4:	d810      	bhi.n	80165c8 <__ssvfiscanf_r+0xe8>
 80165a6:	2b25      	cmp	r3, #37	@ 0x25
 80165a8:	d05d      	beq.n	8016666 <__ssvfiscanf_r+0x186>
 80165aa:	d857      	bhi.n	801665c <__ssvfiscanf_r+0x17c>
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d075      	beq.n	801669c <__ssvfiscanf_r+0x1bc>
 80165b0:	2303      	movs	r3, #3
 80165b2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80165b4:	230a      	movs	r3, #10
 80165b6:	9342      	str	r3, [sp, #264]	@ 0x108
 80165b8:	e088      	b.n	80166cc <__ssvfiscanf_r+0x1ec>
 80165ba:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80165bc:	fb02 1103 	mla	r1, r2, r3, r1
 80165c0:	3930      	subs	r1, #48	@ 0x30
 80165c2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80165c4:	4655      	mov	r5, sl
 80165c6:	e7d2      	b.n	801656e <__ssvfiscanf_r+0x8e>
 80165c8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80165cc:	2a20      	cmp	r2, #32
 80165ce:	d8ef      	bhi.n	80165b0 <__ssvfiscanf_r+0xd0>
 80165d0:	a101      	add	r1, pc, #4	@ (adr r1, 80165d8 <__ssvfiscanf_r+0xf8>)
 80165d2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80165d6:	bf00      	nop
 80165d8:	080166ab 	.word	0x080166ab
 80165dc:	080165b1 	.word	0x080165b1
 80165e0:	080165b1 	.word	0x080165b1
 80165e4:	08016705 	.word	0x08016705
 80165e8:	080165b1 	.word	0x080165b1
 80165ec:	080165b1 	.word	0x080165b1
 80165f0:	080165b1 	.word	0x080165b1
 80165f4:	080165b1 	.word	0x080165b1
 80165f8:	080165b1 	.word	0x080165b1
 80165fc:	080165b1 	.word	0x080165b1
 8016600:	080165b1 	.word	0x080165b1
 8016604:	0801671b 	.word	0x0801671b
 8016608:	08016701 	.word	0x08016701
 801660c:	08016663 	.word	0x08016663
 8016610:	08016663 	.word	0x08016663
 8016614:	08016663 	.word	0x08016663
 8016618:	080165b1 	.word	0x080165b1
 801661c:	080166bd 	.word	0x080166bd
 8016620:	080165b1 	.word	0x080165b1
 8016624:	080165b1 	.word	0x080165b1
 8016628:	080165b1 	.word	0x080165b1
 801662c:	080165b1 	.word	0x080165b1
 8016630:	0801672b 	.word	0x0801672b
 8016634:	080166c5 	.word	0x080166c5
 8016638:	080166a3 	.word	0x080166a3
 801663c:	080165b1 	.word	0x080165b1
 8016640:	080165b1 	.word	0x080165b1
 8016644:	08016727 	.word	0x08016727
 8016648:	080165b1 	.word	0x080165b1
 801664c:	08016701 	.word	0x08016701
 8016650:	080165b1 	.word	0x080165b1
 8016654:	080165b1 	.word	0x080165b1
 8016658:	080166ab 	.word	0x080166ab
 801665c:	3b45      	subs	r3, #69	@ 0x45
 801665e:	2b02      	cmp	r3, #2
 8016660:	d8a6      	bhi.n	80165b0 <__ssvfiscanf_r+0xd0>
 8016662:	2305      	movs	r3, #5
 8016664:	e031      	b.n	80166ca <__ssvfiscanf_r+0x1ea>
 8016666:	6863      	ldr	r3, [r4, #4]
 8016668:	2b00      	cmp	r3, #0
 801666a:	dd0d      	ble.n	8016688 <__ssvfiscanf_r+0x1a8>
 801666c:	6823      	ldr	r3, [r4, #0]
 801666e:	781a      	ldrb	r2, [r3, #0]
 8016670:	454a      	cmp	r2, r9
 8016672:	f040 80a6 	bne.w	80167c2 <__ssvfiscanf_r+0x2e2>
 8016676:	3301      	adds	r3, #1
 8016678:	6862      	ldr	r2, [r4, #4]
 801667a:	6023      	str	r3, [r4, #0]
 801667c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801667e:	3a01      	subs	r2, #1
 8016680:	3301      	adds	r3, #1
 8016682:	6062      	str	r2, [r4, #4]
 8016684:	9345      	str	r3, [sp, #276]	@ 0x114
 8016686:	e753      	b.n	8016530 <__ssvfiscanf_r+0x50>
 8016688:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801668a:	4621      	mov	r1, r4
 801668c:	4630      	mov	r0, r6
 801668e:	4798      	blx	r3
 8016690:	2800      	cmp	r0, #0
 8016692:	d0eb      	beq.n	801666c <__ssvfiscanf_r+0x18c>
 8016694:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8016696:	2800      	cmp	r0, #0
 8016698:	f040 808b 	bne.w	80167b2 <__ssvfiscanf_r+0x2d2>
 801669c:	f04f 30ff 	mov.w	r0, #4294967295
 80166a0:	e08b      	b.n	80167ba <__ssvfiscanf_r+0x2da>
 80166a2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80166a4:	f042 0220 	orr.w	r2, r2, #32
 80166a8:	9241      	str	r2, [sp, #260]	@ 0x104
 80166aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80166ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80166b0:	9241      	str	r2, [sp, #260]	@ 0x104
 80166b2:	2210      	movs	r2, #16
 80166b4:	2b6e      	cmp	r3, #110	@ 0x6e
 80166b6:	9242      	str	r2, [sp, #264]	@ 0x108
 80166b8:	d902      	bls.n	80166c0 <__ssvfiscanf_r+0x1e0>
 80166ba:	e005      	b.n	80166c8 <__ssvfiscanf_r+0x1e8>
 80166bc:	2300      	movs	r3, #0
 80166be:	9342      	str	r3, [sp, #264]	@ 0x108
 80166c0:	2303      	movs	r3, #3
 80166c2:	e002      	b.n	80166ca <__ssvfiscanf_r+0x1ea>
 80166c4:	2308      	movs	r3, #8
 80166c6:	9342      	str	r3, [sp, #264]	@ 0x108
 80166c8:	2304      	movs	r3, #4
 80166ca:	9347      	str	r3, [sp, #284]	@ 0x11c
 80166cc:	6863      	ldr	r3, [r4, #4]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	dd39      	ble.n	8016746 <__ssvfiscanf_r+0x266>
 80166d2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80166d4:	0659      	lsls	r1, r3, #25
 80166d6:	d404      	bmi.n	80166e2 <__ssvfiscanf_r+0x202>
 80166d8:	6823      	ldr	r3, [r4, #0]
 80166da:	781a      	ldrb	r2, [r3, #0]
 80166dc:	5cba      	ldrb	r2, [r7, r2]
 80166de:	0712      	lsls	r2, r2, #28
 80166e0:	d438      	bmi.n	8016754 <__ssvfiscanf_r+0x274>
 80166e2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80166e4:	2b02      	cmp	r3, #2
 80166e6:	dc47      	bgt.n	8016778 <__ssvfiscanf_r+0x298>
 80166e8:	466b      	mov	r3, sp
 80166ea:	4622      	mov	r2, r4
 80166ec:	a941      	add	r1, sp, #260	@ 0x104
 80166ee:	4630      	mov	r0, r6
 80166f0:	f000 f9f8 	bl	8016ae4 <_scanf_chars>
 80166f4:	2801      	cmp	r0, #1
 80166f6:	d064      	beq.n	80167c2 <__ssvfiscanf_r+0x2e2>
 80166f8:	2802      	cmp	r0, #2
 80166fa:	f47f af19 	bne.w	8016530 <__ssvfiscanf_r+0x50>
 80166fe:	e7c9      	b.n	8016694 <__ssvfiscanf_r+0x1b4>
 8016700:	220a      	movs	r2, #10
 8016702:	e7d7      	b.n	80166b4 <__ssvfiscanf_r+0x1d4>
 8016704:	4629      	mov	r1, r5
 8016706:	4640      	mov	r0, r8
 8016708:	f000 fb3a 	bl	8016d80 <__sccl>
 801670c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801670e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016712:	9341      	str	r3, [sp, #260]	@ 0x104
 8016714:	4605      	mov	r5, r0
 8016716:	2301      	movs	r3, #1
 8016718:	e7d7      	b.n	80166ca <__ssvfiscanf_r+0x1ea>
 801671a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801671c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016720:	9341      	str	r3, [sp, #260]	@ 0x104
 8016722:	2300      	movs	r3, #0
 8016724:	e7d1      	b.n	80166ca <__ssvfiscanf_r+0x1ea>
 8016726:	2302      	movs	r3, #2
 8016728:	e7cf      	b.n	80166ca <__ssvfiscanf_r+0x1ea>
 801672a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801672c:	06c3      	lsls	r3, r0, #27
 801672e:	f53f aeff 	bmi.w	8016530 <__ssvfiscanf_r+0x50>
 8016732:	9b00      	ldr	r3, [sp, #0]
 8016734:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8016736:	1d19      	adds	r1, r3, #4
 8016738:	9100      	str	r1, [sp, #0]
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	07c0      	lsls	r0, r0, #31
 801673e:	bf4c      	ite	mi
 8016740:	801a      	strhmi	r2, [r3, #0]
 8016742:	601a      	strpl	r2, [r3, #0]
 8016744:	e6f4      	b.n	8016530 <__ssvfiscanf_r+0x50>
 8016746:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016748:	4621      	mov	r1, r4
 801674a:	4630      	mov	r0, r6
 801674c:	4798      	blx	r3
 801674e:	2800      	cmp	r0, #0
 8016750:	d0bf      	beq.n	80166d2 <__ssvfiscanf_r+0x1f2>
 8016752:	e79f      	b.n	8016694 <__ssvfiscanf_r+0x1b4>
 8016754:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8016756:	3201      	adds	r2, #1
 8016758:	9245      	str	r2, [sp, #276]	@ 0x114
 801675a:	6862      	ldr	r2, [r4, #4]
 801675c:	3a01      	subs	r2, #1
 801675e:	2a00      	cmp	r2, #0
 8016760:	6062      	str	r2, [r4, #4]
 8016762:	dd02      	ble.n	801676a <__ssvfiscanf_r+0x28a>
 8016764:	3301      	adds	r3, #1
 8016766:	6023      	str	r3, [r4, #0]
 8016768:	e7b6      	b.n	80166d8 <__ssvfiscanf_r+0x1f8>
 801676a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801676c:	4621      	mov	r1, r4
 801676e:	4630      	mov	r0, r6
 8016770:	4798      	blx	r3
 8016772:	2800      	cmp	r0, #0
 8016774:	d0b0      	beq.n	80166d8 <__ssvfiscanf_r+0x1f8>
 8016776:	e78d      	b.n	8016694 <__ssvfiscanf_r+0x1b4>
 8016778:	2b04      	cmp	r3, #4
 801677a:	dc0f      	bgt.n	801679c <__ssvfiscanf_r+0x2bc>
 801677c:	466b      	mov	r3, sp
 801677e:	4622      	mov	r2, r4
 8016780:	a941      	add	r1, sp, #260	@ 0x104
 8016782:	4630      	mov	r0, r6
 8016784:	f000 fa08 	bl	8016b98 <_scanf_i>
 8016788:	e7b4      	b.n	80166f4 <__ssvfiscanf_r+0x214>
 801678a:	bf00      	nop
 801678c:	0801642d 	.word	0x0801642d
 8016790:	080164a7 	.word	0x080164a7
 8016794:	0801767f 	.word	0x0801767f
 8016798:	08017785 	.word	0x08017785
 801679c:	4b0a      	ldr	r3, [pc, #40]	@ (80167c8 <__ssvfiscanf_r+0x2e8>)
 801679e:	2b00      	cmp	r3, #0
 80167a0:	f43f aec6 	beq.w	8016530 <__ssvfiscanf_r+0x50>
 80167a4:	466b      	mov	r3, sp
 80167a6:	4622      	mov	r2, r4
 80167a8:	a941      	add	r1, sp, #260	@ 0x104
 80167aa:	4630      	mov	r0, r6
 80167ac:	f3af 8000 	nop.w
 80167b0:	e7a0      	b.n	80166f4 <__ssvfiscanf_r+0x214>
 80167b2:	89a3      	ldrh	r3, [r4, #12]
 80167b4:	065b      	lsls	r3, r3, #25
 80167b6:	f53f af71 	bmi.w	801669c <__ssvfiscanf_r+0x1bc>
 80167ba:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80167be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167c2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80167c4:	e7f9      	b.n	80167ba <__ssvfiscanf_r+0x2da>
 80167c6:	bf00      	nop
 80167c8:	00000000 	.word	0x00000000

080167cc <_printf_common>:
 80167cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80167d0:	4616      	mov	r6, r2
 80167d2:	4698      	mov	r8, r3
 80167d4:	688a      	ldr	r2, [r1, #8]
 80167d6:	690b      	ldr	r3, [r1, #16]
 80167d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80167dc:	4293      	cmp	r3, r2
 80167de:	bfb8      	it	lt
 80167e0:	4613      	movlt	r3, r2
 80167e2:	6033      	str	r3, [r6, #0]
 80167e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80167e8:	4607      	mov	r7, r0
 80167ea:	460c      	mov	r4, r1
 80167ec:	b10a      	cbz	r2, 80167f2 <_printf_common+0x26>
 80167ee:	3301      	adds	r3, #1
 80167f0:	6033      	str	r3, [r6, #0]
 80167f2:	6823      	ldr	r3, [r4, #0]
 80167f4:	0699      	lsls	r1, r3, #26
 80167f6:	bf42      	ittt	mi
 80167f8:	6833      	ldrmi	r3, [r6, #0]
 80167fa:	3302      	addmi	r3, #2
 80167fc:	6033      	strmi	r3, [r6, #0]
 80167fe:	6825      	ldr	r5, [r4, #0]
 8016800:	f015 0506 	ands.w	r5, r5, #6
 8016804:	d106      	bne.n	8016814 <_printf_common+0x48>
 8016806:	f104 0a19 	add.w	sl, r4, #25
 801680a:	68e3      	ldr	r3, [r4, #12]
 801680c:	6832      	ldr	r2, [r6, #0]
 801680e:	1a9b      	subs	r3, r3, r2
 8016810:	42ab      	cmp	r3, r5
 8016812:	dc26      	bgt.n	8016862 <_printf_common+0x96>
 8016814:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016818:	6822      	ldr	r2, [r4, #0]
 801681a:	3b00      	subs	r3, #0
 801681c:	bf18      	it	ne
 801681e:	2301      	movne	r3, #1
 8016820:	0692      	lsls	r2, r2, #26
 8016822:	d42b      	bmi.n	801687c <_printf_common+0xb0>
 8016824:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016828:	4641      	mov	r1, r8
 801682a:	4638      	mov	r0, r7
 801682c:	47c8      	blx	r9
 801682e:	3001      	adds	r0, #1
 8016830:	d01e      	beq.n	8016870 <_printf_common+0xa4>
 8016832:	6823      	ldr	r3, [r4, #0]
 8016834:	6922      	ldr	r2, [r4, #16]
 8016836:	f003 0306 	and.w	r3, r3, #6
 801683a:	2b04      	cmp	r3, #4
 801683c:	bf02      	ittt	eq
 801683e:	68e5      	ldreq	r5, [r4, #12]
 8016840:	6833      	ldreq	r3, [r6, #0]
 8016842:	1aed      	subeq	r5, r5, r3
 8016844:	68a3      	ldr	r3, [r4, #8]
 8016846:	bf0c      	ite	eq
 8016848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801684c:	2500      	movne	r5, #0
 801684e:	4293      	cmp	r3, r2
 8016850:	bfc4      	itt	gt
 8016852:	1a9b      	subgt	r3, r3, r2
 8016854:	18ed      	addgt	r5, r5, r3
 8016856:	2600      	movs	r6, #0
 8016858:	341a      	adds	r4, #26
 801685a:	42b5      	cmp	r5, r6
 801685c:	d11a      	bne.n	8016894 <_printf_common+0xc8>
 801685e:	2000      	movs	r0, #0
 8016860:	e008      	b.n	8016874 <_printf_common+0xa8>
 8016862:	2301      	movs	r3, #1
 8016864:	4652      	mov	r2, sl
 8016866:	4641      	mov	r1, r8
 8016868:	4638      	mov	r0, r7
 801686a:	47c8      	blx	r9
 801686c:	3001      	adds	r0, #1
 801686e:	d103      	bne.n	8016878 <_printf_common+0xac>
 8016870:	f04f 30ff 	mov.w	r0, #4294967295
 8016874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016878:	3501      	adds	r5, #1
 801687a:	e7c6      	b.n	801680a <_printf_common+0x3e>
 801687c:	18e1      	adds	r1, r4, r3
 801687e:	1c5a      	adds	r2, r3, #1
 8016880:	2030      	movs	r0, #48	@ 0x30
 8016882:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016886:	4422      	add	r2, r4
 8016888:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801688c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016890:	3302      	adds	r3, #2
 8016892:	e7c7      	b.n	8016824 <_printf_common+0x58>
 8016894:	2301      	movs	r3, #1
 8016896:	4622      	mov	r2, r4
 8016898:	4641      	mov	r1, r8
 801689a:	4638      	mov	r0, r7
 801689c:	47c8      	blx	r9
 801689e:	3001      	adds	r0, #1
 80168a0:	d0e6      	beq.n	8016870 <_printf_common+0xa4>
 80168a2:	3601      	adds	r6, #1
 80168a4:	e7d9      	b.n	801685a <_printf_common+0x8e>
	...

080168a8 <_printf_i>:
 80168a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80168ac:	7e0f      	ldrb	r7, [r1, #24]
 80168ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80168b0:	2f78      	cmp	r7, #120	@ 0x78
 80168b2:	4691      	mov	r9, r2
 80168b4:	4680      	mov	r8, r0
 80168b6:	460c      	mov	r4, r1
 80168b8:	469a      	mov	sl, r3
 80168ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80168be:	d807      	bhi.n	80168d0 <_printf_i+0x28>
 80168c0:	2f62      	cmp	r7, #98	@ 0x62
 80168c2:	d80a      	bhi.n	80168da <_printf_i+0x32>
 80168c4:	2f00      	cmp	r7, #0
 80168c6:	f000 80d1 	beq.w	8016a6c <_printf_i+0x1c4>
 80168ca:	2f58      	cmp	r7, #88	@ 0x58
 80168cc:	f000 80b8 	beq.w	8016a40 <_printf_i+0x198>
 80168d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80168d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80168d8:	e03a      	b.n	8016950 <_printf_i+0xa8>
 80168da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80168de:	2b15      	cmp	r3, #21
 80168e0:	d8f6      	bhi.n	80168d0 <_printf_i+0x28>
 80168e2:	a101      	add	r1, pc, #4	@ (adr r1, 80168e8 <_printf_i+0x40>)
 80168e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80168e8:	08016941 	.word	0x08016941
 80168ec:	08016955 	.word	0x08016955
 80168f0:	080168d1 	.word	0x080168d1
 80168f4:	080168d1 	.word	0x080168d1
 80168f8:	080168d1 	.word	0x080168d1
 80168fc:	080168d1 	.word	0x080168d1
 8016900:	08016955 	.word	0x08016955
 8016904:	080168d1 	.word	0x080168d1
 8016908:	080168d1 	.word	0x080168d1
 801690c:	080168d1 	.word	0x080168d1
 8016910:	080168d1 	.word	0x080168d1
 8016914:	08016a53 	.word	0x08016a53
 8016918:	0801697f 	.word	0x0801697f
 801691c:	08016a0d 	.word	0x08016a0d
 8016920:	080168d1 	.word	0x080168d1
 8016924:	080168d1 	.word	0x080168d1
 8016928:	08016a75 	.word	0x08016a75
 801692c:	080168d1 	.word	0x080168d1
 8016930:	0801697f 	.word	0x0801697f
 8016934:	080168d1 	.word	0x080168d1
 8016938:	080168d1 	.word	0x080168d1
 801693c:	08016a15 	.word	0x08016a15
 8016940:	6833      	ldr	r3, [r6, #0]
 8016942:	1d1a      	adds	r2, r3, #4
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	6032      	str	r2, [r6, #0]
 8016948:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801694c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016950:	2301      	movs	r3, #1
 8016952:	e09c      	b.n	8016a8e <_printf_i+0x1e6>
 8016954:	6833      	ldr	r3, [r6, #0]
 8016956:	6820      	ldr	r0, [r4, #0]
 8016958:	1d19      	adds	r1, r3, #4
 801695a:	6031      	str	r1, [r6, #0]
 801695c:	0606      	lsls	r6, r0, #24
 801695e:	d501      	bpl.n	8016964 <_printf_i+0xbc>
 8016960:	681d      	ldr	r5, [r3, #0]
 8016962:	e003      	b.n	801696c <_printf_i+0xc4>
 8016964:	0645      	lsls	r5, r0, #25
 8016966:	d5fb      	bpl.n	8016960 <_printf_i+0xb8>
 8016968:	f9b3 5000 	ldrsh.w	r5, [r3]
 801696c:	2d00      	cmp	r5, #0
 801696e:	da03      	bge.n	8016978 <_printf_i+0xd0>
 8016970:	232d      	movs	r3, #45	@ 0x2d
 8016972:	426d      	negs	r5, r5
 8016974:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016978:	4858      	ldr	r0, [pc, #352]	@ (8016adc <_printf_i+0x234>)
 801697a:	230a      	movs	r3, #10
 801697c:	e011      	b.n	80169a2 <_printf_i+0xfa>
 801697e:	6821      	ldr	r1, [r4, #0]
 8016980:	6833      	ldr	r3, [r6, #0]
 8016982:	0608      	lsls	r0, r1, #24
 8016984:	f853 5b04 	ldr.w	r5, [r3], #4
 8016988:	d402      	bmi.n	8016990 <_printf_i+0xe8>
 801698a:	0649      	lsls	r1, r1, #25
 801698c:	bf48      	it	mi
 801698e:	b2ad      	uxthmi	r5, r5
 8016990:	2f6f      	cmp	r7, #111	@ 0x6f
 8016992:	4852      	ldr	r0, [pc, #328]	@ (8016adc <_printf_i+0x234>)
 8016994:	6033      	str	r3, [r6, #0]
 8016996:	bf14      	ite	ne
 8016998:	230a      	movne	r3, #10
 801699a:	2308      	moveq	r3, #8
 801699c:	2100      	movs	r1, #0
 801699e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80169a2:	6866      	ldr	r6, [r4, #4]
 80169a4:	60a6      	str	r6, [r4, #8]
 80169a6:	2e00      	cmp	r6, #0
 80169a8:	db05      	blt.n	80169b6 <_printf_i+0x10e>
 80169aa:	6821      	ldr	r1, [r4, #0]
 80169ac:	432e      	orrs	r6, r5
 80169ae:	f021 0104 	bic.w	r1, r1, #4
 80169b2:	6021      	str	r1, [r4, #0]
 80169b4:	d04b      	beq.n	8016a4e <_printf_i+0x1a6>
 80169b6:	4616      	mov	r6, r2
 80169b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80169bc:	fb03 5711 	mls	r7, r3, r1, r5
 80169c0:	5dc7      	ldrb	r7, [r0, r7]
 80169c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80169c6:	462f      	mov	r7, r5
 80169c8:	42bb      	cmp	r3, r7
 80169ca:	460d      	mov	r5, r1
 80169cc:	d9f4      	bls.n	80169b8 <_printf_i+0x110>
 80169ce:	2b08      	cmp	r3, #8
 80169d0:	d10b      	bne.n	80169ea <_printf_i+0x142>
 80169d2:	6823      	ldr	r3, [r4, #0]
 80169d4:	07df      	lsls	r7, r3, #31
 80169d6:	d508      	bpl.n	80169ea <_printf_i+0x142>
 80169d8:	6923      	ldr	r3, [r4, #16]
 80169da:	6861      	ldr	r1, [r4, #4]
 80169dc:	4299      	cmp	r1, r3
 80169de:	bfde      	ittt	le
 80169e0:	2330      	movle	r3, #48	@ 0x30
 80169e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80169e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80169ea:	1b92      	subs	r2, r2, r6
 80169ec:	6122      	str	r2, [r4, #16]
 80169ee:	f8cd a000 	str.w	sl, [sp]
 80169f2:	464b      	mov	r3, r9
 80169f4:	aa03      	add	r2, sp, #12
 80169f6:	4621      	mov	r1, r4
 80169f8:	4640      	mov	r0, r8
 80169fa:	f7ff fee7 	bl	80167cc <_printf_common>
 80169fe:	3001      	adds	r0, #1
 8016a00:	d14a      	bne.n	8016a98 <_printf_i+0x1f0>
 8016a02:	f04f 30ff 	mov.w	r0, #4294967295
 8016a06:	b004      	add	sp, #16
 8016a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a0c:	6823      	ldr	r3, [r4, #0]
 8016a0e:	f043 0320 	orr.w	r3, r3, #32
 8016a12:	6023      	str	r3, [r4, #0]
 8016a14:	4832      	ldr	r0, [pc, #200]	@ (8016ae0 <_printf_i+0x238>)
 8016a16:	2778      	movs	r7, #120	@ 0x78
 8016a18:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016a1c:	6823      	ldr	r3, [r4, #0]
 8016a1e:	6831      	ldr	r1, [r6, #0]
 8016a20:	061f      	lsls	r7, r3, #24
 8016a22:	f851 5b04 	ldr.w	r5, [r1], #4
 8016a26:	d402      	bmi.n	8016a2e <_printf_i+0x186>
 8016a28:	065f      	lsls	r7, r3, #25
 8016a2a:	bf48      	it	mi
 8016a2c:	b2ad      	uxthmi	r5, r5
 8016a2e:	6031      	str	r1, [r6, #0]
 8016a30:	07d9      	lsls	r1, r3, #31
 8016a32:	bf44      	itt	mi
 8016a34:	f043 0320 	orrmi.w	r3, r3, #32
 8016a38:	6023      	strmi	r3, [r4, #0]
 8016a3a:	b11d      	cbz	r5, 8016a44 <_printf_i+0x19c>
 8016a3c:	2310      	movs	r3, #16
 8016a3e:	e7ad      	b.n	801699c <_printf_i+0xf4>
 8016a40:	4826      	ldr	r0, [pc, #152]	@ (8016adc <_printf_i+0x234>)
 8016a42:	e7e9      	b.n	8016a18 <_printf_i+0x170>
 8016a44:	6823      	ldr	r3, [r4, #0]
 8016a46:	f023 0320 	bic.w	r3, r3, #32
 8016a4a:	6023      	str	r3, [r4, #0]
 8016a4c:	e7f6      	b.n	8016a3c <_printf_i+0x194>
 8016a4e:	4616      	mov	r6, r2
 8016a50:	e7bd      	b.n	80169ce <_printf_i+0x126>
 8016a52:	6833      	ldr	r3, [r6, #0]
 8016a54:	6825      	ldr	r5, [r4, #0]
 8016a56:	6961      	ldr	r1, [r4, #20]
 8016a58:	1d18      	adds	r0, r3, #4
 8016a5a:	6030      	str	r0, [r6, #0]
 8016a5c:	062e      	lsls	r6, r5, #24
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	d501      	bpl.n	8016a66 <_printf_i+0x1be>
 8016a62:	6019      	str	r1, [r3, #0]
 8016a64:	e002      	b.n	8016a6c <_printf_i+0x1c4>
 8016a66:	0668      	lsls	r0, r5, #25
 8016a68:	d5fb      	bpl.n	8016a62 <_printf_i+0x1ba>
 8016a6a:	8019      	strh	r1, [r3, #0]
 8016a6c:	2300      	movs	r3, #0
 8016a6e:	6123      	str	r3, [r4, #16]
 8016a70:	4616      	mov	r6, r2
 8016a72:	e7bc      	b.n	80169ee <_printf_i+0x146>
 8016a74:	6833      	ldr	r3, [r6, #0]
 8016a76:	1d1a      	adds	r2, r3, #4
 8016a78:	6032      	str	r2, [r6, #0]
 8016a7a:	681e      	ldr	r6, [r3, #0]
 8016a7c:	6862      	ldr	r2, [r4, #4]
 8016a7e:	2100      	movs	r1, #0
 8016a80:	4630      	mov	r0, r6
 8016a82:	f7e9 fbbd 	bl	8000200 <memchr>
 8016a86:	b108      	cbz	r0, 8016a8c <_printf_i+0x1e4>
 8016a88:	1b80      	subs	r0, r0, r6
 8016a8a:	6060      	str	r0, [r4, #4]
 8016a8c:	6863      	ldr	r3, [r4, #4]
 8016a8e:	6123      	str	r3, [r4, #16]
 8016a90:	2300      	movs	r3, #0
 8016a92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016a96:	e7aa      	b.n	80169ee <_printf_i+0x146>
 8016a98:	6923      	ldr	r3, [r4, #16]
 8016a9a:	4632      	mov	r2, r6
 8016a9c:	4649      	mov	r1, r9
 8016a9e:	4640      	mov	r0, r8
 8016aa0:	47d0      	blx	sl
 8016aa2:	3001      	adds	r0, #1
 8016aa4:	d0ad      	beq.n	8016a02 <_printf_i+0x15a>
 8016aa6:	6823      	ldr	r3, [r4, #0]
 8016aa8:	079b      	lsls	r3, r3, #30
 8016aaa:	d413      	bmi.n	8016ad4 <_printf_i+0x22c>
 8016aac:	68e0      	ldr	r0, [r4, #12]
 8016aae:	9b03      	ldr	r3, [sp, #12]
 8016ab0:	4298      	cmp	r0, r3
 8016ab2:	bfb8      	it	lt
 8016ab4:	4618      	movlt	r0, r3
 8016ab6:	e7a6      	b.n	8016a06 <_printf_i+0x15e>
 8016ab8:	2301      	movs	r3, #1
 8016aba:	4632      	mov	r2, r6
 8016abc:	4649      	mov	r1, r9
 8016abe:	4640      	mov	r0, r8
 8016ac0:	47d0      	blx	sl
 8016ac2:	3001      	adds	r0, #1
 8016ac4:	d09d      	beq.n	8016a02 <_printf_i+0x15a>
 8016ac6:	3501      	adds	r5, #1
 8016ac8:	68e3      	ldr	r3, [r4, #12]
 8016aca:	9903      	ldr	r1, [sp, #12]
 8016acc:	1a5b      	subs	r3, r3, r1
 8016ace:	42ab      	cmp	r3, r5
 8016ad0:	dcf2      	bgt.n	8016ab8 <_printf_i+0x210>
 8016ad2:	e7eb      	b.n	8016aac <_printf_i+0x204>
 8016ad4:	2500      	movs	r5, #0
 8016ad6:	f104 0619 	add.w	r6, r4, #25
 8016ada:	e7f5      	b.n	8016ac8 <_printf_i+0x220>
 8016adc:	08017790 	.word	0x08017790
 8016ae0:	080177a1 	.word	0x080177a1

08016ae4 <_scanf_chars>:
 8016ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ae8:	4615      	mov	r5, r2
 8016aea:	688a      	ldr	r2, [r1, #8]
 8016aec:	4680      	mov	r8, r0
 8016aee:	460c      	mov	r4, r1
 8016af0:	b932      	cbnz	r2, 8016b00 <_scanf_chars+0x1c>
 8016af2:	698a      	ldr	r2, [r1, #24]
 8016af4:	2a00      	cmp	r2, #0
 8016af6:	bf14      	ite	ne
 8016af8:	f04f 32ff 	movne.w	r2, #4294967295
 8016afc:	2201      	moveq	r2, #1
 8016afe:	608a      	str	r2, [r1, #8]
 8016b00:	6822      	ldr	r2, [r4, #0]
 8016b02:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8016b94 <_scanf_chars+0xb0>
 8016b06:	06d1      	lsls	r1, r2, #27
 8016b08:	bf5f      	itttt	pl
 8016b0a:	681a      	ldrpl	r2, [r3, #0]
 8016b0c:	1d11      	addpl	r1, r2, #4
 8016b0e:	6019      	strpl	r1, [r3, #0]
 8016b10:	6816      	ldrpl	r6, [r2, #0]
 8016b12:	2700      	movs	r7, #0
 8016b14:	69a0      	ldr	r0, [r4, #24]
 8016b16:	b188      	cbz	r0, 8016b3c <_scanf_chars+0x58>
 8016b18:	2801      	cmp	r0, #1
 8016b1a:	d107      	bne.n	8016b2c <_scanf_chars+0x48>
 8016b1c:	682b      	ldr	r3, [r5, #0]
 8016b1e:	781a      	ldrb	r2, [r3, #0]
 8016b20:	6963      	ldr	r3, [r4, #20]
 8016b22:	5c9b      	ldrb	r3, [r3, r2]
 8016b24:	b953      	cbnz	r3, 8016b3c <_scanf_chars+0x58>
 8016b26:	2f00      	cmp	r7, #0
 8016b28:	d031      	beq.n	8016b8e <_scanf_chars+0xaa>
 8016b2a:	e022      	b.n	8016b72 <_scanf_chars+0x8e>
 8016b2c:	2802      	cmp	r0, #2
 8016b2e:	d120      	bne.n	8016b72 <_scanf_chars+0x8e>
 8016b30:	682b      	ldr	r3, [r5, #0]
 8016b32:	781b      	ldrb	r3, [r3, #0]
 8016b34:	f819 3003 	ldrb.w	r3, [r9, r3]
 8016b38:	071b      	lsls	r3, r3, #28
 8016b3a:	d41a      	bmi.n	8016b72 <_scanf_chars+0x8e>
 8016b3c:	6823      	ldr	r3, [r4, #0]
 8016b3e:	06da      	lsls	r2, r3, #27
 8016b40:	bf5e      	ittt	pl
 8016b42:	682b      	ldrpl	r3, [r5, #0]
 8016b44:	781b      	ldrbpl	r3, [r3, #0]
 8016b46:	f806 3b01 	strbpl.w	r3, [r6], #1
 8016b4a:	682a      	ldr	r2, [r5, #0]
 8016b4c:	686b      	ldr	r3, [r5, #4]
 8016b4e:	3201      	adds	r2, #1
 8016b50:	602a      	str	r2, [r5, #0]
 8016b52:	68a2      	ldr	r2, [r4, #8]
 8016b54:	3b01      	subs	r3, #1
 8016b56:	3a01      	subs	r2, #1
 8016b58:	606b      	str	r3, [r5, #4]
 8016b5a:	3701      	adds	r7, #1
 8016b5c:	60a2      	str	r2, [r4, #8]
 8016b5e:	b142      	cbz	r2, 8016b72 <_scanf_chars+0x8e>
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	dcd7      	bgt.n	8016b14 <_scanf_chars+0x30>
 8016b64:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8016b68:	4629      	mov	r1, r5
 8016b6a:	4640      	mov	r0, r8
 8016b6c:	4798      	blx	r3
 8016b6e:	2800      	cmp	r0, #0
 8016b70:	d0d0      	beq.n	8016b14 <_scanf_chars+0x30>
 8016b72:	6823      	ldr	r3, [r4, #0]
 8016b74:	f013 0310 	ands.w	r3, r3, #16
 8016b78:	d105      	bne.n	8016b86 <_scanf_chars+0xa2>
 8016b7a:	68e2      	ldr	r2, [r4, #12]
 8016b7c:	3201      	adds	r2, #1
 8016b7e:	60e2      	str	r2, [r4, #12]
 8016b80:	69a2      	ldr	r2, [r4, #24]
 8016b82:	b102      	cbz	r2, 8016b86 <_scanf_chars+0xa2>
 8016b84:	7033      	strb	r3, [r6, #0]
 8016b86:	6923      	ldr	r3, [r4, #16]
 8016b88:	443b      	add	r3, r7
 8016b8a:	6123      	str	r3, [r4, #16]
 8016b8c:	2000      	movs	r0, #0
 8016b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b92:	bf00      	nop
 8016b94:	0801767f 	.word	0x0801767f

08016b98 <_scanf_i>:
 8016b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b9c:	4698      	mov	r8, r3
 8016b9e:	4b74      	ldr	r3, [pc, #464]	@ (8016d70 <_scanf_i+0x1d8>)
 8016ba0:	460c      	mov	r4, r1
 8016ba2:	4682      	mov	sl, r0
 8016ba4:	4616      	mov	r6, r2
 8016ba6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016baa:	b087      	sub	sp, #28
 8016bac:	ab03      	add	r3, sp, #12
 8016bae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016bb2:	4b70      	ldr	r3, [pc, #448]	@ (8016d74 <_scanf_i+0x1dc>)
 8016bb4:	69a1      	ldr	r1, [r4, #24]
 8016bb6:	4a70      	ldr	r2, [pc, #448]	@ (8016d78 <_scanf_i+0x1e0>)
 8016bb8:	2903      	cmp	r1, #3
 8016bba:	bf08      	it	eq
 8016bbc:	461a      	moveq	r2, r3
 8016bbe:	68a3      	ldr	r3, [r4, #8]
 8016bc0:	9201      	str	r2, [sp, #4]
 8016bc2:	1e5a      	subs	r2, r3, #1
 8016bc4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8016bc8:	bf88      	it	hi
 8016bca:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8016bce:	4627      	mov	r7, r4
 8016bd0:	bf82      	ittt	hi
 8016bd2:	eb03 0905 	addhi.w	r9, r3, r5
 8016bd6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8016bda:	60a3      	strhi	r3, [r4, #8]
 8016bdc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016be0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8016be4:	bf98      	it	ls
 8016be6:	f04f 0900 	movls.w	r9, #0
 8016bea:	6023      	str	r3, [r4, #0]
 8016bec:	463d      	mov	r5, r7
 8016bee:	f04f 0b00 	mov.w	fp, #0
 8016bf2:	6831      	ldr	r1, [r6, #0]
 8016bf4:	ab03      	add	r3, sp, #12
 8016bf6:	7809      	ldrb	r1, [r1, #0]
 8016bf8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016bfc:	2202      	movs	r2, #2
 8016bfe:	f7e9 faff 	bl	8000200 <memchr>
 8016c02:	b328      	cbz	r0, 8016c50 <_scanf_i+0xb8>
 8016c04:	f1bb 0f01 	cmp.w	fp, #1
 8016c08:	d159      	bne.n	8016cbe <_scanf_i+0x126>
 8016c0a:	6862      	ldr	r2, [r4, #4]
 8016c0c:	b92a      	cbnz	r2, 8016c1a <_scanf_i+0x82>
 8016c0e:	6822      	ldr	r2, [r4, #0]
 8016c10:	2108      	movs	r1, #8
 8016c12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016c16:	6061      	str	r1, [r4, #4]
 8016c18:	6022      	str	r2, [r4, #0]
 8016c1a:	6822      	ldr	r2, [r4, #0]
 8016c1c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8016c20:	6022      	str	r2, [r4, #0]
 8016c22:	68a2      	ldr	r2, [r4, #8]
 8016c24:	1e51      	subs	r1, r2, #1
 8016c26:	60a1      	str	r1, [r4, #8]
 8016c28:	b192      	cbz	r2, 8016c50 <_scanf_i+0xb8>
 8016c2a:	6832      	ldr	r2, [r6, #0]
 8016c2c:	1c51      	adds	r1, r2, #1
 8016c2e:	6031      	str	r1, [r6, #0]
 8016c30:	7812      	ldrb	r2, [r2, #0]
 8016c32:	f805 2b01 	strb.w	r2, [r5], #1
 8016c36:	6872      	ldr	r2, [r6, #4]
 8016c38:	3a01      	subs	r2, #1
 8016c3a:	2a00      	cmp	r2, #0
 8016c3c:	6072      	str	r2, [r6, #4]
 8016c3e:	dc07      	bgt.n	8016c50 <_scanf_i+0xb8>
 8016c40:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8016c44:	4631      	mov	r1, r6
 8016c46:	4650      	mov	r0, sl
 8016c48:	4790      	blx	r2
 8016c4a:	2800      	cmp	r0, #0
 8016c4c:	f040 8085 	bne.w	8016d5a <_scanf_i+0x1c2>
 8016c50:	f10b 0b01 	add.w	fp, fp, #1
 8016c54:	f1bb 0f03 	cmp.w	fp, #3
 8016c58:	d1cb      	bne.n	8016bf2 <_scanf_i+0x5a>
 8016c5a:	6863      	ldr	r3, [r4, #4]
 8016c5c:	b90b      	cbnz	r3, 8016c62 <_scanf_i+0xca>
 8016c5e:	230a      	movs	r3, #10
 8016c60:	6063      	str	r3, [r4, #4]
 8016c62:	6863      	ldr	r3, [r4, #4]
 8016c64:	4945      	ldr	r1, [pc, #276]	@ (8016d7c <_scanf_i+0x1e4>)
 8016c66:	6960      	ldr	r0, [r4, #20]
 8016c68:	1ac9      	subs	r1, r1, r3
 8016c6a:	f000 f889 	bl	8016d80 <__sccl>
 8016c6e:	f04f 0b00 	mov.w	fp, #0
 8016c72:	68a3      	ldr	r3, [r4, #8]
 8016c74:	6822      	ldr	r2, [r4, #0]
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d03d      	beq.n	8016cf6 <_scanf_i+0x15e>
 8016c7a:	6831      	ldr	r1, [r6, #0]
 8016c7c:	6960      	ldr	r0, [r4, #20]
 8016c7e:	f891 c000 	ldrb.w	ip, [r1]
 8016c82:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016c86:	2800      	cmp	r0, #0
 8016c88:	d035      	beq.n	8016cf6 <_scanf_i+0x15e>
 8016c8a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8016c8e:	d124      	bne.n	8016cda <_scanf_i+0x142>
 8016c90:	0510      	lsls	r0, r2, #20
 8016c92:	d522      	bpl.n	8016cda <_scanf_i+0x142>
 8016c94:	f10b 0b01 	add.w	fp, fp, #1
 8016c98:	f1b9 0f00 	cmp.w	r9, #0
 8016c9c:	d003      	beq.n	8016ca6 <_scanf_i+0x10e>
 8016c9e:	3301      	adds	r3, #1
 8016ca0:	f109 39ff 	add.w	r9, r9, #4294967295
 8016ca4:	60a3      	str	r3, [r4, #8]
 8016ca6:	6873      	ldr	r3, [r6, #4]
 8016ca8:	3b01      	subs	r3, #1
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	6073      	str	r3, [r6, #4]
 8016cae:	dd1b      	ble.n	8016ce8 <_scanf_i+0x150>
 8016cb0:	6833      	ldr	r3, [r6, #0]
 8016cb2:	3301      	adds	r3, #1
 8016cb4:	6033      	str	r3, [r6, #0]
 8016cb6:	68a3      	ldr	r3, [r4, #8]
 8016cb8:	3b01      	subs	r3, #1
 8016cba:	60a3      	str	r3, [r4, #8]
 8016cbc:	e7d9      	b.n	8016c72 <_scanf_i+0xda>
 8016cbe:	f1bb 0f02 	cmp.w	fp, #2
 8016cc2:	d1ae      	bne.n	8016c22 <_scanf_i+0x8a>
 8016cc4:	6822      	ldr	r2, [r4, #0]
 8016cc6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8016cca:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8016cce:	d1c4      	bne.n	8016c5a <_scanf_i+0xc2>
 8016cd0:	2110      	movs	r1, #16
 8016cd2:	6061      	str	r1, [r4, #4]
 8016cd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016cd8:	e7a2      	b.n	8016c20 <_scanf_i+0x88>
 8016cda:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8016cde:	6022      	str	r2, [r4, #0]
 8016ce0:	780b      	ldrb	r3, [r1, #0]
 8016ce2:	f805 3b01 	strb.w	r3, [r5], #1
 8016ce6:	e7de      	b.n	8016ca6 <_scanf_i+0x10e>
 8016ce8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8016cec:	4631      	mov	r1, r6
 8016cee:	4650      	mov	r0, sl
 8016cf0:	4798      	blx	r3
 8016cf2:	2800      	cmp	r0, #0
 8016cf4:	d0df      	beq.n	8016cb6 <_scanf_i+0x11e>
 8016cf6:	6823      	ldr	r3, [r4, #0]
 8016cf8:	05d9      	lsls	r1, r3, #23
 8016cfa:	d50d      	bpl.n	8016d18 <_scanf_i+0x180>
 8016cfc:	42bd      	cmp	r5, r7
 8016cfe:	d909      	bls.n	8016d14 <_scanf_i+0x17c>
 8016d00:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016d04:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8016d08:	4632      	mov	r2, r6
 8016d0a:	4650      	mov	r0, sl
 8016d0c:	4798      	blx	r3
 8016d0e:	f105 39ff 	add.w	r9, r5, #4294967295
 8016d12:	464d      	mov	r5, r9
 8016d14:	42bd      	cmp	r5, r7
 8016d16:	d028      	beq.n	8016d6a <_scanf_i+0x1d2>
 8016d18:	6822      	ldr	r2, [r4, #0]
 8016d1a:	f012 0210 	ands.w	r2, r2, #16
 8016d1e:	d113      	bne.n	8016d48 <_scanf_i+0x1b0>
 8016d20:	702a      	strb	r2, [r5, #0]
 8016d22:	6863      	ldr	r3, [r4, #4]
 8016d24:	9e01      	ldr	r6, [sp, #4]
 8016d26:	4639      	mov	r1, r7
 8016d28:	4650      	mov	r0, sl
 8016d2a:	47b0      	blx	r6
 8016d2c:	f8d8 3000 	ldr.w	r3, [r8]
 8016d30:	6821      	ldr	r1, [r4, #0]
 8016d32:	1d1a      	adds	r2, r3, #4
 8016d34:	f8c8 2000 	str.w	r2, [r8]
 8016d38:	f011 0f20 	tst.w	r1, #32
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	d00f      	beq.n	8016d60 <_scanf_i+0x1c8>
 8016d40:	6018      	str	r0, [r3, #0]
 8016d42:	68e3      	ldr	r3, [r4, #12]
 8016d44:	3301      	adds	r3, #1
 8016d46:	60e3      	str	r3, [r4, #12]
 8016d48:	6923      	ldr	r3, [r4, #16]
 8016d4a:	1bed      	subs	r5, r5, r7
 8016d4c:	445d      	add	r5, fp
 8016d4e:	442b      	add	r3, r5
 8016d50:	6123      	str	r3, [r4, #16]
 8016d52:	2000      	movs	r0, #0
 8016d54:	b007      	add	sp, #28
 8016d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d5a:	f04f 0b00 	mov.w	fp, #0
 8016d5e:	e7ca      	b.n	8016cf6 <_scanf_i+0x15e>
 8016d60:	07ca      	lsls	r2, r1, #31
 8016d62:	bf4c      	ite	mi
 8016d64:	8018      	strhmi	r0, [r3, #0]
 8016d66:	6018      	strpl	r0, [r3, #0]
 8016d68:	e7eb      	b.n	8016d42 <_scanf_i+0x1aa>
 8016d6a:	2001      	movs	r0, #1
 8016d6c:	e7f2      	b.n	8016d54 <_scanf_i+0x1bc>
 8016d6e:	bf00      	nop
 8016d70:	0801757c 	.word	0x0801757c
 8016d74:	08015d91 	.word	0x08015d91
 8016d78:	08016ff5 	.word	0x08016ff5
 8016d7c:	080177c2 	.word	0x080177c2

08016d80 <__sccl>:
 8016d80:	b570      	push	{r4, r5, r6, lr}
 8016d82:	780b      	ldrb	r3, [r1, #0]
 8016d84:	4604      	mov	r4, r0
 8016d86:	2b5e      	cmp	r3, #94	@ 0x5e
 8016d88:	bf0b      	itete	eq
 8016d8a:	784b      	ldrbeq	r3, [r1, #1]
 8016d8c:	1c4a      	addne	r2, r1, #1
 8016d8e:	1c8a      	addeq	r2, r1, #2
 8016d90:	2100      	movne	r1, #0
 8016d92:	bf08      	it	eq
 8016d94:	2101      	moveq	r1, #1
 8016d96:	3801      	subs	r0, #1
 8016d98:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8016d9c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8016da0:	42a8      	cmp	r0, r5
 8016da2:	d1fb      	bne.n	8016d9c <__sccl+0x1c>
 8016da4:	b90b      	cbnz	r3, 8016daa <__sccl+0x2a>
 8016da6:	1e50      	subs	r0, r2, #1
 8016da8:	bd70      	pop	{r4, r5, r6, pc}
 8016daa:	f081 0101 	eor.w	r1, r1, #1
 8016dae:	54e1      	strb	r1, [r4, r3]
 8016db0:	4610      	mov	r0, r2
 8016db2:	4602      	mov	r2, r0
 8016db4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016db8:	2d2d      	cmp	r5, #45	@ 0x2d
 8016dba:	d005      	beq.n	8016dc8 <__sccl+0x48>
 8016dbc:	2d5d      	cmp	r5, #93	@ 0x5d
 8016dbe:	d016      	beq.n	8016dee <__sccl+0x6e>
 8016dc0:	2d00      	cmp	r5, #0
 8016dc2:	d0f1      	beq.n	8016da8 <__sccl+0x28>
 8016dc4:	462b      	mov	r3, r5
 8016dc6:	e7f2      	b.n	8016dae <__sccl+0x2e>
 8016dc8:	7846      	ldrb	r6, [r0, #1]
 8016dca:	2e5d      	cmp	r6, #93	@ 0x5d
 8016dcc:	d0fa      	beq.n	8016dc4 <__sccl+0x44>
 8016dce:	42b3      	cmp	r3, r6
 8016dd0:	dcf8      	bgt.n	8016dc4 <__sccl+0x44>
 8016dd2:	3002      	adds	r0, #2
 8016dd4:	461a      	mov	r2, r3
 8016dd6:	3201      	adds	r2, #1
 8016dd8:	4296      	cmp	r6, r2
 8016dda:	54a1      	strb	r1, [r4, r2]
 8016ddc:	dcfb      	bgt.n	8016dd6 <__sccl+0x56>
 8016dde:	1af2      	subs	r2, r6, r3
 8016de0:	3a01      	subs	r2, #1
 8016de2:	1c5d      	adds	r5, r3, #1
 8016de4:	42b3      	cmp	r3, r6
 8016de6:	bfa8      	it	ge
 8016de8:	2200      	movge	r2, #0
 8016dea:	18ab      	adds	r3, r5, r2
 8016dec:	e7e1      	b.n	8016db2 <__sccl+0x32>
 8016dee:	4610      	mov	r0, r2
 8016df0:	e7da      	b.n	8016da8 <__sccl+0x28>

08016df2 <__submore>:
 8016df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016df6:	460c      	mov	r4, r1
 8016df8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8016dfa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016dfe:	4299      	cmp	r1, r3
 8016e00:	d11d      	bne.n	8016e3e <__submore+0x4c>
 8016e02:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8016e06:	f7ff f92d 	bl	8016064 <_malloc_r>
 8016e0a:	b918      	cbnz	r0, 8016e14 <__submore+0x22>
 8016e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8016e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016e18:	63a3      	str	r3, [r4, #56]	@ 0x38
 8016e1a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8016e1e:	6360      	str	r0, [r4, #52]	@ 0x34
 8016e20:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8016e24:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8016e28:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8016e2c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8016e30:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8016e34:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8016e38:	6020      	str	r0, [r4, #0]
 8016e3a:	2000      	movs	r0, #0
 8016e3c:	e7e8      	b.n	8016e10 <__submore+0x1e>
 8016e3e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8016e40:	0077      	lsls	r7, r6, #1
 8016e42:	463a      	mov	r2, r7
 8016e44:	f000 f83a 	bl	8016ebc <_realloc_r>
 8016e48:	4605      	mov	r5, r0
 8016e4a:	2800      	cmp	r0, #0
 8016e4c:	d0de      	beq.n	8016e0c <__submore+0x1a>
 8016e4e:	eb00 0806 	add.w	r8, r0, r6
 8016e52:	4601      	mov	r1, r0
 8016e54:	4632      	mov	r2, r6
 8016e56:	4640      	mov	r0, r8
 8016e58:	f7ff f88a 	bl	8015f70 <memcpy>
 8016e5c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8016e60:	f8c4 8000 	str.w	r8, [r4]
 8016e64:	e7e9      	b.n	8016e3a <__submore+0x48>

08016e66 <memmove>:
 8016e66:	4288      	cmp	r0, r1
 8016e68:	b510      	push	{r4, lr}
 8016e6a:	eb01 0402 	add.w	r4, r1, r2
 8016e6e:	d902      	bls.n	8016e76 <memmove+0x10>
 8016e70:	4284      	cmp	r4, r0
 8016e72:	4623      	mov	r3, r4
 8016e74:	d807      	bhi.n	8016e86 <memmove+0x20>
 8016e76:	1e43      	subs	r3, r0, #1
 8016e78:	42a1      	cmp	r1, r4
 8016e7a:	d008      	beq.n	8016e8e <memmove+0x28>
 8016e7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016e80:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016e84:	e7f8      	b.n	8016e78 <memmove+0x12>
 8016e86:	4402      	add	r2, r0
 8016e88:	4601      	mov	r1, r0
 8016e8a:	428a      	cmp	r2, r1
 8016e8c:	d100      	bne.n	8016e90 <memmove+0x2a>
 8016e8e:	bd10      	pop	{r4, pc}
 8016e90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016e94:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016e98:	e7f7      	b.n	8016e8a <memmove+0x24>
	...

08016e9c <_sbrk_r>:
 8016e9c:	b538      	push	{r3, r4, r5, lr}
 8016e9e:	4d06      	ldr	r5, [pc, #24]	@ (8016eb8 <_sbrk_r+0x1c>)
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	4604      	mov	r4, r0
 8016ea4:	4608      	mov	r0, r1
 8016ea6:	602b      	str	r3, [r5, #0]
 8016ea8:	f7f0 fdc2 	bl	8007a30 <_sbrk>
 8016eac:	1c43      	adds	r3, r0, #1
 8016eae:	d102      	bne.n	8016eb6 <_sbrk_r+0x1a>
 8016eb0:	682b      	ldr	r3, [r5, #0]
 8016eb2:	b103      	cbz	r3, 8016eb6 <_sbrk_r+0x1a>
 8016eb4:	6023      	str	r3, [r4, #0]
 8016eb6:	bd38      	pop	{r3, r4, r5, pc}
 8016eb8:	20005e44 	.word	0x20005e44

08016ebc <_realloc_r>:
 8016ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ec0:	4607      	mov	r7, r0
 8016ec2:	4614      	mov	r4, r2
 8016ec4:	460d      	mov	r5, r1
 8016ec6:	b921      	cbnz	r1, 8016ed2 <_realloc_r+0x16>
 8016ec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ecc:	4611      	mov	r1, r2
 8016ece:	f7ff b8c9 	b.w	8016064 <_malloc_r>
 8016ed2:	b92a      	cbnz	r2, 8016ee0 <_realloc_r+0x24>
 8016ed4:	f7ff f85a 	bl	8015f8c <_free_r>
 8016ed8:	4625      	mov	r5, r4
 8016eda:	4628      	mov	r0, r5
 8016edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ee0:	f000 f88a 	bl	8016ff8 <_malloc_usable_size_r>
 8016ee4:	4284      	cmp	r4, r0
 8016ee6:	4606      	mov	r6, r0
 8016ee8:	d802      	bhi.n	8016ef0 <_realloc_r+0x34>
 8016eea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016eee:	d8f4      	bhi.n	8016eda <_realloc_r+0x1e>
 8016ef0:	4621      	mov	r1, r4
 8016ef2:	4638      	mov	r0, r7
 8016ef4:	f7ff f8b6 	bl	8016064 <_malloc_r>
 8016ef8:	4680      	mov	r8, r0
 8016efa:	b908      	cbnz	r0, 8016f00 <_realloc_r+0x44>
 8016efc:	4645      	mov	r5, r8
 8016efe:	e7ec      	b.n	8016eda <_realloc_r+0x1e>
 8016f00:	42b4      	cmp	r4, r6
 8016f02:	4622      	mov	r2, r4
 8016f04:	4629      	mov	r1, r5
 8016f06:	bf28      	it	cs
 8016f08:	4632      	movcs	r2, r6
 8016f0a:	f7ff f831 	bl	8015f70 <memcpy>
 8016f0e:	4629      	mov	r1, r5
 8016f10:	4638      	mov	r0, r7
 8016f12:	f7ff f83b 	bl	8015f8c <_free_r>
 8016f16:	e7f1      	b.n	8016efc <_realloc_r+0x40>

08016f18 <_strtoul_l.isra.0>:
 8016f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016f1c:	4e34      	ldr	r6, [pc, #208]	@ (8016ff0 <_strtoul_l.isra.0+0xd8>)
 8016f1e:	4686      	mov	lr, r0
 8016f20:	460d      	mov	r5, r1
 8016f22:	4628      	mov	r0, r5
 8016f24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016f28:	5d37      	ldrb	r7, [r6, r4]
 8016f2a:	f017 0708 	ands.w	r7, r7, #8
 8016f2e:	d1f8      	bne.n	8016f22 <_strtoul_l.isra.0+0xa>
 8016f30:	2c2d      	cmp	r4, #45	@ 0x2d
 8016f32:	d110      	bne.n	8016f56 <_strtoul_l.isra.0+0x3e>
 8016f34:	782c      	ldrb	r4, [r5, #0]
 8016f36:	2701      	movs	r7, #1
 8016f38:	1c85      	adds	r5, r0, #2
 8016f3a:	f033 0010 	bics.w	r0, r3, #16
 8016f3e:	d115      	bne.n	8016f6c <_strtoul_l.isra.0+0x54>
 8016f40:	2c30      	cmp	r4, #48	@ 0x30
 8016f42:	d10d      	bne.n	8016f60 <_strtoul_l.isra.0+0x48>
 8016f44:	7828      	ldrb	r0, [r5, #0]
 8016f46:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8016f4a:	2858      	cmp	r0, #88	@ 0x58
 8016f4c:	d108      	bne.n	8016f60 <_strtoul_l.isra.0+0x48>
 8016f4e:	786c      	ldrb	r4, [r5, #1]
 8016f50:	3502      	adds	r5, #2
 8016f52:	2310      	movs	r3, #16
 8016f54:	e00a      	b.n	8016f6c <_strtoul_l.isra.0+0x54>
 8016f56:	2c2b      	cmp	r4, #43	@ 0x2b
 8016f58:	bf04      	itt	eq
 8016f5a:	782c      	ldrbeq	r4, [r5, #0]
 8016f5c:	1c85      	addeq	r5, r0, #2
 8016f5e:	e7ec      	b.n	8016f3a <_strtoul_l.isra.0+0x22>
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d1f6      	bne.n	8016f52 <_strtoul_l.isra.0+0x3a>
 8016f64:	2c30      	cmp	r4, #48	@ 0x30
 8016f66:	bf14      	ite	ne
 8016f68:	230a      	movne	r3, #10
 8016f6a:	2308      	moveq	r3, #8
 8016f6c:	f04f 38ff 	mov.w	r8, #4294967295
 8016f70:	2600      	movs	r6, #0
 8016f72:	fbb8 f8f3 	udiv	r8, r8, r3
 8016f76:	fb03 f908 	mul.w	r9, r3, r8
 8016f7a:	ea6f 0909 	mvn.w	r9, r9
 8016f7e:	4630      	mov	r0, r6
 8016f80:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8016f84:	f1bc 0f09 	cmp.w	ip, #9
 8016f88:	d810      	bhi.n	8016fac <_strtoul_l.isra.0+0x94>
 8016f8a:	4664      	mov	r4, ip
 8016f8c:	42a3      	cmp	r3, r4
 8016f8e:	dd1e      	ble.n	8016fce <_strtoul_l.isra.0+0xb6>
 8016f90:	f1b6 3fff 	cmp.w	r6, #4294967295
 8016f94:	d007      	beq.n	8016fa6 <_strtoul_l.isra.0+0x8e>
 8016f96:	4580      	cmp	r8, r0
 8016f98:	d316      	bcc.n	8016fc8 <_strtoul_l.isra.0+0xb0>
 8016f9a:	d101      	bne.n	8016fa0 <_strtoul_l.isra.0+0x88>
 8016f9c:	45a1      	cmp	r9, r4
 8016f9e:	db13      	blt.n	8016fc8 <_strtoul_l.isra.0+0xb0>
 8016fa0:	fb00 4003 	mla	r0, r0, r3, r4
 8016fa4:	2601      	movs	r6, #1
 8016fa6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016faa:	e7e9      	b.n	8016f80 <_strtoul_l.isra.0+0x68>
 8016fac:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8016fb0:	f1bc 0f19 	cmp.w	ip, #25
 8016fb4:	d801      	bhi.n	8016fba <_strtoul_l.isra.0+0xa2>
 8016fb6:	3c37      	subs	r4, #55	@ 0x37
 8016fb8:	e7e8      	b.n	8016f8c <_strtoul_l.isra.0+0x74>
 8016fba:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8016fbe:	f1bc 0f19 	cmp.w	ip, #25
 8016fc2:	d804      	bhi.n	8016fce <_strtoul_l.isra.0+0xb6>
 8016fc4:	3c57      	subs	r4, #87	@ 0x57
 8016fc6:	e7e1      	b.n	8016f8c <_strtoul_l.isra.0+0x74>
 8016fc8:	f04f 36ff 	mov.w	r6, #4294967295
 8016fcc:	e7eb      	b.n	8016fa6 <_strtoul_l.isra.0+0x8e>
 8016fce:	1c73      	adds	r3, r6, #1
 8016fd0:	d106      	bne.n	8016fe0 <_strtoul_l.isra.0+0xc8>
 8016fd2:	2322      	movs	r3, #34	@ 0x22
 8016fd4:	f8ce 3000 	str.w	r3, [lr]
 8016fd8:	4630      	mov	r0, r6
 8016fda:	b932      	cbnz	r2, 8016fea <_strtoul_l.isra.0+0xd2>
 8016fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016fe0:	b107      	cbz	r7, 8016fe4 <_strtoul_l.isra.0+0xcc>
 8016fe2:	4240      	negs	r0, r0
 8016fe4:	2a00      	cmp	r2, #0
 8016fe6:	d0f9      	beq.n	8016fdc <_strtoul_l.isra.0+0xc4>
 8016fe8:	b106      	cbz	r6, 8016fec <_strtoul_l.isra.0+0xd4>
 8016fea:	1e69      	subs	r1, r5, #1
 8016fec:	6011      	str	r1, [r2, #0]
 8016fee:	e7f5      	b.n	8016fdc <_strtoul_l.isra.0+0xc4>
 8016ff0:	0801767f 	.word	0x0801767f

08016ff4 <_strtoul_r>:
 8016ff4:	f7ff bf90 	b.w	8016f18 <_strtoul_l.isra.0>

08016ff8 <_malloc_usable_size_r>:
 8016ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ffc:	1f18      	subs	r0, r3, #4
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	bfbc      	itt	lt
 8017002:	580b      	ldrlt	r3, [r1, r0]
 8017004:	18c0      	addlt	r0, r0, r3
 8017006:	4770      	bx	lr

08017008 <_init>:
 8017008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801700a:	bf00      	nop
 801700c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801700e:	bc08      	pop	{r3}
 8017010:	469e      	mov	lr, r3
 8017012:	4770      	bx	lr

08017014 <_fini>:
 8017014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017016:	bf00      	nop
 8017018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801701a:	bc08      	pop	{r3}
 801701c:	469e      	mov	lr, r3
 801701e:	4770      	bx	lr
