
Smart_Joint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016130  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000788  080162c0  080162c0  000172c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016a48  08016a48  000181ec  2**0
                  CONTENTS
  4 .ARM          00000008  08016a48  08016a48  00017a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016a50  08016a50  000181ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016a50  08016a50  00017a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016a54  08016a54  00017a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08016a58  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005a28  200001f0  08016c44  000181f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005c18  08016c44  00018c18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000181ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000392e8  00000000  00000000  0001821c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000670a  00000000  00000000  00051504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e30  00000000  00000000  00057c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002410  00000000  00000000  0005aa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000310bd  00000000  00000000  0005ce50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037843  00000000  00000000  0008df0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012489f  00000000  00000000  000c5750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e9fef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cf3c  00000000  00000000  001ea034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001f6f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080162a8 	.word	0x080162a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	080162a8 	.word	0x080162a8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
 80005cc:	b480      	push	{r7}
 80005ce:	b087      	sub	sp, #28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
 80005d8:	603b      	str	r3, [r7, #0]
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
#else
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80005e0:	d11a      	bne.n	8000618 <LL_USART_SetBaudRate+0x4c>
#endif /* USART_PRESC_PRESCALER */
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	005a      	lsls	r2, r3, #1
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	085b      	lsrs	r3, r3, #1
 80005ea:	441a      	add	r2, r3
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
    brrtemp = usartdiv & 0xFFF0U;
 80005f6:	697a      	ldr	r2, [r7, #20]
 80005f8:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80005fc:	4013      	ands	r3, r2
 80005fe:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	085b      	lsrs	r3, r3, #1
 8000604:	b29b      	uxth	r3, r3
 8000606:	f003 0307 	and.w	r3, r3, #7
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	4313      	orrs	r3, r2
 800060e:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	60da      	str	r2, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif /* USART_PRESC_PRESCALER */
  }
}
 8000616:	e00a      	b.n	800062e <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	085a      	lsrs	r2, r3, #1
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	441a      	add	r2, r3
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	fbb2 f3f3 	udiv	r3, r2, r3
 8000626:	b29b      	uxth	r3, r3
 8000628:	461a      	mov	r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	60da      	str	r2, [r3, #12]
}
 800062e:	bf00      	nop
 8000630:	371c      	adds	r7, #28
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <Temp_Sensor_Init>:
#include "stm32l4xx_ll_usart.h"


/*------INIZIALIZZAZIONE SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Init(void)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
	uint8_t data = 0xF0;
 8000642:	23f0      	movs	r3, #240	@ 0xf0
 8000644:	71fb      	strb	r3, [r7, #7]

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 9600);
 8000646:	4b1a      	ldr	r3, [pc, #104]	@ (80006b0 <Temp_Sensor_Init+0x74>)
 8000648:	681c      	ldr	r4, [r3, #0]
 800064a:	f00e fedb 	bl	800f404 <HAL_RCC_GetPCLK2Freq>
 800064e:	4601      	mov	r1, r0
 8000650:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000654:	2200      	movs	r2, #0
 8000656:	4620      	mov	r0, r4
 8000658:	f7ff ffb8 	bl	80005cc <LL_USART_SetBaudRate>

	HAL_UART_Transmit(TEMP_UART, &data, 1, 100);  // low for 500+us
 800065c:	1df9      	adds	r1, r7, #7
 800065e:	2364      	movs	r3, #100	@ 0x64
 8000660:	2201      	movs	r2, #1
 8000662:	4813      	ldr	r0, [pc, #76]	@ (80006b0 <Temp_Sensor_Init+0x74>)
 8000664:	f013 f9a8 	bl	80139b8 <HAL_UART_Transmit>
	if (HAL_UART_Receive(TEMP_UART, &data, 1, 1000) != HAL_OK)
 8000668:	1df9      	adds	r1, r7, #7
 800066a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800066e:	2201      	movs	r2, #1
 8000670:	480f      	ldr	r0, [pc, #60]	@ (80006b0 <Temp_Sensor_Init+0x74>)
 8000672:	f013 fa2a 	bl	8013aca <HAL_UART_Receive>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <Temp_Sensor_Init+0x44>
		while(1);
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <Temp_Sensor_Init+0x40>

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 115200);
 8000680:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <Temp_Sensor_Init+0x74>)
 8000682:	681c      	ldr	r4, [r3, #0]
 8000684:	f00e febe 	bl	800f404 <HAL_RCC_GetPCLK2Freq>
 8000688:	4601      	mov	r1, r0
 800068a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800068e:	2200      	movs	r2, #0
 8000690:	4620      	mov	r0, r4
 8000692:	f7ff ff9b 	bl	80005cc <LL_USART_SetBaudRate>

	if (data == 0xF0)
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2bf0      	cmp	r3, #240	@ 0xf0
 800069a:	d101      	bne.n	80006a0 <Temp_Sensor_Init+0x64>
		while(1);
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <Temp_Sensor_Init+0x60>

	Temp_Sensor_Write(0xCC);  // skip ROM
 80006a0:	20cc      	movs	r0, #204	@ 0xcc
 80006a2:	f000 f807 	bl	80006b4 <Temp_Sensor_Write>
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd90      	pop	{r4, r7, pc}
 80006ae:	bf00      	nop
 80006b0:	2000059c 	.word	0x2000059c

080006b4 <Temp_Sensor_Write>:

/*------SCRITTURA SU SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Write(uint8_t data)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[8];

	for (int i=0; i<8; i++)
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	e017      	b.n	80006f4 <Temp_Sensor_Write+0x40>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 80006c4:	79fa      	ldrb	r2, [r7, #7]
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	fa42 f303 	asr.w	r3, r2, r3
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d006      	beq.n	80006e2 <Temp_Sensor_Write+0x2e>
		{
			buffer[i] = 0xFF;  // write 1
 80006d4:	f107 020c 	add.w	r2, r7, #12
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	4413      	add	r3, r2
 80006dc:	22ff      	movs	r2, #255	@ 0xff
 80006de:	701a      	strb	r2, [r3, #0]
 80006e0:	e005      	b.n	80006ee <Temp_Sensor_Write+0x3a>
		}
		else  // if the bit is low
		{
			buffer[i] = 0;  // write 0
 80006e2:	f107 020c 	add.w	r2, r7, #12
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	4413      	add	r3, r2
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<8; i++)
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	3301      	adds	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	2b07      	cmp	r3, #7
 80006f8:	dde4      	ble.n	80006c4 <Temp_Sensor_Write+0x10>
		}
	}

	HAL_UART_Transmit(TEMP_UART, buffer, 8, 100);
 80006fa:	f107 010c 	add.w	r1, r7, #12
 80006fe:	2364      	movs	r3, #100	@ 0x64
 8000700:	2208      	movs	r2, #8
 8000702:	4803      	ldr	r0, [pc, #12]	@ (8000710 <Temp_Sensor_Write+0x5c>)
 8000704:	f013 f958 	bl	80139b8 <HAL_UART_Transmit>
}
 8000708:	bf00      	nop
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	2000059c 	.word	0x2000059c

08000714 <Temp_Sensor_ReadByte>:

/*------LETTURA BYTE DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadByte(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
	uint8_t RxByte = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 800071e:	2300      	movs	r3, #0
 8000720:	71bb      	strb	r3, [r7, #6]
 8000722:	e00e      	b.n	8000742 <Temp_Sensor_ReadByte+0x2e>
	{
		RxByte >>= 1;
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	085b      	lsrs	r3, r3, #1
 8000728:	71fb      	strb	r3, [r7, #7]
		if (Temp_Sensor_ReadBit())
 800072a:	f000 f813 	bl	8000754 <Temp_Sensor_ReadBit>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d003      	beq.n	800073c <Temp_Sensor_ReadByte+0x28>
		{
			RxByte |= 0x80;
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800073a:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 800073c:	79bb      	ldrb	r3, [r7, #6]
 800073e:	3301      	adds	r3, #1
 8000740:	71bb      	strb	r3, [r7, #6]
 8000742:	79bb      	ldrb	r3, [r7, #6]
 8000744:	2b07      	cmp	r3, #7
 8000746:	d9ed      	bls.n	8000724 <Temp_Sensor_ReadByte+0x10>
		}
	}
	return RxByte;
 8000748:	79fb      	ldrb	r3, [r7, #7]
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <Temp_Sensor_ReadBit>:

/*------LETTURA BIT DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadBit(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
    uint8_t ReadBitCMD = 0xFF;
 800075a:	23ff      	movs	r3, #255	@ 0xff
 800075c:	71fb      	strb	r3, [r7, #7]
    uint8_t RxBit;

    // Send Read Bit CMD
    HAL_UART_Transmit(&huart1, &ReadBitCMD, 1, 1);
 800075e:	1df9      	adds	r1, r7, #7
 8000760:	2301      	movs	r3, #1
 8000762:	2201      	movs	r2, #1
 8000764:	4808      	ldr	r0, [pc, #32]	@ (8000788 <Temp_Sensor_ReadBit+0x34>)
 8000766:	f013 f927 	bl	80139b8 <HAL_UART_Transmit>
    // Receive The Bit
    HAL_UART_Receive(&huart1, &RxBit, 1, 1);
 800076a:	1db9      	adds	r1, r7, #6
 800076c:	2301      	movs	r3, #1
 800076e:	2201      	movs	r2, #1
 8000770:	4805      	ldr	r0, [pc, #20]	@ (8000788 <Temp_Sensor_ReadBit+0x34>)
 8000772:	f013 f9aa 	bl	8013aca <HAL_UART_Receive>

    return (RxBit & 0x01);
 8000776:	79bb      	ldrb	r3, [r7, #6]
 8000778:	f003 0301 	and.w	r3, r3, #1
 800077c:	b2db      	uxtb	r3, r3
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000624 	.word	0x20000624

0800078c <Read_Temperature>:

/*------LETTURA TEMPERATURA------*/
uint16_t Read_Temperature(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
	uint8_t Temp_LSB = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_MSB = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	71bb      	strb	r3, [r7, #6]
	uint16_t Temp = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	80bb      	strh	r3, [r7, #4]
	
	Temp_Sensor_Init();
 800079e:	f7ff ff4d 	bl	800063c <Temp_Sensor_Init>
	Temp_Sensor_Write(0xCC);  // skip ROM
 80007a2:	20cc      	movs	r0, #204	@ 0xcc
 80007a4:	f7ff ff86 	bl	80006b4 <Temp_Sensor_Write>

	uint8_t status = Temp_Sensor_ReadBit();
 80007a8:	f7ff ffd4 	bl	8000754 <Temp_Sensor_ReadBit>
 80007ac:	4603      	mov	r3, r0
 80007ae:	70fb      	strb	r3, [r7, #3]

	if (status) 
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d01d      	beq.n	80007f2 <Read_Temperature+0x66>
	{
		Temp_Sensor_Write(0xBE);  // read Scratch-pad
 80007b6:	20be      	movs	r0, #190	@ 0xbe
 80007b8:	f7ff ff7c 	bl	80006b4 <Temp_Sensor_Write>
		Temp_LSB = Temp_Sensor_ReadByte();
 80007bc:	f7ff ffaa 	bl	8000714 <Temp_Sensor_ReadByte>
 80007c0:	4603      	mov	r3, r0
 80007c2:	71fb      	strb	r3, [r7, #7]
	    Temp_MSB = Temp_Sensor_ReadByte();
 80007c4:	f7ff ffa6 	bl	8000714 <Temp_Sensor_ReadByte>
 80007c8:	4603      	mov	r3, r0
 80007ca:	71bb      	strb	r3, [r7, #6]
		Temp_Sensor_Init();
 80007cc:	f7ff ff36 	bl	800063c <Temp_Sensor_Init>
		Temp_Sensor_Write(0xCC);  // skip ROM
 80007d0:	20cc      	movs	r0, #204	@ 0xcc
 80007d2:	f7ff ff6f 	bl	80006b4 <Temp_Sensor_Write>
		Temp_Sensor_Write(0x44);  // convert t
 80007d6:	2044      	movs	r0, #68	@ 0x44
 80007d8:	f7ff ff6c 	bl	80006b4 <Temp_Sensor_Write>
		Temp = ((Temp_MSB << 8)) | Temp_LSB;
 80007dc:	79bb      	ldrb	r3, [r7, #6]
 80007de:	b21b      	sxth	r3, r3
 80007e0:	021b      	lsls	r3, r3, #8
 80007e2:	b21a      	sxth	r2, r3
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	b21b      	sxth	r3, r3
 80007e8:	4313      	orrs	r3, r2
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	80bb      	strh	r3, [r7, #4]
		return Temp;
 80007ee:	88bb      	ldrh	r3, [r7, #4]
 80007f0:	e000      	b.n	80007f4 <Read_Temperature+0x68>
	}
	
	return 0; 
 80007f2:	2300      	movs	r3, #0
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <INA3221_Init>:
#include "INA3221.h"
#include "INA3221_reg.h"
#include "peripherals.h"

void INA3221_Init()
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
	uint16_t rcheck = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	80fb      	strh	r3, [r7, #6]

	INA3221_write_reg(INA3221_REG_CONFIG, 0x8000);   //RESET
 8000806:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800080a:	2000      	movs	r0, #0
 800080c:	f000 f87a 	bl	8000904 <INA3221_write_reg>

	HAL_Delay(100);
 8000810:	2064      	movs	r0, #100	@ 0x64
 8000812:	f009 fc05 	bl	800a020 <HAL_Delay>

	INA3221_read_reg(INA3221_REG_MID, &rcheck);
 8000816:	1dbb      	adds	r3, r7, #6
 8000818:	4619      	mov	r1, r3
 800081a:	20fe      	movs	r0, #254	@ 0xfe
 800081c:	f000 f83c 	bl	8000898 <INA3221_read_reg>

	if(rcheck != INA3221_DEFAULT_MID)
 8000820:	88fb      	ldrh	r3, [r7, #6]
 8000822:	f245 4249 	movw	r2, #21577	@ 0x5449
 8000826:	4293      	cmp	r3, r2
 8000828:	d001      	beq.n	800082e <INA3221_Init+0x32>
		while(1);
 800082a:	bf00      	nop
 800082c:	e7fd      	b.n	800082a <INA3221_Init+0x2e>

	INA3221_write_reg(INA3221_REG_CONFIG, 0x7D27);   //CH1 CH2 CH3 Enabled, 512 AVG, 1.1ms conv time, continous mode
 800082e:	f647 5127 	movw	r1, #32039	@ 0x7d27
 8000832:	2000      	movs	r0, #0
 8000834:	f000 f866 	bl	8000904 <INA3221_write_reg>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <INA3221_Read_Measure>:

void INA3221_Read_Measure(supply_bus_t *measure)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_1, (uint16_t *)&(measure->v1));
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4619      	mov	r1, r3
 800084c:	2002      	movs	r0, #2
 800084e:	f000 f823 	bl	8000898 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_2, (uint16_t *)&(measure->v2));
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3302      	adds	r3, #2
 8000856:	4619      	mov	r1, r3
 8000858:	2004      	movs	r0, #4
 800085a:	f000 f81d 	bl	8000898 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_3, (uint16_t *)&(measure->v3));
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3304      	adds	r3, #4
 8000862:	4619      	mov	r1, r3
 8000864:	2006      	movs	r0, #6
 8000866:	f000 f817 	bl	8000898 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_1, (uint16_t *)&(measure->i1));
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	3306      	adds	r3, #6
 800086e:	4619      	mov	r1, r3
 8000870:	2001      	movs	r0, #1
 8000872:	f000 f811 	bl	8000898 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_2, (uint16_t *)&(measure->i2));
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3308      	adds	r3, #8
 800087a:	4619      	mov	r1, r3
 800087c:	2003      	movs	r0, #3
 800087e:	f000 f80b 	bl	8000898 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_3, (uint16_t *)&(measure->i3));
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	330a      	adds	r3, #10
 8000886:	4619      	mov	r1, r3
 8000888:	2005      	movs	r0, #5
 800088a:	f000 f805 	bl	8000898 <INA3221_read_reg>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <INA3221_read_reg>:


int INA3221_read_reg(uint8_t reg, uint16_t *rdata)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af02      	add	r7, sp, #8
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295
 80008a8:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 80008aa:	2300      	movs	r3, #0
 80008ac:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, &reg, 1, 100) == HAL_OK)
 80008ae:	1dfa      	adds	r2, r7, #7
 80008b0:	2364      	movs	r3, #100	@ 0x64
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	2301      	movs	r3, #1
 80008b6:	2180      	movs	r1, #128	@ 0x80
 80008b8:	4811      	ldr	r0, [pc, #68]	@ (8000900 <INA3221_read_reg+0x68>)
 80008ba:	f00c fe07 	bl	800d4cc <HAL_I2C_Master_Transmit>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d118      	bne.n	80008f6 <INA3221_read_reg+0x5e>
	{

		if(HAL_I2C_Master_Receive(I2C,  INA3221_ADDR_0 << 1, data, 2, 100) == HAL_OK)
 80008c4:	f107 0208 	add.w	r2, r7, #8
 80008c8:	2364      	movs	r3, #100	@ 0x64
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2302      	movs	r3, #2
 80008ce:	2180      	movs	r1, #128	@ 0x80
 80008d0:	480b      	ldr	r0, [pc, #44]	@ (8000900 <INA3221_read_reg+0x68>)
 80008d2:	f00c ff13 	bl	800d6fc <HAL_I2C_Master_Receive>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d10c      	bne.n	80008f6 <INA3221_read_reg+0x5e>
		{
			result = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 80008e0:	7a3b      	ldrb	r3, [r7, #8]
 80008e2:	b21b      	sxth	r3, r3
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	b21a      	sxth	r2, r3
 80008e8:	7a7b      	ldrb	r3, [r7, #9]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b21b      	sxth	r3, r3
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 80008f6:	68fb      	ldr	r3, [r7, #12]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200002e8 	.word	0x200002e8

08000904 <INA3221_write_reg>:


int INA3221_write_reg(uint8_t reg, uint16_t wdata)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af02      	add	r7, sp, #8
 800090a:	4603      	mov	r3, r0
 800090c:	460a      	mov	r2, r1
 800090e:	71fb      	strb	r3, [r7, #7]
 8000910:	4613      	mov	r3, r2
 8000912:	80bb      	strh	r3, [r7, #4]
    int result = -1;
 8000914:	f04f 33ff 	mov.w	r3, #4294967295
 8000918:	60fb      	str	r3, [r7, #12]
    uint8_t data[3];
    
    data[0] = reg;                    
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	723b      	strb	r3, [r7, #8]
    data[1] = (wdata >> 8);          
 800091e:	88bb      	ldrh	r3, [r7, #4]
 8000920:	0a1b      	lsrs	r3, r3, #8
 8000922:	b29b      	uxth	r3, r3
 8000924:	b2db      	uxtb	r3, r3
 8000926:	727b      	strb	r3, [r7, #9]
    data[2] = (wdata & 0xFF);        
 8000928:	88bb      	ldrh	r3, [r7, #4]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	72bb      	strb	r3, [r7, #10]

    if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, data, 3, 100) == HAL_OK)
 800092e:	f107 0208 	add.w	r2, r7, #8
 8000932:	2364      	movs	r3, #100	@ 0x64
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2303      	movs	r3, #3
 8000938:	2180      	movs	r1, #128	@ 0x80
 800093a:	4806      	ldr	r0, [pc, #24]	@ (8000954 <INA3221_write_reg+0x50>)
 800093c:	f00c fdc6 	bl	800d4cc <HAL_I2C_Master_Transmit>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d101      	bne.n	800094a <INA3221_write_reg+0x46>
    {
        result = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
    }
    
    return result;
 800094a:	68fb      	ldr	r3, [r7, #12]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200002e8 	.word	0x200002e8

08000958 <RTC_Init>:
#include "RTC.h"


/*-----INIZiALIZZAZIONE ORA RTC-----*/
void RTC_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
	for (int retry = 0; retry < 3; retry++)
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	e00b      	b.n	800097c <RTC_Init+0x24>
	{
		if (Get_DateTime_From_Network())
 8000964:	f000 f814 	bl	8000990 <Get_DateTime_From_Network>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d10c      	bne.n	8000988 <RTC_Init+0x30>
		{
			return;
		}
		HAL_Delay(1000);
 800096e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000972:	f009 fb55 	bl	800a020 <HAL_Delay>
	for (int retry = 0; retry < 3; retry++)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3301      	adds	r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b02      	cmp	r3, #2
 8000980:	ddf0      	ble.n	8000964 <RTC_Init+0xc>
	}
	Set_Default_DateTime();
 8000982:	f000 f8f1 	bl	8000b68 <Set_Default_DateTime>
 8000986:	e000      	b.n	800098a <RTC_Init+0x32>
			return;
 8000988:	bf00      	nop
}
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <Get_DateTime_From_Network>:

/*-----SINCRONIZZAZIONE RTC DA RETE-----*/
int Get_DateTime_From_Network(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b0a2      	sub	sp, #136	@ 0x88
 8000994:	af00      	add	r7, sp, #0
	char response[100] = {0};
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	2264      	movs	r2, #100	@ 0x64
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f014 fbb2 	bl	8015108 <memset>
	RTC_DateTypeDef sDate = {0};
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]
	RTC_TimeTypeDef sTime = {0};
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

	SIM_Send_Command("AT+CCLK?\r");
 80009b6:	4869      	ldr	r0, [pc, #420]	@ (8000b5c <Get_DateTime_From_Network+0x1cc>)
 80009b8:	f000 fbc2 	bl	8001140 <SIM_Send_Command>
	SIM_Receive_Response(response);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fbe9 	bl	8001198 <SIM_Receive_Response>

    char* cclk_pos = strstr(response, "+CCLK: \"");
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4965      	ldr	r1, [pc, #404]	@ (8000b60 <Get_DateTime_From_Network+0x1d0>)
 80009cc:	4618      	mov	r0, r3
 80009ce:	f014 fbd5 	bl	801517c <strstr>
 80009d2:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (cclk_pos == NULL)
 80009d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d101      	bne.n	80009e2 <Get_DateTime_From_Network+0x52>
	{
        return 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	e0b8      	b.n	8000b54 <Get_DateTime_From_Network+0x1c4>
    }

    char* time_start = cclk_pos + 8;
 80009e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80009e6:	3308      	adds	r3, #8
 80009e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    if (strlen(time_start) < 17)
 80009ec:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80009f0:	f7ff fbf8 	bl	80001e4 <strlen>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b10      	cmp	r3, #16
 80009f8:	d801      	bhi.n	80009fe <Get_DateTime_From_Network+0x6e>
	{
		return 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e0aa      	b.n	8000b54 <Get_DateTime_From_Network+0x1c4>
	}

	sDate.Year = (time_start[0] - '0') * 10 + (time_start[1] - '0');
 80009fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	3b30      	subs	r3, #48	@ 0x30
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	461a      	mov	r2, r3
 8000a0a:	0092      	lsls	r2, r2, #2
 8000a0c:	4413      	add	r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a16:	3301      	adds	r3, #1
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	3b30      	subs	r3, #48	@ 0x30
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	76fb      	strb	r3, [r7, #27]
	sDate.Month = (time_start[3] - '0') * 10 + (time_start[4] - '0');
 8000a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a28:	3303      	adds	r3, #3
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	3b30      	subs	r3, #48	@ 0x30
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	461a      	mov	r2, r3
 8000a32:	0092      	lsls	r2, r2, #2
 8000a34:	4413      	add	r3, r2
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a3e:	3304      	adds	r3, #4
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	3b30      	subs	r3, #48	@ 0x30
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	767b      	strb	r3, [r7, #25]
	sDate.Date = (time_start[6] - '0') * 10 + (time_start[7] - '0');
 8000a4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a50:	3306      	adds	r3, #6
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	3b30      	subs	r3, #48	@ 0x30
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	461a      	mov	r2, r3
 8000a5a:	0092      	lsls	r2, r2, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a66:	3307      	adds	r3, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	3b30      	subs	r3, #48	@ 0x30
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	76bb      	strb	r3, [r7, #26]

	sTime.Hours = (time_start[9] - '0') * 10 + (time_start[10] - '0');
 8000a74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a78:	3309      	adds	r3, #9
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	3b30      	subs	r3, #48	@ 0x30
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	461a      	mov	r2, r3
 8000a82:	0092      	lsls	r2, r2, #2
 8000a84:	4413      	add	r3, r2
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a8e:	330a      	adds	r3, #10
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	3b30      	subs	r3, #48	@ 0x30
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = (time_start[12] - '0') * 10 + (time_start[13] - '0');
 8000a9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000aa0:	330c      	adds	r3, #12
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	3b30      	subs	r3, #48	@ 0x30
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	0092      	lsls	r2, r2, #2
 8000aac:	4413      	add	r3, r2
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000ab6:	330d      	adds	r3, #13
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	3b30      	subs	r3, #48	@ 0x30
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = (time_start[15] - '0') * 10 + (time_start[16] - '0');
 8000ac4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000ac8:	330f      	adds	r3, #15
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	3b30      	subs	r3, #48	@ 0x30
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	0092      	lsls	r2, r2, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000ade:	3310      	adds	r3, #16
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	3b30      	subs	r3, #48	@ 0x30
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	71bb      	strb	r3, [r7, #6]

	if (sDate.Month < 1 || sDate.Month > 12 ||
 8000aec:	7e7b      	ldrb	r3, [r7, #25]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d011      	beq.n	8000b16 <Get_DateTime_From_Network+0x186>
 8000af2:	7e7b      	ldrb	r3, [r7, #25]
 8000af4:	2b0c      	cmp	r3, #12
 8000af6:	d80e      	bhi.n	8000b16 <Get_DateTime_From_Network+0x186>
        sDate.Date < 1 || sDate.Date > 31 ||
 8000af8:	7ebb      	ldrb	r3, [r7, #26]
	if (sDate.Month < 1 || sDate.Month > 12 ||
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d00b      	beq.n	8000b16 <Get_DateTime_From_Network+0x186>
        sDate.Date < 1 || sDate.Date > 31 ||
 8000afe:	7ebb      	ldrb	r3, [r7, #26]
 8000b00:	2b1f      	cmp	r3, #31
 8000b02:	d808      	bhi.n	8000b16 <Get_DateTime_From_Network+0x186>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 8000b04:	793b      	ldrb	r3, [r7, #4]
        sDate.Date < 1 || sDate.Date > 31 ||
 8000b06:	2b17      	cmp	r3, #23
 8000b08:	d805      	bhi.n	8000b16 <Get_DateTime_From_Network+0x186>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 8000b0a:	797b      	ldrb	r3, [r7, #5]
 8000b0c:	2b3b      	cmp	r3, #59	@ 0x3b
 8000b0e:	d802      	bhi.n	8000b16 <Get_DateTime_From_Network+0x186>
 8000b10:	79bb      	ldrb	r3, [r7, #6]
 8000b12:	2b3b      	cmp	r3, #59	@ 0x3b
 8000b14:	d901      	bls.n	8000b1a <Get_DateTime_From_Network+0x18a>
        return 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	e01c      	b.n	8000b54 <Get_DateTime_From_Network+0x1c4>
    }

	sDate.WeekDay = Calculate_Weekday(sDate.Year + 2000, sDate.Month, sDate.Date);
 8000b1a:	7efb      	ldrb	r3, [r7, #27]
 8000b1c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	7e79      	ldrb	r1, [r7, #25]
 8000b24:	7eba      	ldrb	r2, [r7, #26]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f850 	bl	8000bcc <Calculate_Weekday>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	763b      	strb	r3, [r7, #24]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000b38:	f107 0318 	add.w	r3, r7, #24
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4808      	ldr	r0, [pc, #32]	@ (8000b64 <Get_DateTime_From_Network+0x1d4>)
 8000b42:	f00f fb12 	bl	801016a <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4805      	ldr	r0, [pc, #20]	@ (8000b64 <Get_DateTime_From_Network+0x1d4>)
 8000b4e:	f00f fa13 	bl	800ff78 <HAL_RTC_SetTime>
	return 1;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3788      	adds	r7, #136	@ 0x88
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	080162c0 	.word	0x080162c0
 8000b60:	080162cc 	.word	0x080162cc
 8000b64:	20000380 	.word	0x20000380

08000b68 <Set_Default_DateTime>:

/*-----DATA E ORA DI DEFAULT 1/1/2020 00:00:00-----*/
void Set_Default_DateTime(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
    RTC_DateTypeDef sDate = {0};
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
    RTC_TimeTypeDef sTime = {0};
 8000b72:	463b      	mov	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]

    // Default: 01/01/2020 00:00:00
    sDate.Year = 20;  // 2020
 8000b80:	2314      	movs	r3, #20
 8000b82:	75fb      	strb	r3, [r7, #23]
    sDate.Month = RTC_MONTH_JANUARY;
 8000b84:	2301      	movs	r3, #1
 8000b86:	757b      	strb	r3, [r7, #21]
    sDate.Date = 1;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	75bb      	strb	r3, [r7, #22]
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY; // 1 Jan 2020 era mercoledì
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	753b      	strb	r3, [r7, #20]

    sTime.Hours = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	703b      	strb	r3, [r7, #0]
    sTime.Minutes = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	707b      	strb	r3, [r7, #1]
    sTime.Seconds = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	70bb      	strb	r3, [r7, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]

    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	4619      	mov	r1, r3
 8000bac:	4806      	ldr	r0, [pc, #24]	@ (8000bc8 <Set_Default_DateTime+0x60>)
 8000bae:	f00f fadc 	bl	801016a <HAL_RTC_SetDate>
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4803      	ldr	r0, [pc, #12]	@ (8000bc8 <Set_Default_DateTime+0x60>)
 8000bba:	f00f f9dd 	bl	800ff78 <HAL_RTC_SetTime>
}
 8000bbe:	bf00      	nop
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000380 	.word	0x20000380

08000bcc <Calculate_Weekday>:

/*-----CALCOLO GIORNO SETTIMANA-----*/
uint8_t Calculate_Weekday(uint16_t year, uint8_t month, uint8_t day)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	80fb      	strh	r3, [r7, #6]
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	717b      	strb	r3, [r7, #5]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	713b      	strb	r3, [r7, #4]
    // Algoritmo di Zeller per calcolo giorno settimana
    if (month < 3) {
 8000bde:	797b      	ldrb	r3, [r7, #5]
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d805      	bhi.n	8000bf0 <Calculate_Weekday+0x24>
        month += 12;
 8000be4:	797b      	ldrb	r3, [r7, #5]
 8000be6:	330c      	adds	r3, #12
 8000be8:	717b      	strb	r3, [r7, #5]
        year--;
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	80fb      	strh	r3, [r7, #6]
    }
    uint8_t zeller_day = (day + ((13 * (month + 1)) / 5) + year + (year / 4) - (year / 100) + (year / 400)) % 7;
 8000bf0:	7939      	ldrb	r1, [r7, #4]
 8000bf2:	797b      	ldrb	r3, [r7, #5]
 8000bf4:	1c5a      	adds	r2, r3, #1
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	4413      	add	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a1e      	ldr	r2, [pc, #120]	@ (8000c7c <Calculate_Weekday+0xb0>)
 8000c02:	fb82 0203 	smull	r0, r2, r2, r3
 8000c06:	1052      	asrs	r2, r2, #1
 8000c08:	17db      	asrs	r3, r3, #31
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	18ca      	adds	r2, r1, r3
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	4413      	add	r3, r2
 8000c12:	88fa      	ldrh	r2, [r7, #6]
 8000c14:	0892      	lsrs	r2, r2, #2
 8000c16:	b292      	uxth	r2, r2
 8000c18:	4413      	add	r3, r2
 8000c1a:	88fa      	ldrh	r2, [r7, #6]
 8000c1c:	4918      	ldr	r1, [pc, #96]	@ (8000c80 <Calculate_Weekday+0xb4>)
 8000c1e:	fba1 1202 	umull	r1, r2, r1, r2
 8000c22:	0952      	lsrs	r2, r2, #5
 8000c24:	b292      	uxth	r2, r2
 8000c26:	1a9b      	subs	r3, r3, r2
 8000c28:	88fa      	ldrh	r2, [r7, #6]
 8000c2a:	4915      	ldr	r1, [pc, #84]	@ (8000c80 <Calculate_Weekday+0xb4>)
 8000c2c:	fba1 1202 	umull	r1, r2, r1, r2
 8000c30:	09d2      	lsrs	r2, r2, #7
 8000c32:	b292      	uxth	r2, r2
 8000c34:	441a      	add	r2, r3
 8000c36:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <Calculate_Weekday+0xb8>)
 8000c38:	fb83 1302 	smull	r1, r3, r3, r2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	1099      	asrs	r1, r3, #2
 8000c40:	17d3      	asrs	r3, r2, #31
 8000c42:	1ac9      	subs	r1, r1, r3
 8000c44:	460b      	mov	r3, r1
 8000c46:	00db      	lsls	r3, r3, #3
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	1ad1      	subs	r1, r2, r3
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	73fb      	strb	r3, [r7, #15]

    uint8_t hal_weekday_map[] = {RTC_WEEKDAY_SATURDAY, RTC_WEEKDAY_SUNDAY, RTC_WEEKDAY_MONDAY,
 8000c50:	4a0d      	ldr	r2, [pc, #52]	@ (8000c88 <Calculate_Weekday+0xbc>)
 8000c52:	f107 0308 	add.w	r3, r7, #8
 8000c56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c5a:	6018      	str	r0, [r3, #0]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	8019      	strh	r1, [r3, #0]
 8000c60:	3302      	adds	r3, #2
 8000c62:	0c0a      	lsrs	r2, r1, #16
 8000c64:	701a      	strb	r2, [r3, #0]
                                 RTC_WEEKDAY_TUESDAY, RTC_WEEKDAY_WEDNESDAY, RTC_WEEKDAY_THURSDAY, RTC_WEEKDAY_FRIDAY};

    return hal_weekday_map[zeller_day];
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	3310      	adds	r3, #16
 8000c6a:	443b      	add	r3, r7
 8000c6c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	66666667 	.word	0x66666667
 8000c80:	51eb851f 	.word	0x51eb851f
 8000c84:	92492493 	.word	0x92492493
 8000c88:	080162d8 	.word	0x080162d8

08000c8c <SIM_Init>:
#include "DS18B20.h"
#include "process.h"

/*------INIZIALIZZAZIONE DEL MODULO LTE------*/
void SIM_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000c92:	af00      	add	r7, sp, #0
	char command[256];
	char response[256];
	sprintf(sys.apn, "a");
 8000c94:	49bd      	ldr	r1, [pc, #756]	@ (8000f8c <SIM_Init+0x300>)
 8000c96:	48be      	ldr	r0, [pc, #760]	@ (8000f90 <SIM_Init+0x304>)
 8000c98:	f014 f9d6 	bl	8015048 <siprintf>
	sprintf(sys.MQTT.clientID, "a");
 8000c9c:	49bb      	ldr	r1, [pc, #748]	@ (8000f8c <SIM_Init+0x300>)
 8000c9e:	48bd      	ldr	r0, [pc, #756]	@ (8000f94 <SIM_Init+0x308>)
 8000ca0:	f014 f9d2 	bl	8015048 <siprintf>
	sprintf(sys.MQTT.server_name, "a");
 8000ca4:	49b9      	ldr	r1, [pc, #740]	@ (8000f8c <SIM_Init+0x300>)
 8000ca6:	48bc      	ldr	r0, [pc, #752]	@ (8000f98 <SIM_Init+0x30c>)
 8000ca8:	f014 f9ce 	bl	8015048 <siprintf>
	sprintf(sys.MQTT.port, "a");
 8000cac:	49b7      	ldr	r1, [pc, #732]	@ (8000f8c <SIM_Init+0x300>)
 8000cae:	48bb      	ldr	r0, [pc, #748]	@ (8000f9c <SIM_Init+0x310>)
 8000cb0:	f014 f9ca 	bl	8015048 <siprintf>
	sprintf(sys.MQTT.username, "a");
 8000cb4:	49b5      	ldr	r1, [pc, #724]	@ (8000f8c <SIM_Init+0x300>)
 8000cb6:	48ba      	ldr	r0, [pc, #744]	@ (8000fa0 <SIM_Init+0x314>)
 8000cb8:	f014 f9c6 	bl	8015048 <siprintf>
	sprintf(sys.MQTT.password, "a");
 8000cbc:	49b3      	ldr	r1, [pc, #716]	@ (8000f8c <SIM_Init+0x300>)
 8000cbe:	48b9      	ldr	r0, [pc, #740]	@ (8000fa4 <SIM_Init+0x318>)
 8000cc0:	f014 f9c2 	bl	8015048 <siprintf>
	sprintf(sys.TCP.IP_address, "a");
 8000cc4:	49b1      	ldr	r1, [pc, #708]	@ (8000f8c <SIM_Init+0x300>)
 8000cc6:	48b8      	ldr	r0, [pc, #736]	@ (8000fa8 <SIM_Init+0x31c>)
 8000cc8:	f014 f9be 	bl	8015048 <siprintf>
	sprintf(sys.TCP.Port, "a");
 8000ccc:	49af      	ldr	r1, [pc, #700]	@ (8000f8c <SIM_Init+0x300>)
 8000cce:	48b7      	ldr	r0, [pc, #732]	@ (8000fac <SIM_Init+0x320>)
 8000cd0:	f014 f9ba 	bl	8015048 <siprintf>
	strcpy(sys.MQTT.Data_Topic, config.data_topic);
 8000cd4:	49b6      	ldr	r1, [pc, #728]	@ (8000fb0 <SIM_Init+0x324>)
 8000cd6:	48b7      	ldr	r0, [pc, #732]	@ (8000fb4 <SIM_Init+0x328>)
 8000cd8:	f014 fa92 	bl	8015200 <strcpy>
	strcpy(sys.MQTT.Command_Topic, config.command_topic);
 8000cdc:	49b6      	ldr	r1, [pc, #728]	@ (8000fb8 <SIM_Init+0x32c>)
 8000cde:	48b7      	ldr	r0, [pc, #732]	@ (8000fbc <SIM_Init+0x330>)
 8000ce0:	f014 fa8e 	bl	8015200 <strcpy>
	strcpy(sys.MQTT.OTA_Topic, config.ota_topic);
 8000ce4:	49b6      	ldr	r1, [pc, #728]	@ (8000fc0 <SIM_Init+0x334>)
 8000ce6:	48b7      	ldr	r0, [pc, #732]	@ (8000fc4 <SIM_Init+0x338>)
 8000ce8:	f014 fa8a 	bl	8015200 <strcpy>
	strcpy(sys.MQTT.Info_Topic, config.info_topic);
 8000cec:	49b6      	ldr	r1, [pc, #728]	@ (8000fc8 <SIM_Init+0x33c>)
 8000cee:	48b7      	ldr	r0, [pc, #732]	@ (8000fcc <SIM_Init+0x340>)
 8000cf0:	f014 fa86 	bl	8015200 <strcpy>

	SIM_Power_On();
 8000cf4:	f000 fa0e 	bl	8001114 <SIM_Power_On>
	HAL_Delay(5000);
 8000cf8:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000cfc:	f009 f990 	bl	800a020 <HAL_Delay>

	SIM_Send_Command("AT\r");                                                                     //Verifica comunicazione
 8000d00:	48b3      	ldr	r0, [pc, #716]	@ (8000fd0 <SIM_Init+0x344>)
 8000d02:	f000 fa1d 	bl	8001140 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 fa44 	bl	8001198 <SIM_Receive_Response>
	if(strstr(response, "OK") == NULL)
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	49af      	ldr	r1, [pc, #700]	@ (8000fd4 <SIM_Init+0x348>)
 8000d16:	4618      	mov	r0, r3
 8000d18:	f014 fa30 	bl	801517c <strstr>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d101      	bne.n	8000d26 <SIM_Init+0x9a>
	{
		while(1);
 8000d22:	bf00      	nop
 8000d24:	e7fd      	b.n	8000d22 <SIM_Init+0x96>
	}

	SIM_Send_Command("AT+IPR=921600\r");                                                          //Baudrate a 921600
 8000d26:	48ac      	ldr	r0, [pc, #688]	@ (8000fd8 <SIM_Init+0x34c>)
 8000d28:	f000 fa0a 	bl	8001140 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000d2c:	48a9      	ldr	r0, [pc, #676]	@ (8000fd4 <SIM_Init+0x348>)
 8000d2e:	f000 fe13 	bl	8001958 <SIM_Wait_Response>

	huart1.Init.BaudRate = 921600;
 8000d32:	4baa      	ldr	r3, [pc, #680]	@ (8000fdc <SIM_Init+0x350>)
 8000d34:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8000d38:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(LTE_UART);
 8000d3a:	48a8      	ldr	r0, [pc, #672]	@ (8000fdc <SIM_Init+0x350>)
 8000d3c:	f012 fd98 	bl	8013870 <HAL_UART_Init>

	SIM_Send_Command("AT+CFUN=1\r");                                                              //Full functionality
 8000d40:	48a7      	ldr	r0, [pc, #668]	@ (8000fe0 <SIM_Init+0x354>)
 8000d42:	f000 f9fd 	bl	8001140 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000d46:	48a3      	ldr	r0, [pc, #652]	@ (8000fd4 <SIM_Init+0x348>)
 8000d48:	f000 fe06 	bl	8001958 <SIM_Wait_Response>

	SIM_Send_Command("AT+CNMP=38\r");                                                             //Modalità solo LTE o NB-IoT
 8000d4c:	48a5      	ldr	r0, [pc, #660]	@ (8000fe4 <SIM_Init+0x358>)
 8000d4e:	f000 f9f7 	bl	8001140 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000d52:	48a0      	ldr	r0, [pc, #640]	@ (8000fd4 <SIM_Init+0x348>)
 8000d54:	f000 fe00 	bl	8001958 <SIM_Wait_Response>

	SIM_Send_Command("AT+CMNB=2\r");                                                              //NB-IoT
 8000d58:	48a3      	ldr	r0, [pc, #652]	@ (8000fe8 <SIM_Init+0x35c>)
 8000d5a:	f000 f9f1 	bl	8001140 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000d5e:	489d      	ldr	r0, [pc, #628]	@ (8000fd4 <SIM_Init+0x348>)
 8000d60:	f000 fdfa 	bl	8001958 <SIM_Wait_Response>

	SIM_Send_Command("AT+NBSC=1\r");                                                              //Abilitazione scrambling feature DA VEDERE SE L'OPERATORE LA RICHIEDE
 8000d64:	48a1      	ldr	r0, [pc, #644]	@ (8000fec <SIM_Init+0x360>)
 8000d66:	f000 f9eb 	bl	8001140 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000d6a:	489a      	ldr	r0, [pc, #616]	@ (8000fd4 <SIM_Init+0x348>)
 8000d6c:	f000 fdf4 	bl	8001958 <SIM_Wait_Response>

	SIM_Send_Command("AT+CEREG?\r");                                                              //Controllo registrazione alla rete
 8000d70:	489f      	ldr	r0, [pc, #636]	@ (8000ff0 <SIM_Init+0x364>)
 8000d72:	f000 f9e5 	bl	8001140 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 fa0c 	bl	8001198 <SIM_Receive_Response>
	int stat = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
	int n, stat_value;
	if(strstr(response, "+CEREG: ") != NULL)
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	499a      	ldr	r1, [pc, #616]	@ (8000ff4 <SIM_Init+0x368>)
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f014 f9f5 	bl	801517c <strstr>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d03a      	beq.n	8000e0e <SIM_Init+0x182>
	{
		while(stat != 1)
 8000d98:	e035      	b.n	8000e06 <SIM_Init+0x17a>
		{
			if(sscanf(response, "+CEREG: %d,%d", &n, &stat_value) >= 2) 
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	f107 0208 	add.w	r2, r7, #8
 8000da0:	f107 000c 	add.w	r0, r7, #12
 8000da4:	4994      	ldr	r1, [pc, #592]	@ (8000ff8 <SIM_Init+0x36c>)
 8000da6:	f014 f971 	bl	801508c <siscanf>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	dd1e      	ble.n	8000dee <SIM_Init+0x162>
			{
				if(stat_value == 1 || stat_value == 5)
 8000db0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000db4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d006      	beq.n	8000dcc <SIM_Init+0x140>
 8000dbe:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000dc2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b05      	cmp	r3, #5
 8000dca:	d103      	bne.n	8000dd4 <SIM_Init+0x148>
			    {
					 stat = 1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8000dd2:	e018      	b.n	8000e06 <SIM_Init+0x17a>
				}
				 else
				{
					SIM_Send_Command("AT+CEREG?\r");
 8000dd4:	4886      	ldr	r0, [pc, #536]	@ (8000ff0 <SIM_Init+0x364>)
 8000dd6:	f000 f9b3 	bl	8001140 <SIM_Send_Command>
					SIM_Receive_Response(response);
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f9da 	bl	8001198 <SIM_Receive_Response>
					HAL_Delay(1000);
 8000de4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000de8:	f009 f91a 	bl	800a020 <HAL_Delay>
 8000dec:	e00b      	b.n	8000e06 <SIM_Init+0x17a>
				}
			}
			else  
			{
				SIM_Send_Command("AT+CEREG?\r");
 8000dee:	4880      	ldr	r0, [pc, #512]	@ (8000ff0 <SIM_Init+0x364>)
 8000df0:	f000 f9a6 	bl	8001140 <SIM_Send_Command>
				SIM_Receive_Response(response);
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 f9cd 	bl	8001198 <SIM_Receive_Response>
				HAL_Delay(1000);
 8000dfe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e02:	f009 f90d 	bl	800a020 <HAL_Delay>
		while(stat != 1)
 8000e06:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d1c5      	bne.n	8000d9a <SIM_Init+0x10e>
			}
		}

	}

	sprintf(command, "AT+CGDCONT=1,\"IP\",\"%s\"\r", sys.apn);                                    //Configurazione APN
 8000e0e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000e12:	4a5f      	ldr	r2, [pc, #380]	@ (8000f90 <SIM_Init+0x304>)
 8000e14:	4979      	ldr	r1, [pc, #484]	@ (8000ffc <SIM_Init+0x370>)
 8000e16:	4618      	mov	r0, r3
 8000e18:	f014 f916 	bl	8015048 <siprintf>
	SIM_Send_Command(command);
 8000e1c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 f98d 	bl	8001140 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000e26:	486b      	ldr	r0, [pc, #428]	@ (8000fd4 <SIM_Init+0x348>)
 8000e28:	f000 fd96 	bl	8001958 <SIM_Wait_Response>

	SIM_Send_Command("AT+CNACT=1\r");                                                             //Attivazione della rete
 8000e2c:	4874      	ldr	r0, [pc, #464]	@ (8001000 <SIM_Init+0x374>)
 8000e2e:	f000 f987 	bl	8001140 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f9ae 	bl	8001198 <SIM_Receive_Response>
	if(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	4970      	ldr	r1, [pc, #448]	@ (8001004 <SIM_Init+0x378>)
 8000e42:	4618      	mov	r0, r3
 8000e44:	f014 f99a 	bl	801517c <strstr>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d115      	bne.n	8000e7a <SIM_Init+0x1ee>
	{
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8000e4e:	e00b      	b.n	8000e68 <SIM_Init+0x1dc>
		{
			SIM_Send_Command("AT+CNACT=1\r");
 8000e50:	486b      	ldr	r0, [pc, #428]	@ (8001000 <SIM_Init+0x374>)
 8000e52:	f000 f975 	bl	8001140 <SIM_Send_Command>
			SIM_Receive_Response(response);
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f99c 	bl	8001198 <SIM_Receive_Response>
			HAL_Delay(1000);
 8000e60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e64:	f009 f8dc 	bl	800a020 <HAL_Delay>
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	4965      	ldr	r1, [pc, #404]	@ (8001004 <SIM_Init+0x378>)
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f014 f984 	bl	801517c <strstr>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0ea      	beq.n	8000e50 <SIM_Init+0x1c4>
		}
	}

	SIM_Send_Command("AT+CNACT?\r");                                                              //Verifica indirizzo IP
 8000e7a:	4863      	ldr	r0, [pc, #396]	@ (8001008 <SIM_Init+0x37c>)
 8000e7c:	f000 f960 	bl	8001140 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 f987 	bl	8001198 <SIM_Receive_Response>
	while(!SIM_Check_IP(response))
 8000e8a:	e00b      	b.n	8000ea4 <SIM_Init+0x218>
	{
		SIM_Send_Command("AT+CNACT?\r");
 8000e8c:	485e      	ldr	r0, [pc, #376]	@ (8001008 <SIM_Init+0x37c>)
 8000e8e:	f000 f957 	bl	8001140 <SIM_Send_Command>
		SIM_Receive_Response(response);
 8000e92:	f107 030c 	add.w	r3, r7, #12
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f97e 	bl	8001198 <SIM_Receive_Response>
		HAL_Delay(1000);
 8000e9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ea0:	f009 f8be 	bl	800a020 <HAL_Delay>
	while(!SIM_Check_IP(response))
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f98f 	bl	80011cc <SIM_Check_IP>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0eb      	beq.n	8000e8c <SIM_Init+0x200>
	}

	sprintf(command, "AT+SMCONF=\"URL\",\"%s\",%s\r", sys.MQTT.server_name, sys.MQTT.port);       //Configurazione MQTT
 8000eb4:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8000eb8:	4b38      	ldr	r3, [pc, #224]	@ (8000f9c <SIM_Init+0x310>)
 8000eba:	4a37      	ldr	r2, [pc, #220]	@ (8000f98 <SIM_Init+0x30c>)
 8000ebc:	4953      	ldr	r1, [pc, #332]	@ (800100c <SIM_Init+0x380>)
 8000ebe:	f014 f8c3 	bl	8015048 <siprintf>
	SIM_Send_Command(command);
 8000ec2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f93a 	bl	8001140 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000ecc:	4841      	ldr	r0, [pc, #260]	@ (8000fd4 <SIM_Init+0x348>)
 8000ece:	f000 fd43 	bl	8001958 <SIM_Wait_Response>

	sprintf(command, "AT+SMCONF=\"CLIENTID\",\"%s\"\r", sys.MQTT.clientID);
 8000ed2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ed6:	4a2f      	ldr	r2, [pc, #188]	@ (8000f94 <SIM_Init+0x308>)
 8000ed8:	494d      	ldr	r1, [pc, #308]	@ (8001010 <SIM_Init+0x384>)
 8000eda:	4618      	mov	r0, r3
 8000edc:	f014 f8b4 	bl	8015048 <siprintf>
	SIM_Send_Command(command);
 8000ee0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 f92b 	bl	8001140 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000eea:	483a      	ldr	r0, [pc, #232]	@ (8000fd4 <SIM_Init+0x348>)
 8000eec:	f000 fd34 	bl	8001958 <SIM_Wait_Response>

	SIM_Send_Command("AT+SMCONF=\"KEEPTIME\",60\r");
 8000ef0:	4848      	ldr	r0, [pc, #288]	@ (8001014 <SIM_Init+0x388>)
 8000ef2:	f000 f925 	bl	8001140 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000ef6:	4837      	ldr	r0, [pc, #220]	@ (8000fd4 <SIM_Init+0x348>)
 8000ef8:	f000 fd2e 	bl	8001958 <SIM_Wait_Response>

	sprintf(command, "AT+SMCONF=\"USERNAME\",\"%s\"\r", sys.MQTT.username);
 8000efc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f00:	4a27      	ldr	r2, [pc, #156]	@ (8000fa0 <SIM_Init+0x314>)
 8000f02:	4945      	ldr	r1, [pc, #276]	@ (8001018 <SIM_Init+0x38c>)
 8000f04:	4618      	mov	r0, r3
 8000f06:	f014 f89f 	bl	8015048 <siprintf>
	SIM_Send_Command(command);
 8000f0a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f916 	bl	8001140 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000f14:	482f      	ldr	r0, [pc, #188]	@ (8000fd4 <SIM_Init+0x348>)
 8000f16:	f000 fd1f 	bl	8001958 <SIM_Wait_Response>

	sprintf(command, "AT+SMCONF=\"PASSWORD\",\"%s\"\r", sys.MQTT.password);
 8000f1a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f1e:	4a21      	ldr	r2, [pc, #132]	@ (8000fa4 <SIM_Init+0x318>)
 8000f20:	493e      	ldr	r1, [pc, #248]	@ (800101c <SIM_Init+0x390>)
 8000f22:	4618      	mov	r0, r3
 8000f24:	f014 f890 	bl	8015048 <siprintf>
	SIM_Send_Command(command);
 8000f28:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 f907 	bl	8001140 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000f32:	4828      	ldr	r0, [pc, #160]	@ (8000fd4 <SIM_Init+0x348>)
 8000f34:	f000 fd10 	bl	8001958 <SIM_Wait_Response>

	SIM_Send_Command("AT+SMCONF=\"QOS\",1\r");
 8000f38:	4839      	ldr	r0, [pc, #228]	@ (8001020 <SIM_Init+0x394>)
 8000f3a:	f000 f901 	bl	8001140 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000f3e:	4825      	ldr	r0, [pc, #148]	@ (8000fd4 <SIM_Init+0x348>)
 8000f40:	f000 fd0a 	bl	8001958 <SIM_Wait_Response>

	SIM_Send_Command("AT+SMCONF=\"RETAIN\",0\r");
 8000f44:	4837      	ldr	r0, [pc, #220]	@ (8001024 <SIM_Init+0x398>)
 8000f46:	f000 f8fb 	bl	8001140 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000f4a:	4822      	ldr	r0, [pc, #136]	@ (8000fd4 <SIM_Init+0x348>)
 8000f4c:	f000 fd04 	bl	8001958 <SIM_Wait_Response>

	sprintf(command, "AT+SMCONF=\"TOPIC\",\"%s\"\r", sys.MQTT.Data_Topic);
 8000f50:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f54:	4a17      	ldr	r2, [pc, #92]	@ (8000fb4 <SIM_Init+0x328>)
 8000f56:	4934      	ldr	r1, [pc, #208]	@ (8001028 <SIM_Init+0x39c>)
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f014 f875 	bl	8015048 <siprintf>
	SIM_Send_Command(command);
 8000f5e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f8ec 	bl	8001140 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000f68:	481a      	ldr	r0, [pc, #104]	@ (8000fd4 <SIM_Init+0x348>)
 8000f6a:	f000 fcf5 	bl	8001958 <SIM_Wait_Response>

	SIM_Send_Command("AT+SMCONN\r");                                                              //Connessione al broker MQTT
 8000f6e:	482f      	ldr	r0, [pc, #188]	@ (800102c <SIM_Init+0x3a0>)
 8000f70:	f000 f8e6 	bl	8001140 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000f74:	4817      	ldr	r0, [pc, #92]	@ (8000fd4 <SIM_Init+0x348>)
 8000f76:	f000 fcef 	bl	8001958 <SIM_Wait_Response>

	SIM_Send_Command("AT+SMSTATE?\r");                                                            //Verifica connessione al broker MQTT
 8000f7a:	482d      	ldr	r0, [pc, #180]	@ (8001030 <SIM_Init+0x3a4>)
 8000f7c:	f000 f8e0 	bl	8001140 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 f907 	bl	8001198 <SIM_Receive_Response>
	while(!SIM_Check_MQTT_State(response))
 8000f8a:	e05f      	b.n	800104c <SIM_Init+0x3c0>
 8000f8c:	080162e0 	.word	0x080162e0
 8000f90:	20001780 	.word	0x20001780
 8000f94:	20001990 	.word	0x20001990
 8000f98:	20001800 	.word	0x20001800
 8000f9c:	20001864 	.word	0x20001864
 8000fa0:	200018c8 	.word	0x200018c8
 8000fa4:	2000192c 	.word	0x2000192c
 8000fa8:	20001b84 	.word	0x20001b84
 8000fac:	20001be8 	.word	0x20001be8
 8000fb0:	20001cbc 	.word	0x20001cbc
 8000fb4:	200019f4 	.word	0x200019f4
 8000fb8:	20001cfc 	.word	0x20001cfc
 8000fbc:	20001a58 	.word	0x20001a58
 8000fc0:	20001d3c 	.word	0x20001d3c
 8000fc4:	20001abc 	.word	0x20001abc
 8000fc8:	20001d7c 	.word	0x20001d7c
 8000fcc:	20001b20 	.word	0x20001b20
 8000fd0:	080162e4 	.word	0x080162e4
 8000fd4:	080162e8 	.word	0x080162e8
 8000fd8:	080162ec 	.word	0x080162ec
 8000fdc:	20000624 	.word	0x20000624
 8000fe0:	080162fc 	.word	0x080162fc
 8000fe4:	08016308 	.word	0x08016308
 8000fe8:	08016314 	.word	0x08016314
 8000fec:	08016320 	.word	0x08016320
 8000ff0:	0801632c 	.word	0x0801632c
 8000ff4:	08016338 	.word	0x08016338
 8000ff8:	08016344 	.word	0x08016344
 8000ffc:	08016354 	.word	0x08016354
 8001000:	0801636c 	.word	0x0801636c
 8001004:	08016378 	.word	0x08016378
 8001008:	0801638c 	.word	0x0801638c
 800100c:	08016398 	.word	0x08016398
 8001010:	080163b4 	.word	0x080163b4
 8001014:	080163d0 	.word	0x080163d0
 8001018:	080163ec 	.word	0x080163ec
 800101c:	08016408 	.word	0x08016408
 8001020:	08016424 	.word	0x08016424
 8001024:	08016438 	.word	0x08016438
 8001028:	08016450 	.word	0x08016450
 800102c:	08016468 	.word	0x08016468
 8001030:	08016474 	.word	0x08016474
	{
		SIM_Send_Command("AT+SMSTATE?\r");
 8001034:	482d      	ldr	r0, [pc, #180]	@ (80010ec <SIM_Init+0x460>)
 8001036:	f000 f883 	bl	8001140 <SIM_Send_Command>
		SIM_Receive_Response(response);
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f8aa 	bl	8001198 <SIM_Receive_Response>
		HAL_Delay(1000);
 8001044:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001048:	f008 ffea 	bl	800a020 <HAL_Delay>
	while(!SIM_Check_MQTT_State(response))
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	4618      	mov	r0, r3
 8001052:	f000 f8e5 	bl	8001220 <SIM_Check_MQTT_State>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0eb      	beq.n	8001034 <SIM_Init+0x3a8>
	}

	sprintf(command, "AT+SMSUB=\"%s\",1\r", sys.MQTT.Command_Topic);                              //Iscrizione al topic per ricezione comandi dal server
 800105c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001060:	4a23      	ldr	r2, [pc, #140]	@ (80010f0 <SIM_Init+0x464>)
 8001062:	4924      	ldr	r1, [pc, #144]	@ (80010f4 <SIM_Init+0x468>)
 8001064:	4618      	mov	r0, r3
 8001066:	f013 ffef 	bl	8015048 <siprintf>
	SIM_Send_Command(command);
 800106a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f866 	bl	8001140 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8001074:	4820      	ldr	r0, [pc, #128]	@ (80010f8 <SIM_Init+0x46c>)
 8001076:	f000 fc6f 	bl	8001958 <SIM_Wait_Response>

	SIM_Send_Command("AT+CIPRXGET=1\r");                                                         //Impostazione ricezione manuale da server TCP
 800107a:	4820      	ldr	r0, [pc, #128]	@ (80010fc <SIM_Init+0x470>)
 800107c:	f000 f860 	bl	8001140 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8001080:	481d      	ldr	r0, [pc, #116]	@ (80010f8 <SIM_Init+0x46c>)
 8001082:	f000 fc69 	bl	8001958 <SIM_Wait_Response>

	sprintf(command, "AT+CIPSTART=\"TCP\",\"%s\",%s\r", sys.TCP.IP_address, sys.TCP.Port);        //Connessione TCP
 8001086:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 800108a:	4b1d      	ldr	r3, [pc, #116]	@ (8001100 <SIM_Init+0x474>)
 800108c:	4a1d      	ldr	r2, [pc, #116]	@ (8001104 <SIM_Init+0x478>)
 800108e:	491e      	ldr	r1, [pc, #120]	@ (8001108 <SIM_Init+0x47c>)
 8001090:	f013 ffda 	bl	8015048 <siprintf>
	SIM_Send_Command(command);
 8001094:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001098:	4618      	mov	r0, r3
 800109a:	f000 f851 	bl	8001140 <SIM_Send_Command>
	SIM_Wait_Response("CONNECT OK");
 800109e:	481b      	ldr	r0, [pc, #108]	@ (800110c <SIM_Init+0x480>)
 80010a0:	f000 fc5a 	bl	8001958 <SIM_Wait_Response>

	SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        //Verifica connessione al server TCP
 80010a4:	481a      	ldr	r0, [pc, #104]	@ (8001110 <SIM_Init+0x484>)
 80010a6:	f000 f84b 	bl	8001140 <SIM_Send_Command>
	SIM_Receive_Response(response);
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f872 	bl	8001198 <SIM_Receive_Response>
	while(!SIM_Check_TCP_State(response))
 80010b4:	e00b      	b.n	80010ce <SIM_Init+0x442>
	{
		SIM_Send_Command("AT+CIPSTATUS=0\r");
 80010b6:	4816      	ldr	r0, [pc, #88]	@ (8001110 <SIM_Init+0x484>)
 80010b8:	f000 f842 	bl	8001140 <SIM_Send_Command>
		SIM_Receive_Response(response);
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 f869 	bl	8001198 <SIM_Receive_Response>
		HAL_Delay(1000);
 80010c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010ca:	f008 ffa9 	bl	800a020 <HAL_Delay>
	while(!SIM_Check_TCP_State(response))
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f8ca 	bl	800126c <SIM_Check_TCP_State>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0eb      	beq.n	80010b6 <SIM_Init+0x42a>
	}

}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	08016474 	.word	0x08016474
 80010f0:	20001a58 	.word	0x20001a58
 80010f4:	08016484 	.word	0x08016484
 80010f8:	080162e8 	.word	0x080162e8
 80010fc:	08016498 	.word	0x08016498
 8001100:	20001be8 	.word	0x20001be8
 8001104:	20001b84 	.word	0x20001b84
 8001108:	080164a8 	.word	0x080164a8
 800110c:	080164c4 	.word	0x080164c4
 8001110:	080164d0 	.word	0x080164d0

08001114 <SIM_Power_On>:

/*------ACCENSIONE DEL MODULO LTE------*/
void SIM_Power_On(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800111e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001122:	f00c f91f 	bl	800d364 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001126:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800112a:	f008 ff79 	bl	800a020 <HAL_Delay>
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001134:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001138:	f00c f914 	bl	800d364 <HAL_GPIO_WritePin>
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}

08001140 <SIM_Send_Command>:
	HAL_GPIO_WritePin(LTE_RESET_GPIO_Port, LTE_RESET_Pin, GPIO_PIN_RESET);
}

/*------INVIO COMANDO AL MODULO LTE------*/
void SIM_Send_Command(char* command)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff f84b 	bl	80001e4 <strlen>
 800114e:	4603      	mov	r3, r0
 8001150:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(LTE_UART, (uint8_t*)command, len, 100);
 8001152:	89fa      	ldrh	r2, [r7, #14]
 8001154:	2364      	movs	r3, #100	@ 0x64
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	4803      	ldr	r0, [pc, #12]	@ (8001168 <SIM_Send_Command+0x28>)
 800115a:	f012 fc2d 	bl	80139b8 <HAL_UART_Transmit>
}
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000624 	.word	0x20000624

0800116c <SIM_Send_Command_DMA>:

/*------INVIO COMANDO AL MODULO LTE (DMA)------*/
void SIM_Send_Command_DMA(char* command)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff f835 	bl	80001e4 <strlen>
 800117a:	4603      	mov	r3, r0
 800117c:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit_DMA(LTE_UART, (uint8_t*)command, len);
 800117e:	89fb      	ldrh	r3, [r7, #14]
 8001180:	461a      	mov	r2, r3
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	4803      	ldr	r0, [pc, #12]	@ (8001194 <SIM_Send_Command_DMA+0x28>)
 8001186:	f012 fd69 	bl	8013c5c <HAL_UART_Transmit_DMA>
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000624 	.word	0x20000624

08001198 <SIM_Receive_Response>:

/*------RICEZIONE RISPOSTA DAL MODULO LTE------*/
uint16_t SIM_Receive_Response(char* response)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af02      	add	r7, sp, #8
 800119e:	6078      	str	r0, [r7, #4]
	uint16_t max_size = 256;
 80011a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011a4:	81fb      	strh	r3, [r7, #14]
	uint16_t RxLen = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	81bb      	strh	r3, [r7, #12]

	HAL_UARTEx_ReceiveToIdle(LTE_UART, (uint8_t *)response, max_size, &RxLen, 1000);
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	89fa      	ldrh	r2, [r7, #14]
 80011b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011b4:	9100      	str	r1, [sp, #0]
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	4803      	ldr	r0, [pc, #12]	@ (80011c8 <SIM_Receive_Response+0x30>)
 80011ba:	f013 fd64 	bl	8014c86 <HAL_UARTEx_ReceiveToIdle>
	return RxLen;
 80011be:	89bb      	ldrh	r3, [r7, #12]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000624 	.word	0x20000624

080011cc <SIM_Check_IP>:

/*------CONTROLLO INDIRIZZO IP------*/
int SIM_Check_IP(const char* response)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	char* cnact_pos = strstr(response, "+CNACT:");
 80011d4:	4910      	ldr	r1, [pc, #64]	@ (8001218 <SIM_Check_IP+0x4c>)
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f013 ffd0 	bl	801517c <strstr>
 80011dc:	6178      	str	r0, [r7, #20]
    if(cnact_pos != NULL) {
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d014      	beq.n	800120e <SIM_Check_IP+0x42>
        int context_id, status;
        if(sscanf(cnact_pos, "+CNACT: %d,%d", &context_id, &status) >= 2) {
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	f107 0210 	add.w	r2, r7, #16
 80011ec:	490b      	ldr	r1, [pc, #44]	@ (800121c <SIM_Check_IP+0x50>)
 80011ee:	6978      	ldr	r0, [r7, #20]
 80011f0:	f013 ff4c 	bl	801508c <siscanf>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	dd09      	ble.n	800120e <SIM_Check_IP+0x42>
            return (context_id == 1 && status == 1) ? 1 : 0;
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d104      	bne.n	800120a <SIM_Check_IP+0x3e>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d101      	bne.n	800120a <SIM_Check_IP+0x3e>
 8001206:	2301      	movs	r3, #1
 8001208:	e002      	b.n	8001210 <SIM_Check_IP+0x44>
 800120a:	2300      	movs	r3, #0
 800120c:	e000      	b.n	8001210 <SIM_Check_IP+0x44>
        }
    }
    return 0;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	080164e0 	.word	0x080164e0
 800121c:	080164e8 	.word	0x080164e8

08001220 <SIM_Check_MQTT_State>:

/*------CONTROLLO STATO CONNESSIONE MQTT------*/
int SIM_Check_MQTT_State(const char* response)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
    char* smstate_pos = strstr(response, "+SMSTATE:");
 8001228:	490e      	ldr	r1, [pc, #56]	@ (8001264 <SIM_Check_MQTT_State+0x44>)
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f013 ffa6 	bl	801517c <strstr>
 8001230:	60f8      	str	r0, [r7, #12]
    if(smstate_pos != NULL) {
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d010      	beq.n	800125a <SIM_Check_MQTT_State+0x3a>
        int mqtt_state;
        if(sscanf(smstate_pos, "+SMSTATE: %d", &mqtt_state) >= 1) {
 8001238:	f107 0308 	add.w	r3, r7, #8
 800123c:	461a      	mov	r2, r3
 800123e:	490a      	ldr	r1, [pc, #40]	@ (8001268 <SIM_Check_MQTT_State+0x48>)
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f013 ff23 	bl	801508c <siscanf>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	dd06      	ble.n	800125a <SIM_Check_MQTT_State+0x3a>
            return (mqtt_state == 1) ? 1 : 0;
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	2b01      	cmp	r3, #1
 8001250:	bf0c      	ite	eq
 8001252:	2301      	moveq	r3, #1
 8001254:	2300      	movne	r3, #0
 8001256:	b2db      	uxtb	r3, r3
 8001258:	e000      	b.n	800125c <SIM_Check_MQTT_State+0x3c>
        }
    }
    return 0;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	080164f8 	.word	0x080164f8
 8001268:	08016504 	.word	0x08016504

0800126c <SIM_Check_TCP_State>:

/*------CONTROLLO STATO CONNESSIONE TCP------*/
int SIM_Check_TCP_State(const char* response)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    char* cipstatus_pos = strstr(response, "+CIPSTATUS: 0");
 8001274:	490a      	ldr	r1, [pc, #40]	@ (80012a0 <SIM_Check_TCP_State+0x34>)
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f013 ff80 	bl	801517c <strstr>
 800127c:	60f8      	str	r0, [r7, #12]
    if(cipstatus_pos != NULL) {
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d008      	beq.n	8001296 <SIM_Check_TCP_State+0x2a>
        // Cerca "CONNECTED" nella stessa riga
        if(strstr(cipstatus_pos, "CONNECTED") != NULL) {
 8001284:	4907      	ldr	r1, [pc, #28]	@ (80012a4 <SIM_Check_TCP_State+0x38>)
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f013 ff78 	bl	801517c <strstr>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SIM_Check_TCP_State+0x2a>
            return 1;
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <SIM_Check_TCP_State+0x2c>
        }
    }
    return 0;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	08016514 	.word	0x08016514
 80012a4:	08016524 	.word	0x08016524

080012a8 <SIM_Parse_Command>:

/*------PARSING MESSAGGIO MQTT------*/
void SIM_Parse_Command(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
    char* buf = (char*)sim_rx_buffer;
 80012ae:	4b75      	ldr	r3, [pc, #468]	@ (8001484 <SIM_Parse_Command+0x1dc>)
 80012b0:	61fb      	str	r3, [r7, #28]

    if(strncmp(buf, "+SMSUB: ", 8) == 0)
 80012b2:	2208      	movs	r2, #8
 80012b4:	4974      	ldr	r1, [pc, #464]	@ (8001488 <SIM_Parse_Command+0x1e0>)
 80012b6:	69f8      	ldr	r0, [r7, #28]
 80012b8:	f013 ff3b 	bl	8015132 <strncmp>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f040 80dc 	bne.w	800147c <SIM_Parse_Command+0x1d4>
    {
        char* pos = buf + 8;
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	3308      	adds	r3, #8
 80012c8:	61bb      	str	r3, [r7, #24]

        char* first_quote = strchr(pos, '"');
 80012ca:	2122      	movs	r1, #34	@ 0x22
 80012cc:	69b8      	ldr	r0, [r7, #24]
 80012ce:	f013 ff23 	bl	8015118 <strchr>
 80012d2:	6178      	str	r0, [r7, #20]
        if(first_quote) {
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 80d0 	beq.w	800147c <SIM_Parse_Command+0x1d4>
            char* second_quote = strchr(first_quote + 1, '"');
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	3301      	adds	r3, #1
 80012e0:	2122      	movs	r1, #34	@ 0x22
 80012e2:	4618      	mov	r0, r3
 80012e4:	f013 ff18 	bl	8015118 <strchr>
 80012e8:	6138      	str	r0, [r7, #16]

            if(second_quote) {
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80c5 	beq.w	800147c <SIM_Parse_Command+0x1d4>
                char* third_quote = strchr(second_quote + 1, '"');
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	3301      	adds	r3, #1
 80012f6:	2122      	movs	r1, #34	@ 0x22
 80012f8:	4618      	mov	r0, r3
 80012fa:	f013 ff0d 	bl	8015118 <strchr>
 80012fe:	60f8      	str	r0, [r7, #12]

                if(third_quote) {
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 80ba 	beq.w	800147c <SIM_Parse_Command+0x1d4>
                    char* cmd_pos = third_quote + 1;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	3301      	adds	r3, #1
 800130c:	60bb      	str	r3, [r7, #8]
                    char* fourth_quote = strchr(cmd_pos, '"');
 800130e:	2122      	movs	r1, #34	@ 0x22
 8001310:	68b8      	ldr	r0, [r7, #8]
 8001312:	f013 ff01 	bl	8015118 <strchr>
 8001316:	6078      	str	r0, [r7, #4]

                    if(fourth_quote && (fourth_quote - cmd_pos) >= 3) {
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 80ae 	beq.w	800147c <SIM_Parse_Command+0x1d4>
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	f340 80a8 	ble.w	800147c <SIM_Parse_Command+0x1d4>

                        uint32_t cmd_val = (cmd_pos[2] << 16) | (cmd_pos[1] << 8) | cmd_pos[0];
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	3302      	adds	r3, #2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	041a      	lsls	r2, r3, #16
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	3301      	adds	r3, #1
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	4313      	orrs	r3, r2
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	7812      	ldrb	r2, [r2, #0]
 8001342:	4313      	orrs	r3, r2
 8001344:	603b      	str	r3, [r7, #0]

                        switch(cmd_val) {
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	4a50      	ldr	r2, [pc, #320]	@ (800148c <SIM_Parse_Command+0x1e4>)
 800134a:	4293      	cmp	r3, r2
 800134c:	f000 808e 	beq.w	800146c <SIM_Parse_Command+0x1c4>
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	4a4e      	ldr	r2, [pc, #312]	@ (800148c <SIM_Parse_Command+0x1e4>)
 8001354:	4293      	cmp	r3, r2
 8001356:	f200 808c 	bhi.w	8001472 <SIM_Parse_Command+0x1ca>
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	4a4c      	ldr	r2, [pc, #304]	@ (8001490 <SIM_Parse_Command+0x1e8>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d03b      	beq.n	80013da <SIM_Parse_Command+0x132>
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	4a4b      	ldr	r2, [pc, #300]	@ (8001494 <SIM_Parse_Command+0x1ec>)
 8001366:	4293      	cmp	r3, r2
 8001368:	f080 8083 	bcs.w	8001472 <SIM_Parse_Command+0x1ca>
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	4a4a      	ldr	r2, [pc, #296]	@ (8001498 <SIM_Parse_Command+0x1f0>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d061      	beq.n	8001438 <SIM_Parse_Command+0x190>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	4a49      	ldr	r2, [pc, #292]	@ (800149c <SIM_Parse_Command+0x1f4>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d27a      	bcs.n	8001472 <SIM_Parse_Command+0x1ca>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	4a48      	ldr	r2, [pc, #288]	@ (80014a0 <SIM_Parse_Command+0x1f8>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d066      	beq.n	8001452 <SIM_Parse_Command+0x1aa>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	4a46      	ldr	r2, [pc, #280]	@ (80014a0 <SIM_Parse_Command+0x1f8>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d872      	bhi.n	8001472 <SIM_Parse_Command+0x1ca>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	4a45      	ldr	r2, [pc, #276]	@ (80014a4 <SIM_Parse_Command+0x1fc>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d034      	beq.n	80013fe <SIM_Parse_Command+0x156>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	4a43      	ldr	r2, [pc, #268]	@ (80014a4 <SIM_Parse_Command+0x1fc>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d86a      	bhi.n	8001472 <SIM_Parse_Command+0x1ca>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	4a42      	ldr	r2, [pc, #264]	@ (80014a8 <SIM_Parse_Command+0x200>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d014      	beq.n	80013ce <SIM_Parse_Command+0x126>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	4a40      	ldr	r2, [pc, #256]	@ (80014a8 <SIM_Parse_Command+0x200>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d862      	bhi.n	8001472 <SIM_Parse_Command+0x1ca>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	4a3f      	ldr	r2, [pc, #252]	@ (80014ac <SIM_Parse_Command+0x204>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d018      	beq.n	80013e6 <SIM_Parse_Command+0x13e>
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	4a3d      	ldr	r2, [pc, #244]	@ (80014ac <SIM_Parse_Command+0x204>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d85a      	bhi.n	8001472 <SIM_Parse_Command+0x1ca>
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	4a3c      	ldr	r2, [pc, #240]	@ (80014b0 <SIM_Parse_Command+0x208>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d02f      	beq.n	8001424 <SIM_Parse_Command+0x17c>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	4a3b      	ldr	r2, [pc, #236]	@ (80014b4 <SIM_Parse_Command+0x20c>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d012      	beq.n	80013f2 <SIM_Parse_Command+0x14a>
								}
							case 0x545352: // RST
								HAL_NVIC_SystemReset();
								break;
							default: 
								break;
 80013cc:	e051      	b.n	8001472 <SIM_Parse_Command+0x1ca>
								flags.CMD.Idle = 1; 
 80013ce:	4a3a      	ldr	r2, [pc, #232]	@ (80014b8 <SIM_Parse_Command+0x210>)
 80013d0:	7893      	ldrb	r3, [r2, #2]
 80013d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013d6:	7093      	strb	r3, [r2, #2]
								break;    
 80013d8:	e050      	b.n	800147c <SIM_Parse_Command+0x1d4>
								flags.CMD.Start_Meas = 1; 
 80013da:	4a37      	ldr	r2, [pc, #220]	@ (80014b8 <SIM_Parse_Command+0x210>)
 80013dc:	7893      	ldrb	r3, [r2, #2]
 80013de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013e2:	7093      	strb	r3, [r2, #2]
								break;
 80013e4:	e04a      	b.n	800147c <SIM_Parse_Command+0x1d4>
								flags.CMD.Ping = 1; 
 80013e6:	4a34      	ldr	r2, [pc, #208]	@ (80014b8 <SIM_Parse_Command+0x210>)
 80013e8:	7893      	ldrb	r3, [r2, #2]
 80013ea:	f043 0308 	orr.w	r3, r3, #8
 80013ee:	7093      	strb	r3, [r2, #2]
								break;
 80013f0:	e044      	b.n	800147c <SIM_Parse_Command+0x1d4>
								flags.CMD.Data_Request = 1; 
 80013f2:	4a31      	ldr	r2, [pc, #196]	@ (80014b8 <SIM_Parse_Command+0x210>)
 80013f4:	7893      	ldrb	r3, [r2, #2]
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	7093      	strb	r3, [r2, #2]
								break;
 80013fc:	e03e      	b.n	800147c <SIM_Parse_Command+0x1d4>
								if(!flags.CMD.Measure_Request)
 80013fe:	4b2e      	ldr	r3, [pc, #184]	@ (80014b8 <SIM_Parse_Command+0x210>)
 8001400:	789b      	ldrb	r3, [r3, #2]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d134      	bne.n	8001476 <SIM_Parse_Command+0x1ce>
									Send_Measure_Addr = Saved_Bytes;
 800140c:	4b2b      	ldr	r3, [pc, #172]	@ (80014bc <SIM_Parse_Command+0x214>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a2b      	ldr	r2, [pc, #172]	@ (80014c0 <SIM_Parse_Command+0x218>)
 8001412:	6013      	str	r3, [r2, #0]
									flags.CMD.Measure_Request = 1; 
 8001414:	4a28      	ldr	r2, [pc, #160]	@ (80014b8 <SIM_Parse_Command+0x210>)
 8001416:	7893      	ldrb	r3, [r2, #2]
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	7093      	strb	r3, [r2, #2]
									Switch_Buffer();
 800141e:	f003 fd11 	bl	8004e44 <Switch_Buffer>
								break;
 8001422:	e028      	b.n	8001476 <SIM_Parse_Command+0x1ce>
								if(state == IDLE)
 8001424:	4b27      	ldr	r3, [pc, #156]	@ (80014c4 <SIM_Parse_Command+0x21c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d126      	bne.n	800147a <SIM_Parse_Command+0x1d2>
									flags.CMD.Start_OTA = 1;
 800142c:	4a22      	ldr	r2, [pc, #136]	@ (80014b8 <SIM_Parse_Command+0x210>)
 800142e:	7893      	ldrb	r3, [r2, #2]
 8001430:	f043 0304 	orr.w	r3, r3, #4
 8001434:	7093      	strb	r3, [r2, #2]
								break;
 8001436:	e020      	b.n	800147a <SIM_Parse_Command+0x1d2>
								if(state == IDLE)
 8001438:	4b22      	ldr	r3, [pc, #136]	@ (80014c4 <SIM_Parse_Command+0x21c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d108      	bne.n	8001452 <SIM_Parse_Command+0x1aa>
									flags.CMD.Set_Config = 1;
 8001440:	4a1d      	ldr	r2, [pc, #116]	@ (80014b8 <SIM_Parse_Command+0x210>)
 8001442:	7893      	ldrb	r3, [r2, #2]
 8001444:	f043 0310 	orr.w	r3, r3, #16
 8001448:	7093      	strb	r3, [r2, #2]
									SIM_Parse_Cfg(cmd_pos, fourth_quote);
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	68b8      	ldr	r0, [r7, #8]
 800144e:	f000 f83b 	bl	80014c8 <SIM_Parse_Cfg>
								if(state == IDLE)
 8001452:	4b1c      	ldr	r3, [pc, #112]	@ (80014c4 <SIM_Parse_Command+0x21c>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d108      	bne.n	800146c <SIM_Parse_Command+0x1c4>
									flags.CMD.Get_Config = 1;
 800145a:	4a17      	ldr	r2, [pc, #92]	@ (80014b8 <SIM_Parse_Command+0x210>)
 800145c:	7893      	ldrb	r3, [r2, #2]
 800145e:	f043 0320 	orr.w	r3, r3, #32
 8001462:	7093      	strb	r3, [r2, #2]
									SIM_Get_Cfg(cmd_pos, fourth_quote);
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	68b8      	ldr	r0, [r7, #8]
 8001468:	f000 f8ae 	bl	80015c8 <SIM_Get_Cfg>
								HAL_NVIC_SystemReset();
 800146c:	f00a fab1 	bl	800b9d2 <HAL_NVIC_SystemReset>
								break;
 8001470:	e004      	b.n	800147c <SIM_Parse_Command+0x1d4>
								break;
 8001472:	bf00      	nop
 8001474:	e002      	b.n	800147c <SIM_Parse_Command+0x1d4>
								break;
 8001476:	bf00      	nop
 8001478:	e000      	b.n	800147c <SIM_Parse_Command+0x1d4>
								break;
 800147a:	bf00      	nop
                    }
                }
            }
        }
    }
}
 800147c:	bf00      	nop
 800147e:	3720      	adds	r7, #32
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200054d4 	.word	0x200054d4
 8001488:	08016530 	.word	0x08016530
 800148c:	00545352 	.word	0x00545352
 8001490:	00545253 	.word	0x00545253
 8001494:	00545254 	.word	0x00545254
 8001498:	00544553 	.word	0x00544553
 800149c:	00544554 	.word	0x00544554
 80014a0:	00544547 	.word	0x00544547
 80014a4:	0052534d 	.word	0x0052534d
 80014a8:	004c4449 	.word	0x004c4449
 80014ac:	00474e50 	.word	0x00474e50
 80014b0:	0041544f 	.word	0x0041544f
 80014b4:	00444e53 	.word	0x00444e53
 80014b8:	20001c50 	.word	0x20001c50
 80014bc:	20004ea0 	.word	0x20004ea0
 80014c0:	20004ea8 	.word	0x20004ea8
 80014c4:	2000073c 	.word	0x2000073c

080014c8 <SIM_Parse_Cfg>:

/*-----PARSING CONFIGURAZIONE-----*/
void SIM_Parse_Cfg(char* cmd_start, char* cmd_end)
{   
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
    memset(cfg_var, 0, sizeof(cfg_var));
 80014d2:	2214      	movs	r2, #20
 80014d4:	2100      	movs	r1, #0
 80014d6:	4839      	ldr	r0, [pc, #228]	@ (80015bc <SIM_Parse_Cfg+0xf4>)
 80014d8:	f013 fe16 	bl	8015108 <memset>
    memset(new_cfg_val, 0, sizeof(new_cfg_val));
 80014dc:	220a      	movs	r2, #10
 80014de:	2100      	movs	r1, #0
 80014e0:	4837      	ldr	r0, [pc, #220]	@ (80015c0 <SIM_Parse_Cfg+0xf8>)
 80014e2:	f013 fe11 	bl	8015108 <memset>
    
    char* pos = cmd_start + 4; // Salta "SET,"
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3304      	adds	r3, #4
 80014ea:	61fb      	str	r3, [r7, #28]
    
    // Prima virgola (dopo SET)
    char* comma1 = strchr(pos, ',');
 80014ec:	212c      	movs	r1, #44	@ 0x2c
 80014ee:	69f8      	ldr	r0, [r7, #28]
 80014f0:	f013 fe12 	bl	8015118 <strchr>
 80014f4:	61b8      	str	r0, [r7, #24]
    if(!comma1 || comma1 >= cmd_end) return;
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d056      	beq.n	80015aa <SIM_Parse_Cfg+0xe2>
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	429a      	cmp	r2, r3
 8001502:	d252      	bcs.n	80015aa <SIM_Parse_Cfg+0xe2>
    
    // Seconda virgola
    char* comma2 = strchr(comma1 + 1, ',');
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	3301      	adds	r3, #1
 8001508:	212c      	movs	r1, #44	@ 0x2c
 800150a:	4618      	mov	r0, r3
 800150c:	f013 fe04 	bl	8015118 <strchr>
 8001510:	6178      	str	r0, [r7, #20]
    if(!comma2 || comma2 >= cmd_end) return;
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d04a      	beq.n	80015ae <SIM_Parse_Cfg+0xe6>
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	d246      	bcs.n	80015ae <SIM_Parse_Cfg+0xe6>
    
    // Terza virgola
    char* comma3 = strchr(comma2 + 1, ',');
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	3301      	adds	r3, #1
 8001524:	212c      	movs	r1, #44	@ 0x2c
 8001526:	4618      	mov	r0, r3
 8001528:	f013 fdf6 	bl	8015118 <strchr>
 800152c:	6138      	str	r0, [r7, #16]
    if(!comma3 || comma3 >= cmd_end) return;
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d03e      	beq.n	80015b2 <SIM_Parse_Cfg+0xea>
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	d23a      	bcs.n	80015b2 <SIM_Parse_Cfg+0xea>
    
    // Estrai cfg_var (tra SET, e prima virgola)
    int var_len = comma2 - comma1 - 1;
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	3b01      	subs	r3, #1
 8001544:	60fb      	str	r3, [r7, #12]
    if(var_len > 0 && var_len < sizeof(cfg_var)) 
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	dd0e      	ble.n	800156a <SIM_Parse_Cfg+0xa2>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2b13      	cmp	r3, #19
 8001550:	d80b      	bhi.n	800156a <SIM_Parse_Cfg+0xa2>
	{
        strncpy(cfg_var, comma1 + 1, var_len);
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	3301      	adds	r3, #1
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	4619      	mov	r1, r3
 800155a:	4818      	ldr	r0, [pc, #96]	@ (80015bc <SIM_Parse_Cfg+0xf4>)
 800155c:	f013 fdfb 	bl	8015156 <strncpy>
        cfg_var[var_len] = '\0';
 8001560:	4a16      	ldr	r2, [pc, #88]	@ (80015bc <SIM_Parse_Cfg+0xf4>)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4413      	add	r3, r2
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
    }
    
    // Estrai cfg_idx
    cfg_idx = atoi(comma2 + 1);
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	3301      	adds	r3, #1
 800156e:	4618      	mov	r0, r3
 8001570:	f013 fce0 	bl	8014f34 <atoi>
 8001574:	4603      	mov	r3, r0
 8001576:	4a13      	ldr	r2, [pc, #76]	@ (80015c4 <SIM_Parse_Cfg+0xfc>)
 8001578:	6013      	str	r3, [r2, #0]
    
    // Estrai new_cfg_val
    int val_len = cmd_end - comma3 - 1;
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	3b01      	subs	r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
    if(val_len > 0 && val_len < sizeof(new_cfg_val)) 
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	2b00      	cmp	r3, #0
 8001588:	dd14      	ble.n	80015b4 <SIM_Parse_Cfg+0xec>
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	2b09      	cmp	r3, #9
 800158e:	d811      	bhi.n	80015b4 <SIM_Parse_Cfg+0xec>
	{
        strncpy(new_cfg_val, comma3 + 1, val_len);
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	3301      	adds	r3, #1
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	4619      	mov	r1, r3
 8001598:	4809      	ldr	r0, [pc, #36]	@ (80015c0 <SIM_Parse_Cfg+0xf8>)
 800159a:	f013 fddc 	bl	8015156 <strncpy>
        new_cfg_val[val_len] = '\0';
 800159e:	4a08      	ldr	r2, [pc, #32]	@ (80015c0 <SIM_Parse_Cfg+0xf8>)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	4413      	add	r3, r2
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
 80015a8:	e004      	b.n	80015b4 <SIM_Parse_Cfg+0xec>
    if(!comma1 || comma1 >= cmd_end) return;
 80015aa:	bf00      	nop
 80015ac:	e002      	b.n	80015b4 <SIM_Parse_Cfg+0xec>
    if(!comma2 || comma2 >= cmd_end) return;
 80015ae:	bf00      	nop
 80015b0:	e000      	b.n	80015b4 <SIM_Parse_Cfg+0xec>
    if(!comma3 || comma3 >= cmd_end) return;
 80015b2:	bf00      	nop
    }
}
 80015b4:	3720      	adds	r7, #32
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20005a88 	.word	0x20005a88
 80015c0:	20005aa0 	.word	0x20005aa0
 80015c4:	20005a9c 	.word	0x20005a9c

080015c8 <SIM_Get_Cfg>:

/*-----RECUPERO VALORE DI CONFIGURAZIONE-----*/
void SIM_Get_Cfg(char* cmd_start, char* cmd_end)
{   
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
	memset(cfg_var, 0, sizeof(cfg_var));
 80015d2:	2214      	movs	r2, #20
 80015d4:	2100      	movs	r1, #0
 80015d6:	4825      	ldr	r0, [pc, #148]	@ (800166c <SIM_Get_Cfg+0xa4>)
 80015d8:	f013 fd96 	bl	8015108 <memset>
	memset(new_cfg_val, 0, sizeof(new_cfg_val));
 80015dc:	220a      	movs	r2, #10
 80015de:	2100      	movs	r1, #0
 80015e0:	4823      	ldr	r0, [pc, #140]	@ (8001670 <SIM_Get_Cfg+0xa8>)
 80015e2:	f013 fd91 	bl	8015108 <memset>
	
	char* pos = cmd_start + 4; // Salta "GET,"
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3304      	adds	r3, #4
 80015ea:	617b      	str	r3, [r7, #20]
	
	// Prima virgola (dopo GET)
	char* comma1 = strchr(pos, ',');
 80015ec:	212c      	movs	r1, #44	@ 0x2c
 80015ee:	6978      	ldr	r0, [r7, #20]
 80015f0:	f013 fd92 	bl	8015118 <strchr>
 80015f4:	6138      	str	r0, [r7, #16]
	if(!comma1 || comma1 >= cmd_end) return;
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d031      	beq.n	8001660 <SIM_Get_Cfg+0x98>
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d22d      	bcs.n	8001660 <SIM_Get_Cfg+0x98>
	
	// Seconda virgola
	char* comma2 = strchr(comma1 + 1, ',');
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	3301      	adds	r3, #1
 8001608:	212c      	movs	r1, #44	@ 0x2c
 800160a:	4618      	mov	r0, r3
 800160c:	f013 fd84 	bl	8015118 <strchr>
 8001610:	60f8      	str	r0, [r7, #12]
	if(!comma2 || comma2 >= cmd_end) return;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d025      	beq.n	8001664 <SIM_Get_Cfg+0x9c>
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	429a      	cmp	r2, r3
 800161e:	d221      	bcs.n	8001664 <SIM_Get_Cfg+0x9c>
	
	// Estrai cfg_var (tra GET, e prima virgola)
	int var_len = comma2 - comma1 - 1;
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	3b01      	subs	r3, #1
 8001628:	60bb      	str	r3, [r7, #8]
	if(var_len > 0 && var_len < sizeof(cfg_var)) 
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	2b00      	cmp	r3, #0
 800162e:	dd0e      	ble.n	800164e <SIM_Get_Cfg+0x86>
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2b13      	cmp	r3, #19
 8001634:	d80b      	bhi.n	800164e <SIM_Get_Cfg+0x86>
	{
		strncpy(cfg_var, comma1 + 1, var_len);
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	3301      	adds	r3, #1
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	4619      	mov	r1, r3
 800163e:	480b      	ldr	r0, [pc, #44]	@ (800166c <SIM_Get_Cfg+0xa4>)
 8001640:	f013 fd89 	bl	8015156 <strncpy>
		cfg_var[var_len] = '\0';
 8001644:	4a09      	ldr	r2, [pc, #36]	@ (800166c <SIM_Get_Cfg+0xa4>)
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	4413      	add	r3, r2
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
	}
	
	// Estrai cfg_idx
	cfg_idx = atoi(comma2 + 1);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	3301      	adds	r3, #1
 8001652:	4618      	mov	r0, r3
 8001654:	f013 fc6e 	bl	8014f34 <atoi>
 8001658:	4603      	mov	r3, r0
 800165a:	4a06      	ldr	r2, [pc, #24]	@ (8001674 <SIM_Get_Cfg+0xac>)
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	e002      	b.n	8001666 <SIM_Get_Cfg+0x9e>
	if(!comma1 || comma1 >= cmd_end) return;
 8001660:	bf00      	nop
 8001662:	e000      	b.n	8001666 <SIM_Get_Cfg+0x9e>
	if(!comma2 || comma2 >= cmd_end) return;
 8001664:	bf00      	nop
}
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20005a88 	.word	0x20005a88
 8001670:	20005aa0 	.word	0x20005aa0
 8001674:	20005a9c 	.word	0x20005a9c

08001678 <SIM_publish_MQTT_Message_DMA>:

/*------PUBBLICAZIONE MESSAGGIO MQTT IN MODALITA' DMA------*/
void SIM_publish_MQTT_Message_DMA(const char* topic, const char* message)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b0c4      	sub	sp, #272	@ 0x110
 800167c:	af00      	add	r7, sp, #0
 800167e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001682:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001686:	6018      	str	r0, [r3, #0]
 8001688:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800168c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001690:	6019      	str	r1, [r3, #0]
    char command[256];
    uint16_t len = (uint16_t)strlen(message);
 8001692:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001696:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	f7fe fda2 	bl	80001e4 <strlen>
 80016a0:	4603      	mov	r3, r0
 80016a2:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

    if(topic != NULL && strlen(topic) > 0)
 80016a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d014      	beq.n	80016de <SIM_publish_MQTT_Message_DMA+0x66>
 80016b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d00c      	beq.n	80016de <SIM_publish_MQTT_Message_DMA+0x66>
	{
        sprintf(command, "AT+SMPUB=\"%s\",%d,1,0\r", topic, len);
 80016c4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 80016c8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016cc:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80016d0:	f107 000c 	add.w	r0, r7, #12
 80016d4:	6812      	ldr	r2, [r2, #0]
 80016d6:	490b      	ldr	r1, [pc, #44]	@ (8001704 <SIM_publish_MQTT_Message_DMA+0x8c>)
 80016d8:	f013 fcb6 	bl	8015048 <siprintf>
 80016dc:	e007      	b.n	80016ee <SIM_publish_MQTT_Message_DMA+0x76>
    } 
	else 
	{
        sprintf(command, "AT+SMPUB=%d\r", len);
 80016de:	f8b7 210e 	ldrh.w	r2, [r7, #270]	@ 0x10e
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	4908      	ldr	r1, [pc, #32]	@ (8001708 <SIM_publish_MQTT_Message_DMA+0x90>)
 80016e8:	4618      	mov	r0, r3
 80016ea:	f013 fcad 	bl	8015048 <siprintf>
    }
    
    SIM_Send_Command_DMA(command);
 80016ee:	f107 030c 	add.w	r3, r7, #12
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fd3a 	bl	800116c <SIM_Send_Command_DMA>
}
 80016f8:	bf00      	nop
 80016fa:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	0801653c 	.word	0x0801653c
 8001708:	08016554 	.word	0x08016554

0800170c <SIM_publish_MQTT_Message>:

/*-----PUBBLICAZIONE MESSAGGIO MQTT-----*/
void SIM_publish_MQTT_Message(const char* topic, const char* message)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b0c4      	sub	sp, #272	@ 0x110
 8001710:	af00      	add	r7, sp, #0
 8001712:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001716:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800171a:	6018      	str	r0, [r3, #0]
 800171c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001720:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001724:	6019      	str	r1, [r3, #0]
	char command[256];
	uint16_t len = (uint16_t)strlen(message);
 8001726:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800172a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800172e:	6818      	ldr	r0, [r3, #0]
 8001730:	f7fe fd58 	bl	80001e4 <strlen>
 8001734:	4603      	mov	r3, r0
 8001736:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

	if(topic != NULL && strlen(topic) > 0)
 800173a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800173e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d014      	beq.n	8001772 <SIM_publish_MQTT_Message+0x66>
 8001748:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800174c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00c      	beq.n	8001772 <SIM_publish_MQTT_Message+0x66>
	{
		sprintf(command, "AT+SMPUB=\"%s\",%d,1,0\r", topic, len);
 8001758:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800175c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001760:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001764:	f107 000c 	add.w	r0, r7, #12
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	4917      	ldr	r1, [pc, #92]	@ (80017c8 <SIM_publish_MQTT_Message+0xbc>)
 800176c:	f013 fc6c 	bl	8015048 <siprintf>
 8001770:	e007      	b.n	8001782 <SIM_publish_MQTT_Message+0x76>
	} 
	else 
	{
		sprintf(command, "AT+SMPUB=%d\r", len);
 8001772:	f8b7 210e 	ldrh.w	r2, [r7, #270]	@ 0x10e
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	4914      	ldr	r1, [pc, #80]	@ (80017cc <SIM_publish_MQTT_Message+0xc0>)
 800177c:	4618      	mov	r0, r3
 800177e:	f013 fc63 	bl	8015048 <siprintf>
	}
	
	SIM_Send_Command(command);
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fcda 	bl	8001140 <SIM_Send_Command>
	SIM_Wait_Response(">");                       
 800178c:	4810      	ldr	r0, [pc, #64]	@ (80017d0 <SIM_publish_MQTT_Message+0xc4>)
 800178e:	f000 f8e3 	bl	8001958 <SIM_Wait_Response>
	HAL_UART_Transmit(LTE_UART, message, strlen(message), 1000);
 8001792:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001796:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	f7fe fd22 	bl	80001e4 <strlen>
 80017a0:	4603      	mov	r3, r0
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017a8:	f5a3 7188 	sub.w	r1, r3, #272	@ 0x110
 80017ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b0:	6809      	ldr	r1, [r1, #0]
 80017b2:	4808      	ldr	r0, [pc, #32]	@ (80017d4 <SIM_publish_MQTT_Message+0xc8>)
 80017b4:	f012 f900 	bl	80139b8 <HAL_UART_Transmit>
    SIM_Wait_Response("OK");
 80017b8:	4807      	ldr	r0, [pc, #28]	@ (80017d8 <SIM_publish_MQTT_Message+0xcc>)
 80017ba:	f000 f8cd 	bl	8001958 <SIM_Wait_Response>
}
 80017be:	bf00      	nop
 80017c0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	0801653c 	.word	0x0801653c
 80017cc:	08016554 	.word	0x08016554
 80017d0:	08016564 	.word	0x08016564
 80017d4:	20000624 	.word	0x20000624
 80017d8:	080162e8 	.word	0x080162e8

080017dc <SIM_Send_TCP_Chunk_DMA>:
    SIM_Wait_Response("SEND OK");                              // Attesa invio avvenuto
}

/*-----INVIO DATI AL SERVER TCP CON DMA-----*/
void SIM_Send_TCP_Chunk_DMA(uint8_t* data, uint16_t size)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	@ 0x40
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	807b      	strh	r3, [r7, #2]
    char cmd[50];

    sprintf(cmd, "AT+CIPSEND=%u\r", size);
 80017e8:	887a      	ldrh	r2, [r7, #2]
 80017ea:	f107 030c 	add.w	r3, r7, #12
 80017ee:	490d      	ldr	r1, [pc, #52]	@ (8001824 <SIM_Send_TCP_Chunk_DMA+0x48>)
 80017f0:	4618      	mov	r0, r3
 80017f2:	f013 fc29 	bl	8015048 <siprintf>
    SIM_Send_Command_DMA(cmd);
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fcb6 	bl	800116c <SIM_Send_Command_DMA>

    SIM_Wait_Response(">");                                    // Attesa prompt '>'
 8001800:	4809      	ldr	r0, [pc, #36]	@ (8001828 <SIM_Send_TCP_Chunk_DMA+0x4c>)
 8001802:	f000 f8a9 	bl	8001958 <SIM_Wait_Response>

    HAL_UART_Transmit(LTE_UART, data, size, 1000);             // Invia dati binari
 8001806:	887a      	ldrh	r2, [r7, #2]
 8001808:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4807      	ldr	r0, [pc, #28]	@ (800182c <SIM_Send_TCP_Chunk_DMA+0x50>)
 8001810:	f012 f8d2 	bl	80139b8 <HAL_UART_Transmit>
    
    SIM_Wait_Response("SEND OK");                              // Attesa invio avvenuto
 8001814:	4806      	ldr	r0, [pc, #24]	@ (8001830 <SIM_Send_TCP_Chunk_DMA+0x54>)
 8001816:	f000 f89f 	bl	8001958 <SIM_Wait_Response>
}
 800181a:	bf00      	nop
 800181c:	3740      	adds	r7, #64	@ 0x40
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	08016568 	.word	0x08016568
 8001828:	08016564 	.word	0x08016564
 800182c:	20000624 	.word	0x20000624
 8001830:	08016578 	.word	0x08016578

08001834 <SIM_Send_Infos>:

/*-----INVIO INFORMAZIONI AL SERVER MQTT-----*/
void SIM_Send_Infos(void)
{
 8001834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001836:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 800183a:	af0a      	add	r7, sp, #40	@ 0x28
	uint16_t len = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	f8a7 3296 	strh.w	r3, [r7, #662]	@ 0x296
	char command[128];
	char infos[512];
	uint16_t Vbatt = 0;
 8001842:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001846:	f2a3 2386 	subw	r3, r3, #646	@ 0x286
 800184a:	2200      	movs	r2, #0
 800184c:	801a      	strh	r2, [r3, #0]
	uint16_t new_temp = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	f8a7 3294 	strh.w	r3, [r7, #660]	@ 0x294

	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 8001854:	f107 0312 	add.w	r3, r7, #18
 8001858:	4619      	mov	r1, r3
 800185a:	203b      	movs	r0, #59	@ 0x3b
 800185c:	f000 f972 	bl	8001b44 <BC_MultiRead_Reg>
	INA3221_Read_Measure(&Supply);
 8001860:	4834      	ldr	r0, [pc, #208]	@ (8001934 <SIM_Send_Infos+0x100>)
 8001862:	f7fe ffed 	bl	8000840 <INA3221_Read_Measure>
	if((new_temp = Read_Temperature()) != 0)
 8001866:	f7fe ff91 	bl	800078c <Read_Temperature>
 800186a:	4603      	mov	r3, r0
 800186c:	f8a7 3294 	strh.w	r3, [r7, #660]	@ 0x294
 8001870:	f8b7 3294 	ldrh.w	r3, [r7, #660]	@ 0x294
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <SIM_Send_Infos+0x4c>
	{
		Temperature = new_temp;
 8001878:	4a2f      	ldr	r2, [pc, #188]	@ (8001938 <SIM_Send_Infos+0x104>)
 800187a:	f8b7 3294 	ldrh.w	r3, [r7, #660]	@ 0x294
 800187e:	8013      	strh	r3, [r2, #0]
	}

	sprintf(infos, "%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", config.device_id, Vbatt, config.samp_freq, config.buffering_secs, Supply.v1, Supply.v2, Supply.v3, Supply.i1, Supply.i2, Supply.i3, Temperature);
 8001880:	4b2e      	ldr	r3, [pc, #184]	@ (800193c <SIM_Send_Infos+0x108>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	469c      	mov	ip, r3
 8001886:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800188a:	f2a3 2386 	subw	r3, r3, #646	@ 0x286
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	469e      	mov	lr, r3
 8001892:	4b2a      	ldr	r3, [pc, #168]	@ (800193c <SIM_Send_Infos+0x108>)
 8001894:	885b      	ldrh	r3, [r3, #2]
 8001896:	461a      	mov	r2, r3
 8001898:	4b28      	ldr	r3, [pc, #160]	@ (800193c <SIM_Send_Infos+0x108>)
 800189a:	791b      	ldrb	r3, [r3, #4]
 800189c:	4619      	mov	r1, r3
 800189e:	4b25      	ldr	r3, [pc, #148]	@ (8001934 <SIM_Send_Infos+0x100>)
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	461c      	mov	r4, r3
 80018a4:	4b23      	ldr	r3, [pc, #140]	@ (8001934 <SIM_Send_Infos+0x100>)
 80018a6:	885b      	ldrh	r3, [r3, #2]
 80018a8:	461d      	mov	r5, r3
 80018aa:	4b22      	ldr	r3, [pc, #136]	@ (8001934 <SIM_Send_Infos+0x100>)
 80018ac:	889b      	ldrh	r3, [r3, #4]
 80018ae:	461e      	mov	r6, r3
 80018b0:	4b20      	ldr	r3, [pc, #128]	@ (8001934 <SIM_Send_Infos+0x100>)
 80018b2:	88db      	ldrh	r3, [r3, #6]
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001934 <SIM_Send_Infos+0x100>)
 80018b8:	891b      	ldrh	r3, [r3, #8]
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001934 <SIM_Send_Infos+0x100>)
 80018be:	895b      	ldrh	r3, [r3, #10]
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001938 <SIM_Send_Infos+0x104>)
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	f107 0014 	add.w	r0, r7, #20
 80018ca:	9308      	str	r3, [sp, #32]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	9307      	str	r3, [sp, #28]
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	9306      	str	r3, [sp, #24]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	9305      	str	r3, [sp, #20]
 80018d8:	9604      	str	r6, [sp, #16]
 80018da:	9503      	str	r5, [sp, #12]
 80018dc:	9402      	str	r4, [sp, #8]
 80018de:	9101      	str	r1, [sp, #4]
 80018e0:	9200      	str	r2, [sp, #0]
 80018e2:	4673      	mov	r3, lr
 80018e4:	4662      	mov	r2, ip
 80018e6:	4916      	ldr	r1, [pc, #88]	@ (8001940 <SIM_Send_Infos+0x10c>)
 80018e8:	f013 fbae 	bl	8015048 <siprintf>
	len = (uint16_t)strlen(infos);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fc77 	bl	80001e4 <strlen>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f8a7 3296 	strh.w	r3, [r7, #662]	@ 0x296

	sprintf(command, "AT+SMPUB=\"%s\",%d,1,0\r", sys.MQTT.Info_Topic, len);
 80018fc:	f8b7 3296 	ldrh.w	r3, [r7, #662]	@ 0x296
 8001900:	f507 7005 	add.w	r0, r7, #532	@ 0x214
 8001904:	4a0f      	ldr	r2, [pc, #60]	@ (8001944 <SIM_Send_Infos+0x110>)
 8001906:	4910      	ldr	r1, [pc, #64]	@ (8001948 <SIM_Send_Infos+0x114>)
 8001908:	f013 fb9e 	bl	8015048 <siprintf>
	SIM_Wait_Response(">"); 
 800190c:	480f      	ldr	r0, [pc, #60]	@ (800194c <SIM_Send_Infos+0x118>)
 800190e:	f000 f823 	bl	8001958 <SIM_Wait_Response>
	HAL_UART_Transmit(LTE_UART, (uint8_t*)infos, len, 100);
 8001912:	f8b7 2296 	ldrh.w	r2, [r7, #662]	@ 0x296
 8001916:	f107 0114 	add.w	r1, r7, #20
 800191a:	2364      	movs	r3, #100	@ 0x64
 800191c:	480c      	ldr	r0, [pc, #48]	@ (8001950 <SIM_Send_Infos+0x11c>)
 800191e:	f012 f84b 	bl	80139b8 <HAL_UART_Transmit>
	SIM_Wait_Response("OK");
 8001922:	480c      	ldr	r0, [pc, #48]	@ (8001954 <SIM_Send_Infos+0x120>)
 8001924:	f000 f818 	bl	8001958 <SIM_Wait_Response>
}
 8001928:	bf00      	nop
 800192a:	f507 7727 	add.w	r7, r7, #668	@ 0x29c
 800192e:	46bd      	mov	sp, r7
 8001930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001932:	bf00      	nop
 8001934:	20003e24 	.word	0x20003e24
 8001938:	20004700 	.word	0x20004700
 800193c:	20001c54 	.word	0x20001c54
 8001940:	08016580 	.word	0x08016580
 8001944:	20001b20 	.word	0x20001b20
 8001948:	0801653c 	.word	0x0801653c
 800194c:	08016564 	.word	0x08016564
 8001950:	20000624 	.word	0x20000624
 8001954:	080162e8 	.word	0x080162e8

08001958 <SIM_Wait_Response>:

/*-----ATTESA PROMPT-----*/
void SIM_Wait_Response(const char* expected)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b0c8      	sub	sp, #288	@ 0x120
 800195c:	af02      	add	r7, sp, #8
 800195e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001962:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001966:	6018      	str	r0, [r3, #0]
    char response[256];
    uint16_t timeout = 10000; // 10 secondi
 8001968:	f242 7310 	movw	r3, #10000	@ 0x2710
 800196c:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    uint32_t start_time = HAL_GetTick();
 8001970:	f008 fb4a 	bl	800a008 <HAL_GetTick>
 8001974:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    
    while((HAL_GetTick() - start_time) < timeout)
 8001978:	e028      	b.n	80019cc <SIM_Wait_Response+0x74>
    {
        uint16_t RxLen = 0;
 800197a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800197e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001982:	2200      	movs	r2, #0
 8001984:	801a      	strh	r2, [r3, #0]
        HAL_UARTEx_ReceiveToIdle(LTE_UART, (uint8_t*)response, sizeof(response), &RxLen, 500);
 8001986:	f107 030e 	add.w	r3, r7, #14
 800198a:	f107 0110 	add.w	r1, r7, #16
 800198e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001992:	9200      	str	r2, [sp, #0]
 8001994:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001998:	4813      	ldr	r0, [pc, #76]	@ (80019e8 <SIM_Wait_Response+0x90>)
 800199a:	f013 f974 	bl	8014c86 <HAL_UARTEx_ReceiveToIdle>
        
        if(RxLen > 0 && strstr(response, expected) != NULL)
 800199e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80019a2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00c      	beq.n	80019c6 <SIM_Wait_Response+0x6e>
 80019ac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80019b0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019b4:	f107 0210 	add.w	r2, r7, #16
 80019b8:	6819      	ldr	r1, [r3, #0]
 80019ba:	4610      	mov	r0, r2
 80019bc:	f013 fbde 	bl	801517c <strstr>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10c      	bne.n	80019e0 <SIM_Wait_Response+0x88>
        {
            return; 
        }
        
        HAL_Delay(10);
 80019c6:	200a      	movs	r0, #10
 80019c8:	f008 fb2a 	bl	800a020 <HAL_Delay>
    while((HAL_GetTick() - start_time) < timeout)
 80019cc:	f008 fb1c 	bl	800a008 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80019d6:	1ad2      	subs	r2, r2, r3
 80019d8:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 80019dc:	429a      	cmp	r2, r3
 80019de:	d3cc      	bcc.n	800197a <SIM_Wait_Response+0x22>
    }
}
 80019e0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000624 	.word	0x20000624

080019ec <BC_Init>:
#include "global_variables.h"


/*------INIZIALIZZAZIONE BATTERY CHARGER------*/
void BC_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	BC_Write_Reg(REG00_MINIMAL_SYSTEM_VOLTAGE, 0x1A);           //Tensione minima di uscita con 3 celle = 9V   <----- Senza Batteria il sistema fornisce questa tensione
 80019f0:	211a      	movs	r1, #26
 80019f2:	2000      	movs	r0, #0
 80019f4:	f000 f830 	bl	8001a58 <BC_Write_Reg>
	BC_MultiWrite_Reg(REG01_CHARGE_VOLTAGE_LIMIT, 0x04EC);      //Limite tensione di carica con 3 celle = 12.6V
 80019f8:	f240 41ec 	movw	r1, #1260	@ 0x4ec
 80019fc:	2001      	movs	r0, #1
 80019fe:	f000 f877 	bl	8001af0 <BC_MultiWrite_Reg>
	BC_MultiWrite_Reg(REG03_CHARGE_CURRENT_LIMIT, 0x0064);      //Limite corrente di carica con 3 celle = 1A
 8001a02:	2164      	movs	r1, #100	@ 0x64
 8001a04:	2003      	movs	r0, #3
 8001a06:	f000 f873 	bl	8001af0 <BC_MultiWrite_Reg>
	BC_Write_Reg(REG10_CHARGER_CONTROL_1, 0x85);                //Tensione di OVP in ingresso = 26V
 8001a0a:	2185      	movs	r1, #133	@ 0x85
 8001a0c:	2010      	movs	r0, #16
 8001a0e:	f000 f823 	bl	8001a58 <BC_Write_Reg>
	BC_Write_Reg(REG14_CHARGER_CONTROL_5, 0x96);                //Informazione sulla presenza dello Ship-FET
 8001a12:	2196      	movs	r1, #150	@ 0x96
 8001a14:	2014      	movs	r0, #20
 8001a16:	f000 f81f 	bl	8001a58 <BC_Write_Reg>
	BC_Write_Reg(REG15_MPPT_CONTROL, 0xAB);                     //MPPT attivato, tensione di MPP = 0.875*Vin, misura di 300ms ogni 2 minuti della Vin
 8001a1a:	21ab      	movs	r1, #171	@ 0xab
 8001a1c:	2015      	movs	r0, #21
 8001a1e:	f000 f81b 	bl	8001a58 <BC_Write_Reg>
	BC_Write_Reg(REG28_CHARGER_MASK_0, 0xE1);                   //Interrupt attivati: Poor source, Power good, VAC2 present, VAC1 present
 8001a22:	21e1      	movs	r1, #225	@ 0xe1
 8001a24:	2028      	movs	r0, #40	@ 0x28
 8001a26:	f000 f817 	bl	8001a58 <BC_Write_Reg>
	BC_Write_Reg(REG29_CHARGER_MASK_1, 0xD7);                   //Interrupt attivati: nessuno
 8001a2a:	21d7      	movs	r1, #215	@ 0xd7
 8001a2c:	2029      	movs	r0, #41	@ 0x29
 8001a2e:	f000 f813 	bl	8001a58 <BC_Write_Reg>
	BC_Write_Reg(REG2A_CHARGER_MASK_2, 0x7F);                   //Interrupt attivati: nessuno
 8001a32:	217f      	movs	r1, #127	@ 0x7f
 8001a34:	202a      	movs	r0, #42	@ 0x2a
 8001a36:	f000 f80f 	bl	8001a58 <BC_Write_Reg>
	BC_Write_Reg(REG2B_CHARGER_MASK_3, 0x1F);                   //Interrupt attivati: nessuno
 8001a3a:	211f      	movs	r1, #31
 8001a3c:	202b      	movs	r0, #43	@ 0x2b
 8001a3e:	f000 f80b 	bl	8001a58 <BC_Write_Reg>
	BC_Write_Reg(REG2C_FAULT_MASK_0, 0xFC);                     //Interrupt attivati: VAC2 over-voltage, VAC1 over-voltage
 8001a42:	21fc      	movs	r1, #252	@ 0xfc
 8001a44:	202c      	movs	r0, #44	@ 0x2c
 8001a46:	f000 f807 	bl	8001a58 <BC_Write_Reg>
	BC_Write_Reg(REG2D_FAULT_MASK_1, 0xF4);                     //Interrupt attivati: nessuno
 8001a4a:	21f4      	movs	r1, #244	@ 0xf4
 8001a4c:	202d      	movs	r0, #45	@ 0x2d
 8001a4e:	f000 f803 	bl	8001a58 <BC_Write_Reg>
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <BC_Write_Reg>:

/*------SCRITTURA REGISTRO 8 BIT------*/
int BC_Write_Reg(uint8_t reg, uint8_t wdata)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af02      	add	r7, sp, #8
 8001a5e:	4603      	mov	r3, r0
 8001a60:	460a      	mov	r2, r1
 8001a62:	71fb      	strb	r3, [r7, #7]
 8001a64:	4613      	mov	r3, r2
 8001a66:	71bb      	strb	r3, [r7, #6]
	int result = -1;
 8001a68:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6c:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[2];
	toSend[0] = reg;
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	723b      	strb	r3, [r7, #8]
	toSend[1] = wdata;
 8001a72:	79bb      	ldrb	r3, [r7, #6]
 8001a74:	727b      	strb	r3, [r7, #9]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 2, 100) == HAL_OK)
 8001a76:	f107 0208 	add.w	r2, r7, #8
 8001a7a:	2364      	movs	r3, #100	@ 0x64
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	2302      	movs	r3, #2
 8001a80:	21d6      	movs	r1, #214	@ 0xd6
 8001a82:	4806      	ldr	r0, [pc, #24]	@ (8001a9c <BC_Write_Reg+0x44>)
 8001a84:	f00b fd22 	bl	800d4cc <HAL_I2C_Master_Transmit>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <BC_Write_Reg+0x3a>
	{
		result = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200002e8 	.word	0x200002e8

08001aa0 <BC_Read_Reg>:

/*------LETTURA REGISTRO 8 BIT------*/
int BC_Read_Reg(uint8_t reg, uint8_t *rdata)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	6039      	str	r1, [r7, #0]
 8001aaa:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8001aac:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab0:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8001ab2:	1dfa      	adds	r2, r7, #7
 8001ab4:	2364      	movs	r3, #100	@ 0x64
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2301      	movs	r3, #1
 8001aba:	21d6      	movs	r1, #214	@ 0xd6
 8001abc:	480b      	ldr	r0, [pc, #44]	@ (8001aec <BC_Read_Reg+0x4c>)
 8001abe:	f00b fd05 	bl	800d4cc <HAL_I2C_Master_Transmit>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10c      	bne.n	8001ae2 <BC_Read_Reg+0x42>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, rdata, 1, 100) == HAL_OK)
 8001ac8:	2364      	movs	r3, #100	@ 0x64
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2301      	movs	r3, #1
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	21d6      	movs	r1, #214	@ 0xd6
 8001ad2:	4806      	ldr	r0, [pc, #24]	@ (8001aec <BC_Read_Reg+0x4c>)
 8001ad4:	f00b fe12 	bl	800d6fc <HAL_I2C_Master_Receive>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <BC_Read_Reg+0x42>
		{
			result = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
		}
	}

	return result;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	200002e8 	.word	0x200002e8

08001af0 <BC_MultiWrite_Reg>:

/*------SCRITTURA REGISTRO 16 BIT------*/
int BC_MultiWrite_Reg(uint8_t reg, uint16_t wdata)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af02      	add	r7, sp, #8
 8001af6:	4603      	mov	r3, r0
 8001af8:	460a      	mov	r2, r1
 8001afa:	71fb      	strb	r3, [r7, #7]
 8001afc:	4613      	mov	r3, r2
 8001afe:	80bb      	strh	r3, [r7, #4]
	int result = -1;
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
 8001b04:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[3];
	toSend[0] = reg;
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	723b      	strb	r3, [r7, #8]
	toSend[1] = (wdata & 0xFF00) >> 8;
 8001b0a:	88bb      	ldrh	r3, [r7, #4]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	727b      	strb	r3, [r7, #9]
	toSend[2] = wdata & 0x00FF;
 8001b14:	88bb      	ldrh	r3, [r7, #4]
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 3, 100) == HAL_OK)
 8001b1a:	f107 0208 	add.w	r2, r7, #8
 8001b1e:	2364      	movs	r3, #100	@ 0x64
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	2303      	movs	r3, #3
 8001b24:	21d6      	movs	r1, #214	@ 0xd6
 8001b26:	4806      	ldr	r0, [pc, #24]	@ (8001b40 <BC_MultiWrite_Reg+0x50>)
 8001b28:	f00b fcd0 	bl	800d4cc <HAL_I2C_Master_Transmit>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <BC_MultiWrite_Reg+0x46>
	{
		result = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8001b36:	68fb      	ldr	r3, [r7, #12]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	200002e8 	.word	0x200002e8

08001b44 <BC_MultiRead_Reg>:

/*------LETTURA REGISTRO 16 BIT------*/
int BC_MultiRead_Reg(uint8_t reg, uint16_t *rdata)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	6039      	str	r1, [r7, #0]
 8001b4e:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8001b50:	f04f 33ff 	mov.w	r3, #4294967295
 8001b54:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 8001b56:	2300      	movs	r3, #0
 8001b58:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8001b5a:	1dfa      	adds	r2, r7, #7
 8001b5c:	2364      	movs	r3, #100	@ 0x64
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	2301      	movs	r3, #1
 8001b62:	21d6      	movs	r1, #214	@ 0xd6
 8001b64:	4811      	ldr	r0, [pc, #68]	@ (8001bac <BC_MultiRead_Reg+0x68>)
 8001b66:	f00b fcb1 	bl	800d4cc <HAL_I2C_Master_Transmit>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d118      	bne.n	8001ba2 <BC_MultiRead_Reg+0x5e>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, data, 2, 100) == HAL_OK)
 8001b70:	f107 0208 	add.w	r2, r7, #8
 8001b74:	2364      	movs	r3, #100	@ 0x64
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	2302      	movs	r3, #2
 8001b7a:	21d6      	movs	r1, #214	@ 0xd6
 8001b7c:	480b      	ldr	r0, [pc, #44]	@ (8001bac <BC_MultiRead_Reg+0x68>)
 8001b7e:	f00b fdbd 	bl	800d6fc <HAL_I2C_Master_Receive>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10c      	bne.n	8001ba2 <BC_MultiRead_Reg+0x5e>
		{
			result = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 8001b8c:	7a3b      	ldrb	r3, [r7, #8]
 8001b8e:	b21b      	sxth	r3, r3
 8001b90:	021b      	lsls	r3, r3, #8
 8001b92:	b21a      	sxth	r2, r3
 8001b94:	7a7b      	ldrb	r3, [r7, #9]
 8001b96:	b21b      	sxth	r3, r3
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	200002e8 	.word	0x200002e8

08001bb0 <BC_Read_Flags>:

/*------LETTURA FLAGS DI INTERRUZIONE------*/
int BC_Read_Flags(uint64_t *flags)
{
 8001bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bb4:	b09b      	sub	sp, #108	@ 0x6c
 8001bb6:	af02      	add	r7, sp, #8
 8001bb8:	64f8      	str	r0, [r7, #76]	@ 0x4c
	int result = -1;
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint8_t data[6] = {0};
 8001bc0:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	8093      	strh	r3, [r2, #4]
	uint8_t reg = REG22_CHARGER_FLAG_0;
 8001bca:	2322      	movs	r3, #34	@ 0x22
 8001bcc:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8001bd0:	f107 0253 	add.w	r2, r7, #83	@ 0x53
 8001bd4:	2364      	movs	r3, #100	@ 0x64
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	21d6      	movs	r1, #214	@ 0xd6
 8001bdc:	484a      	ldr	r0, [pc, #296]	@ (8001d08 <BC_Read_Flags+0x158>)
 8001bde:	f00b fc75 	bl	800d4cc <HAL_I2C_Master_Transmit>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f040 8089 	bne.w	8001cfc <BC_Read_Flags+0x14c>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1 , (uint8_t *)data, 6, 100) == HAL_OK)
 8001bea:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8001bee:	2364      	movs	r3, #100	@ 0x64
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2306      	movs	r3, #6
 8001bf4:	21d6      	movs	r1, #214	@ 0xd6
 8001bf6:	4844      	ldr	r0, [pc, #272]	@ (8001d08 <BC_Read_Flags+0x158>)
 8001bf8:	f00b fd80 	bl	800d6fc <HAL_I2C_Master_Receive>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d17c      	bne.n	8001cfc <BC_Read_Flags+0x14c>
		{
			result = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
			*flags = ((uint64_t)data[0] << 40) | ((uint64_t)data[1] << 32) | ((uint64_t)data[2] << 24) | ((uint64_t)data[3] << 16) | ((uint64_t)data[4] << 8) | (uint64_t)data[5];
 8001c06:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c10:	647a      	str	r2, [r7, #68]	@ 0x44
 8001c12:	f04f 0000 	mov.w	r0, #0
 8001c16:	f04f 0100 	mov.w	r1, #0
 8001c1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c1c:	0219      	lsls	r1, r3, #8
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2200      	movs	r2, #0
 8001c28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c2a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8001c36:	0033      	movs	r3, r6
 8001c38:	2200      	movs	r2, #0
 8001c3a:	ea40 0802 	orr.w	r8, r0, r2
 8001c3e:	ea41 0903 	orr.w	r9, r1, r3
 8001c42:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2200      	movs	r2, #0
 8001c4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c4c:	637a      	str	r2, [r7, #52]	@ 0x34
 8001c4e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8001c52:	460b      	mov	r3, r1
 8001c54:	0a1d      	lsrs	r5, r3, #8
 8001c56:	460b      	mov	r3, r1
 8001c58:	061c      	lsls	r4, r3, #24
 8001c5a:	ea48 0304 	orr.w	r3, r8, r4
 8001c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c60:	ea49 0305 	orr.w	r3, r9, r5
 8001c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c66:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	623b      	str	r3, [r7, #32]
 8001c70:	627a      	str	r2, [r7, #36]	@ 0x24
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001c7e:	4629      	mov	r1, r5
 8001c80:	040b      	lsls	r3, r1, #16
 8001c82:	4621      	mov	r1, r4
 8001c84:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8001c88:	4621      	mov	r1, r4
 8001c8a:	040a      	lsls	r2, r1, #16
 8001c8c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001c90:	4621      	mov	r1, r4
 8001c92:	4311      	orrs	r1, r2
 8001c94:	61b9      	str	r1, [r7, #24]
 8001c96:	4629      	mov	r1, r5
 8001c98:	4319      	orrs	r1, r3
 8001c9a:	61f9      	str	r1, [r7, #28]
 8001c9c:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	617a      	str	r2, [r7, #20]
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	020b      	lsls	r3, r1, #8
 8001cb8:	4621      	mov	r1, r4
 8001cba:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8001cbe:	4621      	mov	r1, r4
 8001cc0:	020a      	lsls	r2, r1, #8
 8001cc2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001cc6:	4621      	mov	r1, r4
 8001cc8:	ea41 0a02 	orr.w	sl, r1, r2
 8001ccc:	4629      	mov	r1, r5
 8001cce:	ea41 0b03 	orr.w	fp, r1, r3
 8001cd2:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2200      	movs	r2, #0
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	60fa      	str	r2, [r7, #12]
 8001cde:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	ea4a 0303 	orr.w	r3, sl, r3
 8001ce8:	603b      	str	r3, [r7, #0]
 8001cea:	4613      	mov	r3, r2
 8001cec:	ea4b 0303 	orr.w	r3, fp, r3
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cf4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001cf8:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}

	return result;
 8001cfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3764      	adds	r7, #100	@ 0x64
 8001d02:	46bd      	mov	sp, r7
 8001d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d08:	200002e8 	.word	0x200002e8

08001d0c <BC_Manage_Interrupts>:

/*------GESTIONE DELLE INTERRUZIONI------*/
void BC_Manage_Interrupts(uint64_t flags)
{
 8001d0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d10:	b084      	sub	sp, #16
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t status = 0;
 8001d18:	2100      	movs	r1, #0
 8001d1a:	73f9      	strb	r1, [r7, #15]

	if((flags & POOR_SOURCE_MASK) != 0)   //INGRESSO NON BUONO
 8001d1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f401 5380 	and.w	r3, r1, #4096	@ 0x1000
 8001d26:	4313      	orrs	r3, r2
 8001d28:	d00c      	beq.n	8001d44 <BC_Manage_Interrupts+0x38>
	{
		// ...gestione evento...
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 8001d2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	0a0a      	lsrs	r2, r1, #8
 8001d38:	2300      	movs	r3, #0
 8001d3a:	b2d3      	uxtb	r3, r2
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	2022      	movs	r0, #34	@ 0x22
 8001d40:	f7ff fe8a 	bl	8001a58 <BC_Write_Reg>
	}

	if((flags & VAC2_CHANGE_MASK) != 0)  //PANNELLO INSERITO O RIMOSSO
 8001d44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d48:	f04f 0800 	mov.w	r8, #0
 8001d4c:	f403 6980 	and.w	r9, r3, #1024	@ 0x400
 8001d50:	ea58 0309 	orrs.w	r3, r8, r9
 8001d54:	d020      	beq.n	8001d98 <BC_Manage_Interrupts+0x8c>
	{
		BC_Read_Reg(REG1B_CHARGER_STATUS_0, &status);
 8001d56:	f107 030f 	add.w	r3, r7, #15
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	201b      	movs	r0, #27
 8001d5e:	f7ff fe9f 	bl	8001aa0 <BC_Read_Reg>
		if((status & VAC2_PRESENT_MASK) != 0)
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d004      	beq.n	8001d76 <BC_Manage_Interrupts+0x6a>
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x80);                //Usa Pannello
 8001d6c:	2180      	movs	r1, #128	@ 0x80
 8001d6e:	2013      	movs	r0, #19
 8001d70:	f7ff fe72 	bl	8001a58 <BC_Write_Reg>
 8001d74:	e003      	b.n	8001d7e <BC_Manage_Interrupts+0x72>
		}
		else
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x40);                //Usa Turbina
 8001d76:	2140      	movs	r1, #64	@ 0x40
 8001d78:	2013      	movs	r0, #19
 8001d7a:	f7ff fe6d 	bl	8001a58 <BC_Write_Reg>
		}
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 8001d7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	0a0a      	lsrs	r2, r1, #8
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	b2d3      	uxtb	r3, r2
 8001d90:	4619      	mov	r1, r3
 8001d92:	2022      	movs	r0, #34	@ 0x22
 8001d94:	f7ff fe60 	bl	8001a58 <BC_Write_Reg>
	}

	if((flags & VAC1_CHANGE_MASK) != 0)  //TURBINA INSERITA O RIMOSSA
 8001d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d9c:	2400      	movs	r4, #0
 8001d9e:	f403 7500 	and.w	r5, r3, #512	@ 0x200
 8001da2:	ea54 0305 	orrs.w	r3, r4, r5
 8001da6:	d00c      	beq.n	8001dc2 <BC_Manage_Interrupts+0xb6>
	{
		// ...gestione evento...
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 8001da8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	0a0a      	lsrs	r2, r1, #8
 8001db6:	2300      	movs	r3, #0
 8001db8:	b2d3      	uxtb	r3, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	2022      	movs	r0, #34	@ 0x22
 8001dbe:	f7ff fe4b 	bl	8001a58 <BC_Write_Reg>
	}

	flags = 0;
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	e9c7 2300 	strd	r2, r3, [r7]
}
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001dd8 <HAL_UARTEx_RxEventCallback>:
	}
}

/* ------CALLBACK UART RX IDLE------*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	807b      	strh	r3, [r7, #2]
	if(huart == LTE_UART)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a31      	ldr	r2, [pc, #196]	@ (8001eac <HAL_UARTEx_RxEventCallback+0xd4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d155      	bne.n	8001e98 <HAL_UARTEx_RxEventCallback+0xc0>
	{
		if(*(uint8_t*)sim_rx_buffer == '>')
 8001dec:	4b30      	ldr	r3, [pc, #192]	@ (8001eb0 <HAL_UARTEx_RxEventCallback+0xd8>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b3e      	cmp	r3, #62	@ 0x3e
 8001df2:	d120      	bne.n	8001e36 <HAL_UARTEx_RxEventCallback+0x5e>
		{
			if(flags.CMD.Measure_Request)
 8001df4:	4b2f      	ldr	r3, [pc, #188]	@ (8001eb4 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001df6:	789b      	ldrb	r3, [r3, #2]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <HAL_UARTEx_RxEventCallback+0x36>
			{
				flags.TCP_ReadytoSend = 1;
 8001e02:	4a2c      	ldr	r2, [pc, #176]	@ (8001eb4 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001e04:	7853      	ldrb	r3, [r2, #1]
 8001e06:	f043 0302 	orr.w	r3, r3, #2
 8001e0a:	7053      	strb	r3, [r2, #1]
 8001e0c:	e044      	b.n	8001e98 <HAL_UARTEx_RxEventCallback+0xc0>
			}
			else if(flags.CMD.Data_Request)
 8001e0e:	4b29      	ldr	r3, [pc, #164]	@ (8001eb4 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001e10:	789b      	ldrb	r3, [r3, #2]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d03d      	beq.n	8001e98 <HAL_UARTEx_RxEventCallback+0xc0>
			{
				flags.MQTT_ReadytoSend = 1;
 8001e1c:	4a25      	ldr	r2, [pc, #148]	@ (8001eb4 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001e1e:	7853      	ldrb	r3, [r2, #1]
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	7053      	strb	r3, [r2, #1]
				sys.SIM_Prompt_Status = 0;
 8001e26:	4b24      	ldr	r3, [pc, #144]	@ (8001eb8 <HAL_UARTEx_RxEventCallback+0xe0>)
 8001e28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
 8001e34:	e030      	b.n	8001e98 <HAL_UARTEx_RxEventCallback+0xc0>
			}
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 8001e36:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb0 <HAL_UARTEx_RxEventCallback+0xd8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a20      	ldr	r2, [pc, #128]	@ (8001ebc <HAL_UARTEx_RxEventCallback+0xe4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d10a      	bne.n	8001e56 <HAL_UARTEx_RxEventCallback+0x7e>
				*(uint32_t*)(sim_rx_buffer + 4) == 0x203A4255)       // "UB: "
 8001e40:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec0 <HAL_UARTEx_RxEventCallback+0xe8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
		else if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 8001e44:	4a1f      	ldr	r2, [pc, #124]	@ (8001ec4 <HAL_UARTEx_RxEventCallback+0xec>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d105      	bne.n	8001e56 <HAL_UARTEx_RxEventCallback+0x7e>
		{     
			flags.MQTT_Message_Rx = 1;
 8001e4a:	4a1a      	ldr	r2, [pc, #104]	@ (8001eb4 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001e4c:	7813      	ldrb	r3, [r2, #0]
 8001e4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e52:	7013      	strb	r3, [r2, #0]
 8001e54:	e020      	b.n	8001e98 <HAL_UARTEx_RxEventCallback+0xc0>
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x444E4553 &&           // "SEND"
 8001e56:	4b16      	ldr	r3, [pc, #88]	@ (8001eb0 <HAL_UARTEx_RxEventCallback+0xd8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec8 <HAL_UARTEx_RxEventCallback+0xf0>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d10a      	bne.n	8001e76 <HAL_UARTEx_RxEventCallback+0x9e>
       			*(uint32_t*)(sim_rx_buffer + 4) == 0x004B204F)       // " OK\0"
 8001e60:	4b17      	ldr	r3, [pc, #92]	@ (8001ec0 <HAL_UARTEx_RxEventCallback+0xe8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
		else if(*(uint32_t*)sim_rx_buffer == 0x444E4553 &&           // "SEND"
 8001e64:	4a19      	ldr	r2, [pc, #100]	@ (8001ecc <HAL_UARTEx_RxEventCallback+0xf4>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d105      	bne.n	8001e76 <HAL_UARTEx_RxEventCallback+0x9e>
		{
			flags.TCP_isSending = 0;
 8001e6a:	4a12      	ldr	r2, [pc, #72]	@ (8001eb4 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001e6c:	7853      	ldrb	r3, [r2, #1]
 8001e6e:	f023 0304 	bic.w	r3, r3, #4
 8001e72:	7053      	strb	r3, [r2, #1]
 8001e74:	e010      	b.n	8001e98 <HAL_UARTEx_RxEventCallback+0xc0>
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x4552524F)            //"ERRO"
 8001e76:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <HAL_UARTEx_RxEventCallback+0xd8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a15      	ldr	r2, [pc, #84]	@ (8001ed0 <HAL_UARTEx_RxEventCallback+0xf8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d10b      	bne.n	8001e98 <HAL_UARTEx_RxEventCallback+0xc0>
		{
			flags.MQTT_ReadytoSend = 0;
 8001e80:	4a0c      	ldr	r2, [pc, #48]	@ (8001eb4 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001e82:	7853      	ldrb	r3, [r2, #1]
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	7053      	strb	r3, [r2, #1]
			sys.SIM_Prompt_Status = 0;
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb8 <HAL_UARTEx_RxEventCallback+0xe0>)
 8001e8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e90:	461a      	mov	r2, r3
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
		}
	}
	
	HAL_UARTEx_ReceiveToIdle_DMA(LTE_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8001e98:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8001e9c:	4904      	ldr	r1, [pc, #16]	@ (8001eb0 <HAL_UARTEx_RxEventCallback+0xd8>)
 8001e9e:	4803      	ldr	r0, [pc, #12]	@ (8001eac <HAL_UARTEx_RxEventCallback+0xd4>)
 8001ea0:	f012 fff4 	bl	8014e8c <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000624 	.word	0x20000624
 8001eb0:	200054d4 	.word	0x200054d4
 8001eb4:	20001c50 	.word	0x20001c50
 8001eb8:	20000740 	.word	0x20000740
 8001ebc:	534d532b 	.word	0x534d532b
 8001ec0:	200054d8 	.word	0x200054d8
 8001ec4:	203a4255 	.word	0x203a4255
 8001ec8:	444e4553 	.word	0x444e4553
 8001ecc:	004b204f 	.word	0x004b204f
 8001ed0:	4552524f 	.word	0x4552524f

08001ed4 <HAL_UART_RxCpltCallback>:

/* ------CALLBACK UART RX COMPLETE------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	if (huart == LTE_UART)
	{

	}

}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_UART_TxCpltCallback>:

/* ------CALLBACK UART TX COMPLETE------*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	if (huart == LTE_UART)
	{

	}

}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_ADC_ConvHalfCpltCallback>:

/* ------CALLBACK HALF ADC------*/
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a09      	ldr	r2, [pc, #36]	@ (8001f2c <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d109      	bne.n	8001f20 <HAL_ADC_ConvHalfCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8001f0c:	4a08      	ldr	r2, [pc, #32]	@ (8001f30 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8001f0e:	7813      	ldrb	r3, [r2, #0]
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	7013      	strb	r3, [r2, #0]
		flags.ADC_Half_Buffer = 1;
 8001f16:	4a06      	ldr	r2, [pc, #24]	@ (8001f30 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8001f18:	7813      	ldrb	r3, [r2, #0]
 8001f1a:	f043 0302 	orr.w	r3, r3, #2
 8001f1e:	7013      	strb	r3, [r2, #0]
	}
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	20000218 	.word	0x20000218
 8001f30:	20001c50 	.word	0x20001c50

08001f34 <HAL_ADC_ConvCpltCallback>:

/*------CALLBACK FULL ADC------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a09      	ldr	r2, [pc, #36]	@ (8001f64 <HAL_ADC_ConvCpltCallback+0x30>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d109      	bne.n	8001f58 <HAL_ADC_ConvCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8001f44:	4a08      	ldr	r2, [pc, #32]	@ (8001f68 <HAL_ADC_ConvCpltCallback+0x34>)
 8001f46:	7813      	ldrb	r3, [r2, #0]
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	7013      	strb	r3, [r2, #0]
		flags.ADC_Full_Buffer = 1;
 8001f4e:	4a06      	ldr	r2, [pc, #24]	@ (8001f68 <HAL_ADC_ConvCpltCallback+0x34>)
 8001f50:	7813      	ldrb	r3, [r2, #0]
 8001f52:	f043 0304 	orr.w	r3, r3, #4
 8001f56:	7013      	strb	r3, [r2, #0]
	}
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	20000218 	.word	0x20000218
 8001f68:	20001c50 	.word	0x20001c50

08001f6c <HAL_RTC_AlarmAEventCallback>:

/*------CALLBACK RTC CAMBIO ORA------*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b092      	sub	sp, #72	@ 0x48
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef gTime;
	RTC_AlarmTypeDef sAlarm = {0};
 8001f74:	f107 0308 	add.w	r3, r7, #8
 8001f78:	222c      	movs	r2, #44	@ 0x2c
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f013 f8c3 	bl	8015108 <memset>

	HAL_RTC_GetTime(hrtc, &gTime, RTC_FORMAT_BIN);
 8001f82:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f86:	2200      	movs	r2, #0
 8001f88:	4619      	mov	r1, r3
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f00e f891 	bl	80100b2 <HAL_RTC_GetTime>

	sys.Low_th = Low_TH_Array[gTime.Hours];
 8001f90:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b17      	ldr	r3, [pc, #92]	@ (8001ff4 <HAL_RTC_AlarmAEventCallback+0x88>)
 8001f98:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001f9c:	4b16      	ldr	r3, [pc, #88]	@ (8001ff8 <HAL_RTC_AlarmAEventCallback+0x8c>)
 8001f9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fa2:	85da      	strh	r2, [r3, #46]	@ 0x2e
	sys.High_th = High_TH_Array[gTime.Hours];
 8001fa4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b14      	ldr	r3, [pc, #80]	@ (8001ffc <HAL_RTC_AlarmAEventCallback+0x90>)
 8001fac:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001fb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ff8 <HAL_RTC_AlarmAEventCallback+0x8c>)
 8001fb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fb6:	861a      	strh	r2, [r3, #48]	@ 0x30

	sAlarm.AlarmTime.Hours = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	723b      	strb	r3, [r7, #8]
    sAlarm.AlarmTime.Minutes = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	727b      	strb	r3, [r7, #9]
    sAlarm.AlarmTime.Seconds = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	72bb      	strb	r3, [r7, #10]
    sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS | RTC_ALARMMASK_SECONDS;
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <HAL_RTC_AlarmAEventCallback+0x94>)
 8001fc6:	61fb      	str	r3, [r7, #28]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62bb      	str	r3, [r7, #40]	@ 0x28
    sAlarm.AlarmDateWeekDay = 1;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    sAlarm.Alarm = RTC_ALARM_A;
 8001fd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fda:	633b      	str	r3, [r7, #48]	@ 0x30
    
    HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BIN);
 8001fdc:	f107 0308 	add.w	r3, r7, #8
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f00e f947 	bl	8010278 <HAL_RTC_SetAlarm_IT>
}
 8001fea:	bf00      	nop
 8001fec:	3748      	adds	r7, #72	@ 0x48
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20005494 	.word	0x20005494
 8001ff8:	20000740 	.word	0x20000740
 8001ffc:	20005464 	.word	0x20005464
 8002000:	80800080 	.word	0x80800080

08002004 <extflash_cs_set>:
uint32_t	exflashNumSectors = 0;
uint8_t		exflashInitDone = 0;


void extflash_cs_set()
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_RESET);
 8002008:	2200      	movs	r2, #0
 800200a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800200e:	4802      	ldr	r0, [pc, #8]	@ (8002018 <extflash_cs_set+0x14>)
 8002010:	f00b f9a8 	bl	800d364 <HAL_GPIO_WritePin>
}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}
 8002018:	48000400 	.word	0x48000400

0800201c <extflash_cs_reset>:

void extflash_cs_reset()
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 8002020:	2201      	movs	r2, #1
 8002022:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002026:	4802      	ldr	r0, [pc, #8]	@ (8002030 <extflash_cs_reset+0x14>)
 8002028:	f00b f99c 	bl	800d364 <HAL_GPIO_WritePin>
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	48000400 	.word	0x48000400

08002034 <extflash_wp_reset>:
{
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_RESET);
}

void extflash_wp_reset()
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_SET);
 8002038:	2201      	movs	r2, #1
 800203a:	2140      	movs	r1, #64	@ 0x40
 800203c:	4802      	ldr	r0, [pc, #8]	@ (8002048 <extflash_wp_reset+0x14>)
 800203e:	f00b f991 	bl	800d364 <HAL_GPIO_WritePin>
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	48000800 	.word	0x48000800

0800204c <extflash_hard_reset>:


void extflash_hard_reset()
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_RESET);
 8002050:	2200      	movs	r2, #0
 8002052:	2180      	movs	r1, #128	@ 0x80
 8002054:	4806      	ldr	r0, [pc, #24]	@ (8002070 <extflash_hard_reset+0x24>)
 8002056:	f00b f985 	bl	800d364 <HAL_GPIO_WritePin>

	HAL_Delay(50);
 800205a:	2032      	movs	r0, #50	@ 0x32
 800205c:	f007 ffe0 	bl	800a020 <HAL_Delay>

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_SET);
 8002060:	2201      	movs	r2, #1
 8002062:	2180      	movs	r1, #128	@ 0x80
 8002064:	4802      	ldr	r0, [pc, #8]	@ (8002070 <extflash_hard_reset+0x24>)
 8002066:	f00b f97d 	bl	800d364 <HAL_GPIO_WritePin>

	return;
 800206a:	bf00      	nop
}
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	48000800 	.word	0x48000800

08002074 <extflash_send_cmd>:


int32_t extflash_send_cmd(extflash_cmd_t command)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

	uint8_t addr_bytes[4] = {0};
 800207c:	2300      	movs	r3, #0
 800207e:	61bb      	str	r3, [r7, #24]
	uint8_t dummy_bytes[8] = {0};
 8002080:	f107 0310 	add.w	r3, r7, #16
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
	uint8_t dummy = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	77fb      	strb	r3, [r7, #31]
	uint8_t cmd_data = command->cmd;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	73fb      	strb	r3, [r7, #15]

	if(command->address_en != 0)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	785b      	ldrb	r3, [r3, #1]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00d      	beq.n	80020b8 <extflash_send_cmd+0x44>
	{
		addr_bytes[0] = (command->address >> 16) & 0xFF;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	0c1b      	lsrs	r3, r3, #16
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	763b      	strb	r3, [r7, #24]
		addr_bytes[1] = (command->address >> 8) & 0xFF;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	767b      	strb	r3, [r7, #25]
		addr_bytes[2] = (command->address) & 0xFF;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	76bb      	strb	r3, [r7, #26]
	}

	extflash_cs_set();
 80020b8:	f7ff ffa4 	bl	8002004 <extflash_cs_set>

	HAL_SPI_Transmit(EXTFLASH_SPI, &cmd_data, 1, FLASH_SPI_DEF_TIMEOUT);
 80020bc:	f107 010f 	add.w	r1, r7, #15
 80020c0:	2364      	movs	r3, #100	@ 0x64
 80020c2:	2201      	movs	r2, #1
 80020c4:	4823      	ldr	r0, [pc, #140]	@ (8002154 <extflash_send_cmd+0xe0>)
 80020c6:	f00e fbd6 	bl	8010876 <HAL_SPI_Transmit>

	if(command->address_en != 0)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	785b      	ldrb	r3, [r3, #1]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d006      	beq.n	80020e0 <extflash_send_cmd+0x6c>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, addr_bytes, 3, FLASH_SPI_DEF_TIMEOUT);
 80020d2:	f107 0118 	add.w	r1, r7, #24
 80020d6:	2364      	movs	r3, #100	@ 0x64
 80020d8:	2203      	movs	r2, #3
 80020da:	481e      	ldr	r0, [pc, #120]	@ (8002154 <extflash_send_cmd+0xe0>)
 80020dc:	f00e fbcb 	bl	8010876 <HAL_SPI_Transmit>
	}

	if(command->dummy_nb > 0)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	88db      	ldrh	r3, [r3, #6]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00e      	beq.n	8002106 <extflash_send_cmd+0x92>
	{
		dummy = command->dummy_nb > sizeof(dummy_bytes) ? sizeof(dummy_bytes) : command->dummy_nb;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	88db      	ldrh	r3, [r3, #6]
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	bf28      	it	cs
 80020f0:	2308      	movcs	r3, #8
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	77fb      	strb	r3, [r7, #31]
		HAL_SPI_Transmit(EXTFLASH_SPI, dummy_bytes, dummy, FLASH_SPI_DEF_TIMEOUT);
 80020f6:	7ffb      	ldrb	r3, [r7, #31]
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	f107 0110 	add.w	r1, r7, #16
 80020fe:	2364      	movs	r3, #100	@ 0x64
 8002100:	4814      	ldr	r0, [pc, #80]	@ (8002154 <extflash_send_cmd+0xe0>)
 8002102:	f00e fbb8 	bl	8010876 <HAL_SPI_Transmit>
	}

	if(command->tx_nb > 0 && command->tx_data != NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	885b      	ldrh	r3, [r3, #2]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00b      	beq.n	8002126 <extflash_send_cmd+0xb2>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d007      	beq.n	8002126 <extflash_send_cmd+0xb2>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, command->tx_data, command->tx_nb, FLASH_SPI_DEF_TIMEOUT);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68d9      	ldr	r1, [r3, #12]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	885a      	ldrh	r2, [r3, #2]
 800211e:	2364      	movs	r3, #100	@ 0x64
 8002120:	480c      	ldr	r0, [pc, #48]	@ (8002154 <extflash_send_cmd+0xe0>)
 8002122:	f00e fba8 	bl	8010876 <HAL_SPI_Transmit>
	}

	if(command->rx_nb > 0 && command->rx_data != NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	889b      	ldrh	r3, [r3, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00b      	beq.n	8002146 <extflash_send_cmd+0xd2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d007      	beq.n	8002146 <extflash_send_cmd+0xd2>
	{
		HAL_SPI_Receive(EXTFLASH_SPI, command->rx_data, command->rx_nb, FLASH_SPI_DEF_TIMEOUT);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6919      	ldr	r1, [r3, #16]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	889a      	ldrh	r2, [r3, #4]
 800213e:	2364      	movs	r3, #100	@ 0x64
 8002140:	4804      	ldr	r0, [pc, #16]	@ (8002154 <extflash_send_cmd+0xe0>)
 8002142:	f00e fd0e 	bl	8010b62 <HAL_SPI_Receive>
	}

	extflash_cs_reset();
 8002146:	f7ff ff69 	bl	800201c <extflash_cs_reset>

	return 0;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3720      	adds	r7, #32
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	200003a4 	.word	0x200003a4

08002158 <extflash_read_extended_read_reg>:

}


int extflash_read_extended_read_reg(uint8_t *ereg)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 8002160:	f107 030c 	add.w	r3, r7, #12
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDERP;
 8002170:	2381      	movs	r3, #129	@ 0x81
 8002172:	733b      	strb	r3, [r7, #12]
	command.address_en = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	737b      	strb	r3, [r7, #13]
	command.address = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
	command.rx_nb = 1;
 800217c:	2301      	movs	r3, #1
 800217e:	823b      	strh	r3, [r7, #16]
	command.rx_data = ereg;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	61fb      	str	r3, [r7, #28]

	return extflash_send_cmd(&command);
 8002184:	f107 030c 	add.w	r3, r7, #12
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff73 	bl	8002074 <extflash_send_cmd>
 800218e:	4603      	mov	r3, r0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3720      	adds	r7, #32
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <extflash_clear_extended_read_reg>:


int extflash_clear_extended_read_reg()
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
	extflash_cmd command = {0};
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_CLERP;
 80021ac:	2382      	movs	r3, #130	@ 0x82
 80021ae:	713b      	strb	r3, [r7, #4]

	return extflash_send_cmd(&command);
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff ff5e 	bl	8002074 <extflash_send_cmd>
 80021b8:	4603      	mov	r3, r0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <extflash_set_write_protection>:
	return extflash_send_cmd(&command);

}

int extflash_set_write_protection(uint8_t enable)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b088      	sub	sp, #32
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 80021cc:	f107 030c 	add.w	r3, r7, #12
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
	command.cmd = enable==0 ? EFLASH_CMD_WREN : EFLASH_CMD_WRDI;
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <extflash_set_write_protection+0x24>
 80021e2:	2306      	movs	r3, #6
 80021e4:	e000      	b.n	80021e8 <extflash_set_write_protection+0x26>
 80021e6:	2304      	movs	r3, #4
 80021e8:	733b      	strb	r3, [r7, #12]

	return extflash_send_cmd(&command);
 80021ea:	f107 030c 	add.w	r3, r7, #12
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff ff40 	bl	8002074 <extflash_send_cmd>
 80021f4:	4603      	mov	r3, r0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <extflash_read_sfdp>:

int extflash_read_sfdp(uint32_t regaddr, uint8_t *reg, uint8_t nregs)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b08a      	sub	sp, #40	@ 0x28
 8002202:	af00      	add	r7, sp, #0
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	4613      	mov	r3, r2
 800220a:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDSFDP;
 800221c:	235a      	movs	r3, #90	@ 0x5a
 800221e:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 8002220:	2301      	movs	r3, #1
 8002222:	757b      	strb	r3, [r7, #21]
	command.address = regaddr;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8002228:	2301      	movs	r3, #1
 800222a:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nregs;
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	b29b      	uxth	r3, r3
 8002230:	833b      	strh	r3, [r7, #24]
	command.rx_data = reg;
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff ff1a 	bl	8002074 <extflash_send_cmd>
 8002240:	4603      	mov	r3, r0

}
 8002242:	4618      	mov	r0, r3
 8002244:	3728      	adds	r7, #40	@ 0x28
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <extflash_raw_read>:

int extflash_raw_read(uint32_t address, uint8_t *pBuffer, uint16_t nbytes)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b08a      	sub	sp, #40	@ 0x28
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	4613      	mov	r3, r2
 8002256:	80fb      	strh	r3, [r7, #6]

	extflash_cmd command = {0};
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_FRD;
 8002268:	230b      	movs	r3, #11
 800226a:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 800226c:	2301      	movs	r3, #1
 800226e:	757b      	strb	r3, [r7, #21]
	command.address = address;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8002274:	2301      	movs	r3, #1
 8002276:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nbytes;
 8002278:	88fb      	ldrh	r3, [r7, #6]
 800227a:	833b      	strh	r3, [r7, #24]
	command.rx_data = pBuffer;
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fef5 	bl	8002074 <extflash_send_cmd>
 800228a:	4603      	mov	r3, r0

}
 800228c:	4618      	mov	r0, r3
 800228e:	3728      	adds	r7, #40	@ 0x28
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <extflash_raw_erase>:

int extflash_raw_erase(uint32_t address)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_SER;
 80022ac:	23d7      	movs	r3, #215	@ 0xd7
 80022ae:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 80022b0:	2301      	movs	r3, #1
 80022b2:	737b      	strb	r3, [r7, #13]
	command.address = address;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	617b      	str	r3, [r7, #20]

	return extflash_send_cmd(&command);
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fed9 	bl	8002074 <extflash_send_cmd>
 80022c2:	4603      	mov	r3, r0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3720      	adds	r7, #32
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <extflash_raw_page_write>:

int extflash_raw_page_write(uint32_t address, const uint8_t *pBuffer)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]

	extflash_cmd command = {0};
 80022d6:	f107 030c 	add.w	r3, r7, #12
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]
 80022e0:	609a      	str	r2, [r3, #8]
 80022e2:	60da      	str	r2, [r3, #12]
 80022e4:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_PP;
 80022e6:	2302      	movs	r3, #2
 80022e8:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 80022ea:	2301      	movs	r3, #1
 80022ec:	737b      	strb	r3, [r7, #13]
	command.address = address;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	617b      	str	r3, [r7, #20]
	command.tx_nb = EFLASH_DEF_PAGE_SIZE;
 80022f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022f6:	81fb      	strh	r3, [r7, #14]
	command.tx_data = pBuffer;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	61bb      	str	r3, [r7, #24]

	return extflash_send_cmd(&command);
 80022fc:	f107 030c 	add.w	r3, r7, #12
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff feb7 	bl	8002074 <extflash_send_cmd>
 8002306:	4603      	mov	r3, r0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3720      	adds	r7, #32
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <extflash_sector_read>:


int extflash_sector_read(uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	@ 0x28
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
	int result = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	61fb      	str	r3, [r7, #28]
	uint8_t ereg = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	75fb      	strb	r3, [r7, #23]
	uint32_t tmo = HAL_GetTick();
 8002324:	f007 fe70 	bl	800a008 <HAL_GetTick>
 8002328:	61b8      	str	r0, [r7, #24]
	uint8_t *wPtr = pBuffer;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	031b      	lsls	r3, r3, #12
 8002332:	623b      	str	r3, [r7, #32]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002334:	f107 0317 	add.w	r3, r7, #23
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff0d 	bl	8002158 <extflash_read_extended_read_reg>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	da10      	bge.n	8002366 <extflash_sector_read+0x56>
 8002344:	f04f 33ff 	mov.w	r3, #4294967295
 8002348:	e037      	b.n	80023ba <extflash_sector_read+0xaa>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 800234a:	f107 0317 	add.w	r3, r7, #23
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff ff02 	bl	8002158 <extflash_read_extended_read_reg>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	da02      	bge.n	8002360 <extflash_sector_read+0x50>
 800235a:	f04f 33ff 	mov.w	r3, #4294967295
 800235e:	e02c      	b.n	80023ba <extflash_sector_read+0xaa>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8002360:	2001      	movs	r0, #1
 8002362:	f007 fe5d 	bl	800a020 <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
 8002366:	7dfb      	ldrb	r3, [r7, #23]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b00      	cmp	r3, #0
 800236e:	d020      	beq.n	80023b2 <extflash_sector_read+0xa2>
 8002370:	f007 fe4a 	bl	800a008 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800237e:	d3e4      	bcc.n	800234a <extflash_sector_read+0x3a>
	}

	while(nsectors > 0)
 8002380:	e017      	b.n	80023b2 <extflash_sector_read+0xa2>
	{
		result = extflash_raw_read(address, wPtr, EFLASH_DEF_SECTOR_SIZE);
 8002382:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002386:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002388:	6a38      	ldr	r0, [r7, #32]
 800238a:	f7ff ff5e 	bl	800224a <extflash_raw_read>
 800238e:	61f8      	str	r0, [r7, #28]
		if(result < 0)return -1;
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	2b00      	cmp	r3, #0
 8002394:	da02      	bge.n	800239c <extflash_sector_read+0x8c>
 8002396:	f04f 33ff 	mov.w	r3, #4294967295
 800239a:	e00e      	b.n	80023ba <extflash_sector_read+0xaa>

		address += EFLASH_DEF_SECTOR_SIZE;
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023a2:	623b      	str	r3, [r7, #32]
		wPtr += EFLASH_DEF_SECTOR_SIZE;
 80023a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023aa:	627b      	str	r3, [r7, #36]	@ 0x24
		nsectors--;
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e4      	bne.n	8002382 <extflash_sector_read+0x72>
	}

	return 0;
 80023b8:	2300      	movs	r3, #0

}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3728      	adds	r7, #40	@ 0x28
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <extflash_wait_for_wop>:

int extflash_wait_for_wop(uint32_t timeout)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
	uint8_t ereg = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	72fb      	strb	r3, [r7, #11]
	uint32_t tmo = HAL_GetTick();
 80023ce:	f007 fe1b 	bl	800a008 <HAL_GetTick>
 80023d2:	60f8      	str	r0, [r7, #12]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 80023d4:	f107 030b 	add.w	r3, r7, #11
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff febd 	bl	8002158 <extflash_read_extended_read_reg>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	da10      	bge.n	8002406 <extflash_wait_for_wop+0x44>
 80023e4:	f04f 33ff 	mov.w	r3, #4294967295
 80023e8:	e023      	b.n	8002432 <extflash_wait_for_wop+0x70>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 80023ea:	f107 030b 	add.w	r3, r7, #11
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff feb2 	bl	8002158 <extflash_read_extended_read_reg>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	da02      	bge.n	8002400 <extflash_wait_for_wop+0x3e>
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
 80023fe:	e018      	b.n	8002432 <extflash_wait_for_wop+0x70>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8002400:	2001      	movs	r0, #1
 8002402:	f007 fe0d 	bl	800a020 <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
 8002406:	7afb      	ldrb	r3, [r7, #11]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d007      	beq.n	8002420 <extflash_wait_for_wop+0x5e>
 8002410:	f007 fdfa 	bl	800a008 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	429a      	cmp	r2, r3
 800241e:	d8e4      	bhi.n	80023ea <extflash_wait_for_wop+0x28>
	}

	if(ereg & (ESTATUS_PROT_ERR | ESTATUS_P_ERR | ESTATUS_E_ERR))
 8002420:	7afb      	ldrb	r3, [r7, #11]
 8002422:	f003 030e 	and.w	r3, r3, #14
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <extflash_wait_for_wop+0x6e>
	{
		return -2; //Erase o write error
 800242a:	f06f 0301 	mvn.w	r3, #1
 800242e:	e000      	b.n	8002432 <extflash_wait_for_wop+0x70>
	}

	return 0;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <extflash_sector_write>:

int extflash_sector_write(uint32_t sector, uint32_t nsectors, const uint8_t *pBuffer)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b088      	sub	sp, #32
 800243e:	af00      	add	r7, sp, #0
 8002440:	60f8      	str	r0, [r7, #12]
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
	int result = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
	const uint8_t *wPtr = pBuffer;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	031b      	lsls	r3, r3, #12
 8002452:	61bb      	str	r3, [r7, #24]

	extflash_clear_extended_read_reg();
 8002454:	f7ff fea0 	bl	8002198 <extflash_clear_extended_read_reg>

	while(nsectors > 0)
 8002458:	e04e      	b.n	80024f8 <extflash_sector_write+0xbe>
	{
		//Controllo operazioni in corso
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 800245a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800245e:	f7ff ffb0 	bl	80023c2 <extflash_wait_for_wop>
 8002462:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	db4a      	blt.n	8002500 <extflash_sector_write+0xc6>

		//Erase del settore
		result = extflash_set_write_protection(0);
 800246a:	2000      	movs	r0, #0
 800246c:	f7ff fea9 	bl	80021c2 <extflash_set_write_protection>
 8002470:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	2b00      	cmp	r3, #0
 8002476:	db45      	blt.n	8002504 <extflash_sector_write+0xca>
		result = extflash_raw_erase(address);
 8002478:	69b8      	ldr	r0, [r7, #24]
 800247a:	f7ff ff0b 	bl	8002294 <extflash_raw_erase>
 800247e:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	2b00      	cmp	r3, #0
 8002484:	db40      	blt.n	8002508 <extflash_sector_write+0xce>

		//Attesa ERASE
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8002486:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800248a:	f7ff ff9a 	bl	80023c2 <extflash_wait_for_wop>
 800248e:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	2b00      	cmp	r3, #0
 8002494:	db3a      	blt.n	800250c <extflash_sector_write+0xd2>

		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	e021      	b.n	80024e0 <extflash_sector_write+0xa6>
		{
			result = extflash_set_write_protection(0);
 800249c:	2000      	movs	r0, #0
 800249e:	f7ff fe90 	bl	80021c2 <extflash_set_write_protection>
 80024a2:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	db1e      	blt.n	80024e8 <extflash_sector_write+0xae>
			result = extflash_raw_page_write(address, wPtr);
 80024aa:	69f9      	ldr	r1, [r7, #28]
 80024ac:	69b8      	ldr	r0, [r7, #24]
 80024ae:	f7ff ff0d 	bl	80022cc <extflash_raw_page_write>
 80024b2:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	db18      	blt.n	80024ec <extflash_sector_write+0xb2>

			address += EFLASH_DEF_PAGE_SIZE;
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80024c0:	61bb      	str	r3, [r7, #24]
			wPtr += EFLASH_DEF_PAGE_SIZE;
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80024c8:	61fb      	str	r3, [r7, #28]
			//Attesa write
			result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 80024ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024ce:	f7ff ff78 	bl	80023c2 <extflash_wait_for_wop>
 80024d2:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	db0a      	blt.n	80024f0 <extflash_sector_write+0xb6>
		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	3301      	adds	r3, #1
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2b0f      	cmp	r3, #15
 80024e4:	ddda      	ble.n	800249c <extflash_sector_write+0x62>
 80024e6:	e004      	b.n	80024f2 <extflash_sector_write+0xb8>
			if(result < 0)break;
 80024e8:	bf00      	nop
 80024ea:	e002      	b.n	80024f2 <extflash_sector_write+0xb8>
			if(result < 0)break;
 80024ec:	bf00      	nop
 80024ee:	e000      	b.n	80024f2 <extflash_sector_write+0xb8>
			if(result < 0)break;
 80024f0:	bf00      	nop
		}

		nsectors--;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	3b01      	subs	r3, #1
 80024f6:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1ad      	bne.n	800245a <extflash_sector_write+0x20>
 80024fe:	e006      	b.n	800250e <extflash_sector_write+0xd4>
		if(result < 0)break;
 8002500:	bf00      	nop
 8002502:	e004      	b.n	800250e <extflash_sector_write+0xd4>
		if(result < 0)break;
 8002504:	bf00      	nop
 8002506:	e002      	b.n	800250e <extflash_sector_write+0xd4>
		if(result < 0)break;
 8002508:	bf00      	nop
 800250a:	e000      	b.n	800250e <extflash_sector_write+0xd4>
		if(result < 0)break;
 800250c:	bf00      	nop
	}

	extflash_set_write_protection(1);
 800250e:	2001      	movs	r0, #1
 8002510:	f7ff fe57 	bl	80021c2 <extflash_set_write_protection>

	return 0;
 8002514:	2300      	movs	r3, #0

}
 8002516:	4618      	mov	r0, r3
 8002518:	3720      	adds	r7, #32
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <extflash_get_sector_size>:


unsigned int extflash_get_sector_size()
{
 800251e:	b480      	push	{r7}
 8002520:	af00      	add	r7, sp, #0
	return EFLASH_DEF_SECTOR_SIZE;
 8002522:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 8002526:	4618      	mov	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <extflash_get_sector_count>:

unsigned int extflash_get_sector_count()
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
	return exflashNumSectors;
 8002534:	4b03      	ldr	r3, [pc, #12]	@ (8002544 <extflash_get_sector_count+0x14>)
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	20000210 	.word	0x20000210

08002548 <extflash_is_initialized>:
{
	return exflashSize;
}

int extflash_is_initialized()
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
	return exflashInitDone;
 800254c:	4b03      	ldr	r3, [pc, #12]	@ (800255c <extflash_is_initialized+0x14>)
 800254e:	781b      	ldrb	r3, [r3, #0]
}
 8002550:	4618      	mov	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20000214 	.word	0x20000214

08002560 <extflash_init>:

int extflash_init()
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af00      	add	r7, sp, #0
	uint8_t manufacturer_id[2] = {0};
 8002566:	2300      	movs	r3, #0
 8002568:	83bb      	strh	r3, [r7, #28]
	extflash_cmd command = {0};
 800256a:	f107 0308 	add.w	r3, r7, #8
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	60da      	str	r2, [r3, #12]
 8002578:	611a      	str	r2, [r3, #16]
	uint8_t density[4] = {0};
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]

	exflashInitDone = 0;
 800257e:	4b26      	ldr	r3, [pc, #152]	@ (8002618 <extflash_init+0xb8>)
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
	exflashNumSectors = 0;
 8002584:	4b25      	ldr	r3, [pc, #148]	@ (800261c <extflash_init+0xbc>)
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]

	extflash_hard_reset();
 800258a:	f7ff fd5f 	bl	800204c <extflash_hard_reset>
	extflash_cs_reset();
 800258e:	f7ff fd45 	bl	800201c <extflash_cs_reset>
	extflash_wp_reset();
 8002592:	f7ff fd4f 	bl	8002034 <extflash_wp_reset>

	command.cmd = EFLASH_CMD_RDMDID;
 8002596:	2390      	movs	r3, #144	@ 0x90
 8002598:	723b      	strb	r3, [r7, #8]
	command.address_en = 1;
 800259a:	2301      	movs	r3, #1
 800259c:	727b      	strb	r3, [r7, #9]
	command.address = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
	command.rx_nb = 2;
 80025a2:	2302      	movs	r3, #2
 80025a4:	81bb      	strh	r3, [r7, #12]
	command.rx_data = manufacturer_id;
 80025a6:	f107 031c 	add.w	r3, r7, #28
 80025aa:	61bb      	str	r3, [r7, #24]

	extflash_send_cmd(&command);
 80025ac:	f107 0308 	add.w	r3, r7, #8
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fd5f 	bl	8002074 <extflash_send_cmd>

	if(manufacturer_id[0] != EFLASH_DEF_MANIFACTURER || manufacturer_id[1] != EFLASH_DEF_DEVID)
 80025b6:	7f3b      	ldrb	r3, [r7, #28]
 80025b8:	2b9d      	cmp	r3, #157	@ 0x9d
 80025ba:	d102      	bne.n	80025c2 <extflash_init+0x62>
 80025bc:	7f7b      	ldrb	r3, [r7, #29]
 80025be:	2b17      	cmp	r3, #23
 80025c0:	d002      	beq.n	80025c8 <extflash_init+0x68>
	{
		return -1;
 80025c2:	f04f 33ff 	mov.w	r3, #4294967295
 80025c6:	e022      	b.n	800260e <extflash_init+0xae>
	}

	memset((void *)&command, 0, sizeof(command));
 80025c8:	f107 0308 	add.w	r3, r7, #8
 80025cc:	2214      	movs	r2, #20
 80025ce:	2100      	movs	r1, #0
 80025d0:	4618      	mov	r0, r3
 80025d2:	f012 fd99 	bl	8015108 <memset>

	extflash_read_sfdp(SFDP_FLASH_DENSITY, density, sizeof(density));
 80025d6:	1d3b      	adds	r3, r7, #4
 80025d8:	2204      	movs	r2, #4
 80025da:	4619      	mov	r1, r3
 80025dc:	2034      	movs	r0, #52	@ 0x34
 80025de:	f7ff fe0e 	bl	80021fe <extflash_read_sfdp>

	memcpy(&exflashSize, density, sizeof(uint32_t));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002620 <extflash_init+0xc0>)
 80025e6:	6013      	str	r3, [r2, #0]

	exflashSize += 1;
 80025e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002620 <extflash_init+0xc0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	3301      	adds	r3, #1
 80025ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002620 <extflash_init+0xc0>)
 80025f0:	6013      	str	r3, [r2, #0]
	exflashSize >>= 3;
 80025f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002620 <extflash_init+0xc0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	08db      	lsrs	r3, r3, #3
 80025f8:	4a09      	ldr	r2, [pc, #36]	@ (8002620 <extflash_init+0xc0>)
 80025fa:	6013      	str	r3, [r2, #0]

	exflashNumSectors = exflashSize / EFLASH_DEF_SECTOR_SIZE;
 80025fc:	4b08      	ldr	r3, [pc, #32]	@ (8002620 <extflash_init+0xc0>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	0b1b      	lsrs	r3, r3, #12
 8002602:	4a06      	ldr	r2, [pc, #24]	@ (800261c <extflash_init+0xbc>)
 8002604:	6013      	str	r3, [r2, #0]

	exflashInitDone = 1;
 8002606:	4b04      	ldr	r3, [pc, #16]	@ (8002618 <extflash_init+0xb8>)
 8002608:	2201      	movs	r2, #1
 800260a:	701a      	strb	r2, [r3, #0]

	return 0;
 800260c:	2300      	movs	r3, #0

}
 800260e:	4618      	mov	r0, r3
 8002610:	3720      	adds	r7, #32
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000214 	.word	0x20000214
 800261c:	20000210 	.word	0x20000210
 8002620:	2000020c 	.word	0x2000020c

08002624 <System_Init>:
#include "lsm6dsv16x_rw.h"
#include "DS18B20.h"

/*-----INIZiALIZZAZIONE SISTEMA-----*/
void System_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
	acc.write_reg = acc_write;
 8002628:	4b1b      	ldr	r3, [pc, #108]	@ (8002698 <System_Init+0x74>)
 800262a:	4a1c      	ldr	r2, [pc, #112]	@ (800269c <System_Init+0x78>)
 800262c:	601a      	str	r2, [r3, #0]
	acc.read_reg = acc_read;
 800262e:	4b1a      	ldr	r3, [pc, #104]	@ (8002698 <System_Init+0x74>)
 8002630:	4a1b      	ldr	r2, [pc, #108]	@ (80026a0 <System_Init+0x7c>)
 8002632:	605a      	str	r2, [r3, #4]
	acc.handle = &hspi3;
 8002634:	4b18      	ldr	r3, [pc, #96]	@ (8002698 <System_Init+0x74>)
 8002636:	4a1b      	ldr	r2, [pc, #108]	@ (80026a4 <System_Init+0x80>)
 8002638:	60da      	str	r2, [r3, #12]

	LED_Start(ORG_LED, FAST);
 800263a:	2102      	movs	r1, #2
 800263c:	2000      	movs	r0, #0
 800263e:	f000 fa5f 	bl	8002b00 <LED_Start>

	BC_Init();
 8002642:	f7ff f9d3 	bl	80019ec <BC_Init>
	INA3221_Init();
 8002646:	f7fe f8d9 	bl	80007fc <INA3221_Init>
	FatFS_Init();
 800264a:	f000 f833 	bl	80026b4 <FatFS_Init>
	Config_Init();
 800264e:	f000 f979 	bl	8002944 <Config_Init>
	Acc_Init(&acc);
 8002652:	4811      	ldr	r0, [pc, #68]	@ (8002698 <System_Init+0x74>)
 8002654:	f000 f8ca 	bl	80027ec <Acc_Init>
	SIM_Init();
 8002658:	f7fe fb18 	bl	8000c8c <SIM_Init>
	RTC_Init();
 800265c:	f7fe f97c 	bl	8000958 <RTC_Init>
	Temperature = Read_Temperature();
 8002660:	f7fe f894 	bl	800078c <Read_Temperature>
 8002664:	4603      	mov	r3, r0
 8002666:	461a      	mov	r2, r3
 8002668:	4b0f      	ldr	r3, [pc, #60]	@ (80026a8 <System_Init+0x84>)
 800266a:	801a      	strh	r2, [r3, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(LTE_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 800266c:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8002670:	490e      	ldr	r1, [pc, #56]	@ (80026ac <System_Init+0x88>)
 8002672:	480f      	ldr	r0, [pc, #60]	@ (80026b0 <System_Init+0x8c>)
 8002674:	f012 fc0a 	bl	8014e8c <HAL_UARTEx_ReceiveToIdle_DMA>

	LED_Start(RED_LED, ON);
 8002678:	2101      	movs	r1, #1
 800267a:	2004      	movs	r0, #4
 800267c:	f000 fa40 	bl	8002b00 <LED_Start>
	HAL_Delay(9000);
 8002680:	f242 3028 	movw	r0, #9000	@ 0x2328
 8002684:	f007 fccc 	bl	800a020 <HAL_Delay>

	LED_Stop(RED_LED);
 8002688:	2004      	movs	r0, #4
 800268a:	f000 faa9 	bl	8002be0 <LED_Stop>
	LED_Stop(ORG_LED);
 800268e:	2000      	movs	r0, #0
 8002690:	f000 faa6 	bl	8002be0 <LED_Stop>
}
 8002694:	bf00      	nop
 8002696:	bd80      	pop	{r7, pc}
 8002698:	200054c4 	.word	0x200054c4
 800269c:	08003403 	.word	0x08003403
 80026a0:	0800345b 	.word	0x0800345b
 80026a4:	20000408 	.word	0x20000408
 80026a8:	20004700 	.word	0x20004700
 80026ac:	200054d4 	.word	0x200054d4
 80026b0:	20000624 	.word	0x20000624

080026b4 <FatFS_Init>:

/*-----INIZiALIZZAZIONE MEMORIE-----*/
void FatFS_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	75fb      	strb	r3, [r7, #23]
	MKFS_PARM mkfs_opt = {0};
 80026be:	1d3b      	adds	r3, r7, #4
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]

	do
	{
		sys.RAM_Mounted = 0;
 80026ca:	4b41      	ldr	r3, [pc, #260]	@ (80027d0 <FatFS_Init+0x11c>)
 80026cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026d0:	461a      	mov	r2, r3
 80026d2:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80026d6:	f023 0302 	bic.w	r3, r3, #2
 80026da:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		
		mkfs_opt.fmt = FM_FAT32;
 80026de:	2302      	movs	r3, #2
 80026e0:	713b      	strb	r3, [r7, #4]
		mkfs_opt.au_size = 1024; 
 80026e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026e6:	613b      	str	r3, [r7, #16]
		mkfs_opt.n_fat = 1;
 80026e8:	2301      	movs	r3, #1
 80026ea:	717b      	strb	r3, [r7, #5]
		mkfs_opt.align = 1;
 80026ec:	2301      	movs	r3, #1
 80026ee:	60bb      	str	r3, [r7, #8]

		fRes = f_mkfs("/ram", &mkfs_opt, psram_fs.win, sizeof(psram_fs.win));
 80026f0:	1d39      	adds	r1, r7, #4
 80026f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026f6:	4a37      	ldr	r2, [pc, #220]	@ (80027d4 <FatFS_Init+0x120>)
 80026f8:	4837      	ldr	r0, [pc, #220]	@ (80027d8 <FatFS_Init+0x124>)
 80026fa:	f006 ffa3 	bl	8009644 <f_mkfs>
 80026fe:	4603      	mov	r3, r0
 8002700:	75fb      	strb	r3, [r7, #23]
		if (fRes != FR_OK)
 8002702:	7dfb      	ldrb	r3, [r7, #23]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d114      	bne.n	8002732 <FatFS_Init+0x7e>
		{
			break;
		}

		fRes = f_mount(&psram_fs, "/ram", 1);
 8002708:	2201      	movs	r2, #1
 800270a:	4933      	ldr	r1, [pc, #204]	@ (80027d8 <FatFS_Init+0x124>)
 800270c:	4833      	ldr	r0, [pc, #204]	@ (80027dc <FatFS_Init+0x128>)
 800270e:	f006 f917 	bl	8008940 <f_mount>
 8002712:	4603      	mov	r3, r0
 8002714:	75fb      	strb	r3, [r7, #23]

		if (fRes != FR_OK)
 8002716:	7dfb      	ldrb	r3, [r7, #23]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10c      	bne.n	8002736 <FatFS_Init+0x82>
		{
			break;
		}

		sys.RAM_Mounted = 1;
 800271c:	4b2c      	ldr	r3, [pc, #176]	@ (80027d0 <FatFS_Init+0x11c>)
 800271e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002722:	461a      	mov	r2, r3
 8002724:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8002728:	f043 0302 	orr.w	r3, r3, #2
 800272c:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 8002730:	e002      	b.n	8002738 <FatFS_Init+0x84>
			break;
 8002732:	bf00      	nop
 8002734:	e000      	b.n	8002738 <FatFS_Init+0x84>
			break;
 8002736:	bf00      	nop
	} while (1);

	do
	{
		sys.FLASH_Mounted = 0;
 8002738:	4b25      	ldr	r3, [pc, #148]	@ (80027d0 <FatFS_Init+0x11c>)
 800273a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800273e:	461a      	mov	r2, r3
 8002740:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8002744:	f023 0304 	bic.w	r3, r3, #4
 8002748:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		fRes = f_mount(&flash_fs, "/flash", 1);
 800274c:	2201      	movs	r2, #1
 800274e:	4924      	ldr	r1, [pc, #144]	@ (80027e0 <FatFS_Init+0x12c>)
 8002750:	4824      	ldr	r0, [pc, #144]	@ (80027e4 <FatFS_Init+0x130>)
 8002752:	f006 f8f5 	bl	8008940 <f_mount>
 8002756:	4603      	mov	r3, r0
 8002758:	75fb      	strb	r3, [r7, #23]

		if (fRes == FR_NO_FILESYSTEM)
 800275a:	7dfb      	ldrb	r3, [r7, #23]
 800275c:	2b0d      	cmp	r3, #13
 800275e:	d124      	bne.n	80027aa <FatFS_Init+0xf6>
		{
			memset((void *)&mkfs_opt, 0, sizeof(mkfs_opt));
 8002760:	1d3b      	adds	r3, r7, #4
 8002762:	2210      	movs	r2, #16
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f012 fcce 	bl	8015108 <memset>
			mkfs_opt.fmt = FM_FAT32;
 800276c:	2302      	movs	r3, #2
 800276e:	713b      	strb	r3, [r7, #4]
			mkfs_opt.au_size = 4096;    
 8002770:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002774:	613b      	str	r3, [r7, #16]
			mkfs_opt.n_fat = 1;
 8002776:	2301      	movs	r3, #1
 8002778:	717b      	strb	r3, [r7, #5]
			mkfs_opt.align = 1;
 800277a:	2301      	movs	r3, #1
 800277c:	60bb      	str	r3, [r7, #8]

			fRes = f_mkfs("/flash", &mkfs_opt, flash_fs.win, sizeof(flash_fs.win));
 800277e:	1d39      	adds	r1, r7, #4
 8002780:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002784:	4a18      	ldr	r2, [pc, #96]	@ (80027e8 <FatFS_Init+0x134>)
 8002786:	4816      	ldr	r0, [pc, #88]	@ (80027e0 <FatFS_Init+0x12c>)
 8002788:	f006 ff5c 	bl	8009644 <f_mkfs>
 800278c:	4603      	mov	r3, r0
 800278e:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 8002790:	7dfb      	ldrb	r3, [r7, #23]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d114      	bne.n	80027c0 <FatFS_Init+0x10c>
			{
				break;
			}

			fRes = f_mount(&flash_fs, "/flash", 1);
 8002796:	2201      	movs	r2, #1
 8002798:	4911      	ldr	r1, [pc, #68]	@ (80027e0 <FatFS_Init+0x12c>)
 800279a:	4812      	ldr	r0, [pc, #72]	@ (80027e4 <FatFS_Init+0x130>)
 800279c:	f006 f8d0 	bl	8008940 <f_mount>
 80027a0:	4603      	mov	r3, r0
 80027a2:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 80027a4:	7dfb      	ldrb	r3, [r7, #23]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10c      	bne.n	80027c4 <FatFS_Init+0x110>
			{
				break;
			}
		}

		sys.FLASH_Mounted = 1;
 80027aa:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <FatFS_Init+0x11c>)
 80027ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027b0:	461a      	mov	r2, r3
 80027b2:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80027b6:	f043 0304 	orr.w	r3, r3, #4
 80027ba:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 80027be:	e002      	b.n	80027c6 <FatFS_Init+0x112>
				break;
 80027c0:	bf00      	nop
 80027c2:	e000      	b.n	80027c6 <FatFS_Init+0x112>
				break;
 80027c4:	bf00      	nop
	} while (1);


}
 80027c6:	bf00      	nop
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000740 	.word	0x20000740
 80027d4:	20001df0 	.word	0x20001df0
 80027d8:	080165a4 	.word	0x080165a4
 80027dc:	20001dbc 	.word	0x20001dbc
 80027e0:	080165ac 	.word	0x080165ac
 80027e4:	20002df0 	.word	0x20002df0
 80027e8:	20002e24 	.word	0x20002e24

080027ec <Acc_Init>:

/*-----INIZiALIZZAZIONE ACCELEROMETRO-----*/
void Acc_Init(stmdev_ctx_t* acc)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
	lsm6dsv16x_reset_t rst;
	lsm6dsv16x_pin_int_route_t pin_int = {0};
 80027f4:	f107 0310 	add.w	r3, r7, #16
 80027f8:	2100      	movs	r1, #0
 80027fa:	460a      	mov	r2, r1
 80027fc:	801a      	strh	r2, [r3, #0]
 80027fe:	460a      	mov	r2, r1
 8002800:	709a      	strb	r2, [r3, #2]
	uint8_t acc_whoamI = 0;
 8002802:	2300      	movs	r3, #0
 8002804:	73fb      	strb	r3, [r7, #15]
	uint8_t wmi_cnt = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	75fb      	strb	r3, [r7, #23]

	pin_int.fifo_th = PROPERTY_ENABLE;
 800280a:	7c3b      	ldrb	r3, [r7, #16]
 800280c:	f043 0308 	orr.w	r3, r3, #8
 8002810:	743b      	strb	r3, [r7, #16]


	lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 8002812:	f107 030f 	add.w	r3, r7, #15
 8002816:	4619      	mov	r1, r3
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 fac5 	bl	8002da8 <lsm6dsv16x_device_id_get>
	if (acc_whoamI != LSM6DSV16X_ID)
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	2b70      	cmp	r3, #112	@ 0x70
 8002822:	d01f      	beq.n	8002864 <Acc_Init+0x78>
		while (acc_whoamI != LSM6DSV16X_ID)
 8002824:	e01b      	b.n	800285e <Acc_Init+0x72>
		{
			lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 8002826:	f107 030f 	add.w	r3, r7, #15
 800282a:	4619      	mov	r1, r3
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 fabb 	bl	8002da8 <lsm6dsv16x_device_id_get>
			wmi_cnt++;
 8002832:	7dfb      	ldrb	r3, [r7, #23]
 8002834:	3301      	adds	r3, #1
 8002836:	75fb      	strb	r3, [r7, #23]
			if (wmi_cnt == 3)
 8002838:	7dfb      	ldrb	r3, [r7, #23]
 800283a:	2b03      	cmp	r3, #3
 800283c:	d10f      	bne.n	800285e <Acc_Init+0x72>
			{
				sys.ACC_Present = 0;
 800283e:	4b3e      	ldr	r3, [pc, #248]	@ (8002938 <Acc_Init+0x14c>)
 8002840:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002844:	461a      	mov	r2, r3
 8002846:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800284a:	f023 0301 	bic.w	r3, r3, #1
 800284e:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
				flags.ACC_Complete = 1;
 8002852:	4a3a      	ldr	r2, [pc, #232]	@ (800293c <Acc_Init+0x150>)
 8002854:	7813      	ldrb	r3, [r2, #0]
 8002856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800285a:	7013      	strb	r3, [r2, #0]
 800285c:	e069      	b.n	8002932 <Acc_Init+0x146>
		while (acc_whoamI != LSM6DSV16X_ID)
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	2b70      	cmp	r3, #112	@ 0x70
 8002862:	d1e0      	bne.n	8002826 <Acc_Init+0x3a>
				return;
			}
		}
	sys.ACC_Present = 1;
 8002864:	4b34      	ldr	r3, [pc, #208]	@ (8002938 <Acc_Init+0x14c>)
 8002866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800286a:	461a      	mov	r2, r3
 800286c:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
	lsm6dsv16x_reset_set(acc, LSM6DSV16X_GLOBAL_RST);
 8002878:	2101      	movs	r1, #1
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f9ee 	bl	8002c5c <lsm6dsv16x_reset_set>
	do {
		lsm6dsv16x_reset_get(acc, &rst);
 8002880:	f107 0316 	add.w	r3, r7, #22
 8002884:	4619      	mov	r1, r3
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 fa38 	bl	8002cfc <lsm6dsv16x_reset_get>
		HAL_Delay(10);
 800288c:	200a      	movs	r0, #10
 800288e:	f007 fbc7 	bl	800a020 <HAL_Delay>
	} while (rst != LSM6DSV16X_READY);
 8002892:	7dbb      	ldrb	r3, [r7, #22]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f3      	bne.n	8002880 <Acc_Init+0x94>

	lsm6dsv16x_block_data_update_set(acc, PROPERTY_ENABLE);
 8002898:	2101      	movs	r1, #1
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fb81 	bl	8002fa2 <lsm6dsv16x_block_data_update_set>
	lsm6dsv16x_ui_i2c_i3c_mode_set(acc, LSM6DSV16X_I2C_I3C_DISABLE);
 80028a0:	2101      	movs	r1, #1
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fd87 	bl	80033b6 <lsm6dsv16x_ui_i2c_i3c_mode_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_HIGH_PERFORMANCE_MD);
 80028a8:	2100      	movs	r1, #0
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fade 	bl	8002e6c <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_HIGH_PERFORMANCE_MD);
 80028b0:	2100      	movs	r1, #0
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fb4f 	bl	8002f56 <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_fifo_xl_batch_set(acc, LSM6DSV16X_XL_BATCHED_AT_960Hz);
 80028b8:	2109      	movs	r1, #9
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fd09 	bl	80032d2 <lsm6dsv16x_fifo_xl_batch_set>
	lsm6dsv16x_fifo_gy_batch_set(acc, LSM6DSV16X_GY_NOT_BATCHED);
 80028c0:	2100      	movs	r1, #0
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 fd2b 	bl	800331e <lsm6dsv16x_fifo_gy_batch_set>
	lsm6dsv16x_fifo_mode_set(acc, LSM6DSV16X_BYPASS_MODE);
 80028c8:	2100      	movs	r1, #0
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 fd4d 	bl	800336a <lsm6dsv16x_fifo_mode_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 80028d0:	2100      	movs	r1, #0
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 fa79 	bl	8002dca <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_gy_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 80028d8:	2100      	movs	r1, #0
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 faec 	bl	8002eb8 <lsm6dsv16x_gy_data_rate_set>
	lsm6dsv16x_odr_trig_cfg_set(acc, 16);  //800SPS
 80028e0:	2110      	movs	r1, #16
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fb83 	bl	8002fee <lsm6dsv16x_odr_trig_cfg_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_ODR_TRIGGERED_MD);
 80028e8:	2103      	movs	r1, #3
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fabe 	bl	8002e6c <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_ODR_TRIGGERED_MD);
 80028f0:	2103      	movs	r1, #3
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fb2f 	bl	8002f56 <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_den_polarity_set(acc, LSM6DSV16X_DEN_ACT_HIGH);
 80028f8:	2101      	movs	r1, #1
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fca3 	bl	8003246 <lsm6dsv16x_den_polarity_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_AT_960Hz);
 8002900:	2109      	movs	r1, #9
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fa61 	bl	8002dca <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_xl_full_scale_set(acc, LSM6DSV16X_2g);
 8002908:	2100      	movs	r1, #0
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fbbe 	bl	800308c <lsm6dsv16x_xl_full_scale_set>
	lsm6dsv16x_gy_full_scale_set(acc, LSM6DSV16X_2000dps);
 8002910:	2104      	movs	r1, #4
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 fb94 	bl	8003040 <lsm6dsv16x_gy_full_scale_set>
	lsm6dsv16x_fifo_watermark_set(acc, ACC_FIFO_WATERMARK);
 8002918:	21c8      	movs	r1, #200	@ 0xc8
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fcb9 	bl	8003292 <lsm6dsv16x_fifo_watermark_set>
	lsm6dsv16x_pin_int1_route_set(acc, &pin_int);
 8002920:	f107 0310 	add.w	r3, r7, #16
 8002924:	4619      	mov	r1, r3
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 fbd6 	bl	80030d8 <lsm6dsv16x_pin_int1_route_set>

	__HAL_GPIO_EXTI_CLEAR_IT(ACC_INTERRUPT);
 800292c:	4b04      	ldr	r3, [pc, #16]	@ (8002940 <Acc_Init+0x154>)
 800292e:	2204      	movs	r2, #4
 8002930:	615a      	str	r2, [r3, #20]
}
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000740 	.word	0x20000740
 800293c:	20001c50 	.word	0x20001c50
 8002940:	40010400 	.word	0x40010400

08002944 <Config_Init>:

/*-----INIZiALIZZAZIONE CONFIGURAZIONE-----*/
void Config_Init(void)
{
 8002944:	b590      	push	{r4, r7, lr}
 8002946:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
    FIL config_file;
    UINT bytes_read;
    UINT bytes_written;

    if (f_open(&config_file, CONFIG_FILE, FA_READ) == FR_OK) 
 800294e:	f107 0318 	add.w	r3, r7, #24
 8002952:	3b0c      	subs	r3, #12
 8002954:	2201      	movs	r2, #1
 8002956:	4960      	ldr	r1, [pc, #384]	@ (8002ad8 <Config_Init+0x194>)
 8002958:	4618      	mov	r0, r3
 800295a:	f006 f83b 	bl	80089d4 <f_open>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d121      	bne.n	80029a8 <Config_Init+0x64>
	{
        if (f_read(&config_file, &config, sizeof(config), &bytes_read) == FR_OK && bytes_read == sizeof(config))
 8002964:	f107 0318 	add.w	r3, r7, #24
 8002968:	3b10      	subs	r3, #16
 800296a:	f107 0018 	add.w	r0, r7, #24
 800296e:	380c      	subs	r0, #12
 8002970:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8002974:	4959      	ldr	r1, [pc, #356]	@ (8002adc <Config_Init+0x198>)
 8002976:	f006 f9c5 	bl	8008d04 <f_read>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10d      	bne.n	800299c <Config_Init+0x58>
 8002980:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002984:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002988:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 800298c:	d106      	bne.n	800299c <Config_Init+0x58>
		{
			f_close(&config_file);
 800298e:	f107 0318 	add.w	r3, r7, #24
 8002992:	3b0c      	subs	r3, #12
 8002994:	4618      	mov	r0, r3
 8002996:	f006 fd11 	bl	80093bc <f_close>
			return;
 800299a:	e098      	b.n	8002ace <Config_Init+0x18a>
        }
        f_close(&config_file);
 800299c:	f107 0318 	add.w	r3, r7, #24
 80029a0:	3b0c      	subs	r3, #12
 80029a2:	4618      	mov	r0, r3
 80029a4:	f006 fd0a 	bl	80093bc <f_close>
    }

    config.device_id = 0;
 80029a8:	4b4c      	ldr	r3, [pc, #304]	@ (8002adc <Config_Init+0x198>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]
	config.samp_freq = 800;
 80029ae:	4b4b      	ldr	r3, [pc, #300]	@ (8002adc <Config_Init+0x198>)
 80029b0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80029b4:	805a      	strh	r2, [r3, #2]
	config.buffering_secs = 30;
 80029b6:	4b49      	ldr	r3, [pc, #292]	@ (8002adc <Config_Init+0x198>)
 80029b8:	221e      	movs	r2, #30
 80029ba:	711a      	strb	r2, [r3, #4]
	config.hammer_th = 2048;
 80029bc:	4b47      	ldr	r3, [pc, #284]	@ (8002adc <Config_Init+0x198>)
 80029be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029c2:	80da      	strh	r2, [r3, #6]
    for(int i = 0; i < 24; i++) 
 80029c4:	2300      	movs	r3, #0
 80029c6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80029ca:	f102 0214 	add.w	r2, r2, #20
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	e01f      	b.n	8002a12 <Config_Init+0xce>
	{
        config.low_th[i] = 0;
 80029d2:	4a42      	ldr	r2, [pc, #264]	@ (8002adc <Config_Init+0x198>)
 80029d4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80029d8:	f103 0314 	add.w	r3, r3, #20
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	3304      	adds	r3, #4
 80029e0:	2100      	movs	r1, #0
 80029e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        config.high_th[i] = 4096;
 80029e6:	4a3d      	ldr	r2, [pc, #244]	@ (8002adc <Config_Init+0x198>)
 80029e8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80029ec:	f103 0314 	add.w	r3, r3, #20
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	331c      	adds	r3, #28
 80029f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80029f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i = 0; i < 24; i++) 
 80029fc:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002a00:	f103 0314 	add.w	r3, r3, #20
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	3301      	adds	r3, #1
 8002a08:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002a0c:	f102 0214 	add.w	r2, r2, #20
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002a16:	f103 0314 	add.w	r3, r3, #20
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b17      	cmp	r3, #23
 8002a1e:	ddd8      	ble.n	80029d2 <Config_Init+0x8e>
    }
    strcpy(config.data_topic, "Data_Topic");
 8002a20:	4a2f      	ldr	r2, [pc, #188]	@ (8002ae0 <Config_Init+0x19c>)
 8002a22:	4b30      	ldr	r3, [pc, #192]	@ (8002ae4 <Config_Init+0x1a0>)
 8002a24:	cb03      	ldmia	r3!, {r0, r1}
 8002a26:	6010      	str	r0, [r2, #0]
 8002a28:	6051      	str	r1, [r2, #4]
 8002a2a:	8819      	ldrh	r1, [r3, #0]
 8002a2c:	789b      	ldrb	r3, [r3, #2]
 8002a2e:	8111      	strh	r1, [r2, #8]
 8002a30:	7293      	strb	r3, [r2, #10]
    strcpy(config.command_topic, "Command_Topic");  
 8002a32:	4a2d      	ldr	r2, [pc, #180]	@ (8002ae8 <Config_Init+0x1a4>)
 8002a34:	4b2d      	ldr	r3, [pc, #180]	@ (8002aec <Config_Init+0x1a8>)
 8002a36:	4614      	mov	r4, r2
 8002a38:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002a3a:	6020      	str	r0, [r4, #0]
 8002a3c:	6061      	str	r1, [r4, #4]
 8002a3e:	60a2      	str	r2, [r4, #8]
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	81a3      	strh	r3, [r4, #12]
    strcpy(config.ota_topic, "OTA_Topic");
 8002a44:	4a2a      	ldr	r2, [pc, #168]	@ (8002af0 <Config_Init+0x1ac>)
 8002a46:	4b2b      	ldr	r3, [pc, #172]	@ (8002af4 <Config_Init+0x1b0>)
 8002a48:	cb03      	ldmia	r3!, {r0, r1}
 8002a4a:	6010      	str	r0, [r2, #0]
 8002a4c:	6051      	str	r1, [r2, #4]
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	8113      	strh	r3, [r2, #8]
	strcpy(config.info_topic, "Info_Topic");
 8002a52:	4a29      	ldr	r2, [pc, #164]	@ (8002af8 <Config_Init+0x1b4>)
 8002a54:	4b29      	ldr	r3, [pc, #164]	@ (8002afc <Config_Init+0x1b8>)
 8002a56:	cb03      	ldmia	r3!, {r0, r1}
 8002a58:	6010      	str	r0, [r2, #0]
 8002a5a:	6051      	str	r1, [r2, #4]
 8002a5c:	8819      	ldrh	r1, [r3, #0]
 8002a5e:	789b      	ldrb	r3, [r3, #2]
 8002a60:	8111      	strh	r1, [r2, #8]
 8002a62:	7293      	strb	r3, [r2, #10]
    
    if (f_open(&config_file, CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8002a64:	f107 0318 	add.w	r3, r7, #24
 8002a68:	3b0c      	subs	r3, #12
 8002a6a:	220a      	movs	r2, #10
 8002a6c:	491a      	ldr	r1, [pc, #104]	@ (8002ad8 <Config_Init+0x194>)
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f005 ffb0 	bl	80089d4 <f_open>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d128      	bne.n	8002acc <Config_Init+0x188>
    {
        return;
    }

    if (f_write(&config_file, &config, sizeof(Config_Typedef), &bytes_written) != FR_OK || bytes_written != sizeof(Config_Typedef)) 
 8002a7a:	f107 0318 	add.w	r3, r7, #24
 8002a7e:	3b14      	subs	r3, #20
 8002a80:	f107 0018 	add.w	r0, r7, #24
 8002a84:	380c      	subs	r0, #12
 8002a86:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8002a8a:	4914      	ldr	r1, [pc, #80]	@ (8002adc <Config_Init+0x198>)
 8002a8c:	f006 fa8d 	bl	8008faa <f_write>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <Config_Init+0x160>
 8002a96:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a9a:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8002a9e:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8002aa2:	d006      	beq.n	8002ab2 <Config_Init+0x16e>
	{
        f_close(&config_file);
 8002aa4:	f107 0318 	add.w	r3, r7, #24
 8002aa8:	3b0c      	subs	r3, #12
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f006 fc86 	bl	80093bc <f_close>
        return;
 8002ab0:	e00d      	b.n	8002ace <Config_Init+0x18a>
    }
    
    f_sync(&config_file);
 8002ab2:	f107 0318 	add.w	r3, r7, #24
 8002ab6:	3b0c      	subs	r3, #12
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f006 fbff 	bl	80092bc <f_sync>
    f_close(&config_file);
 8002abe:	f107 0318 	add.w	r3, r7, #24
 8002ac2:	3b0c      	subs	r3, #12
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f006 fc79 	bl	80093bc <f_close>
 8002aca:	e000      	b.n	8002ace <Config_Init+0x18a>
        return;
 8002acc:	bf00      	nop
}
 8002ace:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8002ad2:	371c      	adds	r7, #28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd90      	pop	{r4, r7, pc}
 8002ad8:	080165b4 	.word	0x080165b4
 8002adc:	20001c54 	.word	0x20001c54
 8002ae0:	20001cbc 	.word	0x20001cbc
 8002ae4:	080165c8 	.word	0x080165c8
 8002ae8:	20001cfc 	.word	0x20001cfc
 8002aec:	080165d4 	.word	0x080165d4
 8002af0:	20001d3c 	.word	0x20001d3c
 8002af4:	080165e4 	.word	0x080165e4
 8002af8:	20001d7c 	.word	0x20001d7c
 8002afc:	080165f0 	.word	0x080165f0

08002b00 <LED_Start>:
#include "leds.h"
#include "peripherals.h"

/*------ACCENSIONE LED------*/
void LED_Start(uint32_t LED, uint8_t mode)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	@ 0x28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	70fb      	strb	r3, [r7, #3]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002b0c:	f107 030c 	add.w	r3, r7, #12
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	611a      	str	r2, [r3, #16]
 8002b1c:	615a      	str	r2, [r3, #20]
 8002b1e:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b30:	2300      	movs	r3, #0
 8002b32:	623b      	str	r3, [r7, #32]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b34:	2300      	movs	r3, #0
 8002b36:	627b      	str	r3, [r7, #36]	@ 0x24

	switch(mode)
 8002b38:	78fb      	ldrb	r3, [r7, #3]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d00e      	beq.n	8002b5c <LED_Start+0x5c>
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	dc10      	bgt.n	8002b64 <LED_Start+0x64>
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d002      	beq.n	8002b4c <LED_Start+0x4c>
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d004      	beq.n	8002b54 <LED_Start+0x54>
 8002b4a:	e00b      	b.n	8002b64 <LED_Start+0x64>
	{
	case ON:
		sConfigOC.Pulse = 49999;
 8002b4c:	f24c 334f 	movw	r3, #49999	@ 0xc34f
 8002b50:	613b      	str	r3, [r7, #16]
		break;
 8002b52:	e007      	b.n	8002b64 <LED_Start+0x64>
	case FAST:
		sConfigOC.Pulse = 24999;
 8002b54:	f246 13a7 	movw	r3, #24999	@ 0x61a7
 8002b58:	613b      	str	r3, [r7, #16]
		break;
 8002b5a:	e003      	b.n	8002b64 <LED_Start+0x64>
	case SLOW:
		sConfigOC.Pulse = 12499;
 8002b5c:	f243 03d3 	movw	r3, #12499	@ 0x30d3
 8002b60:	613b      	str	r3, [r7, #16]
		break;
 8002b62:	bf00      	nop
	}

	HAL_TIM_Base_Init(LED_TIMER);
 8002b64:	481d      	ldr	r0, [pc, #116]	@ (8002bdc <LED_Start+0xdc>)
 8002b66:	f00e fd0f 	bl	8011588 <HAL_TIM_Base_Init>
	HAL_TIM_PWM_Init(LED_TIMER);
 8002b6a:	481c      	ldr	r0, [pc, #112]	@ (8002bdc <LED_Start+0xdc>)
 8002b6c:	f00e fff2 	bl	8011b54 <HAL_TIM_PWM_Init>

	switch(LED)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d009      	beq.n	8002b8a <LED_Start+0x8a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d82a      	bhi.n	8002bd2 <LED_Start+0xd2>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d01b      	beq.n	8002bba <LED_Start+0xba>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d00c      	beq.n	8002ba2 <LED_Start+0xa2>
	case ORG_LED:
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
		HAL_TIM_PWM_Start(LED_TIMER, LED);
		break;
	}
}
 8002b88:	e023      	b.n	8002bd2 <LED_Start+0xd2>
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
 8002b8a:	f107 030c 	add.w	r3, r7, #12
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	4619      	mov	r1, r3
 8002b92:	4812      	ldr	r0, [pc, #72]	@ (8002bdc <LED_Start+0xdc>)
 8002b94:	f00f fd52 	bl	801263c <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(LED_TIMER, LED);
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4810      	ldr	r0, [pc, #64]	@ (8002bdc <LED_Start+0xdc>)
 8002b9c:	f00f f83c 	bl	8011c18 <HAL_TIM_PWM_Start>
		break;
 8002ba0:	e017      	b.n	8002bd2 <LED_Start+0xd2>
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
 8002ba2:	f107 030c 	add.w	r3, r7, #12
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	480c      	ldr	r0, [pc, #48]	@ (8002bdc <LED_Start+0xdc>)
 8002bac:	f00f fd46 	bl	801263c <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(LED_TIMER, LED);
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	480a      	ldr	r0, [pc, #40]	@ (8002bdc <LED_Start+0xdc>)
 8002bb4:	f00f f830 	bl	8011c18 <HAL_TIM_PWM_Start>
		break;
 8002bb8:	e00b      	b.n	8002bd2 <LED_Start+0xd2>
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
 8002bba:	f107 030c 	add.w	r3, r7, #12
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4806      	ldr	r0, [pc, #24]	@ (8002bdc <LED_Start+0xdc>)
 8002bc4:	f00f fd3a 	bl	801263c <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(LED_TIMER, LED);
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4804      	ldr	r0, [pc, #16]	@ (8002bdc <LED_Start+0xdc>)
 8002bcc:	f00f f824 	bl	8011c18 <HAL_TIM_PWM_Start>
		break;
 8002bd0:	bf00      	nop
}
 8002bd2:	bf00      	nop
 8002bd4:	3728      	adds	r7, #40	@ 0x28
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	2000046c 	.word	0x2000046c

08002be0 <LED_Stop>:

/*------SPEGNIMENTO LED------*/
void LED_Stop(uint32_t LED)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(LED_TIMER, LED);
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4803      	ldr	r0, [pc, #12]	@ (8002bf8 <LED_Stop+0x18>)
 8002bec:	f00f f91a 	bl	8011e24 <HAL_TIM_PWM_Stop>
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	2000046c 	.word	0x2000046c

08002bfc <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8002bfc:	b590      	push	{r4, r7, lr}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	607a      	str	r2, [r7, #4]
 8002c06:	461a      	mov	r2, r3
 8002c08:	460b      	mov	r3, r1
 8002c0a:	72fb      	strb	r3, [r7, #11]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	685c      	ldr	r4, [r3, #4]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	68d8      	ldr	r0, [r3, #12]
 8002c18:	893b      	ldrh	r3, [r7, #8]
 8002c1a:	7af9      	ldrb	r1, [r7, #11]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	47a0      	blx	r4
 8002c20:	6178      	str	r0, [r7, #20]

  return ret;
 8002c22:	697b      	ldr	r3, [r7, #20]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	371c      	adds	r7, #28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd90      	pop	{r4, r7, pc}

08002c2c <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8002c2c:	b590      	push	{r4, r7, lr}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	461a      	mov	r2, r3
 8002c38:	460b      	mov	r3, r1
 8002c3a:	72fb      	strb	r3, [r7, #11]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681c      	ldr	r4, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	68d8      	ldr	r0, [r3, #12]
 8002c48:	893b      	ldrh	r3, [r7, #8]
 8002c4a:	7af9      	ldrb	r1, [r7, #11]
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	47a0      	blx	r4
 8002c50:	6178      	str	r0, [r7, #20]

  return ret;
 8002c52:	697b      	ldr	r3, [r7, #20]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	371c      	adds	r7, #28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd90      	pop	{r4, r7, pc}

08002c5c <lsm6dsv16x_reset_set>:
  * @param  val      Reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_set(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t val)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8002c68:	f107 020c 	add.w	r2, r7, #12
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	2112      	movs	r1, #18
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff ffc3 	bl	8002bfc <lsm6dsv16x_read_reg>
 8002c76:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8002c78:	f107 0210 	add.w	r2, r7, #16
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	2101      	movs	r1, #1
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ffbb 	bl	8002bfc <lsm6dsv16x_read_reg>
 8002c86:	4602      	mov	r2, r0
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <lsm6dsv16x_reset_set+0x3c>
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	e02d      	b.n	8002cf4 <lsm6dsv16x_reset_set+0x98>

  ctrl3.boot = ((uint8_t)val & 0x04U) >> 2;
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	089b      	lsrs	r3, r3, #2
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	7b3b      	ldrb	r3, [r7, #12]
 8002ca4:	f362 13c7 	bfi	r3, r2, #7, #1
 8002ca8:	733b      	strb	r3, [r7, #12]
  ctrl3.sw_reset = ((uint8_t)val & 0x02U) >> 1;
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	085b      	lsrs	r3, r3, #1
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	7b3b      	ldrb	r3, [r7, #12]
 8002cb6:	f362 0300 	bfi	r3, r2, #0, #1
 8002cba:	733b      	strb	r3, [r7, #12]
  func_cfg_access.sw_por = (uint8_t)val & 0x01U;
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	7c3b      	ldrb	r3, [r7, #16]
 8002cc6:	f362 0382 	bfi	r3, r2, #2, #1
 8002cca:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8002ccc:	f107 020c 	add.w	r2, r7, #12
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	2112      	movs	r1, #18
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff ffa9 	bl	8002c2c <lsm6dsv16x_write_reg>
 8002cda:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8002cdc:	f107 0210 	add.w	r2, r7, #16
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff ffa1 	bl	8002c2c <lsm6dsv16x_write_reg>
 8002cea:	4602      	mov	r2, r0
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	4413      	add	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]

  return ret;
 8002cf2:	697b      	ldr	r3, [r7, #20]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <lsm6dsv16x_reset_get>:
  * @param  val      Global reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_get(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t *val)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8002d06:	f107 020c 	add.w	r2, r7, #12
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	2112      	movs	r1, #18
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff ff74 	bl	8002bfc <lsm6dsv16x_read_reg>
 8002d14:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8002d16:	f107 0210 	add.w	r2, r7, #16
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff ff6c 	bl	8002bfc <lsm6dsv16x_read_reg>
 8002d24:	4602      	mov	r2, r0
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	4413      	add	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <lsm6dsv16x_reset_get+0x3a>
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	e033      	b.n	8002d9e <lsm6dsv16x_reset_get+0xa2>

  switch ((ctrl3.sw_reset << 2) + (ctrl3.boot << 1) + func_cfg_access.sw_por)
 8002d36:	7b3b      	ldrb	r3, [r7, #12]
 8002d38:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	009a      	lsls	r2, r3, #2
 8002d40:	7b3b      	ldrb	r3, [r7, #12]
 8002d42:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	4413      	add	r3, r2
 8002d4c:	7c3a      	ldrb	r2, [r7, #16]
 8002d4e:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	4413      	add	r3, r2
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d81c      	bhi.n	8002d94 <lsm6dsv16x_reset_get+0x98>
 8002d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d60 <lsm6dsv16x_reset_get+0x64>)
 8002d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d60:	08002d75 	.word	0x08002d75
 8002d64:	08002d7d 	.word	0x08002d7d
 8002d68:	08002d85 	.word	0x08002d85
 8002d6c:	08002d95 	.word	0x08002d95
 8002d70:	08002d8d 	.word	0x08002d8d
  {
    case LSM6DSV16X_READY:
      *val = LSM6DSV16X_READY;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2200      	movs	r2, #0
 8002d78:	701a      	strb	r2, [r3, #0]
      break;
 8002d7a:	e00f      	b.n	8002d9c <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_GLOBAL_RST:
      *val = LSM6DSV16X_GLOBAL_RST;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
      break;
 8002d82:	e00b      	b.n	8002d9c <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CAL_PARAM:
      *val = LSM6DSV16X_RESTORE_CAL_PARAM;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	2202      	movs	r2, #2
 8002d88:	701a      	strb	r2, [r3, #0]
      break;
 8002d8a:	e007      	b.n	8002d9c <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CTRL_REGS:
      *val = LSM6DSV16X_RESTORE_CTRL_REGS;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2204      	movs	r2, #4
 8002d90:	701a      	strb	r2, [r3, #0]
      break;
 8002d92:	e003      	b.n	8002d9c <lsm6dsv16x_reset_get+0xa0>

    default:
      *val = LSM6DSV16X_GLOBAL_RST;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2201      	movs	r2, #1
 8002d98:	701a      	strb	r2, [r3, #0]
      break;
 8002d9a:	bf00      	nop
  }

  return ret;
 8002d9c:	697b      	ldr	r3, [r7, #20]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop

08002da8 <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 8002db2:	2301      	movs	r3, #1
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	210f      	movs	r1, #15
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7ff ff1f 	bl	8002bfc <lsm6dsv16x_read_reg>
 8002dbe:	60f8      	str	r0, [r7, #12]

  return ret;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b086      	sub	sp, #24
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8002dd6:	f107 0210 	add.w	r2, r7, #16
 8002dda:	2301      	movs	r3, #1
 8002ddc:	2110      	movs	r1, #16
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff ff0c 	bl	8002bfc <lsm6dsv16x_read_reg>
 8002de4:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <lsm6dsv16x_xl_data_rate_set+0x26>
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	e039      	b.n	8002e64 <lsm6dsv16x_xl_data_rate_set+0x9a>

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	7c3b      	ldrb	r3, [r7, #16]
 8002dfa:	f362 0303 	bfi	r3, r2, #0, #4
 8002dfe:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8002e00:	f107 0210 	add.w	r2, r7, #16
 8002e04:	2301      	movs	r3, #1
 8002e06:	2110      	movs	r1, #16
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff ff0f 	bl	8002c2c <lsm6dsv16x_write_reg>
 8002e0e:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <lsm6dsv16x_xl_data_rate_set+0x50>
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	e024      	b.n	8002e64 <lsm6dsv16x_xl_data_rate_set+0x9a>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8002e1a:	78fb      	ldrb	r3, [r7, #3]
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8002e20:	7cfb      	ldrb	r3, [r7, #19]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d01d      	beq.n	8002e62 <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8002e26:	f107 020c 	add.w	r2, r7, #12
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	2162      	movs	r1, #98	@ 0x62
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff fee4 	bl	8002bfc <lsm6dsv16x_read_reg>
 8002e34:	4602      	mov	r2, r0
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	4413      	add	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8002e3c:	7cfb      	ldrb	r3, [r7, #19]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	7b3b      	ldrb	r3, [r7, #12]
 8002e46:	f362 0301 	bfi	r3, r2, #0, #2
 8002e4a:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8002e4c:	f107 020c 	add.w	r2, r7, #12
 8002e50:	2301      	movs	r3, #1
 8002e52:	2162      	movs	r1, #98	@ 0x62
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff fee9 	bl	8002c2c <lsm6dsv16x_write_reg>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	4413      	add	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002e62:	697b      	ldr	r3, [r7, #20]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <lsm6dsv16x_xl_mode_set>:
  * @param  val      XL_HIGH_PERFORMANCE_MD, XL_HIGH_ACCURACY_ODR_MD, XL_LOW_POWER_2_AVG_MD, XL_LOW_POWER_4_AVG_MD, XL_LOW_POWER_8_AVG_MD, XL_NORMAL_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_xl_mode_t val)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8002e78:	f107 0208 	add.w	r2, r7, #8
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	2110      	movs	r1, #16
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff febb 	bl	8002bfc <lsm6dsv16x_read_reg>
 8002e86:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10f      	bne.n	8002eae <lsm6dsv16x_xl_mode_set+0x42>
  {
    ctrl1.op_mode_xl = (uint8_t)val & 0x07U;
 8002e8e:	78fb      	ldrb	r3, [r7, #3]
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	7a3b      	ldrb	r3, [r7, #8]
 8002e98:	f362 1306 	bfi	r3, r2, #4, #3
 8002e9c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8002e9e:	f107 0208 	add.w	r2, r7, #8
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	2110      	movs	r1, #16
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff fec0 	bl	8002c2c <lsm6dsv16x_write_reg>
 8002eac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002eae:	68fb      	ldr	r3, [r7, #12]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8002ec4:	f107 0210 	add.w	r2, r7, #16
 8002ec8:	2301      	movs	r3, #1
 8002eca:	2111      	movs	r1, #17
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7ff fe95 	bl	8002bfc <lsm6dsv16x_read_reg>
 8002ed2:	6178      	str	r0, [r7, #20]
  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	7c3b      	ldrb	r3, [r7, #16]
 8002ede:	f362 0303 	bfi	r3, r2, #0, #4
 8002ee2:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8002ee4:	f107 0210 	add.w	r2, r7, #16
 8002ee8:	2301      	movs	r3, #1
 8002eea:	2111      	movs	r1, #17
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7ff fe9d 	bl	8002c2c <lsm6dsv16x_write_reg>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <lsm6dsv16x_gy_data_rate_set+0x4c>
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	e024      	b.n	8002f4e <lsm6dsv16x_gy_data_rate_set+0x96>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	091b      	lsrs	r3, r3, #4
 8002f08:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8002f0a:	7cfb      	ldrb	r3, [r7, #19]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d01d      	beq.n	8002f4c <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8002f10:	f107 020c 	add.w	r2, r7, #12
 8002f14:	2301      	movs	r3, #1
 8002f16:	2162      	movs	r1, #98	@ 0x62
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff fe6f 	bl	8002bfc <lsm6dsv16x_read_reg>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	4413      	add	r3, r2
 8002f24:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8002f26:	7cfb      	ldrb	r3, [r7, #19]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	7b3b      	ldrb	r3, [r7, #12]
 8002f30:	f362 0301 	bfi	r3, r2, #0, #2
 8002f34:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8002f36:	f107 020c 	add.w	r2, r7, #12
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	2162      	movs	r1, #98	@ 0x62
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff fe74 	bl	8002c2c <lsm6dsv16x_write_reg>
 8002f44:	4602      	mov	r2, r0
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	4413      	add	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002f4c:	697b      	ldr	r3, [r7, #20]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <lsm6dsv16x_gy_mode_set>:
  * @param  val      GY_HIGH_PERFORMANCE_MD, GY_HIGH_ACCURACY_ODR_MD, GY_SLEEP_MD, GY_LOW_POWER_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_gy_mode_t val)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b084      	sub	sp, #16
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8002f62:	f107 0208 	add.w	r2, r7, #8
 8002f66:	2301      	movs	r3, #1
 8002f68:	2111      	movs	r1, #17
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff fe46 	bl	8002bfc <lsm6dsv16x_read_reg>
 8002f70:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10f      	bne.n	8002f98 <lsm6dsv16x_gy_mode_set+0x42>
  {
    ctrl2.op_mode_g = (uint8_t)val & 0x07U;
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	7a3b      	ldrb	r3, [r7, #8]
 8002f82:	f362 1306 	bfi	r3, r2, #4, #3
 8002f86:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8002f88:	f107 0208 	add.w	r2, r7, #8
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	2111      	movs	r1, #17
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff fe4b 	bl	8002c2c <lsm6dsv16x_write_reg>
 8002f96:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002f98:	68fb      	ldr	r3, [r7, #12]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	460b      	mov	r3, r1
 8002fac:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8002fae:	f107 0208 	add.w	r2, r7, #8
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	2112      	movs	r1, #18
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff fe20 	bl	8002bfc <lsm6dsv16x_read_reg>
 8002fbc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10f      	bne.n	8002fe4 <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	7a3b      	ldrb	r3, [r7, #8]
 8002fce:	f362 1386 	bfi	r3, r2, #6, #1
 8002fd2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8002fd4:	f107 0208 	add.w	r2, r7, #8
 8002fd8:	2301      	movs	r3, #1
 8002fda:	2112      	movs	r1, #18
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7ff fe25 	bl	8002c2c <lsm6dsv16x_write_reg>
 8002fe2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <lsm6dsv16x_odr_trig_cfg_set>:
  * @param  val      number of data in the reference period.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_odr_trig_cfg_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_odr_trig_cfg_t odr_trig;
  int32_t ret;

  if (val >= 1U && val <= 3U) {
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <lsm6dsv16x_odr_trig_cfg_set+0x1e>
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	2b03      	cmp	r3, #3
 8003004:	d802      	bhi.n	800300c <lsm6dsv16x_odr_trig_cfg_set+0x1e>
    return -1;
 8003006:	f04f 33ff 	mov.w	r3, #4294967295
 800300a:	e015      	b.n	8003038 <lsm6dsv16x_odr_trig_cfg_set+0x4a>
  }

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 800300c:	f107 0208 	add.w	r2, r7, #8
 8003010:	2301      	movs	r3, #1
 8003012:	2106      	movs	r1, #6
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff fdf1 	bl	8002bfc <lsm6dsv16x_read_reg>
 800301a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d109      	bne.n	8003036 <lsm6dsv16x_odr_trig_cfg_set+0x48>
  {
    odr_trig.odr_trig_nodr = val;
 8003022:	78fb      	ldrb	r3, [r7, #3]
 8003024:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 8003026:	f107 0208 	add.w	r2, r7, #8
 800302a:	2301      	movs	r3, #1
 800302c:	2106      	movs	r1, #6
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff fdfc 	bl	8002c2c <lsm6dsv16x_write_reg>
 8003034:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003036:	68fb      	ldr	r3, [r7, #12]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 800304c:	f107 0208 	add.w	r2, r7, #8
 8003050:	2301      	movs	r3, #1
 8003052:	2115      	movs	r1, #21
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff fdd1 	bl	8002bfc <lsm6dsv16x_read_reg>
 800305a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10f      	bne.n	8003082 <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 8003062:	78fb      	ldrb	r3, [r7, #3]
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	b2da      	uxtb	r2, r3
 800306a:	7a3b      	ldrb	r3, [r7, #8]
 800306c:	f362 0303 	bfi	r3, r2, #0, #4
 8003070:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8003072:	f107 0208 	add.w	r2, r7, #8
 8003076:	2301      	movs	r3, #1
 8003078:	2115      	movs	r1, #21
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff fdd6 	bl	8002c2c <lsm6dsv16x_write_reg>
 8003080:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003082:	68fb      	ldr	r3, [r7, #12]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8003098:	f107 0208 	add.w	r2, r7, #8
 800309c:	2301      	movs	r3, #1
 800309e:	2117      	movs	r1, #23
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff fdab 	bl	8002bfc <lsm6dsv16x_read_reg>
 80030a6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10f      	bne.n	80030ce <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 80030ae:	78fb      	ldrb	r3, [r7, #3]
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	7a3b      	ldrb	r3, [r7, #8]
 80030b8:	f362 0301 	bfi	r3, r2, #0, #2
 80030bc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 80030be:	f107 0208 	add.w	r2, r7, #8
 80030c2:	2301      	movs	r3, #1
 80030c4:	2117      	movs	r1, #23
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff fdb0 	bl	8002c2c <lsm6dsv16x_write_reg>
 80030cc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80030ce:	68fb      	ldr	r3, [r7, #12]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <lsm6dsv16x_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsv16x_pin_int1_route_set(stmdev_ctx_t *ctx,
                                      lsm6dsv16x_pin_int_route_t *val)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_int1_ctrl_t          int1_ctrl;
  lsm6dsv16x_md1_cfg_t            md1_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 80030e2:	f107 0210 	add.w	r2, r7, #16
 80030e6:	2301      	movs	r3, #1
 80030e8:	210d      	movs	r1, #13
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff fd86 	bl	8002bfc <lsm6dsv16x_read_reg>
 80030f0:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <lsm6dsv16x_pin_int1_route_set+0x24>
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	e0a0      	b.n	800323e <lsm6dsv16x_pin_int1_route_set+0x166>

  int1_ctrl.int1_drdy_xl       = val->drdy_xl;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003104:	b2da      	uxtb	r2, r3
 8003106:	7c3b      	ldrb	r3, [r7, #16]
 8003108:	f362 0300 	bfi	r3, r2, #0, #1
 800310c:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_drdy_g        = val->drdy_g;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003116:	b2da      	uxtb	r2, r3
 8003118:	7c3b      	ldrb	r3, [r7, #16]
 800311a:	f362 0341 	bfi	r3, r2, #1, #1
 800311e:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_th       = val->fifo_th;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003128:	b2da      	uxtb	r2, r3
 800312a:	7c3b      	ldrb	r3, [r7, #16]
 800312c:	f362 03c3 	bfi	r3, r2, #3, #1
 8003130:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_ovr      = val->fifo_ovr;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800313a:	b2da      	uxtb	r2, r3
 800313c:	7c3b      	ldrb	r3, [r7, #16]
 800313e:	f362 1304 	bfi	r3, r2, #4, #1
 8003142:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_full     = val->fifo_full;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800314c:	b2da      	uxtb	r2, r3
 800314e:	7c3b      	ldrb	r3, [r7, #16]
 8003150:	f362 1345 	bfi	r3, r2, #5, #1
 8003154:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_cnt_bdr       = val->cnt_bdr;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800315e:	b2da      	uxtb	r2, r3
 8003160:	7c3b      	ldrb	r3, [r7, #16]
 8003162:	f362 1386 	bfi	r3, r2, #6, #1
 8003166:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003168:	f107 0210 	add.w	r2, r7, #16
 800316c:	2301      	movs	r3, #1
 800316e:	210d      	movs	r1, #13
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff fd5b 	bl	8002c2c <lsm6dsv16x_write_reg>
 8003176:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <lsm6dsv16x_pin_int1_route_set+0xaa>
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	e05d      	b.n	800323e <lsm6dsv16x_pin_int1_route_set+0x166>

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8003182:	f107 020c 	add.w	r2, r7, #12
 8003186:	2301      	movs	r3, #1
 8003188:	215e      	movs	r1, #94	@ 0x5e
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7ff fd36 	bl	8002bfc <lsm6dsv16x_read_reg>
 8003190:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <lsm6dsv16x_pin_int1_route_set+0xc4>
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	e050      	b.n	800323e <lsm6dsv16x_pin_int1_route_set+0x166>

  md1_cfg.int1_shub            = val->shub;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	785b      	ldrb	r3, [r3, #1]
 80031a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	7b3b      	ldrb	r3, [r7, #12]
 80031a8:	f362 0300 	bfi	r3, r2, #0, #1
 80031ac:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_emb_func        = val->emb_func;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	785b      	ldrb	r3, [r3, #1]
 80031b2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	7b3b      	ldrb	r3, [r7, #12]
 80031ba:	f362 0341 	bfi	r3, r2, #1, #1
 80031be:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_6d              = val->sixd;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	785b      	ldrb	r3, [r3, #1]
 80031c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	7b3b      	ldrb	r3, [r7, #12]
 80031cc:	f362 0382 	bfi	r3, r2, #2, #1
 80031d0:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_single_tap      = val->single_tap;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	785b      	ldrb	r3, [r3, #1]
 80031d6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	7b3b      	ldrb	r3, [r7, #12]
 80031de:	f362 1386 	bfi	r3, r2, #6, #1
 80031e2:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_double_tap      = val->double_tap;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	785b      	ldrb	r3, [r3, #1]
 80031e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	7b3b      	ldrb	r3, [r7, #12]
 80031f0:	f362 03c3 	bfi	r3, r2, #3, #1
 80031f4:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_wu              = val->wakeup;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	785b      	ldrb	r3, [r3, #1]
 80031fa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	7b3b      	ldrb	r3, [r7, #12]
 8003202:	f362 1345 	bfi	r3, r2, #5, #1
 8003206:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_ff              = val->freefall;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	785b      	ldrb	r3, [r3, #1]
 800320c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003210:	b2da      	uxtb	r2, r3
 8003212:	7b3b      	ldrb	r3, [r7, #12]
 8003214:	f362 1304 	bfi	r3, r2, #4, #1
 8003218:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_sleep_change    = val->sleep_change;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	789b      	ldrb	r3, [r3, #2]
 800321e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003222:	b2da      	uxtb	r2, r3
 8003224:	7b3b      	ldrb	r3, [r7, #12]
 8003226:	f362 13c7 	bfi	r3, r2, #7, #1
 800322a:	733b      	strb	r3, [r7, #12]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 800322c:	f107 020c 	add.w	r2, r7, #12
 8003230:	2301      	movs	r3, #1
 8003232:	215e      	movs	r1, #94	@ 0x5e
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff fcf9 	bl	8002c2c <lsm6dsv16x_write_reg>
 800323a:	6178      	str	r0, [r7, #20]

  return ret;
 800323c:	697b      	ldr	r3, [r7, #20]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <lsm6dsv16x_den_polarity_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_den_polarity_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_den_polarity_t val)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	460b      	mov	r3, r1
 8003250:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl4_t ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 8003252:	f107 0208 	add.w	r2, r7, #8
 8003256:	2301      	movs	r3, #1
 8003258:	2113      	movs	r1, #19
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff fcce 	bl	8002bfc <lsm6dsv16x_read_reg>
 8003260:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10f      	bne.n	8003288 <lsm6dsv16x_den_polarity_set+0x42>
  {
    ctrl4.int2_in_lh = (uint8_t)val & 0x1U;
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	b2da      	uxtb	r2, r3
 8003270:	7a3b      	ldrb	r3, [r7, #8]
 8003272:	f362 0300 	bfi	r3, r2, #0, #1
 8003276:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 8003278:	f107 0208 	add.w	r2, r7, #8
 800327c:	2301      	movs	r3, #1
 800327e:	2113      	movs	r1, #19
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7ff fcd3 	bl	8002c2c <lsm6dsv16x_write_reg>
 8003286:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003288:	68fb      	ldr	r3, [r7, #12]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <lsm6dsv16x_fifo_watermark_set>:
  * @param  val      FIFO watermark threshold (1 LSb = TAG (1 Byte) + 1 sensor (6 Bytes) written in FIFO).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_watermark_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	460b      	mov	r3, r1
 800329c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl1_t fifo_ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 800329e:	f107 0208 	add.w	r2, r7, #8
 80032a2:	2301      	movs	r3, #1
 80032a4:	2107      	movs	r1, #7
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff fca8 	bl	8002bfc <lsm6dsv16x_read_reg>
 80032ac:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d109      	bne.n	80032c8 <lsm6dsv16x_fifo_watermark_set+0x36>
  {
    fifo_ctrl1.wtm = val;
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 80032b8:	f107 0208 	add.w	r2, r7, #8
 80032bc:	2301      	movs	r3, #1
 80032be:	2107      	movs	r1, #7
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff fcb3 	bl	8002c2c <lsm6dsv16x_write_reg>
 80032c6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80032c8:	68fb      	ldr	r3, [r7, #12]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <lsm6dsv16x_fifo_xl_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_xl_batch_t val)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	460b      	mov	r3, r1
 80032dc:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 80032de:	f107 0208 	add.w	r2, r7, #8
 80032e2:	2301      	movs	r3, #1
 80032e4:	2109      	movs	r1, #9
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7ff fc88 	bl	8002bfc <lsm6dsv16x_read_reg>
 80032ec:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10f      	bne.n	8003314 <lsm6dsv16x_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val & 0xFu;
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	7a3b      	ldrb	r3, [r7, #8]
 80032fe:	f362 0303 	bfi	r3, r2, #0, #4
 8003302:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8003304:	f107 0208 	add.w	r2, r7, #8
 8003308:	2301      	movs	r3, #1
 800330a:	2109      	movs	r1, #9
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff fc8d 	bl	8002c2c <lsm6dsv16x_write_reg>
 8003312:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003314:	68fb      	ldr	r3, [r7, #12]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <lsm6dsv16x_fifo_gy_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_gy_batch_t val)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	460b      	mov	r3, r1
 8003328:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 800332a:	f107 0208 	add.w	r2, r7, #8
 800332e:	2301      	movs	r3, #1
 8003330:	2109      	movs	r1, #9
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff fc62 	bl	8002bfc <lsm6dsv16x_read_reg>
 8003338:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10f      	bne.n	8003360 <lsm6dsv16x_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val & 0x0Fu;
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	b2da      	uxtb	r2, r3
 8003348:	7a3b      	ldrb	r3, [r7, #8]
 800334a:	f362 1307 	bfi	r3, r2, #4, #4
 800334e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8003350:	f107 0208 	add.w	r2, r7, #8
 8003354:	2301      	movs	r3, #1
 8003356:	2109      	movs	r1, #9
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff fc67 	bl	8002c2c <lsm6dsv16x_write_reg>
 800335e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003360:	68fb      	ldr	r3, [r7, #12]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b084      	sub	sp, #16
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
 8003372:	460b      	mov	r3, r1
 8003374:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8003376:	f107 0208 	add.w	r2, r7, #8
 800337a:	2301      	movs	r3, #1
 800337c:	210a      	movs	r1, #10
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff fc3c 	bl	8002bfc <lsm6dsv16x_read_reg>
 8003384:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10f      	bne.n	80033ac <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 800338c:	78fb      	ldrb	r3, [r7, #3]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	b2da      	uxtb	r2, r3
 8003394:	7a3b      	ldrb	r3, [r7, #8]
 8003396:	f362 0302 	bfi	r3, r2, #0, #3
 800339a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 800339c:	f107 0208 	add.w	r2, r7, #8
 80033a0:	2301      	movs	r3, #1
 80033a2:	210a      	movs	r1, #10
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff fc41 	bl	8002c2c <lsm6dsv16x_write_reg>
 80033aa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80033ac:	68fb      	ldr	r3, [r7, #12]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <lsm6dsv16x_ui_i2c_i3c_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ui_i2c_i3c_mode_set(stmdev_ctx_t *ctx,
                                       lsm6dsv16x_ui_i2c_i3c_mode_t val)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	460b      	mov	r3, r1
 80033c0:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_if_cfg_t if_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 80033c2:	f107 0208 	add.w	r2, r7, #8
 80033c6:	2301      	movs	r3, #1
 80033c8:	2103      	movs	r1, #3
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff fc16 	bl	8002bfc <lsm6dsv16x_read_reg>
 80033d0:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10f      	bne.n	80033f8 <lsm6dsv16x_ui_i2c_i3c_mode_set+0x42>
  {
    if_cfg.i2c_i3c_disable = (uint8_t)val & 0x1U;
 80033d8:	78fb      	ldrb	r3, [r7, #3]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	7a3b      	ldrb	r3, [r7, #8]
 80033e2:	f362 0300 	bfi	r3, r2, #0, #1
 80033e6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 80033e8:	f107 0208 	add.w	r2, r7, #8
 80033ec:	2301      	movs	r3, #1
 80033ee:	2103      	movs	r1, #3
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff fc1b 	bl	8002c2c <lsm6dsv16x_write_reg>
 80033f6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80033f8:	68fb      	ldr	r3, [r7, #12]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <acc_write>:
#include "global_variables.h"
#include "peripherals.h"

/* -------------SCRITTURA ACCELEROMETRO-------------*/
int32_t acc_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b084      	sub	sp, #16
 8003406:	af00      	add	r7, sp, #0
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	461a      	mov	r2, r3
 800340e:	460b      	mov	r3, r1
 8003410:	72fb      	strb	r3, [r7, #11]
 8003412:	4613      	mov	r3, r2
 8003414:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8003416:	2200      	movs	r2, #0
 8003418:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800341c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003420:	f009 ffa0 	bl	800d364 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8003424:	f107 010b 	add.w	r1, r7, #11
 8003428:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800342c:	2201      	movs	r2, #1
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f00d fa21 	bl	8010876 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 8003434:	893a      	ldrh	r2, [r7, #8]
 8003436:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f00d fa1a 	bl	8010876 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 8003442:	2201      	movs	r2, #1
 8003444:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003448:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800344c:	f009 ff8a 	bl	800d364 <HAL_GPIO_WritePin>
	return 0;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <acc_read>:

/* -------------LETTURA ACCELEROMETRO-------------*/
int32_t acc_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b084      	sub	sp, #16
 800345e:	af00      	add	r7, sp, #0
 8003460:	60f8      	str	r0, [r7, #12]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	461a      	mov	r2, r3
 8003466:	460b      	mov	r3, r1
 8003468:	72fb      	strb	r3, [r7, #11]
 800346a:	4613      	mov	r3, r2
 800346c:	813b      	strh	r3, [r7, #8]
	reg |= 0x80;
 800346e:	7afb      	ldrb	r3, [r7, #11]
 8003470:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003474:	b2db      	uxtb	r3, r3
 8003476:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8003478:	2200      	movs	r2, #0
 800347a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800347e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003482:	f009 ff6f 	bl	800d364 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8003486:	f107 010b 	add.w	r1, r7, #11
 800348a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800348e:	2201      	movs	r2, #1
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f00d f9f0 	bl	8010876 <HAL_SPI_Transmit>
	HAL_SPI_Receive(handle, bufp, len, 1000);
 8003496:	893a      	ldrh	r2, [r7, #8]
 8003498:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f00d fb5f 	bl	8010b62 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 80034a4:	2201      	movs	r2, #1
 80034a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034ae:	f009 ff59 	bl	800d364 <HAL_GPIO_WritePin>
	return 0;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80034c0:	f3bf 8f4f 	dsb	sy
}
 80034c4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80034c6:	4b06      	ldr	r3, [pc, #24]	@ (80034e0 <__NVIC_SystemReset+0x24>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80034ce:	4904      	ldr	r1, [pc, #16]	@ (80034e0 <__NVIC_SystemReset+0x24>)
 80034d0:	4b04      	ldr	r3, [pc, #16]	@ (80034e4 <__NVIC_SystemReset+0x28>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80034d6:	f3bf 8f4f 	dsb	sy
}
 80034da:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80034dc:	bf00      	nop
 80034de:	e7fd      	b.n	80034dc <__NVIC_SystemReset+0x20>
 80034e0:	e000ed00 	.word	0xe000ed00
 80034e4:	05fa0004 	.word	0x05fa0004

080034e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ea:	b091      	sub	sp, #68	@ 0x44
 80034ec:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034ee:	f006 fd22 	bl	8009f36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034f2:	f000 fa4f 	bl	8003994 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034f6:	f000 ff23 	bl	8004340 <MX_GPIO_Init>
  MX_DMA_Init();
 80034fa:	f000 fef3 	bl	80042e4 <MX_DMA_Init>
  MX_QUADSPI_Init();
 80034fe:	f000 fb75 	bl	8003bec <MX_QUADSPI_Init>
  MX_SPI2_Init();
 8003502:	f000 fc2b 	bl	8003d5c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8003506:	f000 febd 	bl	8004284 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800350a:	f000 fa95 	bl	8003a38 <MX_ADC1_Init>
  MX_I2C3_Init();
 800350e:	f000 fb2d 	bl	8003b6c <MX_I2C3_Init>
  MX_TIM2_Init();
 8003512:	f000 fd47 	bl	8003fa4 <MX_TIM2_Init>
  MX_UART4_Init();
 8003516:	f000 fe85 	bl	8004224 <MX_UART4_Init>
  MX_TIM1_Init();
 800351a:	f000 fc9b 	bl	8003e54 <MX_TIM1_Init>
  MX_CRC_Init();
 800351e:	f000 fb03 	bl	8003b28 <MX_CRC_Init>
  MX_TIM4_Init();
 8003522:	f000 fe0b 	bl	800413c <MX_TIM4_Init>
  MX_RTC_Init();
 8003526:	f000 fb87 	bl	8003c38 <MX_RTC_Init>
  MX_SPI3_Init();
 800352a:	f000 fc55 	bl	8003dd8 <MX_SPI3_Init>
  MX_TIM3_Init();
 800352e:	f000 fd8d 	bl	800404c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	System_Init();
 8003532:	f7ff f877 	bl	8002624 <System_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		switch(state)
 8003536:	4b88      	ldr	r3, [pc, #544]	@ (8003758 <main+0x270>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b03      	cmp	r3, #3
 800353c:	f200 81ff 	bhi.w	800393e <main+0x456>
 8003540:	a201      	add	r2, pc, #4	@ (adr r2, 8003548 <main+0x60>)
 8003542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003546:	bf00      	nop
 8003548:	08003559 	.word	0x08003559
 800354c:	08003611 	.word	0x08003611
 8003550:	0800361d 	.word	0x0800361d
 8003554:	0800386d 	.word	0x0800386d
		{
		case IDLE:
        if(flags.MQTT_Message_Rx)
 8003558:	4b80      	ldr	r3, [pc, #512]	@ (800375c <main+0x274>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d006      	beq.n	8003574 <main+0x8c>
        {
            SIM_Parse_Command();
 8003566:	f7fd fe9f 	bl	80012a8 <SIM_Parse_Command>
            flags.MQTT_Message_Rx = 0;
 800356a:	4a7c      	ldr	r2, [pc, #496]	@ (800375c <main+0x274>)
 800356c:	7813      	ldrb	r3, [r2, #0]
 800356e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003572:	7013      	strb	r3, [r2, #0]
        }
        if(flags.CMD.Start_Meas)
 8003574:	4b79      	ldr	r3, [pc, #484]	@ (800375c <main+0x274>)
 8003576:	789b      	ldrb	r3, [r3, #2]
 8003578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d008      	beq.n	8003594 <main+0xac>
        {
            state = MEASURE_INIT_STATE;
 8003582:	4b75      	ldr	r3, [pc, #468]	@ (8003758 <main+0x270>)
 8003584:	2201      	movs	r2, #1
 8003586:	701a      	strb	r2, [r3, #0]
            flags.CMD.Start_Meas = 0;
 8003588:	4a74      	ldr	r2, [pc, #464]	@ (800375c <main+0x274>)
 800358a:	7893      	ldrb	r3, [r2, #2]
 800358c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003590:	7093      	strb	r3, [r2, #2]
        else if(flags.CMD.Ping)
        {
            SIM_Send_Infos();
            flags.CMD.Ping = 0;
        }
        break;
 8003592:	e1d6      	b.n	8003942 <main+0x45a>
        else if(flags.CMD.Set_Config)
 8003594:	4b71      	ldr	r3, [pc, #452]	@ (800375c <main+0x274>)
 8003596:	789b      	ldrb	r3, [r3, #2]
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d007      	beq.n	80035b2 <main+0xca>
            Apply_Config();
 80035a2:	f002 f9b7 	bl	8005914 <Apply_Config>
            flags.CMD.Set_Config = 0;
 80035a6:	4a6d      	ldr	r2, [pc, #436]	@ (800375c <main+0x274>)
 80035a8:	7893      	ldrb	r3, [r2, #2]
 80035aa:	f023 0310 	bic.w	r3, r3, #16
 80035ae:	7093      	strb	r3, [r2, #2]
        break;
 80035b0:	e1c7      	b.n	8003942 <main+0x45a>
        else if(flags.CMD.Get_Config)
 80035b2:	4b6a      	ldr	r3, [pc, #424]	@ (800375c <main+0x274>)
 80035b4:	789b      	ldrb	r3, [r3, #2]
 80035b6:	f003 0320 	and.w	r3, r3, #32
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d007      	beq.n	80035d0 <main+0xe8>
            Get_Config();
 80035c0:	f002 fb2e 	bl	8005c20 <Get_Config>
            flags.CMD.Get_Config = 0;
 80035c4:	4a65      	ldr	r2, [pc, #404]	@ (800375c <main+0x274>)
 80035c6:	7893      	ldrb	r3, [r2, #2]
 80035c8:	f023 0320 	bic.w	r3, r3, #32
 80035cc:	7093      	strb	r3, [r2, #2]
        break;
 80035ce:	e1b8      	b.n	8003942 <main+0x45a>
        else if(flags.CMD.Start_OTA)
 80035d0:	4b62      	ldr	r3, [pc, #392]	@ (800375c <main+0x274>)
 80035d2:	789b      	ldrb	r3, [r3, #2]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d008      	beq.n	80035f0 <main+0x108>
            state = OTA_STATE;
 80035de:	4b5e      	ldr	r3, [pc, #376]	@ (8003758 <main+0x270>)
 80035e0:	2203      	movs	r2, #3
 80035e2:	701a      	strb	r2, [r3, #0]
            flags.CMD.Start_OTA = 0;
 80035e4:	4a5d      	ldr	r2, [pc, #372]	@ (800375c <main+0x274>)
 80035e6:	7893      	ldrb	r3, [r2, #2]
 80035e8:	f023 0304 	bic.w	r3, r3, #4
 80035ec:	7093      	strb	r3, [r2, #2]
        break;
 80035ee:	e1a8      	b.n	8003942 <main+0x45a>
        else if(flags.CMD.Ping)
 80035f0:	4b5a      	ldr	r3, [pc, #360]	@ (800375c <main+0x274>)
 80035f2:	789b      	ldrb	r3, [r3, #2]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 81a1 	beq.w	8003942 <main+0x45a>
            SIM_Send_Infos();
 8003600:	f7fe f918 	bl	8001834 <SIM_Send_Infos>
            flags.CMD.Ping = 0;
 8003604:	4a55      	ldr	r2, [pc, #340]	@ (800375c <main+0x274>)
 8003606:	7893      	ldrb	r3, [r2, #2]
 8003608:	f023 0308 	bic.w	r3, r3, #8
 800360c:	7093      	strb	r3, [r2, #2]
        break;
 800360e:	e198      	b.n	8003942 <main+0x45a>

		case MEASURE_INIT_STATE:
			Start_Measure();
 8003610:	f001 fc90 	bl	8004f34 <Start_Measure>
			state = MEASURING_STATE;
 8003614:	4b50      	ldr	r3, [pc, #320]	@ (8003758 <main+0x270>)
 8003616:	2202      	movs	r2, #2
 8003618:	701a      	strb	r2, [r3, #0]
        break;
 800361a:	e195      	b.n	8003948 <main+0x460>

		case MEASURING_STATE:
        if(flags.ADC_Complete && flags.ACC_Complete)
 800361c:	4b4f      	ldr	r3, [pc, #316]	@ (800375c <main+0x274>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 818d 	beq.w	8003946 <main+0x45e>
 800362c:	4b4b      	ldr	r3, [pc, #300]	@ (800375c <main+0x274>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 8185 	beq.w	8003946 <main+0x45e>
        {
            Save_Data();
 800363c:	f001 f9d6 	bl	80049ec <Save_Data>
            if(flags.BC_Interrupt)
 8003640:	4b46      	ldr	r3, [pc, #280]	@ (800375c <main+0x274>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d010      	beq.n	8003670 <main+0x188>
            {
                BC_Read_Flags(&sys.BC_Flags);
 800364e:	4844      	ldr	r0, [pc, #272]	@ (8003760 <main+0x278>)
 8003650:	f7fe faae 	bl	8001bb0 <BC_Read_Flags>
                BC_Manage_Interrupts(sys.BC_Flags);
 8003654:	4b43      	ldr	r3, [pc, #268]	@ (8003764 <main+0x27c>)
 8003656:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800365a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800365e:	4610      	mov	r0, r2
 8003660:	4619      	mov	r1, r3
 8003662:	f7fe fb53 	bl	8001d0c <BC_Manage_Interrupts>
                flags.BC_Interrupt = 0;
 8003666:	4a3d      	ldr	r2, [pc, #244]	@ (800375c <main+0x274>)
 8003668:	7813      	ldrb	r3, [r2, #0]
 800366a:	f023 0320 	bic.w	r3, r3, #32
 800366e:	7013      	strb	r3, [r2, #0]
            }
            if(flags.MQTT_Message_Rx)
 8003670:	4b3a      	ldr	r3, [pc, #232]	@ (800375c <main+0x274>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d006      	beq.n	800368c <main+0x1a4>
            {
                SIM_Parse_Command();
 800367e:	f7fd fe13 	bl	80012a8 <SIM_Parse_Command>
                flags.MQTT_Message_Rx = 0;
 8003682:	4a36      	ldr	r2, [pc, #216]	@ (800375c <main+0x274>)
 8003684:	7813      	ldrb	r3, [r2, #0]
 8003686:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800368a:	7013      	strb	r3, [r2, #0]
            }
            if(flags.CMD.Data_Request)
 800368c:	4b33      	ldr	r3, [pc, #204]	@ (800375c <main+0x274>)
 800368e:	789b      	ldrb	r3, [r3, #2]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d04c      	beq.n	8003734 <main+0x24c>
            {
                sprintf(MQTT_Logging, "%u:%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", config.device_id, Last_Pressure, Last_Volume, Last_Acceleration.x, Last_Acceleration.y, Last_Acceleration.z, Supply.i1, Supply.i2, Supply.i3, Supply.v1, Supply.v2, Supply.v3, Temperature);
 800369a:	4b33      	ldr	r3, [pc, #204]	@ (8003768 <main+0x280>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	469c      	mov	ip, r3
 80036a0:	4b32      	ldr	r3, [pc, #200]	@ (800376c <main+0x284>)
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	469e      	mov	lr, r3
 80036a6:	4b32      	ldr	r3, [pc, #200]	@ (8003770 <main+0x288>)
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	4b31      	ldr	r3, [pc, #196]	@ (8003774 <main+0x28c>)
 80036ae:	885b      	ldrh	r3, [r3, #2]
 80036b0:	4619      	mov	r1, r3
 80036b2:	4b30      	ldr	r3, [pc, #192]	@ (8003774 <main+0x28c>)
 80036b4:	889b      	ldrh	r3, [r3, #4]
 80036b6:	4618      	mov	r0, r3
 80036b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003774 <main+0x28c>)
 80036ba:	88db      	ldrh	r3, [r3, #6]
 80036bc:	461c      	mov	r4, r3
 80036be:	4b2e      	ldr	r3, [pc, #184]	@ (8003778 <main+0x290>)
 80036c0:	88db      	ldrh	r3, [r3, #6]
 80036c2:	461d      	mov	r5, r3
 80036c4:	4b2c      	ldr	r3, [pc, #176]	@ (8003778 <main+0x290>)
 80036c6:	891b      	ldrh	r3, [r3, #8]
 80036c8:	461e      	mov	r6, r3
 80036ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003778 <main+0x290>)
 80036cc:	895b      	ldrh	r3, [r3, #10]
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	4b29      	ldr	r3, [pc, #164]	@ (8003778 <main+0x290>)
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	4b28      	ldr	r3, [pc, #160]	@ (8003778 <main+0x290>)
 80036d8:	885b      	ldrh	r3, [r3, #2]
 80036da:	607b      	str	r3, [r7, #4]
 80036dc:	4b26      	ldr	r3, [pc, #152]	@ (8003778 <main+0x290>)
 80036de:	889b      	ldrh	r3, [r3, #4]
 80036e0:	603b      	str	r3, [r7, #0]
 80036e2:	4b26      	ldr	r3, [pc, #152]	@ (800377c <main+0x294>)
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	9308      	str	r3, [sp, #32]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	9307      	str	r3, [sp, #28]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	9306      	str	r3, [sp, #24]
 80036f8:	9605      	str	r6, [sp, #20]
 80036fa:	9504      	str	r5, [sp, #16]
 80036fc:	9403      	str	r4, [sp, #12]
 80036fe:	9002      	str	r0, [sp, #8]
 8003700:	9101      	str	r1, [sp, #4]
 8003702:	9200      	str	r2, [sp, #0]
 8003704:	4673      	mov	r3, lr
 8003706:	4662      	mov	r2, ip
 8003708:	491d      	ldr	r1, [pc, #116]	@ (8003780 <main+0x298>)
 800370a:	481e      	ldr	r0, [pc, #120]	@ (8003784 <main+0x29c>)
 800370c:	f011 fc9c 	bl	8015048 <siprintf>
                SIM_publish_MQTT_Message_DMA(NULL, MQTT_Logging);
 8003710:	491c      	ldr	r1, [pc, #112]	@ (8003784 <main+0x29c>)
 8003712:	2000      	movs	r0, #0
 8003714:	f7fd ffb0 	bl	8001678 <SIM_publish_MQTT_Message_DMA>
                sys.SIM_Prompt_Status = HAL_GetTick();
 8003718:	f006 fc76 	bl	800a008 <HAL_GetTick>
 800371c:	4603      	mov	r3, r0
 800371e:	4a11      	ldr	r2, [pc, #68]	@ (8003764 <main+0x27c>)
 8003720:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003724:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
                flags.CMD.Data_Request = 0;
 8003728:	4a0c      	ldr	r2, [pc, #48]	@ (800375c <main+0x274>)
 800372a:	7893      	ldrb	r3, [r2, #2]
 800372c:	f023 0301 	bic.w	r3, r3, #1
 8003730:	7093      	strb	r3, [r2, #2]
 8003732:	e06c      	b.n	800380e <main+0x326>
            }
            else if(flags.CMD.Idle)
 8003734:	4b09      	ldr	r3, [pc, #36]	@ (800375c <main+0x274>)
 8003736:	789b      	ldrb	r3, [r3, #2]
 8003738:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d022      	beq.n	8003788 <main+0x2a0>
            {
                state = IDLE;
 8003742:	4b05      	ldr	r3, [pc, #20]	@ (8003758 <main+0x270>)
 8003744:	2200      	movs	r2, #0
 8003746:	701a      	strb	r2, [r3, #0]
                Stop_Measure();
 8003748:	f001 fcaa 	bl	80050a0 <Stop_Measure>
                flags.CMD.Idle = 0;
 800374c:	4a03      	ldr	r2, [pc, #12]	@ (800375c <main+0x274>)
 800374e:	7893      	ldrb	r3, [r2, #2]
 8003750:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003754:	7093      	strb	r3, [r2, #2]
 8003756:	e05a      	b.n	800380e <main+0x326>
 8003758:	2000073c 	.word	0x2000073c
 800375c:	20001c50 	.word	0x20001c50
 8003760:	20001778 	.word	0x20001778
 8003764:	20000740 	.word	0x20000740
 8003768:	20001c54 	.word	0x20001c54
 800376c:	200046f4 	.word	0x200046f4
 8003770:	200046f6 	.word	0x200046f6
 8003774:	200046f8 	.word	0x200046f8
 8003778:	20003e24 	.word	0x20003e24
 800377c:	20004700 	.word	0x20004700
 8003780:	080165fc 	.word	0x080165fc
 8003784:	20004704 	.word	0x20004704
            }
            else if(flags.CMD.Measure_Request)
 8003788:	4b70      	ldr	r3, [pc, #448]	@ (800394c <main+0x464>)
 800378a:	789b      	ldrb	r3, [r3, #2]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d03b      	beq.n	800380e <main+0x326>
            {
                if(!flags.TCP_isSending)
 8003796:	4b6d      	ldr	r3, [pc, #436]	@ (800394c <main+0x464>)
 8003798:	785b      	ldrb	r3, [r3, #1]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d134      	bne.n	800380e <main+0x326>
                {
                    Send_Measure_Addr = Send_Measure_Chunk(sys.RAM_Buffer_Base_tosend, sys.Inactive_RAM_Len, Send_Measure_Addr);
 80037a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003950 <main+0x468>)
 80037a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80037ae:	4a68      	ldr	r2, [pc, #416]	@ (8003950 <main+0x468>)
 80037b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80037b4:	f8d2 10b8 	ldr.w	r1, [r2, #184]	@ 0xb8
 80037b8:	4a66      	ldr	r2, [pc, #408]	@ (8003954 <main+0x46c>)
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f001 fd51 	bl	8005264 <Send_Measure_Chunk>
 80037c2:	4603      	mov	r3, r0
 80037c4:	4a63      	ldr	r2, [pc, #396]	@ (8003954 <main+0x46c>)
 80037c6:	6013      	str	r3, [r2, #0]
                    if(flags.TCP_ReadytoSend)
 80037c8:	4b60      	ldr	r3, [pc, #384]	@ (800394c <main+0x464>)
 80037ca:	785b      	ldrb	r3, [r3, #1]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d01b      	beq.n	800380e <main+0x326>
                    {
                        SIM_Send_Command_DMA(MQTT_Logging);
 80037d6:	4860      	ldr	r0, [pc, #384]	@ (8003958 <main+0x470>)
 80037d8:	f7fd fcc8 	bl	800116c <SIM_Send_Command_DMA>
                        flags.TCP_isSending = 1;
 80037dc:	4a5b      	ldr	r2, [pc, #364]	@ (800394c <main+0x464>)
 80037de:	7853      	ldrb	r3, [r2, #1]
 80037e0:	f043 0304 	orr.w	r3, r3, #4
 80037e4:	7053      	strb	r3, [r2, #1]
                        flags.TCP_ReadytoSend = 0;
 80037e6:	4a59      	ldr	r2, [pc, #356]	@ (800394c <main+0x464>)
 80037e8:	7853      	ldrb	r3, [r2, #1]
 80037ea:	f023 0302 	bic.w	r3, r3, #2
 80037ee:	7053      	strb	r3, [r2, #1]
                        if (Send_Measure_Addr == 0) 
 80037f0:	4b58      	ldr	r3, [pc, #352]	@ (8003954 <main+0x46c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10a      	bne.n	800380e <main+0x326>
                        {
                            memset(tcp_chunk, 0, 1460);
 80037f8:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80037fc:	2100      	movs	r1, #0
 80037fe:	4857      	ldr	r0, [pc, #348]	@ (800395c <main+0x474>)
 8003800:	f011 fc82 	bl	8015108 <memset>
                            flags.CMD.Measure_Request = 0;
 8003804:	4a51      	ldr	r2, [pc, #324]	@ (800394c <main+0x464>)
 8003806:	7893      	ldrb	r3, [r2, #2]
 8003808:	f023 0302 	bic.w	r3, r3, #2
 800380c:	7093      	strb	r3, [r2, #2]
                        }
                    }
                }
            }
            if(flags.MQTT_ReadytoSend)
 800380e:	4b4f      	ldr	r3, [pc, #316]	@ (800394c <main+0x464>)
 8003810:	785b      	ldrb	r3, [r3, #1]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d007      	beq.n	800382c <main+0x344>
            {
                SIM_Send_Command_DMA(MQTT_Logging);
 800381c:	484e      	ldr	r0, [pc, #312]	@ (8003958 <main+0x470>)
 800381e:	f7fd fca5 	bl	800116c <SIM_Send_Command_DMA>
                flags.MQTT_ReadytoSend = 0;
 8003822:	4a4a      	ldr	r2, [pc, #296]	@ (800394c <main+0x464>)
 8003824:	7853      	ldrb	r3, [r2, #1]
 8003826:	f023 0301 	bic.w	r3, r3, #1
 800382a:	7053      	strb	r3, [r2, #1]
            }
            if(sys.SIM_Prompt_Status > 0 && (HAL_GetTick() - sys.SIM_Prompt_Status) > SIM_PROMPT_TIMEOUT_MS)
 800382c:	4b48      	ldr	r3, [pc, #288]	@ (8003950 <main+0x468>)
 800382e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003832:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 8085 	beq.w	8003946 <main+0x45e>
 800383c:	f006 fbe4 	bl	800a008 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	4b43      	ldr	r3, [pc, #268]	@ (8003950 <main+0x468>)
 8003844:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003848:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003852:	4293      	cmp	r3, r2
 8003854:	d977      	bls.n	8003946 <main+0x45e>
            {
                SIM_Send_Command_DMA("AT+SMCONN\r");
 8003856:	4842      	ldr	r0, [pc, #264]	@ (8003960 <main+0x478>)
 8003858:	f7fd fc88 	bl	800116c <SIM_Send_Command_DMA>
                sys.SIM_Prompt_Status = 0;
 800385c:	4b3c      	ldr	r3, [pc, #240]	@ (8003950 <main+0x468>)
 800385e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003862:	461a      	mov	r2, r3
 8003864:	2300      	movs	r3, #0
 8003866:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
            }
        }
        break;
 800386a:	e06c      	b.n	8003946 <main+0x45e>

		case OTA_STATE:
        if(OTA_Init() == HAL_OK)
 800386c:	f000 fe64 	bl	8004538 <OTA_Init>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d155      	bne.n	8003922 <main+0x43a>
        {
            HAL_UART_DMAStop(LTE_UART);
 8003876:	483b      	ldr	r0, [pc, #236]	@ (8003964 <main+0x47c>)
 8003878:	f010 fa6c 	bl	8013d54 <HAL_UART_DMAStop>
            HAL_Delay(100);
 800387c:	2064      	movs	r0, #100	@ 0x64
 800387e:	f006 fbcf 	bl	800a020 <HAL_Delay>
            SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_READY");
 8003882:	4939      	ldr	r1, [pc, #228]	@ (8003968 <main+0x480>)
 8003884:	4839      	ldr	r0, [pc, #228]	@ (800396c <main+0x484>)
 8003886:	f7fd ff41 	bl	800170c <SIM_publish_MQTT_Message>
            if(OTA_Receive() == HAL_OK)
 800388a:	f000 fe81 	bl	8004590 <OTA_Receive>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d138      	bne.n	8003906 <main+0x41e>
            {
                SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_RECEIVED");
 8003894:	4936      	ldr	r1, [pc, #216]	@ (8003970 <main+0x488>)
 8003896:	4835      	ldr	r0, [pc, #212]	@ (800396c <main+0x484>)
 8003898:	f7fd ff38 	bl	800170c <SIM_publish_MQTT_Message>
                if(OTA_CRC_Check() == HAL_OK)
 800389c:	f000 fefc 	bl	8004698 <OTA_CRC_Check>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <main+0x3d2>
                {
                    SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_CRC_OK");
 80038a6:	4933      	ldr	r1, [pc, #204]	@ (8003974 <main+0x48c>)
 80038a8:	4830      	ldr	r0, [pc, #192]	@ (800396c <main+0x484>)
 80038aa:	f7fd ff2f 	bl	800170c <SIM_publish_MQTT_Message>
                    HAL_UARTEx_ReceiveToIdle_DMA(LTE_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
                    state = IDLE;
                    break;
                }

                if(OTA_Apply() == HAL_OK)
 80038ae:	f000 ff9b 	bl	80047e8 <OTA_Apply>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d118      	bne.n	80038ea <main+0x402>
 80038b8:	e00d      	b.n	80038d6 <main+0x3ee>
                    SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_CRC_ERROR");
 80038ba:	492f      	ldr	r1, [pc, #188]	@ (8003978 <main+0x490>)
 80038bc:	482b      	ldr	r0, [pc, #172]	@ (800396c <main+0x484>)
 80038be:	f7fd ff25 	bl	800170c <SIM_publish_MQTT_Message>
                    HAL_UARTEx_ReceiveToIdle_DMA(LTE_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 80038c2:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80038c6:	492d      	ldr	r1, [pc, #180]	@ (800397c <main+0x494>)
 80038c8:	4826      	ldr	r0, [pc, #152]	@ (8003964 <main+0x47c>)
 80038ca:	f011 fadf 	bl	8014e8c <HAL_UARTEx_ReceiveToIdle_DMA>
                    state = IDLE;
 80038ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003980 <main+0x498>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]
                    break;
 80038d4:	e038      	b.n	8003948 <main+0x460>
                {
                    SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_SUCCESS");
 80038d6:	492b      	ldr	r1, [pc, #172]	@ (8003984 <main+0x49c>)
 80038d8:	4824      	ldr	r0, [pc, #144]	@ (800396c <main+0x484>)
 80038da:	f7fd ff17 	bl	800170c <SIM_publish_MQTT_Message>
                    HAL_Delay(500);
 80038de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80038e2:	f006 fb9d 	bl	800a020 <HAL_Delay>
                    NVIC_SystemReset();
 80038e6:	f7ff fde9 	bl	80034bc <__NVIC_SystemReset>
                }
                else
                {
                    SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_APPLY_ERROR");
 80038ea:	4927      	ldr	r1, [pc, #156]	@ (8003988 <main+0x4a0>)
 80038ec:	481f      	ldr	r0, [pc, #124]	@ (800396c <main+0x484>)
 80038ee:	f7fd ff0d 	bl	800170c <SIM_publish_MQTT_Message>
                    HAL_UARTEx_ReceiveToIdle_DMA(LTE_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 80038f2:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80038f6:	4921      	ldr	r1, [pc, #132]	@ (800397c <main+0x494>)
 80038f8:	481a      	ldr	r0, [pc, #104]	@ (8003964 <main+0x47c>)
 80038fa:	f011 fac7 	bl	8014e8c <HAL_UARTEx_ReceiveToIdle_DMA>
                    state = IDLE;
 80038fe:	4b20      	ldr	r3, [pc, #128]	@ (8003980 <main+0x498>)
 8003900:	2200      	movs	r2, #0
 8003902:	701a      	strb	r2, [r3, #0]
        {
            SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_INIT_ERROR");
            HAL_UARTEx_ReceiveToIdle_DMA(LTE_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
            state = IDLE;
        }
        break;
 8003904:	e020      	b.n	8003948 <main+0x460>
                SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_RECEIVE_ERROR");
 8003906:	4921      	ldr	r1, [pc, #132]	@ (800398c <main+0x4a4>)
 8003908:	4818      	ldr	r0, [pc, #96]	@ (800396c <main+0x484>)
 800390a:	f7fd feff 	bl	800170c <SIM_publish_MQTT_Message>
                HAL_UARTEx_ReceiveToIdle_DMA(LTE_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 800390e:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8003912:	491a      	ldr	r1, [pc, #104]	@ (800397c <main+0x494>)
 8003914:	4813      	ldr	r0, [pc, #76]	@ (8003964 <main+0x47c>)
 8003916:	f011 fab9 	bl	8014e8c <HAL_UARTEx_ReceiveToIdle_DMA>
                state = IDLE;
 800391a:	4b19      	ldr	r3, [pc, #100]	@ (8003980 <main+0x498>)
 800391c:	2200      	movs	r2, #0
 800391e:	701a      	strb	r2, [r3, #0]
        break;
 8003920:	e012      	b.n	8003948 <main+0x460>
            SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_INIT_ERROR");
 8003922:	491b      	ldr	r1, [pc, #108]	@ (8003990 <main+0x4a8>)
 8003924:	4811      	ldr	r0, [pc, #68]	@ (800396c <main+0x484>)
 8003926:	f7fd fef1 	bl	800170c <SIM_publish_MQTT_Message>
            HAL_UARTEx_ReceiveToIdle_DMA(LTE_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 800392a:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800392e:	4913      	ldr	r1, [pc, #76]	@ (800397c <main+0x494>)
 8003930:	480c      	ldr	r0, [pc, #48]	@ (8003964 <main+0x47c>)
 8003932:	f011 faab 	bl	8014e8c <HAL_UARTEx_ReceiveToIdle_DMA>
            state = IDLE;
 8003936:	4b12      	ldr	r3, [pc, #72]	@ (8003980 <main+0x498>)
 8003938:	2200      	movs	r2, #0
 800393a:	701a      	strb	r2, [r3, #0]
        break;
 800393c:	e004      	b.n	8003948 <main+0x460>

		default:
			  break;
 800393e:	bf00      	nop
 8003940:	e5f9      	b.n	8003536 <main+0x4e>
        break;
 8003942:	bf00      	nop
 8003944:	e5f7      	b.n	8003536 <main+0x4e>
        break;
 8003946:	bf00      	nop
		switch(state)
 8003948:	e5f5      	b.n	8003536 <main+0x4e>
 800394a:	bf00      	nop
 800394c:	20001c50 	.word	0x20001c50
 8003950:	20000740 	.word	0x20000740
 8003954:	20004ea8 	.word	0x20004ea8
 8003958:	20004704 	.word	0x20004704
 800395c:	20004eac 	.word	0x20004eac
 8003960:	08016624 	.word	0x08016624
 8003964:	20000624 	.word	0x20000624
 8003968:	08016630 	.word	0x08016630
 800396c:	20001b20 	.word	0x20001b20
 8003970:	0801663c 	.word	0x0801663c
 8003974:	0801664c 	.word	0x0801664c
 8003978:	08016658 	.word	0x08016658
 800397c:	200054d4 	.word	0x200054d4
 8003980:	2000073c 	.word	0x2000073c
 8003984:	08016668 	.word	0x08016668
 8003988:	08016674 	.word	0x08016674
 800398c:	08016684 	.word	0x08016684
 8003990:	08016698 	.word	0x08016698

08003994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b096      	sub	sp, #88	@ 0x58
 8003998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800399a:	f107 0314 	add.w	r3, r7, #20
 800399e:	2244      	movs	r2, #68	@ 0x44
 80039a0:	2100      	movs	r1, #0
 80039a2:	4618      	mov	r0, r3
 80039a4:	f011 fbb0 	bl	8015108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039a8:	463b      	mov	r3, r7
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	605a      	str	r2, [r3, #4]
 80039b0:	609a      	str	r2, [r3, #8]
 80039b2:	60da      	str	r2, [r3, #12]
 80039b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80039b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80039ba:	f00a fae1 	bl	800df80 <HAL_PWREx_ControlVoltageScaling>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80039c4:	f000 fdb2 	bl	800452c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80039c8:	2309      	movs	r3, #9
 80039ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80039d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80039d2:	2301      	movs	r3, #1
 80039d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039d6:	2302      	movs	r3, #2
 80039d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039da:	2303      	movs	r3, #3
 80039dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80039de:	2301      	movs	r3, #1
 80039e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80039e2:	2314      	movs	r3, #20
 80039e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80039e6:	2307      	movs	r3, #7
 80039e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80039ea:	2302      	movs	r3, #2
 80039ec:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80039ee:	2302      	movs	r3, #2
 80039f0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039f2:	f107 0314 	add.w	r3, r7, #20
 80039f6:	4618      	mov	r0, r3
 80039f8:	f00a ff7a 	bl	800e8f0 <HAL_RCC_OscConfig>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8003a02:	f000 fd93 	bl	800452c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a06:	230f      	movs	r3, #15
 8003a08:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a16:	2300      	movs	r3, #0
 8003a18:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003a1a:	463b      	mov	r3, r7
 8003a1c:	2104      	movs	r1, #4
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f00b fb42 	bl	800f0a8 <HAL_RCC_ClockConfig>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003a2a:	f000 fd7f 	bl	800452c <Error_Handler>
  }
}
 8003a2e:	bf00      	nop
 8003a30:	3758      	adds	r7, #88	@ 0x58
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08a      	sub	sp, #40	@ 0x28
 8003a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003a3e:	f107 031c 	add.w	r3, r7, #28
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	605a      	str	r2, [r3, #4]
 8003a48:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003a4a:	1d3b      	adds	r3, r7, #4
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	605a      	str	r2, [r3, #4]
 8003a52:	609a      	str	r2, [r3, #8]
 8003a54:	60da      	str	r2, [r3, #12]
 8003a56:	611a      	str	r2, [r3, #16]
 8003a58:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003a5a:	4b30      	ldr	r3, [pc, #192]	@ (8003b1c <MX_ADC1_Init+0xe4>)
 8003a5c:	4a30      	ldr	r2, [pc, #192]	@ (8003b20 <MX_ADC1_Init+0xe8>)
 8003a5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003a60:	4b2e      	ldr	r3, [pc, #184]	@ (8003b1c <MX_ADC1_Init+0xe4>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003a66:	4b2d      	ldr	r3, [pc, #180]	@ (8003b1c <MX_ADC1_Init+0xe4>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8003b1c <MX_ADC1_Init+0xe4>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003a72:	4b2a      	ldr	r3, [pc, #168]	@ (8003b1c <MX_ADC1_Init+0xe4>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003a78:	4b28      	ldr	r3, [pc, #160]	@ (8003b1c <MX_ADC1_Init+0xe4>)
 8003a7a:	2208      	movs	r2, #8
 8003a7c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003a7e:	4b27      	ldr	r3, [pc, #156]	@ (8003b1c <MX_ADC1_Init+0xe4>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003a84:	4b25      	ldr	r3, [pc, #148]	@ (8003b1c <MX_ADC1_Init+0xe4>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003a8a:	4b24      	ldr	r3, [pc, #144]	@ (8003b1c <MX_ADC1_Init+0xe4>)
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003a90:	4b22      	ldr	r3, [pc, #136]	@ (8003b1c <MX_ADC1_Init+0xe4>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8003a98:	4b20      	ldr	r3, [pc, #128]	@ (8003b1c <MX_ADC1_Init+0xe4>)
 8003a9a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003a9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8003b1c <MX_ADC1_Init+0xe4>)
 8003aa2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8003b1c <MX_ADC1_Init+0xe4>)
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b1c <MX_ADC1_Init+0xe4>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003ab6:	4b19      	ldr	r3, [pc, #100]	@ (8003b1c <MX_ADC1_Init+0xe4>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003abe:	4817      	ldr	r0, [pc, #92]	@ (8003b1c <MX_ADC1_Init+0xe4>)
 8003ac0:	f006 fcf6 	bl	800a4b0 <HAL_ADC_Init>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8003aca:	f000 fd2f 	bl	800452c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003ad2:	f107 031c 	add.w	r3, r7, #28
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4810      	ldr	r0, [pc, #64]	@ (8003b1c <MX_ADC1_Init+0xe4>)
 8003ada:	f007 fdaf 	bl	800b63c <HAL_ADCEx_MultiModeConfigChannel>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8003ae4:	f000 fd22 	bl	800452c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8003b24 <MX_ADC1_Init+0xec>)
 8003aea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003aec:	2306      	movs	r3, #6
 8003aee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003af4:	237f      	movs	r3, #127	@ 0x7f
 8003af6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003af8:	2304      	movs	r3, #4
 8003afa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003afc:	2300      	movs	r3, #0
 8003afe:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b00:	1d3b      	adds	r3, r7, #4
 8003b02:	4619      	mov	r1, r3
 8003b04:	4805      	ldr	r0, [pc, #20]	@ (8003b1c <MX_ADC1_Init+0xe4>)
 8003b06:	f006 ff4b 	bl	800a9a0 <HAL_ADC_ConfigChannel>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8003b10:	f000 fd0c 	bl	800452c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003b14:	bf00      	nop
 8003b16:	3728      	adds	r7, #40	@ 0x28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	20000218 	.word	0x20000218
 8003b20:	50040000 	.word	0x50040000
 8003b24:	25b00200 	.word	0x25b00200

08003b28 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b64 <MX_CRC_Init+0x3c>)
 8003b2e:	4a0e      	ldr	r2, [pc, #56]	@ (8003b68 <MX_CRC_Init+0x40>)
 8003b30:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003b32:	4b0c      	ldr	r3, [pc, #48]	@ (8003b64 <MX_CRC_Init+0x3c>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003b38:	4b0a      	ldr	r3, [pc, #40]	@ (8003b64 <MX_CRC_Init+0x3c>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003b3e:	4b09      	ldr	r3, [pc, #36]	@ (8003b64 <MX_CRC_Init+0x3c>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003b44:	4b07      	ldr	r3, [pc, #28]	@ (8003b64 <MX_CRC_Init+0x3c>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003b4a:	4b06      	ldr	r3, [pc, #24]	@ (8003b64 <MX_CRC_Init+0x3c>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003b50:	4804      	ldr	r0, [pc, #16]	@ (8003b64 <MX_CRC_Init+0x3c>)
 8003b52:	f007 ff4f 	bl	800b9f4 <HAL_CRC_Init>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003b5c:	f000 fce6 	bl	800452c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003b60:	bf00      	nop
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	200002c4 	.word	0x200002c4
 8003b68:	40023000 	.word	0x40023000

08003b6c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003b70:	4b1b      	ldr	r3, [pc, #108]	@ (8003be0 <MX_I2C3_Init+0x74>)
 8003b72:	4a1c      	ldr	r2, [pc, #112]	@ (8003be4 <MX_I2C3_Init+0x78>)
 8003b74:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8003b76:	4b1a      	ldr	r3, [pc, #104]	@ (8003be0 <MX_I2C3_Init+0x74>)
 8003b78:	4a1b      	ldr	r2, [pc, #108]	@ (8003be8 <MX_I2C3_Init+0x7c>)
 8003b7a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003b7c:	4b18      	ldr	r3, [pc, #96]	@ (8003be0 <MX_I2C3_Init+0x74>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b82:	4b17      	ldr	r3, [pc, #92]	@ (8003be0 <MX_I2C3_Init+0x74>)
 8003b84:	2201      	movs	r2, #1
 8003b86:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b88:	4b15      	ldr	r3, [pc, #84]	@ (8003be0 <MX_I2C3_Init+0x74>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003b8e:	4b14      	ldr	r3, [pc, #80]	@ (8003be0 <MX_I2C3_Init+0x74>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003b94:	4b12      	ldr	r3, [pc, #72]	@ (8003be0 <MX_I2C3_Init+0x74>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b9a:	4b11      	ldr	r3, [pc, #68]	@ (8003be0 <MX_I2C3_Init+0x74>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8003be0 <MX_I2C3_Init+0x74>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003ba6:	480e      	ldr	r0, [pc, #56]	@ (8003be0 <MX_I2C3_Init+0x74>)
 8003ba8:	f009 fbf4 	bl	800d394 <HAL_I2C_Init>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8003bb2:	f000 fcbb 	bl	800452c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	4809      	ldr	r0, [pc, #36]	@ (8003be0 <MX_I2C3_Init+0x74>)
 8003bba:	f00a f93b 	bl	800de34 <HAL_I2CEx_ConfigAnalogFilter>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003bc4:	f000 fcb2 	bl	800452c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003bc8:	2100      	movs	r1, #0
 8003bca:	4805      	ldr	r0, [pc, #20]	@ (8003be0 <MX_I2C3_Init+0x74>)
 8003bcc:	f00a f97d 	bl	800deca <HAL_I2CEx_ConfigDigitalFilter>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8003bd6:	f000 fca9 	bl	800452c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003bda:	bf00      	nop
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	200002e8 	.word	0x200002e8
 8003be4:	40005c00 	.word	0x40005c00
 8003be8:	10909cec 	.word	0x10909cec

08003bec <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8003bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c30 <MX_QUADSPI_Init+0x44>)
 8003bf2:	4a10      	ldr	r2, [pc, #64]	@ (8003c34 <MX_QUADSPI_Init+0x48>)
 8003bf4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8003bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8003c30 <MX_QUADSPI_Init+0x44>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8003bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8003c30 <MX_QUADSPI_Init+0x44>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8003c02:	4b0b      	ldr	r3, [pc, #44]	@ (8003c30 <MX_QUADSPI_Init+0x44>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8003c08:	4b09      	ldr	r3, [pc, #36]	@ (8003c30 <MX_QUADSPI_Init+0x44>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8003c0e:	4b08      	ldr	r3, [pc, #32]	@ (8003c30 <MX_QUADSPI_Init+0x44>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8003c14:	4b06      	ldr	r3, [pc, #24]	@ (8003c30 <MX_QUADSPI_Init+0x44>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8003c1a:	4805      	ldr	r0, [pc, #20]	@ (8003c30 <MX_QUADSPI_Init+0x44>)
 8003c1c:	f00a fa06 	bl	800e02c <HAL_QSPI_Init>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8003c26:	f000 fc81 	bl	800452c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	2000033c 	.word	0x2000033c
 8003c34:	a0001000 	.word	0xa0001000

08003c38 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b092      	sub	sp, #72	@ 0x48
 8003c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003c3e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	605a      	str	r2, [r3, #4]
 8003c48:	609a      	str	r2, [r3, #8]
 8003c4a:	60da      	str	r2, [r3, #12]
 8003c4c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003c4e:	2300      	movs	r3, #0
 8003c50:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8003c52:	1d3b      	adds	r3, r7, #4
 8003c54:	222c      	movs	r2, #44	@ 0x2c
 8003c56:	2100      	movs	r1, #0
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f011 fa55 	bl	8015108 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003c5e:	4b3c      	ldr	r3, [pc, #240]	@ (8003d50 <MX_RTC_Init+0x118>)
 8003c60:	4a3c      	ldr	r2, [pc, #240]	@ (8003d54 <MX_RTC_Init+0x11c>)
 8003c62:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003c64:	4b3a      	ldr	r3, [pc, #232]	@ (8003d50 <MX_RTC_Init+0x118>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003c6a:	4b39      	ldr	r3, [pc, #228]	@ (8003d50 <MX_RTC_Init+0x118>)
 8003c6c:	227f      	movs	r2, #127	@ 0x7f
 8003c6e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003c70:	4b37      	ldr	r3, [pc, #220]	@ (8003d50 <MX_RTC_Init+0x118>)
 8003c72:	22ff      	movs	r2, #255	@ 0xff
 8003c74:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003c76:	4b36      	ldr	r3, [pc, #216]	@ (8003d50 <MX_RTC_Init+0x118>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003c7c:	4b34      	ldr	r3, [pc, #208]	@ (8003d50 <MX_RTC_Init+0x118>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003c82:	4b33      	ldr	r3, [pc, #204]	@ (8003d50 <MX_RTC_Init+0x118>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003c88:	4b31      	ldr	r3, [pc, #196]	@ (8003d50 <MX_RTC_Init+0x118>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003c8e:	4830      	ldr	r0, [pc, #192]	@ (8003d50 <MX_RTC_Init+0x118>)
 8003c90:	f00c f8ea 	bl	800fe68 <HAL_RTC_Init>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8003c9a:	f000 fc47 	bl	800452c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0;
 8003caa:	2300      	movs	r3, #0
 8003cac:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003cb8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4823      	ldr	r0, [pc, #140]	@ (8003d50 <MX_RTC_Init+0x118>)
 8003cc2:	f00c f959 	bl	800ff78 <HAL_RTC_SetTime>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8003ccc:	f000 fc2e 	bl	800452c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 1;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003ce8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003cec:	2200      	movs	r2, #0
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4817      	ldr	r0, [pc, #92]	@ (8003d50 <MX_RTC_Init+0x118>)
 8003cf2:	f00c fa3a 	bl	801016a <HAL_RTC_SetDate>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8003cfc:	f000 fc16 	bl	800452c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8003d04:	2300      	movs	r3, #0
 8003d06:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003d10:	2300      	movs	r3, #0
 8003d12:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8003d18:	4b0f      	ldr	r3, [pc, #60]	@ (8003d58 <MX_RTC_Init+0x120>)
 8003d1a:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003d20:	2300      	movs	r3, #0
 8003d22:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8003d24:	2301      	movs	r3, #1
 8003d26:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8003d2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003d30:	1d3b      	adds	r3, r7, #4
 8003d32:	2200      	movs	r2, #0
 8003d34:	4619      	mov	r1, r3
 8003d36:	4806      	ldr	r0, [pc, #24]	@ (8003d50 <MX_RTC_Init+0x118>)
 8003d38:	f00c fa9e 	bl	8010278 <HAL_RTC_SetAlarm_IT>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8003d42:	f000 fbf3 	bl	800452c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003d46:	bf00      	nop
 8003d48:	3748      	adds	r7, #72	@ 0x48
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20000380 	.word	0x20000380
 8003d54:	40002800 	.word	0x40002800
 8003d58:	80800080 	.word	0x80800080

08003d5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003d60:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd0 <MX_SPI2_Init+0x74>)
 8003d62:	4a1c      	ldr	r2, [pc, #112]	@ (8003dd4 <MX_SPI2_Init+0x78>)
 8003d64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003d66:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd0 <MX_SPI2_Init+0x74>)
 8003d68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003d6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003d6e:	4b18      	ldr	r3, [pc, #96]	@ (8003dd0 <MX_SPI2_Init+0x74>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d74:	4b16      	ldr	r3, [pc, #88]	@ (8003dd0 <MX_SPI2_Init+0x74>)
 8003d76:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003d7a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d7c:	4b14      	ldr	r3, [pc, #80]	@ (8003dd0 <MX_SPI2_Init+0x74>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d82:	4b13      	ldr	r3, [pc, #76]	@ (8003dd0 <MX_SPI2_Init+0x74>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003d88:	4b11      	ldr	r3, [pc, #68]	@ (8003dd0 <MX_SPI2_Init+0x74>)
 8003d8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d8e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d90:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd0 <MX_SPI2_Init+0x74>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d96:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd0 <MX_SPI2_Init+0x74>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd0 <MX_SPI2_Init+0x74>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003da2:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd0 <MX_SPI2_Init+0x74>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003da8:	4b09      	ldr	r3, [pc, #36]	@ (8003dd0 <MX_SPI2_Init+0x74>)
 8003daa:	2207      	movs	r2, #7
 8003dac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003dae:	4b08      	ldr	r3, [pc, #32]	@ (8003dd0 <MX_SPI2_Init+0x74>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003db4:	4b06      	ldr	r3, [pc, #24]	@ (8003dd0 <MX_SPI2_Init+0x74>)
 8003db6:	2208      	movs	r2, #8
 8003db8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003dba:	4805      	ldr	r0, [pc, #20]	@ (8003dd0 <MX_SPI2_Init+0x74>)
 8003dbc:	f00c fcb8 	bl	8010730 <HAL_SPI_Init>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003dc6:	f000 fbb1 	bl	800452c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003dca:	bf00      	nop
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	200003a4 	.word	0x200003a4
 8003dd4:	40003800 	.word	0x40003800

08003dd8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8003e4c <MX_SPI3_Init+0x74>)
 8003dde:	4a1c      	ldr	r2, [pc, #112]	@ (8003e50 <MX_SPI3_Init+0x78>)
 8003de0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003de2:	4b1a      	ldr	r3, [pc, #104]	@ (8003e4c <MX_SPI3_Init+0x74>)
 8003de4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003de8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003dea:	4b18      	ldr	r3, [pc, #96]	@ (8003e4c <MX_SPI3_Init+0x74>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8003df0:	4b16      	ldr	r3, [pc, #88]	@ (8003e4c <MX_SPI3_Init+0x74>)
 8003df2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003df6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003df8:	4b14      	ldr	r3, [pc, #80]	@ (8003e4c <MX_SPI3_Init+0x74>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003dfe:	4b13      	ldr	r3, [pc, #76]	@ (8003e4c <MX_SPI3_Init+0x74>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003e04:	4b11      	ldr	r3, [pc, #68]	@ (8003e4c <MX_SPI3_Init+0x74>)
 8003e06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e0a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8003e4c <MX_SPI3_Init+0x74>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e12:	4b0e      	ldr	r3, [pc, #56]	@ (8003e4c <MX_SPI3_Init+0x74>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e18:	4b0c      	ldr	r3, [pc, #48]	@ (8003e4c <MX_SPI3_Init+0x74>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e4c <MX_SPI3_Init+0x74>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003e24:	4b09      	ldr	r3, [pc, #36]	@ (8003e4c <MX_SPI3_Init+0x74>)
 8003e26:	2207      	movs	r2, #7
 8003e28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003e2a:	4b08      	ldr	r3, [pc, #32]	@ (8003e4c <MX_SPI3_Init+0x74>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003e30:	4b06      	ldr	r3, [pc, #24]	@ (8003e4c <MX_SPI3_Init+0x74>)
 8003e32:	2208      	movs	r2, #8
 8003e34:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003e36:	4805      	ldr	r0, [pc, #20]	@ (8003e4c <MX_SPI3_Init+0x74>)
 8003e38:	f00c fc7a 	bl	8010730 <HAL_SPI_Init>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8003e42:	f000 fb73 	bl	800452c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20000408 	.word	0x20000408
 8003e50:	40003c00 	.word	0x40003c00

08003e54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b096      	sub	sp, #88	@ 0x58
 8003e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e5a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	605a      	str	r2, [r3, #4]
 8003e64:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e66:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	605a      	str	r2, [r3, #4]
 8003e70:	609a      	str	r2, [r3, #8]
 8003e72:	60da      	str	r2, [r3, #12]
 8003e74:	611a      	str	r2, [r3, #16]
 8003e76:	615a      	str	r2, [r3, #20]
 8003e78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e7a:	1d3b      	adds	r3, r7, #4
 8003e7c:	222c      	movs	r2, #44	@ 0x2c
 8003e7e:	2100      	movs	r1, #0
 8003e80:	4618      	mov	r0, r3
 8003e82:	f011 f941 	bl	8015108 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e86:	4b45      	ldr	r3, [pc, #276]	@ (8003f9c <MX_TIM1_Init+0x148>)
 8003e88:	4a45      	ldr	r2, [pc, #276]	@ (8003fa0 <MX_TIM1_Init+0x14c>)
 8003e8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1599;
 8003e8c:	4b43      	ldr	r3, [pc, #268]	@ (8003f9c <MX_TIM1_Init+0x148>)
 8003e8e:	f240 623f 	movw	r2, #1599	@ 0x63f
 8003e92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e94:	4b41      	ldr	r3, [pc, #260]	@ (8003f9c <MX_TIM1_Init+0x148>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8003e9a:	4b40      	ldr	r3, [pc, #256]	@ (8003f9c <MX_TIM1_Init+0x148>)
 8003e9c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8003ea0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ea2:	4b3e      	ldr	r3, [pc, #248]	@ (8003f9c <MX_TIM1_Init+0x148>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ea8:	4b3c      	ldr	r3, [pc, #240]	@ (8003f9c <MX_TIM1_Init+0x148>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003eae:	4b3b      	ldr	r3, [pc, #236]	@ (8003f9c <MX_TIM1_Init+0x148>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8003eb4:	4839      	ldr	r0, [pc, #228]	@ (8003f9c <MX_TIM1_Init+0x148>)
 8003eb6:	f00d fbbe 	bl	8011636 <HAL_TIM_OC_Init>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8003ec0:	f000 fb34 	bl	800452c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ed0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4831      	ldr	r0, [pc, #196]	@ (8003f9c <MX_TIM1_Init+0x148>)
 8003ed8:	f00f fbc4 	bl	8013664 <HAL_TIMEx_MasterConfigSynchronization>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8003ee2:	f000 fb23 	bl	800452c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003efa:	2300      	movs	r3, #0
 8003efc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003efe:	2300      	movs	r3, #0
 8003f00:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f02:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003f06:	2200      	movs	r2, #0
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4824      	ldr	r0, [pc, #144]	@ (8003f9c <MX_TIM1_Init+0x148>)
 8003f0c:	f00e fa80 	bl	8012410 <HAL_TIM_OC_ConfigChannel>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8003f16:	f000 fb09 	bl	800452c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f1a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003f1e:	2204      	movs	r2, #4
 8003f20:	4619      	mov	r1, r3
 8003f22:	481e      	ldr	r0, [pc, #120]	@ (8003f9c <MX_TIM1_Init+0x148>)
 8003f24:	f00e fa74 	bl	8012410 <HAL_TIM_OC_ConfigChannel>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8003f2e:	f000 fafd 	bl	800452c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003f36:	2208      	movs	r2, #8
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4818      	ldr	r0, [pc, #96]	@ (8003f9c <MX_TIM1_Init+0x148>)
 8003f3c:	f00e fa68 	bl	8012410 <HAL_TIM_OC_ConfigChannel>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8003f46:	f000 faf1 	bl	800452c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f52:	2300      	movs	r3, #0
 8003f54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f56:	2300      	movs	r3, #0
 8003f58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003f64:	2300      	movs	r3, #0
 8003f66:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003f6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f70:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003f72:	2300      	movs	r3, #0
 8003f74:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f76:	2300      	movs	r3, #0
 8003f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f7a:	1d3b      	adds	r3, r7, #4
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4807      	ldr	r0, [pc, #28]	@ (8003f9c <MX_TIM1_Init+0x148>)
 8003f80:	f00f fbf8 	bl	8013774 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8003f8a:	f000 facf 	bl	800452c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003f8e:	4803      	ldr	r0, [pc, #12]	@ (8003f9c <MX_TIM1_Init+0x148>)
 8003f90:	f002 fd1c 	bl	80069cc <HAL_TIM_MspPostInit>

}
 8003f94:	bf00      	nop
 8003f96:	3758      	adds	r7, #88	@ 0x58
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	2000046c 	.word	0x2000046c
 8003fa0:	40012c00 	.word	0x40012c00

08003fa4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b088      	sub	sp, #32
 8003fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003faa:	f107 0314 	add.w	r3, r7, #20
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	605a      	str	r2, [r3, #4]
 8003fb4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003fb6:	1d3b      	adds	r3, r7, #4
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	605a      	str	r2, [r3, #4]
 8003fbe:	609a      	str	r2, [r3, #8]
 8003fc0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003fc2:	4b21      	ldr	r3, [pc, #132]	@ (8004048 <MX_TIM2_Init+0xa4>)
 8003fc4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003fc8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003fca:	4b1f      	ldr	r3, [pc, #124]	@ (8004048 <MX_TIM2_Init+0xa4>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8004048 <MX_TIM2_Init+0xa4>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8004048 <MX_TIM2_Init+0xa4>)
 8003fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fdc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fde:	4b1a      	ldr	r3, [pc, #104]	@ (8004048 <MX_TIM2_Init+0xa4>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fe4:	4b18      	ldr	r3, [pc, #96]	@ (8004048 <MX_TIM2_Init+0xa4>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003fea:	4817      	ldr	r0, [pc, #92]	@ (8004048 <MX_TIM2_Init+0xa4>)
 8003fec:	f00d ffb0 	bl	8011f50 <HAL_TIM_IC_Init>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003ff6:	f000 fa99 	bl	800452c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004002:	f107 0314 	add.w	r3, r7, #20
 8004006:	4619      	mov	r1, r3
 8004008:	480f      	ldr	r0, [pc, #60]	@ (8004048 <MX_TIM2_Init+0xa4>)
 800400a:	f00f fb2b 	bl	8013664 <HAL_TIMEx_MasterConfigSynchronization>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8004014:	f000 fa8a 	bl	800452c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004018:	2300      	movs	r3, #0
 800401a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800401c:	2301      	movs	r3, #1
 800401e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004020:	2300      	movs	r3, #0
 8004022:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004024:	2300      	movs	r3, #0
 8004026:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004028:	1d3b      	adds	r3, r7, #4
 800402a:	2200      	movs	r2, #0
 800402c:	4619      	mov	r1, r3
 800402e:	4806      	ldr	r0, [pc, #24]	@ (8004048 <MX_TIM2_Init+0xa4>)
 8004030:	f00e fa68 	bl	8012504 <HAL_TIM_IC_ConfigChannel>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800403a:	f000 fa77 	bl	800452c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800403e:	bf00      	nop
 8004040:	3720      	adds	r7, #32
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	200004b8 	.word	0x200004b8

0800404c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b090      	sub	sp, #64	@ 0x40
 8004050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004052:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	605a      	str	r2, [r3, #4]
 800405c:	609a      	str	r2, [r3, #8]
 800405e:	60da      	str	r2, [r3, #12]
 8004060:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004062:	f107 0320 	add.w	r3, r7, #32
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	605a      	str	r2, [r3, #4]
 800406c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800406e:	1d3b      	adds	r3, r7, #4
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	605a      	str	r2, [r3, #4]
 8004076:	609a      	str	r2, [r3, #8]
 8004078:	60da      	str	r2, [r3, #12]
 800407a:	611a      	str	r2, [r3, #16]
 800407c:	615a      	str	r2, [r3, #20]
 800407e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004080:	4b2c      	ldr	r3, [pc, #176]	@ (8004134 <MX_TIM3_Init+0xe8>)
 8004082:	4a2d      	ldr	r2, [pc, #180]	@ (8004138 <MX_TIM3_Init+0xec>)
 8004084:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004086:	4b2b      	ldr	r3, [pc, #172]	@ (8004134 <MX_TIM3_Init+0xe8>)
 8004088:	2200      	movs	r2, #0
 800408a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800408c:	4b29      	ldr	r3, [pc, #164]	@ (8004134 <MX_TIM3_Init+0xe8>)
 800408e:	2200      	movs	r2, #0
 8004090:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 31;
 8004092:	4b28      	ldr	r3, [pc, #160]	@ (8004134 <MX_TIM3_Init+0xe8>)
 8004094:	221f      	movs	r2, #31
 8004096:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004098:	4b26      	ldr	r3, [pc, #152]	@ (8004134 <MX_TIM3_Init+0xe8>)
 800409a:	2200      	movs	r2, #0
 800409c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800409e:	4b25      	ldr	r3, [pc, #148]	@ (8004134 <MX_TIM3_Init+0xe8>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80040a4:	4823      	ldr	r0, [pc, #140]	@ (8004134 <MX_TIM3_Init+0xe8>)
 80040a6:	f00d fa6f 	bl	8011588 <HAL_TIM_Base_Init>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80040b0:	f000 fa3c 	bl	800452c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80040b4:	481f      	ldr	r0, [pc, #124]	@ (8004134 <MX_TIM3_Init+0xe8>)
 80040b6:	f00d fd4d 	bl	8011b54 <HAL_TIM_PWM_Init>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80040c0:	f000 fa34 	bl	800452c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80040c4:	2307      	movs	r3, #7
 80040c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80040c8:	2330      	movs	r3, #48	@ 0x30
 80040ca:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80040cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80040d0:	4619      	mov	r1, r3
 80040d2:	4818      	ldr	r0, [pc, #96]	@ (8004134 <MX_TIM3_Init+0xe8>)
 80040d4:	f00e fc8f 	bl	80129f6 <HAL_TIM_SlaveConfigSynchro>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80040de:	f000 fa25 	bl	800452c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040e2:	2300      	movs	r3, #0
 80040e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040e6:	2300      	movs	r3, #0
 80040e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040ea:	f107 0320 	add.w	r3, r7, #32
 80040ee:	4619      	mov	r1, r3
 80040f0:	4810      	ldr	r0, [pc, #64]	@ (8004134 <MX_TIM3_Init+0xe8>)
 80040f2:	f00f fab7 	bl	8013664 <HAL_TIMEx_MasterConfigSynchronization>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80040fc:	f000 fa16 	bl	800452c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004100:	2360      	movs	r3, #96	@ 0x60
 8004102:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 15;
 8004104:	230f      	movs	r3, #15
 8004106:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004108:	2300      	movs	r3, #0
 800410a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004110:	1d3b      	adds	r3, r7, #4
 8004112:	2208      	movs	r2, #8
 8004114:	4619      	mov	r1, r3
 8004116:	4807      	ldr	r0, [pc, #28]	@ (8004134 <MX_TIM3_Init+0xe8>)
 8004118:	f00e fa90 	bl	801263c <HAL_TIM_PWM_ConfigChannel>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8004122:	f000 fa03 	bl	800452c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004126:	4803      	ldr	r0, [pc, #12]	@ (8004134 <MX_TIM3_Init+0xe8>)
 8004128:	f002 fc50 	bl	80069cc <HAL_TIM_MspPostInit>

}
 800412c:	bf00      	nop
 800412e:	3740      	adds	r7, #64	@ 0x40
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	20000504 	.word	0x20000504
 8004138:	40000400 	.word	0x40000400

0800413c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08e      	sub	sp, #56	@ 0x38
 8004140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004142:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	605a      	str	r2, [r3, #4]
 800414c:	609a      	str	r2, [r3, #8]
 800414e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004150:	f107 031c 	add.w	r3, r7, #28
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	605a      	str	r2, [r3, #4]
 800415a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800415c:	463b      	mov	r3, r7
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	605a      	str	r2, [r3, #4]
 8004164:	609a      	str	r2, [r3, #8]
 8004166:	60da      	str	r2, [r3, #12]
 8004168:	611a      	str	r2, [r3, #16]
 800416a:	615a      	str	r2, [r3, #20]
 800416c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800416e:	4b2b      	ldr	r3, [pc, #172]	@ (800421c <MX_TIM4_Init+0xe0>)
 8004170:	4a2b      	ldr	r2, [pc, #172]	@ (8004220 <MX_TIM4_Init+0xe4>)
 8004172:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8004174:	4b29      	ldr	r3, [pc, #164]	@ (800421c <MX_TIM4_Init+0xe0>)
 8004176:	2263      	movs	r2, #99	@ 0x63
 8004178:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800417a:	4b28      	ldr	r3, [pc, #160]	@ (800421c <MX_TIM4_Init+0xe0>)
 800417c:	2200      	movs	r2, #0
 800417e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8004180:	4b26      	ldr	r3, [pc, #152]	@ (800421c <MX_TIM4_Init+0xe0>)
 8004182:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004186:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004188:	4b24      	ldr	r3, [pc, #144]	@ (800421c <MX_TIM4_Init+0xe0>)
 800418a:	2200      	movs	r2, #0
 800418c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800418e:	4b23      	ldr	r3, [pc, #140]	@ (800421c <MX_TIM4_Init+0xe0>)
 8004190:	2280      	movs	r2, #128	@ 0x80
 8004192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004194:	4821      	ldr	r0, [pc, #132]	@ (800421c <MX_TIM4_Init+0xe0>)
 8004196:	f00d f9f7 	bl	8011588 <HAL_TIM_Base_Init>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80041a0:	f000 f9c4 	bl	800452c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80041aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041ae:	4619      	mov	r1, r3
 80041b0:	481a      	ldr	r0, [pc, #104]	@ (800421c <MX_TIM4_Init+0xe0>)
 80041b2:	f00e fb57 	bl	8012864 <HAL_TIM_ConfigClockSource>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80041bc:	f000 f9b6 	bl	800452c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80041c0:	4816      	ldr	r0, [pc, #88]	@ (800421c <MX_TIM4_Init+0xe0>)
 80041c2:	f00d fa38 	bl	8011636 <HAL_TIM_OC_Init>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80041cc:	f000 f9ae 	bl	800452c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80041d0:	2320      	movs	r3, #32
 80041d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041d4:	2300      	movs	r3, #0
 80041d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80041d8:	f107 031c 	add.w	r3, r7, #28
 80041dc:	4619      	mov	r1, r3
 80041de:	480f      	ldr	r0, [pc, #60]	@ (800421c <MX_TIM4_Init+0xe0>)
 80041e0:	f00f fa40 	bl	8013664 <HAL_TIMEx_MasterConfigSynchronization>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80041ea:	f000 f99f 	bl	800452c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80041ee:	2300      	movs	r3, #0
 80041f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80041fe:	463b      	mov	r3, r7
 8004200:	2208      	movs	r2, #8
 8004202:	4619      	mov	r1, r3
 8004204:	4805      	ldr	r0, [pc, #20]	@ (800421c <MX_TIM4_Init+0xe0>)
 8004206:	f00e f903 	bl	8012410 <HAL_TIM_OC_ConfigChannel>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8004210:	f000 f98c 	bl	800452c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004214:	bf00      	nop
 8004216:	3738      	adds	r7, #56	@ 0x38
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20000550 	.word	0x20000550
 8004220:	40000800 	.word	0x40000800

08004224 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004228:	4b14      	ldr	r3, [pc, #80]	@ (800427c <MX_UART4_Init+0x58>)
 800422a:	4a15      	ldr	r2, [pc, #84]	@ (8004280 <MX_UART4_Init+0x5c>)
 800422c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800422e:	4b13      	ldr	r3, [pc, #76]	@ (800427c <MX_UART4_Init+0x58>)
 8004230:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004234:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004236:	4b11      	ldr	r3, [pc, #68]	@ (800427c <MX_UART4_Init+0x58>)
 8004238:	2200      	movs	r2, #0
 800423a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800423c:	4b0f      	ldr	r3, [pc, #60]	@ (800427c <MX_UART4_Init+0x58>)
 800423e:	2200      	movs	r2, #0
 8004240:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004242:	4b0e      	ldr	r3, [pc, #56]	@ (800427c <MX_UART4_Init+0x58>)
 8004244:	2200      	movs	r2, #0
 8004246:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004248:	4b0c      	ldr	r3, [pc, #48]	@ (800427c <MX_UART4_Init+0x58>)
 800424a:	220c      	movs	r2, #12
 800424c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800424e:	4b0b      	ldr	r3, [pc, #44]	@ (800427c <MX_UART4_Init+0x58>)
 8004250:	2200      	movs	r2, #0
 8004252:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004254:	4b09      	ldr	r3, [pc, #36]	@ (800427c <MX_UART4_Init+0x58>)
 8004256:	2200      	movs	r2, #0
 8004258:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800425a:	4b08      	ldr	r3, [pc, #32]	@ (800427c <MX_UART4_Init+0x58>)
 800425c:	2200      	movs	r2, #0
 800425e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004260:	4b06      	ldr	r3, [pc, #24]	@ (800427c <MX_UART4_Init+0x58>)
 8004262:	2200      	movs	r2, #0
 8004264:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8004266:	4805      	ldr	r0, [pc, #20]	@ (800427c <MX_UART4_Init+0x58>)
 8004268:	f00f fb50 	bl	801390c <HAL_HalfDuplex_Init>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8004272:	f000 f95b 	bl	800452c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004276:	bf00      	nop
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	2000059c 	.word	0x2000059c
 8004280:	40004c00 	.word	0x40004c00

08004284 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004288:	4b14      	ldr	r3, [pc, #80]	@ (80042dc <MX_USART1_UART_Init+0x58>)
 800428a:	4a15      	ldr	r2, [pc, #84]	@ (80042e0 <MX_USART1_UART_Init+0x5c>)
 800428c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800428e:	4b13      	ldr	r3, [pc, #76]	@ (80042dc <MX_USART1_UART_Init+0x58>)
 8004290:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004294:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004296:	4b11      	ldr	r3, [pc, #68]	@ (80042dc <MX_USART1_UART_Init+0x58>)
 8004298:	2200      	movs	r2, #0
 800429a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800429c:	4b0f      	ldr	r3, [pc, #60]	@ (80042dc <MX_USART1_UART_Init+0x58>)
 800429e:	2200      	movs	r2, #0
 80042a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80042a2:	4b0e      	ldr	r3, [pc, #56]	@ (80042dc <MX_USART1_UART_Init+0x58>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80042a8:	4b0c      	ldr	r3, [pc, #48]	@ (80042dc <MX_USART1_UART_Init+0x58>)
 80042aa:	220c      	movs	r2, #12
 80042ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80042ae:	4b0b      	ldr	r3, [pc, #44]	@ (80042dc <MX_USART1_UART_Init+0x58>)
 80042b0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80042b4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80042b6:	4b09      	ldr	r3, [pc, #36]	@ (80042dc <MX_USART1_UART_Init+0x58>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042bc:	4b07      	ldr	r3, [pc, #28]	@ (80042dc <MX_USART1_UART_Init+0x58>)
 80042be:	2200      	movs	r2, #0
 80042c0:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042c2:	4b06      	ldr	r3, [pc, #24]	@ (80042dc <MX_USART1_UART_Init+0x58>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80042c8:	4804      	ldr	r0, [pc, #16]	@ (80042dc <MX_USART1_UART_Init+0x58>)
 80042ca:	f00f fad1 	bl	8013870 <HAL_UART_Init>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 80042d4:	f000 f92a 	bl	800452c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80042d8:	bf00      	nop
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	20000624 	.word	0x20000624
 80042e0:	40013800 	.word	0x40013800

080042e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80042ea:	4b14      	ldr	r3, [pc, #80]	@ (800433c <MX_DMA_Init+0x58>)
 80042ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ee:	4a13      	ldr	r2, [pc, #76]	@ (800433c <MX_DMA_Init+0x58>)
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80042f6:	4b11      	ldr	r3, [pc, #68]	@ (800433c <MX_DMA_Init+0x58>)
 80042f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	607b      	str	r3, [r7, #4]
 8004300:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004302:	2200      	movs	r2, #0
 8004304:	2100      	movs	r1, #0
 8004306:	200b      	movs	r0, #11
 8004308:	f007 fb39 	bl	800b97e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800430c:	200b      	movs	r0, #11
 800430e:	f007 fb52 	bl	800b9b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004312:	2200      	movs	r2, #0
 8004314:	2100      	movs	r1, #0
 8004316:	200e      	movs	r0, #14
 8004318:	f007 fb31 	bl	800b97e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800431c:	200e      	movs	r0, #14
 800431e:	f007 fb4a 	bl	800b9b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8004322:	2200      	movs	r2, #0
 8004324:	2100      	movs	r1, #0
 8004326:	200f      	movs	r0, #15
 8004328:	f007 fb29 	bl	800b97e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800432c:	200f      	movs	r0, #15
 800432e:	f007 fb42 	bl	800b9b6 <HAL_NVIC_EnableIRQ>

}
 8004332:	bf00      	nop
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40021000 	.word	0x40021000

08004340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08a      	sub	sp, #40	@ 0x28
 8004344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004346:	f107 0314 	add.w	r3, r7, #20
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	605a      	str	r2, [r3, #4]
 8004350:	609a      	str	r2, [r3, #8]
 8004352:	60da      	str	r2, [r3, #12]
 8004354:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004356:	4b71      	ldr	r3, [pc, #452]	@ (800451c <MX_GPIO_Init+0x1dc>)
 8004358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800435a:	4a70      	ldr	r2, [pc, #448]	@ (800451c <MX_GPIO_Init+0x1dc>)
 800435c:	f043 0304 	orr.w	r3, r3, #4
 8004360:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004362:	4b6e      	ldr	r3, [pc, #440]	@ (800451c <MX_GPIO_Init+0x1dc>)
 8004364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	613b      	str	r3, [r7, #16]
 800436c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800436e:	4b6b      	ldr	r3, [pc, #428]	@ (800451c <MX_GPIO_Init+0x1dc>)
 8004370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004372:	4a6a      	ldr	r2, [pc, #424]	@ (800451c <MX_GPIO_Init+0x1dc>)
 8004374:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800437a:	4b68      	ldr	r3, [pc, #416]	@ (800451c <MX_GPIO_Init+0x1dc>)
 800437c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800437e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004386:	4b65      	ldr	r3, [pc, #404]	@ (800451c <MX_GPIO_Init+0x1dc>)
 8004388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800438a:	4a64      	ldr	r2, [pc, #400]	@ (800451c <MX_GPIO_Init+0x1dc>)
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004392:	4b62      	ldr	r3, [pc, #392]	@ (800451c <MX_GPIO_Init+0x1dc>)
 8004394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	60bb      	str	r3, [r7, #8]
 800439c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800439e:	4b5f      	ldr	r3, [pc, #380]	@ (800451c <MX_GPIO_Init+0x1dc>)
 80043a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043a2:	4a5e      	ldr	r2, [pc, #376]	@ (800451c <MX_GPIO_Init+0x1dc>)
 80043a4:	f043 0302 	orr.w	r3, r3, #2
 80043a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043aa:	4b5c      	ldr	r3, [pc, #368]	@ (800451c <MX_GPIO_Init+0x1dc>)
 80043ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	607b      	str	r3, [r7, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80043b6:	4b59      	ldr	r3, [pc, #356]	@ (800451c <MX_GPIO_Init+0x1dc>)
 80043b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ba:	4a58      	ldr	r2, [pc, #352]	@ (800451c <MX_GPIO_Init+0x1dc>)
 80043bc:	f043 0308 	orr.w	r3, r3, #8
 80043c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043c2:	4b56      	ldr	r3, [pc, #344]	@ (800451c <MX_GPIO_Init+0x1dc>)
 80043c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	603b      	str	r3, [r7, #0]
 80043cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DBG_GPIO_Port, DBG_Pin, GPIO_PIN_RESET);
 80043ce:	2200      	movs	r2, #0
 80043d0:	2108      	movs	r1, #8
 80043d2:	4853      	ldr	r0, [pc, #332]	@ (8004520 <MX_GPIO_Init+0x1e0>)
 80043d4:	f008 ffc6 	bl	800d364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 80043d8:	2201      	movs	r2, #1
 80043da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80043de:	4851      	ldr	r0, [pc, #324]	@ (8004524 <MX_GPIO_Init+0x1e4>)
 80043e0:	f008 ffc0 	bl	800d364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH_nWP_Pin|FLASH_nRESET_Pin, GPIO_PIN_SET);
 80043e4:	2201      	movs	r2, #1
 80043e6:	21c0      	movs	r1, #192	@ 0xc0
 80043e8:	484d      	ldr	r0, [pc, #308]	@ (8004520 <MX_GPIO_Init+0x1e0>)
 80043ea:	f008 ffbb 	bl	800d364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LTE_POWER_ON_Pin|LTE_RESET_Pin, GPIO_PIN_SET);
 80043ee:	2201      	movs	r2, #1
 80043f0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80043f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80043f8:	f008 ffb4 	bl	800d364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 80043fc:	2200      	movs	r2, #0
 80043fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004402:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004406:	f008 ffad 	bl	800d364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DTR_GPIO_Port, DTR_Pin, GPIO_PIN_RESET);
 800440a:	2200      	movs	r2, #0
 800440c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004410:	4844      	ldr	r0, [pc, #272]	@ (8004524 <MX_GPIO_Init+0x1e4>)
 8004412:	f008 ffa7 	bl	800d364 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USR_BTN_Pin PC4 */
  GPIO_InitStruct.Pin = USR_BTN_Pin|GPIO_PIN_4;
 8004416:	f242 0310 	movw	r3, #8208	@ 0x2010
 800441a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800441c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004426:	f107 0314 	add.w	r3, r7, #20
 800442a:	4619      	mov	r1, r3
 800442c:	483c      	ldr	r0, [pc, #240]	@ (8004520 <MX_GPIO_Init+0x1e0>)
 800442e:	f008 fdef 	bl	800d010 <HAL_GPIO_Init>

  /*Configure GPIO pins : DBG_Pin FLASH_nWP_Pin FLASH_nRESET_Pin */
  GPIO_InitStruct.Pin = DBG_Pin|FLASH_nWP_Pin|FLASH_nRESET_Pin;
 8004432:	23c8      	movs	r3, #200	@ 0xc8
 8004434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004436:	2301      	movs	r3, #1
 8004438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800443e:	2300      	movs	r3, #0
 8004440:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004442:	f107 0314 	add.w	r3, r7, #20
 8004446:	4619      	mov	r1, r3
 8004448:	4835      	ldr	r0, [pc, #212]	@ (8004520 <MX_GPIO_Init+0x1e0>)
 800444a:	f008 fde1 	bl	800d010 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800444e:	2308      	movs	r3, #8
 8004450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004452:	2300      	movs	r3, #0
 8004454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004456:	2300      	movs	r3, #0
 8004458:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800445a:	f107 0314 	add.w	r3, r7, #20
 800445e:	4619      	mov	r1, r3
 8004460:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004464:	f008 fdd4 	bl	800d010 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_nCS_Pin DTR_Pin */
  GPIO_InitStruct.Pin = FLASH_nCS_Pin|DTR_Pin;
 8004468:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800446c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800446e:	2301      	movs	r3, #1
 8004470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004472:	2300      	movs	r3, #0
 8004474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004476:	2300      	movs	r3, #0
 8004478:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800447a:	f107 0314 	add.w	r3, r7, #20
 800447e:	4619      	mov	r1, r3
 8004480:	4828      	ldr	r0, [pc, #160]	@ (8004524 <MX_GPIO_Init+0x1e4>)
 8004482:	f008 fdc5 	bl	800d010 <HAL_GPIO_Init>

  /*Configure GPIO pins : LTE_POWER_ON_Pin LTE_RESET_Pin */
  GPIO_InitStruct.Pin = LTE_POWER_ON_Pin|LTE_RESET_Pin;
 8004486:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800448a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800448c:	2311      	movs	r3, #17
 800448e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004490:	2300      	movs	r3, #0
 8004492:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004494:	2300      	movs	r3, #0
 8004496:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004498:	f107 0314 	add.w	r3, r7, #20
 800449c:	4619      	mov	r1, r3
 800449e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044a2:	f008 fdb5 	bl	800d010 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_nCS_Pin */
  GPIO_InitStruct.Pin = ACC_nCS_Pin;
 80044a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044ac:	2301      	movs	r3, #1
 80044ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b0:	2300      	movs	r3, #0
 80044b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b4:	2300      	movs	r3, #0
 80044b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACC_nCS_GPIO_Port, &GPIO_InitStruct);
 80044b8:	f107 0314 	add.w	r3, r7, #20
 80044bc:	4619      	mov	r1, r3
 80044be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044c2:	f008 fda5 	bl	800d010 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80044c6:	2304      	movs	r3, #4
 80044c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80044ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80044ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d0:	2300      	movs	r3, #0
 80044d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044d4:	f107 0314 	add.w	r3, r7, #20
 80044d8:	4619      	mov	r1, r3
 80044da:	4813      	ldr	r0, [pc, #76]	@ (8004528 <MX_GPIO_Init+0x1e8>)
 80044dc:	f008 fd98 	bl	800d010 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCD_Pin */
  GPIO_InitStruct.Pin = DCD_Pin;
 80044e0:	2320      	movs	r3, #32
 80044e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044e4:	2300      	movs	r3, #0
 80044e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e8:	2300      	movs	r3, #0
 80044ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DCD_GPIO_Port, &GPIO_InitStruct);
 80044ec:	f107 0314 	add.w	r3, r7, #20
 80044f0:	4619      	mov	r1, r3
 80044f2:	480c      	ldr	r0, [pc, #48]	@ (8004524 <MX_GPIO_Init+0x1e4>)
 80044f4:	f008 fd8c 	bl	800d010 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80044f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80044fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80044fe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004504:	2300      	movs	r3, #0
 8004506:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004508:	f107 0314 	add.w	r3, r7, #20
 800450c:	4619      	mov	r1, r3
 800450e:	4805      	ldr	r0, [pc, #20]	@ (8004524 <MX_GPIO_Init+0x1e4>)
 8004510:	f008 fd7e 	bl	800d010 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8004514:	bf00      	nop
 8004516:	3728      	adds	r7, #40	@ 0x28
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40021000 	.word	0x40021000
 8004520:	48000800 	.word	0x48000800
 8004524:	48000400 	.word	0x48000400
 8004528:	48000c00 	.word	0x48000c00

0800452c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004530:	b672      	cpsid	i
}
 8004532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004534:	bf00      	nop
 8004536:	e7fd      	b.n	8004534 <Error_Handler+0x8>

08004538 <OTA_Init>:
#include "string.h"


/*-----INIZIALIZZAZIONE OTA-----*/
int OTA_Init(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 800453e:	2300      	movs	r3, #0
 8004540:	71fb      	strb	r3, [r7, #7]

	if (sys.OTA_File_isOpen)
 8004542:	4b10      	ldr	r3, [pc, #64]	@ (8004584 <OTA_Init+0x4c>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	d002      	beq.n	8004556 <OTA_Init+0x1e>
	{
		f_close(&sys.OTA_File);
 8004550:	480d      	ldr	r0, [pc, #52]	@ (8004588 <OTA_Init+0x50>)
 8004552:	f004 ff33 	bl	80093bc <f_close>
	}

	sys.OTA_File_isOpen = 0;
 8004556:	4a0b      	ldr	r2, [pc, #44]	@ (8004584 <OTA_Init+0x4c>)
 8004558:	7813      	ldrb	r3, [r2, #0]
 800455a:	f023 0301 	bic.w	r3, r3, #1
 800455e:	7013      	strb	r3, [r2, #0]

	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ | FA_WRITE | FA_CREATE_ALWAYS);
 8004560:	220b      	movs	r2, #11
 8004562:	490a      	ldr	r1, [pc, #40]	@ (800458c <OTA_Init+0x54>)
 8004564:	4808      	ldr	r0, [pc, #32]	@ (8004588 <OTA_Init+0x50>)
 8004566:	f004 fa35 	bl	80089d4 <f_open>
 800456a:	4603      	mov	r3, r0
 800456c:	71fb      	strb	r3, [r7, #7]

	if (fRes != FR_OK)
 800456e:	79fb      	ldrb	r3, [r7, #7]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <OTA_Init+0x42>
	{
		return -1;
 8004574:	f04f 33ff 	mov.w	r3, #4294967295
 8004578:	e000      	b.n	800457c <OTA_Init+0x44>
	}

	return 0;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	20000740 	.word	0x20000740
 8004588:	20000744 	.word	0x20000744
 800458c:	080166a8 	.word	0x080166a8

08004590 <OTA_Receive>:

/*-----RICEZIONE FILE OTA-----*/
int OTA_Receive(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	f5ad 6d99 	sub.w	sp, sp, #1224	@ 0x4c8
 8004596:	af00      	add	r7, sp, #0
	uint8_t rx_buffer[1200];
	uint16_t rx_len = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	f8a7 34c6 	strh.w	r3, [r7, #1222]	@ 0x4c6
	UINT bytes_written = 0;
 800459e:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 80045a2:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
	
	SIM_Wait_Response("+CIPRXGET: 1");
 80045aa:	4834      	ldr	r0, [pc, #208]	@ (800467c <OTA_Receive+0xec>)
 80045ac:	f7fd f9d4 	bl	8001958 <SIM_Wait_Response>

	while(1)
	{
		SIM_Send_Command("AT+CIPRXGET=2,1024\r");
 80045b0:	4833      	ldr	r0, [pc, #204]	@ (8004680 <OTA_Receive+0xf0>)
 80045b2:	f7fc fdc5 	bl	8001140 <SIM_Send_Command>
		rx_len = SIM_Receive_Response((char*)rx_buffer);
 80045b6:	f107 0308 	add.w	r3, r7, #8
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fc fdec 	bl	8001198 <SIM_Receive_Response>
 80045c0:	4603      	mov	r3, r0
 80045c2:	f8a7 34c6 	strh.w	r3, [r7, #1222]	@ 0x4c6

		char *info = strstr((char*)rx_buffer, "+CIPRXGET: 2,");
 80045c6:	f107 0308 	add.w	r3, r7, #8
 80045ca:	492e      	ldr	r1, [pc, #184]	@ (8004684 <OTA_Receive+0xf4>)
 80045cc:	4618      	mov	r0, r3
 80045ce:	f010 fdd5 	bl	801517c <strstr>
 80045d2:	f8c7 04c0 	str.w	r0, [r7, #1216]	@ 0x4c0
		if (info) 
 80045d6:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0e8      	beq.n	80045b0 <OTA_Receive+0x20>
		{
			int actual_len = atoi(info + strlen("+CIPRXGET: 2,"));
 80045de:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 80045e2:	330d      	adds	r3, #13
 80045e4:	4618      	mov	r0, r3
 80045e6:	f010 fca5 	bl	8014f34 <atoi>
 80045ea:	f8c7 04bc 	str.w	r0, [r7, #1212]	@ 0x4bc
			char *data_start = strstr(info, "\r\n");
 80045ee:	4926      	ldr	r1, [pc, #152]	@ (8004688 <OTA_Receive+0xf8>)
 80045f0:	f8d7 04c0 	ldr.w	r0, [r7, #1216]	@ 0x4c0
 80045f4:	f010 fdc2 	bl	801517c <strstr>
 80045f8:	f8c7 04b8 	str.w	r0, [r7, #1208]	@ 0x4b8
			if (actual_len == 0)
 80045fc:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8004600:	2b00      	cmp	r3, #0
 8004602:	d02b      	beq.n	800465c <OTA_Receive+0xcc>
            {
                break;           // Fine file
            }
			if (data_start) 
 8004604:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8004608:	2b00      	cmp	r3, #0
 800460a:	d021      	beq.n	8004650 <OTA_Receive+0xc0>
			{
				data_start += 2; // Salta "\r\n"
 800460c:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8004610:	3302      	adds	r3, #2
 8004612:	f8c7 34b8 	str.w	r3, [r7, #1208]	@ 0x4b8
				SIM_Wait_Response("OK");
 8004616:	481d      	ldr	r0, [pc, #116]	@ (800468c <OTA_Receive+0xfc>)
 8004618:	f7fd f99e 	bl	8001958 <SIM_Wait_Response>
				SIM_Wait_Response("+CIPRXGET: 1");
 800461c:	4817      	ldr	r0, [pc, #92]	@ (800467c <OTA_Receive+0xec>)
 800461e:	f7fd f99b 	bl	8001958 <SIM_Wait_Response>
				f_write(&sys.OTA_File, data_start, actual_len, &bytes_written);
 8004622:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	@ 0x4bc
 8004626:	1d3b      	adds	r3, r7, #4
 8004628:	f8d7 14b8 	ldr.w	r1, [r7, #1208]	@ 0x4b8
 800462c:	4818      	ldr	r0, [pc, #96]	@ (8004690 <OTA_Receive+0x100>)
 800462e:	f004 fcbc 	bl	8008faa <f_write>
				if(bytes_written != actual_len)
 8004632:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8004636:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8004640:	429a      	cmp	r2, r3
 8004642:	d0b5      	beq.n	80045b0 <OTA_Receive+0x20>
				{
					f_close(&sys.OTA_File);
 8004644:	4812      	ldr	r0, [pc, #72]	@ (8004690 <OTA_Receive+0x100>)
 8004646:	f004 feb9 	bl	80093bc <f_close>
					return -1; 
 800464a:	f04f 33ff 	mov.w	r3, #4294967295
 800464e:	e00f      	b.n	8004670 <OTA_Receive+0xe0>
				}
			}
			else
			{
				f_close(&sys.OTA_File);
 8004650:	480f      	ldr	r0, [pc, #60]	@ (8004690 <OTA_Receive+0x100>)
 8004652:	f004 feb3 	bl	80093bc <f_close>
				return -1; 
 8004656:	f04f 33ff 	mov.w	r3, #4294967295
 800465a:	e009      	b.n	8004670 <OTA_Receive+0xe0>
                break;           // Fine file
 800465c:	bf00      	nop
			}
		}
	}

	f_close(&sys.OTA_File);
 800465e:	480c      	ldr	r0, [pc, #48]	@ (8004690 <OTA_Receive+0x100>)
 8004660:	f004 feac 	bl	80093bc <f_close>
    sys.OTA_File_isOpen = 0;
 8004664:	4a0b      	ldr	r2, [pc, #44]	@ (8004694 <OTA_Receive+0x104>)
 8004666:	7813      	ldrb	r3, [r2, #0]
 8004668:	f023 0301 	bic.w	r3, r3, #1
 800466c:	7013      	strb	r3, [r2, #0]
	return 0;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	f507 6799 	add.w	r7, r7, #1224	@ 0x4c8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	080166b8 	.word	0x080166b8
 8004680:	080166c8 	.word	0x080166c8
 8004684:	080166dc 	.word	0x080166dc
 8004688:	080166ec 	.word	0x080166ec
 800468c:	080166f0 	.word	0x080166f0
 8004690:	20000744 	.word	0x20000744
 8004694:	20000740 	.word	0x20000740

08004698 <OTA_CRC_Check>:

int OTA_CRC_Check(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b0cc      	sub	sp, #304	@ 0x130
 800469c:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
	UINT read = 0;
 80046a4:	2300      	movs	r3, #0
 80046a6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	uint16_t ota_crc = 0;
 80046aa:	2300      	movs	r3, #0
 80046ac:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
	uint8_t rx_buffer[20];

	SIM_Wait_Response("+CIPRXGET: 1");
 80046b0:	4846      	ldr	r0, [pc, #280]	@ (80047cc <OTA_CRC_Check+0x134>)
 80046b2:	f7fd f951 	bl	8001958 <SIM_Wait_Response>
	SIM_Send_Command("AT+CIPRXGET=2,2\r");
 80046b6:	4846      	ldr	r0, [pc, #280]	@ (80047d0 <OTA_CRC_Check+0x138>)
 80046b8:	f7fc fd42 	bl	8001140 <SIM_Send_Command>
	SIM_Receive_Response((char*)rx_buffer);
 80046bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fc fd69 	bl	8001198 <SIM_Receive_Response>
	char *info = strstr((char*)rx_buffer, "+CIPRXGET: 2,");
 80046c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046ca:	4942      	ldr	r1, [pc, #264]	@ (80047d4 <OTA_CRC_Check+0x13c>)
 80046cc:	4618      	mov	r0, r3
 80046ce:	f010 fd55 	bl	801517c <strstr>
 80046d2:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124

	if (info)
 80046d6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d008      	beq.n	80046f0 <OTA_CRC_Check+0x58>
	{
		ota_crc = atoi(info + strlen("+CIPRXGET: 2,"));
 80046de:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80046e2:	330d      	adds	r3, #13
 80046e4:	4618      	mov	r0, r3
 80046e6:	f010 fc25 	bl	8014f34 <atoi>
 80046ea:	4603      	mov	r3, r0
 80046ec:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
	}

	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ);
 80046f0:	2201      	movs	r2, #1
 80046f2:	4939      	ldr	r1, [pc, #228]	@ (80047d8 <OTA_CRC_Check+0x140>)
 80046f4:	4839      	ldr	r0, [pc, #228]	@ (80047dc <OTA_CRC_Check+0x144>)
 80046f6:	f004 f96d 	bl	80089d4 <f_open>
 80046fa:	4603      	mov	r3, r0
 80046fc:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
	if (fRes != FR_OK)
 8004700:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <OTA_CRC_Check+0x76>
	{
		return -1;
 8004708:	f04f 33ff 	mov.w	r3, #4294967295
 800470c:	e059      	b.n	80047c2 <OTA_CRC_Check+0x12a>
	}
	uint32_t size = f_size(&sys.OTA_File);
 800470e:	4b34      	ldr	r3, [pc, #208]	@ (80047e0 <OTA_CRC_Check+0x148>)
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	uint16_t calc_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&size, 1);
 8004716:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800471a:	2201      	movs	r2, #1
 800471c:	4619      	mov	r1, r3
 800471e:	4831      	ldr	r0, [pc, #196]	@ (80047e4 <OTA_CRC_Check+0x14c>)
 8004720:	f007 f9cc 	bl	800babc <HAL_CRC_Calculate>
 8004724:	4603      	mov	r3, r0
 8004726:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
	while (size > 0)
 800472a:	e039      	b.n	80047a0 <OTA_CRC_Check+0x108>
	{
		uint8_t buffer[256];
		UINT to_read = (size > sizeof(buffer)) ? sizeof(buffer) : size;
 800472c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004730:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004734:	bf28      	it	cs
 8004736:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800473a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		if (f_read(&sys.OTA_File, buffer, to_read, &read) != FR_OK || read == 0)
 800473e:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8004742:	1d39      	adds	r1, r7, #4
 8004744:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8004748:	4824      	ldr	r0, [pc, #144]	@ (80047dc <OTA_CRC_Check+0x144>)
 800474a:	f004 fadb 	bl	8008d04 <f_read>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d103      	bne.n	800475c <OTA_CRC_Check+0xc4>
 8004754:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004758:	2b00      	cmp	r3, #0
 800475a:	d105      	bne.n	8004768 <OTA_CRC_Check+0xd0>
		{
			f_close(&sys.OTA_File);
 800475c:	481f      	ldr	r0, [pc, #124]	@ (80047dc <OTA_CRC_Check+0x144>)
 800475e:	f004 fe2d 	bl	80093bc <f_close>
			return -1;
 8004762:	f04f 33ff 	mov.w	r3, #4294967295
 8004766:	e02c      	b.n	80047c2 <OTA_CRC_Check+0x12a>
		}
		calc_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buffer, read / 4 + (read % 4 != 0));
 8004768:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800476c:	089b      	lsrs	r3, r3, #2
 800476e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8004772:	f002 0203 	and.w	r2, r2, #3
 8004776:	2a00      	cmp	r2, #0
 8004778:	bf14      	ite	ne
 800477a:	2201      	movne	r2, #1
 800477c:	2200      	moveq	r2, #0
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	441a      	add	r2, r3
 8004782:	1d3b      	adds	r3, r7, #4
 8004784:	4619      	mov	r1, r3
 8004786:	4817      	ldr	r0, [pc, #92]	@ (80047e4 <OTA_CRC_Check+0x14c>)
 8004788:	f007 f998 	bl	800babc <HAL_CRC_Calculate>
 800478c:	4603      	mov	r3, r0
 800478e:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
		size -= read;
 8004792:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8004796:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	while (size > 0)
 80047a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1c1      	bne.n	800472c <OTA_CRC_Check+0x94>
	}

	f_close(&sys.OTA_File);
 80047a8:	480c      	ldr	r0, [pc, #48]	@ (80047dc <OTA_CRC_Check+0x144>)
 80047aa:	f004 fe07 	bl	80093bc <f_close>

	if (calc_crc != ota_crc)
 80047ae:	f8b7 212c 	ldrh.w	r2, [r7, #300]	@ 0x12c
 80047b2:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d002      	beq.n	80047c0 <OTA_CRC_Check+0x128>
	{
		return -1; // CRC non corrisponde
 80047ba:	f04f 33ff 	mov.w	r3, #4294967295
 80047be:	e000      	b.n	80047c2 <OTA_CRC_Check+0x12a>
	}
	
	return 0; // CRC OK
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	080166b8 	.word	0x080166b8
 80047d0:	080166f4 	.word	0x080166f4
 80047d4:	080166dc 	.word	0x080166dc
 80047d8:	080166a8 	.word	0x080166a8
 80047dc:	20000744 	.word	0x20000744
 80047e0:	20000740 	.word	0x20000740
 80047e4:	200002c4 	.word	0x200002c4

080047e8 <OTA_Apply>:


/*-----APPLICAZIONE UPDATE-----*/
int OTA_Apply(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b09a      	sub	sp, #104	@ 0x68
 80047ec:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 80047ee:	2300      	movs	r3, #0
 80047f0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	int32_t result = 0;
 80047f4:	2300      	movs	r3, #0
 80047f6:	667b      	str	r3, [r7, #100]	@ 0x64
	uint8_t ota_bank = 0;
 80047f8:	2300      	movs	r3, #0
 80047fa:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	uint32_t faddr = 0;
 80047fe:	2300      	movs	r3, #0
 8004800:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t size = 0;
 8004802:	2300      	movs	r3, #0
 8004804:	663b      	str	r3, [r7, #96]	@ 0x60
	uint64_t pword = 0;
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	uint32_t faddr_off = 0;
 8004812:	2300      	movs	r3, #0
 8004814:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint16_t crc = 0;
 8004816:	2300      	movs	r3, #0
 8004818:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
	UINT read = 0;
 800481c:	2300      	movs	r3, #0
 800481e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t PageError = 0;
 8004820:	2300      	movs	r3, #0
 8004822:	63bb      	str	r3, [r7, #56]	@ 0x38
	FLASH_EraseInitTypeDef erase_cfg = {0};
 8004824:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	605a      	str	r2, [r3, #4]
 800482e:	609a      	str	r2, [r3, #8]
 8004830:	60da      	str	r2, [r3, #12]

	const uint32_t BANKSIZE = FLASH_SIZE >> 1;
 8004832:	4b69      	ldr	r3, [pc, #420]	@ (80049d8 <OTA_Apply+0x1f0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	b29b      	uxth	r3, r3
 8004838:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800483c:	4293      	cmp	r3, r2
 800483e:	d006      	beq.n	800484e <OTA_Apply+0x66>
 8004840:	4b65      	ldr	r3, [pc, #404]	@ (80049d8 <OTA_Apply+0x1f0>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	029b      	lsls	r3, r3, #10
 8004846:	085a      	lsrs	r2, r3, #1
 8004848:	4b64      	ldr	r3, [pc, #400]	@ (80049dc <OTA_Apply+0x1f4>)
 800484a:	4013      	ands	r3, r2
 800484c:	e001      	b.n	8004852 <OTA_Apply+0x6a>
 800484e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004852:	64fb      	str	r3, [r7, #76]	@ 0x4c

	FLASH_OBProgramInitTypeDef ob = {0};
 8004854:	463b      	mov	r3, r7
 8004856:	2228      	movs	r2, #40	@ 0x28
 8004858:	2100      	movs	r1, #0
 800485a:	4618      	mov	r0, r3
 800485c:	f010 fc54 	bl	8015108 <memset>

	HAL_FLASHEx_OBGetConfig(&ob);
 8004860:	463b      	mov	r3, r7
 8004862:	4618      	mov	r0, r3
 8004864:	f007 ffa8 	bl	800c7b8 <HAL_FLASHEx_OBGetConfig>

	if ((ob.USERConfig & FLASH_OPTR_DUALBANK) == 0)
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d102      	bne.n	8004878 <OTA_Apply+0x90>
	{
		return -1;
 8004872:	f04f 33ff 	mov.w	r3, #4294967295
 8004876:	e0aa      	b.n	80049ce <OTA_Apply+0x1e6>
	}

	ota_bank = (ob.USERConfig & FLASH_OPTR_BFB2) ? FLASH_BANK_1 : FLASH_BANK_2;
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <OTA_Apply+0x9e>
 8004882:	2301      	movs	r3, #1
 8004884:	e000      	b.n	8004888 <OTA_Apply+0xa0>
 8004886:	2302      	movs	r3, #2
 8004888:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a

	// L'indirizzo deve essere sempre quello del banco 2 (se fa il boot da BANK2 il BANK1 viene rimappato)
	faddr = FLASH_BASE + BANKSIZE;
 800488c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800488e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8004892:	657b      	str	r3, [r7, #84]	@ 0x54

	if (HAL_FLASH_Unlock() != HAL_OK)
 8004894:	f007 fd64 	bl	800c360 <HAL_FLASH_Unlock>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <OTA_Apply+0xbc>
	{
		return -1;
 800489e:	f04f 33ff 	mov.w	r3, #4294967295
 80048a2:	e094      	b.n	80049ce <OTA_Apply+0x1e6>
	}

	f_close(&sys.OTA_File);
 80048a4:	484e      	ldr	r0, [pc, #312]	@ (80049e0 <OTA_Apply+0x1f8>)
 80048a6:	f004 fd89 	bl	80093bc <f_close>
	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ);
 80048aa:	2201      	movs	r2, #1
 80048ac:	494d      	ldr	r1, [pc, #308]	@ (80049e4 <OTA_Apply+0x1fc>)
 80048ae:	484c      	ldr	r0, [pc, #304]	@ (80049e0 <OTA_Apply+0x1f8>)
 80048b0:	f004 f890 	bl	80089d4 <f_open>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

	if (fRes != FR_OK)
 80048ba:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <OTA_Apply+0xe2>
	{
		result = -1;
 80048c2:	f04f 33ff 	mov.w	r3, #4294967295
 80048c6:	667b      	str	r3, [r7, #100]	@ 0x64
		goto DONE;
 80048c8:	e07b      	b.n	80049c2 <OTA_Apply+0x1da>
	}

	if ((size = f_size(&sys.OTA_File)) > BANKSIZE)
 80048ca:	4b47      	ldr	r3, [pc, #284]	@ (80049e8 <OTA_Apply+0x200>)
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80048d0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80048d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d903      	bls.n	80048e0 <OTA_Apply+0xf8>
	{
		result = -1;
 80048d8:	f04f 33ff 	mov.w	r3, #4294967295
 80048dc:	667b      	str	r3, [r7, #100]	@ 0x64
		goto DONE;
 80048de:	e070      	b.n	80049c2 <OTA_Apply+0x1da>
	}

	erase_cfg.TypeErase = FLASH_TYPEERASE_MASSERASE;
 80048e0:	2301      	movs	r3, #1
 80048e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	erase_cfg.Banks = ota_bank;
 80048e4:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80048e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_FLASHEx_Erase(&erase_cfg, &PageError) != HAL_OK)
 80048ea:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80048ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80048f2:	4611      	mov	r1, r2
 80048f4:	4618      	mov	r0, r3
 80048f6:	f007 fe55 	bl	800c5a4 <HAL_FLASHEx_Erase>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d026      	beq.n	800494e <OTA_Apply+0x166>
	{
		result = -1;
 8004900:	f04f 33ff 	mov.w	r3, #4294967295
 8004904:	667b      	str	r3, [r7, #100]	@ 0x64
		goto DONE;
 8004906:	e05c      	b.n	80049c2 <OTA_Apply+0x1da>
	}

	while (size > 0)
	{
		pword = 0;
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		if (f_read(&sys.OTA_File, (uint8_t *)&pword, sizeof(pword), &read) < 0)
 8004914:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004918:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800491c:	2208      	movs	r2, #8
 800491e:	4830      	ldr	r0, [pc, #192]	@ (80049e0 <OTA_Apply+0x1f8>)
 8004920:	f004 f9f0 	bl	8008d04 <f_read>
			break;
		if (read == 0)
 8004924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004926:	2b00      	cmp	r3, #0
 8004928:	d015      	beq.n	8004956 <OTA_Apply+0x16e>
			break;
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, faddr + faddr_off, pword) != HAL_OK)
 800492a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800492c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800492e:	18d1      	adds	r1, r2, r3
 8004930:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004934:	2000      	movs	r0, #0
 8004936:	f007 fca7 	bl	800c288 <HAL_FLASH_Program>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10c      	bne.n	800495a <OTA_Apply+0x172>
			break;
		faddr_off += sizeof(pword);
 8004940:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004942:	3308      	adds	r3, #8
 8004944:	65fb      	str	r3, [r7, #92]	@ 0x5c
		size -= read;
 8004946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004948:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	663b      	str	r3, [r7, #96]	@ 0x60
	while (size > 0)
 800494e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1d9      	bne.n	8004908 <OTA_Apply+0x120>
 8004954:	e002      	b.n	800495c <OTA_Apply+0x174>
			break;
 8004956:	bf00      	nop
 8004958:	e000      	b.n	800495c <OTA_Apply+0x174>
			break;
 800495a:	bf00      	nop
	}

	if (size > 0)
 800495c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <OTA_Apply+0x182>
	{
		result = -1;
 8004962:	f04f 33ff 	mov.w	r3, #4294967295
 8004966:	667b      	str	r3, [r7, #100]	@ 0x64
		goto DONE;
 8004968:	e02b      	b.n	80049c2 <OTA_Apply+0x1da>
	}

	HAL_FLASH_Lock();
 800496a:	f007 fd1b 	bl	800c3a4 <HAL_FLASH_Lock>

	HAL_FLASHEx_OBGetConfig(&ob);
 800496e:	463b      	mov	r3, r7
 8004970:	4618      	mov	r0, r3
 8004972:	f007 ff21 	bl	800c7b8 <HAL_FLASHEx_OBGetConfig>
	HAL_FLASH_Unlock();
 8004976:	f007 fcf3 	bl	800c360 <HAL_FLASH_Unlock>
	HAL_FLASH_OB_Unlock();
 800497a:	f007 fd23 	bl	800c3c4 <HAL_FLASH_OB_Unlock>

	ob.OptionType = OPTIONBYTE_USER;
 800497e:	2304      	movs	r3, #4
 8004980:	603b      	str	r3, [r7, #0]
	ob.USERType = OB_USER_BFB2;
 8004982:	2380      	movs	r3, #128	@ 0x80
 8004984:	617b      	str	r3, [r7, #20]
	ob.USERConfig = (ota_bank == FLASH_BANK_2) ? FLASH_OPTR_BFB2 : 0;
 8004986:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800498a:	2b02      	cmp	r3, #2
 800498c:	d102      	bne.n	8004994 <OTA_Apply+0x1ac>
 800498e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004992:	e000      	b.n	8004996 <OTA_Apply+0x1ae>
 8004994:	2300      	movs	r3, #0
 8004996:	61bb      	str	r3, [r7, #24]

	if (HAL_FLASHEx_OBProgram(&ob) != HAL_OK)
 8004998:	463b      	mov	r3, r7
 800499a:	4618      	mov	r0, r3
 800499c:	f007 fe9e 	bl	800c6dc <HAL_FLASHEx_OBProgram>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <OTA_Apply+0x1ce>
	{
		HAL_FLASH_OB_Lock();
 80049a6:	f007 fd29 	bl	800c3fc <HAL_FLASH_OB_Lock>
		HAL_FLASH_Lock();
 80049aa:	f007 fcfb 	bl	800c3a4 <HAL_FLASH_Lock>
		result = -1;
 80049ae:	f04f 33ff 	mov.w	r3, #4294967295
 80049b2:	667b      	str	r3, [r7, #100]	@ 0x64
		goto DONE;
 80049b4:	e005      	b.n	80049c2 <OTA_Apply+0x1da>
	}

	HAL_FLASH_OB_Launch();
 80049b6:	f007 fd31 	bl	800c41c <HAL_FLASH_OB_Launch>
	HAL_FLASH_OB_Lock();
 80049ba:	f007 fd1f 	bl	800c3fc <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 80049be:	f007 fcf1 	bl	800c3a4 <HAL_FLASH_Lock>

	DONE:

	f_close(&sys.OTA_File);
 80049c2:	4807      	ldr	r0, [pc, #28]	@ (80049e0 <OTA_Apply+0x1f8>)
 80049c4:	f004 fcfa 	bl	80093bc <f_close>

	HAL_FLASH_Lock();
 80049c8:	f007 fcec 	bl	800c3a4 <HAL_FLASH_Lock>

	return result;
 80049cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3768      	adds	r7, #104	@ 0x68
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	1fff75e0 	.word	0x1fff75e0
 80049dc:	01fffe00 	.word	0x01fffe00
 80049e0:	20000744 	.word	0x20000744
 80049e4:	080166a8 	.word	0x080166a8
 80049e8:	20000740 	.word	0x20000740

080049ec <Save_Data>:
#include "stdlib.h"


/*-----ACQUISIZIONE MISURE E LOG DEI DATI-----*/
void Save_Data(void)
{
 80049ec:	b590      	push	{r4, r7, lr}
 80049ee:	f2ad 4ddc 	subw	sp, sp, #1244	@ 0x4dc
 80049f2:	af00      	add	r7, sp, #0
	if(flags.ADC_Half_Buffer)
 80049f4:	4b78      	ldr	r3, [pc, #480]	@ (8004bd8 <Save_Data+0x1ec>)
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d037      	beq.n	8004a72 <Save_Data+0x86>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[0], PRESS_HALF_LEN);
 8004a02:	4b76      	ldr	r3, [pc, #472]	@ (8004bdc <Save_Data+0x1f0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	4b75      	ldr	r3, [pc, #468]	@ (8004be0 <Save_Data+0x1f4>)
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8004a10:	4974      	ldr	r1, [pc, #464]	@ (8004be4 <Save_Data+0x1f8>)
 8004a12:	4618      	mov	r0, r3
 8004a14:	f010 fbfc 	bl	8015210 <memcpy>
		Last_Pressure = 0;
 8004a18:	4b73      	ldr	r3, [pc, #460]	@ (8004be8 <Save_Data+0x1fc>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 8004a24:	e00f      	b.n	8004a46 <Save_Data+0x5a>
		{
			Last_Pressure += Pressure[i];
 8004a26:	4a6f      	ldr	r2, [pc, #444]	@ (8004be4 <Save_Data+0x1f8>)
 8004a28:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 8004a2c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004a30:	4b6d      	ldr	r3, [pc, #436]	@ (8004be8 <Save_Data+0x1fc>)
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	4413      	add	r3, r2
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	4b6b      	ldr	r3, [pc, #428]	@ (8004be8 <Save_Data+0x1fc>)
 8004a3a:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 8004a3c:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 8004a40:	3301      	adds	r3, #1
 8004a42:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 8004a46:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 8004a4a:	2bc7      	cmp	r3, #199	@ 0xc7
 8004a4c:	ddeb      	ble.n	8004a26 <Save_Data+0x3a>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 8004a4e:	4b66      	ldr	r3, [pc, #408]	@ (8004be8 <Save_Data+0x1fc>)
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	4a66      	ldr	r2, [pc, #408]	@ (8004bec <Save_Data+0x200>)
 8004a54:	fba2 2303 	umull	r2, r3, r2, r3
 8004a58:	099b      	lsrs	r3, r3, #6
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	4b62      	ldr	r3, [pc, #392]	@ (8004be8 <Save_Data+0x1fc>)
 8004a5e:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[0]);
 8004a60:	4860      	ldr	r0, [pc, #384]	@ (8004be4 <Save_Data+0x1f8>)
 8004a62:	f000 fb39 	bl	80050d8 <Warning_Detection>
		flags.ADC_Half_Buffer = 0;
 8004a66:	4a5c      	ldr	r2, [pc, #368]	@ (8004bd8 <Save_Data+0x1ec>)
 8004a68:	7813      	ldrb	r3, [r2, #0]
 8004a6a:	f023 0302 	bic.w	r3, r3, #2
 8004a6e:	7013      	strb	r3, [r2, #0]
 8004a70:	e03e      	b.n	8004af0 <Save_Data+0x104>
	}
	else if(flags.ADC_Full_Buffer)
 8004a72:	4b59      	ldr	r3, [pc, #356]	@ (8004bd8 <Save_Data+0x1ec>)
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	f003 0304 	and.w	r3, r3, #4
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d037      	beq.n	8004af0 <Save_Data+0x104>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[PRESS_HALF_SAMPLES], PRESS_HALF_LEN);
 8004a80:	4b56      	ldr	r3, [pc, #344]	@ (8004bdc <Save_Data+0x1f0>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	461a      	mov	r2, r3
 8004a86:	4b56      	ldr	r3, [pc, #344]	@ (8004be0 <Save_Data+0x1f4>)
 8004a88:	4413      	add	r3, r2
 8004a8a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8004a8e:	4958      	ldr	r1, [pc, #352]	@ (8004bf0 <Save_Data+0x204>)
 8004a90:	4618      	mov	r0, r3
 8004a92:	f010 fbbd 	bl	8015210 <memcpy>
		Last_Pressure = 0;
 8004a96:	4b54      	ldr	r3, [pc, #336]	@ (8004be8 <Save_Data+0x1fc>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 8004a9c:	23c8      	movs	r3, #200	@ 0xc8
 8004a9e:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 8004aa2:	e00f      	b.n	8004ac4 <Save_Data+0xd8>
		{
			Last_Pressure += Pressure[i];
 8004aa4:	4a4f      	ldr	r2, [pc, #316]	@ (8004be4 <Save_Data+0x1f8>)
 8004aa6:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 8004aaa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004aae:	4b4e      	ldr	r3, [pc, #312]	@ (8004be8 <Save_Data+0x1fc>)
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	4b4c      	ldr	r3, [pc, #304]	@ (8004be8 <Save_Data+0x1fc>)
 8004ab8:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 8004aba:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 8004abe:	3301      	adds	r3, #1
 8004ac0:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 8004ac4:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 8004ac8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8004acc:	dbea      	blt.n	8004aa4 <Save_Data+0xb8>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 8004ace:	4b46      	ldr	r3, [pc, #280]	@ (8004be8 <Save_Data+0x1fc>)
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	4a46      	ldr	r2, [pc, #280]	@ (8004bec <Save_Data+0x200>)
 8004ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad8:	099b      	lsrs	r3, r3, #6
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	4b42      	ldr	r3, [pc, #264]	@ (8004be8 <Save_Data+0x1fc>)
 8004ade:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[PRESS_HALF_SAMPLES]);
 8004ae0:	4843      	ldr	r0, [pc, #268]	@ (8004bf0 <Save_Data+0x204>)
 8004ae2:	f000 faf9 	bl	80050d8 <Warning_Detection>
		flags.ADC_Full_Buffer = 0;
 8004ae6:	4a3c      	ldr	r2, [pc, #240]	@ (8004bd8 <Save_Data+0x1ec>)
 8004ae8:	7813      	ldrb	r3, [r2, #0]
 8004aea:	f023 0304 	bic.w	r3, r3, #4
 8004aee:	7013      	strb	r3, [r2, #0]
	}
	flags.ADC_Complete = 0;
 8004af0:	4a39      	ldr	r2, [pc, #228]	@ (8004bd8 <Save_Data+0x1ec>)
 8004af2:	7813      	ldrb	r3, [r2, #0]
 8004af4:	f023 0301 	bic.w	r3, r3, #1
 8004af8:	7013      	strb	r3, [r2, #0]
	Address_Offset += PRESS_HALF_LEN;
 8004afa:	4b38      	ldr	r3, [pc, #224]	@ (8004bdc <Save_Data+0x1f0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8004b02:	4a36      	ldr	r2, [pc, #216]	@ (8004bdc <Save_Data+0x1f0>)
 8004b04:	6013      	str	r3, [r2, #0]

	memcpy(Saving_Buffer + Address_Offset, Volume_Period, MAX_VOLUME_LEN);
 8004b06:	4b35      	ldr	r3, [pc, #212]	@ (8004bdc <Save_Data+0x1f0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	4b34      	ldr	r3, [pc, #208]	@ (8004be0 <Save_Data+0x1f4>)
 8004b0e:	4413      	add	r3, r2
 8004b10:	2228      	movs	r2, #40	@ 0x28
 8004b12:	4938      	ldr	r1, [pc, #224]	@ (8004bf4 <Save_Data+0x208>)
 8004b14:	4618      	mov	r0, r3
 8004b16:	f010 fb7b 	bl	8015210 <memcpy>
	uint8_t current_period_cnt = Period_cnt;
 8004b1a:	4b37      	ldr	r3, [pc, #220]	@ (8004bf8 <Save_Data+0x20c>)
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
	Last_Volume = 0;
 8004b22:	4b36      	ldr	r3, [pc, #216]	@ (8004bfc <Save_Data+0x210>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < current_period_cnt; i++)
 8004b28:	2300      	movs	r3, #0
 8004b2a:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8004b2e:	e010      	b.n	8004b52 <Save_Data+0x166>
	{
		Last_Volume += Volume_Period[i];
 8004b30:	4a30      	ldr	r2, [pc, #192]	@ (8004bf4 <Save_Data+0x208>)
 8004b32:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8004b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8004bfc <Save_Data+0x210>)
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	4413      	add	r3, r2
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	4b2d      	ldr	r3, [pc, #180]	@ (8004bfc <Save_Data+0x210>)
 8004b46:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < current_period_cnt; i++)
 8004b48:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8004b52:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 8004b56:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	@ 0x4cc
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	dbe8      	blt.n	8004b30 <Save_Data+0x144>
	}
	Last_Volume = (uint16_t)(Last_Volume / current_period_cnt);
 8004b5e:	4b27      	ldr	r3, [pc, #156]	@ (8004bfc <Save_Data+0x210>)
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	461a      	mov	r2, r3
 8004b64:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 8004b68:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	4b23      	ldr	r3, [pc, #140]	@ (8004bfc <Save_Data+0x210>)
 8004b70:	801a      	strh	r2, [r3, #0]
	memset(Volume_Period, 0, sizeof(Volume_Period));
 8004b72:	2228      	movs	r2, #40	@ 0x28
 8004b74:	2100      	movs	r1, #0
 8004b76:	481f      	ldr	r0, [pc, #124]	@ (8004bf4 <Save_Data+0x208>)
 8004b78:	f010 fac6 	bl	8015108 <memset>
	Period_cnt = 0;
 8004b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf8 <Save_Data+0x20c>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	701a      	strb	r2, [r3, #0]
	Address_Offset += MAX_VOLUME_LEN;
 8004b82:	4b16      	ldr	r3, [pc, #88]	@ (8004bdc <Save_Data+0x1f0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3328      	adds	r3, #40	@ 0x28
 8004b88:	4a14      	ldr	r2, [pc, #80]	@ (8004bdc <Save_Data+0x1f0>)
 8004b8a:	6013      	str	r3, [r2, #0]

	if(sys.ACC_Present)
 8004b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8004c00 <Save_Data+0x214>)
 8004b8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b92:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 80a4 	beq.w	8004cea <Save_Data+0x2fe>
	{
		memcpy(Saving_Buffer + Address_Offset, Acceleration, ACCELERATION_LEN);
 8004ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8004bdc <Save_Data+0x1f0>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8004be0 <Save_Data+0x1f4>)
 8004baa:	4413      	add	r3, r2
 8004bac:	4a15      	ldr	r2, [pc, #84]	@ (8004c04 <Save_Data+0x218>)
 8004bae:	4618      	mov	r0, r3
 8004bb0:	4611      	mov	r1, r2
 8004bb2:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	f010 fb2a 	bl	8015210 <memcpy>
		Last_Acceleration.x = 0;
 8004bbc:	4b12      	ldr	r3, [pc, #72]	@ (8004c08 <Save_Data+0x21c>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = 0;
 8004bc2:	4b11      	ldr	r3, [pc, #68]	@ (8004c08 <Save_Data+0x21c>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = 0;
 8004bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8004c08 <Save_Data+0x21c>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 8004bd4:	e064      	b.n	8004ca0 <Save_Data+0x2b4>
 8004bd6:	bf00      	nop
 8004bd8:	20001c50 	.word	0x20001c50
 8004bdc:	20004e98 	.word	0x20004e98
 8004be0:	20004768 	.word	0x20004768
 8004be4:	20003e34 	.word	0x20003e34
 8004be8:	200046f4 	.word	0x200046f4
 8004bec:	51eb851f 	.word	0x51eb851f
 8004bf0:	20003fc4 	.word	0x20003fc4
 8004bf4:	20004154 	.word	0x20004154
 8004bf8:	20003e30 	.word	0x20003e30
 8004bfc:	200046f6 	.word	0x200046f6
 8004c00:	20000740 	.word	0x20000740
 8004c04:	2000417c 	.word	0x2000417c
 8004c08:	200046f8 	.word	0x200046f8
		{
			Last_Acceleration.x += Acceleration[i+1] | (Acceleration[i+2] << 8); 
 8004c0c:	4b81      	ldr	r3, [pc, #516]	@ (8004e14 <Save_Data+0x428>)
 8004c0e:	885a      	ldrh	r2, [r3, #2]
 8004c10:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8004c14:	3301      	adds	r3, #1
 8004c16:	4980      	ldr	r1, [pc, #512]	@ (8004e18 <Save_Data+0x42c>)
 8004c18:	5ccb      	ldrb	r3, [r1, r3]
 8004c1a:	b219      	sxth	r1, r3
 8004c1c:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8004c20:	3302      	adds	r3, #2
 8004c22:	487d      	ldr	r0, [pc, #500]	@ (8004e18 <Save_Data+0x42c>)
 8004c24:	5cc3      	ldrb	r3, [r0, r3]
 8004c26:	b21b      	sxth	r3, r3
 8004c28:	021b      	lsls	r3, r3, #8
 8004c2a:	b21b      	sxth	r3, r3
 8004c2c:	430b      	orrs	r3, r1
 8004c2e:	b21b      	sxth	r3, r3
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	4413      	add	r3, r2
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	4b77      	ldr	r3, [pc, #476]	@ (8004e14 <Save_Data+0x428>)
 8004c38:	805a      	strh	r2, [r3, #2]
			Last_Acceleration.y += Acceleration[i+3] | (Acceleration[i+4] << 8); 
 8004c3a:	4b76      	ldr	r3, [pc, #472]	@ (8004e14 <Save_Data+0x428>)
 8004c3c:	889a      	ldrh	r2, [r3, #4]
 8004c3e:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8004c42:	3303      	adds	r3, #3
 8004c44:	4974      	ldr	r1, [pc, #464]	@ (8004e18 <Save_Data+0x42c>)
 8004c46:	5ccb      	ldrb	r3, [r1, r3]
 8004c48:	b219      	sxth	r1, r3
 8004c4a:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8004c4e:	3304      	adds	r3, #4
 8004c50:	4871      	ldr	r0, [pc, #452]	@ (8004e18 <Save_Data+0x42c>)
 8004c52:	5cc3      	ldrb	r3, [r0, r3]
 8004c54:	b21b      	sxth	r3, r3
 8004c56:	021b      	lsls	r3, r3, #8
 8004c58:	b21b      	sxth	r3, r3
 8004c5a:	430b      	orrs	r3, r1
 8004c5c:	b21b      	sxth	r3, r3
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	4413      	add	r3, r2
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	4b6b      	ldr	r3, [pc, #428]	@ (8004e14 <Save_Data+0x428>)
 8004c66:	809a      	strh	r2, [r3, #4]
			Last_Acceleration.z += Acceleration[i+5] | (Acceleration[i+6] << 8); 
 8004c68:	4b6a      	ldr	r3, [pc, #424]	@ (8004e14 <Save_Data+0x428>)
 8004c6a:	88da      	ldrh	r2, [r3, #6]
 8004c6c:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8004c70:	3305      	adds	r3, #5
 8004c72:	4969      	ldr	r1, [pc, #420]	@ (8004e18 <Save_Data+0x42c>)
 8004c74:	5ccb      	ldrb	r3, [r1, r3]
 8004c76:	b219      	sxth	r1, r3
 8004c78:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8004c7c:	3306      	adds	r3, #6
 8004c7e:	4866      	ldr	r0, [pc, #408]	@ (8004e18 <Save_Data+0x42c>)
 8004c80:	5cc3      	ldrb	r3, [r0, r3]
 8004c82:	b21b      	sxth	r3, r3
 8004c84:	021b      	lsls	r3, r3, #8
 8004c86:	b21b      	sxth	r3, r3
 8004c88:	430b      	orrs	r3, r1
 8004c8a:	b21b      	sxth	r3, r3
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	4413      	add	r3, r2
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	4b60      	ldr	r3, [pc, #384]	@ (8004e14 <Save_Data+0x428>)
 8004c94:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 8004c96:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8004c9a:	3307      	adds	r3, #7
 8004c9c:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 8004ca0:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8004ca4:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 8004ca8:	dbb0      	blt.n	8004c0c <Save_Data+0x220>
		}
		Last_Acceleration.x = (uint16_t)(Last_Acceleration.x / (ACCELERATION_LEN / 7));
 8004caa:	4b5a      	ldr	r3, [pc, #360]	@ (8004e14 <Save_Data+0x428>)
 8004cac:	885b      	ldrh	r3, [r3, #2]
 8004cae:	4a5b      	ldr	r2, [pc, #364]	@ (8004e1c <Save_Data+0x430>)
 8004cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb4:	099b      	lsrs	r3, r3, #6
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	4b56      	ldr	r3, [pc, #344]	@ (8004e14 <Save_Data+0x428>)
 8004cba:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = (uint16_t)(Last_Acceleration.y / (ACCELERATION_LEN / 7));
 8004cbc:	4b55      	ldr	r3, [pc, #340]	@ (8004e14 <Save_Data+0x428>)
 8004cbe:	889b      	ldrh	r3, [r3, #4]
 8004cc0:	4a56      	ldr	r2, [pc, #344]	@ (8004e1c <Save_Data+0x430>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	099b      	lsrs	r3, r3, #6
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	4b52      	ldr	r3, [pc, #328]	@ (8004e14 <Save_Data+0x428>)
 8004ccc:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = (uint16_t)(Last_Acceleration.z / (ACCELERATION_LEN / 7));
 8004cce:	4b51      	ldr	r3, [pc, #324]	@ (8004e14 <Save_Data+0x428>)
 8004cd0:	88db      	ldrh	r3, [r3, #6]
 8004cd2:	4a52      	ldr	r2, [pc, #328]	@ (8004e1c <Save_Data+0x430>)
 8004cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd8:	099b      	lsrs	r3, r3, #6
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	4b4d      	ldr	r3, [pc, #308]	@ (8004e14 <Save_Data+0x428>)
 8004cde:	80da      	strh	r2, [r3, #6]
		flags.ACC_Complete = 0;
 8004ce0:	4a4f      	ldr	r2, [pc, #316]	@ (8004e20 <Save_Data+0x434>)
 8004ce2:	7813      	ldrb	r3, [r2, #0]
 8004ce4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ce8:	7013      	strb	r3, [r2, #0]
	}
	Address_Offset += ACCELERATION_LEN;
 8004cea:	4b4e      	ldr	r3, [pc, #312]	@ (8004e24 <Save_Data+0x438>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 8004cf2:	4a4c      	ldr	r2, [pc, #304]	@ (8004e24 <Save_Data+0x438>)
 8004cf4:	6013      	str	r3, [r2, #0]

	INA3221_Read_Measure(&Supply);
 8004cf6:	484c      	ldr	r0, [pc, #304]	@ (8004e28 <Save_Data+0x43c>)
 8004cf8:	f7fb fda2 	bl	8000840 <INA3221_Read_Measure>
	uint16_t new_temp = 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4
	if((new_temp = Read_Temperature()) != 0)
 8004d02:	f7fb fd43 	bl	800078c <Read_Temperature>
 8004d06:	4603      	mov	r3, r0
 8004d08:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4
 8004d0c:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d003      	beq.n	8004d1c <Save_Data+0x330>
	{
		Temperature = new_temp;
 8004d14:	4a45      	ldr	r2, [pc, #276]	@ (8004e2c <Save_Data+0x440>)
 8004d16:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8004d1a:	8013      	strh	r3, [r2, #0]
	}

	uint8_t compressed_data[MAX_COMPRESSED_SIZE];
	Compressed_Sample_Typedef sample;
    sample.compressed_size = Compress_Sample(Saving_Buffer, SAVING_BUFFER_LEN, compressed_data);
 8004d1c:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8004d20:	f2a3 44cc 	subw	r4, r3, #1228	@ 0x4cc
 8004d24:	4638      	mov	r0, r7
 8004d26:	f107 0314 	add.w	r3, r7, #20
 8004d2a:	f44f 62e6 	mov.w	r2, #1840	@ 0x730
 8004d2e:	4940      	ldr	r1, [pc, #256]	@ (8004e30 <Save_Data+0x444>)
 8004d30:	f000 fb36 	bl	80053a0 <Compress_Sample>
 8004d34:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8004d38:	f5a3 629b 	sub.w	r2, r3, #1240	@ 0x4d8
 8004d3c:	4623      	mov	r3, r4
 8004d3e:	6810      	ldr	r0, [r2, #0]
 8004d40:	6018      	str	r0, [r3, #0]
 8004d42:	8892      	ldrh	r2, [r2, #4]
 8004d44:	809a      	strh	r2, [r3, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d46:	b672      	cpsid	i
}
 8004d48:	bf00      	nop

	__disable_irq();
	RAM_Save_Measure(&sample, compressed_data);
 8004d4a:	f107 0214 	add.w	r2, r7, #20
 8004d4e:	f107 030c 	add.w	r3, r7, #12
 8004d52:	4611      	mov	r1, r2
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 fa23 	bl	80051a0 <RAM_Save_Measure>
  __ASM volatile ("cpsie i" : : : "memory");
 8004d5a:	b662      	cpsie	i
}
 8004d5c:	bf00      	nop
	__enable_irq();

	Address_Offset = 0;
 8004d5e:	4b31      	ldr	r3, [pc, #196]	@ (8004e24 <Save_Data+0x438>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]

	if(flags.Hammer_Detected || flags.Threshold_Detected)
 8004d64:	4b2e      	ldr	r3, [pc, #184]	@ (8004e20 <Save_Data+0x434>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	f003 0308 	and.w	r3, r3, #8
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d106      	bne.n	8004d80 <Save_Data+0x394>
 8004d72:	4b2b      	ldr	r3, [pc, #172]	@ (8004e20 <Save_Data+0x434>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d043      	beq.n	8004e08 <Save_Data+0x41c>
	{
		Cycles_After_Warning++;
 8004d80:	4b2c      	ldr	r3, [pc, #176]	@ (8004e34 <Save_Data+0x448>)
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	3301      	adds	r3, #1
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	4b2a      	ldr	r3, [pc, #168]	@ (8004e34 <Save_Data+0x448>)
 8004d8a:	801a      	strh	r2, [r3, #0]
		if(Cycles_After_Warning >= config.buffering_secs * (config.samp_freq / ACC_FIFO_WATERMARK))
 8004d8c:	4b29      	ldr	r3, [pc, #164]	@ (8004e34 <Save_Data+0x448>)
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	4619      	mov	r1, r3
 8004d92:	4b29      	ldr	r3, [pc, #164]	@ (8004e38 <Save_Data+0x44c>)
 8004d94:	791b      	ldrb	r3, [r3, #4]
 8004d96:	4618      	mov	r0, r3
 8004d98:	4b27      	ldr	r3, [pc, #156]	@ (8004e38 <Save_Data+0x44c>)
 8004d9a:	885b      	ldrh	r3, [r3, #2]
 8004d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8004e1c <Save_Data+0x430>)
 8004d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004da2:	099b      	lsrs	r3, r3, #6
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	fb00 f303 	mul.w	r3, r0, r3
 8004daa:	4299      	cmp	r1, r3
 8004dac:	db2c      	blt.n	8004e08 <Save_Data+0x41c>
		{
			if(!flags.CMD.Measure_Request)
 8004dae:	4b1c      	ldr	r3, [pc, #112]	@ (8004e20 <Save_Data+0x434>)
 8004db0:	789b      	ldrb	r3, [r3, #2]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d125      	bne.n	8004e08 <Save_Data+0x41c>
			{
				Switch_Buffer();
 8004dbc:	f000 f842 	bl	8004e44 <Switch_Buffer>
				flags.CMD.Measure_Request = 1;
 8004dc0:	4a17      	ldr	r2, [pc, #92]	@ (8004e20 <Save_Data+0x434>)
 8004dc2:	7893      	ldrb	r3, [r2, #2]
 8004dc4:	f043 0302 	orr.w	r3, r3, #2
 8004dc8:	7093      	strb	r3, [r2, #2]
				Send_Measure_Addr = Saved_Bytes;
 8004dca:	4b1c      	ldr	r3, [pc, #112]	@ (8004e3c <Save_Data+0x450>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a1c      	ldr	r2, [pc, #112]	@ (8004e40 <Save_Data+0x454>)
 8004dd0:	6013      	str	r3, [r2, #0]
				Cycles_After_Warning = 0;
 8004dd2:	4b18      	ldr	r3, [pc, #96]	@ (8004e34 <Save_Data+0x448>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	801a      	strh	r2, [r3, #0]
				if(flags.Hammer_Detected)
 8004dd8:	4b11      	ldr	r3, [pc, #68]	@ (8004e20 <Save_Data+0x434>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d004      	beq.n	8004df0 <Save_Data+0x404>
				{
					flags.Hammer_Detected = 0;
 8004de6:	4a0e      	ldr	r2, [pc, #56]	@ (8004e20 <Save_Data+0x434>)
 8004de8:	7813      	ldrb	r3, [r2, #0]
 8004dea:	f023 0308 	bic.w	r3, r3, #8
 8004dee:	7013      	strb	r3, [r2, #0]
				}
				if(flags.Threshold_Detected)
 8004df0:	4b0b      	ldr	r3, [pc, #44]	@ (8004e20 <Save_Data+0x434>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d004      	beq.n	8004e08 <Save_Data+0x41c>
				{
					flags.Threshold_Detected = 0;
 8004dfe:	4a08      	ldr	r2, [pc, #32]	@ (8004e20 <Save_Data+0x434>)
 8004e00:	7813      	ldrb	r3, [r2, #0]
 8004e02:	f023 0310 	bic.w	r3, r3, #16
 8004e06:	7013      	strb	r3, [r2, #0]
				}
			}
		}
	}

}
 8004e08:	bf00      	nop
 8004e0a:	f207 47dc 	addw	r7, r7, #1244	@ 0x4dc
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd90      	pop	{r4, r7, pc}
 8004e12:	bf00      	nop
 8004e14:	200046f8 	.word	0x200046f8
 8004e18:	2000417c 	.word	0x2000417c
 8004e1c:	51eb851f 	.word	0x51eb851f
 8004e20:	20001c50 	.word	0x20001c50
 8004e24:	20004e98 	.word	0x20004e98
 8004e28:	20003e24 	.word	0x20003e24
 8004e2c:	20004700 	.word	0x20004700
 8004e30:	20004768 	.word	0x20004768
 8004e34:	20004e9c 	.word	0x20004e9c
 8004e38:	20001c54 	.word	0x20001c54
 8004e3c:	20004ea0 	.word	0x20004ea0
 8004e40:	20004ea8 	.word	0x20004ea8

08004e44 <Switch_Buffer>:

/*-----CAMBIO BUFFER-----*/
void Switch_Buffer(void)
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
    sys.Inactive_RAM_Len = sys.Current_RAM_Len;
 8004e48:	4b23      	ldr	r3, [pc, #140]	@ (8004ed8 <Switch_Buffer+0x94>)
 8004e4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e52:	4a21      	ldr	r2, [pc, #132]	@ (8004ed8 <Switch_Buffer+0x94>)
 8004e54:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004e58:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8

    if (sys.Active_RAM_Buffer == 0) 
 8004e5c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ed8 <Switch_Buffer+0x94>)
 8004e5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e62:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d116      	bne.n	8004e98 <Switch_Buffer+0x54>
	{
		sys.RAM_Buffer_Base_tosend = RAM_SECOND_BUFFER_ADD;
 8004e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed8 <Switch_Buffer+0x94>)
 8004e6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e70:	461a      	mov	r2, r3
 8004e72:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004e76:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
        sys.Active_RAM_Buffer = 1;
 8004e7a:	4b17      	ldr	r3, [pc, #92]	@ (8004ed8 <Switch_Buffer+0x94>)
 8004e7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
        sys.Current_RAM_Base = RAM_SECOND_BUFFER_ADD;
 8004e86:	4b14      	ldr	r3, [pc, #80]	@ (8004ed8 <Switch_Buffer+0x94>)
 8004e88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004e92:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
 8004e96:	e013      	b.n	8004ec0 <Switch_Buffer+0x7c>
    } 
	else 
	{
		sys.RAM_Buffer_Base_tosend = RAM_FIRST_BUFFER_ADD;
 8004e98:	4b0f      	ldr	r3, [pc, #60]	@ (8004ed8 <Switch_Buffer+0x94>)
 8004e9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
        sys.Active_RAM_Buffer = 0;
 8004ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed8 <Switch_Buffer+0x94>)
 8004ea8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
        sys.Current_RAM_Base = RAM_FIRST_BUFFER_ADD;
 8004eb2:	4b09      	ldr	r3, [pc, #36]	@ (8004ed8 <Switch_Buffer+0x94>)
 8004eb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eb8:	461a      	mov	r2, r3
 8004eba:	2300      	movs	r3, #0
 8004ebc:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
    }

    sys.Current_RAM_Len = 0;
 8004ec0:	4b05      	ldr	r3, [pc, #20]	@ (8004ed8 <Switch_Buffer+0x94>)
 8004ec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
}
 8004ece:	bf00      	nop
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	20000740 	.word	0x20000740

08004edc <Erase_RAM_Data>:

/*-----CANCELLAZIONE DATI RAM-----*/
void Erase_RAM_Data(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8004ee2:	af00      	add	r7, sp, #0
	uint8_t zero_buffer[1024] = {0};
 8004ee4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8004ee8:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8004eec:	4618      	mov	r0, r3
 8004eee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	f010 f907 	bl	8015108 <memset>
	for (uint32_t addr = 0; addr < 0x800000; addr += sizeof(zero_buffer)) 
 8004efa:	2300      	movs	r3, #0
 8004efc:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8004f00:	e00d      	b.n	8004f1e <Erase_RAM_Data+0x42>
	{
		RAM_Write(addr, sizeof(zero_buffer), zero_buffer);
 8004f02:	1d3b      	adds	r3, r7, #4
 8004f04:	461a      	mov	r2, r3
 8004f06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004f0a:	f8d7 0404 	ldr.w	r0, [r7, #1028]	@ 0x404
 8004f0e:	f001 f9dd 	bl	80062cc <RAM_Write>
	for (uint32_t addr = 0; addr < 0x800000; addr += sizeof(zero_buffer)) 
 8004f12:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8004f16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f1a:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8004f1e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8004f22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f26:	d3ec      	bcc.n	8004f02 <Erase_RAM_Data+0x26>
	}
}
 8004f28:	bf00      	nop
 8004f2a:	bf00      	nop
 8004f2c:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <Start_Measure>:


/*-----AVVIO MISURA-----*/
void Start_Measure(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
	Erase_RAM_Data();
 8004f38:	f7ff ffd0 	bl	8004edc <Erase_RAM_Data>
	sys.RAM_Samples_Number = (config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * 2;
 8004f3c:	4b47      	ldr	r3, [pc, #284]	@ (800505c <Start_Measure+0x128>)
 8004f3e:	885b      	ldrh	r3, [r3, #2]
 8004f40:	4a47      	ldr	r2, [pc, #284]	@ (8005060 <Start_Measure+0x12c>)
 8004f42:	fba2 2303 	umull	r2, r3, r2, r3
 8004f46:	099b      	lsrs	r3, r3, #6
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	4b43      	ldr	r3, [pc, #268]	@ (800505c <Start_Measure+0x128>)
 8004f4e:	791b      	ldrb	r3, [r3, #4]
 8004f50:	fb02 f303 	mul.w	r3, r2, r3
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	461a      	mov	r2, r3
 8004f58:	4b42      	ldr	r3, [pc, #264]	@ (8005064 <Start_Measure+0x130>)
 8004f5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f5e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	sys.Active_RAM_Buffer = 0;
 8004f62:	4b40      	ldr	r3, [pc, #256]	@ (8005064 <Start_Measure+0x130>)
 8004f64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	sys.Inactive_RAM_Len = 0;
 8004f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8005064 <Start_Measure+0x130>)
 8004f70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f74:	461a      	mov	r2, r3
 8004f76:	2300      	movs	r3, #0
 8004f78:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
	sys.Current_RAM_Base = RAM_FIRST_BUFFER_ADD;
 8004f7c:	4b39      	ldr	r3, [pc, #228]	@ (8005064 <Start_Measure+0x130>)
 8004f7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f82:	461a      	mov	r2, r3
 8004f84:	2300      	movs	r3, #0
 8004f86:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
	sys.Current_RAM_Len = 0;
 8004f8a:	4b36      	ldr	r3, [pc, #216]	@ (8005064 <Start_Measure+0x130>)
 8004f8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f90:	461a      	mov	r2, r3
 8004f92:	2300      	movs	r3, #0
 8004f94:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
	memset(Pressure, 0, sizeof(Pressure));
 8004f98:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	4832      	ldr	r0, [pc, #200]	@ (8005068 <Start_Measure+0x134>)
 8004fa0:	f010 f8b2 	bl	8015108 <memset>
	memset(Volume_Period, 0, sizeof(Volume_Period));
 8004fa4:	2228      	movs	r2, #40	@ 0x28
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	4830      	ldr	r0, [pc, #192]	@ (800506c <Start_Measure+0x138>)
 8004faa:	f010 f8ad 	bl	8015108 <memset>
	memset(Acceleration, 0, sizeof(Acceleration));
 8004fae:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	482e      	ldr	r0, [pc, #184]	@ (8005070 <Start_Measure+0x13c>)
 8004fb6:	f010 f8a7 	bl	8015108 <memset>
	memset(&Supply, 0, sizeof(Supply));
 8004fba:	220c      	movs	r2, #12
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	482d      	ldr	r0, [pc, #180]	@ (8005074 <Start_Measure+0x140>)
 8004fc0:	f010 f8a2 	bl	8015108 <memset>
	Temperature = 0;
 8004fc4:	4b2c      	ldr	r3, [pc, #176]	@ (8005078 <Start_Measure+0x144>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	801a      	strh	r2, [r3, #0]
	Saved_Bytes = 0;
 8004fca:	4b2c      	ldr	r3, [pc, #176]	@ (800507c <Start_Measure+0x148>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]
	Saved_Samples = 0;
 8004fd0:	4b2b      	ldr	r3, [pc, #172]	@ (8005080 <Start_Measure+0x14c>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	801a      	strh	r2, [r3, #0]
	Address_Offset = 0;
 8004fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8005084 <Start_Measure+0x150>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]
	Cycles_After_Warning = 0;
 8004fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8005088 <Start_Measure+0x154>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	801a      	strh	r2, [r3, #0]
	Clear_Flags();
 8004fe2:	f000 ff21 	bl	8005e28 <Clear_Flags>

	ADC_TIMER->Instance->PSC = 100 - 1;
 8004fe6:	4b29      	ldr	r3, [pc, #164]	@ (800508c <Start_Measure+0x158>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2263      	movs	r2, #99	@ 0x63
 8004fec:	629a      	str	r2, [r3, #40]	@ 0x28
	ADC_TIMER->Instance->ARR = (uint32_t)(SystemCoreClock / (ADC_TIMER->Instance->PSC * config.samp_freq)) - 1;
 8004fee:	4b28      	ldr	r3, [pc, #160]	@ (8005090 <Start_Measure+0x15c>)
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	4b26      	ldr	r3, [pc, #152]	@ (800508c <Start_Measure+0x158>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff8:	4918      	ldr	r1, [pc, #96]	@ (800505c <Start_Measure+0x128>)
 8004ffa:	8849      	ldrh	r1, [r1, #2]
 8004ffc:	fb01 f303 	mul.w	r3, r1, r3
 8005000:	fbb2 f2f3 	udiv	r2, r2, r3
 8005004:	4b21      	ldr	r3, [pc, #132]	@ (800508c <Start_Measure+0x158>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	3a01      	subs	r2, #1
 800500a:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->ARR = (uint32_t)(config.samp_freq / 25) - 1;
 800500c:	4b13      	ldr	r3, [pc, #76]	@ (800505c <Start_Measure+0x128>)
 800500e:	885b      	ldrh	r3, [r3, #2]
 8005010:	4a13      	ldr	r2, [pc, #76]	@ (8005060 <Start_Measure+0x12c>)
 8005012:	fba2 2303 	umull	r2, r3, r2, r3
 8005016:	08db      	lsrs	r3, r3, #3
 8005018:	b29b      	uxth	r3, r3
 800501a:	461a      	mov	r2, r3
 800501c:	4b1d      	ldr	r3, [pc, #116]	@ (8005094 <Start_Measure+0x160>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3a01      	subs	r2, #1
 8005022:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->CCR3 = (uint32_t)((ACC_TIMER->Instance->ARR + 1) / 2);
 8005024:	4b1b      	ldr	r3, [pc, #108]	@ (8005094 <Start_Measure+0x160>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	4b19      	ldr	r3, [pc, #100]	@ (8005094 <Start_Measure+0x160>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	0852      	lsrs	r2, r2, #1
 8005032:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_IC_Start_IT(VOLUME_TIMER, TIM_CHANNEL_1);
 8005034:	2100      	movs	r1, #0
 8005036:	4818      	ldr	r0, [pc, #96]	@ (8005098 <Start_Measure+0x164>)
 8005038:	f00c ffe2 	bl	8012000 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(ACC_TIMER, TIM_CHANNEL_3);
 800503c:	2108      	movs	r1, #8
 800503e:	4815      	ldr	r0, [pc, #84]	@ (8005094 <Start_Measure+0x160>)
 8005040:	f00c fdea 	bl	8011c18 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(PRESSURE_ADC, (uint32_t*)&Pressure, PRESS_FULL_SAMPLES);
 8005044:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005048:	4907      	ldr	r1, [pc, #28]	@ (8005068 <Start_Measure+0x134>)
 800504a:	4814      	ldr	r0, [pc, #80]	@ (800509c <Start_Measure+0x168>)
 800504c:	f005 fb80 	bl	800a750 <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start_IT(ADC_TIMER, TIM_CHANNEL_3);
 8005050:	2108      	movs	r1, #8
 8005052:	480e      	ldr	r0, [pc, #56]	@ (800508c <Start_Measure+0x158>)
 8005054:	f00c fb46 	bl	80116e4 <HAL_TIM_OC_Start_IT>
}
 8005058:	bf00      	nop
 800505a:	bd80      	pop	{r7, pc}
 800505c:	20001c54 	.word	0x20001c54
 8005060:	51eb851f 	.word	0x51eb851f
 8005064:	20000740 	.word	0x20000740
 8005068:	20003e34 	.word	0x20003e34
 800506c:	20004154 	.word	0x20004154
 8005070:	2000417c 	.word	0x2000417c
 8005074:	20003e24 	.word	0x20003e24
 8005078:	20004700 	.word	0x20004700
 800507c:	20004ea0 	.word	0x20004ea0
 8005080:	20004ea4 	.word	0x20004ea4
 8005084:	20004e98 	.word	0x20004e98
 8005088:	20004e9c 	.word	0x20004e9c
 800508c:	20000550 	.word	0x20000550
 8005090:	20000168 	.word	0x20000168
 8005094:	20000504 	.word	0x20000504
 8005098:	200004b8 	.word	0x200004b8
 800509c:	20000218 	.word	0x20000218

080050a0 <Stop_Measure>:

/*-----FINE MISURA-----*/
void Stop_Measure(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(PRESSURE_ADC);
 80050a4:	4808      	ldr	r0, [pc, #32]	@ (80050c8 <Stop_Measure+0x28>)
 80050a6:	f005 fc0f 	bl	800a8c8 <HAL_ADC_Stop_DMA>
	HAL_TIM_OC_Stop_IT(ADC_TIMER, TIM_CHANNEL_3);
 80050aa:	2108      	movs	r1, #8
 80050ac:	4807      	ldr	r0, [pc, #28]	@ (80050cc <Stop_Measure+0x2c>)
 80050ae:	f00c fc6d 	bl	801198c <HAL_TIM_OC_Stop_IT>
	HAL_TIM_PWM_Stop(ACC_TIMER, TIM_CHANNEL_3);
 80050b2:	2108      	movs	r1, #8
 80050b4:	4806      	ldr	r0, [pc, #24]	@ (80050d0 <Stop_Measure+0x30>)
 80050b6:	f00c feb5 	bl	8011e24 <HAL_TIM_PWM_Stop>
	HAL_TIM_IC_Stop_IT(VOLUME_TIMER, TIM_CHANNEL_1);
 80050ba:	2100      	movs	r1, #0
 80050bc:	4805      	ldr	r0, [pc, #20]	@ (80050d4 <Stop_Measure+0x34>)
 80050be:	f00d f8e9 	bl	8012294 <HAL_TIM_IC_Stop_IT>
}
 80050c2:	bf00      	nop
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000218 	.word	0x20000218
 80050cc:	20000550 	.word	0x20000550
 80050d0:	20000504 	.word	0x20000504
 80050d4:	200004b8 	.word	0x200004b8

080050d8 <Warning_Detection>:

/*-----DETECTION COLPO D'ARIETE-----*/
void Warning_Detection(uint16_t* Data)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
	uint16_t max = Data[0];
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	81fb      	strh	r3, [r7, #14]
	uint16_t min = Data[0];
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	81bb      	strh	r3, [r7, #12]

	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 80050ec:	2301      	movs	r3, #1
 80050ee:	60bb      	str	r3, [r7, #8]
 80050f0:	e03a      	b.n	8005168 <Warning_Detection+0x90>
	{
		if(Data[i] > max)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	4413      	add	r3, r2
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	89fa      	ldrh	r2, [r7, #14]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d206      	bcs.n	8005110 <Warning_Detection+0x38>
		{
			max = Data[i];
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	4413      	add	r3, r2
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	81fb      	strh	r3, [r7, #14]
 800510e:	e00d      	b.n	800512c <Warning_Detection+0x54>
		}
		else if(Data[i] < min)
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	4413      	add	r3, r2
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	89ba      	ldrh	r2, [r7, #12]
 800511c:	429a      	cmp	r2, r3
 800511e:	d905      	bls.n	800512c <Warning_Detection+0x54>
		{
			min = Data[i];
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	4413      	add	r3, r2
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	81bb      	strh	r3, [r7, #12]
		}

		if(Data[i] < sys.Low_th || Data[i] > sys.High_th)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	4413      	add	r3, r2
 8005134:	881a      	ldrh	r2, [r3, #0]
 8005136:	4b17      	ldr	r3, [pc, #92]	@ (8005194 <Warning_Detection+0xbc>)
 8005138:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800513c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800513e:	429a      	cmp	r2, r3
 8005140:	d30a      	bcc.n	8005158 <Warning_Detection+0x80>
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	4413      	add	r3, r2
 800514a:	881a      	ldrh	r2, [r3, #0]
 800514c:	4b11      	ldr	r3, [pc, #68]	@ (8005194 <Warning_Detection+0xbc>)
 800514e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005152:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8005154:	429a      	cmp	r2, r3
 8005156:	d904      	bls.n	8005162 <Warning_Detection+0x8a>
		{
			flags.Threshold_Detected= 1;
 8005158:	4a0f      	ldr	r2, [pc, #60]	@ (8005198 <Warning_Detection+0xc0>)
 800515a:	7813      	ldrb	r3, [r2, #0]
 800515c:	f043 0310 	orr.w	r3, r3, #16
 8005160:	7013      	strb	r3, [r2, #0]
	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	3301      	adds	r3, #1
 8005166:	60bb      	str	r3, [r7, #8]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2bc7      	cmp	r3, #199	@ 0xc7
 800516c:	ddc1      	ble.n	80050f2 <Warning_Detection+0x1a>
		}
	}

	if(max - min >= Hammer_Th)
 800516e:	89fa      	ldrh	r2, [r7, #14]
 8005170:	89bb      	ldrh	r3, [r7, #12]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	4a09      	ldr	r2, [pc, #36]	@ (800519c <Warning_Detection+0xc4>)
 8005176:	8812      	ldrh	r2, [r2, #0]
 8005178:	4293      	cmp	r3, r2
 800517a:	db04      	blt.n	8005186 <Warning_Detection+0xae>
	{
		flags.Hammer_Detected = 1;
 800517c:	4a06      	ldr	r2, [pc, #24]	@ (8005198 <Warning_Detection+0xc0>)
 800517e:	7813      	ldrb	r3, [r2, #0]
 8005180:	f043 0308 	orr.w	r3, r3, #8
 8005184:	7013      	strb	r3, [r2, #0]
	}

}
 8005186:	bf00      	nop
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	20000740 	.word	0x20000740
 8005198:	20001c50 	.word	0x20001c50
 800519c:	20005460 	.word	0x20005460

080051a0 <RAM_Save_Measure>:

/*-----SALVATAGGIO MISURA IN RAM-----*/
void RAM_Save_Measure(Compressed_Sample_Typedef* sample, uint8_t* compressed_data)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
    uint32_t samples_size = sample->compressed_size.pressure_size +
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	461a      	mov	r2, r3
                            sample->compressed_size.volume_size +
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	885b      	ldrh	r3, [r3, #2]
 80051b6:	b29b      	uxth	r3, r3
    uint32_t samples_size = sample->compressed_size.pressure_size +
 80051b8:	4413      	add	r3, r2
                            sample->compressed_size.acceleration_size;
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	8892      	ldrh	r2, [r2, #4]
 80051be:	b292      	uxth	r2, r2
                            sample->compressed_size.volume_size +
 80051c0:	4413      	add	r3, r2
    uint32_t samples_size = sample->compressed_size.pressure_size +
 80051c2:	613b      	str	r3, [r7, #16]
    uint32_t total_size = METADATA_SIZE + samples_size;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	3306      	adds	r3, #6
 80051c8:	60fb      	str	r3, [r7, #12]
    uint32_t address = sys.Current_RAM_Base + sys.Current_RAM_Len;
 80051ca:	4b23      	ldr	r3, [pc, #140]	@ (8005258 <RAM_Save_Measure+0xb8>)
 80051cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051d0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80051d4:	4b20      	ldr	r3, [pc, #128]	@ (8005258 <RAM_Save_Measure+0xb8>)
 80051d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80051de:	4413      	add	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]

	if(Saved_Samples >= sys.RAM_Samples_Number) 
 80051e2:	4b1e      	ldr	r3, [pc, #120]	@ (800525c <RAM_Save_Measure+0xbc>)
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005258 <RAM_Save_Measure+0xb8>)
 80051ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d312      	bcc.n	800521c <RAM_Save_Measure+0x7c>
	{
		sys.Current_RAM_Len = Saved_Bytes;
 80051f6:	4b1a      	ldr	r3, [pc, #104]	@ (8005260 <RAM_Save_Measure+0xc0>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a17      	ldr	r2, [pc, #92]	@ (8005258 <RAM_Save_Measure+0xb8>)
 80051fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005200:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
		Saved_Bytes = 0;
 8005204:	4b16      	ldr	r3, [pc, #88]	@ (8005260 <RAM_Save_Measure+0xc0>)
 8005206:	2200      	movs	r2, #0
 8005208:	601a      	str	r2, [r3, #0]
		Saved_Samples = 0;
 800520a:	4b14      	ldr	r3, [pc, #80]	@ (800525c <RAM_Save_Measure+0xbc>)
 800520c:	2200      	movs	r2, #0
 800520e:	801a      	strh	r2, [r3, #0]
		address = sys.Current_RAM_Base;
 8005210:	4b11      	ldr	r3, [pc, #68]	@ (8005258 <RAM_Save_Measure+0xb8>)
 8005212:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005216:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800521a:	617b      	str	r3, [r7, #20]
    }

	RAM_Write(address, METADATA_SIZE, (uint8_t*)sample);
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	2106      	movs	r1, #6
 8005220:	6978      	ldr	r0, [r7, #20]
 8005222:	f001 f853 	bl	80062cc <RAM_Write>
    address += METADATA_SIZE;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	3306      	adds	r3, #6
 800522a:	617b      	str	r3, [r7, #20]

	RAM_Write(address, samples_size, compressed_data);
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	6939      	ldr	r1, [r7, #16]
 8005230:	6978      	ldr	r0, [r7, #20]
 8005232:	f001 f84b 	bl	80062cc <RAM_Write>
    
    Saved_Bytes += total_size;
 8005236:	4b0a      	ldr	r3, [pc, #40]	@ (8005260 <RAM_Save_Measure+0xc0>)
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4413      	add	r3, r2
 800523e:	4a08      	ldr	r2, [pc, #32]	@ (8005260 <RAM_Save_Measure+0xc0>)
 8005240:	6013      	str	r3, [r2, #0]
	Saved_Samples++;
 8005242:	4b06      	ldr	r3, [pc, #24]	@ (800525c <RAM_Save_Measure+0xbc>)
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	3301      	adds	r3, #1
 8005248:	b29a      	uxth	r2, r3
 800524a:	4b04      	ldr	r3, [pc, #16]	@ (800525c <RAM_Save_Measure+0xbc>)
 800524c:	801a      	strh	r2, [r3, #0]
}
 800524e:	bf00      	nop
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	20000740 	.word	0x20000740
 800525c:	20004ea4 	.word	0x20004ea4
 8005260:	20004ea0 	.word	0x20004ea0

08005264 <Send_Measure_Chunk>:

/*-----INVIO CHUNK MISURA-----*/
uint32_t Send_Measure_Chunk(uint32_t buffer_base, uint32_t buffer_len, uint32_t start_address)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b08c      	sub	sp, #48	@ 0x30
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
    uint32_t chunk_fill = 0;
 8005270:	2300      	movs	r3, #0
 8005272:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t address = start_address;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t end_address = start_address; // Per fermarsi quando si torna al punto di partenza
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	623b      	str	r3, [r7, #32]
    uint8_t first_loop = 1;
 800527c:	2301      	movs	r3, #1
 800527e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (buffer_len == 0) 
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <Send_Measure_Chunk+0x28>
	{
        return 0;
 8005288:	2300      	movs	r3, #0
 800528a:	e083      	b.n	8005394 <Send_Measure_Chunk+0x130>
    }

    do {
        // Gestione wrap-around circolare
        if (address >= buffer_base + buffer_len) 
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	4413      	add	r3, r2
 8005292:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005294:	429a      	cmp	r2, r3
 8005296:	d301      	bcc.n	800529c <Send_Measure_Chunk+0x38>
		{
            address = buffer_base;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        // Controlla se c'è spazio per i metadata
        if ((buffer_base + buffer_len - address) < METADATA_SIZE && address < buffer_base + buffer_len) 
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	441a      	add	r2, r3
 80052a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b05      	cmp	r3, #5
 80052a8:	d805      	bhi.n	80052b6 <Send_Measure_Chunk+0x52>
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	4413      	add	r3, r2
 80052b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d357      	bcc.n	8005366 <Send_Measure_Chunk+0x102>
		{
            break;
        }
        if ((chunk_fill + METADATA_SIZE) > sizeof(tcp_chunk)) 
 80052b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b8:	3306      	adds	r3, #6
 80052ba:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80052be:	4293      	cmp	r3, r2
 80052c0:	d853      	bhi.n	800536a <Send_Measure_Chunk+0x106>
            break;
        }

        // Leggi header sample
        Compressed_Sample_Typedef sample_header;
        RAM_Read(address, METADATA_SIZE, (uint8_t*)&sample_header);
 80052c2:	f107 0310 	add.w	r3, r7, #16
 80052c6:	461a      	mov	r2, r3
 80052c8:	2106      	movs	r1, #6
 80052ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052cc:	f001 f80f 	bl	80062ee <RAM_Read>

        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 80052d0:	8a3b      	ldrh	r3, [r7, #16]
 80052d2:	461a      	mov	r2, r3
                               sample_header.compressed_size.volume_size +
 80052d4:	8a7b      	ldrh	r3, [r7, #18]
        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 80052d6:	4413      	add	r3, r2
                               sample_header.compressed_size.acceleration_size;
 80052d8:	8aba      	ldrh	r2, [r7, #20]
                               sample_header.compressed_size.volume_size +
 80052da:	4413      	add	r3, r2
        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 80052dc:	61fb      	str	r3, [r7, #28]
        uint32_t sample_total_size = METADATA_SIZE + sample_size;
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	3306      	adds	r3, #6
 80052e2:	61bb      	str	r3, [r7, #24]

        if ((chunk_fill + sample_total_size) > sizeof(tcp_chunk)) 
 80052e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	4413      	add	r3, r2
 80052ea:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d83d      	bhi.n	800536e <Send_Measure_Chunk+0x10a>
		{
            break;
        }

        RAM_Read(address, METADATA_SIZE, tcp_chunk + chunk_fill);
 80052f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f4:	4a29      	ldr	r2, [pc, #164]	@ (800539c <Send_Measure_Chunk+0x138>)
 80052f6:	4413      	add	r3, r2
 80052f8:	461a      	mov	r2, r3
 80052fa:	2106      	movs	r1, #6
 80052fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052fe:	f000 fff6 	bl	80062ee <RAM_Read>
        chunk_fill += METADATA_SIZE;
 8005302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005304:	3306      	adds	r3, #6
 8005306:	62fb      	str	r3, [r7, #44]	@ 0x2c
        address += METADATA_SIZE;
 8005308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530a:	3306      	adds	r3, #6
 800530c:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (address >= buffer_base + buffer_len) address = buffer_base;
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4413      	add	r3, r2
 8005314:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005316:	429a      	cmp	r2, r3
 8005318:	d301      	bcc.n	800531e <Send_Measure_Chunk+0xba>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	62bb      	str	r3, [r7, #40]	@ 0x28

        RAM_Read(address, sample_size, tcp_chunk + chunk_fill);
 800531e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005320:	4a1e      	ldr	r2, [pc, #120]	@ (800539c <Send_Measure_Chunk+0x138>)
 8005322:	4413      	add	r3, r2
 8005324:	461a      	mov	r2, r3
 8005326:	69f9      	ldr	r1, [r7, #28]
 8005328:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800532a:	f000 ffe0 	bl	80062ee <RAM_Read>
        chunk_fill += sample_size;
 800532e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	4413      	add	r3, r2
 8005334:	62fb      	str	r3, [r7, #44]	@ 0x2c
        address += sample_size;
 8005336:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	4413      	add	r3, r2
 800533c:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (address >= buffer_base + buffer_len) address = buffer_base;
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4413      	add	r3, r2
 8005344:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005346:	429a      	cmp	r2, r3
 8005348:	d301      	bcc.n	800534e <Send_Measure_Chunk+0xea>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	62bb      	str	r3, [r7, #40]	@ 0x28

        // Fermati se hai completato il giro
        if (address == end_address && !first_loop) 
 800534e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	429a      	cmp	r2, r3
 8005354:	d103      	bne.n	800535e <Send_Measure_Chunk+0xfa>
 8005356:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800535a:	2b00      	cmp	r3, #0
 800535c:	d009      	beq.n	8005372 <Send_Measure_Chunk+0x10e>
		{
            break;
        }
        first_loop = 0;
 800535e:	2300      	movs	r3, #0
 8005360:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    do {
 8005364:	e792      	b.n	800528c <Send_Measure_Chunk+0x28>
            break;
 8005366:	bf00      	nop
 8005368:	e004      	b.n	8005374 <Send_Measure_Chunk+0x110>
            break;
 800536a:	bf00      	nop
 800536c:	e002      	b.n	8005374 <Send_Measure_Chunk+0x110>
            break;
 800536e:	bf00      	nop
 8005370:	e000      	b.n	8005374 <Send_Measure_Chunk+0x110>
            break;
 8005372:	bf00      	nop
    } while (1);

    if (chunk_fill > 0) 
 8005374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005376:	2b00      	cmp	r3, #0
 8005378:	d005      	beq.n	8005386 <Send_Measure_Chunk+0x122>
	{
        SIM_Send_TCP_Chunk_DMA(tcp_chunk, chunk_fill);
 800537a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800537c:	b29b      	uxth	r3, r3
 800537e:	4619      	mov	r1, r3
 8005380:	4806      	ldr	r0, [pc, #24]	@ (800539c <Send_Measure_Chunk+0x138>)
 8005382:	f7fc fa2b 	bl	80017dc <SIM_Send_TCP_Chunk_DMA>
    }

    // Se hai completato il giro, ritorna 0
    if (address == end_address) 
 8005386:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	429a      	cmp	r2, r3
 800538c:	d101      	bne.n	8005392 <Send_Measure_Chunk+0x12e>
	{
        return 0;
 800538e:	2300      	movs	r3, #0
 8005390:	e000      	b.n	8005394 <Send_Measure_Chunk+0x130>
    }
    return address;
 8005392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8005394:	4618      	mov	r0, r3
 8005396:	3730      	adds	r7, #48	@ 0x30
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20004eac 	.word	0x20004eac

080053a0 <Compress_Sample>:

/*-----COMPRESSIONE DATI-----*/
Compressed_Sizes_Typedef Compress_Sample(uint8_t *input, uint16_t input_len, uint8_t *output)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b09c      	sub	sp, #112	@ 0x70
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	603b      	str	r3, [r7, #0]
 80053ac:	4613      	mov	r3, r2
 80053ae:	80fb      	strh	r3, [r7, #6]
	uint16_t out_idx = 0;
 80053b0:	2300      	movs	r3, #0
 80053b2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	uint8_t packed_byte = 0;
 80053b6:	2300      	movs	r3, #0
 80053b8:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
	Compressed_Sizes_Typedef sizes = {0, 0, 0};
 80053bc:	2300      	movs	r3, #0
 80053be:	853b      	strh	r3, [r7, #40]	@ 0x28
 80053c0:	2300      	movs	r3, #0
 80053c2:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80053c4:	2300      	movs	r3, #0
 80053c6:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    AdpcmState_Typedef press_state = {0, 0}, flow_state = {0, 0};
 80053c8:	2300      	movs	r3, #0
 80053ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80053cc:	2300      	movs	r3, #0
 80053ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80053d2:	2300      	movs	r3, #0
 80053d4:	843b      	strh	r3, [r7, #32]
 80053d6:	2300      	movs	r3, #0
 80053d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    AdpcmState_Typedef acc_x_state = {0, 0}, acc_y_state = {0, 0}, acc_z_state = {0, 0};
 80053dc:	2300      	movs	r3, #0
 80053de:	83bb      	strh	r3, [r7, #28]
 80053e0:	2300      	movs	r3, #0
 80053e2:	77bb      	strb	r3, [r7, #30]
 80053e4:	2300      	movs	r3, #0
 80053e6:	833b      	strh	r3, [r7, #24]
 80053e8:	2300      	movs	r3, #0
 80053ea:	76bb      	strb	r3, [r7, #26]
 80053ec:	2300      	movs	r3, #0
 80053ee:	82bb      	strh	r3, [r7, #20]
 80053f0:	2300      	movs	r3, #0
 80053f2:	75bb      	strb	r3, [r7, #22]

	// --- 1. Pressione ---
	uint16_t *adc = (uint16_t*)input;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	653b      	str	r3, [r7, #80]	@ 0x50
	uint16_t pressure_start = out_idx;
 80053f8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80053fc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

	output[out_idx++] = adc[0] & 0xFF;
 8005400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005402:	881a      	ldrh	r2, [r3, #0]
 8005404:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005408:	1c59      	adds	r1, r3, #1
 800540a:	f8a7 106e 	strh.w	r1, [r7, #110]	@ 0x6e
 800540e:	4619      	mov	r1, r3
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	440b      	add	r3, r1
 8005414:	b2d2      	uxtb	r2, r2
 8005416:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = adc[0] >> 8;
 8005418:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	0a1b      	lsrs	r3, r3, #8
 800541e:	b29a      	uxth	r2, r3
 8005420:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005424:	1c59      	adds	r1, r3, #1
 8005426:	f8a7 106e 	strh.w	r1, [r7, #110]	@ 0x6e
 800542a:	4619      	mov	r1, r3
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	440b      	add	r3, r1
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	701a      	strb	r2, [r3, #0]
	press_state.previous_value = adc[0];
 8005434:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	b21b      	sxth	r3, r3
 800543a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i = 1; i < PRESS_HALF_SAMPLES; i++) 
 800543c:	2301      	movs	r3, #1
 800543e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005440:	e033      	b.n	80054aa <Compress_Sample+0x10a>
	{
		uint8_t nibble = ADPCM_Compression(adc[i], &press_state, step_size_table_12bit);
 8005442:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005448:	4413      	add	r3, r2
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	b21b      	sxth	r3, r3
 800544e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8005452:	4a9a      	ldr	r2, [pc, #616]	@ (80056bc <Compress_Sample+0x31c>)
 8005454:	4618      	mov	r0, r3
 8005456:	f000 f9d1 	bl	80057fc <ADPCM_Compression>
 800545a:	4603      	mov	r3, r0
 800545c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		if (i % 2 != 0) 
 8005460:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d004      	beq.n	8005474 <Compress_Sample+0xd4>
		{
			packed_byte = nibble;
 800546a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800546e:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8005472:	e017      	b.n	80054a4 <Compress_Sample+0x104>
		} else 
		{
			packed_byte |= (nibble << 4);
 8005474:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	b25a      	sxtb	r2, r3
 800547c:	f997 306d 	ldrsb.w	r3, [r7, #109]	@ 0x6d
 8005480:	4313      	orrs	r3, r2
 8005482:	b25b      	sxtb	r3, r3
 8005484:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
			output[out_idx++] = packed_byte;
 8005488:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800548c:	1c5a      	adds	r2, r3, #1
 800548e:	f8a7 206e 	strh.w	r2, [r7, #110]	@ 0x6e
 8005492:	461a      	mov	r2, r3
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	4413      	add	r3, r2
 8005498:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800549c:	701a      	strb	r2, [r3, #0]
			packed_byte = 0;
 800549e:	2300      	movs	r3, #0
 80054a0:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
	for (int i = 1; i < PRESS_HALF_SAMPLES; i++) 
 80054a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054a6:	3301      	adds	r3, #1
 80054a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054ac:	2bc7      	cmp	r3, #199	@ 0xc7
 80054ae:	ddc8      	ble.n	8005442 <Compress_Sample+0xa2>
	if (PRESS_HALF_SAMPLES % 2 != 0) 
	{
		output[out_idx++] = packed_byte;
		packed_byte = 0;
	}
	sizes.pressure_size = out_idx - pressure_start;
 80054b0:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80054b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	853b      	strh	r3, [r7, #40]	@ 0x28

	// --- 2. Flusso (RLE) ---
	uint32_t *counter = (uint32_t*)(input + PRESS_HALF_LEN);
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80054c4:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint16_t volume_start = out_idx;
 80054c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80054ca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	uint32_t prev = counter[0];
 80054ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	667b      	str	r3, [r7, #100]	@ 0x64
	uint16_t run_len = 1;
 80054d4:	2301      	movs	r3, #1
 80054d6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62

	for (int i = 1; i < MAX_VOLUME_SAMPLES; i++) {
 80054da:	2301      	movs	r3, #1
 80054dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054de:	e058      	b.n	8005592 <Compress_Sample+0x1f2>
		if (counter[i] == prev && run_len < 255) {
 80054e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054e6:	4413      	add	r3, r2
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d109      	bne.n	8005504 <Compress_Sample+0x164>
 80054f0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80054f4:	2bfe      	cmp	r3, #254	@ 0xfe
 80054f6:	d805      	bhi.n	8005504 <Compress_Sample+0x164>
			run_len++;
 80054f8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80054fc:	3301      	adds	r3, #1
 80054fe:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005502:	e043      	b.n	800558c <Compress_Sample+0x1ec>
		} else {
			// Scrivi valore e run_len (4 byte valore + 1 byte run_len)
			output[out_idx++] = prev & 0xFF;
 8005504:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	f8a7 206e 	strh.w	r2, [r7, #110]	@ 0x6e
 800550e:	461a      	mov	r2, r3
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	4413      	add	r3, r2
 8005514:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 8) & 0xFF;
 800551a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800551c:	0a1a      	lsrs	r2, r3, #8
 800551e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005522:	1c59      	adds	r1, r3, #1
 8005524:	f8a7 106e 	strh.w	r1, [r7, #110]	@ 0x6e
 8005528:	4619      	mov	r1, r3
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	440b      	add	r3, r1
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 16) & 0xFF;
 8005532:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005534:	0c1a      	lsrs	r2, r3, #16
 8005536:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800553a:	1c59      	adds	r1, r3, #1
 800553c:	f8a7 106e 	strh.w	r1, [r7, #110]	@ 0x6e
 8005540:	4619      	mov	r1, r3
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	440b      	add	r3, r1
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 24) & 0xFF;
 800554a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800554c:	0e1a      	lsrs	r2, r3, #24
 800554e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005552:	1c59      	adds	r1, r3, #1
 8005554:	f8a7 106e 	strh.w	r1, [r7, #110]	@ 0x6e
 8005558:	4619      	mov	r1, r3
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	440b      	add	r3, r1
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = run_len;
 8005562:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	f8a7 206e 	strh.w	r2, [r7, #110]	@ 0x6e
 800556c:	461a      	mov	r2, r3
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	4413      	add	r3, r2
 8005572:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	701a      	strb	r2, [r3, #0]
			prev = counter[i];
 800557a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005580:	4413      	add	r3, r2
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	667b      	str	r3, [r7, #100]	@ 0x64
			run_len = 1;
 8005586:	2301      	movs	r3, #1
 8005588:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
	for (int i = 1; i < MAX_VOLUME_SAMPLES; i++) {
 800558c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800558e:	3301      	adds	r3, #1
 8005590:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005592:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005594:	2b09      	cmp	r3, #9
 8005596:	dda3      	ble.n	80054e0 <Compress_Sample+0x140>
		}
	}
	// Scrivi l'ultimo run
	output[out_idx++] = prev & 0xFF;
 8005598:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800559c:	1c5a      	adds	r2, r3, #1
 800559e:	f8a7 206e 	strh.w	r2, [r7, #110]	@ 0x6e
 80055a2:	461a      	mov	r2, r3
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	4413      	add	r3, r2
 80055a8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 8) & 0xFF;
 80055ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055b0:	0a1a      	lsrs	r2, r3, #8
 80055b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80055b6:	1c59      	adds	r1, r3, #1
 80055b8:	f8a7 106e 	strh.w	r1, [r7, #110]	@ 0x6e
 80055bc:	4619      	mov	r1, r3
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	440b      	add	r3, r1
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 16) & 0xFF;
 80055c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055c8:	0c1a      	lsrs	r2, r3, #16
 80055ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80055ce:	1c59      	adds	r1, r3, #1
 80055d0:	f8a7 106e 	strh.w	r1, [r7, #110]	@ 0x6e
 80055d4:	4619      	mov	r1, r3
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	440b      	add	r3, r1
 80055da:	b2d2      	uxtb	r2, r2
 80055dc:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 24) & 0xFF;
 80055de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055e0:	0e1a      	lsrs	r2, r3, #24
 80055e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80055e6:	1c59      	adds	r1, r3, #1
 80055e8:	f8a7 106e 	strh.w	r1, [r7, #110]	@ 0x6e
 80055ec:	4619      	mov	r1, r3
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	440b      	add	r3, r1
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = run_len;
 80055f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	f8a7 206e 	strh.w	r2, [r7, #110]	@ 0x6e
 8005600:	461a      	mov	r2, r3
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	4413      	add	r3, r2
 8005606:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	701a      	strb	r2, [r3, #0]

	sizes.volume_size = out_idx - volume_start;
 800560e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8005612:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	b29b      	uxth	r3, r3
 800561a:	857b      	strh	r3, [r7, #42]	@ 0x2a

	// --- 3. Accelerometro (3 canali separati) ---
	uint8_t *accel = input + PRESS_HALF_LEN + MAX_VOLUME_LEN;
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005622:	643b      	str	r3, [r7, #64]	@ 0x40
	uint16_t accel_start = out_idx;
 8005624:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005628:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	uint16_t x0 = accel[1] | (accel[2] << 8);
 800562a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800562c:	3301      	adds	r3, #1
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	b21a      	sxth	r2, r3
 8005632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005634:	3302      	adds	r3, #2
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	b21b      	sxth	r3, r3
 800563a:	021b      	lsls	r3, r3, #8
 800563c:	b21b      	sxth	r3, r3
 800563e:	4313      	orrs	r3, r2
 8005640:	b21b      	sxth	r3, r3
 8005642:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	uint16_t y0 = accel[3] | (accel[4] << 8);
 8005644:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005646:	3303      	adds	r3, #3
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	b21a      	sxth	r2, r3
 800564c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800564e:	3304      	adds	r3, #4
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	b21b      	sxth	r3, r3
 8005654:	021b      	lsls	r3, r3, #8
 8005656:	b21b      	sxth	r3, r3
 8005658:	4313      	orrs	r3, r2
 800565a:	b21b      	sxth	r3, r3
 800565c:	877b      	strh	r3, [r7, #58]	@ 0x3a
	uint16_t z0 = accel[5] | (accel[6] << 8);
 800565e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005660:	3305      	adds	r3, #5
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	b21a      	sxth	r2, r3
 8005666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005668:	3306      	adds	r3, #6
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	b21b      	sxth	r3, r3
 800566e:	021b      	lsls	r3, r3, #8
 8005670:	b21b      	sxth	r3, r3
 8005672:	4313      	orrs	r3, r2
 8005674:	b21b      	sxth	r3, r3
 8005676:	873b      	strh	r3, [r7, #56]	@ 0x38
	acc_x_state.previous_value = x0;
 8005678:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800567c:	83bb      	strh	r3, [r7, #28]
	acc_y_state.previous_value = y0;
 800567e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8005682:	833b      	strh	r3, [r7, #24]
	acc_z_state.previous_value = z0;
 8005684:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8005688:	82bb      	strh	r3, [r7, #20]
	for(int k=0; k<7; ++k) output[out_idx++] = accel[k];
 800568a:	2300      	movs	r3, #0
 800568c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800568e:	e00f      	b.n	80056b0 <Compress_Sample+0x310>
 8005690:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005692:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005694:	441a      	add	r2, r3
 8005696:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800569a:	1c59      	adds	r1, r3, #1
 800569c:	f8a7 106e 	strh.w	r1, [r7, #110]	@ 0x6e
 80056a0:	4619      	mov	r1, r3
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	440b      	add	r3, r1
 80056a6:	7812      	ldrb	r2, [r2, #0]
 80056a8:	701a      	strb	r2, [r3, #0]
 80056aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056ac:	3301      	adds	r3, #1
 80056ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056b2:	2b06      	cmp	r3, #6
 80056b4:	ddec      	ble.n	8005690 <Compress_Sample+0x2f0>
	for (int i = 1; i < ACC_FIFO_WATERMARK; i++) 
 80056b6:	2301      	movs	r3, #1
 80056b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80056ba:	e087      	b.n	80057cc <Compress_Sample+0x42c>
 80056bc:	200000b0 	.word	0x200000b0
	{
		uint16_t x = accel[i*7+1] | (accel[i*7+2] << 8);
 80056c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80056c2:	4613      	mov	r3, r2
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	1a9b      	subs	r3, r3, r2
 80056c8:	3301      	adds	r3, #1
 80056ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056cc:	4413      	add	r3, r2
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	b219      	sxth	r1, r3
 80056d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80056d4:	4613      	mov	r3, r2
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	1a9b      	subs	r3, r3, r2
 80056da:	3302      	adds	r3, #2
 80056dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056de:	4413      	add	r3, r2
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	b21b      	sxth	r3, r3
 80056e4:	021b      	lsls	r3, r3, #8
 80056e6:	b21b      	sxth	r3, r3
 80056e8:	430b      	orrs	r3, r1
 80056ea:	b21b      	sxth	r3, r3
 80056ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
		uint16_t y = accel[i*7+3] | (accel[i*7+4] << 8);
 80056ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80056f0:	4613      	mov	r3, r2
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	1a9b      	subs	r3, r3, r2
 80056f6:	3303      	adds	r3, #3
 80056f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056fa:	4413      	add	r3, r2
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	b219      	sxth	r1, r3
 8005700:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005702:	4613      	mov	r3, r2
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	1a9b      	subs	r3, r3, r2
 8005708:	3304      	adds	r3, #4
 800570a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800570c:	4413      	add	r3, r2
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	b21b      	sxth	r3, r3
 8005712:	021b      	lsls	r3, r3, #8
 8005714:	b21b      	sxth	r3, r3
 8005716:	430b      	orrs	r3, r1
 8005718:	b21b      	sxth	r3, r3
 800571a:	86bb      	strh	r3, [r7, #52]	@ 0x34
		uint16_t z = accel[i*7+5] | (accel[i*7+6] << 8);
 800571c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800571e:	4613      	mov	r3, r2
 8005720:	00db      	lsls	r3, r3, #3
 8005722:	1a9b      	subs	r3, r3, r2
 8005724:	3305      	adds	r3, #5
 8005726:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005728:	4413      	add	r3, r2
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	b219      	sxth	r1, r3
 800572e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005730:	4613      	mov	r3, r2
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	1a9b      	subs	r3, r3, r2
 8005736:	3306      	adds	r3, #6
 8005738:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800573a:	4413      	add	r3, r2
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	b21b      	sxth	r3, r3
 8005740:	021b      	lsls	r3, r3, #8
 8005742:	b21b      	sxth	r3, r3
 8005744:	430b      	orrs	r3, r1
 8005746:	b21b      	sxth	r3, r3
 8005748:	867b      	strh	r3, [r7, #50]	@ 0x32
		uint8_t nibble_x = ADPCM_Compression(x, &acc_x_state, step_size_table_16bit);
 800574a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800574e:	f107 011c 	add.w	r1, r7, #28
 8005752:	4a29      	ldr	r2, [pc, #164]	@ (80057f8 <Compress_Sample+0x458>)
 8005754:	4618      	mov	r0, r3
 8005756:	f000 f851 	bl	80057fc <ADPCM_Compression>
 800575a:	4603      	mov	r3, r0
 800575c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
		uint8_t nibble_y = ADPCM_Compression(y, &acc_y_state, step_size_table_16bit);
 8005760:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8005764:	f107 0118 	add.w	r1, r7, #24
 8005768:	4a23      	ldr	r2, [pc, #140]	@ (80057f8 <Compress_Sample+0x458>)
 800576a:	4618      	mov	r0, r3
 800576c:	f000 f846 	bl	80057fc <ADPCM_Compression>
 8005770:	4603      	mov	r3, r0
 8005772:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
		uint8_t nibble_z = ADPCM_Compression(z, &acc_z_state, step_size_table_16bit);
 8005776:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800577a:	f107 0114 	add.w	r1, r7, #20
 800577e:	4a1e      	ldr	r2, [pc, #120]	@ (80057f8 <Compress_Sample+0x458>)
 8005780:	4618      	mov	r0, r3
 8005782:	f000 f83b 	bl	80057fc <ADPCM_Compression>
 8005786:	4603      	mov	r3, r0
 8005788:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		output[out_idx++] = nibble_x | (nibble_y << 4);
 800578c:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8005790:	011b      	lsls	r3, r3, #4
 8005792:	b25a      	sxtb	r2, r3
 8005794:	f997 3031 	ldrsb.w	r3, [r7, #49]	@ 0x31
 8005798:	4313      	orrs	r3, r2
 800579a:	b25a      	sxtb	r2, r3
 800579c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80057a0:	1c59      	adds	r1, r3, #1
 80057a2:	f8a7 106e 	strh.w	r1, [r7, #110]	@ 0x6e
 80057a6:	4619      	mov	r1, r3
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	440b      	add	r3, r1
 80057ac:	b2d2      	uxtb	r2, r2
 80057ae:	701a      	strb	r2, [r3, #0]
		output[out_idx++] = nibble_z;
 80057b0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	f8a7 206e 	strh.w	r2, [r7, #110]	@ 0x6e
 80057ba:	461a      	mov	r2, r3
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	4413      	add	r3, r2
 80057c0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80057c4:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < ACC_FIFO_WATERMARK; i++) 
 80057c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057c8:	3301      	adds	r3, #1
 80057ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80057cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057ce:	2bc7      	cmp	r3, #199	@ 0xc7
 80057d0:	f77f af76 	ble.w	80056c0 <Compress_Sample+0x320>
	}
	sizes.acceleration_size = out_idx - accel_start;
 80057d4:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80057d8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	b29b      	uxth	r3, r3
 80057de:	85bb      	strh	r3, [r7, #44]	@ 0x2c

	return sizes;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	461a      	mov	r2, r3
 80057e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80057e8:	6818      	ldr	r0, [r3, #0]
 80057ea:	6010      	str	r0, [r2, #0]
 80057ec:	889b      	ldrh	r3, [r3, #4]
 80057ee:	8093      	strh	r3, [r2, #4]
}
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	3770      	adds	r7, #112	@ 0x70
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	20000000 	.word	0x20000000

080057fc <ADPCM_Compression>:

/*-----FUNZIONE DI COMPRESSIONE ADPCM-----*/
uint8_t ADPCM_Compression(int16_t sample, AdpcmState_Typedef* state, uint16_t* step_size_table) 
{
 80057fc:	b480      	push	{r7}
 80057fe:	b08b      	sub	sp, #44	@ 0x2c
 8005800:	af00      	add	r7, sp, #0
 8005802:	4603      	mov	r3, r0
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	81fb      	strh	r3, [r7, #14]
    int32_t diff = (int32_t)sample - state->previous_value;
 800580a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005814:	1a9b      	subs	r3, r3, r2
 8005816:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t step = step_size_table[state->step_index];
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	4413      	add	r3, r2
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	837b      	strh	r3, [r7, #26]
    uint8_t nibble = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    if (diff < 0) 
 800582e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005830:	2b00      	cmp	r3, #0
 8005832:	da05      	bge.n	8005840 <ADPCM_Compression+0x44>
	{
        nibble = 8; // Bit di segno
 8005834:	2308      	movs	r3, #8
 8005836:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        diff = -diff;
 800583a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583c:	425b      	negs	r3, r3
 800583e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Calcola il nibble quantizzato
    uint32_t temp = (uint32_t)diff * 4;
 8005840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	617b      	str	r3, [r7, #20]
    if (temp < step) 
 8005846:	8b7b      	ldrh	r3, [r7, #26]
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	429a      	cmp	r2, r3
 800584c:	d312      	bcc.n	8005874 <ADPCM_Compression+0x78>
	{
        nibble |= 0;
    } 
	else 
	{
        nibble |= (uint8_t)((temp / step > 7) ? 7 : (temp / step));
 800584e:	8b7b      	ldrh	r3, [r7, #26]
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	fbb2 f3f3 	udiv	r3, r2, r3
 8005856:	2b07      	cmp	r3, #7
 8005858:	d805      	bhi.n	8005866 <ADPCM_Compression+0x6a>
 800585a:	8b7b      	ldrh	r3, [r7, #26]
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005862:	b25b      	sxtb	r3, r3
 8005864:	e000      	b.n	8005868 <ADPCM_Compression+0x6c>
 8005866:	2307      	movs	r3, #7
 8005868:	f997 2023 	ldrsb.w	r2, [r7, #35]	@ 0x23
 800586c:	4313      	orrs	r3, r2
 800586e:	b25b      	sxtb	r3, r3
 8005870:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }

    // Ricostruisci il valore per la predizione successiva (usando solo il nibble)
    int32_t reconstructed_diff = (step * (nibble & 7)) / 4 + step / 8;
 8005874:	8b7b      	ldrh	r3, [r7, #26]
 8005876:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800587a:	f002 0207 	and.w	r2, r2, #7
 800587e:	fb02 f303 	mul.w	r3, r2, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	da00      	bge.n	8005888 <ADPCM_Compression+0x8c>
 8005886:	3303      	adds	r3, #3
 8005888:	109b      	asrs	r3, r3, #2
 800588a:	461a      	mov	r2, r3
 800588c:	8b7b      	ldrh	r3, [r7, #26]
 800588e:	08db      	lsrs	r3, r3, #3
 8005890:	b29b      	uxth	r3, r3
 8005892:	4413      	add	r3, r2
 8005894:	61fb      	str	r3, [r7, #28]
    if (nibble & 8) {
 8005896:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <ADPCM_Compression+0xac>
        reconstructed_diff = -reconstructed_diff;
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	425b      	negs	r3, r3
 80058a6:	61fb      	str	r3, [r7, #28]
    }
    
    state->previous_value += reconstructed_diff;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	4413      	add	r3, r2
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	b21a      	sxth	r2, r3
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	801a      	strh	r2, [r3, #0]
    // Clamp del valore predetto
    if (state->previous_value > 32767) state->previous_value = 32767;
    if (state->previous_value < -32768) state->previous_value = -32768;

    // Aggiorna l'indice dello step
    state->step_index += index_adjustment_table[nibble & 7];
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80058ca:	f003 0307 	and.w	r3, r3, #7
 80058ce:	4910      	ldr	r1, [pc, #64]	@ (8005910 <ADPCM_Compression+0x114>)
 80058d0:	56cb      	ldrsb	r3, [r1, r3]
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	4413      	add	r3, r2
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	b25a      	sxtb	r2, r3
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	709a      	strb	r2, [r3, #2]
    if (state->step_index < 0) state->step_index = 0;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	da02      	bge.n	80058ee <ADPCM_Compression+0xf2>
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2200      	movs	r2, #0
 80058ec:	709a      	strb	r2, [r3, #2]
    if (state->step_index > 87) state->step_index = 87;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80058f4:	2b57      	cmp	r3, #87	@ 0x57
 80058f6:	dd02      	ble.n	80058fe <ADPCM_Compression+0x102>
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2257      	movs	r2, #87	@ 0x57
 80058fc:	709a      	strb	r2, [r3, #2]

    return nibble;
 80058fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005902:	4618      	mov	r0, r3
 8005904:	372c      	adds	r7, #44	@ 0x2c
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	20000160 	.word	0x20000160

08005914 <Apply_Config>:


/*-----APPLICA VALORI CONFIGURAZIONE-----*/
void Apply_Config(void)
{
 8005914:	b590      	push	{r4, r7, lr}
 8005916:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
	FIL config_file;
	UINT bytes_written;
	
	if(strcmp(cfg_var, "DEVICE_ID") == 0) 
 800591e:	49a8      	ldr	r1, [pc, #672]	@ (8005bc0 <Apply_Config+0x2ac>)
 8005920:	48a8      	ldr	r0, [pc, #672]	@ (8005bc4 <Apply_Config+0x2b0>)
 8005922:	f7fa fc55 	bl	80001d0 <strcmp>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d107      	bne.n	800593c <Apply_Config+0x28>
	{
		config.device_id = (uint8_t)atoi(new_cfg_val);
 800592c:	48a6      	ldr	r0, [pc, #664]	@ (8005bc8 <Apply_Config+0x2b4>)
 800592e:	f00f fb01 	bl	8014f34 <atoi>
 8005932:	4603      	mov	r3, r0
 8005934:	b2da      	uxtb	r2, r3
 8005936:	4ba5      	ldr	r3, [pc, #660]	@ (8005bcc <Apply_Config+0x2b8>)
 8005938:	701a      	strb	r2, [r3, #0]
 800593a:	e10a      	b.n	8005b52 <Apply_Config+0x23e>
    }
	else if(strcmp(cfg_var, "SAMP_FREQ") == 0)
 800593c:	49a4      	ldr	r1, [pc, #656]	@ (8005bd0 <Apply_Config+0x2bc>)
 800593e:	48a1      	ldr	r0, [pc, #644]	@ (8005bc4 <Apply_Config+0x2b0>)
 8005940:	f7fa fc46 	bl	80001d0 <strcmp>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d132      	bne.n	80059b0 <Apply_Config+0x9c>
	{
		if((uint16_t)atoi(new_cfg_val) != 800 && (uint16_t)atoi(new_cfg_val) != 1600)
 800594a:	489f      	ldr	r0, [pc, #636]	@ (8005bc8 <Apply_Config+0x2b4>)
 800594c:	f00f faf2 	bl	8014f34 <atoi>
 8005950:	4603      	mov	r3, r0
 8005952:	b29b      	uxth	r3, r3
 8005954:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8005958:	d008      	beq.n	800596c <Apply_Config+0x58>
 800595a:	489b      	ldr	r0, [pc, #620]	@ (8005bc8 <Apply_Config+0x2b4>)
 800595c:	f00f faea 	bl	8014f34 <atoi>
 8005960:	4603      	mov	r3, r0
 8005962:	b29b      	uxth	r3, r3
 8005964:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005968:	f040 811d 	bne.w	8005ba6 <Apply_Config+0x292>
		{
			return;
		}
		else
		{
			if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 800596c:	4b97      	ldr	r3, [pc, #604]	@ (8005bcc <Apply_Config+0x2b8>)
 800596e:	885b      	ldrh	r3, [r3, #2]
 8005970:	4a98      	ldr	r2, [pc, #608]	@ (8005bd4 <Apply_Config+0x2c0>)
 8005972:	fba2 2303 	umull	r2, r3, r2, r3
 8005976:	099b      	lsrs	r3, r3, #6
 8005978:	b29b      	uxth	r3, r3
 800597a:	461a      	mov	r2, r3
 800597c:	4b93      	ldr	r3, [pc, #588]	@ (8005bcc <Apply_Config+0x2b8>)
 800597e:	791b      	ldrb	r3, [r3, #4]
 8005980:	fb02 f303 	mul.w	r3, r2, r3
 8005984:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005988:	fb02 f303 	mul.w	r3, r2, r3
 800598c:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	461c      	mov	r4, r3
 8005994:	f000 fcde 	bl	8006354 <psram_get_size>
 8005998:	4603      	mov	r3, r0
 800599a:	429c      	cmp	r4, r3
 800599c:	f240 80d9 	bls.w	8005b52 <Apply_Config+0x23e>
			{
				config.samp_freq = (uint16_t)atoi(new_cfg_val);
 80059a0:	4889      	ldr	r0, [pc, #548]	@ (8005bc8 <Apply_Config+0x2b4>)
 80059a2:	f00f fac7 	bl	8014f34 <atoi>
 80059a6:	4603      	mov	r3, r0
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	4b88      	ldr	r3, [pc, #544]	@ (8005bcc <Apply_Config+0x2b8>)
 80059ac:	805a      	strh	r2, [r3, #2]
 80059ae:	e0d0      	b.n	8005b52 <Apply_Config+0x23e>
			}
		}
	}
	else if(strcmp(cfg_var, "BUFFER_SECS") == 0)
 80059b0:	4989      	ldr	r1, [pc, #548]	@ (8005bd8 <Apply_Config+0x2c4>)
 80059b2:	4884      	ldr	r0, [pc, #528]	@ (8005bc4 <Apply_Config+0x2b0>)
 80059b4:	f7fa fc0c 	bl	80001d0 <strcmp>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d131      	bne.n	8005a22 <Apply_Config+0x10e>
	{
		if((uint8_t)atoi(new_cfg_val) < 5 || (uint8_t)atoi(new_cfg_val) > 30)
 80059be:	4882      	ldr	r0, [pc, #520]	@ (8005bc8 <Apply_Config+0x2b4>)
 80059c0:	f00f fab8 	bl	8014f34 <atoi>
 80059c4:	4603      	mov	r3, r0
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	f240 80ee 	bls.w	8005baa <Apply_Config+0x296>
 80059ce:	487e      	ldr	r0, [pc, #504]	@ (8005bc8 <Apply_Config+0x2b4>)
 80059d0:	f00f fab0 	bl	8014f34 <atoi>
 80059d4:	4603      	mov	r3, r0
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b1e      	cmp	r3, #30
 80059da:	f200 80e6 	bhi.w	8005baa <Apply_Config+0x296>
		{
			return;
		}
		else
		{
			if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 80059de:	4b7b      	ldr	r3, [pc, #492]	@ (8005bcc <Apply_Config+0x2b8>)
 80059e0:	885b      	ldrh	r3, [r3, #2]
 80059e2:	4a7c      	ldr	r2, [pc, #496]	@ (8005bd4 <Apply_Config+0x2c0>)
 80059e4:	fba2 2303 	umull	r2, r3, r2, r3
 80059e8:	099b      	lsrs	r3, r3, #6
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	461a      	mov	r2, r3
 80059ee:	4b77      	ldr	r3, [pc, #476]	@ (8005bcc <Apply_Config+0x2b8>)
 80059f0:	791b      	ldrb	r3, [r3, #4]
 80059f2:	fb02 f303 	mul.w	r3, r2, r3
 80059f6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80059fa:	fb02 f303 	mul.w	r3, r2, r3
 80059fe:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 8005a02:	005b      	lsls	r3, r3, #1
 8005a04:	461c      	mov	r4, r3
 8005a06:	f000 fca5 	bl	8006354 <psram_get_size>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	429c      	cmp	r4, r3
 8005a0e:	f240 80a0 	bls.w	8005b52 <Apply_Config+0x23e>
			{
				config.buffering_secs = (uint8_t)atoi(new_cfg_val);
 8005a12:	486d      	ldr	r0, [pc, #436]	@ (8005bc8 <Apply_Config+0x2b4>)
 8005a14:	f00f fa8e 	bl	8014f34 <atoi>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	4b6b      	ldr	r3, [pc, #428]	@ (8005bcc <Apply_Config+0x2b8>)
 8005a1e:	711a      	strb	r2, [r3, #4]
 8005a20:	e097      	b.n	8005b52 <Apply_Config+0x23e>
			}
		}
	}
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 8005a22:	496e      	ldr	r1, [pc, #440]	@ (8005bdc <Apply_Config+0x2c8>)
 8005a24:	4867      	ldr	r0, [pc, #412]	@ (8005bc4 <Apply_Config+0x2b0>)
 8005a26:	f7fa fbd3 	bl	80001d0 <strcmp>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d107      	bne.n	8005a40 <Apply_Config+0x12c>
	{
		config.hammer_th = (uint16_t)atoi(new_cfg_val);
 8005a30:	4865      	ldr	r0, [pc, #404]	@ (8005bc8 <Apply_Config+0x2b4>)
 8005a32:	f00f fa7f 	bl	8014f34 <atoi>
 8005a36:	4603      	mov	r3, r0
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	4b64      	ldr	r3, [pc, #400]	@ (8005bcc <Apply_Config+0x2b8>)
 8005a3c:	80da      	strh	r2, [r3, #6]
 8005a3e:	e088      	b.n	8005b52 <Apply_Config+0x23e>
	}
    else if(strcmp(cfg_var, "HIGH_TH") == 0) 
 8005a40:	4967      	ldr	r1, [pc, #412]	@ (8005be0 <Apply_Config+0x2cc>)
 8005a42:	4860      	ldr	r0, [pc, #384]	@ (8005bc4 <Apply_Config+0x2b0>)
 8005a44:	f7fa fbc4 	bl	80001d0 <strcmp>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d113      	bne.n	8005a76 <Apply_Config+0x162>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 8005a4e:	4b65      	ldr	r3, [pc, #404]	@ (8005be4 <Apply_Config+0x2d0>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	db7d      	blt.n	8005b52 <Apply_Config+0x23e>
 8005a56:	4b63      	ldr	r3, [pc, #396]	@ (8005be4 <Apply_Config+0x2d0>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2b17      	cmp	r3, #23
 8005a5c:	dc79      	bgt.n	8005b52 <Apply_Config+0x23e>
		{
            config.high_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 8005a5e:	485a      	ldr	r0, [pc, #360]	@ (8005bc8 <Apply_Config+0x2b4>)
 8005a60:	f00f fa68 	bl	8014f34 <atoi>
 8005a64:	4602      	mov	r2, r0
 8005a66:	4b5f      	ldr	r3, [pc, #380]	@ (8005be4 <Apply_Config+0x2d0>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	b291      	uxth	r1, r2
 8005a6c:	4a57      	ldr	r2, [pc, #348]	@ (8005bcc <Apply_Config+0x2b8>)
 8005a6e:	331c      	adds	r3, #28
 8005a70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8005a74:	e06d      	b.n	8005b52 <Apply_Config+0x23e>
        }
    }
    else if(strcmp(cfg_var, "LOW_TH") == 0) 
 8005a76:	495c      	ldr	r1, [pc, #368]	@ (8005be8 <Apply_Config+0x2d4>)
 8005a78:	4852      	ldr	r0, [pc, #328]	@ (8005bc4 <Apply_Config+0x2b0>)
 8005a7a:	f7fa fba9 	bl	80001d0 <strcmp>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d113      	bne.n	8005aac <Apply_Config+0x198>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 8005a84:	4b57      	ldr	r3, [pc, #348]	@ (8005be4 <Apply_Config+0x2d0>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	db62      	blt.n	8005b52 <Apply_Config+0x23e>
 8005a8c:	4b55      	ldr	r3, [pc, #340]	@ (8005be4 <Apply_Config+0x2d0>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b17      	cmp	r3, #23
 8005a92:	dc5e      	bgt.n	8005b52 <Apply_Config+0x23e>
		{
            config.low_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 8005a94:	484c      	ldr	r0, [pc, #304]	@ (8005bc8 <Apply_Config+0x2b4>)
 8005a96:	f00f fa4d 	bl	8014f34 <atoi>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	4b51      	ldr	r3, [pc, #324]	@ (8005be4 <Apply_Config+0x2d0>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	b291      	uxth	r1, r2
 8005aa2:	4a4a      	ldr	r2, [pc, #296]	@ (8005bcc <Apply_Config+0x2b8>)
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8005aaa:	e052      	b.n	8005b52 <Apply_Config+0x23e>
        }
    }
    else if(strcmp(cfg_var, "DATA_TOPIC") == 0) 
 8005aac:	494f      	ldr	r1, [pc, #316]	@ (8005bec <Apply_Config+0x2d8>)
 8005aae:	4845      	ldr	r0, [pc, #276]	@ (8005bc4 <Apply_Config+0x2b0>)
 8005ab0:	f7fa fb8e 	bl	80001d0 <strcmp>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10d      	bne.n	8005ad6 <Apply_Config+0x1c2>
	{
        strncpy(config.data_topic, new_cfg_val, sizeof(config.data_topic) - 1);
 8005aba:	223f      	movs	r2, #63	@ 0x3f
 8005abc:	4942      	ldr	r1, [pc, #264]	@ (8005bc8 <Apply_Config+0x2b4>)
 8005abe:	484c      	ldr	r0, [pc, #304]	@ (8005bf0 <Apply_Config+0x2dc>)
 8005ac0:	f00f fb49 	bl	8015156 <strncpy>
        config.data_topic[sizeof(config.data_topic) - 1] = '\0';
 8005ac4:	4b41      	ldr	r3, [pc, #260]	@ (8005bcc <Apply_Config+0x2b8>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
		strcpy(sys.MQTT.Data_Topic, config.data_topic);
 8005acc:	4948      	ldr	r1, [pc, #288]	@ (8005bf0 <Apply_Config+0x2dc>)
 8005ace:	4849      	ldr	r0, [pc, #292]	@ (8005bf4 <Apply_Config+0x2e0>)
 8005ad0:	f00f fb96 	bl	8015200 <strcpy>
 8005ad4:	e03d      	b.n	8005b52 <Apply_Config+0x23e>
    }
    else if(strcmp(cfg_var, "CMD_TOPIC") == 0) 
 8005ad6:	4948      	ldr	r1, [pc, #288]	@ (8005bf8 <Apply_Config+0x2e4>)
 8005ad8:	483a      	ldr	r0, [pc, #232]	@ (8005bc4 <Apply_Config+0x2b0>)
 8005ada:	f7fa fb79 	bl	80001d0 <strcmp>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10d      	bne.n	8005b00 <Apply_Config+0x1ec>
	{
        strncpy(config.command_topic, new_cfg_val, sizeof(config.command_topic) - 1);
 8005ae4:	223f      	movs	r2, #63	@ 0x3f
 8005ae6:	4938      	ldr	r1, [pc, #224]	@ (8005bc8 <Apply_Config+0x2b4>)
 8005ae8:	4844      	ldr	r0, [pc, #272]	@ (8005bfc <Apply_Config+0x2e8>)
 8005aea:	f00f fb34 	bl	8015156 <strncpy>
        config.command_topic[sizeof(config.command_topic) - 1] = '\0';
 8005aee:	4b37      	ldr	r3, [pc, #220]	@ (8005bcc <Apply_Config+0x2b8>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
		strcpy(sys.MQTT.Command_Topic, config.command_topic);
 8005af6:	4941      	ldr	r1, [pc, #260]	@ (8005bfc <Apply_Config+0x2e8>)
 8005af8:	4841      	ldr	r0, [pc, #260]	@ (8005c00 <Apply_Config+0x2ec>)
 8005afa:	f00f fb81 	bl	8015200 <strcpy>
 8005afe:	e028      	b.n	8005b52 <Apply_Config+0x23e>
    }
	else if(strcmp(cfg_var, "INFO_TOPIC") == 0)
 8005b00:	4940      	ldr	r1, [pc, #256]	@ (8005c04 <Apply_Config+0x2f0>)
 8005b02:	4830      	ldr	r0, [pc, #192]	@ (8005bc4 <Apply_Config+0x2b0>)
 8005b04:	f7fa fb64 	bl	80001d0 <strcmp>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10d      	bne.n	8005b2a <Apply_Config+0x216>
	{
		strncpy(config.info_topic, new_cfg_val, sizeof(config.info_topic) - 1);
 8005b0e:	223f      	movs	r2, #63	@ 0x3f
 8005b10:	492d      	ldr	r1, [pc, #180]	@ (8005bc8 <Apply_Config+0x2b4>)
 8005b12:	483d      	ldr	r0, [pc, #244]	@ (8005c08 <Apply_Config+0x2f4>)
 8005b14:	f00f fb1f 	bl	8015156 <strncpy>
		config.info_topic[sizeof(config.info_topic) - 1] = '\0';
 8005b18:	4b2c      	ldr	r3, [pc, #176]	@ (8005bcc <Apply_Config+0x2b8>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 2167 	strb.w	r2, [r3, #359]	@ 0x167
		strcpy(sys.MQTT.Info_Topic, config.info_topic);
 8005b20:	4939      	ldr	r1, [pc, #228]	@ (8005c08 <Apply_Config+0x2f4>)
 8005b22:	483a      	ldr	r0, [pc, #232]	@ (8005c0c <Apply_Config+0x2f8>)
 8005b24:	f00f fb6c 	bl	8015200 <strcpy>
 8005b28:	e013      	b.n	8005b52 <Apply_Config+0x23e>
	}
	else if(strcmp(cfg_var, "OTA_TOPIC") == 0)
 8005b2a:	4939      	ldr	r1, [pc, #228]	@ (8005c10 <Apply_Config+0x2fc>)
 8005b2c:	4825      	ldr	r0, [pc, #148]	@ (8005bc4 <Apply_Config+0x2b0>)
 8005b2e:	f7fa fb4f 	bl	80001d0 <strcmp>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d13a      	bne.n	8005bae <Apply_Config+0x29a>
	{
		strncpy(config.ota_topic, new_cfg_val, sizeof(config.ota_topic) - 1);
 8005b38:	223f      	movs	r2, #63	@ 0x3f
 8005b3a:	4923      	ldr	r1, [pc, #140]	@ (8005bc8 <Apply_Config+0x2b4>)
 8005b3c:	4835      	ldr	r0, [pc, #212]	@ (8005c14 <Apply_Config+0x300>)
 8005b3e:	f00f fb0a 	bl	8015156 <strncpy>
		config.ota_topic[sizeof(config.ota_topic) - 1] = '\0';
 8005b42:	4b22      	ldr	r3, [pc, #136]	@ (8005bcc <Apply_Config+0x2b8>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2127 	strb.w	r2, [r3, #295]	@ 0x127
		strcpy(sys.MQTT.OTA_Topic, config.ota_topic);
 8005b4a:	4932      	ldr	r1, [pc, #200]	@ (8005c14 <Apply_Config+0x300>)
 8005b4c:	4832      	ldr	r0, [pc, #200]	@ (8005c18 <Apply_Config+0x304>)
 8005b4e:	f00f fb57 	bl	8015200 <strcpy>
	else
	{
		return;
	}

	if (f_open(&config_file, CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) == FR_OK)
 8005b52:	f107 0310 	add.w	r3, r7, #16
 8005b56:	3b08      	subs	r3, #8
 8005b58:	220a      	movs	r2, #10
 8005b5a:	4930      	ldr	r1, [pc, #192]	@ (8005c1c <Apply_Config+0x308>)
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f002 ff39 	bl	80089d4 <f_open>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d124      	bne.n	8005bb2 <Apply_Config+0x29e>
	{
		f_write(&config_file, &config, sizeof(config), &bytes_written);
 8005b68:	f107 0310 	add.w	r3, r7, #16
 8005b6c:	3b0c      	subs	r3, #12
 8005b6e:	f107 0010 	add.w	r0, r7, #16
 8005b72:	3808      	subs	r0, #8
 8005b74:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8005b78:	4914      	ldr	r1, [pc, #80]	@ (8005bcc <Apply_Config+0x2b8>)
 8005b7a:	f003 fa16 	bl	8008faa <f_write>
		f_close(&config_file);
 8005b7e:	f107 0310 	add.w	r3, r7, #16
 8005b82:	3b08      	subs	r3, #8
 8005b84:	4618      	mov	r0, r3
 8005b86:	f003 fc19 	bl	80093bc <f_close>
	else
	{
		return;
	}
	
	memset(cfg_var, 0, sizeof(cfg_var));
 8005b8a:	2214      	movs	r2, #20
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	480d      	ldr	r0, [pc, #52]	@ (8005bc4 <Apply_Config+0x2b0>)
 8005b90:	f00f faba 	bl	8015108 <memset>
	cfg_idx = 0;
 8005b94:	4b13      	ldr	r3, [pc, #76]	@ (8005be4 <Apply_Config+0x2d0>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 8005b9a:	220a      	movs	r2, #10
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	480a      	ldr	r0, [pc, #40]	@ (8005bc8 <Apply_Config+0x2b4>)
 8005ba0:	f00f fab2 	bl	8015108 <memset>
 8005ba4:	e006      	b.n	8005bb4 <Apply_Config+0x2a0>
			return;
 8005ba6:	bf00      	nop
 8005ba8:	e004      	b.n	8005bb4 <Apply_Config+0x2a0>
			return;
 8005baa:	bf00      	nop
 8005bac:	e002      	b.n	8005bb4 <Apply_Config+0x2a0>
		return;
 8005bae:	bf00      	nop
 8005bb0:	e000      	b.n	8005bb4 <Apply_Config+0x2a0>
		return;
 8005bb2:	bf00      	nop
}
 8005bb4:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd90      	pop	{r4, r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	08016708 	.word	0x08016708
 8005bc4:	20005a88 	.word	0x20005a88
 8005bc8:	20005aa0 	.word	0x20005aa0
 8005bcc:	20001c54 	.word	0x20001c54
 8005bd0:	08016714 	.word	0x08016714
 8005bd4:	51eb851f 	.word	0x51eb851f
 8005bd8:	08016720 	.word	0x08016720
 8005bdc:	0801672c 	.word	0x0801672c
 8005be0:	08016738 	.word	0x08016738
 8005be4:	20005a9c 	.word	0x20005a9c
 8005be8:	08016740 	.word	0x08016740
 8005bec:	08016748 	.word	0x08016748
 8005bf0:	20001cbc 	.word	0x20001cbc
 8005bf4:	200019f4 	.word	0x200019f4
 8005bf8:	08016754 	.word	0x08016754
 8005bfc:	20001cfc 	.word	0x20001cfc
 8005c00:	20001a58 	.word	0x20001a58
 8005c04:	08016760 	.word	0x08016760
 8005c08:	20001d7c 	.word	0x20001d7c
 8005c0c:	20001b20 	.word	0x20001b20
 8005c10:	0801676c 	.word	0x0801676c
 8005c14:	20001d3c 	.word	0x20001d3c
 8005c18:	20001abc 	.word	0x20001abc
 8005c1c:	08016778 	.word	0x08016778

08005c20 <Get_Config>:

/*-----RECUPERO E INVIO VALORE DI CONFIGURAZIONE-----*/
void Get_Config(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b0a2      	sub	sp, #136	@ 0x88
 8005c24:	af00      	add	r7, sp, #0
	char value_str[128] = {0};
 8005c26:	1d3b      	adds	r3, r7, #4
 8005c28:	2280      	movs	r2, #128	@ 0x80
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f00f fa6b 	bl	8015108 <memset>
	const char* topic = sys.MQTT.Info_Topic;
 8005c32:	4b68      	ldr	r3, [pc, #416]	@ (8005dd4 <Get_Config+0x1b4>)
 8005c34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

	if(strcmp(cfg_var, "DEVICE_ID") == 0)
 8005c38:	4967      	ldr	r1, [pc, #412]	@ (8005dd8 <Get_Config+0x1b8>)
 8005c3a:	4868      	ldr	r0, [pc, #416]	@ (8005ddc <Get_Config+0x1bc>)
 8005c3c:	f7fa fac8 	bl	80001d0 <strcmp>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d108      	bne.n	8005c58 <Get_Config+0x38>
	{
		sprintf(value_str, "%u", config.device_id);
 8005c46:	4b66      	ldr	r3, [pc, #408]	@ (8005de0 <Get_Config+0x1c0>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	1d3b      	adds	r3, r7, #4
 8005c4e:	4965      	ldr	r1, [pc, #404]	@ (8005de4 <Get_Config+0x1c4>)
 8005c50:	4618      	mov	r0, r3
 8005c52:	f00f f9f9 	bl	8015048 <siprintf>
 8005c56:	e0a5      	b.n	8005da4 <Get_Config+0x184>
	}
	else if(strcmp(cfg_var, "SAMP_FREQ") == 0)
 8005c58:	4963      	ldr	r1, [pc, #396]	@ (8005de8 <Get_Config+0x1c8>)
 8005c5a:	4860      	ldr	r0, [pc, #384]	@ (8005ddc <Get_Config+0x1bc>)
 8005c5c:	f7fa fab8 	bl	80001d0 <strcmp>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d108      	bne.n	8005c78 <Get_Config+0x58>
	{
		sprintf(value_str, "%u", config.samp_freq);
 8005c66:	4b5e      	ldr	r3, [pc, #376]	@ (8005de0 <Get_Config+0x1c0>)
 8005c68:	885b      	ldrh	r3, [r3, #2]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	1d3b      	adds	r3, r7, #4
 8005c6e:	495d      	ldr	r1, [pc, #372]	@ (8005de4 <Get_Config+0x1c4>)
 8005c70:	4618      	mov	r0, r3
 8005c72:	f00f f9e9 	bl	8015048 <siprintf>
 8005c76:	e095      	b.n	8005da4 <Get_Config+0x184>
	}
	else if(strcmp(cfg_var, "BUFFER_SECS") == 0)
 8005c78:	495c      	ldr	r1, [pc, #368]	@ (8005dec <Get_Config+0x1cc>)
 8005c7a:	4858      	ldr	r0, [pc, #352]	@ (8005ddc <Get_Config+0x1bc>)
 8005c7c:	f7fa faa8 	bl	80001d0 <strcmp>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d108      	bne.n	8005c98 <Get_Config+0x78>
	{
		sprintf(value_str, "%u", config.buffering_secs);
 8005c86:	4b56      	ldr	r3, [pc, #344]	@ (8005de0 <Get_Config+0x1c0>)
 8005c88:	791b      	ldrb	r3, [r3, #4]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	1d3b      	adds	r3, r7, #4
 8005c8e:	4955      	ldr	r1, [pc, #340]	@ (8005de4 <Get_Config+0x1c4>)
 8005c90:	4618      	mov	r0, r3
 8005c92:	f00f f9d9 	bl	8015048 <siprintf>
 8005c96:	e085      	b.n	8005da4 <Get_Config+0x184>
	}
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 8005c98:	4955      	ldr	r1, [pc, #340]	@ (8005df0 <Get_Config+0x1d0>)
 8005c9a:	4850      	ldr	r0, [pc, #320]	@ (8005ddc <Get_Config+0x1bc>)
 8005c9c:	f7fa fa98 	bl	80001d0 <strcmp>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d108      	bne.n	8005cb8 <Get_Config+0x98>
	{
		sprintf(value_str, "%u", config.hammer_th);
 8005ca6:	4b4e      	ldr	r3, [pc, #312]	@ (8005de0 <Get_Config+0x1c0>)
 8005ca8:	88db      	ldrh	r3, [r3, #6]
 8005caa:	461a      	mov	r2, r3
 8005cac:	1d3b      	adds	r3, r7, #4
 8005cae:	494d      	ldr	r1, [pc, #308]	@ (8005de4 <Get_Config+0x1c4>)
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f00f f9c9 	bl	8015048 <siprintf>
 8005cb6:	e075      	b.n	8005da4 <Get_Config+0x184>
	}
	else if(strcmp(cfg_var, "HIGH_TH") == 0 && cfg_idx >= 0 && cfg_idx < 24)
 8005cb8:	494e      	ldr	r1, [pc, #312]	@ (8005df4 <Get_Config+0x1d4>)
 8005cba:	4848      	ldr	r0, [pc, #288]	@ (8005ddc <Get_Config+0x1bc>)
 8005cbc:	f7fa fa88 	bl	80001d0 <strcmp>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d114      	bne.n	8005cf0 <Get_Config+0xd0>
 8005cc6:	4b4c      	ldr	r3, [pc, #304]	@ (8005df8 <Get_Config+0x1d8>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	db10      	blt.n	8005cf0 <Get_Config+0xd0>
 8005cce:	4b4a      	ldr	r3, [pc, #296]	@ (8005df8 <Get_Config+0x1d8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b17      	cmp	r3, #23
 8005cd4:	dc0c      	bgt.n	8005cf0 <Get_Config+0xd0>
	{
		sprintf(value_str, "%u", config.high_th[cfg_idx]);
 8005cd6:	4b48      	ldr	r3, [pc, #288]	@ (8005df8 <Get_Config+0x1d8>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a41      	ldr	r2, [pc, #260]	@ (8005de0 <Get_Config+0x1c0>)
 8005cdc:	331c      	adds	r3, #28
 8005cde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	1d3b      	adds	r3, r7, #4
 8005ce6:	493f      	ldr	r1, [pc, #252]	@ (8005de4 <Get_Config+0x1c4>)
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f00f f9ad 	bl	8015048 <siprintf>
 8005cee:	e059      	b.n	8005da4 <Get_Config+0x184>
	}
	else if(strcmp(cfg_var, "LOW_TH") == 0 && cfg_idx >= 0 && cfg_idx < 24)
 8005cf0:	4942      	ldr	r1, [pc, #264]	@ (8005dfc <Get_Config+0x1dc>)
 8005cf2:	483a      	ldr	r0, [pc, #232]	@ (8005ddc <Get_Config+0x1bc>)
 8005cf4:	f7fa fa6c 	bl	80001d0 <strcmp>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d114      	bne.n	8005d28 <Get_Config+0x108>
 8005cfe:	4b3e      	ldr	r3, [pc, #248]	@ (8005df8 <Get_Config+0x1d8>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	db10      	blt.n	8005d28 <Get_Config+0x108>
 8005d06:	4b3c      	ldr	r3, [pc, #240]	@ (8005df8 <Get_Config+0x1d8>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b17      	cmp	r3, #23
 8005d0c:	dc0c      	bgt.n	8005d28 <Get_Config+0x108>
	{
		sprintf(value_str, "%u", config.low_th[cfg_idx]);
 8005d0e:	4b3a      	ldr	r3, [pc, #232]	@ (8005df8 <Get_Config+0x1d8>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a33      	ldr	r2, [pc, #204]	@ (8005de0 <Get_Config+0x1c0>)
 8005d14:	3304      	adds	r3, #4
 8005d16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	1d3b      	adds	r3, r7, #4
 8005d1e:	4931      	ldr	r1, [pc, #196]	@ (8005de4 <Get_Config+0x1c4>)
 8005d20:	4618      	mov	r0, r3
 8005d22:	f00f f991 	bl	8015048 <siprintf>
 8005d26:	e03d      	b.n	8005da4 <Get_Config+0x184>
	}
	else if(strcmp(cfg_var, "DATA_TOPIC") == 0)
 8005d28:	4935      	ldr	r1, [pc, #212]	@ (8005e00 <Get_Config+0x1e0>)
 8005d2a:	482c      	ldr	r0, [pc, #176]	@ (8005ddc <Get_Config+0x1bc>)
 8005d2c:	f7fa fa50 	bl	80001d0 <strcmp>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d106      	bne.n	8005d44 <Get_Config+0x124>
	{
		strncpy(value_str, config.data_topic, sizeof(value_str)-1);
 8005d36:	1d3b      	adds	r3, r7, #4
 8005d38:	227f      	movs	r2, #127	@ 0x7f
 8005d3a:	4932      	ldr	r1, [pc, #200]	@ (8005e04 <Get_Config+0x1e4>)
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f00f fa0a 	bl	8015156 <strncpy>
 8005d42:	e02f      	b.n	8005da4 <Get_Config+0x184>
	}
	else if(strcmp(cfg_var, "CMD_TOPIC") == 0)
 8005d44:	4930      	ldr	r1, [pc, #192]	@ (8005e08 <Get_Config+0x1e8>)
 8005d46:	4825      	ldr	r0, [pc, #148]	@ (8005ddc <Get_Config+0x1bc>)
 8005d48:	f7fa fa42 	bl	80001d0 <strcmp>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d106      	bne.n	8005d60 <Get_Config+0x140>
	{
		strncpy(value_str, config.command_topic, sizeof(value_str)-1);
 8005d52:	1d3b      	adds	r3, r7, #4
 8005d54:	227f      	movs	r2, #127	@ 0x7f
 8005d56:	492d      	ldr	r1, [pc, #180]	@ (8005e0c <Get_Config+0x1ec>)
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f00f f9fc 	bl	8015156 <strncpy>
 8005d5e:	e021      	b.n	8005da4 <Get_Config+0x184>
	}
	else if(strcmp(cfg_var, "INFO_TOPIC") == 0)
 8005d60:	492b      	ldr	r1, [pc, #172]	@ (8005e10 <Get_Config+0x1f0>)
 8005d62:	481e      	ldr	r0, [pc, #120]	@ (8005ddc <Get_Config+0x1bc>)
 8005d64:	f7fa fa34 	bl	80001d0 <strcmp>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d106      	bne.n	8005d7c <Get_Config+0x15c>
	{
		strncpy(value_str, config.info_topic, sizeof(value_str)-1);
 8005d6e:	1d3b      	adds	r3, r7, #4
 8005d70:	227f      	movs	r2, #127	@ 0x7f
 8005d72:	4928      	ldr	r1, [pc, #160]	@ (8005e14 <Get_Config+0x1f4>)
 8005d74:	4618      	mov	r0, r3
 8005d76:	f00f f9ee 	bl	8015156 <strncpy>
 8005d7a:	e013      	b.n	8005da4 <Get_Config+0x184>
	}
	else if(strcmp(cfg_var, "OTA_TOPIC") == 0)
 8005d7c:	4926      	ldr	r1, [pc, #152]	@ (8005e18 <Get_Config+0x1f8>)
 8005d7e:	4817      	ldr	r0, [pc, #92]	@ (8005ddc <Get_Config+0x1bc>)
 8005d80:	f7fa fa26 	bl	80001d0 <strcmp>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d106      	bne.n	8005d98 <Get_Config+0x178>
	{
		strncpy(value_str, config.ota_topic, sizeof(value_str)-1);
 8005d8a:	1d3b      	adds	r3, r7, #4
 8005d8c:	227f      	movs	r2, #127	@ 0x7f
 8005d8e:	4923      	ldr	r1, [pc, #140]	@ (8005e1c <Get_Config+0x1fc>)
 8005d90:	4618      	mov	r0, r3
 8005d92:	f00f f9e0 	bl	8015156 <strncpy>
 8005d96:	e005      	b.n	8005da4 <Get_Config+0x184>
	}
	else
	{
		strncpy(value_str, "UNKNOWN", sizeof(value_str)-1);
 8005d98:	1d3b      	adds	r3, r7, #4
 8005d9a:	227f      	movs	r2, #127	@ 0x7f
 8005d9c:	4920      	ldr	r1, [pc, #128]	@ (8005e20 <Get_Config+0x200>)
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f00f f9d9 	bl	8015156 <strncpy>
	}

	memset(cfg_var, 0, sizeof(cfg_var));
 8005da4:	2214      	movs	r2, #20
 8005da6:	2100      	movs	r1, #0
 8005da8:	480c      	ldr	r0, [pc, #48]	@ (8005ddc <Get_Config+0x1bc>)
 8005daa:	f00f f9ad 	bl	8015108 <memset>
	cfg_idx = 0;
 8005dae:	4b12      	ldr	r3, [pc, #72]	@ (8005df8 <Get_Config+0x1d8>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 8005db4:	220a      	movs	r2, #10
 8005db6:	2100      	movs	r1, #0
 8005db8:	481a      	ldr	r0, [pc, #104]	@ (8005e24 <Get_Config+0x204>)
 8005dba:	f00f f9a5 	bl	8015108 <memset>

	SIM_publish_MQTT_Message(topic, value_str);
 8005dbe:	1d3b      	adds	r3, r7, #4
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8005dc6:	f7fb fca1 	bl	800170c <SIM_publish_MQTT_Message>
}
 8005dca:	bf00      	nop
 8005dcc:	3788      	adds	r7, #136	@ 0x88
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20001b20 	.word	0x20001b20
 8005dd8:	08016708 	.word	0x08016708
 8005ddc:	20005a88 	.word	0x20005a88
 8005de0:	20001c54 	.word	0x20001c54
 8005de4:	0801678c 	.word	0x0801678c
 8005de8:	08016714 	.word	0x08016714
 8005dec:	08016720 	.word	0x08016720
 8005df0:	0801672c 	.word	0x0801672c
 8005df4:	08016738 	.word	0x08016738
 8005df8:	20005a9c 	.word	0x20005a9c
 8005dfc:	08016740 	.word	0x08016740
 8005e00:	08016748 	.word	0x08016748
 8005e04:	20001cbc 	.word	0x20001cbc
 8005e08:	08016754 	.word	0x08016754
 8005e0c:	20001cfc 	.word	0x20001cfc
 8005e10:	08016760 	.word	0x08016760
 8005e14:	20001d7c 	.word	0x20001d7c
 8005e18:	0801676c 	.word	0x0801676c
 8005e1c:	20001d3c 	.word	0x20001d3c
 8005e20:	08016790 	.word	0x08016790
 8005e24:	20005aa0 	.word	0x20005aa0

08005e28 <Clear_Flags>:

/*-----AZZERAMENTO FLAG-----*/
void Clear_Flags(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
	memset(&sys, 0, sizeof(sys));
 8005e2c:	f241 5210 	movw	r2, #5392	@ 0x1510
 8005e30:	2100      	movs	r1, #0
 8005e32:	480c      	ldr	r0, [pc, #48]	@ (8005e64 <Clear_Flags+0x3c>)
 8005e34:	f00f f968 	bl	8015108 <memset>
	if(!sys.ACC_Present)
 8005e38:	4b0a      	ldr	r3, [pc, #40]	@ (8005e64 <Clear_Flags+0x3c>)
 8005e3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e3e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d109      	bne.n	8005e60 <Clear_Flags+0x38>
	{
		sys.ACC_Present = 1;
 8005e4c:	4b05      	ldr	r3, [pc, #20]	@ (8005e64 <Clear_Flags+0x3c>)
 8005e4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e52:	461a      	mov	r2, r3
 8005e54:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8005e58:	f043 0301 	orr.w	r3, r3, #1
 8005e5c:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
	}
}
 8005e60:	bf00      	nop
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	20000740 	.word	0x20000740

08005e68 <psram_reset>:
uint32_t	psramSize = 0;
uint32_t	psramNumPages = 0;


int psram_reset()
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08e      	sub	sp, #56	@ 0x38
 8005e6c:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = {0};
 8005e6e:	463b      	mov	r3, r7
 8005e70:	2238      	movs	r2, #56	@ 0x38
 8005e72:	2100      	movs	r1, #0
 8005e74:	4618      	mov	r0, r3
 8005e76:	f00f f947 	bl	8015108 <memset>

	sCommand.Instruction = 0x66;
 8005e7a:	2366      	movs	r3, #102	@ 0x66
 8005e7c:	603b      	str	r3, [r7, #0]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8005e7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005e82:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_NONE;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60fb      	str	r3, [r7, #12]
	sCommand.NbData = 0;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005e8c:	463b      	mov	r3, r7
 8005e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e92:	4619      	mov	r1, r3
 8005e94:	480e      	ldr	r0, [pc, #56]	@ (8005ed0 <psram_reset+0x68>)
 8005e96:	f008 f93f 	bl	800e118 <HAL_QSPI_Command>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d002      	beq.n	8005ea6 <psram_reset+0x3e>
	{
		return -1;
 8005ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea4:	e00f      	b.n	8005ec6 <psram_reset+0x5e>
	}

	sCommand.Instruction = 0x99;
 8005ea6:	2399      	movs	r3, #153	@ 0x99
 8005ea8:	603b      	str	r3, [r7, #0]

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005eaa:	463b      	mov	r3, r7
 8005eac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	4807      	ldr	r0, [pc, #28]	@ (8005ed0 <psram_reset+0x68>)
 8005eb4:	f008 f930 	bl	800e118 <HAL_QSPI_Command>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <psram_reset+0x5c>
	{
		return -1;
 8005ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec2:	e000      	b.n	8005ec6 <psram_reset+0x5e>
	}

	return 0;
 8005ec4:	2300      	movs	r3, #0

}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3738      	adds	r7, #56	@ 0x38
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	2000033c 	.word	0x2000033c

08005ed4 <psram_qpi_mode>:
{
	return psramQSPI;
}

int psram_qpi_mode(uint8_t enable)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b090      	sub	sp, #64	@ 0x40
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	4603      	mov	r3, r0
 8005edc:	71fb      	strb	r3, [r7, #7]

	QSPI_CommandTypeDef sCommand = {0};
 8005ede:	f107 0308 	add.w	r3, r7, #8
 8005ee2:	2238      	movs	r2, #56	@ 0x38
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f00f f90e 	bl	8015108 <memset>

	if(!psramInitDone)return -1;
 8005eec:	4b1c      	ldr	r3, [pc, #112]	@ (8005f60 <psram_qpi_mode+0x8c>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d102      	bne.n	8005efa <psram_qpi_mode+0x26>
 8005ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef8:	e02d      	b.n	8005f56 <psram_qpi_mode+0x82>

	if(psramQSPI==1 && enable == 0)
 8005efa:	4b1a      	ldr	r3, [pc, #104]	@ (8005f64 <psram_qpi_mode+0x90>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d108      	bne.n	8005f14 <psram_qpi_mode+0x40>
 8005f02:	79fb      	ldrb	r3, [r7, #7]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d105      	bne.n	8005f14 <psram_qpi_mode+0x40>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_DISABLE;
 8005f08:	23f5      	movs	r3, #245	@ 0xf5
 8005f0a:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8005f0c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005f10:	623b      	str	r3, [r7, #32]
 8005f12:	e00e      	b.n	8005f32 <psram_qpi_mode+0x5e>

	}else if(psramQSPI==0 && enable == 1)
 8005f14:	4b13      	ldr	r3, [pc, #76]	@ (8005f64 <psram_qpi_mode+0x90>)
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d108      	bne.n	8005f2e <psram_qpi_mode+0x5a>
 8005f1c:	79fb      	ldrb	r3, [r7, #7]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d105      	bne.n	8005f2e <psram_qpi_mode+0x5a>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_ENABLE;
 8005f22:	2335      	movs	r3, #53	@ 0x35
 8005f24:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8005f26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f2a:	623b      	str	r3, [r7, #32]
 8005f2c:	e001      	b.n	8005f32 <psram_qpi_mode+0x5e>

	}else{

		return 0;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	e011      	b.n	8005f56 <psram_qpi_mode+0x82>

	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005f32:	f107 0308 	add.w	r3, r7, #8
 8005f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	480a      	ldr	r0, [pc, #40]	@ (8005f68 <psram_qpi_mode+0x94>)
 8005f3e:	f008 f8eb 	bl	800e118 <HAL_QSPI_Command>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d002      	beq.n	8005f4e <psram_qpi_mode+0x7a>
	{
		return -1;
 8005f48:	f04f 33ff 	mov.w	r3, #4294967295
 8005f4c:	e003      	b.n	8005f56 <psram_qpi_mode+0x82>
	}

	psramQSPI = enable;
 8005f4e:	4a05      	ldr	r2, [pc, #20]	@ (8005f64 <psram_qpi_mode+0x90>)
 8005f50:	79fb      	ldrb	r3, [r7, #7]
 8005f52:	7013      	strb	r3, [r2, #0]

	return 0;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3740      	adds	r7, #64	@ 0x40
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	20005aaa 	.word	0x20005aaa
 8005f64:	20005aab 	.word	0x20005aab
 8005f68:	2000033c 	.word	0x2000033c

08005f6c <psram_read_id>:

int psram_read_id(uint8_t *id_data, int id_data_size)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b090      	sub	sp, #64	@ 0x40
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef sCommand = {0};
 8005f76:	f107 0308 	add.w	r3, r7, #8
 8005f7a:	2238      	movs	r2, #56	@ 0x38
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f00f f8c2 	bl	8015108 <memset>

	if(id_data == NULL || id_data_size < 8)return -2;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d002      	beq.n	8005f90 <psram_read_id+0x24>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b07      	cmp	r3, #7
 8005f8e:	dc02      	bgt.n	8005f96 <psram_read_id+0x2a>
 8005f90:	f06f 0301 	mvn.w	r3, #1
 8005f94:	e034      	b.n	8006000 <psram_read_id+0x94>

	sCommand.Instruction = 0x9F;
 8005f96:	239f      	movs	r3, #159	@ 0x9f
 8005f98:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8005f9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f9e:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	60fb      	str	r3, [r7, #12]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8005fa4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005fa8:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8005faa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005fae:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode    = QSPI_DATA_1_LINE;
 8005fb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.NbData = 8;
 8005fb6:	2308      	movs	r3, #8
 8005fb8:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005fca:	f107 0308 	add.w	r3, r7, #8
 8005fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	480c      	ldr	r0, [pc, #48]	@ (8006008 <psram_read_id+0x9c>)
 8005fd6:	f008 f89f 	bl	800e118 <HAL_QSPI_Command>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <psram_read_id+0x7a>
	{
		return -1;
 8005fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe4:	e00c      	b.n	8006000 <psram_read_id+0x94>
	}

	if (HAL_QSPI_Receive(PSRAM_SPI, id_data, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fea:	6879      	ldr	r1, [r7, #4]
 8005fec:	4806      	ldr	r0, [pc, #24]	@ (8006008 <psram_read_id+0x9c>)
 8005fee:	f008 f988 	bl	800e302 <HAL_QSPI_Receive>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <psram_read_id+0x92>
	{
		return -1;
 8005ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ffc:	e000      	b.n	8006000 <psram_read_id+0x94>
	}


	return 0;
 8005ffe:	2300      	movs	r3, #0

}
 8006000:	4618      	mov	r0, r3
 8006002:	3740      	adds	r7, #64	@ 0x40
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	2000033c 	.word	0x2000033c

0800600c <psram_internal_read_write>:

int psram_internal_read_write(uint8_t write, uint32_t address, uint16_t nbytes, uint8_t *pBuffer)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b092      	sub	sp, #72	@ 0x48
 8006010:	af00      	add	r7, sp, #0
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	607b      	str	r3, [r7, #4]
 8006016:	4603      	mov	r3, r0
 8006018:	73fb      	strb	r3, [r7, #15]
 800601a:	4613      	mov	r3, r2
 800601c:	81bb      	strh	r3, [r7, #12]

	QSPI_CommandTypeDef sCommand = {0};
 800601e:	f107 0310 	add.w	r3, r7, #16
 8006022:	2238      	movs	r2, #56	@ 0x38
 8006024:	2100      	movs	r1, #0
 8006026:	4618      	mov	r0, r3
 8006028:	f00f f86e 	bl	8015108 <memset>

	sCommand.Address = address;
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006030:	2300      	movs	r3, #0
 8006032:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006034:	2300      	movs	r3, #0
 8006036:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006038:	2300      	movs	r3, #0
 800603a:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800603c:	2300      	movs	r3, #0
 800603e:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.NbData = nbytes;
 8006040:	89bb      	ldrh	r3, [r7, #12]
 8006042:	63bb      	str	r3, [r7, #56]	@ 0x38

	if(psramQSPI)
 8006044:	4b33      	ldr	r3, [pc, #204]	@ (8006114 <psram_internal_read_write+0x108>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d01a      	beq.n	8006082 <psram_internal_read_write+0x76>
	{
		//QSPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE_QUAD : PSRAM_CMD_READ_FAST_QIO;
 800604c:	7bfb      	ldrb	r3, [r7, #15]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <psram_internal_read_write+0x4a>
 8006052:	2338      	movs	r3, #56	@ 0x38
 8006054:	e000      	b.n	8006058 <psram_internal_read_write+0x4c>
 8006056:	23eb      	movs	r3, #235	@ 0xeb
 8006058:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 800605a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800605e:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8006060:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006064:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 8006066:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800606a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_4_LINES;
 800606c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8006070:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_QPI_READ_FAST_QIO_WAIT;
 8006072:	7bfb      	ldrb	r3, [r7, #15]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <psram_internal_read_write+0x70>
 8006078:	2300      	movs	r3, #0
 800607a:	e000      	b.n	800607e <psram_internal_read_write+0x72>
 800607c:	2306      	movs	r3, #6
 800607e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006080:	e019      	b.n	80060b6 <psram_internal_read_write+0xaa>
	}else{
		//SPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE : PSRAM_CMD_READ_FAST;
 8006082:	7bfb      	ldrb	r3, [r7, #15]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <psram_internal_read_write+0x80>
 8006088:	2302      	movs	r3, #2
 800608a:	e000      	b.n	800608e <psram_internal_read_write+0x82>
 800608c:	230b      	movs	r3, #11
 800608e:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8006090:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006094:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8006096:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800609a:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 800609c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80060a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_1_LINE;
 80060a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80060a6:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_READ_FAST_WAIT;
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <psram_internal_read_write+0xa6>
 80060ae:	2300      	movs	r3, #0
 80060b0:	e000      	b.n	80060b4 <psram_internal_read_write+0xa8>
 80060b2:	2308      	movs	r3, #8
 80060b4:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80060b6:	f107 0310 	add.w	r3, r7, #16
 80060ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060be:	4619      	mov	r1, r3
 80060c0:	4815      	ldr	r0, [pc, #84]	@ (8006118 <psram_internal_read_write+0x10c>)
 80060c2:	f008 f829 	bl	800e118 <HAL_QSPI_Command>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d002      	beq.n	80060d2 <psram_internal_read_write+0xc6>
	{
		return -1;
 80060cc:	f04f 33ff 	mov.w	r3, #4294967295
 80060d0:	e01b      	b.n	800610a <psram_internal_read_write+0xfe>
	}

	if(write)
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00b      	beq.n	80060f0 <psram_internal_read_write+0xe4>
	{
		if (HAL_QSPI_Transmit(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80060d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060dc:	6879      	ldr	r1, [r7, #4]
 80060de:	480e      	ldr	r0, [pc, #56]	@ (8006118 <psram_internal_read_write+0x10c>)
 80060e0:	f008 f878 	bl	800e1d4 <HAL_QSPI_Transmit>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00e      	beq.n	8006108 <psram_internal_read_write+0xfc>
		{
			return -1;
 80060ea:	f04f 33ff 	mov.w	r3, #4294967295
 80060ee:	e00c      	b.n	800610a <psram_internal_read_write+0xfe>
		}

	}else{

		if (HAL_QSPI_Receive(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80060f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	4808      	ldr	r0, [pc, #32]	@ (8006118 <psram_internal_read_write+0x10c>)
 80060f8:	f008 f903 	bl	800e302 <HAL_QSPI_Receive>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <psram_internal_read_write+0xfc>
		{
			return -1;
 8006102:	f04f 33ff 	mov.w	r3, #4294967295
 8006106:	e000      	b.n	800610a <psram_internal_read_write+0xfe>
		}

	}

	return 0;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3748      	adds	r7, #72	@ 0x48
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	20005aab 	.word	0x20005aab
 8006118:	2000033c 	.word	0x2000033c

0800611c <psram_sector_read_write>:


//Funzione usata da FatFs
int psram_sector_read_write(uint8_t write, uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b088      	sub	sp, #32
 8006120:	af00      	add	r7, sp, #0
 8006122:	60b9      	str	r1, [r7, #8]
 8006124:	607a      	str	r2, [r7, #4]
 8006126:	603b      	str	r3, [r7, #0]
 8006128:	4603      	mov	r3, r0
 800612a:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 800612c:	2300      	movs	r3, #0
 800612e:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * PSRAM_PAGE_SIZE;
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	029b      	lsls	r3, r3, #10
 8006138:	61bb      	str	r3, [r7, #24]

	while(nsectors > 0)
 800613a:	e018      	b.n	800616e <psram_sector_read_write+0x52>
	{
		result = psram_internal_read_write(write, address, PSRAM_PAGE_SIZE, wPtr);
 800613c:	7bf8      	ldrb	r0, [r7, #15]
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006144:	69b9      	ldr	r1, [r7, #24]
 8006146:	f7ff ff61 	bl	800600c <psram_internal_read_write>
 800614a:	6178      	str	r0, [r7, #20]
		if(result < 0)return -1;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	2b00      	cmp	r3, #0
 8006150:	da02      	bge.n	8006158 <psram_sector_read_write+0x3c>
 8006152:	f04f 33ff 	mov.w	r3, #4294967295
 8006156:	e00e      	b.n	8006176 <psram_sector_read_write+0x5a>
		address += PSRAM_PAGE_SIZE;
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800615e:	61bb      	str	r3, [r7, #24]
		wPtr += PSRAM_PAGE_SIZE;
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006166:	61fb      	str	r3, [r7, #28]
		nsectors--;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3b01      	subs	r3, #1
 800616c:	607b      	str	r3, [r7, #4]
	while(nsectors > 0)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e3      	bne.n	800613c <psram_sector_read_write+0x20>
	}

	return 0;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3720      	adds	r7, #32
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
	...

08006180 <psram_read_write>:



int psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b088      	sub	sp, #32
 8006184:	af00      	add	r7, sp, #0
 8006186:	60b9      	str	r1, [r7, #8]
 8006188:	607a      	str	r2, [r7, #4]
 800618a:	603b      	str	r3, [r7, #0]
 800618c:	4603      	mov	r3, r0
 800618e:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8006190:	2300      	movs	r3, #0
 8006192:	61bb      	str	r3, [r7, #24]
	uint32_t trBytes = 0;
 8006194:	2300      	movs	r3, #0
 8006196:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	61fb      	str	r3, [r7, #28]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 800619c:	4b1e      	ldr	r3, [pc, #120]	@ (8006218 <psram_read_write+0x98>)
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <psram_read_write+0x2a>
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d102      	bne.n	80061b0 <psram_read_write+0x30>
 80061aa:	f04f 33ff 	mov.w	r3, #4294967295
 80061ae:	e02e      	b.n	800620e <psram_read_write+0x8e>
	if(address + nbytes >= psramSize)return -2;
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	441a      	add	r2, r3
 80061b6:	4b19      	ldr	r3, [pc, #100]	@ (800621c <psram_read_write+0x9c>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d323      	bcc.n	8006206 <psram_read_write+0x86>
 80061be:	f06f 0301 	mvn.w	r3, #1
 80061c2:	e024      	b.n	800620e <psram_read_write+0x8e>

	while(nbytes > 0)
	{
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061ca:	bf28      	it	cs
 80061cc:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 80061d0:	617b      	str	r3, [r7, #20]
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	7bf8      	ldrb	r0, [r7, #15]
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	f7ff ff16 	bl	800600c <psram_internal_read_write>
 80061e0:	61b8      	str	r0, [r7, #24]

		if(result < 0)return -1;
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	da02      	bge.n	80061ee <psram_read_write+0x6e>
 80061e8:	f04f 33ff 	mov.w	r3, #4294967295
 80061ec:	e00f      	b.n	800620e <psram_read_write+0x8e>

		address += trBytes;
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	4413      	add	r3, r2
 80061f4:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 80061f6:	69fa      	ldr	r2, [r7, #28]
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	4413      	add	r3, r2
 80061fc:	61fb      	str	r3, [r7, #28]
		nbytes -= trBytes;
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	607b      	str	r3, [r7, #4]
	while(nbytes > 0)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1db      	bne.n	80061c4 <psram_read_write+0x44>
	}

	return 0;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3720      	adds	r7, #32
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	20005aaa 	.word	0x20005aaa
 800621c:	20005ab4 	.word	0x20005ab4

08006220 <raw_psram_read_write>:

int raw_psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b088      	sub	sp, #32
 8006224:	af00      	add	r7, sp, #0
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	607a      	str	r2, [r7, #4]
 800622a:	603b      	str	r3, [r7, #0]
 800622c:	4603      	mov	r3, r0
 800622e:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8006230:	2300      	movs	r3, #0
 8006232:	617b      	str	r3, [r7, #20]
	uint32_t trBytes = 0;
 8006234:	2300      	movs	r3, #0
 8006236:	61fb      	str	r3, [r7, #28]
	uint8_t *wPtr = pBuffer;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	61bb      	str	r3, [r7, #24]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 800623c:	4b21      	ldr	r3, [pc, #132]	@ (80062c4 <raw_psram_read_write+0xa4>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <raw_psram_read_write+0x2a>
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d102      	bne.n	8006250 <raw_psram_read_write+0x30>
 800624a:	f04f 33ff 	mov.w	r3, #4294967295
 800624e:	e035      	b.n	80062bc <raw_psram_read_write+0x9c>
	if(address + nbytes >= psramSize)return -2;
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	441a      	add	r2, r3
 8006256:	4b1c      	ldr	r3, [pc, #112]	@ (80062c8 <raw_psram_read_write+0xa8>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	429a      	cmp	r2, r3
 800625c:	d302      	bcc.n	8006264 <raw_psram_read_write+0x44>
 800625e:	f06f 0301 	mvn.w	r3, #1
 8006262:	e02b      	b.n	80062bc <raw_psram_read_write+0x9c>

	trBytes = 1024 - address % 1024;
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800626a:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 800626e:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 8006270:	e020      	b.n	80062b4 <raw_psram_read_write+0x94>
	{
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	b29a      	uxth	r2, r3
 8006276:	7bf8      	ldrb	r0, [r7, #15]
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	f7ff fec6 	bl	800600c <psram_internal_read_write>
 8006280:	6178      	str	r0, [r7, #20]

		if(result < 0)return -1;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2b00      	cmp	r3, #0
 8006286:	da02      	bge.n	800628e <raw_psram_read_write+0x6e>
 8006288:	f04f 33ff 	mov.w	r3, #4294967295
 800628c:	e016      	b.n	80062bc <raw_psram_read_write+0x9c>

		address += trBytes;
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	4413      	add	r3, r2
 8006294:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	4413      	add	r3, r2
 800629c:	61bb      	str	r3, [r7, #24]
		nbytes -= trBytes;
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	607b      	str	r3, [r7, #4]
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062ac:	bf28      	it	cs
 80062ae:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 80062b2:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1db      	bne.n	8006272 <raw_psram_read_write+0x52>
	}

	return 0;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3720      	adds	r7, #32
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	20005aaa 	.word	0x20005aaa
 80062c8:	20005ab4 	.word	0x20005ab4

080062cc <RAM_Write>:
{
	return psram_read_write(1, address, nbytes, pBuffer);
}

int RAM_Write(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
	return raw_psram_read_write(1, address, nbytes, pBuffer);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	68f9      	ldr	r1, [r7, #12]
 80062de:	2001      	movs	r0, #1
 80062e0:	f7ff ff9e 	bl	8006220 <raw_psram_read_write>
 80062e4:	4603      	mov	r3, r0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <RAM_Read>:

int RAM_Read(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b084      	sub	sp, #16
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	60f8      	str	r0, [r7, #12]
 80062f6:	60b9      	str	r1, [r7, #8]
 80062f8:	607a      	str	r2, [r7, #4]
	return psram_read_write(0, address, nbytes, pBuffer);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	68f9      	ldr	r1, [r7, #12]
 8006300:	2000      	movs	r0, #0
 8006302:	f7ff ff3d 	bl	8006180 <psram_read_write>
 8006306:	4603      	mov	r3, r0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <psram_is_initialized>:


int psram_is_initialized()
{
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0
	return psramInitDone;
 8006314:	4b03      	ldr	r3, [pc, #12]	@ (8006324 <psram_is_initialized+0x14>)
 8006316:	781b      	ldrb	r3, [r3, #0]
}
 8006318:	4618      	mov	r0, r3
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	20005aaa 	.word	0x20005aaa

08006328 <psram_get_sector_size>:

unsigned int psram_get_sector_size()
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
	return PSRAM_PAGE_SIZE;
 800632c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
}
 8006330:	4618      	mov	r0, r3
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
	...

0800633c <psram_get_sector_count>:

unsigned int psram_get_sector_count()
{
 800633c:	b480      	push	{r7}
 800633e:	af00      	add	r7, sp, #0
	return psramNumPages;
 8006340:	4b03      	ldr	r3, [pc, #12]	@ (8006350 <psram_get_sector_count+0x14>)
 8006342:	681b      	ldr	r3, [r3, #0]
}
 8006344:	4618      	mov	r0, r3
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	20005ab8 	.word	0x20005ab8

08006354 <psram_get_size>:

unsigned int psram_get_size()
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
	return psramSize;
 8006358:	4b03      	ldr	r3, [pc, #12]	@ (8006368 <psram_get_size+0x14>)
 800635a:	681b      	ldr	r3, [r3, #0]
}
 800635c:	4618      	mov	r0, r3
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	20005ab4 	.word	0x20005ab4

0800636c <psram_init>:

int psram_init()
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0

	uint8_t density = 0xFF;
 8006372:	23ff      	movs	r3, #255	@ 0xff
 8006374:	71fb      	strb	r3, [r7, #7]

	psramInitDone = 0;
 8006376:	4b20      	ldr	r3, [pc, #128]	@ (80063f8 <psram_init+0x8c>)
 8006378:	2200      	movs	r2, #0
 800637a:	701a      	strb	r2, [r3, #0]

	if(psram_reset() < 0)return -1;
 800637c:	f7ff fd74 	bl	8005e68 <psram_reset>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	da02      	bge.n	800638c <psram_init+0x20>
 8006386:	f04f 33ff 	mov.w	r3, #4294967295
 800638a:	e030      	b.n	80063ee <psram_init+0x82>

	memset(psramId, 0xFF, sizeof(psramId));
 800638c:	2208      	movs	r2, #8
 800638e:	21ff      	movs	r1, #255	@ 0xff
 8006390:	481a      	ldr	r0, [pc, #104]	@ (80063fc <psram_init+0x90>)
 8006392:	f00e feb9 	bl	8015108 <memset>

	if(psram_read_id(psramId, sizeof(psramId)) < 0)return -1;
 8006396:	2108      	movs	r1, #8
 8006398:	4818      	ldr	r0, [pc, #96]	@ (80063fc <psram_init+0x90>)
 800639a:	f7ff fde7 	bl	8005f6c <psram_read_id>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	da02      	bge.n	80063aa <psram_init+0x3e>
 80063a4:	f04f 33ff 	mov.w	r3, #4294967295
 80063a8:	e021      	b.n	80063ee <psram_init+0x82>

	density = psramId[2] >> 5;
 80063aa:	4b14      	ldr	r3, [pc, #80]	@ (80063fc <psram_init+0x90>)
 80063ac:	789b      	ldrb	r3, [r3, #2]
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	71fb      	strb	r3, [r7, #7]

	if(psramId[0] == PSRAM_MANUFACTURER && psramId[1] == PSRAM_KGD && density <= PSRAM_DENSITY_64MB)
 80063b2:	4b12      	ldr	r3, [pc, #72]	@ (80063fc <psram_init+0x90>)
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	2b0d      	cmp	r3, #13
 80063b8:	d117      	bne.n	80063ea <psram_init+0x7e>
 80063ba:	4b10      	ldr	r3, [pc, #64]	@ (80063fc <psram_init+0x90>)
 80063bc:	785b      	ldrb	r3, [r3, #1]
 80063be:	2b5d      	cmp	r3, #93	@ 0x5d
 80063c0:	d113      	bne.n	80063ea <psram_init+0x7e>
 80063c2:	79fb      	ldrb	r3, [r7, #7]
 80063c4:	2b03      	cmp	r3, #3
 80063c6:	d810      	bhi.n	80063ea <psram_init+0x7e>
	{
		psramSize = PSRAM_DENSITY_64MB_EADDR;
 80063c8:	4b0d      	ldr	r3, [pc, #52]	@ (8006400 <psram_init+0x94>)
 80063ca:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80063ce:	601a      	str	r2, [r3, #0]
		psramNumPages = psramSize / PSRAM_PAGE_SIZE;
 80063d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006400 <psram_init+0x94>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	0a9b      	lsrs	r3, r3, #10
 80063d6:	4a0b      	ldr	r2, [pc, #44]	@ (8006404 <psram_init+0x98>)
 80063d8:	6013      	str	r3, [r2, #0]

		psram_qpi_mode(1);
 80063da:	2001      	movs	r0, #1
 80063dc:	f7ff fd7a 	bl	8005ed4 <psram_qpi_mode>

		psramInitDone = 1;
 80063e0:	4b05      	ldr	r3, [pc, #20]	@ (80063f8 <psram_init+0x8c>)
 80063e2:	2201      	movs	r2, #1
 80063e4:	701a      	strb	r2, [r3, #0]
		return 0;
 80063e6:	2300      	movs	r3, #0
 80063e8:	e001      	b.n	80063ee <psram_init+0x82>
	}else{
		return -1;
 80063ea:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20005aaa 	.word	0x20005aaa
 80063fc:	20005aac 	.word	0x20005aac
 8006400:	20005ab4 	.word	0x20005ab4
 8006404:	20005ab8 	.word	0x20005ab8

08006408 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800640e:	4b0f      	ldr	r3, [pc, #60]	@ (800644c <HAL_MspInit+0x44>)
 8006410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006412:	4a0e      	ldr	r2, [pc, #56]	@ (800644c <HAL_MspInit+0x44>)
 8006414:	f043 0301 	orr.w	r3, r3, #1
 8006418:	6613      	str	r3, [r2, #96]	@ 0x60
 800641a:	4b0c      	ldr	r3, [pc, #48]	@ (800644c <HAL_MspInit+0x44>)
 800641c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	607b      	str	r3, [r7, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006426:	4b09      	ldr	r3, [pc, #36]	@ (800644c <HAL_MspInit+0x44>)
 8006428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800642a:	4a08      	ldr	r2, [pc, #32]	@ (800644c <HAL_MspInit+0x44>)
 800642c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006430:	6593      	str	r3, [r2, #88]	@ 0x58
 8006432:	4b06      	ldr	r3, [pc, #24]	@ (800644c <HAL_MspInit+0x44>)
 8006434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800643a:	603b      	str	r3, [r7, #0]
 800643c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800643e:	bf00      	nop
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	40021000 	.word	0x40021000

08006450 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b0ac      	sub	sp, #176	@ 0xb0
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006458:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800645c:	2200      	movs	r2, #0
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	605a      	str	r2, [r3, #4]
 8006462:	609a      	str	r2, [r3, #8]
 8006464:	60da      	str	r2, [r3, #12]
 8006466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006468:	f107 0314 	add.w	r3, r7, #20
 800646c:	2288      	movs	r2, #136	@ 0x88
 800646e:	2100      	movs	r1, #0
 8006470:	4618      	mov	r0, r3
 8006472:	f00e fe49 	bl	8015108 <memset>
  if(hadc->Instance==ADC1)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a3d      	ldr	r2, [pc, #244]	@ (8006570 <HAL_ADC_MspInit+0x120>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d172      	bne.n	8006566 <HAL_ADC_MspInit+0x116>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006480:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006484:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8006486:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800648a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800648e:	2303      	movs	r3, #3
 8006490:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8006492:	2301      	movs	r3, #1
 8006494:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8006496:	2308      	movs	r3, #8
 8006498:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800649a:	2307      	movs	r3, #7
 800649c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800649e:	2302      	movs	r3, #2
 80064a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80064a2:	2302      	movs	r3, #2
 80064a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80064a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80064aa:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80064ac:	f107 0314 	add.w	r3, r7, #20
 80064b0:	4618      	mov	r0, r3
 80064b2:	f009 f81d 	bl	800f4f0 <HAL_RCCEx_PeriphCLKConfig>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80064bc:	f7fe f836 	bl	800452c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80064c0:	4b2c      	ldr	r3, [pc, #176]	@ (8006574 <HAL_ADC_MspInit+0x124>)
 80064c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064c4:	4a2b      	ldr	r2, [pc, #172]	@ (8006574 <HAL_ADC_MspInit+0x124>)
 80064c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80064ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80064cc:	4b29      	ldr	r3, [pc, #164]	@ (8006574 <HAL_ADC_MspInit+0x124>)
 80064ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064d4:	613b      	str	r3, [r7, #16]
 80064d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064d8:	4b26      	ldr	r3, [pc, #152]	@ (8006574 <HAL_ADC_MspInit+0x124>)
 80064da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064dc:	4a25      	ldr	r2, [pc, #148]	@ (8006574 <HAL_ADC_MspInit+0x124>)
 80064de:	f043 0301 	orr.w	r3, r3, #1
 80064e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80064e4:	4b23      	ldr	r3, [pc, #140]	@ (8006574 <HAL_ADC_MspInit+0x124>)
 80064e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80064f0:	2310      	movs	r3, #16
 80064f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80064f6:	230b      	movs	r3, #11
 80064f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064fc:	2300      	movs	r3, #0
 80064fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006502:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8006506:	4619      	mov	r1, r3
 8006508:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800650c:	f006 fd80 	bl	800d010 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006510:	4b19      	ldr	r3, [pc, #100]	@ (8006578 <HAL_ADC_MspInit+0x128>)
 8006512:	4a1a      	ldr	r2, [pc, #104]	@ (800657c <HAL_ADC_MspInit+0x12c>)
 8006514:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8006516:	4b18      	ldr	r3, [pc, #96]	@ (8006578 <HAL_ADC_MspInit+0x128>)
 8006518:	2200      	movs	r2, #0
 800651a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800651c:	4b16      	ldr	r3, [pc, #88]	@ (8006578 <HAL_ADC_MspInit+0x128>)
 800651e:	2200      	movs	r2, #0
 8006520:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006522:	4b15      	ldr	r3, [pc, #84]	@ (8006578 <HAL_ADC_MspInit+0x128>)
 8006524:	2200      	movs	r2, #0
 8006526:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006528:	4b13      	ldr	r3, [pc, #76]	@ (8006578 <HAL_ADC_MspInit+0x128>)
 800652a:	2280      	movs	r2, #128	@ 0x80
 800652c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800652e:	4b12      	ldr	r3, [pc, #72]	@ (8006578 <HAL_ADC_MspInit+0x128>)
 8006530:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006534:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006536:	4b10      	ldr	r3, [pc, #64]	@ (8006578 <HAL_ADC_MspInit+0x128>)
 8006538:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800653c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800653e:	4b0e      	ldr	r3, [pc, #56]	@ (8006578 <HAL_ADC_MspInit+0x128>)
 8006540:	2220      	movs	r2, #32
 8006542:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006544:	4b0c      	ldr	r3, [pc, #48]	@ (8006578 <HAL_ADC_MspInit+0x128>)
 8006546:	2200      	movs	r2, #0
 8006548:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800654a:	480b      	ldr	r0, [pc, #44]	@ (8006578 <HAL_ADC_MspInit+0x128>)
 800654c:	f005 fc5a 	bl	800be04 <HAL_DMA_Init>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8006556:	f7fd ffe9 	bl	800452c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a06      	ldr	r2, [pc, #24]	@ (8006578 <HAL_ADC_MspInit+0x128>)
 800655e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006560:	4a05      	ldr	r2, [pc, #20]	@ (8006578 <HAL_ADC_MspInit+0x128>)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8006566:	bf00      	nop
 8006568:	37b0      	adds	r7, #176	@ 0xb0
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	50040000 	.word	0x50040000
 8006574:	40021000 	.word	0x40021000
 8006578:	2000027c 	.word	0x2000027c
 800657c:	40020008 	.word	0x40020008

08006580 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a0a      	ldr	r2, [pc, #40]	@ (80065b8 <HAL_CRC_MspInit+0x38>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d10b      	bne.n	80065aa <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006592:	4b0a      	ldr	r3, [pc, #40]	@ (80065bc <HAL_CRC_MspInit+0x3c>)
 8006594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006596:	4a09      	ldr	r2, [pc, #36]	@ (80065bc <HAL_CRC_MspInit+0x3c>)
 8006598:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800659c:	6493      	str	r3, [r2, #72]	@ 0x48
 800659e:	4b07      	ldr	r3, [pc, #28]	@ (80065bc <HAL_CRC_MspInit+0x3c>)
 80065a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80065aa:	bf00      	nop
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	40023000 	.word	0x40023000
 80065bc:	40021000 	.word	0x40021000

080065c0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b0ac      	sub	sp, #176	@ 0xb0
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]
 80065d0:	605a      	str	r2, [r3, #4]
 80065d2:	609a      	str	r2, [r3, #8]
 80065d4:	60da      	str	r2, [r3, #12]
 80065d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80065d8:	f107 0314 	add.w	r3, r7, #20
 80065dc:	2288      	movs	r2, #136	@ 0x88
 80065de:	2100      	movs	r1, #0
 80065e0:	4618      	mov	r0, r3
 80065e2:	f00e fd91 	bl	8015108 <memset>
  if(hi2c->Instance==I2C3)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a21      	ldr	r2, [pc, #132]	@ (8006670 <HAL_I2C_MspInit+0xb0>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d13b      	bne.n	8006668 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80065f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80065f4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80065f6:	2300      	movs	r3, #0
 80065f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80065fa:	f107 0314 	add.w	r3, r7, #20
 80065fe:	4618      	mov	r0, r3
 8006600:	f008 ff76 	bl	800f4f0 <HAL_RCCEx_PeriphCLKConfig>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800660a:	f7fd ff8f 	bl	800452c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800660e:	4b19      	ldr	r3, [pc, #100]	@ (8006674 <HAL_I2C_MspInit+0xb4>)
 8006610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006612:	4a18      	ldr	r2, [pc, #96]	@ (8006674 <HAL_I2C_MspInit+0xb4>)
 8006614:	f043 0304 	orr.w	r3, r3, #4
 8006618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800661a:	4b16      	ldr	r3, [pc, #88]	@ (8006674 <HAL_I2C_MspInit+0xb4>)
 800661c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800661e:	f003 0304 	and.w	r3, r3, #4
 8006622:	613b      	str	r3, [r7, #16]
 8006624:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006626:	2303      	movs	r3, #3
 8006628:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800662c:	2312      	movs	r3, #18
 800662e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006632:	2300      	movs	r3, #0
 8006634:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006638:	2303      	movs	r3, #3
 800663a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800663e:	2304      	movs	r3, #4
 8006640:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006644:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8006648:	4619      	mov	r1, r3
 800664a:	480b      	ldr	r0, [pc, #44]	@ (8006678 <HAL_I2C_MspInit+0xb8>)
 800664c:	f006 fce0 	bl	800d010 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006650:	4b08      	ldr	r3, [pc, #32]	@ (8006674 <HAL_I2C_MspInit+0xb4>)
 8006652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006654:	4a07      	ldr	r2, [pc, #28]	@ (8006674 <HAL_I2C_MspInit+0xb4>)
 8006656:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800665a:	6593      	str	r3, [r2, #88]	@ 0x58
 800665c:	4b05      	ldr	r3, [pc, #20]	@ (8006674 <HAL_I2C_MspInit+0xb4>)
 800665e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006660:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006664:	60fb      	str	r3, [r7, #12]
 8006666:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8006668:	bf00      	nop
 800666a:	37b0      	adds	r7, #176	@ 0xb0
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	40005c00 	.word	0x40005c00
 8006674:	40021000 	.word	0x40021000
 8006678:	48000800 	.word	0x48000800

0800667c <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b08a      	sub	sp, #40	@ 0x28
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006684:	f107 0314 	add.w	r3, r7, #20
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]
 800668c:	605a      	str	r2, [r3, #4]
 800668e:	609a      	str	r2, [r3, #8]
 8006690:	60da      	str	r2, [r3, #12]
 8006692:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a26      	ldr	r2, [pc, #152]	@ (8006734 <HAL_QSPI_MspInit+0xb8>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d145      	bne.n	800672a <HAL_QSPI_MspInit+0xae>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800669e:	4b26      	ldr	r3, [pc, #152]	@ (8006738 <HAL_QSPI_MspInit+0xbc>)
 80066a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066a2:	4a25      	ldr	r2, [pc, #148]	@ (8006738 <HAL_QSPI_MspInit+0xbc>)
 80066a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066a8:	6513      	str	r3, [r2, #80]	@ 0x50
 80066aa:	4b23      	ldr	r3, [pc, #140]	@ (8006738 <HAL_QSPI_MspInit+0xbc>)
 80066ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066b2:	613b      	str	r3, [r7, #16]
 80066b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066b6:	4b20      	ldr	r3, [pc, #128]	@ (8006738 <HAL_QSPI_MspInit+0xbc>)
 80066b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ba:	4a1f      	ldr	r2, [pc, #124]	@ (8006738 <HAL_QSPI_MspInit+0xbc>)
 80066bc:	f043 0301 	orr.w	r3, r3, #1
 80066c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80066c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006738 <HAL_QSPI_MspInit+0xbc>)
 80066c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	60fb      	str	r3, [r7, #12]
 80066cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066ce:	4b1a      	ldr	r3, [pc, #104]	@ (8006738 <HAL_QSPI_MspInit+0xbc>)
 80066d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066d2:	4a19      	ldr	r2, [pc, #100]	@ (8006738 <HAL_QSPI_MspInit+0xbc>)
 80066d4:	f043 0302 	orr.w	r3, r3, #2
 80066d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80066da:	4b17      	ldr	r3, [pc, #92]	@ (8006738 <HAL_QSPI_MspInit+0xbc>)
 80066dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	60bb      	str	r3, [r7, #8]
 80066e4:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80066e6:	23c0      	movs	r3, #192	@ 0xc0
 80066e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066ea:	2302      	movs	r3, #2
 80066ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ee:	2300      	movs	r3, #0
 80066f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066f2:	2303      	movs	r3, #3
 80066f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80066f6:	230a      	movs	r3, #10
 80066f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066fa:	f107 0314 	add.w	r3, r7, #20
 80066fe:	4619      	mov	r1, r3
 8006700:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006704:	f006 fc84 	bl	800d010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8006708:	f640 4303 	movw	r3, #3075	@ 0xc03
 800670c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800670e:	2302      	movs	r3, #2
 8006710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006712:	2300      	movs	r3, #0
 8006714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006716:	2303      	movs	r3, #3
 8006718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800671a:	230a      	movs	r3, #10
 800671c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800671e:	f107 0314 	add.w	r3, r7, #20
 8006722:	4619      	mov	r1, r3
 8006724:	4805      	ldr	r0, [pc, #20]	@ (800673c <HAL_QSPI_MspInit+0xc0>)
 8006726:	f006 fc73 	bl	800d010 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800672a:	bf00      	nop
 800672c:	3728      	adds	r7, #40	@ 0x28
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	a0001000 	.word	0xa0001000
 8006738:	40021000 	.word	0x40021000
 800673c:	48000400 	.word	0x48000400

08006740 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b0a4      	sub	sp, #144	@ 0x90
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006748:	f107 0308 	add.w	r3, r7, #8
 800674c:	2288      	movs	r2, #136	@ 0x88
 800674e:	2100      	movs	r1, #0
 8006750:	4618      	mov	r0, r3
 8006752:	f00e fcd9 	bl	8015108 <memset>
  if(hrtc->Instance==RTC)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a14      	ldr	r2, [pc, #80]	@ (80067ac <HAL_RTC_MspInit+0x6c>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d120      	bne.n	80067a2 <HAL_RTC_MspInit+0x62>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006760:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006764:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006766:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800676a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800676e:	f107 0308 	add.w	r3, r7, #8
 8006772:	4618      	mov	r0, r3
 8006774:	f008 febc 	bl	800f4f0 <HAL_RCCEx_PeriphCLKConfig>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800677e:	f7fd fed5 	bl	800452c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006782:	4b0b      	ldr	r3, [pc, #44]	@ (80067b0 <HAL_RTC_MspInit+0x70>)
 8006784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006788:	4a09      	ldr	r2, [pc, #36]	@ (80067b0 <HAL_RTC_MspInit+0x70>)
 800678a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800678e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8006792:	2200      	movs	r2, #0
 8006794:	2100      	movs	r1, #0
 8006796:	2029      	movs	r0, #41	@ 0x29
 8006798:	f005 f8f1 	bl	800b97e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800679c:	2029      	movs	r0, #41	@ 0x29
 800679e:	f005 f90a 	bl	800b9b6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80067a2:	bf00      	nop
 80067a4:	3790      	adds	r7, #144	@ 0x90
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	40002800 	.word	0x40002800
 80067b0:	40021000 	.word	0x40021000

080067b4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b08c      	sub	sp, #48	@ 0x30
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067bc:	f107 031c 	add.w	r3, r7, #28
 80067c0:	2200      	movs	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	605a      	str	r2, [r3, #4]
 80067c6:	609a      	str	r2, [r3, #8]
 80067c8:	60da      	str	r2, [r3, #12]
 80067ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a2f      	ldr	r2, [pc, #188]	@ (8006890 <HAL_SPI_MspInit+0xdc>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d129      	bne.n	800682a <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80067d6:	4b2f      	ldr	r3, [pc, #188]	@ (8006894 <HAL_SPI_MspInit+0xe0>)
 80067d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067da:	4a2e      	ldr	r2, [pc, #184]	@ (8006894 <HAL_SPI_MspInit+0xe0>)
 80067dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80067e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80067e2:	4b2c      	ldr	r3, [pc, #176]	@ (8006894 <HAL_SPI_MspInit+0xe0>)
 80067e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067ea:	61bb      	str	r3, [r7, #24]
 80067ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067ee:	4b29      	ldr	r3, [pc, #164]	@ (8006894 <HAL_SPI_MspInit+0xe0>)
 80067f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067f2:	4a28      	ldr	r2, [pc, #160]	@ (8006894 <HAL_SPI_MspInit+0xe0>)
 80067f4:	f043 0302 	orr.w	r3, r3, #2
 80067f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80067fa:	4b26      	ldr	r3, [pc, #152]	@ (8006894 <HAL_SPI_MspInit+0xe0>)
 80067fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067fe:	f003 0302 	and.w	r3, r3, #2
 8006802:	617b      	str	r3, [r7, #20]
 8006804:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006806:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800680a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800680c:	2302      	movs	r3, #2
 800680e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006810:	2300      	movs	r3, #0
 8006812:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006814:	2303      	movs	r3, #3
 8006816:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006818:	2305      	movs	r3, #5
 800681a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800681c:	f107 031c 	add.w	r3, r7, #28
 8006820:	4619      	mov	r1, r3
 8006822:	481d      	ldr	r0, [pc, #116]	@ (8006898 <HAL_SPI_MspInit+0xe4>)
 8006824:	f006 fbf4 	bl	800d010 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8006828:	e02d      	b.n	8006886 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a1b      	ldr	r2, [pc, #108]	@ (800689c <HAL_SPI_MspInit+0xe8>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d128      	bne.n	8006886 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006834:	4b17      	ldr	r3, [pc, #92]	@ (8006894 <HAL_SPI_MspInit+0xe0>)
 8006836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006838:	4a16      	ldr	r2, [pc, #88]	@ (8006894 <HAL_SPI_MspInit+0xe0>)
 800683a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800683e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006840:	4b14      	ldr	r3, [pc, #80]	@ (8006894 <HAL_SPI_MspInit+0xe0>)
 8006842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006844:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006848:	613b      	str	r3, [r7, #16]
 800684a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800684c:	4b11      	ldr	r3, [pc, #68]	@ (8006894 <HAL_SPI_MspInit+0xe0>)
 800684e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006850:	4a10      	ldr	r2, [pc, #64]	@ (8006894 <HAL_SPI_MspInit+0xe0>)
 8006852:	f043 0304 	orr.w	r3, r3, #4
 8006856:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006858:	4b0e      	ldr	r3, [pc, #56]	@ (8006894 <HAL_SPI_MspInit+0xe0>)
 800685a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8006864:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8006868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800686a:	2302      	movs	r3, #2
 800686c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800686e:	2300      	movs	r3, #0
 8006870:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006872:	2303      	movs	r3, #3
 8006874:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006876:	2306      	movs	r3, #6
 8006878:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800687a:	f107 031c 	add.w	r3, r7, #28
 800687e:	4619      	mov	r1, r3
 8006880:	4807      	ldr	r0, [pc, #28]	@ (80068a0 <HAL_SPI_MspInit+0xec>)
 8006882:	f006 fbc5 	bl	800d010 <HAL_GPIO_Init>
}
 8006886:	bf00      	nop
 8006888:	3730      	adds	r7, #48	@ 0x30
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	40003800 	.word	0x40003800
 8006894:	40021000 	.word	0x40021000
 8006898:	48000400 	.word	0x48000400
 800689c:	40003c00 	.word	0x40003c00
 80068a0:	48000800 	.word	0x48000800

080068a4 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a0a      	ldr	r2, [pc, #40]	@ (80068dc <HAL_TIM_OC_MspInit+0x38>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d10b      	bne.n	80068ce <HAL_TIM_OC_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80068b6:	4b0a      	ldr	r3, [pc, #40]	@ (80068e0 <HAL_TIM_OC_MspInit+0x3c>)
 80068b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ba:	4a09      	ldr	r2, [pc, #36]	@ (80068e0 <HAL_TIM_OC_MspInit+0x3c>)
 80068bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80068c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80068c2:	4b07      	ldr	r3, [pc, #28]	@ (80068e0 <HAL_TIM_OC_MspInit+0x3c>)
 80068c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068ca:	60fb      	str	r3, [r7, #12]
 80068cc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80068ce:	bf00      	nop
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	40012c00 	.word	0x40012c00
 80068e0:	40021000 	.word	0x40021000

080068e4 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b08a      	sub	sp, #40	@ 0x28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068ec:	f107 0314 	add.w	r3, r7, #20
 80068f0:	2200      	movs	r2, #0
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	605a      	str	r2, [r3, #4]
 80068f6:	609a      	str	r2, [r3, #8]
 80068f8:	60da      	str	r2, [r3, #12]
 80068fa:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006904:	d128      	bne.n	8006958 <HAL_TIM_IC_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006906:	4b16      	ldr	r3, [pc, #88]	@ (8006960 <HAL_TIM_IC_MspInit+0x7c>)
 8006908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800690a:	4a15      	ldr	r2, [pc, #84]	@ (8006960 <HAL_TIM_IC_MspInit+0x7c>)
 800690c:	f043 0301 	orr.w	r3, r3, #1
 8006910:	6593      	str	r3, [r2, #88]	@ 0x58
 8006912:	4b13      	ldr	r3, [pc, #76]	@ (8006960 <HAL_TIM_IC_MspInit+0x7c>)
 8006914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	613b      	str	r3, [r7, #16]
 800691c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800691e:	4b10      	ldr	r3, [pc, #64]	@ (8006960 <HAL_TIM_IC_MspInit+0x7c>)
 8006920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006922:	4a0f      	ldr	r2, [pc, #60]	@ (8006960 <HAL_TIM_IC_MspInit+0x7c>)
 8006924:	f043 0301 	orr.w	r3, r3, #1
 8006928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800692a:	4b0d      	ldr	r3, [pc, #52]	@ (8006960 <HAL_TIM_IC_MspInit+0x7c>)
 800692c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006936:	2320      	movs	r3, #32
 8006938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800693a:	2302      	movs	r3, #2
 800693c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800693e:	2301      	movs	r3, #1
 8006940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006942:	2300      	movs	r3, #0
 8006944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006946:	2301      	movs	r3, #1
 8006948:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800694a:	f107 0314 	add.w	r3, r7, #20
 800694e:	4619      	mov	r1, r3
 8006950:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006954:	f006 fb5c 	bl	800d010 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8006958:	bf00      	nop
 800695a:	3728      	adds	r7, #40	@ 0x28
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	40021000 	.word	0x40021000

08006964 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a13      	ldr	r2, [pc, #76]	@ (80069c0 <HAL_TIM_Base_MspInit+0x5c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d10c      	bne.n	8006990 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006976:	4b13      	ldr	r3, [pc, #76]	@ (80069c4 <HAL_TIM_Base_MspInit+0x60>)
 8006978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800697a:	4a12      	ldr	r2, [pc, #72]	@ (80069c4 <HAL_TIM_Base_MspInit+0x60>)
 800697c:	f043 0302 	orr.w	r3, r3, #2
 8006980:	6593      	str	r3, [r2, #88]	@ 0x58
 8006982:	4b10      	ldr	r3, [pc, #64]	@ (80069c4 <HAL_TIM_Base_MspInit+0x60>)
 8006984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800698e:	e010      	b.n	80069b2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a0c      	ldr	r2, [pc, #48]	@ (80069c8 <HAL_TIM_Base_MspInit+0x64>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d10b      	bne.n	80069b2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800699a:	4b0a      	ldr	r3, [pc, #40]	@ (80069c4 <HAL_TIM_Base_MspInit+0x60>)
 800699c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800699e:	4a09      	ldr	r2, [pc, #36]	@ (80069c4 <HAL_TIM_Base_MspInit+0x60>)
 80069a0:	f043 0304 	orr.w	r3, r3, #4
 80069a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80069a6:	4b07      	ldr	r3, [pc, #28]	@ (80069c4 <HAL_TIM_Base_MspInit+0x60>)
 80069a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069aa:	f003 0304 	and.w	r3, r3, #4
 80069ae:	60bb      	str	r3, [r7, #8]
 80069b0:	68bb      	ldr	r3, [r7, #8]
}
 80069b2:	bf00      	nop
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	40000400 	.word	0x40000400
 80069c4:	40021000 	.word	0x40021000
 80069c8:	40000800 	.word	0x40000800

080069cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b08a      	sub	sp, #40	@ 0x28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069d4:	f107 0314 	add.w	r3, r7, #20
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]
 80069dc:	605a      	str	r2, [r3, #4]
 80069de:	609a      	str	r2, [r3, #8]
 80069e0:	60da      	str	r2, [r3, #12]
 80069e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a23      	ldr	r2, [pc, #140]	@ (8006a78 <HAL_TIM_MspPostInit+0xac>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d11e      	bne.n	8006a2c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069ee:	4b23      	ldr	r3, [pc, #140]	@ (8006a7c <HAL_TIM_MspPostInit+0xb0>)
 80069f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069f2:	4a22      	ldr	r2, [pc, #136]	@ (8006a7c <HAL_TIM_MspPostInit+0xb0>)
 80069f4:	f043 0301 	orr.w	r3, r3, #1
 80069f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80069fa:	4b20      	ldr	r3, [pc, #128]	@ (8006a7c <HAL_TIM_MspPostInit+0xb0>)
 80069fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	613b      	str	r3, [r7, #16]
 8006a04:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8006a06:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8006a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a10:	2300      	movs	r3, #0
 8006a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a14:	2300      	movs	r3, #0
 8006a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a1c:	f107 0314 	add.w	r3, r7, #20
 8006a20:	4619      	mov	r1, r3
 8006a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006a26:	f006 faf3 	bl	800d010 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006a2a:	e021      	b.n	8006a70 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a13      	ldr	r2, [pc, #76]	@ (8006a80 <HAL_TIM_MspPostInit+0xb4>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d11c      	bne.n	8006a70 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a36:	4b11      	ldr	r3, [pc, #68]	@ (8006a7c <HAL_TIM_MspPostInit+0xb0>)
 8006a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a3a:	4a10      	ldr	r2, [pc, #64]	@ (8006a7c <HAL_TIM_MspPostInit+0xb0>)
 8006a3c:	f043 0304 	orr.w	r3, r3, #4
 8006a40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a42:	4b0e      	ldr	r3, [pc, #56]	@ (8006a7c <HAL_TIM_MspPostInit+0xb0>)
 8006a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a46:	f003 0304 	and.w	r3, r3, #4
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006a4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a54:	2302      	movs	r3, #2
 8006a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006a60:	2302      	movs	r3, #2
 8006a62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a64:	f107 0314 	add.w	r3, r7, #20
 8006a68:	4619      	mov	r1, r3
 8006a6a:	4806      	ldr	r0, [pc, #24]	@ (8006a84 <HAL_TIM_MspPostInit+0xb8>)
 8006a6c:	f006 fad0 	bl	800d010 <HAL_GPIO_Init>
}
 8006a70:	bf00      	nop
 8006a72:	3728      	adds	r7, #40	@ 0x28
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	40012c00 	.word	0x40012c00
 8006a7c:	40021000 	.word	0x40021000
 8006a80:	40000400 	.word	0x40000400
 8006a84:	48000800 	.word	0x48000800

08006a88 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b0ae      	sub	sp, #184	@ 0xb8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a90:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]
 8006a98:	605a      	str	r2, [r3, #4]
 8006a9a:	609a      	str	r2, [r3, #8]
 8006a9c:	60da      	str	r2, [r3, #12]
 8006a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006aa0:	f107 031c 	add.w	r3, r7, #28
 8006aa4:	2288      	movs	r2, #136	@ 0x88
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f00e fb2d 	bl	8015108 <memset>
  if(huart->Instance==UART4)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a6b      	ldr	r2, [pc, #428]	@ (8006c60 <HAL_UART_MspInit+0x1d8>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d13c      	bne.n	8006b32 <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8006ab8:	2308      	movs	r3, #8
 8006aba:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8006abc:	2300      	movs	r3, #0
 8006abe:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006ac0:	f107 031c 	add.w	r3, r7, #28
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f008 fd13 	bl	800f4f0 <HAL_RCCEx_PeriphCLKConfig>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006ad0:	f7fd fd2c 	bl	800452c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006ad4:	4b63      	ldr	r3, [pc, #396]	@ (8006c64 <HAL_UART_MspInit+0x1dc>)
 8006ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ad8:	4a62      	ldr	r2, [pc, #392]	@ (8006c64 <HAL_UART_MspInit+0x1dc>)
 8006ada:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ade:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ae0:	4b60      	ldr	r3, [pc, #384]	@ (8006c64 <HAL_UART_MspInit+0x1dc>)
 8006ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ae4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006ae8:	61bb      	str	r3, [r7, #24]
 8006aea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aec:	4b5d      	ldr	r3, [pc, #372]	@ (8006c64 <HAL_UART_MspInit+0x1dc>)
 8006aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006af0:	4a5c      	ldr	r2, [pc, #368]	@ (8006c64 <HAL_UART_MspInit+0x1dc>)
 8006af2:	f043 0301 	orr.w	r3, r3, #1
 8006af6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006af8:	4b5a      	ldr	r3, [pc, #360]	@ (8006c64 <HAL_UART_MspInit+0x1dc>)
 8006afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	617b      	str	r3, [r7, #20]
 8006b02:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006b04:	2301      	movs	r3, #1
 8006b06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b0a:	2312      	movs	r3, #18
 8006b0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b10:	2301      	movs	r3, #1
 8006b12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b16:	2303      	movs	r3, #3
 8006b18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006b1c:	2308      	movs	r3, #8
 8006b1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b22:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8006b26:	4619      	mov	r1, r3
 8006b28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006b2c:	f006 fa70 	bl	800d010 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8006b30:	e092      	b.n	8006c58 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART1)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a4c      	ldr	r2, [pc, #304]	@ (8006c68 <HAL_UART_MspInit+0x1e0>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	f040 808d 	bne.w	8006c58 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006b42:	2300      	movs	r3, #0
 8006b44:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006b46:	f107 031c 	add.w	r3, r7, #28
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f008 fcd0 	bl	800f4f0 <HAL_RCCEx_PeriphCLKConfig>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8006b56:	f7fd fce9 	bl	800452c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006b5a:	4b42      	ldr	r3, [pc, #264]	@ (8006c64 <HAL_UART_MspInit+0x1dc>)
 8006b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b5e:	4a41      	ldr	r2, [pc, #260]	@ (8006c64 <HAL_UART_MspInit+0x1dc>)
 8006b60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006b64:	6613      	str	r3, [r2, #96]	@ 0x60
 8006b66:	4b3f      	ldr	r3, [pc, #252]	@ (8006c64 <HAL_UART_MspInit+0x1dc>)
 8006b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b6e:	613b      	str	r3, [r7, #16]
 8006b70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b72:	4b3c      	ldr	r3, [pc, #240]	@ (8006c64 <HAL_UART_MspInit+0x1dc>)
 8006b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b76:	4a3b      	ldr	r2, [pc, #236]	@ (8006c64 <HAL_UART_MspInit+0x1dc>)
 8006b78:	f043 0302 	orr.w	r3, r3, #2
 8006b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006b7e:	4b39      	ldr	r3, [pc, #228]	@ (8006c64 <HAL_UART_MspInit+0x1dc>)
 8006b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8006b8a:	23d8      	movs	r3, #216	@ 0xd8
 8006b8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b90:	2302      	movs	r3, #2
 8006b92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b96:	2300      	movs	r3, #0
 8006b98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006ba2:	2307      	movs	r3, #7
 8006ba4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ba8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8006bac:	4619      	mov	r1, r3
 8006bae:	482f      	ldr	r0, [pc, #188]	@ (8006c6c <HAL_UART_MspInit+0x1e4>)
 8006bb0:	f006 fa2e 	bl	800d010 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006bb4:	4b2e      	ldr	r3, [pc, #184]	@ (8006c70 <HAL_UART_MspInit+0x1e8>)
 8006bb6:	4a2f      	ldr	r2, [pc, #188]	@ (8006c74 <HAL_UART_MspInit+0x1ec>)
 8006bb8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8006bba:	4b2d      	ldr	r3, [pc, #180]	@ (8006c70 <HAL_UART_MspInit+0x1e8>)
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8006c70 <HAL_UART_MspInit+0x1e8>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8006c70 <HAL_UART_MspInit+0x1e8>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006bcc:	4b28      	ldr	r3, [pc, #160]	@ (8006c70 <HAL_UART_MspInit+0x1e8>)
 8006bce:	2280      	movs	r2, #128	@ 0x80
 8006bd0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006bd2:	4b27      	ldr	r3, [pc, #156]	@ (8006c70 <HAL_UART_MspInit+0x1e8>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006bd8:	4b25      	ldr	r3, [pc, #148]	@ (8006c70 <HAL_UART_MspInit+0x1e8>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006bde:	4b24      	ldr	r3, [pc, #144]	@ (8006c70 <HAL_UART_MspInit+0x1e8>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006be4:	4b22      	ldr	r3, [pc, #136]	@ (8006c70 <HAL_UART_MspInit+0x1e8>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006bea:	4821      	ldr	r0, [pc, #132]	@ (8006c70 <HAL_UART_MspInit+0x1e8>)
 8006bec:	f005 f90a 	bl	800be04 <HAL_DMA_Init>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <HAL_UART_MspInit+0x172>
      Error_Handler();
 8006bf6:	f7fd fc99 	bl	800452c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a1c      	ldr	r2, [pc, #112]	@ (8006c70 <HAL_UART_MspInit+0x1e8>)
 8006bfe:	675a      	str	r2, [r3, #116]	@ 0x74
 8006c00:	4a1b      	ldr	r2, [pc, #108]	@ (8006c70 <HAL_UART_MspInit+0x1e8>)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8006c06:	4b1c      	ldr	r3, [pc, #112]	@ (8006c78 <HAL_UART_MspInit+0x1f0>)
 8006c08:	4a1c      	ldr	r2, [pc, #112]	@ (8006c7c <HAL_UART_MspInit+0x1f4>)
 8006c0a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8006c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8006c78 <HAL_UART_MspInit+0x1f0>)
 8006c0e:	2202      	movs	r2, #2
 8006c10:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006c12:	4b19      	ldr	r3, [pc, #100]	@ (8006c78 <HAL_UART_MspInit+0x1f0>)
 8006c14:	2210      	movs	r2, #16
 8006c16:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c18:	4b17      	ldr	r3, [pc, #92]	@ (8006c78 <HAL_UART_MspInit+0x1f0>)
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006c1e:	4b16      	ldr	r3, [pc, #88]	@ (8006c78 <HAL_UART_MspInit+0x1f0>)
 8006c20:	2280      	movs	r2, #128	@ 0x80
 8006c22:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c24:	4b14      	ldr	r3, [pc, #80]	@ (8006c78 <HAL_UART_MspInit+0x1f0>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006c2a:	4b13      	ldr	r3, [pc, #76]	@ (8006c78 <HAL_UART_MspInit+0x1f0>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006c30:	4b11      	ldr	r3, [pc, #68]	@ (8006c78 <HAL_UART_MspInit+0x1f0>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006c36:	4b10      	ldr	r3, [pc, #64]	@ (8006c78 <HAL_UART_MspInit+0x1f0>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006c3c:	480e      	ldr	r0, [pc, #56]	@ (8006c78 <HAL_UART_MspInit+0x1f0>)
 8006c3e:	f005 f8e1 	bl	800be04 <HAL_DMA_Init>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8006c48:	f7fd fc70 	bl	800452c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8006c78 <HAL_UART_MspInit+0x1f0>)
 8006c50:	671a      	str	r2, [r3, #112]	@ 0x70
 8006c52:	4a09      	ldr	r2, [pc, #36]	@ (8006c78 <HAL_UART_MspInit+0x1f0>)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8006c58:	bf00      	nop
 8006c5a:	37b8      	adds	r7, #184	@ 0xb8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	40004c00 	.word	0x40004c00
 8006c64:	40021000 	.word	0x40021000
 8006c68:	40013800 	.word	0x40013800
 8006c6c:	48000400 	.word	0x48000400
 8006c70:	200006ac 	.word	0x200006ac
 8006c74:	40020058 	.word	0x40020058
 8006c78:	200006f4 	.word	0x200006f4
 8006c7c:	40020044 	.word	0x40020044

08006c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006c80:	b480      	push	{r7}
 8006c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006c84:	bf00      	nop
 8006c86:	e7fd      	b.n	8006c84 <NMI_Handler+0x4>

08006c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006c8c:	bf00      	nop
 8006c8e:	e7fd      	b.n	8006c8c <HardFault_Handler+0x4>

08006c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006c94:	bf00      	nop
 8006c96:	e7fd      	b.n	8006c94 <MemManage_Handler+0x4>

08006c98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006c9c:	bf00      	nop
 8006c9e:	e7fd      	b.n	8006c9c <BusFault_Handler+0x4>

08006ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006ca4:	bf00      	nop
 8006ca6:	e7fd      	b.n	8006ca4 <UsageFault_Handler+0x4>

08006ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006cac:	bf00      	nop
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006cba:	bf00      	nop
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006cc8:	bf00      	nop
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006cd6:	f003 f983 	bl	8009fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006cda:	bf00      	nop
 8006cdc:	bd80      	pop	{r7, pc}
	...

08006ce0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006ce4:	4802      	ldr	r0, [pc, #8]	@ (8006cf0 <DMA1_Channel1_IRQHandler+0x10>)
 8006ce6:	f005 f9e3 	bl	800c0b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006cea:	bf00      	nop
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	2000027c 	.word	0x2000027c

08006cf4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006cf8:	4802      	ldr	r0, [pc, #8]	@ (8006d04 <DMA1_Channel4_IRQHandler+0x10>)
 8006cfa:	f005 f9d9 	bl	800c0b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006cfe:	bf00      	nop
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	200006f4 	.word	0x200006f4

08006d08 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006d0c:	4802      	ldr	r0, [pc, #8]	@ (8006d18 <DMA1_Channel5_IRQHandler+0x10>)
 8006d0e:	f005 f9cf 	bl	800c0b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8006d12:	bf00      	nop
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	200006ac 	.word	0x200006ac

08006d1c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8006d20:	4802      	ldr	r0, [pc, #8]	@ (8006d2c <RTC_Alarm_IRQHandler+0x10>)
 8006d22:	f009 fbe5 	bl	80104f0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8006d26:	bf00      	nop
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20000380 	.word	0x20000380

08006d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006d38:	4a14      	ldr	r2, [pc, #80]	@ (8006d8c <_sbrk+0x5c>)
 8006d3a:	4b15      	ldr	r3, [pc, #84]	@ (8006d90 <_sbrk+0x60>)
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006d44:	4b13      	ldr	r3, [pc, #76]	@ (8006d94 <_sbrk+0x64>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d102      	bne.n	8006d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006d4c:	4b11      	ldr	r3, [pc, #68]	@ (8006d94 <_sbrk+0x64>)
 8006d4e:	4a12      	ldr	r2, [pc, #72]	@ (8006d98 <_sbrk+0x68>)
 8006d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006d52:	4b10      	ldr	r3, [pc, #64]	@ (8006d94 <_sbrk+0x64>)
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4413      	add	r3, r2
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d207      	bcs.n	8006d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006d60:	f00e fa22 	bl	80151a8 <__errno>
 8006d64:	4603      	mov	r3, r0
 8006d66:	220c      	movs	r2, #12
 8006d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d6e:	e009      	b.n	8006d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006d70:	4b08      	ldr	r3, [pc, #32]	@ (8006d94 <_sbrk+0x64>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006d76:	4b07      	ldr	r3, [pc, #28]	@ (8006d94 <_sbrk+0x64>)
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	4a05      	ldr	r2, [pc, #20]	@ (8006d94 <_sbrk+0x64>)
 8006d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006d82:	68fb      	ldr	r3, [r7, #12]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3718      	adds	r7, #24
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	20018000 	.word	0x20018000
 8006d90:	00000400 	.word	0x00000400
 8006d94:	20005abc 	.word	0x20005abc
 8006d98:	20005c18 	.word	0x20005c18

08006d9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8006da0:	4b06      	ldr	r3, [pc, #24]	@ (8006dbc <SystemInit+0x20>)
 8006da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006da6:	4a05      	ldr	r2, [pc, #20]	@ (8006dbc <SystemInit+0x20>)
 8006da8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006dac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8006db0:	bf00      	nop
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	e000ed00 	.word	0xe000ed00

08006dc0 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;

	switch (pdrv) {
 8006dca:	79fb      	ldrb	r3, [r7, #7]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <disk_status+0x16>
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d00c      	beq.n	8006dee <disk_status+0x2e>
 8006dd4:	e017      	b.n	8006e06 <disk_status+0x46>
	case DEV_RAM :

		if(!psram_is_initialized())
 8006dd6:	f7ff fa9b 	bl	8006310 <psram_is_initialized>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d102      	bne.n	8006de6 <disk_status+0x26>
		{
			stat = STA_NOINIT;
 8006de0:	2301      	movs	r3, #1
 8006de2:	73fb      	strb	r3, [r7, #15]
 8006de4:	e001      	b.n	8006dea <disk_status+0x2a>
		}else{
			stat = 0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8006dea:	7bfb      	ldrb	r3, [r7, #15]
 8006dec:	e00c      	b.n	8006e08 <disk_status+0x48>

	case DEV_MMC :

		if(!extflash_is_initialized())
 8006dee:	f7fb fbab 	bl	8002548 <extflash_is_initialized>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d102      	bne.n	8006dfe <disk_status+0x3e>
		{
			stat = STA_NOINIT;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	73fb      	strb	r3, [r7, #15]
 8006dfc:	e001      	b.n	8006e02 <disk_status+0x42>
		}else{
			stat = 0;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
 8006e04:	e000      	b.n	8006e08 <disk_status+0x48>

	}
	return STA_NOINIT;
 8006e06:	2301      	movs	r3, #1
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	4603      	mov	r3, r0
 8006e18:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;
	switch (pdrv) {
 8006e1a:	79fb      	ldrb	r3, [r7, #7]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d002      	beq.n	8006e26 <disk_initialize+0x16>
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d00c      	beq.n	8006e3e <disk_initialize+0x2e>
 8006e24:	e017      	b.n	8006e56 <disk_initialize+0x46>
	case DEV_RAM :

		if(psram_init() < 0)
 8006e26:	f7ff faa1 	bl	800636c <psram_init>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	da02      	bge.n	8006e36 <disk_initialize+0x26>
		{
			stat = STA_NODISK;
 8006e30:	2302      	movs	r3, #2
 8006e32:	73fb      	strb	r3, [r7, #15]
 8006e34:	e001      	b.n	8006e3a <disk_initialize+0x2a>
		}else{
			stat = 0;
 8006e36:	2300      	movs	r3, #0
 8006e38:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
 8006e3c:	e00c      	b.n	8006e58 <disk_initialize+0x48>

	case DEV_MMC :

		if(extflash_init() < 0)
 8006e3e:	f7fb fb8f 	bl	8002560 <extflash_init>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	da02      	bge.n	8006e4e <disk_initialize+0x3e>
		{
			stat = STA_NODISK;
 8006e48:	2302      	movs	r3, #2
 8006e4a:	73fb      	strb	r3, [r7, #15]
 8006e4c:	e001      	b.n	8006e52 <disk_initialize+0x42>
		}else{
			stat = 0;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
 8006e54:	e000      	b.n	8006e58 <disk_initialize+0x48>

	}
	return STA_NOINIT;
 8006e56:	2301      	movs	r3, #1
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60b9      	str	r1, [r7, #8]
 8006e68:	607a      	str	r2, [r7, #4]
 8006e6a:	603b      	str	r3, [r7, #0]
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	73fb      	strb	r3, [r7, #15]
	DRESULT res;
	int result;

	switch (pdrv) {
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d002      	beq.n	8006e7c <disk_read+0x1c>
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d010      	beq.n	8006e9c <disk_read+0x3c>
 8006e7a:	e01e      	b.n	8006eba <disk_read+0x5a>
	case DEV_RAM :

		if(psram_sector_read_write(0, sector, count, buff) < 0)
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	6879      	ldr	r1, [r7, #4]
 8006e82:	2000      	movs	r0, #0
 8006e84:	f7ff f94a 	bl	800611c <psram_sector_read_write>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	da02      	bge.n	8006e94 <disk_read+0x34>
		{
			res = RES_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	75fb      	strb	r3, [r7, #23]
 8006e92:	e001      	b.n	8006e98 <disk_read+0x38>
		}else{

			res = 0;
 8006e94:	2300      	movs	r3, #0
 8006e96:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8006e98:	7dfb      	ldrb	r3, [r7, #23]
 8006e9a:	e00f      	b.n	8006ebc <disk_read+0x5c>

	case DEV_MMC :

		if(extflash_sector_read(sector, count, buff) < 0)
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	6839      	ldr	r1, [r7, #0]
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7fb fa35 	bl	8002310 <extflash_sector_read>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	da02      	bge.n	8006eb2 <disk_read+0x52>
		{
			res = RES_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	75fb      	strb	r3, [r7, #23]
 8006eb0:	e001      	b.n	8006eb6 <disk_read+0x56>
		}else{

			res = 0;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8006eb6:	7dfb      	ldrb	r3, [r7, #23]
 8006eb8:	e000      	b.n	8006ebc <disk_read+0x5c>

	}

	return RES_PARERR;
 8006eba:	2304      	movs	r3, #4
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3718      	adds	r7, #24
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60b9      	str	r1, [r7, #8]
 8006ecc:	607a      	str	r2, [r7, #4]
 8006ece:	603b      	str	r3, [r7, #0]
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	73fb      	strb	r3, [r7, #15]
	DRESULT res = RES_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	75fb      	strb	r3, [r7, #23]

	switch (pdrv) {
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d002      	beq.n	8006ee4 <disk_write+0x20>
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d010      	beq.n	8006f04 <disk_write+0x40>
 8006ee2:	e01e      	b.n	8006f22 <disk_write+0x5e>
	case DEV_RAM :

		if(psram_sector_read_write(1, sector, count, (const uint8_t *)buff) < 0)
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	6879      	ldr	r1, [r7, #4]
 8006eea:	2001      	movs	r0, #1
 8006eec:	f7ff f916 	bl	800611c <psram_sector_read_write>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	da02      	bge.n	8006efc <disk_write+0x38>
		{
			res = RES_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	75fb      	strb	r3, [r7, #23]
 8006efa:	e001      	b.n	8006f00 <disk_write+0x3c>
		}else{

			res = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8006f00:	7dfb      	ldrb	r3, [r7, #23]
 8006f02:	e00f      	b.n	8006f24 <disk_write+0x60>

	case DEV_MMC :

		if(extflash_sector_write(sector, count, buff) < 0)
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f7fb fa96 	bl	800243a <extflash_sector_write>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	da02      	bge.n	8006f1a <disk_write+0x56>
		{
			res = RES_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	75fb      	strb	r3, [r7, #23]
 8006f18:	e001      	b.n	8006f1e <disk_write+0x5a>
		}else{

			res = 0;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8006f1e:	7dfb      	ldrb	r3, [r7, #23]
 8006f20:	e000      	b.n	8006f24 <disk_write+0x60>

	}

	return RES_PARERR;
 8006f22:	2304      	movs	r3, #4
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	4603      	mov	r3, r0
 8006f34:	603a      	str	r2, [r7, #0]
 8006f36:	71fb      	strb	r3, [r7, #7]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_PARERR;
 8006f3c:	2304      	movs	r3, #4
 8006f3e:	73fb      	strb	r3, [r7, #15]

	switch (pdrv) {
 8006f40:	79fb      	ldrb	r3, [r7, #7]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d002      	beq.n	8006f4c <disk_ioctl+0x20>
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d036      	beq.n	8006fb8 <disk_ioctl+0x8c>
 8006f4a:	e06b      	b.n	8007024 <disk_ioctl+0xf8>
	case DEV_RAM :

		if(!psram_is_initialized())return RES_NOTRDY;
 8006f4c:	f7ff f9e0 	bl	8006310 <psram_is_initialized>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <disk_ioctl+0x2e>
 8006f56:	2303      	movs	r3, #3
 8006f58:	e065      	b.n	8007026 <disk_ioctl+0xfa>

		switch(cmd)
 8006f5a:	79bb      	ldrb	r3, [r7, #6]
 8006f5c:	2b04      	cmp	r3, #4
 8006f5e:	d826      	bhi.n	8006fae <disk_ioctl+0x82>
 8006f60:	a201      	add	r2, pc, #4	@ (adr r2, 8006f68 <disk_ioctl+0x3c>)
 8006f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f66:	bf00      	nop
 8006f68:	08006fa9 	.word	0x08006fa9
 8006f6c:	08006f7d 	.word	0x08006f7d
 8006f70:	08006f8d 	.word	0x08006f8d
 8006f74:	08006f9d 	.word	0x08006f9d
 8006f78:	08006fa9 	.word	0x08006fa9
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = psram_get_sector_count();
 8006f7c:	f7ff f9de 	bl	800633c <psram_get_sector_count>
 8006f80:	4602      	mov	r2, r0
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	601a      	str	r2, [r3, #0]
				res = 0;
 8006f86:	2300      	movs	r3, #0
 8006f88:	73fb      	strb	r3, [r7, #15]
				break;
 8006f8a:	e013      	b.n	8006fb4 <disk_ioctl+0x88>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = psram_get_sector_size();
 8006f8c:	f7ff f9cc 	bl	8006328 <psram_get_sector_size>
 8006f90:	4602      	mov	r2, r0
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	601a      	str	r2, [r3, #0]
				res = 0;
 8006f96:	2300      	movs	r3, #0
 8006f98:	73fb      	strb	r3, [r7, #15]
				break;
 8006f9a:	e00b      	b.n	8006fb4 <disk_ioctl+0x88>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	601a      	str	r2, [r3, #0]
				res = 0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	73fb      	strb	r3, [r7, #15]
				break;
 8006fa6:	e005      	b.n	8006fb4 <disk_ioctl+0x88>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	73fb      	strb	r3, [r7, #15]
				break;
 8006fac:	e002      	b.n	8006fb4 <disk_ioctl+0x88>

			default:
				res = RES_PARERR;
 8006fae:	2304      	movs	r3, #4
 8006fb0:	73fb      	strb	r3, [r7, #15]
				break;
 8006fb2:	bf00      	nop
		}

		return res;
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
 8006fb6:	e036      	b.n	8007026 <disk_ioctl+0xfa>

	case DEV_MMC :

		if(!extflash_is_initialized())return RES_NOTRDY;
 8006fb8:	f7fb fac6 	bl	8002548 <extflash_is_initialized>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d101      	bne.n	8006fc6 <disk_ioctl+0x9a>
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e02f      	b.n	8007026 <disk_ioctl+0xfa>

		switch(cmd)
 8006fc6:	79bb      	ldrb	r3, [r7, #6]
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	d826      	bhi.n	800701a <disk_ioctl+0xee>
 8006fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd4 <disk_ioctl+0xa8>)
 8006fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd2:	bf00      	nop
 8006fd4:	08007015 	.word	0x08007015
 8006fd8:	08006fe9 	.word	0x08006fe9
 8006fdc:	08006ff9 	.word	0x08006ff9
 8006fe0:	08007009 	.word	0x08007009
 8006fe4:	08007015 	.word	0x08007015
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = extflash_get_sector_count();
 8006fe8:	f7fb faa2 	bl	8002530 <extflash_get_sector_count>
 8006fec:	4602      	mov	r2, r0
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	601a      	str	r2, [r3, #0]
				res = 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	73fb      	strb	r3, [r7, #15]
				break;
 8006ff6:	e013      	b.n	8007020 <disk_ioctl+0xf4>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = extflash_get_sector_size();
 8006ff8:	f7fb fa91 	bl	800251e <extflash_get_sector_size>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	601a      	str	r2, [r3, #0]
				res = 0;
 8007002:	2300      	movs	r3, #0
 8007004:	73fb      	strb	r3, [r7, #15]
				break;
 8007006:	e00b      	b.n	8007020 <disk_ioctl+0xf4>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	2201      	movs	r2, #1
 800700c:	601a      	str	r2, [r3, #0]
				res = 0;
 800700e:	2300      	movs	r3, #0
 8007010:	73fb      	strb	r3, [r7, #15]
				break;
 8007012:	e005      	b.n	8007020 <disk_ioctl+0xf4>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 8007014:	2300      	movs	r3, #0
 8007016:	73fb      	strb	r3, [r7, #15]
				break;
 8007018:	e002      	b.n	8007020 <disk_ioctl+0xf4>

			default:
				res = RES_PARERR;
 800701a:	2304      	movs	r3, #4
 800701c:	73fb      	strb	r3, [r7, #15]
				break;
 800701e:	bf00      	nop
		}

		return res;
 8007020:	7bfb      	ldrb	r3, [r7, #15]
 8007022:	e000      	b.n	8007026 <disk_ioctl+0xfa>

	}

	return RES_PARERR;
 8007024:	2304      	movs	r3, #4
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop

08007030 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	3301      	adds	r3, #1
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007040:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007044:	021b      	lsls	r3, r3, #8
 8007046:	b21a      	sxth	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	b21b      	sxth	r3, r3
 800704e:	4313      	orrs	r3, r2
 8007050:	b21b      	sxth	r3, r3
 8007052:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007054:	89fb      	ldrh	r3, [r7, #14]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007062:	b480      	push	{r7}
 8007064:	b085      	sub	sp, #20
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	3303      	adds	r3, #3
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	021b      	lsls	r3, r3, #8
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	3202      	adds	r2, #2
 800707a:	7812      	ldrb	r2, [r2, #0]
 800707c:	4313      	orrs	r3, r2
 800707e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	021b      	lsls	r3, r3, #8
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	3201      	adds	r2, #1
 8007088:	7812      	ldrb	r2, [r2, #0]
 800708a:	4313      	orrs	r3, r2
 800708c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	021b      	lsls	r3, r3, #8
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	7812      	ldrb	r2, [r2, #0]
 8007096:	4313      	orrs	r3, r2
 8007098:	60fb      	str	r3, [r7, #12]
	return rv;
 800709a:	68fb      	ldr	r3, [r7, #12]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	460b      	mov	r3, r1
 80070b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	1c5a      	adds	r2, r3, #1
 80070b8:	607a      	str	r2, [r7, #4]
 80070ba:	887a      	ldrh	r2, [r7, #2]
 80070bc:	b2d2      	uxtb	r2, r2
 80070be:	701a      	strb	r2, [r3, #0]
 80070c0:	887b      	ldrh	r3, [r7, #2]
 80070c2:	0a1b      	lsrs	r3, r3, #8
 80070c4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	607a      	str	r2, [r7, #4]
 80070cc:	887a      	ldrh	r2, [r7, #2]
 80070ce:	b2d2      	uxtb	r2, r2
 80070d0:	701a      	strb	r2, [r3, #0]
}
 80070d2:	bf00      	nop
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80070de:	b480      	push	{r7}
 80070e0:	b083      	sub	sp, #12
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	1c5a      	adds	r2, r3, #1
 80070ec:	607a      	str	r2, [r7, #4]
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	b2d2      	uxtb	r2, r2
 80070f2:	701a      	strb	r2, [r3, #0]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	0a1b      	lsrs	r3, r3, #8
 80070f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	1c5a      	adds	r2, r3, #1
 80070fe:	607a      	str	r2, [r7, #4]
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	b2d2      	uxtb	r2, r2
 8007104:	701a      	strb	r2, [r3, #0]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	0a1b      	lsrs	r3, r3, #8
 800710a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	1c5a      	adds	r2, r3, #1
 8007110:	607a      	str	r2, [r7, #4]
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	b2d2      	uxtb	r2, r2
 8007116:	701a      	strb	r2, [r3, #0]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	0a1b      	lsrs	r3, r3, #8
 800711c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	1c5a      	adds	r2, r3, #1
 8007122:	607a      	str	r2, [r7, #4]
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	b2d2      	uxtb	r2, r2
 8007128:	701a      	strb	r2, [r3, #0]
}
 800712a:	bf00      	nop
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	4603      	mov	r3, r0
 800713e:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8007140:	79fb      	ldrb	r3, [r7, #7]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d001      	beq.n	800714a <dbc_1st+0x14>
 8007146:	2300      	movs	r3, #0
 8007148:	e000      	b.n	800714c <dbc_1st+0x16>
#endif
	return 0;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	4603      	mov	r3, r0
 8007160:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8007162:	79fb      	ldrb	r3, [r7, #7]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <dbc_2nd+0x14>
 8007168:	2300      	movs	r3, #0
 800716a:	e000      	b.n	800716e <dbc_2nd+0x16>
#endif
	return 0;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b084      	sub	sp, #16
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	791b      	ldrb	r3, [r3, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d02c      	beq.n	80071e8 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	7858      	ldrb	r0, [r3, #1]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800719c:	2301      	movs	r3, #1
 800719e:	f7ff fe91 	bl	8006ec4 <disk_write>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d11d      	bne.n	80071e4 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b6:	1ad2      	subs	r2, r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d213      	bcs.n	80071e8 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	78db      	ldrb	r3, [r3, #3]
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d10f      	bne.n	80071e8 <sync_window+0x6e>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	7858      	ldrb	r0, [r3, #1]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	441a      	add	r2, r3
 80071dc:	2301      	movs	r3, #1
 80071de:	f7ff fe71 	bl	8006ec4 <disk_write>
 80071e2:	e001      	b.n	80071e8 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 80071e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b084      	sub	sp, #16
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
 80071fa:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80071fc:	2300      	movs	r3, #0
 80071fe:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	429a      	cmp	r2, r3
 8007208:	d01b      	beq.n	8007242 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7ff ffb5 	bl	800717a <sync_window>
 8007210:	4603      	mov	r3, r0
 8007212:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007214:	7bfb      	ldrb	r3, [r7, #15]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d113      	bne.n	8007242 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	7858      	ldrb	r0, [r3, #1]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007224:	2301      	movs	r3, #1
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	f7ff fe1a 	bl	8006e60 <disk_read>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d004      	beq.n	800723c <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8007232:	f04f 33ff 	mov.w	r3, #4294967295
 8007236:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007238:	2301      	movs	r3, #1
 800723a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8007242:	7bfb      	ldrb	r3, [r7, #15]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7ff ff90 	bl	800717a <sync_window>
 800725a:	4603      	mov	r3, r0
 800725c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800725e:	7bfb      	ldrb	r3, [r7, #15]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d158      	bne.n	8007316 <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	2b03      	cmp	r3, #3
 800726a:	d148      	bne.n	80072fe <sync_fs+0xb2>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	795b      	ldrb	r3, [r3, #5]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d144      	bne.n	80072fe <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	3334      	adds	r3, #52	@ 0x34
 8007278:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800727c:	2100      	movs	r1, #0
 800727e:	4618      	mov	r0, r3
 8007280:	f00d ff42 	bl	8015108 <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	3334      	adds	r3, #52	@ 0x34
 8007288:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800728c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007290:	4618      	mov	r0, r3
 8007292:	f7ff ff09 	bl	80070a8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	3334      	adds	r3, #52	@ 0x34
 800729a:	4921      	ldr	r1, [pc, #132]	@ (8007320 <sync_fs+0xd4>)
 800729c:	4618      	mov	r0, r3
 800729e:	f7ff ff1e 	bl	80070de <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3334      	adds	r3, #52	@ 0x34
 80072a6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80072aa:	491e      	ldr	r1, [pc, #120]	@ (8007324 <sync_fs+0xd8>)
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7ff ff16 	bl	80070de <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	3334      	adds	r3, #52	@ 0x34
 80072b6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	4619      	mov	r1, r3
 80072c0:	4610      	mov	r0, r2
 80072c2:	f7ff ff0c 	bl	80070de <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	3334      	adds	r3, #52	@ 0x34
 80072ca:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	4619      	mov	r1, r3
 80072d4:	4610      	mov	r0, r2
 80072d6:	f7ff ff02 	bl	80070de <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	7858      	ldrb	r0, [r3, #1]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072f2:	2301      	movs	r3, #1
 80072f4:	f7ff fde6 	bl	8006ec4 <disk_write>
			fs->fsi_flag = 0;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	785b      	ldrb	r3, [r3, #1]
 8007302:	2200      	movs	r2, #0
 8007304:	2100      	movs	r1, #0
 8007306:	4618      	mov	r0, r3
 8007308:	f7ff fe10 	bl	8006f2c <disk_ioctl>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <sync_fs+0xca>
 8007312:	2301      	movs	r3, #1
 8007314:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007316:	7bfb      	ldrb	r3, [r7, #15]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	41615252 	.word	0x41615252
 8007324:	61417272 	.word	0x61417272

08007328 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	3b02      	subs	r3, #2
 8007336:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	3b02      	subs	r3, #2
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	429a      	cmp	r2, r3
 8007342:	d301      	bcc.n	8007348 <clst2sect+0x20>
 8007344:	2300      	movs	r3, #0
 8007346:	e008      	b.n	800735a <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	895b      	ldrh	r3, [r3, #10]
 8007350:	4619      	mov	r1, r3
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	fb01 f303 	mul.w	r3, r1, r3
 8007358:	4413      	add	r3, r2
}
 800735a:	4618      	mov	r0, r3
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b086      	sub	sp, #24
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d904      	bls.n	8007386 <get_fat+0x20>
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d302      	bcc.n	800738c <get_fat+0x26>
		val = 1;	/* Internal error */
 8007386:	2301      	movs	r3, #1
 8007388:	617b      	str	r3, [r7, #20]
 800738a:	e0ba      	b.n	8007502 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800738c:	f04f 33ff 	mov.w	r3, #4294967295
 8007390:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	2b03      	cmp	r3, #3
 8007398:	f000 8082 	beq.w	80074a0 <get_fat+0x13a>
 800739c:	2b03      	cmp	r3, #3
 800739e:	f300 80a6 	bgt.w	80074ee <get_fat+0x188>
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d002      	beq.n	80073ac <get_fat+0x46>
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d055      	beq.n	8007456 <get_fat+0xf0>
 80073aa:	e0a0      	b.n	80074ee <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	085b      	lsrs	r3, r3, #1
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	4413      	add	r3, r2
 80073b8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	899b      	ldrh	r3, [r3, #12]
 80073c2:	4619      	mov	r1, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80073ca:	4413      	add	r3, r2
 80073cc:	4619      	mov	r1, r3
 80073ce:	6938      	ldr	r0, [r7, #16]
 80073d0:	f7ff ff0f 	bl	80071f2 <move_window>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f040 808c 	bne.w	80074f4 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	60fa      	str	r2, [r7, #12]
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	8992      	ldrh	r2, [r2, #12]
 80073e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80073ea:	fb01 f202 	mul.w	r2, r1, r2
 80073ee:	1a9b      	subs	r3, r3, r2
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	4413      	add	r3, r2
 80073f4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80073f8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	899b      	ldrh	r3, [r3, #12]
 8007402:	4619      	mov	r1, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	fbb3 f3f1 	udiv	r3, r3, r1
 800740a:	4413      	add	r3, r2
 800740c:	4619      	mov	r1, r3
 800740e:	6938      	ldr	r0, [r7, #16]
 8007410:	f7ff feef 	bl	80071f2 <move_window>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d16e      	bne.n	80074f8 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	899b      	ldrh	r3, [r3, #12]
 800741e:	461a      	mov	r2, r3
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	fbb3 f1f2 	udiv	r1, r3, r2
 8007426:	fb01 f202 	mul.w	r2, r1, r2
 800742a:	1a9b      	subs	r3, r3, r2
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	4413      	add	r3, r2
 8007430:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007434:	021b      	lsls	r3, r3, #8
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	4313      	orrs	r3, r2
 800743a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	f003 0301 	and.w	r3, r3, #1
 8007442:	2b00      	cmp	r3, #0
 8007444:	d002      	beq.n	800744c <get_fat+0xe6>
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	091b      	lsrs	r3, r3, #4
 800744a:	e002      	b.n	8007452 <get_fat+0xec>
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007452:	617b      	str	r3, [r7, #20]
			break;
 8007454:	e055      	b.n	8007502 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	899b      	ldrh	r3, [r3, #12]
 800745e:	085b      	lsrs	r3, r3, #1
 8007460:	b29b      	uxth	r3, r3
 8007462:	4619      	mov	r1, r3
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	fbb3 f3f1 	udiv	r3, r3, r1
 800746a:	4413      	add	r3, r2
 800746c:	4619      	mov	r1, r3
 800746e:	6938      	ldr	r0, [r7, #16]
 8007470:	f7ff febf 	bl	80071f2 <move_window>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d140      	bne.n	80074fc <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	005b      	lsls	r3, r3, #1
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	8992      	ldrh	r2, [r2, #12]
 8007488:	fbb3 f0f2 	udiv	r0, r3, r2
 800748c:	fb00 f202 	mul.w	r2, r0, r2
 8007490:	1a9b      	subs	r3, r3, r2
 8007492:	440b      	add	r3, r1
 8007494:	4618      	mov	r0, r3
 8007496:	f7ff fdcb 	bl	8007030 <ld_word>
 800749a:	4603      	mov	r3, r0
 800749c:	617b      	str	r3, [r7, #20]
			break;
 800749e:	e030      	b.n	8007502 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	899b      	ldrh	r3, [r3, #12]
 80074a8:	089b      	lsrs	r3, r3, #2
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	4619      	mov	r1, r3
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80074b4:	4413      	add	r3, r2
 80074b6:	4619      	mov	r1, r3
 80074b8:	6938      	ldr	r0, [r7, #16]
 80074ba:	f7ff fe9a 	bl	80071f2 <move_window>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d11d      	bne.n	8007500 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	8992      	ldrh	r2, [r2, #12]
 80074d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80074d6:	fb00 f202 	mul.w	r2, r0, r2
 80074da:	1a9b      	subs	r3, r3, r2
 80074dc:	440b      	add	r3, r1
 80074de:	4618      	mov	r0, r3
 80074e0:	f7ff fdbf 	bl	8007062 <ld_dword>
 80074e4:	4603      	mov	r3, r0
 80074e6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80074ea:	617b      	str	r3, [r7, #20]
			break;
 80074ec:	e009      	b.n	8007502 <get_fat+0x19c>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 80074ee:	2301      	movs	r3, #1
 80074f0:	617b      	str	r3, [r7, #20]
 80074f2:	e006      	b.n	8007502 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80074f4:	bf00      	nop
 80074f6:	e004      	b.n	8007502 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80074f8:	bf00      	nop
 80074fa:	e002      	b.n	8007502 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80074fc:	bf00      	nop
 80074fe:	e000      	b.n	8007502 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007500:	bf00      	nop
		}
	}

	return val;
 8007502:	697b      	ldr	r3, [r7, #20]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3718      	adds	r7, #24
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800750c:	b590      	push	{r4, r7, lr}
 800750e:	b089      	sub	sp, #36	@ 0x24
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007518:	2302      	movs	r3, #2
 800751a:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b01      	cmp	r3, #1
 8007520:	f240 8109 	bls.w	8007736 <put_fat+0x22a>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	429a      	cmp	r2, r3
 800752c:	f080 8103 	bcs.w	8007736 <put_fat+0x22a>
		switch (fs->fs_type) {
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	2b03      	cmp	r3, #3
 8007536:	f000 80b6 	beq.w	80076a6 <put_fat+0x19a>
 800753a:	2b03      	cmp	r3, #3
 800753c:	f300 80fb 	bgt.w	8007736 <put_fat+0x22a>
 8007540:	2b01      	cmp	r3, #1
 8007542:	d003      	beq.n	800754c <put_fat+0x40>
 8007544:	2b02      	cmp	r3, #2
 8007546:	f000 8083 	beq.w	8007650 <put_fat+0x144>
 800754a:	e0f4      	b.n	8007736 <put_fat+0x22a>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	61bb      	str	r3, [r7, #24]
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	085b      	lsrs	r3, r3, #1
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	4413      	add	r3, r2
 8007558:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	899b      	ldrh	r3, [r3, #12]
 8007562:	4619      	mov	r1, r3
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	fbb3 f3f1 	udiv	r3, r3, r1
 800756a:	4413      	add	r3, r2
 800756c:	4619      	mov	r1, r3
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f7ff fe3f 	bl	80071f2 <move_window>
 8007574:	4603      	mov	r3, r0
 8007576:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007578:	7ffb      	ldrb	r3, [r7, #31]
 800757a:	2b00      	cmp	r3, #0
 800757c:	f040 80d4 	bne.w	8007728 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	61ba      	str	r2, [r7, #24]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	8992      	ldrh	r2, [r2, #12]
 8007590:	fbb3 f0f2 	udiv	r0, r3, r2
 8007594:	fb00 f202 	mul.w	r2, r0, r2
 8007598:	1a9b      	subs	r3, r3, r2
 800759a:	440b      	add	r3, r1
 800759c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00d      	beq.n	80075c4 <put_fat+0xb8>
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	b25b      	sxtb	r3, r3
 80075ae:	f003 030f 	and.w	r3, r3, #15
 80075b2:	b25a      	sxtb	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	b25b      	sxtb	r3, r3
 80075b8:	011b      	lsls	r3, r3, #4
 80075ba:	b25b      	sxtb	r3, r3
 80075bc:	4313      	orrs	r3, r2
 80075be:	b25b      	sxtb	r3, r3
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	e001      	b.n	80075c8 <put_fat+0xbc>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2201      	movs	r2, #1
 80075d0:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	899b      	ldrh	r3, [r3, #12]
 80075da:	4619      	mov	r1, r3
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	fbb3 f3f1 	udiv	r3, r3, r1
 80075e2:	4413      	add	r3, r2
 80075e4:	4619      	mov	r1, r3
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f7ff fe03 	bl	80071f2 <move_window>
 80075ec:	4603      	mov	r3, r0
 80075ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80075f0:	7ffb      	ldrb	r3, [r7, #31]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f040 809a 	bne.w	800772c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	899b      	ldrh	r3, [r3, #12]
 8007602:	461a      	mov	r2, r3
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	fbb3 f0f2 	udiv	r0, r3, r2
 800760a:	fb00 f202 	mul.w	r2, r0, r2
 800760e:	1a9b      	subs	r3, r3, r2
 8007610:	440b      	add	r3, r1
 8007612:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d003      	beq.n	8007626 <put_fat+0x11a>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	091b      	lsrs	r3, r3, #4
 8007622:	b2db      	uxtb	r3, r3
 8007624:	e00e      	b.n	8007644 <put_fat+0x138>
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	b25b      	sxtb	r3, r3
 800762c:	f023 030f 	bic.w	r3, r3, #15
 8007630:	b25a      	sxtb	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	0a1b      	lsrs	r3, r3, #8
 8007636:	b25b      	sxtb	r3, r3
 8007638:	f003 030f 	and.w	r3, r3, #15
 800763c:	b25b      	sxtb	r3, r3
 800763e:	4313      	orrs	r3, r2
 8007640:	b25b      	sxtb	r3, r3
 8007642:	b2db      	uxtb	r3, r3
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2201      	movs	r2, #1
 800764c:	711a      	strb	r2, [r3, #4]
			break;
 800764e:	e072      	b.n	8007736 <put_fat+0x22a>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	899b      	ldrh	r3, [r3, #12]
 8007658:	085b      	lsrs	r3, r3, #1
 800765a:	b29b      	uxth	r3, r3
 800765c:	4619      	mov	r1, r3
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	fbb3 f3f1 	udiv	r3, r3, r1
 8007664:	4413      	add	r3, r2
 8007666:	4619      	mov	r1, r3
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f7ff fdc2 	bl	80071f2 <move_window>
 800766e:	4603      	mov	r3, r0
 8007670:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007672:	7ffb      	ldrb	r3, [r7, #31]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d15b      	bne.n	8007730 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	005b      	lsls	r3, r3, #1
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	8992      	ldrh	r2, [r2, #12]
 8007686:	fbb3 f0f2 	udiv	r0, r3, r2
 800768a:	fb00 f202 	mul.w	r2, r0, r2
 800768e:	1a9b      	subs	r3, r3, r2
 8007690:	440b      	add	r3, r1
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	b292      	uxth	r2, r2
 8007696:	4611      	mov	r1, r2
 8007698:	4618      	mov	r0, r3
 800769a:	f7ff fd05 	bl	80070a8 <st_word>
			fs->wflag = 1;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2201      	movs	r2, #1
 80076a2:	711a      	strb	r2, [r3, #4]
			break;
 80076a4:	e047      	b.n	8007736 <put_fat+0x22a>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	899b      	ldrh	r3, [r3, #12]
 80076ae:	089b      	lsrs	r3, r3, #2
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	4619      	mov	r1, r3
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80076ba:	4413      	add	r3, r2
 80076bc:	4619      	mov	r1, r3
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f7ff fd97 	bl	80071f2 <move_window>
 80076c4:	4603      	mov	r3, r0
 80076c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80076c8:	7ffb      	ldrb	r3, [r7, #31]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d132      	bne.n	8007734 <put_fat+0x228>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	8992      	ldrh	r2, [r2, #12]
 80076e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80076e6:	fb00 f202 	mul.w	r2, r0, r2
 80076ea:	1a9b      	subs	r3, r3, r2
 80076ec:	440b      	add	r3, r1
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7ff fcb7 	bl	8007062 <ld_dword>
 80076f4:	4603      	mov	r3, r0
 80076f6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80076fa:	4323      	orrs	r3, r4
 80076fc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	8992      	ldrh	r2, [r2, #12]
 800770c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007710:	fb00 f202 	mul.w	r2, r0, r2
 8007714:	1a9b      	subs	r3, r3, r2
 8007716:	440b      	add	r3, r1
 8007718:	6879      	ldr	r1, [r7, #4]
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff fcdf 	bl	80070de <st_dword>
			fs->wflag = 1;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2201      	movs	r2, #1
 8007724:	711a      	strb	r2, [r3, #4]
			break;
 8007726:	e006      	b.n	8007736 <put_fat+0x22a>
			if (res != FR_OK) break;
 8007728:	bf00      	nop
 800772a:	e004      	b.n	8007736 <put_fat+0x22a>
			if (res != FR_OK) break;
 800772c:	bf00      	nop
 800772e:	e002      	b.n	8007736 <put_fat+0x22a>
			if (res != FR_OK) break;
 8007730:	bf00      	nop
 8007732:	e000      	b.n	8007736 <put_fat+0x22a>
			if (res != FR_OK) break;
 8007734:	bf00      	nop
		}
	}
	return res;
 8007736:	7ffb      	ldrb	r3, [r7, #31]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3724      	adds	r7, #36	@ 0x24
 800773c:	46bd      	mov	sp, r7
 800773e:	bd90      	pop	{r4, r7, pc}

08007740 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b088      	sub	sp, #32
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d904      	bls.n	8007766 <remove_chain+0x26>
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	429a      	cmp	r2, r3
 8007764:	d301      	bcc.n	800776a <remove_chain+0x2a>
 8007766:	2302      	movs	r3, #2
 8007768:	e04b      	b.n	8007802 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00c      	beq.n	800778a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007770:	f04f 32ff 	mov.w	r2, #4294967295
 8007774:	6879      	ldr	r1, [r7, #4]
 8007776:	69b8      	ldr	r0, [r7, #24]
 8007778:	f7ff fec8 	bl	800750c <put_fat>
 800777c:	4603      	mov	r3, r0
 800777e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007780:	7ffb      	ldrb	r3, [r7, #31]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <remove_chain+0x4a>
 8007786:	7ffb      	ldrb	r3, [r7, #31]
 8007788:	e03b      	b.n	8007802 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800778a:	68b9      	ldr	r1, [r7, #8]
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f7ff fdea 	bl	8007366 <get_fat>
 8007792:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d031      	beq.n	80077fe <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d101      	bne.n	80077a4 <remove_chain+0x64>
 80077a0:	2302      	movs	r3, #2
 80077a2:	e02e      	b.n	8007802 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077aa:	d101      	bne.n	80077b0 <remove_chain+0x70>
 80077ac:	2301      	movs	r3, #1
 80077ae:	e028      	b.n	8007802 <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80077b0:	2200      	movs	r2, #0
 80077b2:	68b9      	ldr	r1, [r7, #8]
 80077b4:	69b8      	ldr	r0, [r7, #24]
 80077b6:	f7ff fea9 	bl	800750c <put_fat>
 80077ba:	4603      	mov	r3, r0
 80077bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80077be:	7ffb      	ldrb	r3, [r7, #31]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d001      	beq.n	80077c8 <remove_chain+0x88>
 80077c4:	7ffb      	ldrb	r3, [r7, #31]
 80077c6:	e01c      	b.n	8007802 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	695a      	ldr	r2, [r3, #20]
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	3b02      	subs	r3, #2
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d20b      	bcs.n	80077ee <remove_chain+0xae>
			fs->free_clst++;
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	795b      	ldrb	r3, [r3, #5]
 80077e4:	f043 0301 	orr.w	r3, r3, #1
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	715a      	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d3c6      	bcc.n	800778a <remove_chain+0x4a>
 80077fc:	e000      	b.n	8007800 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80077fe:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3720      	adds	r7, #32
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b088      	sub	sp, #32
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10d      	bne.n	800783c <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d004      	beq.n	8007836 <create_chain+0x2c>
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	69ba      	ldr	r2, [r7, #24]
 8007832:	429a      	cmp	r2, r3
 8007834:	d31b      	bcc.n	800786e <create_chain+0x64>
 8007836:	2301      	movs	r3, #1
 8007838:	61bb      	str	r3, [r7, #24]
 800783a:	e018      	b.n	800786e <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7ff fd91 	bl	8007366 <get_fat>
 8007844:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d801      	bhi.n	8007850 <create_chain+0x46>
 800784c:	2301      	movs	r3, #1
 800784e:	e0a9      	b.n	80079a4 <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007856:	d101      	bne.n	800785c <create_chain+0x52>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	e0a3      	b.n	80079a4 <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	429a      	cmp	r2, r3
 8007864:	d201      	bcs.n	800786a <create_chain+0x60>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	e09c      	b.n	80079a4 <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <create_chain+0x70>
 8007876:	2300      	movs	r3, #0
 8007878:	e094      	b.n	80079a4 <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 800787a:	2300      	movs	r3, #0
 800787c:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 800787e:	69ba      	ldr	r2, [r7, #24]
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	429a      	cmp	r2, r3
 8007884:	d129      	bne.n	80078da <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	3301      	adds	r3, #1
 800788a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	69fa      	ldr	r2, [r7, #28]
 8007892:	429a      	cmp	r2, r3
 8007894:	d301      	bcc.n	800789a <create_chain+0x90>
 8007896:	2302      	movs	r3, #2
 8007898:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800789a:	69f9      	ldr	r1, [r7, #28]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7ff fd62 	bl	8007366 <get_fat>
 80078a2:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d003      	beq.n	80078b2 <create_chain+0xa8>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b0:	d101      	bne.n	80078b6 <create_chain+0xac>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	e076      	b.n	80079a4 <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00e      	beq.n	80078da <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d906      	bls.n	80078d6 <create_chain+0xcc>
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d201      	bcs.n	80078d6 <create_chain+0xcc>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 80078d6:	2300      	movs	r3, #0
 80078d8:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d129      	bne.n	8007934 <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	3301      	adds	r3, #1
 80078e8:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	69fa      	ldr	r2, [r7, #28]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d307      	bcc.n	8007904 <create_chain+0xfa>
					ncl = 2;
 80078f4:	2302      	movs	r3, #2
 80078f6:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 80078f8:	69fa      	ldr	r2, [r7, #28]
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d901      	bls.n	8007904 <create_chain+0xfa>
 8007900:	2300      	movs	r3, #0
 8007902:	e04f      	b.n	80079a4 <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007904:	69f9      	ldr	r1, [r7, #28]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff fd2d 	bl	8007366 <get_fat>
 800790c:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00e      	beq.n	8007932 <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d003      	beq.n	8007922 <create_chain+0x118>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007920:	d101      	bne.n	8007926 <create_chain+0x11c>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	e03e      	b.n	80079a4 <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8007926:	69fa      	ldr	r2, [r7, #28]
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	429a      	cmp	r2, r3
 800792c:	d1da      	bne.n	80078e4 <create_chain+0xda>
 800792e:	2300      	movs	r3, #0
 8007930:	e038      	b.n	80079a4 <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 8007932:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8007934:	f04f 32ff 	mov.w	r2, #4294967295
 8007938:	69f9      	ldr	r1, [r7, #28]
 800793a:	6938      	ldr	r0, [r7, #16]
 800793c:	f7ff fde6 	bl	800750c <put_fat>
 8007940:	4603      	mov	r3, r0
 8007942:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007944:	7dfb      	ldrb	r3, [r7, #23]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d109      	bne.n	800795e <create_chain+0x154>
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d006      	beq.n	800795e <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8007950:	69fa      	ldr	r2, [r7, #28]
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6938      	ldr	r0, [r7, #16]
 8007956:	f7ff fdd9 	bl	800750c <put_fat>
 800795a:	4603      	mov	r3, r0
 800795c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800795e:	7dfb      	ldrb	r3, [r7, #23]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d116      	bne.n	8007992 <create_chain+0x188>
		fs->last_clst = ncl;
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	69fa      	ldr	r2, [r7, #28]
 8007968:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	695a      	ldr	r2, [r3, #20]
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	3b02      	subs	r3, #2
 8007974:	429a      	cmp	r2, r3
 8007976:	d804      	bhi.n	8007982 <create_chain+0x178>
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	695b      	ldr	r3, [r3, #20]
 800797c:	1e5a      	subs	r2, r3, #1
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	795b      	ldrb	r3, [r3, #5]
 8007986:	f043 0301 	orr.w	r3, r3, #1
 800798a:	b2da      	uxtb	r2, r3
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	715a      	strb	r2, [r3, #5]
 8007990:	e007      	b.n	80079a2 <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007992:	7dfb      	ldrb	r3, [r7, #23]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d102      	bne.n	800799e <create_chain+0x194>
 8007998:	f04f 33ff 	mov.w	r3, #4294967295
 800799c:	e000      	b.n	80079a0 <create_chain+0x196>
 800799e:	2301      	movs	r3, #1
 80079a0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80079a2:	69fb      	ldr	r3, [r7, #28]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3720      	adds	r7, #32
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7ff fbdf 	bl	800717a <sync_window>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d001      	beq.n	80079c6 <dir_clear+0x1a>
 80079c2:	2301      	movs	r3, #1
 80079c4:	e036      	b.n	8007a34 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80079c6:	6839      	ldr	r1, [r7, #0]
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7ff fcad 	bl	8007328 <clst2sect>
 80079ce:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	631a      	str	r2, [r3, #48]	@ 0x30
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	3334      	adds	r3, #52	@ 0x34
 80079da:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80079de:	2100      	movs	r1, #0
 80079e0:	4618      	mov	r0, r3
 80079e2:	f00d fb91 	bl	8015108 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	3334      	adds	r3, #52	@ 0x34
 80079ea:	60fb      	str	r3, [r7, #12]
 80079ec:	2301      	movs	r3, #1
 80079ee:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80079f0:	2300      	movs	r3, #0
 80079f2:	617b      	str	r3, [r7, #20]
 80079f4:	e003      	b.n	80079fe <dir_clear+0x52>
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	4413      	add	r3, r2
 80079fc:	617b      	str	r3, [r7, #20]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	895b      	ldrh	r3, [r3, #10]
 8007a02:	461a      	mov	r2, r3
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d20b      	bcs.n	8007a22 <dir_clear+0x76>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	7858      	ldrb	r0, [r3, #1]
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	441a      	add	r2, r3
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	68f9      	ldr	r1, [r7, #12]
 8007a18:	f7ff fa54 	bl	8006ec4 <disk_write>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d0e9      	beq.n	80079f6 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	895b      	ldrh	r3, [r3, #10]
 8007a26:	461a      	mov	r2, r3
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	bf14      	ite	ne
 8007a2e:	2301      	movne	r3, #1
 8007a30:	2300      	moveq	r3, #0
 8007a32:	b2db      	uxtb	r3, r3
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3718      	adds	r7, #24
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a52:	d204      	bcs.n	8007a5e <dir_sdi+0x22>
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	f003 031f 	and.w	r3, r3, #31
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007a5e:	2302      	movs	r3, #2
 8007a60:	e071      	b.n	8007b46 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	683a      	ldr	r2, [r7, #0]
 8007a66:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d106      	bne.n	8007a82 <dir_sdi+0x46>
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d902      	bls.n	8007a82 <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a80:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10c      	bne.n	8007aa2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	095b      	lsrs	r3, r3, #5
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	8912      	ldrh	r2, [r2, #8]
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d301      	bcc.n	8007a98 <dir_sdi+0x5c>
 8007a94:	2302      	movs	r3, #2
 8007a96:	e056      	b.n	8007b46 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	619a      	str	r2, [r3, #24]
 8007aa0:	e02d      	b.n	8007afe <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	895b      	ldrh	r3, [r3, #10]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	899b      	ldrh	r3, [r3, #12]
 8007aac:	fb02 f303 	mul.w	r3, r2, r3
 8007ab0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007ab2:	e019      	b.n	8007ae8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6979      	ldr	r1, [r7, #20]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7ff fc54 	bl	8007366 <get_fat>
 8007abe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac6:	d101      	bne.n	8007acc <dir_sdi+0x90>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e03c      	b.n	8007b46 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d904      	bls.n	8007adc <dir_sdi+0xa0>
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d301      	bcc.n	8007ae0 <dir_sdi+0xa4>
 8007adc:	2302      	movs	r3, #2
 8007ade:	e032      	b.n	8007b46 <dir_sdi+0x10a>
			ofs -= csz;
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007ae8:	683a      	ldr	r2, [r7, #0]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d2e1      	bcs.n	8007ab4 <dir_sdi+0x78>
		}
		dp->sect = clst2sect(fs, clst);
 8007af0:	6979      	ldr	r1, [r7, #20]
 8007af2:	6938      	ldr	r0, [r7, #16]
 8007af4:	f7ff fc18 	bl	8007328 <clst2sect>
 8007af8:	4602      	mov	r2, r0
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d101      	bne.n	8007b10 <dir_sdi+0xd4>
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	e01a      	b.n	8007b46 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	699a      	ldr	r2, [r3, #24]
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	899b      	ldrh	r3, [r3, #12]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b20:	441a      	add	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	899b      	ldrh	r3, [r3, #12]
 8007b30:	461a      	mov	r2, r3
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b38:	fb00 f202 	mul.w	r2, r0, r2
 8007b3c:	1a9b      	subs	r3, r3, r2
 8007b3e:	18ca      	adds	r2, r1, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b086      	sub	sp, #24
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
 8007b56:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	3320      	adds	r3, #32
 8007b64:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b6c:	d302      	bcc.n	8007b74 <dir_next+0x26>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d101      	bne.n	8007b80 <dir_next+0x32>
 8007b7c:	2304      	movs	r3, #4
 8007b7e:	e088      	b.n	8007c92 <dir_next+0x144>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	899b      	ldrh	r3, [r3, #12]
 8007b84:	461a      	mov	r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b8c:	fb01 f202 	mul.w	r2, r1, r2
 8007b90:	1a9b      	subs	r3, r3, r2
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d16a      	bne.n	8007c6c <dir_next+0x11e>
		dp->sect++;				/* Next sector */
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	1c5a      	adds	r2, r3, #1
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10a      	bne.n	8007bbe <dir_next+0x70>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	095b      	lsrs	r3, r3, #5
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	8912      	ldrh	r2, [r2, #8]
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d35b      	bcc.n	8007c6c <dir_next+0x11e>
				dp->sect = 0; return FR_NO_FILE;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	619a      	str	r2, [r3, #24]
 8007bba:	2304      	movs	r3, #4
 8007bbc:	e069      	b.n	8007c92 <dir_next+0x144>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	899b      	ldrh	r3, [r3, #12]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	8952      	ldrh	r2, [r2, #10]
 8007bce:	3a01      	subs	r2, #1
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d14a      	bne.n	8007c6c <dir_next+0x11e>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	4619      	mov	r1, r3
 8007bde:	4610      	mov	r0, r2
 8007be0:	f7ff fbc1 	bl	8007366 <get_fat>
 8007be4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d801      	bhi.n	8007bf0 <dir_next+0xa2>
 8007bec:	2302      	movs	r3, #2
 8007bee:	e050      	b.n	8007c92 <dir_next+0x144>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf6:	d101      	bne.n	8007bfc <dir_next+0xae>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e04a      	b.n	8007c92 <dir_next+0x144>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d328      	bcc.n	8007c58 <dir_next+0x10a>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d104      	bne.n	8007c16 <dir_next+0xc8>
						dp->sect = 0; return FR_NO_FILE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	619a      	str	r2, [r3, #24]
 8007c12:	2304      	movs	r3, #4
 8007c14:	e03d      	b.n	8007c92 <dir_next+0x144>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	695b      	ldr	r3, [r3, #20]
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4610      	mov	r0, r2
 8007c20:	f7ff fdf3 	bl	800780a <create_chain>
 8007c24:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d101      	bne.n	8007c30 <dir_next+0xe2>
 8007c2c:	2307      	movs	r3, #7
 8007c2e:	e030      	b.n	8007c92 <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d101      	bne.n	8007c3a <dir_next+0xec>
 8007c36:	2302      	movs	r3, #2
 8007c38:	e02b      	b.n	8007c92 <dir_next+0x144>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c40:	d101      	bne.n	8007c46 <dir_next+0xf8>
 8007c42:	2301      	movs	r3, #1
 8007c44:	e025      	b.n	8007c92 <dir_next+0x144>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8007c46:	6979      	ldr	r1, [r7, #20]
 8007c48:	6938      	ldr	r0, [r7, #16]
 8007c4a:	f7ff feaf 	bl	80079ac <dir_clear>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d001      	beq.n	8007c58 <dir_next+0x10a>
 8007c54:	2301      	movs	r3, #1
 8007c56:	e01c      	b.n	8007c92 <dir_next+0x144>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	697a      	ldr	r2, [r7, #20]
 8007c5c:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8007c5e:	6979      	ldr	r1, [r7, #20]
 8007c60:	6938      	ldr	r0, [r7, #16]
 8007c62:	f7ff fb61 	bl	8007328 <clst2sect>
 8007c66:	4602      	mov	r2, r0
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	899b      	ldrh	r3, [r3, #12]
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c84:	fb00 f202 	mul.w	r2, r0, r2
 8007c88:	1a9b      	subs	r3, r3, r2
 8007c8a:	18ca      	adds	r2, r1, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3718      	adds	r7, #24
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b086      	sub	sp, #24
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007caa:	2100      	movs	r1, #0
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f7ff fec5 	bl	8007a3c <dir_sdi>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007cb6:	7dfb      	ldrb	r3, [r7, #23]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d12b      	bne.n	8007d14 <dir_alloc+0x7a>
		n = 0;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f7ff fa93 	bl	80071f2 <move_window>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007cd0:	7dfb      	ldrb	r3, [r7, #23]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d11d      	bne.n	8007d12 <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	2be5      	cmp	r3, #229	@ 0xe5
 8007cde:	d004      	beq.n	8007cea <dir_alloc+0x50>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	69db      	ldr	r3, [r3, #28]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d107      	bne.n	8007cfa <dir_alloc+0x60>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	3301      	adds	r3, #1
 8007cee:	613b      	str	r3, [r7, #16]
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d102      	bne.n	8007cfe <dir_alloc+0x64>
 8007cf8:	e00c      	b.n	8007d14 <dir_alloc+0x7a>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8007cfe:	2101      	movs	r1, #1
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7ff ff24 	bl	8007b4e <dir_next>
 8007d06:	4603      	mov	r3, r0
 8007d08:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8007d0a:	7dfb      	ldrb	r3, [r7, #23]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d0d7      	beq.n	8007cc0 <dir_alloc+0x26>
 8007d10:	e000      	b.n	8007d14 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007d12:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007d14:	7dfb      	ldrb	r3, [r7, #23]
 8007d16:	2b04      	cmp	r3, #4
 8007d18:	d101      	bne.n	8007d1e <dir_alloc+0x84>
 8007d1a:	2307      	movs	r3, #7
 8007d1c:	75fb      	strb	r3, [r7, #23]
	return res;
 8007d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3718      	adds	r7, #24
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	331a      	adds	r3, #26
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7ff f97a 	bl	8007030 <ld_word>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	2b03      	cmp	r3, #3
 8007d46:	d109      	bne.n	8007d5c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	3314      	adds	r3, #20
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7ff f96f 	bl	8007030 <ld_word>
 8007d52:	4603      	mov	r3, r0
 8007d54:	041b      	lsls	r3, r3, #16
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	60f8      	str	r0, [r7, #12]
 8007d6e:	60b9      	str	r1, [r7, #8]
 8007d70:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	331a      	adds	r3, #26
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	b292      	uxth	r2, r2
 8007d7a:	4611      	mov	r1, r2
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7ff f993 	bl	80070a8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	2b03      	cmp	r3, #3
 8007d88:	d109      	bne.n	8007d9e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	f103 0214 	add.w	r2, r3, #20
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	0c1b      	lsrs	r3, r3, #16
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	4619      	mov	r1, r3
 8007d98:	4610      	mov	r0, r2
 8007d9a:	f7ff f985 	bl	80070a8 <st_word>
	}
}
 8007d9e:	bf00      	nop
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b086      	sub	sp, #24
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007db4:	2100      	movs	r1, #0
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f7ff fe40 	bl	8007a3c <dir_sdi>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007dc0:	7dfb      	ldrb	r3, [r7, #23]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <dir_find+0x24>
 8007dc6:	7dfb      	ldrb	r3, [r7, #23]
 8007dc8:	e03e      	b.n	8007e48 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6938      	ldr	r0, [r7, #16]
 8007dd2:	f7ff fa0e 	bl	80071f2 <move_window>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007dda:	7dfb      	ldrb	r3, [r7, #23]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d12f      	bne.n	8007e40 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	69db      	ldr	r3, [r3, #28]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007de8:	7bfb      	ldrb	r3, [r7, #15]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d102      	bne.n	8007df4 <dir_find+0x4e>
 8007dee:	2304      	movs	r3, #4
 8007df0:	75fb      	strb	r3, [r7, #23]
 8007df2:	e028      	b.n	8007e46 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	69db      	ldr	r3, [r3, #28]
 8007df8:	330b      	adds	r3, #11
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e00:	b2da      	uxtb	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	69db      	ldr	r3, [r3, #28]
 8007e0a:	330b      	adds	r3, #11
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	f003 0308 	and.w	r3, r3, #8
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10a      	bne.n	8007e2c <dir_find+0x86>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	69d8      	ldr	r0, [r3, #28]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	3320      	adds	r3, #32
 8007e1e:	220b      	movs	r2, #11
 8007e20:	4619      	mov	r1, r3
 8007e22:	f00d f961 	bl	80150e8 <memcmp>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00b      	beq.n	8007e44 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7ff fe8d 	bl	8007b4e <dir_next>
 8007e34:	4603      	mov	r3, r0
 8007e36:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007e38:	7dfb      	ldrb	r3, [r7, #23]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d0c5      	beq.n	8007dca <dir_find+0x24>
 8007e3e:	e002      	b.n	8007e46 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007e40:	bf00      	nop
 8007e42:	e000      	b.n	8007e46 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007e44:	bf00      	nop

	return res;
 8007e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3718      	adds	r7, #24
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --n_ent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007e5e:	2101      	movs	r1, #1
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f7ff ff1a 	bl	8007c9a <dir_alloc>
 8007e66:	4603      	mov	r3, r0
 8007e68:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d11c      	bne.n	8007eaa <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	4619      	mov	r1, r3
 8007e76:	68b8      	ldr	r0, [r7, #8]
 8007e78:	f7ff f9bb 	bl	80071f2 <move_window>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d111      	bne.n	8007eaa <dir_register+0x5a>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	69db      	ldr	r3, [r3, #28]
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f00d f93a 	bl	8015108 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	69d8      	ldr	r0, [r3, #28]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	3320      	adds	r3, #32
 8007e9c:	220b      	movs	r2, #11
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	f00d f9b6 	bl	8015210 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8007eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b08a      	sub	sp, #40	@ 0x28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
	BYTE *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	617b      	str	r3, [r7, #20]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	3320      	adds	r3, #32
 8007ec8:	613b      	str	r3, [r7, #16]
	memset(sfn, ' ', 11);
 8007eca:	220b      	movs	r2, #11
 8007ecc:	2120      	movs	r1, #32
 8007ece:	6938      	ldr	r0, [r7, #16]
 8007ed0:	f00d f91a 	bl	8015108 <memset>
	si = i = 0; ni = 8;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	61bb      	str	r3, [r7, #24]
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	61fb      	str	r3, [r7, #28]
 8007edc:	2308      	movs	r3, #8
 8007ede:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	1c5a      	adds	r2, r3, #1
 8007ee4:	61fa      	str	r2, [r7, #28]
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	4413      	add	r3, r2
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ef4:	2b20      	cmp	r3, #32
 8007ef6:	f240 8089 	bls.w	800800c <create_name+0x158>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 8007efa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007efe:	2b2f      	cmp	r3, #47	@ 0x2f
 8007f00:	d007      	beq.n	8007f12 <create_name+0x5e>
 8007f02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f06:	2b5c      	cmp	r3, #92	@ 0x5c
 8007f08:	d110      	bne.n	8007f2c <create_name+0x78>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 8007f0a:	e002      	b.n	8007f12 <create_name+0x5e>
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	61fb      	str	r3, [r7, #28]
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	4413      	add	r3, r2
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	2b2f      	cmp	r3, #47	@ 0x2f
 8007f1c:	d0f6      	beq.n	8007f0c <create_name+0x58>
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	4413      	add	r3, r2
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	2b5c      	cmp	r3, #92	@ 0x5c
 8007f28:	d0f0      	beq.n	8007f0c <create_name+0x58>
			break;
 8007f2a:	e070      	b.n	800800e <create_name+0x15a>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8007f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f30:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f32:	d003      	beq.n	8007f3c <create_name+0x88>
 8007f34:	69ba      	ldr	r2, [r7, #24]
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d30d      	bcc.n	8007f58 <create_name+0xa4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8007f3c:	6a3b      	ldr	r3, [r7, #32]
 8007f3e:	2b0b      	cmp	r3, #11
 8007f40:	d003      	beq.n	8007f4a <create_name+0x96>
 8007f42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f46:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f48:	d001      	beq.n	8007f4e <create_name+0x9a>
 8007f4a:	2306      	movs	r3, #6
 8007f4c:	e081      	b.n	8008052 <create_name+0x19e>
			i = 8; ni = 11;				/* Enter file extension field */
 8007f4e:	2308      	movs	r3, #8
 8007f50:	61bb      	str	r3, [r7, #24]
 8007f52:	230b      	movs	r3, #11
 8007f54:	623b      	str	r3, [r7, #32]
			continue;
 8007f56:	e058      	b.n	800800a <create_name+0x156>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
 8007f58:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	da07      	bge.n	8007f70 <create_name+0xbc>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 8007f60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f68:	4a3c      	ldr	r2, [pc, #240]	@ (800805c <create_name+0x1a8>)
 8007f6a:	5cd3      	ldrb	r3, [r2, r3]
 8007f6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 8007f70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7ff f8de 	bl	8007136 <dbc_1st>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d024      	beq.n	8007fca <create_name+0x116>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	1c5a      	adds	r2, r3, #1
 8007f84:	61fa      	str	r2, [r7, #28]
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	4413      	add	r3, r2
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7ff f8e1 	bl	8007158 <dbc_2nd>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d004      	beq.n	8007fa6 <create_name+0xf2>
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	69ba      	ldr	r2, [r7, #24]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d301      	bcc.n	8007faa <create_name+0xf6>
 8007fa6:	2306      	movs	r3, #6
 8007fa8:	e053      	b.n	8008052 <create_name+0x19e>
			sfn[i++] = c;
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	1c5a      	adds	r2, r3, #1
 8007fae:	61ba      	str	r2, [r7, #24]
 8007fb0:	693a      	ldr	r2, [r7, #16]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007fb8:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	1c5a      	adds	r2, r3, #1
 8007fbe:	61ba      	str	r2, [r7, #24]
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	7bfa      	ldrb	r2, [r7, #15]
 8007fc6:	701a      	strb	r2, [r3, #0]
 8007fc8:	e78a      	b.n	8007ee0 <create_name+0x2c>
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007fca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fce:	4619      	mov	r1, r3
 8007fd0:	4823      	ldr	r0, [pc, #140]	@ (8008060 <create_name+0x1ac>)
 8007fd2:	f00d f8a1 	bl	8015118 <strchr>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d001      	beq.n	8007fe0 <create_name+0x12c>
 8007fdc:	2306      	movs	r3, #6
 8007fde:	e038      	b.n	8008052 <create_name+0x19e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fe4:	2b60      	cmp	r3, #96	@ 0x60
 8007fe6:	d908      	bls.n	8007ffa <create_name+0x146>
 8007fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fec:	2b7a      	cmp	r3, #122	@ 0x7a
 8007fee:	d804      	bhi.n	8007ffa <create_name+0x146>
 8007ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ff4:	3b20      	subs	r3, #32
 8007ff6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			sfn[i++] = c;
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	1c5a      	adds	r2, r3, #1
 8007ffe:	61ba      	str	r2, [r7, #24]
 8008000:	693a      	ldr	r2, [r7, #16]
 8008002:	4413      	add	r3, r2
 8008004:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008008:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 800800a:	e769      	b.n	8007ee0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800800c:	bf00      	nop
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	441a      	add	r2, r3
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d101      	bne.n	8008022 <create_name+0x16e>
 800801e:	2306      	movs	r3, #6
 8008020:	e017      	b.n	8008052 <create_name+0x19e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	2be5      	cmp	r3, #229	@ 0xe5
 8008028:	d102      	bne.n	8008030 <create_name+0x17c>
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	2205      	movs	r2, #5
 800802e:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 8008030:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008034:	2b20      	cmp	r3, #32
 8008036:	d905      	bls.n	8008044 <create_name+0x190>
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	4413      	add	r3, r2
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	2b20      	cmp	r3, #32
 8008042:	d801      	bhi.n	8008048 <create_name+0x194>
 8008044:	2204      	movs	r2, #4
 8008046:	e000      	b.n	800804a <create_name+0x196>
 8008048:	2200      	movs	r2, #0
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	330b      	adds	r3, #11
 800804e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008050:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 8008052:	4618      	mov	r0, r3
 8008054:	3728      	adds	r7, #40	@ 0x28
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	08016848 	.word	0x08016848
 8008060:	080167a4 	.word	0x080167a4

08008064 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 8008074:	e002      	b.n	800807c <follow_path+0x18>
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	3301      	adds	r3, #1
 800807a:	603b      	str	r3, [r7, #0]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	2b2f      	cmp	r3, #47	@ 0x2f
 8008082:	d0f8      	beq.n	8008076 <follow_path+0x12>
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	2b5c      	cmp	r3, #92	@ 0x5c
 800808a:	d0f4      	beq.n	8008076 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	2b1f      	cmp	r3, #31
 8008098:	d80a      	bhi.n	80080b0 <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2280      	movs	r2, #128	@ 0x80
 800809e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 80080a2:	2100      	movs	r1, #0
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7ff fcc9 	bl	8007a3c <dir_sdi>
 80080aa:	4603      	mov	r3, r0
 80080ac:	75fb      	strb	r3, [r7, #23]
 80080ae:	e048      	b.n	8008142 <follow_path+0xde>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80080b0:	463b      	mov	r3, r7
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f7ff fefd 	bl	8007eb4 <create_name>
 80080ba:	4603      	mov	r3, r0
 80080bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80080be:	7dfb      	ldrb	r3, [r7, #23]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d139      	bne.n	8008138 <follow_path+0xd4>
			res = dir_find(dp);				/* Find an object with the segment name */
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7ff fe6e 	bl	8007da6 <dir_find>
 80080ca:	4603      	mov	r3, r0
 80080cc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80080d4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 80080d6:	7dfb      	ldrb	r3, [r7, #23]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00a      	beq.n	80080f2 <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80080dc:	7dfb      	ldrb	r3, [r7, #23]
 80080de:	2b04      	cmp	r3, #4
 80080e0:	d12c      	bne.n	800813c <follow_path+0xd8>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
 80080e4:	f003 0304 	and.w	r3, r3, #4
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d127      	bne.n	800813c <follow_path+0xd8>
 80080ec:	2305      	movs	r3, #5
 80080ee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80080f0:	e024      	b.n	800813c <follow_path+0xd8>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
 80080f4:	f003 0304 	and.w	r3, r3, #4
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d121      	bne.n	8008140 <follow_path+0xdc>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	799b      	ldrb	r3, [r3, #6]
 8008100:	f003 0310 	and.w	r3, r3, #16
 8008104:	2b00      	cmp	r3, #0
 8008106:	d102      	bne.n	800810e <follow_path+0xaa>
				res = FR_NO_PATH; break;
 8008108:	2305      	movs	r3, #5
 800810a:	75fb      	strb	r3, [r7, #23]
 800810c:	e019      	b.n	8008142 <follow_path+0xde>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	693a      	ldr	r2, [r7, #16]
 800811a:	8992      	ldrh	r2, [r2, #12]
 800811c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008120:	fb00 f202 	mul.w	r2, r0, r2
 8008124:	1a9b      	subs	r3, r3, r2
 8008126:	440b      	add	r3, r1
 8008128:	4619      	mov	r1, r3
 800812a:	6938      	ldr	r0, [r7, #16]
 800812c:	f7ff fdfc 	bl	8007d28 <ld_clust>
 8008130:	4602      	mov	r2, r0
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008136:	e7bb      	b.n	80080b0 <follow_path+0x4c>
			if (res != FR_OK) break;
 8008138:	bf00      	nop
 800813a:	e002      	b.n	8008142 <follow_path+0xde>
				break;
 800813c:	bf00      	nop
 800813e:	e000      	b.n	8008142 <follow_path+0xde>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8008140:	bf00      	nop
			}
		}
	}

	return res;
 8008142:	7dfb      	ldrb	r3, [r7, #23]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3718      	adds	r7, #24
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 800814c:	b480      	push	{r7}
 800814e:	b08b      	sub	sp, #44	@ 0x2c
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 8008154:	f04f 33ff 	mov.w	r3, #4294967295
 8008158:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008162:	623b      	str	r3, [r7, #32]
	if (!tp) return vol;	/* Invalid path name? */
 8008164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <get_ldnumber+0x22>
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	e080      	b.n	8008270 <get_ldnumber+0x124>
	do {					/* Find a colon in the path */
		tc = *tt++;
 800816e:	6a3b      	ldr	r3, [r7, #32]
 8008170:	1c5a      	adds	r2, r3, #1
 8008172:	623a      	str	r2, [r7, #32]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	77fb      	strb	r3, [r7, #31]
	} while (!IsTerminator(tc) && tc != ':');
 8008178:	7ffb      	ldrb	r3, [r7, #31]
 800817a:	2b20      	cmp	r3, #32
 800817c:	d902      	bls.n	8008184 <get_ldnumber+0x38>
 800817e:	7ffb      	ldrb	r3, [r7, #31]
 8008180:	2b3a      	cmp	r3, #58	@ 0x3a
 8008182:	d1f4      	bne.n	800816e <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8008184:	7ffb      	ldrb	r3, [r7, #31]
 8008186:	2b3a      	cmp	r3, #58	@ 0x3a
 8008188:	d11c      	bne.n	80081c4 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 800818a:	2302      	movs	r3, #2
 800818c:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800818e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	2b2f      	cmp	r3, #47	@ 0x2f
 8008194:	d90c      	bls.n	80081b0 <get_ldnumber+0x64>
 8008196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	2b39      	cmp	r3, #57	@ 0x39
 800819c:	d808      	bhi.n	80081b0 <get_ldnumber+0x64>
 800819e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a0:	3302      	adds	r3, #2
 80081a2:	6a3a      	ldr	r2, [r7, #32]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d103      	bne.n	80081b0 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 80081a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	3b30      	subs	r3, #48	@ 0x30
 80081ae:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	dc04      	bgt.n	80081c0 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a3a      	ldr	r2, [r7, #32]
 80081be:	601a      	str	r2, [r3, #0]
		}
		return vol;
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	e055      	b.n	8008270 <get_ldnumber+0x124>
	}
#if FF_STR_VOLUME_ID == 2		/* Unix style volume ID is enabled */
	if (*tp == '/') {			/* Is there a volume ID? */
 80081c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	2b2f      	cmp	r3, #47	@ 0x2f
 80081ca:	d14e      	bne.n	800826a <get_ldnumber+0x11e>
		while (*(tp + 1) == '/') tp++;	/* Skip duplicated separator */
 80081cc:	e002      	b.n	80081d4 <get_ldnumber+0x88>
 80081ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d0:	3301      	adds	r3, #1
 80081d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80081d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d6:	3301      	adds	r3, #1
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	2b2f      	cmp	r3, #47	@ 0x2f
 80081dc:	d0f7      	beq.n	80081ce <get_ldnumber+0x82>
		i = 0;
 80081de:	2300      	movs	r3, #0
 80081e0:	61bb      	str	r3, [r7, #24]
		do {
			tt = tp; sp = VolumeStr[i]; /* Path name and this string volume ID */
 80081e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e4:	623b      	str	r3, [r7, #32]
 80081e6:	4a25      	ldr	r2, [pc, #148]	@ (800827c <get_ldnumber+0x130>)
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081ee:	613b      	str	r3, [r7, #16]
			do {	/* Compare the volume ID with path name */
				c = *sp++; tc = *(++tt);
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	1c5a      	adds	r2, r3, #1
 80081f4:	613a      	str	r2, [r7, #16]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	73fb      	strb	r3, [r7, #15]
 80081fa:	6a3b      	ldr	r3, [r7, #32]
 80081fc:	3301      	adds	r3, #1
 80081fe:	623b      	str	r3, [r7, #32]
 8008200:	6a3b      	ldr	r3, [r7, #32]
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	77fb      	strb	r3, [r7, #31]
				if (IsLower(c)) c -= 0x20;
 8008206:	7bfb      	ldrb	r3, [r7, #15]
 8008208:	2b60      	cmp	r3, #96	@ 0x60
 800820a:	d905      	bls.n	8008218 <get_ldnumber+0xcc>
 800820c:	7bfb      	ldrb	r3, [r7, #15]
 800820e:	2b7a      	cmp	r3, #122	@ 0x7a
 8008210:	d802      	bhi.n	8008218 <get_ldnumber+0xcc>
 8008212:	7bfb      	ldrb	r3, [r7, #15]
 8008214:	3b20      	subs	r3, #32
 8008216:	73fb      	strb	r3, [r7, #15]
				if (IsLower(tc)) tc -= 0x20;
 8008218:	7ffb      	ldrb	r3, [r7, #31]
 800821a:	2b60      	cmp	r3, #96	@ 0x60
 800821c:	d905      	bls.n	800822a <get_ldnumber+0xde>
 800821e:	7ffb      	ldrb	r3, [r7, #31]
 8008220:	2b7a      	cmp	r3, #122	@ 0x7a
 8008222:	d802      	bhi.n	800822a <get_ldnumber+0xde>
 8008224:	7ffb      	ldrb	r3, [r7, #31]
 8008226:	3b20      	subs	r3, #32
 8008228:	77fb      	strb	r3, [r7, #31]
			} while (c && (TCHAR)c == tc);
 800822a:	7bfb      	ldrb	r3, [r7, #15]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d003      	beq.n	8008238 <get_ldnumber+0xec>
 8008230:	7bfa      	ldrb	r2, [r7, #15]
 8008232:	7ffb      	ldrb	r3, [r7, #31]
 8008234:	429a      	cmp	r2, r3
 8008236:	d0db      	beq.n	80081f0 <get_ldnumber+0xa4>
		} while ((c || (tc != '/' && !IsTerminator(tc))) && ++i < FF_VOLUMES);	/* Repeat for each ID until pattern match */
 8008238:	7bfb      	ldrb	r3, [r7, #15]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d105      	bne.n	800824a <get_ldnumber+0xfe>
 800823e:	7ffb      	ldrb	r3, [r7, #31]
 8008240:	2b2f      	cmp	r3, #47	@ 0x2f
 8008242:	d008      	beq.n	8008256 <get_ldnumber+0x10a>
 8008244:	7ffb      	ldrb	r3, [r7, #31]
 8008246:	2b20      	cmp	r3, #32
 8008248:	d905      	bls.n	8008256 <get_ldnumber+0x10a>
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	3301      	adds	r3, #1
 800824e:	61bb      	str	r3, [r7, #24]
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	2b01      	cmp	r3, #1
 8008254:	ddc5      	ble.n	80081e2 <get_ldnumber+0x96>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	2b01      	cmp	r3, #1
 800825a:	dc04      	bgt.n	8008266 <get_ldnumber+0x11a>
			vol = i;		/* Drive number */
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a3a      	ldr	r2, [r7, #32]
 8008264:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	e002      	b.n	8008270 <get_ldnumber+0x124>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 800826a:	2300      	movs	r3, #0
 800826c:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 800826e:	697b      	ldr	r3, [r7, #20]
}
 8008270:	4618      	mov	r0, r3
 8008272:	372c      	adds	r7, #44	@ 0x2c
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	2000016c 	.word	0x2000016c

08008280 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	711a      	strb	r2, [r3, #4]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f04f 32ff 	mov.w	r2, #4294967295
 8008296:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f7fe ffa9 	bl	80071f2 <move_window>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <check_fs+0x2a>
 80082a6:	2304      	movs	r3, #4
 80082a8:	e088      	b.n	80083bc <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	3334      	adds	r3, #52	@ 0x34
 80082ae:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7fe febc 	bl	8007030 <ld_word>
 80082b8:	4603      	mov	r3, r0
 80082ba:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80082c2:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 80082c4:	7b7b      	ldrb	r3, [r7, #13]
 80082c6:	2beb      	cmp	r3, #235	@ 0xeb
 80082c8:	d005      	beq.n	80082d6 <check_fs+0x56>
 80082ca:	7b7b      	ldrb	r3, [r7, #13]
 80082cc:	2be9      	cmp	r3, #233	@ 0xe9
 80082ce:	d002      	beq.n	80082d6 <check_fs+0x56>
 80082d0:	7b7b      	ldrb	r3, [r7, #13]
 80082d2:	2be8      	cmp	r3, #232	@ 0xe8
 80082d4:	d16a      	bne.n	80083ac <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 80082d6:	89fb      	ldrh	r3, [r7, #14]
 80082d8:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80082dc:	4293      	cmp	r3, r2
 80082de:	d10c      	bne.n	80082fa <check_fs+0x7a>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	3334      	adds	r3, #52	@ 0x34
 80082e4:	3352      	adds	r3, #82	@ 0x52
 80082e6:	2208      	movs	r2, #8
 80082e8:	4936      	ldr	r1, [pc, #216]	@ (80083c4 <check_fs+0x144>)
 80082ea:	4618      	mov	r0, r3
 80082ec:	f00c fefc 	bl	80150e8 <memcmp>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d101      	bne.n	80082fa <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 80082f6:	2300      	movs	r3, #0
 80082f8:	e060      	b.n	80083bc <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	3334      	adds	r3, #52	@ 0x34
 80082fe:	330b      	adds	r3, #11
 8008300:	4618      	mov	r0, r3
 8008302:	f7fe fe95 	bl	8007030 <ld_word>
 8008306:	4603      	mov	r3, r0
 8008308:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008310:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 8008312:	897a      	ldrh	r2, [r7, #10]
 8008314:	897b      	ldrh	r3, [r7, #10]
 8008316:	3b01      	subs	r3, #1
 8008318:	4013      	ands	r3, r2
 800831a:	2b00      	cmp	r3, #0
 800831c:	d146      	bne.n	80083ac <check_fs+0x12c>
 800831e:	897b      	ldrh	r3, [r7, #10]
 8008320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008324:	d342      	bcc.n	80083ac <check_fs+0x12c>
 8008326:	897b      	ldrh	r3, [r7, #10]
 8008328:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800832c:	d83e      	bhi.n	80083ac <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800832e:	7b7b      	ldrb	r3, [r7, #13]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d03b      	beq.n	80083ac <check_fs+0x12c>
 8008334:	7b7a      	ldrb	r2, [r7, #13]
 8008336:	7b7b      	ldrb	r3, [r7, #13]
 8008338:	3b01      	subs	r3, #1
 800833a:	4013      	ands	r3, r2
 800833c:	2b00      	cmp	r3, #0
 800833e:	d135      	bne.n	80083ac <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	3334      	adds	r3, #52	@ 0x34
 8008344:	330e      	adds	r3, #14
 8008346:	4618      	mov	r0, r3
 8008348:	f7fe fe72 	bl	8007030 <ld_word>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d02c      	beq.n	80083ac <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008358:	3b01      	subs	r3, #1
 800835a:	2b01      	cmp	r3, #1
 800835c:	d826      	bhi.n	80083ac <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	3334      	adds	r3, #52	@ 0x34
 8008362:	3311      	adds	r3, #17
 8008364:	4618      	mov	r0, r3
 8008366:	f7fe fe63 	bl	8007030 <ld_word>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d01d      	beq.n	80083ac <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	3334      	adds	r3, #52	@ 0x34
 8008374:	3313      	adds	r3, #19
 8008376:	4618      	mov	r0, r3
 8008378:	f7fe fe5a 	bl	8007030 <ld_word>
 800837c:	4603      	mov	r3, r0
 800837e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008380:	d809      	bhi.n	8008396 <check_fs+0x116>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	3334      	adds	r3, #52	@ 0x34
 8008386:	3320      	adds	r3, #32
 8008388:	4618      	mov	r0, r3
 800838a:	f7fe fe6a 	bl	8007062 <ld_dword>
 800838e:	4603      	mov	r3, r0
 8008390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008394:	d30a      	bcc.n	80083ac <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	3334      	adds	r3, #52	@ 0x34
 800839a:	3316      	adds	r3, #22
 800839c:	4618      	mov	r0, r3
 800839e:	f7fe fe47 	bl	8007030 <ld_word>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d001      	beq.n	80083ac <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 80083a8:	2300      	movs	r3, #0
 80083aa:	e007      	b.n	80083bc <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 80083ac:	89fb      	ldrh	r3, [r7, #14]
 80083ae:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d101      	bne.n	80083ba <check_fs+0x13a>
 80083b6:	2302      	movs	r3, #2
 80083b8:	e000      	b.n	80083bc <check_fs+0x13c>
 80083ba:	2303      	movs	r3, #3
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	080167b4 	.word	0x080167b4

080083c8 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b088      	sub	sp, #32
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 80083d2:	2100      	movs	r1, #0
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f7ff ff53 	bl	8008280 <check_fs>
 80083da:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d007      	beq.n	80083f2 <find_volume+0x2a>
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d802      	bhi.n	80083ee <find_volume+0x26>
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d101      	bne.n	80083f2 <find_volume+0x2a>
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	e045      	b.n	800847e <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 80083f2:	2300      	movs	r3, #0
 80083f4:	61fb      	str	r3, [r7, #28]
 80083f6:	e014      	b.n	8008422 <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	011b      	lsls	r3, r3, #4
 8008402:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 8008406:	4413      	add	r3, r2
 8008408:	4618      	mov	r0, r3
 800840a:	f7fe fe2a 	bl	8007062 <ld_dword>
 800840e:	4602      	mov	r2, r0
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	3320      	adds	r3, #32
 8008416:	443b      	add	r3, r7
 8008418:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	3301      	adds	r3, #1
 8008420:	61fb      	str	r3, [r7, #28]
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	2b03      	cmp	r3, #3
 8008426:	d9e7      	bls.n	80083f8 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d002      	beq.n	8008434 <find_volume+0x6c>
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	3b01      	subs	r3, #1
 8008432:	e000      	b.n	8008436 <find_volume+0x6e>
 8008434:	2300      	movs	r3, #0
 8008436:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	3320      	adds	r3, #32
 800843e:	443b      	add	r3, r7
 8008440:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00b      	beq.n	8008460 <find_volume+0x98>
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	3320      	adds	r3, #32
 800844e:	443b      	add	r3, r7
 8008450:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8008454:	4619      	mov	r1, r3
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7ff ff12 	bl	8008280 <check_fs>
 800845c:	4603      	mov	r3, r0
 800845e:	e000      	b.n	8008462 <find_volume+0x9a>
 8008460:	2303      	movs	r3, #3
 8008462:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d108      	bne.n	800847c <find_volume+0xb4>
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d905      	bls.n	800847c <find_volume+0xb4>
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	3301      	adds	r3, #1
 8008474:	61fb      	str	r3, [r7, #28]
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	2b03      	cmp	r3, #3
 800847a:	d9dd      	bls.n	8008438 <find_volume+0x70>
	return fmt;
 800847c:	69bb      	ldr	r3, [r7, #24]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3720      	adds	r7, #32
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
	...

08008488 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b090      	sub	sp, #64	@ 0x40
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	4613      	mov	r3, r2
 8008494:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	2200      	movs	r2, #0
 800849a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f7ff fe55 	bl	800814c <get_ldnumber>
 80084a2:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 80084a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	da01      	bge.n	80084ae <mount_volume+0x26>
 80084aa:	230b      	movs	r3, #11
 80084ac:	e207      	b.n	80088be <mount_volume+0x436>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 80084ae:	4aa2      	ldr	r2, [pc, #648]	@ (8008738 <mount_volume+0x2b0>)
 80084b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 80084b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d101      	bne.n	80084c2 <mount_volume+0x3a>
 80084be:	230c      	movs	r3, #12
 80084c0:	e1fd      	b.n	80088be <mount_volume+0x436>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80084c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80084c8:	79fb      	ldrb	r3, [r7, #7]
 80084ca:	f023 0301 	bic.w	r3, r3, #1
 80084ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 80084d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d01a      	beq.n	800850e <mount_volume+0x86>
		stat = disk_status(fs->pdrv);
 80084d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084da:	785b      	ldrb	r3, [r3, #1]
 80084dc:	4618      	mov	r0, r3
 80084de:	f7fe fc6f 	bl	8006dc0 <disk_status>
 80084e2:	4603      	mov	r3, r0
 80084e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80084e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084ec:	f003 0301 	and.w	r3, r3, #1
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10c      	bne.n	800850e <mount_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80084f4:	79fb      	ldrb	r3, [r7, #7]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d007      	beq.n	800850a <mount_volume+0x82>
 80084fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084fe:	f003 0304 	and.w	r3, r3, #4
 8008502:	2b00      	cmp	r3, #0
 8008504:	d001      	beq.n	800850a <mount_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008506:	230a      	movs	r3, #10
 8008508:	e1d9      	b.n	80088be <mount_volume+0x436>
			}
			return FR_OK;				/* The filesystem object is already valid */
 800850a:	2300      	movs	r3, #0
 800850c:	e1d7      	b.n	80088be <mount_volume+0x436>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 800850e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008510:	2200      	movs	r2, #0
 8008512:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8008514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008516:	785b      	ldrb	r3, [r3, #1]
 8008518:	4618      	mov	r0, r3
 800851a:	f7fe fc79 	bl	8006e10 <disk_initialize>
 800851e:	4603      	mov	r3, r0
 8008520:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008524:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	2b00      	cmp	r3, #0
 800852e:	d001      	beq.n	8008534 <mount_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008530:	2303      	movs	r3, #3
 8008532:	e1c4      	b.n	80088be <mount_volume+0x436>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008534:	79fb      	ldrb	r3, [r7, #7]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d007      	beq.n	800854a <mount_volume+0xc2>
 800853a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800853e:	f003 0304 	and.w	r3, r3, #4
 8008542:	2b00      	cmp	r3, #0
 8008544:	d001      	beq.n	800854a <mount_volume+0xc2>
		return FR_WRITE_PROTECTED;
 8008546:	230a      	movs	r3, #10
 8008548:	e1b9      	b.n	80088be <mount_volume+0x436>
	}
#if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800854a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800854c:	7858      	ldrb	r0, [r3, #1]
 800854e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008550:	330c      	adds	r3, #12
 8008552:	461a      	mov	r2, r3
 8008554:	2102      	movs	r1, #2
 8008556:	f7fe fce9 	bl	8006f2c <disk_ioctl>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <mount_volume+0xdc>
 8008560:	2301      	movs	r3, #1
 8008562:	e1ac      	b.n	80088be <mount_volume+0x436>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008566:	899b      	ldrh	r3, [r3, #12]
 8008568:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800856c:	d80d      	bhi.n	800858a <mount_volume+0x102>
 800856e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008570:	899b      	ldrh	r3, [r3, #12]
 8008572:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008576:	d308      	bcc.n	800858a <mount_volume+0x102>
 8008578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800857a:	899b      	ldrh	r3, [r3, #12]
 800857c:	461a      	mov	r2, r3
 800857e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008580:	899b      	ldrh	r3, [r3, #12]
 8008582:	3b01      	subs	r3, #1
 8008584:	4013      	ands	r3, r2
 8008586:	2b00      	cmp	r3, #0
 8008588:	d001      	beq.n	800858e <mount_volume+0x106>
 800858a:	2301      	movs	r3, #1
 800858c:	e197      	b.n	80088be <mount_volume+0x436>
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 800858e:	2100      	movs	r1, #0
 8008590:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008592:	f7ff ff19 	bl	80083c8 <find_volume>
 8008596:	6338      	str	r0, [r7, #48]	@ 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 8008598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859a:	2b04      	cmp	r3, #4
 800859c:	d101      	bne.n	80085a2 <mount_volume+0x11a>
 800859e:	2301      	movs	r3, #1
 80085a0:	e18d      	b.n	80088be <mount_volume+0x436>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80085a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d901      	bls.n	80085ac <mount_volume+0x124>
 80085a8:	230d      	movs	r3, #13
 80085aa:	e188      	b.n	80088be <mount_volume+0x436>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 80085ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085b0:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80085b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b4:	3334      	adds	r3, #52	@ 0x34
 80085b6:	330b      	adds	r3, #11
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7fe fd39 	bl	8007030 <ld_word>
 80085be:	4603      	mov	r3, r0
 80085c0:	461a      	mov	r2, r3
 80085c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c4:	899b      	ldrh	r3, [r3, #12]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d001      	beq.n	80085ce <mount_volume+0x146>
 80085ca:	230d      	movs	r3, #13
 80085cc:	e177      	b.n	80088be <mount_volume+0x436>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80085ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d0:	3334      	adds	r3, #52	@ 0x34
 80085d2:	3316      	adds	r3, #22
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7fe fd2b 	bl	8007030 <ld_word>
 80085da:	4603      	mov	r3, r0
 80085dc:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80085de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d106      	bne.n	80085f2 <mount_volume+0x16a>
 80085e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e6:	3334      	adds	r3, #52	@ 0x34
 80085e8:	3324      	adds	r3, #36	@ 0x24
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fe fd39 	bl	8007062 <ld_dword>
 80085f0:	63b8      	str	r0, [r7, #56]	@ 0x38
		fs->fsize = fasize;
 80085f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80085f6:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80085f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085fa:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80085fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008600:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008604:	78db      	ldrb	r3, [r3, #3]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d005      	beq.n	8008616 <mount_volume+0x18e>
 800860a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800860c:	78db      	ldrb	r3, [r3, #3]
 800860e:	2b02      	cmp	r3, #2
 8008610:	d001      	beq.n	8008616 <mount_volume+0x18e>
 8008612:	230d      	movs	r3, #13
 8008614:	e153      	b.n	80088be <mount_volume+0x436>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008618:	78db      	ldrb	r3, [r3, #3]
 800861a:	461a      	mov	r2, r3
 800861c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800861e:	fb02 f303 	mul.w	r3, r2, r3
 8008622:	63bb      	str	r3, [r7, #56]	@ 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008626:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800862a:	461a      	mov	r2, r3
 800862c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800862e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008632:	895b      	ldrh	r3, [r3, #10]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d008      	beq.n	800864a <mount_volume+0x1c2>
 8008638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800863a:	895b      	ldrh	r3, [r3, #10]
 800863c:	461a      	mov	r2, r3
 800863e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008640:	895b      	ldrh	r3, [r3, #10]
 8008642:	3b01      	subs	r3, #1
 8008644:	4013      	ands	r3, r2
 8008646:	2b00      	cmp	r3, #0
 8008648:	d001      	beq.n	800864e <mount_volume+0x1c6>
 800864a:	230d      	movs	r3, #13
 800864c:	e137      	b.n	80088be <mount_volume+0x436>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800864e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008650:	3334      	adds	r3, #52	@ 0x34
 8008652:	3311      	adds	r3, #17
 8008654:	4618      	mov	r0, r3
 8008656:	f7fe fceb 	bl	8007030 <ld_word>
 800865a:	4603      	mov	r3, r0
 800865c:	461a      	mov	r2, r3
 800865e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008660:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008664:	891b      	ldrh	r3, [r3, #8]
 8008666:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008668:	8992      	ldrh	r2, [r2, #12]
 800866a:	0952      	lsrs	r2, r2, #5
 800866c:	b292      	uxth	r2, r2
 800866e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008672:	fb01 f202 	mul.w	r2, r1, r2
 8008676:	1a9b      	subs	r3, r3, r2
 8008678:	b29b      	uxth	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d001      	beq.n	8008682 <mount_volume+0x1fa>
 800867e:	230d      	movs	r3, #13
 8008680:	e11d      	b.n	80088be <mount_volume+0x436>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008684:	3334      	adds	r3, #52	@ 0x34
 8008686:	3313      	adds	r3, #19
 8008688:	4618      	mov	r0, r3
 800868a:	f7fe fcd1 	bl	8007030 <ld_word>
 800868e:	4603      	mov	r3, r0
 8008690:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008694:	2b00      	cmp	r3, #0
 8008696:	d106      	bne.n	80086a6 <mount_volume+0x21e>
 8008698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800869a:	3334      	adds	r3, #52	@ 0x34
 800869c:	3320      	adds	r3, #32
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fe fcdf 	bl	8007062 <ld_dword>
 80086a4:	63f8      	str	r0, [r7, #60]	@ 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80086a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a8:	3334      	adds	r3, #52	@ 0x34
 80086aa:	330e      	adds	r3, #14
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7fe fcbf 	bl	8007030 <ld_word>
 80086b2:	4603      	mov	r3, r0
 80086b4:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80086b6:	8bfb      	ldrh	r3, [r7, #30]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d101      	bne.n	80086c0 <mount_volume+0x238>
 80086bc:	230d      	movs	r3, #13
 80086be:	e0fe      	b.n	80088be <mount_volume+0x436>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80086c0:	8bfa      	ldrh	r2, [r7, #30]
 80086c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c4:	4413      	add	r3, r2
 80086c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086c8:	8911      	ldrh	r1, [r2, #8]
 80086ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086cc:	8992      	ldrh	r2, [r2, #12]
 80086ce:	0952      	lsrs	r2, r2, #5
 80086d0:	b292      	uxth	r2, r2
 80086d2:	fbb1 f2f2 	udiv	r2, r1, r2
 80086d6:	b292      	uxth	r2, r2
 80086d8:	4413      	add	r3, r2
 80086da:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80086dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d201      	bcs.n	80086e8 <mount_volume+0x260>
 80086e4:	230d      	movs	r3, #13
 80086e6:	e0ea      	b.n	80088be <mount_volume+0x436>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80086e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086f0:	8952      	ldrh	r2, [r2, #10]
 80086f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80086f6:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d101      	bne.n	8008702 <mount_volume+0x27a>
 80086fe:	230d      	movs	r3, #13
 8008700:	e0dd      	b.n	80088be <mount_volume+0x436>
		fmt = 0;
 8008702:	2300      	movs	r3, #0
 8008704:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	4a0c      	ldr	r2, [pc, #48]	@ (800873c <mount_volume+0x2b4>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d801      	bhi.n	8008712 <mount_volume+0x28a>
 800870e:	2303      	movs	r3, #3
 8008710:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008718:	4293      	cmp	r3, r2
 800871a:	d801      	bhi.n	8008720 <mount_volume+0x298>
 800871c:	2302      	movs	r3, #2
 800871e:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008726:	4293      	cmp	r3, r2
 8008728:	d801      	bhi.n	800872e <mount_volume+0x2a6>
 800872a:	2301      	movs	r3, #1
 800872c:	633b      	str	r3, [r7, #48]	@ 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 800872e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008730:	2b00      	cmp	r3, #0
 8008732:	d105      	bne.n	8008740 <mount_volume+0x2b8>
 8008734:	230d      	movs	r3, #13
 8008736:	e0c2      	b.n	80088be <mount_volume+0x436>
 8008738:	20005ac0 	.word	0x20005ac0
 800873c:	0ffffff5 	.word	0x0ffffff5

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	1c9a      	adds	r2, r3, #2
 8008744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008746:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800874a:	6a3a      	ldr	r2, [r7, #32]
 800874c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800874e:	8bfa      	ldrh	r2, [r7, #30]
 8008750:	6a3b      	ldr	r3, [r7, #32]
 8008752:	441a      	add	r2, r3
 8008754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008756:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008758:	6a3a      	ldr	r2, [r7, #32]
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	441a      	add	r2, r3
 800875e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008760:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8008762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008764:	2b03      	cmp	r3, #3
 8008766:	d11e      	bne.n	80087a6 <mount_volume+0x31e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876a:	3334      	adds	r3, #52	@ 0x34
 800876c:	332a      	adds	r3, #42	@ 0x2a
 800876e:	4618      	mov	r0, r3
 8008770:	f7fe fc5e 	bl	8007030 <ld_word>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d001      	beq.n	800877e <mount_volume+0x2f6>
 800877a:	230d      	movs	r3, #13
 800877c:	e09f      	b.n	80088be <mount_volume+0x436>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800877e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008780:	891b      	ldrh	r3, [r3, #8]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d001      	beq.n	800878a <mount_volume+0x302>
 8008786:	230d      	movs	r3, #13
 8008788:	e099      	b.n	80088be <mount_volume+0x436>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800878a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800878c:	3334      	adds	r3, #52	@ 0x34
 800878e:	332c      	adds	r3, #44	@ 0x2c
 8008790:	4618      	mov	r0, r3
 8008792:	f7fe fc66 	bl	8007062 <ld_dword>
 8008796:	4602      	mov	r2, r0
 8008798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800879a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800879c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80087a4:	e01e      	b.n	80087e4 <mount_volume+0x35c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80087a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a8:	891b      	ldrh	r3, [r3, #8]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d101      	bne.n	80087b2 <mount_volume+0x32a>
 80087ae:	230d      	movs	r3, #13
 80087b0:	e085      	b.n	80088be <mount_volume+0x436>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80087b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b8:	441a      	add	r2, r3
 80087ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087bc:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80087be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d103      	bne.n	80087cc <mount_volume+0x344>
 80087c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	005b      	lsls	r3, r3, #1
 80087ca:	e00a      	b.n	80087e2 <mount_volume+0x35a>
 80087cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ce:	699a      	ldr	r2, [r3, #24]
 80087d0:	4613      	mov	r3, r2
 80087d2:	005b      	lsls	r3, r3, #1
 80087d4:	4413      	add	r3, r2
 80087d6:	085a      	lsrs	r2, r3, #1
 80087d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087da:	699b      	ldr	r3, [r3, #24]
 80087dc:	f003 0301 	and.w	r3, r3, #1
 80087e0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80087e2:	637b      	str	r3, [r7, #52]	@ 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80087e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e6:	69da      	ldr	r2, [r3, #28]
 80087e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ea:	899b      	ldrh	r3, [r3, #12]
 80087ec:	4619      	mov	r1, r3
 80087ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087f0:	440b      	add	r3, r1
 80087f2:	3b01      	subs	r3, #1
 80087f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087f6:	8989      	ldrh	r1, [r1, #12]
 80087f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d201      	bcs.n	8008804 <mount_volume+0x37c>
 8008800:	230d      	movs	r3, #13
 8008802:	e05c      	b.n	80088be <mount_volume+0x436>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008806:	f04f 32ff 	mov.w	r2, #4294967295
 800880a:	615a      	str	r2, [r3, #20]
 800880c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880e:	695a      	ldr	r2, [r3, #20]
 8008810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008812:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008816:	2280      	movs	r2, #128	@ 0x80
 8008818:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800881a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881c:	2b03      	cmp	r3, #3
 800881e:	d13f      	bne.n	80088a0 <mount_volume+0x418>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008822:	3334      	adds	r3, #52	@ 0x34
 8008824:	3330      	adds	r3, #48	@ 0x30
 8008826:	4618      	mov	r0, r3
 8008828:	f7fe fc02 	bl	8007030 <ld_word>
 800882c:	4603      	mov	r3, r0
 800882e:	2b01      	cmp	r3, #1
 8008830:	d136      	bne.n	80088a0 <mount_volume+0x418>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008832:	6a3b      	ldr	r3, [r7, #32]
 8008834:	3301      	adds	r3, #1
 8008836:	4619      	mov	r1, r3
 8008838:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800883a:	f7fe fcda 	bl	80071f2 <move_window>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d12d      	bne.n	80088a0 <mount_volume+0x418>
		{
			fs->fsi_flag = 0;
 8008844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008846:	2200      	movs	r2, #0
 8008848:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800884a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800884c:	3334      	adds	r3, #52	@ 0x34
 800884e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008852:	4618      	mov	r0, r3
 8008854:	f7fe fbec 	bl	8007030 <ld_word>
 8008858:	4603      	mov	r3, r0
 800885a:	461a      	mov	r2, r3
 800885c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008860:	429a      	cmp	r2, r3
 8008862:	d11d      	bne.n	80088a0 <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008866:	3334      	adds	r3, #52	@ 0x34
 8008868:	4618      	mov	r0, r3
 800886a:	f7fe fbfa 	bl	8007062 <ld_dword>
 800886e:	4603      	mov	r3, r0
 8008870:	4a15      	ldr	r2, [pc, #84]	@ (80088c8 <mount_volume+0x440>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d114      	bne.n	80088a0 <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008878:	3334      	adds	r3, #52	@ 0x34
 800887a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800887e:	4618      	mov	r0, r3
 8008880:	f7fe fbef 	bl	8007062 <ld_dword>
 8008884:	4603      	mov	r3, r0
 8008886:	4a11      	ldr	r2, [pc, #68]	@ (80088cc <mount_volume+0x444>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d109      	bne.n	80088a0 <mount_volume+0x418>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800888c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800888e:	3334      	adds	r3, #52	@ 0x34
 8008890:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008894:	4618      	mov	r0, r3
 8008896:	f7fe fbe4 	bl	8007062 <ld_dword>
 800889a:	4602      	mov	r2, r0
 800889c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800889e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 80088a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a2:	b2da      	uxtb	r2, r3
 80088a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 80088a8:	4b09      	ldr	r3, [pc, #36]	@ (80088d0 <mount_volume+0x448>)
 80088aa:	881b      	ldrh	r3, [r3, #0]
 80088ac:	3301      	adds	r3, #1
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	4b07      	ldr	r3, [pc, #28]	@ (80088d0 <mount_volume+0x448>)
 80088b2:	801a      	strh	r2, [r3, #0]
 80088b4:	4b06      	ldr	r3, [pc, #24]	@ (80088d0 <mount_volume+0x448>)
 80088b6:	881a      	ldrh	r2, [r3, #0]
 80088b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ba:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3740      	adds	r7, #64	@ 0x40
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	41615252 	.word	0x41615252
 80088cc:	61417272 	.word	0x61417272
 80088d0:	20005ac8 	.word	0x20005ac8

080088d4 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80088de:	2309      	movs	r3, #9
 80088e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d01c      	beq.n	8008922 <validate+0x4e>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d018      	beq.n	8008922 <validate+0x4e>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d013      	beq.n	8008922 <validate+0x4e>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	889a      	ldrh	r2, [r3, #4]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	88db      	ldrh	r3, [r3, #6]
 8008904:	429a      	cmp	r2, r3
 8008906:	d10c      	bne.n	8008922 <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	785b      	ldrb	r3, [r3, #1]
 800890e:	4618      	mov	r0, r3
 8008910:	f7fe fa56 	bl	8006dc0 <disk_status>
 8008914:	4603      	mov	r3, r0
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <validate+0x4e>
			res = FR_OK;
 800891e:	2300      	movs	r3, #0
 8008920:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 8008922:	7bfb      	ldrb	r3, [r7, #15]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d102      	bne.n	800892e <validate+0x5a>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	e000      	b.n	8008930 <validate+0x5c>
 800892e:	2300      	movs	r3, #0
 8008930:	683a      	ldr	r2, [r7, #0]
 8008932:	6013      	str	r3, [r2, #0]
	return res;
 8008934:	7bfb      	ldrb	r3, [r7, #15]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
	...

08008940 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b088      	sub	sp, #32
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	4613      	mov	r3, r2
 800894c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 8008952:	f107 0310 	add.w	r3, r7, #16
 8008956:	4618      	mov	r0, r3
 8008958:	f7ff fbf8 	bl	800814c <get_ldnumber>
 800895c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	2b00      	cmp	r3, #0
 8008962:	da01      	bge.n	8008968 <f_mount+0x28>
 8008964:	230b      	movs	r3, #11
 8008966:	e02e      	b.n	80089c6 <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 8008968:	4a19      	ldr	r2, [pc, #100]	@ (80089d0 <f_mount+0x90>)
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008970:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d007      	beq.n	8008988 <f_mount+0x48>
		FatFs[vol] = 0;
 8008978:	4a15      	ldr	r2, [pc, #84]	@ (80089d0 <f_mount+0x90>)
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	2100      	movs	r1, #0
 800897e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	2200      	movs	r2, #0
 8008986:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00b      	beq.n	80089a6 <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	69fa      	ldr	r2, [r7, #28]
 8008992:	b2d2      	uxtb	r2, r2
 8008994:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	490c      	ldr	r1, [pc, #48]	@ (80089d0 <f_mount+0x90>)
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 80089a6:	79fb      	ldrb	r3, [r7, #7]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d101      	bne.n	80089b0 <f_mount+0x70>
 80089ac:	2300      	movs	r3, #0
 80089ae:	e00a      	b.n	80089c6 <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 80089b0:	f107 010c 	add.w	r1, r7, #12
 80089b4:	f107 0308 	add.w	r3, r7, #8
 80089b8:	2200      	movs	r2, #0
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7ff fd64 	bl	8008488 <mount_volume>
 80089c0:	4603      	mov	r3, r0
 80089c2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80089c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3720      	adds	r7, #32
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	20005ac0 	.word	0x20005ac0

080089d4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b098      	sub	sp, #96	@ 0x60
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	4613      	mov	r3, r2
 80089e0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d101      	bne.n	80089ec <f_open+0x18>
 80089e8:	2309      	movs	r3, #9
 80089ea:	e184      	b.n	8008cf6 <f_open+0x322>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 80089ec:	79fb      	ldrb	r3, [r7, #7]
 80089ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80089f2:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 80089f4:	79fa      	ldrb	r2, [r7, #7]
 80089f6:	f107 0114 	add.w	r1, r7, #20
 80089fa:	f107 0308 	add.w	r3, r7, #8
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7ff fd42 	bl	8008488 <mount_volume>
 8008a04:	4603      	mov	r3, r0
 8008a06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8008a0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f040 8168 	bne.w	8008ce4 <f_open+0x310>
		dj.obj.fs = fs;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	f107 0318 	add.w	r3, r7, #24
 8008a1e:	4611      	mov	r1, r2
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7ff fb1f 	bl	8008064 <follow_path>
 8008a26:	4603      	mov	r3, r0
 8008a28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8008a2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d107      	bne.n	8008a44 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008a34:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008a38:	b25b      	sxtb	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	da02      	bge.n	8008a44 <f_open+0x70>
				res = FR_INVALID_NAME;
 8008a3e:	2306      	movs	r3, #6
 8008a40:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008a44:	79fb      	ldrb	r3, [r7, #7]
 8008a46:	f003 031c 	and.w	r3, r3, #28
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d077      	beq.n	8008b3e <f_open+0x16a>
			if (res != FR_OK) {					/* No file, create new */
 8008a4e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d010      	beq.n	8008a78 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008a56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008a5a:	2b04      	cmp	r3, #4
 8008a5c:	d107      	bne.n	8008a6e <f_open+0x9a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8008a5e:	f107 0318 	add.w	r3, r7, #24
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7ff f9f4 	bl	8007e50 <dir_register>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008a6e:	79fb      	ldrb	r3, [r7, #7]
 8008a70:	f043 0308 	orr.w	r3, r3, #8
 8008a74:	71fb      	strb	r3, [r7, #7]
 8008a76:	e010      	b.n	8008a9a <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008a78:	7fbb      	ldrb	r3, [r7, #30]
 8008a7a:	f003 0311 	and.w	r3, r3, #17
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d003      	beq.n	8008a8a <f_open+0xb6>
					res = FR_DENIED;
 8008a82:	2307      	movs	r3, #7
 8008a84:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008a88:	e007      	b.n	8008a9a <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008a8a:	79fb      	ldrb	r3, [r7, #7]
 8008a8c:	f003 0304 	and.w	r3, r3, #4
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <f_open+0xc6>
 8008a94:	2308      	movs	r3, #8
 8008a96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8008a9a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d167      	bne.n	8008b72 <f_open+0x19e>
 8008aa2:	79fb      	ldrb	r3, [r7, #7]
 8008aa4:	f003 0308 	and.w	r3, r3, #8
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d062      	beq.n	8008b72 <f_open+0x19e>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 8008aac:	4b94      	ldr	r3, [pc, #592]	@ (8008d00 <f_open+0x32c>)
 8008aae:	653b      	str	r3, [r7, #80]	@ 0x50
					st_dword(dj.dir + DIR_CrtTime, tm);
 8008ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ab2:	330e      	adds	r3, #14
 8008ab4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fe fb11 	bl	80070de <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 8008abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008abe:	3316      	adds	r3, #22
 8008ac0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7fe fb0b 	bl	80070de <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008acc:	4611      	mov	r1, r2
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7ff f92a 	bl	8007d28 <ld_clust>
 8008ad4:	64f8      	str	r0, [r7, #76]	@ 0x4c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ad8:	330b      	adds	r3, #11
 8008ada:	2220      	movs	r2, #32
 8008adc:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7ff f93e 	bl	8007d66 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aec:	331c      	adds	r3, #28
 8008aee:	2100      	movs	r1, #0
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7fe faf4 	bl	80070de <st_dword>
					fs->wflag = 1;
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	2201      	movs	r2, #1
 8008afa:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8008afc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d037      	beq.n	8008b72 <f_open+0x19e>
						sc = fs->winsect;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b06:	64bb      	str	r3, [r7, #72]	@ 0x48
						res = remove_chain(&dj.obj, cl, 0);
 8008b08:	f107 0318 	add.w	r3, r7, #24
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7fe fe15 	bl	8007740 <remove_chain>
 8008b16:	4603      	mov	r3, r0
 8008b18:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8008b1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d126      	bne.n	8008b72 <f_open+0x19e>
							res = move_window(fs, sc);
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7fe fb62 	bl	80071f2 <move_window>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008b38:	3a01      	subs	r2, #1
 8008b3a:	611a      	str	r2, [r3, #16]
 8008b3c:	e019      	b.n	8008b72 <f_open+0x19e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8008b3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d115      	bne.n	8008b72 <f_open+0x19e>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8008b46:	7fbb      	ldrb	r3, [r7, #30]
 8008b48:	f003 0310 	and.w	r3, r3, #16
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d003      	beq.n	8008b58 <f_open+0x184>
					res = FR_NO_FILE;
 8008b50:	2304      	movs	r3, #4
 8008b52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008b56:	e00c      	b.n	8008b72 <f_open+0x19e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8008b58:	79fb      	ldrb	r3, [r7, #7]
 8008b5a:	f003 0302 	and.w	r3, r3, #2
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d007      	beq.n	8008b72 <f_open+0x19e>
 8008b62:	7fbb      	ldrb	r3, [r7, #30]
 8008b64:	f003 0301 	and.w	r3, r3, #1
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d002      	beq.n	8008b72 <f_open+0x19e>
						res = FR_DENIED;
 8008b6c:	2307      	movs	r3, #7
 8008b6e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008b72:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d10f      	bne.n	8008b9a <f_open+0x1c6>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8008b7a:	79fb      	ldrb	r3, [r7, #7]
 8008b7c:	f003 0308 	and.w	r3, r3, #8
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d003      	beq.n	8008b8c <f_open+0x1b8>
 8008b84:	79fb      	ldrb	r3, [r7, #7]
 8008b86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b8a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8008b94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008b9a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	f040 80a0 	bne.w	8008ce4 <f_open+0x310>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ba8:	4611      	mov	r1, r2
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7ff f8bc 	bl	8007d28 <ld_clust>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bb8:	331c      	adds	r3, #28
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7fe fa51 	bl	8007062 <ld_dword>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	88da      	ldrh	r2, [r3, #6]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	79fa      	ldrb	r2, [r7, #7]
 8008bd8:	741a      	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	3328      	adds	r3, #40	@ 0x28
 8008bf0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f00c fa86 	bl	8015108 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008bfc:	79fb      	ldrb	r3, [r7, #7]
 8008bfe:	f003 0320 	and.w	r3, r3, #32
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d06e      	beq.n	8008ce4 <f_open+0x310>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d06a      	beq.n	8008ce4 <f_open+0x310>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	68da      	ldr	r2, [r3, #12]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	895b      	ldrh	r3, [r3, #10]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	899b      	ldrh	r3, [r3, #12]
 8008c20:	fb02 f303 	mul.w	r3, r2, r3
 8008c24:	647b      	str	r3, [r7, #68]	@ 0x44
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c32:	e016      	b.n	8008c62 <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f7fe fb94 	bl	8007366 <get_fat>
 8008c3e:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008c40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d802      	bhi.n	8008c4c <f_open+0x278>
 8008c46:	2302      	movs	r3, #2
 8008c48:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008c4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c52:	d102      	bne.n	8008c5a <f_open+0x286>
 8008c54:	2301      	movs	r3, #1
 8008c56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008c5a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008c5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c5e:	1ad3      	subs	r3, r2, r3
 8008c60:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d103      	bne.n	8008c72 <f_open+0x29e>
 8008c6a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d8e0      	bhi.n	8008c34 <f_open+0x260>
				}
				fp->clust = clst;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c76:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008c78:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d131      	bne.n	8008ce4 <f_open+0x310>
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	899b      	ldrh	r3, [r3, #12]
 8008c84:	461a      	mov	r2, r3
 8008c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c88:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c8c:	fb01 f202 	mul.w	r2, r1, r2
 8008c90:	1a9b      	subs	r3, r3, r2
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d026      	beq.n	8008ce4 <f_open+0x310>
					sc = clst2sect(fs, clst);
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fe fb44 	bl	8007328 <clst2sect>
 8008ca0:	64b8      	str	r0, [r7, #72]	@ 0x48
					if (sc == 0) {
 8008ca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d103      	bne.n	8008cb0 <f_open+0x2dc>
						res = FR_INT_ERR;
 8008ca8:	2302      	movs	r3, #2
 8008caa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008cae:	e019      	b.n	8008ce4 <f_open+0x310>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	899b      	ldrh	r3, [r3, #12]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cb8:	fbb3 f2f2 	udiv	r2, r3, r2
 8008cbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cbe:	441a      	add	r2, r3
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	7858      	ldrb	r0, [r3, #1]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	69da      	ldr	r2, [r3, #28]
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	f7fe f8c4 	bl	8006e60 <disk_read>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d002      	beq.n	8008ce4 <f_open+0x310>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008ce4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d002      	beq.n	8008cf2 <f_open+0x31e>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008cf2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3760      	adds	r7, #96	@ 0x60
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	54210000 	.word	0x54210000

08008d04 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b08e      	sub	sp, #56	@ 0x38
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
 8008d10:	603b      	str	r3, [r7, #0]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f107 0214 	add.w	r2, r7, #20
 8008d22:	4611      	mov	r1, r2
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7ff fdd5 	bl	80088d4 <validate>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008d30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d107      	bne.n	8008d48 <f_read+0x44>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	7c5b      	ldrb	r3, [r3, #17]
 8008d3c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008d40:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d002      	beq.n	8008d4e <f_read+0x4a>
 8008d48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008d4c:	e129      	b.n	8008fa2 <f_read+0x29e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	7c1b      	ldrb	r3, [r3, #16]
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d101      	bne.n	8008d5e <f_read+0x5a>
 8008d5a:	2307      	movs	r3, #7
 8008d5c:	e121      	b.n	8008fa2 <f_read+0x29e>
	remain = fp->obj.objsize - fp->fptr;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	68da      	ldr	r2, [r3, #12]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	695b      	ldr	r3, [r3, #20]
 8008d66:	1ad3      	subs	r3, r2, r3
 8008d68:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	f240 8112 	bls.w	8008f98 <f_read+0x294>
 8008d74:	6a3b      	ldr	r3, [r7, #32]
 8008d76:	607b      	str	r3, [r7, #4]

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8008d78:	e10e      	b.n	8008f98 <f_read+0x294>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	697a      	ldr	r2, [r7, #20]
 8008d80:	8992      	ldrh	r2, [r2, #12]
 8008d82:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d86:	fb01 f202 	mul.w	r2, r1, r2
 8008d8a:	1a9b      	subs	r3, r3, r2
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f040 80c9 	bne.w	8008f24 <f_read+0x220>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	695b      	ldr	r3, [r3, #20]
 8008d96:	697a      	ldr	r2, [r7, #20]
 8008d98:	8992      	ldrh	r2, [r2, #12]
 8008d9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	8952      	ldrh	r2, [r2, #10]
 8008da2:	3a01      	subs	r2, #1
 8008da4:	4013      	ands	r3, r2
 8008da6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d123      	bne.n	8008df6 <f_read+0xf2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d103      	bne.n	8008dbe <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	633b      	str	r3, [r7, #48]	@ 0x30
 8008dbc:	e007      	b.n	8008dce <f_read+0xca>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008dbe:	68fa      	ldr	r2, [r7, #12]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	699b      	ldr	r3, [r3, #24]
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	f7fe facd 	bl	8007366 <get_fat>
 8008dcc:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d804      	bhi.n	8008dde <f_read+0xda>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	745a      	strb	r2, [r3, #17]
 8008dda:	2302      	movs	r3, #2
 8008ddc:	e0e1      	b.n	8008fa2 <f_read+0x29e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de4:	d104      	bne.n	8008df0 <f_read+0xec>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2201      	movs	r2, #1
 8008dea:	745a      	strb	r2, [r3, #17]
 8008dec:	2301      	movs	r3, #1
 8008dee:	e0d8      	b.n	8008fa2 <f_read+0x29e>
				fp->clust = clst;				/* Update current cluster */
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008df4:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	4610      	mov	r0, r2
 8008e00:	f7fe fa92 	bl	8007328 <clst2sect>
 8008e04:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d104      	bne.n	8008e16 <f_read+0x112>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2202      	movs	r2, #2
 8008e10:	745a      	strb	r2, [r3, #17]
 8008e12:	2302      	movs	r3, #2
 8008e14:	e0c5      	b.n	8008fa2 <f_read+0x29e>
			sect += csect;
 8008e16:	69ba      	ldr	r2, [r7, #24]
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	899b      	ldrh	r3, [r3, #12]
 8008e22:	461a      	mov	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8008e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d041      	beq.n	8008eb6 <f_read+0x1b2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008e32:	69fa      	ldr	r2, [r7, #28]
 8008e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e36:	4413      	add	r3, r2
 8008e38:	697a      	ldr	r2, [r7, #20]
 8008e3a:	8952      	ldrh	r2, [r2, #10]
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d905      	bls.n	8008e4c <f_read+0x148>
					cc = fs->csize - csect;
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	895b      	ldrh	r3, [r3, #10]
 8008e44:	461a      	mov	r2, r3
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	1ad3      	subs	r3, r2, r3
 8008e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	7858      	ldrb	r0, [r3, #1]
 8008e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e52:	69ba      	ldr	r2, [r7, #24]
 8008e54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008e56:	f7fe f803 	bl	8006e60 <disk_read>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d004      	beq.n	8008e6a <f_read+0x166>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2201      	movs	r2, #1
 8008e64:	745a      	strb	r2, [r3, #17]
 8008e66:	2301      	movs	r3, #1
 8008e68:	e09b      	b.n	8008fa2 <f_read+0x29e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	7c1b      	ldrb	r3, [r3, #16]
 8008e6e:	b25b      	sxtb	r3, r3
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	da18      	bge.n	8008ea6 <f_read+0x1a2>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	69da      	ldr	r2, [r3, #28]
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d911      	bls.n	8008ea6 <f_read+0x1a2>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	69da      	ldr	r2, [r3, #28]
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	697a      	ldr	r2, [r7, #20]
 8008e8c:	8992      	ldrh	r2, [r2, #12]
 8008e8e:	fb02 f303 	mul.w	r3, r2, r3
 8008e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e94:	18d0      	adds	r0, r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	899b      	ldrh	r3, [r3, #12]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	f00c f9b5 	bl	8015210 <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	899b      	ldrh	r3, [r3, #12]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eae:	fb02 f303 	mul.w	r3, r2, r3
 8008eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8008eb4:	e05c      	b.n	8008f70 <f_read+0x26c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	69db      	ldr	r3, [r3, #28]
 8008eba:	69ba      	ldr	r2, [r7, #24]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d02e      	beq.n	8008f1e <f_read+0x21a>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	7c1b      	ldrb	r3, [r3, #16]
 8008ec4:	b25b      	sxtb	r3, r3
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	da18      	bge.n	8008efc <f_read+0x1f8>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	7858      	ldrb	r0, [r3, #1]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	69da      	ldr	r2, [r3, #28]
 8008ed8:	2301      	movs	r3, #1
 8008eda:	f7fd fff3 	bl	8006ec4 <disk_write>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d004      	beq.n	8008eee <f_read+0x1ea>
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	745a      	strb	r2, [r3, #17]
 8008eea:	2301      	movs	r3, #1
 8008eec:	e059      	b.n	8008fa2 <f_read+0x29e>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	7c1b      	ldrb	r3, [r3, #16]
 8008ef2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	7858      	ldrb	r0, [r3, #1]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8008f06:	2301      	movs	r3, #1
 8008f08:	69ba      	ldr	r2, [r7, #24]
 8008f0a:	f7fd ffa9 	bl	8006e60 <disk_read>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d004      	beq.n	8008f1e <f_read+0x21a>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2201      	movs	r2, #1
 8008f18:	745a      	strb	r2, [r3, #17]
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e041      	b.n	8008fa2 <f_read+0x29e>
			}
#endif
			fp->sect = sect;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	69ba      	ldr	r2, [r7, #24]
 8008f22:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	899b      	ldrh	r3, [r3, #12]
 8008f28:	4618      	mov	r0, r3
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	695b      	ldr	r3, [r3, #20]
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	8992      	ldrh	r2, [r2, #12]
 8008f32:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f36:	fb01 f202 	mul.w	r2, r1, r2
 8008f3a:	1a9b      	subs	r3, r3, r2
 8008f3c:	1ac3      	subs	r3, r0, r3
 8008f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008f40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d901      	bls.n	8008f4c <f_read+0x248>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	8992      	ldrh	r2, [r2, #12]
 8008f5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f5e:	fb00 f202 	mul.w	r2, r0, r2
 8008f62:	1a9b      	subs	r3, r3, r2
 8008f64:	440b      	add	r3, r1
 8008f66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f68:	4619      	mov	r1, r3
 8008f6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008f6c:	f00c f950 	bl	8015210 <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	607b      	str	r3, [r7, #4]
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f7e:	441a      	add	r2, r3
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	601a      	str	r2, [r3, #0]
 8008f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f88:	4413      	add	r3, r2
 8008f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	695a      	ldr	r2, [r3, #20]
 8008f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f92:	441a      	add	r2, r3
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	615a      	str	r2, [r3, #20]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f47f aeed 	bne.w	8008d7a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3738      	adds	r7, #56	@ 0x38
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b08c      	sub	sp, #48	@ 0x30
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	60f8      	str	r0, [r7, #12]
 8008fb2:	60b9      	str	r1, [r7, #8]
 8008fb4:	607a      	str	r2, [r7, #4]
 8008fb6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f107 0210 	add.w	r2, r7, #16
 8008fc8:	4611      	mov	r1, r2
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7ff fc82 	bl	80088d4 <validate>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008fd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d107      	bne.n	8008fee <f_write+0x44>
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	7c5b      	ldrb	r3, [r3, #17]
 8008fe2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008fe6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d002      	beq.n	8008ff4 <f_write+0x4a>
 8008fee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008ff2:	e15e      	b.n	80092b2 <f_write+0x308>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	7c1b      	ldrb	r3, [r3, #16]
 8008ff8:	f003 0302 	and.w	r3, r3, #2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d101      	bne.n	8009004 <f_write+0x5a>
 8009000:	2307      	movs	r3, #7
 8009002:	e156      	b.n	80092b2 <f_write+0x308>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	695a      	ldr	r2, [r3, #20]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	441a      	add	r2, r3
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	695b      	ldr	r3, [r3, #20]
 8009010:	429a      	cmp	r2, r3
 8009012:	f080 8140 	bcs.w	8009296 <f_write+0x2ec>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	695b      	ldr	r3, [r3, #20]
 800901a:	43db      	mvns	r3, r3
 800901c:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800901e:	e13a      	b.n	8009296 <f_write+0x2ec>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	695b      	ldr	r3, [r3, #20]
 8009024:	693a      	ldr	r2, [r7, #16]
 8009026:	8992      	ldrh	r2, [r2, #12]
 8009028:	fbb3 f1f2 	udiv	r1, r3, r2
 800902c:	fb01 f202 	mul.w	r2, r1, r2
 8009030:	1a9b      	subs	r3, r3, r2
 8009032:	2b00      	cmp	r3, #0
 8009034:	f040 80e5 	bne.w	8009202 <f_write+0x258>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	695b      	ldr	r3, [r3, #20]
 800903c:	693a      	ldr	r2, [r7, #16]
 800903e:	8992      	ldrh	r2, [r2, #12]
 8009040:	fbb3 f3f2 	udiv	r3, r3, r2
 8009044:	693a      	ldr	r2, [r7, #16]
 8009046:	8952      	ldrh	r2, [r2, #10]
 8009048:	3a01      	subs	r2, #1
 800904a:	4013      	ands	r3, r2
 800904c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d137      	bne.n	80090c4 <f_write+0x11a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	695b      	ldr	r3, [r3, #20]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10c      	bne.n	8009076 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009064:	2b00      	cmp	r3, #0
 8009066:	d10e      	bne.n	8009086 <f_write+0xdc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2100      	movs	r1, #0
 800906c:	4618      	mov	r0, r3
 800906e:	f7fe fbcc 	bl	800780a <create_chain>
 8009072:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009074:	e007      	b.n	8009086 <f_write+0xdc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	699b      	ldr	r3, [r3, #24]
 800907c:	4619      	mov	r1, r3
 800907e:	4610      	mov	r0, r2
 8009080:	f7fe fbc3 	bl	800780a <create_chain>
 8009084:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009088:	2b00      	cmp	r3, #0
 800908a:	f000 8109 	beq.w	80092a0 <f_write+0x2f6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800908e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009090:	2b01      	cmp	r3, #1
 8009092:	d104      	bne.n	800909e <f_write+0xf4>
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2202      	movs	r2, #2
 8009098:	745a      	strb	r2, [r3, #17]
 800909a:	2302      	movs	r3, #2
 800909c:	e109      	b.n	80092b2 <f_write+0x308>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800909e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a4:	d104      	bne.n	80090b0 <f_write+0x106>
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2201      	movs	r2, #1
 80090aa:	745a      	strb	r2, [r3, #17]
 80090ac:	2301      	movs	r3, #1
 80090ae:	e100      	b.n	80092b2 <f_write+0x308>
				fp->clust = clst;			/* Update current cluster */
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090b4:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d102      	bne.n	80090c4 <f_write+0x11a>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090c2:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	7c1b      	ldrb	r3, [r3, #16]
 80090c8:	b25b      	sxtb	r3, r3
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	da18      	bge.n	8009100 <f_write+0x156>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	7858      	ldrb	r0, [r3, #1]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	69da      	ldr	r2, [r3, #28]
 80090dc:	2301      	movs	r3, #1
 80090de:	f7fd fef1 	bl	8006ec4 <disk_write>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d004      	beq.n	80090f2 <f_write+0x148>
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2201      	movs	r2, #1
 80090ec:	745a      	strb	r2, [r3, #17]
 80090ee:	2301      	movs	r3, #1
 80090f0:	e0df      	b.n	80092b2 <f_write+0x308>
				fp->flag &= (BYTE)~FA_DIRTY;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	7c1b      	ldrb	r3, [r3, #16]
 80090f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090fa:	b2da      	uxtb	r2, r3
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8009100:	693a      	ldr	r2, [r7, #16]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	4619      	mov	r1, r3
 8009108:	4610      	mov	r0, r2
 800910a:	f7fe f90d 	bl	8007328 <clst2sect>
 800910e:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d104      	bne.n	8009120 <f_write+0x176>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2202      	movs	r2, #2
 800911a:	745a      	strb	r2, [r3, #17]
 800911c:	2302      	movs	r3, #2
 800911e:	e0c8      	b.n	80092b2 <f_write+0x308>
			sect += csect;
 8009120:	697a      	ldr	r2, [r7, #20]
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	4413      	add	r3, r2
 8009126:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	899b      	ldrh	r3, [r3, #12]
 800912c:	461a      	mov	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	fbb3 f3f2 	udiv	r3, r3, r2
 8009134:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8009136:	6a3b      	ldr	r3, [r7, #32]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d043      	beq.n	80091c4 <f_write+0x21a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800913c:	69ba      	ldr	r2, [r7, #24]
 800913e:	6a3b      	ldr	r3, [r7, #32]
 8009140:	4413      	add	r3, r2
 8009142:	693a      	ldr	r2, [r7, #16]
 8009144:	8952      	ldrh	r2, [r2, #10]
 8009146:	4293      	cmp	r3, r2
 8009148:	d905      	bls.n	8009156 <f_write+0x1ac>
					cc = fs->csize - csect;
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	895b      	ldrh	r3, [r3, #10]
 800914e:	461a      	mov	r2, r3
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	1ad3      	subs	r3, r2, r3
 8009154:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	7858      	ldrb	r0, [r3, #1]
 800915a:	6a3b      	ldr	r3, [r7, #32]
 800915c:	697a      	ldr	r2, [r7, #20]
 800915e:	69f9      	ldr	r1, [r7, #28]
 8009160:	f7fd feb0 	bl	8006ec4 <disk_write>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d004      	beq.n	8009174 <f_write+0x1ca>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2201      	movs	r2, #1
 800916e:	745a      	strb	r2, [r3, #17]
 8009170:	2301      	movs	r3, #1
 8009172:	e09e      	b.n	80092b2 <f_write+0x308>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	69da      	ldr	r2, [r3, #28]
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	6a3a      	ldr	r2, [r7, #32]
 800917e:	429a      	cmp	r2, r3
 8009180:	d918      	bls.n	80091b4 <f_write+0x20a>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	69da      	ldr	r2, [r3, #28]
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	1ad3      	subs	r3, r2, r3
 8009190:	693a      	ldr	r2, [r7, #16]
 8009192:	8992      	ldrh	r2, [r2, #12]
 8009194:	fb02 f303 	mul.w	r3, r2, r3
 8009198:	69fa      	ldr	r2, [r7, #28]
 800919a:	18d1      	adds	r1, r2, r3
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	899b      	ldrh	r3, [r3, #12]
 80091a0:	461a      	mov	r2, r3
 80091a2:	f00c f835 	bl	8015210 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	7c1b      	ldrb	r3, [r3, #16]
 80091aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091ae:	b2da      	uxtb	r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	899b      	ldrh	r3, [r3, #12]
 80091b8:	461a      	mov	r2, r3
 80091ba:	6a3b      	ldr	r3, [r7, #32]
 80091bc:	fb02 f303 	mul.w	r3, r2, r3
 80091c0:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80091c2:	e04b      	b.n	800925c <f_write+0x2b2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	69db      	ldr	r3, [r3, #28]
 80091c8:	697a      	ldr	r2, [r7, #20]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d016      	beq.n	80091fc <f_write+0x252>
				fp->fptr < fp->obj.objsize &&
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	695a      	ldr	r2, [r3, #20]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d210      	bcs.n	80091fc <f_write+0x252>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	7858      	ldrb	r0, [r3, #1]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80091e4:	2301      	movs	r3, #1
 80091e6:	697a      	ldr	r2, [r7, #20]
 80091e8:	f7fd fe3a 	bl	8006e60 <disk_read>
 80091ec:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d004      	beq.n	80091fc <f_write+0x252>
					ABORT(fs, FR_DISK_ERR);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2201      	movs	r2, #1
 80091f6:	745a      	strb	r2, [r3, #17]
 80091f8:	2301      	movs	r3, #1
 80091fa:	e05a      	b.n	80092b2 <f_write+0x308>
			}
#endif
			fp->sect = sect;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	697a      	ldr	r2, [r7, #20]
 8009200:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	899b      	ldrh	r3, [r3, #12]
 8009206:	4618      	mov	r0, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	695b      	ldr	r3, [r3, #20]
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	8992      	ldrh	r2, [r2, #12]
 8009210:	fbb3 f1f2 	udiv	r1, r3, r2
 8009214:	fb01 f202 	mul.w	r2, r1, r2
 8009218:	1a9b      	subs	r3, r3, r2
 800921a:	1ac3      	subs	r3, r0, r3
 800921c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800921e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	429a      	cmp	r2, r3
 8009224:	d901      	bls.n	800922a <f_write+0x280>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	627b      	str	r3, [r7, #36]	@ 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	695b      	ldr	r3, [r3, #20]
 8009234:	693a      	ldr	r2, [r7, #16]
 8009236:	8992      	ldrh	r2, [r2, #12]
 8009238:	fbb3 f0f2 	udiv	r0, r3, r2
 800923c:	fb00 f202 	mul.w	r2, r0, r2
 8009240:	1a9b      	subs	r3, r3, r2
 8009242:	440b      	add	r3, r1
 8009244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009246:	69f9      	ldr	r1, [r7, #28]
 8009248:	4618      	mov	r0, r3
 800924a:	f00b ffe1 	bl	8015210 <memcpy>
		fp->flag |= FA_DIRTY;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	7c1b      	ldrb	r3, [r3, #16]
 8009252:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009256:	b2da      	uxtb	r2, r3
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	741a      	strb	r2, [r3, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	607b      	str	r3, [r7, #4]
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800926a:	441a      	add	r2, r3
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	601a      	str	r2, [r3, #0]
 8009270:	69fa      	ldr	r2, [r7, #28]
 8009272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009274:	4413      	add	r3, r2
 8009276:	61fb      	str	r3, [r7, #28]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	695a      	ldr	r2, [r3, #20]
 800927c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927e:	441a      	add	r2, r3
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	615a      	str	r2, [r3, #20]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	68da      	ldr	r2, [r3, #12]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	695b      	ldr	r3, [r3, #20]
 800928c:	429a      	cmp	r2, r3
 800928e:	bf38      	it	cc
 8009290:	461a      	movcc	r2, r3
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	60da      	str	r2, [r3, #12]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2b00      	cmp	r3, #0
 800929a:	f47f aec1 	bne.w	8009020 <f_write+0x76>
 800929e:	e000      	b.n	80092a2 <f_write+0x2f8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80092a0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	7c1b      	ldrb	r3, [r3, #16]
 80092a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3730      	adds	r7, #48	@ 0x30
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
	...

080092bc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b086      	sub	sp, #24
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f107 0208 	add.w	r2, r7, #8
 80092ca:	4611      	mov	r1, r2
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7ff fb01 	bl	80088d4 <validate>
 80092d2:	4603      	mov	r3, r0
 80092d4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80092d6:	7dfb      	ldrb	r3, [r7, #23]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d167      	bne.n	80093ac <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	7c1b      	ldrb	r3, [r3, #16]
 80092e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d061      	beq.n	80093ac <f_sync+0xf0>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	7c1b      	ldrb	r3, [r3, #16]
 80092ec:	b25b      	sxtb	r3, r3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	da15      	bge.n	800931e <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	7858      	ldrb	r0, [r3, #1]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	69da      	ldr	r2, [r3, #28]
 8009300:	2301      	movs	r3, #1
 8009302:	f7fd fddf 	bl	8006ec4 <disk_write>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d001      	beq.n	8009310 <f_sync+0x54>
 800930c:	2301      	movs	r3, #1
 800930e:	e04e      	b.n	80093ae <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	7c1b      	ldrb	r3, [r3, #16]
 8009314:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009318:	b2da      	uxtb	r2, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800931e:	4b26      	ldr	r3, [pc, #152]	@ (80093b8 <f_sync+0xfc>)
 8009320:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6a1b      	ldr	r3, [r3, #32]
 8009328:	4619      	mov	r1, r3
 800932a:	4610      	mov	r0, r2
 800932c:	f7fd ff61 	bl	80071f2 <move_window>
 8009330:	4603      	mov	r3, r0
 8009332:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009334:	7dfb      	ldrb	r3, [r7, #23]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d138      	bne.n	80093ac <f_sync+0xf0>
					dir = fp->dir_ptr;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800933e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	330b      	adds	r3, #11
 8009344:	781a      	ldrb	r2, [r3, #0]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	330b      	adds	r3, #11
 800934a:	f042 0220 	orr.w	r2, r2, #32
 800934e:	b2d2      	uxtb	r2, r2
 8009350:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6818      	ldr	r0, [r3, #0]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	461a      	mov	r2, r3
 800935c:	68f9      	ldr	r1, [r7, #12]
 800935e:	f7fe fd02 	bl	8007d66 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f103 021c 	add.w	r2, r3, #28
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	4619      	mov	r1, r3
 800936e:	4610      	mov	r0, r2
 8009370:	f7fd feb5 	bl	80070de <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	3316      	adds	r3, #22
 8009378:	6939      	ldr	r1, [r7, #16]
 800937a:	4618      	mov	r0, r3
 800937c:	f7fd feaf 	bl	80070de <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	3312      	adds	r3, #18
 8009384:	2100      	movs	r1, #0
 8009386:	4618      	mov	r0, r3
 8009388:	f7fd fe8e 	bl	80070a8 <st_word>
					fs->wflag = 1;
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	2201      	movs	r2, #1
 8009390:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	4618      	mov	r0, r3
 8009396:	f7fd ff59 	bl	800724c <sync_fs>
 800939a:	4603      	mov	r3, r0
 800939c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	7c1b      	ldrb	r3, [r3, #16]
 80093a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093a6:	b2da      	uxtb	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80093ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3718      	adds	r7, #24
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	54210000 	.word	0x54210000

080093bc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7ff ff79 	bl	80092bc <f_sync>
 80093ca:	4603      	mov	r3, r0
 80093cc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80093ce:	7bfb      	ldrb	r3, [r7, #15]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d10e      	bne.n	80093f2 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f107 0208 	add.w	r2, r7, #8
 80093da:	4611      	mov	r1, r2
 80093dc:	4618      	mov	r0, r3
 80093de:	f7ff fa79 	bl	80088d4 <validate>
 80093e2:	4603      	mov	r3, r0
 80093e4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80093e6:	7bfb      	ldrb	r3, [r7, #15]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d102      	bne.n	80093f2 <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80093f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID for each partition (for only MBR) */
	BYTE *buf			/* Working buffer for a sector */
)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b08e      	sub	sp, #56	@ 0x38
 8009400:	af00      	add	r7, sp, #0
 8009402:	60b9      	str	r1, [r7, #8]
 8009404:	607b      	str	r3, [r7, #4]
 8009406:	4603      	mov	r3, r0
 8009408:	73fb      	strb	r3, [r7, #15]
 800940a:	4613      	mov	r3, r2
 800940c:	73bb      	strb	r3, [r7, #14]
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 800940e:	f107 0210 	add.w	r2, r7, #16
 8009412:	7bfb      	ldrb	r3, [r7, #15]
 8009414:	2101      	movs	r1, #1
 8009416:	4618      	mov	r0, r3
 8009418:	f7fd fd88 	bl	8006f2c <disk_ioctl>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d001      	beq.n	8009426 <create_partition+0x2a>
 8009422:	2301      	movs	r3, #1
 8009424:	e108      	b.n	8009638 <create_partition+0x23c>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	623b      	str	r3, [r7, #32]
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
 800942a:	233f      	movs	r3, #63	@ 0x3f
 800942c:	77fb      	strb	r3, [r7, #31]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 800942e:	2308      	movs	r3, #8
 8009430:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009434:	e004      	b.n	8009440 <create_partition+0x44>
 8009436:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800943a:	005b      	lsls	r3, r3, #1
 800943c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009440:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009444:	2b00      	cmp	r3, #0
 8009446:	d00a      	beq.n	800945e <create_partition+0x62>
 8009448:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800944c:	6a3a      	ldr	r2, [r7, #32]
 800944e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009452:	7ffb      	ldrb	r3, [r7, #31]
 8009454:	fbb2 f3f3 	udiv	r3, r2, r3
 8009458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800945c:	d8eb      	bhi.n	8009436 <create_partition+0x3a>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 800945e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009462:	2b00      	cmp	r3, #0
 8009464:	d102      	bne.n	800946c <create_partition+0x70>
 8009466:	23ff      	movs	r3, #255	@ 0xff
 8009468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 800946c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009470:	2100      	movs	r1, #0
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f00b fe48 	bl	8015108 <memset>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800947e:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8009480:	2300      	movs	r3, #0
 8009482:	637b      	str	r3, [r7, #52]	@ 0x34
 8009484:	7ffb      	ldrb	r3, [r7, #31]
 8009486:	633b      	str	r3, [r7, #48]	@ 0x30
 8009488:	e0b5      	b.n	80095f6 <create_partition+0x1fa>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 800948a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	4413      	add	r3, r2
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 8009496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009498:	2b64      	cmp	r3, #100	@ 0x64
 800949a:	d80d      	bhi.n	80094b8 <create_partition+0xbc>
 800949c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800949e:	2b64      	cmp	r3, #100	@ 0x64
 80094a0:	d008      	beq.n	80094b4 <create_partition+0xb8>
 80094a2:	6a3b      	ldr	r3, [r7, #32]
 80094a4:	4a66      	ldr	r2, [pc, #408]	@ (8009640 <create_partition+0x244>)
 80094a6:	fba2 2303 	umull	r2, r3, r2, r3
 80094aa:	095b      	lsrs	r3, r3, #5
 80094ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094ae:	fb02 f303 	mul.w	r3, r2, r3
 80094b2:	e000      	b.n	80094b6 <create_partition+0xba>
 80094b4:	6a3b      	ldr	r3, [r7, #32]
 80094b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 80094b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094bc:	4413      	add	r3, r2
 80094be:	6a3a      	ldr	r2, [r7, #32]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d305      	bcc.n	80094d0 <create_partition+0xd4>
 80094c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c8:	4413      	add	r3, r2
 80094ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d903      	bls.n	80094d8 <create_partition+0xdc>
 80094d0:	6a3a      	ldr	r2, [r7, #32]
 80094d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d4:	1ad3      	subs	r3, r2, r3
 80094d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 80094d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f000 8097 	beq.w	800960e <create_partition+0x212>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 80094e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e2:	3308      	adds	r3, #8
 80094e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7fd fdf9 	bl	80070de <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 80094ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ee:	330c      	adds	r3, #12
 80094f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fd fdf3 	bl	80070de <st_dword>
			pte[PTE_System] = sys;					/* System type */
 80094f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094fa:	3304      	adds	r3, #4
 80094fc:	7bba      	ldrb	r2, [r7, #14]
 80094fe:	701a      	strb	r2, [r3, #0]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 8009500:	7ffb      	ldrb	r3, [r7, #31]
 8009502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009504:	fbb2 f2f3 	udiv	r2, r2, r3
 8009508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800950c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009510:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 8009512:	7ffb      	ldrb	r3, [r7, #31]
 8009514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009516:	fbb2 f3f3 	udiv	r3, r2, r3
 800951a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800951e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009522:	fb01 f202 	mul.w	r2, r1, r2
 8009526:	1a9b      	subs	r3, r3, r2
 8009528:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 800952a:	7ffa      	ldrb	r2, [r7, #31]
 800952c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800952e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009532:	fb01 f202 	mul.w	r2, r1, r2
 8009536:	1a9b      	subs	r3, r3, r2
 8009538:	b2db      	uxtb	r3, r3
 800953a:	3301      	adds	r3, #1
 800953c:	75bb      	strb	r3, [r7, #22]
			pte[PTE_StHead] = hd;
 800953e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009540:	3301      	adds	r3, #1
 8009542:	7dfa      	ldrb	r2, [r7, #23]
 8009544:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	089b      	lsrs	r3, r3, #2
 800954a:	b2db      	uxtb	r3, r3
 800954c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009550:	b2d9      	uxtb	r1, r3
 8009552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009554:	3302      	adds	r3, #2
 8009556:	7dba      	ldrb	r2, [r7, #22]
 8009558:	430a      	orrs	r2, r1
 800955a:	b2d2      	uxtb	r2, r2
 800955c:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = (BYTE)cy;
 800955e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009560:	3303      	adds	r3, #3
 8009562:	69ba      	ldr	r2, [r7, #24]
 8009564:	b2d2      	uxtb	r2, r2
 8009566:	701a      	strb	r2, [r3, #0]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 8009568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800956a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800956c:	4413      	add	r3, r2
 800956e:	1e5a      	subs	r2, r3, #1
 8009570:	7ffb      	ldrb	r3, [r7, #31]
 8009572:	fbb2 f2f3 	udiv	r2, r2, r3
 8009576:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800957a:	fbb2 f3f3 	udiv	r3, r2, r3
 800957e:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 8009580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009584:	4413      	add	r3, r2
 8009586:	1e5a      	subs	r2, r3, #1
 8009588:	7ffb      	ldrb	r3, [r7, #31]
 800958a:	fbb2 f3f3 	udiv	r3, r2, r3
 800958e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009592:	fbb3 f1f2 	udiv	r1, r3, r2
 8009596:	fb01 f202 	mul.w	r2, r1, r2
 800959a:	1a9b      	subs	r3, r3, r2
 800959c:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 800959e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095a2:	4413      	add	r3, r2
 80095a4:	3b01      	subs	r3, #1
 80095a6:	7ffa      	ldrb	r2, [r7, #31]
 80095a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80095ac:	fb01 f202 	mul.w	r2, r1, r2
 80095b0:	1a9b      	subs	r3, r3, r2
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	3301      	adds	r3, #1
 80095b6:	75bb      	strb	r3, [r7, #22]
			pte[PTE_EdHead] = hd;
 80095b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ba:	3305      	adds	r3, #5
 80095bc:	7dfa      	ldrb	r2, [r7, #23]
 80095be:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	089b      	lsrs	r3, r3, #2
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80095ca:	b2d9      	uxtb	r1, r3
 80095cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ce:	3306      	adds	r3, #6
 80095d0:	7dba      	ldrb	r2, [r7, #22]
 80095d2:	430a      	orrs	r2, r1
 80095d4:	b2d2      	uxtb	r2, r2
 80095d6:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)cy;
 80095d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095da:	3307      	adds	r3, #7
 80095dc:	69ba      	ldr	r2, [r7, #24]
 80095de:	b2d2      	uxtb	r2, r2
 80095e0:	701a      	strb	r2, [r3, #0]

			pte += SZ_PTE;		/* Next entry */
 80095e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e4:	3310      	adds	r3, #16
 80095e6:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 80095e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095ea:	3301      	adds	r3, #1
 80095ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80095ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095f2:	4413      	add	r3, r2
 80095f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80095f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095f8:	2b03      	cmp	r3, #3
 80095fa:	d809      	bhi.n	8009610 <create_partition+0x214>
 80095fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d006      	beq.n	8009610 <create_partition+0x214>
 8009602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009604:	6a3b      	ldr	r3, [r7, #32]
 8009606:	429a      	cmp	r2, r3
 8009608:	f4ff af3f 	bcc.w	800948a <create_partition+0x8e>
 800960c:	e000      	b.n	8009610 <create_partition+0x214>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800960e:	bf00      	nop
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009616:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800961a:	4618      	mov	r0, r3
 800961c:	f7fd fd44 	bl	80070a8 <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8009620:	7bf8      	ldrb	r0, [r7, #15]
 8009622:	2301      	movs	r3, #1
 8009624:	2200      	movs	r2, #0
 8009626:	6879      	ldr	r1, [r7, #4]
 8009628:	f7fd fc4c 	bl	8006ec4 <disk_write>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d001      	beq.n	8009636 <create_partition+0x23a>
 8009632:	2301      	movs	r3, #1
 8009634:	e000      	b.n	8009638 <create_partition+0x23c>
	}

	return FR_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3738      	adds	r7, #56	@ 0x38
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	51eb851f 	.word	0x51eb851f

08009644 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b09e      	sub	sp, #120	@ 0x78
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	607a      	str	r2, [r7, #4]
 8009650:	603b      	str	r3, [r7, #0]
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8009652:	f107 030c 	add.w	r3, r7, #12
 8009656:	4618      	mov	r0, r3
 8009658:	f7fe fd78 	bl	800814c <get_ldnumber>
 800965c:	6478      	str	r0, [r7, #68]	@ 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800965e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009660:	2b00      	cmp	r3, #0
 8009662:	da02      	bge.n	800966a <f_mkfs+0x26>
 8009664:	230b      	movs	r3, #11
 8009666:	f000 bc39 	b.w	8009edc <f_mkfs+0x898>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 800966a:	4a90      	ldr	r2, [pc, #576]	@ (80098ac <f_mkfs+0x268>)
 800966c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800966e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d005      	beq.n	8009682 <f_mkfs+0x3e>
 8009676:	4a8d      	ldr	r2, [pc, #564]	@ (80098ac <f_mkfs+0x268>)
 8009678:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800967a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800967e:	2200      	movs	r2, #0
 8009680:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 8009682:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009684:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */
 8009688:	2300      	movs	r3, #0
 800968a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 800968e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009692:	4618      	mov	r0, r3
 8009694:	f7fd fbbc 	bl	8006e10 <disk_initialize>
 8009698:	4603      	mov	r3, r0
 800969a:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	if (ds & STA_NOINIT) return FR_NOT_READY;
 800969e:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80096a2:	f003 0301 	and.w	r3, r3, #1
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d002      	beq.n	80096b0 <f_mkfs+0x6c>
 80096aa:	2303      	movs	r3, #3
 80096ac:	f000 bc16 	b.w	8009edc <f_mkfs+0x898>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 80096b0:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80096b4:	f003 0304 	and.w	r3, r3, #4
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d002      	beq.n	80096c2 <f_mkfs+0x7e>
 80096bc:	230a      	movs	r3, #10
 80096be:	f000 bc0d 	b.w	8009edc <f_mkfs+0x898>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d101      	bne.n	80096cc <f_mkfs+0x88>
 80096c8:	4b79      	ldr	r3, [pc, #484]	@ (80098b0 <f_mkfs+0x26c>)
 80096ca:	60bb      	str	r3, [r7, #8]
	sz_blk = opt->align;
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	61fb      	str	r3, [r7, #28]
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the paramter or lower layer */
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d107      	bne.n	80096e8 <f_mkfs+0xa4>
 80096d8:	f107 021c 	add.w	r2, r7, #28
 80096dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80096e0:	2103      	movs	r1, #3
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7fd fc22 	bl	8006f2c <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d009      	beq.n	8009702 <f_mkfs+0xbe>
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096f4:	d805      	bhi.n	8009702 <f_mkfs+0xbe>
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	1e5a      	subs	r2, r3, #1
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	4013      	ands	r3, r2
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d001      	beq.n	8009706 <f_mkfs+0xc2>
 8009702:	2301      	movs	r3, #1
 8009704:	61fb      	str	r3, [r7, #28]
#if FF_MAX_SS != FF_MIN_SS
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 8009706:	f107 0220 	add.w	r2, r7, #32
 800970a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800970e:	2102      	movs	r1, #2
 8009710:	4618      	mov	r0, r3
 8009712:	f7fd fc0b 	bl	8006f2c <disk_ioctl>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d001      	beq.n	8009720 <f_mkfs+0xdc>
 800971c:	2301      	movs	r3, #1
 800971e:	e3dd      	b.n	8009edc <f_mkfs+0x898>
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 8009720:	8c3b      	ldrh	r3, [r7, #32]
 8009722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009726:	d80a      	bhi.n	800973e <f_mkfs+0xfa>
 8009728:	8c3b      	ldrh	r3, [r7, #32]
 800972a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800972e:	d306      	bcc.n	800973e <f_mkfs+0xfa>
 8009730:	8c3b      	ldrh	r3, [r7, #32]
 8009732:	461a      	mov	r2, r3
 8009734:	8c3b      	ldrh	r3, [r7, #32]
 8009736:	3b01      	subs	r3, #1
 8009738:	4013      	ands	r3, r2
 800973a:	2b00      	cmp	r3, #0
 800973c:	d001      	beq.n	8009742 <f_mkfs+0xfe>
 800973e:	2301      	movs	r3, #1
 8009740:	e3cc      	b.n	8009edc <f_mkfs+0x898>
#else
	ss = FF_MAX_SS;
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	f003 030f 	and.w	r3, r3, #15
 800974a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	785b      	ldrb	r3, [r3, #1]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d006      	beq.n	8009764 <f_mkfs+0x120>
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	785b      	ldrb	r3, [r3, #1]
 800975a:	2b02      	cmp	r3, #2
 800975c:	d802      	bhi.n	8009764 <f_mkfs+0x120>
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	785b      	ldrb	r3, [r3, #1]
 8009762:	e000      	b.n	8009766 <f_mkfs+0x122>
 8009764:	2301      	movs	r3, #1
 8009766:	63fb      	str	r3, [r7, #60]	@ 0x3c
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d013      	beq.n	8009798 <f_mkfs+0x154>
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009778:	d80e      	bhi.n	8009798 <f_mkfs+0x154>
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	8c3a      	ldrh	r2, [r7, #32]
 8009780:	0952      	lsrs	r2, r2, #5
 8009782:	b292      	uxth	r2, r2
 8009784:	fbb3 f1f2 	udiv	r1, r3, r2
 8009788:	fb01 f202 	mul.w	r2, r1, r2
 800978c:	1a9b      	subs	r3, r3, r2
 800978e:	2b00      	cmp	r3, #0
 8009790:	d102      	bne.n	8009798 <f_mkfs+0x154>
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	e001      	b.n	800979c <f_mkfs+0x158>
 8009798:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800979c:	63bb      	str	r3, [r7, #56]	@ 0x38
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097a6:	d80a      	bhi.n	80097be <f_mkfs+0x17a>
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	68da      	ldr	r2, [r3, #12]
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	3b01      	subs	r3, #1
 80097b2:	4013      	ands	r3, r2
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d102      	bne.n	80097be <f_mkfs+0x17a>
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	e000      	b.n	80097c0 <f_mkfs+0x17c>
 80097be:	2300      	movs	r3, #0
 80097c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sz_au /= ss;	/* Byte --> Sector */
 80097c2:	8c3b      	ldrh	r3, [r7, #32]
 80097c4:	461a      	mov	r2, r3
 80097c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80097cc:	64fb      	str	r3, [r7, #76]	@ 0x4c

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 80097ce:	8c3b      	ldrh	r3, [r7, #32]
 80097d0:	461a      	mov	r2, r3
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80097d8:	637b      	str	r3, [r7, #52]	@ 0x34
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 80097da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d101      	bne.n	80097e4 <f_mkfs+0x1a0>
 80097e0:	2311      	movs	r3, #17
 80097e2:	e37b      	b.n	8009edc <f_mkfs+0x898>
	buf = (BYTE*)work;		/* Working buffer */
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	633b      	str	r3, [r7, #48]	@ 0x30
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 80097e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d101      	bne.n	80097f2 <f_mkfs+0x1ae>
 80097ee:	2311      	movs	r3, #17
 80097f0:	e374      	b.n	8009edc <f_mkfs+0x898>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 80097f2:	2300      	movs	r3, #0
 80097f4:	61bb      	str	r3, [r7, #24]
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80097fa:	f107 0218 	add.w	r2, r7, #24
 80097fe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009802:	2101      	movs	r1, #1
 8009804:	4618      	mov	r0, r3
 8009806:	f7fd fb91 	bl	8006f2c <disk_ioctl>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d001      	beq.n	8009814 <f_mkfs+0x1d0>
 8009810:	2301      	movs	r3, #1
 8009812:	e363      	b.n	8009edc <f_mkfs+0x898>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 8009814:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8009818:	f003 0308 	and.w	r3, r3, #8
 800981c:	2b00      	cmp	r3, #0
 800981e:	d108      	bne.n	8009832 <f_mkfs+0x1ee>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	2b3f      	cmp	r3, #63	@ 0x3f
 8009824:	d905      	bls.n	8009832 <f_mkfs+0x1ee>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 8009826:	233f      	movs	r3, #63	@ 0x3f
 8009828:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800982a:	69ba      	ldr	r2, [r7, #24]
 800982c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800982e:	1ad3      	subs	r3, r2, r3
 8009830:	61bb      	str	r3, [r7, #24]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	2b7f      	cmp	r3, #127	@ 0x7f
 8009836:	d801      	bhi.n	800983c <f_mkfs+0x1f8>
 8009838:	230e      	movs	r3, #14
 800983a:	e34f      	b.n	8009edc <f_mkfs+0x898>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 800983c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800983e:	2b80      	cmp	r3, #128	@ 0x80
 8009840:	d901      	bls.n	8009846 <f_mkfs+0x202>
 8009842:	2380      	movs	r3, #128	@ 0x80
 8009844:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 8009846:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800984a:	f003 0302 	and.w	r3, r3, #2
 800984e:	2b00      	cmp	r3, #0
 8009850:	d009      	beq.n	8009866 <f_mkfs+0x222>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 8009852:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8009856:	f003 0301 	and.w	r3, r3, #1
 800985a:	2b00      	cmp	r3, #0
 800985c:	d103      	bne.n	8009866 <f_mkfs+0x222>
				fsty = FS_FAT32; break;
 800985e:	2303      	movs	r3, #3
 8009860:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8009864:	e00a      	b.n	800987c <f_mkfs+0x238>
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 8009866:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800986a:	f003 0301 	and.w	r3, r3, #1
 800986e:	2b00      	cmp	r3, #0
 8009870:	d101      	bne.n	8009876 <f_mkfs+0x232>
 8009872:	2313      	movs	r3, #19
 8009874:	e332      	b.n	8009edc <f_mkfs+0x898>
		fsty = FS_FAT16;
 8009876:	2302      	movs	r3, #2
 8009878:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	f103 43a8 	add.w	r3, r3, #1409286144	@ 0x54000000
 8009882:	f503 1304 	add.w	r3, r3, #2162688	@ 0x210000
 8009886:	62fb      	str	r3, [r7, #44]	@ 0x2c

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
 8009888:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800988a:	663b      	str	r3, [r7, #96]	@ 0x60
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 800988c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009890:	2b03      	cmp	r3, #3
 8009892:	d141      	bne.n	8009918 <f_mkfs+0x2d4>
				if (pau == 0) {	/* AU auto-selection */
 8009894:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009896:	2b00      	cmp	r3, #0
 8009898:	d120      	bne.n	80098dc <f_mkfs+0x298>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	0c5b      	lsrs	r3, r3, #17
 800989e:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80098a0:	2300      	movs	r3, #0
 80098a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098a4:	2301      	movs	r3, #1
 80098a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80098a8:	e00a      	b.n	80098c0 <f_mkfs+0x27c>
 80098aa:	bf00      	nop
 80098ac:	20005ac0 	.word	0x20005ac0
 80098b0:	080168c8 	.word	0x080168c8
 80098b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098b6:	3301      	adds	r3, #1
 80098b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098bc:	005b      	lsls	r3, r3, #1
 80098be:	663b      	str	r3, [r7, #96]	@ 0x60
 80098c0:	4a95      	ldr	r2, [pc, #596]	@ (8009b18 <f_mkfs+0x4d4>)
 80098c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d007      	beq.n	80098dc <f_mkfs+0x298>
 80098cc:	4a92      	ldr	r2, [pc, #584]	@ (8009b18 <f_mkfs+0x4d4>)
 80098ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098d4:	461a      	mov	r2, r3
 80098d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80098d8:	4293      	cmp	r3, r2
 80098da:	d2eb      	bcs.n	80098b4 <f_mkfs+0x270>
				}
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 80098dc:	69ba      	ldr	r2, [r7, #24]
 80098de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80098e4:	62bb      	str	r3, [r7, #40]	@ 0x28
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80098e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e8:	3302      	adds	r3, #2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	8c3a      	ldrh	r2, [r7, #32]
 80098ee:	4413      	add	r3, r2
 80098f0:	3b01      	subs	r3, #1
 80098f2:	8c3a      	ldrh	r2, [r7, #32]
 80098f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80098f8:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 80098fa:	2320      	movs	r3, #32
 80098fc:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = 0;		/* No static directory */
 80098fe:	2300      	movs	r3, #0
 8009900:	653b      	str	r3, [r7, #80]	@ 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 8009902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009904:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009908:	4293      	cmp	r3, r2
 800990a:	d903      	bls.n	8009914 <f_mkfs+0x2d0>
 800990c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800990e:	4a83      	ldr	r2, [pc, #524]	@ (8009b1c <f_mkfs+0x4d8>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d94b      	bls.n	80099ac <f_mkfs+0x368>
 8009914:	230e      	movs	r3, #14
 8009916:	e2e1      	b.n	8009edc <f_mkfs+0x898>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 8009918:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800991a:	2b00      	cmp	r3, #0
 800991c:	d11b      	bne.n	8009956 <f_mkfs+0x312>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	0b1b      	lsrs	r3, r3, #12
 8009922:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8009924:	2300      	movs	r3, #0
 8009926:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009928:	2301      	movs	r3, #1
 800992a:	663b      	str	r3, [r7, #96]	@ 0x60
 800992c:	e005      	b.n	800993a <f_mkfs+0x2f6>
 800992e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009930:	3301      	adds	r3, #1
 8009932:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009934:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009936:	005b      	lsls	r3, r3, #1
 8009938:	663b      	str	r3, [r7, #96]	@ 0x60
 800993a:	4a79      	ldr	r2, [pc, #484]	@ (8009b20 <f_mkfs+0x4dc>)
 800993c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800993e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d007      	beq.n	8009956 <f_mkfs+0x312>
 8009946:	4a76      	ldr	r2, [pc, #472]	@ (8009b20 <f_mkfs+0x4dc>)
 8009948:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800994a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800994e:	461a      	mov	r2, r3
 8009950:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009952:	4293      	cmp	r3, r2
 8009954:	d2eb      	bcs.n	800992e <f_mkfs+0x2ea>
				}
				n_clst = (DWORD)sz_vol / pau;
 8009956:	69ba      	ldr	r2, [r7, #24]
 8009958:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800995a:	fbb2 f3f3 	udiv	r3, r2, r3
 800995e:	62bb      	str	r3, [r7, #40]	@ 0x28
				if (n_clst > MAX_FAT12) {
 8009960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009962:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009966:	4293      	cmp	r3, r2
 8009968:	d904      	bls.n	8009974 <f_mkfs+0x330>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800996a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800996c:	3302      	adds	r3, #2
 800996e:	005b      	lsls	r3, r3, #1
 8009970:	667b      	str	r3, [r7, #100]	@ 0x64
 8009972:	e00a      	b.n	800998a <f_mkfs+0x346>
				} else {
					fsty = FS_FAT12;
 8009974:	2301      	movs	r3, #1
 8009976:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800997a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800997c:	4613      	mov	r3, r2
 800997e:	005b      	lsls	r3, r3, #1
 8009980:	4413      	add	r3, r2
 8009982:	3301      	adds	r3, #1
 8009984:	085b      	lsrs	r3, r3, #1
 8009986:	3303      	adds	r3, #3
 8009988:	667b      	str	r3, [r7, #100]	@ 0x64
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800998a:	8c3b      	ldrh	r3, [r7, #32]
 800998c:	461a      	mov	r2, r3
 800998e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009990:	4413      	add	r3, r2
 8009992:	3b01      	subs	r3, #1
 8009994:	8c3a      	ldrh	r2, [r7, #32]
 8009996:	fbb3 f3f2 	udiv	r3, r3, r2
 800999a:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 800999c:	2301      	movs	r3, #1
 800999e:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 80099a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a2:	015b      	lsls	r3, r3, #5
 80099a4:	8c3a      	ldrh	r2, [r7, #32]
 80099a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80099aa:	653b      	str	r3, [r7, #80]	@ 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80099ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80099ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80099b0:	4413      	add	r3, r2
 80099b2:	66bb      	str	r3, [r7, #104]	@ 0x68
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 80099b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80099b8:	fb03 f202 	mul.w	r2, r3, r2
 80099bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80099be:	4413      	add	r3, r2
 80099c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80099c2:	4413      	add	r3, r2
 80099c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 80099c6:	69fa      	ldr	r2, [r7, #28]
 80099c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ca:	4413      	add	r3, r2
 80099cc:	1e5a      	subs	r2, r3, #1
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	425b      	negs	r3, r3
 80099d2:	401a      	ands	r2, r3
 80099d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	667b      	str	r3, [r7, #100]	@ 0x64
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 80099da:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80099de:	2b03      	cmp	r3, #3
 80099e0:	d108      	bne.n	80099f4 <f_mkfs+0x3b0>
				sz_rsv += n; b_fat += n;
 80099e2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80099e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099e6:	4413      	add	r3, r2
 80099e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80099ea:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80099ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099ee:	4413      	add	r3, r2
 80099f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80099f2:	e019      	b.n	8009a28 <f_mkfs+0x3e4>
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
 80099f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80099f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80099fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80099fe:	fb01 f202 	mul.w	r2, r1, r2
 8009a02:	1a9b      	subs	r3, r3, r2
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d008      	beq.n	8009a1a <f_mkfs+0x3d6>
					n--; sz_rsv++; b_fat++;
 8009a08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009a0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a10:	3301      	adds	r3, #1
 8009a12:	677b      	str	r3, [r7, #116]	@ 0x74
 8009a14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a16:	3301      	adds	r3, #1
 8009a18:	66bb      	str	r3, [r7, #104]	@ 0x68
				}
				sz_fat += n / n_fat;
 8009a1a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a22:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009a24:	4413      	add	r3, r2
 8009a26:	657b      	str	r3, [r7, #84]	@ 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 8009a28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a2a:	011a      	lsls	r2, r3, #4
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2e:	441a      	add	r2, r3
 8009a30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a32:	1ad2      	subs	r2, r2, r3
 8009a34:	69bb      	ldr	r3, [r7, #24]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d901      	bls.n	8009a3e <f_mkfs+0x3fa>
 8009a3a:	230e      	movs	r3, #14
 8009a3c:	e24e      	b.n	8009edc <f_mkfs+0x898>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 8009a3e:	69ba      	ldr	r2, [r7, #24]
 8009a40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a42:	1ad2      	subs	r2, r2, r3
 8009a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a48:	fb01 f303 	mul.w	r3, r1, r3
 8009a4c:	1ad2      	subs	r2, r2, r3
 8009a4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a50:	1ad2      	subs	r2, r2, r3
 8009a52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a58:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (fsty == FS_FAT32) {
 8009a5a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009a5e:	2b03      	cmp	r3, #3
 8009a60:	d10f      	bne.n	8009a82 <f_mkfs+0x43e>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 8009a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a64:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d80a      	bhi.n	8009a82 <f_mkfs+0x43e>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8009a6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d105      	bne.n	8009a7e <f_mkfs+0x43a>
 8009a72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a74:	085b      	lsrs	r3, r3, #1
 8009a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d145      	bne.n	8009b0a <f_mkfs+0x4c6>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 8009a7e:	230e      	movs	r3, #14
 8009a80:	e22c      	b.n	8009edc <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT16) {
 8009a82:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	d134      	bne.n	8009af4 <f_mkfs+0x4b0>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8009a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a8c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d91f      	bls.n	8009ad4 <f_mkfs+0x490>
					if (sz_au == 0 && (pau * 2) <= 64) {
 8009a94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d107      	bne.n	8009aaa <f_mkfs+0x466>
 8009a9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a9c:	005b      	lsls	r3, r3, #1
 8009a9e:	2b40      	cmp	r3, #64	@ 0x40
 8009aa0:	d803      	bhi.n	8009aaa <f_mkfs+0x466>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 8009aa2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009aa4:	005b      	lsls	r3, r3, #1
 8009aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009aa8:	e034      	b.n	8009b14 <f_mkfs+0x4d0>
					}
					if ((fsopt & FM_FAT32)) {
 8009aaa:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8009aae:	f003 0302 	and.w	r3, r3, #2
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d003      	beq.n	8009abe <f_mkfs+0x47a>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8009abc:	e02a      	b.n	8009b14 <f_mkfs+0x4d0>
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8009abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d105      	bne.n	8009ad0 <f_mkfs+0x48c>
 8009ac4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ac6:	005b      	lsls	r3, r3, #1
 8009ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009acc:	2b80      	cmp	r3, #128	@ 0x80
 8009ace:	d91e      	bls.n	8009b0e <f_mkfs+0x4ca>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 8009ad0:	230e      	movs	r3, #14
 8009ad2:	e203      	b.n	8009edc <f_mkfs+0x898>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8009ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d80a      	bhi.n	8009af4 <f_mkfs+0x4b0>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8009ade:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d105      	bne.n	8009af0 <f_mkfs+0x4ac>
 8009ae4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ae6:	005b      	lsls	r3, r3, #1
 8009ae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009aec:	2b80      	cmp	r3, #128	@ 0x80
 8009aee:	d910      	bls.n	8009b12 <f_mkfs+0x4ce>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 8009af0:	230e      	movs	r3, #14
 8009af2:	e1f3      	b.n	8009edc <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 8009af4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d113      	bne.n	8009b24 <f_mkfs+0x4e0>
 8009afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009afe:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d90e      	bls.n	8009b24 <f_mkfs+0x4e0>
 8009b06:	230e      	movs	r3, #14
 8009b08:	e1e8      	b.n	8009edc <f_mkfs+0x898>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8009b0a:	bf00      	nop
 8009b0c:	e6bc      	b.n	8009888 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8009b0e:	bf00      	nop
 8009b10:	e6ba      	b.n	8009888 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8009b12:	bf00      	nop
			pau = sz_au;
 8009b14:	e6b8      	b.n	8009888 <f_mkfs+0x244>
 8009b16:	bf00      	nop
 8009b18:	080168d8 	.word	0x080168d8
 8009b1c:	0ffffff5 	.word	0x0ffffff5
 8009b20:	080168e8 	.word	0x080168e8

			/* Ok, it is the valid cluster configuration */
			break;
 8009b24:	bf00      	nop
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
 8009b26:	8c3b      	ldrh	r3, [r7, #32]
 8009b28:	461a      	mov	r2, r3
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b2e:	f00b faeb 	bl	8015108 <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 8009b32:	220b      	movs	r2, #11
 8009b34:	49b1      	ldr	r1, [pc, #708]	@ (8009dfc <f_mkfs+0x7b8>)
 8009b36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b38:	f00b fb6a 	bl	8015210 <memcpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8009b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b3e:	330b      	adds	r3, #11
 8009b40:	8c3a      	ldrh	r2, [r7, #32]
 8009b42:	4611      	mov	r1, r2
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fd faaf 	bl	80070a8 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4c:	330d      	adds	r3, #13
 8009b4e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009b50:	b2d2      	uxtb	r2, r2
 8009b52:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8009b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b56:	330e      	adds	r3, #14
 8009b58:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009b5a:	b292      	uxth	r2, r2
 8009b5c:	4611      	mov	r1, r2
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fd faa2 	bl	80070a8 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 8009b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b66:	3310      	adds	r3, #16
 8009b68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009b6a:	b2d2      	uxtb	r2, r2
 8009b6c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 8009b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b70:	f103 0211 	add.w	r2, r3, #17
 8009b74:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009b78:	2b03      	cmp	r3, #3
 8009b7a:	d002      	beq.n	8009b82 <f_mkfs+0x53e>
 8009b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	e000      	b.n	8009b84 <f_mkfs+0x540>
 8009b82:	2300      	movs	r3, #0
 8009b84:	4619      	mov	r1, r3
 8009b86:	4610      	mov	r0, r2
 8009b88:	f7fd fa8e 	bl	80070a8 <st_word>
		if (sz_vol < 0x10000) {
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b92:	d208      	bcs.n	8009ba6 <f_mkfs+0x562>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8009b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b96:	3313      	adds	r3, #19
 8009b98:	69ba      	ldr	r2, [r7, #24]
 8009b9a:	b292      	uxth	r2, r2
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7fd fa82 	bl	80070a8 <st_word>
 8009ba4:	e006      	b.n	8009bb4 <f_mkfs+0x570>
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 8009ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba8:	3320      	adds	r3, #32
 8009baa:	69ba      	ldr	r2, [r7, #24]
 8009bac:	4611      	mov	r1, r2
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7fd fa95 	bl	80070de <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8009bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb6:	3315      	adds	r3, #21
 8009bb8:	22f8      	movs	r2, #248	@ 0xf8
 8009bba:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8009bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bbe:	3318      	adds	r3, #24
 8009bc0:	213f      	movs	r1, #63	@ 0x3f
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7fd fa70 	bl	80070a8 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8009bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bca:	331a      	adds	r3, #26
 8009bcc:	21ff      	movs	r1, #255	@ 0xff
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7fd fa6a 	bl	80070a8 <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 8009bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd6:	331c      	adds	r3, #28
 8009bd8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7fd fa7f 	bl	80070de <st_dword>
		if (fsty == FS_FAT32) {
 8009be0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009be4:	2b03      	cmp	r3, #3
 8009be6:	d12d      	bne.n	8009c44 <f_mkfs+0x600>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 8009be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bea:	3343      	adds	r3, #67	@ 0x43
 8009bec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fd fa75 	bl	80070de <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8009bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf6:	3324      	adds	r3, #36	@ 0x24
 8009bf8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7fd fa6f 	bl	80070de <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8009c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c02:	332c      	adds	r3, #44	@ 0x2c
 8009c04:	2102      	movs	r1, #2
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7fd fa69 	bl	80070de <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8009c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c0e:	3330      	adds	r3, #48	@ 0x30
 8009c10:	2101      	movs	r1, #1
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7fd fa48 	bl	80070a8 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8009c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1a:	3332      	adds	r3, #50	@ 0x32
 8009c1c:	2106      	movs	r1, #6
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fd fa42 	bl	80070a8 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8009c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c26:	3340      	adds	r3, #64	@ 0x40
 8009c28:	2280      	movs	r2, #128	@ 0x80
 8009c2a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8009c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c2e:	3342      	adds	r3, #66	@ 0x42
 8009c30:	2229      	movs	r2, #41	@ 0x29
 8009c32:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8009c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c36:	3347      	adds	r3, #71	@ 0x47
 8009c38:	2213      	movs	r2, #19
 8009c3a:	4971      	ldr	r1, [pc, #452]	@ (8009e00 <f_mkfs+0x7bc>)
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f00b fae7 	bl	8015210 <memcpy>
 8009c42:	e01c      	b.n	8009c7e <f_mkfs+0x63a>
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 8009c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c46:	3327      	adds	r3, #39	@ 0x27
 8009c48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fd fa47 	bl	80070de <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8009c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c52:	3316      	adds	r3, #22
 8009c54:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009c56:	b292      	uxth	r2, r2
 8009c58:	4611      	mov	r1, r2
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7fd fa24 	bl	80070a8 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8009c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c62:	3324      	adds	r3, #36	@ 0x24
 8009c64:	2280      	movs	r2, #128	@ 0x80
 8009c66:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8009c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6a:	3326      	adds	r3, #38	@ 0x26
 8009c6c:	2229      	movs	r2, #41	@ 0x29
 8009c6e:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8009c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c72:	332b      	adds	r3, #43	@ 0x2b
 8009c74:	2213      	movs	r2, #19
 8009c76:	4963      	ldr	r1, [pc, #396]	@ (8009e04 <f_mkfs+0x7c0>)
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f00b fac9 	bl	8015210 <memcpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c80:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009c84:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7fd fa0d 	bl	80070a8 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 8009c8e:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8009c92:	2301      	movs	r3, #1
 8009c94:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009c96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009c98:	f7fd f914 	bl	8006ec4 <disk_write>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d001      	beq.n	8009ca6 <f_mkfs+0x662>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e11a      	b.n	8009edc <f_mkfs+0x898>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 8009ca6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009caa:	2b03      	cmp	r3, #3
 8009cac:	d140      	bne.n	8009d30 <f_mkfs+0x6ec>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8009cae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cb0:	1d9a      	adds	r2, r3, #6
 8009cb2:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009cba:	f7fd f903 	bl	8006ec4 <disk_write>
			memset(buf, 0, ss);
 8009cbe:	8c3b      	ldrh	r3, [r7, #32]
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	2100      	movs	r1, #0
 8009cc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009cc6:	f00b fa1f 	bl	8015108 <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8009cca:	494f      	ldr	r1, [pc, #316]	@ (8009e08 <f_mkfs+0x7c4>)
 8009ccc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009cce:	f7fd fa06 	bl	80070de <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8009cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009cd8:	494c      	ldr	r1, [pc, #304]	@ (8009e0c <f_mkfs+0x7c8>)
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7fd f9ff 	bl	80070de <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8009ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	4619      	mov	r1, r3
 8009cec:	4610      	mov	r0, r2
 8009cee:	f7fd f9f6 	bl	80070de <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8009cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009cf8:	2102      	movs	r1, #2
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fd f9ef 	bl	80070de <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8009d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d02:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009d06:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fd f9cc 	bl	80070a8 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8009d10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d12:	1dda      	adds	r2, r3, #7
 8009d14:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8009d18:	2301      	movs	r3, #1
 8009d1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009d1c:	f7fd f8d2 	bl	8006ec4 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8009d20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d22:	1c5a      	adds	r2, r3, #1
 8009d24:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8009d28:	2301      	movs	r3, #1
 8009d2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009d2c:	f7fd f8ca 	bl	8006ec4 <disk_write>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
 8009d30:	8c3b      	ldrh	r3, [r7, #32]
 8009d32:	461a      	mov	r2, r3
 8009d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d36:	fb02 f303 	mul.w	r3, r2, r3
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d40:	f00b f9e2 	bl	8015108 <memset>
		sect = b_fat;		/* FAT start sector */
 8009d44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d46:	673b      	str	r3, [r7, #112]	@ 0x70
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 8009d48:	2300      	movs	r3, #0
 8009d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d4c:	e04b      	b.n	8009de6 <f_mkfs+0x7a2>
			if (fsty == FS_FAT32) {
 8009d4e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009d52:	2b03      	cmp	r3, #3
 8009d54:	d113      	bne.n	8009d7e <f_mkfs+0x73a>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
 8009d56:	f06f 0107 	mvn.w	r1, #7
 8009d5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d5c:	f7fd f9bf 	bl	80070de <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
 8009d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d62:	3304      	adds	r3, #4
 8009d64:	f04f 31ff 	mov.w	r1, #4294967295
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7fd f9b8 	bl	80070de <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
 8009d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d70:	3308      	adds	r3, #8
 8009d72:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7fd f9b1 	bl	80070de <st_dword>
 8009d7c:	e00b      	b.n	8009d96 <f_mkfs+0x752>
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 8009d7e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d101      	bne.n	8009d8a <f_mkfs+0x746>
 8009d86:	4b22      	ldr	r3, [pc, #136]	@ (8009e10 <f_mkfs+0x7cc>)
 8009d88:	e001      	b.n	8009d8e <f_mkfs+0x74a>
 8009d8a:	f06f 0307 	mvn.w	r3, #7
 8009d8e:	4619      	mov	r1, r3
 8009d90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d92:	f7fd f9a4 	bl	80070de <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8009d96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d98:	65fb      	str	r3, [r7, #92]	@ 0x5c
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8009d9a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	bf28      	it	cs
 8009da2:	4613      	movcs	r3, r2
 8009da4:	667b      	str	r3, [r7, #100]	@ 0x64
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8009da6:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8009daa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009dac:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009dae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009db0:	f7fd f888 	bl	8006ec4 <disk_write>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d001      	beq.n	8009dbe <f_mkfs+0x77a>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e08e      	b.n	8009edc <f_mkfs+0x898>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
 8009dbe:	8c3b      	ldrh	r3, [r7, #32]
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	2100      	movs	r1, #0
 8009dc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009dc6:	f00b f99f 	bl	8015108 <memset>
				sect += n; nsect -= n;
 8009dca:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009dcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009dce:	4413      	add	r3, r2
 8009dd0:	673b      	str	r3, [r7, #112]	@ 0x70
 8009dd2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009dd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009dd6:	1ad3      	subs	r3, r2, r3
 8009dd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
			} while (nsect);
 8009dda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1dc      	bne.n	8009d9a <f_mkfs+0x756>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 8009de0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009de2:	3301      	adds	r3, #1
 8009de4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009de6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d3af      	bcc.n	8009d4e <f_mkfs+0x70a>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8009dee:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009df2:	2b03      	cmp	r3, #3
 8009df4:	d10e      	bne.n	8009e14 <f_mkfs+0x7d0>
 8009df6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009df8:	e00d      	b.n	8009e16 <f_mkfs+0x7d2>
 8009dfa:	bf00      	nop
 8009dfc:	080167c0 	.word	0x080167c0
 8009e00:	080167cc 	.word	0x080167cc
 8009e04:	080167e0 	.word	0x080167e0
 8009e08:	41615252 	.word	0x41615252
 8009e0c:	61417272 	.word	0x61417272
 8009e10:	00fffff8 	.word	0x00fffff8
 8009e14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e16:	65fb      	str	r3, [r7, #92]	@ 0x5c
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8009e18:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	bf28      	it	cs
 8009e20:	4613      	movcs	r3, r2
 8009e22:	667b      	str	r3, [r7, #100]	@ 0x64
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8009e24:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8009e28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e2a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009e2c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009e2e:	f7fd f849 	bl	8006ec4 <disk_write>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d001      	beq.n	8009e3c <f_mkfs+0x7f8>
 8009e38:	2301      	movs	r3, #1
 8009e3a:	e04f      	b.n	8009edc <f_mkfs+0x898>
			sect += n; nsect -= n;
 8009e3c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009e3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e40:	4413      	add	r3, r2
 8009e42:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e44:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009e46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e48:	1ad3      	subs	r3, r2, r3
 8009e4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		} while (nsect);
 8009e4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1e2      	bne.n	8009e18 <f_mkfs+0x7d4>
	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;		/* exFAT */
	} else if (fsty == FS_FAT32) {
 8009e52:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009e56:	2b03      	cmp	r3, #3
 8009e58:	d103      	bne.n	8009e62 <f_mkfs+0x81e>
		sys = 0x0C;		/* FAT32X */
 8009e5a:	230c      	movs	r3, #12
 8009e5c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8009e60:	e012      	b.n	8009e88 <f_mkfs+0x844>
	} else if (sz_vol >= 0x10000) {
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e68:	d303      	bcc.n	8009e72 <f_mkfs+0x82e>
		sys = 0x06;		/* FAT12/16 (large) */
 8009e6a:	2306      	movs	r3, #6
 8009e6c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8009e70:	e00a      	b.n	8009e88 <f_mkfs+0x844>
	} else if (fsty == FS_FAT16) {
 8009e72:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009e76:	2b02      	cmp	r3, #2
 8009e78:	d103      	bne.n	8009e82 <f_mkfs+0x83e>
		sys = 0x04;		/* FAT16 */
 8009e7a:	2304      	movs	r3, #4
 8009e7c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8009e80:	e002      	b.n	8009e88 <f_mkfs+0x844>
	} else {
		sys = 0x01;		/* FAT12 */
 8009e82:	2301      	movs	r3, #1
 8009e84:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 8009e88:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8009e8c:	f003 0308 	and.w	r3, r3, #8
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d116      	bne.n	8009ec2 <f_mkfs+0x87e>
			lba[0] = sz_vol; lba[1] = 0;
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	613b      	str	r3, [r7, #16]
 8009e98:	2300      	movs	r3, #0
 8009e9a:	617b      	str	r3, [r7, #20]
			res = create_partition(pdrv, lba, sys, buf);
 8009e9c:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 8009ea0:	f107 0110 	add.w	r1, r7, #16
 8009ea4:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8009ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eaa:	f7ff faa7 	bl	80093fc <create_partition>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			if (res != FR_OK) LEAVE_MKFS(res);
 8009eb4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d002      	beq.n	8009ec2 <f_mkfs+0x87e>
 8009ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009ec0:	e00c      	b.n	8009edc <f_mkfs+0x898>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8009ec2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	2100      	movs	r1, #0
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7fd f82e 	bl	8006f2c <disk_ioctl>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d001      	beq.n	8009eda <f_mkfs+0x896>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e000      	b.n	8009edc <f_mkfs+0x898>

	LEAVE_MKFS(FR_OK);
 8009eda:	2300      	movs	r3, #0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3778      	adds	r7, #120	@ 0x78
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8009ee4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8009f1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8009ee8:	f7fc ff58 	bl	8006d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009eec:	480c      	ldr	r0, [pc, #48]	@ (8009f20 <LoopForever+0x6>)
  ldr r1, =_edata
 8009eee:	490d      	ldr	r1, [pc, #52]	@ (8009f24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8009f28 <LoopForever+0xe>)
  movs r3, #0
 8009ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009ef4:	e002      	b.n	8009efc <LoopCopyDataInit>

08009ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009efa:	3304      	adds	r3, #4

08009efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009f00:	d3f9      	bcc.n	8009ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009f02:	4a0a      	ldr	r2, [pc, #40]	@ (8009f2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8009f04:	4c0a      	ldr	r4, [pc, #40]	@ (8009f30 <LoopForever+0x16>)
  movs r3, #0
 8009f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009f08:	e001      	b.n	8009f0e <LoopFillZerobss>

08009f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009f0c:	3204      	adds	r2, #4

08009f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009f10:	d3fb      	bcc.n	8009f0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009f12:	f00b f94f 	bl	80151b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009f16:	f7f9 fae7 	bl	80034e8 <main>

08009f1a <LoopForever>:

LoopForever:
    b LoopForever
 8009f1a:	e7fe      	b.n	8009f1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8009f1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8009f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009f24:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8009f28:	08016a58 	.word	0x08016a58
  ldr r2, =_sbss
 8009f2c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8009f30:	20005c18 	.word	0x20005c18

08009f34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009f34:	e7fe      	b.n	8009f34 <ADC1_2_IRQHandler>

08009f36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b082      	sub	sp, #8
 8009f3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009f40:	2003      	movs	r0, #3
 8009f42:	f001 fd11 	bl	800b968 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009f46:	200f      	movs	r0, #15
 8009f48:	f000 f80e 	bl	8009f68 <HAL_InitTick>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d002      	beq.n	8009f58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	71fb      	strb	r3, [r7, #7]
 8009f56:	e001      	b.n	8009f5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009f58:	f7fc fa56 	bl	8006408 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009f5c:	79fb      	ldrb	r3, [r7, #7]
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3708      	adds	r7, #8
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
	...

08009f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009f70:	2300      	movs	r3, #0
 8009f72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8009f74:	4b17      	ldr	r3, [pc, #92]	@ (8009fd4 <HAL_InitTick+0x6c>)
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d023      	beq.n	8009fc4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8009f7c:	4b16      	ldr	r3, [pc, #88]	@ (8009fd8 <HAL_InitTick+0x70>)
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	4b14      	ldr	r3, [pc, #80]	@ (8009fd4 <HAL_InitTick+0x6c>)
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	4619      	mov	r1, r3
 8009f86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f92:	4618      	mov	r0, r3
 8009f94:	f001 fd21 	bl	800b9da <HAL_SYSTICK_Config>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d10f      	bne.n	8009fbe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2b0f      	cmp	r3, #15
 8009fa2:	d809      	bhi.n	8009fb8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	6879      	ldr	r1, [r7, #4]
 8009fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fac:	f001 fce7 	bl	800b97e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8009fdc <HAL_InitTick+0x74>)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6013      	str	r3, [r2, #0]
 8009fb6:	e007      	b.n	8009fc8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	73fb      	strb	r3, [r7, #15]
 8009fbc:	e004      	b.n	8009fc8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	73fb      	strb	r3, [r7, #15]
 8009fc2:	e001      	b.n	8009fc8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8009fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	20000178 	.word	0x20000178
 8009fd8:	20000168 	.word	0x20000168
 8009fdc:	20000174 	.word	0x20000174

08009fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009fe4:	4b06      	ldr	r3, [pc, #24]	@ (800a000 <HAL_IncTick+0x20>)
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	4b06      	ldr	r3, [pc, #24]	@ (800a004 <HAL_IncTick+0x24>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4413      	add	r3, r2
 8009ff0:	4a04      	ldr	r2, [pc, #16]	@ (800a004 <HAL_IncTick+0x24>)
 8009ff2:	6013      	str	r3, [r2, #0]
}
 8009ff4:	bf00      	nop
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	20000178 	.word	0x20000178
 800a004:	20005acc 	.word	0x20005acc

0800a008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a008:	b480      	push	{r7}
 800a00a:	af00      	add	r7, sp, #0
  return uwTick;
 800a00c:	4b03      	ldr	r3, [pc, #12]	@ (800a01c <HAL_GetTick+0x14>)
 800a00e:	681b      	ldr	r3, [r3, #0]
}
 800a010:	4618      	mov	r0, r3
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	20005acc 	.word	0x20005acc

0800a020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a028:	f7ff ffee 	bl	800a008 <HAL_GetTick>
 800a02c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a038:	d005      	beq.n	800a046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800a03a:	4b0a      	ldr	r3, [pc, #40]	@ (800a064 <HAL_Delay+0x44>)
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	461a      	mov	r2, r3
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	4413      	add	r3, r2
 800a044:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a046:	bf00      	nop
 800a048:	f7ff ffde 	bl	800a008 <HAL_GetTick>
 800a04c:	4602      	mov	r2, r0
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	1ad3      	subs	r3, r2, r3
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	429a      	cmp	r2, r3
 800a056:	d8f7      	bhi.n	800a048 <HAL_Delay+0x28>
  {
  }
}
 800a058:	bf00      	nop
 800a05a:	bf00      	nop
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	20000178 	.word	0x20000178

0800a068 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	431a      	orrs	r2, r3
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	609a      	str	r2, [r3, #8]
}
 800a082:	bf00      	nop
 800a084:	370c      	adds	r7, #12
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800a08e:	b480      	push	{r7}
 800a090:	b083      	sub	sp, #12
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	431a      	orrs	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	609a      	str	r2, [r3, #8]
}
 800a0a8:	bf00      	nop
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b087      	sub	sp, #28
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	607a      	str	r2, [r7, #4]
 800a0dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	3360      	adds	r3, #96	@ 0x60
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	4413      	add	r3, r2
 800a0ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	4b08      	ldr	r3, [pc, #32]	@ (800a114 <LL_ADC_SetOffset+0x44>)
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800a0fa:	683a      	ldr	r2, [r7, #0]
 800a0fc:	430a      	orrs	r2, r1
 800a0fe:	4313      	orrs	r3, r2
 800a100:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800a108:	bf00      	nop
 800a10a:	371c      	adds	r7, #28
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr
 800a114:	03fff000 	.word	0x03fff000

0800a118 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800a118:	b480      	push	{r7}
 800a11a:	b085      	sub	sp, #20
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	3360      	adds	r3, #96	@ 0x60
 800a126:	461a      	mov	r2, r3
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	4413      	add	r3, r2
 800a12e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3714      	adds	r7, #20
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800a144:	b480      	push	{r7}
 800a146:	b087      	sub	sp, #28
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	3360      	adds	r3, #96	@ 0x60
 800a154:	461a      	mov	r2, r3
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	4413      	add	r3, r2
 800a15c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	431a      	orrs	r2, r3
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800a16e:	bf00      	nop
 800a170:	371c      	adds	r7, #28
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr

0800a17a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800a17a:	b480      	push	{r7}
 800a17c:	b083      	sub	sp, #12
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d101      	bne.n	800a192 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800a18e:	2301      	movs	r3, #1
 800a190:	e000      	b.n	800a194 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b087      	sub	sp, #28
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	3330      	adds	r3, #48	@ 0x30
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	0a1b      	lsrs	r3, r3, #8
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	f003 030c 	and.w	r3, r3, #12
 800a1bc:	4413      	add	r3, r2
 800a1be:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	f003 031f 	and.w	r3, r3, #31
 800a1ca:	211f      	movs	r1, #31
 800a1cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a1d0:	43db      	mvns	r3, r3
 800a1d2:	401a      	ands	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	0e9b      	lsrs	r3, r3, #26
 800a1d8:	f003 011f 	and.w	r1, r3, #31
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	f003 031f 	and.w	r3, r3, #31
 800a1e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a1e6:	431a      	orrs	r2, r3
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800a1ec:	bf00      	nop
 800a1ee:	371c      	adds	r7, #28
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b087      	sub	sp, #28
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	3314      	adds	r3, #20
 800a208:	461a      	mov	r2, r3
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	0e5b      	lsrs	r3, r3, #25
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	f003 0304 	and.w	r3, r3, #4
 800a214:	4413      	add	r3, r2
 800a216:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	0d1b      	lsrs	r3, r3, #20
 800a220:	f003 031f 	and.w	r3, r3, #31
 800a224:	2107      	movs	r1, #7
 800a226:	fa01 f303 	lsl.w	r3, r1, r3
 800a22a:	43db      	mvns	r3, r3
 800a22c:	401a      	ands	r2, r3
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	0d1b      	lsrs	r3, r3, #20
 800a232:	f003 031f 	and.w	r3, r3, #31
 800a236:	6879      	ldr	r1, [r7, #4]
 800a238:	fa01 f303 	lsl.w	r3, r1, r3
 800a23c:	431a      	orrs	r2, r3
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800a242:	bf00      	nop
 800a244:	371c      	adds	r7, #28
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
	...

0800a250 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a268:	43db      	mvns	r3, r3
 800a26a:	401a      	ands	r2, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f003 0318 	and.w	r3, r3, #24
 800a272:	4908      	ldr	r1, [pc, #32]	@ (800a294 <LL_ADC_SetChannelSingleDiff+0x44>)
 800a274:	40d9      	lsrs	r1, r3
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	400b      	ands	r3, r1
 800a27a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a27e:	431a      	orrs	r2, r3
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800a286:	bf00      	nop
 800a288:	3714      	adds	r7, #20
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	0007ffff 	.word	0x0007ffff

0800a298 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	f003 031f 	and.w	r3, r3, #31
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800a2c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	6093      	str	r3, [r2, #8]
}
 800a2cc:	bf00      	nop
 800a2ce:	370c      	adds	r7, #12
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2ec:	d101      	bne.n	800a2f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e000      	b.n	800a2f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800a2f2:	2300      	movs	r3, #0
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800a310:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a314:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800a31c:	bf00      	nop
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a338:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a33c:	d101      	bne.n	800a342 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800a33e:	2301      	movs	r3, #1
 800a340:	e000      	b.n	800a344 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800a342:	2300      	movs	r3, #0
}
 800a344:	4618      	mov	r0, r3
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a360:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a364:	f043 0201 	orr.w	r2, r3, #1
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800a36c:	bf00      	nop
 800a36e:	370c      	adds	r7, #12
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a388:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a38c:	f043 0202 	orr.w	r2, r3, #2
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800a394:	bf00      	nop
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	f003 0301 	and.w	r3, r3, #1
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d101      	bne.n	800a3b8 <LL_ADC_IsEnabled+0x18>
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e000      	b.n	800a3ba <LL_ADC_IsEnabled+0x1a>
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	370c      	adds	r7, #12
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b083      	sub	sp, #12
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	689b      	ldr	r3, [r3, #8]
 800a3d2:	f003 0302 	and.w	r3, r3, #2
 800a3d6:	2b02      	cmp	r3, #2
 800a3d8:	d101      	bne.n	800a3de <LL_ADC_IsDisableOngoing+0x18>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e000      	b.n	800a3e0 <LL_ADC_IsDisableOngoing+0x1a>
 800a3de:	2300      	movs	r3, #0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	370c      	adds	r7, #12
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr

0800a3ec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a3fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a400:	f043 0204 	orr.w	r2, r3, #4
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800a408:	bf00      	nop
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a424:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a428:	f043 0210 	orr.w	r2, r3, #16
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800a430:	bf00      	nop
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	f003 0304 	and.w	r3, r3, #4
 800a44c:	2b04      	cmp	r3, #4
 800a44e:	d101      	bne.n	800a454 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a450:	2301      	movs	r3, #1
 800a452:	e000      	b.n	800a456 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a454:	2300      	movs	r3, #0
}
 800a456:	4618      	mov	r0, r3
 800a458:	370c      	adds	r7, #12
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr

0800a462 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800a462:	b480      	push	{r7}
 800a464:	b083      	sub	sp, #12
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a472:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a476:	f043 0220 	orr.w	r2, r3, #32
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800a47e:	bf00      	nop
 800a480:	370c      	adds	r7, #12
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr

0800a48a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a48a:	b480      	push	{r7}
 800a48c:	b083      	sub	sp, #12
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	f003 0308 	and.w	r3, r3, #8
 800a49a:	2b08      	cmp	r3, #8
 800a49c:	d101      	bne.n	800a4a2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e000      	b.n	800a4a4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a4b0:	b590      	push	{r4, r7, lr}
 800a4b2:	b089      	sub	sp, #36	@ 0x24
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d101      	bne.n	800a4ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e130      	b.n	800a72c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d109      	bne.n	800a4ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f7fb ffb9 	bl	8006450 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7ff fef1 	bl	800a2d8 <LL_ADC_IsDeepPowerDownEnabled>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d004      	beq.n	800a506 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4618      	mov	r0, r3
 800a502:	f7ff fed7 	bl	800a2b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7ff ff0c 	bl	800a328 <LL_ADC_IsInternalRegulatorEnabled>
 800a510:	4603      	mov	r3, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	d115      	bne.n	800a542 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7ff fef0 	bl	800a300 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a520:	4b84      	ldr	r3, [pc, #528]	@ (800a734 <HAL_ADC_Init+0x284>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	099b      	lsrs	r3, r3, #6
 800a526:	4a84      	ldr	r2, [pc, #528]	@ (800a738 <HAL_ADC_Init+0x288>)
 800a528:	fba2 2303 	umull	r2, r3, r2, r3
 800a52c:	099b      	lsrs	r3, r3, #6
 800a52e:	3301      	adds	r3, #1
 800a530:	005b      	lsls	r3, r3, #1
 800a532:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800a534:	e002      	b.n	800a53c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	3b01      	subs	r3, #1
 800a53a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d1f9      	bne.n	800a536 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4618      	mov	r0, r3
 800a548:	f7ff feee 	bl	800a328 <LL_ADC_IsInternalRegulatorEnabled>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d10d      	bne.n	800a56e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a556:	f043 0210 	orr.w	r2, r3, #16
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a562:	f043 0201 	orr.w	r2, r3, #1
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800a56a:	2301      	movs	r3, #1
 800a56c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4618      	mov	r0, r3
 800a574:	f7ff ff62 	bl	800a43c <LL_ADC_REG_IsConversionOngoing>
 800a578:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a57e:	f003 0310 	and.w	r3, r3, #16
 800a582:	2b00      	cmp	r3, #0
 800a584:	f040 80c9 	bne.w	800a71a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f040 80c5 	bne.w	800a71a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a594:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800a598:	f043 0202 	orr.w	r2, r3, #2
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7ff fefb 	bl	800a3a0 <LL_ADC_IsEnabled>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d115      	bne.n	800a5dc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a5b0:	4862      	ldr	r0, [pc, #392]	@ (800a73c <HAL_ADC_Init+0x28c>)
 800a5b2:	f7ff fef5 	bl	800a3a0 <LL_ADC_IsEnabled>
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	4861      	ldr	r0, [pc, #388]	@ (800a740 <HAL_ADC_Init+0x290>)
 800a5ba:	f7ff fef1 	bl	800a3a0 <LL_ADC_IsEnabled>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	431c      	orrs	r4, r3
 800a5c2:	4860      	ldr	r0, [pc, #384]	@ (800a744 <HAL_ADC_Init+0x294>)
 800a5c4:	f7ff feec 	bl	800a3a0 <LL_ADC_IsEnabled>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	4323      	orrs	r3, r4
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d105      	bne.n	800a5dc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	485c      	ldr	r0, [pc, #368]	@ (800a748 <HAL_ADC_Init+0x298>)
 800a5d8:	f7ff fd46 	bl	800a068 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	7e5b      	ldrb	r3, [r3, #25]
 800a5e0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a5e6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800a5ec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800a5f2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a5fa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a606:	2b01      	cmp	r3, #1
 800a608:	d106      	bne.n	800a618 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a60e:	3b01      	subs	r3, #1
 800a610:	045b      	lsls	r3, r3, #17
 800a612:	69ba      	ldr	r2, [r7, #24]
 800a614:	4313      	orrs	r3, r2
 800a616:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d009      	beq.n	800a634 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a624:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a62c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a62e:	69ba      	ldr	r2, [r7, #24]
 800a630:	4313      	orrs	r3, r2
 800a632:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68da      	ldr	r2, [r3, #12]
 800a63a:	4b44      	ldr	r3, [pc, #272]	@ (800a74c <HAL_ADC_Init+0x29c>)
 800a63c:	4013      	ands	r3, r2
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	6812      	ldr	r2, [r2, #0]
 800a642:	69b9      	ldr	r1, [r7, #24]
 800a644:	430b      	orrs	r3, r1
 800a646:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7ff ff1c 	bl	800a48a <LL_ADC_INJ_IsConversionOngoing>
 800a652:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d13d      	bne.n	800a6d6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d13a      	bne.n	800a6d6 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800a664:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a66c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800a66e:	4313      	orrs	r3, r2
 800a670:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a67c:	f023 0302 	bic.w	r3, r3, #2
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	6812      	ldr	r2, [r2, #0]
 800a684:	69b9      	ldr	r1, [r7, #24]
 800a686:	430b      	orrs	r3, r1
 800a688:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a690:	2b01      	cmp	r3, #1
 800a692:	d118      	bne.n	800a6c6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	691b      	ldr	r3, [r3, #16]
 800a69a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a69e:	f023 0304 	bic.w	r3, r3, #4
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a6aa:	4311      	orrs	r1, r2
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800a6b0:	4311      	orrs	r1, r2
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a6b6:	430a      	orrs	r2, r1
 800a6b8:	431a      	orrs	r2, r3
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f042 0201 	orr.w	r2, r2, #1
 800a6c2:	611a      	str	r2, [r3, #16]
 800a6c4:	e007      	b.n	800a6d6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	691a      	ldr	r2, [r3, #16]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f022 0201 	bic.w	r2, r2, #1
 800a6d4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	691b      	ldr	r3, [r3, #16]
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d10c      	bne.n	800a6f8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6e4:	f023 010f 	bic.w	r1, r3, #15
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	69db      	ldr	r3, [r3, #28]
 800a6ec:	1e5a      	subs	r2, r3, #1
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	430a      	orrs	r2, r1
 800a6f4:	631a      	str	r2, [r3, #48]	@ 0x30
 800a6f6:	e007      	b.n	800a708 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f022 020f 	bic.w	r2, r2, #15
 800a706:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a70c:	f023 0303 	bic.w	r3, r3, #3
 800a710:	f043 0201 	orr.w	r2, r3, #1
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	655a      	str	r2, [r3, #84]	@ 0x54
 800a718:	e007      	b.n	800a72a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a71e:	f043 0210 	orr.w	r2, r3, #16
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800a72a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3724      	adds	r7, #36	@ 0x24
 800a730:	46bd      	mov	sp, r7
 800a732:	bd90      	pop	{r4, r7, pc}
 800a734:	20000168 	.word	0x20000168
 800a738:	053e2d63 	.word	0x053e2d63
 800a73c:	50040000 	.word	0x50040000
 800a740:	50040100 	.word	0x50040100
 800a744:	50040200 	.word	0x50040200
 800a748:	50040300 	.word	0x50040300
 800a74c:	fff0c007 	.word	0xfff0c007

0800a750 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a75c:	4853      	ldr	r0, [pc, #332]	@ (800a8ac <HAL_ADC_Start_DMA+0x15c>)
 800a75e:	f7ff fd9b 	bl	800a298 <LL_ADC_GetMultimode>
 800a762:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4618      	mov	r0, r3
 800a76a:	f7ff fe67 	bl	800a43c <LL_ADC_REG_IsConversionOngoing>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	f040 8093 	bne.w	800a89c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d101      	bne.n	800a784 <HAL_ADC_Start_DMA+0x34>
 800a780:	2302      	movs	r3, #2
 800a782:	e08e      	b.n	800a8a2 <HAL_ADC_Start_DMA+0x152>
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2201      	movs	r2, #1
 800a788:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a47      	ldr	r2, [pc, #284]	@ (800a8b0 <HAL_ADC_Start_DMA+0x160>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d008      	beq.n	800a7a8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d005      	beq.n	800a7a8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	2b05      	cmp	r3, #5
 800a7a0:	d002      	beq.n	800a7a8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	2b09      	cmp	r3, #9
 800a7a6:	d172      	bne.n	800a88e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f000 fda7 	bl	800b2fc <ADC_Enable>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800a7b2:	7dfb      	ldrb	r3, [r7, #23]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d165      	bne.n	800a884 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a7c0:	f023 0301 	bic.w	r3, r3, #1
 800a7c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a38      	ldr	r2, [pc, #224]	@ (800a8b4 <HAL_ADC_Start_DMA+0x164>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d002      	beq.n	800a7dc <HAL_ADC_Start_DMA+0x8c>
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	e000      	b.n	800a7de <HAL_ADC_Start_DMA+0x8e>
 800a7dc:	4b36      	ldr	r3, [pc, #216]	@ (800a8b8 <HAL_ADC_Start_DMA+0x168>)
 800a7de:	68fa      	ldr	r2, [r7, #12]
 800a7e0:	6812      	ldr	r2, [r2, #0]
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d002      	beq.n	800a7ec <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d105      	bne.n	800a7f8 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a800:	2b00      	cmp	r3, #0
 800a802:	d006      	beq.n	800a812 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a808:	f023 0206 	bic.w	r2, r3, #6
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	659a      	str	r2, [r3, #88]	@ 0x58
 800a810:	e002      	b.n	800a818 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2200      	movs	r2, #0
 800a816:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a81c:	4a27      	ldr	r2, [pc, #156]	@ (800a8bc <HAL_ADC_Start_DMA+0x16c>)
 800a81e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a824:	4a26      	ldr	r2, [pc, #152]	@ (800a8c0 <HAL_ADC_Start_DMA+0x170>)
 800a826:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a82c:	4a25      	ldr	r2, [pc, #148]	@ (800a8c4 <HAL_ADC_Start_DMA+0x174>)
 800a82e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	221c      	movs	r2, #28
 800a836:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	685a      	ldr	r2, [r3, #4]
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f042 0210 	orr.w	r2, r2, #16
 800a84e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	68da      	ldr	r2, [r3, #12]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f042 0201 	orr.w	r2, r2, #1
 800a85e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	3340      	adds	r3, #64	@ 0x40
 800a86a:	4619      	mov	r1, r3
 800a86c:	68ba      	ldr	r2, [r7, #8]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f001 fb80 	bl	800bf74 <HAL_DMA_Start_IT>
 800a874:	4603      	mov	r3, r0
 800a876:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7ff fdb5 	bl	800a3ec <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800a882:	e00d      	b.n	800a8a0 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2200      	movs	r2, #0
 800a888:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800a88c:	e008      	b.n	800a8a0 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2200      	movs	r2, #0
 800a896:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800a89a:	e001      	b.n	800a8a0 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a89c:	2302      	movs	r3, #2
 800a89e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800a8a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3718      	adds	r7, #24
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	50040300 	.word	0x50040300
 800a8b0:	50040200 	.word	0x50040200
 800a8b4:	50040100 	.word	0x50040100
 800a8b8:	50040000 	.word	0x50040000
 800a8bc:	0800b4c7 	.word	0x0800b4c7
 800a8c0:	0800b59f 	.word	0x0800b59f
 800a8c4:	0800b5bb 	.word	0x0800b5bb

0800a8c8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d101      	bne.n	800a8de <HAL_ADC_Stop_DMA+0x16>
 800a8da:	2302      	movs	r3, #2
 800a8dc:	e051      	b.n	800a982 <HAL_ADC_Stop_DMA+0xba>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800a8e6:	2103      	movs	r1, #3
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 fc4b 	bl	800b184 <ADC_ConversionStop>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800a8f2:	7bfb      	ldrb	r3, [r7, #15]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d13f      	bne.n	800a978 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	68da      	ldr	r2, [r3, #12]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f022 0201 	bic.w	r2, r2, #1
 800a906:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a90c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a910:	b2db      	uxtb	r3, r3
 800a912:	2b02      	cmp	r3, #2
 800a914:	d10f      	bne.n	800a936 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a91a:	4618      	mov	r0, r3
 800a91c:	f001 fb8a 	bl	800c034 <HAL_DMA_Abort>
 800a920:	4603      	mov	r3, r0
 800a922:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800a924:	7bfb      	ldrb	r3, [r7, #15]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d005      	beq.n	800a936 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a92e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	685a      	ldr	r2, [r3, #4]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f022 0210 	bic.w	r2, r2, #16
 800a944:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800a946:	7bfb      	ldrb	r3, [r7, #15]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d105      	bne.n	800a958 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 fd5b 	bl	800b408 <ADC_Disable>
 800a952:	4603      	mov	r3, r0
 800a954:	73fb      	strb	r3, [r7, #15]
 800a956:	e002      	b.n	800a95e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 fd55 	bl	800b408 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800a95e:	7bfb      	ldrb	r3, [r7, #15]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d109      	bne.n	800a978 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a968:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800a96c:	f023 0301 	bic.w	r3, r3, #1
 800a970:	f043 0201 	orr.w	r2, r3, #1
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800a980:	7bfb      	ldrb	r3, [r7, #15]
}
 800a982:	4618      	mov	r0, r3
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a98a:	b480      	push	{r7}
 800a98c:	b083      	sub	sp, #12
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a992:	bf00      	nop
 800a994:	370c      	adds	r7, #12
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr
	...

0800a9a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b0b6      	sub	sp, #216	@ 0xd8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d101      	bne.n	800a9c2 <HAL_ADC_ConfigChannel+0x22>
 800a9be:	2302      	movs	r3, #2
 800a9c0:	e3c9      	b.n	800b156 <HAL_ADC_ConfigChannel+0x7b6>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7ff fd34 	bl	800a43c <LL_ADC_REG_IsConversionOngoing>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f040 83aa 	bne.w	800b130 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	2b05      	cmp	r3, #5
 800a9ea:	d824      	bhi.n	800aa36 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	3b02      	subs	r3, #2
 800a9f2:	2b03      	cmp	r3, #3
 800a9f4:	d81b      	bhi.n	800aa2e <HAL_ADC_ConfigChannel+0x8e>
 800a9f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a9fc <HAL_ADC_ConfigChannel+0x5c>)
 800a9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fc:	0800aa0d 	.word	0x0800aa0d
 800aa00:	0800aa15 	.word	0x0800aa15
 800aa04:	0800aa1d 	.word	0x0800aa1d
 800aa08:	0800aa25 	.word	0x0800aa25
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800aa0c:	230c      	movs	r3, #12
 800aa0e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800aa12:	e010      	b.n	800aa36 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800aa14:	2312      	movs	r3, #18
 800aa16:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800aa1a:	e00c      	b.n	800aa36 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800aa1c:	2318      	movs	r3, #24
 800aa1e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800aa22:	e008      	b.n	800aa36 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800aa24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800aa2c:	e003      	b.n	800aa36 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800aa2e:	2306      	movs	r3, #6
 800aa30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800aa34:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6818      	ldr	r0, [r3, #0]
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	461a      	mov	r2, r3
 800aa40:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800aa44:	f7ff fbac 	bl	800a1a0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7ff fcf5 	bl	800a43c <LL_ADC_REG_IsConversionOngoing>
 800aa52:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7ff fd15 	bl	800a48a <LL_ADC_INJ_IsConversionOngoing>
 800aa60:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800aa64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	f040 81a4 	bne.w	800adb6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800aa6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	f040 819f 	bne.w	800adb6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6818      	ldr	r0, [r3, #0]
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	6819      	ldr	r1, [r3, #0]
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	461a      	mov	r2, r3
 800aa86:	f7ff fbb7 	bl	800a1f8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	695a      	ldr	r2, [r3, #20]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	08db      	lsrs	r3, r3, #3
 800aa96:	f003 0303 	and.w	r3, r3, #3
 800aa9a:	005b      	lsls	r3, r3, #1
 800aa9c:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	691b      	ldr	r3, [r3, #16]
 800aaa8:	2b04      	cmp	r3, #4
 800aaaa:	d00a      	beq.n	800aac2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6818      	ldr	r0, [r3, #0]
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	6919      	ldr	r1, [r3, #16]
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aabc:	f7ff fb08 	bl	800a0d0 <LL_ADC_SetOffset>
 800aac0:	e179      	b.n	800adb6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2100      	movs	r1, #0
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7ff fb25 	bl	800a118 <LL_ADC_GetOffsetChannel>
 800aace:	4603      	mov	r3, r0
 800aad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d10a      	bne.n	800aaee <HAL_ADC_ConfigChannel+0x14e>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2100      	movs	r1, #0
 800aade:	4618      	mov	r0, r3
 800aae0:	f7ff fb1a 	bl	800a118 <LL_ADC_GetOffsetChannel>
 800aae4:	4603      	mov	r3, r0
 800aae6:	0e9b      	lsrs	r3, r3, #26
 800aae8:	f003 021f 	and.w	r2, r3, #31
 800aaec:	e01e      	b.n	800ab2c <HAL_ADC_ConfigChannel+0x18c>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7ff fb0f 	bl	800a118 <LL_ADC_GetOffsetChannel>
 800aafa:	4603      	mov	r3, r0
 800aafc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ab04:	fa93 f3a3 	rbit	r3, r3
 800ab08:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800ab0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ab10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800ab14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d101      	bne.n	800ab20 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800ab1c:	2320      	movs	r3, #32
 800ab1e:	e004      	b.n	800ab2a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800ab20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ab24:	fab3 f383 	clz	r3, r3
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d105      	bne.n	800ab44 <HAL_ADC_ConfigChannel+0x1a4>
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	0e9b      	lsrs	r3, r3, #26
 800ab3e:	f003 031f 	and.w	r3, r3, #31
 800ab42:	e018      	b.n	800ab76 <HAL_ADC_ConfigChannel+0x1d6>
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab50:	fa93 f3a3 	rbit	r3, r3
 800ab54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800ab58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ab5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800ab60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d101      	bne.n	800ab6c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800ab68:	2320      	movs	r3, #32
 800ab6a:	e004      	b.n	800ab76 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800ab6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ab70:	fab3 f383 	clz	r3, r3
 800ab74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d106      	bne.n	800ab88 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	2100      	movs	r1, #0
 800ab82:	4618      	mov	r0, r3
 800ab84:	f7ff fade 	bl	800a144 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2101      	movs	r1, #1
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7ff fac2 	bl	800a118 <LL_ADC_GetOffsetChannel>
 800ab94:	4603      	mov	r3, r0
 800ab96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10a      	bne.n	800abb4 <HAL_ADC_ConfigChannel+0x214>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	2101      	movs	r1, #1
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7ff fab7 	bl	800a118 <LL_ADC_GetOffsetChannel>
 800abaa:	4603      	mov	r3, r0
 800abac:	0e9b      	lsrs	r3, r3, #26
 800abae:	f003 021f 	and.w	r2, r3, #31
 800abb2:	e01e      	b.n	800abf2 <HAL_ADC_ConfigChannel+0x252>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	2101      	movs	r1, #1
 800abba:	4618      	mov	r0, r3
 800abbc:	f7ff faac 	bl	800a118 <LL_ADC_GetOffsetChannel>
 800abc0:	4603      	mov	r3, r0
 800abc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800abca:	fa93 f3a3 	rbit	r3, r3
 800abce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800abd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800abd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800abda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d101      	bne.n	800abe6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800abe2:	2320      	movs	r3, #32
 800abe4:	e004      	b.n	800abf0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800abe6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800abea:	fab3 f383 	clz	r3, r3
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d105      	bne.n	800ac0a <HAL_ADC_ConfigChannel+0x26a>
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	0e9b      	lsrs	r3, r3, #26
 800ac04:	f003 031f 	and.w	r3, r3, #31
 800ac08:	e018      	b.n	800ac3c <HAL_ADC_ConfigChannel+0x29c>
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac12:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ac16:	fa93 f3a3 	rbit	r3, r3
 800ac1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800ac1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ac22:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800ac26:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d101      	bne.n	800ac32 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800ac2e:	2320      	movs	r3, #32
 800ac30:	e004      	b.n	800ac3c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800ac32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac36:	fab3 f383 	clz	r3, r3
 800ac3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d106      	bne.n	800ac4e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2200      	movs	r2, #0
 800ac46:	2101      	movs	r1, #1
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7ff fa7b 	bl	800a144 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2102      	movs	r1, #2
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7ff fa5f 	bl	800a118 <LL_ADC_GetOffsetChannel>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d10a      	bne.n	800ac7a <HAL_ADC_ConfigChannel+0x2da>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2102      	movs	r1, #2
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7ff fa54 	bl	800a118 <LL_ADC_GetOffsetChannel>
 800ac70:	4603      	mov	r3, r0
 800ac72:	0e9b      	lsrs	r3, r3, #26
 800ac74:	f003 021f 	and.w	r2, r3, #31
 800ac78:	e01e      	b.n	800acb8 <HAL_ADC_ConfigChannel+0x318>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2102      	movs	r1, #2
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7ff fa49 	bl	800a118 <LL_ADC_GetOffsetChannel>
 800ac86:	4603      	mov	r3, r0
 800ac88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ac90:	fa93 f3a3 	rbit	r3, r3
 800ac94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800ac98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ac9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800aca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d101      	bne.n	800acac <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800aca8:	2320      	movs	r3, #32
 800acaa:	e004      	b.n	800acb6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800acac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800acb0:	fab3 f383 	clz	r3, r3
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d105      	bne.n	800acd0 <HAL_ADC_ConfigChannel+0x330>
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	0e9b      	lsrs	r3, r3, #26
 800acca:	f003 031f 	and.w	r3, r3, #31
 800acce:	e014      	b.n	800acfa <HAL_ADC_ConfigChannel+0x35a>
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800acd6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800acd8:	fa93 f3a3 	rbit	r3, r3
 800acdc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800acde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ace0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800ace4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d101      	bne.n	800acf0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800acec:	2320      	movs	r3, #32
 800acee:	e004      	b.n	800acfa <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800acf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800acf4:	fab3 f383 	clz	r3, r3
 800acf8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d106      	bne.n	800ad0c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	2200      	movs	r2, #0
 800ad04:	2102      	movs	r1, #2
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7ff fa1c 	bl	800a144 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2103      	movs	r1, #3
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7ff fa00 	bl	800a118 <LL_ADC_GetOffsetChannel>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d10a      	bne.n	800ad38 <HAL_ADC_ConfigChannel+0x398>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	2103      	movs	r1, #3
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7ff f9f5 	bl	800a118 <LL_ADC_GetOffsetChannel>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	0e9b      	lsrs	r3, r3, #26
 800ad32:	f003 021f 	and.w	r2, r3, #31
 800ad36:	e017      	b.n	800ad68 <HAL_ADC_ConfigChannel+0x3c8>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2103      	movs	r1, #3
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7ff f9ea 	bl	800a118 <LL_ADC_GetOffsetChannel>
 800ad44:	4603      	mov	r3, r0
 800ad46:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ad4a:	fa93 f3a3 	rbit	r3, r3
 800ad4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800ad50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad52:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800ad54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d101      	bne.n	800ad5e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800ad5a:	2320      	movs	r3, #32
 800ad5c:	e003      	b.n	800ad66 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800ad5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ad60:	fab3 f383 	clz	r3, r3
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d105      	bne.n	800ad80 <HAL_ADC_ConfigChannel+0x3e0>
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	0e9b      	lsrs	r3, r3, #26
 800ad7a:	f003 031f 	and.w	r3, r3, #31
 800ad7e:	e011      	b.n	800ada4 <HAL_ADC_ConfigChannel+0x404>
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad88:	fa93 f3a3 	rbit	r3, r3
 800ad8c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800ad8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad90:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800ad92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d101      	bne.n	800ad9c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800ad98:	2320      	movs	r3, #32
 800ad9a:	e003      	b.n	800ada4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800ad9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ad9e:	fab3 f383 	clz	r3, r3
 800ada2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d106      	bne.n	800adb6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2200      	movs	r2, #0
 800adae:	2103      	movs	r1, #3
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7ff f9c7 	bl	800a144 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4618      	mov	r0, r3
 800adbc:	f7ff faf0 	bl	800a3a0 <LL_ADC_IsEnabled>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f040 8140 	bne.w	800b048 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6818      	ldr	r0, [r3, #0]
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	6819      	ldr	r1, [r3, #0]
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	461a      	mov	r2, r3
 800add6:	f7ff fa3b 	bl	800a250 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	4a8f      	ldr	r2, [pc, #572]	@ (800b01c <HAL_ADC_ConfigChannel+0x67c>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	f040 8131 	bne.w	800b048 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d10b      	bne.n	800ae0e <HAL_ADC_ConfigChannel+0x46e>
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	0e9b      	lsrs	r3, r3, #26
 800adfc:	3301      	adds	r3, #1
 800adfe:	f003 031f 	and.w	r3, r3, #31
 800ae02:	2b09      	cmp	r3, #9
 800ae04:	bf94      	ite	ls
 800ae06:	2301      	movls	r3, #1
 800ae08:	2300      	movhi	r3, #0
 800ae0a:	b2db      	uxtb	r3, r3
 800ae0c:	e019      	b.n	800ae42 <HAL_ADC_ConfigChannel+0x4a2>
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae16:	fa93 f3a3 	rbit	r3, r3
 800ae1a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800ae1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800ae20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d101      	bne.n	800ae2a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800ae26:	2320      	movs	r3, #32
 800ae28:	e003      	b.n	800ae32 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800ae2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae2c:	fab3 f383 	clz	r3, r3
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	3301      	adds	r3, #1
 800ae34:	f003 031f 	and.w	r3, r3, #31
 800ae38:	2b09      	cmp	r3, #9
 800ae3a:	bf94      	ite	ls
 800ae3c:	2301      	movls	r3, #1
 800ae3e:	2300      	movhi	r3, #0
 800ae40:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d079      	beq.n	800af3a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d107      	bne.n	800ae62 <HAL_ADC_ConfigChannel+0x4c2>
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	0e9b      	lsrs	r3, r3, #26
 800ae58:	3301      	adds	r3, #1
 800ae5a:	069b      	lsls	r3, r3, #26
 800ae5c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ae60:	e015      	b.n	800ae8e <HAL_ADC_ConfigChannel+0x4ee>
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae6a:	fa93 f3a3 	rbit	r3, r3
 800ae6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800ae70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae72:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800ae74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d101      	bne.n	800ae7e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800ae7a:	2320      	movs	r3, #32
 800ae7c:	e003      	b.n	800ae86 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800ae7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae80:	fab3 f383 	clz	r3, r3
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	3301      	adds	r3, #1
 800ae88:	069b      	lsls	r3, r3, #26
 800ae8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d109      	bne.n	800aeae <HAL_ADC_ConfigChannel+0x50e>
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	0e9b      	lsrs	r3, r3, #26
 800aea0:	3301      	adds	r3, #1
 800aea2:	f003 031f 	and.w	r3, r3, #31
 800aea6:	2101      	movs	r1, #1
 800aea8:	fa01 f303 	lsl.w	r3, r1, r3
 800aeac:	e017      	b.n	800aede <HAL_ADC_ConfigChannel+0x53e>
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aeb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aeb6:	fa93 f3a3 	rbit	r3, r3
 800aeba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800aebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aebe:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800aec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d101      	bne.n	800aeca <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800aec6:	2320      	movs	r3, #32
 800aec8:	e003      	b.n	800aed2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800aeca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aecc:	fab3 f383 	clz	r3, r3
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	3301      	adds	r3, #1
 800aed4:	f003 031f 	and.w	r3, r3, #31
 800aed8:	2101      	movs	r1, #1
 800aeda:	fa01 f303 	lsl.w	r3, r1, r3
 800aede:	ea42 0103 	orr.w	r1, r2, r3
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d10a      	bne.n	800af04 <HAL_ADC_ConfigChannel+0x564>
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	0e9b      	lsrs	r3, r3, #26
 800aef4:	3301      	adds	r3, #1
 800aef6:	f003 021f 	and.w	r2, r3, #31
 800aefa:	4613      	mov	r3, r2
 800aefc:	005b      	lsls	r3, r3, #1
 800aefe:	4413      	add	r3, r2
 800af00:	051b      	lsls	r3, r3, #20
 800af02:	e018      	b.n	800af36 <HAL_ADC_ConfigChannel+0x596>
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af0c:	fa93 f3a3 	rbit	r3, r3
 800af10:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800af12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af14:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800af16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d101      	bne.n	800af20 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800af1c:	2320      	movs	r3, #32
 800af1e:	e003      	b.n	800af28 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800af20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af22:	fab3 f383 	clz	r3, r3
 800af26:	b2db      	uxtb	r3, r3
 800af28:	3301      	adds	r3, #1
 800af2a:	f003 021f 	and.w	r2, r3, #31
 800af2e:	4613      	mov	r3, r2
 800af30:	005b      	lsls	r3, r3, #1
 800af32:	4413      	add	r3, r2
 800af34:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800af36:	430b      	orrs	r3, r1
 800af38:	e081      	b.n	800b03e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af42:	2b00      	cmp	r3, #0
 800af44:	d107      	bne.n	800af56 <HAL_ADC_ConfigChannel+0x5b6>
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	0e9b      	lsrs	r3, r3, #26
 800af4c:	3301      	adds	r3, #1
 800af4e:	069b      	lsls	r3, r3, #26
 800af50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800af54:	e015      	b.n	800af82 <HAL_ADC_ConfigChannel+0x5e2>
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af5e:	fa93 f3a3 	rbit	r3, r3
 800af62:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800af64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800af68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d101      	bne.n	800af72 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800af6e:	2320      	movs	r3, #32
 800af70:	e003      	b.n	800af7a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800af72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af74:	fab3 f383 	clz	r3, r3
 800af78:	b2db      	uxtb	r3, r3
 800af7a:	3301      	adds	r3, #1
 800af7c:	069b      	lsls	r3, r3, #26
 800af7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d109      	bne.n	800afa2 <HAL_ADC_ConfigChannel+0x602>
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	0e9b      	lsrs	r3, r3, #26
 800af94:	3301      	adds	r3, #1
 800af96:	f003 031f 	and.w	r3, r3, #31
 800af9a:	2101      	movs	r1, #1
 800af9c:	fa01 f303 	lsl.w	r3, r1, r3
 800afa0:	e017      	b.n	800afd2 <HAL_ADC_ConfigChannel+0x632>
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	fa93 f3a3 	rbit	r3, r3
 800afae:	61bb      	str	r3, [r7, #24]
  return result;
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800afb4:	6a3b      	ldr	r3, [r7, #32]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d101      	bne.n	800afbe <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800afba:	2320      	movs	r3, #32
 800afbc:	e003      	b.n	800afc6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800afbe:	6a3b      	ldr	r3, [r7, #32]
 800afc0:	fab3 f383 	clz	r3, r3
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	3301      	adds	r3, #1
 800afc8:	f003 031f 	and.w	r3, r3, #31
 800afcc:	2101      	movs	r1, #1
 800afce:	fa01 f303 	lsl.w	r3, r1, r3
 800afd2:	ea42 0103 	orr.w	r1, r2, r3
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d10d      	bne.n	800affe <HAL_ADC_ConfigChannel+0x65e>
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	0e9b      	lsrs	r3, r3, #26
 800afe8:	3301      	adds	r3, #1
 800afea:	f003 021f 	and.w	r2, r3, #31
 800afee:	4613      	mov	r3, r2
 800aff0:	005b      	lsls	r3, r3, #1
 800aff2:	4413      	add	r3, r2
 800aff4:	3b1e      	subs	r3, #30
 800aff6:	051b      	lsls	r3, r3, #20
 800aff8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800affc:	e01e      	b.n	800b03c <HAL_ADC_ConfigChannel+0x69c>
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	fa93 f3a3 	rbit	r3, r3
 800b00a:	60fb      	str	r3, [r7, #12]
  return result;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d104      	bne.n	800b020 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800b016:	2320      	movs	r3, #32
 800b018:	e006      	b.n	800b028 <HAL_ADC_ConfigChannel+0x688>
 800b01a:	bf00      	nop
 800b01c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	fab3 f383 	clz	r3, r3
 800b026:	b2db      	uxtb	r3, r3
 800b028:	3301      	adds	r3, #1
 800b02a:	f003 021f 	and.w	r2, r3, #31
 800b02e:	4613      	mov	r3, r2
 800b030:	005b      	lsls	r3, r3, #1
 800b032:	4413      	add	r3, r2
 800b034:	3b1e      	subs	r3, #30
 800b036:	051b      	lsls	r3, r3, #20
 800b038:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b03c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800b03e:	683a      	ldr	r2, [r7, #0]
 800b040:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b042:	4619      	mov	r1, r3
 800b044:	f7ff f8d8 	bl	800a1f8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	4b44      	ldr	r3, [pc, #272]	@ (800b160 <HAL_ADC_ConfigChannel+0x7c0>)
 800b04e:	4013      	ands	r3, r2
 800b050:	2b00      	cmp	r3, #0
 800b052:	d07a      	beq.n	800b14a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b054:	4843      	ldr	r0, [pc, #268]	@ (800b164 <HAL_ADC_ConfigChannel+0x7c4>)
 800b056:	f7ff f82d 	bl	800a0b4 <LL_ADC_GetCommonPathInternalCh>
 800b05a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a41      	ldr	r2, [pc, #260]	@ (800b168 <HAL_ADC_ConfigChannel+0x7c8>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d12c      	bne.n	800b0c2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800b068:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b06c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b070:	2b00      	cmp	r3, #0
 800b072:	d126      	bne.n	800b0c2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4a3c      	ldr	r2, [pc, #240]	@ (800b16c <HAL_ADC_ConfigChannel+0x7cc>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d004      	beq.n	800b088 <HAL_ADC_ConfigChannel+0x6e8>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4a3b      	ldr	r2, [pc, #236]	@ (800b170 <HAL_ADC_ConfigChannel+0x7d0>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d15d      	bne.n	800b144 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b088:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b08c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b090:	4619      	mov	r1, r3
 800b092:	4834      	ldr	r0, [pc, #208]	@ (800b164 <HAL_ADC_ConfigChannel+0x7c4>)
 800b094:	f7fe fffb 	bl	800a08e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b098:	4b36      	ldr	r3, [pc, #216]	@ (800b174 <HAL_ADC_ConfigChannel+0x7d4>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	099b      	lsrs	r3, r3, #6
 800b09e:	4a36      	ldr	r2, [pc, #216]	@ (800b178 <HAL_ADC_ConfigChannel+0x7d8>)
 800b0a0:	fba2 2303 	umull	r2, r3, r2, r3
 800b0a4:	099b      	lsrs	r3, r3, #6
 800b0a6:	1c5a      	adds	r2, r3, #1
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	005b      	lsls	r3, r3, #1
 800b0ac:	4413      	add	r3, r2
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800b0b2:	e002      	b.n	800b0ba <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	3b01      	subs	r3, #1
 800b0b8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1f9      	bne.n	800b0b4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b0c0:	e040      	b.n	800b144 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a2d      	ldr	r2, [pc, #180]	@ (800b17c <HAL_ADC_ConfigChannel+0x7dc>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d118      	bne.n	800b0fe <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800b0cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b0d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d112      	bne.n	800b0fe <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4a23      	ldr	r2, [pc, #140]	@ (800b16c <HAL_ADC_ConfigChannel+0x7cc>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d004      	beq.n	800b0ec <HAL_ADC_ConfigChannel+0x74c>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4a22      	ldr	r2, [pc, #136]	@ (800b170 <HAL_ADC_ConfigChannel+0x7d0>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d12d      	bne.n	800b148 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b0ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b0f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	481b      	ldr	r0, [pc, #108]	@ (800b164 <HAL_ADC_ConfigChannel+0x7c4>)
 800b0f8:	f7fe ffc9 	bl	800a08e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b0fc:	e024      	b.n	800b148 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a1f      	ldr	r2, [pc, #124]	@ (800b180 <HAL_ADC_ConfigChannel+0x7e0>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d120      	bne.n	800b14a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800b108:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b10c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b110:	2b00      	cmp	r3, #0
 800b112:	d11a      	bne.n	800b14a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a14      	ldr	r2, [pc, #80]	@ (800b16c <HAL_ADC_ConfigChannel+0x7cc>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d115      	bne.n	800b14a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b11e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b122:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b126:	4619      	mov	r1, r3
 800b128:	480e      	ldr	r0, [pc, #56]	@ (800b164 <HAL_ADC_ConfigChannel+0x7c4>)
 800b12a:	f7fe ffb0 	bl	800a08e <LL_ADC_SetCommonPathInternalCh>
 800b12e:	e00c      	b.n	800b14a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b134:	f043 0220 	orr.w	r2, r3, #32
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800b13c:	2301      	movs	r3, #1
 800b13e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800b142:	e002      	b.n	800b14a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b144:	bf00      	nop
 800b146:	e000      	b.n	800b14a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b148:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2200      	movs	r2, #0
 800b14e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800b152:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800b156:	4618      	mov	r0, r3
 800b158:	37d8      	adds	r7, #216	@ 0xd8
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	80080000 	.word	0x80080000
 800b164:	50040300 	.word	0x50040300
 800b168:	c7520000 	.word	0xc7520000
 800b16c:	50040000 	.word	0x50040000
 800b170:	50040200 	.word	0x50040200
 800b174:	20000168 	.word	0x20000168
 800b178:	053e2d63 	.word	0x053e2d63
 800b17c:	cb840000 	.word	0xcb840000
 800b180:	80000001 	.word	0x80000001

0800b184 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b088      	sub	sp, #32
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800b18e:	2300      	movs	r3, #0
 800b190:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7ff f94e 	bl	800a43c <LL_ADC_REG_IsConversionOngoing>
 800b1a0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7ff f96f 	bl	800a48a <LL_ADC_INJ_IsConversionOngoing>
 800b1ac:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d103      	bne.n	800b1bc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	f000 8098 	beq.w	800b2ec <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	68db      	ldr	r3, [r3, #12]
 800b1c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d02a      	beq.n	800b220 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	7e5b      	ldrb	r3, [r3, #25]
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d126      	bne.n	800b220 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	7e1b      	ldrb	r3, [r3, #24]
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d122      	bne.n	800b220 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800b1de:	e014      	b.n	800b20a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800b1e0:	69fb      	ldr	r3, [r7, #28]
 800b1e2:	4a45      	ldr	r2, [pc, #276]	@ (800b2f8 <ADC_ConversionStop+0x174>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d90d      	bls.n	800b204 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1ec:	f043 0210 	orr.w	r2, r3, #16
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1f8:	f043 0201 	orr.w	r2, r3, #1
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800b200:	2301      	movs	r3, #1
 800b202:	e074      	b.n	800b2ee <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	3301      	adds	r3, #1
 800b208:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b214:	2b40      	cmp	r3, #64	@ 0x40
 800b216:	d1e3      	bne.n	800b1e0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	2240      	movs	r2, #64	@ 0x40
 800b21e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	2b02      	cmp	r3, #2
 800b224:	d014      	beq.n	800b250 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7ff f906 	bl	800a43c <LL_ADC_REG_IsConversionOngoing>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d00c      	beq.n	800b250 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7ff f8c3 	bl	800a3c6 <LL_ADC_IsDisableOngoing>
 800b240:	4603      	mov	r3, r0
 800b242:	2b00      	cmp	r3, #0
 800b244:	d104      	bne.n	800b250 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7ff f8e2 	bl	800a414 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800b250:	69bb      	ldr	r3, [r7, #24]
 800b252:	2b01      	cmp	r3, #1
 800b254:	d014      	beq.n	800b280 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7ff f915 	bl	800a48a <LL_ADC_INJ_IsConversionOngoing>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d00c      	beq.n	800b280 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7ff f8ab 	bl	800a3c6 <LL_ADC_IsDisableOngoing>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d104      	bne.n	800b280 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7ff f8f1 	bl	800a462 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	2b02      	cmp	r3, #2
 800b284:	d005      	beq.n	800b292 <ADC_ConversionStop+0x10e>
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	2b03      	cmp	r3, #3
 800b28a:	d105      	bne.n	800b298 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800b28c:	230c      	movs	r3, #12
 800b28e:	617b      	str	r3, [r7, #20]
        break;
 800b290:	e005      	b.n	800b29e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800b292:	2308      	movs	r3, #8
 800b294:	617b      	str	r3, [r7, #20]
        break;
 800b296:	e002      	b.n	800b29e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800b298:	2304      	movs	r3, #4
 800b29a:	617b      	str	r3, [r7, #20]
        break;
 800b29c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800b29e:	f7fe feb3 	bl	800a008 <HAL_GetTick>
 800b2a2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800b2a4:	e01b      	b.n	800b2de <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800b2a6:	f7fe feaf 	bl	800a008 <HAL_GetTick>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	1ad3      	subs	r3, r2, r3
 800b2b0:	2b05      	cmp	r3, #5
 800b2b2:	d914      	bls.n	800b2de <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	689a      	ldr	r2, [r3, #8]
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	4013      	ands	r3, r2
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d00d      	beq.n	800b2de <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2c6:	f043 0210 	orr.w	r2, r3, #16
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2d2:	f043 0201 	orr.w	r2, r3, #1
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800b2da:	2301      	movs	r3, #1
 800b2dc:	e007      	b.n	800b2ee <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	689a      	ldr	r2, [r3, #8]
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	4013      	ands	r3, r2
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d1dc      	bne.n	800b2a6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800b2ec:	2300      	movs	r3, #0
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3720      	adds	r7, #32
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	a33fffff 	.word	0xa33fffff

0800b2fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800b304:	2300      	movs	r3, #0
 800b306:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7ff f847 	bl	800a3a0 <LL_ADC_IsEnabled>
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d169      	bne.n	800b3ec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	689a      	ldr	r2, [r3, #8]
 800b31e:	4b36      	ldr	r3, [pc, #216]	@ (800b3f8 <ADC_Enable+0xfc>)
 800b320:	4013      	ands	r3, r2
 800b322:	2b00      	cmp	r3, #0
 800b324:	d00d      	beq.n	800b342 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b32a:	f043 0210 	orr.w	r2, r3, #16
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b336:	f043 0201 	orr.w	r2, r3, #1
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800b33e:	2301      	movs	r3, #1
 800b340:	e055      	b.n	800b3ee <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4618      	mov	r0, r3
 800b348:	f7ff f802 	bl	800a350 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800b34c:	482b      	ldr	r0, [pc, #172]	@ (800b3fc <ADC_Enable+0x100>)
 800b34e:	f7fe feb1 	bl	800a0b4 <LL_ADC_GetCommonPathInternalCh>
 800b352:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800b354:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d013      	beq.n	800b384 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b35c:	4b28      	ldr	r3, [pc, #160]	@ (800b400 <ADC_Enable+0x104>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	099b      	lsrs	r3, r3, #6
 800b362:	4a28      	ldr	r2, [pc, #160]	@ (800b404 <ADC_Enable+0x108>)
 800b364:	fba2 2303 	umull	r2, r3, r2, r3
 800b368:	099b      	lsrs	r3, r3, #6
 800b36a:	1c5a      	adds	r2, r3, #1
 800b36c:	4613      	mov	r3, r2
 800b36e:	005b      	lsls	r3, r3, #1
 800b370:	4413      	add	r3, r2
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800b376:	e002      	b.n	800b37e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	3b01      	subs	r3, #1
 800b37c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d1f9      	bne.n	800b378 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800b384:	f7fe fe40 	bl	800a008 <HAL_GetTick>
 800b388:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b38a:	e028      	b.n	800b3de <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4618      	mov	r0, r3
 800b392:	f7ff f805 	bl	800a3a0 <LL_ADC_IsEnabled>
 800b396:	4603      	mov	r3, r0
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d104      	bne.n	800b3a6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7fe ffd5 	bl	800a350 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b3a6:	f7fe fe2f 	bl	800a008 <HAL_GetTick>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	1ad3      	subs	r3, r2, r3
 800b3b0:	2b02      	cmp	r3, #2
 800b3b2:	d914      	bls.n	800b3de <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f003 0301 	and.w	r3, r3, #1
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d00d      	beq.n	800b3de <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3c6:	f043 0210 	orr.w	r2, r3, #16
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3d2:	f043 0201 	orr.w	r2, r3, #1
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	e007      	b.n	800b3ee <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f003 0301 	and.w	r3, r3, #1
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d1cf      	bne.n	800b38c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	8000003f 	.word	0x8000003f
 800b3fc:	50040300 	.word	0x50040300
 800b400:	20000168 	.word	0x20000168
 800b404:	053e2d63 	.word	0x053e2d63

0800b408 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4618      	mov	r0, r3
 800b416:	f7fe ffd6 	bl	800a3c6 <LL_ADC_IsDisableOngoing>
 800b41a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4618      	mov	r0, r3
 800b422:	f7fe ffbd 	bl	800a3a0 <LL_ADC_IsEnabled>
 800b426:	4603      	mov	r3, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d047      	beq.n	800b4bc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d144      	bne.n	800b4bc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	f003 030d 	and.w	r3, r3, #13
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d10c      	bne.n	800b45a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4618      	mov	r0, r3
 800b446:	f7fe ff97 	bl	800a378 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	2203      	movs	r2, #3
 800b450:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800b452:	f7fe fdd9 	bl	800a008 <HAL_GetTick>
 800b456:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b458:	e029      	b.n	800b4ae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b45e:	f043 0210 	orr.w	r2, r3, #16
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b46a:	f043 0201 	orr.w	r2, r3, #1
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800b472:	2301      	movs	r3, #1
 800b474:	e023      	b.n	800b4be <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800b476:	f7fe fdc7 	bl	800a008 <HAL_GetTick>
 800b47a:	4602      	mov	r2, r0
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	1ad3      	subs	r3, r2, r3
 800b480:	2b02      	cmp	r3, #2
 800b482:	d914      	bls.n	800b4ae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	689b      	ldr	r3, [r3, #8]
 800b48a:	f003 0301 	and.w	r3, r3, #1
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d00d      	beq.n	800b4ae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b496:	f043 0210 	orr.w	r2, r3, #16
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4a2:	f043 0201 	orr.w	r2, r3, #1
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	e007      	b.n	800b4be <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	f003 0301 	and.w	r3, r3, #1
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d1dc      	bne.n	800b476 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b4bc:	2300      	movs	r3, #0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3710      	adds	r7, #16
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b084      	sub	sp, #16
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4d2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d14b      	bne.n	800b578 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f003 0308 	and.w	r3, r3, #8
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d021      	beq.n	800b53e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7fe fe3b 	bl	800a17a <LL_ADC_REG_IsTriggerSourceSWStart>
 800b504:	4603      	mov	r3, r0
 800b506:	2b00      	cmp	r3, #0
 800b508:	d032      	beq.n	800b570 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	68db      	ldr	r3, [r3, #12]
 800b510:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b514:	2b00      	cmp	r3, #0
 800b516:	d12b      	bne.n	800b570 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b51c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b528:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d11f      	bne.n	800b570 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b534:	f043 0201 	orr.w	r2, r3, #1
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	655a      	str	r2, [r3, #84]	@ 0x54
 800b53c:	e018      	b.n	800b570 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	f003 0302 	and.w	r3, r3, #2
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d111      	bne.n	800b570 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b550:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b55c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b560:	2b00      	cmp	r3, #0
 800b562:	d105      	bne.n	800b570 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b568:	f043 0201 	orr.w	r2, r3, #1
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f7f6 fcdf 	bl	8001f34 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800b576:	e00e      	b.n	800b596 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b57c:	f003 0310 	and.w	r3, r3, #16
 800b580:	2b00      	cmp	r3, #0
 800b582:	d003      	beq.n	800b58c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800b584:	68f8      	ldr	r0, [r7, #12]
 800b586:	f7ff fa00 	bl	800a98a <HAL_ADC_ErrorCallback>
}
 800b58a:	e004      	b.n	800b596 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	4798      	blx	r3
}
 800b596:	bf00      	nop
 800b598:	3710      	adds	r7, #16
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b084      	sub	sp, #16
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5aa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b5ac:	68f8      	ldr	r0, [r7, #12]
 800b5ae:	f7f6 fca5 	bl	8001efc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b5b2:	bf00      	nop
 800b5b4:	3710      	adds	r7, #16
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}

0800b5ba <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800b5ba:	b580      	push	{r7, lr}
 800b5bc:	b084      	sub	sp, #16
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5c6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5d8:	f043 0204 	orr.w	r2, r3, #4
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b5e0:	68f8      	ldr	r0, [r7, #12]
 800b5e2:	f7ff f9d2 	bl	800a98a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b5e6:	bf00      	nop
 800b5e8:	3710      	adds	r7, #16
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <LL_ADC_IsEnabled>:
{
 800b5ee:	b480      	push	{r7}
 800b5f0:	b083      	sub	sp, #12
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	689b      	ldr	r3, [r3, #8]
 800b5fa:	f003 0301 	and.w	r3, r3, #1
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d101      	bne.n	800b606 <LL_ADC_IsEnabled+0x18>
 800b602:	2301      	movs	r3, #1
 800b604:	e000      	b.n	800b608 <LL_ADC_IsEnabled+0x1a>
 800b606:	2300      	movs	r3, #0
}
 800b608:	4618      	mov	r0, r3
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <LL_ADC_REG_IsConversionOngoing>:
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	f003 0304 	and.w	r3, r3, #4
 800b624:	2b04      	cmp	r3, #4
 800b626:	d101      	bne.n	800b62c <LL_ADC_REG_IsConversionOngoing+0x18>
 800b628:	2301      	movs	r3, #1
 800b62a:	e000      	b.n	800b62e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b62c:	2300      	movs	r3, #0
}
 800b62e:	4618      	mov	r0, r3
 800b630:	370c      	adds	r7, #12
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr
	...

0800b63c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800b63c:	b590      	push	{r4, r7, lr}
 800b63e:	b09f      	sub	sp, #124	@ 0x7c
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b646:	2300      	movs	r3, #0
 800b648:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b652:	2b01      	cmp	r3, #1
 800b654:	d101      	bne.n	800b65a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800b656:	2302      	movs	r3, #2
 800b658:	e093      	b.n	800b782 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2201      	movs	r2, #1
 800b65e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800b662:	2300      	movs	r3, #0
 800b664:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800b666:	2300      	movs	r3, #0
 800b668:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a47      	ldr	r2, [pc, #284]	@ (800b78c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d102      	bne.n	800b67a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800b674:	4b46      	ldr	r3, [pc, #280]	@ (800b790 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800b676:	60bb      	str	r3, [r7, #8]
 800b678:	e001      	b.n	800b67e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800b67a:	2300      	movs	r3, #0
 800b67c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d10b      	bne.n	800b69c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b688:	f043 0220 	orr.w	r2, r3, #32
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800b698:	2301      	movs	r3, #1
 800b69a:	e072      	b.n	800b782 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7ff ffb8 	bl	800b614 <LL_ADC_REG_IsConversionOngoing>
 800b6a4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7ff ffb2 	bl	800b614 <LL_ADC_REG_IsConversionOngoing>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d154      	bne.n	800b760 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800b6b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d151      	bne.n	800b760 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800b6bc:	4b35      	ldr	r3, [pc, #212]	@ (800b794 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800b6be:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d02c      	beq.n	800b722 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800b6c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	6859      	ldr	r1, [r3, #4]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b6da:	035b      	lsls	r3, r3, #13
 800b6dc:	430b      	orrs	r3, r1
 800b6de:	431a      	orrs	r2, r3
 800b6e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6e2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b6e4:	4829      	ldr	r0, [pc, #164]	@ (800b78c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800b6e6:	f7ff ff82 	bl	800b5ee <LL_ADC_IsEnabled>
 800b6ea:	4604      	mov	r4, r0
 800b6ec:	4828      	ldr	r0, [pc, #160]	@ (800b790 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800b6ee:	f7ff ff7e 	bl	800b5ee <LL_ADC_IsEnabled>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	431c      	orrs	r4, r3
 800b6f6:	4828      	ldr	r0, [pc, #160]	@ (800b798 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800b6f8:	f7ff ff79 	bl	800b5ee <LL_ADC_IsEnabled>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	4323      	orrs	r3, r4
 800b700:	2b00      	cmp	r3, #0
 800b702:	d137      	bne.n	800b774 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800b704:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800b70c:	f023 030f 	bic.w	r3, r3, #15
 800b710:	683a      	ldr	r2, [r7, #0]
 800b712:	6811      	ldr	r1, [r2, #0]
 800b714:	683a      	ldr	r2, [r7, #0]
 800b716:	6892      	ldr	r2, [r2, #8]
 800b718:	430a      	orrs	r2, r1
 800b71a:	431a      	orrs	r2, r3
 800b71c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b71e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b720:	e028      	b.n	800b774 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800b722:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b72a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b72c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b72e:	4817      	ldr	r0, [pc, #92]	@ (800b78c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800b730:	f7ff ff5d 	bl	800b5ee <LL_ADC_IsEnabled>
 800b734:	4604      	mov	r4, r0
 800b736:	4816      	ldr	r0, [pc, #88]	@ (800b790 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800b738:	f7ff ff59 	bl	800b5ee <LL_ADC_IsEnabled>
 800b73c:	4603      	mov	r3, r0
 800b73e:	431c      	orrs	r4, r3
 800b740:	4815      	ldr	r0, [pc, #84]	@ (800b798 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800b742:	f7ff ff54 	bl	800b5ee <LL_ADC_IsEnabled>
 800b746:	4603      	mov	r3, r0
 800b748:	4323      	orrs	r3, r4
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d112      	bne.n	800b774 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800b74e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800b756:	f023 030f 	bic.w	r3, r3, #15
 800b75a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b75c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b75e:	e009      	b.n	800b774 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b764:	f043 0220 	orr.w	r2, r3, #32
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800b76c:	2301      	movs	r3, #1
 800b76e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800b772:	e000      	b.n	800b776 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b774:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800b77e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800b782:	4618      	mov	r0, r3
 800b784:	377c      	adds	r7, #124	@ 0x7c
 800b786:	46bd      	mov	sp, r7
 800b788:	bd90      	pop	{r4, r7, pc}
 800b78a:	bf00      	nop
 800b78c:	50040000 	.word	0x50040000
 800b790:	50040100 	.word	0x50040100
 800b794:	50040300 	.word	0x50040300
 800b798:	50040200 	.word	0x50040200

0800b79c <__NVIC_SetPriorityGrouping>:
{
 800b79c:	b480      	push	{r7}
 800b79e:	b085      	sub	sp, #20
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f003 0307 	and.w	r3, r3, #7
 800b7aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b7ac:	4b0c      	ldr	r3, [pc, #48]	@ (800b7e0 <__NVIC_SetPriorityGrouping+0x44>)
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b7b2:	68ba      	ldr	r2, [r7, #8]
 800b7b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b7b8:	4013      	ands	r3, r2
 800b7ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b7c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800b7c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b7ce:	4a04      	ldr	r2, [pc, #16]	@ (800b7e0 <__NVIC_SetPriorityGrouping+0x44>)
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	60d3      	str	r3, [r2, #12]
}
 800b7d4:	bf00      	nop
 800b7d6:	3714      	adds	r7, #20
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr
 800b7e0:	e000ed00 	.word	0xe000ed00

0800b7e4 <__NVIC_GetPriorityGrouping>:
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b7e8:	4b04      	ldr	r3, [pc, #16]	@ (800b7fc <__NVIC_GetPriorityGrouping+0x18>)
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	0a1b      	lsrs	r3, r3, #8
 800b7ee:	f003 0307 	and.w	r3, r3, #7
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr
 800b7fc:	e000ed00 	.word	0xe000ed00

0800b800 <__NVIC_EnableIRQ>:
{
 800b800:	b480      	push	{r7}
 800b802:	b083      	sub	sp, #12
 800b804:	af00      	add	r7, sp, #0
 800b806:	4603      	mov	r3, r0
 800b808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b80a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	db0b      	blt.n	800b82a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b812:	79fb      	ldrb	r3, [r7, #7]
 800b814:	f003 021f 	and.w	r2, r3, #31
 800b818:	4907      	ldr	r1, [pc, #28]	@ (800b838 <__NVIC_EnableIRQ+0x38>)
 800b81a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b81e:	095b      	lsrs	r3, r3, #5
 800b820:	2001      	movs	r0, #1
 800b822:	fa00 f202 	lsl.w	r2, r0, r2
 800b826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b82a:	bf00      	nop
 800b82c:	370c      	adds	r7, #12
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr
 800b836:	bf00      	nop
 800b838:	e000e100 	.word	0xe000e100

0800b83c <__NVIC_SetPriority>:
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	4603      	mov	r3, r0
 800b844:	6039      	str	r1, [r7, #0]
 800b846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	db0a      	blt.n	800b866 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	b2da      	uxtb	r2, r3
 800b854:	490c      	ldr	r1, [pc, #48]	@ (800b888 <__NVIC_SetPriority+0x4c>)
 800b856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b85a:	0112      	lsls	r2, r2, #4
 800b85c:	b2d2      	uxtb	r2, r2
 800b85e:	440b      	add	r3, r1
 800b860:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b864:	e00a      	b.n	800b87c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	b2da      	uxtb	r2, r3
 800b86a:	4908      	ldr	r1, [pc, #32]	@ (800b88c <__NVIC_SetPriority+0x50>)
 800b86c:	79fb      	ldrb	r3, [r7, #7]
 800b86e:	f003 030f 	and.w	r3, r3, #15
 800b872:	3b04      	subs	r3, #4
 800b874:	0112      	lsls	r2, r2, #4
 800b876:	b2d2      	uxtb	r2, r2
 800b878:	440b      	add	r3, r1
 800b87a:	761a      	strb	r2, [r3, #24]
}
 800b87c:	bf00      	nop
 800b87e:	370c      	adds	r7, #12
 800b880:	46bd      	mov	sp, r7
 800b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b886:	4770      	bx	lr
 800b888:	e000e100 	.word	0xe000e100
 800b88c:	e000ed00 	.word	0xe000ed00

0800b890 <NVIC_EncodePriority>:
{
 800b890:	b480      	push	{r7}
 800b892:	b089      	sub	sp, #36	@ 0x24
 800b894:	af00      	add	r7, sp, #0
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	60b9      	str	r1, [r7, #8]
 800b89a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f003 0307 	and.w	r3, r3, #7
 800b8a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b8a4:	69fb      	ldr	r3, [r7, #28]
 800b8a6:	f1c3 0307 	rsb	r3, r3, #7
 800b8aa:	2b04      	cmp	r3, #4
 800b8ac:	bf28      	it	cs
 800b8ae:	2304      	movcs	r3, #4
 800b8b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	3304      	adds	r3, #4
 800b8b6:	2b06      	cmp	r3, #6
 800b8b8:	d902      	bls.n	800b8c0 <NVIC_EncodePriority+0x30>
 800b8ba:	69fb      	ldr	r3, [r7, #28]
 800b8bc:	3b03      	subs	r3, #3
 800b8be:	e000      	b.n	800b8c2 <NVIC_EncodePriority+0x32>
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b8c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b8c8:	69bb      	ldr	r3, [r7, #24]
 800b8ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b8ce:	43da      	mvns	r2, r3
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	401a      	ands	r2, r3
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b8d8:	f04f 31ff 	mov.w	r1, #4294967295
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	fa01 f303 	lsl.w	r3, r1, r3
 800b8e2:	43d9      	mvns	r1, r3
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b8e8:	4313      	orrs	r3, r2
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3724      	adds	r7, #36	@ 0x24
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr
	...

0800b8f8 <__NVIC_SystemReset>:
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800b8fc:	f3bf 8f4f 	dsb	sy
}
 800b900:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b902:	4b06      	ldr	r3, [pc, #24]	@ (800b91c <__NVIC_SystemReset+0x24>)
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b90a:	4904      	ldr	r1, [pc, #16]	@ (800b91c <__NVIC_SystemReset+0x24>)
 800b90c:	4b04      	ldr	r3, [pc, #16]	@ (800b920 <__NVIC_SystemReset+0x28>)
 800b90e:	4313      	orrs	r3, r2
 800b910:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b912:	f3bf 8f4f 	dsb	sy
}
 800b916:	bf00      	nop
    __NOP();
 800b918:	bf00      	nop
 800b91a:	e7fd      	b.n	800b918 <__NVIC_SystemReset+0x20>
 800b91c:	e000ed00 	.word	0xe000ed00
 800b920:	05fa0004 	.word	0x05fa0004

0800b924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	3b01      	subs	r3, #1
 800b930:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b934:	d301      	bcc.n	800b93a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b936:	2301      	movs	r3, #1
 800b938:	e00f      	b.n	800b95a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b93a:	4a0a      	ldr	r2, [pc, #40]	@ (800b964 <SysTick_Config+0x40>)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	3b01      	subs	r3, #1
 800b940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b942:	210f      	movs	r1, #15
 800b944:	f04f 30ff 	mov.w	r0, #4294967295
 800b948:	f7ff ff78 	bl	800b83c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b94c:	4b05      	ldr	r3, [pc, #20]	@ (800b964 <SysTick_Config+0x40>)
 800b94e:	2200      	movs	r2, #0
 800b950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b952:	4b04      	ldr	r3, [pc, #16]	@ (800b964 <SysTick_Config+0x40>)
 800b954:	2207      	movs	r2, #7
 800b956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b958:	2300      	movs	r3, #0
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3708      	adds	r7, #8
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	e000e010 	.word	0xe000e010

0800b968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f7ff ff13 	bl	800b79c <__NVIC_SetPriorityGrouping>
}
 800b976:	bf00      	nop
 800b978:	3708      	adds	r7, #8
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}

0800b97e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b97e:	b580      	push	{r7, lr}
 800b980:	b086      	sub	sp, #24
 800b982:	af00      	add	r7, sp, #0
 800b984:	4603      	mov	r3, r0
 800b986:	60b9      	str	r1, [r7, #8]
 800b988:	607a      	str	r2, [r7, #4]
 800b98a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b98c:	2300      	movs	r3, #0
 800b98e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b990:	f7ff ff28 	bl	800b7e4 <__NVIC_GetPriorityGrouping>
 800b994:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	68b9      	ldr	r1, [r7, #8]
 800b99a:	6978      	ldr	r0, [r7, #20]
 800b99c:	f7ff ff78 	bl	800b890 <NVIC_EncodePriority>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f7ff ff47 	bl	800b83c <__NVIC_SetPriority>
}
 800b9ae:	bf00      	nop
 800b9b0:	3718      	adds	r7, #24
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b082      	sub	sp, #8
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	4603      	mov	r3, r0
 800b9be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b9c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7ff ff1b 	bl	800b800 <__NVIC_EnableIRQ>
}
 800b9ca:	bf00      	nop
 800b9cc:	3708      	adds	r7, #8
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}

0800b9d2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800b9d2:	b580      	push	{r7, lr}
 800b9d4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800b9d6:	f7ff ff8f 	bl	800b8f8 <__NVIC_SystemReset>

0800b9da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b082      	sub	sp, #8
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f7ff ff9e 	bl	800b924 <SysTick_Config>
 800b9e8:	4603      	mov	r3, r0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
	...

0800b9f4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d101      	bne.n	800ba06 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800ba02:	2301      	movs	r3, #1
 800ba04:	e054      	b.n	800bab0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	7f5b      	ldrb	r3, [r3, #29]
 800ba0a:	b2db      	uxtb	r3, r3
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d105      	bne.n	800ba1c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2200      	movs	r2, #0
 800ba14:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f7fa fdb2 	bl	8006580 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2202      	movs	r2, #2
 800ba20:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	791b      	ldrb	r3, [r3, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d10c      	bne.n	800ba44 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4a22      	ldr	r2, [pc, #136]	@ (800bab8 <HAL_CRC_Init+0xc4>)
 800ba30:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	689a      	ldr	r2, [r3, #8]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f022 0218 	bic.w	r2, r2, #24
 800ba40:	609a      	str	r2, [r3, #8]
 800ba42:	e00c      	b.n	800ba5e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6899      	ldr	r1, [r3, #8]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f94a 	bl	800bce8 <HAL_CRCEx_Polynomial_Set>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d001      	beq.n	800ba5e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e028      	b.n	800bab0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	795b      	ldrb	r3, [r3, #5]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d105      	bne.n	800ba72 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba6e:	611a      	str	r2, [r3, #16]
 800ba70:	e004      	b.n	800ba7c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	6912      	ldr	r2, [r2, #16]
 800ba7a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	689b      	ldr	r3, [r3, #8]
 800ba82:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	695a      	ldr	r2, [r3, #20]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	430a      	orrs	r2, r1
 800ba90:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	699a      	ldr	r2, [r3, #24]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	430a      	orrs	r2, r1
 800baa6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800baae:	2300      	movs	r3, #0
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3708      	adds	r7, #8
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	04c11db7 	.word	0x04c11db7

0800babc <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b086      	sub	sp, #24
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	60f8      	str	r0, [r7, #12]
 800bac4:	60b9      	str	r1, [r7, #8]
 800bac6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800bac8:	2300      	movs	r3, #0
 800baca:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2202      	movs	r2, #2
 800bad0:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	689a      	ldr	r2, [r3, #8]
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f042 0201 	orr.w	r2, r2, #1
 800bae0:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6a1b      	ldr	r3, [r3, #32]
 800bae6:	2b03      	cmp	r3, #3
 800bae8:	d006      	beq.n	800baf8 <HAL_CRC_Calculate+0x3c>
 800baea:	2b03      	cmp	r3, #3
 800baec:	d829      	bhi.n	800bb42 <HAL_CRC_Calculate+0x86>
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d019      	beq.n	800bb26 <HAL_CRC_Calculate+0x6a>
 800baf2:	2b02      	cmp	r3, #2
 800baf4:	d01e      	beq.n	800bb34 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800baf6:	e024      	b.n	800bb42 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800baf8:	2300      	movs	r3, #0
 800bafa:	617b      	str	r3, [r7, #20]
 800bafc:	e00a      	b.n	800bb14 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	68ba      	ldr	r2, [r7, #8]
 800bb04:	441a      	add	r2, r3
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	6812      	ldr	r2, [r2, #0]
 800bb0c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	3301      	adds	r3, #1
 800bb12:	617b      	str	r3, [r7, #20]
 800bb14:	697a      	ldr	r2, [r7, #20]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d3f0      	bcc.n	800bafe <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	613b      	str	r3, [r7, #16]
      break;
 800bb24:	e00e      	b.n	800bb44 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	68b9      	ldr	r1, [r7, #8]
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f000 f812 	bl	800bb54 <CRC_Handle_8>
 800bb30:	6138      	str	r0, [r7, #16]
      break;
 800bb32:	e007      	b.n	800bb44 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	68b9      	ldr	r1, [r7, #8]
 800bb38:	68f8      	ldr	r0, [r7, #12]
 800bb3a:	f000 f89b 	bl	800bc74 <CRC_Handle_16>
 800bb3e:	6138      	str	r0, [r7, #16]
      break;
 800bb40:	e000      	b.n	800bb44 <HAL_CRC_Calculate+0x88>
      break;
 800bb42:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2201      	movs	r2, #1
 800bb48:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800bb4a:	693b      	ldr	r3, [r7, #16]
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3718      	adds	r7, #24
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b089      	sub	sp, #36	@ 0x24
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	60b9      	str	r1, [r7, #8]
 800bb5e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800bb60:	2300      	movs	r3, #0
 800bb62:	61fb      	str	r3, [r7, #28]
 800bb64:	e023      	b.n	800bbae <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800bb66:	69fb      	ldr	r3, [r7, #28]
 800bb68:	009b      	lsls	r3, r3, #2
 800bb6a:	68ba      	ldr	r2, [r7, #8]
 800bb6c:	4413      	add	r3, r2
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800bb72:	69fb      	ldr	r3, [r7, #28]
 800bb74:	009b      	lsls	r3, r3, #2
 800bb76:	3301      	adds	r3, #1
 800bb78:	68b9      	ldr	r1, [r7, #8]
 800bb7a:	440b      	add	r3, r1
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800bb80:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800bb82:	69fb      	ldr	r3, [r7, #28]
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	3302      	adds	r3, #2
 800bb88:	68b9      	ldr	r1, [r7, #8]
 800bb8a:	440b      	add	r3, r1
 800bb8c:	781b      	ldrb	r3, [r3, #0]
 800bb8e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800bb90:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800bb92:	69fb      	ldr	r3, [r7, #28]
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	3303      	adds	r3, #3
 800bb98:	68b9      	ldr	r1, [r7, #8]
 800bb9a:	440b      	add	r3, r1
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800bba4:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800bba6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800bba8:	69fb      	ldr	r3, [r7, #28]
 800bbaa:	3301      	adds	r3, #1
 800bbac:	61fb      	str	r3, [r7, #28]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	089b      	lsrs	r3, r3, #2
 800bbb2:	69fa      	ldr	r2, [r7, #28]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d3d6      	bcc.n	800bb66 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f003 0303 	and.w	r3, r3, #3
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d04f      	beq.n	800bc62 <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f003 0303 	and.w	r3, r3, #3
 800bbc8:	2b01      	cmp	r3, #1
 800bbca:	d107      	bne.n	800bbdc <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800bbcc:	69fb      	ldr	r3, [r7, #28]
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	68ba      	ldr	r2, [r7, #8]
 800bbd2:	4413      	add	r3, r2
 800bbd4:	68fa      	ldr	r2, [r7, #12]
 800bbd6:	6812      	ldr	r2, [r2, #0]
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f003 0303 	and.w	r3, r3, #3
 800bbe2:	2b02      	cmp	r3, #2
 800bbe4:	d117      	bne.n	800bc16 <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800bbe6:	69fb      	ldr	r3, [r7, #28]
 800bbe8:	009b      	lsls	r3, r3, #2
 800bbea:	68ba      	ldr	r2, [r7, #8]
 800bbec:	4413      	add	r3, r2
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	b21b      	sxth	r3, r3
 800bbf2:	021b      	lsls	r3, r3, #8
 800bbf4:	b21a      	sxth	r2, r3
 800bbf6:	69fb      	ldr	r3, [r7, #28]
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	68b9      	ldr	r1, [r7, #8]
 800bbfe:	440b      	add	r3, r1
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	b21b      	sxth	r3, r3
 800bc04:	4313      	orrs	r3, r2
 800bc06:	b21b      	sxth	r3, r3
 800bc08:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	8b7a      	ldrh	r2, [r7, #26]
 800bc14:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f003 0303 	and.w	r3, r3, #3
 800bc1c:	2b03      	cmp	r3, #3
 800bc1e:	d120      	bne.n	800bc62 <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	68ba      	ldr	r2, [r7, #8]
 800bc26:	4413      	add	r3, r2
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	b21b      	sxth	r3, r3
 800bc2c:	021b      	lsls	r3, r3, #8
 800bc2e:	b21a      	sxth	r2, r3
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	3301      	adds	r3, #1
 800bc36:	68b9      	ldr	r1, [r7, #8]
 800bc38:	440b      	add	r3, r1
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	b21b      	sxth	r3, r3
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	b21b      	sxth	r3, r3
 800bc42:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	8b7a      	ldrh	r2, [r7, #26]
 800bc4e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	3302      	adds	r3, #2
 800bc56:	68ba      	ldr	r2, [r7, #8]
 800bc58:	4413      	add	r3, r2
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	6812      	ldr	r2, [r2, #0]
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	681b      	ldr	r3, [r3, #0]
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3724      	adds	r7, #36	@ 0x24
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b087      	sub	sp, #28
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	60f8      	str	r0, [r7, #12]
 800bc7c:	60b9      	str	r1, [r7, #8]
 800bc7e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800bc80:	2300      	movs	r3, #0
 800bc82:	617b      	str	r3, [r7, #20]
 800bc84:	e013      	b.n	800bcae <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	68ba      	ldr	r2, [r7, #8]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	881b      	ldrh	r3, [r3, #0]
 800bc90:	041a      	lsls	r2, r3, #16
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	3302      	adds	r3, #2
 800bc98:	68b9      	ldr	r1, [r7, #8]
 800bc9a:	440b      	add	r3, r1
 800bc9c:	881b      	ldrh	r3, [r3, #0]
 800bc9e:	4619      	mov	r1, r3
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	430a      	orrs	r2, r1
 800bca6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	617b      	str	r3, [r7, #20]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	085b      	lsrs	r3, r3, #1
 800bcb2:	697a      	ldr	r2, [r7, #20]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d3e6      	bcc.n	800bc86 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f003 0301 	and.w	r3, r3, #1
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d009      	beq.n	800bcd6 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	68ba      	ldr	r2, [r7, #8]
 800bcce:	4413      	add	r3, r2
 800bcd0:	881a      	ldrh	r2, [r3, #0]
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	681b      	ldr	r3, [r3, #0]
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	371c      	adds	r7, #28
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b087      	sub	sp, #28
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800bcf8:	231f      	movs	r3, #31
 800bcfa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	f003 0301 	and.w	r3, r3, #1
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d102      	bne.n	800bd0c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800bd06:	2301      	movs	r3, #1
 800bd08:	75fb      	strb	r3, [r7, #23]
 800bd0a:	e063      	b.n	800bdd4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800bd0c:	bf00      	nop
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	1e5a      	subs	r2, r3, #1
 800bd12:	613a      	str	r2, [r7, #16]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d009      	beq.n	800bd2c <HAL_CRCEx_Polynomial_Set+0x44>
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	f003 031f 	and.w	r3, r3, #31
 800bd1e:	68ba      	ldr	r2, [r7, #8]
 800bd20:	fa22 f303 	lsr.w	r3, r2, r3
 800bd24:	f003 0301 	and.w	r3, r3, #1
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d0f0      	beq.n	800bd0e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2b18      	cmp	r3, #24
 800bd30:	d846      	bhi.n	800bdc0 <HAL_CRCEx_Polynomial_Set+0xd8>
 800bd32:	a201      	add	r2, pc, #4	@ (adr r2, 800bd38 <HAL_CRCEx_Polynomial_Set+0x50>)
 800bd34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd38:	0800bdc7 	.word	0x0800bdc7
 800bd3c:	0800bdc1 	.word	0x0800bdc1
 800bd40:	0800bdc1 	.word	0x0800bdc1
 800bd44:	0800bdc1 	.word	0x0800bdc1
 800bd48:	0800bdc1 	.word	0x0800bdc1
 800bd4c:	0800bdc1 	.word	0x0800bdc1
 800bd50:	0800bdc1 	.word	0x0800bdc1
 800bd54:	0800bdc1 	.word	0x0800bdc1
 800bd58:	0800bdb5 	.word	0x0800bdb5
 800bd5c:	0800bdc1 	.word	0x0800bdc1
 800bd60:	0800bdc1 	.word	0x0800bdc1
 800bd64:	0800bdc1 	.word	0x0800bdc1
 800bd68:	0800bdc1 	.word	0x0800bdc1
 800bd6c:	0800bdc1 	.word	0x0800bdc1
 800bd70:	0800bdc1 	.word	0x0800bdc1
 800bd74:	0800bdc1 	.word	0x0800bdc1
 800bd78:	0800bda9 	.word	0x0800bda9
 800bd7c:	0800bdc1 	.word	0x0800bdc1
 800bd80:	0800bdc1 	.word	0x0800bdc1
 800bd84:	0800bdc1 	.word	0x0800bdc1
 800bd88:	0800bdc1 	.word	0x0800bdc1
 800bd8c:	0800bdc1 	.word	0x0800bdc1
 800bd90:	0800bdc1 	.word	0x0800bdc1
 800bd94:	0800bdc1 	.word	0x0800bdc1
 800bd98:	0800bd9d 	.word	0x0800bd9d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	2b06      	cmp	r3, #6
 800bda0:	d913      	bls.n	800bdca <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800bda2:	2301      	movs	r3, #1
 800bda4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800bda6:	e010      	b.n	800bdca <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	2b07      	cmp	r3, #7
 800bdac:	d90f      	bls.n	800bdce <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800bdb2:	e00c      	b.n	800bdce <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	2b0f      	cmp	r3, #15
 800bdb8:	d90b      	bls.n	800bdd2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800bdba:	2301      	movs	r3, #1
 800bdbc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800bdbe:	e008      	b.n	800bdd2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	75fb      	strb	r3, [r7, #23]
        break;
 800bdc4:	e006      	b.n	800bdd4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800bdc6:	bf00      	nop
 800bdc8:	e004      	b.n	800bdd4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800bdca:	bf00      	nop
 800bdcc:	e002      	b.n	800bdd4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800bdce:	bf00      	nop
 800bdd0:	e000      	b.n	800bdd4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800bdd2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800bdd4:	7dfb      	ldrb	r3, [r7, #23]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d10d      	bne.n	800bdf6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	68ba      	ldr	r2, [r7, #8]
 800bde0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	689b      	ldr	r3, [r3, #8]
 800bde8:	f023 0118 	bic.w	r1, r3, #24
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	430a      	orrs	r2, r1
 800bdf4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800bdf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	371c      	adds	r7, #28
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr

0800be04 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800be04:	b480      	push	{r7}
 800be06:	b085      	sub	sp, #20
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d101      	bne.n	800be16 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800be12:	2301      	movs	r3, #1
 800be14:	e098      	b.n	800bf48 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	461a      	mov	r2, r3
 800be1c:	4b4d      	ldr	r3, [pc, #308]	@ (800bf54 <HAL_DMA_Init+0x150>)
 800be1e:	429a      	cmp	r2, r3
 800be20:	d80f      	bhi.n	800be42 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	461a      	mov	r2, r3
 800be28:	4b4b      	ldr	r3, [pc, #300]	@ (800bf58 <HAL_DMA_Init+0x154>)
 800be2a:	4413      	add	r3, r2
 800be2c:	4a4b      	ldr	r2, [pc, #300]	@ (800bf5c <HAL_DMA_Init+0x158>)
 800be2e:	fba2 2303 	umull	r2, r3, r2, r3
 800be32:	091b      	lsrs	r3, r3, #4
 800be34:	009a      	lsls	r2, r3, #2
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4a48      	ldr	r2, [pc, #288]	@ (800bf60 <HAL_DMA_Init+0x15c>)
 800be3e:	641a      	str	r2, [r3, #64]	@ 0x40
 800be40:	e00e      	b.n	800be60 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	461a      	mov	r2, r3
 800be48:	4b46      	ldr	r3, [pc, #280]	@ (800bf64 <HAL_DMA_Init+0x160>)
 800be4a:	4413      	add	r3, r2
 800be4c:	4a43      	ldr	r2, [pc, #268]	@ (800bf5c <HAL_DMA_Init+0x158>)
 800be4e:	fba2 2303 	umull	r2, r3, r2, r3
 800be52:	091b      	lsrs	r3, r3, #4
 800be54:	009a      	lsls	r2, r3, #2
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	4a42      	ldr	r2, [pc, #264]	@ (800bf68 <HAL_DMA_Init+0x164>)
 800be5e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2202      	movs	r2, #2
 800be64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800be76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800be84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	691b      	ldr	r3, [r3, #16]
 800be8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800be90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	699b      	ldr	r3, [r3, #24]
 800be96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800be9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6a1b      	ldr	r3, [r3, #32]
 800bea2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800bea4:	68fa      	ldr	r2, [r7, #12]
 800bea6:	4313      	orrs	r3, r2
 800bea8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	68fa      	ldr	r2, [r7, #12]
 800beb0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	689b      	ldr	r3, [r3, #8]
 800beb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800beba:	d039      	beq.n	800bf30 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bec0:	4a27      	ldr	r2, [pc, #156]	@ (800bf60 <HAL_DMA_Init+0x15c>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d11a      	bne.n	800befc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800bec6:	4b29      	ldr	r3, [pc, #164]	@ (800bf6c <HAL_DMA_Init+0x168>)
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bece:	f003 031c 	and.w	r3, r3, #28
 800bed2:	210f      	movs	r1, #15
 800bed4:	fa01 f303 	lsl.w	r3, r1, r3
 800bed8:	43db      	mvns	r3, r3
 800beda:	4924      	ldr	r1, [pc, #144]	@ (800bf6c <HAL_DMA_Init+0x168>)
 800bedc:	4013      	ands	r3, r2
 800bede:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800bee0:	4b22      	ldr	r3, [pc, #136]	@ (800bf6c <HAL_DMA_Init+0x168>)
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6859      	ldr	r1, [r3, #4]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800beec:	f003 031c 	and.w	r3, r3, #28
 800bef0:	fa01 f303 	lsl.w	r3, r1, r3
 800bef4:	491d      	ldr	r1, [pc, #116]	@ (800bf6c <HAL_DMA_Init+0x168>)
 800bef6:	4313      	orrs	r3, r2
 800bef8:	600b      	str	r3, [r1, #0]
 800befa:	e019      	b.n	800bf30 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800befc:	4b1c      	ldr	r3, [pc, #112]	@ (800bf70 <HAL_DMA_Init+0x16c>)
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf04:	f003 031c 	and.w	r3, r3, #28
 800bf08:	210f      	movs	r1, #15
 800bf0a:	fa01 f303 	lsl.w	r3, r1, r3
 800bf0e:	43db      	mvns	r3, r3
 800bf10:	4917      	ldr	r1, [pc, #92]	@ (800bf70 <HAL_DMA_Init+0x16c>)
 800bf12:	4013      	ands	r3, r2
 800bf14:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800bf16:	4b16      	ldr	r3, [pc, #88]	@ (800bf70 <HAL_DMA_Init+0x16c>)
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6859      	ldr	r1, [r3, #4]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf22:	f003 031c 	and.w	r3, r3, #28
 800bf26:	fa01 f303 	lsl.w	r3, r1, r3
 800bf2a:	4911      	ldr	r1, [pc, #68]	@ (800bf70 <HAL_DMA_Init+0x16c>)
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2201      	movs	r2, #1
 800bf3a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2200      	movs	r2, #0
 800bf42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800bf46:	2300      	movs	r3, #0
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3714      	adds	r7, #20
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr
 800bf54:	40020407 	.word	0x40020407
 800bf58:	bffdfff8 	.word	0xbffdfff8
 800bf5c:	cccccccd 	.word	0xcccccccd
 800bf60:	40020000 	.word	0x40020000
 800bf64:	bffdfbf8 	.word	0xbffdfbf8
 800bf68:	40020400 	.word	0x40020400
 800bf6c:	400200a8 	.word	0x400200a8
 800bf70:	400204a8 	.word	0x400204a8

0800bf74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b086      	sub	sp, #24
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	60f8      	str	r0, [r7, #12]
 800bf7c:	60b9      	str	r1, [r7, #8]
 800bf7e:	607a      	str	r2, [r7, #4]
 800bf80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf82:	2300      	movs	r3, #0
 800bf84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d101      	bne.n	800bf94 <HAL_DMA_Start_IT+0x20>
 800bf90:	2302      	movs	r3, #2
 800bf92:	e04b      	b.n	800c02c <HAL_DMA_Start_IT+0xb8>
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2201      	movs	r2, #1
 800bf98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d13a      	bne.n	800c01e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2202      	movs	r2, #2
 800bfac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f022 0201 	bic.w	r2, r2, #1
 800bfc4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	68b9      	ldr	r1, [r7, #8]
 800bfcc:	68f8      	ldr	r0, [r7, #12]
 800bfce:	f000 f92a 	bl	800c226 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d008      	beq.n	800bfec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	681a      	ldr	r2, [r3, #0]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f042 020e 	orr.w	r2, r2, #14
 800bfe8:	601a      	str	r2, [r3, #0]
 800bfea:	e00f      	b.n	800c00c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	681a      	ldr	r2, [r3, #0]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f022 0204 	bic.w	r2, r2, #4
 800bffa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f042 020a 	orr.w	r2, r2, #10
 800c00a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	681a      	ldr	r2, [r3, #0]
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f042 0201 	orr.w	r2, r2, #1
 800c01a:	601a      	str	r2, [r3, #0]
 800c01c:	e005      	b.n	800c02a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2200      	movs	r2, #0
 800c022:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800c026:	2302      	movs	r3, #2
 800c028:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800c02a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3718      	adds	r7, #24
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c034:	b480      	push	{r7}
 800c036:	b085      	sub	sp, #20
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c03c:	2300      	movs	r3, #0
 800c03e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c046:	b2db      	uxtb	r3, r3
 800c048:	2b02      	cmp	r3, #2
 800c04a:	d008      	beq.n	800c05e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2204      	movs	r2, #4
 800c050:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2200      	movs	r2, #0
 800c056:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800c05a:	2301      	movs	r3, #1
 800c05c:	e022      	b.n	800c0a4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f022 020e 	bic.w	r2, r2, #14
 800c06c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f022 0201 	bic.w	r2, r2, #1
 800c07c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c082:	f003 021c 	and.w	r2, r3, #28
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c08a:	2101      	movs	r1, #1
 800c08c:	fa01 f202 	lsl.w	r2, r1, r2
 800c090:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2201      	movs	r2, #1
 800c096:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2200      	movs	r2, #0
 800c09e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800c0a2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3714      	adds	r7, #20
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr

0800c0b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0cc:	f003 031c 	and.w	r3, r3, #28
 800c0d0:	2204      	movs	r2, #4
 800c0d2:	409a      	lsls	r2, r3
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	4013      	ands	r3, r2
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d026      	beq.n	800c12a <HAL_DMA_IRQHandler+0x7a>
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	f003 0304 	and.w	r3, r3, #4
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d021      	beq.n	800c12a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f003 0320 	and.w	r3, r3, #32
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d107      	bne.n	800c104 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f022 0204 	bic.w	r2, r2, #4
 800c102:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c108:	f003 021c 	and.w	r2, r3, #28
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c110:	2104      	movs	r1, #4
 800c112:	fa01 f202 	lsl.w	r2, r1, r2
 800c116:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d071      	beq.n	800c204 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800c128:	e06c      	b.n	800c204 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c12e:	f003 031c 	and.w	r3, r3, #28
 800c132:	2202      	movs	r2, #2
 800c134:	409a      	lsls	r2, r3
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	4013      	ands	r3, r2
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d02e      	beq.n	800c19c <HAL_DMA_IRQHandler+0xec>
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	f003 0302 	and.w	r3, r3, #2
 800c144:	2b00      	cmp	r3, #0
 800c146:	d029      	beq.n	800c19c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f003 0320 	and.w	r3, r3, #32
 800c152:	2b00      	cmp	r3, #0
 800c154:	d10b      	bne.n	800c16e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	681a      	ldr	r2, [r3, #0]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f022 020a 	bic.w	r2, r2, #10
 800c164:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2201      	movs	r2, #1
 800c16a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c172:	f003 021c 	and.w	r2, r3, #28
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c17a:	2102      	movs	r1, #2
 800c17c:	fa01 f202 	lsl.w	r2, r1, r2
 800c180:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d038      	beq.n	800c204 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800c19a:	e033      	b.n	800c204 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1a0:	f003 031c 	and.w	r3, r3, #28
 800c1a4:	2208      	movs	r2, #8
 800c1a6:	409a      	lsls	r2, r3
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	4013      	ands	r3, r2
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d02a      	beq.n	800c206 <HAL_DMA_IRQHandler+0x156>
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	f003 0308 	and.w	r3, r3, #8
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d025      	beq.n	800c206 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	681a      	ldr	r2, [r3, #0]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f022 020e 	bic.w	r2, r2, #14
 800c1c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1ce:	f003 021c 	and.w	r2, r3, #28
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1d6:	2101      	movs	r1, #1
 800c1d8:	fa01 f202 	lsl.w	r2, r1, r2
 800c1dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d004      	beq.n	800c206 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800c204:	bf00      	nop
 800c206:	bf00      	nop
}
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800c20e:	b480      	push	{r7}
 800c210:	b083      	sub	sp, #12
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	370c      	adds	r7, #12
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr

0800c226 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c226:	b480      	push	{r7}
 800c228:	b085      	sub	sp, #20
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	60f8      	str	r0, [r7, #12]
 800c22e:	60b9      	str	r1, [r7, #8]
 800c230:	607a      	str	r2, [r7, #4]
 800c232:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c238:	f003 021c 	and.w	r2, r3, #28
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c240:	2101      	movs	r1, #1
 800c242:	fa01 f202 	lsl.w	r2, r1, r2
 800c246:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	683a      	ldr	r2, [r7, #0]
 800c24e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	689b      	ldr	r3, [r3, #8]
 800c254:	2b10      	cmp	r3, #16
 800c256:	d108      	bne.n	800c26a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	68ba      	ldr	r2, [r7, #8]
 800c266:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800c268:	e007      	b.n	800c27a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	68ba      	ldr	r2, [r7, #8]
 800c270:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	60da      	str	r2, [r3, #12]
}
 800c27a:	bf00      	nop
 800c27c:	3714      	adds	r7, #20
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr
	...

0800c288 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b086      	sub	sp, #24
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800c296:	2300      	movs	r3, #0
 800c298:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c29a:	4b2f      	ldr	r3, [pc, #188]	@ (800c358 <HAL_FLASH_Program+0xd0>)
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d101      	bne.n	800c2a6 <HAL_FLASH_Program+0x1e>
 800c2a2:	2302      	movs	r3, #2
 800c2a4:	e053      	b.n	800c34e <HAL_FLASH_Program+0xc6>
 800c2a6:	4b2c      	ldr	r3, [pc, #176]	@ (800c358 <HAL_FLASH_Program+0xd0>)
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c2ac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800c2b0:	f000 f8c6 	bl	800c440 <FLASH_WaitForLastOperation>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800c2b8:	7dfb      	ldrb	r3, [r7, #23]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d143      	bne.n	800c346 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c2be:	4b26      	ldr	r3, [pc, #152]	@ (800c358 <HAL_FLASH_Program+0xd0>)
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800c2c4:	4b25      	ldr	r3, [pc, #148]	@ (800c35c <HAL_FLASH_Program+0xd4>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d009      	beq.n	800c2e4 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800c2d0:	4b22      	ldr	r3, [pc, #136]	@ (800c35c <HAL_FLASH_Program+0xd4>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	4a21      	ldr	r2, [pc, #132]	@ (800c35c <HAL_FLASH_Program+0xd4>)
 800c2d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c2da:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800c2dc:	4b1e      	ldr	r3, [pc, #120]	@ (800c358 <HAL_FLASH_Program+0xd0>)
 800c2de:	2202      	movs	r2, #2
 800c2e0:	771a      	strb	r2, [r3, #28]
 800c2e2:	e002      	b.n	800c2ea <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800c2e4:	4b1c      	ldr	r3, [pc, #112]	@ (800c358 <HAL_FLASH_Program+0xd0>)
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d107      	bne.n	800c300 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800c2f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2f4:	68b8      	ldr	r0, [r7, #8]
 800c2f6:	f000 f8f9 	bl	800c4ec <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	613b      	str	r3, [r7, #16]
 800c2fe:	e010      	b.n	800c322 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2b01      	cmp	r3, #1
 800c304:	d002      	beq.n	800c30c <HAL_FLASH_Program+0x84>
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2b02      	cmp	r3, #2
 800c30a:	d10a      	bne.n	800c322 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	4619      	mov	r1, r3
 800c310:	68b8      	ldr	r0, [r7, #8]
 800c312:	f000 f911 	bl	800c538 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2b02      	cmp	r3, #2
 800c31a:	d102      	bne.n	800c322 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800c31c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800c320:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c322:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800c326:	f000 f88b 	bl	800c440 <FLASH_WaitForLastOperation>
 800c32a:	4603      	mov	r3, r0
 800c32c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d006      	beq.n	800c342 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800c334:	4b09      	ldr	r3, [pc, #36]	@ (800c35c <HAL_FLASH_Program+0xd4>)
 800c336:	695a      	ldr	r2, [r3, #20]
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	43db      	mvns	r3, r3
 800c33c:	4907      	ldr	r1, [pc, #28]	@ (800c35c <HAL_FLASH_Program+0xd4>)
 800c33e:	4013      	ands	r3, r2
 800c340:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800c342:	f000 fae5 	bl	800c910 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800c346:	4b04      	ldr	r3, [pc, #16]	@ (800c358 <HAL_FLASH_Program+0xd0>)
 800c348:	2200      	movs	r2, #0
 800c34a:	701a      	strb	r2, [r3, #0]

  return status;
 800c34c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3718      	adds	r7, #24
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop
 800c358:	2000017c 	.word	0x2000017c
 800c35c:	40022000 	.word	0x40022000

0800c360 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800c366:	2300      	movs	r3, #0
 800c368:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800c36a:	4b0b      	ldr	r3, [pc, #44]	@ (800c398 <HAL_FLASH_Unlock+0x38>)
 800c36c:	695b      	ldr	r3, [r3, #20]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	da0b      	bge.n	800c38a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800c372:	4b09      	ldr	r3, [pc, #36]	@ (800c398 <HAL_FLASH_Unlock+0x38>)
 800c374:	4a09      	ldr	r2, [pc, #36]	@ (800c39c <HAL_FLASH_Unlock+0x3c>)
 800c376:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800c378:	4b07      	ldr	r3, [pc, #28]	@ (800c398 <HAL_FLASH_Unlock+0x38>)
 800c37a:	4a09      	ldr	r2, [pc, #36]	@ (800c3a0 <HAL_FLASH_Unlock+0x40>)
 800c37c:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800c37e:	4b06      	ldr	r3, [pc, #24]	@ (800c398 <HAL_FLASH_Unlock+0x38>)
 800c380:	695b      	ldr	r3, [r3, #20]
 800c382:	2b00      	cmp	r3, #0
 800c384:	da01      	bge.n	800c38a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800c386:	2301      	movs	r3, #1
 800c388:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800c38a:	79fb      	ldrb	r3, [r7, #7]
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	370c      	adds	r7, #12
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr
 800c398:	40022000 	.word	0x40022000
 800c39c:	45670123 	.word	0x45670123
 800c3a0:	cdef89ab 	.word	0xcdef89ab

0800c3a4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800c3a8:	4b05      	ldr	r3, [pc, #20]	@ (800c3c0 <HAL_FLASH_Lock+0x1c>)
 800c3aa:	695b      	ldr	r3, [r3, #20]
 800c3ac:	4a04      	ldr	r2, [pc, #16]	@ (800c3c0 <HAL_FLASH_Lock+0x1c>)
 800c3ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c3b2:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800c3b4:	2300      	movs	r3, #0
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr
 800c3c0:	40022000 	.word	0x40022000

0800c3c4 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 800c3c8:	4b09      	ldr	r3, [pc, #36]	@ (800c3f0 <HAL_FLASH_OB_Unlock+0x2c>)
 800c3ca:	695b      	ldr	r3, [r3, #20]
 800c3cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d007      	beq.n	800c3e4 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800c3d4:	4b06      	ldr	r3, [pc, #24]	@ (800c3f0 <HAL_FLASH_OB_Unlock+0x2c>)
 800c3d6:	4a07      	ldr	r2, [pc, #28]	@ (800c3f4 <HAL_FLASH_OB_Unlock+0x30>)
 800c3d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800c3da:	4b05      	ldr	r3, [pc, #20]	@ (800c3f0 <HAL_FLASH_OB_Unlock+0x2c>)
 800c3dc:	4a06      	ldr	r2, [pc, #24]	@ (800c3f8 <HAL_FLASH_OB_Unlock+0x34>)
 800c3de:	60da      	str	r2, [r3, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	e000      	b.n	800c3e6 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800c3e4:	2301      	movs	r3, #1
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ee:	4770      	bx	lr
 800c3f0:	40022000 	.word	0x40022000
 800c3f4:	08192a3b 	.word	0x08192a3b
 800c3f8:	4c5d6e7f 	.word	0x4c5d6e7f

0800c3fc <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 800c400:	4b05      	ldr	r3, [pc, #20]	@ (800c418 <HAL_FLASH_OB_Lock+0x1c>)
 800c402:	695b      	ldr	r3, [r3, #20]
 800c404:	4a04      	ldr	r2, [pc, #16]	@ (800c418 <HAL_FLASH_OB_Lock+0x1c>)
 800c406:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c40a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800c40c:	2300      	movs	r3, #0
}
 800c40e:	4618      	mov	r0, r3
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr
 800c418:	40022000 	.word	0x40022000

0800c41c <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 800c420:	4b06      	ldr	r3, [pc, #24]	@ (800c43c <HAL_FLASH_OB_Launch+0x20>)
 800c422:	695b      	ldr	r3, [r3, #20]
 800c424:	4a05      	ldr	r2, [pc, #20]	@ (800c43c <HAL_FLASH_OB_Launch+0x20>)
 800c426:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c42a:	6153      	str	r3, [r2, #20]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 800c42c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800c430:	f000 f806 	bl	800c440 <FLASH_WaitForLastOperation>
 800c434:	4603      	mov	r3, r0
}
 800c436:	4618      	mov	r0, r3
 800c438:	bd80      	pop	{r7, pc}
 800c43a:	bf00      	nop
 800c43c:	40022000 	.word	0x40022000

0800c440 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800c448:	f7fd fdde 	bl	800a008 <HAL_GetTick>
 800c44c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800c44e:	e00d      	b.n	800c46c <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c456:	d009      	beq.n	800c46c <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800c458:	f7fd fdd6 	bl	800a008 <HAL_GetTick>
 800c45c:	4602      	mov	r2, r0
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	1ad3      	subs	r3, r2, r3
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	429a      	cmp	r2, r3
 800c466:	d801      	bhi.n	800c46c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800c468:	2303      	movs	r3, #3
 800c46a:	e036      	b.n	800c4da <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800c46c:	4b1d      	ldr	r3, [pc, #116]	@ (800c4e4 <FLASH_WaitForLastOperation+0xa4>)
 800c46e:	691b      	ldr	r3, [r3, #16]
 800c470:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c474:	2b00      	cmp	r3, #0
 800c476:	d1eb      	bne.n	800c450 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800c478:	4b1a      	ldr	r3, [pc, #104]	@ (800c4e4 <FLASH_WaitForLastOperation+0xa4>)
 800c47a:	691a      	ldr	r2, [r3, #16]
 800c47c:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800c480:	4013      	ands	r3, r2
 800c482:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d01d      	beq.n	800c4c6 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800c48a:	4b17      	ldr	r3, [pc, #92]	@ (800c4e8 <FLASH_WaitForLastOperation+0xa8>)
 800c48c:	685a      	ldr	r2, [r3, #4]
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	4313      	orrs	r3, r2
 800c492:	4a15      	ldr	r2, [pc, #84]	@ (800c4e8 <FLASH_WaitForLastOperation+0xa8>)
 800c494:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c49c:	d307      	bcc.n	800c4ae <FLASH_WaitForLastOperation+0x6e>
 800c49e:	4b11      	ldr	r3, [pc, #68]	@ (800c4e4 <FLASH_WaitForLastOperation+0xa4>)
 800c4a0:	699a      	ldr	r2, [r3, #24]
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c4a8:	490e      	ldr	r1, [pc, #56]	@ (800c4e4 <FLASH_WaitForLastOperation+0xa4>)
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	618b      	str	r3, [r1, #24]
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d004      	beq.n	800c4c2 <FLASH_WaitForLastOperation+0x82>
 800c4b8:	4a0a      	ldr	r2, [pc, #40]	@ (800c4e4 <FLASH_WaitForLastOperation+0xa4>)
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800c4c0:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e009      	b.n	800c4da <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800c4c6:	4b07      	ldr	r3, [pc, #28]	@ (800c4e4 <FLASH_WaitForLastOperation+0xa4>)
 800c4c8:	691b      	ldr	r3, [r3, #16]
 800c4ca:	f003 0301 	and.w	r3, r3, #1
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d002      	beq.n	800c4d8 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c4d2:	4b04      	ldr	r3, [pc, #16]	@ (800c4e4 <FLASH_WaitForLastOperation+0xa4>)
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800c4d8:	2300      	movs	r3, #0
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3710      	adds	r7, #16
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	40022000 	.word	0x40022000
 800c4e8:	2000017c 	.word	0x2000017c

0800c4ec <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b085      	sub	sp, #20
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800c4f8:	4b0e      	ldr	r3, [pc, #56]	@ (800c534 <FLASH_Program_DoubleWord+0x48>)
 800c4fa:	695b      	ldr	r3, [r3, #20]
 800c4fc:	4a0d      	ldr	r2, [pc, #52]	@ (800c534 <FLASH_Program_DoubleWord+0x48>)
 800c4fe:	f043 0301 	orr.w	r3, r3, #1
 800c502:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	683a      	ldr	r2, [r7, #0]
 800c508:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800c50a:	f3bf 8f6f 	isb	sy
}
 800c50e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800c510:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c514:	f04f 0200 	mov.w	r2, #0
 800c518:	f04f 0300 	mov.w	r3, #0
 800c51c:	000a      	movs	r2, r1
 800c51e:	2300      	movs	r3, #0
 800c520:	68f9      	ldr	r1, [r7, #12]
 800c522:	3104      	adds	r1, #4
 800c524:	4613      	mov	r3, r2
 800c526:	600b      	str	r3, [r1, #0]
}
 800c528:	bf00      	nop
 800c52a:	3714      	adds	r7, #20
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr
 800c534:	40022000 	.word	0x40022000

0800c538 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800c538:	b480      	push	{r7}
 800c53a:	b089      	sub	sp, #36	@ 0x24
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800c542:	2340      	movs	r3, #64	@ 0x40
 800c544:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800c54e:	4b14      	ldr	r3, [pc, #80]	@ (800c5a0 <FLASH_Program_Fast+0x68>)
 800c550:	695b      	ldr	r3, [r3, #20]
 800c552:	4a13      	ldr	r2, [pc, #76]	@ (800c5a0 <FLASH_Program_Fast+0x68>)
 800c554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c558:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c55a:	f3ef 8310 	mrs	r3, PRIMASK
 800c55e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c560:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800c562:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c564:	b672      	cpsid	i
}
 800c566:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	69bb      	ldr	r3, [r7, #24]
 800c56e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800c570:	69bb      	ldr	r3, [r7, #24]
 800c572:	3304      	adds	r3, #4
 800c574:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	3304      	adds	r3, #4
 800c57a:	617b      	str	r3, [r7, #20]
    row_index--;
 800c57c:	7ffb      	ldrb	r3, [r7, #31]
 800c57e:	3b01      	subs	r3, #1
 800c580:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800c582:	7ffb      	ldrb	r3, [r7, #31]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d1ef      	bne.n	800c568 <FLASH_Program_Fast+0x30>
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	f383 8810 	msr	PRIMASK, r3
}
 800c592:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800c594:	bf00      	nop
 800c596:	3724      	adds	r7, #36	@ 0x24
 800c598:	46bd      	mov	sp, r7
 800c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59e:	4770      	bx	lr
 800c5a0:	40022000 	.word	0x40022000

0800c5a4 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c5ae:	4b49      	ldr	r3, [pc, #292]	@ (800c6d4 <HAL_FLASHEx_Erase+0x130>)
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d101      	bne.n	800c5ba <HAL_FLASHEx_Erase+0x16>
 800c5b6:	2302      	movs	r3, #2
 800c5b8:	e087      	b.n	800c6ca <HAL_FLASHEx_Erase+0x126>
 800c5ba:	4b46      	ldr	r3, [pc, #280]	@ (800c6d4 <HAL_FLASHEx_Erase+0x130>)
 800c5bc:	2201      	movs	r2, #1
 800c5be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c5c0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800c5c4:	f7ff ff3c 	bl	800c440 <FLASH_WaitForLastOperation>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800c5cc:	7bfb      	ldrb	r3, [r7, #15]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d177      	bne.n	800c6c2 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c5d2:	4b40      	ldr	r3, [pc, #256]	@ (800c6d4 <HAL_FLASHEx_Erase+0x130>)
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800c5d8:	4b3f      	ldr	r3, [pc, #252]	@ (800c6d8 <HAL_FLASHEx_Erase+0x134>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d013      	beq.n	800c60c <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800c5e4:	4b3c      	ldr	r3, [pc, #240]	@ (800c6d8 <HAL_FLASHEx_Erase+0x134>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d009      	beq.n	800c604 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800c5f0:	4b39      	ldr	r3, [pc, #228]	@ (800c6d8 <HAL_FLASHEx_Erase+0x134>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4a38      	ldr	r2, [pc, #224]	@ (800c6d8 <HAL_FLASHEx_Erase+0x134>)
 800c5f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c5fa:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800c5fc:	4b35      	ldr	r3, [pc, #212]	@ (800c6d4 <HAL_FLASHEx_Erase+0x130>)
 800c5fe:	2203      	movs	r2, #3
 800c600:	771a      	strb	r2, [r3, #28]
 800c602:	e016      	b.n	800c632 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800c604:	4b33      	ldr	r3, [pc, #204]	@ (800c6d4 <HAL_FLASHEx_Erase+0x130>)
 800c606:	2201      	movs	r2, #1
 800c608:	771a      	strb	r2, [r3, #28]
 800c60a:	e012      	b.n	800c632 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800c60c:	4b32      	ldr	r3, [pc, #200]	@ (800c6d8 <HAL_FLASHEx_Erase+0x134>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c614:	2b00      	cmp	r3, #0
 800c616:	d009      	beq.n	800c62c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800c618:	4b2f      	ldr	r3, [pc, #188]	@ (800c6d8 <HAL_FLASHEx_Erase+0x134>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a2e      	ldr	r2, [pc, #184]	@ (800c6d8 <HAL_FLASHEx_Erase+0x134>)
 800c61e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c622:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800c624:	4b2b      	ldr	r3, [pc, #172]	@ (800c6d4 <HAL_FLASHEx_Erase+0x130>)
 800c626:	2202      	movs	r2, #2
 800c628:	771a      	strb	r2, [r3, #28]
 800c62a:	e002      	b.n	800c632 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800c62c:	4b29      	ldr	r3, [pc, #164]	@ (800c6d4 <HAL_FLASHEx_Erase+0x130>)
 800c62e:	2200      	movs	r2, #0
 800c630:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2b01      	cmp	r3, #1
 800c638:	d113      	bne.n	800c662 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	4618      	mov	r0, r3
 800c640:	f000 f908 	bl	800c854 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c644:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800c648:	f7ff fefa 	bl	800c440 <FLASH_WaitForLastOperation>
 800c64c:	4603      	mov	r3, r0
 800c64e:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800c650:	4b21      	ldr	r3, [pc, #132]	@ (800c6d8 <HAL_FLASHEx_Erase+0x134>)
 800c652:	695b      	ldr	r3, [r3, #20]
 800c654:	4a20      	ldr	r2, [pc, #128]	@ (800c6d8 <HAL_FLASHEx_Erase+0x134>)
 800c656:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c65a:	f023 0304 	bic.w	r3, r3, #4
 800c65e:	6153      	str	r3, [r2, #20]
 800c660:	e02d      	b.n	800c6be <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	f04f 32ff 	mov.w	r2, #4294967295
 800c668:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	689b      	ldr	r3, [r3, #8]
 800c66e:	60bb      	str	r3, [r7, #8]
 800c670:	e01d      	b.n	800c6ae <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	4619      	mov	r1, r3
 800c678:	68b8      	ldr	r0, [r7, #8]
 800c67a:	f000 f913 	bl	800c8a4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c67e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800c682:	f7ff fedd 	bl	800c440 <FLASH_WaitForLastOperation>
 800c686:	4603      	mov	r3, r0
 800c688:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800c68a:	4b13      	ldr	r3, [pc, #76]	@ (800c6d8 <HAL_FLASHEx_Erase+0x134>)
 800c68c:	695b      	ldr	r3, [r3, #20]
 800c68e:	4a12      	ldr	r2, [pc, #72]	@ (800c6d8 <HAL_FLASHEx_Erase+0x134>)
 800c690:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800c694:	f023 0302 	bic.w	r3, r3, #2
 800c698:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800c69a:	7bfb      	ldrb	r3, [r7, #15]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d003      	beq.n	800c6a8 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	68ba      	ldr	r2, [r7, #8]
 800c6a4:	601a      	str	r2, [r3, #0]
          break;
 800c6a6:	e00a      	b.n	800c6be <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	60bb      	str	r3, [r7, #8]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	689a      	ldr	r2, [r3, #8]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	4413      	add	r3, r2
 800c6b8:	68ba      	ldr	r2, [r7, #8]
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	d3d9      	bcc.n	800c672 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800c6be:	f000 f927 	bl	800c910 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800c6c2:	4b04      	ldr	r3, [pc, #16]	@ (800c6d4 <HAL_FLASHEx_Erase+0x130>)
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	701a      	strb	r2, [r3, #0]

  return status;
 800c6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3710      	adds	r7, #16
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	2000017c 	.word	0x2000017c
 800c6d8:	40022000 	.word	0x40022000

0800c6dc <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c6e8:	4b32      	ldr	r3, [pc, #200]	@ (800c7b4 <HAL_FLASHEx_OBProgram+0xd8>)
 800c6ea:	781b      	ldrb	r3, [r3, #0]
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d101      	bne.n	800c6f4 <HAL_FLASHEx_OBProgram+0x18>
 800c6f0:	2302      	movs	r3, #2
 800c6f2:	e05a      	b.n	800c7aa <HAL_FLASHEx_OBProgram+0xce>
 800c6f4:	4b2f      	ldr	r3, [pc, #188]	@ (800c7b4 <HAL_FLASHEx_OBProgram+0xd8>)
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c6fa:	4b2e      	ldr	r3, [pc, #184]	@ (800c7b4 <HAL_FLASHEx_OBProgram+0xd8>)
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f003 0301 	and.w	r3, r3, #1
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d00d      	beq.n	800c728 <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if(FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6858      	ldr	r0, [r3, #4]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6899      	ldr	r1, [r3, #8]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	461a      	mov	r2, r3
 800c71a:	f000 f943 	bl	800c9a4 <FLASH_OB_WRPConfig>
 800c71e:	4603      	mov	r3, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d001      	beq.n	800c728 <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 800c724:	2301      	movs	r3, #1
 800c726:	73fb      	strb	r3, [r7, #15]
    }

  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f003 0302 	and.w	r3, r3, #2
 800c730:	2b00      	cmp	r3, #0
 800c732:	d009      	beq.n	800c748 <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	691b      	ldr	r3, [r3, #16]
 800c738:	4618      	mov	r0, r3
 800c73a:	f000 f997 	bl	800ca6c <FLASH_OB_RDPConfig>
 800c73e:	4603      	mov	r3, r0
 800c740:	2b00      	cmp	r3, #0
 800c742:	d001      	beq.n	800c748 <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 800c744:	2301      	movs	r3, #1
 800c746:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* User Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f003 0304 	and.w	r3, r3, #4
 800c750:	2b00      	cmp	r3, #0
 800c752:	d00c      	beq.n	800c76e <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	695a      	ldr	r2, [r3, #20]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	699b      	ldr	r3, [r3, #24]
 800c75c:	4619      	mov	r1, r3
 800c75e:	4610      	mov	r0, r2
 800c760:	f000 f9b2 	bl	800cac8 <FLASH_OB_UserConfig>
 800c764:	4603      	mov	r3, r0
 800c766:	2b00      	cmp	r3, #0
 800c768:	d001      	beq.n	800c76e <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 800c76a:	2301      	movs	r3, #1
 800c76c:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* PCROP Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f003 0308 	and.w	r3, r3, #8
 800c776:	2b00      	cmp	r3, #0
 800c778:	d013      	beq.n	800c7a2 <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a1a      	ldr	r2, [r3, #32]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c782:	429a      	cmp	r2, r3
 800c784:	d00d      	beq.n	800c7a2 <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	69d8      	ldr	r0, [r3, #28]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6a19      	ldr	r1, [r3, #32]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c792:	461a      	mov	r2, r3
 800c794:	f000 fa90 	bl	800ccb8 <FLASH_OB_PCROPConfig>
 800c798:	4603      	mov	r3, r0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d001      	beq.n	800c7a2 <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800c7a2:	4b04      	ldr	r3, [pc, #16]	@ (800c7b4 <HAL_FLASHEx_OBProgram+0xd8>)
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	701a      	strb	r2, [r3, #0]

  return status;
 800c7a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3710      	adds	r7, #16
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}
 800c7b2:	bf00      	nop
 800c7b4:	2000017c 	.word	0x2000017c

0800c7b8 <HAL_FLASHEx_OBGetConfig>:
  *         which area is requested for the WRP and PCROP, else no information will be returned
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b082      	sub	sp, #8
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2206      	movs	r2, #6
 800c7c4:	601a      	str	r2, [r3, #0]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d00b      	beq.n	800c7e6 <HAL_FLASHEx_OBGetConfig+0x2e>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d007      	beq.n	800c7e6 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	685b      	ldr	r3, [r3, #4]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	d003      	beq.n	800c7e6 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	2b04      	cmp	r3, #4
 800c7e4:	d10f      	bne.n	800c806 <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f043 0201 	orr.w	r2, r3, #1
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6858      	ldr	r0, [r3, #4]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f103 0108 	add.w	r1, r3, #8
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	330c      	adds	r3, #12
 800c800:	461a      	mov	r2, r3
 800c802:	f000 fb05 	bl	800ce10 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800c806:	f000 fb4d 	bl	800cea4 <FLASH_OB_GetRDP>
 800c80a:	4602      	mov	r2, r0
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800c810:	f000 fb62 	bl	800ced8 <FLASH_OB_GetUser>
 800c814:	4602      	mov	r2, r0
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	619a      	str	r2, [r3, #24]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	69db      	ldr	r3, [r3, #28]
 800c81e:	2b01      	cmp	r3, #1
 800c820:	d003      	beq.n	800c82a <HAL_FLASHEx_OBGetConfig+0x72>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	69db      	ldr	r3, [r3, #28]
 800c826:	2b02      	cmp	r3, #2
 800c828:	d110      	bne.n	800c84c <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if(pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f043 0208 	orr.w	r2, r3, #8
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f103 001c 	add.w	r0, r3, #28
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f103 0120 	add.w	r1, r3, #32
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	3324      	adds	r3, #36	@ 0x24
 800c846:	461a      	mov	r2, r3
 800c848:	f000 fb5a 	bl	800cf00 <FLASH_OB_GetPCROP>
  }
}
 800c84c:	bf00      	nop
 800c84e:	3708      	adds	r7, #8
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}

0800c854 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800c854:	b480      	push	{r7}
 800c856:	b083      	sub	sp, #12
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f003 0301 	and.w	r3, r3, #1
 800c862:	2b00      	cmp	r3, #0
 800c864:	d005      	beq.n	800c872 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800c866:	4b0e      	ldr	r3, [pc, #56]	@ (800c8a0 <FLASH_MassErase+0x4c>)
 800c868:	695b      	ldr	r3, [r3, #20]
 800c86a:	4a0d      	ldr	r2, [pc, #52]	@ (800c8a0 <FLASH_MassErase+0x4c>)
 800c86c:	f043 0304 	orr.w	r3, r3, #4
 800c870:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f003 0302 	and.w	r3, r3, #2
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d005      	beq.n	800c888 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800c87c:	4b08      	ldr	r3, [pc, #32]	@ (800c8a0 <FLASH_MassErase+0x4c>)
 800c87e:	695b      	ldr	r3, [r3, #20]
 800c880:	4a07      	ldr	r2, [pc, #28]	@ (800c8a0 <FLASH_MassErase+0x4c>)
 800c882:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c886:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800c888:	4b05      	ldr	r3, [pc, #20]	@ (800c8a0 <FLASH_MassErase+0x4c>)
 800c88a:	695b      	ldr	r3, [r3, #20]
 800c88c:	4a04      	ldr	r2, [pc, #16]	@ (800c8a0 <FLASH_MassErase+0x4c>)
 800c88e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c892:	6153      	str	r3, [r2, #20]
}
 800c894:	bf00      	nop
 800c896:	370c      	adds	r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr
 800c8a0:	40022000 	.word	0x40022000

0800c8a4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b083      	sub	sp, #12
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	f003 0301 	and.w	r3, r3, #1
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d006      	beq.n	800c8c6 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800c8b8:	4b14      	ldr	r3, [pc, #80]	@ (800c90c <FLASH_PageErase+0x68>)
 800c8ba:	695b      	ldr	r3, [r3, #20]
 800c8bc:	4a13      	ldr	r2, [pc, #76]	@ (800c90c <FLASH_PageErase+0x68>)
 800c8be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c8c2:	6153      	str	r3, [r2, #20]
 800c8c4:	e005      	b.n	800c8d2 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800c8c6:	4b11      	ldr	r3, [pc, #68]	@ (800c90c <FLASH_PageErase+0x68>)
 800c8c8:	695b      	ldr	r3, [r3, #20]
 800c8ca:	4a10      	ldr	r2, [pc, #64]	@ (800c90c <FLASH_PageErase+0x68>)
 800c8cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800c8d0:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800c8d2:	4b0e      	ldr	r3, [pc, #56]	@ (800c90c <FLASH_PageErase+0x68>)
 800c8d4:	695b      	ldr	r3, [r3, #20]
 800c8d6:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	00db      	lsls	r3, r3, #3
 800c8de:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 800c8e2:	490a      	ldr	r1, [pc, #40]	@ (800c90c <FLASH_PageErase+0x68>)
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800c8e8:	4b08      	ldr	r3, [pc, #32]	@ (800c90c <FLASH_PageErase+0x68>)
 800c8ea:	695b      	ldr	r3, [r3, #20]
 800c8ec:	4a07      	ldr	r2, [pc, #28]	@ (800c90c <FLASH_PageErase+0x68>)
 800c8ee:	f043 0302 	orr.w	r3, r3, #2
 800c8f2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800c8f4:	4b05      	ldr	r3, [pc, #20]	@ (800c90c <FLASH_PageErase+0x68>)
 800c8f6:	695b      	ldr	r3, [r3, #20]
 800c8f8:	4a04      	ldr	r2, [pc, #16]	@ (800c90c <FLASH_PageErase+0x68>)
 800c8fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c8fe:	6153      	str	r3, [r2, #20]
}
 800c900:	bf00      	nop
 800c902:	370c      	adds	r7, #12
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr
 800c90c:	40022000 	.word	0x40022000

0800c910 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800c910:	b480      	push	{r7}
 800c912:	b083      	sub	sp, #12
 800c914:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800c916:	4b21      	ldr	r3, [pc, #132]	@ (800c99c <FLASH_FlushCaches+0x8c>)
 800c918:	7f1b      	ldrb	r3, [r3, #28]
 800c91a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800c91c:	79fb      	ldrb	r3, [r7, #7]
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d002      	beq.n	800c928 <FLASH_FlushCaches+0x18>
 800c922:	79fb      	ldrb	r3, [r7, #7]
 800c924:	2b03      	cmp	r3, #3
 800c926:	d117      	bne.n	800c958 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800c928:	4b1d      	ldr	r3, [pc, #116]	@ (800c9a0 <FLASH_FlushCaches+0x90>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4a1c      	ldr	r2, [pc, #112]	@ (800c9a0 <FLASH_FlushCaches+0x90>)
 800c92e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c932:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800c934:	4b1a      	ldr	r3, [pc, #104]	@ (800c9a0 <FLASH_FlushCaches+0x90>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4a19      	ldr	r2, [pc, #100]	@ (800c9a0 <FLASH_FlushCaches+0x90>)
 800c93a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800c93e:	6013      	str	r3, [r2, #0]
 800c940:	4b17      	ldr	r3, [pc, #92]	@ (800c9a0 <FLASH_FlushCaches+0x90>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4a16      	ldr	r2, [pc, #88]	@ (800c9a0 <FLASH_FlushCaches+0x90>)
 800c946:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c94a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c94c:	4b14      	ldr	r3, [pc, #80]	@ (800c9a0 <FLASH_FlushCaches+0x90>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a13      	ldr	r2, [pc, #76]	@ (800c9a0 <FLASH_FlushCaches+0x90>)
 800c952:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c956:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800c958:	79fb      	ldrb	r3, [r7, #7]
 800c95a:	2b02      	cmp	r3, #2
 800c95c:	d002      	beq.n	800c964 <FLASH_FlushCaches+0x54>
 800c95e:	79fb      	ldrb	r3, [r7, #7]
 800c960:	2b03      	cmp	r3, #3
 800c962:	d111      	bne.n	800c988 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800c964:	4b0e      	ldr	r3, [pc, #56]	@ (800c9a0 <FLASH_FlushCaches+0x90>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4a0d      	ldr	r2, [pc, #52]	@ (800c9a0 <FLASH_FlushCaches+0x90>)
 800c96a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c96e:	6013      	str	r3, [r2, #0]
 800c970:	4b0b      	ldr	r3, [pc, #44]	@ (800c9a0 <FLASH_FlushCaches+0x90>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4a0a      	ldr	r2, [pc, #40]	@ (800c9a0 <FLASH_FlushCaches+0x90>)
 800c976:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c97a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800c97c:	4b08      	ldr	r3, [pc, #32]	@ (800c9a0 <FLASH_FlushCaches+0x90>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4a07      	ldr	r2, [pc, #28]	@ (800c9a0 <FLASH_FlushCaches+0x90>)
 800c982:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c986:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800c988:	4b04      	ldr	r3, [pc, #16]	@ (800c99c <FLASH_FlushCaches+0x8c>)
 800c98a:	2200      	movs	r2, #0
 800c98c:	771a      	strb	r2, [r3, #28]
}
 800c98e:	bf00      	nop
 800c990:	370c      	adds	r7, #12
 800c992:	46bd      	mov	sp, r7
 800c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c998:	4770      	bx	lr
 800c99a:	bf00      	nop
 800c99c:	2000017c 	.word	0x2000017c
 800c9a0:	40022000 	.word	0x40022000

0800c9a4 <FLASH_OB_WRPConfig>:
  *          This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1)
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b086      	sub	sp, #24
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c9b0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800c9b4:	f7ff fd44 	bl	800c440 <FLASH_WaitForLastOperation>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800c9bc:	7dfb      	ldrb	r3, [r7, #23]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d14c      	bne.n	800ca5c <FLASH_OB_WRPConfig+0xb8>
  {
    /* Configure the write protected area */
    if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d10b      	bne.n	800c9e0 <FLASH_OB_WRPConfig+0x3c>
    {
      MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
 800c9c8:	4b27      	ldr	r3, [pc, #156]	@ (800ca68 <FLASH_OB_WRPConfig+0xc4>)
 800c9ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9cc:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	0419      	lsls	r1, r3, #16
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	430b      	orrs	r3, r1
 800c9d8:	4923      	ldr	r1, [pc, #140]	@ (800ca68 <FLASH_OB_WRPConfig+0xc4>)
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800c9de:	e02b      	b.n	800ca38 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d10b      	bne.n	800c9fe <FLASH_OB_WRPConfig+0x5a>
    {
      MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
 800c9e6:	4b20      	ldr	r3, [pc, #128]	@ (800ca68 <FLASH_OB_WRPConfig+0xc4>)
 800c9e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9ea:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	0419      	lsls	r1, r3, #16
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	430b      	orrs	r3, r1
 800c9f6:	491c      	ldr	r1, [pc, #112]	@ (800ca68 <FLASH_OB_WRPConfig+0xc4>)
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	630b      	str	r3, [r1, #48]	@ 0x30
 800c9fc:	e01c      	b.n	800ca38 <FLASH_OB_WRPConfig+0x94>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2b02      	cmp	r3, #2
 800ca02:	d10b      	bne.n	800ca1c <FLASH_OB_WRPConfig+0x78>
    {
      MODIFY_REG(FLASH->WRP2AR, (FLASH_WRP2AR_WRP2A_STRT | FLASH_WRP2AR_WRP2A_END),
 800ca04:	4b18      	ldr	r3, [pc, #96]	@ (800ca68 <FLASH_OB_WRPConfig+0xc4>)
 800ca06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca08:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	0419      	lsls	r1, r3, #16
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	430b      	orrs	r3, r1
 800ca14:	4914      	ldr	r1, [pc, #80]	@ (800ca68 <FLASH_OB_WRPConfig+0xc4>)
 800ca16:	4313      	orrs	r3, r2
 800ca18:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800ca1a:	e00d      	b.n	800ca38 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2b04      	cmp	r3, #4
 800ca20:	d10a      	bne.n	800ca38 <FLASH_OB_WRPConfig+0x94>
    {
      MODIFY_REG(FLASH->WRP2BR, (FLASH_WRP2BR_WRP2B_STRT | FLASH_WRP2BR_WRP2B_END),
 800ca22:	4b11      	ldr	r3, [pc, #68]	@ (800ca68 <FLASH_OB_WRPConfig+0xc4>)
 800ca24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca26:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	0419      	lsls	r1, r3, #16
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	430b      	orrs	r3, r1
 800ca32:	490d      	ldr	r1, [pc, #52]	@ (800ca68 <FLASH_OB_WRPConfig+0xc4>)
 800ca34:	4313      	orrs	r3, r2
 800ca36:	650b      	str	r3, [r1, #80]	@ 0x50
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800ca38:	4b0b      	ldr	r3, [pc, #44]	@ (800ca68 <FLASH_OB_WRPConfig+0xc4>)
 800ca3a:	695b      	ldr	r3, [r3, #20]
 800ca3c:	4a0a      	ldr	r2, [pc, #40]	@ (800ca68 <FLASH_OB_WRPConfig+0xc4>)
 800ca3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ca42:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ca44:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800ca48:	f7ff fcfa 	bl	800c440 <FLASH_WaitForLastOperation>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	75fb      	strb	r3, [r7, #23]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800ca50:	4b05      	ldr	r3, [pc, #20]	@ (800ca68 <FLASH_OB_WRPConfig+0xc4>)
 800ca52:	695b      	ldr	r3, [r3, #20]
 800ca54:	4a04      	ldr	r2, [pc, #16]	@ (800ca68 <FLASH_OB_WRPConfig+0xc4>)
 800ca56:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ca5a:	6153      	str	r3, [r2, #20]
  }

  return status;
 800ca5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3718      	adds	r7, #24
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	40022000 	.word	0x40022000

0800ca6c <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ca74:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800ca78:	f7ff fce2 	bl	800c440 <FLASH_WaitForLastOperation>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800ca80:	7bfb      	ldrb	r3, [r7, #15]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d119      	bne.n	800caba <FLASH_OB_RDPConfig+0x4e>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 800ca86:	4b0f      	ldr	r3, [pc, #60]	@ (800cac4 <FLASH_OB_RDPConfig+0x58>)
 800ca88:	6a1b      	ldr	r3, [r3, #32]
 800ca8a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ca8e:	490d      	ldr	r1, [pc, #52]	@ (800cac4 <FLASH_OB_RDPConfig+0x58>)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	4313      	orrs	r3, r2
 800ca94:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800ca96:	4b0b      	ldr	r3, [pc, #44]	@ (800cac4 <FLASH_OB_RDPConfig+0x58>)
 800ca98:	695b      	ldr	r3, [r3, #20]
 800ca9a:	4a0a      	ldr	r2, [pc, #40]	@ (800cac4 <FLASH_OB_RDPConfig+0x58>)
 800ca9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800caa0:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800caa2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800caa6:	f7ff fccb 	bl	800c440 <FLASH_WaitForLastOperation>
 800caaa:	4603      	mov	r3, r0
 800caac:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800caae:	4b05      	ldr	r3, [pc, #20]	@ (800cac4 <FLASH_OB_RDPConfig+0x58>)
 800cab0:	695b      	ldr	r3, [r3, #20]
 800cab2:	4a04      	ldr	r2, [pc, #16]	@ (800cac4 <FLASH_OB_RDPConfig+0x58>)
 800cab4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cab8:	6153      	str	r3, [r2, #20]
  }

  return status;
 800caba:	7bfb      	ldrb	r3, [r7, #15]
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3710      	adds	r7, #16
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	40022000 	.word	0x40022000

0800cac8 <FLASH_OB_UserConfig>:
  *         DUALBANK(Bit21), nBOOT1(Bit23), SRAM2_PE(Bit24) and SRAM2_RST(Bit25).
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b086      	sub	sp, #24
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 800cad2:	2300      	movs	r3, #0
 800cad4:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 800cad6:	2300      	movs	r3, #0
 800cad8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cada:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800cade:	f7ff fcaf 	bl	800c440 <FLASH_WaitForLastOperation>
 800cae2:	4603      	mov	r3, r0
 800cae4:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800cae6:	7bfb      	ldrb	r3, [r7, #15]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	f040 80de 	bne.w	800ccaa <FLASH_OB_UserConfig+0x1e2>
  {
    if((UserType & OB_USER_BOR_LEV) != 0U)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f003 0301 	and.w	r3, r3, #1
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d009      	beq.n	800cb0c <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cafe:	697a      	ldr	r2, [r7, #20]
 800cb00:	4313      	orrs	r3, r2
 800cb02:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800cb0a:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STOP) != 0U)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f003 0302 	and.w	r3, r3, #2
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d009      	beq.n	800cb2a <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800cb1c:	697a      	ldr	r2, [r7, #20]
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800cb28:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STDBY) != 0U)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f003 0304 	and.w	r3, r3, #4
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d009      	beq.n	800cb48 <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cb3a:	697a      	ldr	r2, [r7, #20]
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800cb46:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_SHDW) != 0U)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d009      	beq.n	800cb66 <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb58:	697a      	ldr	r2, [r7, #20]
 800cb5a:	4313      	orrs	r3, r2
 800cb5c:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cb64:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_SW) != 0U)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f003 0308 	and.w	r3, r3, #8
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d009      	beq.n	800cb84 <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cb76:	697a      	ldr	r2, [r7, #20]
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 800cb7c:	693b      	ldr	r3, [r7, #16]
 800cb7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cb82:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STOP) != 0U)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f003 0310 	and.w	r3, r3, #16
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d009      	beq.n	800cba2 <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb94:	697a      	ldr	r2, [r7, #20]
 800cb96:	4313      	orrs	r3, r2
 800cb98:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cba0:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STDBY) != 0U)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f003 0320 	and.w	r3, r3, #32
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d009      	beq.n	800cbc0 <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cbb2:	697a      	ldr	r2, [r7, #20]
 800cbb4:	4313      	orrs	r3, r2
 800cbb6:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cbbe:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_WWDG_SW) != 0U)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d009      	beq.n	800cbde <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800cbd0:	697a      	ldr	r2, [r7, #20]
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cbdc:	613b      	str	r3, [r7, #16]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_BFB2) != 0U)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d009      	beq.n	800cbfc <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cbee:	697a      	ldr	r2, [r7, #20]
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cbfa:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_DUALBANK) != 0U)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d009      	beq.n	800cc1a <FLASH_OB_UserConfig+0x152>
#else
      /* DUALBANK option byte should be modified */
      assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));

      /* Set value and mask for DUALBANK option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cc0c:	697a      	ldr	r2, [r7, #20]
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_DUALBANK;
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cc18:	613b      	str	r3, [r7, #16]
#endif
    }
#endif

    if((UserType & OB_USER_nBOOT1) != 0U)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d009      	beq.n	800cc38 <FLASH_OB_UserConfig+0x170>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc2a:	697a      	ldr	r2, [r7, #20]
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cc36:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_PE) != 0U)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d009      	beq.n	800cc56 <FLASH_OB_UserConfig+0x18e>
    {
      /* SRAM2_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_PARITY(UserConfig & FLASH_OPTR_SRAM2_PE));

      /* Set value and mask for SRAM2_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_PE);
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cc48:	697a      	ldr	r2, [r7, #20]
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_PE;
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cc54:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_RST) != 0U)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d009      	beq.n	800cc74 <FLASH_OB_UserConfig+0x1ac>
    {
      /* SRAM2_RST option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));

      /* Set value and mask for SRAM2_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cc66:	697a      	ldr	r2, [r7, #20]
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800cc72:	613b      	str	r3, [r7, #16]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
    }
#endif

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 800cc74:	4b0f      	ldr	r3, [pc, #60]	@ (800ccb4 <FLASH_OB_UserConfig+0x1ec>)
 800cc76:	6a1a      	ldr	r2, [r3, #32]
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	43db      	mvns	r3, r3
 800cc7c:	401a      	ands	r2, r3
 800cc7e:	490d      	ldr	r1, [pc, #52]	@ (800ccb4 <FLASH_OB_UserConfig+0x1ec>)
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	4313      	orrs	r3, r2
 800cc84:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800cc86:	4b0b      	ldr	r3, [pc, #44]	@ (800ccb4 <FLASH_OB_UserConfig+0x1ec>)
 800cc88:	695b      	ldr	r3, [r3, #20]
 800cc8a:	4a0a      	ldr	r2, [pc, #40]	@ (800ccb4 <FLASH_OB_UserConfig+0x1ec>)
 800cc8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cc90:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cc92:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800cc96:	f7ff fbd3 	bl	800c440 <FLASH_WaitForLastOperation>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800cc9e:	4b05      	ldr	r3, [pc, #20]	@ (800ccb4 <FLASH_OB_UserConfig+0x1ec>)
 800cca0:	695b      	ldr	r3, [r3, #20]
 800cca2:	4a04      	ldr	r2, [pc, #16]	@ (800ccb4 <FLASH_OB_UserConfig+0x1ec>)
 800cca4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cca8:	6153      	str	r3, [r2, #20]
  }

  return status;
 800ccaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3718      	adds	r7, #24
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}
 800ccb4:	40022000 	.word	0x40022000

0800ccb8 <FLASH_OB_PCROPConfig>:
  *          This parameter can be an address between PCROPStartAddr and end of the bank
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b088      	sub	sp, #32
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	60f8      	str	r0, [r7, #12]
 800ccc0:	60b9      	str	r1, [r7, #8]
 800ccc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ccc4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800ccc8:	f7ff fbba 	bl	800c440 <FLASH_WaitForLastOperation>
 800cccc:	4603      	mov	r3, r0
 800ccce:	77fb      	strb	r3, [r7, #31]

  if(status == HAL_OK)
 800ccd0:	7ffb      	ldrb	r3, [r7, #31]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	f040 808c 	bne.w	800cdf0 <FLASH_OB_PCROPConfig+0x138>
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800ccd8:	4b48      	ldr	r3, [pc, #288]	@ (800cdfc <FLASH_OB_PCROPConfig+0x144>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d115      	bne.n	800cd10 <FLASH_OB_PCROPConfig+0x58>
    {
      bank1_addr = FLASH_BASE;
 800cce4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cce8:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800ccea:	4b45      	ldr	r3, [pc, #276]	@ (800ce00 <FLASH_OB_PCROPConfig+0x148>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	d008      	beq.n	800cd0a <FLASH_OB_PCROPConfig+0x52>
 800ccf8:	4b41      	ldr	r3, [pc, #260]	@ (800ce00 <FLASH_OB_PCROPConfig+0x148>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	029b      	lsls	r3, r3, #10
 800ccfe:	085a      	lsrs	r2, r3, #1
 800cd00:	4b40      	ldr	r3, [pc, #256]	@ (800ce04 <FLASH_OB_PCROPConfig+0x14c>)
 800cd02:	4013      	ands	r3, r2
 800cd04:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800cd08:	e000      	b.n	800cd0c <FLASH_OB_PCROPConfig+0x54>
 800cd0a:	4b3f      	ldr	r3, [pc, #252]	@ (800ce08 <FLASH_OB_PCROPConfig+0x150>)
 800cd0c:	617b      	str	r3, [r7, #20]
 800cd0e:	e014      	b.n	800cd3a <FLASH_OB_PCROPConfig+0x82>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800cd10:	4b3b      	ldr	r3, [pc, #236]	@ (800ce00 <FLASH_OB_PCROPConfig+0x148>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d008      	beq.n	800cd30 <FLASH_OB_PCROPConfig+0x78>
 800cd1e:	4b38      	ldr	r3, [pc, #224]	@ (800ce00 <FLASH_OB_PCROPConfig+0x148>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	029b      	lsls	r3, r3, #10
 800cd24:	085a      	lsrs	r2, r3, #1
 800cd26:	4b37      	ldr	r3, [pc, #220]	@ (800ce04 <FLASH_OB_PCROPConfig+0x14c>)
 800cd28:	4013      	ands	r3, r2
 800cd2a:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800cd2e:	e000      	b.n	800cd32 <FLASH_OB_PCROPConfig+0x7a>
 800cd30:	4b35      	ldr	r3, [pc, #212]	@ (800ce08 <FLASH_OB_PCROPConfig+0x150>)
 800cd32:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 800cd34:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cd38:	617b      	str	r3, [r7, #20]
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f003 0303 	and.w	r3, r3, #3
 800cd40:	2b01      	cmp	r3, #1
 800cd42:	d11a      	bne.n	800cd7a <FLASH_OB_PCROPConfig+0xc2>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 800cd44:	68ba      	ldr	r2, [r7, #8]
 800cd46:	69bb      	ldr	r3, [r7, #24]
 800cd48:	1ad3      	subs	r3, r2, r3
 800cd4a:	08db      	lsrs	r3, r3, #3
 800cd4c:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 800cd4e:	4b2f      	ldr	r3, [pc, #188]	@ (800ce0c <FLASH_OB_PCROPConfig+0x154>)
 800cd50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd52:	0c1b      	lsrs	r3, r3, #16
 800cd54:	041b      	lsls	r3, r3, #16
 800cd56:	492d      	ldr	r1, [pc, #180]	@ (800ce0c <FLASH_OB_PCROPConfig+0x154>)
 800cd58:	693a      	ldr	r2, [r7, #16]
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	624b      	str	r3, [r1, #36]	@ 0x24

        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	69bb      	ldr	r3, [r7, #24]
 800cd62:	1ad3      	subs	r3, r2, r3
 800cd64:	08db      	lsrs	r3, r3, #3
 800cd66:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 800cd68:	4b28      	ldr	r3, [pc, #160]	@ (800ce0c <FLASH_OB_PCROPConfig+0x154>)
 800cd6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd6c:	0c1b      	lsrs	r3, r3, #16
 800cd6e:	041b      	lsls	r3, r3, #16
 800cd70:	4926      	ldr	r1, [pc, #152]	@ (800ce0c <FLASH_OB_PCROPConfig+0x154>)
 800cd72:	693a      	ldr	r2, [r7, #16]
 800cd74:	4313      	orrs	r3, r2
 800cd76:	628b      	str	r3, [r1, #40]	@ 0x28
 800cd78:	e01e      	b.n	800cdb8 <FLASH_OB_PCROPConfig+0x100>
      }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	f003 0303 	and.w	r3, r3, #3
 800cd80:	2b02      	cmp	r3, #2
 800cd82:	d119      	bne.n	800cdb8 <FLASH_OB_PCROPConfig+0x100>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 800cd84:	68ba      	ldr	r2, [r7, #8]
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	1ad3      	subs	r3, r2, r3
 800cd8a:	08db      	lsrs	r3, r3, #3
 800cd8c:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 800cd8e:	4b1f      	ldr	r3, [pc, #124]	@ (800ce0c <FLASH_OB_PCROPConfig+0x154>)
 800cd90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd92:	0c1b      	lsrs	r3, r3, #16
 800cd94:	041b      	lsls	r3, r3, #16
 800cd96:	491d      	ldr	r1, [pc, #116]	@ (800ce0c <FLASH_OB_PCROPConfig+0x154>)
 800cd98:	693a      	ldr	r2, [r7, #16]
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	644b      	str	r3, [r1, #68]	@ 0x44

        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 800cd9e:	687a      	ldr	r2, [r7, #4]
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	1ad3      	subs	r3, r2, r3
 800cda4:	08db      	lsrs	r3, r3, #3
 800cda6:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 800cda8:	4b18      	ldr	r3, [pc, #96]	@ (800ce0c <FLASH_OB_PCROPConfig+0x154>)
 800cdaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cdac:	0c1b      	lsrs	r3, r3, #16
 800cdae:	041b      	lsls	r3, r3, #16
 800cdb0:	4916      	ldr	r1, [pc, #88]	@ (800ce0c <FLASH_OB_PCROPConfig+0x154>)
 800cdb2:	693a      	ldr	r2, [r7, #16]
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	648b      	str	r3, [r1, #72]	@ 0x48
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 800cdb8:	4b14      	ldr	r3, [pc, #80]	@ (800ce0c <FLASH_OB_PCROPConfig+0x154>)
 800cdba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdbc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cdc6:	4911      	ldr	r1, [pc, #68]	@ (800ce0c <FLASH_OB_PCROPConfig+0x154>)
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	628b      	str	r3, [r1, #40]	@ 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800cdcc:	4b0f      	ldr	r3, [pc, #60]	@ (800ce0c <FLASH_OB_PCROPConfig+0x154>)
 800cdce:	695b      	ldr	r3, [r3, #20]
 800cdd0:	4a0e      	ldr	r2, [pc, #56]	@ (800ce0c <FLASH_OB_PCROPConfig+0x154>)
 800cdd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cdd6:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cdd8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800cddc:	f7ff fb30 	bl	800c440 <FLASH_WaitForLastOperation>
 800cde0:	4603      	mov	r3, r0
 800cde2:	77fb      	strb	r3, [r7, #31]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800cde4:	4b09      	ldr	r3, [pc, #36]	@ (800ce0c <FLASH_OB_PCROPConfig+0x154>)
 800cde6:	695b      	ldr	r3, [r3, #20]
 800cde8:	4a08      	ldr	r2, [pc, #32]	@ (800ce0c <FLASH_OB_PCROPConfig+0x154>)
 800cdea:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cdee:	6153      	str	r3, [r2, #20]
  }

  return status;
 800cdf0:	7ffb      	ldrb	r3, [r7, #31]
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3720      	adds	r7, #32
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	40010000 	.word	0x40010000
 800ce00:	1fff75e0 	.word	0x1fff75e0
 800ce04:	01fffe00 	.word	0x01fffe00
 800ce08:	08080000 	.word	0x08080000
 800ce0c:	40022000 	.word	0x40022000

0800ce10 <FLASH_OB_GetWRP>:
  *                        the write protected area
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t * WRPStartOffset, uint32_t * WRDPEndOffset)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b085      	sub	sp, #20
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	60b9      	str	r1, [r7, #8]
 800ce1a:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d10b      	bne.n	800ce3a <FLASH_OB_GetWRP+0x2a>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 800ce22:	4b1f      	ldr	r3, [pc, #124]	@ (800cea0 <FLASH_OB_GetWRP+0x90>)
 800ce24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce26:	b2da      	uxtb	r2, r3
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 800ce2c:	4b1c      	ldr	r3, [pc, #112]	@ (800cea0 <FLASH_OB_GetWRP+0x90>)
 800ce2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce30:	0c1b      	lsrs	r3, r3, #16
 800ce32:	b2da      	uxtb	r2, r3
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 800ce38:	e02b      	b.n	800ce92 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	d10b      	bne.n	800ce58 <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 800ce40:	4b17      	ldr	r3, [pc, #92]	@ (800cea0 <FLASH_OB_GetWRP+0x90>)
 800ce42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce44:	b2da      	uxtb	r2, r3
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 800ce4a:	4b15      	ldr	r3, [pc, #84]	@ (800cea0 <FLASH_OB_GetWRP+0x90>)
 800ce4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce4e:	0c1b      	lsrs	r3, r3, #16
 800ce50:	b2da      	uxtb	r2, r3
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	601a      	str	r2, [r3, #0]
}
 800ce56:	e01c      	b.n	800ce92 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2b02      	cmp	r3, #2
 800ce5c:	d10b      	bne.n	800ce76 <FLASH_OB_GetWRP+0x66>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 800ce5e:	4b10      	ldr	r3, [pc, #64]	@ (800cea0 <FLASH_OB_GetWRP+0x90>)
 800ce60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce62:	b2da      	uxtb	r2, r3
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 800ce68:	4b0d      	ldr	r3, [pc, #52]	@ (800cea0 <FLASH_OB_GetWRP+0x90>)
 800ce6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce6c:	0c1b      	lsrs	r3, r3, #16
 800ce6e:	b2da      	uxtb	r2, r3
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	601a      	str	r2, [r3, #0]
}
 800ce74:	e00d      	b.n	800ce92 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2b04      	cmp	r3, #4
 800ce7a:	d10a      	bne.n	800ce92 <FLASH_OB_GetWRP+0x82>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 800ce7c:	4b08      	ldr	r3, [pc, #32]	@ (800cea0 <FLASH_OB_GetWRP+0x90>)
 800ce7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce80:	b2da      	uxtb	r2, r3
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 800ce86:	4b06      	ldr	r3, [pc, #24]	@ (800cea0 <FLASH_OB_GetWRP+0x90>)
 800ce88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce8a:	0c1b      	lsrs	r3, r3, #16
 800ce8c:	b2da      	uxtb	r2, r3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	601a      	str	r2, [r3, #0]
}
 800ce92:	bf00      	nop
 800ce94:	3714      	adds	r7, #20
 800ce96:	46bd      	mov	sp, r7
 800ce98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9c:	4770      	bx	lr
 800ce9e:	bf00      	nop
 800cea0:	40022000 	.word	0x40022000

0800cea4 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 800cea4:	b480      	push	{r7}
 800cea6:	b083      	sub	sp, #12
 800cea8:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800ceaa:	4b0a      	ldr	r3, [pc, #40]	@ (800ced4 <FLASH_OB_GetRDP+0x30>)
 800ceac:	6a1b      	ldr	r3, [r3, #32]
 800ceae:	b2db      	uxtb	r3, r3
 800ceb0:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2baa      	cmp	r3, #170	@ 0xaa
 800ceb6:	d004      	beq.n	800cec2 <FLASH_OB_GetRDP+0x1e>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2bcc      	cmp	r3, #204	@ 0xcc
 800cebc:	d001      	beq.n	800cec2 <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 800cebe:	23bb      	movs	r3, #187	@ 0xbb
 800cec0:	e002      	b.n	800cec8 <FLASH_OB_GetRDP+0x24>
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 800cec2:	4b04      	ldr	r3, [pc, #16]	@ (800ced4 <FLASH_OB_GetRDP+0x30>)
 800cec4:	6a1b      	ldr	r3, [r3, #32]
 800cec6:	b2db      	uxtb	r3, r3
  }
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	370c      	adds	r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr
 800ced4:	40022000 	.word	0x40022000

0800ced8 <FLASH_OB_GetUser>:
  *         BOR_LEV(Bit8-10), nRST_STOP(Bit12), nRST_STDBY(Bit13), nRST_SHDW(Bit14),
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27).
  */
static uint32_t FLASH_OB_GetUser(void)
{
 800ced8:	b480      	push	{r7}
 800ceda:	b083      	sub	sp, #12
 800cedc:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 800cede:	4b07      	ldr	r3, [pc, #28]	@ (800cefc <FLASH_OB_GetUser+0x24>)
 800cee0:	6a1b      	ldr	r3, [r3, #32]
 800cee2:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ceea:	607b      	str	r3, [r7, #4]

  return user_config;
 800ceec:	687b      	ldr	r3, [r7, #4]
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	370c      	adds	r7, #12
 800cef2:	46bd      	mov	sp, r7
 800cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef8:	4770      	bx	lr
 800cefa:	bf00      	nop
 800cefc:	40022000 	.word	0x40022000

0800cf00 <FLASH_OB_GetPCROP>:
  *                       the Proprietary code readout protection
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t * PCROPConfig, uint32_t * PCROPStartAddr, uint32_t * PCROPEndAddr)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b089      	sub	sp, #36	@ 0x24
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	60f8      	str	r0, [r7, #12]
 800cf08:	60b9      	str	r1, [r7, #8]
 800cf0a:	607a      	str	r2, [r7, #4]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800cf0c:	4b3b      	ldr	r3, [pc, #236]	@ (800cffc <FLASH_OB_GetPCROP+0xfc>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d115      	bne.n	800cf44 <FLASH_OB_GetPCROP+0x44>
  {
    bank1_addr = FLASH_BASE;
 800cf18:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cf1c:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800cf1e:	4b38      	ldr	r3, [pc, #224]	@ (800d000 <FLASH_OB_GetPCROP+0x100>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	b29b      	uxth	r3, r3
 800cf24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d008      	beq.n	800cf3e <FLASH_OB_GetPCROP+0x3e>
 800cf2c:	4b34      	ldr	r3, [pc, #208]	@ (800d000 <FLASH_OB_GetPCROP+0x100>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	029b      	lsls	r3, r3, #10
 800cf32:	085a      	lsrs	r2, r3, #1
 800cf34:	4b33      	ldr	r3, [pc, #204]	@ (800d004 <FLASH_OB_GetPCROP+0x104>)
 800cf36:	4013      	ands	r3, r2
 800cf38:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800cf3c:	e000      	b.n	800cf40 <FLASH_OB_GetPCROP+0x40>
 800cf3e:	4b32      	ldr	r3, [pc, #200]	@ (800d008 <FLASH_OB_GetPCROP+0x108>)
 800cf40:	61bb      	str	r3, [r7, #24]
 800cf42:	e014      	b.n	800cf6e <FLASH_OB_GetPCROP+0x6e>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800cf44:	4b2e      	ldr	r3, [pc, #184]	@ (800d000 <FLASH_OB_GetPCROP+0x100>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	b29b      	uxth	r3, r3
 800cf4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d008      	beq.n	800cf64 <FLASH_OB_GetPCROP+0x64>
 800cf52:	4b2b      	ldr	r3, [pc, #172]	@ (800d000 <FLASH_OB_GetPCROP+0x100>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	029b      	lsls	r3, r3, #10
 800cf58:	085a      	lsrs	r2, r3, #1
 800cf5a:	4b2a      	ldr	r3, [pc, #168]	@ (800d004 <FLASH_OB_GetPCROP+0x104>)
 800cf5c:	4013      	ands	r3, r2
 800cf5e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800cf62:	e000      	b.n	800cf66 <FLASH_OB_GetPCROP+0x66>
 800cf64:	4b28      	ldr	r3, [pc, #160]	@ (800d008 <FLASH_OB_GetPCROP+0x108>)
 800cf66:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 800cf68:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cf6c:	61bb      	str	r3, [r7, #24]
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f003 0303 	and.w	r3, r3, #3
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d115      	bne.n	800cfa6 <FLASH_OB_GetPCROP+0xa6>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 800cf7a:	4b24      	ldr	r3, [pc, #144]	@ (800d00c <FLASH_OB_GetPCROP+0x10c>)
 800cf7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf7e:	b29b      	uxth	r3, r3
 800cf80:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	00da      	lsls	r2, r3, #3
 800cf86:	69fb      	ldr	r3, [r7, #28]
 800cf88:	441a      	add	r2, r3
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 800cf8e:	4b1f      	ldr	r3, [pc, #124]	@ (800d00c <FLASH_OB_GetPCROP+0x10c>)
 800cf90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	00da      	lsls	r2, r3, #3
 800cf9a:	69fb      	ldr	r3, [r7, #28]
 800cf9c:	4413      	add	r3, r2
 800cf9e:	1dda      	adds	r2, r3, #7
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	601a      	str	r2, [r3, #0]
 800cfa4:	e01a      	b.n	800cfdc <FLASH_OB_GetPCROP+0xdc>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f003 0303 	and.w	r3, r3, #3
 800cfae:	2b02      	cmp	r3, #2
 800cfb0:	d114      	bne.n	800cfdc <FLASH_OB_GetPCROP+0xdc>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 800cfb2:	4b16      	ldr	r3, [pc, #88]	@ (800d00c <FLASH_OB_GetPCROP+0x10c>)
 800cfb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	00da      	lsls	r2, r3, #3
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	441a      	add	r2, r3
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 800cfc6:	4b11      	ldr	r3, [pc, #68]	@ (800d00c <FLASH_OB_GetPCROP+0x10c>)
 800cfc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cfca:	b29b      	uxth	r3, r3
 800cfcc:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr + 0x7U;
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	00da      	lsls	r2, r3, #3
 800cfd2:	69bb      	ldr	r3, [r7, #24]
 800cfd4:	4413      	add	r3, r2
 800cfd6:	1dda      	adds	r2, r3, #7
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 800cfdc:	4b0b      	ldr	r3, [pc, #44]	@ (800d00c <FLASH_OB_GetPCROP+0x10c>)
 800cfde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfe0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	431a      	orrs	r2, r3
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	601a      	str	r2, [r3, #0]
}
 800cfee:	bf00      	nop
 800cff0:	3724      	adds	r7, #36	@ 0x24
 800cff2:	46bd      	mov	sp, r7
 800cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff8:	4770      	bx	lr
 800cffa:	bf00      	nop
 800cffc:	40010000 	.word	0x40010000
 800d000:	1fff75e0 	.word	0x1fff75e0
 800d004:	01fffe00 	.word	0x01fffe00
 800d008:	08080000 	.word	0x08080000
 800d00c:	40022000 	.word	0x40022000

0800d010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d010:	b480      	push	{r7}
 800d012:	b087      	sub	sp, #28
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800d01a:	2300      	movs	r3, #0
 800d01c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d01e:	e17f      	b.n	800d320 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	681a      	ldr	r2, [r3, #0]
 800d024:	2101      	movs	r1, #1
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	fa01 f303 	lsl.w	r3, r1, r3
 800d02c:	4013      	ands	r3, r2
 800d02e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2b00      	cmp	r3, #0
 800d034:	f000 8171 	beq.w	800d31a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	685b      	ldr	r3, [r3, #4]
 800d03c:	f003 0303 	and.w	r3, r3, #3
 800d040:	2b01      	cmp	r3, #1
 800d042:	d005      	beq.n	800d050 <HAL_GPIO_Init+0x40>
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	f003 0303 	and.w	r3, r3, #3
 800d04c:	2b02      	cmp	r3, #2
 800d04e:	d130      	bne.n	800d0b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	689b      	ldr	r3, [r3, #8]
 800d054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	005b      	lsls	r3, r3, #1
 800d05a:	2203      	movs	r2, #3
 800d05c:	fa02 f303 	lsl.w	r3, r2, r3
 800d060:	43db      	mvns	r3, r3
 800d062:	693a      	ldr	r2, [r7, #16]
 800d064:	4013      	ands	r3, r2
 800d066:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	68da      	ldr	r2, [r3, #12]
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	005b      	lsls	r3, r3, #1
 800d070:	fa02 f303 	lsl.w	r3, r2, r3
 800d074:	693a      	ldr	r2, [r7, #16]
 800d076:	4313      	orrs	r3, r2
 800d078:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	693a      	ldr	r2, [r7, #16]
 800d07e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d086:	2201      	movs	r2, #1
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	fa02 f303 	lsl.w	r3, r2, r3
 800d08e:	43db      	mvns	r3, r3
 800d090:	693a      	ldr	r2, [r7, #16]
 800d092:	4013      	ands	r3, r2
 800d094:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	091b      	lsrs	r3, r3, #4
 800d09c:	f003 0201 	and.w	r2, r3, #1
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	fa02 f303 	lsl.w	r3, r2, r3
 800d0a6:	693a      	ldr	r2, [r7, #16]
 800d0a8:	4313      	orrs	r3, r2
 800d0aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	693a      	ldr	r2, [r7, #16]
 800d0b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	685b      	ldr	r3, [r3, #4]
 800d0b6:	f003 0303 	and.w	r3, r3, #3
 800d0ba:	2b03      	cmp	r3, #3
 800d0bc:	d118      	bne.n	800d0f0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	fa02 f303 	lsl.w	r3, r2, r3
 800d0cc:	43db      	mvns	r3, r3
 800d0ce:	693a      	ldr	r2, [r7, #16]
 800d0d0:	4013      	ands	r3, r2
 800d0d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	685b      	ldr	r3, [r3, #4]
 800d0d8:	08db      	lsrs	r3, r3, #3
 800d0da:	f003 0201 	and.w	r2, r3, #1
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	fa02 f303 	lsl.w	r3, r2, r3
 800d0e4:	693a      	ldr	r2, [r7, #16]
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	693a      	ldr	r2, [r7, #16]
 800d0ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	685b      	ldr	r3, [r3, #4]
 800d0f4:	f003 0303 	and.w	r3, r3, #3
 800d0f8:	2b03      	cmp	r3, #3
 800d0fa:	d017      	beq.n	800d12c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	005b      	lsls	r3, r3, #1
 800d106:	2203      	movs	r2, #3
 800d108:	fa02 f303 	lsl.w	r3, r2, r3
 800d10c:	43db      	mvns	r3, r3
 800d10e:	693a      	ldr	r2, [r7, #16]
 800d110:	4013      	ands	r3, r2
 800d112:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	689a      	ldr	r2, [r3, #8]
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	005b      	lsls	r3, r3, #1
 800d11c:	fa02 f303 	lsl.w	r3, r2, r3
 800d120:	693a      	ldr	r2, [r7, #16]
 800d122:	4313      	orrs	r3, r2
 800d124:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	693a      	ldr	r2, [r7, #16]
 800d12a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	f003 0303 	and.w	r3, r3, #3
 800d134:	2b02      	cmp	r3, #2
 800d136:	d123      	bne.n	800d180 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	08da      	lsrs	r2, r3, #3
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	3208      	adds	r2, #8
 800d140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d144:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	f003 0307 	and.w	r3, r3, #7
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	220f      	movs	r2, #15
 800d150:	fa02 f303 	lsl.w	r3, r2, r3
 800d154:	43db      	mvns	r3, r3
 800d156:	693a      	ldr	r2, [r7, #16]
 800d158:	4013      	ands	r3, r2
 800d15a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	691a      	ldr	r2, [r3, #16]
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	f003 0307 	and.w	r3, r3, #7
 800d166:	009b      	lsls	r3, r3, #2
 800d168:	fa02 f303 	lsl.w	r3, r2, r3
 800d16c:	693a      	ldr	r2, [r7, #16]
 800d16e:	4313      	orrs	r3, r2
 800d170:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	08da      	lsrs	r2, r3, #3
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	3208      	adds	r2, #8
 800d17a:	6939      	ldr	r1, [r7, #16]
 800d17c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	005b      	lsls	r3, r3, #1
 800d18a:	2203      	movs	r2, #3
 800d18c:	fa02 f303 	lsl.w	r3, r2, r3
 800d190:	43db      	mvns	r3, r3
 800d192:	693a      	ldr	r2, [r7, #16]
 800d194:	4013      	ands	r3, r2
 800d196:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	f003 0203 	and.w	r2, r3, #3
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	005b      	lsls	r3, r3, #1
 800d1a4:	fa02 f303 	lsl.w	r3, r2, r3
 800d1a8:	693a      	ldr	r2, [r7, #16]
 800d1aa:	4313      	orrs	r3, r2
 800d1ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	693a      	ldr	r2, [r7, #16]
 800d1b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	f000 80ac 	beq.w	800d31a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d1c2:	4b5f      	ldr	r3, [pc, #380]	@ (800d340 <HAL_GPIO_Init+0x330>)
 800d1c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d1c6:	4a5e      	ldr	r2, [pc, #376]	@ (800d340 <HAL_GPIO_Init+0x330>)
 800d1c8:	f043 0301 	orr.w	r3, r3, #1
 800d1cc:	6613      	str	r3, [r2, #96]	@ 0x60
 800d1ce:	4b5c      	ldr	r3, [pc, #368]	@ (800d340 <HAL_GPIO_Init+0x330>)
 800d1d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d1d2:	f003 0301 	and.w	r3, r3, #1
 800d1d6:	60bb      	str	r3, [r7, #8]
 800d1d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800d1da:	4a5a      	ldr	r2, [pc, #360]	@ (800d344 <HAL_GPIO_Init+0x334>)
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	089b      	lsrs	r3, r3, #2
 800d1e0:	3302      	adds	r3, #2
 800d1e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	f003 0303 	and.w	r3, r3, #3
 800d1ee:	009b      	lsls	r3, r3, #2
 800d1f0:	220f      	movs	r2, #15
 800d1f2:	fa02 f303 	lsl.w	r3, r2, r3
 800d1f6:	43db      	mvns	r3, r3
 800d1f8:	693a      	ldr	r2, [r7, #16]
 800d1fa:	4013      	ands	r3, r2
 800d1fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800d204:	d025      	beq.n	800d252 <HAL_GPIO_Init+0x242>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	4a4f      	ldr	r2, [pc, #316]	@ (800d348 <HAL_GPIO_Init+0x338>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d01f      	beq.n	800d24e <HAL_GPIO_Init+0x23e>
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	4a4e      	ldr	r2, [pc, #312]	@ (800d34c <HAL_GPIO_Init+0x33c>)
 800d212:	4293      	cmp	r3, r2
 800d214:	d019      	beq.n	800d24a <HAL_GPIO_Init+0x23a>
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	4a4d      	ldr	r2, [pc, #308]	@ (800d350 <HAL_GPIO_Init+0x340>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d013      	beq.n	800d246 <HAL_GPIO_Init+0x236>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	4a4c      	ldr	r2, [pc, #304]	@ (800d354 <HAL_GPIO_Init+0x344>)
 800d222:	4293      	cmp	r3, r2
 800d224:	d00d      	beq.n	800d242 <HAL_GPIO_Init+0x232>
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	4a4b      	ldr	r2, [pc, #300]	@ (800d358 <HAL_GPIO_Init+0x348>)
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d007      	beq.n	800d23e <HAL_GPIO_Init+0x22e>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	4a4a      	ldr	r2, [pc, #296]	@ (800d35c <HAL_GPIO_Init+0x34c>)
 800d232:	4293      	cmp	r3, r2
 800d234:	d101      	bne.n	800d23a <HAL_GPIO_Init+0x22a>
 800d236:	2306      	movs	r3, #6
 800d238:	e00c      	b.n	800d254 <HAL_GPIO_Init+0x244>
 800d23a:	2307      	movs	r3, #7
 800d23c:	e00a      	b.n	800d254 <HAL_GPIO_Init+0x244>
 800d23e:	2305      	movs	r3, #5
 800d240:	e008      	b.n	800d254 <HAL_GPIO_Init+0x244>
 800d242:	2304      	movs	r3, #4
 800d244:	e006      	b.n	800d254 <HAL_GPIO_Init+0x244>
 800d246:	2303      	movs	r3, #3
 800d248:	e004      	b.n	800d254 <HAL_GPIO_Init+0x244>
 800d24a:	2302      	movs	r3, #2
 800d24c:	e002      	b.n	800d254 <HAL_GPIO_Init+0x244>
 800d24e:	2301      	movs	r3, #1
 800d250:	e000      	b.n	800d254 <HAL_GPIO_Init+0x244>
 800d252:	2300      	movs	r3, #0
 800d254:	697a      	ldr	r2, [r7, #20]
 800d256:	f002 0203 	and.w	r2, r2, #3
 800d25a:	0092      	lsls	r2, r2, #2
 800d25c:	4093      	lsls	r3, r2
 800d25e:	693a      	ldr	r2, [r7, #16]
 800d260:	4313      	orrs	r3, r2
 800d262:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800d264:	4937      	ldr	r1, [pc, #220]	@ (800d344 <HAL_GPIO_Init+0x334>)
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	089b      	lsrs	r3, r3, #2
 800d26a:	3302      	adds	r3, #2
 800d26c:	693a      	ldr	r2, [r7, #16]
 800d26e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d272:	4b3b      	ldr	r3, [pc, #236]	@ (800d360 <HAL_GPIO_Init+0x350>)
 800d274:	689b      	ldr	r3, [r3, #8]
 800d276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	43db      	mvns	r3, r3
 800d27c:	693a      	ldr	r2, [r7, #16]
 800d27e:	4013      	ands	r3, r2
 800d280:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d003      	beq.n	800d296 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800d28e:	693a      	ldr	r2, [r7, #16]
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	4313      	orrs	r3, r2
 800d294:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800d296:	4a32      	ldr	r2, [pc, #200]	@ (800d360 <HAL_GPIO_Init+0x350>)
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800d29c:	4b30      	ldr	r3, [pc, #192]	@ (800d360 <HAL_GPIO_Init+0x350>)
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	43db      	mvns	r3, r3
 800d2a6:	693a      	ldr	r2, [r7, #16]
 800d2a8:	4013      	ands	r3, r2
 800d2aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d003      	beq.n	800d2c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800d2b8:	693a      	ldr	r2, [r7, #16]
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800d2c0:	4a27      	ldr	r2, [pc, #156]	@ (800d360 <HAL_GPIO_Init+0x350>)
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800d2c6:	4b26      	ldr	r3, [pc, #152]	@ (800d360 <HAL_GPIO_Init+0x350>)
 800d2c8:	685b      	ldr	r3, [r3, #4]
 800d2ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	43db      	mvns	r3, r3
 800d2d0:	693a      	ldr	r2, [r7, #16]
 800d2d2:	4013      	ands	r3, r2
 800d2d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d003      	beq.n	800d2ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800d2e2:	693a      	ldr	r2, [r7, #16]
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	4313      	orrs	r3, r2
 800d2e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800d2ea:	4a1d      	ldr	r2, [pc, #116]	@ (800d360 <HAL_GPIO_Init+0x350>)
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800d2f0:	4b1b      	ldr	r3, [pc, #108]	@ (800d360 <HAL_GPIO_Init+0x350>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	43db      	mvns	r3, r3
 800d2fa:	693a      	ldr	r2, [r7, #16]
 800d2fc:	4013      	ands	r3, r2
 800d2fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	685b      	ldr	r3, [r3, #4]
 800d304:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d003      	beq.n	800d314 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800d30c:	693a      	ldr	r2, [r7, #16]
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	4313      	orrs	r3, r2
 800d312:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800d314:	4a12      	ldr	r2, [pc, #72]	@ (800d360 <HAL_GPIO_Init+0x350>)
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	3301      	adds	r3, #1
 800d31e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	fa22 f303 	lsr.w	r3, r2, r3
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	f47f ae78 	bne.w	800d020 <HAL_GPIO_Init+0x10>
  }
}
 800d330:	bf00      	nop
 800d332:	bf00      	nop
 800d334:	371c      	adds	r7, #28
 800d336:	46bd      	mov	sp, r7
 800d338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33c:	4770      	bx	lr
 800d33e:	bf00      	nop
 800d340:	40021000 	.word	0x40021000
 800d344:	40010000 	.word	0x40010000
 800d348:	48000400 	.word	0x48000400
 800d34c:	48000800 	.word	0x48000800
 800d350:	48000c00 	.word	0x48000c00
 800d354:	48001000 	.word	0x48001000
 800d358:	48001400 	.word	0x48001400
 800d35c:	48001800 	.word	0x48001800
 800d360:	40010400 	.word	0x40010400

0800d364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d364:	b480      	push	{r7}
 800d366:	b083      	sub	sp, #12
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	460b      	mov	r3, r1
 800d36e:	807b      	strh	r3, [r7, #2]
 800d370:	4613      	mov	r3, r2
 800d372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d374:	787b      	ldrb	r3, [r7, #1]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d003      	beq.n	800d382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800d37a:	887a      	ldrh	r2, [r7, #2]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800d380:	e002      	b.n	800d388 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800d382:	887a      	ldrh	r2, [r7, #2]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800d388:	bf00      	nop
 800d38a:	370c      	adds	r7, #12
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr

0800d394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b082      	sub	sp, #8
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d101      	bne.n	800d3a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	e08d      	b.n	800d4c2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d106      	bne.n	800d3c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f7f9 f900 	bl	80065c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2224      	movs	r2, #36	@ 0x24
 800d3c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	681a      	ldr	r2, [r3, #0]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f022 0201 	bic.w	r2, r2, #1
 800d3d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	685a      	ldr	r2, [r3, #4]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800d3e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	689a      	ldr	r2, [r3, #8]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d3f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	68db      	ldr	r3, [r3, #12]
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	d107      	bne.n	800d40e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	689a      	ldr	r2, [r3, #8]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d40a:	609a      	str	r2, [r3, #8]
 800d40c:	e006      	b.n	800d41c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	689a      	ldr	r2, [r3, #8]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800d41a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	68db      	ldr	r3, [r3, #12]
 800d420:	2b02      	cmp	r3, #2
 800d422:	d108      	bne.n	800d436 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	685a      	ldr	r2, [r3, #4]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d432:	605a      	str	r2, [r3, #4]
 800d434:	e007      	b.n	800d446 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	685a      	ldr	r2, [r3, #4]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d444:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	685b      	ldr	r3, [r3, #4]
 800d44c:	687a      	ldr	r2, [r7, #4]
 800d44e:	6812      	ldr	r2, [r2, #0]
 800d450:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800d454:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d458:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	68da      	ldr	r2, [r3, #12]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d468:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	691a      	ldr	r2, [r3, #16]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	695b      	ldr	r3, [r3, #20]
 800d472:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	699b      	ldr	r3, [r3, #24]
 800d47a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	430a      	orrs	r2, r1
 800d482:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	69d9      	ldr	r1, [r3, #28]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6a1a      	ldr	r2, [r3, #32]
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	430a      	orrs	r2, r1
 800d492:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f042 0201 	orr.w	r2, r2, #1
 800d4a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2220      	movs	r2, #32
 800d4ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800d4c0:	2300      	movs	r3, #0
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3708      	adds	r7, #8
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
	...

0800d4cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b088      	sub	sp, #32
 800d4d0:	af02      	add	r7, sp, #8
 800d4d2:	60f8      	str	r0, [r7, #12]
 800d4d4:	607a      	str	r2, [r7, #4]
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	460b      	mov	r3, r1
 800d4da:	817b      	strh	r3, [r7, #10]
 800d4dc:	4613      	mov	r3, r2
 800d4de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d4e6:	b2db      	uxtb	r3, r3
 800d4e8:	2b20      	cmp	r3, #32
 800d4ea:	f040 80fd 	bne.w	800d6e8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	d101      	bne.n	800d4fc <HAL_I2C_Master_Transmit+0x30>
 800d4f8:	2302      	movs	r3, #2
 800d4fa:	e0f6      	b.n	800d6ea <HAL_I2C_Master_Transmit+0x21e>
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	2201      	movs	r2, #1
 800d500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d504:	f7fc fd80 	bl	800a008 <HAL_GetTick>
 800d508:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	9300      	str	r3, [sp, #0]
 800d50e:	2319      	movs	r3, #25
 800d510:	2201      	movs	r2, #1
 800d512:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d516:	68f8      	ldr	r0, [r7, #12]
 800d518:	f000 fa0a 	bl	800d930 <I2C_WaitOnFlagUntilTimeout>
 800d51c:	4603      	mov	r3, r0
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d001      	beq.n	800d526 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800d522:	2301      	movs	r3, #1
 800d524:	e0e1      	b.n	800d6ea <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	2221      	movs	r2, #33	@ 0x21
 800d52a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	2210      	movs	r2, #16
 800d532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2200      	movs	r2, #0
 800d53a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	893a      	ldrh	r2, [r7, #8]
 800d546:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	2200      	movs	r2, #0
 800d54c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d552:	b29b      	uxth	r3, r3
 800d554:	2bff      	cmp	r3, #255	@ 0xff
 800d556:	d906      	bls.n	800d566 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	22ff      	movs	r2, #255	@ 0xff
 800d55c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800d55e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d562:	617b      	str	r3, [r7, #20]
 800d564:	e007      	b.n	800d576 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d56a:	b29a      	uxth	r2, r3
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800d570:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d574:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d024      	beq.n	800d5c8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d582:	781a      	ldrb	r2, [r3, #0]
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d58e:	1c5a      	adds	r2, r3, #1
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d598:	b29b      	uxth	r3, r3
 800d59a:	3b01      	subs	r3, #1
 800d59c:	b29a      	uxth	r2, r3
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5a6:	3b01      	subs	r3, #1
 800d5a8:	b29a      	uxth	r2, r3
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	b2da      	uxtb	r2, r3
 800d5b8:	8979      	ldrh	r1, [r7, #10]
 800d5ba:	4b4e      	ldr	r3, [pc, #312]	@ (800d6f4 <HAL_I2C_Master_Transmit+0x228>)
 800d5bc:	9300      	str	r3, [sp, #0]
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	68f8      	ldr	r0, [r7, #12]
 800d5c2:	f000 fc05 	bl	800ddd0 <I2C_TransferConfig>
 800d5c6:	e066      	b.n	800d696 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5cc:	b2da      	uxtb	r2, r3
 800d5ce:	8979      	ldrh	r1, [r7, #10]
 800d5d0:	4b48      	ldr	r3, [pc, #288]	@ (800d6f4 <HAL_I2C_Master_Transmit+0x228>)
 800d5d2:	9300      	str	r3, [sp, #0]
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	68f8      	ldr	r0, [r7, #12]
 800d5d8:	f000 fbfa 	bl	800ddd0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800d5dc:	e05b      	b.n	800d696 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d5de:	693a      	ldr	r2, [r7, #16]
 800d5e0:	6a39      	ldr	r1, [r7, #32]
 800d5e2:	68f8      	ldr	r0, [r7, #12]
 800d5e4:	f000 f9fd 	bl	800d9e2 <I2C_WaitOnTXISFlagUntilTimeout>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d001      	beq.n	800d5f2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	e07b      	b.n	800d6ea <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5f6:	781a      	ldrb	r2, [r3, #0]
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d602:	1c5a      	adds	r2, r3, #1
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	3b01      	subs	r3, #1
 800d610:	b29a      	uxth	r2, r3
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d61a:	3b01      	subs	r3, #1
 800d61c:	b29a      	uxth	r2, r3
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d626:	b29b      	uxth	r3, r3
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d034      	beq.n	800d696 <HAL_I2C_Master_Transmit+0x1ca>
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d630:	2b00      	cmp	r3, #0
 800d632:	d130      	bne.n	800d696 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	9300      	str	r3, [sp, #0]
 800d638:	6a3b      	ldr	r3, [r7, #32]
 800d63a:	2200      	movs	r2, #0
 800d63c:	2180      	movs	r1, #128	@ 0x80
 800d63e:	68f8      	ldr	r0, [r7, #12]
 800d640:	f000 f976 	bl	800d930 <I2C_WaitOnFlagUntilTimeout>
 800d644:	4603      	mov	r3, r0
 800d646:	2b00      	cmp	r3, #0
 800d648:	d001      	beq.n	800d64e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800d64a:	2301      	movs	r3, #1
 800d64c:	e04d      	b.n	800d6ea <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d652:	b29b      	uxth	r3, r3
 800d654:	2bff      	cmp	r3, #255	@ 0xff
 800d656:	d90e      	bls.n	800d676 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	22ff      	movs	r2, #255	@ 0xff
 800d65c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d662:	b2da      	uxtb	r2, r3
 800d664:	8979      	ldrh	r1, [r7, #10]
 800d666:	2300      	movs	r3, #0
 800d668:	9300      	str	r3, [sp, #0]
 800d66a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d66e:	68f8      	ldr	r0, [r7, #12]
 800d670:	f000 fbae 	bl	800ddd0 <I2C_TransferConfig>
 800d674:	e00f      	b.n	800d696 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d67a:	b29a      	uxth	r2, r3
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d684:	b2da      	uxtb	r2, r3
 800d686:	8979      	ldrh	r1, [r7, #10]
 800d688:	2300      	movs	r3, #0
 800d68a:	9300      	str	r3, [sp, #0]
 800d68c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d690:	68f8      	ldr	r0, [r7, #12]
 800d692:	f000 fb9d 	bl	800ddd0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d19e      	bne.n	800d5de <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d6a0:	693a      	ldr	r2, [r7, #16]
 800d6a2:	6a39      	ldr	r1, [r7, #32]
 800d6a4:	68f8      	ldr	r0, [r7, #12]
 800d6a6:	f000 f9e3 	bl	800da70 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d001      	beq.n	800d6b4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	e01a      	b.n	800d6ea <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	2220      	movs	r2, #32
 800d6ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	6859      	ldr	r1, [r3, #4]
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	681a      	ldr	r2, [r3, #0]
 800d6c6:	4b0c      	ldr	r3, [pc, #48]	@ (800d6f8 <HAL_I2C_Master_Transmit+0x22c>)
 800d6c8:	400b      	ands	r3, r1
 800d6ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	2220      	movs	r2, #32
 800d6d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	e000      	b.n	800d6ea <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800d6e8:	2302      	movs	r3, #2
  }
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3718      	adds	r7, #24
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	80002000 	.word	0x80002000
 800d6f8:	fe00e800 	.word	0xfe00e800

0800d6fc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b088      	sub	sp, #32
 800d700:	af02      	add	r7, sp, #8
 800d702:	60f8      	str	r0, [r7, #12]
 800d704:	607a      	str	r2, [r7, #4]
 800d706:	461a      	mov	r2, r3
 800d708:	460b      	mov	r3, r1
 800d70a:	817b      	strh	r3, [r7, #10]
 800d70c:	4613      	mov	r3, r2
 800d70e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d716:	b2db      	uxtb	r3, r3
 800d718:	2b20      	cmp	r3, #32
 800d71a:	f040 80db 	bne.w	800d8d4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d724:	2b01      	cmp	r3, #1
 800d726:	d101      	bne.n	800d72c <HAL_I2C_Master_Receive+0x30>
 800d728:	2302      	movs	r3, #2
 800d72a:	e0d4      	b.n	800d8d6 <HAL_I2C_Master_Receive+0x1da>
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	2201      	movs	r2, #1
 800d730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d734:	f7fc fc68 	bl	800a008 <HAL_GetTick>
 800d738:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	9300      	str	r3, [sp, #0]
 800d73e:	2319      	movs	r3, #25
 800d740:	2201      	movs	r2, #1
 800d742:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d746:	68f8      	ldr	r0, [r7, #12]
 800d748:	f000 f8f2 	bl	800d930 <I2C_WaitOnFlagUntilTimeout>
 800d74c:	4603      	mov	r3, r0
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d001      	beq.n	800d756 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800d752:	2301      	movs	r3, #1
 800d754:	e0bf      	b.n	800d8d6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2222      	movs	r2, #34	@ 0x22
 800d75a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	2210      	movs	r2, #16
 800d762:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2200      	movs	r2, #0
 800d76a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	893a      	ldrh	r2, [r7, #8]
 800d776:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2200      	movs	r2, #0
 800d77c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d782:	b29b      	uxth	r3, r3
 800d784:	2bff      	cmp	r3, #255	@ 0xff
 800d786:	d90e      	bls.n	800d7a6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	2201      	movs	r2, #1
 800d78c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d792:	b2da      	uxtb	r2, r3
 800d794:	8979      	ldrh	r1, [r7, #10]
 800d796:	4b52      	ldr	r3, [pc, #328]	@ (800d8e0 <HAL_I2C_Master_Receive+0x1e4>)
 800d798:	9300      	str	r3, [sp, #0]
 800d79a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d79e:	68f8      	ldr	r0, [r7, #12]
 800d7a0:	f000 fb16 	bl	800ddd0 <I2C_TransferConfig>
 800d7a4:	e06d      	b.n	800d882 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d7aa:	b29a      	uxth	r2, r3
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7b4:	b2da      	uxtb	r2, r3
 800d7b6:	8979      	ldrh	r1, [r7, #10]
 800d7b8:	4b49      	ldr	r3, [pc, #292]	@ (800d8e0 <HAL_I2C_Master_Receive+0x1e4>)
 800d7ba:	9300      	str	r3, [sp, #0]
 800d7bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d7c0:	68f8      	ldr	r0, [r7, #12]
 800d7c2:	f000 fb05 	bl	800ddd0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800d7c6:	e05c      	b.n	800d882 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d7c8:	697a      	ldr	r2, [r7, #20]
 800d7ca:	6a39      	ldr	r1, [r7, #32]
 800d7cc:	68f8      	ldr	r0, [r7, #12]
 800d7ce:	f000 f993 	bl	800daf8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d001      	beq.n	800d7dc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800d7d8:	2301      	movs	r3, #1
 800d7da:	e07c      	b.n	800d8d6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7e6:	b2d2      	uxtb	r2, r2
 800d7e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7ee:	1c5a      	adds	r2, r3, #1
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7f8:	3b01      	subs	r3, #1
 800d7fa:	b29a      	uxth	r2, r3
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d804:	b29b      	uxth	r3, r3
 800d806:	3b01      	subs	r3, #1
 800d808:	b29a      	uxth	r2, r3
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d812:	b29b      	uxth	r3, r3
 800d814:	2b00      	cmp	r3, #0
 800d816:	d034      	beq.n	800d882 <HAL_I2C_Master_Receive+0x186>
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d130      	bne.n	800d882 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	9300      	str	r3, [sp, #0]
 800d824:	6a3b      	ldr	r3, [r7, #32]
 800d826:	2200      	movs	r2, #0
 800d828:	2180      	movs	r1, #128	@ 0x80
 800d82a:	68f8      	ldr	r0, [r7, #12]
 800d82c:	f000 f880 	bl	800d930 <I2C_WaitOnFlagUntilTimeout>
 800d830:	4603      	mov	r3, r0
 800d832:	2b00      	cmp	r3, #0
 800d834:	d001      	beq.n	800d83a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800d836:	2301      	movs	r3, #1
 800d838:	e04d      	b.n	800d8d6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d83e:	b29b      	uxth	r3, r3
 800d840:	2bff      	cmp	r3, #255	@ 0xff
 800d842:	d90e      	bls.n	800d862 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	22ff      	movs	r2, #255	@ 0xff
 800d848:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d84e:	b2da      	uxtb	r2, r3
 800d850:	8979      	ldrh	r1, [r7, #10]
 800d852:	2300      	movs	r3, #0
 800d854:	9300      	str	r3, [sp, #0]
 800d856:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d85a:	68f8      	ldr	r0, [r7, #12]
 800d85c:	f000 fab8 	bl	800ddd0 <I2C_TransferConfig>
 800d860:	e00f      	b.n	800d882 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d866:	b29a      	uxth	r2, r3
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d870:	b2da      	uxtb	r2, r3
 800d872:	8979      	ldrh	r1, [r7, #10]
 800d874:	2300      	movs	r3, #0
 800d876:	9300      	str	r3, [sp, #0]
 800d878:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d87c:	68f8      	ldr	r0, [r7, #12]
 800d87e:	f000 faa7 	bl	800ddd0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d886:	b29b      	uxth	r3, r3
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d19d      	bne.n	800d7c8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d88c:	697a      	ldr	r2, [r7, #20]
 800d88e:	6a39      	ldr	r1, [r7, #32]
 800d890:	68f8      	ldr	r0, [r7, #12]
 800d892:	f000 f8ed 	bl	800da70 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d896:	4603      	mov	r3, r0
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d001      	beq.n	800d8a0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800d89c:	2301      	movs	r3, #1
 800d89e:	e01a      	b.n	800d8d6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	2220      	movs	r2, #32
 800d8a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	6859      	ldr	r1, [r3, #4]
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681a      	ldr	r2, [r3, #0]
 800d8b2:	4b0c      	ldr	r3, [pc, #48]	@ (800d8e4 <HAL_I2C_Master_Receive+0x1e8>)
 800d8b4:	400b      	ands	r3, r1
 800d8b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	2220      	movs	r2, #32
 800d8bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	e000      	b.n	800d8d6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800d8d4:	2302      	movs	r3, #2
  }
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3718      	adds	r7, #24
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	80002400 	.word	0x80002400
 800d8e4:	fe00e800 	.word	0xfe00e800

0800d8e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b083      	sub	sp, #12
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	699b      	ldr	r3, [r3, #24]
 800d8f6:	f003 0302 	and.w	r3, r3, #2
 800d8fa:	2b02      	cmp	r3, #2
 800d8fc:	d103      	bne.n	800d906 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	2200      	movs	r2, #0
 800d904:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	699b      	ldr	r3, [r3, #24]
 800d90c:	f003 0301 	and.w	r3, r3, #1
 800d910:	2b01      	cmp	r3, #1
 800d912:	d007      	beq.n	800d924 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	699a      	ldr	r2, [r3, #24]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f042 0201 	orr.w	r2, r2, #1
 800d922:	619a      	str	r2, [r3, #24]
  }
}
 800d924:	bf00      	nop
 800d926:	370c      	adds	r7, #12
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr

0800d930 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b084      	sub	sp, #16
 800d934:	af00      	add	r7, sp, #0
 800d936:	60f8      	str	r0, [r7, #12]
 800d938:	60b9      	str	r1, [r7, #8]
 800d93a:	603b      	str	r3, [r7, #0]
 800d93c:	4613      	mov	r3, r2
 800d93e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d940:	e03b      	b.n	800d9ba <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d942:	69ba      	ldr	r2, [r7, #24]
 800d944:	6839      	ldr	r1, [r7, #0]
 800d946:	68f8      	ldr	r0, [r7, #12]
 800d948:	f000 f962 	bl	800dc10 <I2C_IsErrorOccurred>
 800d94c:	4603      	mov	r3, r0
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d001      	beq.n	800d956 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800d952:	2301      	movs	r3, #1
 800d954:	e041      	b.n	800d9da <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d95c:	d02d      	beq.n	800d9ba <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d95e:	f7fc fb53 	bl	800a008 <HAL_GetTick>
 800d962:	4602      	mov	r2, r0
 800d964:	69bb      	ldr	r3, [r7, #24]
 800d966:	1ad3      	subs	r3, r2, r3
 800d968:	683a      	ldr	r2, [r7, #0]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d302      	bcc.n	800d974 <I2C_WaitOnFlagUntilTimeout+0x44>
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d122      	bne.n	800d9ba <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	699a      	ldr	r2, [r3, #24]
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	4013      	ands	r3, r2
 800d97e:	68ba      	ldr	r2, [r7, #8]
 800d980:	429a      	cmp	r2, r3
 800d982:	bf0c      	ite	eq
 800d984:	2301      	moveq	r3, #1
 800d986:	2300      	movne	r3, #0
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	461a      	mov	r2, r3
 800d98c:	79fb      	ldrb	r3, [r7, #7]
 800d98e:	429a      	cmp	r2, r3
 800d990:	d113      	bne.n	800d9ba <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d996:	f043 0220 	orr.w	r2, r3, #32
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2220      	movs	r2, #32
 800d9a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	e00f      	b.n	800d9da <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	699a      	ldr	r2, [r3, #24]
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	4013      	ands	r3, r2
 800d9c4:	68ba      	ldr	r2, [r7, #8]
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	bf0c      	ite	eq
 800d9ca:	2301      	moveq	r3, #1
 800d9cc:	2300      	movne	r3, #0
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	461a      	mov	r2, r3
 800d9d2:	79fb      	ldrb	r3, [r7, #7]
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d0b4      	beq.n	800d942 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d9d8:	2300      	movs	r3, #0
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3710      	adds	r7, #16
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}

0800d9e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b084      	sub	sp, #16
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	60f8      	str	r0, [r7, #12]
 800d9ea:	60b9      	str	r1, [r7, #8]
 800d9ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d9ee:	e033      	b.n	800da58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d9f0:	687a      	ldr	r2, [r7, #4]
 800d9f2:	68b9      	ldr	r1, [r7, #8]
 800d9f4:	68f8      	ldr	r0, [r7, #12]
 800d9f6:	f000 f90b 	bl	800dc10 <I2C_IsErrorOccurred>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d001      	beq.n	800da04 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800da00:	2301      	movs	r3, #1
 800da02:	e031      	b.n	800da68 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da0a:	d025      	beq.n	800da58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da0c:	f7fc fafc 	bl	800a008 <HAL_GetTick>
 800da10:	4602      	mov	r2, r0
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	1ad3      	subs	r3, r2, r3
 800da16:	68ba      	ldr	r2, [r7, #8]
 800da18:	429a      	cmp	r2, r3
 800da1a:	d302      	bcc.n	800da22 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d11a      	bne.n	800da58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	699b      	ldr	r3, [r3, #24]
 800da28:	f003 0302 	and.w	r3, r3, #2
 800da2c:	2b02      	cmp	r3, #2
 800da2e:	d013      	beq.n	800da58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da34:	f043 0220 	orr.w	r2, r3, #32
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2220      	movs	r2, #32
 800da40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2200      	movs	r2, #0
 800da48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	2200      	movs	r2, #0
 800da50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800da54:	2301      	movs	r3, #1
 800da56:	e007      	b.n	800da68 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	699b      	ldr	r3, [r3, #24]
 800da5e:	f003 0302 	and.w	r3, r3, #2
 800da62:	2b02      	cmp	r3, #2
 800da64:	d1c4      	bne.n	800d9f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800da66:	2300      	movs	r3, #0
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3710      	adds	r7, #16
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b084      	sub	sp, #16
 800da74:	af00      	add	r7, sp, #0
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	60b9      	str	r1, [r7, #8]
 800da7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800da7c:	e02f      	b.n	800dade <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800da7e:	687a      	ldr	r2, [r7, #4]
 800da80:	68b9      	ldr	r1, [r7, #8]
 800da82:	68f8      	ldr	r0, [r7, #12]
 800da84:	f000 f8c4 	bl	800dc10 <I2C_IsErrorOccurred>
 800da88:	4603      	mov	r3, r0
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d001      	beq.n	800da92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800da8e:	2301      	movs	r3, #1
 800da90:	e02d      	b.n	800daee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da92:	f7fc fab9 	bl	800a008 <HAL_GetTick>
 800da96:	4602      	mov	r2, r0
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	1ad3      	subs	r3, r2, r3
 800da9c:	68ba      	ldr	r2, [r7, #8]
 800da9e:	429a      	cmp	r2, r3
 800daa0:	d302      	bcc.n	800daa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d11a      	bne.n	800dade <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	699b      	ldr	r3, [r3, #24]
 800daae:	f003 0320 	and.w	r3, r3, #32
 800dab2:	2b20      	cmp	r3, #32
 800dab4:	d013      	beq.n	800dade <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800daba:	f043 0220 	orr.w	r2, r3, #32
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	2220      	movs	r2, #32
 800dac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	2200      	movs	r2, #0
 800dace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	2200      	movs	r2, #0
 800dad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800dada:	2301      	movs	r3, #1
 800dadc:	e007      	b.n	800daee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	699b      	ldr	r3, [r3, #24]
 800dae4:	f003 0320 	and.w	r3, r3, #32
 800dae8:	2b20      	cmp	r3, #32
 800daea:	d1c8      	bne.n	800da7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800daec:	2300      	movs	r3, #0
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3710      	adds	r7, #16
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
	...

0800daf8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b086      	sub	sp, #24
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	60f8      	str	r0, [r7, #12]
 800db00:	60b9      	str	r1, [r7, #8]
 800db02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800db04:	2300      	movs	r3, #0
 800db06:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800db08:	e071      	b.n	800dbee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800db0a:	687a      	ldr	r2, [r7, #4]
 800db0c:	68b9      	ldr	r1, [r7, #8]
 800db0e:	68f8      	ldr	r0, [r7, #12]
 800db10:	f000 f87e 	bl	800dc10 <I2C_IsErrorOccurred>
 800db14:	4603      	mov	r3, r0
 800db16:	2b00      	cmp	r3, #0
 800db18:	d001      	beq.n	800db1e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800db1a:	2301      	movs	r3, #1
 800db1c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	699b      	ldr	r3, [r3, #24]
 800db24:	f003 0320 	and.w	r3, r3, #32
 800db28:	2b20      	cmp	r3, #32
 800db2a:	d13b      	bne.n	800dba4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800db2c:	7dfb      	ldrb	r3, [r7, #23]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d138      	bne.n	800dba4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	699b      	ldr	r3, [r3, #24]
 800db38:	f003 0304 	and.w	r3, r3, #4
 800db3c:	2b04      	cmp	r3, #4
 800db3e:	d105      	bne.n	800db4c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db44:	2b00      	cmp	r3, #0
 800db46:	d001      	beq.n	800db4c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800db48:	2300      	movs	r3, #0
 800db4a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	699b      	ldr	r3, [r3, #24]
 800db52:	f003 0310 	and.w	r3, r3, #16
 800db56:	2b10      	cmp	r3, #16
 800db58:	d121      	bne.n	800db9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	2210      	movs	r2, #16
 800db60:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	2204      	movs	r2, #4
 800db66:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	2220      	movs	r2, #32
 800db6e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	6859      	ldr	r1, [r3, #4]
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	681a      	ldr	r2, [r3, #0]
 800db7a:	4b24      	ldr	r3, [pc, #144]	@ (800dc0c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800db7c:	400b      	ands	r3, r1
 800db7e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	2220      	movs	r2, #32
 800db84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2200      	movs	r2, #0
 800db8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	2200      	movs	r2, #0
 800db94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800db98:	2301      	movs	r3, #1
 800db9a:	75fb      	strb	r3, [r7, #23]
 800db9c:	e002      	b.n	800dba4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	2200      	movs	r2, #0
 800dba2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800dba4:	f7fc fa30 	bl	800a008 <HAL_GetTick>
 800dba8:	4602      	mov	r2, r0
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	1ad3      	subs	r3, r2, r3
 800dbae:	68ba      	ldr	r2, [r7, #8]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d302      	bcc.n	800dbba <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d119      	bne.n	800dbee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800dbba:	7dfb      	ldrb	r3, [r7, #23]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d116      	bne.n	800dbee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	699b      	ldr	r3, [r3, #24]
 800dbc6:	f003 0304 	and.w	r3, r3, #4
 800dbca:	2b04      	cmp	r3, #4
 800dbcc:	d00f      	beq.n	800dbee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dbd2:	f043 0220 	orr.w	r2, r3, #32
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2220      	movs	r2, #32
 800dbde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800dbea:	2301      	movs	r3, #1
 800dbec:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	699b      	ldr	r3, [r3, #24]
 800dbf4:	f003 0304 	and.w	r3, r3, #4
 800dbf8:	2b04      	cmp	r3, #4
 800dbfa:	d002      	beq.n	800dc02 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800dbfc:	7dfb      	ldrb	r3, [r7, #23]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d083      	beq.n	800db0a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800dc02:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3718      	adds	r7, #24
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}
 800dc0c:	fe00e800 	.word	0xfe00e800

0800dc10 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b08a      	sub	sp, #40	@ 0x28
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	60f8      	str	r0, [r7, #12]
 800dc18:	60b9      	str	r1, [r7, #8]
 800dc1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	699b      	ldr	r3, [r3, #24]
 800dc28:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800dc32:	69bb      	ldr	r3, [r7, #24]
 800dc34:	f003 0310 	and.w	r3, r3, #16
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d068      	beq.n	800dd0e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	2210      	movs	r2, #16
 800dc42:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800dc44:	e049      	b.n	800dcda <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc4c:	d045      	beq.n	800dcda <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800dc4e:	f7fc f9db 	bl	800a008 <HAL_GetTick>
 800dc52:	4602      	mov	r2, r0
 800dc54:	69fb      	ldr	r3, [r7, #28]
 800dc56:	1ad3      	subs	r3, r2, r3
 800dc58:	68ba      	ldr	r2, [r7, #8]
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d302      	bcc.n	800dc64 <I2C_IsErrorOccurred+0x54>
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d13a      	bne.n	800dcda <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dc6e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dc76:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	699b      	ldr	r3, [r3, #24]
 800dc7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dc82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dc86:	d121      	bne.n	800dccc <I2C_IsErrorOccurred+0xbc>
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dc8e:	d01d      	beq.n	800dccc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800dc90:	7cfb      	ldrb	r3, [r7, #19]
 800dc92:	2b20      	cmp	r3, #32
 800dc94:	d01a      	beq.n	800dccc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	685a      	ldr	r2, [r3, #4]
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dca4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800dca6:	f7fc f9af 	bl	800a008 <HAL_GetTick>
 800dcaa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800dcac:	e00e      	b.n	800dccc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800dcae:	f7fc f9ab 	bl	800a008 <HAL_GetTick>
 800dcb2:	4602      	mov	r2, r0
 800dcb4:	69fb      	ldr	r3, [r7, #28]
 800dcb6:	1ad3      	subs	r3, r2, r3
 800dcb8:	2b19      	cmp	r3, #25
 800dcba:	d907      	bls.n	800dccc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800dcbc:	6a3b      	ldr	r3, [r7, #32]
 800dcbe:	f043 0320 	orr.w	r3, r3, #32
 800dcc2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800dcca:	e006      	b.n	800dcda <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	699b      	ldr	r3, [r3, #24]
 800dcd2:	f003 0320 	and.w	r3, r3, #32
 800dcd6:	2b20      	cmp	r3, #32
 800dcd8:	d1e9      	bne.n	800dcae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	699b      	ldr	r3, [r3, #24]
 800dce0:	f003 0320 	and.w	r3, r3, #32
 800dce4:	2b20      	cmp	r3, #32
 800dce6:	d003      	beq.n	800dcf0 <I2C_IsErrorOccurred+0xe0>
 800dce8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d0aa      	beq.n	800dc46 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800dcf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d103      	bne.n	800dd00 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	2220      	movs	r2, #32
 800dcfe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800dd00:	6a3b      	ldr	r3, [r7, #32]
 800dd02:	f043 0304 	orr.w	r3, r3, #4
 800dd06:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800dd08:	2301      	movs	r3, #1
 800dd0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	699b      	ldr	r3, [r3, #24]
 800dd14:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800dd16:	69bb      	ldr	r3, [r7, #24]
 800dd18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d00b      	beq.n	800dd38 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800dd20:	6a3b      	ldr	r3, [r7, #32]
 800dd22:	f043 0301 	orr.w	r3, r3, #1
 800dd26:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dd30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800dd32:	2301      	movs	r3, #1
 800dd34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800dd38:	69bb      	ldr	r3, [r7, #24]
 800dd3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d00b      	beq.n	800dd5a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800dd42:	6a3b      	ldr	r3, [r7, #32]
 800dd44:	f043 0308 	orr.w	r3, r3, #8
 800dd48:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800dd52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800dd54:	2301      	movs	r3, #1
 800dd56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800dd5a:	69bb      	ldr	r3, [r7, #24]
 800dd5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d00b      	beq.n	800dd7c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800dd64:	6a3b      	ldr	r3, [r7, #32]
 800dd66:	f043 0302 	orr.w	r3, r3, #2
 800dd6a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800dd76:	2301      	movs	r3, #1
 800dd78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800dd7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d01c      	beq.n	800ddbe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800dd84:	68f8      	ldr	r0, [r7, #12]
 800dd86:	f7ff fdaf 	bl	800d8e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	6859      	ldr	r1, [r3, #4]
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681a      	ldr	r2, [r3, #0]
 800dd94:	4b0d      	ldr	r3, [pc, #52]	@ (800ddcc <I2C_IsErrorOccurred+0x1bc>)
 800dd96:	400b      	ands	r3, r1
 800dd98:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dd9e:	6a3b      	ldr	r3, [r7, #32]
 800dda0:	431a      	orrs	r2, r3
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2220      	movs	r2, #32
 800ddaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800ddbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3728      	adds	r7, #40	@ 0x28
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	fe00e800 	.word	0xfe00e800

0800ddd0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b087      	sub	sp, #28
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	60f8      	str	r0, [r7, #12]
 800ddd8:	607b      	str	r3, [r7, #4]
 800ddda:	460b      	mov	r3, r1
 800dddc:	817b      	strh	r3, [r7, #10]
 800ddde:	4613      	mov	r3, r2
 800dde0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800dde2:	897b      	ldrh	r3, [r7, #10]
 800dde4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800dde8:	7a7b      	ldrb	r3, [r7, #9]
 800ddea:	041b      	lsls	r3, r3, #16
 800ddec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ddf0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ddf6:	6a3b      	ldr	r3, [r7, #32]
 800ddf8:	4313      	orrs	r3, r2
 800ddfa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ddfe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	685a      	ldr	r2, [r3, #4]
 800de06:	6a3b      	ldr	r3, [r7, #32]
 800de08:	0d5b      	lsrs	r3, r3, #21
 800de0a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800de0e:	4b08      	ldr	r3, [pc, #32]	@ (800de30 <I2C_TransferConfig+0x60>)
 800de10:	430b      	orrs	r3, r1
 800de12:	43db      	mvns	r3, r3
 800de14:	ea02 0103 	and.w	r1, r2, r3
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	697a      	ldr	r2, [r7, #20]
 800de1e:	430a      	orrs	r2, r1
 800de20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800de22:	bf00      	nop
 800de24:	371c      	adds	r7, #28
 800de26:	46bd      	mov	sp, r7
 800de28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2c:	4770      	bx	lr
 800de2e:	bf00      	nop
 800de30:	03ff63ff 	.word	0x03ff63ff

0800de34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800de34:	b480      	push	{r7}
 800de36:	b083      	sub	sp, #12
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800de44:	b2db      	uxtb	r3, r3
 800de46:	2b20      	cmp	r3, #32
 800de48:	d138      	bne.n	800debc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800de50:	2b01      	cmp	r3, #1
 800de52:	d101      	bne.n	800de58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800de54:	2302      	movs	r3, #2
 800de56:	e032      	b.n	800debe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2201      	movs	r2, #1
 800de5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2224      	movs	r2, #36	@ 0x24
 800de64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	681a      	ldr	r2, [r3, #0]
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f022 0201 	bic.w	r2, r2, #1
 800de76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	681a      	ldr	r2, [r3, #0]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800de86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	6819      	ldr	r1, [r3, #0]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	683a      	ldr	r2, [r7, #0]
 800de94:	430a      	orrs	r2, r1
 800de96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	681a      	ldr	r2, [r3, #0]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	f042 0201 	orr.w	r2, r2, #1
 800dea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2220      	movs	r2, #32
 800deac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2200      	movs	r2, #0
 800deb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800deb8:	2300      	movs	r3, #0
 800deba:	e000      	b.n	800debe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800debc:	2302      	movs	r3, #2
  }
}
 800debe:	4618      	mov	r0, r3
 800dec0:	370c      	adds	r7, #12
 800dec2:	46bd      	mov	sp, r7
 800dec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec8:	4770      	bx	lr

0800deca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800deca:	b480      	push	{r7}
 800decc:	b085      	sub	sp, #20
 800dece:	af00      	add	r7, sp, #0
 800ded0:	6078      	str	r0, [r7, #4]
 800ded2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800deda:	b2db      	uxtb	r3, r3
 800dedc:	2b20      	cmp	r3, #32
 800dede:	d139      	bne.n	800df54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dee6:	2b01      	cmp	r3, #1
 800dee8:	d101      	bne.n	800deee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800deea:	2302      	movs	r3, #2
 800deec:	e033      	b.n	800df56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2201      	movs	r2, #1
 800def2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2224      	movs	r2, #36	@ 0x24
 800defa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	681a      	ldr	r2, [r3, #0]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f022 0201 	bic.w	r2, r2, #1
 800df0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800df1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	021b      	lsls	r3, r3, #8
 800df22:	68fa      	ldr	r2, [r7, #12]
 800df24:	4313      	orrs	r3, r2
 800df26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	68fa      	ldr	r2, [r7, #12]
 800df2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	681a      	ldr	r2, [r3, #0]
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f042 0201 	orr.w	r2, r2, #1
 800df3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2220      	movs	r2, #32
 800df44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2200      	movs	r2, #0
 800df4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800df50:	2300      	movs	r3, #0
 800df52:	e000      	b.n	800df56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800df54:	2302      	movs	r3, #2
  }
}
 800df56:	4618      	mov	r0, r3
 800df58:	3714      	adds	r7, #20
 800df5a:	46bd      	mov	sp, r7
 800df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df60:	4770      	bx	lr
	...

0800df64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800df64:	b480      	push	{r7}
 800df66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800df68:	4b04      	ldr	r3, [pc, #16]	@ (800df7c <HAL_PWREx_GetVoltageRange+0x18>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800df70:	4618      	mov	r0, r3
 800df72:	46bd      	mov	sp, r7
 800df74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df78:	4770      	bx	lr
 800df7a:	bf00      	nop
 800df7c:	40007000 	.word	0x40007000

0800df80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800df80:	b480      	push	{r7}
 800df82:	b085      	sub	sp, #20
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800df8e:	d130      	bne.n	800dff2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800df90:	4b23      	ldr	r3, [pc, #140]	@ (800e020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800df98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800df9c:	d038      	beq.n	800e010 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800df9e:	4b20      	ldr	r3, [pc, #128]	@ (800e020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800dfa6:	4a1e      	ldr	r2, [pc, #120]	@ (800e020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800dfa8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800dfac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800dfae:	4b1d      	ldr	r3, [pc, #116]	@ (800e024 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	2232      	movs	r2, #50	@ 0x32
 800dfb4:	fb02 f303 	mul.w	r3, r2, r3
 800dfb8:	4a1b      	ldr	r2, [pc, #108]	@ (800e028 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800dfba:	fba2 2303 	umull	r2, r3, r2, r3
 800dfbe:	0c9b      	lsrs	r3, r3, #18
 800dfc0:	3301      	adds	r3, #1
 800dfc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800dfc4:	e002      	b.n	800dfcc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	3b01      	subs	r3, #1
 800dfca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800dfcc:	4b14      	ldr	r3, [pc, #80]	@ (800e020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800dfce:	695b      	ldr	r3, [r3, #20]
 800dfd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dfd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dfd8:	d102      	bne.n	800dfe0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d1f2      	bne.n	800dfc6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800dfe0:	4b0f      	ldr	r3, [pc, #60]	@ (800e020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800dfe2:	695b      	ldr	r3, [r3, #20]
 800dfe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dfe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dfec:	d110      	bne.n	800e010 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800dfee:	2303      	movs	r3, #3
 800dff0:	e00f      	b.n	800e012 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800dff2:	4b0b      	ldr	r3, [pc, #44]	@ (800e020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800dffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dffe:	d007      	beq.n	800e010 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800e000:	4b07      	ldr	r3, [pc, #28]	@ (800e020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800e008:	4a05      	ldr	r2, [pc, #20]	@ (800e020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e00a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e00e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800e010:	2300      	movs	r3, #0
}
 800e012:	4618      	mov	r0, r3
 800e014:	3714      	adds	r7, #20
 800e016:	46bd      	mov	sp, r7
 800e018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01c:	4770      	bx	lr
 800e01e:	bf00      	nop
 800e020:	40007000 	.word	0x40007000
 800e024:	20000168 	.word	0x20000168
 800e028:	431bde83 	.word	0x431bde83

0800e02c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b086      	sub	sp, #24
 800e030:	af02      	add	r7, sp, #8
 800e032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e034:	f7fb ffe8 	bl	800a008 <HAL_GetTick>
 800e038:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d101      	bne.n	800e044 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800e040:	2301      	movs	r3, #1
 800e042:	e063      	b.n	800e10c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800e04a:	b2db      	uxtb	r3, r3
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d10b      	bne.n	800e068 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2200      	movs	r2, #0
 800e054:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f7f8 fb0f 	bl	800667c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800e05e:	f241 3188 	movw	r1, #5000	@ 0x1388
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f000 fa68 	bl	800e538 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	689b      	ldr	r3, [r3, #8]
 800e076:	3b01      	subs	r3, #1
 800e078:	021a      	lsls	r2, r3, #8
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	430a      	orrs	r2, r1
 800e080:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e086:	9300      	str	r3, [sp, #0]
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	2200      	movs	r2, #0
 800e08c:	2120      	movs	r1, #32
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f000 fa60 	bl	800e554 <QSPI_WaitFlagStateUntilTimeout>
 800e094:	4603      	mov	r3, r0
 800e096:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800e098:	7afb      	ldrb	r3, [r7, #11]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d131      	bne.n	800e102 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e0a8:	f023 0310 	bic.w	r3, r3, #16
 800e0ac:	687a      	ldr	r2, [r7, #4]
 800e0ae:	6852      	ldr	r2, [r2, #4]
 800e0b0:	0611      	lsls	r1, r2, #24
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	68d2      	ldr	r2, [r2, #12]
 800e0b6:	4311      	orrs	r1, r2
 800e0b8:	687a      	ldr	r2, [r7, #4]
 800e0ba:	6812      	ldr	r2, [r2, #0]
 800e0bc:	430b      	orrs	r3, r1
 800e0be:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	685a      	ldr	r2, [r3, #4]
 800e0c6:	4b13      	ldr	r3, [pc, #76]	@ (800e114 <HAL_QSPI_Init+0xe8>)
 800e0c8:	4013      	ands	r3, r2
 800e0ca:	687a      	ldr	r2, [r7, #4]
 800e0cc:	6912      	ldr	r2, [r2, #16]
 800e0ce:	0411      	lsls	r1, r2, #16
 800e0d0:	687a      	ldr	r2, [r7, #4]
 800e0d2:	6952      	ldr	r2, [r2, #20]
 800e0d4:	4311      	orrs	r1, r2
 800e0d6:	687a      	ldr	r2, [r7, #4]
 800e0d8:	6992      	ldr	r2, [r2, #24]
 800e0da:	4311      	orrs	r1, r2
 800e0dc:	687a      	ldr	r2, [r7, #4]
 800e0de:	6812      	ldr	r2, [r2, #0]
 800e0e0:	430b      	orrs	r3, r1
 800e0e2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	681a      	ldr	r2, [r3, #0]
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f042 0201 	orr.w	r2, r2, #1
 800e0f2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2200      	movs	r2, #0
 800e106:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800e10a:	7afb      	ldrb	r3, [r7, #11]
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3710      	adds	r7, #16
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}
 800e114:	ffe0f8fe 	.word	0xffe0f8fe

0800e118 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b088      	sub	sp, #32
 800e11c:	af02      	add	r7, sp, #8
 800e11e:	60f8      	str	r0, [r7, #12]
 800e120:	60b9      	str	r1, [r7, #8]
 800e122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e124:	f7fb ff70 	bl	800a008 <HAL_GetTick>
 800e128:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e130:	b2db      	uxtb	r3, r3
 800e132:	2b01      	cmp	r3, #1
 800e134:	d101      	bne.n	800e13a <HAL_QSPI_Command+0x22>
 800e136:	2302      	movs	r3, #2
 800e138:	e048      	b.n	800e1cc <HAL_QSPI_Command+0xb4>
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2201      	movs	r2, #1
 800e13e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800e148:	b2db      	uxtb	r3, r3
 800e14a:	2b01      	cmp	r3, #1
 800e14c:	d137      	bne.n	800e1be <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	2200      	movs	r2, #0
 800e152:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2202      	movs	r2, #2
 800e158:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	9300      	str	r3, [sp, #0]
 800e160:	693b      	ldr	r3, [r7, #16]
 800e162:	2200      	movs	r2, #0
 800e164:	2120      	movs	r1, #32
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f000 f9f4 	bl	800e554 <QSPI_WaitFlagStateUntilTimeout>
 800e16c:	4603      	mov	r3, r0
 800e16e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800e170:	7dfb      	ldrb	r3, [r7, #23]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d125      	bne.n	800e1c2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800e176:	2200      	movs	r2, #0
 800e178:	68b9      	ldr	r1, [r7, #8]
 800e17a:	68f8      	ldr	r0, [r7, #12]
 800e17c:	f000 fa21 	bl	800e5c2 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e184:	2b00      	cmp	r3, #0
 800e186:	d115      	bne.n	800e1b4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	9300      	str	r3, [sp, #0]
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	2201      	movs	r2, #1
 800e190:	2102      	movs	r1, #2
 800e192:	68f8      	ldr	r0, [r7, #12]
 800e194:	f000 f9de 	bl	800e554 <QSPI_WaitFlagStateUntilTimeout>
 800e198:	4603      	mov	r3, r0
 800e19a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800e19c:	7dfb      	ldrb	r3, [r7, #23]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d10f      	bne.n	800e1c2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	2202      	movs	r2, #2
 800e1a8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	2201      	movs	r2, #1
 800e1ae:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800e1b2:	e006      	b.n	800e1c2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800e1bc:	e001      	b.n	800e1c2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800e1be:	2302      	movs	r3, #2
 800e1c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800e1ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3718      	adds	r7, #24
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b08a      	sub	sp, #40	@ 0x28
 800e1d8:	af02      	add	r7, sp, #8
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800e1e4:	f7fb ff10 	bl	800a008 <HAL_GetTick>
 800e1e8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	3320      	adds	r3, #32
 800e1f0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e1f8:	b2db      	uxtb	r3, r3
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d101      	bne.n	800e202 <HAL_QSPI_Transmit+0x2e>
 800e1fe:	2302      	movs	r3, #2
 800e200:	e07b      	b.n	800e2fa <HAL_QSPI_Transmit+0x126>
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	2201      	movs	r2, #1
 800e206:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800e210:	b2db      	uxtb	r3, r3
 800e212:	2b01      	cmp	r3, #1
 800e214:	d16a      	bne.n	800e2ec <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	2200      	movs	r2, #0
 800e21a:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d05b      	beq.n	800e2da <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2212      	movs	r2, #18
 800e226:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	691b      	ldr	r3, [r3, #16]
 800e230:	1c5a      	adds	r2, r3, #1
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	625a      	str	r2, [r3, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	691b      	ldr	r3, [r3, #16]
 800e23c:	1c5a      	adds	r2, r3, #1
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	68ba      	ldr	r2, [r7, #8]
 800e246:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	695a      	ldr	r2, [r3, #20]
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800e256:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800e258:	e01b      	b.n	800e292 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	9300      	str	r3, [sp, #0]
 800e25e:	69bb      	ldr	r3, [r7, #24]
 800e260:	2201      	movs	r2, #1
 800e262:	2104      	movs	r1, #4
 800e264:	68f8      	ldr	r0, [r7, #12]
 800e266:	f000 f975 	bl	800e554 <QSPI_WaitFlagStateUntilTimeout>
 800e26a:	4603      	mov	r3, r0
 800e26c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800e26e:	7ffb      	ldrb	r3, [r7, #31]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d113      	bne.n	800e29c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	69db      	ldr	r3, [r3, #28]
 800e278:	781a      	ldrb	r2, [r3, #0]
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	69db      	ldr	r3, [r3, #28]
 800e282:	1c5a      	adds	r2, r3, #1
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e28c:	1e5a      	subs	r2, r3, #1
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	625a      	str	r2, [r3, #36]	@ 0x24
      while(hqspi->TxXferCount > 0U)
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e296:	2b00      	cmp	r3, #0
 800e298:	d1df      	bne.n	800e25a <HAL_QSPI_Transmit+0x86>
 800e29a:	e000      	b.n	800e29e <HAL_QSPI_Transmit+0xca>
          break;
 800e29c:	bf00      	nop
      }

      if (status == HAL_OK)
 800e29e:	7ffb      	ldrb	r3, [r7, #31]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d115      	bne.n	800e2d0 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	9300      	str	r3, [sp, #0]
 800e2a8:	69bb      	ldr	r3, [r7, #24]
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	2102      	movs	r1, #2
 800e2ae:	68f8      	ldr	r0, [r7, #12]
 800e2b0:	f000 f950 	bl	800e554 <QSPI_WaitFlagStateUntilTimeout>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800e2b8:	7ffb      	ldrb	r3, [r7, #31]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d108      	bne.n	800e2d0 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	2202      	movs	r2, #2
 800e2c4:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800e2c6:	68f8      	ldr	r0, [r7, #12]
 800e2c8:	f000 f8bd 	bl	800e446 <HAL_QSPI_Abort>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800e2d8:	e00a      	b.n	800e2f0 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2de:	f043 0208 	orr.w	r2, r3, #8
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	77fb      	strb	r3, [r7, #31]
 800e2ea:	e001      	b.n	800e2f0 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800e2ec:	2302      	movs	r3, #2
 800e2ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800e2f8:	7ffb      	ldrb	r3, [r7, #31]
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3720      	adds	r7, #32
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}

0800e302 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800e302:	b580      	push	{r7, lr}
 800e304:	b08a      	sub	sp, #40	@ 0x28
 800e306:	af02      	add	r7, sp, #8
 800e308:	60f8      	str	r0, [r7, #12]
 800e30a:	60b9      	str	r1, [r7, #8]
 800e30c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e30e:	2300      	movs	r3, #0
 800e310:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800e312:	f7fb fe79 	bl	800a008 <HAL_GetTick>
 800e316:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	699b      	ldr	r3, [r3, #24]
 800e31e:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	3320      	adds	r3, #32
 800e326:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e32e:	b2db      	uxtb	r3, r3
 800e330:	2b01      	cmp	r3, #1
 800e332:	d101      	bne.n	800e338 <HAL_QSPI_Receive+0x36>
 800e334:	2302      	movs	r3, #2
 800e336:	e082      	b.n	800e43e <HAL_QSPI_Receive+0x13c>
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	2201      	movs	r2, #1
 800e33c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800e346:	b2db      	uxtb	r3, r3
 800e348:	2b01      	cmp	r3, #1
 800e34a:	d171      	bne.n	800e430 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	2200      	movs	r2, #0
 800e350:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d062      	beq.n	800e41e <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	2222      	movs	r2, #34	@ 0x22
 800e35c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	691b      	ldr	r3, [r3, #16]
 800e366:	1c5a      	adds	r2, r3, #1
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	631a      	str	r2, [r3, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	691b      	ldr	r3, [r3, #16]
 800e372:	1c5a      	adds	r2, r3, #1
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->pRxBuffPtr = pData;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	68ba      	ldr	r2, [r7, #8]
 800e37c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	695b      	ldr	r3, [r3, #20]
 800e384:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800e390:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	697a      	ldr	r2, [r7, #20]
 800e398:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800e39a:	e01c      	b.n	800e3d6 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	9300      	str	r3, [sp, #0]
 800e3a0:	69bb      	ldr	r3, [r7, #24]
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	2106      	movs	r1, #6
 800e3a6:	68f8      	ldr	r0, [r7, #12]
 800e3a8:	f000 f8d4 	bl	800e554 <QSPI_WaitFlagStateUntilTimeout>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800e3b0:	7ffb      	ldrb	r3, [r7, #31]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d114      	bne.n	800e3e0 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3ba:	693a      	ldr	r2, [r7, #16]
 800e3bc:	7812      	ldrb	r2, [r2, #0]
 800e3be:	b2d2      	uxtb	r2, r2
 800e3c0:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3c6:	1c5a      	adds	r2, r3, #1
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	629a      	str	r2, [r3, #40]	@ 0x28
        hqspi->RxXferCount--;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3d0:	1e5a      	subs	r2, r3, #1
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	631a      	str	r2, [r3, #48]	@ 0x30
      while(hqspi->RxXferCount > 0U)
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d1de      	bne.n	800e39c <HAL_QSPI_Receive+0x9a>
 800e3de:	e000      	b.n	800e3e2 <HAL_QSPI_Receive+0xe0>
          break;
 800e3e0:	bf00      	nop
      }

      if (status == HAL_OK)
 800e3e2:	7ffb      	ldrb	r3, [r7, #31]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d115      	bne.n	800e414 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	9300      	str	r3, [sp, #0]
 800e3ec:	69bb      	ldr	r3, [r7, #24]
 800e3ee:	2201      	movs	r2, #1
 800e3f0:	2102      	movs	r1, #2
 800e3f2:	68f8      	ldr	r0, [r7, #12]
 800e3f4:	f000 f8ae 	bl	800e554 <QSPI_WaitFlagStateUntilTimeout>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800e3fc:	7ffb      	ldrb	r3, [r7, #31]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d108      	bne.n	800e414 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	2202      	movs	r2, #2
 800e408:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800e40a:	68f8      	ldr	r0, [r7, #12]
 800e40c:	f000 f81b 	bl	800e446 <HAL_QSPI_Abort>
 800e410:	4603      	mov	r3, r0
 800e412:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	2201      	movs	r2, #1
 800e418:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800e41c:	e00a      	b.n	800e434 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e422:	f043 0208 	orr.w	r2, r3, #8
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800e42a:	2301      	movs	r3, #1
 800e42c:	77fb      	strb	r3, [r7, #31]
 800e42e:	e001      	b.n	800e434 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800e430:	2302      	movs	r3, #2
 800e432:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2200      	movs	r2, #0
 800e438:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800e43c:	7ffb      	ldrb	r3, [r7, #31]
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3720      	adds	r7, #32
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}

0800e446 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800e446:	b580      	push	{r7, lr}
 800e448:	b086      	sub	sp, #24
 800e44a:	af02      	add	r7, sp, #8
 800e44c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e44e:	2300      	movs	r3, #0
 800e450:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800e452:	f7fb fdd9 	bl	800a008 <HAL_GetTick>
 800e456:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800e45e:	b2db      	uxtb	r3, r3
 800e460:	f003 0302 	and.w	r3, r3, #2
 800e464:	2b00      	cmp	r3, #0
 800e466:	d062      	beq.n	800e52e <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2200      	movs	r2, #0
 800e46c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f003 0304 	and.w	r3, r3, #4
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d017      	beq.n	800e4ae <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	681a      	ldr	r2, [r3, #0]
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f022 0204 	bic.w	r2, r2, #4
 800e48c:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e492:	4618      	mov	r0, r3
 800e494:	f7fd fdce 	bl	800c034 <HAL_DMA_Abort>
 800e498:	4603      	mov	r3, r0
 800e49a:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800e49c:	7bfb      	ldrb	r3, [r7, #15]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d005      	beq.n	800e4ae <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4a6:	f043 0204 	orr.w	r2, r3, #4
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	689b      	ldr	r3, [r3, #8]
 800e4b4:	f003 0320 	and.w	r3, r3, #32
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d034      	beq.n	800e526 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	681a      	ldr	r2, [r3, #0]
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	f042 0202 	orr.w	r2, r2, #2
 800e4ca:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4d0:	9300      	str	r3, [sp, #0]
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	2201      	movs	r2, #1
 800e4d6:	2102      	movs	r1, #2
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f000 f83b 	bl	800e554 <QSPI_WaitFlagStateUntilTimeout>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 800e4e2:	7bfb      	ldrb	r3, [r7, #15]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d10e      	bne.n	800e506 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	2202      	movs	r2, #2
 800e4ee:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4f4:	9300      	str	r3, [sp, #0]
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	2120      	movs	r1, #32
 800e4fc:	6878      	ldr	r0, [r7, #4]
 800e4fe:	f000 f829 	bl	800e554 <QSPI_WaitFlagStateUntilTimeout>
 800e502:	4603      	mov	r3, r0
 800e504:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800e506:	7bfb      	ldrb	r3, [r7, #15]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d110      	bne.n	800e52e <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	695a      	ldr	r2, [r3, #20]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800e51a:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2201      	movs	r2, #1
 800e520:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800e524:	e003      	b.n	800e52e <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2201      	movs	r2, #1
 800e52a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    }
  }

  return status;
 800e52e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e530:	4618      	mov	r0, r3
 800e532:	3710      	adds	r7, #16
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}

0800e538 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800e538:	b480      	push	{r7}
 800e53a:	b083      	sub	sp, #12
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
 800e540:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	683a      	ldr	r2, [r7, #0]
 800e546:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800e548:	bf00      	nop
 800e54a:	370c      	adds	r7, #12
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr

0800e554 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b084      	sub	sp, #16
 800e558:	af00      	add	r7, sp, #0
 800e55a:	60f8      	str	r0, [r7, #12]
 800e55c:	60b9      	str	r1, [r7, #8]
 800e55e:	603b      	str	r3, [r7, #0]
 800e560:	4613      	mov	r3, r2
 800e562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e564:	e01a      	b.n	800e59c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e566:	69bb      	ldr	r3, [r7, #24]
 800e568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e56c:	d016      	beq.n	800e59c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e56e:	f7fb fd4b 	bl	800a008 <HAL_GetTick>
 800e572:	4602      	mov	r2, r0
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	1ad3      	subs	r3, r2, r3
 800e578:	69ba      	ldr	r2, [r7, #24]
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d302      	bcc.n	800e584 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800e57e:	69bb      	ldr	r3, [r7, #24]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d10b      	bne.n	800e59c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2204      	movs	r2, #4
 800e588:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e590:	f043 0201 	orr.w	r2, r3, #1
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800e598:	2301      	movs	r3, #1
 800e59a:	e00e      	b.n	800e5ba <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	689a      	ldr	r2, [r3, #8]
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	4013      	ands	r3, r2
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	bf14      	ite	ne
 800e5aa:	2301      	movne	r3, #1
 800e5ac:	2300      	moveq	r3, #0
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	461a      	mov	r2, r3
 800e5b2:	79fb      	ldrb	r3, [r7, #7]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d1d6      	bne.n	800e566 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e5b8:	2300      	movs	r3, #0
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3710      	adds	r7, #16
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}

0800e5c2 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800e5c2:	b480      	push	{r7}
 800e5c4:	b085      	sub	sp, #20
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	60f8      	str	r0, [r7, #12]
 800e5ca:	60b9      	str	r1, [r7, #8]
 800e5cc:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d009      	beq.n	800e5ea <QSPI_Config+0x28>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800e5dc:	d005      	beq.n	800e5ea <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	3a01      	subs	r2, #1
 800e5e8:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	699b      	ldr	r3, [r3, #24]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	f000 80c1 	beq.w	800e776 <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	6a1b      	ldr	r3, [r3, #32]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d063      	beq.n	800e6c4 <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	68ba      	ldr	r2, [r7, #8]
 800e602:	6892      	ldr	r2, [r2, #8]
 800e604:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	69db      	ldr	r3, [r3, #28]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d031      	beq.n	800e672 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e616:	431a      	orrs	r2, r3
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e61c:	431a      	orrs	r2, r3
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e622:	431a      	orrs	r2, r3
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	695b      	ldr	r3, [r3, #20]
 800e628:	049b      	lsls	r3, r3, #18
 800e62a:	431a      	orrs	r2, r3
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	691b      	ldr	r3, [r3, #16]
 800e630:	431a      	orrs	r2, r3
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	6a1b      	ldr	r3, [r3, #32]
 800e636:	431a      	orrs	r2, r3
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	68db      	ldr	r3, [r3, #12]
 800e63c:	431a      	orrs	r2, r3
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	69db      	ldr	r3, [r3, #28]
 800e642:	431a      	orrs	r2, r3
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	699b      	ldr	r3, [r3, #24]
 800e648:	431a      	orrs	r2, r3
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	ea42 0103 	orr.w	r1, r2, r3
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	687a      	ldr	r2, [r7, #4]
 800e658:	430a      	orrs	r2, r1
 800e65a:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800e662:	f000 813f 	beq.w	800e8e4 <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	68ba      	ldr	r2, [r7, #8]
 800e66c:	6852      	ldr	r2, [r2, #4]
 800e66e:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800e670:	e138      	b.n	800e8e4 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e67a:	431a      	orrs	r2, r3
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e680:	431a      	orrs	r2, r3
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e686:	431a      	orrs	r2, r3
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	695b      	ldr	r3, [r3, #20]
 800e68c:	049b      	lsls	r3, r3, #18
 800e68e:	431a      	orrs	r2, r3
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	691b      	ldr	r3, [r3, #16]
 800e694:	431a      	orrs	r2, r3
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	6a1b      	ldr	r3, [r3, #32]
 800e69a:	431a      	orrs	r2, r3
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	69db      	ldr	r3, [r3, #28]
 800e6a0:	431a      	orrs	r2, r3
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	699b      	ldr	r3, [r3, #24]
 800e6a6:	431a      	orrs	r2, r3
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	ea42 0103 	orr.w	r1, r2, r3
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	430a      	orrs	r2, r1
 800e6b8:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	619a      	str	r2, [r3, #24]
}
 800e6c2:	e10f      	b.n	800e8e4 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	69db      	ldr	r3, [r3, #28]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d02e      	beq.n	800e72a <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6d4:	431a      	orrs	r2, r3
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e6da:	431a      	orrs	r2, r3
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6e0:	431a      	orrs	r2, r3
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	695b      	ldr	r3, [r3, #20]
 800e6e6:	049b      	lsls	r3, r3, #18
 800e6e8:	431a      	orrs	r2, r3
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	6a1b      	ldr	r3, [r3, #32]
 800e6ee:	431a      	orrs	r2, r3
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	68db      	ldr	r3, [r3, #12]
 800e6f4:	431a      	orrs	r2, r3
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	69db      	ldr	r3, [r3, #28]
 800e6fa:	431a      	orrs	r2, r3
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	699b      	ldr	r3, [r3, #24]
 800e700:	431a      	orrs	r2, r3
 800e702:	68bb      	ldr	r3, [r7, #8]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	ea42 0103 	orr.w	r1, r2, r3
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	687a      	ldr	r2, [r7, #4]
 800e710:	430a      	orrs	r2, r1
 800e712:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800e71a:	f000 80e3 	beq.w	800e8e4 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	68ba      	ldr	r2, [r7, #8]
 800e724:	6852      	ldr	r2, [r2, #4]
 800e726:	619a      	str	r2, [r3, #24]
}
 800e728:	e0dc      	b.n	800e8e4 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e732:	431a      	orrs	r2, r3
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e738:	431a      	orrs	r2, r3
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e73e:	431a      	orrs	r2, r3
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	695b      	ldr	r3, [r3, #20]
 800e744:	049b      	lsls	r3, r3, #18
 800e746:	431a      	orrs	r2, r3
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	6a1b      	ldr	r3, [r3, #32]
 800e74c:	431a      	orrs	r2, r3
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	69db      	ldr	r3, [r3, #28]
 800e752:	431a      	orrs	r2, r3
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	699b      	ldr	r3, [r3, #24]
 800e758:	431a      	orrs	r2, r3
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	ea42 0103 	orr.w	r1, r2, r3
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	687a      	ldr	r2, [r7, #4]
 800e768:	430a      	orrs	r2, r1
 800e76a:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	2200      	movs	r2, #0
 800e772:	619a      	str	r2, [r3, #24]
}
 800e774:	e0b6      	b.n	800e8e4 <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	6a1b      	ldr	r3, [r3, #32]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d05d      	beq.n	800e83a <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	68ba      	ldr	r2, [r7, #8]
 800e784:	6892      	ldr	r2, [r2, #8]
 800e786:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	69db      	ldr	r3, [r3, #28]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d02e      	beq.n	800e7ee <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e798:	431a      	orrs	r2, r3
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e79e:	431a      	orrs	r2, r3
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7a4:	431a      	orrs	r2, r3
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	695b      	ldr	r3, [r3, #20]
 800e7aa:	049b      	lsls	r3, r3, #18
 800e7ac:	431a      	orrs	r2, r3
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	691b      	ldr	r3, [r3, #16]
 800e7b2:	431a      	orrs	r2, r3
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	6a1b      	ldr	r3, [r3, #32]
 800e7b8:	431a      	orrs	r2, r3
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	68db      	ldr	r3, [r3, #12]
 800e7be:	431a      	orrs	r2, r3
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	69db      	ldr	r3, [r3, #28]
 800e7c4:	431a      	orrs	r2, r3
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	699b      	ldr	r3, [r3, #24]
 800e7ca:	ea42 0103 	orr.w	r1, r2, r3
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	687a      	ldr	r2, [r7, #4]
 800e7d4:	430a      	orrs	r2, r1
 800e7d6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800e7de:	f000 8081 	beq.w	800e8e4 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	68ba      	ldr	r2, [r7, #8]
 800e7e8:	6852      	ldr	r2, [r2, #4]
 800e7ea:	619a      	str	r2, [r3, #24]
}
 800e7ec:	e07a      	b.n	800e8e4 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7f6:	431a      	orrs	r2, r3
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e7fc:	431a      	orrs	r2, r3
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e802:	431a      	orrs	r2, r3
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	695b      	ldr	r3, [r3, #20]
 800e808:	049b      	lsls	r3, r3, #18
 800e80a:	431a      	orrs	r2, r3
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	691b      	ldr	r3, [r3, #16]
 800e810:	431a      	orrs	r2, r3
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	6a1b      	ldr	r3, [r3, #32]
 800e816:	431a      	orrs	r2, r3
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	69db      	ldr	r3, [r3, #28]
 800e81c:	431a      	orrs	r2, r3
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	699b      	ldr	r3, [r3, #24]
 800e822:	ea42 0103 	orr.w	r1, r2, r3
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	687a      	ldr	r2, [r7, #4]
 800e82c:	430a      	orrs	r2, r1
 800e82e:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	2200      	movs	r2, #0
 800e836:	619a      	str	r2, [r3, #24]
}
 800e838:	e054      	b.n	800e8e4 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	69db      	ldr	r3, [r3, #28]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d02a      	beq.n	800e898 <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e84a:	431a      	orrs	r2, r3
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e850:	431a      	orrs	r2, r3
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e856:	431a      	orrs	r2, r3
 800e858:	68bb      	ldr	r3, [r7, #8]
 800e85a:	695b      	ldr	r3, [r3, #20]
 800e85c:	049b      	lsls	r3, r3, #18
 800e85e:	431a      	orrs	r2, r3
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	6a1b      	ldr	r3, [r3, #32]
 800e864:	431a      	orrs	r2, r3
 800e866:	68bb      	ldr	r3, [r7, #8]
 800e868:	68db      	ldr	r3, [r3, #12]
 800e86a:	431a      	orrs	r2, r3
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	69db      	ldr	r3, [r3, #28]
 800e870:	431a      	orrs	r2, r3
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	699b      	ldr	r3, [r3, #24]
 800e876:	ea42 0103 	orr.w	r1, r2, r3
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	687a      	ldr	r2, [r7, #4]
 800e880:	430a      	orrs	r2, r1
 800e882:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800e88a:	d02b      	beq.n	800e8e4 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	68ba      	ldr	r2, [r7, #8]
 800e892:	6852      	ldr	r2, [r2, #4]
 800e894:	619a      	str	r2, [r3, #24]
}
 800e896:	e025      	b.n	800e8e4 <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d021      	beq.n	800e8e4 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8a8:	431a      	orrs	r2, r3
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e8ae:	431a      	orrs	r2, r3
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8b4:	431a      	orrs	r2, r3
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	695b      	ldr	r3, [r3, #20]
 800e8ba:	049b      	lsls	r3, r3, #18
 800e8bc:	431a      	orrs	r2, r3
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	6a1b      	ldr	r3, [r3, #32]
 800e8c2:	431a      	orrs	r2, r3
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	69db      	ldr	r3, [r3, #28]
 800e8c8:	431a      	orrs	r2, r3
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	699b      	ldr	r3, [r3, #24]
 800e8ce:	ea42 0103 	orr.w	r1, r2, r3
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	687a      	ldr	r2, [r7, #4]
 800e8d8:	430a      	orrs	r2, r1
 800e8da:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	619a      	str	r2, [r3, #24]
}
 800e8e4:	bf00      	nop
 800e8e6:	3714      	adds	r7, #20
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ee:	4770      	bx	lr

0800e8f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b088      	sub	sp, #32
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d101      	bne.n	800e902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e8fe:	2301      	movs	r3, #1
 800e900:	e3ca      	b.n	800f098 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e902:	4b97      	ldr	r3, [pc, #604]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800e904:	689b      	ldr	r3, [r3, #8]
 800e906:	f003 030c 	and.w	r3, r3, #12
 800e90a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e90c:	4b94      	ldr	r3, [pc, #592]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800e90e:	68db      	ldr	r3, [r3, #12]
 800e910:	f003 0303 	and.w	r3, r3, #3
 800e914:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	f003 0310 	and.w	r3, r3, #16
 800e91e:	2b00      	cmp	r3, #0
 800e920:	f000 80e4 	beq.w	800eaec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800e924:	69bb      	ldr	r3, [r7, #24]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d007      	beq.n	800e93a <HAL_RCC_OscConfig+0x4a>
 800e92a:	69bb      	ldr	r3, [r7, #24]
 800e92c:	2b0c      	cmp	r3, #12
 800e92e:	f040 808b 	bne.w	800ea48 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	2b01      	cmp	r3, #1
 800e936:	f040 8087 	bne.w	800ea48 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800e93a:	4b89      	ldr	r3, [pc, #548]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f003 0302 	and.w	r3, r3, #2
 800e942:	2b00      	cmp	r3, #0
 800e944:	d005      	beq.n	800e952 <HAL_RCC_OscConfig+0x62>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	699b      	ldr	r3, [r3, #24]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d101      	bne.n	800e952 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800e94e:	2301      	movs	r3, #1
 800e950:	e3a2      	b.n	800f098 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	6a1a      	ldr	r2, [r3, #32]
 800e956:	4b82      	ldr	r3, [pc, #520]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	f003 0308 	and.w	r3, r3, #8
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d004      	beq.n	800e96c <HAL_RCC_OscConfig+0x7c>
 800e962:	4b7f      	ldr	r3, [pc, #508]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e96a:	e005      	b.n	800e978 <HAL_RCC_OscConfig+0x88>
 800e96c:	4b7c      	ldr	r3, [pc, #496]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800e96e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e972:	091b      	lsrs	r3, r3, #4
 800e974:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e978:	4293      	cmp	r3, r2
 800e97a:	d223      	bcs.n	800e9c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6a1b      	ldr	r3, [r3, #32]
 800e980:	4618      	mov	r0, r3
 800e982:	f000 fd55 	bl	800f430 <RCC_SetFlashLatencyFromMSIRange>
 800e986:	4603      	mov	r3, r0
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d001      	beq.n	800e990 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800e98c:	2301      	movs	r3, #1
 800e98e:	e383      	b.n	800f098 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e990:	4b73      	ldr	r3, [pc, #460]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	4a72      	ldr	r2, [pc, #456]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800e996:	f043 0308 	orr.w	r3, r3, #8
 800e99a:	6013      	str	r3, [r2, #0]
 800e99c:	4b70      	ldr	r3, [pc, #448]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6a1b      	ldr	r3, [r3, #32]
 800e9a8:	496d      	ldr	r1, [pc, #436]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800e9aa:	4313      	orrs	r3, r2
 800e9ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e9ae:	4b6c      	ldr	r3, [pc, #432]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800e9b0:	685b      	ldr	r3, [r3, #4]
 800e9b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	69db      	ldr	r3, [r3, #28]
 800e9ba:	021b      	lsls	r3, r3, #8
 800e9bc:	4968      	ldr	r1, [pc, #416]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800e9be:	4313      	orrs	r3, r2
 800e9c0:	604b      	str	r3, [r1, #4]
 800e9c2:	e025      	b.n	800ea10 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e9c4:	4b66      	ldr	r3, [pc, #408]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	4a65      	ldr	r2, [pc, #404]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800e9ca:	f043 0308 	orr.w	r3, r3, #8
 800e9ce:	6013      	str	r3, [r2, #0]
 800e9d0:	4b63      	ldr	r3, [pc, #396]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6a1b      	ldr	r3, [r3, #32]
 800e9dc:	4960      	ldr	r1, [pc, #384]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800e9de:	4313      	orrs	r3, r2
 800e9e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e9e2:	4b5f      	ldr	r3, [pc, #380]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800e9e4:	685b      	ldr	r3, [r3, #4]
 800e9e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	69db      	ldr	r3, [r3, #28]
 800e9ee:	021b      	lsls	r3, r3, #8
 800e9f0:	495b      	ldr	r1, [pc, #364]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800e9f2:	4313      	orrs	r3, r2
 800e9f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800e9f6:	69bb      	ldr	r3, [r7, #24]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d109      	bne.n	800ea10 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6a1b      	ldr	r3, [r3, #32]
 800ea00:	4618      	mov	r0, r3
 800ea02:	f000 fd15 	bl	800f430 <RCC_SetFlashLatencyFromMSIRange>
 800ea06:	4603      	mov	r3, r0
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d001      	beq.n	800ea10 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	e343      	b.n	800f098 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ea10:	f000 fc4a 	bl	800f2a8 <HAL_RCC_GetSysClockFreq>
 800ea14:	4602      	mov	r2, r0
 800ea16:	4b52      	ldr	r3, [pc, #328]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800ea18:	689b      	ldr	r3, [r3, #8]
 800ea1a:	091b      	lsrs	r3, r3, #4
 800ea1c:	f003 030f 	and.w	r3, r3, #15
 800ea20:	4950      	ldr	r1, [pc, #320]	@ (800eb64 <HAL_RCC_OscConfig+0x274>)
 800ea22:	5ccb      	ldrb	r3, [r1, r3]
 800ea24:	f003 031f 	and.w	r3, r3, #31
 800ea28:	fa22 f303 	lsr.w	r3, r2, r3
 800ea2c:	4a4e      	ldr	r2, [pc, #312]	@ (800eb68 <HAL_RCC_OscConfig+0x278>)
 800ea2e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800ea30:	4b4e      	ldr	r3, [pc, #312]	@ (800eb6c <HAL_RCC_OscConfig+0x27c>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	4618      	mov	r0, r3
 800ea36:	f7fb fa97 	bl	8009f68 <HAL_InitTick>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800ea3e:	7bfb      	ldrb	r3, [r7, #15]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d052      	beq.n	800eaea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800ea44:	7bfb      	ldrb	r3, [r7, #15]
 800ea46:	e327      	b.n	800f098 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	699b      	ldr	r3, [r3, #24]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d032      	beq.n	800eab6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800ea50:	4b43      	ldr	r3, [pc, #268]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	4a42      	ldr	r2, [pc, #264]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800ea56:	f043 0301 	orr.w	r3, r3, #1
 800ea5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ea5c:	f7fb fad4 	bl	800a008 <HAL_GetTick>
 800ea60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ea62:	e008      	b.n	800ea76 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ea64:	f7fb fad0 	bl	800a008 <HAL_GetTick>
 800ea68:	4602      	mov	r2, r0
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	1ad3      	subs	r3, r2, r3
 800ea6e:	2b02      	cmp	r3, #2
 800ea70:	d901      	bls.n	800ea76 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800ea72:	2303      	movs	r3, #3
 800ea74:	e310      	b.n	800f098 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ea76:	4b3a      	ldr	r3, [pc, #232]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	f003 0302 	and.w	r3, r3, #2
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d0f0      	beq.n	800ea64 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ea82:	4b37      	ldr	r3, [pc, #220]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	4a36      	ldr	r2, [pc, #216]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800ea88:	f043 0308 	orr.w	r3, r3, #8
 800ea8c:	6013      	str	r3, [r2, #0]
 800ea8e:	4b34      	ldr	r3, [pc, #208]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6a1b      	ldr	r3, [r3, #32]
 800ea9a:	4931      	ldr	r1, [pc, #196]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800ea9c:	4313      	orrs	r3, r2
 800ea9e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800eaa0:	4b2f      	ldr	r3, [pc, #188]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800eaa2:	685b      	ldr	r3, [r3, #4]
 800eaa4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	69db      	ldr	r3, [r3, #28]
 800eaac:	021b      	lsls	r3, r3, #8
 800eaae:	492c      	ldr	r1, [pc, #176]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800eab0:	4313      	orrs	r3, r2
 800eab2:	604b      	str	r3, [r1, #4]
 800eab4:	e01a      	b.n	800eaec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800eab6:	4b2a      	ldr	r3, [pc, #168]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	4a29      	ldr	r2, [pc, #164]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800eabc:	f023 0301 	bic.w	r3, r3, #1
 800eac0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800eac2:	f7fb faa1 	bl	800a008 <HAL_GetTick>
 800eac6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800eac8:	e008      	b.n	800eadc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800eaca:	f7fb fa9d 	bl	800a008 <HAL_GetTick>
 800eace:	4602      	mov	r2, r0
 800ead0:	693b      	ldr	r3, [r7, #16]
 800ead2:	1ad3      	subs	r3, r2, r3
 800ead4:	2b02      	cmp	r3, #2
 800ead6:	d901      	bls.n	800eadc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800ead8:	2303      	movs	r3, #3
 800eada:	e2dd      	b.n	800f098 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800eadc:	4b20      	ldr	r3, [pc, #128]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	f003 0302 	and.w	r3, r3, #2
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d1f0      	bne.n	800eaca <HAL_RCC_OscConfig+0x1da>
 800eae8:	e000      	b.n	800eaec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800eaea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f003 0301 	and.w	r3, r3, #1
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d074      	beq.n	800ebe2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800eaf8:	69bb      	ldr	r3, [r7, #24]
 800eafa:	2b08      	cmp	r3, #8
 800eafc:	d005      	beq.n	800eb0a <HAL_RCC_OscConfig+0x21a>
 800eafe:	69bb      	ldr	r3, [r7, #24]
 800eb00:	2b0c      	cmp	r3, #12
 800eb02:	d10e      	bne.n	800eb22 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	2b03      	cmp	r3, #3
 800eb08:	d10b      	bne.n	800eb22 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800eb0a:	4b15      	ldr	r3, [pc, #84]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d064      	beq.n	800ebe0 <HAL_RCC_OscConfig+0x2f0>
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	685b      	ldr	r3, [r3, #4]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d160      	bne.n	800ebe0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800eb1e:	2301      	movs	r3, #1
 800eb20:	e2ba      	b.n	800f098 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	685b      	ldr	r3, [r3, #4]
 800eb26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eb2a:	d106      	bne.n	800eb3a <HAL_RCC_OscConfig+0x24a>
 800eb2c:	4b0c      	ldr	r3, [pc, #48]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	4a0b      	ldr	r2, [pc, #44]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800eb32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800eb36:	6013      	str	r3, [r2, #0]
 800eb38:	e026      	b.n	800eb88 <HAL_RCC_OscConfig+0x298>
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	685b      	ldr	r3, [r3, #4]
 800eb3e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800eb42:	d115      	bne.n	800eb70 <HAL_RCC_OscConfig+0x280>
 800eb44:	4b06      	ldr	r3, [pc, #24]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	4a05      	ldr	r2, [pc, #20]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800eb4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800eb4e:	6013      	str	r3, [r2, #0]
 800eb50:	4b03      	ldr	r3, [pc, #12]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	4a02      	ldr	r2, [pc, #8]	@ (800eb60 <HAL_RCC_OscConfig+0x270>)
 800eb56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800eb5a:	6013      	str	r3, [r2, #0]
 800eb5c:	e014      	b.n	800eb88 <HAL_RCC_OscConfig+0x298>
 800eb5e:	bf00      	nop
 800eb60:	40021000 	.word	0x40021000
 800eb64:	08016800 	.word	0x08016800
 800eb68:	20000168 	.word	0x20000168
 800eb6c:	20000174 	.word	0x20000174
 800eb70:	4ba0      	ldr	r3, [pc, #640]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	4a9f      	ldr	r2, [pc, #636]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800eb76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800eb7a:	6013      	str	r3, [r2, #0]
 800eb7c:	4b9d      	ldr	r3, [pc, #628]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	4a9c      	ldr	r2, [pc, #624]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800eb82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800eb86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	685b      	ldr	r3, [r3, #4]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d013      	beq.n	800ebb8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eb90:	f7fb fa3a 	bl	800a008 <HAL_GetTick>
 800eb94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800eb96:	e008      	b.n	800ebaa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800eb98:	f7fb fa36 	bl	800a008 <HAL_GetTick>
 800eb9c:	4602      	mov	r2, r0
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	1ad3      	subs	r3, r2, r3
 800eba2:	2b64      	cmp	r3, #100	@ 0x64
 800eba4:	d901      	bls.n	800ebaa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800eba6:	2303      	movs	r3, #3
 800eba8:	e276      	b.n	800f098 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ebaa:	4b92      	ldr	r3, [pc, #584]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d0f0      	beq.n	800eb98 <HAL_RCC_OscConfig+0x2a8>
 800ebb6:	e014      	b.n	800ebe2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ebb8:	f7fb fa26 	bl	800a008 <HAL_GetTick>
 800ebbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ebbe:	e008      	b.n	800ebd2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ebc0:	f7fb fa22 	bl	800a008 <HAL_GetTick>
 800ebc4:	4602      	mov	r2, r0
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	1ad3      	subs	r3, r2, r3
 800ebca:	2b64      	cmp	r3, #100	@ 0x64
 800ebcc:	d901      	bls.n	800ebd2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ebce:	2303      	movs	r3, #3
 800ebd0:	e262      	b.n	800f098 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ebd2:	4b88      	ldr	r3, [pc, #544]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d1f0      	bne.n	800ebc0 <HAL_RCC_OscConfig+0x2d0>
 800ebde:	e000      	b.n	800ebe2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ebe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	f003 0302 	and.w	r3, r3, #2
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d060      	beq.n	800ecb0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800ebee:	69bb      	ldr	r3, [r7, #24]
 800ebf0:	2b04      	cmp	r3, #4
 800ebf2:	d005      	beq.n	800ec00 <HAL_RCC_OscConfig+0x310>
 800ebf4:	69bb      	ldr	r3, [r7, #24]
 800ebf6:	2b0c      	cmp	r3, #12
 800ebf8:	d119      	bne.n	800ec2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	2b02      	cmp	r3, #2
 800ebfe:	d116      	bne.n	800ec2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ec00:	4b7c      	ldr	r3, [pc, #496]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d005      	beq.n	800ec18 <HAL_RCC_OscConfig+0x328>
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	68db      	ldr	r3, [r3, #12]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d101      	bne.n	800ec18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800ec14:	2301      	movs	r3, #1
 800ec16:	e23f      	b.n	800f098 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ec18:	4b76      	ldr	r3, [pc, #472]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800ec1a:	685b      	ldr	r3, [r3, #4]
 800ec1c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	691b      	ldr	r3, [r3, #16]
 800ec24:	061b      	lsls	r3, r3, #24
 800ec26:	4973      	ldr	r1, [pc, #460]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800ec28:	4313      	orrs	r3, r2
 800ec2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ec2c:	e040      	b.n	800ecb0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	68db      	ldr	r3, [r3, #12]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d023      	beq.n	800ec7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ec36:	4b6f      	ldr	r3, [pc, #444]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	4a6e      	ldr	r2, [pc, #440]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800ec3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ec40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec42:	f7fb f9e1 	bl	800a008 <HAL_GetTick>
 800ec46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ec48:	e008      	b.n	800ec5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ec4a:	f7fb f9dd 	bl	800a008 <HAL_GetTick>
 800ec4e:	4602      	mov	r2, r0
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	1ad3      	subs	r3, r2, r3
 800ec54:	2b02      	cmp	r3, #2
 800ec56:	d901      	bls.n	800ec5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800ec58:	2303      	movs	r3, #3
 800ec5a:	e21d      	b.n	800f098 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ec5c:	4b65      	ldr	r3, [pc, #404]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d0f0      	beq.n	800ec4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ec68:	4b62      	ldr	r3, [pc, #392]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800ec6a:	685b      	ldr	r3, [r3, #4]
 800ec6c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	691b      	ldr	r3, [r3, #16]
 800ec74:	061b      	lsls	r3, r3, #24
 800ec76:	495f      	ldr	r1, [pc, #380]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800ec78:	4313      	orrs	r3, r2
 800ec7a:	604b      	str	r3, [r1, #4]
 800ec7c:	e018      	b.n	800ecb0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ec7e:	4b5d      	ldr	r3, [pc, #372]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	4a5c      	ldr	r2, [pc, #368]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800ec84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ec88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec8a:	f7fb f9bd 	bl	800a008 <HAL_GetTick>
 800ec8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ec90:	e008      	b.n	800eca4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ec92:	f7fb f9b9 	bl	800a008 <HAL_GetTick>
 800ec96:	4602      	mov	r2, r0
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	1ad3      	subs	r3, r2, r3
 800ec9c:	2b02      	cmp	r3, #2
 800ec9e:	d901      	bls.n	800eca4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800eca0:	2303      	movs	r3, #3
 800eca2:	e1f9      	b.n	800f098 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800eca4:	4b53      	ldr	r3, [pc, #332]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d1f0      	bne.n	800ec92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	f003 0308 	and.w	r3, r3, #8
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d03c      	beq.n	800ed36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	695b      	ldr	r3, [r3, #20]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d01c      	beq.n	800ecfe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ecc4:	4b4b      	ldr	r3, [pc, #300]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800ecc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ecca:	4a4a      	ldr	r2, [pc, #296]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800eccc:	f043 0301 	orr.w	r3, r3, #1
 800ecd0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ecd4:	f7fb f998 	bl	800a008 <HAL_GetTick>
 800ecd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ecda:	e008      	b.n	800ecee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ecdc:	f7fb f994 	bl	800a008 <HAL_GetTick>
 800ece0:	4602      	mov	r2, r0
 800ece2:	693b      	ldr	r3, [r7, #16]
 800ece4:	1ad3      	subs	r3, r2, r3
 800ece6:	2b02      	cmp	r3, #2
 800ece8:	d901      	bls.n	800ecee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800ecea:	2303      	movs	r3, #3
 800ecec:	e1d4      	b.n	800f098 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ecee:	4b41      	ldr	r3, [pc, #260]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800ecf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ecf4:	f003 0302 	and.w	r3, r3, #2
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d0ef      	beq.n	800ecdc <HAL_RCC_OscConfig+0x3ec>
 800ecfc:	e01b      	b.n	800ed36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ecfe:	4b3d      	ldr	r3, [pc, #244]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800ed00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ed04:	4a3b      	ldr	r2, [pc, #236]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800ed06:	f023 0301 	bic.w	r3, r3, #1
 800ed0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ed0e:	f7fb f97b 	bl	800a008 <HAL_GetTick>
 800ed12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ed14:	e008      	b.n	800ed28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ed16:	f7fb f977 	bl	800a008 <HAL_GetTick>
 800ed1a:	4602      	mov	r2, r0
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	1ad3      	subs	r3, r2, r3
 800ed20:	2b02      	cmp	r3, #2
 800ed22:	d901      	bls.n	800ed28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800ed24:	2303      	movs	r3, #3
 800ed26:	e1b7      	b.n	800f098 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ed28:	4b32      	ldr	r3, [pc, #200]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800ed2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ed2e:	f003 0302 	and.w	r3, r3, #2
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d1ef      	bne.n	800ed16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f003 0304 	and.w	r3, r3, #4
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	f000 80a6 	beq.w	800ee90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ed44:	2300      	movs	r3, #0
 800ed46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800ed48:	4b2a      	ldr	r3, [pc, #168]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800ed4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d10d      	bne.n	800ed70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ed54:	4b27      	ldr	r3, [pc, #156]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800ed56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed58:	4a26      	ldr	r2, [pc, #152]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800ed5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ed5e:	6593      	str	r3, [r2, #88]	@ 0x58
 800ed60:	4b24      	ldr	r3, [pc, #144]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800ed62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ed68:	60bb      	str	r3, [r7, #8]
 800ed6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ed70:	4b21      	ldr	r3, [pc, #132]	@ (800edf8 <HAL_RCC_OscConfig+0x508>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d118      	bne.n	800edae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ed7c:	4b1e      	ldr	r3, [pc, #120]	@ (800edf8 <HAL_RCC_OscConfig+0x508>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	4a1d      	ldr	r2, [pc, #116]	@ (800edf8 <HAL_RCC_OscConfig+0x508>)
 800ed82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ed86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ed88:	f7fb f93e 	bl	800a008 <HAL_GetTick>
 800ed8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ed8e:	e008      	b.n	800eda2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ed90:	f7fb f93a 	bl	800a008 <HAL_GetTick>
 800ed94:	4602      	mov	r2, r0
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	1ad3      	subs	r3, r2, r3
 800ed9a:	2b02      	cmp	r3, #2
 800ed9c:	d901      	bls.n	800eda2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800ed9e:	2303      	movs	r3, #3
 800eda0:	e17a      	b.n	800f098 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800eda2:	4b15      	ldr	r3, [pc, #84]	@ (800edf8 <HAL_RCC_OscConfig+0x508>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d0f0      	beq.n	800ed90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	689b      	ldr	r3, [r3, #8]
 800edb2:	2b01      	cmp	r3, #1
 800edb4:	d108      	bne.n	800edc8 <HAL_RCC_OscConfig+0x4d8>
 800edb6:	4b0f      	ldr	r3, [pc, #60]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800edb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edbc:	4a0d      	ldr	r2, [pc, #52]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800edbe:	f043 0301 	orr.w	r3, r3, #1
 800edc2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800edc6:	e029      	b.n	800ee1c <HAL_RCC_OscConfig+0x52c>
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	689b      	ldr	r3, [r3, #8]
 800edcc:	2b05      	cmp	r3, #5
 800edce:	d115      	bne.n	800edfc <HAL_RCC_OscConfig+0x50c>
 800edd0:	4b08      	ldr	r3, [pc, #32]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800edd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edd6:	4a07      	ldr	r2, [pc, #28]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800edd8:	f043 0304 	orr.w	r3, r3, #4
 800eddc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800ede0:	4b04      	ldr	r3, [pc, #16]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800ede2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ede6:	4a03      	ldr	r2, [pc, #12]	@ (800edf4 <HAL_RCC_OscConfig+0x504>)
 800ede8:	f043 0301 	orr.w	r3, r3, #1
 800edec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800edf0:	e014      	b.n	800ee1c <HAL_RCC_OscConfig+0x52c>
 800edf2:	bf00      	nop
 800edf4:	40021000 	.word	0x40021000
 800edf8:	40007000 	.word	0x40007000
 800edfc:	4b9c      	ldr	r3, [pc, #624]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800edfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee02:	4a9b      	ldr	r2, [pc, #620]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800ee04:	f023 0301 	bic.w	r3, r3, #1
 800ee08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800ee0c:	4b98      	ldr	r3, [pc, #608]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800ee0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee12:	4a97      	ldr	r2, [pc, #604]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800ee14:	f023 0304 	bic.w	r3, r3, #4
 800ee18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	689b      	ldr	r3, [r3, #8]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d016      	beq.n	800ee52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ee24:	f7fb f8f0 	bl	800a008 <HAL_GetTick>
 800ee28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ee2a:	e00a      	b.n	800ee42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ee2c:	f7fb f8ec 	bl	800a008 <HAL_GetTick>
 800ee30:	4602      	mov	r2, r0
 800ee32:	693b      	ldr	r3, [r7, #16]
 800ee34:	1ad3      	subs	r3, r2, r3
 800ee36:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d901      	bls.n	800ee42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800ee3e:	2303      	movs	r3, #3
 800ee40:	e12a      	b.n	800f098 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ee42:	4b8b      	ldr	r3, [pc, #556]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800ee44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee48:	f003 0302 	and.w	r3, r3, #2
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d0ed      	beq.n	800ee2c <HAL_RCC_OscConfig+0x53c>
 800ee50:	e015      	b.n	800ee7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ee52:	f7fb f8d9 	bl	800a008 <HAL_GetTick>
 800ee56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ee58:	e00a      	b.n	800ee70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ee5a:	f7fb f8d5 	bl	800a008 <HAL_GetTick>
 800ee5e:	4602      	mov	r2, r0
 800ee60:	693b      	ldr	r3, [r7, #16]
 800ee62:	1ad3      	subs	r3, r2, r3
 800ee64:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	d901      	bls.n	800ee70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800ee6c:	2303      	movs	r3, #3
 800ee6e:	e113      	b.n	800f098 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ee70:	4b7f      	ldr	r3, [pc, #508]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800ee72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee76:	f003 0302 	and.w	r3, r3, #2
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d1ed      	bne.n	800ee5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ee7e:	7ffb      	ldrb	r3, [r7, #31]
 800ee80:	2b01      	cmp	r3, #1
 800ee82:	d105      	bne.n	800ee90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ee84:	4b7a      	ldr	r3, [pc, #488]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800ee86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee88:	4a79      	ldr	r2, [pc, #484]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800ee8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ee8e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	f000 80fe 	beq.w	800f096 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee9e:	2b02      	cmp	r3, #2
 800eea0:	f040 80d0 	bne.w	800f044 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800eea4:	4b72      	ldr	r3, [pc, #456]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800eea6:	68db      	ldr	r3, [r3, #12]
 800eea8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	f003 0203 	and.w	r2, r3, #3
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d130      	bne.n	800ef1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eec2:	3b01      	subs	r3, #1
 800eec4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d127      	bne.n	800ef1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eed4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800eed6:	429a      	cmp	r2, r3
 800eed8:	d11f      	bne.n	800ef1a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eee0:	687a      	ldr	r2, [r7, #4]
 800eee2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800eee4:	2a07      	cmp	r2, #7
 800eee6:	bf14      	ite	ne
 800eee8:	2201      	movne	r2, #1
 800eeea:	2200      	moveq	r2, #0
 800eeec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800eeee:	4293      	cmp	r3, r2
 800eef0:	d113      	bne.n	800ef1a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eefc:	085b      	lsrs	r3, r3, #1
 800eefe:	3b01      	subs	r3, #1
 800ef00:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d109      	bne.n	800ef1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef10:	085b      	lsrs	r3, r3, #1
 800ef12:	3b01      	subs	r3, #1
 800ef14:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ef16:	429a      	cmp	r2, r3
 800ef18:	d06e      	beq.n	800eff8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ef1a:	69bb      	ldr	r3, [r7, #24]
 800ef1c:	2b0c      	cmp	r3, #12
 800ef1e:	d069      	beq.n	800eff4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ef20:	4b53      	ldr	r3, [pc, #332]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d105      	bne.n	800ef38 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800ef2c:	4b50      	ldr	r3, [pc, #320]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d001      	beq.n	800ef3c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800ef38:	2301      	movs	r3, #1
 800ef3a:	e0ad      	b.n	800f098 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ef3c:	4b4c      	ldr	r3, [pc, #304]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	4a4b      	ldr	r2, [pc, #300]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800ef42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ef46:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ef48:	f7fb f85e 	bl	800a008 <HAL_GetTick>
 800ef4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ef4e:	e008      	b.n	800ef62 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ef50:	f7fb f85a 	bl	800a008 <HAL_GetTick>
 800ef54:	4602      	mov	r2, r0
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	1ad3      	subs	r3, r2, r3
 800ef5a:	2b02      	cmp	r3, #2
 800ef5c:	d901      	bls.n	800ef62 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800ef5e:	2303      	movs	r3, #3
 800ef60:	e09a      	b.n	800f098 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ef62:	4b43      	ldr	r3, [pc, #268]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d1f0      	bne.n	800ef50 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ef6e:	4b40      	ldr	r3, [pc, #256]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800ef70:	68da      	ldr	r2, [r3, #12]
 800ef72:	4b40      	ldr	r3, [pc, #256]	@ (800f074 <HAL_RCC_OscConfig+0x784>)
 800ef74:	4013      	ands	r3, r2
 800ef76:	687a      	ldr	r2, [r7, #4]
 800ef78:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800ef7a:	687a      	ldr	r2, [r7, #4]
 800ef7c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ef7e:	3a01      	subs	r2, #1
 800ef80:	0112      	lsls	r2, r2, #4
 800ef82:	4311      	orrs	r1, r2
 800ef84:	687a      	ldr	r2, [r7, #4]
 800ef86:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ef88:	0212      	lsls	r2, r2, #8
 800ef8a:	4311      	orrs	r1, r2
 800ef8c:	687a      	ldr	r2, [r7, #4]
 800ef8e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ef90:	0852      	lsrs	r2, r2, #1
 800ef92:	3a01      	subs	r2, #1
 800ef94:	0552      	lsls	r2, r2, #21
 800ef96:	4311      	orrs	r1, r2
 800ef98:	687a      	ldr	r2, [r7, #4]
 800ef9a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800ef9c:	0852      	lsrs	r2, r2, #1
 800ef9e:	3a01      	subs	r2, #1
 800efa0:	0652      	lsls	r2, r2, #25
 800efa2:	4311      	orrs	r1, r2
 800efa4:	687a      	ldr	r2, [r7, #4]
 800efa6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800efa8:	0912      	lsrs	r2, r2, #4
 800efaa:	0452      	lsls	r2, r2, #17
 800efac:	430a      	orrs	r2, r1
 800efae:	4930      	ldr	r1, [pc, #192]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800efb0:	4313      	orrs	r3, r2
 800efb2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800efb4:	4b2e      	ldr	r3, [pc, #184]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	4a2d      	ldr	r2, [pc, #180]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800efba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800efbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800efc0:	4b2b      	ldr	r3, [pc, #172]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800efc2:	68db      	ldr	r3, [r3, #12]
 800efc4:	4a2a      	ldr	r2, [pc, #168]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800efc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800efca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800efcc:	f7fb f81c 	bl	800a008 <HAL_GetTick>
 800efd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800efd2:	e008      	b.n	800efe6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800efd4:	f7fb f818 	bl	800a008 <HAL_GetTick>
 800efd8:	4602      	mov	r2, r0
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	1ad3      	subs	r3, r2, r3
 800efde:	2b02      	cmp	r3, #2
 800efe0:	d901      	bls.n	800efe6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800efe2:	2303      	movs	r3, #3
 800efe4:	e058      	b.n	800f098 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800efe6:	4b22      	ldr	r3, [pc, #136]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d0f0      	beq.n	800efd4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800eff2:	e050      	b.n	800f096 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800eff4:	2301      	movs	r3, #1
 800eff6:	e04f      	b.n	800f098 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800eff8:	4b1d      	ldr	r3, [pc, #116]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f000:	2b00      	cmp	r3, #0
 800f002:	d148      	bne.n	800f096 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800f004:	4b1a      	ldr	r3, [pc, #104]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	4a19      	ldr	r2, [pc, #100]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800f00a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f00e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f010:	4b17      	ldr	r3, [pc, #92]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800f012:	68db      	ldr	r3, [r3, #12]
 800f014:	4a16      	ldr	r2, [pc, #88]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800f016:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f01a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f01c:	f7fa fff4 	bl	800a008 <HAL_GetTick>
 800f020:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f022:	e008      	b.n	800f036 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f024:	f7fa fff0 	bl	800a008 <HAL_GetTick>
 800f028:	4602      	mov	r2, r0
 800f02a:	693b      	ldr	r3, [r7, #16]
 800f02c:	1ad3      	subs	r3, r2, r3
 800f02e:	2b02      	cmp	r3, #2
 800f030:	d901      	bls.n	800f036 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800f032:	2303      	movs	r3, #3
 800f034:	e030      	b.n	800f098 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f036:	4b0e      	ldr	r3, [pc, #56]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d0f0      	beq.n	800f024 <HAL_RCC_OscConfig+0x734>
 800f042:	e028      	b.n	800f096 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800f044:	69bb      	ldr	r3, [r7, #24]
 800f046:	2b0c      	cmp	r3, #12
 800f048:	d023      	beq.n	800f092 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f04a:	4b09      	ldr	r3, [pc, #36]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	4a08      	ldr	r2, [pc, #32]	@ (800f070 <HAL_RCC_OscConfig+0x780>)
 800f050:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f056:	f7fa ffd7 	bl	800a008 <HAL_GetTick>
 800f05a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f05c:	e00c      	b.n	800f078 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f05e:	f7fa ffd3 	bl	800a008 <HAL_GetTick>
 800f062:	4602      	mov	r2, r0
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	1ad3      	subs	r3, r2, r3
 800f068:	2b02      	cmp	r3, #2
 800f06a:	d905      	bls.n	800f078 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800f06c:	2303      	movs	r3, #3
 800f06e:	e013      	b.n	800f098 <HAL_RCC_OscConfig+0x7a8>
 800f070:	40021000 	.word	0x40021000
 800f074:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f078:	4b09      	ldr	r3, [pc, #36]	@ (800f0a0 <HAL_RCC_OscConfig+0x7b0>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f080:	2b00      	cmp	r3, #0
 800f082:	d1ec      	bne.n	800f05e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800f084:	4b06      	ldr	r3, [pc, #24]	@ (800f0a0 <HAL_RCC_OscConfig+0x7b0>)
 800f086:	68da      	ldr	r2, [r3, #12]
 800f088:	4905      	ldr	r1, [pc, #20]	@ (800f0a0 <HAL_RCC_OscConfig+0x7b0>)
 800f08a:	4b06      	ldr	r3, [pc, #24]	@ (800f0a4 <HAL_RCC_OscConfig+0x7b4>)
 800f08c:	4013      	ands	r3, r2
 800f08e:	60cb      	str	r3, [r1, #12]
 800f090:	e001      	b.n	800f096 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800f092:	2301      	movs	r3, #1
 800f094:	e000      	b.n	800f098 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800f096:	2300      	movs	r3, #0
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3720      	adds	r7, #32
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}
 800f0a0:	40021000 	.word	0x40021000
 800f0a4:	feeefffc 	.word	0xfeeefffc

0800f0a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b084      	sub	sp, #16
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
 800f0b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d101      	bne.n	800f0bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	e0e7      	b.n	800f28c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f0bc:	4b75      	ldr	r3, [pc, #468]	@ (800f294 <HAL_RCC_ClockConfig+0x1ec>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	f003 0307 	and.w	r3, r3, #7
 800f0c4:	683a      	ldr	r2, [r7, #0]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d910      	bls.n	800f0ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f0ca:	4b72      	ldr	r3, [pc, #456]	@ (800f294 <HAL_RCC_ClockConfig+0x1ec>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	f023 0207 	bic.w	r2, r3, #7
 800f0d2:	4970      	ldr	r1, [pc, #448]	@ (800f294 <HAL_RCC_ClockConfig+0x1ec>)
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	4313      	orrs	r3, r2
 800f0d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f0da:	4b6e      	ldr	r3, [pc, #440]	@ (800f294 <HAL_RCC_ClockConfig+0x1ec>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	f003 0307 	and.w	r3, r3, #7
 800f0e2:	683a      	ldr	r2, [r7, #0]
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	d001      	beq.n	800f0ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	e0cf      	b.n	800f28c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	f003 0302 	and.w	r3, r3, #2
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d010      	beq.n	800f11a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	689a      	ldr	r2, [r3, #8]
 800f0fc:	4b66      	ldr	r3, [pc, #408]	@ (800f298 <HAL_RCC_ClockConfig+0x1f0>)
 800f0fe:	689b      	ldr	r3, [r3, #8]
 800f100:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f104:	429a      	cmp	r2, r3
 800f106:	d908      	bls.n	800f11a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f108:	4b63      	ldr	r3, [pc, #396]	@ (800f298 <HAL_RCC_ClockConfig+0x1f0>)
 800f10a:	689b      	ldr	r3, [r3, #8]
 800f10c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	689b      	ldr	r3, [r3, #8]
 800f114:	4960      	ldr	r1, [pc, #384]	@ (800f298 <HAL_RCC_ClockConfig+0x1f0>)
 800f116:	4313      	orrs	r3, r2
 800f118:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	f003 0301 	and.w	r3, r3, #1
 800f122:	2b00      	cmp	r3, #0
 800f124:	d04c      	beq.n	800f1c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	685b      	ldr	r3, [r3, #4]
 800f12a:	2b03      	cmp	r3, #3
 800f12c:	d107      	bne.n	800f13e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f12e:	4b5a      	ldr	r3, [pc, #360]	@ (800f298 <HAL_RCC_ClockConfig+0x1f0>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f136:	2b00      	cmp	r3, #0
 800f138:	d121      	bne.n	800f17e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800f13a:	2301      	movs	r3, #1
 800f13c:	e0a6      	b.n	800f28c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	685b      	ldr	r3, [r3, #4]
 800f142:	2b02      	cmp	r3, #2
 800f144:	d107      	bne.n	800f156 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f146:	4b54      	ldr	r3, [pc, #336]	@ (800f298 <HAL_RCC_ClockConfig+0x1f0>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d115      	bne.n	800f17e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800f152:	2301      	movs	r3, #1
 800f154:	e09a      	b.n	800f28c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d107      	bne.n	800f16e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f15e:	4b4e      	ldr	r3, [pc, #312]	@ (800f298 <HAL_RCC_ClockConfig+0x1f0>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	f003 0302 	and.w	r3, r3, #2
 800f166:	2b00      	cmp	r3, #0
 800f168:	d109      	bne.n	800f17e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800f16a:	2301      	movs	r3, #1
 800f16c:	e08e      	b.n	800f28c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f16e:	4b4a      	ldr	r3, [pc, #296]	@ (800f298 <HAL_RCC_ClockConfig+0x1f0>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f176:	2b00      	cmp	r3, #0
 800f178:	d101      	bne.n	800f17e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800f17a:	2301      	movs	r3, #1
 800f17c:	e086      	b.n	800f28c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f17e:	4b46      	ldr	r3, [pc, #280]	@ (800f298 <HAL_RCC_ClockConfig+0x1f0>)
 800f180:	689b      	ldr	r3, [r3, #8]
 800f182:	f023 0203 	bic.w	r2, r3, #3
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	685b      	ldr	r3, [r3, #4]
 800f18a:	4943      	ldr	r1, [pc, #268]	@ (800f298 <HAL_RCC_ClockConfig+0x1f0>)
 800f18c:	4313      	orrs	r3, r2
 800f18e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f190:	f7fa ff3a 	bl	800a008 <HAL_GetTick>
 800f194:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f196:	e00a      	b.n	800f1ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f198:	f7fa ff36 	bl	800a008 <HAL_GetTick>
 800f19c:	4602      	mov	r2, r0
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	1ad3      	subs	r3, r2, r3
 800f1a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f1a6:	4293      	cmp	r3, r2
 800f1a8:	d901      	bls.n	800f1ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800f1aa:	2303      	movs	r3, #3
 800f1ac:	e06e      	b.n	800f28c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f1ae:	4b3a      	ldr	r3, [pc, #232]	@ (800f298 <HAL_RCC_ClockConfig+0x1f0>)
 800f1b0:	689b      	ldr	r3, [r3, #8]
 800f1b2:	f003 020c 	and.w	r2, r3, #12
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	685b      	ldr	r3, [r3, #4]
 800f1ba:	009b      	lsls	r3, r3, #2
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	d1eb      	bne.n	800f198 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	f003 0302 	and.w	r3, r3, #2
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d010      	beq.n	800f1ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	689a      	ldr	r2, [r3, #8]
 800f1d0:	4b31      	ldr	r3, [pc, #196]	@ (800f298 <HAL_RCC_ClockConfig+0x1f0>)
 800f1d2:	689b      	ldr	r3, [r3, #8]
 800f1d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	d208      	bcs.n	800f1ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f1dc:	4b2e      	ldr	r3, [pc, #184]	@ (800f298 <HAL_RCC_ClockConfig+0x1f0>)
 800f1de:	689b      	ldr	r3, [r3, #8]
 800f1e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	689b      	ldr	r3, [r3, #8]
 800f1e8:	492b      	ldr	r1, [pc, #172]	@ (800f298 <HAL_RCC_ClockConfig+0x1f0>)
 800f1ea:	4313      	orrs	r3, r2
 800f1ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f1ee:	4b29      	ldr	r3, [pc, #164]	@ (800f294 <HAL_RCC_ClockConfig+0x1ec>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	f003 0307 	and.w	r3, r3, #7
 800f1f6:	683a      	ldr	r2, [r7, #0]
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	d210      	bcs.n	800f21e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f1fc:	4b25      	ldr	r3, [pc, #148]	@ (800f294 <HAL_RCC_ClockConfig+0x1ec>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	f023 0207 	bic.w	r2, r3, #7
 800f204:	4923      	ldr	r1, [pc, #140]	@ (800f294 <HAL_RCC_ClockConfig+0x1ec>)
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	4313      	orrs	r3, r2
 800f20a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f20c:	4b21      	ldr	r3, [pc, #132]	@ (800f294 <HAL_RCC_ClockConfig+0x1ec>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	f003 0307 	and.w	r3, r3, #7
 800f214:	683a      	ldr	r2, [r7, #0]
 800f216:	429a      	cmp	r2, r3
 800f218:	d001      	beq.n	800f21e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800f21a:	2301      	movs	r3, #1
 800f21c:	e036      	b.n	800f28c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	f003 0304 	and.w	r3, r3, #4
 800f226:	2b00      	cmp	r3, #0
 800f228:	d008      	beq.n	800f23c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f22a:	4b1b      	ldr	r3, [pc, #108]	@ (800f298 <HAL_RCC_ClockConfig+0x1f0>)
 800f22c:	689b      	ldr	r3, [r3, #8]
 800f22e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	68db      	ldr	r3, [r3, #12]
 800f236:	4918      	ldr	r1, [pc, #96]	@ (800f298 <HAL_RCC_ClockConfig+0x1f0>)
 800f238:	4313      	orrs	r3, r2
 800f23a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	f003 0308 	and.w	r3, r3, #8
 800f244:	2b00      	cmp	r3, #0
 800f246:	d009      	beq.n	800f25c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f248:	4b13      	ldr	r3, [pc, #76]	@ (800f298 <HAL_RCC_ClockConfig+0x1f0>)
 800f24a:	689b      	ldr	r3, [r3, #8]
 800f24c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	691b      	ldr	r3, [r3, #16]
 800f254:	00db      	lsls	r3, r3, #3
 800f256:	4910      	ldr	r1, [pc, #64]	@ (800f298 <HAL_RCC_ClockConfig+0x1f0>)
 800f258:	4313      	orrs	r3, r2
 800f25a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800f25c:	f000 f824 	bl	800f2a8 <HAL_RCC_GetSysClockFreq>
 800f260:	4602      	mov	r2, r0
 800f262:	4b0d      	ldr	r3, [pc, #52]	@ (800f298 <HAL_RCC_ClockConfig+0x1f0>)
 800f264:	689b      	ldr	r3, [r3, #8]
 800f266:	091b      	lsrs	r3, r3, #4
 800f268:	f003 030f 	and.w	r3, r3, #15
 800f26c:	490b      	ldr	r1, [pc, #44]	@ (800f29c <HAL_RCC_ClockConfig+0x1f4>)
 800f26e:	5ccb      	ldrb	r3, [r1, r3]
 800f270:	f003 031f 	and.w	r3, r3, #31
 800f274:	fa22 f303 	lsr.w	r3, r2, r3
 800f278:	4a09      	ldr	r2, [pc, #36]	@ (800f2a0 <HAL_RCC_ClockConfig+0x1f8>)
 800f27a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800f27c:	4b09      	ldr	r3, [pc, #36]	@ (800f2a4 <HAL_RCC_ClockConfig+0x1fc>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	4618      	mov	r0, r3
 800f282:	f7fa fe71 	bl	8009f68 <HAL_InitTick>
 800f286:	4603      	mov	r3, r0
 800f288:	72fb      	strb	r3, [r7, #11]

  return status;
 800f28a:	7afb      	ldrb	r3, [r7, #11]
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3710      	adds	r7, #16
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}
 800f294:	40022000 	.word	0x40022000
 800f298:	40021000 	.word	0x40021000
 800f29c:	08016800 	.word	0x08016800
 800f2a0:	20000168 	.word	0x20000168
 800f2a4:	20000174 	.word	0x20000174

0800f2a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f2a8:	b480      	push	{r7}
 800f2aa:	b089      	sub	sp, #36	@ 0x24
 800f2ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	61fb      	str	r3, [r7, #28]
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f2b6:	4b3e      	ldr	r3, [pc, #248]	@ (800f3b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800f2b8:	689b      	ldr	r3, [r3, #8]
 800f2ba:	f003 030c 	and.w	r3, r3, #12
 800f2be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f2c0:	4b3b      	ldr	r3, [pc, #236]	@ (800f3b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800f2c2:	68db      	ldr	r3, [r3, #12]
 800f2c4:	f003 0303 	and.w	r3, r3, #3
 800f2c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800f2ca:	693b      	ldr	r3, [r7, #16]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d005      	beq.n	800f2dc <HAL_RCC_GetSysClockFreq+0x34>
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	2b0c      	cmp	r3, #12
 800f2d4:	d121      	bne.n	800f31a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	2b01      	cmp	r3, #1
 800f2da:	d11e      	bne.n	800f31a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800f2dc:	4b34      	ldr	r3, [pc, #208]	@ (800f3b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f003 0308 	and.w	r3, r3, #8
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d107      	bne.n	800f2f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800f2e8:	4b31      	ldr	r3, [pc, #196]	@ (800f3b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800f2ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f2ee:	0a1b      	lsrs	r3, r3, #8
 800f2f0:	f003 030f 	and.w	r3, r3, #15
 800f2f4:	61fb      	str	r3, [r7, #28]
 800f2f6:	e005      	b.n	800f304 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800f2f8:	4b2d      	ldr	r3, [pc, #180]	@ (800f3b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	091b      	lsrs	r3, r3, #4
 800f2fe:	f003 030f 	and.w	r3, r3, #15
 800f302:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800f304:	4a2b      	ldr	r2, [pc, #172]	@ (800f3b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800f306:	69fb      	ldr	r3, [r7, #28]
 800f308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f30c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f30e:	693b      	ldr	r3, [r7, #16]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d10d      	bne.n	800f330 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800f314:	69fb      	ldr	r3, [r7, #28]
 800f316:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f318:	e00a      	b.n	800f330 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800f31a:	693b      	ldr	r3, [r7, #16]
 800f31c:	2b04      	cmp	r3, #4
 800f31e:	d102      	bne.n	800f326 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800f320:	4b25      	ldr	r3, [pc, #148]	@ (800f3b8 <HAL_RCC_GetSysClockFreq+0x110>)
 800f322:	61bb      	str	r3, [r7, #24]
 800f324:	e004      	b.n	800f330 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	2b08      	cmp	r3, #8
 800f32a:	d101      	bne.n	800f330 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800f32c:	4b23      	ldr	r3, [pc, #140]	@ (800f3bc <HAL_RCC_GetSysClockFreq+0x114>)
 800f32e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800f330:	693b      	ldr	r3, [r7, #16]
 800f332:	2b0c      	cmp	r3, #12
 800f334:	d134      	bne.n	800f3a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800f336:	4b1e      	ldr	r3, [pc, #120]	@ (800f3b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800f338:	68db      	ldr	r3, [r3, #12]
 800f33a:	f003 0303 	and.w	r3, r3, #3
 800f33e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	2b02      	cmp	r3, #2
 800f344:	d003      	beq.n	800f34e <HAL_RCC_GetSysClockFreq+0xa6>
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	2b03      	cmp	r3, #3
 800f34a:	d003      	beq.n	800f354 <HAL_RCC_GetSysClockFreq+0xac>
 800f34c:	e005      	b.n	800f35a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800f34e:	4b1a      	ldr	r3, [pc, #104]	@ (800f3b8 <HAL_RCC_GetSysClockFreq+0x110>)
 800f350:	617b      	str	r3, [r7, #20]
      break;
 800f352:	e005      	b.n	800f360 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800f354:	4b19      	ldr	r3, [pc, #100]	@ (800f3bc <HAL_RCC_GetSysClockFreq+0x114>)
 800f356:	617b      	str	r3, [r7, #20]
      break;
 800f358:	e002      	b.n	800f360 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800f35a:	69fb      	ldr	r3, [r7, #28]
 800f35c:	617b      	str	r3, [r7, #20]
      break;
 800f35e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800f360:	4b13      	ldr	r3, [pc, #76]	@ (800f3b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800f362:	68db      	ldr	r3, [r3, #12]
 800f364:	091b      	lsrs	r3, r3, #4
 800f366:	f003 0307 	and.w	r3, r3, #7
 800f36a:	3301      	adds	r3, #1
 800f36c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800f36e:	4b10      	ldr	r3, [pc, #64]	@ (800f3b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800f370:	68db      	ldr	r3, [r3, #12]
 800f372:	0a1b      	lsrs	r3, r3, #8
 800f374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f378:	697a      	ldr	r2, [r7, #20]
 800f37a:	fb03 f202 	mul.w	r2, r3, r2
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	fbb2 f3f3 	udiv	r3, r2, r3
 800f384:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800f386:	4b0a      	ldr	r3, [pc, #40]	@ (800f3b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800f388:	68db      	ldr	r3, [r3, #12]
 800f38a:	0e5b      	lsrs	r3, r3, #25
 800f38c:	f003 0303 	and.w	r3, r3, #3
 800f390:	3301      	adds	r3, #1
 800f392:	005b      	lsls	r3, r3, #1
 800f394:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800f396:	697a      	ldr	r2, [r7, #20]
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f39e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800f3a0:	69bb      	ldr	r3, [r7, #24]
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	3724      	adds	r7, #36	@ 0x24
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ac:	4770      	bx	lr
 800f3ae:	bf00      	nop
 800f3b0:	40021000 	.word	0x40021000
 800f3b4:	08016818 	.word	0x08016818
 800f3b8:	00f42400 	.word	0x00f42400
 800f3bc:	007a1200 	.word	0x007a1200

0800f3c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f3c0:	b480      	push	{r7}
 800f3c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f3c4:	4b03      	ldr	r3, [pc, #12]	@ (800f3d4 <HAL_RCC_GetHCLKFreq+0x14>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d0:	4770      	bx	lr
 800f3d2:	bf00      	nop
 800f3d4:	20000168 	.word	0x20000168

0800f3d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800f3dc:	f7ff fff0 	bl	800f3c0 <HAL_RCC_GetHCLKFreq>
 800f3e0:	4602      	mov	r2, r0
 800f3e2:	4b06      	ldr	r3, [pc, #24]	@ (800f3fc <HAL_RCC_GetPCLK1Freq+0x24>)
 800f3e4:	689b      	ldr	r3, [r3, #8]
 800f3e6:	0a1b      	lsrs	r3, r3, #8
 800f3e8:	f003 0307 	and.w	r3, r3, #7
 800f3ec:	4904      	ldr	r1, [pc, #16]	@ (800f400 <HAL_RCC_GetPCLK1Freq+0x28>)
 800f3ee:	5ccb      	ldrb	r3, [r1, r3]
 800f3f0:	f003 031f 	and.w	r3, r3, #31
 800f3f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	bd80      	pop	{r7, pc}
 800f3fc:	40021000 	.word	0x40021000
 800f400:	08016810 	.word	0x08016810

0800f404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800f408:	f7ff ffda 	bl	800f3c0 <HAL_RCC_GetHCLKFreq>
 800f40c:	4602      	mov	r2, r0
 800f40e:	4b06      	ldr	r3, [pc, #24]	@ (800f428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f410:	689b      	ldr	r3, [r3, #8]
 800f412:	0adb      	lsrs	r3, r3, #11
 800f414:	f003 0307 	and.w	r3, r3, #7
 800f418:	4904      	ldr	r1, [pc, #16]	@ (800f42c <HAL_RCC_GetPCLK2Freq+0x28>)
 800f41a:	5ccb      	ldrb	r3, [r1, r3]
 800f41c:	f003 031f 	and.w	r3, r3, #31
 800f420:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f424:	4618      	mov	r0, r3
 800f426:	bd80      	pop	{r7, pc}
 800f428:	40021000 	.word	0x40021000
 800f42c:	08016810 	.word	0x08016810

0800f430 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b086      	sub	sp, #24
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800f438:	2300      	movs	r3, #0
 800f43a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800f43c:	4b2a      	ldr	r3, [pc, #168]	@ (800f4e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f43e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f444:	2b00      	cmp	r3, #0
 800f446:	d003      	beq.n	800f450 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800f448:	f7fe fd8c 	bl	800df64 <HAL_PWREx_GetVoltageRange>
 800f44c:	6178      	str	r0, [r7, #20]
 800f44e:	e014      	b.n	800f47a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800f450:	4b25      	ldr	r3, [pc, #148]	@ (800f4e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f454:	4a24      	ldr	r2, [pc, #144]	@ (800f4e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f45a:	6593      	str	r3, [r2, #88]	@ 0x58
 800f45c:	4b22      	ldr	r3, [pc, #136]	@ (800f4e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f45e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f460:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f464:	60fb      	str	r3, [r7, #12]
 800f466:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800f468:	f7fe fd7c 	bl	800df64 <HAL_PWREx_GetVoltageRange>
 800f46c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800f46e:	4b1e      	ldr	r3, [pc, #120]	@ (800f4e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f472:	4a1d      	ldr	r2, [pc, #116]	@ (800f4e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f474:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f478:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800f47a:	697b      	ldr	r3, [r7, #20]
 800f47c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f480:	d10b      	bne.n	800f49a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2b80      	cmp	r3, #128	@ 0x80
 800f486:	d919      	bls.n	800f4bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2ba0      	cmp	r3, #160	@ 0xa0
 800f48c:	d902      	bls.n	800f494 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800f48e:	2302      	movs	r3, #2
 800f490:	613b      	str	r3, [r7, #16]
 800f492:	e013      	b.n	800f4bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800f494:	2301      	movs	r3, #1
 800f496:	613b      	str	r3, [r7, #16]
 800f498:	e010      	b.n	800f4bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2b80      	cmp	r3, #128	@ 0x80
 800f49e:	d902      	bls.n	800f4a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800f4a0:	2303      	movs	r3, #3
 800f4a2:	613b      	str	r3, [r7, #16]
 800f4a4:	e00a      	b.n	800f4bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2b80      	cmp	r3, #128	@ 0x80
 800f4aa:	d102      	bne.n	800f4b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800f4ac:	2302      	movs	r3, #2
 800f4ae:	613b      	str	r3, [r7, #16]
 800f4b0:	e004      	b.n	800f4bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2b70      	cmp	r3, #112	@ 0x70
 800f4b6:	d101      	bne.n	800f4bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800f4bc:	4b0b      	ldr	r3, [pc, #44]	@ (800f4ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	f023 0207 	bic.w	r2, r3, #7
 800f4c4:	4909      	ldr	r1, [pc, #36]	@ (800f4ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	4313      	orrs	r3, r2
 800f4ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800f4cc:	4b07      	ldr	r3, [pc, #28]	@ (800f4ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	f003 0307 	and.w	r3, r3, #7
 800f4d4:	693a      	ldr	r2, [r7, #16]
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	d001      	beq.n	800f4de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800f4da:	2301      	movs	r3, #1
 800f4dc:	e000      	b.n	800f4e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800f4de:	2300      	movs	r3, #0
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3718      	adds	r7, #24
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}
 800f4e8:	40021000 	.word	0x40021000
 800f4ec:	40022000 	.word	0x40022000

0800f4f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b086      	sub	sp, #24
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d041      	beq.n	800f590 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f510:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800f514:	d02a      	beq.n	800f56c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800f516:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800f51a:	d824      	bhi.n	800f566 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800f51c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f520:	d008      	beq.n	800f534 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800f522:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f526:	d81e      	bhi.n	800f566 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d00a      	beq.n	800f542 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800f52c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f530:	d010      	beq.n	800f554 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f532:	e018      	b.n	800f566 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800f534:	4b86      	ldr	r3, [pc, #536]	@ (800f750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f536:	68db      	ldr	r3, [r3, #12]
 800f538:	4a85      	ldr	r2, [pc, #532]	@ (800f750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f53a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f53e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800f540:	e015      	b.n	800f56e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	3304      	adds	r3, #4
 800f546:	2100      	movs	r1, #0
 800f548:	4618      	mov	r0, r3
 800f54a:	f000 fabb 	bl	800fac4 <RCCEx_PLLSAI1_Config>
 800f54e:	4603      	mov	r3, r0
 800f550:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800f552:	e00c      	b.n	800f56e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	3320      	adds	r3, #32
 800f558:	2100      	movs	r1, #0
 800f55a:	4618      	mov	r0, r3
 800f55c:	f000 fba6 	bl	800fcac <RCCEx_PLLSAI2_Config>
 800f560:	4603      	mov	r3, r0
 800f562:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800f564:	e003      	b.n	800f56e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f566:	2301      	movs	r3, #1
 800f568:	74fb      	strb	r3, [r7, #19]
      break;
 800f56a:	e000      	b.n	800f56e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800f56c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f56e:	7cfb      	ldrb	r3, [r7, #19]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d10b      	bne.n	800f58c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f574:	4b76      	ldr	r3, [pc, #472]	@ (800f750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f57a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f582:	4973      	ldr	r1, [pc, #460]	@ (800f750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f584:	4313      	orrs	r3, r2
 800f586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800f58a:	e001      	b.n	800f590 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f58c:	7cfb      	ldrb	r3, [r7, #19]
 800f58e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d041      	beq.n	800f620 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f5a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f5a4:	d02a      	beq.n	800f5fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800f5a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f5aa:	d824      	bhi.n	800f5f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800f5ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f5b0:	d008      	beq.n	800f5c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800f5b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f5b6:	d81e      	bhi.n	800f5f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d00a      	beq.n	800f5d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800f5bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f5c0:	d010      	beq.n	800f5e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800f5c2:	e018      	b.n	800f5f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800f5c4:	4b62      	ldr	r3, [pc, #392]	@ (800f750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f5c6:	68db      	ldr	r3, [r3, #12]
 800f5c8:	4a61      	ldr	r2, [pc, #388]	@ (800f750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f5ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f5ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800f5d0:	e015      	b.n	800f5fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	3304      	adds	r3, #4
 800f5d6:	2100      	movs	r1, #0
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f000 fa73 	bl	800fac4 <RCCEx_PLLSAI1_Config>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800f5e2:	e00c      	b.n	800f5fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	3320      	adds	r3, #32
 800f5e8:	2100      	movs	r1, #0
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f000 fb5e 	bl	800fcac <RCCEx_PLLSAI2_Config>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800f5f4:	e003      	b.n	800f5fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	74fb      	strb	r3, [r7, #19]
      break;
 800f5fa:	e000      	b.n	800f5fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800f5fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f5fe:	7cfb      	ldrb	r3, [r7, #19]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d10b      	bne.n	800f61c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800f604:	4b52      	ldr	r3, [pc, #328]	@ (800f750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f60a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f612:	494f      	ldr	r1, [pc, #316]	@ (800f750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f614:	4313      	orrs	r3, r2
 800f616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800f61a:	e001      	b.n	800f620 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f61c:	7cfb      	ldrb	r3, [r7, #19]
 800f61e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f628:	2b00      	cmp	r3, #0
 800f62a:	f000 80a0 	beq.w	800f76e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f62e:	2300      	movs	r3, #0
 800f630:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800f632:	4b47      	ldr	r3, [pc, #284]	@ (800f750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d101      	bne.n	800f642 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800f63e:	2301      	movs	r3, #1
 800f640:	e000      	b.n	800f644 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800f642:	2300      	movs	r3, #0
 800f644:	2b00      	cmp	r3, #0
 800f646:	d00d      	beq.n	800f664 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f648:	4b41      	ldr	r3, [pc, #260]	@ (800f750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f64a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f64c:	4a40      	ldr	r2, [pc, #256]	@ (800f750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f64e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f652:	6593      	str	r3, [r2, #88]	@ 0x58
 800f654:	4b3e      	ldr	r3, [pc, #248]	@ (800f750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f65c:	60bb      	str	r3, [r7, #8]
 800f65e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f660:	2301      	movs	r3, #1
 800f662:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f664:	4b3b      	ldr	r3, [pc, #236]	@ (800f754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	4a3a      	ldr	r2, [pc, #232]	@ (800f754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800f66a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f66e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f670:	f7fa fcca 	bl	800a008 <HAL_GetTick>
 800f674:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800f676:	e009      	b.n	800f68c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f678:	f7fa fcc6 	bl	800a008 <HAL_GetTick>
 800f67c:	4602      	mov	r2, r0
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	1ad3      	subs	r3, r2, r3
 800f682:	2b02      	cmp	r3, #2
 800f684:	d902      	bls.n	800f68c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800f686:	2303      	movs	r3, #3
 800f688:	74fb      	strb	r3, [r7, #19]
        break;
 800f68a:	e005      	b.n	800f698 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800f68c:	4b31      	ldr	r3, [pc, #196]	@ (800f754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f694:	2b00      	cmp	r3, #0
 800f696:	d0ef      	beq.n	800f678 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800f698:	7cfb      	ldrb	r3, [r7, #19]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d15c      	bne.n	800f758 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800f69e:	4b2c      	ldr	r3, [pc, #176]	@ (800f750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f6a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f6a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f6a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d01f      	beq.n	800f6f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f6b6:	697a      	ldr	r2, [r7, #20]
 800f6b8:	429a      	cmp	r2, r3
 800f6ba:	d019      	beq.n	800f6f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800f6bc:	4b24      	ldr	r3, [pc, #144]	@ (800f750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f6be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f6c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f6c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f6c8:	4b21      	ldr	r3, [pc, #132]	@ (800f750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f6ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f6ce:	4a20      	ldr	r2, [pc, #128]	@ (800f750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f6d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f6d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f6d8:	4b1d      	ldr	r3, [pc, #116]	@ (800f750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f6da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f6de:	4a1c      	ldr	r2, [pc, #112]	@ (800f750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f6e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f6e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800f6e8:	4a19      	ldr	r2, [pc, #100]	@ (800f750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800f6f0:	697b      	ldr	r3, [r7, #20]
 800f6f2:	f003 0301 	and.w	r3, r3, #1
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d016      	beq.n	800f728 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f6fa:	f7fa fc85 	bl	800a008 <HAL_GetTick>
 800f6fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f700:	e00b      	b.n	800f71a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f702:	f7fa fc81 	bl	800a008 <HAL_GetTick>
 800f706:	4602      	mov	r2, r0
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	1ad3      	subs	r3, r2, r3
 800f70c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f710:	4293      	cmp	r3, r2
 800f712:	d902      	bls.n	800f71a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800f714:	2303      	movs	r3, #3
 800f716:	74fb      	strb	r3, [r7, #19]
            break;
 800f718:	e006      	b.n	800f728 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f71a:	4b0d      	ldr	r3, [pc, #52]	@ (800f750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f71c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f720:	f003 0302 	and.w	r3, r3, #2
 800f724:	2b00      	cmp	r3, #0
 800f726:	d0ec      	beq.n	800f702 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800f728:	7cfb      	ldrb	r3, [r7, #19]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d10c      	bne.n	800f748 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f72e:	4b08      	ldr	r3, [pc, #32]	@ (800f750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f734:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f73e:	4904      	ldr	r1, [pc, #16]	@ (800f750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f740:	4313      	orrs	r3, r2
 800f742:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800f746:	e009      	b.n	800f75c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f748:	7cfb      	ldrb	r3, [r7, #19]
 800f74a:	74bb      	strb	r3, [r7, #18]
 800f74c:	e006      	b.n	800f75c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800f74e:	bf00      	nop
 800f750:	40021000 	.word	0x40021000
 800f754:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f758:	7cfb      	ldrb	r3, [r7, #19]
 800f75a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f75c:	7c7b      	ldrb	r3, [r7, #17]
 800f75e:	2b01      	cmp	r3, #1
 800f760:	d105      	bne.n	800f76e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f762:	4b9e      	ldr	r3, [pc, #632]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f766:	4a9d      	ldr	r2, [pc, #628]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f768:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f76c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	f003 0301 	and.w	r3, r3, #1
 800f776:	2b00      	cmp	r3, #0
 800f778:	d00a      	beq.n	800f790 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f77a:	4b98      	ldr	r3, [pc, #608]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f77c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f780:	f023 0203 	bic.w	r2, r3, #3
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f788:	4994      	ldr	r1, [pc, #592]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f78a:	4313      	orrs	r3, r2
 800f78c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	f003 0302 	and.w	r3, r3, #2
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d00a      	beq.n	800f7b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f79c:	4b8f      	ldr	r3, [pc, #572]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f79e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f7a2:	f023 020c 	bic.w	r2, r3, #12
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7aa:	498c      	ldr	r1, [pc, #560]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f7ac:	4313      	orrs	r3, r2
 800f7ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	f003 0304 	and.w	r3, r3, #4
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d00a      	beq.n	800f7d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800f7be:	4b87      	ldr	r3, [pc, #540]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f7c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f7c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f7cc:	4983      	ldr	r1, [pc, #524]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f7ce:	4313      	orrs	r3, r2
 800f7d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	f003 0308 	and.w	r3, r3, #8
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d00a      	beq.n	800f7f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800f7e0:	4b7e      	ldr	r3, [pc, #504]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f7e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f7e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f7ee:	497b      	ldr	r1, [pc, #492]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f7f0:	4313      	orrs	r3, r2
 800f7f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	f003 0310 	and.w	r3, r3, #16
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d00a      	beq.n	800f818 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800f802:	4b76      	ldr	r3, [pc, #472]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f808:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f810:	4972      	ldr	r1, [pc, #456]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f812:	4313      	orrs	r3, r2
 800f814:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	f003 0320 	and.w	r3, r3, #32
 800f820:	2b00      	cmp	r3, #0
 800f822:	d00a      	beq.n	800f83a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f824:	4b6d      	ldr	r3, [pc, #436]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f82a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f832:	496a      	ldr	r1, [pc, #424]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f834:	4313      	orrs	r3, r2
 800f836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f842:	2b00      	cmp	r3, #0
 800f844:	d00a      	beq.n	800f85c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f846:	4b65      	ldr	r3, [pc, #404]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f84c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f854:	4961      	ldr	r1, [pc, #388]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f856:	4313      	orrs	r3, r2
 800f858:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f864:	2b00      	cmp	r3, #0
 800f866:	d00a      	beq.n	800f87e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f868:	4b5c      	ldr	r3, [pc, #368]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f86a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f86e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f876:	4959      	ldr	r1, [pc, #356]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f878:	4313      	orrs	r3, r2
 800f87a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f886:	2b00      	cmp	r3, #0
 800f888:	d00a      	beq.n	800f8a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f88a:	4b54      	ldr	r3, [pc, #336]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f88c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f890:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f898:	4950      	ldr	r1, [pc, #320]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f89a:	4313      	orrs	r3, r2
 800f89c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d00a      	beq.n	800f8c2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800f8ac:	4b4b      	ldr	r3, [pc, #300]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f8ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f8b2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8ba:	4948      	ldr	r1, [pc, #288]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f8bc:	4313      	orrs	r3, r2
 800f8be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d00a      	beq.n	800f8e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f8ce:	4b43      	ldr	r3, [pc, #268]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f8d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f8d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f8dc:	493f      	ldr	r1, [pc, #252]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f8de:	4313      	orrs	r3, r2
 800f8e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d028      	beq.n	800f942 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f8f0:	4b3a      	ldr	r3, [pc, #232]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f8f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f8f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f8fe:	4937      	ldr	r1, [pc, #220]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f900:	4313      	orrs	r3, r2
 800f902:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f90a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f90e:	d106      	bne.n	800f91e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f910:	4b32      	ldr	r3, [pc, #200]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f912:	68db      	ldr	r3, [r3, #12]
 800f914:	4a31      	ldr	r2, [pc, #196]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f916:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f91a:	60d3      	str	r3, [r2, #12]
 800f91c:	e011      	b.n	800f942 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f922:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f926:	d10c      	bne.n	800f942 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	3304      	adds	r3, #4
 800f92c:	2101      	movs	r1, #1
 800f92e:	4618      	mov	r0, r3
 800f930:	f000 f8c8 	bl	800fac4 <RCCEx_PLLSAI1_Config>
 800f934:	4603      	mov	r3, r0
 800f936:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800f938:	7cfb      	ldrb	r3, [r7, #19]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d001      	beq.n	800f942 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800f93e:	7cfb      	ldrb	r3, [r7, #19]
 800f940:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d028      	beq.n	800f9a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800f94e:	4b23      	ldr	r3, [pc, #140]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f954:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f95c:	491f      	ldr	r1, [pc, #124]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f95e:	4313      	orrs	r3, r2
 800f960:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f968:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f96c:	d106      	bne.n	800f97c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f96e:	4b1b      	ldr	r3, [pc, #108]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f970:	68db      	ldr	r3, [r3, #12]
 800f972:	4a1a      	ldr	r2, [pc, #104]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f974:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f978:	60d3      	str	r3, [r2, #12]
 800f97a:	e011      	b.n	800f9a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f980:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f984:	d10c      	bne.n	800f9a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	3304      	adds	r3, #4
 800f98a:	2101      	movs	r1, #1
 800f98c:	4618      	mov	r0, r3
 800f98e:	f000 f899 	bl	800fac4 <RCCEx_PLLSAI1_Config>
 800f992:	4603      	mov	r3, r0
 800f994:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800f996:	7cfb      	ldrb	r3, [r7, #19]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d001      	beq.n	800f9a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800f99c:	7cfb      	ldrb	r3, [r7, #19]
 800f99e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d02b      	beq.n	800fa04 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f9ac:	4b0b      	ldr	r3, [pc, #44]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f9ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f9b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9ba:	4908      	ldr	r1, [pc, #32]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f9bc:	4313      	orrs	r3, r2
 800f9be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f9ca:	d109      	bne.n	800f9e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f9cc:	4b03      	ldr	r3, [pc, #12]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f9ce:	68db      	ldr	r3, [r3, #12]
 800f9d0:	4a02      	ldr	r2, [pc, #8]	@ (800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f9d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f9d6:	60d3      	str	r3, [r2, #12]
 800f9d8:	e014      	b.n	800fa04 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800f9da:	bf00      	nop
 800f9dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f9e8:	d10c      	bne.n	800fa04 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	3304      	adds	r3, #4
 800f9ee:	2101      	movs	r1, #1
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f000 f867 	bl	800fac4 <RCCEx_PLLSAI1_Config>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800f9fa:	7cfb      	ldrb	r3, [r7, #19]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d001      	beq.n	800fa04 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800fa00:	7cfb      	ldrb	r3, [r7, #19]
 800fa02:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d02f      	beq.n	800fa70 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800fa10:	4b2b      	ldr	r3, [pc, #172]	@ (800fac0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800fa12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fa16:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fa1e:	4928      	ldr	r1, [pc, #160]	@ (800fac0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800fa20:	4313      	orrs	r3, r2
 800fa22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fa2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fa2e:	d10d      	bne.n	800fa4c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	3304      	adds	r3, #4
 800fa34:	2102      	movs	r1, #2
 800fa36:	4618      	mov	r0, r3
 800fa38:	f000 f844 	bl	800fac4 <RCCEx_PLLSAI1_Config>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800fa40:	7cfb      	ldrb	r3, [r7, #19]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d014      	beq.n	800fa70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800fa46:	7cfb      	ldrb	r3, [r7, #19]
 800fa48:	74bb      	strb	r3, [r7, #18]
 800fa4a:	e011      	b.n	800fa70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fa50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fa54:	d10c      	bne.n	800fa70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	3320      	adds	r3, #32
 800fa5a:	2102      	movs	r1, #2
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f000 f925 	bl	800fcac <RCCEx_PLLSAI2_Config>
 800fa62:	4603      	mov	r3, r0
 800fa64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800fa66:	7cfb      	ldrb	r3, [r7, #19]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d001      	beq.n	800fa70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800fa6c:	7cfb      	ldrb	r3, [r7, #19]
 800fa6e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d00a      	beq.n	800fa92 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800fa7c:	4b10      	ldr	r3, [pc, #64]	@ (800fac0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800fa7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fa82:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fa8a:	490d      	ldr	r1, [pc, #52]	@ (800fac0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800fa8c:	4313      	orrs	r3, r2
 800fa8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d00b      	beq.n	800fab6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fa9e:	4b08      	ldr	r3, [pc, #32]	@ (800fac0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800faa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800faa4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800faae:	4904      	ldr	r1, [pc, #16]	@ (800fac0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800fab0:	4313      	orrs	r3, r2
 800fab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800fab6:	7cbb      	ldrb	r3, [r7, #18]
}
 800fab8:	4618      	mov	r0, r3
 800faba:	3718      	adds	r7, #24
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}
 800fac0:	40021000 	.word	0x40021000

0800fac4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b084      	sub	sp, #16
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800face:	2300      	movs	r3, #0
 800fad0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800fad2:	4b75      	ldr	r3, [pc, #468]	@ (800fca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800fad4:	68db      	ldr	r3, [r3, #12]
 800fad6:	f003 0303 	and.w	r3, r3, #3
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d018      	beq.n	800fb10 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800fade:	4b72      	ldr	r3, [pc, #456]	@ (800fca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800fae0:	68db      	ldr	r3, [r3, #12]
 800fae2:	f003 0203 	and.w	r2, r3, #3
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	429a      	cmp	r2, r3
 800faec:	d10d      	bne.n	800fb0a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
       ||
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d009      	beq.n	800fb0a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800faf6:	4b6c      	ldr	r3, [pc, #432]	@ (800fca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800faf8:	68db      	ldr	r3, [r3, #12]
 800fafa:	091b      	lsrs	r3, r3, #4
 800fafc:	f003 0307 	and.w	r3, r3, #7
 800fb00:	1c5a      	adds	r2, r3, #1
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	685b      	ldr	r3, [r3, #4]
       ||
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d047      	beq.n	800fb9a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800fb0a:	2301      	movs	r3, #1
 800fb0c:	73fb      	strb	r3, [r7, #15]
 800fb0e:	e044      	b.n	800fb9a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	2b03      	cmp	r3, #3
 800fb16:	d018      	beq.n	800fb4a <RCCEx_PLLSAI1_Config+0x86>
 800fb18:	2b03      	cmp	r3, #3
 800fb1a:	d825      	bhi.n	800fb68 <RCCEx_PLLSAI1_Config+0xa4>
 800fb1c:	2b01      	cmp	r3, #1
 800fb1e:	d002      	beq.n	800fb26 <RCCEx_PLLSAI1_Config+0x62>
 800fb20:	2b02      	cmp	r3, #2
 800fb22:	d009      	beq.n	800fb38 <RCCEx_PLLSAI1_Config+0x74>
 800fb24:	e020      	b.n	800fb68 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800fb26:	4b60      	ldr	r3, [pc, #384]	@ (800fca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	f003 0302 	and.w	r3, r3, #2
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d11d      	bne.n	800fb6e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800fb32:	2301      	movs	r3, #1
 800fb34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fb36:	e01a      	b.n	800fb6e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800fb38:	4b5b      	ldr	r3, [pc, #364]	@ (800fca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d116      	bne.n	800fb72 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800fb44:	2301      	movs	r3, #1
 800fb46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fb48:	e013      	b.n	800fb72 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800fb4a:	4b57      	ldr	r3, [pc, #348]	@ (800fca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d10f      	bne.n	800fb76 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800fb56:	4b54      	ldr	r3, [pc, #336]	@ (800fca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d109      	bne.n	800fb76 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800fb62:	2301      	movs	r3, #1
 800fb64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800fb66:	e006      	b.n	800fb76 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800fb68:	2301      	movs	r3, #1
 800fb6a:	73fb      	strb	r3, [r7, #15]
      break;
 800fb6c:	e004      	b.n	800fb78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800fb6e:	bf00      	nop
 800fb70:	e002      	b.n	800fb78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800fb72:	bf00      	nop
 800fb74:	e000      	b.n	800fb78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800fb76:	bf00      	nop
    }

    if(status == HAL_OK)
 800fb78:	7bfb      	ldrb	r3, [r7, #15]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d10d      	bne.n	800fb9a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800fb7e:	4b4a      	ldr	r3, [pc, #296]	@ (800fca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800fb80:	68db      	ldr	r3, [r3, #12]
 800fb82:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6819      	ldr	r1, [r3, #0]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	685b      	ldr	r3, [r3, #4]
 800fb8e:	3b01      	subs	r3, #1
 800fb90:	011b      	lsls	r3, r3, #4
 800fb92:	430b      	orrs	r3, r1
 800fb94:	4944      	ldr	r1, [pc, #272]	@ (800fca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800fb96:	4313      	orrs	r3, r2
 800fb98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800fb9a:	7bfb      	ldrb	r3, [r7, #15]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d17d      	bne.n	800fc9c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800fba0:	4b41      	ldr	r3, [pc, #260]	@ (800fca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	4a40      	ldr	r2, [pc, #256]	@ (800fca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800fba6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fbaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fbac:	f7fa fa2c 	bl	800a008 <HAL_GetTick>
 800fbb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800fbb2:	e009      	b.n	800fbc8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fbb4:	f7fa fa28 	bl	800a008 <HAL_GetTick>
 800fbb8:	4602      	mov	r2, r0
 800fbba:	68bb      	ldr	r3, [r7, #8]
 800fbbc:	1ad3      	subs	r3, r2, r3
 800fbbe:	2b02      	cmp	r3, #2
 800fbc0:	d902      	bls.n	800fbc8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800fbc2:	2303      	movs	r3, #3
 800fbc4:	73fb      	strb	r3, [r7, #15]
        break;
 800fbc6:	e005      	b.n	800fbd4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800fbc8:	4b37      	ldr	r3, [pc, #220]	@ (800fca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d1ef      	bne.n	800fbb4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800fbd4:	7bfb      	ldrb	r3, [r7, #15]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d160      	bne.n	800fc9c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d111      	bne.n	800fc04 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800fbe0:	4b31      	ldr	r3, [pc, #196]	@ (800fca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800fbe2:	691b      	ldr	r3, [r3, #16]
 800fbe4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800fbe8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fbec:	687a      	ldr	r2, [r7, #4]
 800fbee:	6892      	ldr	r2, [r2, #8]
 800fbf0:	0211      	lsls	r1, r2, #8
 800fbf2:	687a      	ldr	r2, [r7, #4]
 800fbf4:	68d2      	ldr	r2, [r2, #12]
 800fbf6:	0912      	lsrs	r2, r2, #4
 800fbf8:	0452      	lsls	r2, r2, #17
 800fbfa:	430a      	orrs	r2, r1
 800fbfc:	492a      	ldr	r1, [pc, #168]	@ (800fca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800fbfe:	4313      	orrs	r3, r2
 800fc00:	610b      	str	r3, [r1, #16]
 800fc02:	e027      	b.n	800fc54 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	2b01      	cmp	r3, #1
 800fc08:	d112      	bne.n	800fc30 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800fc0a:	4b27      	ldr	r3, [pc, #156]	@ (800fca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800fc0c:	691b      	ldr	r3, [r3, #16]
 800fc0e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800fc12:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800fc16:	687a      	ldr	r2, [r7, #4]
 800fc18:	6892      	ldr	r2, [r2, #8]
 800fc1a:	0211      	lsls	r1, r2, #8
 800fc1c:	687a      	ldr	r2, [r7, #4]
 800fc1e:	6912      	ldr	r2, [r2, #16]
 800fc20:	0852      	lsrs	r2, r2, #1
 800fc22:	3a01      	subs	r2, #1
 800fc24:	0552      	lsls	r2, r2, #21
 800fc26:	430a      	orrs	r2, r1
 800fc28:	491f      	ldr	r1, [pc, #124]	@ (800fca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800fc2a:	4313      	orrs	r3, r2
 800fc2c:	610b      	str	r3, [r1, #16]
 800fc2e:	e011      	b.n	800fc54 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800fc30:	4b1d      	ldr	r3, [pc, #116]	@ (800fca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800fc32:	691b      	ldr	r3, [r3, #16]
 800fc34:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800fc38:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800fc3c:	687a      	ldr	r2, [r7, #4]
 800fc3e:	6892      	ldr	r2, [r2, #8]
 800fc40:	0211      	lsls	r1, r2, #8
 800fc42:	687a      	ldr	r2, [r7, #4]
 800fc44:	6952      	ldr	r2, [r2, #20]
 800fc46:	0852      	lsrs	r2, r2, #1
 800fc48:	3a01      	subs	r2, #1
 800fc4a:	0652      	lsls	r2, r2, #25
 800fc4c:	430a      	orrs	r2, r1
 800fc4e:	4916      	ldr	r1, [pc, #88]	@ (800fca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800fc50:	4313      	orrs	r3, r2
 800fc52:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800fc54:	4b14      	ldr	r3, [pc, #80]	@ (800fca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	4a13      	ldr	r2, [pc, #76]	@ (800fca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800fc5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800fc5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fc60:	f7fa f9d2 	bl	800a008 <HAL_GetTick>
 800fc64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800fc66:	e009      	b.n	800fc7c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fc68:	f7fa f9ce 	bl	800a008 <HAL_GetTick>
 800fc6c:	4602      	mov	r2, r0
 800fc6e:	68bb      	ldr	r3, [r7, #8]
 800fc70:	1ad3      	subs	r3, r2, r3
 800fc72:	2b02      	cmp	r3, #2
 800fc74:	d902      	bls.n	800fc7c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800fc76:	2303      	movs	r3, #3
 800fc78:	73fb      	strb	r3, [r7, #15]
          break;
 800fc7a:	e005      	b.n	800fc88 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800fc7c:	4b0a      	ldr	r3, [pc, #40]	@ (800fca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d0ef      	beq.n	800fc68 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800fc88:	7bfb      	ldrb	r3, [r7, #15]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d106      	bne.n	800fc9c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800fc8e:	4b06      	ldr	r3, [pc, #24]	@ (800fca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800fc90:	691a      	ldr	r2, [r3, #16]
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	699b      	ldr	r3, [r3, #24]
 800fc96:	4904      	ldr	r1, [pc, #16]	@ (800fca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800fc98:	4313      	orrs	r3, r2
 800fc9a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800fc9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	3710      	adds	r7, #16
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}
 800fca6:	bf00      	nop
 800fca8:	40021000 	.word	0x40021000

0800fcac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b084      	sub	sp, #16
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800fcba:	4b6a      	ldr	r3, [pc, #424]	@ (800fe64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fcbc:	68db      	ldr	r3, [r3, #12]
 800fcbe:	f003 0303 	and.w	r3, r3, #3
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d018      	beq.n	800fcf8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800fcc6:	4b67      	ldr	r3, [pc, #412]	@ (800fe64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fcc8:	68db      	ldr	r3, [r3, #12]
 800fcca:	f003 0203 	and.w	r2, r3, #3
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	d10d      	bne.n	800fcf2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
       ||
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d009      	beq.n	800fcf2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800fcde:	4b61      	ldr	r3, [pc, #388]	@ (800fe64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fce0:	68db      	ldr	r3, [r3, #12]
 800fce2:	091b      	lsrs	r3, r3, #4
 800fce4:	f003 0307 	and.w	r3, r3, #7
 800fce8:	1c5a      	adds	r2, r3, #1
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	685b      	ldr	r3, [r3, #4]
       ||
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d047      	beq.n	800fd82 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800fcf2:	2301      	movs	r3, #1
 800fcf4:	73fb      	strb	r3, [r7, #15]
 800fcf6:	e044      	b.n	800fd82 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	2b03      	cmp	r3, #3
 800fcfe:	d018      	beq.n	800fd32 <RCCEx_PLLSAI2_Config+0x86>
 800fd00:	2b03      	cmp	r3, #3
 800fd02:	d825      	bhi.n	800fd50 <RCCEx_PLLSAI2_Config+0xa4>
 800fd04:	2b01      	cmp	r3, #1
 800fd06:	d002      	beq.n	800fd0e <RCCEx_PLLSAI2_Config+0x62>
 800fd08:	2b02      	cmp	r3, #2
 800fd0a:	d009      	beq.n	800fd20 <RCCEx_PLLSAI2_Config+0x74>
 800fd0c:	e020      	b.n	800fd50 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800fd0e:	4b55      	ldr	r3, [pc, #340]	@ (800fe64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	f003 0302 	and.w	r3, r3, #2
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d11d      	bne.n	800fd56 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800fd1a:	2301      	movs	r3, #1
 800fd1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fd1e:	e01a      	b.n	800fd56 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800fd20:	4b50      	ldr	r3, [pc, #320]	@ (800fe64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d116      	bne.n	800fd5a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800fd2c:	2301      	movs	r3, #1
 800fd2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fd30:	e013      	b.n	800fd5a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800fd32:	4b4c      	ldr	r3, [pc, #304]	@ (800fe64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d10f      	bne.n	800fd5e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800fd3e:	4b49      	ldr	r3, [pc, #292]	@ (800fe64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d109      	bne.n	800fd5e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800fd4a:	2301      	movs	r3, #1
 800fd4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800fd4e:	e006      	b.n	800fd5e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800fd50:	2301      	movs	r3, #1
 800fd52:	73fb      	strb	r3, [r7, #15]
      break;
 800fd54:	e004      	b.n	800fd60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800fd56:	bf00      	nop
 800fd58:	e002      	b.n	800fd60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800fd5a:	bf00      	nop
 800fd5c:	e000      	b.n	800fd60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800fd5e:	bf00      	nop
    }

    if(status == HAL_OK)
 800fd60:	7bfb      	ldrb	r3, [r7, #15]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d10d      	bne.n	800fd82 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800fd66:	4b3f      	ldr	r3, [pc, #252]	@ (800fe64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fd68:	68db      	ldr	r3, [r3, #12]
 800fd6a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	6819      	ldr	r1, [r3, #0]
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	685b      	ldr	r3, [r3, #4]
 800fd76:	3b01      	subs	r3, #1
 800fd78:	011b      	lsls	r3, r3, #4
 800fd7a:	430b      	orrs	r3, r1
 800fd7c:	4939      	ldr	r1, [pc, #228]	@ (800fe64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fd7e:	4313      	orrs	r3, r2
 800fd80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800fd82:	7bfb      	ldrb	r3, [r7, #15]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d167      	bne.n	800fe58 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800fd88:	4b36      	ldr	r3, [pc, #216]	@ (800fe64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	4a35      	ldr	r2, [pc, #212]	@ (800fe64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fd8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fd92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fd94:	f7fa f938 	bl	800a008 <HAL_GetTick>
 800fd98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800fd9a:	e009      	b.n	800fdb0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800fd9c:	f7fa f934 	bl	800a008 <HAL_GetTick>
 800fda0:	4602      	mov	r2, r0
 800fda2:	68bb      	ldr	r3, [r7, #8]
 800fda4:	1ad3      	subs	r3, r2, r3
 800fda6:	2b02      	cmp	r3, #2
 800fda8:	d902      	bls.n	800fdb0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800fdaa:	2303      	movs	r3, #3
 800fdac:	73fb      	strb	r3, [r7, #15]
        break;
 800fdae:	e005      	b.n	800fdbc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800fdb0:	4b2c      	ldr	r3, [pc, #176]	@ (800fe64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d1ef      	bne.n	800fd9c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800fdbc:	7bfb      	ldrb	r3, [r7, #15]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d14a      	bne.n	800fe58 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800fdc2:	683b      	ldr	r3, [r7, #0]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d111      	bne.n	800fdec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800fdc8:	4b26      	ldr	r3, [pc, #152]	@ (800fe64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fdca:	695b      	ldr	r3, [r3, #20]
 800fdcc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800fdd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fdd4:	687a      	ldr	r2, [r7, #4]
 800fdd6:	6892      	ldr	r2, [r2, #8]
 800fdd8:	0211      	lsls	r1, r2, #8
 800fdda:	687a      	ldr	r2, [r7, #4]
 800fddc:	68d2      	ldr	r2, [r2, #12]
 800fdde:	0912      	lsrs	r2, r2, #4
 800fde0:	0452      	lsls	r2, r2, #17
 800fde2:	430a      	orrs	r2, r1
 800fde4:	491f      	ldr	r1, [pc, #124]	@ (800fe64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fde6:	4313      	orrs	r3, r2
 800fde8:	614b      	str	r3, [r1, #20]
 800fdea:	e011      	b.n	800fe10 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800fdec:	4b1d      	ldr	r3, [pc, #116]	@ (800fe64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fdee:	695b      	ldr	r3, [r3, #20]
 800fdf0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800fdf4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800fdf8:	687a      	ldr	r2, [r7, #4]
 800fdfa:	6892      	ldr	r2, [r2, #8]
 800fdfc:	0211      	lsls	r1, r2, #8
 800fdfe:	687a      	ldr	r2, [r7, #4]
 800fe00:	6912      	ldr	r2, [r2, #16]
 800fe02:	0852      	lsrs	r2, r2, #1
 800fe04:	3a01      	subs	r2, #1
 800fe06:	0652      	lsls	r2, r2, #25
 800fe08:	430a      	orrs	r2, r1
 800fe0a:	4916      	ldr	r1, [pc, #88]	@ (800fe64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fe0c:	4313      	orrs	r3, r2
 800fe0e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800fe10:	4b14      	ldr	r3, [pc, #80]	@ (800fe64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	4a13      	ldr	r2, [pc, #76]	@ (800fe64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fe16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fe1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fe1c:	f7fa f8f4 	bl	800a008 <HAL_GetTick>
 800fe20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800fe22:	e009      	b.n	800fe38 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800fe24:	f7fa f8f0 	bl	800a008 <HAL_GetTick>
 800fe28:	4602      	mov	r2, r0
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	1ad3      	subs	r3, r2, r3
 800fe2e:	2b02      	cmp	r3, #2
 800fe30:	d902      	bls.n	800fe38 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800fe32:	2303      	movs	r3, #3
 800fe34:	73fb      	strb	r3, [r7, #15]
          break;
 800fe36:	e005      	b.n	800fe44 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800fe38:	4b0a      	ldr	r3, [pc, #40]	@ (800fe64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d0ef      	beq.n	800fe24 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800fe44:	7bfb      	ldrb	r3, [r7, #15]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d106      	bne.n	800fe58 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800fe4a:	4b06      	ldr	r3, [pc, #24]	@ (800fe64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fe4c:	695a      	ldr	r2, [r3, #20]
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	695b      	ldr	r3, [r3, #20]
 800fe52:	4904      	ldr	r1, [pc, #16]	@ (800fe64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fe54:	4313      	orrs	r3, r2
 800fe56:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800fe58:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3710      	adds	r7, #16
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
 800fe62:	bf00      	nop
 800fe64:	40021000 	.word	0x40021000

0800fe68 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b084      	sub	sp, #16
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800fe70:	2301      	movs	r3, #1
 800fe72:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d079      	beq.n	800ff6e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800fe80:	b2db      	uxtb	r3, r3
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d106      	bne.n	800fe94 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	2200      	movs	r2, #0
 800fe8a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f7f6 fc56 	bl	8006740 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2202      	movs	r2, #2
 800fe98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	68db      	ldr	r3, [r3, #12]
 800fea2:	f003 0310 	and.w	r3, r3, #16
 800fea6:	2b10      	cmp	r3, #16
 800fea8:	d058      	beq.n	800ff5c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	22ca      	movs	r2, #202	@ 0xca
 800feb0:	625a      	str	r2, [r3, #36]	@ 0x24
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	2253      	movs	r2, #83	@ 0x53
 800feb8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	f000 fb82 	bl	80105c4 <RTC_EnterInitMode>
 800fec0:	4603      	mov	r3, r0
 800fec2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800fec4:	7bfb      	ldrb	r3, [r7, #15]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d127      	bne.n	800ff1a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	689b      	ldr	r3, [r3, #8]
 800fed0:	687a      	ldr	r2, [r7, #4]
 800fed2:	6812      	ldr	r2, [r2, #0]
 800fed4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800fed8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fedc:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	6899      	ldr	r1, [r3, #8]
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	685a      	ldr	r2, [r3, #4]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	691b      	ldr	r3, [r3, #16]
 800feec:	431a      	orrs	r2, r3
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	699b      	ldr	r3, [r3, #24]
 800fef2:	431a      	orrs	r2, r3
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	430a      	orrs	r2, r1
 800fefa:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	687a      	ldr	r2, [r7, #4]
 800ff02:	68d2      	ldr	r2, [r2, #12]
 800ff04:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	6919      	ldr	r1, [r3, #16]
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	689b      	ldr	r3, [r3, #8]
 800ff10:	041a      	lsls	r2, r3, #16
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	430a      	orrs	r2, r1
 800ff18:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f000 fb86 	bl	801062c <RTC_ExitInitMode>
 800ff20:	4603      	mov	r3, r0
 800ff22:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800ff24:	7bfb      	ldrb	r3, [r7, #15]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d113      	bne.n	800ff52 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	f022 0203 	bic.w	r2, r2, #3
 800ff38:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	69da      	ldr	r2, [r3, #28]
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	695b      	ldr	r3, [r3, #20]
 800ff48:	431a      	orrs	r2, r3
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	430a      	orrs	r2, r1
 800ff50:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	22ff      	movs	r2, #255	@ 0xff
 800ff58:	625a      	str	r2, [r3, #36]	@ 0x24
 800ff5a:	e001      	b.n	800ff60 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800ff60:	7bfb      	ldrb	r3, [r7, #15]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d103      	bne.n	800ff6e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2201      	movs	r2, #1
 800ff6a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 800ff6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3710      	adds	r7, #16
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}

0800ff78 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ff78:	b590      	push	{r4, r7, lr}
 800ff7a:	b087      	sub	sp, #28
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	60f8      	str	r0, [r7, #12]
 800ff80:	60b9      	str	r1, [r7, #8]
 800ff82:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ff8a:	2b01      	cmp	r3, #1
 800ff8c:	d101      	bne.n	800ff92 <HAL_RTC_SetTime+0x1a>
 800ff8e:	2302      	movs	r3, #2
 800ff90:	e08b      	b.n	80100aa <HAL_RTC_SetTime+0x132>
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	2201      	movs	r2, #1
 800ff96:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	2202      	movs	r2, #2
 800ff9e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	22ca      	movs	r2, #202	@ 0xca
 800ffa8:	625a      	str	r2, [r3, #36]	@ 0x24
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	2253      	movs	r2, #83	@ 0x53
 800ffb0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ffb2:	68f8      	ldr	r0, [r7, #12]
 800ffb4:	f000 fb06 	bl	80105c4 <RTC_EnterInitMode>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800ffbc:	7cfb      	ldrb	r3, [r7, #19]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d163      	bne.n	801008a <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d126      	bne.n	8010016 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	689b      	ldr	r3, [r3, #8]
 800ffce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d102      	bne.n	800ffdc <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	2200      	movs	r2, #0
 800ffda:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	781b      	ldrb	r3, [r3, #0]
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f000 fb61 	bl	80106a8 <RTC_ByteToBcd2>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	785b      	ldrb	r3, [r3, #1]
 800ffee:	4618      	mov	r0, r3
 800fff0:	f000 fb5a 	bl	80106a8 <RTC_ByteToBcd2>
 800fff4:	4603      	mov	r3, r0
 800fff6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800fff8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	789b      	ldrb	r3, [r3, #2]
 800fffe:	4618      	mov	r0, r3
 8010000:	f000 fb52 	bl	80106a8 <RTC_ByteToBcd2>
 8010004:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010006:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	78db      	ldrb	r3, [r3, #3]
 801000e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010010:	4313      	orrs	r3, r2
 8010012:	617b      	str	r3, [r7, #20]
 8010014:	e018      	b.n	8010048 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	689b      	ldr	r3, [r3, #8]
 801001c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010020:	2b00      	cmp	r3, #0
 8010022:	d102      	bne.n	801002a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	2200      	movs	r2, #0
 8010028:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	781b      	ldrb	r3, [r3, #0]
 801002e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	785b      	ldrb	r3, [r3, #1]
 8010034:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010036:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8010038:	68ba      	ldr	r2, [r7, #8]
 801003a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801003c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	78db      	ldrb	r3, [r3, #3]
 8010042:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010044:	4313      	orrs	r3, r2
 8010046:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	681a      	ldr	r2, [r3, #0]
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8010052:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8010056:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	689a      	ldr	r2, [r3, #8]
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8010066:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	6899      	ldr	r1, [r3, #8]
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	68da      	ldr	r2, [r3, #12]
 8010072:	68bb      	ldr	r3, [r7, #8]
 8010074:	691b      	ldr	r3, [r3, #16]
 8010076:	431a      	orrs	r2, r3
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	430a      	orrs	r2, r1
 801007e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010080:	68f8      	ldr	r0, [r7, #12]
 8010082:	f000 fad3 	bl	801062c <RTC_ExitInitMode>
 8010086:	4603      	mov	r3, r0
 8010088:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	22ff      	movs	r2, #255	@ 0xff
 8010090:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8010092:	7cfb      	ldrb	r3, [r7, #19]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d103      	bne.n	80100a0 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	2201      	movs	r2, #1
 801009c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	2200      	movs	r2, #0
 80100a4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80100a8:	7cfb      	ldrb	r3, [r7, #19]
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	371c      	adds	r7, #28
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd90      	pop	{r4, r7, pc}

080100b2 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80100b2:	b580      	push	{r7, lr}
 80100b4:	b086      	sub	sp, #24
 80100b6:	af00      	add	r7, sp, #0
 80100b8:	60f8      	str	r0, [r7, #12]
 80100ba:	60b9      	str	r1, [r7, #8]
 80100bc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80100c4:	68bb      	ldr	r3, [r7, #8]
 80100c6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	691b      	ldr	r3, [r3, #16]
 80100ce:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80100e0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80100e4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80100e6:	697b      	ldr	r3, [r7, #20]
 80100e8:	0c1b      	lsrs	r3, r3, #16
 80100ea:	b2db      	uxtb	r3, r3
 80100ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80100f0:	b2da      	uxtb	r2, r3
 80100f2:	68bb      	ldr	r3, [r7, #8]
 80100f4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	0a1b      	lsrs	r3, r3, #8
 80100fa:	b2db      	uxtb	r3, r3
 80100fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010100:	b2da      	uxtb	r2, r3
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8010106:	697b      	ldr	r3, [r7, #20]
 8010108:	b2db      	uxtb	r3, r3
 801010a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801010e:	b2da      	uxtb	r2, r3
 8010110:	68bb      	ldr	r3, [r7, #8]
 8010112:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8010114:	697b      	ldr	r3, [r7, #20]
 8010116:	0d9b      	lsrs	r3, r3, #22
 8010118:	b2db      	uxtb	r3, r3
 801011a:	f003 0301 	and.w	r3, r3, #1
 801011e:	b2da      	uxtb	r2, r3
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d11a      	bne.n	8010160 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	4618      	mov	r0, r3
 8010130:	f000 fada 	bl	80106e8 <RTC_Bcd2ToByte>
 8010134:	4603      	mov	r3, r0
 8010136:	461a      	mov	r2, r3
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	785b      	ldrb	r3, [r3, #1]
 8010140:	4618      	mov	r0, r3
 8010142:	f000 fad1 	bl	80106e8 <RTC_Bcd2ToByte>
 8010146:	4603      	mov	r3, r0
 8010148:	461a      	mov	r2, r3
 801014a:	68bb      	ldr	r3, [r7, #8]
 801014c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	789b      	ldrb	r3, [r3, #2]
 8010152:	4618      	mov	r0, r3
 8010154:	f000 fac8 	bl	80106e8 <RTC_Bcd2ToByte>
 8010158:	4603      	mov	r3, r0
 801015a:	461a      	mov	r2, r3
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8010160:	2300      	movs	r3, #0
}
 8010162:	4618      	mov	r0, r3
 8010164:	3718      	adds	r7, #24
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}

0801016a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801016a:	b590      	push	{r4, r7, lr}
 801016c:	b087      	sub	sp, #28
 801016e:	af00      	add	r7, sp, #0
 8010170:	60f8      	str	r0, [r7, #12]
 8010172:	60b9      	str	r1, [r7, #8]
 8010174:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	f893 3020 	ldrb.w	r3, [r3, #32]
 801017c:	2b01      	cmp	r3, #1
 801017e:	d101      	bne.n	8010184 <HAL_RTC_SetDate+0x1a>
 8010180:	2302      	movs	r3, #2
 8010182:	e075      	b.n	8010270 <HAL_RTC_SetDate+0x106>
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	2201      	movs	r2, #1
 8010188:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	2202      	movs	r2, #2
 8010190:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d10e      	bne.n	80101b8 <HAL_RTC_SetDate+0x4e>
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	785b      	ldrb	r3, [r3, #1]
 801019e:	f003 0310 	and.w	r3, r3, #16
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d008      	beq.n	80101b8 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80101a6:	68bb      	ldr	r3, [r7, #8]
 80101a8:	785b      	ldrb	r3, [r3, #1]
 80101aa:	f023 0310 	bic.w	r3, r3, #16
 80101ae:	b2db      	uxtb	r3, r3
 80101b0:	330a      	adds	r3, #10
 80101b2:	b2da      	uxtb	r2, r3
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d11c      	bne.n	80101f8 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80101be:	68bb      	ldr	r3, [r7, #8]
 80101c0:	78db      	ldrb	r3, [r3, #3]
 80101c2:	4618      	mov	r0, r3
 80101c4:	f000 fa70 	bl	80106a8 <RTC_ByteToBcd2>
 80101c8:	4603      	mov	r3, r0
 80101ca:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	785b      	ldrb	r3, [r3, #1]
 80101d0:	4618      	mov	r0, r3
 80101d2:	f000 fa69 	bl	80106a8 <RTC_ByteToBcd2>
 80101d6:	4603      	mov	r3, r0
 80101d8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80101da:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	789b      	ldrb	r3, [r3, #2]
 80101e0:	4618      	mov	r0, r3
 80101e2:	f000 fa61 	bl	80106a8 <RTC_ByteToBcd2>
 80101e6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80101e8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	781b      	ldrb	r3, [r3, #0]
 80101f0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80101f2:	4313      	orrs	r3, r2
 80101f4:	617b      	str	r3, [r7, #20]
 80101f6:	e00e      	b.n	8010216 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	78db      	ldrb	r3, [r3, #3]
 80101fc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	785b      	ldrb	r3, [r3, #1]
 8010202:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8010204:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8010206:	68ba      	ldr	r2, [r7, #8]
 8010208:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 801020a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	781b      	ldrb	r3, [r3, #0]
 8010210:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8010212:	4313      	orrs	r3, r2
 8010214:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	22ca      	movs	r2, #202	@ 0xca
 801021c:	625a      	str	r2, [r3, #36]	@ 0x24
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	2253      	movs	r2, #83	@ 0x53
 8010224:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010226:	68f8      	ldr	r0, [r7, #12]
 8010228:	f000 f9cc 	bl	80105c4 <RTC_EnterInitMode>
 801022c:	4603      	mov	r3, r0
 801022e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8010230:	7cfb      	ldrb	r3, [r7, #19]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d10c      	bne.n	8010250 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	697b      	ldr	r3, [r7, #20]
 801023c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010240:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010244:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010246:	68f8      	ldr	r0, [r7, #12]
 8010248:	f000 f9f0 	bl	801062c <RTC_ExitInitMode>
 801024c:	4603      	mov	r3, r0
 801024e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	22ff      	movs	r2, #255	@ 0xff
 8010256:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8010258:	7cfb      	ldrb	r3, [r7, #19]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d103      	bne.n	8010266 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	2201      	movs	r2, #1
 8010262:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	2200      	movs	r2, #0
 801026a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 801026e:	7cfb      	ldrb	r3, [r7, #19]
}
 8010270:	4618      	mov	r0, r3
 8010272:	371c      	adds	r7, #28
 8010274:	46bd      	mov	sp, r7
 8010276:	bd90      	pop	{r4, r7, pc}

08010278 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8010278:	b590      	push	{r4, r7, lr}
 801027a:	b089      	sub	sp, #36	@ 0x24
 801027c:	af00      	add	r7, sp, #0
 801027e:	60f8      	str	r0, [r7, #12]
 8010280:	60b9      	str	r1, [r7, #8]
 8010282:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	f893 3020 	ldrb.w	r3, [r3, #32]
 801028a:	2b01      	cmp	r3, #1
 801028c:	d101      	bne.n	8010292 <HAL_RTC_SetAlarm_IT+0x1a>
 801028e:	2302      	movs	r3, #2
 8010290:	e127      	b.n	80104e2 <HAL_RTC_SetAlarm_IT+0x26a>
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	2201      	movs	r2, #1
 8010296:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	2202      	movs	r2, #2
 801029e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d137      	bne.n	8010318 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	689b      	ldr	r3, [r3, #8]
 80102ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d102      	bne.n	80102bc <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	2200      	movs	r2, #0
 80102ba:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	781b      	ldrb	r3, [r3, #0]
 80102c0:	4618      	mov	r0, r3
 80102c2:	f000 f9f1 	bl	80106a8 <RTC_ByteToBcd2>
 80102c6:	4603      	mov	r3, r0
 80102c8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80102ca:	68bb      	ldr	r3, [r7, #8]
 80102cc:	785b      	ldrb	r3, [r3, #1]
 80102ce:	4618      	mov	r0, r3
 80102d0:	f000 f9ea 	bl	80106a8 <RTC_ByteToBcd2>
 80102d4:	4603      	mov	r3, r0
 80102d6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80102d8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80102da:	68bb      	ldr	r3, [r7, #8]
 80102dc:	789b      	ldrb	r3, [r3, #2]
 80102de:	4618      	mov	r0, r3
 80102e0:	f000 f9e2 	bl	80106a8 <RTC_ByteToBcd2>
 80102e4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80102e6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	78db      	ldrb	r3, [r3, #3]
 80102ee:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80102f0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80102fa:	4618      	mov	r0, r3
 80102fc:	f000 f9d4 	bl	80106a8 <RTC_ByteToBcd2>
 8010300:	4603      	mov	r3, r0
 8010302:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8010304:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 801030c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8010312:	4313      	orrs	r3, r2
 8010314:	61fb      	str	r3, [r7, #28]
 8010316:	e023      	b.n	8010360 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	689b      	ldr	r3, [r3, #8]
 801031e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010322:	2b00      	cmp	r3, #0
 8010324:	d102      	bne.n	801032c <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	2200      	movs	r2, #0
 801032a:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	781b      	ldrb	r3, [r3, #0]
 8010330:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	785b      	ldrb	r3, [r3, #1]
 8010336:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8010338:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 801033a:	68ba      	ldr	r2, [r7, #8]
 801033c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 801033e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	78db      	ldrb	r3, [r3, #3]
 8010344:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8010346:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801034e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8010350:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8010356:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 801035c:	4313      	orrs	r3, r2
 801035e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	685a      	ldr	r2, [r3, #4]
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	69db      	ldr	r3, [r3, #28]
 8010368:	4313      	orrs	r3, r2
 801036a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	22ca      	movs	r2, #202	@ 0xca
 8010372:	625a      	str	r2, [r3, #36]	@ 0x24
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	2253      	movs	r2, #83	@ 0x53
 801037a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010380:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010384:	d14a      	bne.n	801041c <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	689a      	ldr	r2, [r3, #8]
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010394:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	68db      	ldr	r3, [r3, #12]
 801039c:	b2da      	uxtb	r2, r3
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80103a6:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80103a8:	f7f9 fe2e 	bl	800a008 <HAL_GetTick>
 80103ac:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80103ae:	e015      	b.n	80103dc <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80103b0:	f7f9 fe2a 	bl	800a008 <HAL_GetTick>
 80103b4:	4602      	mov	r2, r0
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	1ad3      	subs	r3, r2, r3
 80103ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80103be:	d90d      	bls.n	80103dc <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	22ff      	movs	r2, #255	@ 0xff
 80103c6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	2203      	movs	r2, #3
 80103cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	2200      	movs	r2, #0
 80103d4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80103d8:	2303      	movs	r3, #3
 80103da:	e082      	b.n	80104e2 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	68db      	ldr	r3, [r3, #12]
 80103e2:	f003 0301 	and.w	r3, r3, #1
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d0e2      	beq.n	80103b0 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	69fa      	ldr	r2, [r7, #28]
 80103f0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	69ba      	ldr	r2, [r7, #24]
 80103f8:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	689a      	ldr	r2, [r3, #8]
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010408:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	689a      	ldr	r2, [r3, #8]
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8010418:	609a      	str	r2, [r3, #8]
 801041a:	e049      	b.n	80104b0 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	689a      	ldr	r2, [r3, #8]
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 801042a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	68db      	ldr	r3, [r3, #12]
 8010432:	b2da      	uxtb	r2, r3
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	f462 7220 	orn	r2, r2, #640	@ 0x280
 801043c:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 801043e:	f7f9 fde3 	bl	800a008 <HAL_GetTick>
 8010442:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8010444:	e015      	b.n	8010472 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010446:	f7f9 fddf 	bl	800a008 <HAL_GetTick>
 801044a:	4602      	mov	r2, r0
 801044c:	697b      	ldr	r3, [r7, #20]
 801044e:	1ad3      	subs	r3, r2, r3
 8010450:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010454:	d90d      	bls.n	8010472 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	22ff      	movs	r2, #255	@ 0xff
 801045c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	2203      	movs	r2, #3
 8010462:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	2200      	movs	r2, #0
 801046a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 801046e:	2303      	movs	r3, #3
 8010470:	e037      	b.n	80104e2 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	68db      	ldr	r3, [r3, #12]
 8010478:	f003 0302 	and.w	r3, r3, #2
 801047c:	2b00      	cmp	r3, #0
 801047e:	d0e2      	beq.n	8010446 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	69fa      	ldr	r2, [r7, #28]
 8010486:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	69ba      	ldr	r2, [r7, #24]
 801048e:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	689a      	ldr	r2, [r3, #8]
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801049e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	689a      	ldr	r2, [r3, #8]
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80104ae:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80104b0:	4b0e      	ldr	r3, [pc, #56]	@ (80104ec <HAL_RTC_SetAlarm_IT+0x274>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	4a0d      	ldr	r2, [pc, #52]	@ (80104ec <HAL_RTC_SetAlarm_IT+0x274>)
 80104b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80104ba:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80104bc:	4b0b      	ldr	r3, [pc, #44]	@ (80104ec <HAL_RTC_SetAlarm_IT+0x274>)
 80104be:	689b      	ldr	r3, [r3, #8]
 80104c0:	4a0a      	ldr	r2, [pc, #40]	@ (80104ec <HAL_RTC_SetAlarm_IT+0x274>)
 80104c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80104c6:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	22ff      	movs	r2, #255	@ 0xff
 80104ce:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	2201      	movs	r2, #1
 80104d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	2200      	movs	r2, #0
 80104dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80104e0:	2300      	movs	r3, #0
}
 80104e2:	4618      	mov	r0, r3
 80104e4:	3724      	adds	r7, #36	@ 0x24
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd90      	pop	{r4, r7, pc}
 80104ea:	bf00      	nop
 80104ec:	40010400 	.word	0x40010400

080104f0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b082      	sub	sp, #8
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80104f8:	4b1f      	ldr	r3, [pc, #124]	@ (8010578 <HAL_RTC_AlarmIRQHandler+0x88>)
 80104fa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80104fe:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	689b      	ldr	r3, [r3, #8]
 8010506:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801050a:	2b00      	cmp	r3, #0
 801050c:	d012      	beq.n	8010534 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	68db      	ldr	r3, [r3, #12]
 8010514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010518:	2b00      	cmp	r3, #0
 801051a:	d00b      	beq.n	8010534 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	68db      	ldr	r3, [r3, #12]
 8010522:	b2da      	uxtb	r2, r3
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 801052c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 801052e:	6878      	ldr	r0, [r7, #4]
 8010530:	f7f1 fd1c 	bl	8001f6c <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	689b      	ldr	r3, [r3, #8]
 801053a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801053e:	2b00      	cmp	r3, #0
 8010540:	d012      	beq.n	8010568 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	68db      	ldr	r3, [r3, #12]
 8010548:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801054c:	2b00      	cmp	r3, #0
 801054e:	d00b      	beq.n	8010568 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	68db      	ldr	r3, [r3, #12]
 8010556:	b2da      	uxtb	r2, r3
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8010560:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f000 f8da 	bl	801071c <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2201      	movs	r2, #1
 801056c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8010570:	bf00      	nop
 8010572:	3708      	adds	r7, #8
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}
 8010578:	40010400 	.word	0x40010400

0801057c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b084      	sub	sp, #16
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	4a0d      	ldr	r2, [pc, #52]	@ (80105c0 <HAL_RTC_WaitForSynchro+0x44>)
 801058a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 801058c:	f7f9 fd3c 	bl	800a008 <HAL_GetTick>
 8010590:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010592:	e009      	b.n	80105a8 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010594:	f7f9 fd38 	bl	800a008 <HAL_GetTick>
 8010598:	4602      	mov	r2, r0
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	1ad3      	subs	r3, r2, r3
 801059e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80105a2:	d901      	bls.n	80105a8 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80105a4:	2303      	movs	r3, #3
 80105a6:	e007      	b.n	80105b8 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	68db      	ldr	r3, [r3, #12]
 80105ae:	f003 0320 	and.w	r3, r3, #32
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d0ee      	beq.n	8010594 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80105b6:	2300      	movs	r3, #0
}
 80105b8:	4618      	mov	r0, r3
 80105ba:	3710      	adds	r7, #16
 80105bc:	46bd      	mov	sp, r7
 80105be:	bd80      	pop	{r7, pc}
 80105c0:	0003ff5f 	.word	0x0003ff5f

080105c4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b084      	sub	sp, #16
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80105cc:	2300      	movs	r3, #0
 80105ce:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	68db      	ldr	r3, [r3, #12]
 80105d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d120      	bne.n	8010620 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	f04f 32ff 	mov.w	r2, #4294967295
 80105e6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80105e8:	f7f9 fd0e 	bl	800a008 <HAL_GetTick>
 80105ec:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80105ee:	e00d      	b.n	801060c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80105f0:	f7f9 fd0a 	bl	800a008 <HAL_GetTick>
 80105f4:	4602      	mov	r2, r0
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	1ad3      	subs	r3, r2, r3
 80105fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80105fe:	d905      	bls.n	801060c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8010600:	2303      	movs	r3, #3
 8010602:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2203      	movs	r2, #3
 8010608:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	68db      	ldr	r3, [r3, #12]
 8010612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010616:	2b00      	cmp	r3, #0
 8010618:	d102      	bne.n	8010620 <RTC_EnterInitMode+0x5c>
 801061a:	7bfb      	ldrb	r3, [r7, #15]
 801061c:	2b03      	cmp	r3, #3
 801061e:	d1e7      	bne.n	80105f0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8010620:	7bfb      	ldrb	r3, [r7, #15]
}
 8010622:	4618      	mov	r0, r3
 8010624:	3710      	adds	r7, #16
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}
	...

0801062c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b084      	sub	sp, #16
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010634:	2300      	movs	r3, #0
 8010636:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8010638:	4b1a      	ldr	r3, [pc, #104]	@ (80106a4 <RTC_ExitInitMode+0x78>)
 801063a:	68db      	ldr	r3, [r3, #12]
 801063c:	4a19      	ldr	r2, [pc, #100]	@ (80106a4 <RTC_ExitInitMode+0x78>)
 801063e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010642:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8010644:	4b17      	ldr	r3, [pc, #92]	@ (80106a4 <RTC_ExitInitMode+0x78>)
 8010646:	689b      	ldr	r3, [r3, #8]
 8010648:	f003 0320 	and.w	r3, r3, #32
 801064c:	2b00      	cmp	r3, #0
 801064e:	d10c      	bne.n	801066a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	f7ff ff93 	bl	801057c <HAL_RTC_WaitForSynchro>
 8010656:	4603      	mov	r3, r0
 8010658:	2b00      	cmp	r3, #0
 801065a:	d01e      	beq.n	801069a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2203      	movs	r2, #3
 8010660:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8010664:	2303      	movs	r3, #3
 8010666:	73fb      	strb	r3, [r7, #15]
 8010668:	e017      	b.n	801069a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801066a:	4b0e      	ldr	r3, [pc, #56]	@ (80106a4 <RTC_ExitInitMode+0x78>)
 801066c:	689b      	ldr	r3, [r3, #8]
 801066e:	4a0d      	ldr	r2, [pc, #52]	@ (80106a4 <RTC_ExitInitMode+0x78>)
 8010670:	f023 0320 	bic.w	r3, r3, #32
 8010674:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f7ff ff80 	bl	801057c <HAL_RTC_WaitForSynchro>
 801067c:	4603      	mov	r3, r0
 801067e:	2b00      	cmp	r3, #0
 8010680:	d005      	beq.n	801068e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	2203      	movs	r2, #3
 8010686:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 801068a:	2303      	movs	r3, #3
 801068c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801068e:	4b05      	ldr	r3, [pc, #20]	@ (80106a4 <RTC_ExitInitMode+0x78>)
 8010690:	689b      	ldr	r3, [r3, #8]
 8010692:	4a04      	ldr	r2, [pc, #16]	@ (80106a4 <RTC_ExitInitMode+0x78>)
 8010694:	f043 0320 	orr.w	r3, r3, #32
 8010698:	6093      	str	r3, [r2, #8]
  }

  return status;
 801069a:	7bfb      	ldrb	r3, [r7, #15]
}
 801069c:	4618      	mov	r0, r3
 801069e:	3710      	adds	r7, #16
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}
 80106a4:	40002800 	.word	0x40002800

080106a8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80106a8:	b480      	push	{r7}
 80106aa:	b085      	sub	sp, #20
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	4603      	mov	r3, r0
 80106b0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80106b2:	2300      	movs	r3, #0
 80106b4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80106b6:	79fb      	ldrb	r3, [r7, #7]
 80106b8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80106ba:	e005      	b.n	80106c8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	3301      	adds	r3, #1
 80106c0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80106c2:	7afb      	ldrb	r3, [r7, #11]
 80106c4:	3b0a      	subs	r3, #10
 80106c6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80106c8:	7afb      	ldrb	r3, [r7, #11]
 80106ca:	2b09      	cmp	r3, #9
 80106cc:	d8f6      	bhi.n	80106bc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	b2db      	uxtb	r3, r3
 80106d2:	011b      	lsls	r3, r3, #4
 80106d4:	b2da      	uxtb	r2, r3
 80106d6:	7afb      	ldrb	r3, [r7, #11]
 80106d8:	4313      	orrs	r3, r2
 80106da:	b2db      	uxtb	r3, r3
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3714      	adds	r7, #20
 80106e0:	46bd      	mov	sp, r7
 80106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e6:	4770      	bx	lr

080106e8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80106e8:	b480      	push	{r7}
 80106ea:	b085      	sub	sp, #20
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	4603      	mov	r3, r0
 80106f0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80106f2:	79fb      	ldrb	r3, [r7, #7]
 80106f4:	091b      	lsrs	r3, r3, #4
 80106f6:	b2db      	uxtb	r3, r3
 80106f8:	461a      	mov	r2, r3
 80106fa:	0092      	lsls	r2, r2, #2
 80106fc:	4413      	add	r3, r2
 80106fe:	005b      	lsls	r3, r3, #1
 8010700:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8010702:	79fb      	ldrb	r3, [r7, #7]
 8010704:	f003 030f 	and.w	r3, r3, #15
 8010708:	b2da      	uxtb	r2, r3
 801070a:	7bfb      	ldrb	r3, [r7, #15]
 801070c:	4413      	add	r3, r2
 801070e:	b2db      	uxtb	r3, r3
}
 8010710:	4618      	mov	r0, r3
 8010712:	3714      	adds	r7, #20
 8010714:	46bd      	mov	sp, r7
 8010716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071a:	4770      	bx	lr

0801071c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 801071c:	b480      	push	{r7}
 801071e:	b083      	sub	sp, #12
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8010724:	bf00      	nop
 8010726:	370c      	adds	r7, #12
 8010728:	46bd      	mov	sp, r7
 801072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072e:	4770      	bx	lr

08010730 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b084      	sub	sp, #16
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d101      	bne.n	8010742 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801073e:	2301      	movs	r3, #1
 8010740:	e095      	b.n	801086e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010746:	2b00      	cmp	r3, #0
 8010748:	d108      	bne.n	801075c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	685b      	ldr	r3, [r3, #4]
 801074e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010752:	d009      	beq.n	8010768 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2200      	movs	r2, #0
 8010758:	61da      	str	r2, [r3, #28]
 801075a:	e005      	b.n	8010768 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2200      	movs	r2, #0
 8010760:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2200      	movs	r2, #0
 8010766:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	2200      	movs	r2, #0
 801076c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8010774:	b2db      	uxtb	r3, r3
 8010776:	2b00      	cmp	r3, #0
 8010778:	d106      	bne.n	8010788 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	2200      	movs	r2, #0
 801077e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010782:	6878      	ldr	r0, [r7, #4]
 8010784:	f7f6 f816 	bl	80067b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2202      	movs	r2, #2
 801078c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	681a      	ldr	r2, [r3, #0]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801079e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	68db      	ldr	r3, [r3, #12]
 80107a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80107a8:	d902      	bls.n	80107b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80107aa:	2300      	movs	r3, #0
 80107ac:	60fb      	str	r3, [r7, #12]
 80107ae:	e002      	b.n	80107b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80107b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80107b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	68db      	ldr	r3, [r3, #12]
 80107ba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80107be:	d007      	beq.n	80107d0 <HAL_SPI_Init+0xa0>
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	68db      	ldr	r3, [r3, #12]
 80107c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80107c8:	d002      	beq.n	80107d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2200      	movs	r2, #0
 80107ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	685b      	ldr	r3, [r3, #4]
 80107d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	689b      	ldr	r3, [r3, #8]
 80107dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80107e0:	431a      	orrs	r2, r3
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	691b      	ldr	r3, [r3, #16]
 80107e6:	f003 0302 	and.w	r3, r3, #2
 80107ea:	431a      	orrs	r2, r3
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	695b      	ldr	r3, [r3, #20]
 80107f0:	f003 0301 	and.w	r3, r3, #1
 80107f4:	431a      	orrs	r2, r3
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	699b      	ldr	r3, [r3, #24]
 80107fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80107fe:	431a      	orrs	r2, r3
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	69db      	ldr	r3, [r3, #28]
 8010804:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010808:	431a      	orrs	r2, r3
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	6a1b      	ldr	r3, [r3, #32]
 801080e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010812:	ea42 0103 	orr.w	r1, r2, r3
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801081a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	430a      	orrs	r2, r1
 8010824:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	699b      	ldr	r3, [r3, #24]
 801082a:	0c1b      	lsrs	r3, r3, #16
 801082c:	f003 0204 	and.w	r2, r3, #4
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010834:	f003 0310 	and.w	r3, r3, #16
 8010838:	431a      	orrs	r2, r3
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801083e:	f003 0308 	and.w	r3, r3, #8
 8010842:	431a      	orrs	r2, r3
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	68db      	ldr	r3, [r3, #12]
 8010848:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801084c:	ea42 0103 	orr.w	r1, r2, r3
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	430a      	orrs	r2, r1
 801085c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	2200      	movs	r2, #0
 8010862:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	2201      	movs	r2, #1
 8010868:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 801086c:	2300      	movs	r3, #0
}
 801086e:	4618      	mov	r0, r3
 8010870:	3710      	adds	r7, #16
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}

08010876 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010876:	b580      	push	{r7, lr}
 8010878:	b088      	sub	sp, #32
 801087a:	af00      	add	r7, sp, #0
 801087c:	60f8      	str	r0, [r7, #12]
 801087e:	60b9      	str	r1, [r7, #8]
 8010880:	603b      	str	r3, [r7, #0]
 8010882:	4613      	mov	r3, r2
 8010884:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010886:	f7f9 fbbf 	bl	800a008 <HAL_GetTick>
 801088a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 801088c:	88fb      	ldrh	r3, [r7, #6]
 801088e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8010896:	b2db      	uxtb	r3, r3
 8010898:	2b01      	cmp	r3, #1
 801089a:	d001      	beq.n	80108a0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 801089c:	2302      	movs	r3, #2
 801089e:	e15c      	b.n	8010b5a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80108a0:	68bb      	ldr	r3, [r7, #8]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d002      	beq.n	80108ac <HAL_SPI_Transmit+0x36>
 80108a6:	88fb      	ldrh	r3, [r7, #6]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d101      	bne.n	80108b0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80108ac:	2301      	movs	r3, #1
 80108ae:	e154      	b.n	8010b5a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80108b6:	2b01      	cmp	r3, #1
 80108b8:	d101      	bne.n	80108be <HAL_SPI_Transmit+0x48>
 80108ba:	2302      	movs	r3, #2
 80108bc:	e14d      	b.n	8010b5a <HAL_SPI_Transmit+0x2e4>
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	2201      	movs	r2, #1
 80108c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	2203      	movs	r2, #3
 80108ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	2200      	movs	r2, #0
 80108d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	68ba      	ldr	r2, [r7, #8]
 80108d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	88fa      	ldrh	r2, [r7, #6]
 80108de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	88fa      	ldrh	r2, [r7, #6]
 80108e4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	2200      	movs	r2, #0
 80108ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	2200      	movs	r2, #0
 80108f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	2200      	movs	r2, #0
 80108f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	2200      	movs	r2, #0
 8010900:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	2200      	movs	r2, #0
 8010906:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	689b      	ldr	r3, [r3, #8]
 801090c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010910:	d10f      	bne.n	8010932 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	681a      	ldr	r2, [r3, #0]
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010920:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	681a      	ldr	r2, [r3, #0]
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010930:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801093c:	2b40      	cmp	r3, #64	@ 0x40
 801093e:	d007      	beq.n	8010950 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	681a      	ldr	r2, [r3, #0]
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801094e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	68db      	ldr	r3, [r3, #12]
 8010954:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8010958:	d952      	bls.n	8010a00 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	685b      	ldr	r3, [r3, #4]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d002      	beq.n	8010968 <HAL_SPI_Transmit+0xf2>
 8010962:	8b7b      	ldrh	r3, [r7, #26]
 8010964:	2b01      	cmp	r3, #1
 8010966:	d145      	bne.n	80109f4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801096c:	881a      	ldrh	r2, [r3, #0]
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010978:	1c9a      	adds	r2, r3, #2
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010982:	b29b      	uxth	r3, r3
 8010984:	3b01      	subs	r3, #1
 8010986:	b29a      	uxth	r2, r3
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801098c:	e032      	b.n	80109f4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	689b      	ldr	r3, [r3, #8]
 8010994:	f003 0302 	and.w	r3, r3, #2
 8010998:	2b02      	cmp	r3, #2
 801099a:	d112      	bne.n	80109c2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109a0:	881a      	ldrh	r2, [r3, #0]
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109ac:	1c9a      	adds	r2, r3, #2
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80109b6:	b29b      	uxth	r3, r3
 80109b8:	3b01      	subs	r3, #1
 80109ba:	b29a      	uxth	r2, r3
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80109c0:	e018      	b.n	80109f4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80109c2:	f7f9 fb21 	bl	800a008 <HAL_GetTick>
 80109c6:	4602      	mov	r2, r0
 80109c8:	69fb      	ldr	r3, [r7, #28]
 80109ca:	1ad3      	subs	r3, r2, r3
 80109cc:	683a      	ldr	r2, [r7, #0]
 80109ce:	429a      	cmp	r2, r3
 80109d0:	d803      	bhi.n	80109da <HAL_SPI_Transmit+0x164>
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109d8:	d102      	bne.n	80109e0 <HAL_SPI_Transmit+0x16a>
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d109      	bne.n	80109f4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	2201      	movs	r2, #1
 80109e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	2200      	movs	r2, #0
 80109ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80109f0:	2303      	movs	r3, #3
 80109f2:	e0b2      	b.n	8010b5a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80109f8:	b29b      	uxth	r3, r3
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d1c7      	bne.n	801098e <HAL_SPI_Transmit+0x118>
 80109fe:	e083      	b.n	8010b08 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	685b      	ldr	r3, [r3, #4]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d002      	beq.n	8010a0e <HAL_SPI_Transmit+0x198>
 8010a08:	8b7b      	ldrh	r3, [r7, #26]
 8010a0a:	2b01      	cmp	r3, #1
 8010a0c:	d177      	bne.n	8010afe <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010a12:	b29b      	uxth	r3, r3
 8010a14:	2b01      	cmp	r3, #1
 8010a16:	d912      	bls.n	8010a3e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a1c:	881a      	ldrh	r2, [r3, #0]
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a28:	1c9a      	adds	r2, r3, #2
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010a32:	b29b      	uxth	r3, r3
 8010a34:	3b02      	subs	r3, #2
 8010a36:	b29a      	uxth	r2, r3
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8010a3c:	e05f      	b.n	8010afe <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	330c      	adds	r3, #12
 8010a48:	7812      	ldrb	r2, [r2, #0]
 8010a4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a50:	1c5a      	adds	r2, r3, #1
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010a5a:	b29b      	uxth	r3, r3
 8010a5c:	3b01      	subs	r3, #1
 8010a5e:	b29a      	uxth	r2, r3
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8010a64:	e04b      	b.n	8010afe <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	689b      	ldr	r3, [r3, #8]
 8010a6c:	f003 0302 	and.w	r3, r3, #2
 8010a70:	2b02      	cmp	r3, #2
 8010a72:	d12b      	bne.n	8010acc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010a78:	b29b      	uxth	r3, r3
 8010a7a:	2b01      	cmp	r3, #1
 8010a7c:	d912      	bls.n	8010aa4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a82:	881a      	ldrh	r2, [r3, #0]
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a8e:	1c9a      	adds	r2, r3, #2
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010a98:	b29b      	uxth	r3, r3
 8010a9a:	3b02      	subs	r3, #2
 8010a9c:	b29a      	uxth	r2, r3
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8010aa2:	e02c      	b.n	8010afe <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	330c      	adds	r3, #12
 8010aae:	7812      	ldrb	r2, [r2, #0]
 8010ab0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ab6:	1c5a      	adds	r2, r3, #1
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010ac0:	b29b      	uxth	r3, r3
 8010ac2:	3b01      	subs	r3, #1
 8010ac4:	b29a      	uxth	r2, r3
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8010aca:	e018      	b.n	8010afe <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010acc:	f7f9 fa9c 	bl	800a008 <HAL_GetTick>
 8010ad0:	4602      	mov	r2, r0
 8010ad2:	69fb      	ldr	r3, [r7, #28]
 8010ad4:	1ad3      	subs	r3, r2, r3
 8010ad6:	683a      	ldr	r2, [r7, #0]
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	d803      	bhi.n	8010ae4 <HAL_SPI_Transmit+0x26e>
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ae2:	d102      	bne.n	8010aea <HAL_SPI_Transmit+0x274>
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d109      	bne.n	8010afe <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	2201      	movs	r2, #1
 8010aee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	2200      	movs	r2, #0
 8010af6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8010afa:	2303      	movs	r3, #3
 8010afc:	e02d      	b.n	8010b5a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010b02:	b29b      	uxth	r3, r3
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d1ae      	bne.n	8010a66 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010b08:	69fa      	ldr	r2, [r7, #28]
 8010b0a:	6839      	ldr	r1, [r7, #0]
 8010b0c:	68f8      	ldr	r0, [r7, #12]
 8010b0e:	f000 fcf5 	bl	80114fc <SPI_EndRxTxTransaction>
 8010b12:	4603      	mov	r3, r0
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d002      	beq.n	8010b1e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	2220      	movs	r2, #32
 8010b1c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	689b      	ldr	r3, [r3, #8]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d10a      	bne.n	8010b3c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010b26:	2300      	movs	r3, #0
 8010b28:	617b      	str	r3, [r7, #20]
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	68db      	ldr	r3, [r3, #12]
 8010b30:	617b      	str	r3, [r7, #20]
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	689b      	ldr	r3, [r3, #8]
 8010b38:	617b      	str	r3, [r7, #20]
 8010b3a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	2201      	movs	r2, #1
 8010b40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	2200      	movs	r2, #0
 8010b48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d001      	beq.n	8010b58 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8010b54:	2301      	movs	r3, #1
 8010b56:	e000      	b.n	8010b5a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8010b58:	2300      	movs	r3, #0
  }
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	3720      	adds	r7, #32
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}

08010b62 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010b62:	b580      	push	{r7, lr}
 8010b64:	b088      	sub	sp, #32
 8010b66:	af02      	add	r7, sp, #8
 8010b68:	60f8      	str	r0, [r7, #12]
 8010b6a:	60b9      	str	r1, [r7, #8]
 8010b6c:	603b      	str	r3, [r7, #0]
 8010b6e:	4613      	mov	r3, r2
 8010b70:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8010b78:	b2db      	uxtb	r3, r3
 8010b7a:	2b01      	cmp	r3, #1
 8010b7c:	d001      	beq.n	8010b82 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8010b7e:	2302      	movs	r3, #2
 8010b80:	e123      	b.n	8010dca <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	685b      	ldr	r3, [r3, #4]
 8010b86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010b8a:	d112      	bne.n	8010bb2 <HAL_SPI_Receive+0x50>
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	689b      	ldr	r3, [r3, #8]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d10e      	bne.n	8010bb2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	2204      	movs	r2, #4
 8010b98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8010b9c:	88fa      	ldrh	r2, [r7, #6]
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	9300      	str	r3, [sp, #0]
 8010ba2:	4613      	mov	r3, r2
 8010ba4:	68ba      	ldr	r2, [r7, #8]
 8010ba6:	68b9      	ldr	r1, [r7, #8]
 8010ba8:	68f8      	ldr	r0, [r7, #12]
 8010baa:	f000 f912 	bl	8010dd2 <HAL_SPI_TransmitReceive>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	e10b      	b.n	8010dca <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010bb2:	f7f9 fa29 	bl	800a008 <HAL_GetTick>
 8010bb6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8010bb8:	68bb      	ldr	r3, [r7, #8]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d002      	beq.n	8010bc4 <HAL_SPI_Receive+0x62>
 8010bbe:	88fb      	ldrh	r3, [r7, #6]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d101      	bne.n	8010bc8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	e100      	b.n	8010dca <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8010bce:	2b01      	cmp	r3, #1
 8010bd0:	d101      	bne.n	8010bd6 <HAL_SPI_Receive+0x74>
 8010bd2:	2302      	movs	r3, #2
 8010bd4:	e0f9      	b.n	8010dca <HAL_SPI_Receive+0x268>
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	2201      	movs	r2, #1
 8010bda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	2204      	movs	r2, #4
 8010be2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	2200      	movs	r2, #0
 8010bea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	68ba      	ldr	r2, [r7, #8]
 8010bf0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	88fa      	ldrh	r2, [r7, #6]
 8010bf6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	88fa      	ldrh	r2, [r7, #6]
 8010bfe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	2200      	movs	r2, #0
 8010c06:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	2200      	movs	r2, #0
 8010c12:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	2200      	movs	r2, #0
 8010c18:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	68db      	ldr	r3, [r3, #12]
 8010c24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8010c28:	d908      	bls.n	8010c3c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	685a      	ldr	r2, [r3, #4]
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8010c38:	605a      	str	r2, [r3, #4]
 8010c3a:	e007      	b.n	8010c4c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	685a      	ldr	r2, [r3, #4]
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8010c4a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	689b      	ldr	r3, [r3, #8]
 8010c50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010c54:	d10f      	bne.n	8010c76 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	681a      	ldr	r2, [r3, #0]
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010c64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	681a      	ldr	r2, [r3, #0]
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8010c74:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c80:	2b40      	cmp	r3, #64	@ 0x40
 8010c82:	d007      	beq.n	8010c94 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	681a      	ldr	r2, [r3, #0]
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010c92:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	68db      	ldr	r3, [r3, #12]
 8010c98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8010c9c:	d875      	bhi.n	8010d8a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8010c9e:	e037      	b.n	8010d10 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	689b      	ldr	r3, [r3, #8]
 8010ca6:	f003 0301 	and.w	r3, r3, #1
 8010caa:	2b01      	cmp	r3, #1
 8010cac:	d117      	bne.n	8010cde <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	f103 020c 	add.w	r2, r3, #12
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010cba:	7812      	ldrb	r2, [r2, #0]
 8010cbc:	b2d2      	uxtb	r2, r2
 8010cbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010cc4:	1c5a      	adds	r2, r3, #1
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8010cd0:	b29b      	uxth	r3, r3
 8010cd2:	3b01      	subs	r3, #1
 8010cd4:	b29a      	uxth	r2, r3
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8010cdc:	e018      	b.n	8010d10 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010cde:	f7f9 f993 	bl	800a008 <HAL_GetTick>
 8010ce2:	4602      	mov	r2, r0
 8010ce4:	697b      	ldr	r3, [r7, #20]
 8010ce6:	1ad3      	subs	r3, r2, r3
 8010ce8:	683a      	ldr	r2, [r7, #0]
 8010cea:	429a      	cmp	r2, r3
 8010cec:	d803      	bhi.n	8010cf6 <HAL_SPI_Receive+0x194>
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cf4:	d102      	bne.n	8010cfc <HAL_SPI_Receive+0x19a>
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d109      	bne.n	8010d10 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	2201      	movs	r2, #1
 8010d00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	2200      	movs	r2, #0
 8010d08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8010d0c:	2303      	movs	r3, #3
 8010d0e:	e05c      	b.n	8010dca <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8010d16:	b29b      	uxth	r3, r3
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d1c1      	bne.n	8010ca0 <HAL_SPI_Receive+0x13e>
 8010d1c:	e03b      	b.n	8010d96 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	689b      	ldr	r3, [r3, #8]
 8010d24:	f003 0301 	and.w	r3, r3, #1
 8010d28:	2b01      	cmp	r3, #1
 8010d2a:	d115      	bne.n	8010d58 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	68da      	ldr	r2, [r3, #12]
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010d36:	b292      	uxth	r2, r2
 8010d38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010d3e:	1c9a      	adds	r2, r3, #2
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8010d4a:	b29b      	uxth	r3, r3
 8010d4c:	3b01      	subs	r3, #1
 8010d4e:	b29a      	uxth	r2, r3
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8010d56:	e018      	b.n	8010d8a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010d58:	f7f9 f956 	bl	800a008 <HAL_GetTick>
 8010d5c:	4602      	mov	r2, r0
 8010d5e:	697b      	ldr	r3, [r7, #20]
 8010d60:	1ad3      	subs	r3, r2, r3
 8010d62:	683a      	ldr	r2, [r7, #0]
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d803      	bhi.n	8010d70 <HAL_SPI_Receive+0x20e>
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d6e:	d102      	bne.n	8010d76 <HAL_SPI_Receive+0x214>
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d109      	bne.n	8010d8a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	2201      	movs	r2, #1
 8010d7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	2200      	movs	r2, #0
 8010d82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8010d86:	2303      	movs	r3, #3
 8010d88:	e01f      	b.n	8010dca <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8010d90:	b29b      	uxth	r3, r3
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d1c3      	bne.n	8010d1e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010d96:	697a      	ldr	r2, [r7, #20]
 8010d98:	6839      	ldr	r1, [r7, #0]
 8010d9a:	68f8      	ldr	r0, [r7, #12]
 8010d9c:	f000 fb56 	bl	801144c <SPI_EndRxTransaction>
 8010da0:	4603      	mov	r3, r0
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d002      	beq.n	8010dac <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	2220      	movs	r2, #32
 8010daa:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	2201      	movs	r2, #1
 8010db0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	2200      	movs	r2, #0
 8010db8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d001      	beq.n	8010dc8 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8010dc4:	2301      	movs	r3, #1
 8010dc6:	e000      	b.n	8010dca <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8010dc8:	2300      	movs	r3, #0
  }
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3718      	adds	r7, #24
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}

08010dd2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8010dd2:	b580      	push	{r7, lr}
 8010dd4:	b08a      	sub	sp, #40	@ 0x28
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	60f8      	str	r0, [r7, #12]
 8010dda:	60b9      	str	r1, [r7, #8]
 8010ddc:	607a      	str	r2, [r7, #4]
 8010dde:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8010de0:	2301      	movs	r3, #1
 8010de2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010de4:	f7f9 f910 	bl	800a008 <HAL_GetTick>
 8010de8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8010df0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	685b      	ldr	r3, [r3, #4]
 8010df6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8010df8:	887b      	ldrh	r3, [r7, #2]
 8010dfa:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8010dfc:	887b      	ldrh	r3, [r7, #2]
 8010dfe:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010e00:	7ffb      	ldrb	r3, [r7, #31]
 8010e02:	2b01      	cmp	r3, #1
 8010e04:	d00c      	beq.n	8010e20 <HAL_SPI_TransmitReceive+0x4e>
 8010e06:	69bb      	ldr	r3, [r7, #24]
 8010e08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010e0c:	d106      	bne.n	8010e1c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	689b      	ldr	r3, [r3, #8]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d102      	bne.n	8010e1c <HAL_SPI_TransmitReceive+0x4a>
 8010e16:	7ffb      	ldrb	r3, [r7, #31]
 8010e18:	2b04      	cmp	r3, #4
 8010e1a:	d001      	beq.n	8010e20 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8010e1c:	2302      	movs	r3, #2
 8010e1e:	e1f3      	b.n	8011208 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d005      	beq.n	8010e32 <HAL_SPI_TransmitReceive+0x60>
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d002      	beq.n	8010e32 <HAL_SPI_TransmitReceive+0x60>
 8010e2c:	887b      	ldrh	r3, [r7, #2]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d101      	bne.n	8010e36 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8010e32:	2301      	movs	r3, #1
 8010e34:	e1e8      	b.n	8011208 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8010e3c:	2b01      	cmp	r3, #1
 8010e3e:	d101      	bne.n	8010e44 <HAL_SPI_TransmitReceive+0x72>
 8010e40:	2302      	movs	r3, #2
 8010e42:	e1e1      	b.n	8011208 <HAL_SPI_TransmitReceive+0x436>
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	2201      	movs	r2, #1
 8010e48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8010e52:	b2db      	uxtb	r3, r3
 8010e54:	2b04      	cmp	r3, #4
 8010e56:	d003      	beq.n	8010e60 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	2205      	movs	r2, #5
 8010e5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	2200      	movs	r2, #0
 8010e64:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	687a      	ldr	r2, [r7, #4]
 8010e6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	887a      	ldrh	r2, [r7, #2]
 8010e70:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	887a      	ldrh	r2, [r7, #2]
 8010e78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	68ba      	ldr	r2, [r7, #8]
 8010e80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	887a      	ldrh	r2, [r7, #2]
 8010e86:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	887a      	ldrh	r2, [r7, #2]
 8010e8c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	2200      	movs	r2, #0
 8010e92:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	2200      	movs	r2, #0
 8010e98:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	68db      	ldr	r3, [r3, #12]
 8010e9e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8010ea2:	d802      	bhi.n	8010eaa <HAL_SPI_TransmitReceive+0xd8>
 8010ea4:	8abb      	ldrh	r3, [r7, #20]
 8010ea6:	2b01      	cmp	r3, #1
 8010ea8:	d908      	bls.n	8010ebc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	685a      	ldr	r2, [r3, #4]
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8010eb8:	605a      	str	r2, [r3, #4]
 8010eba:	e007      	b.n	8010ecc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	685a      	ldr	r2, [r3, #4]
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8010eca:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ed6:	2b40      	cmp	r3, #64	@ 0x40
 8010ed8:	d007      	beq.n	8010eea <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	681a      	ldr	r2, [r3, #0]
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010ee8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	68db      	ldr	r3, [r3, #12]
 8010eee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8010ef2:	f240 8083 	bls.w	8010ffc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	685b      	ldr	r3, [r3, #4]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d002      	beq.n	8010f04 <HAL_SPI_TransmitReceive+0x132>
 8010efe:	8afb      	ldrh	r3, [r7, #22]
 8010f00:	2b01      	cmp	r3, #1
 8010f02:	d16f      	bne.n	8010fe4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f08:	881a      	ldrh	r2, [r3, #0]
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f14:	1c9a      	adds	r2, r3, #2
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010f1e:	b29b      	uxth	r3, r3
 8010f20:	3b01      	subs	r3, #1
 8010f22:	b29a      	uxth	r2, r3
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010f28:	e05c      	b.n	8010fe4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	689b      	ldr	r3, [r3, #8]
 8010f30:	f003 0302 	and.w	r3, r3, #2
 8010f34:	2b02      	cmp	r3, #2
 8010f36:	d11b      	bne.n	8010f70 <HAL_SPI_TransmitReceive+0x19e>
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010f3c:	b29b      	uxth	r3, r3
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d016      	beq.n	8010f70 <HAL_SPI_TransmitReceive+0x19e>
 8010f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f44:	2b01      	cmp	r3, #1
 8010f46:	d113      	bne.n	8010f70 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f4c:	881a      	ldrh	r2, [r3, #0]
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f58:	1c9a      	adds	r2, r3, #2
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010f62:	b29b      	uxth	r3, r3
 8010f64:	3b01      	subs	r3, #1
 8010f66:	b29a      	uxth	r2, r3
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	689b      	ldr	r3, [r3, #8]
 8010f76:	f003 0301 	and.w	r3, r3, #1
 8010f7a:	2b01      	cmp	r3, #1
 8010f7c:	d11c      	bne.n	8010fb8 <HAL_SPI_TransmitReceive+0x1e6>
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8010f84:	b29b      	uxth	r3, r3
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d016      	beq.n	8010fb8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	68da      	ldr	r2, [r3, #12]
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f94:	b292      	uxth	r2, r2
 8010f96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f9c:	1c9a      	adds	r2, r3, #2
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8010fa8:	b29b      	uxth	r3, r3
 8010faa:	3b01      	subs	r3, #1
 8010fac:	b29a      	uxth	r2, r3
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010fb4:	2301      	movs	r3, #1
 8010fb6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8010fb8:	f7f9 f826 	bl	800a008 <HAL_GetTick>
 8010fbc:	4602      	mov	r2, r0
 8010fbe:	6a3b      	ldr	r3, [r7, #32]
 8010fc0:	1ad3      	subs	r3, r2, r3
 8010fc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	d80d      	bhi.n	8010fe4 <HAL_SPI_TransmitReceive+0x212>
 8010fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fce:	d009      	beq.n	8010fe4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	2201      	movs	r2, #1
 8010fd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	2200      	movs	r2, #0
 8010fdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8010fe0:	2303      	movs	r3, #3
 8010fe2:	e111      	b.n	8011208 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010fe8:	b29b      	uxth	r3, r3
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d19d      	bne.n	8010f2a <HAL_SPI_TransmitReceive+0x158>
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8010ff4:	b29b      	uxth	r3, r3
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d197      	bne.n	8010f2a <HAL_SPI_TransmitReceive+0x158>
 8010ffa:	e0e5      	b.n	80111c8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	685b      	ldr	r3, [r3, #4]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d003      	beq.n	801100c <HAL_SPI_TransmitReceive+0x23a>
 8011004:	8afb      	ldrh	r3, [r7, #22]
 8011006:	2b01      	cmp	r3, #1
 8011008:	f040 80d1 	bne.w	80111ae <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011010:	b29b      	uxth	r3, r3
 8011012:	2b01      	cmp	r3, #1
 8011014:	d912      	bls.n	801103c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801101a:	881a      	ldrh	r2, [r3, #0]
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011026:	1c9a      	adds	r2, r3, #2
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011030:	b29b      	uxth	r3, r3
 8011032:	3b02      	subs	r3, #2
 8011034:	b29a      	uxth	r2, r3
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801103a:	e0b8      	b.n	80111ae <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	330c      	adds	r3, #12
 8011046:	7812      	ldrb	r2, [r2, #0]
 8011048:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801104e:	1c5a      	adds	r2, r3, #1
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011058:	b29b      	uxth	r3, r3
 801105a:	3b01      	subs	r3, #1
 801105c:	b29a      	uxth	r2, r3
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011062:	e0a4      	b.n	80111ae <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	689b      	ldr	r3, [r3, #8]
 801106a:	f003 0302 	and.w	r3, r3, #2
 801106e:	2b02      	cmp	r3, #2
 8011070:	d134      	bne.n	80110dc <HAL_SPI_TransmitReceive+0x30a>
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011076:	b29b      	uxth	r3, r3
 8011078:	2b00      	cmp	r3, #0
 801107a:	d02f      	beq.n	80110dc <HAL_SPI_TransmitReceive+0x30a>
 801107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801107e:	2b01      	cmp	r3, #1
 8011080:	d12c      	bne.n	80110dc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011086:	b29b      	uxth	r3, r3
 8011088:	2b01      	cmp	r3, #1
 801108a:	d912      	bls.n	80110b2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011090:	881a      	ldrh	r2, [r3, #0]
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801109c:	1c9a      	adds	r2, r3, #2
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80110a6:	b29b      	uxth	r3, r3
 80110a8:	3b02      	subs	r3, #2
 80110aa:	b29a      	uxth	r2, r3
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80110b0:	e012      	b.n	80110d8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	330c      	adds	r3, #12
 80110bc:	7812      	ldrb	r2, [r2, #0]
 80110be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110c4:	1c5a      	adds	r2, r3, #1
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80110ce:	b29b      	uxth	r3, r3
 80110d0:	3b01      	subs	r3, #1
 80110d2:	b29a      	uxth	r2, r3
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80110d8:	2300      	movs	r3, #0
 80110da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	689b      	ldr	r3, [r3, #8]
 80110e2:	f003 0301 	and.w	r3, r3, #1
 80110e6:	2b01      	cmp	r3, #1
 80110e8:	d148      	bne.n	801117c <HAL_SPI_TransmitReceive+0x3aa>
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80110f0:	b29b      	uxth	r3, r3
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d042      	beq.n	801117c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80110fc:	b29b      	uxth	r3, r3
 80110fe:	2b01      	cmp	r3, #1
 8011100:	d923      	bls.n	801114a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	68da      	ldr	r2, [r3, #12]
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801110c:	b292      	uxth	r2, r2
 801110e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011114:	1c9a      	adds	r2, r3, #2
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011120:	b29b      	uxth	r3, r3
 8011122:	3b02      	subs	r3, #2
 8011124:	b29a      	uxth	r2, r3
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011132:	b29b      	uxth	r3, r3
 8011134:	2b01      	cmp	r3, #1
 8011136:	d81f      	bhi.n	8011178 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	685a      	ldr	r2, [r3, #4]
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011146:	605a      	str	r2, [r3, #4]
 8011148:	e016      	b.n	8011178 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	f103 020c 	add.w	r2, r3, #12
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011156:	7812      	ldrb	r2, [r2, #0]
 8011158:	b2d2      	uxtb	r2, r2
 801115a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011160:	1c5a      	adds	r2, r3, #1
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801116c:	b29b      	uxth	r3, r3
 801116e:	3b01      	subs	r3, #1
 8011170:	b29a      	uxth	r2, r3
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011178:	2301      	movs	r3, #1
 801117a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801117c:	f7f8 ff44 	bl	800a008 <HAL_GetTick>
 8011180:	4602      	mov	r2, r0
 8011182:	6a3b      	ldr	r3, [r7, #32]
 8011184:	1ad3      	subs	r3, r2, r3
 8011186:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011188:	429a      	cmp	r2, r3
 801118a:	d803      	bhi.n	8011194 <HAL_SPI_TransmitReceive+0x3c2>
 801118c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801118e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011192:	d102      	bne.n	801119a <HAL_SPI_TransmitReceive+0x3c8>
 8011194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011196:	2b00      	cmp	r3, #0
 8011198:	d109      	bne.n	80111ae <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	2201      	movs	r2, #1
 801119e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	2200      	movs	r2, #0
 80111a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80111aa:	2303      	movs	r3, #3
 80111ac:	e02c      	b.n	8011208 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80111b2:	b29b      	uxth	r3, r3
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	f47f af55 	bne.w	8011064 <HAL_SPI_TransmitReceive+0x292>
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80111c0:	b29b      	uxth	r3, r3
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	f47f af4e 	bne.w	8011064 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80111c8:	6a3a      	ldr	r2, [r7, #32]
 80111ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80111cc:	68f8      	ldr	r0, [r7, #12]
 80111ce:	f000 f995 	bl	80114fc <SPI_EndRxTxTransaction>
 80111d2:	4603      	mov	r3, r0
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d008      	beq.n	80111ea <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	2220      	movs	r2, #32
 80111dc:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	2200      	movs	r2, #0
 80111e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80111e6:	2301      	movs	r3, #1
 80111e8:	e00e      	b.n	8011208 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	2201      	movs	r2, #1
 80111ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	2200      	movs	r2, #0
 80111f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d001      	beq.n	8011206 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8011202:	2301      	movs	r3, #1
 8011204:	e000      	b.n	8011208 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8011206:	2300      	movs	r3, #0
  }
}
 8011208:	4618      	mov	r0, r3
 801120a:	3728      	adds	r7, #40	@ 0x28
 801120c:	46bd      	mov	sp, r7
 801120e:	bd80      	pop	{r7, pc}

08011210 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011210:	b580      	push	{r7, lr}
 8011212:	b088      	sub	sp, #32
 8011214:	af00      	add	r7, sp, #0
 8011216:	60f8      	str	r0, [r7, #12]
 8011218:	60b9      	str	r1, [r7, #8]
 801121a:	603b      	str	r3, [r7, #0]
 801121c:	4613      	mov	r3, r2
 801121e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8011220:	f7f8 fef2 	bl	800a008 <HAL_GetTick>
 8011224:	4602      	mov	r2, r0
 8011226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011228:	1a9b      	subs	r3, r3, r2
 801122a:	683a      	ldr	r2, [r7, #0]
 801122c:	4413      	add	r3, r2
 801122e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8011230:	f7f8 feea 	bl	800a008 <HAL_GetTick>
 8011234:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8011236:	4b39      	ldr	r3, [pc, #228]	@ (801131c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	015b      	lsls	r3, r3, #5
 801123c:	0d1b      	lsrs	r3, r3, #20
 801123e:	69fa      	ldr	r2, [r7, #28]
 8011240:	fb02 f303 	mul.w	r3, r2, r3
 8011244:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011246:	e054      	b.n	80112f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801124e:	d050      	beq.n	80112f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011250:	f7f8 feda 	bl	800a008 <HAL_GetTick>
 8011254:	4602      	mov	r2, r0
 8011256:	69bb      	ldr	r3, [r7, #24]
 8011258:	1ad3      	subs	r3, r2, r3
 801125a:	69fa      	ldr	r2, [r7, #28]
 801125c:	429a      	cmp	r2, r3
 801125e:	d902      	bls.n	8011266 <SPI_WaitFlagStateUntilTimeout+0x56>
 8011260:	69fb      	ldr	r3, [r7, #28]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d13d      	bne.n	80112e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	685a      	ldr	r2, [r3, #4]
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8011274:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	685b      	ldr	r3, [r3, #4]
 801127a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801127e:	d111      	bne.n	80112a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	689b      	ldr	r3, [r3, #8]
 8011284:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011288:	d004      	beq.n	8011294 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	689b      	ldr	r3, [r3, #8]
 801128e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011292:	d107      	bne.n	80112a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	681a      	ldr	r2, [r3, #0]
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80112a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80112ac:	d10f      	bne.n	80112ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	681a      	ldr	r2, [r3, #0]
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80112bc:	601a      	str	r2, [r3, #0]
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	681a      	ldr	r2, [r3, #0]
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80112cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	2201      	movs	r2, #1
 80112d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	2200      	movs	r2, #0
 80112da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80112de:	2303      	movs	r3, #3
 80112e0:	e017      	b.n	8011312 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d101      	bne.n	80112ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80112e8:	2300      	movs	r3, #0
 80112ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80112ec:	697b      	ldr	r3, [r7, #20]
 80112ee:	3b01      	subs	r3, #1
 80112f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	689a      	ldr	r2, [r3, #8]
 80112f8:	68bb      	ldr	r3, [r7, #8]
 80112fa:	4013      	ands	r3, r2
 80112fc:	68ba      	ldr	r2, [r7, #8]
 80112fe:	429a      	cmp	r2, r3
 8011300:	bf0c      	ite	eq
 8011302:	2301      	moveq	r3, #1
 8011304:	2300      	movne	r3, #0
 8011306:	b2db      	uxtb	r3, r3
 8011308:	461a      	mov	r2, r3
 801130a:	79fb      	ldrb	r3, [r7, #7]
 801130c:	429a      	cmp	r2, r3
 801130e:	d19b      	bne.n	8011248 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8011310:	2300      	movs	r3, #0
}
 8011312:	4618      	mov	r0, r3
 8011314:	3720      	adds	r7, #32
 8011316:	46bd      	mov	sp, r7
 8011318:	bd80      	pop	{r7, pc}
 801131a:	bf00      	nop
 801131c:	20000168 	.word	0x20000168

08011320 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b08a      	sub	sp, #40	@ 0x28
 8011324:	af00      	add	r7, sp, #0
 8011326:	60f8      	str	r0, [r7, #12]
 8011328:	60b9      	str	r1, [r7, #8]
 801132a:	607a      	str	r2, [r7, #4]
 801132c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801132e:	2300      	movs	r3, #0
 8011330:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8011332:	f7f8 fe69 	bl	800a008 <HAL_GetTick>
 8011336:	4602      	mov	r2, r0
 8011338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801133a:	1a9b      	subs	r3, r3, r2
 801133c:	683a      	ldr	r2, [r7, #0]
 801133e:	4413      	add	r3, r2
 8011340:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8011342:	f7f8 fe61 	bl	800a008 <HAL_GetTick>
 8011346:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	330c      	adds	r3, #12
 801134e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8011350:	4b3d      	ldr	r3, [pc, #244]	@ (8011448 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8011352:	681a      	ldr	r2, [r3, #0]
 8011354:	4613      	mov	r3, r2
 8011356:	009b      	lsls	r3, r3, #2
 8011358:	4413      	add	r3, r2
 801135a:	00da      	lsls	r2, r3, #3
 801135c:	1ad3      	subs	r3, r2, r3
 801135e:	0d1b      	lsrs	r3, r3, #20
 8011360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011362:	fb02 f303 	mul.w	r3, r2, r3
 8011366:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8011368:	e060      	b.n	801142c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801136a:	68bb      	ldr	r3, [r7, #8]
 801136c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8011370:	d107      	bne.n	8011382 <SPI_WaitFifoStateUntilTimeout+0x62>
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d104      	bne.n	8011382 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8011378:	69fb      	ldr	r3, [r7, #28]
 801137a:	781b      	ldrb	r3, [r3, #0]
 801137c:	b2db      	uxtb	r3, r3
 801137e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8011380:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8011382:	683b      	ldr	r3, [r7, #0]
 8011384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011388:	d050      	beq.n	801142c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801138a:	f7f8 fe3d 	bl	800a008 <HAL_GetTick>
 801138e:	4602      	mov	r2, r0
 8011390:	6a3b      	ldr	r3, [r7, #32]
 8011392:	1ad3      	subs	r3, r2, r3
 8011394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011396:	429a      	cmp	r2, r3
 8011398:	d902      	bls.n	80113a0 <SPI_WaitFifoStateUntilTimeout+0x80>
 801139a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801139c:	2b00      	cmp	r3, #0
 801139e:	d13d      	bne.n	801141c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	685a      	ldr	r2, [r3, #4]
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80113ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	685b      	ldr	r3, [r3, #4]
 80113b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80113b8:	d111      	bne.n	80113de <SPI_WaitFifoStateUntilTimeout+0xbe>
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	689b      	ldr	r3, [r3, #8]
 80113be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80113c2:	d004      	beq.n	80113ce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	689b      	ldr	r3, [r3, #8]
 80113c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80113cc:	d107      	bne.n	80113de <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	681a      	ldr	r2, [r3, #0]
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80113dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80113e6:	d10f      	bne.n	8011408 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	681a      	ldr	r2, [r3, #0]
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80113f6:	601a      	str	r2, [r3, #0]
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	681a      	ldr	r2, [r3, #0]
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8011406:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	2201      	movs	r2, #1
 801140c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	2200      	movs	r2, #0
 8011414:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8011418:	2303      	movs	r3, #3
 801141a:	e010      	b.n	801143e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801141c:	69bb      	ldr	r3, [r7, #24]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d101      	bne.n	8011426 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8011422:	2300      	movs	r3, #0
 8011424:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8011426:	69bb      	ldr	r3, [r7, #24]
 8011428:	3b01      	subs	r3, #1
 801142a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	689a      	ldr	r2, [r3, #8]
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	4013      	ands	r3, r2
 8011436:	687a      	ldr	r2, [r7, #4]
 8011438:	429a      	cmp	r2, r3
 801143a:	d196      	bne.n	801136a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801143c:	2300      	movs	r3, #0
}
 801143e:	4618      	mov	r0, r3
 8011440:	3728      	adds	r7, #40	@ 0x28
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}
 8011446:	bf00      	nop
 8011448:	20000168 	.word	0x20000168

0801144c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b086      	sub	sp, #24
 8011450:	af02      	add	r7, sp, #8
 8011452:	60f8      	str	r0, [r7, #12]
 8011454:	60b9      	str	r1, [r7, #8]
 8011456:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	685b      	ldr	r3, [r3, #4]
 801145c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011460:	d111      	bne.n	8011486 <SPI_EndRxTransaction+0x3a>
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	689b      	ldr	r3, [r3, #8]
 8011466:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801146a:	d004      	beq.n	8011476 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	689b      	ldr	r3, [r3, #8]
 8011470:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011474:	d107      	bne.n	8011486 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	681a      	ldr	r2, [r3, #0]
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011484:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	9300      	str	r3, [sp, #0]
 801148a:	68bb      	ldr	r3, [r7, #8]
 801148c:	2200      	movs	r2, #0
 801148e:	2180      	movs	r1, #128	@ 0x80
 8011490:	68f8      	ldr	r0, [r7, #12]
 8011492:	f7ff febd 	bl	8011210 <SPI_WaitFlagStateUntilTimeout>
 8011496:	4603      	mov	r3, r0
 8011498:	2b00      	cmp	r3, #0
 801149a:	d007      	beq.n	80114ac <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80114a0:	f043 0220 	orr.w	r2, r3, #32
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80114a8:	2303      	movs	r3, #3
 80114aa:	e023      	b.n	80114f4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	685b      	ldr	r3, [r3, #4]
 80114b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80114b4:	d11d      	bne.n	80114f2 <SPI_EndRxTransaction+0xa6>
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	689b      	ldr	r3, [r3, #8]
 80114ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80114be:	d004      	beq.n	80114ca <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	689b      	ldr	r3, [r3, #8]
 80114c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80114c8:	d113      	bne.n	80114f2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	9300      	str	r3, [sp, #0]
 80114ce:	68bb      	ldr	r3, [r7, #8]
 80114d0:	2200      	movs	r2, #0
 80114d2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80114d6:	68f8      	ldr	r0, [r7, #12]
 80114d8:	f7ff ff22 	bl	8011320 <SPI_WaitFifoStateUntilTimeout>
 80114dc:	4603      	mov	r3, r0
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d007      	beq.n	80114f2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80114e6:	f043 0220 	orr.w	r2, r3, #32
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80114ee:	2303      	movs	r3, #3
 80114f0:	e000      	b.n	80114f4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80114f2:	2300      	movs	r3, #0
}
 80114f4:	4618      	mov	r0, r3
 80114f6:	3710      	adds	r7, #16
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bd80      	pop	{r7, pc}

080114fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b086      	sub	sp, #24
 8011500:	af02      	add	r7, sp, #8
 8011502:	60f8      	str	r0, [r7, #12]
 8011504:	60b9      	str	r1, [r7, #8]
 8011506:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	9300      	str	r3, [sp, #0]
 801150c:	68bb      	ldr	r3, [r7, #8]
 801150e:	2200      	movs	r2, #0
 8011510:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8011514:	68f8      	ldr	r0, [r7, #12]
 8011516:	f7ff ff03 	bl	8011320 <SPI_WaitFifoStateUntilTimeout>
 801151a:	4603      	mov	r3, r0
 801151c:	2b00      	cmp	r3, #0
 801151e:	d007      	beq.n	8011530 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011524:	f043 0220 	orr.w	r2, r3, #32
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801152c:	2303      	movs	r3, #3
 801152e:	e027      	b.n	8011580 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	9300      	str	r3, [sp, #0]
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	2200      	movs	r2, #0
 8011538:	2180      	movs	r1, #128	@ 0x80
 801153a:	68f8      	ldr	r0, [r7, #12]
 801153c:	f7ff fe68 	bl	8011210 <SPI_WaitFlagStateUntilTimeout>
 8011540:	4603      	mov	r3, r0
 8011542:	2b00      	cmp	r3, #0
 8011544:	d007      	beq.n	8011556 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801154a:	f043 0220 	orr.w	r2, r3, #32
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8011552:	2303      	movs	r3, #3
 8011554:	e014      	b.n	8011580 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	9300      	str	r3, [sp, #0]
 801155a:	68bb      	ldr	r3, [r7, #8]
 801155c:	2200      	movs	r2, #0
 801155e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8011562:	68f8      	ldr	r0, [r7, #12]
 8011564:	f7ff fedc 	bl	8011320 <SPI_WaitFifoStateUntilTimeout>
 8011568:	4603      	mov	r3, r0
 801156a:	2b00      	cmp	r3, #0
 801156c:	d007      	beq.n	801157e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011572:	f043 0220 	orr.w	r2, r3, #32
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801157a:	2303      	movs	r3, #3
 801157c:	e000      	b.n	8011580 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801157e:	2300      	movs	r3, #0
}
 8011580:	4618      	mov	r0, r3
 8011582:	3710      	adds	r7, #16
 8011584:	46bd      	mov	sp, r7
 8011586:	bd80      	pop	{r7, pc}

08011588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b082      	sub	sp, #8
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d101      	bne.n	801159a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011596:	2301      	movs	r3, #1
 8011598:	e049      	b.n	801162e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80115a0:	b2db      	uxtb	r3, r3
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d106      	bne.n	80115b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2200      	movs	r2, #0
 80115aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80115ae:	6878      	ldr	r0, [r7, #4]
 80115b0:	f7f5 f9d8 	bl	8006964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	2202      	movs	r2, #2
 80115b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681a      	ldr	r2, [r3, #0]
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	3304      	adds	r3, #4
 80115c4:	4619      	mov	r1, r3
 80115c6:	4610      	mov	r0, r2
 80115c8:	f001 fa58 	bl	8012a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2201      	movs	r2, #1
 80115d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2201      	movs	r2, #1
 80115d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2201      	movs	r2, #1
 80115e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	2201      	movs	r2, #1
 80115e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	2201      	movs	r2, #1
 80115f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	2201      	movs	r2, #1
 80115f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	2201      	movs	r2, #1
 8011600:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2201      	movs	r2, #1
 8011608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	2201      	movs	r2, #1
 8011610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	2201      	movs	r2, #1
 8011618:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	2201      	movs	r2, #1
 8011620:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	2201      	movs	r2, #1
 8011628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801162c:	2300      	movs	r3, #0
}
 801162e:	4618      	mov	r0, r3
 8011630:	3708      	adds	r7, #8
 8011632:	46bd      	mov	sp, r7
 8011634:	bd80      	pop	{r7, pc}

08011636 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8011636:	b580      	push	{r7, lr}
 8011638:	b082      	sub	sp, #8
 801163a:	af00      	add	r7, sp, #0
 801163c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d101      	bne.n	8011648 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8011644:	2301      	movs	r3, #1
 8011646:	e049      	b.n	80116dc <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801164e:	b2db      	uxtb	r3, r3
 8011650:	2b00      	cmp	r3, #0
 8011652:	d106      	bne.n	8011662 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	2200      	movs	r2, #0
 8011658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 801165c:	6878      	ldr	r0, [r7, #4]
 801165e:	f7f5 f921 	bl	80068a4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	2202      	movs	r2, #2
 8011666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681a      	ldr	r2, [r3, #0]
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	3304      	adds	r3, #4
 8011672:	4619      	mov	r1, r3
 8011674:	4610      	mov	r0, r2
 8011676:	f001 fa01 	bl	8012a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2201      	movs	r2, #1
 801167e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	2201      	movs	r2, #1
 8011686:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	2201      	movs	r2, #1
 801168e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2201      	movs	r2, #1
 8011696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	2201      	movs	r2, #1
 801169e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	2201      	movs	r2, #1
 80116a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	2201      	movs	r2, #1
 80116ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	2201      	movs	r2, #1
 80116b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	2201      	movs	r2, #1
 80116be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	2201      	movs	r2, #1
 80116c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2201      	movs	r2, #1
 80116ce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	2201      	movs	r2, #1
 80116d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80116da:	2300      	movs	r3, #0
}
 80116dc:	4618      	mov	r0, r3
 80116de:	3708      	adds	r7, #8
 80116e0:	46bd      	mov	sp, r7
 80116e2:	bd80      	pop	{r7, pc}

080116e4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b084      	sub	sp, #16
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
 80116ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80116ee:	2300      	movs	r3, #0
 80116f0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d109      	bne.n	801170c <HAL_TIM_OC_Start_IT+0x28>
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80116fe:	b2db      	uxtb	r3, r3
 8011700:	2b01      	cmp	r3, #1
 8011702:	bf14      	ite	ne
 8011704:	2301      	movne	r3, #1
 8011706:	2300      	moveq	r3, #0
 8011708:	b2db      	uxtb	r3, r3
 801170a:	e03c      	b.n	8011786 <HAL_TIM_OC_Start_IT+0xa2>
 801170c:	683b      	ldr	r3, [r7, #0]
 801170e:	2b04      	cmp	r3, #4
 8011710:	d109      	bne.n	8011726 <HAL_TIM_OC_Start_IT+0x42>
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8011718:	b2db      	uxtb	r3, r3
 801171a:	2b01      	cmp	r3, #1
 801171c:	bf14      	ite	ne
 801171e:	2301      	movne	r3, #1
 8011720:	2300      	moveq	r3, #0
 8011722:	b2db      	uxtb	r3, r3
 8011724:	e02f      	b.n	8011786 <HAL_TIM_OC_Start_IT+0xa2>
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	2b08      	cmp	r3, #8
 801172a:	d109      	bne.n	8011740 <HAL_TIM_OC_Start_IT+0x5c>
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011732:	b2db      	uxtb	r3, r3
 8011734:	2b01      	cmp	r3, #1
 8011736:	bf14      	ite	ne
 8011738:	2301      	movne	r3, #1
 801173a:	2300      	moveq	r3, #0
 801173c:	b2db      	uxtb	r3, r3
 801173e:	e022      	b.n	8011786 <HAL_TIM_OC_Start_IT+0xa2>
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	2b0c      	cmp	r3, #12
 8011744:	d109      	bne.n	801175a <HAL_TIM_OC_Start_IT+0x76>
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801174c:	b2db      	uxtb	r3, r3
 801174e:	2b01      	cmp	r3, #1
 8011750:	bf14      	ite	ne
 8011752:	2301      	movne	r3, #1
 8011754:	2300      	moveq	r3, #0
 8011756:	b2db      	uxtb	r3, r3
 8011758:	e015      	b.n	8011786 <HAL_TIM_OC_Start_IT+0xa2>
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	2b10      	cmp	r3, #16
 801175e:	d109      	bne.n	8011774 <HAL_TIM_OC_Start_IT+0x90>
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011766:	b2db      	uxtb	r3, r3
 8011768:	2b01      	cmp	r3, #1
 801176a:	bf14      	ite	ne
 801176c:	2301      	movne	r3, #1
 801176e:	2300      	moveq	r3, #0
 8011770:	b2db      	uxtb	r3, r3
 8011772:	e008      	b.n	8011786 <HAL_TIM_OC_Start_IT+0xa2>
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801177a:	b2db      	uxtb	r3, r3
 801177c:	2b01      	cmp	r3, #1
 801177e:	bf14      	ite	ne
 8011780:	2301      	movne	r3, #1
 8011782:	2300      	moveq	r3, #0
 8011784:	b2db      	uxtb	r3, r3
 8011786:	2b00      	cmp	r3, #0
 8011788:	d001      	beq.n	801178e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 801178a:	2301      	movs	r3, #1
 801178c:	e0e7      	b.n	801195e <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801178e:	683b      	ldr	r3, [r7, #0]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d104      	bne.n	801179e <HAL_TIM_OC_Start_IT+0xba>
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	2202      	movs	r2, #2
 8011798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801179c:	e023      	b.n	80117e6 <HAL_TIM_OC_Start_IT+0x102>
 801179e:	683b      	ldr	r3, [r7, #0]
 80117a0:	2b04      	cmp	r3, #4
 80117a2:	d104      	bne.n	80117ae <HAL_TIM_OC_Start_IT+0xca>
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2202      	movs	r2, #2
 80117a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80117ac:	e01b      	b.n	80117e6 <HAL_TIM_OC_Start_IT+0x102>
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	2b08      	cmp	r3, #8
 80117b2:	d104      	bne.n	80117be <HAL_TIM_OC_Start_IT+0xda>
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	2202      	movs	r2, #2
 80117b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80117bc:	e013      	b.n	80117e6 <HAL_TIM_OC_Start_IT+0x102>
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	2b0c      	cmp	r3, #12
 80117c2:	d104      	bne.n	80117ce <HAL_TIM_OC_Start_IT+0xea>
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	2202      	movs	r2, #2
 80117c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80117cc:	e00b      	b.n	80117e6 <HAL_TIM_OC_Start_IT+0x102>
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	2b10      	cmp	r3, #16
 80117d2:	d104      	bne.n	80117de <HAL_TIM_OC_Start_IT+0xfa>
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	2202      	movs	r2, #2
 80117d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80117dc:	e003      	b.n	80117e6 <HAL_TIM_OC_Start_IT+0x102>
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	2202      	movs	r2, #2
 80117e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80117e6:	683b      	ldr	r3, [r7, #0]
 80117e8:	2b0c      	cmp	r3, #12
 80117ea:	d841      	bhi.n	8011870 <HAL_TIM_OC_Start_IT+0x18c>
 80117ec:	a201      	add	r2, pc, #4	@ (adr r2, 80117f4 <HAL_TIM_OC_Start_IT+0x110>)
 80117ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117f2:	bf00      	nop
 80117f4:	08011829 	.word	0x08011829
 80117f8:	08011871 	.word	0x08011871
 80117fc:	08011871 	.word	0x08011871
 8011800:	08011871 	.word	0x08011871
 8011804:	0801183b 	.word	0x0801183b
 8011808:	08011871 	.word	0x08011871
 801180c:	08011871 	.word	0x08011871
 8011810:	08011871 	.word	0x08011871
 8011814:	0801184d 	.word	0x0801184d
 8011818:	08011871 	.word	0x08011871
 801181c:	08011871 	.word	0x08011871
 8011820:	08011871 	.word	0x08011871
 8011824:	0801185f 	.word	0x0801185f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	68da      	ldr	r2, [r3, #12]
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	f042 0202 	orr.w	r2, r2, #2
 8011836:	60da      	str	r2, [r3, #12]
      break;
 8011838:	e01d      	b.n	8011876 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	68da      	ldr	r2, [r3, #12]
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	f042 0204 	orr.w	r2, r2, #4
 8011848:	60da      	str	r2, [r3, #12]
      break;
 801184a:	e014      	b.n	8011876 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	68da      	ldr	r2, [r3, #12]
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	f042 0208 	orr.w	r2, r2, #8
 801185a:	60da      	str	r2, [r3, #12]
      break;
 801185c:	e00b      	b.n	8011876 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	68da      	ldr	r2, [r3, #12]
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	f042 0210 	orr.w	r2, r2, #16
 801186c:	60da      	str	r2, [r3, #12]
      break;
 801186e:	e002      	b.n	8011876 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8011870:	2301      	movs	r3, #1
 8011872:	73fb      	strb	r3, [r7, #15]
      break;
 8011874:	bf00      	nop
  }

  if (status == HAL_OK)
 8011876:	7bfb      	ldrb	r3, [r7, #15]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d16f      	bne.n	801195c <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	2201      	movs	r2, #1
 8011882:	6839      	ldr	r1, [r7, #0]
 8011884:	4618      	mov	r0, r3
 8011886:	f001 fec7 	bl	8013618 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	4a36      	ldr	r2, [pc, #216]	@ (8011968 <HAL_TIM_OC_Start_IT+0x284>)
 8011890:	4293      	cmp	r3, r2
 8011892:	d013      	beq.n	80118bc <HAL_TIM_OC_Start_IT+0x1d8>
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	4a34      	ldr	r2, [pc, #208]	@ (801196c <HAL_TIM_OC_Start_IT+0x288>)
 801189a:	4293      	cmp	r3, r2
 801189c:	d00e      	beq.n	80118bc <HAL_TIM_OC_Start_IT+0x1d8>
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	4a33      	ldr	r2, [pc, #204]	@ (8011970 <HAL_TIM_OC_Start_IT+0x28c>)
 80118a4:	4293      	cmp	r3, r2
 80118a6:	d009      	beq.n	80118bc <HAL_TIM_OC_Start_IT+0x1d8>
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	4a31      	ldr	r2, [pc, #196]	@ (8011974 <HAL_TIM_OC_Start_IT+0x290>)
 80118ae:	4293      	cmp	r3, r2
 80118b0:	d004      	beq.n	80118bc <HAL_TIM_OC_Start_IT+0x1d8>
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	4a30      	ldr	r2, [pc, #192]	@ (8011978 <HAL_TIM_OC_Start_IT+0x294>)
 80118b8:	4293      	cmp	r3, r2
 80118ba:	d101      	bne.n	80118c0 <HAL_TIM_OC_Start_IT+0x1dc>
 80118bc:	2301      	movs	r3, #1
 80118be:	e000      	b.n	80118c2 <HAL_TIM_OC_Start_IT+0x1de>
 80118c0:	2300      	movs	r3, #0
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d007      	beq.n	80118d6 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80118d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	4a23      	ldr	r2, [pc, #140]	@ (8011968 <HAL_TIM_OC_Start_IT+0x284>)
 80118dc:	4293      	cmp	r3, r2
 80118de:	d01d      	beq.n	801191c <HAL_TIM_OC_Start_IT+0x238>
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80118e8:	d018      	beq.n	801191c <HAL_TIM_OC_Start_IT+0x238>
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	4a23      	ldr	r2, [pc, #140]	@ (801197c <HAL_TIM_OC_Start_IT+0x298>)
 80118f0:	4293      	cmp	r3, r2
 80118f2:	d013      	beq.n	801191c <HAL_TIM_OC_Start_IT+0x238>
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	4a21      	ldr	r2, [pc, #132]	@ (8011980 <HAL_TIM_OC_Start_IT+0x29c>)
 80118fa:	4293      	cmp	r3, r2
 80118fc:	d00e      	beq.n	801191c <HAL_TIM_OC_Start_IT+0x238>
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	4a20      	ldr	r2, [pc, #128]	@ (8011984 <HAL_TIM_OC_Start_IT+0x2a0>)
 8011904:	4293      	cmp	r3, r2
 8011906:	d009      	beq.n	801191c <HAL_TIM_OC_Start_IT+0x238>
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	4a17      	ldr	r2, [pc, #92]	@ (801196c <HAL_TIM_OC_Start_IT+0x288>)
 801190e:	4293      	cmp	r3, r2
 8011910:	d004      	beq.n	801191c <HAL_TIM_OC_Start_IT+0x238>
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	4a16      	ldr	r2, [pc, #88]	@ (8011970 <HAL_TIM_OC_Start_IT+0x28c>)
 8011918:	4293      	cmp	r3, r2
 801191a:	d115      	bne.n	8011948 <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	689a      	ldr	r2, [r3, #8]
 8011922:	4b19      	ldr	r3, [pc, #100]	@ (8011988 <HAL_TIM_OC_Start_IT+0x2a4>)
 8011924:	4013      	ands	r3, r2
 8011926:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011928:	68bb      	ldr	r3, [r7, #8]
 801192a:	2b06      	cmp	r3, #6
 801192c:	d015      	beq.n	801195a <HAL_TIM_OC_Start_IT+0x276>
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011934:	d011      	beq.n	801195a <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	681a      	ldr	r2, [r3, #0]
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	f042 0201 	orr.w	r2, r2, #1
 8011944:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011946:	e008      	b.n	801195a <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	681a      	ldr	r2, [r3, #0]
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	f042 0201 	orr.w	r2, r2, #1
 8011956:	601a      	str	r2, [r3, #0]
 8011958:	e000      	b.n	801195c <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801195a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 801195c:	7bfb      	ldrb	r3, [r7, #15]
}
 801195e:	4618      	mov	r0, r3
 8011960:	3710      	adds	r7, #16
 8011962:	46bd      	mov	sp, r7
 8011964:	bd80      	pop	{r7, pc}
 8011966:	bf00      	nop
 8011968:	40012c00 	.word	0x40012c00
 801196c:	40013400 	.word	0x40013400
 8011970:	40014000 	.word	0x40014000
 8011974:	40014400 	.word	0x40014400
 8011978:	40014800 	.word	0x40014800
 801197c:	40000400 	.word	0x40000400
 8011980:	40000800 	.word	0x40000800
 8011984:	40000c00 	.word	0x40000c00
 8011988:	00010007 	.word	0x00010007

0801198c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b084      	sub	sp, #16
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
 8011994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011996:	2300      	movs	r3, #0
 8011998:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	2b0c      	cmp	r3, #12
 801199e:	d841      	bhi.n	8011a24 <HAL_TIM_OC_Stop_IT+0x98>
 80119a0:	a201      	add	r2, pc, #4	@ (adr r2, 80119a8 <HAL_TIM_OC_Stop_IT+0x1c>)
 80119a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119a6:	bf00      	nop
 80119a8:	080119dd 	.word	0x080119dd
 80119ac:	08011a25 	.word	0x08011a25
 80119b0:	08011a25 	.word	0x08011a25
 80119b4:	08011a25 	.word	0x08011a25
 80119b8:	080119ef 	.word	0x080119ef
 80119bc:	08011a25 	.word	0x08011a25
 80119c0:	08011a25 	.word	0x08011a25
 80119c4:	08011a25 	.word	0x08011a25
 80119c8:	08011a01 	.word	0x08011a01
 80119cc:	08011a25 	.word	0x08011a25
 80119d0:	08011a25 	.word	0x08011a25
 80119d4:	08011a25 	.word	0x08011a25
 80119d8:	08011a13 	.word	0x08011a13
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	68da      	ldr	r2, [r3, #12]
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	f022 0202 	bic.w	r2, r2, #2
 80119ea:	60da      	str	r2, [r3, #12]
      break;
 80119ec:	e01d      	b.n	8011a2a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	68da      	ldr	r2, [r3, #12]
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	f022 0204 	bic.w	r2, r2, #4
 80119fc:	60da      	str	r2, [r3, #12]
      break;
 80119fe:	e014      	b.n	8011a2a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	68da      	ldr	r2, [r3, #12]
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	f022 0208 	bic.w	r2, r2, #8
 8011a0e:	60da      	str	r2, [r3, #12]
      break;
 8011a10:	e00b      	b.n	8011a2a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	68da      	ldr	r2, [r3, #12]
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	f022 0210 	bic.w	r2, r2, #16
 8011a20:	60da      	str	r2, [r3, #12]
      break;
 8011a22:	e002      	b.n	8011a2a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8011a24:	2301      	movs	r3, #1
 8011a26:	73fb      	strb	r3, [r7, #15]
      break;
 8011a28:	bf00      	nop
  }

  if (status == HAL_OK)
 8011a2a:	7bfb      	ldrb	r3, [r7, #15]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	f040 8081 	bne.w	8011b34 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	2200      	movs	r2, #0
 8011a38:	6839      	ldr	r1, [r7, #0]
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f001 fdec 	bl	8013618 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	4a3e      	ldr	r2, [pc, #248]	@ (8011b40 <HAL_TIM_OC_Stop_IT+0x1b4>)
 8011a46:	4293      	cmp	r3, r2
 8011a48:	d013      	beq.n	8011a72 <HAL_TIM_OC_Stop_IT+0xe6>
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	4a3d      	ldr	r2, [pc, #244]	@ (8011b44 <HAL_TIM_OC_Stop_IT+0x1b8>)
 8011a50:	4293      	cmp	r3, r2
 8011a52:	d00e      	beq.n	8011a72 <HAL_TIM_OC_Stop_IT+0xe6>
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	4a3b      	ldr	r2, [pc, #236]	@ (8011b48 <HAL_TIM_OC_Stop_IT+0x1bc>)
 8011a5a:	4293      	cmp	r3, r2
 8011a5c:	d009      	beq.n	8011a72 <HAL_TIM_OC_Stop_IT+0xe6>
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	4a3a      	ldr	r2, [pc, #232]	@ (8011b4c <HAL_TIM_OC_Stop_IT+0x1c0>)
 8011a64:	4293      	cmp	r3, r2
 8011a66:	d004      	beq.n	8011a72 <HAL_TIM_OC_Stop_IT+0xe6>
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	4a38      	ldr	r2, [pc, #224]	@ (8011b50 <HAL_TIM_OC_Stop_IT+0x1c4>)
 8011a6e:	4293      	cmp	r3, r2
 8011a70:	d101      	bne.n	8011a76 <HAL_TIM_OC_Stop_IT+0xea>
 8011a72:	2301      	movs	r3, #1
 8011a74:	e000      	b.n	8011a78 <HAL_TIM_OC_Stop_IT+0xec>
 8011a76:	2300      	movs	r3, #0
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d017      	beq.n	8011aac <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	6a1a      	ldr	r2, [r3, #32]
 8011a82:	f241 1311 	movw	r3, #4369	@ 0x1111
 8011a86:	4013      	ands	r3, r2
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d10f      	bne.n	8011aac <HAL_TIM_OC_Stop_IT+0x120>
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	6a1a      	ldr	r2, [r3, #32]
 8011a92:	f240 4344 	movw	r3, #1092	@ 0x444
 8011a96:	4013      	ands	r3, r2
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d107      	bne.n	8011aac <HAL_TIM_OC_Stop_IT+0x120>
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011aaa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	6a1a      	ldr	r2, [r3, #32]
 8011ab2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8011ab6:	4013      	ands	r3, r2
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d10f      	bne.n	8011adc <HAL_TIM_OC_Stop_IT+0x150>
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	6a1a      	ldr	r2, [r3, #32]
 8011ac2:	f240 4344 	movw	r3, #1092	@ 0x444
 8011ac6:	4013      	ands	r3, r2
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d107      	bne.n	8011adc <HAL_TIM_OC_Stop_IT+0x150>
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	681a      	ldr	r2, [r3, #0]
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	f022 0201 	bic.w	r2, r2, #1
 8011ada:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d104      	bne.n	8011aec <HAL_TIM_OC_Stop_IT+0x160>
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	2201      	movs	r2, #1
 8011ae6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011aea:	e023      	b.n	8011b34 <HAL_TIM_OC_Stop_IT+0x1a8>
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	2b04      	cmp	r3, #4
 8011af0:	d104      	bne.n	8011afc <HAL_TIM_OC_Stop_IT+0x170>
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	2201      	movs	r2, #1
 8011af6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011afa:	e01b      	b.n	8011b34 <HAL_TIM_OC_Stop_IT+0x1a8>
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	2b08      	cmp	r3, #8
 8011b00:	d104      	bne.n	8011b0c <HAL_TIM_OC_Stop_IT+0x180>
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	2201      	movs	r2, #1
 8011b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011b0a:	e013      	b.n	8011b34 <HAL_TIM_OC_Stop_IT+0x1a8>
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	2b0c      	cmp	r3, #12
 8011b10:	d104      	bne.n	8011b1c <HAL_TIM_OC_Stop_IT+0x190>
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2201      	movs	r2, #1
 8011b16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011b1a:	e00b      	b.n	8011b34 <HAL_TIM_OC_Stop_IT+0x1a8>
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	2b10      	cmp	r3, #16
 8011b20:	d104      	bne.n	8011b2c <HAL_TIM_OC_Stop_IT+0x1a0>
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	2201      	movs	r2, #1
 8011b26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011b2a:	e003      	b.n	8011b34 <HAL_TIM_OC_Stop_IT+0x1a8>
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	2201      	movs	r2, #1
 8011b30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8011b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b36:	4618      	mov	r0, r3
 8011b38:	3710      	adds	r7, #16
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	bd80      	pop	{r7, pc}
 8011b3e:	bf00      	nop
 8011b40:	40012c00 	.word	0x40012c00
 8011b44:	40013400 	.word	0x40013400
 8011b48:	40014000 	.word	0x40014000
 8011b4c:	40014400 	.word	0x40014400
 8011b50:	40014800 	.word	0x40014800

08011b54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b082      	sub	sp, #8
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d101      	bne.n	8011b66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011b62:	2301      	movs	r3, #1
 8011b64:	e049      	b.n	8011bfa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011b6c:	b2db      	uxtb	r3, r3
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d106      	bne.n	8011b80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	2200      	movs	r2, #0
 8011b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011b7a:	6878      	ldr	r0, [r7, #4]
 8011b7c:	f000 f841 	bl	8011c02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	2202      	movs	r2, #2
 8011b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	681a      	ldr	r2, [r3, #0]
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	3304      	adds	r3, #4
 8011b90:	4619      	mov	r1, r3
 8011b92:	4610      	mov	r0, r2
 8011b94:	f000 ff72 	bl	8012a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	2201      	movs	r2, #1
 8011b9c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	2201      	movs	r2, #1
 8011ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	2201      	movs	r2, #1
 8011bac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	2201      	movs	r2, #1
 8011bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	2201      	movs	r2, #1
 8011bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	2201      	movs	r2, #1
 8011bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	2201      	movs	r2, #1
 8011bcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	2201      	movs	r2, #1
 8011bd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	2201      	movs	r2, #1
 8011bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2201      	movs	r2, #1
 8011be4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	2201      	movs	r2, #1
 8011bec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	2201      	movs	r2, #1
 8011bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8011bf8:	2300      	movs	r3, #0
}
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	3708      	adds	r7, #8
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bd80      	pop	{r7, pc}

08011c02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8011c02:	b480      	push	{r7}
 8011c04:	b083      	sub	sp, #12
 8011c06:	af00      	add	r7, sp, #0
 8011c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8011c0a:	bf00      	nop
 8011c0c:	370c      	adds	r7, #12
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c14:	4770      	bx	lr
	...

08011c18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b084      	sub	sp, #16
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
 8011c20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d109      	bne.n	8011c3c <HAL_TIM_PWM_Start+0x24>
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011c2e:	b2db      	uxtb	r3, r3
 8011c30:	2b01      	cmp	r3, #1
 8011c32:	bf14      	ite	ne
 8011c34:	2301      	movne	r3, #1
 8011c36:	2300      	moveq	r3, #0
 8011c38:	b2db      	uxtb	r3, r3
 8011c3a:	e03c      	b.n	8011cb6 <HAL_TIM_PWM_Start+0x9e>
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	2b04      	cmp	r3, #4
 8011c40:	d109      	bne.n	8011c56 <HAL_TIM_PWM_Start+0x3e>
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8011c48:	b2db      	uxtb	r3, r3
 8011c4a:	2b01      	cmp	r3, #1
 8011c4c:	bf14      	ite	ne
 8011c4e:	2301      	movne	r3, #1
 8011c50:	2300      	moveq	r3, #0
 8011c52:	b2db      	uxtb	r3, r3
 8011c54:	e02f      	b.n	8011cb6 <HAL_TIM_PWM_Start+0x9e>
 8011c56:	683b      	ldr	r3, [r7, #0]
 8011c58:	2b08      	cmp	r3, #8
 8011c5a:	d109      	bne.n	8011c70 <HAL_TIM_PWM_Start+0x58>
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011c62:	b2db      	uxtb	r3, r3
 8011c64:	2b01      	cmp	r3, #1
 8011c66:	bf14      	ite	ne
 8011c68:	2301      	movne	r3, #1
 8011c6a:	2300      	moveq	r3, #0
 8011c6c:	b2db      	uxtb	r3, r3
 8011c6e:	e022      	b.n	8011cb6 <HAL_TIM_PWM_Start+0x9e>
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	2b0c      	cmp	r3, #12
 8011c74:	d109      	bne.n	8011c8a <HAL_TIM_PWM_Start+0x72>
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011c7c:	b2db      	uxtb	r3, r3
 8011c7e:	2b01      	cmp	r3, #1
 8011c80:	bf14      	ite	ne
 8011c82:	2301      	movne	r3, #1
 8011c84:	2300      	moveq	r3, #0
 8011c86:	b2db      	uxtb	r3, r3
 8011c88:	e015      	b.n	8011cb6 <HAL_TIM_PWM_Start+0x9e>
 8011c8a:	683b      	ldr	r3, [r7, #0]
 8011c8c:	2b10      	cmp	r3, #16
 8011c8e:	d109      	bne.n	8011ca4 <HAL_TIM_PWM_Start+0x8c>
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011c96:	b2db      	uxtb	r3, r3
 8011c98:	2b01      	cmp	r3, #1
 8011c9a:	bf14      	ite	ne
 8011c9c:	2301      	movne	r3, #1
 8011c9e:	2300      	moveq	r3, #0
 8011ca0:	b2db      	uxtb	r3, r3
 8011ca2:	e008      	b.n	8011cb6 <HAL_TIM_PWM_Start+0x9e>
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011caa:	b2db      	uxtb	r3, r3
 8011cac:	2b01      	cmp	r3, #1
 8011cae:	bf14      	ite	ne
 8011cb0:	2301      	movne	r3, #1
 8011cb2:	2300      	moveq	r3, #0
 8011cb4:	b2db      	uxtb	r3, r3
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d001      	beq.n	8011cbe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8011cba:	2301      	movs	r3, #1
 8011cbc:	e09c      	b.n	8011df8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d104      	bne.n	8011cce <HAL_TIM_PWM_Start+0xb6>
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2202      	movs	r2, #2
 8011cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011ccc:	e023      	b.n	8011d16 <HAL_TIM_PWM_Start+0xfe>
 8011cce:	683b      	ldr	r3, [r7, #0]
 8011cd0:	2b04      	cmp	r3, #4
 8011cd2:	d104      	bne.n	8011cde <HAL_TIM_PWM_Start+0xc6>
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2202      	movs	r2, #2
 8011cd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011cdc:	e01b      	b.n	8011d16 <HAL_TIM_PWM_Start+0xfe>
 8011cde:	683b      	ldr	r3, [r7, #0]
 8011ce0:	2b08      	cmp	r3, #8
 8011ce2:	d104      	bne.n	8011cee <HAL_TIM_PWM_Start+0xd6>
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	2202      	movs	r2, #2
 8011ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011cec:	e013      	b.n	8011d16 <HAL_TIM_PWM_Start+0xfe>
 8011cee:	683b      	ldr	r3, [r7, #0]
 8011cf0:	2b0c      	cmp	r3, #12
 8011cf2:	d104      	bne.n	8011cfe <HAL_TIM_PWM_Start+0xe6>
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2202      	movs	r2, #2
 8011cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011cfc:	e00b      	b.n	8011d16 <HAL_TIM_PWM_Start+0xfe>
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	2b10      	cmp	r3, #16
 8011d02:	d104      	bne.n	8011d0e <HAL_TIM_PWM_Start+0xf6>
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	2202      	movs	r2, #2
 8011d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011d0c:	e003      	b.n	8011d16 <HAL_TIM_PWM_Start+0xfe>
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	2202      	movs	r2, #2
 8011d12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	2201      	movs	r2, #1
 8011d1c:	6839      	ldr	r1, [r7, #0]
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f001 fc7a 	bl	8013618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	4a35      	ldr	r2, [pc, #212]	@ (8011e00 <HAL_TIM_PWM_Start+0x1e8>)
 8011d2a:	4293      	cmp	r3, r2
 8011d2c:	d013      	beq.n	8011d56 <HAL_TIM_PWM_Start+0x13e>
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	4a34      	ldr	r2, [pc, #208]	@ (8011e04 <HAL_TIM_PWM_Start+0x1ec>)
 8011d34:	4293      	cmp	r3, r2
 8011d36:	d00e      	beq.n	8011d56 <HAL_TIM_PWM_Start+0x13e>
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	4a32      	ldr	r2, [pc, #200]	@ (8011e08 <HAL_TIM_PWM_Start+0x1f0>)
 8011d3e:	4293      	cmp	r3, r2
 8011d40:	d009      	beq.n	8011d56 <HAL_TIM_PWM_Start+0x13e>
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	4a31      	ldr	r2, [pc, #196]	@ (8011e0c <HAL_TIM_PWM_Start+0x1f4>)
 8011d48:	4293      	cmp	r3, r2
 8011d4a:	d004      	beq.n	8011d56 <HAL_TIM_PWM_Start+0x13e>
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	4a2f      	ldr	r2, [pc, #188]	@ (8011e10 <HAL_TIM_PWM_Start+0x1f8>)
 8011d52:	4293      	cmp	r3, r2
 8011d54:	d101      	bne.n	8011d5a <HAL_TIM_PWM_Start+0x142>
 8011d56:	2301      	movs	r3, #1
 8011d58:	e000      	b.n	8011d5c <HAL_TIM_PWM_Start+0x144>
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d007      	beq.n	8011d70 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011d6e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	4a22      	ldr	r2, [pc, #136]	@ (8011e00 <HAL_TIM_PWM_Start+0x1e8>)
 8011d76:	4293      	cmp	r3, r2
 8011d78:	d01d      	beq.n	8011db6 <HAL_TIM_PWM_Start+0x19e>
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011d82:	d018      	beq.n	8011db6 <HAL_TIM_PWM_Start+0x19e>
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	4a22      	ldr	r2, [pc, #136]	@ (8011e14 <HAL_TIM_PWM_Start+0x1fc>)
 8011d8a:	4293      	cmp	r3, r2
 8011d8c:	d013      	beq.n	8011db6 <HAL_TIM_PWM_Start+0x19e>
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	4a21      	ldr	r2, [pc, #132]	@ (8011e18 <HAL_TIM_PWM_Start+0x200>)
 8011d94:	4293      	cmp	r3, r2
 8011d96:	d00e      	beq.n	8011db6 <HAL_TIM_PWM_Start+0x19e>
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8011e1c <HAL_TIM_PWM_Start+0x204>)
 8011d9e:	4293      	cmp	r3, r2
 8011da0:	d009      	beq.n	8011db6 <HAL_TIM_PWM_Start+0x19e>
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	4a17      	ldr	r2, [pc, #92]	@ (8011e04 <HAL_TIM_PWM_Start+0x1ec>)
 8011da8:	4293      	cmp	r3, r2
 8011daa:	d004      	beq.n	8011db6 <HAL_TIM_PWM_Start+0x19e>
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	4a15      	ldr	r2, [pc, #84]	@ (8011e08 <HAL_TIM_PWM_Start+0x1f0>)
 8011db2:	4293      	cmp	r3, r2
 8011db4:	d115      	bne.n	8011de2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	689a      	ldr	r2, [r3, #8]
 8011dbc:	4b18      	ldr	r3, [pc, #96]	@ (8011e20 <HAL_TIM_PWM_Start+0x208>)
 8011dbe:	4013      	ands	r3, r2
 8011dc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	2b06      	cmp	r3, #6
 8011dc6:	d015      	beq.n	8011df4 <HAL_TIM_PWM_Start+0x1dc>
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011dce:	d011      	beq.n	8011df4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	681a      	ldr	r2, [r3, #0]
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	f042 0201 	orr.w	r2, r2, #1
 8011dde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011de0:	e008      	b.n	8011df4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	681a      	ldr	r2, [r3, #0]
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	f042 0201 	orr.w	r2, r2, #1
 8011df0:	601a      	str	r2, [r3, #0]
 8011df2:	e000      	b.n	8011df6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011df4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011df6:	2300      	movs	r3, #0
}
 8011df8:	4618      	mov	r0, r3
 8011dfa:	3710      	adds	r7, #16
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	bd80      	pop	{r7, pc}
 8011e00:	40012c00 	.word	0x40012c00
 8011e04:	40013400 	.word	0x40013400
 8011e08:	40014000 	.word	0x40014000
 8011e0c:	40014400 	.word	0x40014400
 8011e10:	40014800 	.word	0x40014800
 8011e14:	40000400 	.word	0x40000400
 8011e18:	40000800 	.word	0x40000800
 8011e1c:	40000c00 	.word	0x40000c00
 8011e20:	00010007 	.word	0x00010007

08011e24 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b082      	sub	sp, #8
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
 8011e2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	2200      	movs	r2, #0
 8011e34:	6839      	ldr	r1, [r7, #0]
 8011e36:	4618      	mov	r0, r3
 8011e38:	f001 fbee 	bl	8013618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	4a3e      	ldr	r2, [pc, #248]	@ (8011f3c <HAL_TIM_PWM_Stop+0x118>)
 8011e42:	4293      	cmp	r3, r2
 8011e44:	d013      	beq.n	8011e6e <HAL_TIM_PWM_Stop+0x4a>
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	4a3d      	ldr	r2, [pc, #244]	@ (8011f40 <HAL_TIM_PWM_Stop+0x11c>)
 8011e4c:	4293      	cmp	r3, r2
 8011e4e:	d00e      	beq.n	8011e6e <HAL_TIM_PWM_Stop+0x4a>
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	4a3b      	ldr	r2, [pc, #236]	@ (8011f44 <HAL_TIM_PWM_Stop+0x120>)
 8011e56:	4293      	cmp	r3, r2
 8011e58:	d009      	beq.n	8011e6e <HAL_TIM_PWM_Stop+0x4a>
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	4a3a      	ldr	r2, [pc, #232]	@ (8011f48 <HAL_TIM_PWM_Stop+0x124>)
 8011e60:	4293      	cmp	r3, r2
 8011e62:	d004      	beq.n	8011e6e <HAL_TIM_PWM_Stop+0x4a>
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	4a38      	ldr	r2, [pc, #224]	@ (8011f4c <HAL_TIM_PWM_Stop+0x128>)
 8011e6a:	4293      	cmp	r3, r2
 8011e6c:	d101      	bne.n	8011e72 <HAL_TIM_PWM_Stop+0x4e>
 8011e6e:	2301      	movs	r3, #1
 8011e70:	e000      	b.n	8011e74 <HAL_TIM_PWM_Stop+0x50>
 8011e72:	2300      	movs	r3, #0
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d017      	beq.n	8011ea8 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	6a1a      	ldr	r2, [r3, #32]
 8011e7e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8011e82:	4013      	ands	r3, r2
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d10f      	bne.n	8011ea8 <HAL_TIM_PWM_Stop+0x84>
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	6a1a      	ldr	r2, [r3, #32]
 8011e8e:	f240 4344 	movw	r3, #1092	@ 0x444
 8011e92:	4013      	ands	r3, r2
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d107      	bne.n	8011ea8 <HAL_TIM_PWM_Stop+0x84>
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011ea6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	6a1a      	ldr	r2, [r3, #32]
 8011eae:	f241 1311 	movw	r3, #4369	@ 0x1111
 8011eb2:	4013      	ands	r3, r2
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d10f      	bne.n	8011ed8 <HAL_TIM_PWM_Stop+0xb4>
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	6a1a      	ldr	r2, [r3, #32]
 8011ebe:	f240 4344 	movw	r3, #1092	@ 0x444
 8011ec2:	4013      	ands	r3, r2
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d107      	bne.n	8011ed8 <HAL_TIM_PWM_Stop+0xb4>
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	681a      	ldr	r2, [r3, #0]
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	f022 0201 	bic.w	r2, r2, #1
 8011ed6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d104      	bne.n	8011ee8 <HAL_TIM_PWM_Stop+0xc4>
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	2201      	movs	r2, #1
 8011ee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011ee6:	e023      	b.n	8011f30 <HAL_TIM_PWM_Stop+0x10c>
 8011ee8:	683b      	ldr	r3, [r7, #0]
 8011eea:	2b04      	cmp	r3, #4
 8011eec:	d104      	bne.n	8011ef8 <HAL_TIM_PWM_Stop+0xd4>
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	2201      	movs	r2, #1
 8011ef2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011ef6:	e01b      	b.n	8011f30 <HAL_TIM_PWM_Stop+0x10c>
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	2b08      	cmp	r3, #8
 8011efc:	d104      	bne.n	8011f08 <HAL_TIM_PWM_Stop+0xe4>
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	2201      	movs	r2, #1
 8011f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011f06:	e013      	b.n	8011f30 <HAL_TIM_PWM_Stop+0x10c>
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	2b0c      	cmp	r3, #12
 8011f0c:	d104      	bne.n	8011f18 <HAL_TIM_PWM_Stop+0xf4>
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	2201      	movs	r2, #1
 8011f12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011f16:	e00b      	b.n	8011f30 <HAL_TIM_PWM_Stop+0x10c>
 8011f18:	683b      	ldr	r3, [r7, #0]
 8011f1a:	2b10      	cmp	r3, #16
 8011f1c:	d104      	bne.n	8011f28 <HAL_TIM_PWM_Stop+0x104>
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	2201      	movs	r2, #1
 8011f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011f26:	e003      	b.n	8011f30 <HAL_TIM_PWM_Stop+0x10c>
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	2201      	movs	r2, #1
 8011f2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8011f30:	2300      	movs	r3, #0
}
 8011f32:	4618      	mov	r0, r3
 8011f34:	3708      	adds	r7, #8
 8011f36:	46bd      	mov	sp, r7
 8011f38:	bd80      	pop	{r7, pc}
 8011f3a:	bf00      	nop
 8011f3c:	40012c00 	.word	0x40012c00
 8011f40:	40013400 	.word	0x40013400
 8011f44:	40014000 	.word	0x40014000
 8011f48:	40014400 	.word	0x40014400
 8011f4c:	40014800 	.word	0x40014800

08011f50 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b082      	sub	sp, #8
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d101      	bne.n	8011f62 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8011f5e:	2301      	movs	r3, #1
 8011f60:	e049      	b.n	8011ff6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011f68:	b2db      	uxtb	r3, r3
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d106      	bne.n	8011f7c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	2200      	movs	r2, #0
 8011f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	f7f4 fcb4 	bl	80068e4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	2202      	movs	r2, #2
 8011f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681a      	ldr	r2, [r3, #0]
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	3304      	adds	r3, #4
 8011f8c:	4619      	mov	r1, r3
 8011f8e:	4610      	mov	r0, r2
 8011f90:	f000 fd74 	bl	8012a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	2201      	movs	r2, #1
 8011f98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2201      	movs	r2, #1
 8011fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	2201      	movs	r2, #1
 8011fa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2201      	movs	r2, #1
 8011fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	2201      	movs	r2, #1
 8011fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	2201      	movs	r2, #1
 8011fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	2201      	movs	r2, #1
 8011fc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2201      	movs	r2, #1
 8011fd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	2201      	movs	r2, #1
 8011fd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	2201      	movs	r2, #1
 8011fe0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	2201      	movs	r2, #1
 8011fe8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2201      	movs	r2, #1
 8011ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8011ff4:	2300      	movs	r3, #0
}
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	3708      	adds	r7, #8
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd80      	pop	{r7, pc}
	...

08012000 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b084      	sub	sp, #16
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
 8012008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801200a:	2300      	movs	r3, #0
 801200c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d104      	bne.n	801201e <HAL_TIM_IC_Start_IT+0x1e>
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801201a:	b2db      	uxtb	r3, r3
 801201c:	e023      	b.n	8012066 <HAL_TIM_IC_Start_IT+0x66>
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	2b04      	cmp	r3, #4
 8012022:	d104      	bne.n	801202e <HAL_TIM_IC_Start_IT+0x2e>
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801202a:	b2db      	uxtb	r3, r3
 801202c:	e01b      	b.n	8012066 <HAL_TIM_IC_Start_IT+0x66>
 801202e:	683b      	ldr	r3, [r7, #0]
 8012030:	2b08      	cmp	r3, #8
 8012032:	d104      	bne.n	801203e <HAL_TIM_IC_Start_IT+0x3e>
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801203a:	b2db      	uxtb	r3, r3
 801203c:	e013      	b.n	8012066 <HAL_TIM_IC_Start_IT+0x66>
 801203e:	683b      	ldr	r3, [r7, #0]
 8012040:	2b0c      	cmp	r3, #12
 8012042:	d104      	bne.n	801204e <HAL_TIM_IC_Start_IT+0x4e>
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801204a:	b2db      	uxtb	r3, r3
 801204c:	e00b      	b.n	8012066 <HAL_TIM_IC_Start_IT+0x66>
 801204e:	683b      	ldr	r3, [r7, #0]
 8012050:	2b10      	cmp	r3, #16
 8012052:	d104      	bne.n	801205e <HAL_TIM_IC_Start_IT+0x5e>
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801205a:	b2db      	uxtb	r3, r3
 801205c:	e003      	b.n	8012066 <HAL_TIM_IC_Start_IT+0x66>
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012064:	b2db      	uxtb	r3, r3
 8012066:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8012068:	683b      	ldr	r3, [r7, #0]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d104      	bne.n	8012078 <HAL_TIM_IC_Start_IT+0x78>
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012074:	b2db      	uxtb	r3, r3
 8012076:	e013      	b.n	80120a0 <HAL_TIM_IC_Start_IT+0xa0>
 8012078:	683b      	ldr	r3, [r7, #0]
 801207a:	2b04      	cmp	r3, #4
 801207c:	d104      	bne.n	8012088 <HAL_TIM_IC_Start_IT+0x88>
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012084:	b2db      	uxtb	r3, r3
 8012086:	e00b      	b.n	80120a0 <HAL_TIM_IC_Start_IT+0xa0>
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	2b08      	cmp	r3, #8
 801208c:	d104      	bne.n	8012098 <HAL_TIM_IC_Start_IT+0x98>
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8012094:	b2db      	uxtb	r3, r3
 8012096:	e003      	b.n	80120a0 <HAL_TIM_IC_Start_IT+0xa0>
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 801209e:	b2db      	uxtb	r3, r3
 80120a0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80120a2:	7bbb      	ldrb	r3, [r7, #14]
 80120a4:	2b01      	cmp	r3, #1
 80120a6:	d102      	bne.n	80120ae <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80120a8:	7b7b      	ldrb	r3, [r7, #13]
 80120aa:	2b01      	cmp	r3, #1
 80120ac:	d001      	beq.n	80120b2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80120ae:	2301      	movs	r3, #1
 80120b0:	e0dd      	b.n	801226e <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80120b2:	683b      	ldr	r3, [r7, #0]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d104      	bne.n	80120c2 <HAL_TIM_IC_Start_IT+0xc2>
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2202      	movs	r2, #2
 80120bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80120c0:	e023      	b.n	801210a <HAL_TIM_IC_Start_IT+0x10a>
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	2b04      	cmp	r3, #4
 80120c6:	d104      	bne.n	80120d2 <HAL_TIM_IC_Start_IT+0xd2>
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2202      	movs	r2, #2
 80120cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80120d0:	e01b      	b.n	801210a <HAL_TIM_IC_Start_IT+0x10a>
 80120d2:	683b      	ldr	r3, [r7, #0]
 80120d4:	2b08      	cmp	r3, #8
 80120d6:	d104      	bne.n	80120e2 <HAL_TIM_IC_Start_IT+0xe2>
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2202      	movs	r2, #2
 80120dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80120e0:	e013      	b.n	801210a <HAL_TIM_IC_Start_IT+0x10a>
 80120e2:	683b      	ldr	r3, [r7, #0]
 80120e4:	2b0c      	cmp	r3, #12
 80120e6:	d104      	bne.n	80120f2 <HAL_TIM_IC_Start_IT+0xf2>
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	2202      	movs	r2, #2
 80120ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80120f0:	e00b      	b.n	801210a <HAL_TIM_IC_Start_IT+0x10a>
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	2b10      	cmp	r3, #16
 80120f6:	d104      	bne.n	8012102 <HAL_TIM_IC_Start_IT+0x102>
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	2202      	movs	r2, #2
 80120fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012100:	e003      	b.n	801210a <HAL_TIM_IC_Start_IT+0x10a>
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	2202      	movs	r2, #2
 8012106:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801210a:	683b      	ldr	r3, [r7, #0]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d104      	bne.n	801211a <HAL_TIM_IC_Start_IT+0x11a>
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	2202      	movs	r2, #2
 8012114:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012118:	e013      	b.n	8012142 <HAL_TIM_IC_Start_IT+0x142>
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	2b04      	cmp	r3, #4
 801211e:	d104      	bne.n	801212a <HAL_TIM_IC_Start_IT+0x12a>
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2202      	movs	r2, #2
 8012124:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012128:	e00b      	b.n	8012142 <HAL_TIM_IC_Start_IT+0x142>
 801212a:	683b      	ldr	r3, [r7, #0]
 801212c:	2b08      	cmp	r3, #8
 801212e:	d104      	bne.n	801213a <HAL_TIM_IC_Start_IT+0x13a>
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	2202      	movs	r2, #2
 8012134:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012138:	e003      	b.n	8012142 <HAL_TIM_IC_Start_IT+0x142>
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	2202      	movs	r2, #2
 801213e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8012142:	683b      	ldr	r3, [r7, #0]
 8012144:	2b0c      	cmp	r3, #12
 8012146:	d841      	bhi.n	80121cc <HAL_TIM_IC_Start_IT+0x1cc>
 8012148:	a201      	add	r2, pc, #4	@ (adr r2, 8012150 <HAL_TIM_IC_Start_IT+0x150>)
 801214a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801214e:	bf00      	nop
 8012150:	08012185 	.word	0x08012185
 8012154:	080121cd 	.word	0x080121cd
 8012158:	080121cd 	.word	0x080121cd
 801215c:	080121cd 	.word	0x080121cd
 8012160:	08012197 	.word	0x08012197
 8012164:	080121cd 	.word	0x080121cd
 8012168:	080121cd 	.word	0x080121cd
 801216c:	080121cd 	.word	0x080121cd
 8012170:	080121a9 	.word	0x080121a9
 8012174:	080121cd 	.word	0x080121cd
 8012178:	080121cd 	.word	0x080121cd
 801217c:	080121cd 	.word	0x080121cd
 8012180:	080121bb 	.word	0x080121bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	68da      	ldr	r2, [r3, #12]
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	f042 0202 	orr.w	r2, r2, #2
 8012192:	60da      	str	r2, [r3, #12]
      break;
 8012194:	e01d      	b.n	80121d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	68da      	ldr	r2, [r3, #12]
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	f042 0204 	orr.w	r2, r2, #4
 80121a4:	60da      	str	r2, [r3, #12]
      break;
 80121a6:	e014      	b.n	80121d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	68da      	ldr	r2, [r3, #12]
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	f042 0208 	orr.w	r2, r2, #8
 80121b6:	60da      	str	r2, [r3, #12]
      break;
 80121b8:	e00b      	b.n	80121d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	68da      	ldr	r2, [r3, #12]
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	f042 0210 	orr.w	r2, r2, #16
 80121c8:	60da      	str	r2, [r3, #12]
      break;
 80121ca:	e002      	b.n	80121d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80121cc:	2301      	movs	r3, #1
 80121ce:	73fb      	strb	r3, [r7, #15]
      break;
 80121d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80121d2:	7bfb      	ldrb	r3, [r7, #15]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d149      	bne.n	801226c <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	2201      	movs	r2, #1
 80121de:	6839      	ldr	r1, [r7, #0]
 80121e0:	4618      	mov	r0, r3
 80121e2:	f001 fa19 	bl	8013618 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	4a23      	ldr	r2, [pc, #140]	@ (8012278 <HAL_TIM_IC_Start_IT+0x278>)
 80121ec:	4293      	cmp	r3, r2
 80121ee:	d01d      	beq.n	801222c <HAL_TIM_IC_Start_IT+0x22c>
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80121f8:	d018      	beq.n	801222c <HAL_TIM_IC_Start_IT+0x22c>
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	4a1f      	ldr	r2, [pc, #124]	@ (801227c <HAL_TIM_IC_Start_IT+0x27c>)
 8012200:	4293      	cmp	r3, r2
 8012202:	d013      	beq.n	801222c <HAL_TIM_IC_Start_IT+0x22c>
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	4a1d      	ldr	r2, [pc, #116]	@ (8012280 <HAL_TIM_IC_Start_IT+0x280>)
 801220a:	4293      	cmp	r3, r2
 801220c:	d00e      	beq.n	801222c <HAL_TIM_IC_Start_IT+0x22c>
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	4a1c      	ldr	r2, [pc, #112]	@ (8012284 <HAL_TIM_IC_Start_IT+0x284>)
 8012214:	4293      	cmp	r3, r2
 8012216:	d009      	beq.n	801222c <HAL_TIM_IC_Start_IT+0x22c>
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	4a1a      	ldr	r2, [pc, #104]	@ (8012288 <HAL_TIM_IC_Start_IT+0x288>)
 801221e:	4293      	cmp	r3, r2
 8012220:	d004      	beq.n	801222c <HAL_TIM_IC_Start_IT+0x22c>
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	4a19      	ldr	r2, [pc, #100]	@ (801228c <HAL_TIM_IC_Start_IT+0x28c>)
 8012228:	4293      	cmp	r3, r2
 801222a:	d115      	bne.n	8012258 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	689a      	ldr	r2, [r3, #8]
 8012232:	4b17      	ldr	r3, [pc, #92]	@ (8012290 <HAL_TIM_IC_Start_IT+0x290>)
 8012234:	4013      	ands	r3, r2
 8012236:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012238:	68bb      	ldr	r3, [r7, #8]
 801223a:	2b06      	cmp	r3, #6
 801223c:	d015      	beq.n	801226a <HAL_TIM_IC_Start_IT+0x26a>
 801223e:	68bb      	ldr	r3, [r7, #8]
 8012240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012244:	d011      	beq.n	801226a <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	681a      	ldr	r2, [r3, #0]
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	f042 0201 	orr.w	r2, r2, #1
 8012254:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012256:	e008      	b.n	801226a <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	681a      	ldr	r2, [r3, #0]
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	f042 0201 	orr.w	r2, r2, #1
 8012266:	601a      	str	r2, [r3, #0]
 8012268:	e000      	b.n	801226c <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801226a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 801226c:	7bfb      	ldrb	r3, [r7, #15]
}
 801226e:	4618      	mov	r0, r3
 8012270:	3710      	adds	r7, #16
 8012272:	46bd      	mov	sp, r7
 8012274:	bd80      	pop	{r7, pc}
 8012276:	bf00      	nop
 8012278:	40012c00 	.word	0x40012c00
 801227c:	40000400 	.word	0x40000400
 8012280:	40000800 	.word	0x40000800
 8012284:	40000c00 	.word	0x40000c00
 8012288:	40013400 	.word	0x40013400
 801228c:	40014000 	.word	0x40014000
 8012290:	00010007 	.word	0x00010007

08012294 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b084      	sub	sp, #16
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
 801229c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801229e:	2300      	movs	r3, #0
 80122a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80122a2:	683b      	ldr	r3, [r7, #0]
 80122a4:	2b0c      	cmp	r3, #12
 80122a6:	d841      	bhi.n	801232c <HAL_TIM_IC_Stop_IT+0x98>
 80122a8:	a201      	add	r2, pc, #4	@ (adr r2, 80122b0 <HAL_TIM_IC_Stop_IT+0x1c>)
 80122aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122ae:	bf00      	nop
 80122b0:	080122e5 	.word	0x080122e5
 80122b4:	0801232d 	.word	0x0801232d
 80122b8:	0801232d 	.word	0x0801232d
 80122bc:	0801232d 	.word	0x0801232d
 80122c0:	080122f7 	.word	0x080122f7
 80122c4:	0801232d 	.word	0x0801232d
 80122c8:	0801232d 	.word	0x0801232d
 80122cc:	0801232d 	.word	0x0801232d
 80122d0:	08012309 	.word	0x08012309
 80122d4:	0801232d 	.word	0x0801232d
 80122d8:	0801232d 	.word	0x0801232d
 80122dc:	0801232d 	.word	0x0801232d
 80122e0:	0801231b 	.word	0x0801231b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	68da      	ldr	r2, [r3, #12]
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	f022 0202 	bic.w	r2, r2, #2
 80122f2:	60da      	str	r2, [r3, #12]
      break;
 80122f4:	e01d      	b.n	8012332 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	68da      	ldr	r2, [r3, #12]
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	f022 0204 	bic.w	r2, r2, #4
 8012304:	60da      	str	r2, [r3, #12]
      break;
 8012306:	e014      	b.n	8012332 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	68da      	ldr	r2, [r3, #12]
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	f022 0208 	bic.w	r2, r2, #8
 8012316:	60da      	str	r2, [r3, #12]
      break;
 8012318:	e00b      	b.n	8012332 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	68da      	ldr	r2, [r3, #12]
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	f022 0210 	bic.w	r2, r2, #16
 8012328:	60da      	str	r2, [r3, #12]
      break;
 801232a:	e002      	b.n	8012332 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 801232c:	2301      	movs	r3, #1
 801232e:	73fb      	strb	r3, [r7, #15]
      break;
 8012330:	bf00      	nop
  }

  if (status == HAL_OK)
 8012332:	7bfb      	ldrb	r3, [r7, #15]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d166      	bne.n	8012406 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	2200      	movs	r2, #0
 801233e:	6839      	ldr	r1, [r7, #0]
 8012340:	4618      	mov	r0, r3
 8012342:	f001 f969 	bl	8013618 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	6a1a      	ldr	r2, [r3, #32]
 801234c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012350:	4013      	ands	r3, r2
 8012352:	2b00      	cmp	r3, #0
 8012354:	d10f      	bne.n	8012376 <HAL_TIM_IC_Stop_IT+0xe2>
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	6a1a      	ldr	r2, [r3, #32]
 801235c:	f240 4344 	movw	r3, #1092	@ 0x444
 8012360:	4013      	ands	r3, r2
 8012362:	2b00      	cmp	r3, #0
 8012364:	d107      	bne.n	8012376 <HAL_TIM_IC_Stop_IT+0xe2>
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	681a      	ldr	r2, [r3, #0]
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	f022 0201 	bic.w	r2, r2, #1
 8012374:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012376:	683b      	ldr	r3, [r7, #0]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d104      	bne.n	8012386 <HAL_TIM_IC_Stop_IT+0xf2>
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	2201      	movs	r2, #1
 8012380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012384:	e023      	b.n	80123ce <HAL_TIM_IC_Stop_IT+0x13a>
 8012386:	683b      	ldr	r3, [r7, #0]
 8012388:	2b04      	cmp	r3, #4
 801238a:	d104      	bne.n	8012396 <HAL_TIM_IC_Stop_IT+0x102>
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	2201      	movs	r2, #1
 8012390:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012394:	e01b      	b.n	80123ce <HAL_TIM_IC_Stop_IT+0x13a>
 8012396:	683b      	ldr	r3, [r7, #0]
 8012398:	2b08      	cmp	r3, #8
 801239a:	d104      	bne.n	80123a6 <HAL_TIM_IC_Stop_IT+0x112>
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2201      	movs	r2, #1
 80123a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80123a4:	e013      	b.n	80123ce <HAL_TIM_IC_Stop_IT+0x13a>
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	2b0c      	cmp	r3, #12
 80123aa:	d104      	bne.n	80123b6 <HAL_TIM_IC_Stop_IT+0x122>
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	2201      	movs	r2, #1
 80123b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80123b4:	e00b      	b.n	80123ce <HAL_TIM_IC_Stop_IT+0x13a>
 80123b6:	683b      	ldr	r3, [r7, #0]
 80123b8:	2b10      	cmp	r3, #16
 80123ba:	d104      	bne.n	80123c6 <HAL_TIM_IC_Stop_IT+0x132>
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	2201      	movs	r2, #1
 80123c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80123c4:	e003      	b.n	80123ce <HAL_TIM_IC_Stop_IT+0x13a>
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	2201      	movs	r2, #1
 80123ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d104      	bne.n	80123de <HAL_TIM_IC_Stop_IT+0x14a>
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2201      	movs	r2, #1
 80123d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80123dc:	e013      	b.n	8012406 <HAL_TIM_IC_Stop_IT+0x172>
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	2b04      	cmp	r3, #4
 80123e2:	d104      	bne.n	80123ee <HAL_TIM_IC_Stop_IT+0x15a>
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2201      	movs	r2, #1
 80123e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80123ec:	e00b      	b.n	8012406 <HAL_TIM_IC_Stop_IT+0x172>
 80123ee:	683b      	ldr	r3, [r7, #0]
 80123f0:	2b08      	cmp	r3, #8
 80123f2:	d104      	bne.n	80123fe <HAL_TIM_IC_Stop_IT+0x16a>
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	2201      	movs	r2, #1
 80123f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80123fc:	e003      	b.n	8012406 <HAL_TIM_IC_Stop_IT+0x172>
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	2201      	movs	r2, #1
 8012402:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 8012406:	7bfb      	ldrb	r3, [r7, #15]
}
 8012408:	4618      	mov	r0, r3
 801240a:	3710      	adds	r7, #16
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}

08012410 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b086      	sub	sp, #24
 8012414:	af00      	add	r7, sp, #0
 8012416:	60f8      	str	r0, [r7, #12]
 8012418:	60b9      	str	r1, [r7, #8]
 801241a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801241c:	2300      	movs	r3, #0
 801241e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012426:	2b01      	cmp	r3, #1
 8012428:	d101      	bne.n	801242e <HAL_TIM_OC_ConfigChannel+0x1e>
 801242a:	2302      	movs	r3, #2
 801242c:	e066      	b.n	80124fc <HAL_TIM_OC_ConfigChannel+0xec>
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	2201      	movs	r2, #1
 8012432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	2b14      	cmp	r3, #20
 801243a:	d857      	bhi.n	80124ec <HAL_TIM_OC_ConfigChannel+0xdc>
 801243c:	a201      	add	r2, pc, #4	@ (adr r2, 8012444 <HAL_TIM_OC_ConfigChannel+0x34>)
 801243e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012442:	bf00      	nop
 8012444:	08012499 	.word	0x08012499
 8012448:	080124ed 	.word	0x080124ed
 801244c:	080124ed 	.word	0x080124ed
 8012450:	080124ed 	.word	0x080124ed
 8012454:	080124a7 	.word	0x080124a7
 8012458:	080124ed 	.word	0x080124ed
 801245c:	080124ed 	.word	0x080124ed
 8012460:	080124ed 	.word	0x080124ed
 8012464:	080124b5 	.word	0x080124b5
 8012468:	080124ed 	.word	0x080124ed
 801246c:	080124ed 	.word	0x080124ed
 8012470:	080124ed 	.word	0x080124ed
 8012474:	080124c3 	.word	0x080124c3
 8012478:	080124ed 	.word	0x080124ed
 801247c:	080124ed 	.word	0x080124ed
 8012480:	080124ed 	.word	0x080124ed
 8012484:	080124d1 	.word	0x080124d1
 8012488:	080124ed 	.word	0x080124ed
 801248c:	080124ed 	.word	0x080124ed
 8012490:	080124ed 	.word	0x080124ed
 8012494:	080124df 	.word	0x080124df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	68b9      	ldr	r1, [r7, #8]
 801249e:	4618      	mov	r0, r3
 80124a0:	f000 fb92 	bl	8012bc8 <TIM_OC1_SetConfig>
      break;
 80124a4:	e025      	b.n	80124f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	68b9      	ldr	r1, [r7, #8]
 80124ac:	4618      	mov	r0, r3
 80124ae:	f000 fc1b 	bl	8012ce8 <TIM_OC2_SetConfig>
      break;
 80124b2:	e01e      	b.n	80124f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	68b9      	ldr	r1, [r7, #8]
 80124ba:	4618      	mov	r0, r3
 80124bc:	f000 fc9e 	bl	8012dfc <TIM_OC3_SetConfig>
      break;
 80124c0:	e017      	b.n	80124f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	68b9      	ldr	r1, [r7, #8]
 80124c8:	4618      	mov	r0, r3
 80124ca:	f000 fd1f 	bl	8012f0c <TIM_OC4_SetConfig>
      break;
 80124ce:	e010      	b.n	80124f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	68b9      	ldr	r1, [r7, #8]
 80124d6:	4618      	mov	r0, r3
 80124d8:	f000 fd82 	bl	8012fe0 <TIM_OC5_SetConfig>
      break;
 80124dc:	e009      	b.n	80124f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	68b9      	ldr	r1, [r7, #8]
 80124e4:	4618      	mov	r0, r3
 80124e6:	f000 fddf 	bl	80130a8 <TIM_OC6_SetConfig>
      break;
 80124ea:	e002      	b.n	80124f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80124ec:	2301      	movs	r3, #1
 80124ee:	75fb      	strb	r3, [r7, #23]
      break;
 80124f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	2200      	movs	r2, #0
 80124f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80124fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80124fc:	4618      	mov	r0, r3
 80124fe:	3718      	adds	r7, #24
 8012500:	46bd      	mov	sp, r7
 8012502:	bd80      	pop	{r7, pc}

08012504 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b086      	sub	sp, #24
 8012508:	af00      	add	r7, sp, #0
 801250a:	60f8      	str	r0, [r7, #12]
 801250c:	60b9      	str	r1, [r7, #8]
 801250e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012510:	2300      	movs	r3, #0
 8012512:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801251a:	2b01      	cmp	r3, #1
 801251c:	d101      	bne.n	8012522 <HAL_TIM_IC_ConfigChannel+0x1e>
 801251e:	2302      	movs	r3, #2
 8012520:	e088      	b.n	8012634 <HAL_TIM_IC_ConfigChannel+0x130>
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	2201      	movs	r2, #1
 8012526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d11b      	bne.n	8012568 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8012534:	68bb      	ldr	r3, [r7, #8]
 8012536:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801253c:	68bb      	ldr	r3, [r7, #8]
 801253e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8012540:	f000 feac 	bl	801329c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	699a      	ldr	r2, [r3, #24]
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	f022 020c 	bic.w	r2, r2, #12
 8012552:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	6999      	ldr	r1, [r3, #24]
 801255a:	68bb      	ldr	r3, [r7, #8]
 801255c:	689a      	ldr	r2, [r3, #8]
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	430a      	orrs	r2, r1
 8012564:	619a      	str	r2, [r3, #24]
 8012566:	e060      	b.n	801262a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	2b04      	cmp	r3, #4
 801256c:	d11c      	bne.n	80125a8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8012572:	68bb      	ldr	r3, [r7, #8]
 8012574:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8012576:	68bb      	ldr	r3, [r7, #8]
 8012578:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801257a:	68bb      	ldr	r3, [r7, #8]
 801257c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 801257e:	f000 ff2a 	bl	80133d6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	699a      	ldr	r2, [r3, #24]
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8012590:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	6999      	ldr	r1, [r3, #24]
 8012598:	68bb      	ldr	r3, [r7, #8]
 801259a:	689b      	ldr	r3, [r3, #8]
 801259c:	021a      	lsls	r2, r3, #8
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	430a      	orrs	r2, r1
 80125a4:	619a      	str	r2, [r3, #24]
 80125a6:	e040      	b.n	801262a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	2b08      	cmp	r3, #8
 80125ac:	d11b      	bne.n	80125e6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80125b2:	68bb      	ldr	r3, [r7, #8]
 80125b4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80125b6:	68bb      	ldr	r3, [r7, #8]
 80125b8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80125be:	f000 ff77 	bl	80134b0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	69da      	ldr	r2, [r3, #28]
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	f022 020c 	bic.w	r2, r2, #12
 80125d0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	69d9      	ldr	r1, [r3, #28]
 80125d8:	68bb      	ldr	r3, [r7, #8]
 80125da:	689a      	ldr	r2, [r3, #8]
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	430a      	orrs	r2, r1
 80125e2:	61da      	str	r2, [r3, #28]
 80125e4:	e021      	b.n	801262a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	2b0c      	cmp	r3, #12
 80125ea:	d11c      	bne.n	8012626 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80125f0:	68bb      	ldr	r3, [r7, #8]
 80125f2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80125f4:	68bb      	ldr	r3, [r7, #8]
 80125f6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80125f8:	68bb      	ldr	r3, [r7, #8]
 80125fa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80125fc:	f000 ff94 	bl	8013528 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	69da      	ldr	r2, [r3, #28]
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 801260e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	69d9      	ldr	r1, [r3, #28]
 8012616:	68bb      	ldr	r3, [r7, #8]
 8012618:	689b      	ldr	r3, [r3, #8]
 801261a:	021a      	lsls	r2, r3, #8
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	430a      	orrs	r2, r1
 8012622:	61da      	str	r2, [r3, #28]
 8012624:	e001      	b.n	801262a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8012626:	2301      	movs	r3, #1
 8012628:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	2200      	movs	r2, #0
 801262e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8012632:	7dfb      	ldrb	r3, [r7, #23]
}
 8012634:	4618      	mov	r0, r3
 8012636:	3718      	adds	r7, #24
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}

0801263c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b086      	sub	sp, #24
 8012640:	af00      	add	r7, sp, #0
 8012642:	60f8      	str	r0, [r7, #12]
 8012644:	60b9      	str	r1, [r7, #8]
 8012646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012648:	2300      	movs	r3, #0
 801264a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012652:	2b01      	cmp	r3, #1
 8012654:	d101      	bne.n	801265a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8012656:	2302      	movs	r3, #2
 8012658:	e0ff      	b.n	801285a <HAL_TIM_PWM_ConfigChannel+0x21e>
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	2201      	movs	r2, #1
 801265e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	2b14      	cmp	r3, #20
 8012666:	f200 80f0 	bhi.w	801284a <HAL_TIM_PWM_ConfigChannel+0x20e>
 801266a:	a201      	add	r2, pc, #4	@ (adr r2, 8012670 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801266c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012670:	080126c5 	.word	0x080126c5
 8012674:	0801284b 	.word	0x0801284b
 8012678:	0801284b 	.word	0x0801284b
 801267c:	0801284b 	.word	0x0801284b
 8012680:	08012705 	.word	0x08012705
 8012684:	0801284b 	.word	0x0801284b
 8012688:	0801284b 	.word	0x0801284b
 801268c:	0801284b 	.word	0x0801284b
 8012690:	08012747 	.word	0x08012747
 8012694:	0801284b 	.word	0x0801284b
 8012698:	0801284b 	.word	0x0801284b
 801269c:	0801284b 	.word	0x0801284b
 80126a0:	08012787 	.word	0x08012787
 80126a4:	0801284b 	.word	0x0801284b
 80126a8:	0801284b 	.word	0x0801284b
 80126ac:	0801284b 	.word	0x0801284b
 80126b0:	080127c9 	.word	0x080127c9
 80126b4:	0801284b 	.word	0x0801284b
 80126b8:	0801284b 	.word	0x0801284b
 80126bc:	0801284b 	.word	0x0801284b
 80126c0:	08012809 	.word	0x08012809
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	68b9      	ldr	r1, [r7, #8]
 80126ca:	4618      	mov	r0, r3
 80126cc:	f000 fa7c 	bl	8012bc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	699a      	ldr	r2, [r3, #24]
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	f042 0208 	orr.w	r2, r2, #8
 80126de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	699a      	ldr	r2, [r3, #24]
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	f022 0204 	bic.w	r2, r2, #4
 80126ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	6999      	ldr	r1, [r3, #24]
 80126f6:	68bb      	ldr	r3, [r7, #8]
 80126f8:	691a      	ldr	r2, [r3, #16]
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	430a      	orrs	r2, r1
 8012700:	619a      	str	r2, [r3, #24]
      break;
 8012702:	e0a5      	b.n	8012850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	68b9      	ldr	r1, [r7, #8]
 801270a:	4618      	mov	r0, r3
 801270c:	f000 faec 	bl	8012ce8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	699a      	ldr	r2, [r3, #24]
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801271e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	699a      	ldr	r2, [r3, #24]
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801272e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	6999      	ldr	r1, [r3, #24]
 8012736:	68bb      	ldr	r3, [r7, #8]
 8012738:	691b      	ldr	r3, [r3, #16]
 801273a:	021a      	lsls	r2, r3, #8
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	430a      	orrs	r2, r1
 8012742:	619a      	str	r2, [r3, #24]
      break;
 8012744:	e084      	b.n	8012850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	68b9      	ldr	r1, [r7, #8]
 801274c:	4618      	mov	r0, r3
 801274e:	f000 fb55 	bl	8012dfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	69da      	ldr	r2, [r3, #28]
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	f042 0208 	orr.w	r2, r2, #8
 8012760:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	69da      	ldr	r2, [r3, #28]
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	f022 0204 	bic.w	r2, r2, #4
 8012770:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	69d9      	ldr	r1, [r3, #28]
 8012778:	68bb      	ldr	r3, [r7, #8]
 801277a:	691a      	ldr	r2, [r3, #16]
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	430a      	orrs	r2, r1
 8012782:	61da      	str	r2, [r3, #28]
      break;
 8012784:	e064      	b.n	8012850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	68b9      	ldr	r1, [r7, #8]
 801278c:	4618      	mov	r0, r3
 801278e:	f000 fbbd 	bl	8012f0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	69da      	ldr	r2, [r3, #28]
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80127a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	69da      	ldr	r2, [r3, #28]
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80127b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	69d9      	ldr	r1, [r3, #28]
 80127b8:	68bb      	ldr	r3, [r7, #8]
 80127ba:	691b      	ldr	r3, [r3, #16]
 80127bc:	021a      	lsls	r2, r3, #8
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	430a      	orrs	r2, r1
 80127c4:	61da      	str	r2, [r3, #28]
      break;
 80127c6:	e043      	b.n	8012850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	68b9      	ldr	r1, [r7, #8]
 80127ce:	4618      	mov	r0, r3
 80127d0:	f000 fc06 	bl	8012fe0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	f042 0208 	orr.w	r2, r2, #8
 80127e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	f022 0204 	bic.w	r2, r2, #4
 80127f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80127fa:	68bb      	ldr	r3, [r7, #8]
 80127fc:	691a      	ldr	r2, [r3, #16]
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	430a      	orrs	r2, r1
 8012804:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8012806:	e023      	b.n	8012850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	68b9      	ldr	r1, [r7, #8]
 801280e:	4618      	mov	r0, r3
 8012810:	f000 fc4a 	bl	80130a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012822:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012832:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801283a:	68bb      	ldr	r3, [r7, #8]
 801283c:	691b      	ldr	r3, [r3, #16]
 801283e:	021a      	lsls	r2, r3, #8
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	430a      	orrs	r2, r1
 8012846:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8012848:	e002      	b.n	8012850 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801284a:	2301      	movs	r3, #1
 801284c:	75fb      	strb	r3, [r7, #23]
      break;
 801284e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	2200      	movs	r2, #0
 8012854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8012858:	7dfb      	ldrb	r3, [r7, #23]
}
 801285a:	4618      	mov	r0, r3
 801285c:	3718      	adds	r7, #24
 801285e:	46bd      	mov	sp, r7
 8012860:	bd80      	pop	{r7, pc}
 8012862:	bf00      	nop

08012864 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b084      	sub	sp, #16
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
 801286c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801286e:	2300      	movs	r3, #0
 8012870:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012878:	2b01      	cmp	r3, #1
 801287a:	d101      	bne.n	8012880 <HAL_TIM_ConfigClockSource+0x1c>
 801287c:	2302      	movs	r3, #2
 801287e:	e0b6      	b.n	80129ee <HAL_TIM_ConfigClockSource+0x18a>
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	2201      	movs	r2, #1
 8012884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	2202      	movs	r2, #2
 801288c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	689b      	ldr	r3, [r3, #8]
 8012896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801289e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80128a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80128a4:	68bb      	ldr	r3, [r7, #8]
 80128a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80128aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	68ba      	ldr	r2, [r7, #8]
 80128b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80128bc:	d03e      	beq.n	801293c <HAL_TIM_ConfigClockSource+0xd8>
 80128be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80128c2:	f200 8087 	bhi.w	80129d4 <HAL_TIM_ConfigClockSource+0x170>
 80128c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80128ca:	f000 8086 	beq.w	80129da <HAL_TIM_ConfigClockSource+0x176>
 80128ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80128d2:	d87f      	bhi.n	80129d4 <HAL_TIM_ConfigClockSource+0x170>
 80128d4:	2b70      	cmp	r3, #112	@ 0x70
 80128d6:	d01a      	beq.n	801290e <HAL_TIM_ConfigClockSource+0xaa>
 80128d8:	2b70      	cmp	r3, #112	@ 0x70
 80128da:	d87b      	bhi.n	80129d4 <HAL_TIM_ConfigClockSource+0x170>
 80128dc:	2b60      	cmp	r3, #96	@ 0x60
 80128de:	d050      	beq.n	8012982 <HAL_TIM_ConfigClockSource+0x11e>
 80128e0:	2b60      	cmp	r3, #96	@ 0x60
 80128e2:	d877      	bhi.n	80129d4 <HAL_TIM_ConfigClockSource+0x170>
 80128e4:	2b50      	cmp	r3, #80	@ 0x50
 80128e6:	d03c      	beq.n	8012962 <HAL_TIM_ConfigClockSource+0xfe>
 80128e8:	2b50      	cmp	r3, #80	@ 0x50
 80128ea:	d873      	bhi.n	80129d4 <HAL_TIM_ConfigClockSource+0x170>
 80128ec:	2b40      	cmp	r3, #64	@ 0x40
 80128ee:	d058      	beq.n	80129a2 <HAL_TIM_ConfigClockSource+0x13e>
 80128f0:	2b40      	cmp	r3, #64	@ 0x40
 80128f2:	d86f      	bhi.n	80129d4 <HAL_TIM_ConfigClockSource+0x170>
 80128f4:	2b30      	cmp	r3, #48	@ 0x30
 80128f6:	d064      	beq.n	80129c2 <HAL_TIM_ConfigClockSource+0x15e>
 80128f8:	2b30      	cmp	r3, #48	@ 0x30
 80128fa:	d86b      	bhi.n	80129d4 <HAL_TIM_ConfigClockSource+0x170>
 80128fc:	2b20      	cmp	r3, #32
 80128fe:	d060      	beq.n	80129c2 <HAL_TIM_ConfigClockSource+0x15e>
 8012900:	2b20      	cmp	r3, #32
 8012902:	d867      	bhi.n	80129d4 <HAL_TIM_ConfigClockSource+0x170>
 8012904:	2b00      	cmp	r3, #0
 8012906:	d05c      	beq.n	80129c2 <HAL_TIM_ConfigClockSource+0x15e>
 8012908:	2b10      	cmp	r3, #16
 801290a:	d05a      	beq.n	80129c2 <HAL_TIM_ConfigClockSource+0x15e>
 801290c:	e062      	b.n	80129d4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012912:	683b      	ldr	r3, [r7, #0]
 8012914:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801291a:	683b      	ldr	r3, [r7, #0]
 801291c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801291e:	f000 fe5b 	bl	80135d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	689b      	ldr	r3, [r3, #8]
 8012928:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8012930:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	68ba      	ldr	r2, [r7, #8]
 8012938:	609a      	str	r2, [r3, #8]
      break;
 801293a:	e04f      	b.n	80129dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012940:	683b      	ldr	r3, [r7, #0]
 8012942:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012944:	683b      	ldr	r3, [r7, #0]
 8012946:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012948:	683b      	ldr	r3, [r7, #0]
 801294a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801294c:	f000 fe44 	bl	80135d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	689a      	ldr	r2, [r3, #8]
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801295e:	609a      	str	r2, [r3, #8]
      break;
 8012960:	e03c      	b.n	80129dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012966:	683b      	ldr	r3, [r7, #0]
 8012968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801296a:	683b      	ldr	r3, [r7, #0]
 801296c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801296e:	461a      	mov	r2, r3
 8012970:	f000 fd02 	bl	8013378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	2150      	movs	r1, #80	@ 0x50
 801297a:	4618      	mov	r0, r3
 801297c:	f000 fe11 	bl	80135a2 <TIM_ITRx_SetConfig>
      break;
 8012980:	e02c      	b.n	80129dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801298e:	461a      	mov	r2, r3
 8012990:	f000 fd5e 	bl	8013450 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	2160      	movs	r1, #96	@ 0x60
 801299a:	4618      	mov	r0, r3
 801299c:	f000 fe01 	bl	80135a2 <TIM_ITRx_SetConfig>
      break;
 80129a0:	e01c      	b.n	80129dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80129a6:	683b      	ldr	r3, [r7, #0]
 80129a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80129aa:	683b      	ldr	r3, [r7, #0]
 80129ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80129ae:	461a      	mov	r2, r3
 80129b0:	f000 fce2 	bl	8013378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	2140      	movs	r1, #64	@ 0x40
 80129ba:	4618      	mov	r0, r3
 80129bc:	f000 fdf1 	bl	80135a2 <TIM_ITRx_SetConfig>
      break;
 80129c0:	e00c      	b.n	80129dc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	681a      	ldr	r2, [r3, #0]
 80129c6:	683b      	ldr	r3, [r7, #0]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	4619      	mov	r1, r3
 80129cc:	4610      	mov	r0, r2
 80129ce:	f000 fde8 	bl	80135a2 <TIM_ITRx_SetConfig>
      break;
 80129d2:	e003      	b.n	80129dc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80129d4:	2301      	movs	r3, #1
 80129d6:	73fb      	strb	r3, [r7, #15]
      break;
 80129d8:	e000      	b.n	80129dc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80129da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	2201      	movs	r2, #1
 80129e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	2200      	movs	r2, #0
 80129e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80129ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80129ee:	4618      	mov	r0, r3
 80129f0:	3710      	adds	r7, #16
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd80      	pop	{r7, pc}

080129f6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80129f6:	b580      	push	{r7, lr}
 80129f8:	b082      	sub	sp, #8
 80129fa:	af00      	add	r7, sp, #0
 80129fc:	6078      	str	r0, [r7, #4]
 80129fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012a06:	2b01      	cmp	r3, #1
 8012a08:	d101      	bne.n	8012a0e <HAL_TIM_SlaveConfigSynchro+0x18>
 8012a0a:	2302      	movs	r3, #2
 8012a0c:	e031      	b.n	8012a72 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	2201      	movs	r2, #1
 8012a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	2202      	movs	r2, #2
 8012a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8012a1e:	6839      	ldr	r1, [r7, #0]
 8012a20:	6878      	ldr	r0, [r7, #4]
 8012a22:	f000 fba7 	bl	8013174 <TIM_SlaveTimer_SetConfig>
 8012a26:	4603      	mov	r3, r0
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d009      	beq.n	8012a40 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	2201      	movs	r2, #1
 8012a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	2200      	movs	r2, #0
 8012a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8012a3c:	2301      	movs	r3, #1
 8012a3e:	e018      	b.n	8012a72 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	68da      	ldr	r2, [r3, #12]
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012a4e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	68da      	ldr	r2, [r3, #12]
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8012a5e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	2201      	movs	r2, #1
 8012a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8012a70:	2300      	movs	r3, #0
}
 8012a72:	4618      	mov	r0, r3
 8012a74:	3708      	adds	r7, #8
 8012a76:	46bd      	mov	sp, r7
 8012a78:	bd80      	pop	{r7, pc}
	...

08012a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012a7c:	b480      	push	{r7}
 8012a7e:	b085      	sub	sp, #20
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	6078      	str	r0, [r7, #4]
 8012a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	4a46      	ldr	r2, [pc, #280]	@ (8012ba8 <TIM_Base_SetConfig+0x12c>)
 8012a90:	4293      	cmp	r3, r2
 8012a92:	d013      	beq.n	8012abc <TIM_Base_SetConfig+0x40>
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012a9a:	d00f      	beq.n	8012abc <TIM_Base_SetConfig+0x40>
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	4a43      	ldr	r2, [pc, #268]	@ (8012bac <TIM_Base_SetConfig+0x130>)
 8012aa0:	4293      	cmp	r3, r2
 8012aa2:	d00b      	beq.n	8012abc <TIM_Base_SetConfig+0x40>
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	4a42      	ldr	r2, [pc, #264]	@ (8012bb0 <TIM_Base_SetConfig+0x134>)
 8012aa8:	4293      	cmp	r3, r2
 8012aaa:	d007      	beq.n	8012abc <TIM_Base_SetConfig+0x40>
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	4a41      	ldr	r2, [pc, #260]	@ (8012bb4 <TIM_Base_SetConfig+0x138>)
 8012ab0:	4293      	cmp	r3, r2
 8012ab2:	d003      	beq.n	8012abc <TIM_Base_SetConfig+0x40>
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	4a40      	ldr	r2, [pc, #256]	@ (8012bb8 <TIM_Base_SetConfig+0x13c>)
 8012ab8:	4293      	cmp	r3, r2
 8012aba:	d108      	bne.n	8012ace <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012ac4:	683b      	ldr	r3, [r7, #0]
 8012ac6:	685b      	ldr	r3, [r3, #4]
 8012ac8:	68fa      	ldr	r2, [r7, #12]
 8012aca:	4313      	orrs	r3, r2
 8012acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	4a35      	ldr	r2, [pc, #212]	@ (8012ba8 <TIM_Base_SetConfig+0x12c>)
 8012ad2:	4293      	cmp	r3, r2
 8012ad4:	d01f      	beq.n	8012b16 <TIM_Base_SetConfig+0x9a>
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012adc:	d01b      	beq.n	8012b16 <TIM_Base_SetConfig+0x9a>
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	4a32      	ldr	r2, [pc, #200]	@ (8012bac <TIM_Base_SetConfig+0x130>)
 8012ae2:	4293      	cmp	r3, r2
 8012ae4:	d017      	beq.n	8012b16 <TIM_Base_SetConfig+0x9a>
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	4a31      	ldr	r2, [pc, #196]	@ (8012bb0 <TIM_Base_SetConfig+0x134>)
 8012aea:	4293      	cmp	r3, r2
 8012aec:	d013      	beq.n	8012b16 <TIM_Base_SetConfig+0x9a>
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	4a30      	ldr	r2, [pc, #192]	@ (8012bb4 <TIM_Base_SetConfig+0x138>)
 8012af2:	4293      	cmp	r3, r2
 8012af4:	d00f      	beq.n	8012b16 <TIM_Base_SetConfig+0x9a>
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	4a2f      	ldr	r2, [pc, #188]	@ (8012bb8 <TIM_Base_SetConfig+0x13c>)
 8012afa:	4293      	cmp	r3, r2
 8012afc:	d00b      	beq.n	8012b16 <TIM_Base_SetConfig+0x9a>
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	4a2e      	ldr	r2, [pc, #184]	@ (8012bbc <TIM_Base_SetConfig+0x140>)
 8012b02:	4293      	cmp	r3, r2
 8012b04:	d007      	beq.n	8012b16 <TIM_Base_SetConfig+0x9a>
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	4a2d      	ldr	r2, [pc, #180]	@ (8012bc0 <TIM_Base_SetConfig+0x144>)
 8012b0a:	4293      	cmp	r3, r2
 8012b0c:	d003      	beq.n	8012b16 <TIM_Base_SetConfig+0x9a>
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	4a2c      	ldr	r2, [pc, #176]	@ (8012bc4 <TIM_Base_SetConfig+0x148>)
 8012b12:	4293      	cmp	r3, r2
 8012b14:	d108      	bne.n	8012b28 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012b1e:	683b      	ldr	r3, [r7, #0]
 8012b20:	68db      	ldr	r3, [r3, #12]
 8012b22:	68fa      	ldr	r2, [r7, #12]
 8012b24:	4313      	orrs	r3, r2
 8012b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8012b2e:	683b      	ldr	r3, [r7, #0]
 8012b30:	695b      	ldr	r3, [r3, #20]
 8012b32:	4313      	orrs	r3, r2
 8012b34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	68fa      	ldr	r2, [r7, #12]
 8012b3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012b3c:	683b      	ldr	r3, [r7, #0]
 8012b3e:	689a      	ldr	r2, [r3, #8]
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012b44:	683b      	ldr	r3, [r7, #0]
 8012b46:	681a      	ldr	r2, [r3, #0]
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	4a16      	ldr	r2, [pc, #88]	@ (8012ba8 <TIM_Base_SetConfig+0x12c>)
 8012b50:	4293      	cmp	r3, r2
 8012b52:	d00f      	beq.n	8012b74 <TIM_Base_SetConfig+0xf8>
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	4a18      	ldr	r2, [pc, #96]	@ (8012bb8 <TIM_Base_SetConfig+0x13c>)
 8012b58:	4293      	cmp	r3, r2
 8012b5a:	d00b      	beq.n	8012b74 <TIM_Base_SetConfig+0xf8>
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	4a17      	ldr	r2, [pc, #92]	@ (8012bbc <TIM_Base_SetConfig+0x140>)
 8012b60:	4293      	cmp	r3, r2
 8012b62:	d007      	beq.n	8012b74 <TIM_Base_SetConfig+0xf8>
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	4a16      	ldr	r2, [pc, #88]	@ (8012bc0 <TIM_Base_SetConfig+0x144>)
 8012b68:	4293      	cmp	r3, r2
 8012b6a:	d003      	beq.n	8012b74 <TIM_Base_SetConfig+0xf8>
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	4a15      	ldr	r2, [pc, #84]	@ (8012bc4 <TIM_Base_SetConfig+0x148>)
 8012b70:	4293      	cmp	r3, r2
 8012b72:	d103      	bne.n	8012b7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012b74:	683b      	ldr	r3, [r7, #0]
 8012b76:	691a      	ldr	r2, [r3, #16]
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	2201      	movs	r2, #1
 8012b80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	691b      	ldr	r3, [r3, #16]
 8012b86:	f003 0301 	and.w	r3, r3, #1
 8012b8a:	2b01      	cmp	r3, #1
 8012b8c:	d105      	bne.n	8012b9a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	691b      	ldr	r3, [r3, #16]
 8012b92:	f023 0201 	bic.w	r2, r3, #1
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	611a      	str	r2, [r3, #16]
  }
}
 8012b9a:	bf00      	nop
 8012b9c:	3714      	adds	r7, #20
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba4:	4770      	bx	lr
 8012ba6:	bf00      	nop
 8012ba8:	40012c00 	.word	0x40012c00
 8012bac:	40000400 	.word	0x40000400
 8012bb0:	40000800 	.word	0x40000800
 8012bb4:	40000c00 	.word	0x40000c00
 8012bb8:	40013400 	.word	0x40013400
 8012bbc:	40014000 	.word	0x40014000
 8012bc0:	40014400 	.word	0x40014400
 8012bc4:	40014800 	.word	0x40014800

08012bc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012bc8:	b480      	push	{r7}
 8012bca:	b087      	sub	sp, #28
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	6078      	str	r0, [r7, #4]
 8012bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	6a1b      	ldr	r3, [r3, #32]
 8012bd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	6a1b      	ldr	r3, [r3, #32]
 8012bdc:	f023 0201 	bic.w	r2, r3, #1
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	685b      	ldr	r3, [r3, #4]
 8012be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	699b      	ldr	r3, [r3, #24]
 8012bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	f023 0303 	bic.w	r3, r3, #3
 8012c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012c04:	683b      	ldr	r3, [r7, #0]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	68fa      	ldr	r2, [r7, #12]
 8012c0a:	4313      	orrs	r3, r2
 8012c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012c0e:	697b      	ldr	r3, [r7, #20]
 8012c10:	f023 0302 	bic.w	r3, r3, #2
 8012c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	689b      	ldr	r3, [r3, #8]
 8012c1a:	697a      	ldr	r2, [r7, #20]
 8012c1c:	4313      	orrs	r3, r2
 8012c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	4a2c      	ldr	r2, [pc, #176]	@ (8012cd4 <TIM_OC1_SetConfig+0x10c>)
 8012c24:	4293      	cmp	r3, r2
 8012c26:	d00f      	beq.n	8012c48 <TIM_OC1_SetConfig+0x80>
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	4a2b      	ldr	r2, [pc, #172]	@ (8012cd8 <TIM_OC1_SetConfig+0x110>)
 8012c2c:	4293      	cmp	r3, r2
 8012c2e:	d00b      	beq.n	8012c48 <TIM_OC1_SetConfig+0x80>
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	4a2a      	ldr	r2, [pc, #168]	@ (8012cdc <TIM_OC1_SetConfig+0x114>)
 8012c34:	4293      	cmp	r3, r2
 8012c36:	d007      	beq.n	8012c48 <TIM_OC1_SetConfig+0x80>
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	4a29      	ldr	r2, [pc, #164]	@ (8012ce0 <TIM_OC1_SetConfig+0x118>)
 8012c3c:	4293      	cmp	r3, r2
 8012c3e:	d003      	beq.n	8012c48 <TIM_OC1_SetConfig+0x80>
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	4a28      	ldr	r2, [pc, #160]	@ (8012ce4 <TIM_OC1_SetConfig+0x11c>)
 8012c44:	4293      	cmp	r3, r2
 8012c46:	d10c      	bne.n	8012c62 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012c48:	697b      	ldr	r3, [r7, #20]
 8012c4a:	f023 0308 	bic.w	r3, r3, #8
 8012c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012c50:	683b      	ldr	r3, [r7, #0]
 8012c52:	68db      	ldr	r3, [r3, #12]
 8012c54:	697a      	ldr	r2, [r7, #20]
 8012c56:	4313      	orrs	r3, r2
 8012c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012c5a:	697b      	ldr	r3, [r7, #20]
 8012c5c:	f023 0304 	bic.w	r3, r3, #4
 8012c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	4a1b      	ldr	r2, [pc, #108]	@ (8012cd4 <TIM_OC1_SetConfig+0x10c>)
 8012c66:	4293      	cmp	r3, r2
 8012c68:	d00f      	beq.n	8012c8a <TIM_OC1_SetConfig+0xc2>
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8012cd8 <TIM_OC1_SetConfig+0x110>)
 8012c6e:	4293      	cmp	r3, r2
 8012c70:	d00b      	beq.n	8012c8a <TIM_OC1_SetConfig+0xc2>
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	4a19      	ldr	r2, [pc, #100]	@ (8012cdc <TIM_OC1_SetConfig+0x114>)
 8012c76:	4293      	cmp	r3, r2
 8012c78:	d007      	beq.n	8012c8a <TIM_OC1_SetConfig+0xc2>
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	4a18      	ldr	r2, [pc, #96]	@ (8012ce0 <TIM_OC1_SetConfig+0x118>)
 8012c7e:	4293      	cmp	r3, r2
 8012c80:	d003      	beq.n	8012c8a <TIM_OC1_SetConfig+0xc2>
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	4a17      	ldr	r2, [pc, #92]	@ (8012ce4 <TIM_OC1_SetConfig+0x11c>)
 8012c86:	4293      	cmp	r3, r2
 8012c88:	d111      	bne.n	8012cae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012c8a:	693b      	ldr	r3, [r7, #16]
 8012c8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8012c92:	693b      	ldr	r3, [r7, #16]
 8012c94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8012c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012c9a:	683b      	ldr	r3, [r7, #0]
 8012c9c:	695b      	ldr	r3, [r3, #20]
 8012c9e:	693a      	ldr	r2, [r7, #16]
 8012ca0:	4313      	orrs	r3, r2
 8012ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012ca4:	683b      	ldr	r3, [r7, #0]
 8012ca6:	699b      	ldr	r3, [r3, #24]
 8012ca8:	693a      	ldr	r2, [r7, #16]
 8012caa:	4313      	orrs	r3, r2
 8012cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	693a      	ldr	r2, [r7, #16]
 8012cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	68fa      	ldr	r2, [r7, #12]
 8012cb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012cba:	683b      	ldr	r3, [r7, #0]
 8012cbc:	685a      	ldr	r2, [r3, #4]
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	697a      	ldr	r2, [r7, #20]
 8012cc6:	621a      	str	r2, [r3, #32]
}
 8012cc8:	bf00      	nop
 8012cca:	371c      	adds	r7, #28
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd2:	4770      	bx	lr
 8012cd4:	40012c00 	.word	0x40012c00
 8012cd8:	40013400 	.word	0x40013400
 8012cdc:	40014000 	.word	0x40014000
 8012ce0:	40014400 	.word	0x40014400
 8012ce4:	40014800 	.word	0x40014800

08012ce8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012ce8:	b480      	push	{r7}
 8012cea:	b087      	sub	sp, #28
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
 8012cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	6a1b      	ldr	r3, [r3, #32]
 8012cf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	6a1b      	ldr	r3, [r3, #32]
 8012cfc:	f023 0210 	bic.w	r2, r3, #16
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	685b      	ldr	r3, [r3, #4]
 8012d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	699b      	ldr	r3, [r3, #24]
 8012d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8012d16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012d24:	683b      	ldr	r3, [r7, #0]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	021b      	lsls	r3, r3, #8
 8012d2a:	68fa      	ldr	r2, [r7, #12]
 8012d2c:	4313      	orrs	r3, r2
 8012d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012d30:	697b      	ldr	r3, [r7, #20]
 8012d32:	f023 0320 	bic.w	r3, r3, #32
 8012d36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012d38:	683b      	ldr	r3, [r7, #0]
 8012d3a:	689b      	ldr	r3, [r3, #8]
 8012d3c:	011b      	lsls	r3, r3, #4
 8012d3e:	697a      	ldr	r2, [r7, #20]
 8012d40:	4313      	orrs	r3, r2
 8012d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	4a28      	ldr	r2, [pc, #160]	@ (8012de8 <TIM_OC2_SetConfig+0x100>)
 8012d48:	4293      	cmp	r3, r2
 8012d4a:	d003      	beq.n	8012d54 <TIM_OC2_SetConfig+0x6c>
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	4a27      	ldr	r2, [pc, #156]	@ (8012dec <TIM_OC2_SetConfig+0x104>)
 8012d50:	4293      	cmp	r3, r2
 8012d52:	d10d      	bne.n	8012d70 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012d54:	697b      	ldr	r3, [r7, #20]
 8012d56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012d5c:	683b      	ldr	r3, [r7, #0]
 8012d5e:	68db      	ldr	r3, [r3, #12]
 8012d60:	011b      	lsls	r3, r3, #4
 8012d62:	697a      	ldr	r2, [r7, #20]
 8012d64:	4313      	orrs	r3, r2
 8012d66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012d68:	697b      	ldr	r3, [r7, #20]
 8012d6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012d6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	4a1d      	ldr	r2, [pc, #116]	@ (8012de8 <TIM_OC2_SetConfig+0x100>)
 8012d74:	4293      	cmp	r3, r2
 8012d76:	d00f      	beq.n	8012d98 <TIM_OC2_SetConfig+0xb0>
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8012dec <TIM_OC2_SetConfig+0x104>)
 8012d7c:	4293      	cmp	r3, r2
 8012d7e:	d00b      	beq.n	8012d98 <TIM_OC2_SetConfig+0xb0>
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	4a1b      	ldr	r2, [pc, #108]	@ (8012df0 <TIM_OC2_SetConfig+0x108>)
 8012d84:	4293      	cmp	r3, r2
 8012d86:	d007      	beq.n	8012d98 <TIM_OC2_SetConfig+0xb0>
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	4a1a      	ldr	r2, [pc, #104]	@ (8012df4 <TIM_OC2_SetConfig+0x10c>)
 8012d8c:	4293      	cmp	r3, r2
 8012d8e:	d003      	beq.n	8012d98 <TIM_OC2_SetConfig+0xb0>
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	4a19      	ldr	r2, [pc, #100]	@ (8012df8 <TIM_OC2_SetConfig+0x110>)
 8012d94:	4293      	cmp	r3, r2
 8012d96:	d113      	bne.n	8012dc0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012d98:	693b      	ldr	r3, [r7, #16]
 8012d9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8012d9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012da0:	693b      	ldr	r3, [r7, #16]
 8012da2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012da6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012da8:	683b      	ldr	r3, [r7, #0]
 8012daa:	695b      	ldr	r3, [r3, #20]
 8012dac:	009b      	lsls	r3, r3, #2
 8012dae:	693a      	ldr	r2, [r7, #16]
 8012db0:	4313      	orrs	r3, r2
 8012db2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012db4:	683b      	ldr	r3, [r7, #0]
 8012db6:	699b      	ldr	r3, [r3, #24]
 8012db8:	009b      	lsls	r3, r3, #2
 8012dba:	693a      	ldr	r2, [r7, #16]
 8012dbc:	4313      	orrs	r3, r2
 8012dbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	693a      	ldr	r2, [r7, #16]
 8012dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	68fa      	ldr	r2, [r7, #12]
 8012dca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	685a      	ldr	r2, [r3, #4]
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	697a      	ldr	r2, [r7, #20]
 8012dd8:	621a      	str	r2, [r3, #32]
}
 8012dda:	bf00      	nop
 8012ddc:	371c      	adds	r7, #28
 8012dde:	46bd      	mov	sp, r7
 8012de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de4:	4770      	bx	lr
 8012de6:	bf00      	nop
 8012de8:	40012c00 	.word	0x40012c00
 8012dec:	40013400 	.word	0x40013400
 8012df0:	40014000 	.word	0x40014000
 8012df4:	40014400 	.word	0x40014400
 8012df8:	40014800 	.word	0x40014800

08012dfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012dfc:	b480      	push	{r7}
 8012dfe:	b087      	sub	sp, #28
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
 8012e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	6a1b      	ldr	r3, [r3, #32]
 8012e0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	6a1b      	ldr	r3, [r3, #32]
 8012e10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	685b      	ldr	r3, [r3, #4]
 8012e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	69db      	ldr	r3, [r3, #28]
 8012e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	f023 0303 	bic.w	r3, r3, #3
 8012e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	68fa      	ldr	r2, [r7, #12]
 8012e3e:	4313      	orrs	r3, r2
 8012e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012e42:	697b      	ldr	r3, [r7, #20]
 8012e44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8012e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012e4a:	683b      	ldr	r3, [r7, #0]
 8012e4c:	689b      	ldr	r3, [r3, #8]
 8012e4e:	021b      	lsls	r3, r3, #8
 8012e50:	697a      	ldr	r2, [r7, #20]
 8012e52:	4313      	orrs	r3, r2
 8012e54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	4a27      	ldr	r2, [pc, #156]	@ (8012ef8 <TIM_OC3_SetConfig+0xfc>)
 8012e5a:	4293      	cmp	r3, r2
 8012e5c:	d003      	beq.n	8012e66 <TIM_OC3_SetConfig+0x6a>
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	4a26      	ldr	r2, [pc, #152]	@ (8012efc <TIM_OC3_SetConfig+0x100>)
 8012e62:	4293      	cmp	r3, r2
 8012e64:	d10d      	bne.n	8012e82 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012e66:	697b      	ldr	r3, [r7, #20]
 8012e68:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012e6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	68db      	ldr	r3, [r3, #12]
 8012e72:	021b      	lsls	r3, r3, #8
 8012e74:	697a      	ldr	r2, [r7, #20]
 8012e76:	4313      	orrs	r3, r2
 8012e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012e7a:	697b      	ldr	r3, [r7, #20]
 8012e7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8012e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	4a1c      	ldr	r2, [pc, #112]	@ (8012ef8 <TIM_OC3_SetConfig+0xfc>)
 8012e86:	4293      	cmp	r3, r2
 8012e88:	d00f      	beq.n	8012eaa <TIM_OC3_SetConfig+0xae>
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8012efc <TIM_OC3_SetConfig+0x100>)
 8012e8e:	4293      	cmp	r3, r2
 8012e90:	d00b      	beq.n	8012eaa <TIM_OC3_SetConfig+0xae>
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	4a1a      	ldr	r2, [pc, #104]	@ (8012f00 <TIM_OC3_SetConfig+0x104>)
 8012e96:	4293      	cmp	r3, r2
 8012e98:	d007      	beq.n	8012eaa <TIM_OC3_SetConfig+0xae>
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	4a19      	ldr	r2, [pc, #100]	@ (8012f04 <TIM_OC3_SetConfig+0x108>)
 8012e9e:	4293      	cmp	r3, r2
 8012ea0:	d003      	beq.n	8012eaa <TIM_OC3_SetConfig+0xae>
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	4a18      	ldr	r2, [pc, #96]	@ (8012f08 <TIM_OC3_SetConfig+0x10c>)
 8012ea6:	4293      	cmp	r3, r2
 8012ea8:	d113      	bne.n	8012ed2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012eaa:	693b      	ldr	r3, [r7, #16]
 8012eac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012eb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8012eb2:	693b      	ldr	r3, [r7, #16]
 8012eb4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012eba:	683b      	ldr	r3, [r7, #0]
 8012ebc:	695b      	ldr	r3, [r3, #20]
 8012ebe:	011b      	lsls	r3, r3, #4
 8012ec0:	693a      	ldr	r2, [r7, #16]
 8012ec2:	4313      	orrs	r3, r2
 8012ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012ec6:	683b      	ldr	r3, [r7, #0]
 8012ec8:	699b      	ldr	r3, [r3, #24]
 8012eca:	011b      	lsls	r3, r3, #4
 8012ecc:	693a      	ldr	r2, [r7, #16]
 8012ece:	4313      	orrs	r3, r2
 8012ed0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	693a      	ldr	r2, [r7, #16]
 8012ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	68fa      	ldr	r2, [r7, #12]
 8012edc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012ede:	683b      	ldr	r3, [r7, #0]
 8012ee0:	685a      	ldr	r2, [r3, #4]
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	697a      	ldr	r2, [r7, #20]
 8012eea:	621a      	str	r2, [r3, #32]
}
 8012eec:	bf00      	nop
 8012eee:	371c      	adds	r7, #28
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef6:	4770      	bx	lr
 8012ef8:	40012c00 	.word	0x40012c00
 8012efc:	40013400 	.word	0x40013400
 8012f00:	40014000 	.word	0x40014000
 8012f04:	40014400 	.word	0x40014400
 8012f08:	40014800 	.word	0x40014800

08012f0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012f0c:	b480      	push	{r7}
 8012f0e:	b087      	sub	sp, #28
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
 8012f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	6a1b      	ldr	r3, [r3, #32]
 8012f1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	6a1b      	ldr	r3, [r3, #32]
 8012f20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	685b      	ldr	r3, [r3, #4]
 8012f2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	69db      	ldr	r3, [r3, #28]
 8012f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8012f3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	021b      	lsls	r3, r3, #8
 8012f4e:	68fa      	ldr	r2, [r7, #12]
 8012f50:	4313      	orrs	r3, r2
 8012f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012f54:	693b      	ldr	r3, [r7, #16]
 8012f56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012f5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012f5c:	683b      	ldr	r3, [r7, #0]
 8012f5e:	689b      	ldr	r3, [r3, #8]
 8012f60:	031b      	lsls	r3, r3, #12
 8012f62:	693a      	ldr	r2, [r7, #16]
 8012f64:	4313      	orrs	r3, r2
 8012f66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	4a18      	ldr	r2, [pc, #96]	@ (8012fcc <TIM_OC4_SetConfig+0xc0>)
 8012f6c:	4293      	cmp	r3, r2
 8012f6e:	d00f      	beq.n	8012f90 <TIM_OC4_SetConfig+0x84>
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	4a17      	ldr	r2, [pc, #92]	@ (8012fd0 <TIM_OC4_SetConfig+0xc4>)
 8012f74:	4293      	cmp	r3, r2
 8012f76:	d00b      	beq.n	8012f90 <TIM_OC4_SetConfig+0x84>
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	4a16      	ldr	r2, [pc, #88]	@ (8012fd4 <TIM_OC4_SetConfig+0xc8>)
 8012f7c:	4293      	cmp	r3, r2
 8012f7e:	d007      	beq.n	8012f90 <TIM_OC4_SetConfig+0x84>
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	4a15      	ldr	r2, [pc, #84]	@ (8012fd8 <TIM_OC4_SetConfig+0xcc>)
 8012f84:	4293      	cmp	r3, r2
 8012f86:	d003      	beq.n	8012f90 <TIM_OC4_SetConfig+0x84>
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	4a14      	ldr	r2, [pc, #80]	@ (8012fdc <TIM_OC4_SetConfig+0xd0>)
 8012f8c:	4293      	cmp	r3, r2
 8012f8e:	d109      	bne.n	8012fa4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012f90:	697b      	ldr	r3, [r7, #20]
 8012f92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012f96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	695b      	ldr	r3, [r3, #20]
 8012f9c:	019b      	lsls	r3, r3, #6
 8012f9e:	697a      	ldr	r2, [r7, #20]
 8012fa0:	4313      	orrs	r3, r2
 8012fa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	697a      	ldr	r2, [r7, #20]
 8012fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	68fa      	ldr	r2, [r7, #12]
 8012fae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	685a      	ldr	r2, [r3, #4]
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	693a      	ldr	r2, [r7, #16]
 8012fbc:	621a      	str	r2, [r3, #32]
}
 8012fbe:	bf00      	nop
 8012fc0:	371c      	adds	r7, #28
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc8:	4770      	bx	lr
 8012fca:	bf00      	nop
 8012fcc:	40012c00 	.word	0x40012c00
 8012fd0:	40013400 	.word	0x40013400
 8012fd4:	40014000 	.word	0x40014000
 8012fd8:	40014400 	.word	0x40014400
 8012fdc:	40014800 	.word	0x40014800

08012fe0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012fe0:	b480      	push	{r7}
 8012fe2:	b087      	sub	sp, #28
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	6078      	str	r0, [r7, #4]
 8012fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	6a1b      	ldr	r3, [r3, #32]
 8012fee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	6a1b      	ldr	r3, [r3, #32]
 8012ff4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	685b      	ldr	r3, [r3, #4]
 8013000:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801300e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	68fa      	ldr	r2, [r7, #12]
 801301a:	4313      	orrs	r3, r2
 801301c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801301e:	693b      	ldr	r3, [r7, #16]
 8013020:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8013024:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013026:	683b      	ldr	r3, [r7, #0]
 8013028:	689b      	ldr	r3, [r3, #8]
 801302a:	041b      	lsls	r3, r3, #16
 801302c:	693a      	ldr	r2, [r7, #16]
 801302e:	4313      	orrs	r3, r2
 8013030:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	4a17      	ldr	r2, [pc, #92]	@ (8013094 <TIM_OC5_SetConfig+0xb4>)
 8013036:	4293      	cmp	r3, r2
 8013038:	d00f      	beq.n	801305a <TIM_OC5_SetConfig+0x7a>
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	4a16      	ldr	r2, [pc, #88]	@ (8013098 <TIM_OC5_SetConfig+0xb8>)
 801303e:	4293      	cmp	r3, r2
 8013040:	d00b      	beq.n	801305a <TIM_OC5_SetConfig+0x7a>
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	4a15      	ldr	r2, [pc, #84]	@ (801309c <TIM_OC5_SetConfig+0xbc>)
 8013046:	4293      	cmp	r3, r2
 8013048:	d007      	beq.n	801305a <TIM_OC5_SetConfig+0x7a>
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	4a14      	ldr	r2, [pc, #80]	@ (80130a0 <TIM_OC5_SetConfig+0xc0>)
 801304e:	4293      	cmp	r3, r2
 8013050:	d003      	beq.n	801305a <TIM_OC5_SetConfig+0x7a>
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	4a13      	ldr	r2, [pc, #76]	@ (80130a4 <TIM_OC5_SetConfig+0xc4>)
 8013056:	4293      	cmp	r3, r2
 8013058:	d109      	bne.n	801306e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801305a:	697b      	ldr	r3, [r7, #20]
 801305c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013060:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8013062:	683b      	ldr	r3, [r7, #0]
 8013064:	695b      	ldr	r3, [r3, #20]
 8013066:	021b      	lsls	r3, r3, #8
 8013068:	697a      	ldr	r2, [r7, #20]
 801306a:	4313      	orrs	r3, r2
 801306c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	697a      	ldr	r2, [r7, #20]
 8013072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	68fa      	ldr	r2, [r7, #12]
 8013078:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801307a:	683b      	ldr	r3, [r7, #0]
 801307c:	685a      	ldr	r2, [r3, #4]
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	693a      	ldr	r2, [r7, #16]
 8013086:	621a      	str	r2, [r3, #32]
}
 8013088:	bf00      	nop
 801308a:	371c      	adds	r7, #28
 801308c:	46bd      	mov	sp, r7
 801308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013092:	4770      	bx	lr
 8013094:	40012c00 	.word	0x40012c00
 8013098:	40013400 	.word	0x40013400
 801309c:	40014000 	.word	0x40014000
 80130a0:	40014400 	.word	0x40014400
 80130a4:	40014800 	.word	0x40014800

080130a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80130a8:	b480      	push	{r7}
 80130aa:	b087      	sub	sp, #28
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
 80130b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	6a1b      	ldr	r3, [r3, #32]
 80130b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	6a1b      	ldr	r3, [r3, #32]
 80130bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	685b      	ldr	r3, [r3, #4]
 80130c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80130ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80130d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80130da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80130dc:	683b      	ldr	r3, [r7, #0]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	021b      	lsls	r3, r3, #8
 80130e2:	68fa      	ldr	r2, [r7, #12]
 80130e4:	4313      	orrs	r3, r2
 80130e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80130e8:	693b      	ldr	r3, [r7, #16]
 80130ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80130ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80130f0:	683b      	ldr	r3, [r7, #0]
 80130f2:	689b      	ldr	r3, [r3, #8]
 80130f4:	051b      	lsls	r3, r3, #20
 80130f6:	693a      	ldr	r2, [r7, #16]
 80130f8:	4313      	orrs	r3, r2
 80130fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	4a18      	ldr	r2, [pc, #96]	@ (8013160 <TIM_OC6_SetConfig+0xb8>)
 8013100:	4293      	cmp	r3, r2
 8013102:	d00f      	beq.n	8013124 <TIM_OC6_SetConfig+0x7c>
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	4a17      	ldr	r2, [pc, #92]	@ (8013164 <TIM_OC6_SetConfig+0xbc>)
 8013108:	4293      	cmp	r3, r2
 801310a:	d00b      	beq.n	8013124 <TIM_OC6_SetConfig+0x7c>
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	4a16      	ldr	r2, [pc, #88]	@ (8013168 <TIM_OC6_SetConfig+0xc0>)
 8013110:	4293      	cmp	r3, r2
 8013112:	d007      	beq.n	8013124 <TIM_OC6_SetConfig+0x7c>
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	4a15      	ldr	r2, [pc, #84]	@ (801316c <TIM_OC6_SetConfig+0xc4>)
 8013118:	4293      	cmp	r3, r2
 801311a:	d003      	beq.n	8013124 <TIM_OC6_SetConfig+0x7c>
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	4a14      	ldr	r2, [pc, #80]	@ (8013170 <TIM_OC6_SetConfig+0xc8>)
 8013120:	4293      	cmp	r3, r2
 8013122:	d109      	bne.n	8013138 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013124:	697b      	ldr	r3, [r7, #20]
 8013126:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801312a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801312c:	683b      	ldr	r3, [r7, #0]
 801312e:	695b      	ldr	r3, [r3, #20]
 8013130:	029b      	lsls	r3, r3, #10
 8013132:	697a      	ldr	r2, [r7, #20]
 8013134:	4313      	orrs	r3, r2
 8013136:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	697a      	ldr	r2, [r7, #20]
 801313c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	68fa      	ldr	r2, [r7, #12]
 8013142:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013144:	683b      	ldr	r3, [r7, #0]
 8013146:	685a      	ldr	r2, [r3, #4]
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	693a      	ldr	r2, [r7, #16]
 8013150:	621a      	str	r2, [r3, #32]
}
 8013152:	bf00      	nop
 8013154:	371c      	adds	r7, #28
 8013156:	46bd      	mov	sp, r7
 8013158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801315c:	4770      	bx	lr
 801315e:	bf00      	nop
 8013160:	40012c00 	.word	0x40012c00
 8013164:	40013400 	.word	0x40013400
 8013168:	40014000 	.word	0x40014000
 801316c:	40014400 	.word	0x40014400
 8013170:	40014800 	.word	0x40014800

08013174 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b086      	sub	sp, #24
 8013178:	af00      	add	r7, sp, #0
 801317a:	6078      	str	r0, [r7, #4]
 801317c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801317e:	2300      	movs	r3, #0
 8013180:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	689b      	ldr	r3, [r3, #8]
 8013188:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801318a:	693b      	ldr	r3, [r7, #16]
 801318c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013190:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8013192:	683b      	ldr	r3, [r7, #0]
 8013194:	685b      	ldr	r3, [r3, #4]
 8013196:	693a      	ldr	r2, [r7, #16]
 8013198:	4313      	orrs	r3, r2
 801319a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 801319c:	693b      	ldr	r3, [r7, #16]
 801319e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80131a2:	f023 0307 	bic.w	r3, r3, #7
 80131a6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80131a8:	683b      	ldr	r3, [r7, #0]
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	693a      	ldr	r2, [r7, #16]
 80131ae:	4313      	orrs	r3, r2
 80131b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	693a      	ldr	r2, [r7, #16]
 80131b8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80131ba:	683b      	ldr	r3, [r7, #0]
 80131bc:	685b      	ldr	r3, [r3, #4]
 80131be:	2b70      	cmp	r3, #112	@ 0x70
 80131c0:	d01a      	beq.n	80131f8 <TIM_SlaveTimer_SetConfig+0x84>
 80131c2:	2b70      	cmp	r3, #112	@ 0x70
 80131c4:	d860      	bhi.n	8013288 <TIM_SlaveTimer_SetConfig+0x114>
 80131c6:	2b60      	cmp	r3, #96	@ 0x60
 80131c8:	d054      	beq.n	8013274 <TIM_SlaveTimer_SetConfig+0x100>
 80131ca:	2b60      	cmp	r3, #96	@ 0x60
 80131cc:	d85c      	bhi.n	8013288 <TIM_SlaveTimer_SetConfig+0x114>
 80131ce:	2b50      	cmp	r3, #80	@ 0x50
 80131d0:	d046      	beq.n	8013260 <TIM_SlaveTimer_SetConfig+0xec>
 80131d2:	2b50      	cmp	r3, #80	@ 0x50
 80131d4:	d858      	bhi.n	8013288 <TIM_SlaveTimer_SetConfig+0x114>
 80131d6:	2b40      	cmp	r3, #64	@ 0x40
 80131d8:	d019      	beq.n	801320e <TIM_SlaveTimer_SetConfig+0x9a>
 80131da:	2b40      	cmp	r3, #64	@ 0x40
 80131dc:	d854      	bhi.n	8013288 <TIM_SlaveTimer_SetConfig+0x114>
 80131de:	2b30      	cmp	r3, #48	@ 0x30
 80131e0:	d055      	beq.n	801328e <TIM_SlaveTimer_SetConfig+0x11a>
 80131e2:	2b30      	cmp	r3, #48	@ 0x30
 80131e4:	d850      	bhi.n	8013288 <TIM_SlaveTimer_SetConfig+0x114>
 80131e6:	2b20      	cmp	r3, #32
 80131e8:	d051      	beq.n	801328e <TIM_SlaveTimer_SetConfig+0x11a>
 80131ea:	2b20      	cmp	r3, #32
 80131ec:	d84c      	bhi.n	8013288 <TIM_SlaveTimer_SetConfig+0x114>
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d04d      	beq.n	801328e <TIM_SlaveTimer_SetConfig+0x11a>
 80131f2:	2b10      	cmp	r3, #16
 80131f4:	d04b      	beq.n	801328e <TIM_SlaveTimer_SetConfig+0x11a>
 80131f6:	e047      	b.n	8013288 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80131fc:	683b      	ldr	r3, [r7, #0]
 80131fe:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8013208:	f000 f9e6 	bl	80135d8 <TIM_ETR_SetConfig>
      break;
 801320c:	e040      	b.n	8013290 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 801320e:	683b      	ldr	r3, [r7, #0]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	2b05      	cmp	r3, #5
 8013214:	d101      	bne.n	801321a <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8013216:	2301      	movs	r3, #1
 8013218:	e03b      	b.n	8013292 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	6a1b      	ldr	r3, [r3, #32]
 8013220:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	6a1a      	ldr	r2, [r3, #32]
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	f022 0201 	bic.w	r2, r2, #1
 8013230:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	699b      	ldr	r3, [r3, #24]
 8013238:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801323a:	68bb      	ldr	r3, [r7, #8]
 801323c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013240:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8013242:	683b      	ldr	r3, [r7, #0]
 8013244:	691b      	ldr	r3, [r3, #16]
 8013246:	011b      	lsls	r3, r3, #4
 8013248:	68ba      	ldr	r2, [r7, #8]
 801324a:	4313      	orrs	r3, r2
 801324c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	68ba      	ldr	r2, [r7, #8]
 8013254:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	68fa      	ldr	r2, [r7, #12]
 801325c:	621a      	str	r2, [r3, #32]
      break;
 801325e:	e017      	b.n	8013290 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8013264:	683b      	ldr	r3, [r7, #0]
 8013266:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8013268:	683b      	ldr	r3, [r7, #0]
 801326a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801326c:	461a      	mov	r2, r3
 801326e:	f000 f883 	bl	8013378 <TIM_TI1_ConfigInputStage>
      break;
 8013272:	e00d      	b.n	8013290 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8013278:	683b      	ldr	r3, [r7, #0]
 801327a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 801327c:	683b      	ldr	r3, [r7, #0]
 801327e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013280:	461a      	mov	r2, r3
 8013282:	f000 f8e5 	bl	8013450 <TIM_TI2_ConfigInputStage>
      break;
 8013286:	e003      	b.n	8013290 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8013288:	2301      	movs	r3, #1
 801328a:	75fb      	strb	r3, [r7, #23]
      break;
 801328c:	e000      	b.n	8013290 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 801328e:	bf00      	nop
  }

  return status;
 8013290:	7dfb      	ldrb	r3, [r7, #23]
}
 8013292:	4618      	mov	r0, r3
 8013294:	3718      	adds	r7, #24
 8013296:	46bd      	mov	sp, r7
 8013298:	bd80      	pop	{r7, pc}
	...

0801329c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 801329c:	b480      	push	{r7}
 801329e:	b087      	sub	sp, #28
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	60f8      	str	r0, [r7, #12]
 80132a4:	60b9      	str	r1, [r7, #8]
 80132a6:	607a      	str	r2, [r7, #4]
 80132a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	6a1b      	ldr	r3, [r3, #32]
 80132ae:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	6a1b      	ldr	r3, [r3, #32]
 80132b4:	f023 0201 	bic.w	r2, r3, #1
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	699b      	ldr	r3, [r3, #24]
 80132c0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	4a26      	ldr	r2, [pc, #152]	@ (8013360 <TIM_TI1_SetConfig+0xc4>)
 80132c6:	4293      	cmp	r3, r2
 80132c8:	d017      	beq.n	80132fa <TIM_TI1_SetConfig+0x5e>
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80132d0:	d013      	beq.n	80132fa <TIM_TI1_SetConfig+0x5e>
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	4a23      	ldr	r2, [pc, #140]	@ (8013364 <TIM_TI1_SetConfig+0xc8>)
 80132d6:	4293      	cmp	r3, r2
 80132d8:	d00f      	beq.n	80132fa <TIM_TI1_SetConfig+0x5e>
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	4a22      	ldr	r2, [pc, #136]	@ (8013368 <TIM_TI1_SetConfig+0xcc>)
 80132de:	4293      	cmp	r3, r2
 80132e0:	d00b      	beq.n	80132fa <TIM_TI1_SetConfig+0x5e>
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	4a21      	ldr	r2, [pc, #132]	@ (801336c <TIM_TI1_SetConfig+0xd0>)
 80132e6:	4293      	cmp	r3, r2
 80132e8:	d007      	beq.n	80132fa <TIM_TI1_SetConfig+0x5e>
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	4a20      	ldr	r2, [pc, #128]	@ (8013370 <TIM_TI1_SetConfig+0xd4>)
 80132ee:	4293      	cmp	r3, r2
 80132f0:	d003      	beq.n	80132fa <TIM_TI1_SetConfig+0x5e>
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	4a1f      	ldr	r2, [pc, #124]	@ (8013374 <TIM_TI1_SetConfig+0xd8>)
 80132f6:	4293      	cmp	r3, r2
 80132f8:	d101      	bne.n	80132fe <TIM_TI1_SetConfig+0x62>
 80132fa:	2301      	movs	r3, #1
 80132fc:	e000      	b.n	8013300 <TIM_TI1_SetConfig+0x64>
 80132fe:	2300      	movs	r3, #0
 8013300:	2b00      	cmp	r3, #0
 8013302:	d008      	beq.n	8013316 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8013304:	697b      	ldr	r3, [r7, #20]
 8013306:	f023 0303 	bic.w	r3, r3, #3
 801330a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801330c:	697a      	ldr	r2, [r7, #20]
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	4313      	orrs	r3, r2
 8013312:	617b      	str	r3, [r7, #20]
 8013314:	e003      	b.n	801331e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8013316:	697b      	ldr	r3, [r7, #20]
 8013318:	f043 0301 	orr.w	r3, r3, #1
 801331c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801331e:	697b      	ldr	r3, [r7, #20]
 8013320:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013324:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8013326:	683b      	ldr	r3, [r7, #0]
 8013328:	011b      	lsls	r3, r3, #4
 801332a:	b2db      	uxtb	r3, r3
 801332c:	697a      	ldr	r2, [r7, #20]
 801332e:	4313      	orrs	r3, r2
 8013330:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013332:	693b      	ldr	r3, [r7, #16]
 8013334:	f023 030a 	bic.w	r3, r3, #10
 8013338:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801333a:	68bb      	ldr	r3, [r7, #8]
 801333c:	f003 030a 	and.w	r3, r3, #10
 8013340:	693a      	ldr	r2, [r7, #16]
 8013342:	4313      	orrs	r3, r2
 8013344:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	697a      	ldr	r2, [r7, #20]
 801334a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	693a      	ldr	r2, [r7, #16]
 8013350:	621a      	str	r2, [r3, #32]
}
 8013352:	bf00      	nop
 8013354:	371c      	adds	r7, #28
 8013356:	46bd      	mov	sp, r7
 8013358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801335c:	4770      	bx	lr
 801335e:	bf00      	nop
 8013360:	40012c00 	.word	0x40012c00
 8013364:	40000400 	.word	0x40000400
 8013368:	40000800 	.word	0x40000800
 801336c:	40000c00 	.word	0x40000c00
 8013370:	40013400 	.word	0x40013400
 8013374:	40014000 	.word	0x40014000

08013378 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013378:	b480      	push	{r7}
 801337a:	b087      	sub	sp, #28
 801337c:	af00      	add	r7, sp, #0
 801337e:	60f8      	str	r0, [r7, #12]
 8013380:	60b9      	str	r1, [r7, #8]
 8013382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	6a1b      	ldr	r3, [r3, #32]
 8013388:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	6a1b      	ldr	r3, [r3, #32]
 801338e:	f023 0201 	bic.w	r2, r3, #1
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	699b      	ldr	r3, [r3, #24]
 801339a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801339c:	693b      	ldr	r3, [r7, #16]
 801339e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80133a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	011b      	lsls	r3, r3, #4
 80133a8:	693a      	ldr	r2, [r7, #16]
 80133aa:	4313      	orrs	r3, r2
 80133ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80133ae:	697b      	ldr	r3, [r7, #20]
 80133b0:	f023 030a 	bic.w	r3, r3, #10
 80133b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80133b6:	697a      	ldr	r2, [r7, #20]
 80133b8:	68bb      	ldr	r3, [r7, #8]
 80133ba:	4313      	orrs	r3, r2
 80133bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	693a      	ldr	r2, [r7, #16]
 80133c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	697a      	ldr	r2, [r7, #20]
 80133c8:	621a      	str	r2, [r3, #32]
}
 80133ca:	bf00      	nop
 80133cc:	371c      	adds	r7, #28
 80133ce:	46bd      	mov	sp, r7
 80133d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d4:	4770      	bx	lr

080133d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80133d6:	b480      	push	{r7}
 80133d8:	b087      	sub	sp, #28
 80133da:	af00      	add	r7, sp, #0
 80133dc:	60f8      	str	r0, [r7, #12]
 80133de:	60b9      	str	r1, [r7, #8]
 80133e0:	607a      	str	r2, [r7, #4]
 80133e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	6a1b      	ldr	r3, [r3, #32]
 80133e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	6a1b      	ldr	r3, [r3, #32]
 80133ee:	f023 0210 	bic.w	r2, r3, #16
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	699b      	ldr	r3, [r3, #24]
 80133fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80133fc:	693b      	ldr	r3, [r7, #16]
 80133fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	021b      	lsls	r3, r3, #8
 8013408:	693a      	ldr	r2, [r7, #16]
 801340a:	4313      	orrs	r3, r2
 801340c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801340e:	693b      	ldr	r3, [r7, #16]
 8013410:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8013414:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8013416:	683b      	ldr	r3, [r7, #0]
 8013418:	031b      	lsls	r3, r3, #12
 801341a:	b29b      	uxth	r3, r3
 801341c:	693a      	ldr	r2, [r7, #16]
 801341e:	4313      	orrs	r3, r2
 8013420:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013422:	697b      	ldr	r3, [r7, #20]
 8013424:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8013428:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801342a:	68bb      	ldr	r3, [r7, #8]
 801342c:	011b      	lsls	r3, r3, #4
 801342e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8013432:	697a      	ldr	r2, [r7, #20]
 8013434:	4313      	orrs	r3, r2
 8013436:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	693a      	ldr	r2, [r7, #16]
 801343c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	697a      	ldr	r2, [r7, #20]
 8013442:	621a      	str	r2, [r3, #32]
}
 8013444:	bf00      	nop
 8013446:	371c      	adds	r7, #28
 8013448:	46bd      	mov	sp, r7
 801344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344e:	4770      	bx	lr

08013450 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013450:	b480      	push	{r7}
 8013452:	b087      	sub	sp, #28
 8013454:	af00      	add	r7, sp, #0
 8013456:	60f8      	str	r0, [r7, #12]
 8013458:	60b9      	str	r1, [r7, #8]
 801345a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	6a1b      	ldr	r3, [r3, #32]
 8013460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	6a1b      	ldr	r3, [r3, #32]
 8013466:	f023 0210 	bic.w	r2, r3, #16
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	699b      	ldr	r3, [r3, #24]
 8013472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013474:	693b      	ldr	r3, [r7, #16]
 8013476:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801347a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	031b      	lsls	r3, r3, #12
 8013480:	693a      	ldr	r2, [r7, #16]
 8013482:	4313      	orrs	r3, r2
 8013484:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013486:	697b      	ldr	r3, [r7, #20]
 8013488:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801348c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801348e:	68bb      	ldr	r3, [r7, #8]
 8013490:	011b      	lsls	r3, r3, #4
 8013492:	697a      	ldr	r2, [r7, #20]
 8013494:	4313      	orrs	r3, r2
 8013496:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	693a      	ldr	r2, [r7, #16]
 801349c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	697a      	ldr	r2, [r7, #20]
 80134a2:	621a      	str	r2, [r3, #32]
}
 80134a4:	bf00      	nop
 80134a6:	371c      	adds	r7, #28
 80134a8:	46bd      	mov	sp, r7
 80134aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ae:	4770      	bx	lr

080134b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80134b0:	b480      	push	{r7}
 80134b2:	b087      	sub	sp, #28
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	60f8      	str	r0, [r7, #12]
 80134b8:	60b9      	str	r1, [r7, #8]
 80134ba:	607a      	str	r2, [r7, #4]
 80134bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	6a1b      	ldr	r3, [r3, #32]
 80134c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	6a1b      	ldr	r3, [r3, #32]
 80134c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	69db      	ldr	r3, [r3, #28]
 80134d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80134d6:	693b      	ldr	r3, [r7, #16]
 80134d8:	f023 0303 	bic.w	r3, r3, #3
 80134dc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80134de:	693a      	ldr	r2, [r7, #16]
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	4313      	orrs	r3, r2
 80134e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80134e6:	693b      	ldr	r3, [r7, #16]
 80134e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80134ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80134ee:	683b      	ldr	r3, [r7, #0]
 80134f0:	011b      	lsls	r3, r3, #4
 80134f2:	b2db      	uxtb	r3, r3
 80134f4:	693a      	ldr	r2, [r7, #16]
 80134f6:	4313      	orrs	r3, r2
 80134f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80134fa:	697b      	ldr	r3, [r7, #20]
 80134fc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8013500:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8013502:	68bb      	ldr	r3, [r7, #8]
 8013504:	021b      	lsls	r3, r3, #8
 8013506:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 801350a:	697a      	ldr	r2, [r7, #20]
 801350c:	4313      	orrs	r3, r2
 801350e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	693a      	ldr	r2, [r7, #16]
 8013514:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	697a      	ldr	r2, [r7, #20]
 801351a:	621a      	str	r2, [r3, #32]
}
 801351c:	bf00      	nop
 801351e:	371c      	adds	r7, #28
 8013520:	46bd      	mov	sp, r7
 8013522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013526:	4770      	bx	lr

08013528 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8013528:	b480      	push	{r7}
 801352a:	b087      	sub	sp, #28
 801352c:	af00      	add	r7, sp, #0
 801352e:	60f8      	str	r0, [r7, #12]
 8013530:	60b9      	str	r1, [r7, #8]
 8013532:	607a      	str	r2, [r7, #4]
 8013534:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	6a1b      	ldr	r3, [r3, #32]
 801353a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	6a1b      	ldr	r3, [r3, #32]
 8013540:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	69db      	ldr	r3, [r3, #28]
 801354c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801354e:	693b      	ldr	r3, [r7, #16]
 8013550:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013554:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	021b      	lsls	r3, r3, #8
 801355a:	693a      	ldr	r2, [r7, #16]
 801355c:	4313      	orrs	r3, r2
 801355e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8013560:	693b      	ldr	r3, [r7, #16]
 8013562:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8013566:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	031b      	lsls	r3, r3, #12
 801356c:	b29b      	uxth	r3, r3
 801356e:	693a      	ldr	r2, [r7, #16]
 8013570:	4313      	orrs	r3, r2
 8013572:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8013574:	697b      	ldr	r3, [r7, #20]
 8013576:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 801357a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	031b      	lsls	r3, r3, #12
 8013580:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8013584:	697a      	ldr	r2, [r7, #20]
 8013586:	4313      	orrs	r3, r2
 8013588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	693a      	ldr	r2, [r7, #16]
 801358e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	697a      	ldr	r2, [r7, #20]
 8013594:	621a      	str	r2, [r3, #32]
}
 8013596:	bf00      	nop
 8013598:	371c      	adds	r7, #28
 801359a:	46bd      	mov	sp, r7
 801359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a0:	4770      	bx	lr

080135a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80135a2:	b480      	push	{r7}
 80135a4:	b085      	sub	sp, #20
 80135a6:	af00      	add	r7, sp, #0
 80135a8:	6078      	str	r0, [r7, #4]
 80135aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	689b      	ldr	r3, [r3, #8]
 80135b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80135b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80135ba:	683a      	ldr	r2, [r7, #0]
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	4313      	orrs	r3, r2
 80135c0:	f043 0307 	orr.w	r3, r3, #7
 80135c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	68fa      	ldr	r2, [r7, #12]
 80135ca:	609a      	str	r2, [r3, #8]
}
 80135cc:	bf00      	nop
 80135ce:	3714      	adds	r7, #20
 80135d0:	46bd      	mov	sp, r7
 80135d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d6:	4770      	bx	lr

080135d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80135d8:	b480      	push	{r7}
 80135da:	b087      	sub	sp, #28
 80135dc:	af00      	add	r7, sp, #0
 80135de:	60f8      	str	r0, [r7, #12]
 80135e0:	60b9      	str	r1, [r7, #8]
 80135e2:	607a      	str	r2, [r7, #4]
 80135e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	689b      	ldr	r3, [r3, #8]
 80135ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80135ec:	697b      	ldr	r3, [r7, #20]
 80135ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80135f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80135f4:	683b      	ldr	r3, [r7, #0]
 80135f6:	021a      	lsls	r2, r3, #8
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	431a      	orrs	r2, r3
 80135fc:	68bb      	ldr	r3, [r7, #8]
 80135fe:	4313      	orrs	r3, r2
 8013600:	697a      	ldr	r2, [r7, #20]
 8013602:	4313      	orrs	r3, r2
 8013604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	697a      	ldr	r2, [r7, #20]
 801360a:	609a      	str	r2, [r3, #8]
}
 801360c:	bf00      	nop
 801360e:	371c      	adds	r7, #28
 8013610:	46bd      	mov	sp, r7
 8013612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013616:	4770      	bx	lr

08013618 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013618:	b480      	push	{r7}
 801361a:	b087      	sub	sp, #28
 801361c:	af00      	add	r7, sp, #0
 801361e:	60f8      	str	r0, [r7, #12]
 8013620:	60b9      	str	r1, [r7, #8]
 8013622:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013624:	68bb      	ldr	r3, [r7, #8]
 8013626:	f003 031f 	and.w	r3, r3, #31
 801362a:	2201      	movs	r2, #1
 801362c:	fa02 f303 	lsl.w	r3, r2, r3
 8013630:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	6a1a      	ldr	r2, [r3, #32]
 8013636:	697b      	ldr	r3, [r7, #20]
 8013638:	43db      	mvns	r3, r3
 801363a:	401a      	ands	r2, r3
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	6a1a      	ldr	r2, [r3, #32]
 8013644:	68bb      	ldr	r3, [r7, #8]
 8013646:	f003 031f 	and.w	r3, r3, #31
 801364a:	6879      	ldr	r1, [r7, #4]
 801364c:	fa01 f303 	lsl.w	r3, r1, r3
 8013650:	431a      	orrs	r2, r3
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	621a      	str	r2, [r3, #32]
}
 8013656:	bf00      	nop
 8013658:	371c      	adds	r7, #28
 801365a:	46bd      	mov	sp, r7
 801365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013660:	4770      	bx	lr
	...

08013664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013664:	b480      	push	{r7}
 8013666:	b085      	sub	sp, #20
 8013668:	af00      	add	r7, sp, #0
 801366a:	6078      	str	r0, [r7, #4]
 801366c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013674:	2b01      	cmp	r3, #1
 8013676:	d101      	bne.n	801367c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013678:	2302      	movs	r3, #2
 801367a:	e068      	b.n	801374e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	2201      	movs	r2, #1
 8013680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	2202      	movs	r2, #2
 8013688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	685b      	ldr	r3, [r3, #4]
 8013692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	689b      	ldr	r3, [r3, #8]
 801369a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	4a2e      	ldr	r2, [pc, #184]	@ (801375c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80136a2:	4293      	cmp	r3, r2
 80136a4:	d004      	beq.n	80136b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	4a2d      	ldr	r2, [pc, #180]	@ (8013760 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80136ac:	4293      	cmp	r3, r2
 80136ae:	d108      	bne.n	80136c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80136b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80136b8:	683b      	ldr	r3, [r7, #0]
 80136ba:	685b      	ldr	r3, [r3, #4]
 80136bc:	68fa      	ldr	r2, [r7, #12]
 80136be:	4313      	orrs	r3, r2
 80136c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80136c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80136ca:	683b      	ldr	r3, [r7, #0]
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	68fa      	ldr	r2, [r7, #12]
 80136d0:	4313      	orrs	r3, r2
 80136d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	68fa      	ldr	r2, [r7, #12]
 80136da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	4a1e      	ldr	r2, [pc, #120]	@ (801375c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80136e2:	4293      	cmp	r3, r2
 80136e4:	d01d      	beq.n	8013722 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80136ee:	d018      	beq.n	8013722 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	4a1b      	ldr	r2, [pc, #108]	@ (8013764 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80136f6:	4293      	cmp	r3, r2
 80136f8:	d013      	beq.n	8013722 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	4a1a      	ldr	r2, [pc, #104]	@ (8013768 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013700:	4293      	cmp	r3, r2
 8013702:	d00e      	beq.n	8013722 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	4a18      	ldr	r2, [pc, #96]	@ (801376c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801370a:	4293      	cmp	r3, r2
 801370c:	d009      	beq.n	8013722 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	4a13      	ldr	r2, [pc, #76]	@ (8013760 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8013714:	4293      	cmp	r3, r2
 8013716:	d004      	beq.n	8013722 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	4a14      	ldr	r2, [pc, #80]	@ (8013770 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801371e:	4293      	cmp	r3, r2
 8013720:	d10c      	bne.n	801373c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013722:	68bb      	ldr	r3, [r7, #8]
 8013724:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013728:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801372a:	683b      	ldr	r3, [r7, #0]
 801372c:	689b      	ldr	r3, [r3, #8]
 801372e:	68ba      	ldr	r2, [r7, #8]
 8013730:	4313      	orrs	r3, r2
 8013732:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	68ba      	ldr	r2, [r7, #8]
 801373a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	2201      	movs	r2, #1
 8013740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	2200      	movs	r2, #0
 8013748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801374c:	2300      	movs	r3, #0
}
 801374e:	4618      	mov	r0, r3
 8013750:	3714      	adds	r7, #20
 8013752:	46bd      	mov	sp, r7
 8013754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013758:	4770      	bx	lr
 801375a:	bf00      	nop
 801375c:	40012c00 	.word	0x40012c00
 8013760:	40013400 	.word	0x40013400
 8013764:	40000400 	.word	0x40000400
 8013768:	40000800 	.word	0x40000800
 801376c:	40000c00 	.word	0x40000c00
 8013770:	40014000 	.word	0x40014000

08013774 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013774:	b480      	push	{r7}
 8013776:	b085      	sub	sp, #20
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
 801377c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801377e:	2300      	movs	r3, #0
 8013780:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013788:	2b01      	cmp	r3, #1
 801378a:	d101      	bne.n	8013790 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801378c:	2302      	movs	r3, #2
 801378e:	e065      	b.n	801385c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	2201      	movs	r2, #1
 8013794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801379e:	683b      	ldr	r3, [r7, #0]
 80137a0:	68db      	ldr	r3, [r3, #12]
 80137a2:	4313      	orrs	r3, r2
 80137a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80137ac:	683b      	ldr	r3, [r7, #0]
 80137ae:	689b      	ldr	r3, [r3, #8]
 80137b0:	4313      	orrs	r3, r2
 80137b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80137ba:	683b      	ldr	r3, [r7, #0]
 80137bc:	685b      	ldr	r3, [r3, #4]
 80137be:	4313      	orrs	r3, r2
 80137c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80137c8:	683b      	ldr	r3, [r7, #0]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	4313      	orrs	r3, r2
 80137ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80137d6:	683b      	ldr	r3, [r7, #0]
 80137d8:	691b      	ldr	r3, [r3, #16]
 80137da:	4313      	orrs	r3, r2
 80137dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80137e4:	683b      	ldr	r3, [r7, #0]
 80137e6:	695b      	ldr	r3, [r3, #20]
 80137e8:	4313      	orrs	r3, r2
 80137ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80137f2:	683b      	ldr	r3, [r7, #0]
 80137f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80137f6:	4313      	orrs	r3, r2
 80137f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8013800:	683b      	ldr	r3, [r7, #0]
 8013802:	699b      	ldr	r3, [r3, #24]
 8013804:	041b      	lsls	r3, r3, #16
 8013806:	4313      	orrs	r3, r2
 8013808:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	4a16      	ldr	r2, [pc, #88]	@ (8013868 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8013810:	4293      	cmp	r3, r2
 8013812:	d004      	beq.n	801381e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	4a14      	ldr	r2, [pc, #80]	@ (801386c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801381a:	4293      	cmp	r3, r2
 801381c:	d115      	bne.n	801384a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013828:	051b      	lsls	r3, r3, #20
 801382a:	4313      	orrs	r3, r2
 801382c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8013834:	683b      	ldr	r3, [r7, #0]
 8013836:	69db      	ldr	r3, [r3, #28]
 8013838:	4313      	orrs	r3, r2
 801383a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8013842:	683b      	ldr	r3, [r7, #0]
 8013844:	6a1b      	ldr	r3, [r3, #32]
 8013846:	4313      	orrs	r3, r2
 8013848:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	68fa      	ldr	r2, [r7, #12]
 8013850:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	2200      	movs	r2, #0
 8013856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801385a:	2300      	movs	r3, #0
}
 801385c:	4618      	mov	r0, r3
 801385e:	3714      	adds	r7, #20
 8013860:	46bd      	mov	sp, r7
 8013862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013866:	4770      	bx	lr
 8013868:	40012c00 	.word	0x40012c00
 801386c:	40013400 	.word	0x40013400

08013870 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b082      	sub	sp, #8
 8013874:	af00      	add	r7, sp, #0
 8013876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d101      	bne.n	8013882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801387e:	2301      	movs	r3, #1
 8013880:	e040      	b.n	8013904 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013886:	2b00      	cmp	r3, #0
 8013888:	d106      	bne.n	8013898 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	2200      	movs	r2, #0
 801388e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013892:	6878      	ldr	r0, [r7, #4]
 8013894:	f7f3 f8f8 	bl	8006a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	2224      	movs	r2, #36	@ 0x24
 801389c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	681a      	ldr	r2, [r3, #0]
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	f022 0201 	bic.w	r2, r2, #1
 80138ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d002      	beq.n	80138bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80138b6:	6878      	ldr	r0, [r7, #4]
 80138b8:	f000 fdb4 	bl	8014424 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80138bc:	6878      	ldr	r0, [r7, #4]
 80138be:	f000 faf9 	bl	8013eb4 <UART_SetConfig>
 80138c2:	4603      	mov	r3, r0
 80138c4:	2b01      	cmp	r3, #1
 80138c6:	d101      	bne.n	80138cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80138c8:	2301      	movs	r3, #1
 80138ca:	e01b      	b.n	8013904 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	685a      	ldr	r2, [r3, #4]
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80138da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	689a      	ldr	r2, [r3, #8]
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80138ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	681a      	ldr	r2, [r3, #0]
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	f042 0201 	orr.w	r2, r2, #1
 80138fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80138fc:	6878      	ldr	r0, [r7, #4]
 80138fe:	f000 fe33 	bl	8014568 <UART_CheckIdleState>
 8013902:	4603      	mov	r3, r0
}
 8013904:	4618      	mov	r0, r3
 8013906:	3708      	adds	r7, #8
 8013908:	46bd      	mov	sp, r7
 801390a:	bd80      	pop	{r7, pc}

0801390c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 801390c:	b580      	push	{r7, lr}
 801390e:	b082      	sub	sp, #8
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d101      	bne.n	801391e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 801391a:	2301      	movs	r3, #1
 801391c:	e048      	b.n	80139b0 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013922:	2b00      	cmp	r3, #0
 8013924:	d106      	bne.n	8013934 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	2200      	movs	r2, #0
 801392a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801392e:	6878      	ldr	r0, [r7, #4]
 8013930:	f7f3 f8aa 	bl	8006a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	2224      	movs	r2, #36	@ 0x24
 8013938:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	681a      	ldr	r2, [r3, #0]
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	f022 0201 	bic.w	r2, r2, #1
 8013948:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801394e:	2b00      	cmp	r3, #0
 8013950:	d002      	beq.n	8013958 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8013952:	6878      	ldr	r0, [r7, #4]
 8013954:	f000 fd66 	bl	8014424 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013958:	6878      	ldr	r0, [r7, #4]
 801395a:	f000 faab 	bl	8013eb4 <UART_SetConfig>
 801395e:	4603      	mov	r3, r0
 8013960:	2b01      	cmp	r3, #1
 8013962:	d101      	bne.n	8013968 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 8013964:	2301      	movs	r3, #1
 8013966:	e023      	b.n	80139b0 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	685a      	ldr	r2, [r3, #4]
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8013976:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	689a      	ldr	r2, [r3, #8]
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8013986:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	689a      	ldr	r2, [r3, #8]
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	f042 0208 	orr.w	r2, r2, #8
 8013996:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	681a      	ldr	r2, [r3, #0]
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	f042 0201 	orr.w	r2, r2, #1
 80139a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80139a8:	6878      	ldr	r0, [r7, #4]
 80139aa:	f000 fddd 	bl	8014568 <UART_CheckIdleState>
 80139ae:	4603      	mov	r3, r0
}
 80139b0:	4618      	mov	r0, r3
 80139b2:	3708      	adds	r7, #8
 80139b4:	46bd      	mov	sp, r7
 80139b6:	bd80      	pop	{r7, pc}

080139b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b08a      	sub	sp, #40	@ 0x28
 80139bc:	af02      	add	r7, sp, #8
 80139be:	60f8      	str	r0, [r7, #12]
 80139c0:	60b9      	str	r1, [r7, #8]
 80139c2:	603b      	str	r3, [r7, #0]
 80139c4:	4613      	mov	r3, r2
 80139c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80139cc:	2b20      	cmp	r3, #32
 80139ce:	d177      	bne.n	8013ac0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80139d0:	68bb      	ldr	r3, [r7, #8]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d002      	beq.n	80139dc <HAL_UART_Transmit+0x24>
 80139d6:	88fb      	ldrh	r3, [r7, #6]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d101      	bne.n	80139e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80139dc:	2301      	movs	r3, #1
 80139de:	e070      	b.n	8013ac2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	2200      	movs	r2, #0
 80139e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	2221      	movs	r2, #33	@ 0x21
 80139ec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80139ee:	f7f6 fb0b 	bl	800a008 <HAL_GetTick>
 80139f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	88fa      	ldrh	r2, [r7, #6]
 80139f8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	88fa      	ldrh	r2, [r7, #6]
 8013a00:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	689b      	ldr	r3, [r3, #8]
 8013a08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013a0c:	d108      	bne.n	8013a20 <HAL_UART_Transmit+0x68>
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	691b      	ldr	r3, [r3, #16]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d104      	bne.n	8013a20 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8013a16:	2300      	movs	r3, #0
 8013a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8013a1a:	68bb      	ldr	r3, [r7, #8]
 8013a1c:	61bb      	str	r3, [r7, #24]
 8013a1e:	e003      	b.n	8013a28 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8013a20:	68bb      	ldr	r3, [r7, #8]
 8013a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013a24:	2300      	movs	r3, #0
 8013a26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8013a28:	e02f      	b.n	8013a8a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013a2a:	683b      	ldr	r3, [r7, #0]
 8013a2c:	9300      	str	r3, [sp, #0]
 8013a2e:	697b      	ldr	r3, [r7, #20]
 8013a30:	2200      	movs	r2, #0
 8013a32:	2180      	movs	r1, #128	@ 0x80
 8013a34:	68f8      	ldr	r0, [r7, #12]
 8013a36:	f000 fe3f 	bl	80146b8 <UART_WaitOnFlagUntilTimeout>
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d004      	beq.n	8013a4a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	2220      	movs	r2, #32
 8013a44:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8013a46:	2303      	movs	r3, #3
 8013a48:	e03b      	b.n	8013ac2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8013a4a:	69fb      	ldr	r3, [r7, #28]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d10b      	bne.n	8013a68 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013a50:	69bb      	ldr	r3, [r7, #24]
 8013a52:	881a      	ldrh	r2, [r3, #0]
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013a5c:	b292      	uxth	r2, r2
 8013a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8013a60:	69bb      	ldr	r3, [r7, #24]
 8013a62:	3302      	adds	r3, #2
 8013a64:	61bb      	str	r3, [r7, #24]
 8013a66:	e007      	b.n	8013a78 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013a68:	69fb      	ldr	r3, [r7, #28]
 8013a6a:	781a      	ldrb	r2, [r3, #0]
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8013a72:	69fb      	ldr	r3, [r7, #28]
 8013a74:	3301      	adds	r3, #1
 8013a76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8013a7e:	b29b      	uxth	r3, r3
 8013a80:	3b01      	subs	r3, #1
 8013a82:	b29a      	uxth	r2, r3
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8013a90:	b29b      	uxth	r3, r3
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d1c9      	bne.n	8013a2a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013a96:	683b      	ldr	r3, [r7, #0]
 8013a98:	9300      	str	r3, [sp, #0]
 8013a9a:	697b      	ldr	r3, [r7, #20]
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	2140      	movs	r1, #64	@ 0x40
 8013aa0:	68f8      	ldr	r0, [r7, #12]
 8013aa2:	f000 fe09 	bl	80146b8 <UART_WaitOnFlagUntilTimeout>
 8013aa6:	4603      	mov	r3, r0
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d004      	beq.n	8013ab6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	2220      	movs	r2, #32
 8013ab0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8013ab2:	2303      	movs	r3, #3
 8013ab4:	e005      	b.n	8013ac2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	2220      	movs	r2, #32
 8013aba:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8013abc:	2300      	movs	r3, #0
 8013abe:	e000      	b.n	8013ac2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8013ac0:	2302      	movs	r3, #2
  }
}
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	3720      	adds	r7, #32
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bd80      	pop	{r7, pc}

08013aca <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013aca:	b580      	push	{r7, lr}
 8013acc:	b08a      	sub	sp, #40	@ 0x28
 8013ace:	af02      	add	r7, sp, #8
 8013ad0:	60f8      	str	r0, [r7, #12]
 8013ad2:	60b9      	str	r1, [r7, #8]
 8013ad4:	603b      	str	r3, [r7, #0]
 8013ad6:	4613      	mov	r3, r2
 8013ad8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013ae0:	2b20      	cmp	r3, #32
 8013ae2:	f040 80b6 	bne.w	8013c52 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8013ae6:	68bb      	ldr	r3, [r7, #8]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d002      	beq.n	8013af2 <HAL_UART_Receive+0x28>
 8013aec:	88fb      	ldrh	r3, [r7, #6]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d101      	bne.n	8013af6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8013af2:	2301      	movs	r3, #1
 8013af4:	e0ae      	b.n	8013c54 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	2200      	movs	r2, #0
 8013afa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	2222      	movs	r2, #34	@ 0x22
 8013b02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	2200      	movs	r2, #0
 8013b0a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013b0c:	f7f6 fa7c 	bl	800a008 <HAL_GetTick>
 8013b10:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	88fa      	ldrh	r2, [r7, #6]
 8013b16:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	88fa      	ldrh	r2, [r7, #6]
 8013b1e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	689b      	ldr	r3, [r3, #8]
 8013b26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013b2a:	d10e      	bne.n	8013b4a <HAL_UART_Receive+0x80>
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	691b      	ldr	r3, [r3, #16]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d105      	bne.n	8013b40 <HAL_UART_Receive+0x76>
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8013b3a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8013b3e:	e02d      	b.n	8013b9c <HAL_UART_Receive+0xd2>
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	22ff      	movs	r2, #255	@ 0xff
 8013b44:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8013b48:	e028      	b.n	8013b9c <HAL_UART_Receive+0xd2>
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	689b      	ldr	r3, [r3, #8]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d10d      	bne.n	8013b6e <HAL_UART_Receive+0xa4>
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	691b      	ldr	r3, [r3, #16]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d104      	bne.n	8013b64 <HAL_UART_Receive+0x9a>
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	22ff      	movs	r2, #255	@ 0xff
 8013b5e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8013b62:	e01b      	b.n	8013b9c <HAL_UART_Receive+0xd2>
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	227f      	movs	r2, #127	@ 0x7f
 8013b68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8013b6c:	e016      	b.n	8013b9c <HAL_UART_Receive+0xd2>
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	689b      	ldr	r3, [r3, #8]
 8013b72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013b76:	d10d      	bne.n	8013b94 <HAL_UART_Receive+0xca>
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	691b      	ldr	r3, [r3, #16]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d104      	bne.n	8013b8a <HAL_UART_Receive+0xc0>
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	227f      	movs	r2, #127	@ 0x7f
 8013b84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8013b88:	e008      	b.n	8013b9c <HAL_UART_Receive+0xd2>
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	223f      	movs	r2, #63	@ 0x3f
 8013b8e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8013b92:	e003      	b.n	8013b9c <HAL_UART_Receive+0xd2>
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	2200      	movs	r2, #0
 8013b98:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013ba2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	689b      	ldr	r3, [r3, #8]
 8013ba8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013bac:	d108      	bne.n	8013bc0 <HAL_UART_Receive+0xf6>
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	691b      	ldr	r3, [r3, #16]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d104      	bne.n	8013bc0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8013bba:	68bb      	ldr	r3, [r7, #8]
 8013bbc:	61bb      	str	r3, [r7, #24]
 8013bbe:	e003      	b.n	8013bc8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8013bc0:	68bb      	ldr	r3, [r7, #8]
 8013bc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8013bc8:	e037      	b.n	8013c3a <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8013bca:	683b      	ldr	r3, [r7, #0]
 8013bcc:	9300      	str	r3, [sp, #0]
 8013bce:	697b      	ldr	r3, [r7, #20]
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	2120      	movs	r1, #32
 8013bd4:	68f8      	ldr	r0, [r7, #12]
 8013bd6:	f000 fd6f 	bl	80146b8 <UART_WaitOnFlagUntilTimeout>
 8013bda:	4603      	mov	r3, r0
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d005      	beq.n	8013bec <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	2220      	movs	r2, #32
 8013be4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8013be8:	2303      	movs	r3, #3
 8013bea:	e033      	b.n	8013c54 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8013bec:	69fb      	ldr	r3, [r7, #28]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d10c      	bne.n	8013c0c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013bf8:	b29a      	uxth	r2, r3
 8013bfa:	8a7b      	ldrh	r3, [r7, #18]
 8013bfc:	4013      	ands	r3, r2
 8013bfe:	b29a      	uxth	r2, r3
 8013c00:	69bb      	ldr	r3, [r7, #24]
 8013c02:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8013c04:	69bb      	ldr	r3, [r7, #24]
 8013c06:	3302      	adds	r3, #2
 8013c08:	61bb      	str	r3, [r7, #24]
 8013c0a:	e00d      	b.n	8013c28 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013c12:	b29b      	uxth	r3, r3
 8013c14:	b2da      	uxtb	r2, r3
 8013c16:	8a7b      	ldrh	r3, [r7, #18]
 8013c18:	b2db      	uxtb	r3, r3
 8013c1a:	4013      	ands	r3, r2
 8013c1c:	b2da      	uxtb	r2, r3
 8013c1e:	69fb      	ldr	r3, [r7, #28]
 8013c20:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8013c22:	69fb      	ldr	r3, [r7, #28]
 8013c24:	3301      	adds	r3, #1
 8013c26:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8013c2e:	b29b      	uxth	r3, r3
 8013c30:	3b01      	subs	r3, #1
 8013c32:	b29a      	uxth	r2, r3
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8013c40:	b29b      	uxth	r3, r3
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d1c1      	bne.n	8013bca <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	2220      	movs	r2, #32
 8013c4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8013c4e:	2300      	movs	r3, #0
 8013c50:	e000      	b.n	8013c54 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8013c52:	2302      	movs	r3, #2
  }
}
 8013c54:	4618      	mov	r0, r3
 8013c56:	3720      	adds	r7, #32
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	bd80      	pop	{r7, pc}

08013c5c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b08a      	sub	sp, #40	@ 0x28
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	60f8      	str	r0, [r7, #12]
 8013c64:	60b9      	str	r1, [r7, #8]
 8013c66:	4613      	mov	r3, r2
 8013c68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013c6e:	2b20      	cmp	r3, #32
 8013c70:	d165      	bne.n	8013d3e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8013c72:	68bb      	ldr	r3, [r7, #8]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d002      	beq.n	8013c7e <HAL_UART_Transmit_DMA+0x22>
 8013c78:	88fb      	ldrh	r3, [r7, #6]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d101      	bne.n	8013c82 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8013c7e:	2301      	movs	r3, #1
 8013c80:	e05e      	b.n	8013d40 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	68ba      	ldr	r2, [r7, #8]
 8013c86:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	88fa      	ldrh	r2, [r7, #6]
 8013c8c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	88fa      	ldrh	r2, [r7, #6]
 8013c94:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	2221      	movs	r2, #33	@ 0x21
 8013ca4:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d027      	beq.n	8013cfe <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013cb2:	4a25      	ldr	r2, [pc, #148]	@ (8013d48 <HAL_UART_Transmit_DMA+0xec>)
 8013cb4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013cba:	4a24      	ldr	r2, [pc, #144]	@ (8013d4c <HAL_UART_Transmit_DMA+0xf0>)
 8013cbc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013cc2:	4a23      	ldr	r2, [pc, #140]	@ (8013d50 <HAL_UART_Transmit_DMA+0xf4>)
 8013cc4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013cca:	2200      	movs	r2, #0
 8013ccc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013cd6:	4619      	mov	r1, r3
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	3328      	adds	r3, #40	@ 0x28
 8013cde:	461a      	mov	r2, r3
 8013ce0:	88fb      	ldrh	r3, [r7, #6]
 8013ce2:	f7f8 f947 	bl	800bf74 <HAL_DMA_Start_IT>
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d008      	beq.n	8013cfe <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	2210      	movs	r2, #16
 8013cf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	2220      	movs	r2, #32
 8013cf8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8013cfa:	2301      	movs	r3, #1
 8013cfc:	e020      	b.n	8013d40 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	2240      	movs	r2, #64	@ 0x40
 8013d04:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	3308      	adds	r3, #8
 8013d0c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d0e:	697b      	ldr	r3, [r7, #20]
 8013d10:	e853 3f00 	ldrex	r3, [r3]
 8013d14:	613b      	str	r3, [r7, #16]
   return(result);
 8013d16:	693b      	ldr	r3, [r7, #16]
 8013d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	3308      	adds	r3, #8
 8013d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013d26:	623a      	str	r2, [r7, #32]
 8013d28:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d2a:	69f9      	ldr	r1, [r7, #28]
 8013d2c:	6a3a      	ldr	r2, [r7, #32]
 8013d2e:	e841 2300 	strex	r3, r2, [r1]
 8013d32:	61bb      	str	r3, [r7, #24]
   return(result);
 8013d34:	69bb      	ldr	r3, [r7, #24]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d1e5      	bne.n	8013d06 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	e000      	b.n	8013d40 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8013d3e:	2302      	movs	r3, #2
  }
}
 8013d40:	4618      	mov	r0, r3
 8013d42:	3728      	adds	r7, #40	@ 0x28
 8013d44:	46bd      	mov	sp, r7
 8013d46:	bd80      	pop	{r7, pc}
 8013d48:	080149e9 	.word	0x080149e9
 8013d4c:	08014a83 	.word	0x08014a83
 8013d50:	08014c09 	.word	0x08014c09

08013d54 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b090      	sub	sp, #64	@ 0x40
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013d68:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	689b      	ldr	r3, [r3, #8]
 8013d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013d74:	2b80      	cmp	r3, #128	@ 0x80
 8013d76:	d139      	bne.n	8013dec <HAL_UART_DMAStop+0x98>
 8013d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013d7a:	2b21      	cmp	r3, #33	@ 0x21
 8013d7c:	d136      	bne.n	8013dec <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	3308      	adds	r3, #8
 8013d84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d86:	6a3b      	ldr	r3, [r7, #32]
 8013d88:	e853 3f00 	ldrex	r3, [r3]
 8013d8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8013d8e:	69fb      	ldr	r3, [r7, #28]
 8013d90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	3308      	adds	r3, #8
 8013d9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013d9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013da0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013da2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013da4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013da6:	e841 2300 	strex	r3, r2, [r1]
 8013daa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d1e5      	bne.n	8013d7e <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d015      	beq.n	8013de6 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	f7f8 f938 	bl	800c034 <HAL_DMA_Abort>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d00d      	beq.n	8013de6 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013dce:	4618      	mov	r0, r3
 8013dd0:	f7f8 fa1d 	bl	800c20e <HAL_DMA_GetError>
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	2b20      	cmp	r3, #32
 8013dd8:	d105      	bne.n	8013de6 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	2210      	movs	r2, #16
 8013dde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8013de2:	2303      	movs	r3, #3
 8013de4:	e044      	b.n	8013e70 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8013de6:	6878      	ldr	r0, [r7, #4]
 8013de8:	f000 fd74 	bl	80148d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	689b      	ldr	r3, [r3, #8]
 8013df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013df6:	2b40      	cmp	r3, #64	@ 0x40
 8013df8:	d139      	bne.n	8013e6e <HAL_UART_DMAStop+0x11a>
 8013dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013dfc:	2b22      	cmp	r3, #34	@ 0x22
 8013dfe:	d136      	bne.n	8013e6e <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	3308      	adds	r3, #8
 8013e06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	e853 3f00 	ldrex	r3, [r3]
 8013e0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8013e10:	68bb      	ldr	r3, [r7, #8]
 8013e12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013e16:	633b      	str	r3, [r7, #48]	@ 0x30
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	3308      	adds	r3, #8
 8013e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013e20:	61ba      	str	r2, [r7, #24]
 8013e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e24:	6979      	ldr	r1, [r7, #20]
 8013e26:	69ba      	ldr	r2, [r7, #24]
 8013e28:	e841 2300 	strex	r3, r2, [r1]
 8013e2c:	613b      	str	r3, [r7, #16]
   return(result);
 8013e2e:	693b      	ldr	r3, [r7, #16]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d1e5      	bne.n	8013e00 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d015      	beq.n	8013e68 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013e40:	4618      	mov	r0, r3
 8013e42:	f7f8 f8f7 	bl	800c034 <HAL_DMA_Abort>
 8013e46:	4603      	mov	r3, r0
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d00d      	beq.n	8013e68 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013e50:	4618      	mov	r0, r3
 8013e52:	f7f8 f9dc 	bl	800c20e <HAL_DMA_GetError>
 8013e56:	4603      	mov	r3, r0
 8013e58:	2b20      	cmp	r3, #32
 8013e5a:	d105      	bne.n	8013e68 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	2210      	movs	r2, #16
 8013e60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8013e64:	2303      	movs	r3, #3
 8013e66:	e003      	b.n	8013e70 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8013e68:	6878      	ldr	r0, [r7, #4]
 8013e6a:	f000 fd59 	bl	8014920 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8013e6e:	2300      	movs	r3, #0
}
 8013e70:	4618      	mov	r0, r3
 8013e72:	3740      	adds	r7, #64	@ 0x40
 8013e74:	46bd      	mov	sp, r7
 8013e76:	bd80      	pop	{r7, pc}

08013e78 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8013e78:	b480      	push	{r7}
 8013e7a:	b083      	sub	sp, #12
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8013e80:	bf00      	nop
 8013e82:	370c      	adds	r7, #12
 8013e84:	46bd      	mov	sp, r7
 8013e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e8a:	4770      	bx	lr

08013e8c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8013e8c:	b480      	push	{r7}
 8013e8e:	b083      	sub	sp, #12
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8013e94:	bf00      	nop
 8013e96:	370c      	adds	r7, #12
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9e:	4770      	bx	lr

08013ea0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8013ea0:	b480      	push	{r7}
 8013ea2:	b083      	sub	sp, #12
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8013ea8:	bf00      	nop
 8013eaa:	370c      	adds	r7, #12
 8013eac:	46bd      	mov	sp, r7
 8013eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb2:	4770      	bx	lr

08013eb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013eb8:	b08a      	sub	sp, #40	@ 0x28
 8013eba:	af00      	add	r7, sp, #0
 8013ebc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	689a      	ldr	r2, [r3, #8]
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	691b      	ldr	r3, [r3, #16]
 8013ecc:	431a      	orrs	r2, r3
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	695b      	ldr	r3, [r3, #20]
 8013ed2:	431a      	orrs	r2, r3
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	69db      	ldr	r3, [r3, #28]
 8013ed8:	4313      	orrs	r3, r2
 8013eda:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	681a      	ldr	r2, [r3, #0]
 8013ee2:	4ba4      	ldr	r3, [pc, #656]	@ (8014174 <UART_SetConfig+0x2c0>)
 8013ee4:	4013      	ands	r3, r2
 8013ee6:	68fa      	ldr	r2, [r7, #12]
 8013ee8:	6812      	ldr	r2, [r2, #0]
 8013eea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013eec:	430b      	orrs	r3, r1
 8013eee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	685b      	ldr	r3, [r3, #4]
 8013ef6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	68da      	ldr	r2, [r3, #12]
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	430a      	orrs	r2, r1
 8013f04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	699b      	ldr	r3, [r3, #24]
 8013f0a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	4a99      	ldr	r2, [pc, #612]	@ (8014178 <UART_SetConfig+0x2c4>)
 8013f12:	4293      	cmp	r3, r2
 8013f14:	d004      	beq.n	8013f20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	6a1b      	ldr	r3, [r3, #32]
 8013f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013f1c:	4313      	orrs	r3, r2
 8013f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	689b      	ldr	r3, [r3, #8]
 8013f26:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013f30:	430a      	orrs	r2, r1
 8013f32:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	4a90      	ldr	r2, [pc, #576]	@ (801417c <UART_SetConfig+0x2c8>)
 8013f3a:	4293      	cmp	r3, r2
 8013f3c:	d126      	bne.n	8013f8c <UART_SetConfig+0xd8>
 8013f3e:	4b90      	ldr	r3, [pc, #576]	@ (8014180 <UART_SetConfig+0x2cc>)
 8013f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013f44:	f003 0303 	and.w	r3, r3, #3
 8013f48:	2b03      	cmp	r3, #3
 8013f4a:	d81b      	bhi.n	8013f84 <UART_SetConfig+0xd0>
 8013f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8013f54 <UART_SetConfig+0xa0>)
 8013f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f52:	bf00      	nop
 8013f54:	08013f65 	.word	0x08013f65
 8013f58:	08013f75 	.word	0x08013f75
 8013f5c:	08013f6d 	.word	0x08013f6d
 8013f60:	08013f7d 	.word	0x08013f7d
 8013f64:	2301      	movs	r3, #1
 8013f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8013f6a:	e116      	b.n	801419a <UART_SetConfig+0x2e6>
 8013f6c:	2302      	movs	r3, #2
 8013f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8013f72:	e112      	b.n	801419a <UART_SetConfig+0x2e6>
 8013f74:	2304      	movs	r3, #4
 8013f76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8013f7a:	e10e      	b.n	801419a <UART_SetConfig+0x2e6>
 8013f7c:	2308      	movs	r3, #8
 8013f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8013f82:	e10a      	b.n	801419a <UART_SetConfig+0x2e6>
 8013f84:	2310      	movs	r3, #16
 8013f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8013f8a:	e106      	b.n	801419a <UART_SetConfig+0x2e6>
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	4a7c      	ldr	r2, [pc, #496]	@ (8014184 <UART_SetConfig+0x2d0>)
 8013f92:	4293      	cmp	r3, r2
 8013f94:	d138      	bne.n	8014008 <UART_SetConfig+0x154>
 8013f96:	4b7a      	ldr	r3, [pc, #488]	@ (8014180 <UART_SetConfig+0x2cc>)
 8013f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013f9c:	f003 030c 	and.w	r3, r3, #12
 8013fa0:	2b0c      	cmp	r3, #12
 8013fa2:	d82d      	bhi.n	8014000 <UART_SetConfig+0x14c>
 8013fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8013fac <UART_SetConfig+0xf8>)
 8013fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013faa:	bf00      	nop
 8013fac:	08013fe1 	.word	0x08013fe1
 8013fb0:	08014001 	.word	0x08014001
 8013fb4:	08014001 	.word	0x08014001
 8013fb8:	08014001 	.word	0x08014001
 8013fbc:	08013ff1 	.word	0x08013ff1
 8013fc0:	08014001 	.word	0x08014001
 8013fc4:	08014001 	.word	0x08014001
 8013fc8:	08014001 	.word	0x08014001
 8013fcc:	08013fe9 	.word	0x08013fe9
 8013fd0:	08014001 	.word	0x08014001
 8013fd4:	08014001 	.word	0x08014001
 8013fd8:	08014001 	.word	0x08014001
 8013fdc:	08013ff9 	.word	0x08013ff9
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8013fe6:	e0d8      	b.n	801419a <UART_SetConfig+0x2e6>
 8013fe8:	2302      	movs	r3, #2
 8013fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8013fee:	e0d4      	b.n	801419a <UART_SetConfig+0x2e6>
 8013ff0:	2304      	movs	r3, #4
 8013ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8013ff6:	e0d0      	b.n	801419a <UART_SetConfig+0x2e6>
 8013ff8:	2308      	movs	r3, #8
 8013ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8013ffe:	e0cc      	b.n	801419a <UART_SetConfig+0x2e6>
 8014000:	2310      	movs	r3, #16
 8014002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014006:	e0c8      	b.n	801419a <UART_SetConfig+0x2e6>
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	4a5e      	ldr	r2, [pc, #376]	@ (8014188 <UART_SetConfig+0x2d4>)
 801400e:	4293      	cmp	r3, r2
 8014010:	d125      	bne.n	801405e <UART_SetConfig+0x1aa>
 8014012:	4b5b      	ldr	r3, [pc, #364]	@ (8014180 <UART_SetConfig+0x2cc>)
 8014014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014018:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801401c:	2b30      	cmp	r3, #48	@ 0x30
 801401e:	d016      	beq.n	801404e <UART_SetConfig+0x19a>
 8014020:	2b30      	cmp	r3, #48	@ 0x30
 8014022:	d818      	bhi.n	8014056 <UART_SetConfig+0x1a2>
 8014024:	2b20      	cmp	r3, #32
 8014026:	d00a      	beq.n	801403e <UART_SetConfig+0x18a>
 8014028:	2b20      	cmp	r3, #32
 801402a:	d814      	bhi.n	8014056 <UART_SetConfig+0x1a2>
 801402c:	2b00      	cmp	r3, #0
 801402e:	d002      	beq.n	8014036 <UART_SetConfig+0x182>
 8014030:	2b10      	cmp	r3, #16
 8014032:	d008      	beq.n	8014046 <UART_SetConfig+0x192>
 8014034:	e00f      	b.n	8014056 <UART_SetConfig+0x1a2>
 8014036:	2300      	movs	r3, #0
 8014038:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801403c:	e0ad      	b.n	801419a <UART_SetConfig+0x2e6>
 801403e:	2302      	movs	r3, #2
 8014040:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014044:	e0a9      	b.n	801419a <UART_SetConfig+0x2e6>
 8014046:	2304      	movs	r3, #4
 8014048:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801404c:	e0a5      	b.n	801419a <UART_SetConfig+0x2e6>
 801404e:	2308      	movs	r3, #8
 8014050:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014054:	e0a1      	b.n	801419a <UART_SetConfig+0x2e6>
 8014056:	2310      	movs	r3, #16
 8014058:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801405c:	e09d      	b.n	801419a <UART_SetConfig+0x2e6>
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	4a4a      	ldr	r2, [pc, #296]	@ (801418c <UART_SetConfig+0x2d8>)
 8014064:	4293      	cmp	r3, r2
 8014066:	d125      	bne.n	80140b4 <UART_SetConfig+0x200>
 8014068:	4b45      	ldr	r3, [pc, #276]	@ (8014180 <UART_SetConfig+0x2cc>)
 801406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801406e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8014072:	2bc0      	cmp	r3, #192	@ 0xc0
 8014074:	d016      	beq.n	80140a4 <UART_SetConfig+0x1f0>
 8014076:	2bc0      	cmp	r3, #192	@ 0xc0
 8014078:	d818      	bhi.n	80140ac <UART_SetConfig+0x1f8>
 801407a:	2b80      	cmp	r3, #128	@ 0x80
 801407c:	d00a      	beq.n	8014094 <UART_SetConfig+0x1e0>
 801407e:	2b80      	cmp	r3, #128	@ 0x80
 8014080:	d814      	bhi.n	80140ac <UART_SetConfig+0x1f8>
 8014082:	2b00      	cmp	r3, #0
 8014084:	d002      	beq.n	801408c <UART_SetConfig+0x1d8>
 8014086:	2b40      	cmp	r3, #64	@ 0x40
 8014088:	d008      	beq.n	801409c <UART_SetConfig+0x1e8>
 801408a:	e00f      	b.n	80140ac <UART_SetConfig+0x1f8>
 801408c:	2300      	movs	r3, #0
 801408e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014092:	e082      	b.n	801419a <UART_SetConfig+0x2e6>
 8014094:	2302      	movs	r3, #2
 8014096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801409a:	e07e      	b.n	801419a <UART_SetConfig+0x2e6>
 801409c:	2304      	movs	r3, #4
 801409e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80140a2:	e07a      	b.n	801419a <UART_SetConfig+0x2e6>
 80140a4:	2308      	movs	r3, #8
 80140a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80140aa:	e076      	b.n	801419a <UART_SetConfig+0x2e6>
 80140ac:	2310      	movs	r3, #16
 80140ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80140b2:	e072      	b.n	801419a <UART_SetConfig+0x2e6>
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	4a35      	ldr	r2, [pc, #212]	@ (8014190 <UART_SetConfig+0x2dc>)
 80140ba:	4293      	cmp	r3, r2
 80140bc:	d12a      	bne.n	8014114 <UART_SetConfig+0x260>
 80140be:	4b30      	ldr	r3, [pc, #192]	@ (8014180 <UART_SetConfig+0x2cc>)
 80140c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80140c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80140c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80140cc:	d01a      	beq.n	8014104 <UART_SetConfig+0x250>
 80140ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80140d2:	d81b      	bhi.n	801410c <UART_SetConfig+0x258>
 80140d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80140d8:	d00c      	beq.n	80140f4 <UART_SetConfig+0x240>
 80140da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80140de:	d815      	bhi.n	801410c <UART_SetConfig+0x258>
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d003      	beq.n	80140ec <UART_SetConfig+0x238>
 80140e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80140e8:	d008      	beq.n	80140fc <UART_SetConfig+0x248>
 80140ea:	e00f      	b.n	801410c <UART_SetConfig+0x258>
 80140ec:	2300      	movs	r3, #0
 80140ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80140f2:	e052      	b.n	801419a <UART_SetConfig+0x2e6>
 80140f4:	2302      	movs	r3, #2
 80140f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80140fa:	e04e      	b.n	801419a <UART_SetConfig+0x2e6>
 80140fc:	2304      	movs	r3, #4
 80140fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014102:	e04a      	b.n	801419a <UART_SetConfig+0x2e6>
 8014104:	2308      	movs	r3, #8
 8014106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801410a:	e046      	b.n	801419a <UART_SetConfig+0x2e6>
 801410c:	2310      	movs	r3, #16
 801410e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014112:	e042      	b.n	801419a <UART_SetConfig+0x2e6>
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	4a17      	ldr	r2, [pc, #92]	@ (8014178 <UART_SetConfig+0x2c4>)
 801411a:	4293      	cmp	r3, r2
 801411c:	d13a      	bne.n	8014194 <UART_SetConfig+0x2e0>
 801411e:	4b18      	ldr	r3, [pc, #96]	@ (8014180 <UART_SetConfig+0x2cc>)
 8014120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014124:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8014128:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801412c:	d01a      	beq.n	8014164 <UART_SetConfig+0x2b0>
 801412e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8014132:	d81b      	bhi.n	801416c <UART_SetConfig+0x2b8>
 8014134:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014138:	d00c      	beq.n	8014154 <UART_SetConfig+0x2a0>
 801413a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801413e:	d815      	bhi.n	801416c <UART_SetConfig+0x2b8>
 8014140:	2b00      	cmp	r3, #0
 8014142:	d003      	beq.n	801414c <UART_SetConfig+0x298>
 8014144:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014148:	d008      	beq.n	801415c <UART_SetConfig+0x2a8>
 801414a:	e00f      	b.n	801416c <UART_SetConfig+0x2b8>
 801414c:	2300      	movs	r3, #0
 801414e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014152:	e022      	b.n	801419a <UART_SetConfig+0x2e6>
 8014154:	2302      	movs	r3, #2
 8014156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801415a:	e01e      	b.n	801419a <UART_SetConfig+0x2e6>
 801415c:	2304      	movs	r3, #4
 801415e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014162:	e01a      	b.n	801419a <UART_SetConfig+0x2e6>
 8014164:	2308      	movs	r3, #8
 8014166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801416a:	e016      	b.n	801419a <UART_SetConfig+0x2e6>
 801416c:	2310      	movs	r3, #16
 801416e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014172:	e012      	b.n	801419a <UART_SetConfig+0x2e6>
 8014174:	efff69f3 	.word	0xefff69f3
 8014178:	40008000 	.word	0x40008000
 801417c:	40013800 	.word	0x40013800
 8014180:	40021000 	.word	0x40021000
 8014184:	40004400 	.word	0x40004400
 8014188:	40004800 	.word	0x40004800
 801418c:	40004c00 	.word	0x40004c00
 8014190:	40005000 	.word	0x40005000
 8014194:	2310      	movs	r3, #16
 8014196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	4a9f      	ldr	r2, [pc, #636]	@ (801441c <UART_SetConfig+0x568>)
 80141a0:	4293      	cmp	r3, r2
 80141a2:	d17a      	bne.n	801429a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80141a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80141a8:	2b08      	cmp	r3, #8
 80141aa:	d824      	bhi.n	80141f6 <UART_SetConfig+0x342>
 80141ac:	a201      	add	r2, pc, #4	@ (adr r2, 80141b4 <UART_SetConfig+0x300>)
 80141ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141b2:	bf00      	nop
 80141b4:	080141d9 	.word	0x080141d9
 80141b8:	080141f7 	.word	0x080141f7
 80141bc:	080141e1 	.word	0x080141e1
 80141c0:	080141f7 	.word	0x080141f7
 80141c4:	080141e7 	.word	0x080141e7
 80141c8:	080141f7 	.word	0x080141f7
 80141cc:	080141f7 	.word	0x080141f7
 80141d0:	080141f7 	.word	0x080141f7
 80141d4:	080141ef 	.word	0x080141ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80141d8:	f7fb f8fe 	bl	800f3d8 <HAL_RCC_GetPCLK1Freq>
 80141dc:	61f8      	str	r0, [r7, #28]
        break;
 80141de:	e010      	b.n	8014202 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80141e0:	4b8f      	ldr	r3, [pc, #572]	@ (8014420 <UART_SetConfig+0x56c>)
 80141e2:	61fb      	str	r3, [r7, #28]
        break;
 80141e4:	e00d      	b.n	8014202 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80141e6:	f7fb f85f 	bl	800f2a8 <HAL_RCC_GetSysClockFreq>
 80141ea:	61f8      	str	r0, [r7, #28]
        break;
 80141ec:	e009      	b.n	8014202 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80141ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80141f2:	61fb      	str	r3, [r7, #28]
        break;
 80141f4:	e005      	b.n	8014202 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80141f6:	2300      	movs	r3, #0
 80141f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80141fa:	2301      	movs	r3, #1
 80141fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8014200:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8014202:	69fb      	ldr	r3, [r7, #28]
 8014204:	2b00      	cmp	r3, #0
 8014206:	f000 80fb 	beq.w	8014400 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	685a      	ldr	r2, [r3, #4]
 801420e:	4613      	mov	r3, r2
 8014210:	005b      	lsls	r3, r3, #1
 8014212:	4413      	add	r3, r2
 8014214:	69fa      	ldr	r2, [r7, #28]
 8014216:	429a      	cmp	r2, r3
 8014218:	d305      	bcc.n	8014226 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	685b      	ldr	r3, [r3, #4]
 801421e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8014220:	69fa      	ldr	r2, [r7, #28]
 8014222:	429a      	cmp	r2, r3
 8014224:	d903      	bls.n	801422e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8014226:	2301      	movs	r3, #1
 8014228:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801422c:	e0e8      	b.n	8014400 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801422e:	69fb      	ldr	r3, [r7, #28]
 8014230:	2200      	movs	r2, #0
 8014232:	461c      	mov	r4, r3
 8014234:	4615      	mov	r5, r2
 8014236:	f04f 0200 	mov.w	r2, #0
 801423a:	f04f 0300 	mov.w	r3, #0
 801423e:	022b      	lsls	r3, r5, #8
 8014240:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8014244:	0222      	lsls	r2, r4, #8
 8014246:	68f9      	ldr	r1, [r7, #12]
 8014248:	6849      	ldr	r1, [r1, #4]
 801424a:	0849      	lsrs	r1, r1, #1
 801424c:	2000      	movs	r0, #0
 801424e:	4688      	mov	r8, r1
 8014250:	4681      	mov	r9, r0
 8014252:	eb12 0a08 	adds.w	sl, r2, r8
 8014256:	eb43 0b09 	adc.w	fp, r3, r9
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	685b      	ldr	r3, [r3, #4]
 801425e:	2200      	movs	r2, #0
 8014260:	603b      	str	r3, [r7, #0]
 8014262:	607a      	str	r2, [r7, #4]
 8014264:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014268:	4650      	mov	r0, sl
 801426a:	4659      	mov	r1, fp
 801426c:	f7ec f818 	bl	80002a0 <__aeabi_uldivmod>
 8014270:	4602      	mov	r2, r0
 8014272:	460b      	mov	r3, r1
 8014274:	4613      	mov	r3, r2
 8014276:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8014278:	69bb      	ldr	r3, [r7, #24]
 801427a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801427e:	d308      	bcc.n	8014292 <UART_SetConfig+0x3de>
 8014280:	69bb      	ldr	r3, [r7, #24]
 8014282:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014286:	d204      	bcs.n	8014292 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	69ba      	ldr	r2, [r7, #24]
 801428e:	60da      	str	r2, [r3, #12]
 8014290:	e0b6      	b.n	8014400 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8014292:	2301      	movs	r3, #1
 8014294:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8014298:	e0b2      	b.n	8014400 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	69db      	ldr	r3, [r3, #28]
 801429e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80142a2:	d15e      	bne.n	8014362 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80142a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80142a8:	2b08      	cmp	r3, #8
 80142aa:	d828      	bhi.n	80142fe <UART_SetConfig+0x44a>
 80142ac:	a201      	add	r2, pc, #4	@ (adr r2, 80142b4 <UART_SetConfig+0x400>)
 80142ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142b2:	bf00      	nop
 80142b4:	080142d9 	.word	0x080142d9
 80142b8:	080142e1 	.word	0x080142e1
 80142bc:	080142e9 	.word	0x080142e9
 80142c0:	080142ff 	.word	0x080142ff
 80142c4:	080142ef 	.word	0x080142ef
 80142c8:	080142ff 	.word	0x080142ff
 80142cc:	080142ff 	.word	0x080142ff
 80142d0:	080142ff 	.word	0x080142ff
 80142d4:	080142f7 	.word	0x080142f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80142d8:	f7fb f87e 	bl	800f3d8 <HAL_RCC_GetPCLK1Freq>
 80142dc:	61f8      	str	r0, [r7, #28]
        break;
 80142de:	e014      	b.n	801430a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80142e0:	f7fb f890 	bl	800f404 <HAL_RCC_GetPCLK2Freq>
 80142e4:	61f8      	str	r0, [r7, #28]
        break;
 80142e6:	e010      	b.n	801430a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80142e8:	4b4d      	ldr	r3, [pc, #308]	@ (8014420 <UART_SetConfig+0x56c>)
 80142ea:	61fb      	str	r3, [r7, #28]
        break;
 80142ec:	e00d      	b.n	801430a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80142ee:	f7fa ffdb 	bl	800f2a8 <HAL_RCC_GetSysClockFreq>
 80142f2:	61f8      	str	r0, [r7, #28]
        break;
 80142f4:	e009      	b.n	801430a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80142f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80142fa:	61fb      	str	r3, [r7, #28]
        break;
 80142fc:	e005      	b.n	801430a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80142fe:	2300      	movs	r3, #0
 8014300:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8014302:	2301      	movs	r3, #1
 8014304:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8014308:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801430a:	69fb      	ldr	r3, [r7, #28]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d077      	beq.n	8014400 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8014310:	69fb      	ldr	r3, [r7, #28]
 8014312:	005a      	lsls	r2, r3, #1
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	685b      	ldr	r3, [r3, #4]
 8014318:	085b      	lsrs	r3, r3, #1
 801431a:	441a      	add	r2, r3
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	685b      	ldr	r3, [r3, #4]
 8014320:	fbb2 f3f3 	udiv	r3, r2, r3
 8014324:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014326:	69bb      	ldr	r3, [r7, #24]
 8014328:	2b0f      	cmp	r3, #15
 801432a:	d916      	bls.n	801435a <UART_SetConfig+0x4a6>
 801432c:	69bb      	ldr	r3, [r7, #24]
 801432e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014332:	d212      	bcs.n	801435a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014334:	69bb      	ldr	r3, [r7, #24]
 8014336:	b29b      	uxth	r3, r3
 8014338:	f023 030f 	bic.w	r3, r3, #15
 801433c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801433e:	69bb      	ldr	r3, [r7, #24]
 8014340:	085b      	lsrs	r3, r3, #1
 8014342:	b29b      	uxth	r3, r3
 8014344:	f003 0307 	and.w	r3, r3, #7
 8014348:	b29a      	uxth	r2, r3
 801434a:	8afb      	ldrh	r3, [r7, #22]
 801434c:	4313      	orrs	r3, r2
 801434e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	8afa      	ldrh	r2, [r7, #22]
 8014356:	60da      	str	r2, [r3, #12]
 8014358:	e052      	b.n	8014400 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 801435a:	2301      	movs	r3, #1
 801435c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8014360:	e04e      	b.n	8014400 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8014362:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014366:	2b08      	cmp	r3, #8
 8014368:	d827      	bhi.n	80143ba <UART_SetConfig+0x506>
 801436a:	a201      	add	r2, pc, #4	@ (adr r2, 8014370 <UART_SetConfig+0x4bc>)
 801436c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014370:	08014395 	.word	0x08014395
 8014374:	0801439d 	.word	0x0801439d
 8014378:	080143a5 	.word	0x080143a5
 801437c:	080143bb 	.word	0x080143bb
 8014380:	080143ab 	.word	0x080143ab
 8014384:	080143bb 	.word	0x080143bb
 8014388:	080143bb 	.word	0x080143bb
 801438c:	080143bb 	.word	0x080143bb
 8014390:	080143b3 	.word	0x080143b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014394:	f7fb f820 	bl	800f3d8 <HAL_RCC_GetPCLK1Freq>
 8014398:	61f8      	str	r0, [r7, #28]
        break;
 801439a:	e014      	b.n	80143c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801439c:	f7fb f832 	bl	800f404 <HAL_RCC_GetPCLK2Freq>
 80143a0:	61f8      	str	r0, [r7, #28]
        break;
 80143a2:	e010      	b.n	80143c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80143a4:	4b1e      	ldr	r3, [pc, #120]	@ (8014420 <UART_SetConfig+0x56c>)
 80143a6:	61fb      	str	r3, [r7, #28]
        break;
 80143a8:	e00d      	b.n	80143c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80143aa:	f7fa ff7d 	bl	800f2a8 <HAL_RCC_GetSysClockFreq>
 80143ae:	61f8      	str	r0, [r7, #28]
        break;
 80143b0:	e009      	b.n	80143c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80143b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80143b6:	61fb      	str	r3, [r7, #28]
        break;
 80143b8:	e005      	b.n	80143c6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80143ba:	2300      	movs	r3, #0
 80143bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80143be:	2301      	movs	r3, #1
 80143c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80143c4:	bf00      	nop
    }

    if (pclk != 0U)
 80143c6:	69fb      	ldr	r3, [r7, #28]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d019      	beq.n	8014400 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	685b      	ldr	r3, [r3, #4]
 80143d0:	085a      	lsrs	r2, r3, #1
 80143d2:	69fb      	ldr	r3, [r7, #28]
 80143d4:	441a      	add	r2, r3
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	685b      	ldr	r3, [r3, #4]
 80143da:	fbb2 f3f3 	udiv	r3, r2, r3
 80143de:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80143e0:	69bb      	ldr	r3, [r7, #24]
 80143e2:	2b0f      	cmp	r3, #15
 80143e4:	d909      	bls.n	80143fa <UART_SetConfig+0x546>
 80143e6:	69bb      	ldr	r3, [r7, #24]
 80143e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80143ec:	d205      	bcs.n	80143fa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80143ee:	69bb      	ldr	r3, [r7, #24]
 80143f0:	b29a      	uxth	r2, r3
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	60da      	str	r2, [r3, #12]
 80143f8:	e002      	b.n	8014400 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80143fa:	2301      	movs	r3, #1
 80143fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	2200      	movs	r2, #0
 8014404:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	2200      	movs	r2, #0
 801440a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801440c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8014410:	4618      	mov	r0, r3
 8014412:	3728      	adds	r7, #40	@ 0x28
 8014414:	46bd      	mov	sp, r7
 8014416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801441a:	bf00      	nop
 801441c:	40008000 	.word	0x40008000
 8014420:	00f42400 	.word	0x00f42400

08014424 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014424:	b480      	push	{r7}
 8014426:	b083      	sub	sp, #12
 8014428:	af00      	add	r7, sp, #0
 801442a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014430:	f003 0308 	and.w	r3, r3, #8
 8014434:	2b00      	cmp	r3, #0
 8014436:	d00a      	beq.n	801444e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	685b      	ldr	r3, [r3, #4]
 801443e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	430a      	orrs	r2, r1
 801444c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014452:	f003 0301 	and.w	r3, r3, #1
 8014456:	2b00      	cmp	r3, #0
 8014458:	d00a      	beq.n	8014470 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	685b      	ldr	r3, [r3, #4]
 8014460:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	430a      	orrs	r2, r1
 801446e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014474:	f003 0302 	and.w	r3, r3, #2
 8014478:	2b00      	cmp	r3, #0
 801447a:	d00a      	beq.n	8014492 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	685b      	ldr	r3, [r3, #4]
 8014482:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	430a      	orrs	r2, r1
 8014490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014496:	f003 0304 	and.w	r3, r3, #4
 801449a:	2b00      	cmp	r3, #0
 801449c:	d00a      	beq.n	80144b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	685b      	ldr	r3, [r3, #4]
 80144a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	430a      	orrs	r2, r1
 80144b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144b8:	f003 0310 	and.w	r3, r3, #16
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d00a      	beq.n	80144d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	689b      	ldr	r3, [r3, #8]
 80144c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	430a      	orrs	r2, r1
 80144d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144da:	f003 0320 	and.w	r3, r3, #32
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d00a      	beq.n	80144f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	689b      	ldr	r3, [r3, #8]
 80144e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	430a      	orrs	r2, r1
 80144f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014500:	2b00      	cmp	r3, #0
 8014502:	d01a      	beq.n	801453a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	685b      	ldr	r3, [r3, #4]
 801450a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	430a      	orrs	r2, r1
 8014518:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801451e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014522:	d10a      	bne.n	801453a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	685b      	ldr	r3, [r3, #4]
 801452a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	430a      	orrs	r2, r1
 8014538:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801453e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014542:	2b00      	cmp	r3, #0
 8014544:	d00a      	beq.n	801455c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	685b      	ldr	r3, [r3, #4]
 801454c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	430a      	orrs	r2, r1
 801455a:	605a      	str	r2, [r3, #4]
  }
}
 801455c:	bf00      	nop
 801455e:	370c      	adds	r7, #12
 8014560:	46bd      	mov	sp, r7
 8014562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014566:	4770      	bx	lr

08014568 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014568:	b580      	push	{r7, lr}
 801456a:	b098      	sub	sp, #96	@ 0x60
 801456c:	af02      	add	r7, sp, #8
 801456e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	2200      	movs	r2, #0
 8014574:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014578:	f7f5 fd46 	bl	800a008 <HAL_GetTick>
 801457c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	f003 0308 	and.w	r3, r3, #8
 8014588:	2b08      	cmp	r3, #8
 801458a:	d12e      	bne.n	80145ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801458c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8014590:	9300      	str	r3, [sp, #0]
 8014592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014594:	2200      	movs	r2, #0
 8014596:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801459a:	6878      	ldr	r0, [r7, #4]
 801459c:	f000 f88c 	bl	80146b8 <UART_WaitOnFlagUntilTimeout>
 80145a0:	4603      	mov	r3, r0
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d021      	beq.n	80145ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145ae:	e853 3f00 	ldrex	r3, [r3]
 80145b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80145b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80145ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	461a      	mov	r2, r3
 80145c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80145c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80145c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80145ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80145cc:	e841 2300 	strex	r3, r2, [r1]
 80145d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80145d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d1e6      	bne.n	80145a6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	2220      	movs	r2, #32
 80145dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	2200      	movs	r2, #0
 80145e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80145e6:	2303      	movs	r3, #3
 80145e8:	e062      	b.n	80146b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	f003 0304 	and.w	r3, r3, #4
 80145f4:	2b04      	cmp	r3, #4
 80145f6:	d149      	bne.n	801468c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80145f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80145fc:	9300      	str	r3, [sp, #0]
 80145fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014600:	2200      	movs	r2, #0
 8014602:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8014606:	6878      	ldr	r0, [r7, #4]
 8014608:	f000 f856 	bl	80146b8 <UART_WaitOnFlagUntilTimeout>
 801460c:	4603      	mov	r3, r0
 801460e:	2b00      	cmp	r3, #0
 8014610:	d03c      	beq.n	801468c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801461a:	e853 3f00 	ldrex	r3, [r3]
 801461e:	623b      	str	r3, [r7, #32]
   return(result);
 8014620:	6a3b      	ldr	r3, [r7, #32]
 8014622:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014626:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	461a      	mov	r2, r3
 801462e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014630:	633b      	str	r3, [r7, #48]	@ 0x30
 8014632:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014634:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014636:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014638:	e841 2300 	strex	r3, r2, [r1]
 801463c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801463e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014640:	2b00      	cmp	r3, #0
 8014642:	d1e6      	bne.n	8014612 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	3308      	adds	r3, #8
 801464a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801464c:	693b      	ldr	r3, [r7, #16]
 801464e:	e853 3f00 	ldrex	r3, [r3]
 8014652:	60fb      	str	r3, [r7, #12]
   return(result);
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	f023 0301 	bic.w	r3, r3, #1
 801465a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	3308      	adds	r3, #8
 8014662:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014664:	61fa      	str	r2, [r7, #28]
 8014666:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014668:	69b9      	ldr	r1, [r7, #24]
 801466a:	69fa      	ldr	r2, [r7, #28]
 801466c:	e841 2300 	strex	r3, r2, [r1]
 8014670:	617b      	str	r3, [r7, #20]
   return(result);
 8014672:	697b      	ldr	r3, [r7, #20]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d1e5      	bne.n	8014644 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	2220      	movs	r2, #32
 801467c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	2200      	movs	r2, #0
 8014684:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014688:	2303      	movs	r3, #3
 801468a:	e011      	b.n	80146b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	2220      	movs	r2, #32
 8014690:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	2220      	movs	r2, #32
 8014696:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	2200      	movs	r2, #0
 801469e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	2200      	movs	r2, #0
 80146a4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	2200      	movs	r2, #0
 80146aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80146ae:	2300      	movs	r3, #0
}
 80146b0:	4618      	mov	r0, r3
 80146b2:	3758      	adds	r7, #88	@ 0x58
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}

080146b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b084      	sub	sp, #16
 80146bc:	af00      	add	r7, sp, #0
 80146be:	60f8      	str	r0, [r7, #12]
 80146c0:	60b9      	str	r1, [r7, #8]
 80146c2:	603b      	str	r3, [r7, #0]
 80146c4:	4613      	mov	r3, r2
 80146c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80146c8:	e04f      	b.n	801476a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80146ca:	69bb      	ldr	r3, [r7, #24]
 80146cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146d0:	d04b      	beq.n	801476a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80146d2:	f7f5 fc99 	bl	800a008 <HAL_GetTick>
 80146d6:	4602      	mov	r2, r0
 80146d8:	683b      	ldr	r3, [r7, #0]
 80146da:	1ad3      	subs	r3, r2, r3
 80146dc:	69ba      	ldr	r2, [r7, #24]
 80146de:	429a      	cmp	r2, r3
 80146e0:	d302      	bcc.n	80146e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80146e2:	69bb      	ldr	r3, [r7, #24]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d101      	bne.n	80146ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80146e8:	2303      	movs	r3, #3
 80146ea:	e04e      	b.n	801478a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	f003 0304 	and.w	r3, r3, #4
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d037      	beq.n	801476a <UART_WaitOnFlagUntilTimeout+0xb2>
 80146fa:	68bb      	ldr	r3, [r7, #8]
 80146fc:	2b80      	cmp	r3, #128	@ 0x80
 80146fe:	d034      	beq.n	801476a <UART_WaitOnFlagUntilTimeout+0xb2>
 8014700:	68bb      	ldr	r3, [r7, #8]
 8014702:	2b40      	cmp	r3, #64	@ 0x40
 8014704:	d031      	beq.n	801476a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	69db      	ldr	r3, [r3, #28]
 801470c:	f003 0308 	and.w	r3, r3, #8
 8014710:	2b08      	cmp	r3, #8
 8014712:	d110      	bne.n	8014736 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	2208      	movs	r2, #8
 801471a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801471c:	68f8      	ldr	r0, [r7, #12]
 801471e:	f000 f8ff 	bl	8014920 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	2208      	movs	r2, #8
 8014726:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	2200      	movs	r2, #0
 801472e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8014732:	2301      	movs	r3, #1
 8014734:	e029      	b.n	801478a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	69db      	ldr	r3, [r3, #28]
 801473c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014740:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014744:	d111      	bne.n	801476a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801474e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014750:	68f8      	ldr	r0, [r7, #12]
 8014752:	f000 f8e5 	bl	8014920 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	2220      	movs	r2, #32
 801475a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	2200      	movs	r2, #0
 8014762:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8014766:	2303      	movs	r3, #3
 8014768:	e00f      	b.n	801478a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	69da      	ldr	r2, [r3, #28]
 8014770:	68bb      	ldr	r3, [r7, #8]
 8014772:	4013      	ands	r3, r2
 8014774:	68ba      	ldr	r2, [r7, #8]
 8014776:	429a      	cmp	r2, r3
 8014778:	bf0c      	ite	eq
 801477a:	2301      	moveq	r3, #1
 801477c:	2300      	movne	r3, #0
 801477e:	b2db      	uxtb	r3, r3
 8014780:	461a      	mov	r2, r3
 8014782:	79fb      	ldrb	r3, [r7, #7]
 8014784:	429a      	cmp	r2, r3
 8014786:	d0a0      	beq.n	80146ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014788:	2300      	movs	r3, #0
}
 801478a:	4618      	mov	r0, r3
 801478c:	3710      	adds	r7, #16
 801478e:	46bd      	mov	sp, r7
 8014790:	bd80      	pop	{r7, pc}
	...

08014794 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b096      	sub	sp, #88	@ 0x58
 8014798:	af00      	add	r7, sp, #0
 801479a:	60f8      	str	r0, [r7, #12]
 801479c:	60b9      	str	r1, [r7, #8]
 801479e:	4613      	mov	r3, r2
 80147a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	68ba      	ldr	r2, [r7, #8]
 80147a6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	88fa      	ldrh	r2, [r7, #6]
 80147ac:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	2200      	movs	r2, #0
 80147b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	2222      	movs	r2, #34	@ 0x22
 80147bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d028      	beq.n	801481a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80147cc:	4a3e      	ldr	r2, [pc, #248]	@ (80148c8 <UART_Start_Receive_DMA+0x134>)
 80147ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80147d4:	4a3d      	ldr	r2, [pc, #244]	@ (80148cc <UART_Start_Receive_DMA+0x138>)
 80147d6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80147dc:	4a3c      	ldr	r2, [pc, #240]	@ (80148d0 <UART_Start_Receive_DMA+0x13c>)
 80147de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80147e4:	2200      	movs	r2, #0
 80147e6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	3324      	adds	r3, #36	@ 0x24
 80147f2:	4619      	mov	r1, r3
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80147f8:	461a      	mov	r2, r3
 80147fa:	88fb      	ldrh	r3, [r7, #6]
 80147fc:	f7f7 fbba 	bl	800bf74 <HAL_DMA_Start_IT>
 8014800:	4603      	mov	r3, r0
 8014802:	2b00      	cmp	r3, #0
 8014804:	d009      	beq.n	801481a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	2210      	movs	r2, #16
 801480a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	2220      	movs	r2, #32
 8014812:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8014816:	2301      	movs	r3, #1
 8014818:	e051      	b.n	80148be <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	691b      	ldr	r3, [r3, #16]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d018      	beq.n	8014854 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801482a:	e853 3f00 	ldrex	r3, [r3]
 801482e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8014830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014832:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014836:	657b      	str	r3, [r7, #84]	@ 0x54
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	461a      	mov	r2, r3
 801483e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014840:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014842:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014844:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014846:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014848:	e841 2300 	strex	r3, r2, [r1]
 801484c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801484e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014850:	2b00      	cmp	r3, #0
 8014852:	d1e6      	bne.n	8014822 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	3308      	adds	r3, #8
 801485a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801485c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801485e:	e853 3f00 	ldrex	r3, [r3]
 8014862:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014866:	f043 0301 	orr.w	r3, r3, #1
 801486a:	653b      	str	r3, [r7, #80]	@ 0x50
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	3308      	adds	r3, #8
 8014872:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014874:	637a      	str	r2, [r7, #52]	@ 0x34
 8014876:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014878:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801487a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801487c:	e841 2300 	strex	r3, r2, [r1]
 8014880:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8014882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014884:	2b00      	cmp	r3, #0
 8014886:	d1e5      	bne.n	8014854 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	3308      	adds	r3, #8
 801488e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014890:	697b      	ldr	r3, [r7, #20]
 8014892:	e853 3f00 	ldrex	r3, [r3]
 8014896:	613b      	str	r3, [r7, #16]
   return(result);
 8014898:	693b      	ldr	r3, [r7, #16]
 801489a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801489e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	3308      	adds	r3, #8
 80148a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80148a8:	623a      	str	r2, [r7, #32]
 80148aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80148ac:	69f9      	ldr	r1, [r7, #28]
 80148ae:	6a3a      	ldr	r2, [r7, #32]
 80148b0:	e841 2300 	strex	r3, r2, [r1]
 80148b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80148b6:	69bb      	ldr	r3, [r7, #24]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d1e5      	bne.n	8014888 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80148bc:	2300      	movs	r3, #0
}
 80148be:	4618      	mov	r0, r3
 80148c0:	3758      	adds	r7, #88	@ 0x58
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bd80      	pop	{r7, pc}
 80148c6:	bf00      	nop
 80148c8:	08014a9f 	.word	0x08014a9f
 80148cc:	08014bcb 	.word	0x08014bcb
 80148d0:	08014c09 	.word	0x08014c09

080148d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80148d4:	b480      	push	{r7}
 80148d6:	b089      	sub	sp, #36	@ 0x24
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	e853 3f00 	ldrex	r3, [r3]
 80148e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80148ea:	68bb      	ldr	r3, [r7, #8]
 80148ec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80148f0:	61fb      	str	r3, [r7, #28]
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	461a      	mov	r2, r3
 80148f8:	69fb      	ldr	r3, [r7, #28]
 80148fa:	61bb      	str	r3, [r7, #24]
 80148fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80148fe:	6979      	ldr	r1, [r7, #20]
 8014900:	69ba      	ldr	r2, [r7, #24]
 8014902:	e841 2300 	strex	r3, r2, [r1]
 8014906:	613b      	str	r3, [r7, #16]
   return(result);
 8014908:	693b      	ldr	r3, [r7, #16]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d1e6      	bne.n	80148dc <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	2220      	movs	r2, #32
 8014912:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8014914:	bf00      	nop
 8014916:	3724      	adds	r7, #36	@ 0x24
 8014918:	46bd      	mov	sp, r7
 801491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491e:	4770      	bx	lr

08014920 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014920:	b480      	push	{r7}
 8014922:	b095      	sub	sp, #84	@ 0x54
 8014924:	af00      	add	r7, sp, #0
 8014926:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801492e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014930:	e853 3f00 	ldrex	r3, [r3]
 8014934:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8014936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014938:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801493c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	461a      	mov	r2, r3
 8014944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014946:	643b      	str	r3, [r7, #64]	@ 0x40
 8014948:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801494a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801494c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801494e:	e841 2300 	strex	r3, r2, [r1]
 8014952:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8014954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014956:	2b00      	cmp	r3, #0
 8014958:	d1e6      	bne.n	8014928 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	3308      	adds	r3, #8
 8014960:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014962:	6a3b      	ldr	r3, [r7, #32]
 8014964:	e853 3f00 	ldrex	r3, [r3]
 8014968:	61fb      	str	r3, [r7, #28]
   return(result);
 801496a:	69fb      	ldr	r3, [r7, #28]
 801496c:	f023 0301 	bic.w	r3, r3, #1
 8014970:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	3308      	adds	r3, #8
 8014978:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801497a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801497c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801497e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014980:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014982:	e841 2300 	strex	r3, r2, [r1]
 8014986:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801498a:	2b00      	cmp	r3, #0
 801498c:	d1e5      	bne.n	801495a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014992:	2b01      	cmp	r3, #1
 8014994:	d118      	bne.n	80149c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	e853 3f00 	ldrex	r3, [r3]
 80149a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80149a4:	68bb      	ldr	r3, [r7, #8]
 80149a6:	f023 0310 	bic.w	r3, r3, #16
 80149aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	461a      	mov	r2, r3
 80149b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80149b4:	61bb      	str	r3, [r7, #24]
 80149b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80149b8:	6979      	ldr	r1, [r7, #20]
 80149ba:	69ba      	ldr	r2, [r7, #24]
 80149bc:	e841 2300 	strex	r3, r2, [r1]
 80149c0:	613b      	str	r3, [r7, #16]
   return(result);
 80149c2:	693b      	ldr	r3, [r7, #16]
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d1e6      	bne.n	8014996 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	2220      	movs	r2, #32
 80149cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	2200      	movs	r2, #0
 80149d4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	2200      	movs	r2, #0
 80149da:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80149dc:	bf00      	nop
 80149de:	3754      	adds	r7, #84	@ 0x54
 80149e0:	46bd      	mov	sp, r7
 80149e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e6:	4770      	bx	lr

080149e8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80149e8:	b580      	push	{r7, lr}
 80149ea:	b090      	sub	sp, #64	@ 0x40
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80149f4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	f003 0320 	and.w	r3, r3, #32
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d137      	bne.n	8014a74 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8014a04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a06:	2200      	movs	r2, #0
 8014a08:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8014a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	3308      	adds	r3, #8
 8014a12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a16:	e853 3f00 	ldrex	r3, [r3]
 8014a1a:	623b      	str	r3, [r7, #32]
   return(result);
 8014a1c:	6a3b      	ldr	r3, [r7, #32]
 8014a1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014a22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	3308      	adds	r3, #8
 8014a2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014a2c:	633a      	str	r2, [r7, #48]	@ 0x30
 8014a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014a32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014a34:	e841 2300 	strex	r3, r2, [r1]
 8014a38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d1e5      	bne.n	8014a0c <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a46:	693b      	ldr	r3, [r7, #16]
 8014a48:	e853 3f00 	ldrex	r3, [r3]
 8014a4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014a54:	637b      	str	r3, [r7, #52]	@ 0x34
 8014a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	461a      	mov	r2, r3
 8014a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014a5e:	61fb      	str	r3, [r7, #28]
 8014a60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a62:	69b9      	ldr	r1, [r7, #24]
 8014a64:	69fa      	ldr	r2, [r7, #28]
 8014a66:	e841 2300 	strex	r3, r2, [r1]
 8014a6a:	617b      	str	r3, [r7, #20]
   return(result);
 8014a6c:	697b      	ldr	r3, [r7, #20]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d1e6      	bne.n	8014a40 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014a72:	e002      	b.n	8014a7a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8014a74:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8014a76:	f7ed fa37 	bl	8001ee8 <HAL_UART_TxCpltCallback>
}
 8014a7a:	bf00      	nop
 8014a7c:	3740      	adds	r7, #64	@ 0x40
 8014a7e:	46bd      	mov	sp, r7
 8014a80:	bd80      	pop	{r7, pc}

08014a82 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8014a82:	b580      	push	{r7, lr}
 8014a84:	b084      	sub	sp, #16
 8014a86:	af00      	add	r7, sp, #0
 8014a88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014a8e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8014a90:	68f8      	ldr	r0, [r7, #12]
 8014a92:	f7ff f9f1 	bl	8013e78 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014a96:	bf00      	nop
 8014a98:	3710      	adds	r7, #16
 8014a9a:	46bd      	mov	sp, r7
 8014a9c:	bd80      	pop	{r7, pc}

08014a9e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014a9e:	b580      	push	{r7, lr}
 8014aa0:	b09c      	sub	sp, #112	@ 0x70
 8014aa2:	af00      	add	r7, sp, #0
 8014aa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014aaa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	f003 0320 	and.w	r3, r3, #32
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d171      	bne.n	8014b9e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8014aba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014abc:	2200      	movs	r2, #0
 8014abe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014ac2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014aca:	e853 3f00 	ldrex	r3, [r3]
 8014ace:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8014ad0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014ad2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014ad6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014ad8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	461a      	mov	r2, r3
 8014ade:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014ae0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014ae2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ae4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014ae6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014ae8:	e841 2300 	strex	r3, r2, [r1]
 8014aec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8014aee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d1e6      	bne.n	8014ac2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014af4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	3308      	adds	r3, #8
 8014afa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014afe:	e853 3f00 	ldrex	r3, [r3]
 8014b02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8014b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b06:	f023 0301 	bic.w	r3, r3, #1
 8014b0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8014b0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	3308      	adds	r3, #8
 8014b12:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014b14:	647a      	str	r2, [r7, #68]	@ 0x44
 8014b16:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014b1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014b1c:	e841 2300 	strex	r3, r2, [r1]
 8014b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8014b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d1e5      	bne.n	8014af4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014b28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	3308      	adds	r3, #8
 8014b2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b32:	e853 3f00 	ldrex	r3, [r3]
 8014b36:	623b      	str	r3, [r7, #32]
   return(result);
 8014b38:	6a3b      	ldr	r3, [r7, #32]
 8014b3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014b3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8014b40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	3308      	adds	r3, #8
 8014b46:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014b48:	633a      	str	r2, [r7, #48]	@ 0x30
 8014b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014b50:	e841 2300 	strex	r3, r2, [r1]
 8014b54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d1e5      	bne.n	8014b28 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014b5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014b5e:	2220      	movs	r2, #32
 8014b60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014b64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014b68:	2b01      	cmp	r3, #1
 8014b6a:	d118      	bne.n	8014b9e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014b6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b72:	693b      	ldr	r3, [r7, #16]
 8014b74:	e853 3f00 	ldrex	r3, [r3]
 8014b78:	60fb      	str	r3, [r7, #12]
   return(result);
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	f023 0310 	bic.w	r3, r3, #16
 8014b80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014b82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	461a      	mov	r2, r3
 8014b88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014b8a:	61fb      	str	r3, [r7, #28]
 8014b8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b8e:	69b9      	ldr	r1, [r7, #24]
 8014b90:	69fa      	ldr	r2, [r7, #28]
 8014b92:	e841 2300 	strex	r3, r2, [r1]
 8014b96:	617b      	str	r3, [r7, #20]
   return(result);
 8014b98:	697b      	ldr	r3, [r7, #20]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d1e6      	bne.n	8014b6c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014b9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014ba4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014ba8:	2b01      	cmp	r3, #1
 8014baa:	d107      	bne.n	8014bbc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014bac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014bae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8014bb2:	4619      	mov	r1, r3
 8014bb4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8014bb6:	f7ed f90f 	bl	8001dd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014bba:	e002      	b.n	8014bc2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8014bbc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8014bbe:	f7ed f989 	bl	8001ed4 <HAL_UART_RxCpltCallback>
}
 8014bc2:	bf00      	nop
 8014bc4:	3770      	adds	r7, #112	@ 0x70
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	bd80      	pop	{r7, pc}

08014bca <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8014bca:	b580      	push	{r7, lr}
 8014bcc:	b084      	sub	sp, #16
 8014bce:	af00      	add	r7, sp, #0
 8014bd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014bd6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	2201      	movs	r2, #1
 8014bdc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014be2:	2b01      	cmp	r3, #1
 8014be4:	d109      	bne.n	8014bfa <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8014bec:	085b      	lsrs	r3, r3, #1
 8014bee:	b29b      	uxth	r3, r3
 8014bf0:	4619      	mov	r1, r3
 8014bf2:	68f8      	ldr	r0, [r7, #12]
 8014bf4:	f7ed f8f0 	bl	8001dd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014bf8:	e002      	b.n	8014c00 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8014bfa:	68f8      	ldr	r0, [r7, #12]
 8014bfc:	f7ff f946 	bl	8013e8c <HAL_UART_RxHalfCpltCallback>
}
 8014c00:	bf00      	nop
 8014c02:	3710      	adds	r7, #16
 8014c04:	46bd      	mov	sp, r7
 8014c06:	bd80      	pop	{r7, pc}

08014c08 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b086      	sub	sp, #24
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c14:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8014c16:	697b      	ldr	r3, [r7, #20]
 8014c18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014c1a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8014c1c:	697b      	ldr	r3, [r7, #20]
 8014c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014c22:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8014c24:	697b      	ldr	r3, [r7, #20]
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	689b      	ldr	r3, [r3, #8]
 8014c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014c2e:	2b80      	cmp	r3, #128	@ 0x80
 8014c30:	d109      	bne.n	8014c46 <UART_DMAError+0x3e>
 8014c32:	693b      	ldr	r3, [r7, #16]
 8014c34:	2b21      	cmp	r3, #33	@ 0x21
 8014c36:	d106      	bne.n	8014c46 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8014c38:	697b      	ldr	r3, [r7, #20]
 8014c3a:	2200      	movs	r2, #0
 8014c3c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8014c40:	6978      	ldr	r0, [r7, #20]
 8014c42:	f7ff fe47 	bl	80148d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8014c46:	697b      	ldr	r3, [r7, #20]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	689b      	ldr	r3, [r3, #8]
 8014c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014c50:	2b40      	cmp	r3, #64	@ 0x40
 8014c52:	d109      	bne.n	8014c68 <UART_DMAError+0x60>
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	2b22      	cmp	r3, #34	@ 0x22
 8014c58:	d106      	bne.n	8014c68 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8014c5a:	697b      	ldr	r3, [r7, #20]
 8014c5c:	2200      	movs	r2, #0
 8014c5e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8014c62:	6978      	ldr	r0, [r7, #20]
 8014c64:	f7ff fe5c 	bl	8014920 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8014c68:	697b      	ldr	r3, [r7, #20]
 8014c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014c6e:	f043 0210 	orr.w	r2, r3, #16
 8014c72:	697b      	ldr	r3, [r7, #20]
 8014c74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014c78:	6978      	ldr	r0, [r7, #20]
 8014c7a:	f7ff f911 	bl	8013ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014c7e:	bf00      	nop
 8014c80:	3718      	adds	r7, #24
 8014c82:	46bd      	mov	sp, r7
 8014c84:	bd80      	pop	{r7, pc}

08014c86 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8014c86:	b580      	push	{r7, lr}
 8014c88:	b088      	sub	sp, #32
 8014c8a:	af00      	add	r7, sp, #0
 8014c8c:	60f8      	str	r0, [r7, #12]
 8014c8e:	60b9      	str	r1, [r7, #8]
 8014c90:	603b      	str	r3, [r7, #0]
 8014c92:	4613      	mov	r3, r2
 8014c94:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014c9c:	2b20      	cmp	r3, #32
 8014c9e:	f040 80f0 	bne.w	8014e82 <HAL_UARTEx_ReceiveToIdle+0x1fc>
  {
    if ((pData == NULL) || (Size == 0U))
 8014ca2:	68bb      	ldr	r3, [r7, #8]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d002      	beq.n	8014cae <HAL_UARTEx_ReceiveToIdle+0x28>
 8014ca8:	88fb      	ldrh	r3, [r7, #6]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d101      	bne.n	8014cb2 <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 8014cae:	2301      	movs	r3, #1
 8014cb0:	e0e8      	b.n	8014e84 <HAL_UARTEx_ReceiveToIdle+0x1fe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	2222      	movs	r2, #34	@ 0x22
 8014cbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	2201      	movs	r2, #1
 8014cc6:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	2200      	movs	r2, #0
 8014ccc:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014cce:	f7f5 f99b 	bl	800a008 <HAL_GetTick>
 8014cd2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	88fa      	ldrh	r2, [r7, #6]
 8014cd8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	88fa      	ldrh	r2, [r7, #6]
 8014ce0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	689b      	ldr	r3, [r3, #8]
 8014ce8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014cec:	d10e      	bne.n	8014d0c <HAL_UARTEx_ReceiveToIdle+0x86>
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	691b      	ldr	r3, [r3, #16]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d105      	bne.n	8014d02 <HAL_UARTEx_ReceiveToIdle+0x7c>
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8014cfc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014d00:	e02d      	b.n	8014d5e <HAL_UARTEx_ReceiveToIdle+0xd8>
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	22ff      	movs	r2, #255	@ 0xff
 8014d06:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014d0a:	e028      	b.n	8014d5e <HAL_UARTEx_ReceiveToIdle+0xd8>
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	689b      	ldr	r3, [r3, #8]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d10d      	bne.n	8014d30 <HAL_UARTEx_ReceiveToIdle+0xaa>
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	691b      	ldr	r3, [r3, #16]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d104      	bne.n	8014d26 <HAL_UARTEx_ReceiveToIdle+0xa0>
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	22ff      	movs	r2, #255	@ 0xff
 8014d20:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014d24:	e01b      	b.n	8014d5e <HAL_UARTEx_ReceiveToIdle+0xd8>
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	227f      	movs	r2, #127	@ 0x7f
 8014d2a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014d2e:	e016      	b.n	8014d5e <HAL_UARTEx_ReceiveToIdle+0xd8>
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	689b      	ldr	r3, [r3, #8]
 8014d34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014d38:	d10d      	bne.n	8014d56 <HAL_UARTEx_ReceiveToIdle+0xd0>
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	691b      	ldr	r3, [r3, #16]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d104      	bne.n	8014d4c <HAL_UARTEx_ReceiveToIdle+0xc6>
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	227f      	movs	r2, #127	@ 0x7f
 8014d46:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014d4a:	e008      	b.n	8014d5e <HAL_UARTEx_ReceiveToIdle+0xd8>
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	223f      	movs	r2, #63	@ 0x3f
 8014d50:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014d54:	e003      	b.n	8014d5e <HAL_UARTEx_ReceiveToIdle+0xd8>
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	2200      	movs	r2, #0
 8014d5a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8014d64:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	689b      	ldr	r3, [r3, #8]
 8014d6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014d6e:	d108      	bne.n	8014d82 <HAL_UARTEx_ReceiveToIdle+0xfc>
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	691b      	ldr	r3, [r3, #16]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d104      	bne.n	8014d82 <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 8014d78:	2300      	movs	r3, #0
 8014d7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8014d7c:	68bb      	ldr	r3, [r7, #8]
 8014d7e:	61bb      	str	r3, [r7, #24]
 8014d80:	e003      	b.n	8014d8a <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 8014d82:	68bb      	ldr	r3, [r7, #8]
 8014d84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014d86:	2300      	movs	r3, #0
 8014d88:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8014d8a:	683b      	ldr	r3, [r7, #0]
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8014d90:	e060      	b.n	8014e54 <HAL_UARTEx_ReceiveToIdle+0x1ce>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	69db      	ldr	r3, [r3, #28]
 8014d98:	f003 0310 	and.w	r3, r3, #16
 8014d9c:	2b10      	cmp	r3, #16
 8014d9e:	d110      	bne.n	8014dc2 <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	2210      	movs	r2, #16
 8014da6:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8014da8:	683b      	ldr	r3, [r7, #0]
 8014daa:	881b      	ldrh	r3, [r3, #0]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d008      	beq.n	8014dc2 <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	2202      	movs	r2, #2
 8014db4:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	2220      	movs	r2, #32
 8014dba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_OK;
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	e060      	b.n	8014e84 <HAL_UARTEx_ReceiveToIdle+0x1fe>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	69db      	ldr	r3, [r3, #28]
 8014dc8:	f003 0320 	and.w	r3, r3, #32
 8014dcc:	2b20      	cmp	r3, #32
 8014dce:	d12c      	bne.n	8014e2a <HAL_UARTEx_ReceiveToIdle+0x1a4>
      {
        if (pdata8bits == NULL)
 8014dd0:	69fb      	ldr	r3, [r7, #28]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d10c      	bne.n	8014df0 <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014ddc:	b29a      	uxth	r2, r3
 8014dde:	8a7b      	ldrh	r3, [r7, #18]
 8014de0:	4013      	ands	r3, r2
 8014de2:	b29a      	uxth	r2, r3
 8014de4:	69bb      	ldr	r3, [r7, #24]
 8014de6:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8014de8:	69bb      	ldr	r3, [r7, #24]
 8014dea:	3302      	adds	r3, #2
 8014dec:	61bb      	str	r3, [r7, #24]
 8014dee:	e00d      	b.n	8014e0c <HAL_UARTEx_ReceiveToIdle+0x186>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014df6:	b29b      	uxth	r3, r3
 8014df8:	b2da      	uxtb	r2, r3
 8014dfa:	8a7b      	ldrh	r3, [r7, #18]
 8014dfc:	b2db      	uxtb	r3, r3
 8014dfe:	4013      	ands	r3, r2
 8014e00:	b2da      	uxtb	r2, r3
 8014e02:	69fb      	ldr	r3, [r7, #28]
 8014e04:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 8014e06:	69fb      	ldr	r3, [r7, #28]
 8014e08:	3301      	adds	r3, #1
 8014e0a:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8014e0c:	683b      	ldr	r3, [r7, #0]
 8014e0e:	881b      	ldrh	r3, [r3, #0]
 8014e10:	3301      	adds	r3, #1
 8014e12:	b29a      	uxth	r2, r3
 8014e14:	683b      	ldr	r3, [r7, #0]
 8014e16:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8014e1e:	b29b      	uxth	r3, r3
 8014e20:	3b01      	subs	r3, #1
 8014e22:	b29a      	uxth	r2, r3
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8014e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e30:	d010      	beq.n	8014e54 <HAL_UARTEx_ReceiveToIdle+0x1ce>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8014e32:	f7f5 f8e9 	bl	800a008 <HAL_GetTick>
 8014e36:	4602      	mov	r2, r0
 8014e38:	697b      	ldr	r3, [r7, #20]
 8014e3a:	1ad3      	subs	r3, r2, r3
 8014e3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014e3e:	429a      	cmp	r2, r3
 8014e40:	d302      	bcc.n	8014e48 <HAL_UARTEx_ReceiveToIdle+0x1c2>
 8014e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d105      	bne.n	8014e54 <HAL_UARTEx_ReceiveToIdle+0x1ce>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	2220      	movs	r2, #32
 8014e4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014e50:	2303      	movs	r3, #3
 8014e52:	e017      	b.n	8014e84 <HAL_UARTEx_ReceiveToIdle+0x1fe>
    while (huart->RxXferCount > 0U)
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8014e5a:	b29b      	uxth	r3, r3
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d198      	bne.n	8014d92 <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8014e6c:	b29b      	uxth	r3, r3
 8014e6e:	1ad3      	subs	r3, r2, r3
 8014e70:	b29a      	uxth	r2, r3
 8014e72:	683b      	ldr	r3, [r7, #0]
 8014e74:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	2220      	movs	r2, #32
 8014e7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8014e7e:	2300      	movs	r3, #0
 8014e80:	e000      	b.n	8014e84 <HAL_UARTEx_ReceiveToIdle+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8014e82:	2302      	movs	r3, #2
  }
}
 8014e84:	4618      	mov	r0, r3
 8014e86:	3720      	adds	r7, #32
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	bd80      	pop	{r7, pc}

08014e8c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b08c      	sub	sp, #48	@ 0x30
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	60f8      	str	r0, [r7, #12]
 8014e94:	60b9      	str	r1, [r7, #8]
 8014e96:	4613      	mov	r3, r2
 8014e98:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014e9a:	68fb      	ldr	r3, [r7, #12]
 8014e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014ea0:	2b20      	cmp	r3, #32
 8014ea2:	d142      	bne.n	8014f2a <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8014ea4:	68bb      	ldr	r3, [r7, #8]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d002      	beq.n	8014eb0 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8014eaa:	88fb      	ldrh	r3, [r7, #6]
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d101      	bne.n	8014eb4 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8014eb0:	2301      	movs	r3, #1
 8014eb2:	e03b      	b.n	8014f2c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	2201      	movs	r2, #1
 8014eb8:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8014ec0:	88fb      	ldrh	r3, [r7, #6]
 8014ec2:	461a      	mov	r2, r3
 8014ec4:	68b9      	ldr	r1, [r7, #8]
 8014ec6:	68f8      	ldr	r0, [r7, #12]
 8014ec8:	f7ff fc64 	bl	8014794 <UART_Start_Receive_DMA>
 8014ecc:	4603      	mov	r3, r0
 8014ece:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8014ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d124      	bne.n	8014f24 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014ede:	2b01      	cmp	r3, #1
 8014ee0:	d11d      	bne.n	8014f1e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	2210      	movs	r2, #16
 8014ee8:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ef0:	69bb      	ldr	r3, [r7, #24]
 8014ef2:	e853 3f00 	ldrex	r3, [r3]
 8014ef6:	617b      	str	r3, [r7, #20]
   return(result);
 8014ef8:	697b      	ldr	r3, [r7, #20]
 8014efa:	f043 0310 	orr.w	r3, r3, #16
 8014efe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	461a      	mov	r2, r3
 8014f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8014f0a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f0c:	6a39      	ldr	r1, [r7, #32]
 8014f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014f10:	e841 2300 	strex	r3, r2, [r1]
 8014f14:	61fb      	str	r3, [r7, #28]
   return(result);
 8014f16:	69fb      	ldr	r3, [r7, #28]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d1e6      	bne.n	8014eea <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8014f1c:	e002      	b.n	8014f24 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8014f1e:	2301      	movs	r3, #1
 8014f20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8014f24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014f28:	e000      	b.n	8014f2c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8014f2a:	2302      	movs	r3, #2
  }
}
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	3730      	adds	r7, #48	@ 0x30
 8014f30:	46bd      	mov	sp, r7
 8014f32:	bd80      	pop	{r7, pc}

08014f34 <atoi>:
 8014f34:	220a      	movs	r2, #10
 8014f36:	2100      	movs	r1, #0
 8014f38:	f000 b87c 	b.w	8015034 <strtol>

08014f3c <_strtol_l.isra.0>:
 8014f3c:	2b24      	cmp	r3, #36	@ 0x24
 8014f3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f42:	4686      	mov	lr, r0
 8014f44:	4690      	mov	r8, r2
 8014f46:	d801      	bhi.n	8014f4c <_strtol_l.isra.0+0x10>
 8014f48:	2b01      	cmp	r3, #1
 8014f4a:	d106      	bne.n	8014f5a <_strtol_l.isra.0+0x1e>
 8014f4c:	f000 f92c 	bl	80151a8 <__errno>
 8014f50:	2316      	movs	r3, #22
 8014f52:	6003      	str	r3, [r0, #0]
 8014f54:	2000      	movs	r0, #0
 8014f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f5a:	4834      	ldr	r0, [pc, #208]	@ (801502c <_strtol_l.isra.0+0xf0>)
 8014f5c:	460d      	mov	r5, r1
 8014f5e:	462a      	mov	r2, r5
 8014f60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014f64:	5d06      	ldrb	r6, [r0, r4]
 8014f66:	f016 0608 	ands.w	r6, r6, #8
 8014f6a:	d1f8      	bne.n	8014f5e <_strtol_l.isra.0+0x22>
 8014f6c:	2c2d      	cmp	r4, #45	@ 0x2d
 8014f6e:	d110      	bne.n	8014f92 <_strtol_l.isra.0+0x56>
 8014f70:	782c      	ldrb	r4, [r5, #0]
 8014f72:	2601      	movs	r6, #1
 8014f74:	1c95      	adds	r5, r2, #2
 8014f76:	f033 0210 	bics.w	r2, r3, #16
 8014f7a:	d115      	bne.n	8014fa8 <_strtol_l.isra.0+0x6c>
 8014f7c:	2c30      	cmp	r4, #48	@ 0x30
 8014f7e:	d10d      	bne.n	8014f9c <_strtol_l.isra.0+0x60>
 8014f80:	782a      	ldrb	r2, [r5, #0]
 8014f82:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8014f86:	2a58      	cmp	r2, #88	@ 0x58
 8014f88:	d108      	bne.n	8014f9c <_strtol_l.isra.0+0x60>
 8014f8a:	786c      	ldrb	r4, [r5, #1]
 8014f8c:	3502      	adds	r5, #2
 8014f8e:	2310      	movs	r3, #16
 8014f90:	e00a      	b.n	8014fa8 <_strtol_l.isra.0+0x6c>
 8014f92:	2c2b      	cmp	r4, #43	@ 0x2b
 8014f94:	bf04      	itt	eq
 8014f96:	782c      	ldrbeq	r4, [r5, #0]
 8014f98:	1c95      	addeq	r5, r2, #2
 8014f9a:	e7ec      	b.n	8014f76 <_strtol_l.isra.0+0x3a>
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d1f6      	bne.n	8014f8e <_strtol_l.isra.0+0x52>
 8014fa0:	2c30      	cmp	r4, #48	@ 0x30
 8014fa2:	bf14      	ite	ne
 8014fa4:	230a      	movne	r3, #10
 8014fa6:	2308      	moveq	r3, #8
 8014fa8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8014fac:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	fbbc f9f3 	udiv	r9, ip, r3
 8014fb6:	4610      	mov	r0, r2
 8014fb8:	fb03 ca19 	mls	sl, r3, r9, ip
 8014fbc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8014fc0:	2f09      	cmp	r7, #9
 8014fc2:	d80f      	bhi.n	8014fe4 <_strtol_l.isra.0+0xa8>
 8014fc4:	463c      	mov	r4, r7
 8014fc6:	42a3      	cmp	r3, r4
 8014fc8:	dd1b      	ble.n	8015002 <_strtol_l.isra.0+0xc6>
 8014fca:	1c57      	adds	r7, r2, #1
 8014fcc:	d007      	beq.n	8014fde <_strtol_l.isra.0+0xa2>
 8014fce:	4581      	cmp	r9, r0
 8014fd0:	d314      	bcc.n	8014ffc <_strtol_l.isra.0+0xc0>
 8014fd2:	d101      	bne.n	8014fd8 <_strtol_l.isra.0+0x9c>
 8014fd4:	45a2      	cmp	sl, r4
 8014fd6:	db11      	blt.n	8014ffc <_strtol_l.isra.0+0xc0>
 8014fd8:	fb00 4003 	mla	r0, r0, r3, r4
 8014fdc:	2201      	movs	r2, #1
 8014fde:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014fe2:	e7eb      	b.n	8014fbc <_strtol_l.isra.0+0x80>
 8014fe4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8014fe8:	2f19      	cmp	r7, #25
 8014fea:	d801      	bhi.n	8014ff0 <_strtol_l.isra.0+0xb4>
 8014fec:	3c37      	subs	r4, #55	@ 0x37
 8014fee:	e7ea      	b.n	8014fc6 <_strtol_l.isra.0+0x8a>
 8014ff0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8014ff4:	2f19      	cmp	r7, #25
 8014ff6:	d804      	bhi.n	8015002 <_strtol_l.isra.0+0xc6>
 8014ff8:	3c57      	subs	r4, #87	@ 0x57
 8014ffa:	e7e4      	b.n	8014fc6 <_strtol_l.isra.0+0x8a>
 8014ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8015000:	e7ed      	b.n	8014fde <_strtol_l.isra.0+0xa2>
 8015002:	1c53      	adds	r3, r2, #1
 8015004:	d108      	bne.n	8015018 <_strtol_l.isra.0+0xdc>
 8015006:	2322      	movs	r3, #34	@ 0x22
 8015008:	f8ce 3000 	str.w	r3, [lr]
 801500c:	4660      	mov	r0, ip
 801500e:	f1b8 0f00 	cmp.w	r8, #0
 8015012:	d0a0      	beq.n	8014f56 <_strtol_l.isra.0+0x1a>
 8015014:	1e69      	subs	r1, r5, #1
 8015016:	e006      	b.n	8015026 <_strtol_l.isra.0+0xea>
 8015018:	b106      	cbz	r6, 801501c <_strtol_l.isra.0+0xe0>
 801501a:	4240      	negs	r0, r0
 801501c:	f1b8 0f00 	cmp.w	r8, #0
 8015020:	d099      	beq.n	8014f56 <_strtol_l.isra.0+0x1a>
 8015022:	2a00      	cmp	r2, #0
 8015024:	d1f6      	bne.n	8015014 <_strtol_l.isra.0+0xd8>
 8015026:	f8c8 1000 	str.w	r1, [r8]
 801502a:	e794      	b.n	8014f56 <_strtol_l.isra.0+0x1a>
 801502c:	080168f7 	.word	0x080168f7

08015030 <_strtol_r>:
 8015030:	f7ff bf84 	b.w	8014f3c <_strtol_l.isra.0>

08015034 <strtol>:
 8015034:	4613      	mov	r3, r2
 8015036:	460a      	mov	r2, r1
 8015038:	4601      	mov	r1, r0
 801503a:	4802      	ldr	r0, [pc, #8]	@ (8015044 <strtol+0x10>)
 801503c:	6800      	ldr	r0, [r0, #0]
 801503e:	f7ff bf7d 	b.w	8014f3c <_strtol_l.isra.0>
 8015042:	bf00      	nop
 8015044:	2000019c 	.word	0x2000019c

08015048 <siprintf>:
 8015048:	b40e      	push	{r1, r2, r3}
 801504a:	b510      	push	{r4, lr}
 801504c:	b09d      	sub	sp, #116	@ 0x74
 801504e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8015050:	9002      	str	r0, [sp, #8]
 8015052:	9006      	str	r0, [sp, #24]
 8015054:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015058:	480a      	ldr	r0, [pc, #40]	@ (8015084 <siprintf+0x3c>)
 801505a:	9107      	str	r1, [sp, #28]
 801505c:	9104      	str	r1, [sp, #16]
 801505e:	490a      	ldr	r1, [pc, #40]	@ (8015088 <siprintf+0x40>)
 8015060:	f853 2b04 	ldr.w	r2, [r3], #4
 8015064:	9105      	str	r1, [sp, #20]
 8015066:	2400      	movs	r4, #0
 8015068:	a902      	add	r1, sp, #8
 801506a:	6800      	ldr	r0, [r0, #0]
 801506c:	9301      	str	r3, [sp, #4]
 801506e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8015070:	f000 fa30 	bl	80154d4 <_svfiprintf_r>
 8015074:	9b02      	ldr	r3, [sp, #8]
 8015076:	701c      	strb	r4, [r3, #0]
 8015078:	b01d      	add	sp, #116	@ 0x74
 801507a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801507e:	b003      	add	sp, #12
 8015080:	4770      	bx	lr
 8015082:	bf00      	nop
 8015084:	2000019c 	.word	0x2000019c
 8015088:	ffff0208 	.word	0xffff0208

0801508c <siscanf>:
 801508c:	b40e      	push	{r1, r2, r3}
 801508e:	b570      	push	{r4, r5, r6, lr}
 8015090:	b09d      	sub	sp, #116	@ 0x74
 8015092:	ac21      	add	r4, sp, #132	@ 0x84
 8015094:	2500      	movs	r5, #0
 8015096:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801509a:	f854 6b04 	ldr.w	r6, [r4], #4
 801509e:	f8ad 2014 	strh.w	r2, [sp, #20]
 80150a2:	951b      	str	r5, [sp, #108]	@ 0x6c
 80150a4:	9002      	str	r0, [sp, #8]
 80150a6:	9006      	str	r0, [sp, #24]
 80150a8:	f7eb f89c 	bl	80001e4 <strlen>
 80150ac:	4b0b      	ldr	r3, [pc, #44]	@ (80150dc <siscanf+0x50>)
 80150ae:	9003      	str	r0, [sp, #12]
 80150b0:	9007      	str	r0, [sp, #28]
 80150b2:	480b      	ldr	r0, [pc, #44]	@ (80150e0 <siscanf+0x54>)
 80150b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80150b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80150ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 80150be:	4632      	mov	r2, r6
 80150c0:	4623      	mov	r3, r4
 80150c2:	a902      	add	r1, sp, #8
 80150c4:	6800      	ldr	r0, [r0, #0]
 80150c6:	950f      	str	r5, [sp, #60]	@ 0x3c
 80150c8:	9514      	str	r5, [sp, #80]	@ 0x50
 80150ca:	9401      	str	r4, [sp, #4]
 80150cc:	f000 fb58 	bl	8015780 <__ssvfiscanf_r>
 80150d0:	b01d      	add	sp, #116	@ 0x74
 80150d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150d6:	b003      	add	sp, #12
 80150d8:	4770      	bx	lr
 80150da:	bf00      	nop
 80150dc:	080150e5 	.word	0x080150e5
 80150e0:	2000019c 	.word	0x2000019c

080150e4 <__seofread>:
 80150e4:	2000      	movs	r0, #0
 80150e6:	4770      	bx	lr

080150e8 <memcmp>:
 80150e8:	b510      	push	{r4, lr}
 80150ea:	3901      	subs	r1, #1
 80150ec:	4402      	add	r2, r0
 80150ee:	4290      	cmp	r0, r2
 80150f0:	d101      	bne.n	80150f6 <memcmp+0xe>
 80150f2:	2000      	movs	r0, #0
 80150f4:	e005      	b.n	8015102 <memcmp+0x1a>
 80150f6:	7803      	ldrb	r3, [r0, #0]
 80150f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80150fc:	42a3      	cmp	r3, r4
 80150fe:	d001      	beq.n	8015104 <memcmp+0x1c>
 8015100:	1b18      	subs	r0, r3, r4
 8015102:	bd10      	pop	{r4, pc}
 8015104:	3001      	adds	r0, #1
 8015106:	e7f2      	b.n	80150ee <memcmp+0x6>

08015108 <memset>:
 8015108:	4402      	add	r2, r0
 801510a:	4603      	mov	r3, r0
 801510c:	4293      	cmp	r3, r2
 801510e:	d100      	bne.n	8015112 <memset+0xa>
 8015110:	4770      	bx	lr
 8015112:	f803 1b01 	strb.w	r1, [r3], #1
 8015116:	e7f9      	b.n	801510c <memset+0x4>

08015118 <strchr>:
 8015118:	b2c9      	uxtb	r1, r1
 801511a:	4603      	mov	r3, r0
 801511c:	4618      	mov	r0, r3
 801511e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015122:	b112      	cbz	r2, 801512a <strchr+0x12>
 8015124:	428a      	cmp	r2, r1
 8015126:	d1f9      	bne.n	801511c <strchr+0x4>
 8015128:	4770      	bx	lr
 801512a:	2900      	cmp	r1, #0
 801512c:	bf18      	it	ne
 801512e:	2000      	movne	r0, #0
 8015130:	4770      	bx	lr

08015132 <strncmp>:
 8015132:	b510      	push	{r4, lr}
 8015134:	b16a      	cbz	r2, 8015152 <strncmp+0x20>
 8015136:	3901      	subs	r1, #1
 8015138:	1884      	adds	r4, r0, r2
 801513a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801513e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015142:	429a      	cmp	r2, r3
 8015144:	d103      	bne.n	801514e <strncmp+0x1c>
 8015146:	42a0      	cmp	r0, r4
 8015148:	d001      	beq.n	801514e <strncmp+0x1c>
 801514a:	2a00      	cmp	r2, #0
 801514c:	d1f5      	bne.n	801513a <strncmp+0x8>
 801514e:	1ad0      	subs	r0, r2, r3
 8015150:	bd10      	pop	{r4, pc}
 8015152:	4610      	mov	r0, r2
 8015154:	e7fc      	b.n	8015150 <strncmp+0x1e>

08015156 <strncpy>:
 8015156:	b510      	push	{r4, lr}
 8015158:	3901      	subs	r1, #1
 801515a:	4603      	mov	r3, r0
 801515c:	b132      	cbz	r2, 801516c <strncpy+0x16>
 801515e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015162:	f803 4b01 	strb.w	r4, [r3], #1
 8015166:	3a01      	subs	r2, #1
 8015168:	2c00      	cmp	r4, #0
 801516a:	d1f7      	bne.n	801515c <strncpy+0x6>
 801516c:	441a      	add	r2, r3
 801516e:	2100      	movs	r1, #0
 8015170:	4293      	cmp	r3, r2
 8015172:	d100      	bne.n	8015176 <strncpy+0x20>
 8015174:	bd10      	pop	{r4, pc}
 8015176:	f803 1b01 	strb.w	r1, [r3], #1
 801517a:	e7f9      	b.n	8015170 <strncpy+0x1a>

0801517c <strstr>:
 801517c:	780a      	ldrb	r2, [r1, #0]
 801517e:	b570      	push	{r4, r5, r6, lr}
 8015180:	b96a      	cbnz	r2, 801519e <strstr+0x22>
 8015182:	bd70      	pop	{r4, r5, r6, pc}
 8015184:	429a      	cmp	r2, r3
 8015186:	d109      	bne.n	801519c <strstr+0x20>
 8015188:	460c      	mov	r4, r1
 801518a:	4605      	mov	r5, r0
 801518c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015190:	2b00      	cmp	r3, #0
 8015192:	d0f6      	beq.n	8015182 <strstr+0x6>
 8015194:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8015198:	429e      	cmp	r6, r3
 801519a:	d0f7      	beq.n	801518c <strstr+0x10>
 801519c:	3001      	adds	r0, #1
 801519e:	7803      	ldrb	r3, [r0, #0]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d1ef      	bne.n	8015184 <strstr+0x8>
 80151a4:	4618      	mov	r0, r3
 80151a6:	e7ec      	b.n	8015182 <strstr+0x6>

080151a8 <__errno>:
 80151a8:	4b01      	ldr	r3, [pc, #4]	@ (80151b0 <__errno+0x8>)
 80151aa:	6818      	ldr	r0, [r3, #0]
 80151ac:	4770      	bx	lr
 80151ae:	bf00      	nop
 80151b0:	2000019c 	.word	0x2000019c

080151b4 <__libc_init_array>:
 80151b4:	b570      	push	{r4, r5, r6, lr}
 80151b6:	4d0d      	ldr	r5, [pc, #52]	@ (80151ec <__libc_init_array+0x38>)
 80151b8:	4c0d      	ldr	r4, [pc, #52]	@ (80151f0 <__libc_init_array+0x3c>)
 80151ba:	1b64      	subs	r4, r4, r5
 80151bc:	10a4      	asrs	r4, r4, #2
 80151be:	2600      	movs	r6, #0
 80151c0:	42a6      	cmp	r6, r4
 80151c2:	d109      	bne.n	80151d8 <__libc_init_array+0x24>
 80151c4:	4d0b      	ldr	r5, [pc, #44]	@ (80151f4 <__libc_init_array+0x40>)
 80151c6:	4c0c      	ldr	r4, [pc, #48]	@ (80151f8 <__libc_init_array+0x44>)
 80151c8:	f001 f86e 	bl	80162a8 <_init>
 80151cc:	1b64      	subs	r4, r4, r5
 80151ce:	10a4      	asrs	r4, r4, #2
 80151d0:	2600      	movs	r6, #0
 80151d2:	42a6      	cmp	r6, r4
 80151d4:	d105      	bne.n	80151e2 <__libc_init_array+0x2e>
 80151d6:	bd70      	pop	{r4, r5, r6, pc}
 80151d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80151dc:	4798      	blx	r3
 80151de:	3601      	adds	r6, #1
 80151e0:	e7ee      	b.n	80151c0 <__libc_init_array+0xc>
 80151e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80151e6:	4798      	blx	r3
 80151e8:	3601      	adds	r6, #1
 80151ea:	e7f2      	b.n	80151d2 <__libc_init_array+0x1e>
 80151ec:	08016a50 	.word	0x08016a50
 80151f0:	08016a50 	.word	0x08016a50
 80151f4:	08016a50 	.word	0x08016a50
 80151f8:	08016a54 	.word	0x08016a54

080151fc <__retarget_lock_acquire_recursive>:
 80151fc:	4770      	bx	lr

080151fe <__retarget_lock_release_recursive>:
 80151fe:	4770      	bx	lr

08015200 <strcpy>:
 8015200:	4603      	mov	r3, r0
 8015202:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015206:	f803 2b01 	strb.w	r2, [r3], #1
 801520a:	2a00      	cmp	r2, #0
 801520c:	d1f9      	bne.n	8015202 <strcpy+0x2>
 801520e:	4770      	bx	lr

08015210 <memcpy>:
 8015210:	440a      	add	r2, r1
 8015212:	4291      	cmp	r1, r2
 8015214:	f100 33ff 	add.w	r3, r0, #4294967295
 8015218:	d100      	bne.n	801521c <memcpy+0xc>
 801521a:	4770      	bx	lr
 801521c:	b510      	push	{r4, lr}
 801521e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015222:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015226:	4291      	cmp	r1, r2
 8015228:	d1f9      	bne.n	801521e <memcpy+0xe>
 801522a:	bd10      	pop	{r4, pc}

0801522c <_free_r>:
 801522c:	b538      	push	{r3, r4, r5, lr}
 801522e:	4605      	mov	r5, r0
 8015230:	2900      	cmp	r1, #0
 8015232:	d041      	beq.n	80152b8 <_free_r+0x8c>
 8015234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015238:	1f0c      	subs	r4, r1, #4
 801523a:	2b00      	cmp	r3, #0
 801523c:	bfb8      	it	lt
 801523e:	18e4      	addlt	r4, r4, r3
 8015240:	f000 f8e0 	bl	8015404 <__malloc_lock>
 8015244:	4a1d      	ldr	r2, [pc, #116]	@ (80152bc <_free_r+0x90>)
 8015246:	6813      	ldr	r3, [r2, #0]
 8015248:	b933      	cbnz	r3, 8015258 <_free_r+0x2c>
 801524a:	6063      	str	r3, [r4, #4]
 801524c:	6014      	str	r4, [r2, #0]
 801524e:	4628      	mov	r0, r5
 8015250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015254:	f000 b8dc 	b.w	8015410 <__malloc_unlock>
 8015258:	42a3      	cmp	r3, r4
 801525a:	d908      	bls.n	801526e <_free_r+0x42>
 801525c:	6820      	ldr	r0, [r4, #0]
 801525e:	1821      	adds	r1, r4, r0
 8015260:	428b      	cmp	r3, r1
 8015262:	bf01      	itttt	eq
 8015264:	6819      	ldreq	r1, [r3, #0]
 8015266:	685b      	ldreq	r3, [r3, #4]
 8015268:	1809      	addeq	r1, r1, r0
 801526a:	6021      	streq	r1, [r4, #0]
 801526c:	e7ed      	b.n	801524a <_free_r+0x1e>
 801526e:	461a      	mov	r2, r3
 8015270:	685b      	ldr	r3, [r3, #4]
 8015272:	b10b      	cbz	r3, 8015278 <_free_r+0x4c>
 8015274:	42a3      	cmp	r3, r4
 8015276:	d9fa      	bls.n	801526e <_free_r+0x42>
 8015278:	6811      	ldr	r1, [r2, #0]
 801527a:	1850      	adds	r0, r2, r1
 801527c:	42a0      	cmp	r0, r4
 801527e:	d10b      	bne.n	8015298 <_free_r+0x6c>
 8015280:	6820      	ldr	r0, [r4, #0]
 8015282:	4401      	add	r1, r0
 8015284:	1850      	adds	r0, r2, r1
 8015286:	4283      	cmp	r3, r0
 8015288:	6011      	str	r1, [r2, #0]
 801528a:	d1e0      	bne.n	801524e <_free_r+0x22>
 801528c:	6818      	ldr	r0, [r3, #0]
 801528e:	685b      	ldr	r3, [r3, #4]
 8015290:	6053      	str	r3, [r2, #4]
 8015292:	4408      	add	r0, r1
 8015294:	6010      	str	r0, [r2, #0]
 8015296:	e7da      	b.n	801524e <_free_r+0x22>
 8015298:	d902      	bls.n	80152a0 <_free_r+0x74>
 801529a:	230c      	movs	r3, #12
 801529c:	602b      	str	r3, [r5, #0]
 801529e:	e7d6      	b.n	801524e <_free_r+0x22>
 80152a0:	6820      	ldr	r0, [r4, #0]
 80152a2:	1821      	adds	r1, r4, r0
 80152a4:	428b      	cmp	r3, r1
 80152a6:	bf04      	itt	eq
 80152a8:	6819      	ldreq	r1, [r3, #0]
 80152aa:	685b      	ldreq	r3, [r3, #4]
 80152ac:	6063      	str	r3, [r4, #4]
 80152ae:	bf04      	itt	eq
 80152b0:	1809      	addeq	r1, r1, r0
 80152b2:	6021      	streq	r1, [r4, #0]
 80152b4:	6054      	str	r4, [r2, #4]
 80152b6:	e7ca      	b.n	801524e <_free_r+0x22>
 80152b8:	bd38      	pop	{r3, r4, r5, pc}
 80152ba:	bf00      	nop
 80152bc:	20005c14 	.word	0x20005c14

080152c0 <sbrk_aligned>:
 80152c0:	b570      	push	{r4, r5, r6, lr}
 80152c2:	4e0f      	ldr	r6, [pc, #60]	@ (8015300 <sbrk_aligned+0x40>)
 80152c4:	460c      	mov	r4, r1
 80152c6:	6831      	ldr	r1, [r6, #0]
 80152c8:	4605      	mov	r5, r0
 80152ca:	b911      	cbnz	r1, 80152d2 <sbrk_aligned+0x12>
 80152cc:	f000 ff36 	bl	801613c <_sbrk_r>
 80152d0:	6030      	str	r0, [r6, #0]
 80152d2:	4621      	mov	r1, r4
 80152d4:	4628      	mov	r0, r5
 80152d6:	f000 ff31 	bl	801613c <_sbrk_r>
 80152da:	1c43      	adds	r3, r0, #1
 80152dc:	d103      	bne.n	80152e6 <sbrk_aligned+0x26>
 80152de:	f04f 34ff 	mov.w	r4, #4294967295
 80152e2:	4620      	mov	r0, r4
 80152e4:	bd70      	pop	{r4, r5, r6, pc}
 80152e6:	1cc4      	adds	r4, r0, #3
 80152e8:	f024 0403 	bic.w	r4, r4, #3
 80152ec:	42a0      	cmp	r0, r4
 80152ee:	d0f8      	beq.n	80152e2 <sbrk_aligned+0x22>
 80152f0:	1a21      	subs	r1, r4, r0
 80152f2:	4628      	mov	r0, r5
 80152f4:	f000 ff22 	bl	801613c <_sbrk_r>
 80152f8:	3001      	adds	r0, #1
 80152fa:	d1f2      	bne.n	80152e2 <sbrk_aligned+0x22>
 80152fc:	e7ef      	b.n	80152de <sbrk_aligned+0x1e>
 80152fe:	bf00      	nop
 8015300:	20005c10 	.word	0x20005c10

08015304 <_malloc_r>:
 8015304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015308:	1ccd      	adds	r5, r1, #3
 801530a:	f025 0503 	bic.w	r5, r5, #3
 801530e:	3508      	adds	r5, #8
 8015310:	2d0c      	cmp	r5, #12
 8015312:	bf38      	it	cc
 8015314:	250c      	movcc	r5, #12
 8015316:	2d00      	cmp	r5, #0
 8015318:	4606      	mov	r6, r0
 801531a:	db01      	blt.n	8015320 <_malloc_r+0x1c>
 801531c:	42a9      	cmp	r1, r5
 801531e:	d904      	bls.n	801532a <_malloc_r+0x26>
 8015320:	230c      	movs	r3, #12
 8015322:	6033      	str	r3, [r6, #0]
 8015324:	2000      	movs	r0, #0
 8015326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801532a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015400 <_malloc_r+0xfc>
 801532e:	f000 f869 	bl	8015404 <__malloc_lock>
 8015332:	f8d8 3000 	ldr.w	r3, [r8]
 8015336:	461c      	mov	r4, r3
 8015338:	bb44      	cbnz	r4, 801538c <_malloc_r+0x88>
 801533a:	4629      	mov	r1, r5
 801533c:	4630      	mov	r0, r6
 801533e:	f7ff ffbf 	bl	80152c0 <sbrk_aligned>
 8015342:	1c43      	adds	r3, r0, #1
 8015344:	4604      	mov	r4, r0
 8015346:	d158      	bne.n	80153fa <_malloc_r+0xf6>
 8015348:	f8d8 4000 	ldr.w	r4, [r8]
 801534c:	4627      	mov	r7, r4
 801534e:	2f00      	cmp	r7, #0
 8015350:	d143      	bne.n	80153da <_malloc_r+0xd6>
 8015352:	2c00      	cmp	r4, #0
 8015354:	d04b      	beq.n	80153ee <_malloc_r+0xea>
 8015356:	6823      	ldr	r3, [r4, #0]
 8015358:	4639      	mov	r1, r7
 801535a:	4630      	mov	r0, r6
 801535c:	eb04 0903 	add.w	r9, r4, r3
 8015360:	f000 feec 	bl	801613c <_sbrk_r>
 8015364:	4581      	cmp	r9, r0
 8015366:	d142      	bne.n	80153ee <_malloc_r+0xea>
 8015368:	6821      	ldr	r1, [r4, #0]
 801536a:	1a6d      	subs	r5, r5, r1
 801536c:	4629      	mov	r1, r5
 801536e:	4630      	mov	r0, r6
 8015370:	f7ff ffa6 	bl	80152c0 <sbrk_aligned>
 8015374:	3001      	adds	r0, #1
 8015376:	d03a      	beq.n	80153ee <_malloc_r+0xea>
 8015378:	6823      	ldr	r3, [r4, #0]
 801537a:	442b      	add	r3, r5
 801537c:	6023      	str	r3, [r4, #0]
 801537e:	f8d8 3000 	ldr.w	r3, [r8]
 8015382:	685a      	ldr	r2, [r3, #4]
 8015384:	bb62      	cbnz	r2, 80153e0 <_malloc_r+0xdc>
 8015386:	f8c8 7000 	str.w	r7, [r8]
 801538a:	e00f      	b.n	80153ac <_malloc_r+0xa8>
 801538c:	6822      	ldr	r2, [r4, #0]
 801538e:	1b52      	subs	r2, r2, r5
 8015390:	d420      	bmi.n	80153d4 <_malloc_r+0xd0>
 8015392:	2a0b      	cmp	r2, #11
 8015394:	d917      	bls.n	80153c6 <_malloc_r+0xc2>
 8015396:	1961      	adds	r1, r4, r5
 8015398:	42a3      	cmp	r3, r4
 801539a:	6025      	str	r5, [r4, #0]
 801539c:	bf18      	it	ne
 801539e:	6059      	strne	r1, [r3, #4]
 80153a0:	6863      	ldr	r3, [r4, #4]
 80153a2:	bf08      	it	eq
 80153a4:	f8c8 1000 	streq.w	r1, [r8]
 80153a8:	5162      	str	r2, [r4, r5]
 80153aa:	604b      	str	r3, [r1, #4]
 80153ac:	4630      	mov	r0, r6
 80153ae:	f000 f82f 	bl	8015410 <__malloc_unlock>
 80153b2:	f104 000b 	add.w	r0, r4, #11
 80153b6:	1d23      	adds	r3, r4, #4
 80153b8:	f020 0007 	bic.w	r0, r0, #7
 80153bc:	1ac2      	subs	r2, r0, r3
 80153be:	bf1c      	itt	ne
 80153c0:	1a1b      	subne	r3, r3, r0
 80153c2:	50a3      	strne	r3, [r4, r2]
 80153c4:	e7af      	b.n	8015326 <_malloc_r+0x22>
 80153c6:	6862      	ldr	r2, [r4, #4]
 80153c8:	42a3      	cmp	r3, r4
 80153ca:	bf0c      	ite	eq
 80153cc:	f8c8 2000 	streq.w	r2, [r8]
 80153d0:	605a      	strne	r2, [r3, #4]
 80153d2:	e7eb      	b.n	80153ac <_malloc_r+0xa8>
 80153d4:	4623      	mov	r3, r4
 80153d6:	6864      	ldr	r4, [r4, #4]
 80153d8:	e7ae      	b.n	8015338 <_malloc_r+0x34>
 80153da:	463c      	mov	r4, r7
 80153dc:	687f      	ldr	r7, [r7, #4]
 80153de:	e7b6      	b.n	801534e <_malloc_r+0x4a>
 80153e0:	461a      	mov	r2, r3
 80153e2:	685b      	ldr	r3, [r3, #4]
 80153e4:	42a3      	cmp	r3, r4
 80153e6:	d1fb      	bne.n	80153e0 <_malloc_r+0xdc>
 80153e8:	2300      	movs	r3, #0
 80153ea:	6053      	str	r3, [r2, #4]
 80153ec:	e7de      	b.n	80153ac <_malloc_r+0xa8>
 80153ee:	230c      	movs	r3, #12
 80153f0:	6033      	str	r3, [r6, #0]
 80153f2:	4630      	mov	r0, r6
 80153f4:	f000 f80c 	bl	8015410 <__malloc_unlock>
 80153f8:	e794      	b.n	8015324 <_malloc_r+0x20>
 80153fa:	6005      	str	r5, [r0, #0]
 80153fc:	e7d6      	b.n	80153ac <_malloc_r+0xa8>
 80153fe:	bf00      	nop
 8015400:	20005c14 	.word	0x20005c14

08015404 <__malloc_lock>:
 8015404:	4801      	ldr	r0, [pc, #4]	@ (801540c <__malloc_lock+0x8>)
 8015406:	f7ff bef9 	b.w	80151fc <__retarget_lock_acquire_recursive>
 801540a:	bf00      	nop
 801540c:	20005c0c 	.word	0x20005c0c

08015410 <__malloc_unlock>:
 8015410:	4801      	ldr	r0, [pc, #4]	@ (8015418 <__malloc_unlock+0x8>)
 8015412:	f7ff bef4 	b.w	80151fe <__retarget_lock_release_recursive>
 8015416:	bf00      	nop
 8015418:	20005c0c 	.word	0x20005c0c

0801541c <__ssputs_r>:
 801541c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015420:	688e      	ldr	r6, [r1, #8]
 8015422:	461f      	mov	r7, r3
 8015424:	42be      	cmp	r6, r7
 8015426:	680b      	ldr	r3, [r1, #0]
 8015428:	4682      	mov	sl, r0
 801542a:	460c      	mov	r4, r1
 801542c:	4690      	mov	r8, r2
 801542e:	d82d      	bhi.n	801548c <__ssputs_r+0x70>
 8015430:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015434:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015438:	d026      	beq.n	8015488 <__ssputs_r+0x6c>
 801543a:	6965      	ldr	r5, [r4, #20]
 801543c:	6909      	ldr	r1, [r1, #16]
 801543e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015442:	eba3 0901 	sub.w	r9, r3, r1
 8015446:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801544a:	1c7b      	adds	r3, r7, #1
 801544c:	444b      	add	r3, r9
 801544e:	106d      	asrs	r5, r5, #1
 8015450:	429d      	cmp	r5, r3
 8015452:	bf38      	it	cc
 8015454:	461d      	movcc	r5, r3
 8015456:	0553      	lsls	r3, r2, #21
 8015458:	d527      	bpl.n	80154aa <__ssputs_r+0x8e>
 801545a:	4629      	mov	r1, r5
 801545c:	f7ff ff52 	bl	8015304 <_malloc_r>
 8015460:	4606      	mov	r6, r0
 8015462:	b360      	cbz	r0, 80154be <__ssputs_r+0xa2>
 8015464:	6921      	ldr	r1, [r4, #16]
 8015466:	464a      	mov	r2, r9
 8015468:	f7ff fed2 	bl	8015210 <memcpy>
 801546c:	89a3      	ldrh	r3, [r4, #12]
 801546e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015476:	81a3      	strh	r3, [r4, #12]
 8015478:	6126      	str	r6, [r4, #16]
 801547a:	6165      	str	r5, [r4, #20]
 801547c:	444e      	add	r6, r9
 801547e:	eba5 0509 	sub.w	r5, r5, r9
 8015482:	6026      	str	r6, [r4, #0]
 8015484:	60a5      	str	r5, [r4, #8]
 8015486:	463e      	mov	r6, r7
 8015488:	42be      	cmp	r6, r7
 801548a:	d900      	bls.n	801548e <__ssputs_r+0x72>
 801548c:	463e      	mov	r6, r7
 801548e:	6820      	ldr	r0, [r4, #0]
 8015490:	4632      	mov	r2, r6
 8015492:	4641      	mov	r1, r8
 8015494:	f000 fe37 	bl	8016106 <memmove>
 8015498:	68a3      	ldr	r3, [r4, #8]
 801549a:	1b9b      	subs	r3, r3, r6
 801549c:	60a3      	str	r3, [r4, #8]
 801549e:	6823      	ldr	r3, [r4, #0]
 80154a0:	4433      	add	r3, r6
 80154a2:	6023      	str	r3, [r4, #0]
 80154a4:	2000      	movs	r0, #0
 80154a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154aa:	462a      	mov	r2, r5
 80154ac:	f000 fe56 	bl	801615c <_realloc_r>
 80154b0:	4606      	mov	r6, r0
 80154b2:	2800      	cmp	r0, #0
 80154b4:	d1e0      	bne.n	8015478 <__ssputs_r+0x5c>
 80154b6:	6921      	ldr	r1, [r4, #16]
 80154b8:	4650      	mov	r0, sl
 80154ba:	f7ff feb7 	bl	801522c <_free_r>
 80154be:	230c      	movs	r3, #12
 80154c0:	f8ca 3000 	str.w	r3, [sl]
 80154c4:	89a3      	ldrh	r3, [r4, #12]
 80154c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80154ca:	81a3      	strh	r3, [r4, #12]
 80154cc:	f04f 30ff 	mov.w	r0, #4294967295
 80154d0:	e7e9      	b.n	80154a6 <__ssputs_r+0x8a>
	...

080154d4 <_svfiprintf_r>:
 80154d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154d8:	4698      	mov	r8, r3
 80154da:	898b      	ldrh	r3, [r1, #12]
 80154dc:	061b      	lsls	r3, r3, #24
 80154de:	b09d      	sub	sp, #116	@ 0x74
 80154e0:	4607      	mov	r7, r0
 80154e2:	460d      	mov	r5, r1
 80154e4:	4614      	mov	r4, r2
 80154e6:	d510      	bpl.n	801550a <_svfiprintf_r+0x36>
 80154e8:	690b      	ldr	r3, [r1, #16]
 80154ea:	b973      	cbnz	r3, 801550a <_svfiprintf_r+0x36>
 80154ec:	2140      	movs	r1, #64	@ 0x40
 80154ee:	f7ff ff09 	bl	8015304 <_malloc_r>
 80154f2:	6028      	str	r0, [r5, #0]
 80154f4:	6128      	str	r0, [r5, #16]
 80154f6:	b930      	cbnz	r0, 8015506 <_svfiprintf_r+0x32>
 80154f8:	230c      	movs	r3, #12
 80154fa:	603b      	str	r3, [r7, #0]
 80154fc:	f04f 30ff 	mov.w	r0, #4294967295
 8015500:	b01d      	add	sp, #116	@ 0x74
 8015502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015506:	2340      	movs	r3, #64	@ 0x40
 8015508:	616b      	str	r3, [r5, #20]
 801550a:	2300      	movs	r3, #0
 801550c:	9309      	str	r3, [sp, #36]	@ 0x24
 801550e:	2320      	movs	r3, #32
 8015510:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015514:	f8cd 800c 	str.w	r8, [sp, #12]
 8015518:	2330      	movs	r3, #48	@ 0x30
 801551a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80156b8 <_svfiprintf_r+0x1e4>
 801551e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015522:	f04f 0901 	mov.w	r9, #1
 8015526:	4623      	mov	r3, r4
 8015528:	469a      	mov	sl, r3
 801552a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801552e:	b10a      	cbz	r2, 8015534 <_svfiprintf_r+0x60>
 8015530:	2a25      	cmp	r2, #37	@ 0x25
 8015532:	d1f9      	bne.n	8015528 <_svfiprintf_r+0x54>
 8015534:	ebba 0b04 	subs.w	fp, sl, r4
 8015538:	d00b      	beq.n	8015552 <_svfiprintf_r+0x7e>
 801553a:	465b      	mov	r3, fp
 801553c:	4622      	mov	r2, r4
 801553e:	4629      	mov	r1, r5
 8015540:	4638      	mov	r0, r7
 8015542:	f7ff ff6b 	bl	801541c <__ssputs_r>
 8015546:	3001      	adds	r0, #1
 8015548:	f000 80a7 	beq.w	801569a <_svfiprintf_r+0x1c6>
 801554c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801554e:	445a      	add	r2, fp
 8015550:	9209      	str	r2, [sp, #36]	@ 0x24
 8015552:	f89a 3000 	ldrb.w	r3, [sl]
 8015556:	2b00      	cmp	r3, #0
 8015558:	f000 809f 	beq.w	801569a <_svfiprintf_r+0x1c6>
 801555c:	2300      	movs	r3, #0
 801555e:	f04f 32ff 	mov.w	r2, #4294967295
 8015562:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015566:	f10a 0a01 	add.w	sl, sl, #1
 801556a:	9304      	str	r3, [sp, #16]
 801556c:	9307      	str	r3, [sp, #28]
 801556e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015572:	931a      	str	r3, [sp, #104]	@ 0x68
 8015574:	4654      	mov	r4, sl
 8015576:	2205      	movs	r2, #5
 8015578:	f814 1b01 	ldrb.w	r1, [r4], #1
 801557c:	484e      	ldr	r0, [pc, #312]	@ (80156b8 <_svfiprintf_r+0x1e4>)
 801557e:	f7ea fe3f 	bl	8000200 <memchr>
 8015582:	9a04      	ldr	r2, [sp, #16]
 8015584:	b9d8      	cbnz	r0, 80155be <_svfiprintf_r+0xea>
 8015586:	06d0      	lsls	r0, r2, #27
 8015588:	bf44      	itt	mi
 801558a:	2320      	movmi	r3, #32
 801558c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015590:	0711      	lsls	r1, r2, #28
 8015592:	bf44      	itt	mi
 8015594:	232b      	movmi	r3, #43	@ 0x2b
 8015596:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801559a:	f89a 3000 	ldrb.w	r3, [sl]
 801559e:	2b2a      	cmp	r3, #42	@ 0x2a
 80155a0:	d015      	beq.n	80155ce <_svfiprintf_r+0xfa>
 80155a2:	9a07      	ldr	r2, [sp, #28]
 80155a4:	4654      	mov	r4, sl
 80155a6:	2000      	movs	r0, #0
 80155a8:	f04f 0c0a 	mov.w	ip, #10
 80155ac:	4621      	mov	r1, r4
 80155ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80155b2:	3b30      	subs	r3, #48	@ 0x30
 80155b4:	2b09      	cmp	r3, #9
 80155b6:	d94b      	bls.n	8015650 <_svfiprintf_r+0x17c>
 80155b8:	b1b0      	cbz	r0, 80155e8 <_svfiprintf_r+0x114>
 80155ba:	9207      	str	r2, [sp, #28]
 80155bc:	e014      	b.n	80155e8 <_svfiprintf_r+0x114>
 80155be:	eba0 0308 	sub.w	r3, r0, r8
 80155c2:	fa09 f303 	lsl.w	r3, r9, r3
 80155c6:	4313      	orrs	r3, r2
 80155c8:	9304      	str	r3, [sp, #16]
 80155ca:	46a2      	mov	sl, r4
 80155cc:	e7d2      	b.n	8015574 <_svfiprintf_r+0xa0>
 80155ce:	9b03      	ldr	r3, [sp, #12]
 80155d0:	1d19      	adds	r1, r3, #4
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	9103      	str	r1, [sp, #12]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	bfbb      	ittet	lt
 80155da:	425b      	neglt	r3, r3
 80155dc:	f042 0202 	orrlt.w	r2, r2, #2
 80155e0:	9307      	strge	r3, [sp, #28]
 80155e2:	9307      	strlt	r3, [sp, #28]
 80155e4:	bfb8      	it	lt
 80155e6:	9204      	strlt	r2, [sp, #16]
 80155e8:	7823      	ldrb	r3, [r4, #0]
 80155ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80155ec:	d10a      	bne.n	8015604 <_svfiprintf_r+0x130>
 80155ee:	7863      	ldrb	r3, [r4, #1]
 80155f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80155f2:	d132      	bne.n	801565a <_svfiprintf_r+0x186>
 80155f4:	9b03      	ldr	r3, [sp, #12]
 80155f6:	1d1a      	adds	r2, r3, #4
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	9203      	str	r2, [sp, #12]
 80155fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015600:	3402      	adds	r4, #2
 8015602:	9305      	str	r3, [sp, #20]
 8015604:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80156c8 <_svfiprintf_r+0x1f4>
 8015608:	7821      	ldrb	r1, [r4, #0]
 801560a:	2203      	movs	r2, #3
 801560c:	4650      	mov	r0, sl
 801560e:	f7ea fdf7 	bl	8000200 <memchr>
 8015612:	b138      	cbz	r0, 8015624 <_svfiprintf_r+0x150>
 8015614:	9b04      	ldr	r3, [sp, #16]
 8015616:	eba0 000a 	sub.w	r0, r0, sl
 801561a:	2240      	movs	r2, #64	@ 0x40
 801561c:	4082      	lsls	r2, r0
 801561e:	4313      	orrs	r3, r2
 8015620:	3401      	adds	r4, #1
 8015622:	9304      	str	r3, [sp, #16]
 8015624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015628:	4824      	ldr	r0, [pc, #144]	@ (80156bc <_svfiprintf_r+0x1e8>)
 801562a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801562e:	2206      	movs	r2, #6
 8015630:	f7ea fde6 	bl	8000200 <memchr>
 8015634:	2800      	cmp	r0, #0
 8015636:	d036      	beq.n	80156a6 <_svfiprintf_r+0x1d2>
 8015638:	4b21      	ldr	r3, [pc, #132]	@ (80156c0 <_svfiprintf_r+0x1ec>)
 801563a:	bb1b      	cbnz	r3, 8015684 <_svfiprintf_r+0x1b0>
 801563c:	9b03      	ldr	r3, [sp, #12]
 801563e:	3307      	adds	r3, #7
 8015640:	f023 0307 	bic.w	r3, r3, #7
 8015644:	3308      	adds	r3, #8
 8015646:	9303      	str	r3, [sp, #12]
 8015648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801564a:	4433      	add	r3, r6
 801564c:	9309      	str	r3, [sp, #36]	@ 0x24
 801564e:	e76a      	b.n	8015526 <_svfiprintf_r+0x52>
 8015650:	fb0c 3202 	mla	r2, ip, r2, r3
 8015654:	460c      	mov	r4, r1
 8015656:	2001      	movs	r0, #1
 8015658:	e7a8      	b.n	80155ac <_svfiprintf_r+0xd8>
 801565a:	2300      	movs	r3, #0
 801565c:	3401      	adds	r4, #1
 801565e:	9305      	str	r3, [sp, #20]
 8015660:	4619      	mov	r1, r3
 8015662:	f04f 0c0a 	mov.w	ip, #10
 8015666:	4620      	mov	r0, r4
 8015668:	f810 2b01 	ldrb.w	r2, [r0], #1
 801566c:	3a30      	subs	r2, #48	@ 0x30
 801566e:	2a09      	cmp	r2, #9
 8015670:	d903      	bls.n	801567a <_svfiprintf_r+0x1a6>
 8015672:	2b00      	cmp	r3, #0
 8015674:	d0c6      	beq.n	8015604 <_svfiprintf_r+0x130>
 8015676:	9105      	str	r1, [sp, #20]
 8015678:	e7c4      	b.n	8015604 <_svfiprintf_r+0x130>
 801567a:	fb0c 2101 	mla	r1, ip, r1, r2
 801567e:	4604      	mov	r4, r0
 8015680:	2301      	movs	r3, #1
 8015682:	e7f0      	b.n	8015666 <_svfiprintf_r+0x192>
 8015684:	ab03      	add	r3, sp, #12
 8015686:	9300      	str	r3, [sp, #0]
 8015688:	462a      	mov	r2, r5
 801568a:	4b0e      	ldr	r3, [pc, #56]	@ (80156c4 <_svfiprintf_r+0x1f0>)
 801568c:	a904      	add	r1, sp, #16
 801568e:	4638      	mov	r0, r7
 8015690:	f3af 8000 	nop.w
 8015694:	1c42      	adds	r2, r0, #1
 8015696:	4606      	mov	r6, r0
 8015698:	d1d6      	bne.n	8015648 <_svfiprintf_r+0x174>
 801569a:	89ab      	ldrh	r3, [r5, #12]
 801569c:	065b      	lsls	r3, r3, #25
 801569e:	f53f af2d 	bmi.w	80154fc <_svfiprintf_r+0x28>
 80156a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80156a4:	e72c      	b.n	8015500 <_svfiprintf_r+0x2c>
 80156a6:	ab03      	add	r3, sp, #12
 80156a8:	9300      	str	r3, [sp, #0]
 80156aa:	462a      	mov	r2, r5
 80156ac:	4b05      	ldr	r3, [pc, #20]	@ (80156c4 <_svfiprintf_r+0x1f0>)
 80156ae:	a904      	add	r1, sp, #16
 80156b0:	4638      	mov	r0, r7
 80156b2:	f000 fa49 	bl	8015b48 <_printf_i>
 80156b6:	e7ed      	b.n	8015694 <_svfiprintf_r+0x1c0>
 80156b8:	080169f7 	.word	0x080169f7
 80156bc:	08016a01 	.word	0x08016a01
 80156c0:	00000000 	.word	0x00000000
 80156c4:	0801541d 	.word	0x0801541d
 80156c8:	080169fd 	.word	0x080169fd

080156cc <_sungetc_r>:
 80156cc:	b538      	push	{r3, r4, r5, lr}
 80156ce:	1c4b      	adds	r3, r1, #1
 80156d0:	4614      	mov	r4, r2
 80156d2:	d103      	bne.n	80156dc <_sungetc_r+0x10>
 80156d4:	f04f 35ff 	mov.w	r5, #4294967295
 80156d8:	4628      	mov	r0, r5
 80156da:	bd38      	pop	{r3, r4, r5, pc}
 80156dc:	8993      	ldrh	r3, [r2, #12]
 80156de:	f023 0320 	bic.w	r3, r3, #32
 80156e2:	8193      	strh	r3, [r2, #12]
 80156e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80156e6:	6852      	ldr	r2, [r2, #4]
 80156e8:	b2cd      	uxtb	r5, r1
 80156ea:	b18b      	cbz	r3, 8015710 <_sungetc_r+0x44>
 80156ec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80156ee:	4293      	cmp	r3, r2
 80156f0:	dd08      	ble.n	8015704 <_sungetc_r+0x38>
 80156f2:	6823      	ldr	r3, [r4, #0]
 80156f4:	1e5a      	subs	r2, r3, #1
 80156f6:	6022      	str	r2, [r4, #0]
 80156f8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80156fc:	6863      	ldr	r3, [r4, #4]
 80156fe:	3301      	adds	r3, #1
 8015700:	6063      	str	r3, [r4, #4]
 8015702:	e7e9      	b.n	80156d8 <_sungetc_r+0xc>
 8015704:	4621      	mov	r1, r4
 8015706:	f000 fcc4 	bl	8016092 <__submore>
 801570a:	2800      	cmp	r0, #0
 801570c:	d0f1      	beq.n	80156f2 <_sungetc_r+0x26>
 801570e:	e7e1      	b.n	80156d4 <_sungetc_r+0x8>
 8015710:	6921      	ldr	r1, [r4, #16]
 8015712:	6823      	ldr	r3, [r4, #0]
 8015714:	b151      	cbz	r1, 801572c <_sungetc_r+0x60>
 8015716:	4299      	cmp	r1, r3
 8015718:	d208      	bcs.n	801572c <_sungetc_r+0x60>
 801571a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801571e:	42a9      	cmp	r1, r5
 8015720:	d104      	bne.n	801572c <_sungetc_r+0x60>
 8015722:	3b01      	subs	r3, #1
 8015724:	3201      	adds	r2, #1
 8015726:	6023      	str	r3, [r4, #0]
 8015728:	6062      	str	r2, [r4, #4]
 801572a:	e7d5      	b.n	80156d8 <_sungetc_r+0xc>
 801572c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8015730:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015734:	6363      	str	r3, [r4, #52]	@ 0x34
 8015736:	2303      	movs	r3, #3
 8015738:	63a3      	str	r3, [r4, #56]	@ 0x38
 801573a:	4623      	mov	r3, r4
 801573c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8015740:	6023      	str	r3, [r4, #0]
 8015742:	2301      	movs	r3, #1
 8015744:	e7dc      	b.n	8015700 <_sungetc_r+0x34>

08015746 <__ssrefill_r>:
 8015746:	b510      	push	{r4, lr}
 8015748:	460c      	mov	r4, r1
 801574a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801574c:	b169      	cbz	r1, 801576a <__ssrefill_r+0x24>
 801574e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015752:	4299      	cmp	r1, r3
 8015754:	d001      	beq.n	801575a <__ssrefill_r+0x14>
 8015756:	f7ff fd69 	bl	801522c <_free_r>
 801575a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801575c:	6063      	str	r3, [r4, #4]
 801575e:	2000      	movs	r0, #0
 8015760:	6360      	str	r0, [r4, #52]	@ 0x34
 8015762:	b113      	cbz	r3, 801576a <__ssrefill_r+0x24>
 8015764:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8015766:	6023      	str	r3, [r4, #0]
 8015768:	bd10      	pop	{r4, pc}
 801576a:	6923      	ldr	r3, [r4, #16]
 801576c:	6023      	str	r3, [r4, #0]
 801576e:	2300      	movs	r3, #0
 8015770:	6063      	str	r3, [r4, #4]
 8015772:	89a3      	ldrh	r3, [r4, #12]
 8015774:	f043 0320 	orr.w	r3, r3, #32
 8015778:	81a3      	strh	r3, [r4, #12]
 801577a:	f04f 30ff 	mov.w	r0, #4294967295
 801577e:	e7f3      	b.n	8015768 <__ssrefill_r+0x22>

08015780 <__ssvfiscanf_r>:
 8015780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015784:	460c      	mov	r4, r1
 8015786:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801578a:	2100      	movs	r1, #0
 801578c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8015790:	49a6      	ldr	r1, [pc, #664]	@ (8015a2c <__ssvfiscanf_r+0x2ac>)
 8015792:	91a0      	str	r1, [sp, #640]	@ 0x280
 8015794:	f10d 0804 	add.w	r8, sp, #4
 8015798:	49a5      	ldr	r1, [pc, #660]	@ (8015a30 <__ssvfiscanf_r+0x2b0>)
 801579a:	4fa6      	ldr	r7, [pc, #664]	@ (8015a34 <__ssvfiscanf_r+0x2b4>)
 801579c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80157a0:	4606      	mov	r6, r0
 80157a2:	91a1      	str	r1, [sp, #644]	@ 0x284
 80157a4:	9300      	str	r3, [sp, #0]
 80157a6:	f892 9000 	ldrb.w	r9, [r2]
 80157aa:	f1b9 0f00 	cmp.w	r9, #0
 80157ae:	f000 8158 	beq.w	8015a62 <__ssvfiscanf_r+0x2e2>
 80157b2:	f817 3009 	ldrb.w	r3, [r7, r9]
 80157b6:	f013 0308 	ands.w	r3, r3, #8
 80157ba:	f102 0501 	add.w	r5, r2, #1
 80157be:	d019      	beq.n	80157f4 <__ssvfiscanf_r+0x74>
 80157c0:	6863      	ldr	r3, [r4, #4]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	dd0f      	ble.n	80157e6 <__ssvfiscanf_r+0x66>
 80157c6:	6823      	ldr	r3, [r4, #0]
 80157c8:	781a      	ldrb	r2, [r3, #0]
 80157ca:	5cba      	ldrb	r2, [r7, r2]
 80157cc:	0712      	lsls	r2, r2, #28
 80157ce:	d401      	bmi.n	80157d4 <__ssvfiscanf_r+0x54>
 80157d0:	462a      	mov	r2, r5
 80157d2:	e7e8      	b.n	80157a6 <__ssvfiscanf_r+0x26>
 80157d4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80157d6:	3201      	adds	r2, #1
 80157d8:	9245      	str	r2, [sp, #276]	@ 0x114
 80157da:	6862      	ldr	r2, [r4, #4]
 80157dc:	3301      	adds	r3, #1
 80157de:	3a01      	subs	r2, #1
 80157e0:	6062      	str	r2, [r4, #4]
 80157e2:	6023      	str	r3, [r4, #0]
 80157e4:	e7ec      	b.n	80157c0 <__ssvfiscanf_r+0x40>
 80157e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80157e8:	4621      	mov	r1, r4
 80157ea:	4630      	mov	r0, r6
 80157ec:	4798      	blx	r3
 80157ee:	2800      	cmp	r0, #0
 80157f0:	d0e9      	beq.n	80157c6 <__ssvfiscanf_r+0x46>
 80157f2:	e7ed      	b.n	80157d0 <__ssvfiscanf_r+0x50>
 80157f4:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80157f8:	f040 8085 	bne.w	8015906 <__ssvfiscanf_r+0x186>
 80157fc:	9341      	str	r3, [sp, #260]	@ 0x104
 80157fe:	9343      	str	r3, [sp, #268]	@ 0x10c
 8015800:	7853      	ldrb	r3, [r2, #1]
 8015802:	2b2a      	cmp	r3, #42	@ 0x2a
 8015804:	bf02      	ittt	eq
 8015806:	2310      	moveq	r3, #16
 8015808:	1c95      	addeq	r5, r2, #2
 801580a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801580c:	220a      	movs	r2, #10
 801580e:	46aa      	mov	sl, r5
 8015810:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8015814:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8015818:	2b09      	cmp	r3, #9
 801581a:	d91e      	bls.n	801585a <__ssvfiscanf_r+0xda>
 801581c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8015a38 <__ssvfiscanf_r+0x2b8>
 8015820:	2203      	movs	r2, #3
 8015822:	4658      	mov	r0, fp
 8015824:	f7ea fcec 	bl	8000200 <memchr>
 8015828:	b138      	cbz	r0, 801583a <__ssvfiscanf_r+0xba>
 801582a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801582c:	eba0 000b 	sub.w	r0, r0, fp
 8015830:	2301      	movs	r3, #1
 8015832:	4083      	lsls	r3, r0
 8015834:	4313      	orrs	r3, r2
 8015836:	9341      	str	r3, [sp, #260]	@ 0x104
 8015838:	4655      	mov	r5, sl
 801583a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801583e:	2b78      	cmp	r3, #120	@ 0x78
 8015840:	d806      	bhi.n	8015850 <__ssvfiscanf_r+0xd0>
 8015842:	2b57      	cmp	r3, #87	@ 0x57
 8015844:	d810      	bhi.n	8015868 <__ssvfiscanf_r+0xe8>
 8015846:	2b25      	cmp	r3, #37	@ 0x25
 8015848:	d05d      	beq.n	8015906 <__ssvfiscanf_r+0x186>
 801584a:	d857      	bhi.n	80158fc <__ssvfiscanf_r+0x17c>
 801584c:	2b00      	cmp	r3, #0
 801584e:	d075      	beq.n	801593c <__ssvfiscanf_r+0x1bc>
 8015850:	2303      	movs	r3, #3
 8015852:	9347      	str	r3, [sp, #284]	@ 0x11c
 8015854:	230a      	movs	r3, #10
 8015856:	9342      	str	r3, [sp, #264]	@ 0x108
 8015858:	e088      	b.n	801596c <__ssvfiscanf_r+0x1ec>
 801585a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801585c:	fb02 1103 	mla	r1, r2, r3, r1
 8015860:	3930      	subs	r1, #48	@ 0x30
 8015862:	9143      	str	r1, [sp, #268]	@ 0x10c
 8015864:	4655      	mov	r5, sl
 8015866:	e7d2      	b.n	801580e <__ssvfiscanf_r+0x8e>
 8015868:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801586c:	2a20      	cmp	r2, #32
 801586e:	d8ef      	bhi.n	8015850 <__ssvfiscanf_r+0xd0>
 8015870:	a101      	add	r1, pc, #4	@ (adr r1, 8015878 <__ssvfiscanf_r+0xf8>)
 8015872:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015876:	bf00      	nop
 8015878:	0801594b 	.word	0x0801594b
 801587c:	08015851 	.word	0x08015851
 8015880:	08015851 	.word	0x08015851
 8015884:	080159a5 	.word	0x080159a5
 8015888:	08015851 	.word	0x08015851
 801588c:	08015851 	.word	0x08015851
 8015890:	08015851 	.word	0x08015851
 8015894:	08015851 	.word	0x08015851
 8015898:	08015851 	.word	0x08015851
 801589c:	08015851 	.word	0x08015851
 80158a0:	08015851 	.word	0x08015851
 80158a4:	080159bb 	.word	0x080159bb
 80158a8:	080159a1 	.word	0x080159a1
 80158ac:	08015903 	.word	0x08015903
 80158b0:	08015903 	.word	0x08015903
 80158b4:	08015903 	.word	0x08015903
 80158b8:	08015851 	.word	0x08015851
 80158bc:	0801595d 	.word	0x0801595d
 80158c0:	08015851 	.word	0x08015851
 80158c4:	08015851 	.word	0x08015851
 80158c8:	08015851 	.word	0x08015851
 80158cc:	08015851 	.word	0x08015851
 80158d0:	080159cb 	.word	0x080159cb
 80158d4:	08015965 	.word	0x08015965
 80158d8:	08015943 	.word	0x08015943
 80158dc:	08015851 	.word	0x08015851
 80158e0:	08015851 	.word	0x08015851
 80158e4:	080159c7 	.word	0x080159c7
 80158e8:	08015851 	.word	0x08015851
 80158ec:	080159a1 	.word	0x080159a1
 80158f0:	08015851 	.word	0x08015851
 80158f4:	08015851 	.word	0x08015851
 80158f8:	0801594b 	.word	0x0801594b
 80158fc:	3b45      	subs	r3, #69	@ 0x45
 80158fe:	2b02      	cmp	r3, #2
 8015900:	d8a6      	bhi.n	8015850 <__ssvfiscanf_r+0xd0>
 8015902:	2305      	movs	r3, #5
 8015904:	e031      	b.n	801596a <__ssvfiscanf_r+0x1ea>
 8015906:	6863      	ldr	r3, [r4, #4]
 8015908:	2b00      	cmp	r3, #0
 801590a:	dd0d      	ble.n	8015928 <__ssvfiscanf_r+0x1a8>
 801590c:	6823      	ldr	r3, [r4, #0]
 801590e:	781a      	ldrb	r2, [r3, #0]
 8015910:	454a      	cmp	r2, r9
 8015912:	f040 80a6 	bne.w	8015a62 <__ssvfiscanf_r+0x2e2>
 8015916:	3301      	adds	r3, #1
 8015918:	6862      	ldr	r2, [r4, #4]
 801591a:	6023      	str	r3, [r4, #0]
 801591c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801591e:	3a01      	subs	r2, #1
 8015920:	3301      	adds	r3, #1
 8015922:	6062      	str	r2, [r4, #4]
 8015924:	9345      	str	r3, [sp, #276]	@ 0x114
 8015926:	e753      	b.n	80157d0 <__ssvfiscanf_r+0x50>
 8015928:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801592a:	4621      	mov	r1, r4
 801592c:	4630      	mov	r0, r6
 801592e:	4798      	blx	r3
 8015930:	2800      	cmp	r0, #0
 8015932:	d0eb      	beq.n	801590c <__ssvfiscanf_r+0x18c>
 8015934:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8015936:	2800      	cmp	r0, #0
 8015938:	f040 808b 	bne.w	8015a52 <__ssvfiscanf_r+0x2d2>
 801593c:	f04f 30ff 	mov.w	r0, #4294967295
 8015940:	e08b      	b.n	8015a5a <__ssvfiscanf_r+0x2da>
 8015942:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8015944:	f042 0220 	orr.w	r2, r2, #32
 8015948:	9241      	str	r2, [sp, #260]	@ 0x104
 801594a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801594c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015950:	9241      	str	r2, [sp, #260]	@ 0x104
 8015952:	2210      	movs	r2, #16
 8015954:	2b6e      	cmp	r3, #110	@ 0x6e
 8015956:	9242      	str	r2, [sp, #264]	@ 0x108
 8015958:	d902      	bls.n	8015960 <__ssvfiscanf_r+0x1e0>
 801595a:	e005      	b.n	8015968 <__ssvfiscanf_r+0x1e8>
 801595c:	2300      	movs	r3, #0
 801595e:	9342      	str	r3, [sp, #264]	@ 0x108
 8015960:	2303      	movs	r3, #3
 8015962:	e002      	b.n	801596a <__ssvfiscanf_r+0x1ea>
 8015964:	2308      	movs	r3, #8
 8015966:	9342      	str	r3, [sp, #264]	@ 0x108
 8015968:	2304      	movs	r3, #4
 801596a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801596c:	6863      	ldr	r3, [r4, #4]
 801596e:	2b00      	cmp	r3, #0
 8015970:	dd39      	ble.n	80159e6 <__ssvfiscanf_r+0x266>
 8015972:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8015974:	0659      	lsls	r1, r3, #25
 8015976:	d404      	bmi.n	8015982 <__ssvfiscanf_r+0x202>
 8015978:	6823      	ldr	r3, [r4, #0]
 801597a:	781a      	ldrb	r2, [r3, #0]
 801597c:	5cba      	ldrb	r2, [r7, r2]
 801597e:	0712      	lsls	r2, r2, #28
 8015980:	d438      	bmi.n	80159f4 <__ssvfiscanf_r+0x274>
 8015982:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8015984:	2b02      	cmp	r3, #2
 8015986:	dc47      	bgt.n	8015a18 <__ssvfiscanf_r+0x298>
 8015988:	466b      	mov	r3, sp
 801598a:	4622      	mov	r2, r4
 801598c:	a941      	add	r1, sp, #260	@ 0x104
 801598e:	4630      	mov	r0, r6
 8015990:	f000 f9f8 	bl	8015d84 <_scanf_chars>
 8015994:	2801      	cmp	r0, #1
 8015996:	d064      	beq.n	8015a62 <__ssvfiscanf_r+0x2e2>
 8015998:	2802      	cmp	r0, #2
 801599a:	f47f af19 	bne.w	80157d0 <__ssvfiscanf_r+0x50>
 801599e:	e7c9      	b.n	8015934 <__ssvfiscanf_r+0x1b4>
 80159a0:	220a      	movs	r2, #10
 80159a2:	e7d7      	b.n	8015954 <__ssvfiscanf_r+0x1d4>
 80159a4:	4629      	mov	r1, r5
 80159a6:	4640      	mov	r0, r8
 80159a8:	f000 fb3a 	bl	8016020 <__sccl>
 80159ac:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80159ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80159b2:	9341      	str	r3, [sp, #260]	@ 0x104
 80159b4:	4605      	mov	r5, r0
 80159b6:	2301      	movs	r3, #1
 80159b8:	e7d7      	b.n	801596a <__ssvfiscanf_r+0x1ea>
 80159ba:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80159bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80159c0:	9341      	str	r3, [sp, #260]	@ 0x104
 80159c2:	2300      	movs	r3, #0
 80159c4:	e7d1      	b.n	801596a <__ssvfiscanf_r+0x1ea>
 80159c6:	2302      	movs	r3, #2
 80159c8:	e7cf      	b.n	801596a <__ssvfiscanf_r+0x1ea>
 80159ca:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80159cc:	06c3      	lsls	r3, r0, #27
 80159ce:	f53f aeff 	bmi.w	80157d0 <__ssvfiscanf_r+0x50>
 80159d2:	9b00      	ldr	r3, [sp, #0]
 80159d4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80159d6:	1d19      	adds	r1, r3, #4
 80159d8:	9100      	str	r1, [sp, #0]
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	07c0      	lsls	r0, r0, #31
 80159de:	bf4c      	ite	mi
 80159e0:	801a      	strhmi	r2, [r3, #0]
 80159e2:	601a      	strpl	r2, [r3, #0]
 80159e4:	e6f4      	b.n	80157d0 <__ssvfiscanf_r+0x50>
 80159e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80159e8:	4621      	mov	r1, r4
 80159ea:	4630      	mov	r0, r6
 80159ec:	4798      	blx	r3
 80159ee:	2800      	cmp	r0, #0
 80159f0:	d0bf      	beq.n	8015972 <__ssvfiscanf_r+0x1f2>
 80159f2:	e79f      	b.n	8015934 <__ssvfiscanf_r+0x1b4>
 80159f4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80159f6:	3201      	adds	r2, #1
 80159f8:	9245      	str	r2, [sp, #276]	@ 0x114
 80159fa:	6862      	ldr	r2, [r4, #4]
 80159fc:	3a01      	subs	r2, #1
 80159fe:	2a00      	cmp	r2, #0
 8015a00:	6062      	str	r2, [r4, #4]
 8015a02:	dd02      	ble.n	8015a0a <__ssvfiscanf_r+0x28a>
 8015a04:	3301      	adds	r3, #1
 8015a06:	6023      	str	r3, [r4, #0]
 8015a08:	e7b6      	b.n	8015978 <__ssvfiscanf_r+0x1f8>
 8015a0a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8015a0c:	4621      	mov	r1, r4
 8015a0e:	4630      	mov	r0, r6
 8015a10:	4798      	blx	r3
 8015a12:	2800      	cmp	r0, #0
 8015a14:	d0b0      	beq.n	8015978 <__ssvfiscanf_r+0x1f8>
 8015a16:	e78d      	b.n	8015934 <__ssvfiscanf_r+0x1b4>
 8015a18:	2b04      	cmp	r3, #4
 8015a1a:	dc0f      	bgt.n	8015a3c <__ssvfiscanf_r+0x2bc>
 8015a1c:	466b      	mov	r3, sp
 8015a1e:	4622      	mov	r2, r4
 8015a20:	a941      	add	r1, sp, #260	@ 0x104
 8015a22:	4630      	mov	r0, r6
 8015a24:	f000 fa08 	bl	8015e38 <_scanf_i>
 8015a28:	e7b4      	b.n	8015994 <__ssvfiscanf_r+0x214>
 8015a2a:	bf00      	nop
 8015a2c:	080156cd 	.word	0x080156cd
 8015a30:	08015747 	.word	0x08015747
 8015a34:	080168f7 	.word	0x080168f7
 8015a38:	080169fd 	.word	0x080169fd
 8015a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8015a68 <__ssvfiscanf_r+0x2e8>)
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	f43f aec6 	beq.w	80157d0 <__ssvfiscanf_r+0x50>
 8015a44:	466b      	mov	r3, sp
 8015a46:	4622      	mov	r2, r4
 8015a48:	a941      	add	r1, sp, #260	@ 0x104
 8015a4a:	4630      	mov	r0, r6
 8015a4c:	f3af 8000 	nop.w
 8015a50:	e7a0      	b.n	8015994 <__ssvfiscanf_r+0x214>
 8015a52:	89a3      	ldrh	r3, [r4, #12]
 8015a54:	065b      	lsls	r3, r3, #25
 8015a56:	f53f af71 	bmi.w	801593c <__ssvfiscanf_r+0x1bc>
 8015a5a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8015a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a62:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8015a64:	e7f9      	b.n	8015a5a <__ssvfiscanf_r+0x2da>
 8015a66:	bf00      	nop
 8015a68:	00000000 	.word	0x00000000

08015a6c <_printf_common>:
 8015a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a70:	4616      	mov	r6, r2
 8015a72:	4698      	mov	r8, r3
 8015a74:	688a      	ldr	r2, [r1, #8]
 8015a76:	690b      	ldr	r3, [r1, #16]
 8015a78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015a7c:	4293      	cmp	r3, r2
 8015a7e:	bfb8      	it	lt
 8015a80:	4613      	movlt	r3, r2
 8015a82:	6033      	str	r3, [r6, #0]
 8015a84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015a88:	4607      	mov	r7, r0
 8015a8a:	460c      	mov	r4, r1
 8015a8c:	b10a      	cbz	r2, 8015a92 <_printf_common+0x26>
 8015a8e:	3301      	adds	r3, #1
 8015a90:	6033      	str	r3, [r6, #0]
 8015a92:	6823      	ldr	r3, [r4, #0]
 8015a94:	0699      	lsls	r1, r3, #26
 8015a96:	bf42      	ittt	mi
 8015a98:	6833      	ldrmi	r3, [r6, #0]
 8015a9a:	3302      	addmi	r3, #2
 8015a9c:	6033      	strmi	r3, [r6, #0]
 8015a9e:	6825      	ldr	r5, [r4, #0]
 8015aa0:	f015 0506 	ands.w	r5, r5, #6
 8015aa4:	d106      	bne.n	8015ab4 <_printf_common+0x48>
 8015aa6:	f104 0a19 	add.w	sl, r4, #25
 8015aaa:	68e3      	ldr	r3, [r4, #12]
 8015aac:	6832      	ldr	r2, [r6, #0]
 8015aae:	1a9b      	subs	r3, r3, r2
 8015ab0:	42ab      	cmp	r3, r5
 8015ab2:	dc26      	bgt.n	8015b02 <_printf_common+0x96>
 8015ab4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015ab8:	6822      	ldr	r2, [r4, #0]
 8015aba:	3b00      	subs	r3, #0
 8015abc:	bf18      	it	ne
 8015abe:	2301      	movne	r3, #1
 8015ac0:	0692      	lsls	r2, r2, #26
 8015ac2:	d42b      	bmi.n	8015b1c <_printf_common+0xb0>
 8015ac4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015ac8:	4641      	mov	r1, r8
 8015aca:	4638      	mov	r0, r7
 8015acc:	47c8      	blx	r9
 8015ace:	3001      	adds	r0, #1
 8015ad0:	d01e      	beq.n	8015b10 <_printf_common+0xa4>
 8015ad2:	6823      	ldr	r3, [r4, #0]
 8015ad4:	6922      	ldr	r2, [r4, #16]
 8015ad6:	f003 0306 	and.w	r3, r3, #6
 8015ada:	2b04      	cmp	r3, #4
 8015adc:	bf02      	ittt	eq
 8015ade:	68e5      	ldreq	r5, [r4, #12]
 8015ae0:	6833      	ldreq	r3, [r6, #0]
 8015ae2:	1aed      	subeq	r5, r5, r3
 8015ae4:	68a3      	ldr	r3, [r4, #8]
 8015ae6:	bf0c      	ite	eq
 8015ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015aec:	2500      	movne	r5, #0
 8015aee:	4293      	cmp	r3, r2
 8015af0:	bfc4      	itt	gt
 8015af2:	1a9b      	subgt	r3, r3, r2
 8015af4:	18ed      	addgt	r5, r5, r3
 8015af6:	2600      	movs	r6, #0
 8015af8:	341a      	adds	r4, #26
 8015afa:	42b5      	cmp	r5, r6
 8015afc:	d11a      	bne.n	8015b34 <_printf_common+0xc8>
 8015afe:	2000      	movs	r0, #0
 8015b00:	e008      	b.n	8015b14 <_printf_common+0xa8>
 8015b02:	2301      	movs	r3, #1
 8015b04:	4652      	mov	r2, sl
 8015b06:	4641      	mov	r1, r8
 8015b08:	4638      	mov	r0, r7
 8015b0a:	47c8      	blx	r9
 8015b0c:	3001      	adds	r0, #1
 8015b0e:	d103      	bne.n	8015b18 <_printf_common+0xac>
 8015b10:	f04f 30ff 	mov.w	r0, #4294967295
 8015b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b18:	3501      	adds	r5, #1
 8015b1a:	e7c6      	b.n	8015aaa <_printf_common+0x3e>
 8015b1c:	18e1      	adds	r1, r4, r3
 8015b1e:	1c5a      	adds	r2, r3, #1
 8015b20:	2030      	movs	r0, #48	@ 0x30
 8015b22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015b26:	4422      	add	r2, r4
 8015b28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015b2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015b30:	3302      	adds	r3, #2
 8015b32:	e7c7      	b.n	8015ac4 <_printf_common+0x58>
 8015b34:	2301      	movs	r3, #1
 8015b36:	4622      	mov	r2, r4
 8015b38:	4641      	mov	r1, r8
 8015b3a:	4638      	mov	r0, r7
 8015b3c:	47c8      	blx	r9
 8015b3e:	3001      	adds	r0, #1
 8015b40:	d0e6      	beq.n	8015b10 <_printf_common+0xa4>
 8015b42:	3601      	adds	r6, #1
 8015b44:	e7d9      	b.n	8015afa <_printf_common+0x8e>
	...

08015b48 <_printf_i>:
 8015b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015b4c:	7e0f      	ldrb	r7, [r1, #24]
 8015b4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015b50:	2f78      	cmp	r7, #120	@ 0x78
 8015b52:	4691      	mov	r9, r2
 8015b54:	4680      	mov	r8, r0
 8015b56:	460c      	mov	r4, r1
 8015b58:	469a      	mov	sl, r3
 8015b5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015b5e:	d807      	bhi.n	8015b70 <_printf_i+0x28>
 8015b60:	2f62      	cmp	r7, #98	@ 0x62
 8015b62:	d80a      	bhi.n	8015b7a <_printf_i+0x32>
 8015b64:	2f00      	cmp	r7, #0
 8015b66:	f000 80d1 	beq.w	8015d0c <_printf_i+0x1c4>
 8015b6a:	2f58      	cmp	r7, #88	@ 0x58
 8015b6c:	f000 80b8 	beq.w	8015ce0 <_printf_i+0x198>
 8015b70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015b74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015b78:	e03a      	b.n	8015bf0 <_printf_i+0xa8>
 8015b7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015b7e:	2b15      	cmp	r3, #21
 8015b80:	d8f6      	bhi.n	8015b70 <_printf_i+0x28>
 8015b82:	a101      	add	r1, pc, #4	@ (adr r1, 8015b88 <_printf_i+0x40>)
 8015b84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015b88:	08015be1 	.word	0x08015be1
 8015b8c:	08015bf5 	.word	0x08015bf5
 8015b90:	08015b71 	.word	0x08015b71
 8015b94:	08015b71 	.word	0x08015b71
 8015b98:	08015b71 	.word	0x08015b71
 8015b9c:	08015b71 	.word	0x08015b71
 8015ba0:	08015bf5 	.word	0x08015bf5
 8015ba4:	08015b71 	.word	0x08015b71
 8015ba8:	08015b71 	.word	0x08015b71
 8015bac:	08015b71 	.word	0x08015b71
 8015bb0:	08015b71 	.word	0x08015b71
 8015bb4:	08015cf3 	.word	0x08015cf3
 8015bb8:	08015c1f 	.word	0x08015c1f
 8015bbc:	08015cad 	.word	0x08015cad
 8015bc0:	08015b71 	.word	0x08015b71
 8015bc4:	08015b71 	.word	0x08015b71
 8015bc8:	08015d15 	.word	0x08015d15
 8015bcc:	08015b71 	.word	0x08015b71
 8015bd0:	08015c1f 	.word	0x08015c1f
 8015bd4:	08015b71 	.word	0x08015b71
 8015bd8:	08015b71 	.word	0x08015b71
 8015bdc:	08015cb5 	.word	0x08015cb5
 8015be0:	6833      	ldr	r3, [r6, #0]
 8015be2:	1d1a      	adds	r2, r3, #4
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	6032      	str	r2, [r6, #0]
 8015be8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015bec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015bf0:	2301      	movs	r3, #1
 8015bf2:	e09c      	b.n	8015d2e <_printf_i+0x1e6>
 8015bf4:	6833      	ldr	r3, [r6, #0]
 8015bf6:	6820      	ldr	r0, [r4, #0]
 8015bf8:	1d19      	adds	r1, r3, #4
 8015bfa:	6031      	str	r1, [r6, #0]
 8015bfc:	0606      	lsls	r6, r0, #24
 8015bfe:	d501      	bpl.n	8015c04 <_printf_i+0xbc>
 8015c00:	681d      	ldr	r5, [r3, #0]
 8015c02:	e003      	b.n	8015c0c <_printf_i+0xc4>
 8015c04:	0645      	lsls	r5, r0, #25
 8015c06:	d5fb      	bpl.n	8015c00 <_printf_i+0xb8>
 8015c08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015c0c:	2d00      	cmp	r5, #0
 8015c0e:	da03      	bge.n	8015c18 <_printf_i+0xd0>
 8015c10:	232d      	movs	r3, #45	@ 0x2d
 8015c12:	426d      	negs	r5, r5
 8015c14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015c18:	4858      	ldr	r0, [pc, #352]	@ (8015d7c <_printf_i+0x234>)
 8015c1a:	230a      	movs	r3, #10
 8015c1c:	e011      	b.n	8015c42 <_printf_i+0xfa>
 8015c1e:	6821      	ldr	r1, [r4, #0]
 8015c20:	6833      	ldr	r3, [r6, #0]
 8015c22:	0608      	lsls	r0, r1, #24
 8015c24:	f853 5b04 	ldr.w	r5, [r3], #4
 8015c28:	d402      	bmi.n	8015c30 <_printf_i+0xe8>
 8015c2a:	0649      	lsls	r1, r1, #25
 8015c2c:	bf48      	it	mi
 8015c2e:	b2ad      	uxthmi	r5, r5
 8015c30:	2f6f      	cmp	r7, #111	@ 0x6f
 8015c32:	4852      	ldr	r0, [pc, #328]	@ (8015d7c <_printf_i+0x234>)
 8015c34:	6033      	str	r3, [r6, #0]
 8015c36:	bf14      	ite	ne
 8015c38:	230a      	movne	r3, #10
 8015c3a:	2308      	moveq	r3, #8
 8015c3c:	2100      	movs	r1, #0
 8015c3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015c42:	6866      	ldr	r6, [r4, #4]
 8015c44:	60a6      	str	r6, [r4, #8]
 8015c46:	2e00      	cmp	r6, #0
 8015c48:	db05      	blt.n	8015c56 <_printf_i+0x10e>
 8015c4a:	6821      	ldr	r1, [r4, #0]
 8015c4c:	432e      	orrs	r6, r5
 8015c4e:	f021 0104 	bic.w	r1, r1, #4
 8015c52:	6021      	str	r1, [r4, #0]
 8015c54:	d04b      	beq.n	8015cee <_printf_i+0x1a6>
 8015c56:	4616      	mov	r6, r2
 8015c58:	fbb5 f1f3 	udiv	r1, r5, r3
 8015c5c:	fb03 5711 	mls	r7, r3, r1, r5
 8015c60:	5dc7      	ldrb	r7, [r0, r7]
 8015c62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015c66:	462f      	mov	r7, r5
 8015c68:	42bb      	cmp	r3, r7
 8015c6a:	460d      	mov	r5, r1
 8015c6c:	d9f4      	bls.n	8015c58 <_printf_i+0x110>
 8015c6e:	2b08      	cmp	r3, #8
 8015c70:	d10b      	bne.n	8015c8a <_printf_i+0x142>
 8015c72:	6823      	ldr	r3, [r4, #0]
 8015c74:	07df      	lsls	r7, r3, #31
 8015c76:	d508      	bpl.n	8015c8a <_printf_i+0x142>
 8015c78:	6923      	ldr	r3, [r4, #16]
 8015c7a:	6861      	ldr	r1, [r4, #4]
 8015c7c:	4299      	cmp	r1, r3
 8015c7e:	bfde      	ittt	le
 8015c80:	2330      	movle	r3, #48	@ 0x30
 8015c82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015c86:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015c8a:	1b92      	subs	r2, r2, r6
 8015c8c:	6122      	str	r2, [r4, #16]
 8015c8e:	f8cd a000 	str.w	sl, [sp]
 8015c92:	464b      	mov	r3, r9
 8015c94:	aa03      	add	r2, sp, #12
 8015c96:	4621      	mov	r1, r4
 8015c98:	4640      	mov	r0, r8
 8015c9a:	f7ff fee7 	bl	8015a6c <_printf_common>
 8015c9e:	3001      	adds	r0, #1
 8015ca0:	d14a      	bne.n	8015d38 <_printf_i+0x1f0>
 8015ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8015ca6:	b004      	add	sp, #16
 8015ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cac:	6823      	ldr	r3, [r4, #0]
 8015cae:	f043 0320 	orr.w	r3, r3, #32
 8015cb2:	6023      	str	r3, [r4, #0]
 8015cb4:	4832      	ldr	r0, [pc, #200]	@ (8015d80 <_printf_i+0x238>)
 8015cb6:	2778      	movs	r7, #120	@ 0x78
 8015cb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015cbc:	6823      	ldr	r3, [r4, #0]
 8015cbe:	6831      	ldr	r1, [r6, #0]
 8015cc0:	061f      	lsls	r7, r3, #24
 8015cc2:	f851 5b04 	ldr.w	r5, [r1], #4
 8015cc6:	d402      	bmi.n	8015cce <_printf_i+0x186>
 8015cc8:	065f      	lsls	r7, r3, #25
 8015cca:	bf48      	it	mi
 8015ccc:	b2ad      	uxthmi	r5, r5
 8015cce:	6031      	str	r1, [r6, #0]
 8015cd0:	07d9      	lsls	r1, r3, #31
 8015cd2:	bf44      	itt	mi
 8015cd4:	f043 0320 	orrmi.w	r3, r3, #32
 8015cd8:	6023      	strmi	r3, [r4, #0]
 8015cda:	b11d      	cbz	r5, 8015ce4 <_printf_i+0x19c>
 8015cdc:	2310      	movs	r3, #16
 8015cde:	e7ad      	b.n	8015c3c <_printf_i+0xf4>
 8015ce0:	4826      	ldr	r0, [pc, #152]	@ (8015d7c <_printf_i+0x234>)
 8015ce2:	e7e9      	b.n	8015cb8 <_printf_i+0x170>
 8015ce4:	6823      	ldr	r3, [r4, #0]
 8015ce6:	f023 0320 	bic.w	r3, r3, #32
 8015cea:	6023      	str	r3, [r4, #0]
 8015cec:	e7f6      	b.n	8015cdc <_printf_i+0x194>
 8015cee:	4616      	mov	r6, r2
 8015cf0:	e7bd      	b.n	8015c6e <_printf_i+0x126>
 8015cf2:	6833      	ldr	r3, [r6, #0]
 8015cf4:	6825      	ldr	r5, [r4, #0]
 8015cf6:	6961      	ldr	r1, [r4, #20]
 8015cf8:	1d18      	adds	r0, r3, #4
 8015cfa:	6030      	str	r0, [r6, #0]
 8015cfc:	062e      	lsls	r6, r5, #24
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	d501      	bpl.n	8015d06 <_printf_i+0x1be>
 8015d02:	6019      	str	r1, [r3, #0]
 8015d04:	e002      	b.n	8015d0c <_printf_i+0x1c4>
 8015d06:	0668      	lsls	r0, r5, #25
 8015d08:	d5fb      	bpl.n	8015d02 <_printf_i+0x1ba>
 8015d0a:	8019      	strh	r1, [r3, #0]
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	6123      	str	r3, [r4, #16]
 8015d10:	4616      	mov	r6, r2
 8015d12:	e7bc      	b.n	8015c8e <_printf_i+0x146>
 8015d14:	6833      	ldr	r3, [r6, #0]
 8015d16:	1d1a      	adds	r2, r3, #4
 8015d18:	6032      	str	r2, [r6, #0]
 8015d1a:	681e      	ldr	r6, [r3, #0]
 8015d1c:	6862      	ldr	r2, [r4, #4]
 8015d1e:	2100      	movs	r1, #0
 8015d20:	4630      	mov	r0, r6
 8015d22:	f7ea fa6d 	bl	8000200 <memchr>
 8015d26:	b108      	cbz	r0, 8015d2c <_printf_i+0x1e4>
 8015d28:	1b80      	subs	r0, r0, r6
 8015d2a:	6060      	str	r0, [r4, #4]
 8015d2c:	6863      	ldr	r3, [r4, #4]
 8015d2e:	6123      	str	r3, [r4, #16]
 8015d30:	2300      	movs	r3, #0
 8015d32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015d36:	e7aa      	b.n	8015c8e <_printf_i+0x146>
 8015d38:	6923      	ldr	r3, [r4, #16]
 8015d3a:	4632      	mov	r2, r6
 8015d3c:	4649      	mov	r1, r9
 8015d3e:	4640      	mov	r0, r8
 8015d40:	47d0      	blx	sl
 8015d42:	3001      	adds	r0, #1
 8015d44:	d0ad      	beq.n	8015ca2 <_printf_i+0x15a>
 8015d46:	6823      	ldr	r3, [r4, #0]
 8015d48:	079b      	lsls	r3, r3, #30
 8015d4a:	d413      	bmi.n	8015d74 <_printf_i+0x22c>
 8015d4c:	68e0      	ldr	r0, [r4, #12]
 8015d4e:	9b03      	ldr	r3, [sp, #12]
 8015d50:	4298      	cmp	r0, r3
 8015d52:	bfb8      	it	lt
 8015d54:	4618      	movlt	r0, r3
 8015d56:	e7a6      	b.n	8015ca6 <_printf_i+0x15e>
 8015d58:	2301      	movs	r3, #1
 8015d5a:	4632      	mov	r2, r6
 8015d5c:	4649      	mov	r1, r9
 8015d5e:	4640      	mov	r0, r8
 8015d60:	47d0      	blx	sl
 8015d62:	3001      	adds	r0, #1
 8015d64:	d09d      	beq.n	8015ca2 <_printf_i+0x15a>
 8015d66:	3501      	adds	r5, #1
 8015d68:	68e3      	ldr	r3, [r4, #12]
 8015d6a:	9903      	ldr	r1, [sp, #12]
 8015d6c:	1a5b      	subs	r3, r3, r1
 8015d6e:	42ab      	cmp	r3, r5
 8015d70:	dcf2      	bgt.n	8015d58 <_printf_i+0x210>
 8015d72:	e7eb      	b.n	8015d4c <_printf_i+0x204>
 8015d74:	2500      	movs	r5, #0
 8015d76:	f104 0619 	add.w	r6, r4, #25
 8015d7a:	e7f5      	b.n	8015d68 <_printf_i+0x220>
 8015d7c:	08016a08 	.word	0x08016a08
 8015d80:	08016a19 	.word	0x08016a19

08015d84 <_scanf_chars>:
 8015d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d88:	4615      	mov	r5, r2
 8015d8a:	688a      	ldr	r2, [r1, #8]
 8015d8c:	4680      	mov	r8, r0
 8015d8e:	460c      	mov	r4, r1
 8015d90:	b932      	cbnz	r2, 8015da0 <_scanf_chars+0x1c>
 8015d92:	698a      	ldr	r2, [r1, #24]
 8015d94:	2a00      	cmp	r2, #0
 8015d96:	bf14      	ite	ne
 8015d98:	f04f 32ff 	movne.w	r2, #4294967295
 8015d9c:	2201      	moveq	r2, #1
 8015d9e:	608a      	str	r2, [r1, #8]
 8015da0:	6822      	ldr	r2, [r4, #0]
 8015da2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8015e34 <_scanf_chars+0xb0>
 8015da6:	06d1      	lsls	r1, r2, #27
 8015da8:	bf5f      	itttt	pl
 8015daa:	681a      	ldrpl	r2, [r3, #0]
 8015dac:	1d11      	addpl	r1, r2, #4
 8015dae:	6019      	strpl	r1, [r3, #0]
 8015db0:	6816      	ldrpl	r6, [r2, #0]
 8015db2:	2700      	movs	r7, #0
 8015db4:	69a0      	ldr	r0, [r4, #24]
 8015db6:	b188      	cbz	r0, 8015ddc <_scanf_chars+0x58>
 8015db8:	2801      	cmp	r0, #1
 8015dba:	d107      	bne.n	8015dcc <_scanf_chars+0x48>
 8015dbc:	682b      	ldr	r3, [r5, #0]
 8015dbe:	781a      	ldrb	r2, [r3, #0]
 8015dc0:	6963      	ldr	r3, [r4, #20]
 8015dc2:	5c9b      	ldrb	r3, [r3, r2]
 8015dc4:	b953      	cbnz	r3, 8015ddc <_scanf_chars+0x58>
 8015dc6:	2f00      	cmp	r7, #0
 8015dc8:	d031      	beq.n	8015e2e <_scanf_chars+0xaa>
 8015dca:	e022      	b.n	8015e12 <_scanf_chars+0x8e>
 8015dcc:	2802      	cmp	r0, #2
 8015dce:	d120      	bne.n	8015e12 <_scanf_chars+0x8e>
 8015dd0:	682b      	ldr	r3, [r5, #0]
 8015dd2:	781b      	ldrb	r3, [r3, #0]
 8015dd4:	f819 3003 	ldrb.w	r3, [r9, r3]
 8015dd8:	071b      	lsls	r3, r3, #28
 8015dda:	d41a      	bmi.n	8015e12 <_scanf_chars+0x8e>
 8015ddc:	6823      	ldr	r3, [r4, #0]
 8015dde:	06da      	lsls	r2, r3, #27
 8015de0:	bf5e      	ittt	pl
 8015de2:	682b      	ldrpl	r3, [r5, #0]
 8015de4:	781b      	ldrbpl	r3, [r3, #0]
 8015de6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8015dea:	682a      	ldr	r2, [r5, #0]
 8015dec:	686b      	ldr	r3, [r5, #4]
 8015dee:	3201      	adds	r2, #1
 8015df0:	602a      	str	r2, [r5, #0]
 8015df2:	68a2      	ldr	r2, [r4, #8]
 8015df4:	3b01      	subs	r3, #1
 8015df6:	3a01      	subs	r2, #1
 8015df8:	606b      	str	r3, [r5, #4]
 8015dfa:	3701      	adds	r7, #1
 8015dfc:	60a2      	str	r2, [r4, #8]
 8015dfe:	b142      	cbz	r2, 8015e12 <_scanf_chars+0x8e>
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	dcd7      	bgt.n	8015db4 <_scanf_chars+0x30>
 8015e04:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8015e08:	4629      	mov	r1, r5
 8015e0a:	4640      	mov	r0, r8
 8015e0c:	4798      	blx	r3
 8015e0e:	2800      	cmp	r0, #0
 8015e10:	d0d0      	beq.n	8015db4 <_scanf_chars+0x30>
 8015e12:	6823      	ldr	r3, [r4, #0]
 8015e14:	f013 0310 	ands.w	r3, r3, #16
 8015e18:	d105      	bne.n	8015e26 <_scanf_chars+0xa2>
 8015e1a:	68e2      	ldr	r2, [r4, #12]
 8015e1c:	3201      	adds	r2, #1
 8015e1e:	60e2      	str	r2, [r4, #12]
 8015e20:	69a2      	ldr	r2, [r4, #24]
 8015e22:	b102      	cbz	r2, 8015e26 <_scanf_chars+0xa2>
 8015e24:	7033      	strb	r3, [r6, #0]
 8015e26:	6923      	ldr	r3, [r4, #16]
 8015e28:	443b      	add	r3, r7
 8015e2a:	6123      	str	r3, [r4, #16]
 8015e2c:	2000      	movs	r0, #0
 8015e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e32:	bf00      	nop
 8015e34:	080168f7 	.word	0x080168f7

08015e38 <_scanf_i>:
 8015e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e3c:	4698      	mov	r8, r3
 8015e3e:	4b74      	ldr	r3, [pc, #464]	@ (8016010 <_scanf_i+0x1d8>)
 8015e40:	460c      	mov	r4, r1
 8015e42:	4682      	mov	sl, r0
 8015e44:	4616      	mov	r6, r2
 8015e46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015e4a:	b087      	sub	sp, #28
 8015e4c:	ab03      	add	r3, sp, #12
 8015e4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015e52:	4b70      	ldr	r3, [pc, #448]	@ (8016014 <_scanf_i+0x1dc>)
 8015e54:	69a1      	ldr	r1, [r4, #24]
 8015e56:	4a70      	ldr	r2, [pc, #448]	@ (8016018 <_scanf_i+0x1e0>)
 8015e58:	2903      	cmp	r1, #3
 8015e5a:	bf08      	it	eq
 8015e5c:	461a      	moveq	r2, r3
 8015e5e:	68a3      	ldr	r3, [r4, #8]
 8015e60:	9201      	str	r2, [sp, #4]
 8015e62:	1e5a      	subs	r2, r3, #1
 8015e64:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8015e68:	bf88      	it	hi
 8015e6a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8015e6e:	4627      	mov	r7, r4
 8015e70:	bf82      	ittt	hi
 8015e72:	eb03 0905 	addhi.w	r9, r3, r5
 8015e76:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8015e7a:	60a3      	strhi	r3, [r4, #8]
 8015e7c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8015e80:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8015e84:	bf98      	it	ls
 8015e86:	f04f 0900 	movls.w	r9, #0
 8015e8a:	6023      	str	r3, [r4, #0]
 8015e8c:	463d      	mov	r5, r7
 8015e8e:	f04f 0b00 	mov.w	fp, #0
 8015e92:	6831      	ldr	r1, [r6, #0]
 8015e94:	ab03      	add	r3, sp, #12
 8015e96:	7809      	ldrb	r1, [r1, #0]
 8015e98:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8015e9c:	2202      	movs	r2, #2
 8015e9e:	f7ea f9af 	bl	8000200 <memchr>
 8015ea2:	b328      	cbz	r0, 8015ef0 <_scanf_i+0xb8>
 8015ea4:	f1bb 0f01 	cmp.w	fp, #1
 8015ea8:	d159      	bne.n	8015f5e <_scanf_i+0x126>
 8015eaa:	6862      	ldr	r2, [r4, #4]
 8015eac:	b92a      	cbnz	r2, 8015eba <_scanf_i+0x82>
 8015eae:	6822      	ldr	r2, [r4, #0]
 8015eb0:	2108      	movs	r1, #8
 8015eb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015eb6:	6061      	str	r1, [r4, #4]
 8015eb8:	6022      	str	r2, [r4, #0]
 8015eba:	6822      	ldr	r2, [r4, #0]
 8015ebc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8015ec0:	6022      	str	r2, [r4, #0]
 8015ec2:	68a2      	ldr	r2, [r4, #8]
 8015ec4:	1e51      	subs	r1, r2, #1
 8015ec6:	60a1      	str	r1, [r4, #8]
 8015ec8:	b192      	cbz	r2, 8015ef0 <_scanf_i+0xb8>
 8015eca:	6832      	ldr	r2, [r6, #0]
 8015ecc:	1c51      	adds	r1, r2, #1
 8015ece:	6031      	str	r1, [r6, #0]
 8015ed0:	7812      	ldrb	r2, [r2, #0]
 8015ed2:	f805 2b01 	strb.w	r2, [r5], #1
 8015ed6:	6872      	ldr	r2, [r6, #4]
 8015ed8:	3a01      	subs	r2, #1
 8015eda:	2a00      	cmp	r2, #0
 8015edc:	6072      	str	r2, [r6, #4]
 8015ede:	dc07      	bgt.n	8015ef0 <_scanf_i+0xb8>
 8015ee0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8015ee4:	4631      	mov	r1, r6
 8015ee6:	4650      	mov	r0, sl
 8015ee8:	4790      	blx	r2
 8015eea:	2800      	cmp	r0, #0
 8015eec:	f040 8085 	bne.w	8015ffa <_scanf_i+0x1c2>
 8015ef0:	f10b 0b01 	add.w	fp, fp, #1
 8015ef4:	f1bb 0f03 	cmp.w	fp, #3
 8015ef8:	d1cb      	bne.n	8015e92 <_scanf_i+0x5a>
 8015efa:	6863      	ldr	r3, [r4, #4]
 8015efc:	b90b      	cbnz	r3, 8015f02 <_scanf_i+0xca>
 8015efe:	230a      	movs	r3, #10
 8015f00:	6063      	str	r3, [r4, #4]
 8015f02:	6863      	ldr	r3, [r4, #4]
 8015f04:	4945      	ldr	r1, [pc, #276]	@ (801601c <_scanf_i+0x1e4>)
 8015f06:	6960      	ldr	r0, [r4, #20]
 8015f08:	1ac9      	subs	r1, r1, r3
 8015f0a:	f000 f889 	bl	8016020 <__sccl>
 8015f0e:	f04f 0b00 	mov.w	fp, #0
 8015f12:	68a3      	ldr	r3, [r4, #8]
 8015f14:	6822      	ldr	r2, [r4, #0]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d03d      	beq.n	8015f96 <_scanf_i+0x15e>
 8015f1a:	6831      	ldr	r1, [r6, #0]
 8015f1c:	6960      	ldr	r0, [r4, #20]
 8015f1e:	f891 c000 	ldrb.w	ip, [r1]
 8015f22:	f810 000c 	ldrb.w	r0, [r0, ip]
 8015f26:	2800      	cmp	r0, #0
 8015f28:	d035      	beq.n	8015f96 <_scanf_i+0x15e>
 8015f2a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8015f2e:	d124      	bne.n	8015f7a <_scanf_i+0x142>
 8015f30:	0510      	lsls	r0, r2, #20
 8015f32:	d522      	bpl.n	8015f7a <_scanf_i+0x142>
 8015f34:	f10b 0b01 	add.w	fp, fp, #1
 8015f38:	f1b9 0f00 	cmp.w	r9, #0
 8015f3c:	d003      	beq.n	8015f46 <_scanf_i+0x10e>
 8015f3e:	3301      	adds	r3, #1
 8015f40:	f109 39ff 	add.w	r9, r9, #4294967295
 8015f44:	60a3      	str	r3, [r4, #8]
 8015f46:	6873      	ldr	r3, [r6, #4]
 8015f48:	3b01      	subs	r3, #1
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	6073      	str	r3, [r6, #4]
 8015f4e:	dd1b      	ble.n	8015f88 <_scanf_i+0x150>
 8015f50:	6833      	ldr	r3, [r6, #0]
 8015f52:	3301      	adds	r3, #1
 8015f54:	6033      	str	r3, [r6, #0]
 8015f56:	68a3      	ldr	r3, [r4, #8]
 8015f58:	3b01      	subs	r3, #1
 8015f5a:	60a3      	str	r3, [r4, #8]
 8015f5c:	e7d9      	b.n	8015f12 <_scanf_i+0xda>
 8015f5e:	f1bb 0f02 	cmp.w	fp, #2
 8015f62:	d1ae      	bne.n	8015ec2 <_scanf_i+0x8a>
 8015f64:	6822      	ldr	r2, [r4, #0]
 8015f66:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8015f6a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8015f6e:	d1c4      	bne.n	8015efa <_scanf_i+0xc2>
 8015f70:	2110      	movs	r1, #16
 8015f72:	6061      	str	r1, [r4, #4]
 8015f74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015f78:	e7a2      	b.n	8015ec0 <_scanf_i+0x88>
 8015f7a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8015f7e:	6022      	str	r2, [r4, #0]
 8015f80:	780b      	ldrb	r3, [r1, #0]
 8015f82:	f805 3b01 	strb.w	r3, [r5], #1
 8015f86:	e7de      	b.n	8015f46 <_scanf_i+0x10e>
 8015f88:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8015f8c:	4631      	mov	r1, r6
 8015f8e:	4650      	mov	r0, sl
 8015f90:	4798      	blx	r3
 8015f92:	2800      	cmp	r0, #0
 8015f94:	d0df      	beq.n	8015f56 <_scanf_i+0x11e>
 8015f96:	6823      	ldr	r3, [r4, #0]
 8015f98:	05d9      	lsls	r1, r3, #23
 8015f9a:	d50d      	bpl.n	8015fb8 <_scanf_i+0x180>
 8015f9c:	42bd      	cmp	r5, r7
 8015f9e:	d909      	bls.n	8015fb4 <_scanf_i+0x17c>
 8015fa0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015fa4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015fa8:	4632      	mov	r2, r6
 8015faa:	4650      	mov	r0, sl
 8015fac:	4798      	blx	r3
 8015fae:	f105 39ff 	add.w	r9, r5, #4294967295
 8015fb2:	464d      	mov	r5, r9
 8015fb4:	42bd      	cmp	r5, r7
 8015fb6:	d028      	beq.n	801600a <_scanf_i+0x1d2>
 8015fb8:	6822      	ldr	r2, [r4, #0]
 8015fba:	f012 0210 	ands.w	r2, r2, #16
 8015fbe:	d113      	bne.n	8015fe8 <_scanf_i+0x1b0>
 8015fc0:	702a      	strb	r2, [r5, #0]
 8015fc2:	6863      	ldr	r3, [r4, #4]
 8015fc4:	9e01      	ldr	r6, [sp, #4]
 8015fc6:	4639      	mov	r1, r7
 8015fc8:	4650      	mov	r0, sl
 8015fca:	47b0      	blx	r6
 8015fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8015fd0:	6821      	ldr	r1, [r4, #0]
 8015fd2:	1d1a      	adds	r2, r3, #4
 8015fd4:	f8c8 2000 	str.w	r2, [r8]
 8015fd8:	f011 0f20 	tst.w	r1, #32
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	d00f      	beq.n	8016000 <_scanf_i+0x1c8>
 8015fe0:	6018      	str	r0, [r3, #0]
 8015fe2:	68e3      	ldr	r3, [r4, #12]
 8015fe4:	3301      	adds	r3, #1
 8015fe6:	60e3      	str	r3, [r4, #12]
 8015fe8:	6923      	ldr	r3, [r4, #16]
 8015fea:	1bed      	subs	r5, r5, r7
 8015fec:	445d      	add	r5, fp
 8015fee:	442b      	add	r3, r5
 8015ff0:	6123      	str	r3, [r4, #16]
 8015ff2:	2000      	movs	r0, #0
 8015ff4:	b007      	add	sp, #28
 8015ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ffa:	f04f 0b00 	mov.w	fp, #0
 8015ffe:	e7ca      	b.n	8015f96 <_scanf_i+0x15e>
 8016000:	07ca      	lsls	r2, r1, #31
 8016002:	bf4c      	ite	mi
 8016004:	8018      	strhmi	r0, [r3, #0]
 8016006:	6018      	strpl	r0, [r3, #0]
 8016008:	e7eb      	b.n	8015fe2 <_scanf_i+0x1aa>
 801600a:	2001      	movs	r0, #1
 801600c:	e7f2      	b.n	8015ff4 <_scanf_i+0x1bc>
 801600e:	bf00      	nop
 8016010:	080167f4 	.word	0x080167f4
 8016014:	08015031 	.word	0x08015031
 8016018:	08016295 	.word	0x08016295
 801601c:	08016a3a 	.word	0x08016a3a

08016020 <__sccl>:
 8016020:	b570      	push	{r4, r5, r6, lr}
 8016022:	780b      	ldrb	r3, [r1, #0]
 8016024:	4604      	mov	r4, r0
 8016026:	2b5e      	cmp	r3, #94	@ 0x5e
 8016028:	bf0b      	itete	eq
 801602a:	784b      	ldrbeq	r3, [r1, #1]
 801602c:	1c4a      	addne	r2, r1, #1
 801602e:	1c8a      	addeq	r2, r1, #2
 8016030:	2100      	movne	r1, #0
 8016032:	bf08      	it	eq
 8016034:	2101      	moveq	r1, #1
 8016036:	3801      	subs	r0, #1
 8016038:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801603c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8016040:	42a8      	cmp	r0, r5
 8016042:	d1fb      	bne.n	801603c <__sccl+0x1c>
 8016044:	b90b      	cbnz	r3, 801604a <__sccl+0x2a>
 8016046:	1e50      	subs	r0, r2, #1
 8016048:	bd70      	pop	{r4, r5, r6, pc}
 801604a:	f081 0101 	eor.w	r1, r1, #1
 801604e:	54e1      	strb	r1, [r4, r3]
 8016050:	4610      	mov	r0, r2
 8016052:	4602      	mov	r2, r0
 8016054:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016058:	2d2d      	cmp	r5, #45	@ 0x2d
 801605a:	d005      	beq.n	8016068 <__sccl+0x48>
 801605c:	2d5d      	cmp	r5, #93	@ 0x5d
 801605e:	d016      	beq.n	801608e <__sccl+0x6e>
 8016060:	2d00      	cmp	r5, #0
 8016062:	d0f1      	beq.n	8016048 <__sccl+0x28>
 8016064:	462b      	mov	r3, r5
 8016066:	e7f2      	b.n	801604e <__sccl+0x2e>
 8016068:	7846      	ldrb	r6, [r0, #1]
 801606a:	2e5d      	cmp	r6, #93	@ 0x5d
 801606c:	d0fa      	beq.n	8016064 <__sccl+0x44>
 801606e:	42b3      	cmp	r3, r6
 8016070:	dcf8      	bgt.n	8016064 <__sccl+0x44>
 8016072:	3002      	adds	r0, #2
 8016074:	461a      	mov	r2, r3
 8016076:	3201      	adds	r2, #1
 8016078:	4296      	cmp	r6, r2
 801607a:	54a1      	strb	r1, [r4, r2]
 801607c:	dcfb      	bgt.n	8016076 <__sccl+0x56>
 801607e:	1af2      	subs	r2, r6, r3
 8016080:	3a01      	subs	r2, #1
 8016082:	1c5d      	adds	r5, r3, #1
 8016084:	42b3      	cmp	r3, r6
 8016086:	bfa8      	it	ge
 8016088:	2200      	movge	r2, #0
 801608a:	18ab      	adds	r3, r5, r2
 801608c:	e7e1      	b.n	8016052 <__sccl+0x32>
 801608e:	4610      	mov	r0, r2
 8016090:	e7da      	b.n	8016048 <__sccl+0x28>

08016092 <__submore>:
 8016092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016096:	460c      	mov	r4, r1
 8016098:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801609a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801609e:	4299      	cmp	r1, r3
 80160a0:	d11d      	bne.n	80160de <__submore+0x4c>
 80160a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80160a6:	f7ff f92d 	bl	8015304 <_malloc_r>
 80160aa:	b918      	cbnz	r0, 80160b4 <__submore+0x22>
 80160ac:	f04f 30ff 	mov.w	r0, #4294967295
 80160b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80160b8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80160ba:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80160be:	6360      	str	r0, [r4, #52]	@ 0x34
 80160c0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80160c4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80160c8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80160cc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80160d0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80160d4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80160d8:	6020      	str	r0, [r4, #0]
 80160da:	2000      	movs	r0, #0
 80160dc:	e7e8      	b.n	80160b0 <__submore+0x1e>
 80160de:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80160e0:	0077      	lsls	r7, r6, #1
 80160e2:	463a      	mov	r2, r7
 80160e4:	f000 f83a 	bl	801615c <_realloc_r>
 80160e8:	4605      	mov	r5, r0
 80160ea:	2800      	cmp	r0, #0
 80160ec:	d0de      	beq.n	80160ac <__submore+0x1a>
 80160ee:	eb00 0806 	add.w	r8, r0, r6
 80160f2:	4601      	mov	r1, r0
 80160f4:	4632      	mov	r2, r6
 80160f6:	4640      	mov	r0, r8
 80160f8:	f7ff f88a 	bl	8015210 <memcpy>
 80160fc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8016100:	f8c4 8000 	str.w	r8, [r4]
 8016104:	e7e9      	b.n	80160da <__submore+0x48>

08016106 <memmove>:
 8016106:	4288      	cmp	r0, r1
 8016108:	b510      	push	{r4, lr}
 801610a:	eb01 0402 	add.w	r4, r1, r2
 801610e:	d902      	bls.n	8016116 <memmove+0x10>
 8016110:	4284      	cmp	r4, r0
 8016112:	4623      	mov	r3, r4
 8016114:	d807      	bhi.n	8016126 <memmove+0x20>
 8016116:	1e43      	subs	r3, r0, #1
 8016118:	42a1      	cmp	r1, r4
 801611a:	d008      	beq.n	801612e <memmove+0x28>
 801611c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016120:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016124:	e7f8      	b.n	8016118 <memmove+0x12>
 8016126:	4402      	add	r2, r0
 8016128:	4601      	mov	r1, r0
 801612a:	428a      	cmp	r2, r1
 801612c:	d100      	bne.n	8016130 <memmove+0x2a>
 801612e:	bd10      	pop	{r4, pc}
 8016130:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016134:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016138:	e7f7      	b.n	801612a <memmove+0x24>
	...

0801613c <_sbrk_r>:
 801613c:	b538      	push	{r3, r4, r5, lr}
 801613e:	4d06      	ldr	r5, [pc, #24]	@ (8016158 <_sbrk_r+0x1c>)
 8016140:	2300      	movs	r3, #0
 8016142:	4604      	mov	r4, r0
 8016144:	4608      	mov	r0, r1
 8016146:	602b      	str	r3, [r5, #0]
 8016148:	f7f0 fdf2 	bl	8006d30 <_sbrk>
 801614c:	1c43      	adds	r3, r0, #1
 801614e:	d102      	bne.n	8016156 <_sbrk_r+0x1a>
 8016150:	682b      	ldr	r3, [r5, #0]
 8016152:	b103      	cbz	r3, 8016156 <_sbrk_r+0x1a>
 8016154:	6023      	str	r3, [r4, #0]
 8016156:	bd38      	pop	{r3, r4, r5, pc}
 8016158:	20005c08 	.word	0x20005c08

0801615c <_realloc_r>:
 801615c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016160:	4607      	mov	r7, r0
 8016162:	4614      	mov	r4, r2
 8016164:	460d      	mov	r5, r1
 8016166:	b921      	cbnz	r1, 8016172 <_realloc_r+0x16>
 8016168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801616c:	4611      	mov	r1, r2
 801616e:	f7ff b8c9 	b.w	8015304 <_malloc_r>
 8016172:	b92a      	cbnz	r2, 8016180 <_realloc_r+0x24>
 8016174:	f7ff f85a 	bl	801522c <_free_r>
 8016178:	4625      	mov	r5, r4
 801617a:	4628      	mov	r0, r5
 801617c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016180:	f000 f88a 	bl	8016298 <_malloc_usable_size_r>
 8016184:	4284      	cmp	r4, r0
 8016186:	4606      	mov	r6, r0
 8016188:	d802      	bhi.n	8016190 <_realloc_r+0x34>
 801618a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801618e:	d8f4      	bhi.n	801617a <_realloc_r+0x1e>
 8016190:	4621      	mov	r1, r4
 8016192:	4638      	mov	r0, r7
 8016194:	f7ff f8b6 	bl	8015304 <_malloc_r>
 8016198:	4680      	mov	r8, r0
 801619a:	b908      	cbnz	r0, 80161a0 <_realloc_r+0x44>
 801619c:	4645      	mov	r5, r8
 801619e:	e7ec      	b.n	801617a <_realloc_r+0x1e>
 80161a0:	42b4      	cmp	r4, r6
 80161a2:	4622      	mov	r2, r4
 80161a4:	4629      	mov	r1, r5
 80161a6:	bf28      	it	cs
 80161a8:	4632      	movcs	r2, r6
 80161aa:	f7ff f831 	bl	8015210 <memcpy>
 80161ae:	4629      	mov	r1, r5
 80161b0:	4638      	mov	r0, r7
 80161b2:	f7ff f83b 	bl	801522c <_free_r>
 80161b6:	e7f1      	b.n	801619c <_realloc_r+0x40>

080161b8 <_strtoul_l.isra.0>:
 80161b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80161bc:	4e34      	ldr	r6, [pc, #208]	@ (8016290 <_strtoul_l.isra.0+0xd8>)
 80161be:	4686      	mov	lr, r0
 80161c0:	460d      	mov	r5, r1
 80161c2:	4628      	mov	r0, r5
 80161c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80161c8:	5d37      	ldrb	r7, [r6, r4]
 80161ca:	f017 0708 	ands.w	r7, r7, #8
 80161ce:	d1f8      	bne.n	80161c2 <_strtoul_l.isra.0+0xa>
 80161d0:	2c2d      	cmp	r4, #45	@ 0x2d
 80161d2:	d110      	bne.n	80161f6 <_strtoul_l.isra.0+0x3e>
 80161d4:	782c      	ldrb	r4, [r5, #0]
 80161d6:	2701      	movs	r7, #1
 80161d8:	1c85      	adds	r5, r0, #2
 80161da:	f033 0010 	bics.w	r0, r3, #16
 80161de:	d115      	bne.n	801620c <_strtoul_l.isra.0+0x54>
 80161e0:	2c30      	cmp	r4, #48	@ 0x30
 80161e2:	d10d      	bne.n	8016200 <_strtoul_l.isra.0+0x48>
 80161e4:	7828      	ldrb	r0, [r5, #0]
 80161e6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80161ea:	2858      	cmp	r0, #88	@ 0x58
 80161ec:	d108      	bne.n	8016200 <_strtoul_l.isra.0+0x48>
 80161ee:	786c      	ldrb	r4, [r5, #1]
 80161f0:	3502      	adds	r5, #2
 80161f2:	2310      	movs	r3, #16
 80161f4:	e00a      	b.n	801620c <_strtoul_l.isra.0+0x54>
 80161f6:	2c2b      	cmp	r4, #43	@ 0x2b
 80161f8:	bf04      	itt	eq
 80161fa:	782c      	ldrbeq	r4, [r5, #0]
 80161fc:	1c85      	addeq	r5, r0, #2
 80161fe:	e7ec      	b.n	80161da <_strtoul_l.isra.0+0x22>
 8016200:	2b00      	cmp	r3, #0
 8016202:	d1f6      	bne.n	80161f2 <_strtoul_l.isra.0+0x3a>
 8016204:	2c30      	cmp	r4, #48	@ 0x30
 8016206:	bf14      	ite	ne
 8016208:	230a      	movne	r3, #10
 801620a:	2308      	moveq	r3, #8
 801620c:	f04f 38ff 	mov.w	r8, #4294967295
 8016210:	2600      	movs	r6, #0
 8016212:	fbb8 f8f3 	udiv	r8, r8, r3
 8016216:	fb03 f908 	mul.w	r9, r3, r8
 801621a:	ea6f 0909 	mvn.w	r9, r9
 801621e:	4630      	mov	r0, r6
 8016220:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8016224:	f1bc 0f09 	cmp.w	ip, #9
 8016228:	d810      	bhi.n	801624c <_strtoul_l.isra.0+0x94>
 801622a:	4664      	mov	r4, ip
 801622c:	42a3      	cmp	r3, r4
 801622e:	dd1e      	ble.n	801626e <_strtoul_l.isra.0+0xb6>
 8016230:	f1b6 3fff 	cmp.w	r6, #4294967295
 8016234:	d007      	beq.n	8016246 <_strtoul_l.isra.0+0x8e>
 8016236:	4580      	cmp	r8, r0
 8016238:	d316      	bcc.n	8016268 <_strtoul_l.isra.0+0xb0>
 801623a:	d101      	bne.n	8016240 <_strtoul_l.isra.0+0x88>
 801623c:	45a1      	cmp	r9, r4
 801623e:	db13      	blt.n	8016268 <_strtoul_l.isra.0+0xb0>
 8016240:	fb00 4003 	mla	r0, r0, r3, r4
 8016244:	2601      	movs	r6, #1
 8016246:	f815 4b01 	ldrb.w	r4, [r5], #1
 801624a:	e7e9      	b.n	8016220 <_strtoul_l.isra.0+0x68>
 801624c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8016250:	f1bc 0f19 	cmp.w	ip, #25
 8016254:	d801      	bhi.n	801625a <_strtoul_l.isra.0+0xa2>
 8016256:	3c37      	subs	r4, #55	@ 0x37
 8016258:	e7e8      	b.n	801622c <_strtoul_l.isra.0+0x74>
 801625a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801625e:	f1bc 0f19 	cmp.w	ip, #25
 8016262:	d804      	bhi.n	801626e <_strtoul_l.isra.0+0xb6>
 8016264:	3c57      	subs	r4, #87	@ 0x57
 8016266:	e7e1      	b.n	801622c <_strtoul_l.isra.0+0x74>
 8016268:	f04f 36ff 	mov.w	r6, #4294967295
 801626c:	e7eb      	b.n	8016246 <_strtoul_l.isra.0+0x8e>
 801626e:	1c73      	adds	r3, r6, #1
 8016270:	d106      	bne.n	8016280 <_strtoul_l.isra.0+0xc8>
 8016272:	2322      	movs	r3, #34	@ 0x22
 8016274:	f8ce 3000 	str.w	r3, [lr]
 8016278:	4630      	mov	r0, r6
 801627a:	b932      	cbnz	r2, 801628a <_strtoul_l.isra.0+0xd2>
 801627c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016280:	b107      	cbz	r7, 8016284 <_strtoul_l.isra.0+0xcc>
 8016282:	4240      	negs	r0, r0
 8016284:	2a00      	cmp	r2, #0
 8016286:	d0f9      	beq.n	801627c <_strtoul_l.isra.0+0xc4>
 8016288:	b106      	cbz	r6, 801628c <_strtoul_l.isra.0+0xd4>
 801628a:	1e69      	subs	r1, r5, #1
 801628c:	6011      	str	r1, [r2, #0]
 801628e:	e7f5      	b.n	801627c <_strtoul_l.isra.0+0xc4>
 8016290:	080168f7 	.word	0x080168f7

08016294 <_strtoul_r>:
 8016294:	f7ff bf90 	b.w	80161b8 <_strtoul_l.isra.0>

08016298 <_malloc_usable_size_r>:
 8016298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801629c:	1f18      	subs	r0, r3, #4
 801629e:	2b00      	cmp	r3, #0
 80162a0:	bfbc      	itt	lt
 80162a2:	580b      	ldrlt	r3, [r1, r0]
 80162a4:	18c0      	addlt	r0, r0, r3
 80162a6:	4770      	bx	lr

080162a8 <_init>:
 80162a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162aa:	bf00      	nop
 80162ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80162ae:	bc08      	pop	{r3}
 80162b0:	469e      	mov	lr, r3
 80162b2:	4770      	bx	lr

080162b4 <_fini>:
 80162b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162b6:	bf00      	nop
 80162b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80162ba:	bc08      	pop	{r3}
 80162bc:	469e      	mov	lr, r3
 80162be:	4770      	bx	lr
