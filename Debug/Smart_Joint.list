
Smart_Joint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013a6c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  08013bfc  08013bfc  00014bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080141fc  080141fc  00016064  2**0
                  CONTENTS
  4 .ARM          00000008  080141fc  080141fc  000151fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014204  08014204  00016064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014204  08014204  00015204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014208  08014208  00015208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0801420c  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005130  20000068  08014270  00016068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005198  08014270  00016198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036bb6  00000000  00000000  00016094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d17  00000000  00000000  0004cc4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c80  00000000  00000000  00052968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000022b4  00000000  00000000  000555e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003082e  00000000  00000000  0005789c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034b86  00000000  00000000  000880ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00123f32  00000000  00000000  000bcc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e0b82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c8a0  00000000  00000000  001e0bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001ed468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013be4 	.word	0x08013be4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08013be4 	.word	0x08013be4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
 80005cc:	b480      	push	{r7}
 80005ce:	b087      	sub	sp, #28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
 80005d8:	603b      	str	r3, [r7, #0]
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
#else
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80005e0:	d11a      	bne.n	8000618 <LL_USART_SetBaudRate+0x4c>
#endif /* USART_PRESC_PRESCALER */
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	005a      	lsls	r2, r3, #1
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	085b      	lsrs	r3, r3, #1
 80005ea:	441a      	add	r2, r3
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
    brrtemp = usartdiv & 0xFFF0U;
 80005f6:	697a      	ldr	r2, [r7, #20]
 80005f8:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80005fc:	4013      	ands	r3, r2
 80005fe:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	085b      	lsrs	r3, r3, #1
 8000604:	b29b      	uxth	r3, r3
 8000606:	f003 0307 	and.w	r3, r3, #7
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	4313      	orrs	r3, r2
 800060e:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	60da      	str	r2, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif /* USART_PRESC_PRESCALER */
  }
}
 8000616:	e00a      	b.n	800062e <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	085a      	lsrs	r2, r3, #1
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	441a      	add	r2, r3
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	fbb2 f3f3 	udiv	r3, r2, r3
 8000626:	b29b      	uxth	r3, r3
 8000628:	461a      	mov	r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	60da      	str	r2, [r3, #12]
}
 800062e:	bf00      	nop
 8000630:	371c      	adds	r7, #28
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <Temp_Sensor_Init>:
#include "stm32l4xx_ll_usart.h"


/*------INIZIALIZZAZIONE SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Init(void)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
	uint8_t data = 0xF0;
 8000642:	23f0      	movs	r3, #240	@ 0xf0
 8000644:	71fb      	strb	r3, [r7, #7]

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 9600);
 8000646:	4b1a      	ldr	r3, [pc, #104]	@ (80006b0 <Temp_Sensor_Init+0x74>)
 8000648:	681c      	ldr	r4, [r3, #0]
 800064a:	f00c fe13 	bl	800d274 <HAL_RCC_GetPCLK2Freq>
 800064e:	4601      	mov	r1, r0
 8000650:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000654:	2200      	movs	r2, #0
 8000656:	4620      	mov	r0, r4
 8000658:	f7ff ffb8 	bl	80005cc <LL_USART_SetBaudRate>

	HAL_UART_Transmit(TEMP_UART, &data, 1, 100);  // low for 500+us
 800065c:	1df9      	adds	r1, r7, #7
 800065e:	2364      	movs	r3, #100	@ 0x64
 8000660:	2201      	movs	r2, #1
 8000662:	4813      	ldr	r0, [pc, #76]	@ (80006b0 <Temp_Sensor_Init+0x74>)
 8000664:	f010 fed8 	bl	8011418 <HAL_UART_Transmit>
	if (HAL_UART_Receive(TEMP_UART, &data, 1, 1000) != HAL_OK)
 8000668:	1df9      	adds	r1, r7, #7
 800066a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800066e:	2201      	movs	r2, #1
 8000670:	480f      	ldr	r0, [pc, #60]	@ (80006b0 <Temp_Sensor_Init+0x74>)
 8000672:	f010 ff5a 	bl	801152a <HAL_UART_Receive>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <Temp_Sensor_Init+0x44>
		while(1);
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <Temp_Sensor_Init+0x40>

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 115200);
 8000680:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <Temp_Sensor_Init+0x74>)
 8000682:	681c      	ldr	r4, [r3, #0]
 8000684:	f00c fdf6 	bl	800d274 <HAL_RCC_GetPCLK2Freq>
 8000688:	4601      	mov	r1, r0
 800068a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800068e:	2200      	movs	r2, #0
 8000690:	4620      	mov	r0, r4
 8000692:	f7ff ff9b 	bl	80005cc <LL_USART_SetBaudRate>

	if (data == 0xF0)
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2bf0      	cmp	r3, #240	@ 0xf0
 800069a:	d101      	bne.n	80006a0 <Temp_Sensor_Init+0x64>
		while(1);
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <Temp_Sensor_Init+0x60>

	Temp_Sensor_Write(0xCC);  // skip ROM
 80006a0:	20cc      	movs	r0, #204	@ 0xcc
 80006a2:	f000 f807 	bl	80006b4 <Temp_Sensor_Write>
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd90      	pop	{r4, r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000414 	.word	0x20000414

080006b4 <Temp_Sensor_Write>:

/*------SCRITTURA SU SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Write(uint8_t data)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[8];

	for (int i=0; i<8; i++)
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	e017      	b.n	80006f4 <Temp_Sensor_Write+0x40>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 80006c4:	79fa      	ldrb	r2, [r7, #7]
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	fa42 f303 	asr.w	r3, r2, r3
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d006      	beq.n	80006e2 <Temp_Sensor_Write+0x2e>
		{
			buffer[i] = 0xFF;  // write 1
 80006d4:	f107 020c 	add.w	r2, r7, #12
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	4413      	add	r3, r2
 80006dc:	22ff      	movs	r2, #255	@ 0xff
 80006de:	701a      	strb	r2, [r3, #0]
 80006e0:	e005      	b.n	80006ee <Temp_Sensor_Write+0x3a>
		}
		else  // if the bit is low
		{
			buffer[i] = 0;  // write 0
 80006e2:	f107 020c 	add.w	r2, r7, #12
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	4413      	add	r3, r2
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<8; i++)
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	3301      	adds	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	2b07      	cmp	r3, #7
 80006f8:	dde4      	ble.n	80006c4 <Temp_Sensor_Write+0x10>
		}
	}

	HAL_UART_Transmit(TEMP_UART, buffer, 8, 100);
 80006fa:	f107 010c 	add.w	r1, r7, #12
 80006fe:	2364      	movs	r3, #100	@ 0x64
 8000700:	2208      	movs	r2, #8
 8000702:	4803      	ldr	r0, [pc, #12]	@ (8000710 <Temp_Sensor_Write+0x5c>)
 8000704:	f010 fe88 	bl	8011418 <HAL_UART_Transmit>
}
 8000708:	bf00      	nop
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000414 	.word	0x20000414

08000714 <Temp_Sensor_ReadByte>:

/*------LETTURA BYTE DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadByte(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
	uint8_t RxByte = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 800071e:	2300      	movs	r3, #0
 8000720:	71bb      	strb	r3, [r7, #6]
 8000722:	e00e      	b.n	8000742 <Temp_Sensor_ReadByte+0x2e>
	{
		RxByte >>= 1;
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	085b      	lsrs	r3, r3, #1
 8000728:	71fb      	strb	r3, [r7, #7]
		if (Temp_Sensor_ReadBit())
 800072a:	f000 f813 	bl	8000754 <Temp_Sensor_ReadBit>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d003      	beq.n	800073c <Temp_Sensor_ReadByte+0x28>
		{
			RxByte |= 0x80;
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800073a:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 800073c:	79bb      	ldrb	r3, [r7, #6]
 800073e:	3301      	adds	r3, #1
 8000740:	71bb      	strb	r3, [r7, #6]
 8000742:	79bb      	ldrb	r3, [r7, #6]
 8000744:	2b07      	cmp	r3, #7
 8000746:	d9ed      	bls.n	8000724 <Temp_Sensor_ReadByte+0x10>
		}
	}
	return RxByte;
 8000748:	79fb      	ldrb	r3, [r7, #7]
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <Temp_Sensor_ReadBit>:

/*------LETTURA BIT DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadBit(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
    uint8_t ReadBitCMD = 0xFF;
 800075a:	23ff      	movs	r3, #255	@ 0xff
 800075c:	71fb      	strb	r3, [r7, #7]
    uint8_t RxBit;

    // Send Read Bit CMD
    HAL_UART_Transmit(&huart1, &ReadBitCMD, 1, 1);
 800075e:	1df9      	adds	r1, r7, #7
 8000760:	2301      	movs	r3, #1
 8000762:	2201      	movs	r2, #1
 8000764:	4808      	ldr	r0, [pc, #32]	@ (8000788 <Temp_Sensor_ReadBit+0x34>)
 8000766:	f010 fe57 	bl	8011418 <HAL_UART_Transmit>
    // Receive The Bit
    HAL_UART_Receive(&huart1, &RxBit, 1, 1);
 800076a:	1db9      	adds	r1, r7, #6
 800076c:	2301      	movs	r3, #1
 800076e:	2201      	movs	r2, #1
 8000770:	4805      	ldr	r0, [pc, #20]	@ (8000788 <Temp_Sensor_ReadBit+0x34>)
 8000772:	f010 feda 	bl	801152a <HAL_UART_Receive>

    return (RxBit & 0x01);
 8000776:	79bb      	ldrb	r3, [r7, #6]
 8000778:	f003 0301 	and.w	r3, r3, #1
 800077c:	b2db      	uxtb	r3, r3
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	2000049c 	.word	0x2000049c

0800078c <Read_Temperature>:

/*------LETTURA TEMPERATURA------*/
uint16_t Read_Temperature(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
	uint8_t Temp_LSB = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_MSB = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	71bb      	strb	r3, [r7, #6]
	uint16_t Temp = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	80bb      	strh	r3, [r7, #4]
	
	Temp_Sensor_Init();
 800079e:	f7ff ff4d 	bl	800063c <Temp_Sensor_Init>
	Temp_Sensor_Write(0xCC);  // skip ROM
 80007a2:	20cc      	movs	r0, #204	@ 0xcc
 80007a4:	f7ff ff86 	bl	80006b4 <Temp_Sensor_Write>

	uint8_t status = Temp_Sensor_ReadBit();
 80007a8:	f7ff ffd4 	bl	8000754 <Temp_Sensor_ReadBit>
 80007ac:	4603      	mov	r3, r0
 80007ae:	70fb      	strb	r3, [r7, #3]

	if (status) 
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d01d      	beq.n	80007f2 <Read_Temperature+0x66>
	{
		Temp_Sensor_Write(0xBE);  // read Scratch-pad
 80007b6:	20be      	movs	r0, #190	@ 0xbe
 80007b8:	f7ff ff7c 	bl	80006b4 <Temp_Sensor_Write>
		Temp_LSB = Temp_Sensor_ReadByte();
 80007bc:	f7ff ffaa 	bl	8000714 <Temp_Sensor_ReadByte>
 80007c0:	4603      	mov	r3, r0
 80007c2:	71fb      	strb	r3, [r7, #7]
	    Temp_MSB = Temp_Sensor_ReadByte();
 80007c4:	f7ff ffa6 	bl	8000714 <Temp_Sensor_ReadByte>
 80007c8:	4603      	mov	r3, r0
 80007ca:	71bb      	strb	r3, [r7, #6]
		Temp_Sensor_Init();
 80007cc:	f7ff ff36 	bl	800063c <Temp_Sensor_Init>
		Temp_Sensor_Write(0xCC);  // skip ROM
 80007d0:	20cc      	movs	r0, #204	@ 0xcc
 80007d2:	f7ff ff6f 	bl	80006b4 <Temp_Sensor_Write>
		Temp_Sensor_Write(0x44);  // convert t
 80007d6:	2044      	movs	r0, #68	@ 0x44
 80007d8:	f7ff ff6c 	bl	80006b4 <Temp_Sensor_Write>
		Temp = ((Temp_MSB << 8)) | Temp_LSB;
 80007dc:	79bb      	ldrb	r3, [r7, #6]
 80007de:	b21b      	sxth	r3, r3
 80007e0:	021b      	lsls	r3, r3, #8
 80007e2:	b21a      	sxth	r2, r3
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	b21b      	sxth	r3, r3
 80007e8:	4313      	orrs	r3, r2
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	80bb      	strh	r3, [r7, #4]
		return Temp;
 80007ee:	88bb      	ldrh	r3, [r7, #4]
 80007f0:	e000      	b.n	80007f4 <Read_Temperature+0x68>
	}
	
	return 0; 
 80007f2:	2300      	movs	r3, #0
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <INA3221_Init>:
#include "INA3221.h"
#include "INA3221_reg.h"
#include "peripherals.h"

void INA3221_Init()
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
	uint16_t rcheck = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	80fb      	strh	r3, [r7, #6]

	INA3221_write_reg(INA3221_REG_CONFIG, 0x8000);   //RESET
 8000806:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800080a:	2000      	movs	r0, #0
 800080c:	f000 f87a 	bl	8000904 <INA3221_write_reg>

	HAL_Delay(100);
 8000810:	2064      	movs	r0, #100	@ 0x64
 8000812:	f008 fb23 	bl	8008e5c <HAL_Delay>

	INA3221_read_reg(INA3221_REG_MID, &rcheck);
 8000816:	1dbb      	adds	r3, r7, #6
 8000818:	4619      	mov	r1, r3
 800081a:	20fe      	movs	r0, #254	@ 0xfe
 800081c:	f000 f83c 	bl	8000898 <INA3221_read_reg>

	if(rcheck != INA3221_DEFAULT_MID)
 8000820:	88fb      	ldrh	r3, [r7, #6]
 8000822:	f245 4249 	movw	r2, #21577	@ 0x5449
 8000826:	4293      	cmp	r3, r2
 8000828:	d001      	beq.n	800082e <INA3221_Init+0x32>
		while(1);
 800082a:	bf00      	nop
 800082c:	e7fd      	b.n	800082a <INA3221_Init+0x2e>

	INA3221_write_reg(INA3221_REG_CONFIG, 0x7D27);   //CH1 CH2 CH3 Enabled, 512 AVG, 1.1ms conv time, continous mode
 800082e:	f647 5127 	movw	r1, #32039	@ 0x7d27
 8000832:	2000      	movs	r0, #0
 8000834:	f000 f866 	bl	8000904 <INA3221_write_reg>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <INA3221_Read_Measure>:

void INA3221_Read_Measure(supply_bus_t *measure)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_1, (uint16_t *)&(measure->v1));
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4619      	mov	r1, r3
 800084c:	2002      	movs	r0, #2
 800084e:	f000 f823 	bl	8000898 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_2, (uint16_t *)&(measure->v2));
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3302      	adds	r3, #2
 8000856:	4619      	mov	r1, r3
 8000858:	2004      	movs	r0, #4
 800085a:	f000 f81d 	bl	8000898 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_3, (uint16_t *)&(measure->v3));
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3304      	adds	r3, #4
 8000862:	4619      	mov	r1, r3
 8000864:	2006      	movs	r0, #6
 8000866:	f000 f817 	bl	8000898 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_1, (uint16_t *)&(measure->i1));
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	3306      	adds	r3, #6
 800086e:	4619      	mov	r1, r3
 8000870:	2001      	movs	r0, #1
 8000872:	f000 f811 	bl	8000898 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_2, (uint16_t *)&(measure->i2));
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3308      	adds	r3, #8
 800087a:	4619      	mov	r1, r3
 800087c:	2003      	movs	r0, #3
 800087e:	f000 f80b 	bl	8000898 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_3, (uint16_t *)&(measure->i3));
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	330a      	adds	r3, #10
 8000886:	4619      	mov	r1, r3
 8000888:	2005      	movs	r0, #5
 800088a:	f000 f805 	bl	8000898 <INA3221_read_reg>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <INA3221_read_reg>:


int INA3221_read_reg(uint8_t reg, uint16_t *rdata)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af02      	add	r7, sp, #8
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295
 80008a8:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 80008aa:	2300      	movs	r3, #0
 80008ac:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, &reg, 1, 100) == HAL_OK)
 80008ae:	1dfa      	adds	r2, r7, #7
 80008b0:	2364      	movs	r3, #100	@ 0x64
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	2301      	movs	r3, #1
 80008b6:	2180      	movs	r1, #128	@ 0x80
 80008b8:	4811      	ldr	r0, [pc, #68]	@ (8000900 <INA3221_read_reg+0x68>)
 80008ba:	f00a fd3f 	bl	800b33c <HAL_I2C_Master_Transmit>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d118      	bne.n	80008f6 <INA3221_read_reg+0x5e>
	{

		if(HAL_I2C_Master_Receive(I2C,  INA3221_ADDR_0 << 1, data, 2, 100) == HAL_OK)
 80008c4:	f107 0208 	add.w	r2, r7, #8
 80008c8:	2364      	movs	r3, #100	@ 0x64
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2302      	movs	r3, #2
 80008ce:	2180      	movs	r1, #128	@ 0x80
 80008d0:	480b      	ldr	r0, [pc, #44]	@ (8000900 <INA3221_read_reg+0x68>)
 80008d2:	f00a fe4b 	bl	800b56c <HAL_I2C_Master_Receive>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d10c      	bne.n	80008f6 <INA3221_read_reg+0x5e>
		{
			result = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 80008e0:	7a3b      	ldrb	r3, [r7, #8]
 80008e2:	b21b      	sxth	r3, r3
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	b21a      	sxth	r2, r3
 80008e8:	7a7b      	ldrb	r3, [r7, #9]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b21b      	sxth	r3, r3
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 80008f6:	68fb      	ldr	r3, [r7, #12]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000160 	.word	0x20000160

08000904 <INA3221_write_reg>:


int INA3221_write_reg(uint8_t reg, uint16_t wdata)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af02      	add	r7, sp, #8
 800090a:	4603      	mov	r3, r0
 800090c:	460a      	mov	r2, r1
 800090e:	71fb      	strb	r3, [r7, #7]
 8000910:	4613      	mov	r3, r2
 8000912:	80bb      	strh	r3, [r7, #4]
    int result = -1;
 8000914:	f04f 33ff 	mov.w	r3, #4294967295
 8000918:	60fb      	str	r3, [r7, #12]
    uint8_t data[3];
    
    data[0] = reg;                    
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	723b      	strb	r3, [r7, #8]
    data[1] = (wdata >> 8);          
 800091e:	88bb      	ldrh	r3, [r7, #4]
 8000920:	0a1b      	lsrs	r3, r3, #8
 8000922:	b29b      	uxth	r3, r3
 8000924:	b2db      	uxtb	r3, r3
 8000926:	727b      	strb	r3, [r7, #9]
    data[2] = (wdata & 0xFF);        
 8000928:	88bb      	ldrh	r3, [r7, #4]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	72bb      	strb	r3, [r7, #10]

    if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, data, 3, 100) == HAL_OK)
 800092e:	f107 0208 	add.w	r2, r7, #8
 8000932:	2364      	movs	r3, #100	@ 0x64
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2303      	movs	r3, #3
 8000938:	2180      	movs	r1, #128	@ 0x80
 800093a:	4806      	ldr	r0, [pc, #24]	@ (8000954 <INA3221_write_reg+0x50>)
 800093c:	f00a fcfe 	bl	800b33c <HAL_I2C_Master_Transmit>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d101      	bne.n	800094a <INA3221_write_reg+0x46>
    {
        result = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
    }
    
    return result;
 800094a:	68fb      	ldr	r3, [r7, #12]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000160 	.word	0x20000160

08000958 <RTC_Init>:
#include "RTC.h"


/*-----INIZiALIZZAZIONE ORA RTC-----*/
void RTC_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
	for (int retry = 0; retry < 3; retry++)
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	e00b      	b.n	800097c <RTC_Init+0x24>
	{
		if (Get_DateTime_From_Network())
 8000964:	f000 f814 	bl	8000990 <Get_DateTime_From_Network>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d10c      	bne.n	8000988 <RTC_Init+0x30>
		{
			return;
		}
		HAL_Delay(1000);
 800096e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000972:	f008 fa73 	bl	8008e5c <HAL_Delay>
	for (int retry = 0; retry < 3; retry++)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3301      	adds	r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b02      	cmp	r3, #2
 8000980:	ddf0      	ble.n	8000964 <RTC_Init+0xc>
	}
	Set_Default_DateTime();
 8000982:	f000 f8f1 	bl	8000b68 <Set_Default_DateTime>
 8000986:	e000      	b.n	800098a <RTC_Init+0x32>
			return;
 8000988:	bf00      	nop
}
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <Get_DateTime_From_Network>:

/*-----SINCRONIZZAZIONE RTC DA RETE-----*/
int Get_DateTime_From_Network(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b0a2      	sub	sp, #136	@ 0x88
 8000994:	af00      	add	r7, sp, #0
	char response[100] = {0};
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	2264      	movs	r2, #100	@ 0x64
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f012 f850 	bl	8012a44 <memset>
	RTC_DateTypeDef sDate = {0};
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]
	RTC_TimeTypeDef sTime = {0};
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

	SIM_Send_Command("AT+CCLK?\r");
 80009b6:	4869      	ldr	r0, [pc, #420]	@ (8000b5c <Get_DateTime_From_Network+0x1cc>)
 80009b8:	f000 fb38 	bl	800102c <SIM_Send_Command>
	SIM_Receive_Response(response);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fb5f 	bl	8001084 <SIM_Receive_Response>

    char* cclk_pos = strstr(response, "+CCLK: \"");
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4965      	ldr	r1, [pc, #404]	@ (8000b60 <Get_DateTime_From_Network+0x1d0>)
 80009cc:	4618      	mov	r0, r3
 80009ce:	f012 f873 	bl	8012ab8 <strstr>
 80009d2:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (cclk_pos == NULL)
 80009d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d101      	bne.n	80009e2 <Get_DateTime_From_Network+0x52>
	{
        return 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	e0b8      	b.n	8000b54 <Get_DateTime_From_Network+0x1c4>
    }

    char* time_start = cclk_pos + 8;
 80009e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80009e6:	3308      	adds	r3, #8
 80009e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    if (strlen(time_start) < 17)
 80009ec:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80009f0:	f7ff fbf8 	bl	80001e4 <strlen>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b10      	cmp	r3, #16
 80009f8:	d801      	bhi.n	80009fe <Get_DateTime_From_Network+0x6e>
	{
		return 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e0aa      	b.n	8000b54 <Get_DateTime_From_Network+0x1c4>
	}

	sDate.Year = (time_start[0] - '0') * 10 + (time_start[1] - '0');
 80009fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	3b30      	subs	r3, #48	@ 0x30
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	461a      	mov	r2, r3
 8000a0a:	0092      	lsls	r2, r2, #2
 8000a0c:	4413      	add	r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a16:	3301      	adds	r3, #1
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	3b30      	subs	r3, #48	@ 0x30
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	76fb      	strb	r3, [r7, #27]
	sDate.Month = (time_start[3] - '0') * 10 + (time_start[4] - '0');
 8000a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a28:	3303      	adds	r3, #3
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	3b30      	subs	r3, #48	@ 0x30
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	461a      	mov	r2, r3
 8000a32:	0092      	lsls	r2, r2, #2
 8000a34:	4413      	add	r3, r2
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a3e:	3304      	adds	r3, #4
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	3b30      	subs	r3, #48	@ 0x30
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	767b      	strb	r3, [r7, #25]
	sDate.Date = (time_start[6] - '0') * 10 + (time_start[7] - '0');
 8000a4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a50:	3306      	adds	r3, #6
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	3b30      	subs	r3, #48	@ 0x30
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	461a      	mov	r2, r3
 8000a5a:	0092      	lsls	r2, r2, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a66:	3307      	adds	r3, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	3b30      	subs	r3, #48	@ 0x30
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	76bb      	strb	r3, [r7, #26]

	sTime.Hours = (time_start[9] - '0') * 10 + (time_start[10] - '0');
 8000a74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a78:	3309      	adds	r3, #9
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	3b30      	subs	r3, #48	@ 0x30
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	461a      	mov	r2, r3
 8000a82:	0092      	lsls	r2, r2, #2
 8000a84:	4413      	add	r3, r2
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a8e:	330a      	adds	r3, #10
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	3b30      	subs	r3, #48	@ 0x30
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = (time_start[12] - '0') * 10 + (time_start[13] - '0');
 8000a9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000aa0:	330c      	adds	r3, #12
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	3b30      	subs	r3, #48	@ 0x30
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	0092      	lsls	r2, r2, #2
 8000aac:	4413      	add	r3, r2
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000ab6:	330d      	adds	r3, #13
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	3b30      	subs	r3, #48	@ 0x30
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = (time_start[15] - '0') * 10 + (time_start[16] - '0');
 8000ac4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000ac8:	330f      	adds	r3, #15
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	3b30      	subs	r3, #48	@ 0x30
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	0092      	lsls	r2, r2, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000ade:	3310      	adds	r3, #16
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	3b30      	subs	r3, #48	@ 0x30
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	71bb      	strb	r3, [r7, #6]

	if (sDate.Month < 1 || sDate.Month > 12 ||
 8000aec:	7e7b      	ldrb	r3, [r7, #25]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d011      	beq.n	8000b16 <Get_DateTime_From_Network+0x186>
 8000af2:	7e7b      	ldrb	r3, [r7, #25]
 8000af4:	2b0c      	cmp	r3, #12
 8000af6:	d80e      	bhi.n	8000b16 <Get_DateTime_From_Network+0x186>
        sDate.Date < 1 || sDate.Date > 31 ||
 8000af8:	7ebb      	ldrb	r3, [r7, #26]
	if (sDate.Month < 1 || sDate.Month > 12 ||
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d00b      	beq.n	8000b16 <Get_DateTime_From_Network+0x186>
        sDate.Date < 1 || sDate.Date > 31 ||
 8000afe:	7ebb      	ldrb	r3, [r7, #26]
 8000b00:	2b1f      	cmp	r3, #31
 8000b02:	d808      	bhi.n	8000b16 <Get_DateTime_From_Network+0x186>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 8000b04:	793b      	ldrb	r3, [r7, #4]
        sDate.Date < 1 || sDate.Date > 31 ||
 8000b06:	2b17      	cmp	r3, #23
 8000b08:	d805      	bhi.n	8000b16 <Get_DateTime_From_Network+0x186>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 8000b0a:	797b      	ldrb	r3, [r7, #5]
 8000b0c:	2b3b      	cmp	r3, #59	@ 0x3b
 8000b0e:	d802      	bhi.n	8000b16 <Get_DateTime_From_Network+0x186>
 8000b10:	79bb      	ldrb	r3, [r7, #6]
 8000b12:	2b3b      	cmp	r3, #59	@ 0x3b
 8000b14:	d901      	bls.n	8000b1a <Get_DateTime_From_Network+0x18a>
        return 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	e01c      	b.n	8000b54 <Get_DateTime_From_Network+0x1c4>
    }

	sDate.WeekDay = Calculate_Weekday(sDate.Year + 2000, sDate.Month, sDate.Date);
 8000b1a:	7efb      	ldrb	r3, [r7, #27]
 8000b1c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	7e79      	ldrb	r1, [r7, #25]
 8000b24:	7eba      	ldrb	r2, [r7, #26]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f850 	bl	8000bcc <Calculate_Weekday>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	763b      	strb	r3, [r7, #24]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000b38:	f107 0318 	add.w	r3, r7, #24
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4808      	ldr	r0, [pc, #32]	@ (8000b64 <Get_DateTime_From_Network+0x1d4>)
 8000b42:	f00d fa4a 	bl	800dfda <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4805      	ldr	r0, [pc, #20]	@ (8000b64 <Get_DateTime_From_Network+0x1d4>)
 8000b4e:	f00d f94b 	bl	800dde8 <HAL_RTC_SetTime>
	return 1;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3788      	adds	r7, #136	@ 0x88
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	08013bfc 	.word	0x08013bfc
 8000b60:	08013c08 	.word	0x08013c08
 8000b64:	200001f8 	.word	0x200001f8

08000b68 <Set_Default_DateTime>:

/*-----DATA E ORA DI DEFAULT 1/1/2020 00:00:00-----*/
void Set_Default_DateTime(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
    RTC_DateTypeDef sDate = {0};
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
    RTC_TimeTypeDef sTime = {0};
 8000b72:	463b      	mov	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]

    // Default: 01/01/2020 00:00:00
    sDate.Year = 20;  // 2020
 8000b80:	2314      	movs	r3, #20
 8000b82:	75fb      	strb	r3, [r7, #23]
    sDate.Month = RTC_MONTH_JANUARY;
 8000b84:	2301      	movs	r3, #1
 8000b86:	757b      	strb	r3, [r7, #21]
    sDate.Date = 1;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	75bb      	strb	r3, [r7, #22]
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY; // 1 Jan 2020 era mercoledì
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	753b      	strb	r3, [r7, #20]

    sTime.Hours = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	703b      	strb	r3, [r7, #0]
    sTime.Minutes = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	707b      	strb	r3, [r7, #1]
    sTime.Seconds = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	70bb      	strb	r3, [r7, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]

    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	4619      	mov	r1, r3
 8000bac:	4806      	ldr	r0, [pc, #24]	@ (8000bc8 <Set_Default_DateTime+0x60>)
 8000bae:	f00d fa14 	bl	800dfda <HAL_RTC_SetDate>
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4803      	ldr	r0, [pc, #12]	@ (8000bc8 <Set_Default_DateTime+0x60>)
 8000bba:	f00d f915 	bl	800dde8 <HAL_RTC_SetTime>
}
 8000bbe:	bf00      	nop
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200001f8 	.word	0x200001f8

08000bcc <Calculate_Weekday>:

/*-----CALCOLO GIORNO SETTIMANA-----*/
uint8_t Calculate_Weekday(uint16_t year, uint8_t month, uint8_t day)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	80fb      	strh	r3, [r7, #6]
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	717b      	strb	r3, [r7, #5]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	713b      	strb	r3, [r7, #4]
    // Algoritmo di Zeller per calcolo giorno settimana
    if (month < 3) {
 8000bde:	797b      	ldrb	r3, [r7, #5]
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d805      	bhi.n	8000bf0 <Calculate_Weekday+0x24>
        month += 12;
 8000be4:	797b      	ldrb	r3, [r7, #5]
 8000be6:	330c      	adds	r3, #12
 8000be8:	717b      	strb	r3, [r7, #5]
        year--;
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	80fb      	strh	r3, [r7, #6]
    }
    uint8_t zeller_day = (day + ((13 * (month + 1)) / 5) + year + (year / 4) - (year / 100) + (year / 400)) % 7;
 8000bf0:	7939      	ldrb	r1, [r7, #4]
 8000bf2:	797b      	ldrb	r3, [r7, #5]
 8000bf4:	1c5a      	adds	r2, r3, #1
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	4413      	add	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a1e      	ldr	r2, [pc, #120]	@ (8000c7c <Calculate_Weekday+0xb0>)
 8000c02:	fb82 0203 	smull	r0, r2, r2, r3
 8000c06:	1052      	asrs	r2, r2, #1
 8000c08:	17db      	asrs	r3, r3, #31
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	18ca      	adds	r2, r1, r3
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	4413      	add	r3, r2
 8000c12:	88fa      	ldrh	r2, [r7, #6]
 8000c14:	0892      	lsrs	r2, r2, #2
 8000c16:	b292      	uxth	r2, r2
 8000c18:	4413      	add	r3, r2
 8000c1a:	88fa      	ldrh	r2, [r7, #6]
 8000c1c:	4918      	ldr	r1, [pc, #96]	@ (8000c80 <Calculate_Weekday+0xb4>)
 8000c1e:	fba1 1202 	umull	r1, r2, r1, r2
 8000c22:	0952      	lsrs	r2, r2, #5
 8000c24:	b292      	uxth	r2, r2
 8000c26:	1a9b      	subs	r3, r3, r2
 8000c28:	88fa      	ldrh	r2, [r7, #6]
 8000c2a:	4915      	ldr	r1, [pc, #84]	@ (8000c80 <Calculate_Weekday+0xb4>)
 8000c2c:	fba1 1202 	umull	r1, r2, r1, r2
 8000c30:	09d2      	lsrs	r2, r2, #7
 8000c32:	b292      	uxth	r2, r2
 8000c34:	441a      	add	r2, r3
 8000c36:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <Calculate_Weekday+0xb8>)
 8000c38:	fb83 1302 	smull	r1, r3, r3, r2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	1099      	asrs	r1, r3, #2
 8000c40:	17d3      	asrs	r3, r2, #31
 8000c42:	1ac9      	subs	r1, r1, r3
 8000c44:	460b      	mov	r3, r1
 8000c46:	00db      	lsls	r3, r3, #3
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	1ad1      	subs	r1, r2, r3
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	73fb      	strb	r3, [r7, #15]

    uint8_t hal_weekday_map[] = {RTC_WEEKDAY_SATURDAY, RTC_WEEKDAY_SUNDAY, RTC_WEEKDAY_MONDAY,
 8000c50:	4a0d      	ldr	r2, [pc, #52]	@ (8000c88 <Calculate_Weekday+0xbc>)
 8000c52:	f107 0308 	add.w	r3, r7, #8
 8000c56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c5a:	6018      	str	r0, [r3, #0]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	8019      	strh	r1, [r3, #0]
 8000c60:	3302      	adds	r3, #2
 8000c62:	0c0a      	lsrs	r2, r1, #16
 8000c64:	701a      	strb	r2, [r3, #0]
                                 RTC_WEEKDAY_TUESDAY, RTC_WEEKDAY_WEDNESDAY, RTC_WEEKDAY_THURSDAY, RTC_WEEKDAY_FRIDAY};

    return hal_weekday_map[zeller_day];
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	3310      	adds	r3, #16
 8000c6a:	443b      	add	r3, r7
 8000c6c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	66666667 	.word	0x66666667
 8000c80:	51eb851f 	.word	0x51eb851f
 8000c84:	92492493 	.word	0x92492493
 8000c88:	08013c14 	.word	0x08013c14

08000c8c <SIM_Init>:
#include <stdlib.h>
#include <SIM7000.h>

/*------INIZIALIZZAZIONE DEL MODULO LTE------*/
void SIM_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000c92:	af00      	add	r7, sp, #0
	char command[256];
	char response[256];
	sprintf(sys.apn, "a");
 8000c94:	49b3      	ldr	r1, [pc, #716]	@ (8000f64 <SIM_Init+0x2d8>)
 8000c96:	48b4      	ldr	r0, [pc, #720]	@ (8000f68 <SIM_Init+0x2dc>)
 8000c98:	f011 fe74 	bl	8012984 <siprintf>
	sprintf(sys.MQTT.clientID, "a");
 8000c9c:	49b1      	ldr	r1, [pc, #708]	@ (8000f64 <SIM_Init+0x2d8>)
 8000c9e:	48b3      	ldr	r0, [pc, #716]	@ (8000f6c <SIM_Init+0x2e0>)
 8000ca0:	f011 fe70 	bl	8012984 <siprintf>
	sprintf(sys.MQTT.server_name, "a");
 8000ca4:	49af      	ldr	r1, [pc, #700]	@ (8000f64 <SIM_Init+0x2d8>)
 8000ca6:	48b2      	ldr	r0, [pc, #712]	@ (8000f70 <SIM_Init+0x2e4>)
 8000ca8:	f011 fe6c 	bl	8012984 <siprintf>
	sprintf(sys.MQTT.port, "a");
 8000cac:	49ad      	ldr	r1, [pc, #692]	@ (8000f64 <SIM_Init+0x2d8>)
 8000cae:	48b1      	ldr	r0, [pc, #708]	@ (8000f74 <SIM_Init+0x2e8>)
 8000cb0:	f011 fe68 	bl	8012984 <siprintf>
	sprintf(sys.MQTT.username, "a");
 8000cb4:	49ab      	ldr	r1, [pc, #684]	@ (8000f64 <SIM_Init+0x2d8>)
 8000cb6:	48b0      	ldr	r0, [pc, #704]	@ (8000f78 <SIM_Init+0x2ec>)
 8000cb8:	f011 fe64 	bl	8012984 <siprintf>
	sprintf(sys.MQTT.password, "a");
 8000cbc:	49a9      	ldr	r1, [pc, #676]	@ (8000f64 <SIM_Init+0x2d8>)
 8000cbe:	48af      	ldr	r0, [pc, #700]	@ (8000f7c <SIM_Init+0x2f0>)
 8000cc0:	f011 fe60 	bl	8012984 <siprintf>
	strcpy(sys.MQTT.Data_Topic, config.data_topic);
 8000cc4:	49ae      	ldr	r1, [pc, #696]	@ (8000f80 <SIM_Init+0x2f4>)
 8000cc6:	48af      	ldr	r0, [pc, #700]	@ (8000f84 <SIM_Init+0x2f8>)
 8000cc8:	f011 ff38 	bl	8012b3c <strcpy>
	strcpy(sys.MQTT.Command_Topic, config.command_topic);
 8000ccc:	49ae      	ldr	r1, [pc, #696]	@ (8000f88 <SIM_Init+0x2fc>)
 8000cce:	48af      	ldr	r0, [pc, #700]	@ (8000f8c <SIM_Init+0x300>)
 8000cd0:	f011 ff34 	bl	8012b3c <strcpy>
	strcpy(sys.MQTT.OTA_Topic, config.ota_topic);
 8000cd4:	49ae      	ldr	r1, [pc, #696]	@ (8000f90 <SIM_Init+0x304>)
 8000cd6:	48af      	ldr	r0, [pc, #700]	@ (8000f94 <SIM_Init+0x308>)
 8000cd8:	f011 ff30 	bl	8012b3c <strcpy>

	SIM_Power_On();
 8000cdc:	f000 f990 	bl	8001000 <SIM_Power_On>
	HAL_Delay(5000);
 8000ce0:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000ce4:	f008 f8ba 	bl	8008e5c <HAL_Delay>

	SIM_Send_Command("AT\r");                                                                     //Verifica comunicazione
 8000ce8:	48ab      	ldr	r0, [pc, #684]	@ (8000f98 <SIM_Init+0x30c>)
 8000cea:	f000 f99f 	bl	800102c <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f9c6 	bl	8001084 <SIM_Receive_Response>
	if(strstr(response, "OK") == NULL)
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	49a7      	ldr	r1, [pc, #668]	@ (8000f9c <SIM_Init+0x310>)
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f011 feda 	bl	8012ab8 <strstr>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <SIM_Init+0x82>
	{
		while(1);
 8000d0a:	bf00      	nop
 8000d0c:	e7fd      	b.n	8000d0a <SIM_Init+0x7e>
	}

	SIM_Send_Command("AT+IPR=921600\r");                                                          //Baudrate a 921600
 8000d0e:	48a4      	ldr	r0, [pc, #656]	@ (8000fa0 <SIM_Init+0x314>)
 8000d10:	f000 f98c 	bl	800102c <SIM_Send_Command>
	huart1.Init.BaudRate = 921600;
 8000d14:	4ba3      	ldr	r3, [pc, #652]	@ (8000fa4 <SIM_Init+0x318>)
 8000d16:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8000d1a:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(LTE_UART);
 8000d1c:	48a1      	ldr	r0, [pc, #644]	@ (8000fa4 <SIM_Init+0x318>)
 8000d1e:	f010 fad7 	bl	80112d0 <HAL_UART_Init>

	SIM_Send_Command("AT+CFUN=1\r");                                                              //Full functionality
 8000d22:	48a1      	ldr	r0, [pc, #644]	@ (8000fa8 <SIM_Init+0x31c>)
 8000d24:	f000 f982 	bl	800102c <SIM_Send_Command>

	SIM_Send_Command("AT+CNMP=38\r");                                                             //Modalità solo LTE o NB-IoT
 8000d28:	48a0      	ldr	r0, [pc, #640]	@ (8000fac <SIM_Init+0x320>)
 8000d2a:	f000 f97f 	bl	800102c <SIM_Send_Command>

	SIM_Send_Command("AT+CMNB=2\r");                                                              //NB-IoT
 8000d2e:	48a0      	ldr	r0, [pc, #640]	@ (8000fb0 <SIM_Init+0x324>)
 8000d30:	f000 f97c 	bl	800102c <SIM_Send_Command>

	SIM_Send_Command("AT+NBSC=1\r");                                                              //Abilitazione scrambling feature DA VEDERE SE L'OPERATORE LA RICHIEDE
 8000d34:	489f      	ldr	r0, [pc, #636]	@ (8000fb4 <SIM_Init+0x328>)
 8000d36:	f000 f979 	bl	800102c <SIM_Send_Command>

	SIM_Send_Command("AT+CEREG?\r");                                                              //Controllo registrazione alla rete
 8000d3a:	489f      	ldr	r0, [pc, #636]	@ (8000fb8 <SIM_Init+0x32c>)
 8000d3c:	f000 f976 	bl	800102c <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 f99d 	bl	8001084 <SIM_Receive_Response>
	int stat = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
	int n, stat_value;
	if(strstr(response, "+CEREG: ") != NULL)
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	4999      	ldr	r1, [pc, #612]	@ (8000fbc <SIM_Init+0x330>)
 8000d56:	4618      	mov	r0, r3
 8000d58:	f011 feae 	bl	8012ab8 <strstr>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d03a      	beq.n	8000dd8 <SIM_Init+0x14c>
	{
		while(stat != 1)
 8000d62:	e035      	b.n	8000dd0 <SIM_Init+0x144>
		{
			if(sscanf(response, "+CEREG: %d,%d", &n, &stat_value) >= 2) 
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	f107 0208 	add.w	r2, r7, #8
 8000d6a:	f107 000c 	add.w	r0, r7, #12
 8000d6e:	4994      	ldr	r1, [pc, #592]	@ (8000fc0 <SIM_Init+0x334>)
 8000d70:	f011 fe2a 	bl	80129c8 <siscanf>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	dd1e      	ble.n	8000db8 <SIM_Init+0x12c>
			{
				if(stat_value == 1 || stat_value == 5)
 8000d7a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000d7e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d006      	beq.n	8000d96 <SIM_Init+0x10a>
 8000d88:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000d8c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b05      	cmp	r3, #5
 8000d94:	d103      	bne.n	8000d9e <SIM_Init+0x112>
			    {
					 stat = 1;
 8000d96:	2301      	movs	r3, #1
 8000d98:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8000d9c:	e018      	b.n	8000dd0 <SIM_Init+0x144>
				}
				 else
				{
					SIM_Send_Command("AT+CEREG?\r");
 8000d9e:	4886      	ldr	r0, [pc, #536]	@ (8000fb8 <SIM_Init+0x32c>)
 8000da0:	f000 f944 	bl	800102c <SIM_Send_Command>
					SIM_Receive_Response(response);
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 f96b 	bl	8001084 <SIM_Receive_Response>
					HAL_Delay(1000);
 8000dae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000db2:	f008 f853 	bl	8008e5c <HAL_Delay>
 8000db6:	e00b      	b.n	8000dd0 <SIM_Init+0x144>
				}
			}
			else  
			{
				SIM_Send_Command("AT+CEREG?\r");
 8000db8:	487f      	ldr	r0, [pc, #508]	@ (8000fb8 <SIM_Init+0x32c>)
 8000dba:	f000 f937 	bl	800102c <SIM_Send_Command>
				SIM_Receive_Response(response);
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f95e 	bl	8001084 <SIM_Receive_Response>
				HAL_Delay(1000);
 8000dc8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dcc:	f008 f846 	bl	8008e5c <HAL_Delay>
		while(stat != 1)
 8000dd0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d1c5      	bne.n	8000d64 <SIM_Init+0xd8>
			}
		}

	}

	sprintf(command, "AT+CGDCONT=1,\"IP\",\"%s\"\r", sys.apn);                                    //Configurazione APN
 8000dd8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ddc:	4a62      	ldr	r2, [pc, #392]	@ (8000f68 <SIM_Init+0x2dc>)
 8000dde:	4979      	ldr	r1, [pc, #484]	@ (8000fc4 <SIM_Init+0x338>)
 8000de0:	4618      	mov	r0, r3
 8000de2:	f011 fdcf 	bl	8012984 <siprintf>
	SIM_Send_Command(command);
 8000de6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 f91e 	bl	800102c <SIM_Send_Command>

	SIM_Send_Command("AT+CNACT=1\r");                                                             //Attivazione della rete
 8000df0:	4875      	ldr	r0, [pc, #468]	@ (8000fc8 <SIM_Init+0x33c>)
 8000df2:	f000 f91b 	bl	800102c <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 f942 	bl	8001084 <SIM_Receive_Response>
	if(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	4971      	ldr	r1, [pc, #452]	@ (8000fcc <SIM_Init+0x340>)
 8000e06:	4618      	mov	r0, r3
 8000e08:	f011 fe56 	bl	8012ab8 <strstr>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d115      	bne.n	8000e3e <SIM_Init+0x1b2>
	{
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8000e12:	e00b      	b.n	8000e2c <SIM_Init+0x1a0>
		{
			SIM_Send_Command("AT+CNACT=1\r");
 8000e14:	486c      	ldr	r0, [pc, #432]	@ (8000fc8 <SIM_Init+0x33c>)
 8000e16:	f000 f909 	bl	800102c <SIM_Send_Command>
			SIM_Receive_Response(response);
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f930 	bl	8001084 <SIM_Receive_Response>
			HAL_Delay(1000);
 8000e24:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e28:	f008 f818 	bl	8008e5c <HAL_Delay>
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	4966      	ldr	r1, [pc, #408]	@ (8000fcc <SIM_Init+0x340>)
 8000e32:	4618      	mov	r0, r3
 8000e34:	f011 fe40 	bl	8012ab8 <strstr>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d0ea      	beq.n	8000e14 <SIM_Init+0x188>
		}
	}

	SIM_Send_Command("AT+CNACT?\r");                                                              //Verifica indirizzo IP
 8000e3e:	4864      	ldr	r0, [pc, #400]	@ (8000fd0 <SIM_Init+0x344>)
 8000e40:	f000 f8f4 	bl	800102c <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 f91b 	bl	8001084 <SIM_Receive_Response>
	while(!SIM_Check_IP(response))
 8000e4e:	e00b      	b.n	8000e68 <SIM_Init+0x1dc>
	{
		SIM_Send_Command("AT+CNACT?\r");
 8000e50:	485f      	ldr	r0, [pc, #380]	@ (8000fd0 <SIM_Init+0x344>)
 8000e52:	f000 f8eb 	bl	800102c <SIM_Send_Command>
		SIM_Receive_Response(response);
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f912 	bl	8001084 <SIM_Receive_Response>
		HAL_Delay(1000);
 8000e60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e64:	f007 fffa 	bl	8008e5c <HAL_Delay>
	while(!SIM_Check_IP(response))
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 f921 	bl	80010b4 <SIM_Check_IP>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0eb      	beq.n	8000e50 <SIM_Init+0x1c4>
	}

	sprintf(command, "AT+SMCONF=\"URL\",\"%s\",%s\r", sys.MQTT.server_name, sys.MQTT.port);       //Configurazione MQTT
 8000e78:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8000e7c:	4b3d      	ldr	r3, [pc, #244]	@ (8000f74 <SIM_Init+0x2e8>)
 8000e7e:	4a3c      	ldr	r2, [pc, #240]	@ (8000f70 <SIM_Init+0x2e4>)
 8000e80:	4954      	ldr	r1, [pc, #336]	@ (8000fd4 <SIM_Init+0x348>)
 8000e82:	f011 fd7f 	bl	8012984 <siprintf>
	SIM_Send_Command(command);
 8000e86:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f8ce 	bl	800102c <SIM_Send_Command>

	sprintf(command, "AT+SMCONF=\"CLIENTID\",\"%s\"\r", sys.MQTT.clientID);
 8000e90:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000e94:	4a35      	ldr	r2, [pc, #212]	@ (8000f6c <SIM_Init+0x2e0>)
 8000e96:	4950      	ldr	r1, [pc, #320]	@ (8000fd8 <SIM_Init+0x34c>)
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f011 fd73 	bl	8012984 <siprintf>
	SIM_Send_Command(command);
 8000e9e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f8c2 	bl	800102c <SIM_Send_Command>

	SIM_Send_Command("AT+SMCONF=\"KEEPTIME\",60\r");
 8000ea8:	484c      	ldr	r0, [pc, #304]	@ (8000fdc <SIM_Init+0x350>)
 8000eaa:	f000 f8bf 	bl	800102c <SIM_Send_Command>

	sprintf(command, "AT+SMCONF=\"USERNAME\",\"%s\"\r", sys.MQTT.username);
 8000eae:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000eb2:	4a31      	ldr	r2, [pc, #196]	@ (8000f78 <SIM_Init+0x2ec>)
 8000eb4:	494a      	ldr	r1, [pc, #296]	@ (8000fe0 <SIM_Init+0x354>)
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f011 fd64 	bl	8012984 <siprintf>
	SIM_Send_Command(command);
 8000ebc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 f8b3 	bl	800102c <SIM_Send_Command>

	sprintf(command, "AT+SMCONF=\"PASSWORD\",\"%s\"\r", sys.MQTT.password);
 8000ec6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000eca:	4a2c      	ldr	r2, [pc, #176]	@ (8000f7c <SIM_Init+0x2f0>)
 8000ecc:	4945      	ldr	r1, [pc, #276]	@ (8000fe4 <SIM_Init+0x358>)
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f011 fd58 	bl	8012984 <siprintf>
	SIM_Send_Command(command);
 8000ed4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 f8a7 	bl	800102c <SIM_Send_Command>

	SIM_Send_Command("AT+SMCONF=\"QOS\",1\r");
 8000ede:	4842      	ldr	r0, [pc, #264]	@ (8000fe8 <SIM_Init+0x35c>)
 8000ee0:	f000 f8a4 	bl	800102c <SIM_Send_Command>

	SIM_Send_Command("AT+SMCONF=\"RETAIN\",0\r");
 8000ee4:	4841      	ldr	r0, [pc, #260]	@ (8000fec <SIM_Init+0x360>)
 8000ee6:	f000 f8a1 	bl	800102c <SIM_Send_Command>

	sprintf(command, "AT+SMCONF=\"TOPIC\",\"%s\"\r", sys.MQTT.Data_Topic);
 8000eea:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000eee:	4a25      	ldr	r2, [pc, #148]	@ (8000f84 <SIM_Init+0x2f8>)
 8000ef0:	493f      	ldr	r1, [pc, #252]	@ (8000ff0 <SIM_Init+0x364>)
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f011 fd46 	bl	8012984 <siprintf>
	SIM_Send_Command(command);
 8000ef8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 f895 	bl	800102c <SIM_Send_Command>

	SIM_Send_Command("AT+SMCONN\r");                                                              //Connessione al server MQTT
 8000f02:	483c      	ldr	r0, [pc, #240]	@ (8000ff4 <SIM_Init+0x368>)
 8000f04:	f000 f892 	bl	800102c <SIM_Send_Command>

	SIM_Send_Command("AT+SMSTATE?\r");                                                            //Verifica connessione al server MQTT
 8000f08:	483b      	ldr	r0, [pc, #236]	@ (8000ff8 <SIM_Init+0x36c>)
 8000f0a:	f000 f88f 	bl	800102c <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000f0e:	f107 030c 	add.w	r3, r7, #12
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f8b6 	bl	8001084 <SIM_Receive_Response>
	while(!SIM_Check_MQTT_State(response))
 8000f18:	e00b      	b.n	8000f32 <SIM_Init+0x2a6>
	{
		SIM_Send_Command("AT+SMSTATE?\r");
 8000f1a:	4837      	ldr	r0, [pc, #220]	@ (8000ff8 <SIM_Init+0x36c>)
 8000f1c:	f000 f886 	bl	800102c <SIM_Send_Command>
		SIM_Receive_Response(response);
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 f8ad 	bl	8001084 <SIM_Receive_Response>
		HAL_Delay(1000);
 8000f2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f2e:	f007 ff95 	bl	8008e5c <HAL_Delay>
	while(!SIM_Check_MQTT_State(response))
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f8e6 	bl	8001108 <SIM_Check_MQTT_State>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d0eb      	beq.n	8000f1a <SIM_Init+0x28e>
	}

	sprintf(command, "AT+SMSUB=\"%s\",1\r", sys.MQTT.Command_Topic);                              //Iscrizione al topic per ricezione comandi dal server
 8000f42:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f46:	4a11      	ldr	r2, [pc, #68]	@ (8000f8c <SIM_Init+0x300>)
 8000f48:	492c      	ldr	r1, [pc, #176]	@ (8000ffc <SIM_Init+0x370>)
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f011 fd1a 	bl	8012984 <siprintf>
	SIM_Send_Command(command);
 8000f50:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 f869 	bl	800102c <SIM_Send_Command>
}
 8000f5a:	bf00      	nop
 8000f5c:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	08013c1c 	.word	0x08013c1c
 8000f68:	200015f0 	.word	0x200015f0
 8000f6c:	200017f0 	.word	0x200017f0
 8000f70:	20001660 	.word	0x20001660
 8000f74:	200016c4 	.word	0x200016c4
 8000f78:	20001728 	.word	0x20001728
 8000f7c:	2000178c 	.word	0x2000178c
 8000f80:	200019ec 	.word	0x200019ec
 8000f84:	20001854 	.word	0x20001854
 8000f88:	20001a2c 	.word	0x20001a2c
 8000f8c:	200018b8 	.word	0x200018b8
 8000f90:	20001a6c 	.word	0x20001a6c
 8000f94:	2000191c 	.word	0x2000191c
 8000f98:	08013c20 	.word	0x08013c20
 8000f9c:	08013c24 	.word	0x08013c24
 8000fa0:	08013c28 	.word	0x08013c28
 8000fa4:	2000049c 	.word	0x2000049c
 8000fa8:	08013c38 	.word	0x08013c38
 8000fac:	08013c44 	.word	0x08013c44
 8000fb0:	08013c50 	.word	0x08013c50
 8000fb4:	08013c5c 	.word	0x08013c5c
 8000fb8:	08013c68 	.word	0x08013c68
 8000fbc:	08013c74 	.word	0x08013c74
 8000fc0:	08013c80 	.word	0x08013c80
 8000fc4:	08013c90 	.word	0x08013c90
 8000fc8:	08013ca8 	.word	0x08013ca8
 8000fcc:	08013cb4 	.word	0x08013cb4
 8000fd0:	08013cc8 	.word	0x08013cc8
 8000fd4:	08013cd4 	.word	0x08013cd4
 8000fd8:	08013cf0 	.word	0x08013cf0
 8000fdc:	08013d0c 	.word	0x08013d0c
 8000fe0:	08013d28 	.word	0x08013d28
 8000fe4:	08013d44 	.word	0x08013d44
 8000fe8:	08013d60 	.word	0x08013d60
 8000fec:	08013d74 	.word	0x08013d74
 8000ff0:	08013d8c 	.word	0x08013d8c
 8000ff4:	08013da4 	.word	0x08013da4
 8000ff8:	08013db0 	.word	0x08013db0
 8000ffc:	08013dc0 	.word	0x08013dc0

08001000 <SIM_Power_On>:

/*------ACCENSIONE DEL MODULO LTE------*/
void SIM_Power_On(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800100a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100e:	f00a f8e1 	bl	800b1d4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001012:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001016:	f007 ff21 	bl	8008e5c <HAL_Delay>
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001020:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001024:	f00a f8d6 	bl	800b1d4 <HAL_GPIO_WritePin>
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <SIM_Send_Command>:
	HAL_GPIO_WritePin(LTE_RESET_GPIO_Port, LTE_RESET_Pin, GPIO_PIN_RESET);
}

/*------INVIO COMANDO AL MODULO LTE------*/
void SIM_Send_Command(char* command)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff f8d5 	bl	80001e4 <strlen>
 800103a:	4603      	mov	r3, r0
 800103c:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(LTE_UART, (uint8_t*)command, len, 100);
 800103e:	89fa      	ldrh	r2, [r7, #14]
 8001040:	2364      	movs	r3, #100	@ 0x64
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	4803      	ldr	r0, [pc, #12]	@ (8001054 <SIM_Send_Command+0x28>)
 8001046:	f010 f9e7 	bl	8011418 <HAL_UART_Transmit>
}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000049c 	.word	0x2000049c

08001058 <SIM_Send_Command_DMA>:

/*------INVIO COMANDO AL MODULO LTE (DMA)------*/
void SIM_Send_Command_DMA(char* command)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff f8bf 	bl	80001e4 <strlen>
 8001066:	4603      	mov	r3, r0
 8001068:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit_DMA(LTE_UART, (uint8_t*)command, len);
 800106a:	89fb      	ldrh	r3, [r7, #14]
 800106c:	461a      	mov	r2, r3
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4803      	ldr	r0, [pc, #12]	@ (8001080 <SIM_Send_Command_DMA+0x28>)
 8001072:	f010 fb23 	bl	80116bc <HAL_UART_Transmit_DMA>
}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000049c 	.word	0x2000049c

08001084 <SIM_Receive_Response>:

/*------RICEZIONE RISPOSTA DAL MODULO LTE------*/
void SIM_Receive_Response(char* response)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af02      	add	r7, sp, #8
 800108a:	6078      	str	r0, [r7, #4]
	uint16_t max_size = 256;
 800108c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001090:	81fb      	strh	r3, [r7, #14]
	uint16_t RxLen = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	81bb      	strh	r3, [r7, #12]

	HAL_UARTEx_ReceiveToIdle(LTE_UART, (uint8_t *)response, max_size, &RxLen, 200);
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	89fa      	ldrh	r2, [r7, #14]
 800109c:	21c8      	movs	r1, #200	@ 0xc8
 800109e:	9100      	str	r1, [sp, #0]
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	4803      	ldr	r0, [pc, #12]	@ (80010b0 <SIM_Receive_Response+0x2c>)
 80010a4:	f011 fa8d 	bl	80125c2 <HAL_UARTEx_ReceiveToIdle>
}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	2000049c 	.word	0x2000049c

080010b4 <SIM_Check_IP>:

/*------CONTROLLO INDIRIZZO IP------*/
int SIM_Check_IP(const char* response)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	char* cnact_pos = strstr(response, "+CNACT:");
 80010bc:	4910      	ldr	r1, [pc, #64]	@ (8001100 <SIM_Check_IP+0x4c>)
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f011 fcfa 	bl	8012ab8 <strstr>
 80010c4:	6178      	str	r0, [r7, #20]
    if(cnact_pos != NULL) {
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d014      	beq.n	80010f6 <SIM_Check_IP+0x42>
        int context_id, status;
        if(sscanf(cnact_pos, "+CNACT: %d,%d", &context_id, &status) >= 2) {
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	f107 0210 	add.w	r2, r7, #16
 80010d4:	490b      	ldr	r1, [pc, #44]	@ (8001104 <SIM_Check_IP+0x50>)
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f011 fc76 	bl	80129c8 <siscanf>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b01      	cmp	r3, #1
 80010e0:	dd09      	ble.n	80010f6 <SIM_Check_IP+0x42>
            return (context_id == 1 && status == 1) ? 1 : 0;
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d104      	bne.n	80010f2 <SIM_Check_IP+0x3e>
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d101      	bne.n	80010f2 <SIM_Check_IP+0x3e>
 80010ee:	2301      	movs	r3, #1
 80010f0:	e002      	b.n	80010f8 <SIM_Check_IP+0x44>
 80010f2:	2300      	movs	r3, #0
 80010f4:	e000      	b.n	80010f8 <SIM_Check_IP+0x44>
        }
    }
    return 0;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	08013dd4 	.word	0x08013dd4
 8001104:	08013ddc 	.word	0x08013ddc

08001108 <SIM_Check_MQTT_State>:

/*------CONTROLLO STATO CONNESSIONE MQTT------*/
int SIM_Check_MQTT_State(const char* response)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    char* smstate_pos = strstr(response, "+SMSTATE:");
 8001110:	490e      	ldr	r1, [pc, #56]	@ (800114c <SIM_Check_MQTT_State+0x44>)
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f011 fcd0 	bl	8012ab8 <strstr>
 8001118:	60f8      	str	r0, [r7, #12]
    if(smstate_pos != NULL) {
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d010      	beq.n	8001142 <SIM_Check_MQTT_State+0x3a>
        int mqtt_state;
        if(sscanf(smstate_pos, "+SMSTATE: %d", &mqtt_state) >= 1) {
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	461a      	mov	r2, r3
 8001126:	490a      	ldr	r1, [pc, #40]	@ (8001150 <SIM_Check_MQTT_State+0x48>)
 8001128:	68f8      	ldr	r0, [r7, #12]
 800112a:	f011 fc4d 	bl	80129c8 <siscanf>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	dd06      	ble.n	8001142 <SIM_Check_MQTT_State+0x3a>
            return (mqtt_state == 1) ? 1 : 0;
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2b01      	cmp	r3, #1
 8001138:	bf0c      	ite	eq
 800113a:	2301      	moveq	r3, #1
 800113c:	2300      	movne	r3, #0
 800113e:	b2db      	uxtb	r3, r3
 8001140:	e000      	b.n	8001144 <SIM_Check_MQTT_State+0x3c>
        }
    }
    return 0;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	08013dec 	.word	0x08013dec
 8001150:	08013df8 	.word	0x08013df8

08001154 <SIM_Parse_Command>:

/*------PARSING MESSAGGIO MQTT------*/
void SIM_Parse_Command(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
    char* buf = (char*)sim_rx_buffer;
 800115a:	4b62      	ldr	r3, [pc, #392]	@ (80012e4 <SIM_Parse_Command+0x190>)
 800115c:	61fb      	str	r3, [r7, #28]

    if(strncmp(buf, "+SMSUB: ", 8) == 0)
 800115e:	2208      	movs	r2, #8
 8001160:	4961      	ldr	r1, [pc, #388]	@ (80012e8 <SIM_Parse_Command+0x194>)
 8001162:	69f8      	ldr	r0, [r7, #28]
 8001164:	f011 fc83 	bl	8012a6e <strncmp>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	f040 80b5 	bne.w	80012da <SIM_Parse_Command+0x186>
    {
        char* pos = buf + 8;
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	3308      	adds	r3, #8
 8001174:	61bb      	str	r3, [r7, #24]

        char* first_quote = strchr(pos, '"');
 8001176:	2122      	movs	r1, #34	@ 0x22
 8001178:	69b8      	ldr	r0, [r7, #24]
 800117a:	f011 fc6b 	bl	8012a54 <strchr>
 800117e:	6178      	str	r0, [r7, #20]
        if(first_quote) {
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 80a9 	beq.w	80012da <SIM_Parse_Command+0x186>
            char* second_quote = strchr(first_quote + 1, '"');
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3301      	adds	r3, #1
 800118c:	2122      	movs	r1, #34	@ 0x22
 800118e:	4618      	mov	r0, r3
 8001190:	f011 fc60 	bl	8012a54 <strchr>
 8001194:	6138      	str	r0, [r7, #16]

            if(second_quote) {
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	2b00      	cmp	r3, #0
 800119a:	f000 809e 	beq.w	80012da <SIM_Parse_Command+0x186>
                char* third_quote = strchr(second_quote + 1, '"');
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	3301      	adds	r3, #1
 80011a2:	2122      	movs	r1, #34	@ 0x22
 80011a4:	4618      	mov	r0, r3
 80011a6:	f011 fc55 	bl	8012a54 <strchr>
 80011aa:	60f8      	str	r0, [r7, #12]

                if(third_quote) {
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 8093 	beq.w	80012da <SIM_Parse_Command+0x186>
                    char* cmd_pos = third_quote + 1;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	3301      	adds	r3, #1
 80011b8:	60bb      	str	r3, [r7, #8]
                    char* fourth_quote = strchr(cmd_pos, '"');
 80011ba:	2122      	movs	r1, #34	@ 0x22
 80011bc:	68b8      	ldr	r0, [r7, #8]
 80011be:	f011 fc49 	bl	8012a54 <strchr>
 80011c2:	6078      	str	r0, [r7, #4]

                    if(fourth_quote && (fourth_quote - cmd_pos) >= 3) {
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 8087 	beq.w	80012da <SIM_Parse_Command+0x186>
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	f340 8081 	ble.w	80012da <SIM_Parse_Command+0x186>

                        uint32_t cmd_val = (cmd_pos[2] << 16) | (cmd_pos[1] << 8) | cmd_pos[0];
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	3302      	adds	r3, #2
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	041a      	lsls	r2, r3, #16
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	3301      	adds	r3, #1
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	4313      	orrs	r3, r2
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	7812      	ldrb	r2, [r2, #0]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	603b      	str	r3, [r7, #0]

                        switch(cmd_val) {
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	4a3d      	ldr	r2, [pc, #244]	@ (80012ec <SIM_Parse_Command+0x198>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d069      	beq.n	80012ce <SIM_Parse_Command+0x17a>
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	4a3b      	ldr	r2, [pc, #236]	@ (80012ec <SIM_Parse_Command+0x198>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d868      	bhi.n	80012d4 <SIM_Parse_Command+0x180>
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	4a3a      	ldr	r2, [pc, #232]	@ (80012f0 <SIM_Parse_Command+0x19c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d032      	beq.n	8001270 <SIM_Parse_Command+0x11c>
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	4a39      	ldr	r2, [pc, #228]	@ (80012f4 <SIM_Parse_Command+0x1a0>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d260      	bcs.n	80012d4 <SIM_Parse_Command+0x180>
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	4a38      	ldr	r2, [pc, #224]	@ (80012f8 <SIM_Parse_Command+0x1a4>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d04c      	beq.n	80012b4 <SIM_Parse_Command+0x160>
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	4a37      	ldr	r2, [pc, #220]	@ (80012fc <SIM_Parse_Command+0x1a8>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d258      	bcs.n	80012d4 <SIM_Parse_Command+0x180>
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	4a36      	ldr	r2, [pc, #216]	@ (8001300 <SIM_Parse_Command+0x1ac>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d034      	beq.n	8001294 <SIM_Parse_Command+0x140>
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	4a34      	ldr	r2, [pc, #208]	@ (8001300 <SIM_Parse_Command+0x1ac>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d850      	bhi.n	80012d4 <SIM_Parse_Command+0x180>
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	4a33      	ldr	r2, [pc, #204]	@ (8001304 <SIM_Parse_Command+0x1b0>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d014      	beq.n	8001264 <SIM_Parse_Command+0x110>
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	4a31      	ldr	r2, [pc, #196]	@ (8001304 <SIM_Parse_Command+0x1b0>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d848      	bhi.n	80012d4 <SIM_Parse_Command+0x180>
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	4a30      	ldr	r2, [pc, #192]	@ (8001308 <SIM_Parse_Command+0x1b4>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d018      	beq.n	800127c <SIM_Parse_Command+0x128>
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	4a2e      	ldr	r2, [pc, #184]	@ (8001308 <SIM_Parse_Command+0x1b4>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d840      	bhi.n	80012d4 <SIM_Parse_Command+0x180>
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	4a2d      	ldr	r2, [pc, #180]	@ (800130c <SIM_Parse_Command+0x1b8>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d022      	beq.n	80012a0 <SIM_Parse_Command+0x14c>
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	4a2c      	ldr	r2, [pc, #176]	@ (8001310 <SIM_Parse_Command+0x1bc>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d012      	beq.n	8001288 <SIM_Parse_Command+0x134>
								}
							case 0x545352: // RST
								HAL_NVIC_SystemReset();
								break;
							default: 
								break;
 8001262:	e037      	b.n	80012d4 <SIM_Parse_Command+0x180>
								flags.CMD.Idle = 1; 
 8001264:	4a2b      	ldr	r2, [pc, #172]	@ (8001314 <SIM_Parse_Command+0x1c0>)
 8001266:	7893      	ldrb	r3, [r2, #2]
 8001268:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800126c:	7093      	strb	r3, [r2, #2]
								break;    
 800126e:	e034      	b.n	80012da <SIM_Parse_Command+0x186>
								flags.CMD.Start_Meas = 1; 
 8001270:	4a28      	ldr	r2, [pc, #160]	@ (8001314 <SIM_Parse_Command+0x1c0>)
 8001272:	7893      	ldrb	r3, [r2, #2]
 8001274:	f043 0320 	orr.w	r3, r3, #32
 8001278:	7093      	strb	r3, [r2, #2]
								break;
 800127a:	e02e      	b.n	80012da <SIM_Parse_Command+0x186>
								flags.CMD.Ping = 1; 
 800127c:	4a25      	ldr	r2, [pc, #148]	@ (8001314 <SIM_Parse_Command+0x1c0>)
 800127e:	7893      	ldrb	r3, [r2, #2]
 8001280:	f043 0308 	orr.w	r3, r3, #8
 8001284:	7093      	strb	r3, [r2, #2]
								break;
 8001286:	e028      	b.n	80012da <SIM_Parse_Command+0x186>
								flags.CMD.Data_Request = 1; 
 8001288:	4a22      	ldr	r2, [pc, #136]	@ (8001314 <SIM_Parse_Command+0x1c0>)
 800128a:	7893      	ldrb	r3, [r2, #2]
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	7093      	strb	r3, [r2, #2]
								break;
 8001292:	e022      	b.n	80012da <SIM_Parse_Command+0x186>
								flags.CMD.Measure_Request = 1; 
 8001294:	4a1f      	ldr	r2, [pc, #124]	@ (8001314 <SIM_Parse_Command+0x1c0>)
 8001296:	7893      	ldrb	r3, [r2, #2]
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	7093      	strb	r3, [r2, #2]
								break;
 800129e:	e01c      	b.n	80012da <SIM_Parse_Command+0x186>
								if(state == IDLE)
 80012a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001318 <SIM_Parse_Command+0x1c4>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d117      	bne.n	80012d8 <SIM_Parse_Command+0x184>
									flags.CMD.Start_OTA = 1;
 80012a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001314 <SIM_Parse_Command+0x1c0>)
 80012aa:	7893      	ldrb	r3, [r2, #2]
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	7093      	strb	r3, [r2, #2]
								break;
 80012b2:	e011      	b.n	80012d8 <SIM_Parse_Command+0x184>
								if(state == IDLE)
 80012b4:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <SIM_Parse_Command+0x1c4>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d108      	bne.n	80012ce <SIM_Parse_Command+0x17a>
									flags.CMD.Set_Config = 1;
 80012bc:	4a15      	ldr	r2, [pc, #84]	@ (8001314 <SIM_Parse_Command+0x1c0>)
 80012be:	7893      	ldrb	r3, [r2, #2]
 80012c0:	f043 0310 	orr.w	r3, r3, #16
 80012c4:	7093      	strb	r3, [r2, #2]
									SIM_Parse_Cfg(cmd_pos, fourth_quote);
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	68b8      	ldr	r0, [r7, #8]
 80012ca:	f000 f827 	bl	800131c <SIM_Parse_Cfg>
								HAL_NVIC_SystemReset();
 80012ce:	f009 fa9e 	bl	800a80e <HAL_NVIC_SystemReset>
								break;
 80012d2:	e002      	b.n	80012da <SIM_Parse_Command+0x186>
								break;
 80012d4:	bf00      	nop
 80012d6:	e000      	b.n	80012da <SIM_Parse_Command+0x186>
								break;
 80012d8:	bf00      	nop
                    }
                }
            }
        }
    }
}
 80012da:	bf00      	nop
 80012dc:	3720      	adds	r7, #32
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20004c08 	.word	0x20004c08
 80012e8:	08013e08 	.word	0x08013e08
 80012ec:	00545352 	.word	0x00545352
 80012f0:	00545253 	.word	0x00545253
 80012f4:	00545254 	.word	0x00545254
 80012f8:	00544553 	.word	0x00544553
 80012fc:	00544554 	.word	0x00544554
 8001300:	0052534d 	.word	0x0052534d
 8001304:	004c4449 	.word	0x004c4449
 8001308:	00474e50 	.word	0x00474e50
 800130c:	0041544f 	.word	0x0041544f
 8001310:	00444e53 	.word	0x00444e53
 8001314:	20001980 	.word	0x20001980
 8001318:	200005b4 	.word	0x200005b4

0800131c <SIM_Parse_Cfg>:

/*-----PARSING CONFIGURAZIONE-----*/
void SIM_Parse_Cfg(char* cmd_start, char* cmd_end)
{   
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
    memset(cfg_var, 0, sizeof(cfg_var));
 8001326:	2214      	movs	r2, #20
 8001328:	2100      	movs	r1, #0
 800132a:	4839      	ldr	r0, [pc, #228]	@ (8001410 <SIM_Parse_Cfg+0xf4>)
 800132c:	f011 fb8a 	bl	8012a44 <memset>
    memset(new_cfg_val, 0, sizeof(new_cfg_val));
 8001330:	220a      	movs	r2, #10
 8001332:	2100      	movs	r1, #0
 8001334:	4837      	ldr	r0, [pc, #220]	@ (8001414 <SIM_Parse_Cfg+0xf8>)
 8001336:	f011 fb85 	bl	8012a44 <memset>
    
    char* pos = cmd_start + 4; // Salta "SET,"
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3304      	adds	r3, #4
 800133e:	61fb      	str	r3, [r7, #28]
    
    // Prima virgola (dopo SET)
    char* comma1 = strchr(pos, ',');
 8001340:	212c      	movs	r1, #44	@ 0x2c
 8001342:	69f8      	ldr	r0, [r7, #28]
 8001344:	f011 fb86 	bl	8012a54 <strchr>
 8001348:	61b8      	str	r0, [r7, #24]
    if(!comma1 || comma1 >= cmd_end) return;
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d056      	beq.n	80013fe <SIM_Parse_Cfg+0xe2>
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d252      	bcs.n	80013fe <SIM_Parse_Cfg+0xe2>
    
    // Seconda virgola
    char* comma2 = strchr(comma1 + 1, ',');
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	3301      	adds	r3, #1
 800135c:	212c      	movs	r1, #44	@ 0x2c
 800135e:	4618      	mov	r0, r3
 8001360:	f011 fb78 	bl	8012a54 <strchr>
 8001364:	6178      	str	r0, [r7, #20]
    if(!comma2 || comma2 >= cmd_end) return;
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d04a      	beq.n	8001402 <SIM_Parse_Cfg+0xe6>
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	429a      	cmp	r2, r3
 8001372:	d246      	bcs.n	8001402 <SIM_Parse_Cfg+0xe6>
    
    // Terza virgola
    char* comma3 = strchr(comma2 + 1, ',');
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	3301      	adds	r3, #1
 8001378:	212c      	movs	r1, #44	@ 0x2c
 800137a:	4618      	mov	r0, r3
 800137c:	f011 fb6a 	bl	8012a54 <strchr>
 8001380:	6138      	str	r0, [r7, #16]
    if(!comma3 || comma3 >= cmd_end) return;
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d03e      	beq.n	8001406 <SIM_Parse_Cfg+0xea>
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	429a      	cmp	r2, r3
 800138e:	d23a      	bcs.n	8001406 <SIM_Parse_Cfg+0xea>
    
    // Estrai cfg_var (tra SET, e prima virgola)
    int var_len = comma2 - comma1 - 1;
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	3b01      	subs	r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
    if(var_len > 0 && var_len < sizeof(cfg_var)) 
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	dd0e      	ble.n	80013be <SIM_Parse_Cfg+0xa2>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2b13      	cmp	r3, #19
 80013a4:	d80b      	bhi.n	80013be <SIM_Parse_Cfg+0xa2>
	{
        strncpy(cfg_var, comma1 + 1, var_len);
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	3301      	adds	r3, #1
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	4619      	mov	r1, r3
 80013ae:	4818      	ldr	r0, [pc, #96]	@ (8001410 <SIM_Parse_Cfg+0xf4>)
 80013b0:	f011 fb6f 	bl	8012a92 <strncpy>
        cfg_var[var_len] = '\0';
 80013b4:	4a16      	ldr	r2, [pc, #88]	@ (8001410 <SIM_Parse_Cfg+0xf4>)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4413      	add	r3, r2
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
    }
    
    // Estrai cfg_idx
    cfg_idx = atoi(comma2 + 1);
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	3301      	adds	r3, #1
 80013c2:	4618      	mov	r0, r3
 80013c4:	f011 fa54 	bl	8012870 <atoi>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a13      	ldr	r2, [pc, #76]	@ (8001418 <SIM_Parse_Cfg+0xfc>)
 80013cc:	6013      	str	r3, [r2, #0]
    
    // Estrai new_cfg_val
    int val_len = cmd_end - comma3 - 1;
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	3b01      	subs	r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
    if(val_len > 0 && val_len < sizeof(new_cfg_val)) 
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	dd14      	ble.n	8001408 <SIM_Parse_Cfg+0xec>
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	2b09      	cmp	r3, #9
 80013e2:	d811      	bhi.n	8001408 <SIM_Parse_Cfg+0xec>
	{
        strncpy(new_cfg_val, comma3 + 1, val_len);
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	3301      	adds	r3, #1
 80013e8:	68ba      	ldr	r2, [r7, #8]
 80013ea:	4619      	mov	r1, r3
 80013ec:	4809      	ldr	r0, [pc, #36]	@ (8001414 <SIM_Parse_Cfg+0xf8>)
 80013ee:	f011 fb50 	bl	8012a92 <strncpy>
        new_cfg_val[val_len] = '\0';
 80013f2:	4a08      	ldr	r2, [pc, #32]	@ (8001414 <SIM_Parse_Cfg+0xf8>)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	4413      	add	r3, r2
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
 80013fc:	e004      	b.n	8001408 <SIM_Parse_Cfg+0xec>
    if(!comma1 || comma1 >= cmd_end) return;
 80013fe:	bf00      	nop
 8001400:	e002      	b.n	8001408 <SIM_Parse_Cfg+0xec>
    if(!comma2 || comma2 >= cmd_end) return;
 8001402:	bf00      	nop
 8001404:	e000      	b.n	8001408 <SIM_Parse_Cfg+0xec>
    if(!comma3 || comma3 >= cmd_end) return;
 8001406:	bf00      	nop
    }
}
 8001408:	3720      	adds	r7, #32
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20005008 	.word	0x20005008
 8001414:	20005020 	.word	0x20005020
 8001418:	2000501c 	.word	0x2000501c

0800141c <SIM_publish_MQTT_Message>:

/*------PUBBLICAZIONE MESSAGGIO MQTT------*/
void SIM_publish_MQTT_Message(const char* topic, const char* message)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b0c4      	sub	sp, #272	@ 0x110
 8001420:	af00      	add	r7, sp, #0
 8001422:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001426:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800142a:	6018      	str	r0, [r3, #0]
 800142c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001430:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001434:	6019      	str	r1, [r3, #0]
    char command[256];
    uint16_t len = (uint16_t)strlen(message);
 8001436:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800143a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	f7fe fed0 	bl	80001e4 <strlen>
 8001444:	4603      	mov	r3, r0
 8001446:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

    if(topic != NULL && strlen(topic) > 0)
 800144a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800144e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d014      	beq.n	8001482 <SIM_publish_MQTT_Message+0x66>
 8001458:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800145c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d00c      	beq.n	8001482 <SIM_publish_MQTT_Message+0x66>
	{
        sprintf(command, "AT+SMPUB=\"%s\",%d,1,0\r", topic, len);
 8001468:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800146c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001470:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001474:	f107 000c 	add.w	r0, r7, #12
 8001478:	6812      	ldr	r2, [r2, #0]
 800147a:	490b      	ldr	r1, [pc, #44]	@ (80014a8 <SIM_publish_MQTT_Message+0x8c>)
 800147c:	f011 fa82 	bl	8012984 <siprintf>
 8001480:	e007      	b.n	8001492 <SIM_publish_MQTT_Message+0x76>
    } 
	else 
	{
        sprintf(command, "AT+SMPUB=%d\r", len);
 8001482:	f8b7 210e 	ldrh.w	r2, [r7, #270]	@ 0x10e
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	4908      	ldr	r1, [pc, #32]	@ (80014ac <SIM_publish_MQTT_Message+0x90>)
 800148c:	4618      	mov	r0, r3
 800148e:	f011 fa79 	bl	8012984 <siprintf>
    }
    
    SIM_Send_Command_DMA(command);
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fdde 	bl	8001058 <SIM_Send_Command_DMA>
}
 800149c:	bf00      	nop
 800149e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	08013e14 	.word	0x08013e14
 80014ac:	08013e2c 	.word	0x08013e2c

080014b0 <SIM_Send_TCP_Chunk>:

/*-----INVIO DATI AL SERVER TCP-----*/
void SIM_Send_TCP_Chunk(uint8_t* data, uint16_t size)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b090      	sub	sp, #64	@ 0x40
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	807b      	strh	r3, [r7, #2]
    char cmd[50];

    sprintf(cmd, "AT+CIPSEND=%u\r", size);
 80014bc:	887a      	ldrh	r2, [r7, #2]
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	490d      	ldr	r1, [pc, #52]	@ (80014f8 <SIM_Send_TCP_Chunk+0x48>)
 80014c4:	4618      	mov	r0, r3
 80014c6:	f011 fa5d 	bl	8012984 <siprintf>
    SIM_Send_Command(cmd);
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fdac 	bl	800102c <SIM_Send_Command>

    SIM_Wait_Response(">");                                    // Attesa prompt '>'
 80014d4:	4809      	ldr	r0, [pc, #36]	@ (80014fc <SIM_Send_TCP_Chunk+0x4c>)
 80014d6:	f000 f817 	bl	8001508 <SIM_Wait_Response>

    HAL_UART_Transmit(LTE_UART, data, size, 1000);             // Invia dati binari
 80014da:	887a      	ldrh	r2, [r7, #2]
 80014dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	4807      	ldr	r0, [pc, #28]	@ (8001500 <SIM_Send_TCP_Chunk+0x50>)
 80014e4:	f00f ff98 	bl	8011418 <HAL_UART_Transmit>
    
    SIM_Wait_Response("SEND OK");                              // Attesa invio avvenuto
 80014e8:	4806      	ldr	r0, [pc, #24]	@ (8001504 <SIM_Send_TCP_Chunk+0x54>)
 80014ea:	f000 f80d 	bl	8001508 <SIM_Wait_Response>
}
 80014ee:	bf00      	nop
 80014f0:	3740      	adds	r7, #64	@ 0x40
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	08013e3c 	.word	0x08013e3c
 80014fc:	08013e4c 	.word	0x08013e4c
 8001500:	2000049c 	.word	0x2000049c
 8001504:	08013e50 	.word	0x08013e50

08001508 <SIM_Wait_Response>:

/*-----ATTESA PROMPT-----*/
void SIM_Wait_Response(const char* expected)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b0c8      	sub	sp, #288	@ 0x120
 800150c:	af02      	add	r7, sp, #8
 800150e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001512:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001516:	6018      	str	r0, [r3, #0]
    char response[256];
    uint16_t timeout = 10000; // 10 secondi
 8001518:	f242 7310 	movw	r3, #10000	@ 0x2710
 800151c:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    uint32_t start_time = HAL_GetTick();
 8001520:	f007 fc90 	bl	8008e44 <HAL_GetTick>
 8001524:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    
    while((HAL_GetTick() - start_time) < timeout)
 8001528:	e027      	b.n	800157a <SIM_Wait_Response+0x72>
    {
        uint16_t RxLen = 0;
 800152a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800152e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001532:	2200      	movs	r2, #0
 8001534:	801a      	strh	r2, [r3, #0]
        HAL_UARTEx_ReceiveToIdle(LTE_UART, (uint8_t*)response, sizeof(response), &RxLen, 200);
 8001536:	f107 030e 	add.w	r3, r7, #14
 800153a:	f107 0110 	add.w	r1, r7, #16
 800153e:	22c8      	movs	r2, #200	@ 0xc8
 8001540:	9200      	str	r2, [sp, #0]
 8001542:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001546:	4814      	ldr	r0, [pc, #80]	@ (8001598 <SIM_Wait_Response+0x90>)
 8001548:	f011 f83b 	bl	80125c2 <HAL_UARTEx_ReceiveToIdle>
        
        if(RxLen > 0 && strstr(response, expected) != NULL)
 800154c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001550:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00c      	beq.n	8001574 <SIM_Wait_Response+0x6c>
 800155a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800155e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001562:	f107 0210 	add.w	r2, r7, #16
 8001566:	6819      	ldr	r1, [r3, #0]
 8001568:	4610      	mov	r0, r2
 800156a:	f011 faa5 	bl	8012ab8 <strstr>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10c      	bne.n	800158e <SIM_Wait_Response+0x86>
        {
            return; 
        }
        
        HAL_Delay(10);
 8001574:	200a      	movs	r0, #10
 8001576:	f007 fc71 	bl	8008e5c <HAL_Delay>
    while((HAL_GetTick() - start_time) < timeout)
 800157a:	f007 fc63 	bl	8008e44 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001584:	1ad2      	subs	r2, r2, r3
 8001586:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 800158a:	429a      	cmp	r2, r3
 800158c:	d3cd      	bcc.n	800152a <SIM_Wait_Response+0x22>
    }
}
 800158e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2000049c 	.word	0x2000049c

0800159c <BC_Init>:
#include "global_variables.h"


/*------INIZIALIZZAZIONE BATTERY CHARGER------*/
void BC_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
	BC_Write_Reg(REG00_MINIMAL_SYSTEM_VOLTAGE, 0x1A);           //Tensione minima di uscita con 3 celle = 9V   <----- Senza Batteria il sistema fornisce questa tensione
 80015a0:	211a      	movs	r1, #26
 80015a2:	2000      	movs	r0, #0
 80015a4:	f000 f830 	bl	8001608 <BC_Write_Reg>
	BC_MultiWrite_Reg(REG01_CHARGE_VOLTAGE_LIMIT, 0x04EC);      //Limite tensione di carica con 3 celle = 12.6V
 80015a8:	f240 41ec 	movw	r1, #1260	@ 0x4ec
 80015ac:	2001      	movs	r0, #1
 80015ae:	f000 f877 	bl	80016a0 <BC_MultiWrite_Reg>
	BC_MultiWrite_Reg(REG03_CHARGE_CURRENT_LIMIT, 0x0064);      //Limite corrente di carica con 3 celle = 1A
 80015b2:	2164      	movs	r1, #100	@ 0x64
 80015b4:	2003      	movs	r0, #3
 80015b6:	f000 f873 	bl	80016a0 <BC_MultiWrite_Reg>
	BC_Write_Reg(REG10_CHARGER_CONTROL_1, 0x85);                //Tensione di OVP in ingresso = 26V
 80015ba:	2185      	movs	r1, #133	@ 0x85
 80015bc:	2010      	movs	r0, #16
 80015be:	f000 f823 	bl	8001608 <BC_Write_Reg>
	BC_Write_Reg(REG14_CHARGER_CONTROL_5, 0x96);                //Informazione sulla presenza dello Ship-FET
 80015c2:	2196      	movs	r1, #150	@ 0x96
 80015c4:	2014      	movs	r0, #20
 80015c6:	f000 f81f 	bl	8001608 <BC_Write_Reg>
	BC_Write_Reg(REG15_MPPT_CONTROL, 0xAB);                     //MPPT attivato, tensione di MPP = 0.875*Vin, misura di 300ms ogni 2 minuti della Vin
 80015ca:	21ab      	movs	r1, #171	@ 0xab
 80015cc:	2015      	movs	r0, #21
 80015ce:	f000 f81b 	bl	8001608 <BC_Write_Reg>
	BC_Write_Reg(REG28_CHARGER_MASK_0, 0xE1);                   //Interrupt attivati: Poor source, Power good, VAC2 present, VAC1 present
 80015d2:	21e1      	movs	r1, #225	@ 0xe1
 80015d4:	2028      	movs	r0, #40	@ 0x28
 80015d6:	f000 f817 	bl	8001608 <BC_Write_Reg>
	BC_Write_Reg(REG29_CHARGER_MASK_1, 0xD7);                   //Interrupt attivati: nessuno
 80015da:	21d7      	movs	r1, #215	@ 0xd7
 80015dc:	2029      	movs	r0, #41	@ 0x29
 80015de:	f000 f813 	bl	8001608 <BC_Write_Reg>
	BC_Write_Reg(REG2A_CHARGER_MASK_2, 0x7F);                   //Interrupt attivati: nessuno
 80015e2:	217f      	movs	r1, #127	@ 0x7f
 80015e4:	202a      	movs	r0, #42	@ 0x2a
 80015e6:	f000 f80f 	bl	8001608 <BC_Write_Reg>
	BC_Write_Reg(REG2B_CHARGER_MASK_3, 0x1F);                   //Interrupt attivati: nessuno
 80015ea:	211f      	movs	r1, #31
 80015ec:	202b      	movs	r0, #43	@ 0x2b
 80015ee:	f000 f80b 	bl	8001608 <BC_Write_Reg>
	BC_Write_Reg(REG2C_FAULT_MASK_0, 0xFC);                     //Interrupt attivati: VAC2 over-voltage, VAC1 over-voltage
 80015f2:	21fc      	movs	r1, #252	@ 0xfc
 80015f4:	202c      	movs	r0, #44	@ 0x2c
 80015f6:	f000 f807 	bl	8001608 <BC_Write_Reg>
	BC_Write_Reg(REG2D_FAULT_MASK_1, 0xF4);                     //Interrupt attivati: nessuno
 80015fa:	21f4      	movs	r1, #244	@ 0xf4
 80015fc:	202d      	movs	r0, #45	@ 0x2d
 80015fe:	f000 f803 	bl	8001608 <BC_Write_Reg>
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <BC_Write_Reg>:

/*------SCRITTURA REGISTRO 8 BIT------*/
int BC_Write_Reg(uint8_t reg, uint8_t wdata)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af02      	add	r7, sp, #8
 800160e:	4603      	mov	r3, r0
 8001610:	460a      	mov	r2, r1
 8001612:	71fb      	strb	r3, [r7, #7]
 8001614:	4613      	mov	r3, r2
 8001616:	71bb      	strb	r3, [r7, #6]
	int result = -1;
 8001618:	f04f 33ff 	mov.w	r3, #4294967295
 800161c:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[2];
	toSend[0] = reg;
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	723b      	strb	r3, [r7, #8]
	toSend[1] = wdata;
 8001622:	79bb      	ldrb	r3, [r7, #6]
 8001624:	727b      	strb	r3, [r7, #9]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 2, 100) == HAL_OK)
 8001626:	f107 0208 	add.w	r2, r7, #8
 800162a:	2364      	movs	r3, #100	@ 0x64
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	2302      	movs	r3, #2
 8001630:	21d6      	movs	r1, #214	@ 0xd6
 8001632:	4806      	ldr	r0, [pc, #24]	@ (800164c <BC_Write_Reg+0x44>)
 8001634:	f009 fe82 	bl	800b33c <HAL_I2C_Master_Transmit>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <BC_Write_Reg+0x3a>
	{
		result = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000160 	.word	0x20000160

08001650 <BC_Read_Reg>:

/*------LETTURA REGISTRO 8 BIT------*/
int BC_Read_Reg(uint8_t reg, uint8_t *rdata)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af02      	add	r7, sp, #8
 8001656:	4603      	mov	r3, r0
 8001658:	6039      	str	r1, [r7, #0]
 800165a:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 800165c:	f04f 33ff 	mov.w	r3, #4294967295
 8001660:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8001662:	1dfa      	adds	r2, r7, #7
 8001664:	2364      	movs	r3, #100	@ 0x64
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	2301      	movs	r3, #1
 800166a:	21d6      	movs	r1, #214	@ 0xd6
 800166c:	480b      	ldr	r0, [pc, #44]	@ (800169c <BC_Read_Reg+0x4c>)
 800166e:	f009 fe65 	bl	800b33c <HAL_I2C_Master_Transmit>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d10c      	bne.n	8001692 <BC_Read_Reg+0x42>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, rdata, 1, 100) == HAL_OK)
 8001678:	2364      	movs	r3, #100	@ 0x64
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2301      	movs	r3, #1
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	21d6      	movs	r1, #214	@ 0xd6
 8001682:	4806      	ldr	r0, [pc, #24]	@ (800169c <BC_Read_Reg+0x4c>)
 8001684:	f009 ff72 	bl	800b56c <HAL_I2C_Master_Receive>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <BC_Read_Reg+0x42>
		{
			result = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
		}
	}

	return result;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000160 	.word	0x20000160

080016a0 <BC_MultiWrite_Reg>:

/*------SCRITTURA REGISTRO 16 BIT------*/
int BC_MultiWrite_Reg(uint8_t reg, uint16_t wdata)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af02      	add	r7, sp, #8
 80016a6:	4603      	mov	r3, r0
 80016a8:	460a      	mov	r2, r1
 80016aa:	71fb      	strb	r3, [r7, #7]
 80016ac:	4613      	mov	r3, r2
 80016ae:	80bb      	strh	r3, [r7, #4]
	int result = -1;
 80016b0:	f04f 33ff 	mov.w	r3, #4294967295
 80016b4:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[3];
	toSend[0] = reg;
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	723b      	strb	r3, [r7, #8]
	toSend[1] = (wdata & 0xFF00) >> 8;
 80016ba:	88bb      	ldrh	r3, [r7, #4]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	b29b      	uxth	r3, r3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	727b      	strb	r3, [r7, #9]
	toSend[2] = wdata & 0x00FF;
 80016c4:	88bb      	ldrh	r3, [r7, #4]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 3, 100) == HAL_OK)
 80016ca:	f107 0208 	add.w	r2, r7, #8
 80016ce:	2364      	movs	r3, #100	@ 0x64
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	2303      	movs	r3, #3
 80016d4:	21d6      	movs	r1, #214	@ 0xd6
 80016d6:	4806      	ldr	r0, [pc, #24]	@ (80016f0 <BC_MultiWrite_Reg+0x50>)
 80016d8:	f009 fe30 	bl	800b33c <HAL_I2C_Master_Transmit>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <BC_MultiWrite_Reg+0x46>
	{
		result = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
	}

	return result;
 80016e6:	68fb      	ldr	r3, [r7, #12]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000160 	.word	0x20000160

080016f4 <BC_Read_Flags>:
	return result;
}

/*------LETTURA FLAGS DI INTERRUZIONE------*/
int BC_Read_Flags(uint64_t *flags)
{
 80016f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016f8:	b09a      	sub	sp, #104	@ 0x68
 80016fa:	af02      	add	r7, sp, #8
 80016fc:	61f8      	str	r0, [r7, #28]
	int result = -1;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001702:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint64_t data[6] = {0};
 8001704:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001708:	2230      	movs	r2, #48	@ 0x30
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f011 f999 	bl	8012a44 <memset>
	uint8_t reg = REG22_CHARGER_FLAG_0;
 8001712:	2322      	movs	r3, #34	@ 0x22
 8001714:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8001718:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 800171c:	2364      	movs	r3, #100	@ 0x64
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	2301      	movs	r3, #1
 8001722:	21d6      	movs	r1, #214	@ 0xd6
 8001724:	4836      	ldr	r0, [pc, #216]	@ (8001800 <BC_Read_Flags+0x10c>)
 8001726:	f009 fe09 	bl	800b33c <HAL_I2C_Master_Transmit>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d161      	bne.n	80017f4 <BC_Read_Flags+0x100>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1 , (uint8_t *)data, 6, 100) == HAL_OK)
 8001730:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001734:	2364      	movs	r3, #100	@ 0x64
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2306      	movs	r3, #6
 800173a:	21d6      	movs	r1, #214	@ 0xd6
 800173c:	4830      	ldr	r0, [pc, #192]	@ (8001800 <BC_Read_Flags+0x10c>)
 800173e:	f009 ff15 	bl	800b56c <HAL_I2C_Master_Receive>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d155      	bne.n	80017f4 <BC_Read_Flags+0x100>
		{
			result = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	65fb      	str	r3, [r7, #92]	@ 0x5c
			*flags = (data[0] << 40) | (data[1] << 32) | (data[2] << 24) | (data[3] << 16) | (data[4] << 8) | data[5];
 800174c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001750:	f04f 0400 	mov.w	r4, #0
 8001754:	f04f 0500 	mov.w	r5, #0
 8001758:	0215      	lsls	r5, r2, #8
 800175a:	2400      	movs	r4, #0
 800175c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	0003      	movs	r3, r0
 800176a:	2200      	movs	r2, #0
 800176c:	ea44 0102 	orr.w	r1, r4, r2
 8001770:	6139      	str	r1, [r7, #16]
 8001772:	432b      	orrs	r3, r5
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	060b      	lsls	r3, r1, #24
 8001784:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 8001788:	0602      	lsls	r2, r0, #24
 800178a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800178e:	4621      	mov	r1, r4
 8001790:	4311      	orrs	r1, r2
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	4629      	mov	r1, r5
 8001796:	4319      	orrs	r1, r3
 8001798:	60f9      	str	r1, [r7, #12]
 800179a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	040b      	lsls	r3, r1, #16
 80017a8:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80017ac:	0402      	lsls	r2, r0, #16
 80017ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017b2:	4621      	mov	r1, r4
 80017b4:	ea41 0a02 	orr.w	sl, r1, r2
 80017b8:	4629      	mov	r1, r5
 80017ba:	ea41 0b03 	orr.w	fp, r1, r3
 80017be:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	020b      	lsls	r3, r1, #8
 80017cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80017d0:	0202      	lsls	r2, r0, #8
 80017d2:	ea4a 0802 	orr.w	r8, sl, r2
 80017d6:	ea4b 0903 	orr.w	r9, fp, r3
 80017da:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80017de:	ea48 0102 	orr.w	r1, r8, r2
 80017e2:	6039      	str	r1, [r7, #0]
 80017e4:	ea49 0303 	orr.w	r3, r9, r3
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	e9d7 1200 	ldrd	r1, r2, [r7]
 80017f0:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}

	return result;
 80017f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3760      	adds	r7, #96	@ 0x60
 80017fa:	46bd      	mov	sp, r7
 80017fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001800:	20000160 	.word	0x20000160

08001804 <BC_Manage_Interrupts>:

/*------GESTIONE DELLE INTERRUZIONI------*/
void BC_Manage_Interrupts(uint64_t flags)
{
 8001804:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001808:	b084      	sub	sp, #16
 800180a:	af00      	add	r7, sp, #0
 800180c:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t status = 0;
 8001810:	2100      	movs	r1, #0
 8001812:	73f9      	strb	r1, [r7, #15]

	if((flags & POOR_SOURCE_MASK) != 0)   //INGRESSO NON BUONO
 8001814:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001818:	f04f 0800 	mov.w	r8, #0
 800181c:	f401 5980 	and.w	r9, r1, #4096	@ 0x1000
	{

	}

	if((flags & VAC2_CHANGE_MASK) != 0)  //PANNELLO INSERITO O RIMOSSO
 8001820:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001824:	2200      	movs	r2, #0
 8001826:	f401 6380 	and.w	r3, r1, #1024	@ 0x400
 800182a:	4313      	orrs	r3, r2
 800182c:	d013      	beq.n	8001856 <BC_Manage_Interrupts+0x52>
	{
		BC_Read_Reg(REG1B_CHARGER_STATUS_0, (uint8_t *)& status);
 800182e:	f107 030f 	add.w	r3, r7, #15
 8001832:	4619      	mov	r1, r3
 8001834:	201b      	movs	r0, #27
 8001836:	f7ff ff0b 	bl	8001650 <BC_Read_Reg>
		if((status & VAC2_PRESENT_MASK) != 0)
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d004      	beq.n	800184e <BC_Manage_Interrupts+0x4a>
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x80); //INSERITA
 8001844:	2180      	movs	r1, #128	@ 0x80
 8001846:	2013      	movs	r0, #19
 8001848:	f7ff fede 	bl	8001608 <BC_Write_Reg>
 800184c:	e003      	b.n	8001856 <BC_Manage_Interrupts+0x52>
		}
		else
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x40); //RIMOSSA
 800184e:	2140      	movs	r1, #64	@ 0x40
 8001850:	2013      	movs	r0, #19
 8001852:	f7ff fed9 	bl	8001608 <BC_Write_Reg>
		}
	}

	if((flags & VAC1_CHANGE_MASK) != 0)  //TURBINA INSERITA O RIMOSSA
 8001856:	e9d7 2300 	ldrd	r2, r3, [r7]
 800185a:	2400      	movs	r4, #0
 800185c:	f403 7500 	and.w	r5, r3, #512	@ 0x200
	{

	}
}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800186c <HAL_UARTEx_RxEventCallback>:
	}
}

/* ------CALLBACK UART RX IDLE------*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	807b      	strh	r3, [r7, #2]
    if(huart == LTE_UART && Size > 8)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a2b      	ldr	r2, [pc, #172]	@ (8001928 <HAL_UARTEx_RxEventCallback+0xbc>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d112      	bne.n	80018a6 <HAL_UARTEx_RxEventCallback+0x3a>
 8001880:	887b      	ldrh	r3, [r7, #2]
 8001882:	2b08      	cmp	r3, #8
 8001884:	d90f      	bls.n	80018a6 <HAL_UARTEx_RxEventCallback+0x3a>
    {
        if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 8001886:	4b29      	ldr	r3, [pc, #164]	@ (800192c <HAL_UARTEx_RxEventCallback+0xc0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a29      	ldr	r2, [pc, #164]	@ (8001930 <HAL_UARTEx_RxEventCallback+0xc4>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d140      	bne.n	8001912 <HAL_UARTEx_RxEventCallback+0xa6>
           *(uint32_t*)(sim_rx_buffer + 4) == 0x203A4255) {     // "UB: "
 8001890:	4b28      	ldr	r3, [pc, #160]	@ (8001934 <HAL_UARTEx_RxEventCallback+0xc8>)
 8001892:	681b      	ldr	r3, [r3, #0]
        if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 8001894:	4a28      	ldr	r2, [pc, #160]	@ (8001938 <HAL_UARTEx_RxEventCallback+0xcc>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d13b      	bne.n	8001912 <HAL_UARTEx_RxEventCallback+0xa6>
            flags.MQTT_Message_Rx = 1;
 800189a:	4a28      	ldr	r2, [pc, #160]	@ (800193c <HAL_UARTEx_RxEventCallback+0xd0>)
 800189c:	7853      	ldrb	r3, [r2, #1]
 800189e:	f043 0304 	orr.w	r3, r3, #4
 80018a2:	7053      	strb	r3, [r2, #1]
        if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 80018a4:	e035      	b.n	8001912 <HAL_UARTEx_RxEventCallback+0xa6>
        }

    }
	else if(huart == LTE_UART && Size > 0)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001928 <HAL_UARTEx_RxEventCallback+0xbc>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d113      	bne.n	80018d6 <HAL_UARTEx_RxEventCallback+0x6a>
 80018ae:	887b      	ldrh	r3, [r7, #2]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d010      	beq.n	80018d6 <HAL_UARTEx_RxEventCallback+0x6a>
	{
		if(*(uint8_t*)sim_rx_buffer == '>')
 80018b4:	4b1d      	ldr	r3, [pc, #116]	@ (800192c <HAL_UARTEx_RxEventCallback+0xc0>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80018ba:	d12b      	bne.n	8001914 <HAL_UARTEx_RxEventCallback+0xa8>
		{
			flags.MQTT_ReadytoSend = 1;
 80018bc:	4a1f      	ldr	r2, [pc, #124]	@ (800193c <HAL_UARTEx_RxEventCallback+0xd0>)
 80018be:	7853      	ldrb	r3, [r2, #1]
 80018c0:	f043 0308 	orr.w	r3, r3, #8
 80018c4:	7053      	strb	r3, [r2, #1]
			sys.SIM_Prompt_Status = 0;
 80018c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001940 <HAL_UARTEx_RxEventCallback+0xd4>)
 80018c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018cc:	461a      	mov	r2, r3
 80018ce:	2300      	movs	r3, #0
 80018d0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
		if(*(uint8_t*)sim_rx_buffer == '>')
 80018d4:	e01e      	b.n	8001914 <HAL_UARTEx_RxEventCallback+0xa8>
		}
	}
	else if(huart == LTE_UART && Size > 4)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a13      	ldr	r2, [pc, #76]	@ (8001928 <HAL_UARTEx_RxEventCallback+0xbc>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d11a      	bne.n	8001914 <HAL_UARTEx_RxEventCallback+0xa8>
 80018de:	887b      	ldrh	r3, [r7, #2]
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d917      	bls.n	8001914 <HAL_UARTEx_RxEventCallback+0xa8>
	{
		if(*(uint32_t*)sim_rx_buffer == 0x4552524F)            //"ERRO"
 80018e4:	4b11      	ldr	r3, [pc, #68]	@ (800192c <HAL_UARTEx_RxEventCallback+0xc0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a16      	ldr	r2, [pc, #88]	@ (8001944 <HAL_UARTEx_RxEventCallback+0xd8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d112      	bne.n	8001914 <HAL_UARTEx_RxEventCallback+0xa8>
		{
			flags.MQTT_ReadytoSend = 0;
 80018ee:	4a13      	ldr	r2, [pc, #76]	@ (800193c <HAL_UARTEx_RxEventCallback+0xd0>)
 80018f0:	7853      	ldrb	r3, [r2, #1]
 80018f2:	f023 0308 	bic.w	r3, r3, #8
 80018f6:	7053      	strb	r3, [r2, #1]
			flags.CMD.Data_Request = 1;
 80018f8:	4a10      	ldr	r2, [pc, #64]	@ (800193c <HAL_UARTEx_RxEventCallback+0xd0>)
 80018fa:	7893      	ldrb	r3, [r2, #2]
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	7093      	strb	r3, [r2, #2]
			sys.SIM_Prompt_Status = 0;
 8001902:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001904:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001908:	461a      	mov	r2, r3
 800190a:	2300      	movs	r3, #0
 800190c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001910:	e000      	b.n	8001914 <HAL_UARTEx_RxEventCallback+0xa8>
        if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 8001912:	bf00      	nop
		}
	}
	
	HAL_UARTEx_ReceiveToIdle_DMA(LTE_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8001914:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001918:	4904      	ldr	r1, [pc, #16]	@ (800192c <HAL_UARTEx_RxEventCallback+0xc0>)
 800191a:	4803      	ldr	r0, [pc, #12]	@ (8001928 <HAL_UARTEx_RxEventCallback+0xbc>)
 800191c:	f010 ff54 	bl	80127c8 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	2000049c 	.word	0x2000049c
 800192c:	20004c08 	.word	0x20004c08
 8001930:	534d532b 	.word	0x534d532b
 8001934:	20004c0c 	.word	0x20004c0c
 8001938:	203a4255 	.word	0x203a4255
 800193c:	20001980 	.word	0x20001980
 8001940:	200005b8 	.word	0x200005b8
 8001944:	4552524f 	.word	0x4552524f

08001948 <HAL_UART_RxCpltCallback>:

/* ------CALLBACK UART RX COMPLETE------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	if (huart == LTE_UART)
	{

	}

}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <HAL_UART_TxCpltCallback>:

/* ------CALLBACK UART TX COMPLETE------*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	if (huart == LTE_UART)
	{

	}

}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_ADC_ConvHalfCpltCallback>:

/* ------CALLBACK HALF ADC------*/
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a09      	ldr	r2, [pc, #36]	@ (80019a0 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d109      	bne.n	8001994 <HAL_ADC_ConvHalfCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8001980:	4a08      	ldr	r2, [pc, #32]	@ (80019a4 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8001982:	7813      	ldrb	r3, [r2, #0]
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	7013      	strb	r3, [r2, #0]
		flags.ADC_Half_Buffer = 1;
 800198a:	4a06      	ldr	r2, [pc, #24]	@ (80019a4 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 800198c:	7813      	ldrb	r3, [r2, #0]
 800198e:	f043 0302 	orr.w	r3, r3, #2
 8001992:	7013      	strb	r3, [r2, #0]
	}
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	20000090 	.word	0x20000090
 80019a4:	20001980 	.word	0x20001980

080019a8 <HAL_ADC_ConvCpltCallback>:

/*------CALLBACK FULL ADC------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a09      	ldr	r2, [pc, #36]	@ (80019d8 <HAL_ADC_ConvCpltCallback+0x30>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d109      	bne.n	80019cc <HAL_ADC_ConvCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 80019b8:	4a08      	ldr	r2, [pc, #32]	@ (80019dc <HAL_ADC_ConvCpltCallback+0x34>)
 80019ba:	7813      	ldrb	r3, [r2, #0]
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	7013      	strb	r3, [r2, #0]
		flags.ADC_Full_Buffer = 1;
 80019c2:	4a06      	ldr	r2, [pc, #24]	@ (80019dc <HAL_ADC_ConvCpltCallback+0x34>)
 80019c4:	7813      	ldrb	r3, [r2, #0]
 80019c6:	f043 0304 	orr.w	r3, r3, #4
 80019ca:	7013      	strb	r3, [r2, #0]
	}
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	20000090 	.word	0x20000090
 80019dc:	20001980 	.word	0x20001980

080019e0 <HAL_RTC_AlarmAEventCallback>:

/*------CALLBACK RTC CAMBIO ORA------*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b092      	sub	sp, #72	@ 0x48
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef gTime;
	RTC_AlarmTypeDef sAlarm = {0};
 80019e8:	f107 0308 	add.w	r3, r7, #8
 80019ec:	222c      	movs	r2, #44	@ 0x2c
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f011 f827 	bl	8012a44 <memset>

	HAL_RTC_GetTime(hrtc, &gTime, RTC_FORMAT_BIN);
 80019f6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80019fa:	2200      	movs	r2, #0
 80019fc:	4619      	mov	r1, r3
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f00c fa8f 	bl	800df22 <HAL_RTC_GetTime>

	sys.Low_th = Low_TH[gTime.Hours];
 8001a04:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b17      	ldr	r3, [pc, #92]	@ (8001a68 <HAL_RTC_AlarmAEventCallback+0x88>)
 8001a0c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001a10:	4b16      	ldr	r3, [pc, #88]	@ (8001a6c <HAL_RTC_AlarmAEventCallback+0x8c>)
 8001a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a16:	859a      	strh	r2, [r3, #44]	@ 0x2c
	sys.High_th = High_TH[gTime.Hours];
 8001a18:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b14      	ldr	r3, [pc, #80]	@ (8001a70 <HAL_RTC_AlarmAEventCallback+0x90>)
 8001a20:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001a24:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <HAL_RTC_AlarmAEventCallback+0x8c>)
 8001a26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a2a:	85da      	strh	r2, [r3, #46]	@ 0x2e

	sAlarm.AlarmTime.Hours = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	723b      	strb	r3, [r7, #8]
    sAlarm.AlarmTime.Minutes = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	727b      	strb	r3, [r7, #9]
    sAlarm.AlarmTime.Seconds = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	72bb      	strb	r3, [r7, #10]
    sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS | RTC_ALARMMASK_SECONDS;
 8001a38:	4b0e      	ldr	r3, [pc, #56]	@ (8001a74 <HAL_RTC_AlarmAEventCallback+0x94>)
 8001a3a:	61fb      	str	r3, [r7, #28]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62bb      	str	r3, [r7, #40]	@ 0x28
    sAlarm.AlarmDateWeekDay = 1;
 8001a44:	2301      	movs	r3, #1
 8001a46:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    sAlarm.Alarm = RTC_ALARM_A;
 8001a4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a4e:	633b      	str	r3, [r7, #48]	@ 0x30
    
    HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BIN);
 8001a50:	f107 0308 	add.w	r3, r7, #8
 8001a54:	2200      	movs	r2, #0
 8001a56:	4619      	mov	r1, r3
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f00c fb45 	bl	800e0e8 <HAL_RTC_SetAlarm_IT>
}
 8001a5e:	bf00      	nop
 8001a60:	3748      	adds	r7, #72	@ 0x48
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20004bc8 	.word	0x20004bc8
 8001a6c:	200005b8 	.word	0x200005b8
 8001a70:	20004b98 	.word	0x20004b98
 8001a74:	80800080 	.word	0x80800080

08001a78 <extflash_cs_set>:
uint32_t	exflashNumSectors = 0;
uint8_t		exflashInitDone = 0;


void extflash_cs_set()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_RESET);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a82:	4802      	ldr	r0, [pc, #8]	@ (8001a8c <extflash_cs_set+0x14>)
 8001a84:	f009 fba6 	bl	800b1d4 <HAL_GPIO_WritePin>
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	48000400 	.word	0x48000400

08001a90 <extflash_cs_reset>:

void extflash_cs_reset()
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 8001a94:	2201      	movs	r2, #1
 8001a96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a9a:	4802      	ldr	r0, [pc, #8]	@ (8001aa4 <extflash_cs_reset+0x14>)
 8001a9c:	f009 fb9a 	bl	800b1d4 <HAL_GPIO_WritePin>
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	48000400 	.word	0x48000400

08001aa8 <extflash_wp_reset>:
{
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_RESET);
}

void extflash_wp_reset()
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_SET);
 8001aac:	2201      	movs	r2, #1
 8001aae:	2140      	movs	r1, #64	@ 0x40
 8001ab0:	4802      	ldr	r0, [pc, #8]	@ (8001abc <extflash_wp_reset+0x14>)
 8001ab2:	f009 fb8f 	bl	800b1d4 <HAL_GPIO_WritePin>
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	48000800 	.word	0x48000800

08001ac0 <extflash_hard_reset>:


void extflash_hard_reset()
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2180      	movs	r1, #128	@ 0x80
 8001ac8:	4806      	ldr	r0, [pc, #24]	@ (8001ae4 <extflash_hard_reset+0x24>)
 8001aca:	f009 fb83 	bl	800b1d4 <HAL_GPIO_WritePin>

	HAL_Delay(50);
 8001ace:	2032      	movs	r0, #50	@ 0x32
 8001ad0:	f007 f9c4 	bl	8008e5c <HAL_Delay>

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_SET);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	2180      	movs	r1, #128	@ 0x80
 8001ad8:	4802      	ldr	r0, [pc, #8]	@ (8001ae4 <extflash_hard_reset+0x24>)
 8001ada:	f009 fb7b 	bl	800b1d4 <HAL_GPIO_WritePin>

	return;
 8001ade:	bf00      	nop
}
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	48000800 	.word	0x48000800

08001ae8 <extflash_send_cmd>:


int32_t extflash_send_cmd(extflash_cmd_t command)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

	uint8_t addr_bytes[4] = {0};
 8001af0:	2300      	movs	r3, #0
 8001af2:	61bb      	str	r3, [r7, #24]
	uint8_t dummy_bytes[8] = {0};
 8001af4:	f107 0310 	add.w	r3, r7, #16
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
	uint8_t dummy = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	77fb      	strb	r3, [r7, #31]
	uint8_t cmd_data = command->cmd;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	73fb      	strb	r3, [r7, #15]

	if(command->address_en != 0)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	785b      	ldrb	r3, [r3, #1]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00d      	beq.n	8001b2c <extflash_send_cmd+0x44>
	{
		addr_bytes[0] = (command->address >> 16) & 0xFF;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	0c1b      	lsrs	r3, r3, #16
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	763b      	strb	r3, [r7, #24]
		addr_bytes[1] = (command->address >> 8) & 0xFF;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	0a1b      	lsrs	r3, r3, #8
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	767b      	strb	r3, [r7, #25]
		addr_bytes[2] = (command->address) & 0xFF;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	76bb      	strb	r3, [r7, #26]
	}

	extflash_cs_set();
 8001b2c:	f7ff ffa4 	bl	8001a78 <extflash_cs_set>

	HAL_SPI_Transmit(EXTFLASH_SPI, &cmd_data, 1, FLASH_SPI_DEF_TIMEOUT);
 8001b30:	f107 010f 	add.w	r1, r7, #15
 8001b34:	2364      	movs	r3, #100	@ 0x64
 8001b36:	2201      	movs	r2, #1
 8001b38:	4823      	ldr	r0, [pc, #140]	@ (8001bc8 <extflash_send_cmd+0xe0>)
 8001b3a:	f00c fdd4 	bl	800e6e6 <HAL_SPI_Transmit>

	if(command->address_en != 0)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	785b      	ldrb	r3, [r3, #1]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d006      	beq.n	8001b54 <extflash_send_cmd+0x6c>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, addr_bytes, 3, FLASH_SPI_DEF_TIMEOUT);
 8001b46:	f107 0118 	add.w	r1, r7, #24
 8001b4a:	2364      	movs	r3, #100	@ 0x64
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	481e      	ldr	r0, [pc, #120]	@ (8001bc8 <extflash_send_cmd+0xe0>)
 8001b50:	f00c fdc9 	bl	800e6e6 <HAL_SPI_Transmit>
	}

	if(command->dummy_nb > 0)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	88db      	ldrh	r3, [r3, #6]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00e      	beq.n	8001b7a <extflash_send_cmd+0x92>
	{
		dummy = command->dummy_nb > sizeof(dummy_bytes) ? sizeof(dummy_bytes) : command->dummy_nb;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	88db      	ldrh	r3, [r3, #6]
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	bf28      	it	cs
 8001b64:	2308      	movcs	r3, #8
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	77fb      	strb	r3, [r7, #31]
		HAL_SPI_Transmit(EXTFLASH_SPI, dummy_bytes, dummy, FLASH_SPI_DEF_TIMEOUT);
 8001b6a:	7ffb      	ldrb	r3, [r7, #31]
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	f107 0110 	add.w	r1, r7, #16
 8001b72:	2364      	movs	r3, #100	@ 0x64
 8001b74:	4814      	ldr	r0, [pc, #80]	@ (8001bc8 <extflash_send_cmd+0xe0>)
 8001b76:	f00c fdb6 	bl	800e6e6 <HAL_SPI_Transmit>
	}

	if(command->tx_nb > 0 && command->tx_data != NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	885b      	ldrh	r3, [r3, #2]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00b      	beq.n	8001b9a <extflash_send_cmd+0xb2>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d007      	beq.n	8001b9a <extflash_send_cmd+0xb2>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, command->tx_data, command->tx_nb, FLASH_SPI_DEF_TIMEOUT);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68d9      	ldr	r1, [r3, #12]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	885a      	ldrh	r2, [r3, #2]
 8001b92:	2364      	movs	r3, #100	@ 0x64
 8001b94:	480c      	ldr	r0, [pc, #48]	@ (8001bc8 <extflash_send_cmd+0xe0>)
 8001b96:	f00c fda6 	bl	800e6e6 <HAL_SPI_Transmit>
	}

	if(command->rx_nb > 0 && command->rx_data != NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	889b      	ldrh	r3, [r3, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00b      	beq.n	8001bba <extflash_send_cmd+0xd2>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <extflash_send_cmd+0xd2>
	{
		HAL_SPI_Receive(EXTFLASH_SPI, command->rx_data, command->rx_nb, FLASH_SPI_DEF_TIMEOUT);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6919      	ldr	r1, [r3, #16]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	889a      	ldrh	r2, [r3, #4]
 8001bb2:	2364      	movs	r3, #100	@ 0x64
 8001bb4:	4804      	ldr	r0, [pc, #16]	@ (8001bc8 <extflash_send_cmd+0xe0>)
 8001bb6:	f00c ff0c 	bl	800e9d2 <HAL_SPI_Receive>
	}

	extflash_cs_reset();
 8001bba:	f7ff ff69 	bl	8001a90 <extflash_cs_reset>

	return 0;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3720      	adds	r7, #32
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	2000021c 	.word	0x2000021c

08001bcc <extflash_read_extended_read_reg>:

}


int extflash_read_extended_read_reg(uint8_t *ereg)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDERP;
 8001be4:	2381      	movs	r3, #129	@ 0x81
 8001be6:	733b      	strb	r3, [r7, #12]
	command.address_en = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	737b      	strb	r3, [r7, #13]
	command.address = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
	command.rx_nb = 1;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	823b      	strh	r3, [r7, #16]
	command.rx_data = ereg;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	61fb      	str	r3, [r7, #28]

	return extflash_send_cmd(&command);
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff73 	bl	8001ae8 <extflash_send_cmd>
 8001c02:	4603      	mov	r3, r0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3720      	adds	r7, #32
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <extflash_clear_extended_read_reg>:


int extflash_clear_extended_read_reg()
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
	extflash_cmd command = {0};
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_CLERP;
 8001c20:	2382      	movs	r3, #130	@ 0x82
 8001c22:	713b      	strb	r3, [r7, #4]

	return extflash_send_cmd(&command);
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff ff5e 	bl	8001ae8 <extflash_send_cmd>
 8001c2c:	4603      	mov	r3, r0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <extflash_set_write_protection>:
	return extflash_send_cmd(&command);

}

int extflash_set_write_protection(uint8_t enable)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b088      	sub	sp, #32
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 8001c40:	f107 030c 	add.w	r3, r7, #12
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
	command.cmd = enable==0 ? EFLASH_CMD_WREN : EFLASH_CMD_WRDI;
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <extflash_set_write_protection+0x24>
 8001c56:	2306      	movs	r3, #6
 8001c58:	e000      	b.n	8001c5c <extflash_set_write_protection+0x26>
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	733b      	strb	r3, [r7, #12]

	return extflash_send_cmd(&command);
 8001c5e:	f107 030c 	add.w	r3, r7, #12
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff40 	bl	8001ae8 <extflash_send_cmd>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3720      	adds	r7, #32
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <extflash_read_sfdp>:

int extflash_read_sfdp(uint32_t regaddr, uint8_t *reg, uint8_t nregs)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b08a      	sub	sp, #40	@ 0x28
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDSFDP;
 8001c90:	235a      	movs	r3, #90	@ 0x5a
 8001c92:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 8001c94:	2301      	movs	r3, #1
 8001c96:	757b      	strb	r3, [r7, #21]
	command.address = regaddr;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nregs;
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	833b      	strh	r3, [r7, #24]
	command.rx_data = reg;
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ff1a 	bl	8001ae8 <extflash_send_cmd>
 8001cb4:	4603      	mov	r3, r0

}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3728      	adds	r7, #40	@ 0x28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <extflash_raw_read>:

int extflash_raw_read(uint32_t address, uint8_t *pBuffer, uint16_t nbytes)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b08a      	sub	sp, #40	@ 0x28
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	80fb      	strh	r3, [r7, #6]

	extflash_cmd command = {0};
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_FRD;
 8001cdc:	230b      	movs	r3, #11
 8001cde:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	757b      	strb	r3, [r7, #21]
	command.address = address;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nbytes;
 8001cec:	88fb      	ldrh	r3, [r7, #6]
 8001cee:	833b      	strh	r3, [r7, #24]
	command.rx_data = pBuffer;
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fef5 	bl	8001ae8 <extflash_send_cmd>
 8001cfe:	4603      	mov	r3, r0

}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3728      	adds	r7, #40	@ 0x28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <extflash_raw_erase>:

int extflash_raw_erase(uint32_t address)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_SER;
 8001d20:	23d7      	movs	r3, #215	@ 0xd7
 8001d22:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 8001d24:	2301      	movs	r3, #1
 8001d26:	737b      	strb	r3, [r7, #13]
	command.address = address;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	617b      	str	r3, [r7, #20]

	return extflash_send_cmd(&command);
 8001d2c:	f107 030c 	add.w	r3, r7, #12
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fed9 	bl	8001ae8 <extflash_send_cmd>
 8001d36:	4603      	mov	r3, r0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3720      	adds	r7, #32
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <extflash_raw_page_write>:

int extflash_raw_page_write(uint32_t address, const uint8_t *pBuffer)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]

	extflash_cmd command = {0};
 8001d4a:	f107 030c 	add.w	r3, r7, #12
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]
 8001d58:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	737b      	strb	r3, [r7, #13]
	command.address = address;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	617b      	str	r3, [r7, #20]
	command.tx_nb = EFLASH_DEF_PAGE_SIZE;
 8001d66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d6a:	81fb      	strh	r3, [r7, #14]
	command.tx_data = pBuffer;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	61bb      	str	r3, [r7, #24]

	return extflash_send_cmd(&command);
 8001d70:	f107 030c 	add.w	r3, r7, #12
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff feb7 	bl	8001ae8 <extflash_send_cmd>
 8001d7a:	4603      	mov	r3, r0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3720      	adds	r7, #32
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <extflash_sector_read>:


int extflash_sector_read(uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	@ 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
	int result = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
	uint8_t ereg = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	75fb      	strb	r3, [r7, #23]
	uint32_t tmo = HAL_GetTick();
 8001d98:	f007 f854 	bl	8008e44 <HAL_GetTick>
 8001d9c:	61b8      	str	r0, [r7, #24]
	uint8_t *wPtr = pBuffer;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	031b      	lsls	r3, r3, #12
 8001da6:	623b      	str	r3, [r7, #32]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8001da8:	f107 0317 	add.w	r3, r7, #23
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff0d 	bl	8001bcc <extflash_read_extended_read_reg>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	da10      	bge.n	8001dda <extflash_sector_read+0x56>
 8001db8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbc:	e037      	b.n	8001e2e <extflash_sector_read+0xaa>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8001dbe:	f107 0317 	add.w	r3, r7, #23
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff ff02 	bl	8001bcc <extflash_read_extended_read_reg>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	da02      	bge.n	8001dd4 <extflash_sector_read+0x50>
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd2:	e02c      	b.n	8001e2e <extflash_sector_read+0xaa>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f007 f841 	bl	8008e5c <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d020      	beq.n	8001e26 <extflash_sector_read+0xa2>
 8001de4:	f007 f82e 	bl	8008e44 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001df2:	d3e4      	bcc.n	8001dbe <extflash_sector_read+0x3a>
	}

	while(nsectors > 0)
 8001df4:	e017      	b.n	8001e26 <extflash_sector_read+0xa2>
	{
		result = extflash_raw_read(address, wPtr, EFLASH_DEF_SECTOR_SIZE);
 8001df6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001dfa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001dfc:	6a38      	ldr	r0, [r7, #32]
 8001dfe:	f7ff ff5e 	bl	8001cbe <extflash_raw_read>
 8001e02:	61f8      	str	r0, [r7, #28]
		if(result < 0)return -1;
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	da02      	bge.n	8001e10 <extflash_sector_read+0x8c>
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0e:	e00e      	b.n	8001e2e <extflash_sector_read+0xaa>

		address += EFLASH_DEF_SECTOR_SIZE;
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e16:	623b      	str	r3, [r7, #32]
		wPtr += EFLASH_DEF_SECTOR_SIZE;
 8001e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e1e:	627b      	str	r3, [r7, #36]	@ 0x24
		nsectors--;
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1e4      	bne.n	8001df6 <extflash_sector_read+0x72>
	}

	return 0;
 8001e2c:	2300      	movs	r3, #0

}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3728      	adds	r7, #40	@ 0x28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <extflash_wait_for_wop>:

int extflash_wait_for_wop(uint32_t timeout)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
	uint8_t ereg = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	72fb      	strb	r3, [r7, #11]
	uint32_t tmo = HAL_GetTick();
 8001e42:	f006 ffff 	bl	8008e44 <HAL_GetTick>
 8001e46:	60f8      	str	r0, [r7, #12]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8001e48:	f107 030b 	add.w	r3, r7, #11
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff febd 	bl	8001bcc <extflash_read_extended_read_reg>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	da10      	bge.n	8001e7a <extflash_wait_for_wop+0x44>
 8001e58:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5c:	e023      	b.n	8001ea6 <extflash_wait_for_wop+0x70>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8001e5e:	f107 030b 	add.w	r3, r7, #11
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff feb2 	bl	8001bcc <extflash_read_extended_read_reg>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	da02      	bge.n	8001e74 <extflash_wait_for_wop+0x3e>
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e72:	e018      	b.n	8001ea6 <extflash_wait_for_wop+0x70>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8001e74:	2001      	movs	r0, #1
 8001e76:	f006 fff1 	bl	8008e5c <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
 8001e7a:	7afb      	ldrb	r3, [r7, #11]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d007      	beq.n	8001e94 <extflash_wait_for_wop+0x5e>
 8001e84:	f006 ffde 	bl	8008e44 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d8e4      	bhi.n	8001e5e <extflash_wait_for_wop+0x28>
	}

	if(ereg & (ESTATUS_PROT_ERR | ESTATUS_P_ERR | ESTATUS_E_ERR))
 8001e94:	7afb      	ldrb	r3, [r7, #11]
 8001e96:	f003 030e 	and.w	r3, r3, #14
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d002      	beq.n	8001ea4 <extflash_wait_for_wop+0x6e>
	{
		return -2; //Erase o write error
 8001e9e:	f06f 0301 	mvn.w	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <extflash_wait_for_wop+0x70>
	}

	return 0;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <extflash_sector_write>:

int extflash_sector_write(uint32_t sector, uint32_t nsectors, const uint8_t *pBuffer)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b088      	sub	sp, #32
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
	int result = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
	const uint8_t *wPtr = pBuffer;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	031b      	lsls	r3, r3, #12
 8001ec6:	61bb      	str	r3, [r7, #24]

	extflash_clear_extended_read_reg();
 8001ec8:	f7ff fea0 	bl	8001c0c <extflash_clear_extended_read_reg>

	while(nsectors > 0)
 8001ecc:	e04e      	b.n	8001f6c <extflash_sector_write+0xbe>
	{
		//Controllo operazioni in corso
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8001ece:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ed2:	f7ff ffb0 	bl	8001e36 <extflash_wait_for_wop>
 8001ed6:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	db4a      	blt.n	8001f74 <extflash_sector_write+0xc6>

		//Erase del settore
		result = extflash_set_write_protection(0);
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f7ff fea9 	bl	8001c36 <extflash_set_write_protection>
 8001ee4:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	db45      	blt.n	8001f78 <extflash_sector_write+0xca>
		result = extflash_raw_erase(address);
 8001eec:	69b8      	ldr	r0, [r7, #24]
 8001eee:	f7ff ff0b 	bl	8001d08 <extflash_raw_erase>
 8001ef2:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	db40      	blt.n	8001f7c <extflash_sector_write+0xce>

		//Attesa ERASE
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8001efa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001efe:	f7ff ff9a 	bl	8001e36 <extflash_wait_for_wop>
 8001f02:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	db3a      	blt.n	8001f80 <extflash_sector_write+0xd2>

		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	e021      	b.n	8001f54 <extflash_sector_write+0xa6>
		{
			result = extflash_set_write_protection(0);
 8001f10:	2000      	movs	r0, #0
 8001f12:	f7ff fe90 	bl	8001c36 <extflash_set_write_protection>
 8001f16:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	db1e      	blt.n	8001f5c <extflash_sector_write+0xae>
			result = extflash_raw_page_write(address, wPtr);
 8001f1e:	69f9      	ldr	r1, [r7, #28]
 8001f20:	69b8      	ldr	r0, [r7, #24]
 8001f22:	f7ff ff0d 	bl	8001d40 <extflash_raw_page_write>
 8001f26:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	db18      	blt.n	8001f60 <extflash_sector_write+0xb2>

			address += EFLASH_DEF_PAGE_SIZE;
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001f34:	61bb      	str	r3, [r7, #24]
			wPtr += EFLASH_DEF_PAGE_SIZE;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001f3c:	61fb      	str	r3, [r7, #28]
			//Attesa write
			result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8001f3e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f42:	f7ff ff78 	bl	8001e36 <extflash_wait_for_wop>
 8001f46:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	db0a      	blt.n	8001f64 <extflash_sector_write+0xb6>
		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	3301      	adds	r3, #1
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	2b0f      	cmp	r3, #15
 8001f58:	ddda      	ble.n	8001f10 <extflash_sector_write+0x62>
 8001f5a:	e004      	b.n	8001f66 <extflash_sector_write+0xb8>
			if(result < 0)break;
 8001f5c:	bf00      	nop
 8001f5e:	e002      	b.n	8001f66 <extflash_sector_write+0xb8>
			if(result < 0)break;
 8001f60:	bf00      	nop
 8001f62:	e000      	b.n	8001f66 <extflash_sector_write+0xb8>
			if(result < 0)break;
 8001f64:	bf00      	nop
		}

		nsectors--;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1ad      	bne.n	8001ece <extflash_sector_write+0x20>
 8001f72:	e006      	b.n	8001f82 <extflash_sector_write+0xd4>
		if(result < 0)break;
 8001f74:	bf00      	nop
 8001f76:	e004      	b.n	8001f82 <extflash_sector_write+0xd4>
		if(result < 0)break;
 8001f78:	bf00      	nop
 8001f7a:	e002      	b.n	8001f82 <extflash_sector_write+0xd4>
		if(result < 0)break;
 8001f7c:	bf00      	nop
 8001f7e:	e000      	b.n	8001f82 <extflash_sector_write+0xd4>
		if(result < 0)break;
 8001f80:	bf00      	nop
	}

	extflash_set_write_protection(1);
 8001f82:	2001      	movs	r0, #1
 8001f84:	f7ff fe57 	bl	8001c36 <extflash_set_write_protection>

	return 0;
 8001f88:	2300      	movs	r3, #0

}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3720      	adds	r7, #32
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <extflash_get_sector_size>:


unsigned int extflash_get_sector_size()
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
	return EFLASH_DEF_SECTOR_SIZE;
 8001f96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <extflash_get_sector_count>:

unsigned int extflash_get_sector_count()
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
	return exflashNumSectors;
 8001fa8:	4b03      	ldr	r3, [pc, #12]	@ (8001fb8 <extflash_get_sector_count+0x14>)
 8001faa:	681b      	ldr	r3, [r3, #0]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20000088 	.word	0x20000088

08001fbc <extflash_is_initialized>:
{
	return exflashSize;
}

int extflash_is_initialized()
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
	return exflashInitDone;
 8001fc0:	4b03      	ldr	r3, [pc, #12]	@ (8001fd0 <extflash_is_initialized+0x14>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	2000008c 	.word	0x2000008c

08001fd4 <extflash_init>:

int extflash_init()
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
	uint8_t manufacturer_id[2] = {0};
 8001fda:	2300      	movs	r3, #0
 8001fdc:	83bb      	strh	r3, [r7, #28]
	extflash_cmd command = {0};
 8001fde:	f107 0308 	add.w	r3, r7, #8
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
 8001fea:	60da      	str	r2, [r3, #12]
 8001fec:	611a      	str	r2, [r3, #16]
	uint8_t density[4] = {0};
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]

	exflashInitDone = 0;
 8001ff2:	4b26      	ldr	r3, [pc, #152]	@ (800208c <extflash_init+0xb8>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
	exflashNumSectors = 0;
 8001ff8:	4b25      	ldr	r3, [pc, #148]	@ (8002090 <extflash_init+0xbc>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]

	extflash_hard_reset();
 8001ffe:	f7ff fd5f 	bl	8001ac0 <extflash_hard_reset>
	extflash_cs_reset();
 8002002:	f7ff fd45 	bl	8001a90 <extflash_cs_reset>
	extflash_wp_reset();
 8002006:	f7ff fd4f 	bl	8001aa8 <extflash_wp_reset>

	command.cmd = EFLASH_CMD_RDMDID;
 800200a:	2390      	movs	r3, #144	@ 0x90
 800200c:	723b      	strb	r3, [r7, #8]
	command.address_en = 1;
 800200e:	2301      	movs	r3, #1
 8002010:	727b      	strb	r3, [r7, #9]
	command.address = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
	command.rx_nb = 2;
 8002016:	2302      	movs	r3, #2
 8002018:	81bb      	strh	r3, [r7, #12]
	command.rx_data = manufacturer_id;
 800201a:	f107 031c 	add.w	r3, r7, #28
 800201e:	61bb      	str	r3, [r7, #24]

	extflash_send_cmd(&command);
 8002020:	f107 0308 	add.w	r3, r7, #8
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fd5f 	bl	8001ae8 <extflash_send_cmd>

	if(manufacturer_id[0] != EFLASH_DEF_MANIFACTURER || manufacturer_id[1] != EFLASH_DEF_DEVID)
 800202a:	7f3b      	ldrb	r3, [r7, #28]
 800202c:	2b9d      	cmp	r3, #157	@ 0x9d
 800202e:	d102      	bne.n	8002036 <extflash_init+0x62>
 8002030:	7f7b      	ldrb	r3, [r7, #29]
 8002032:	2b17      	cmp	r3, #23
 8002034:	d002      	beq.n	800203c <extflash_init+0x68>
	{
		return -1;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
 800203a:	e022      	b.n	8002082 <extflash_init+0xae>
	}

	memset((void *)&command, 0, sizeof(command));
 800203c:	f107 0308 	add.w	r3, r7, #8
 8002040:	2214      	movs	r2, #20
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f010 fcfd 	bl	8012a44 <memset>

	extflash_read_sfdp(SFDP_FLASH_DENSITY, density, sizeof(density));
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	2204      	movs	r2, #4
 800204e:	4619      	mov	r1, r3
 8002050:	2034      	movs	r0, #52	@ 0x34
 8002052:	f7ff fe0e 	bl	8001c72 <extflash_read_sfdp>

	memcpy(&exflashSize, density, sizeof(uint32_t));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a0e      	ldr	r2, [pc, #56]	@ (8002094 <extflash_init+0xc0>)
 800205a:	6013      	str	r3, [r2, #0]

	exflashSize += 1;
 800205c:	4b0d      	ldr	r3, [pc, #52]	@ (8002094 <extflash_init+0xc0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	3301      	adds	r3, #1
 8002062:	4a0c      	ldr	r2, [pc, #48]	@ (8002094 <extflash_init+0xc0>)
 8002064:	6013      	str	r3, [r2, #0]
	exflashSize >>= 3;
 8002066:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <extflash_init+0xc0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	08db      	lsrs	r3, r3, #3
 800206c:	4a09      	ldr	r2, [pc, #36]	@ (8002094 <extflash_init+0xc0>)
 800206e:	6013      	str	r3, [r2, #0]

	exflashNumSectors = exflashSize / EFLASH_DEF_SECTOR_SIZE;
 8002070:	4b08      	ldr	r3, [pc, #32]	@ (8002094 <extflash_init+0xc0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	0b1b      	lsrs	r3, r3, #12
 8002076:	4a06      	ldr	r2, [pc, #24]	@ (8002090 <extflash_init+0xbc>)
 8002078:	6013      	str	r3, [r2, #0]

	exflashInitDone = 1;
 800207a:	4b04      	ldr	r3, [pc, #16]	@ (800208c <extflash_init+0xb8>)
 800207c:	2201      	movs	r2, #1
 800207e:	701a      	strb	r2, [r3, #0]

	return 0;
 8002080:	2300      	movs	r3, #0

}
 8002082:	4618      	mov	r0, r3
 8002084:	3720      	adds	r7, #32
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	2000008c 	.word	0x2000008c
 8002090:	20000088 	.word	0x20000088
 8002094:	20000084 	.word	0x20000084

08002098 <System_Init>:
#include "lsm6dsv16x_reg.h"
#include "lsm6dsv16x_rw.h"

/*-----INIZiALIZZAZIONE SISTEMA-----*/
void System_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
	acc.write_reg = acc_write;
 800209c:	4b18      	ldr	r3, [pc, #96]	@ (8002100 <System_Init+0x68>)
 800209e:	4a19      	ldr	r2, [pc, #100]	@ (8002104 <System_Init+0x6c>)
 80020a0:	601a      	str	r2, [r3, #0]
	acc.read_reg = acc_read;
 80020a2:	4b17      	ldr	r3, [pc, #92]	@ (8002100 <System_Init+0x68>)
 80020a4:	4a18      	ldr	r2, [pc, #96]	@ (8002108 <System_Init+0x70>)
 80020a6:	605a      	str	r2, [r3, #4]
	acc.handle = &hspi3;
 80020a8:	4b15      	ldr	r3, [pc, #84]	@ (8002100 <System_Init+0x68>)
 80020aa:	4a18      	ldr	r2, [pc, #96]	@ (800210c <System_Init+0x74>)
 80020ac:	60da      	str	r2, [r3, #12]

	LED_Start(ORG_LED, FAST);
 80020ae:	2102      	movs	r1, #2
 80020b0:	2000      	movs	r0, #0
 80020b2:	f000 fa31 	bl	8002518 <LED_Start>

	BC_Init();
 80020b6:	f7ff fa71 	bl	800159c <BC_Init>
	INA3221_Init();
 80020ba:	f7fe fb9f 	bl	80007fc <INA3221_Init>
	FatFS_Init();
 80020be:	f000 f82b 	bl	8002118 <FatFS_Init>
	Config_Init();
 80020c2:	f000 f957 	bl	8002374 <Config_Init>
	Acc_Init(&acc);
 80020c6:	480e      	ldr	r0, [pc, #56]	@ (8002100 <System_Init+0x68>)
 80020c8:	f000 f8ae 	bl	8002228 <Acc_Init>
	SIM_Init();
 80020cc:	f7fe fdde 	bl	8000c8c <SIM_Init>
	RTC_Init();
 80020d0:	f7fe fc42 	bl	8000958 <RTC_Init>

	HAL_UARTEx_ReceiveToIdle_DMA(LTE_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 80020d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020d8:	490d      	ldr	r1, [pc, #52]	@ (8002110 <System_Init+0x78>)
 80020da:	480e      	ldr	r0, [pc, #56]	@ (8002114 <System_Init+0x7c>)
 80020dc:	f010 fb74 	bl	80127c8 <HAL_UARTEx_ReceiveToIdle_DMA>

	LED_Start(RED_LED, ON);
 80020e0:	2101      	movs	r1, #1
 80020e2:	2004      	movs	r0, #4
 80020e4:	f000 fa18 	bl	8002518 <LED_Start>
	HAL_Delay(9000);
 80020e8:	f242 3028 	movw	r0, #9000	@ 0x2328
 80020ec:	f006 feb6 	bl	8008e5c <HAL_Delay>

	LED_Stop(RED_LED);
 80020f0:	2004      	movs	r0, #4
 80020f2:	f000 fa81 	bl	80025f8 <LED_Stop>
	LED_Stop(ORG_LED);
 80020f6:	2000      	movs	r0, #0
 80020f8:	f000 fa7e 	bl	80025f8 <LED_Stop>
}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20004bf8 	.word	0x20004bf8
 8002104:	08002e1b 	.word	0x08002e1b
 8002108:	08002e73 	.word	0x08002e73
 800210c:	20000280 	.word	0x20000280
 8002110:	20004c08 	.word	0x20004c08
 8002114:	2000049c 	.word	0x2000049c

08002118 <FatFS_Init>:

/*-----INIZiALIZZAZIONE MEMORIE-----*/
void FatFS_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	75fb      	strb	r3, [r7, #23]
	MKFS_PARM mkfs_opt = {0};
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]

	do
	{
		flags.RAM_Mounted = 0;
 800212e:	4a37      	ldr	r2, [pc, #220]	@ (800220c <FatFS_Init+0xf4>)
 8002130:	7813      	ldrb	r3, [r2, #0]
 8002132:	f023 0308 	bic.w	r3, r3, #8
 8002136:	7013      	strb	r3, [r2, #0]
		
		mkfs_opt.fmt = FM_FAT32;
 8002138:	2302      	movs	r3, #2
 800213a:	713b      	strb	r3, [r7, #4]
		mkfs_opt.au_size = 1024; 
 800213c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002140:	613b      	str	r3, [r7, #16]
		mkfs_opt.n_fat = 1;
 8002142:	2301      	movs	r3, #1
 8002144:	717b      	strb	r3, [r7, #5]
		mkfs_opt.align = 1;
 8002146:	2301      	movs	r3, #1
 8002148:	60bb      	str	r3, [r7, #8]

		fRes = f_mkfs("/ram", &mkfs_opt, psram_fs.win, sizeof(psram_fs.win));
 800214a:	1d39      	adds	r1, r7, #4
 800214c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002150:	4a2f      	ldr	r2, [pc, #188]	@ (8002210 <FatFS_Init+0xf8>)
 8002152:	4830      	ldr	r0, [pc, #192]	@ (8002214 <FatFS_Init+0xfc>)
 8002154:	f006 f994 	bl	8008480 <f_mkfs>
 8002158:	4603      	mov	r3, r0
 800215a:	75fb      	strb	r3, [r7, #23]
		if (fRes != FR_OK)
 800215c:	7dfb      	ldrb	r3, [r7, #23]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10f      	bne.n	8002182 <FatFS_Init+0x6a>
		{
			break;
		}

		fRes = f_mount(&psram_fs, "/ram", 1);
 8002162:	2201      	movs	r2, #1
 8002164:	492b      	ldr	r1, [pc, #172]	@ (8002214 <FatFS_Init+0xfc>)
 8002166:	482c      	ldr	r0, [pc, #176]	@ (8002218 <FatFS_Init+0x100>)
 8002168:	f005 fb08 	bl	800777c <f_mount>
 800216c:	4603      	mov	r3, r0
 800216e:	75fb      	strb	r3, [r7, #23]

		if (fRes != FR_OK)
 8002170:	7dfb      	ldrb	r3, [r7, #23]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d107      	bne.n	8002186 <FatFS_Init+0x6e>
		{
			break;
		}

		flags.RAM_Mounted = 1;
 8002176:	4a25      	ldr	r2, [pc, #148]	@ (800220c <FatFS_Init+0xf4>)
 8002178:	7813      	ldrb	r3, [r2, #0]
 800217a:	f043 0308 	orr.w	r3, r3, #8
 800217e:	7013      	strb	r3, [r2, #0]

		break;
 8002180:	e002      	b.n	8002188 <FatFS_Init+0x70>
			break;
 8002182:	bf00      	nop
 8002184:	e000      	b.n	8002188 <FatFS_Init+0x70>
			break;
 8002186:	bf00      	nop
	} while (1);

	do
	{
		flags.FLASH_Mounted = 0;
 8002188:	4a20      	ldr	r2, [pc, #128]	@ (800220c <FatFS_Init+0xf4>)
 800218a:	7813      	ldrb	r3, [r2, #0]
 800218c:	f023 0310 	bic.w	r3, r3, #16
 8002190:	7013      	strb	r3, [r2, #0]
		fRes = f_mount(&flash_fs, "/flash", 1);
 8002192:	2201      	movs	r2, #1
 8002194:	4921      	ldr	r1, [pc, #132]	@ (800221c <FatFS_Init+0x104>)
 8002196:	4822      	ldr	r0, [pc, #136]	@ (8002220 <FatFS_Init+0x108>)
 8002198:	f005 faf0 	bl	800777c <f_mount>
 800219c:	4603      	mov	r3, r0
 800219e:	75fb      	strb	r3, [r7, #23]

		if (fRes == FR_NO_FILESYSTEM)
 80021a0:	7dfb      	ldrb	r3, [r7, #23]
 80021a2:	2b0d      	cmp	r3, #13
 80021a4:	d124      	bne.n	80021f0 <FatFS_Init+0xd8>
		{
			memset((void *)&mkfs_opt, 0, sizeof(mkfs_opt));
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	2210      	movs	r2, #16
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f010 fc49 	bl	8012a44 <memset>
			mkfs_opt.fmt = FM_FAT32;
 80021b2:	2302      	movs	r3, #2
 80021b4:	713b      	strb	r3, [r7, #4]
			mkfs_opt.au_size = 4096;    
 80021b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021ba:	613b      	str	r3, [r7, #16]
			mkfs_opt.n_fat = 1;
 80021bc:	2301      	movs	r3, #1
 80021be:	717b      	strb	r3, [r7, #5]
			mkfs_opt.align = 1;
 80021c0:	2301      	movs	r3, #1
 80021c2:	60bb      	str	r3, [r7, #8]

			fRes = f_mkfs("/flash", &mkfs_opt, flash_fs.win, sizeof(flash_fs.win));
 80021c4:	1d39      	adds	r1, r7, #4
 80021c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021ca:	4a16      	ldr	r2, [pc, #88]	@ (8002224 <FatFS_Init+0x10c>)
 80021cc:	4813      	ldr	r0, [pc, #76]	@ (800221c <FatFS_Init+0x104>)
 80021ce:	f006 f957 	bl	8008480 <f_mkfs>
 80021d2:	4603      	mov	r3, r0
 80021d4:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 80021d6:	7dfb      	ldrb	r3, [r7, #23]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10f      	bne.n	80021fc <FatFS_Init+0xe4>
			{
				break;
			}

			fRes = f_mount(&flash_fs, "/flash", 1);
 80021dc:	2201      	movs	r2, #1
 80021de:	490f      	ldr	r1, [pc, #60]	@ (800221c <FatFS_Init+0x104>)
 80021e0:	480f      	ldr	r0, [pc, #60]	@ (8002220 <FatFS_Init+0x108>)
 80021e2:	f005 facb 	bl	800777c <f_mount>
 80021e6:	4603      	mov	r3, r0
 80021e8:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 80021ea:	7dfb      	ldrb	r3, [r7, #23]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d107      	bne.n	8002200 <FatFS_Init+0xe8>
			{
				break;
			}
		}

		flags.FLASH_Mounted = 1;
 80021f0:	4a06      	ldr	r2, [pc, #24]	@ (800220c <FatFS_Init+0xf4>)
 80021f2:	7813      	ldrb	r3, [r2, #0]
 80021f4:	f043 0310 	orr.w	r3, r3, #16
 80021f8:	7013      	strb	r3, [r2, #0]

		break;
 80021fa:	e002      	b.n	8002202 <FatFS_Init+0xea>
				break;
 80021fc:	bf00      	nop
 80021fe:	e000      	b.n	8002202 <FatFS_Init+0xea>
				break;
 8002200:	bf00      	nop
	} while (1);


}
 8002202:	bf00      	nop
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20001980 	.word	0x20001980
 8002210:	20001ae0 	.word	0x20001ae0
 8002214:	08013e58 	.word	0x08013e58
 8002218:	20001aac 	.word	0x20001aac
 800221c:	08013e60 	.word	0x08013e60
 8002220:	20002ae0 	.word	0x20002ae0
 8002224:	20002b14 	.word	0x20002b14

08002228 <Acc_Init>:

/*-----INIZiALIZZAZIONE ACCELEROMETRO-----*/
void Acc_Init(stmdev_ctx_t* acc)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
	lsm6dsv16x_reset_t rst;
	lsm6dsv16x_pin_int_route_t pin_int = {0};
 8002230:	f107 0310 	add.w	r3, r7, #16
 8002234:	2100      	movs	r1, #0
 8002236:	460a      	mov	r2, r1
 8002238:	801a      	strh	r2, [r3, #0]
 800223a:	460a      	mov	r2, r1
 800223c:	709a      	strb	r2, [r3, #2]
	uint8_t acc_whoamI = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	73fb      	strb	r3, [r7, #15]
	uint8_t wmi_cnt = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	75fb      	strb	r3, [r7, #23]

	pin_int.fifo_th = PROPERTY_ENABLE;
 8002246:	7c3b      	ldrb	r3, [r7, #16]
 8002248:	f043 0308 	orr.w	r3, r3, #8
 800224c:	743b      	strb	r3, [r7, #16]


	lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 800224e:	f107 030f 	add.w	r3, r7, #15
 8002252:	4619      	mov	r1, r3
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 fab3 	bl	80027c0 <lsm6dsv16x_device_id_get>
	if (acc_whoamI != LSM6DSV16X_ID)
 800225a:	7bfb      	ldrb	r3, [r7, #15]
 800225c:	2b70      	cmp	r3, #112	@ 0x70
 800225e:	d01a      	beq.n	8002296 <Acc_Init+0x6e>
		while (acc_whoamI != LSM6DSV16X_ID)
 8002260:	e016      	b.n	8002290 <Acc_Init+0x68>
		{
			lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 8002262:	f107 030f 	add.w	r3, r7, #15
 8002266:	4619      	mov	r1, r3
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 faa9 	bl	80027c0 <lsm6dsv16x_device_id_get>
			wmi_cnt++;
 800226e:	7dfb      	ldrb	r3, [r7, #23]
 8002270:	3301      	adds	r3, #1
 8002272:	75fb      	strb	r3, [r7, #23]
			if (wmi_cnt == 3)
 8002274:	7dfb      	ldrb	r3, [r7, #23]
 8002276:	2b03      	cmp	r3, #3
 8002278:	d10a      	bne.n	8002290 <Acc_Init+0x68>
			{
				flags.ACC_Present = 0;
 800227a:	4a3b      	ldr	r2, [pc, #236]	@ (8002368 <Acc_Init+0x140>)
 800227c:	7853      	ldrb	r3, [r2, #1]
 800227e:	f023 0301 	bic.w	r3, r3, #1
 8002282:	7053      	strb	r3, [r2, #1]
				flags.ACC_Complete = 1;
 8002284:	4a38      	ldr	r2, [pc, #224]	@ (8002368 <Acc_Init+0x140>)
 8002286:	7853      	ldrb	r3, [r2, #1]
 8002288:	f043 0302 	orr.w	r3, r3, #2
 800228c:	7053      	strb	r3, [r2, #1]
 800228e:	e068      	b.n	8002362 <Acc_Init+0x13a>
		while (acc_whoamI != LSM6DSV16X_ID)
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	2b70      	cmp	r3, #112	@ 0x70
 8002294:	d1e5      	bne.n	8002262 <Acc_Init+0x3a>
				return;
			}
		}
	flags.ACC_Present = 1;
 8002296:	4a34      	ldr	r2, [pc, #208]	@ (8002368 <Acc_Init+0x140>)
 8002298:	7853      	ldrb	r3, [r2, #1]
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	7053      	strb	r3, [r2, #1]
	lsm6dsv16x_reset_set(acc, LSM6DSV16X_GLOBAL_RST);
 80022a0:	2101      	movs	r1, #1
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f9e6 	bl	8002674 <lsm6dsv16x_reset_set>
	do {
		lsm6dsv16x_reset_get(acc, &rst);
 80022a8:	f107 0316 	add.w	r3, r7, #22
 80022ac:	4619      	mov	r1, r3
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fa30 	bl	8002714 <lsm6dsv16x_reset_get>
		HAL_Delay(10);
 80022b4:	200a      	movs	r0, #10
 80022b6:	f006 fdd1 	bl	8008e5c <HAL_Delay>
	} while (rst != LSM6DSV16X_READY);
 80022ba:	7dbb      	ldrb	r3, [r7, #22]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f3      	bne.n	80022a8 <Acc_Init+0x80>

	lsm6dsv16x_block_data_update_set(acc, PROPERTY_ENABLE);
 80022c0:	2101      	movs	r1, #1
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 fb79 	bl	80029ba <lsm6dsv16x_block_data_update_set>
	lsm6dsv16x_ui_i2c_i3c_mode_set(acc, LSM6DSV16X_I2C_I3C_DISABLE);
 80022c8:	2101      	movs	r1, #1
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fd7f 	bl	8002dce <lsm6dsv16x_ui_i2c_i3c_mode_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_HIGH_PERFORMANCE_MD);
 80022d0:	2100      	movs	r1, #0
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fad6 	bl	8002884 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_HIGH_PERFORMANCE_MD);
 80022d8:	2100      	movs	r1, #0
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 fb47 	bl	800296e <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_fifo_xl_batch_set(acc, LSM6DSV16X_XL_BATCHED_AT_960Hz);
 80022e0:	2109      	movs	r1, #9
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 fd01 	bl	8002cea <lsm6dsv16x_fifo_xl_batch_set>
	lsm6dsv16x_fifo_gy_batch_set(acc, LSM6DSV16X_GY_NOT_BATCHED);
 80022e8:	2100      	movs	r1, #0
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 fd23 	bl	8002d36 <lsm6dsv16x_fifo_gy_batch_set>
	lsm6dsv16x_fifo_mode_set(acc, LSM6DSV16X_BYPASS_MODE);
 80022f0:	2100      	movs	r1, #0
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 fd45 	bl	8002d82 <lsm6dsv16x_fifo_mode_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 80022f8:	2100      	movs	r1, #0
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 fa71 	bl	80027e2 <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_gy_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 8002300:	2100      	movs	r1, #0
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 fae4 	bl	80028d0 <lsm6dsv16x_gy_data_rate_set>
	lsm6dsv16x_odr_trig_cfg_set(acc, 16);  //800SPS
 8002308:	2110      	movs	r1, #16
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 fb7b 	bl	8002a06 <lsm6dsv16x_odr_trig_cfg_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_ODR_TRIGGERED_MD);
 8002310:	2103      	movs	r1, #3
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 fab6 	bl	8002884 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_ODR_TRIGGERED_MD);
 8002318:	2103      	movs	r1, #3
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 fb27 	bl	800296e <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_den_polarity_set(acc, LSM6DSV16X_DEN_ACT_HIGH);
 8002320:	2101      	movs	r1, #1
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 fc9b 	bl	8002c5e <lsm6dsv16x_den_polarity_set>
	HAL_TIM_PWM_Start(ACC_TIMER, TIM_CHANNEL_3);
 8002328:	2108      	movs	r1, #8
 800232a:	4810      	ldr	r0, [pc, #64]	@ (800236c <Acc_Init+0x144>)
 800232c:	f00d fbac 	bl	800fa88 <HAL_TIM_PWM_Start>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_AT_960Hz);
 8002330:	2109      	movs	r1, #9
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 fa55 	bl	80027e2 <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_xl_full_scale_set(acc, LSM6DSV16X_2g);
 8002338:	2100      	movs	r1, #0
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 fbb2 	bl	8002aa4 <lsm6dsv16x_xl_full_scale_set>
	lsm6dsv16x_gy_full_scale_set(acc, LSM6DSV16X_2000dps);
 8002340:	2104      	movs	r1, #4
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 fb88 	bl	8002a58 <lsm6dsv16x_gy_full_scale_set>
	lsm6dsv16x_fifo_watermark_set(acc, ACC_FIFO_WATERMARK);
 8002348:	21c8      	movs	r1, #200	@ 0xc8
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 fcad 	bl	8002caa <lsm6dsv16x_fifo_watermark_set>
	lsm6dsv16x_pin_int1_route_set(acc, &pin_int);
 8002350:	f107 0310 	add.w	r3, r7, #16
 8002354:	4619      	mov	r1, r3
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fbca 	bl	8002af0 <lsm6dsv16x_pin_int1_route_set>

	__HAL_GPIO_EXTI_CLEAR_IT(ACC_INTERRUPT);
 800235c:	4b04      	ldr	r3, [pc, #16]	@ (8002370 <Acc_Init+0x148>)
 800235e:	2204      	movs	r2, #4
 8002360:	615a      	str	r2, [r3, #20]
}
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20001980 	.word	0x20001980
 800236c:	2000037c 	.word	0x2000037c
 8002370:	40010400 	.word	0x40010400

08002374 <Config_Init>:

/*-----INIZiALIZZAZIONE CONFIGURAZIONE-----*/
void Config_Init(void)
{
 8002374:	b590      	push	{r4, r7, lr}
 8002376:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 800237a:	b087      	sub	sp, #28
 800237c:	af00      	add	r7, sp, #0
    FIL config_file;
    UINT bytes_read;
    UINT bytes_written;

    if (f_open(&config_file, APP_CONFIG_FILE, FA_READ) == FR_OK) 
 800237e:	f107 0318 	add.w	r3, r7, #24
 8002382:	3b0c      	subs	r3, #12
 8002384:	2201      	movs	r2, #1
 8002386:	495c      	ldr	r1, [pc, #368]	@ (80024f8 <Config_Init+0x184>)
 8002388:	4618      	mov	r0, r3
 800238a:	f005 fa41 	bl	8007810 <f_open>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d121      	bne.n	80023d8 <Config_Init+0x64>
	{
        if (f_read(&config_file, &config, sizeof(config), &bytes_read) == FR_OK && bytes_read == sizeof(config))
 8002394:	f107 0318 	add.w	r3, r7, #24
 8002398:	3b10      	subs	r3, #16
 800239a:	f107 0018 	add.w	r0, r7, #24
 800239e:	380c      	subs	r0, #12
 80023a0:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80023a4:	4955      	ldr	r1, [pc, #340]	@ (80024fc <Config_Init+0x188>)
 80023a6:	f005 fbcb 	bl	8007b40 <f_read>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10d      	bne.n	80023cc <Config_Init+0x58>
 80023b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80023b4:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80023b8:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 80023bc:	d106      	bne.n	80023cc <Config_Init+0x58>
		{
			f_close(&config_file);
 80023be:	f107 0318 	add.w	r3, r7, #24
 80023c2:	3b0c      	subs	r3, #12
 80023c4:	4618      	mov	r0, r3
 80023c6:	f005 ff17 	bl	80081f8 <f_close>
			return;
 80023ca:	e08f      	b.n	80024ec <Config_Init+0x178>
        }
        f_close(&config_file);
 80023cc:	f107 0318 	add.w	r3, r7, #24
 80023d0:	3b0c      	subs	r3, #12
 80023d2:	4618      	mov	r0, r3
 80023d4:	f005 ff10 	bl	80081f8 <f_close>
    }

    config.device_id = 0;
 80023d8:	4b48      	ldr	r3, [pc, #288]	@ (80024fc <Config_Init+0x188>)
 80023da:	2200      	movs	r2, #0
 80023dc:	701a      	strb	r2, [r3, #0]
	config.samp_freq = 800;
 80023de:	4b47      	ldr	r3, [pc, #284]	@ (80024fc <Config_Init+0x188>)
 80023e0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80023e4:	805a      	strh	r2, [r3, #2]
	config.buffering_secs = 30;
 80023e6:	4b45      	ldr	r3, [pc, #276]	@ (80024fc <Config_Init+0x188>)
 80023e8:	221e      	movs	r2, #30
 80023ea:	711a      	strb	r2, [r3, #4]
	config.hammer_th = 2048;
 80023ec:	4b43      	ldr	r3, [pc, #268]	@ (80024fc <Config_Init+0x188>)
 80023ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023f2:	80da      	strh	r2, [r3, #6]
    for(int i = 0; i < 24; i++) 
 80023f4:	2300      	movs	r3, #0
 80023f6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80023fa:	f102 0214 	add.w	r2, r2, #20
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	e01f      	b.n	8002442 <Config_Init+0xce>
	{
        config.low_th[i] = 0;
 8002402:	4a3e      	ldr	r2, [pc, #248]	@ (80024fc <Config_Init+0x188>)
 8002404:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002408:	f103 0314 	add.w	r3, r3, #20
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	3304      	adds	r3, #4
 8002410:	2100      	movs	r1, #0
 8002412:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        config.high_th[i] = 4096;
 8002416:	4a39      	ldr	r2, [pc, #228]	@ (80024fc <Config_Init+0x188>)
 8002418:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800241c:	f103 0314 	add.w	r3, r3, #20
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	331c      	adds	r3, #28
 8002424:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002428:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i = 0; i < 24; i++) 
 800242c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002430:	f103 0314 	add.w	r3, r3, #20
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	3301      	adds	r3, #1
 8002438:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800243c:	f102 0214 	add.w	r2, r2, #20
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002446:	f103 0314 	add.w	r3, r3, #20
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b17      	cmp	r3, #23
 800244e:	ddd8      	ble.n	8002402 <Config_Init+0x8e>
    }
    strcpy(config.data_topic, "Data_Topic");
 8002450:	4a2b      	ldr	r2, [pc, #172]	@ (8002500 <Config_Init+0x18c>)
 8002452:	4b2c      	ldr	r3, [pc, #176]	@ (8002504 <Config_Init+0x190>)
 8002454:	cb03      	ldmia	r3!, {r0, r1}
 8002456:	6010      	str	r0, [r2, #0]
 8002458:	6051      	str	r1, [r2, #4]
 800245a:	8819      	ldrh	r1, [r3, #0]
 800245c:	789b      	ldrb	r3, [r3, #2]
 800245e:	8111      	strh	r1, [r2, #8]
 8002460:	7293      	strb	r3, [r2, #10]
    strcpy(config.command_topic, "Command_Topic");  
 8002462:	4a29      	ldr	r2, [pc, #164]	@ (8002508 <Config_Init+0x194>)
 8002464:	4b29      	ldr	r3, [pc, #164]	@ (800250c <Config_Init+0x198>)
 8002466:	4614      	mov	r4, r2
 8002468:	cb07      	ldmia	r3!, {r0, r1, r2}
 800246a:	6020      	str	r0, [r4, #0]
 800246c:	6061      	str	r1, [r4, #4]
 800246e:	60a2      	str	r2, [r4, #8]
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	81a3      	strh	r3, [r4, #12]
    strcpy(config.ota_topic, "OTA_Topic");
 8002474:	4a26      	ldr	r2, [pc, #152]	@ (8002510 <Config_Init+0x19c>)
 8002476:	4b27      	ldr	r3, [pc, #156]	@ (8002514 <Config_Init+0x1a0>)
 8002478:	cb03      	ldmia	r3!, {r0, r1}
 800247a:	6010      	str	r0, [r2, #0]
 800247c:	6051      	str	r1, [r2, #4]
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	8113      	strh	r3, [r2, #8]
    
    if (f_open(&config_file, APP_CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8002482:	f107 0318 	add.w	r3, r7, #24
 8002486:	3b0c      	subs	r3, #12
 8002488:	220a      	movs	r2, #10
 800248a:	491b      	ldr	r1, [pc, #108]	@ (80024f8 <Config_Init+0x184>)
 800248c:	4618      	mov	r0, r3
 800248e:	f005 f9bf 	bl	8007810 <f_open>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d128      	bne.n	80024ea <Config_Init+0x176>
    {
        return;
    }

    if (f_write(&config_file, &config, sizeof(Config_Typedef), &bytes_written) != FR_OK || bytes_written != sizeof(Config_Typedef)) 
 8002498:	f107 0318 	add.w	r3, r7, #24
 800249c:	3b14      	subs	r3, #20
 800249e:	f107 0018 	add.w	r0, r7, #24
 80024a2:	380c      	subs	r0, #12
 80024a4:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80024a8:	4914      	ldr	r1, [pc, #80]	@ (80024fc <Config_Init+0x188>)
 80024aa:	f005 fc9c 	bl	8007de6 <f_write>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d106      	bne.n	80024c2 <Config_Init+0x14e>
 80024b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80024b8:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80024bc:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 80024c0:	d006      	beq.n	80024d0 <Config_Init+0x15c>
	{
        f_close(&config_file);
 80024c2:	f107 0318 	add.w	r3, r7, #24
 80024c6:	3b0c      	subs	r3, #12
 80024c8:	4618      	mov	r0, r3
 80024ca:	f005 fe95 	bl	80081f8 <f_close>
        return;
 80024ce:	e00d      	b.n	80024ec <Config_Init+0x178>
    }
    
    f_sync(&config_file);
 80024d0:	f107 0318 	add.w	r3, r7, #24
 80024d4:	3b0c      	subs	r3, #12
 80024d6:	4618      	mov	r0, r3
 80024d8:	f005 fe0e 	bl	80080f8 <f_sync>
    f_close(&config_file);
 80024dc:	f107 0318 	add.w	r3, r7, #24
 80024e0:	3b0c      	subs	r3, #12
 80024e2:	4618      	mov	r0, r3
 80024e4:	f005 fe88 	bl	80081f8 <f_close>
 80024e8:	e000      	b.n	80024ec <Config_Init+0x178>
        return;
 80024ea:	bf00      	nop
}
 80024ec:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 80024f0:	371c      	adds	r7, #28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd90      	pop	{r4, r7, pc}
 80024f6:	bf00      	nop
 80024f8:	08013e68 	.word	0x08013e68
 80024fc:	20001984 	.word	0x20001984
 8002500:	200019ec 	.word	0x200019ec
 8002504:	08013e7c 	.word	0x08013e7c
 8002508:	20001a2c 	.word	0x20001a2c
 800250c:	08013e88 	.word	0x08013e88
 8002510:	20001a6c 	.word	0x20001a6c
 8002514:	08013e98 	.word	0x08013e98

08002518 <LED_Start>:
#include "leds.h"
#include "peripherals.h"

/*------ACCENSIONE LED------*/
void LED_Start(uint32_t LED, uint8_t mode)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	@ 0x28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	70fb      	strb	r3, [r7, #3]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002524:	f107 030c 	add.w	r3, r7, #12
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]
 8002534:	615a      	str	r2, [r3, #20]
 8002536:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002540:	2300      	movs	r3, #0
 8002542:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002544:	2300      	movs	r3, #0
 8002546:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002548:	2300      	movs	r3, #0
 800254a:	623b      	str	r3, [r7, #32]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800254c:	2300      	movs	r3, #0
 800254e:	627b      	str	r3, [r7, #36]	@ 0x24

	switch(mode)
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	2b03      	cmp	r3, #3
 8002554:	d00e      	beq.n	8002574 <LED_Start+0x5c>
 8002556:	2b03      	cmp	r3, #3
 8002558:	dc10      	bgt.n	800257c <LED_Start+0x64>
 800255a:	2b01      	cmp	r3, #1
 800255c:	d002      	beq.n	8002564 <LED_Start+0x4c>
 800255e:	2b02      	cmp	r3, #2
 8002560:	d004      	beq.n	800256c <LED_Start+0x54>
 8002562:	e00b      	b.n	800257c <LED_Start+0x64>
	{
	case ON:
		sConfigOC.Pulse = 49999;
 8002564:	f24c 334f 	movw	r3, #49999	@ 0xc34f
 8002568:	613b      	str	r3, [r7, #16]
		break;
 800256a:	e007      	b.n	800257c <LED_Start+0x64>
	case FAST:
		sConfigOC.Pulse = 24999;
 800256c:	f246 13a7 	movw	r3, #24999	@ 0x61a7
 8002570:	613b      	str	r3, [r7, #16]
		break;
 8002572:	e003      	b.n	800257c <LED_Start+0x64>
	case SLOW:
		sConfigOC.Pulse = 12499;
 8002574:	f243 03d3 	movw	r3, #12499	@ 0x30d3
 8002578:	613b      	str	r3, [r7, #16]
		break;
 800257a:	bf00      	nop
	}

	HAL_TIM_Base_Init(LED_TIMER);
 800257c:	481d      	ldr	r0, [pc, #116]	@ (80025f4 <LED_Start+0xdc>)
 800257e:	f00c ff3b 	bl	800f3f8 <HAL_TIM_Base_Init>
	HAL_TIM_PWM_Init(LED_TIMER);
 8002582:	481c      	ldr	r0, [pc, #112]	@ (80025f4 <LED_Start+0xdc>)
 8002584:	f00d fa1e 	bl	800f9c4 <HAL_TIM_PWM_Init>

	switch(LED)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b08      	cmp	r3, #8
 800258c:	d009      	beq.n	80025a2 <LED_Start+0x8a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b08      	cmp	r3, #8
 8002592:	d82a      	bhi.n	80025ea <LED_Start+0xd2>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d01b      	beq.n	80025d2 <LED_Start+0xba>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b04      	cmp	r3, #4
 800259e:	d00c      	beq.n	80025ba <LED_Start+0xa2>
	case ORG_LED:
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
		HAL_TIM_PWM_Start(LED_TIMER, LED);
		break;
	}
}
 80025a0:	e023      	b.n	80025ea <LED_Start+0xd2>
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
 80025a2:	f107 030c 	add.w	r3, r7, #12
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	4619      	mov	r1, r3
 80025aa:	4812      	ldr	r0, [pc, #72]	@ (80025f4 <LED_Start+0xdc>)
 80025ac:	f00d fd76 	bl	801009c <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(LED_TIMER, LED);
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4810      	ldr	r0, [pc, #64]	@ (80025f4 <LED_Start+0xdc>)
 80025b4:	f00d fa68 	bl	800fa88 <HAL_TIM_PWM_Start>
		break;
 80025b8:	e017      	b.n	80025ea <LED_Start+0xd2>
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
 80025ba:	f107 030c 	add.w	r3, r7, #12
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	4619      	mov	r1, r3
 80025c2:	480c      	ldr	r0, [pc, #48]	@ (80025f4 <LED_Start+0xdc>)
 80025c4:	f00d fd6a 	bl	801009c <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(LED_TIMER, LED);
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	480a      	ldr	r0, [pc, #40]	@ (80025f4 <LED_Start+0xdc>)
 80025cc:	f00d fa5c 	bl	800fa88 <HAL_TIM_PWM_Start>
		break;
 80025d0:	e00b      	b.n	80025ea <LED_Start+0xd2>
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
 80025d2:	f107 030c 	add.w	r3, r7, #12
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	4619      	mov	r1, r3
 80025da:	4806      	ldr	r0, [pc, #24]	@ (80025f4 <LED_Start+0xdc>)
 80025dc:	f00d fd5e 	bl	801009c <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(LED_TIMER, LED);
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	4804      	ldr	r0, [pc, #16]	@ (80025f4 <LED_Start+0xdc>)
 80025e4:	f00d fa50 	bl	800fa88 <HAL_TIM_PWM_Start>
		break;
 80025e8:	bf00      	nop
}
 80025ea:	bf00      	nop
 80025ec:	3728      	adds	r7, #40	@ 0x28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200002e4 	.word	0x200002e4

080025f8 <LED_Stop>:

/*------SPEGNIMENTO LED------*/
void LED_Stop(uint32_t LED)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(LED_TIMER, LED);
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	4803      	ldr	r0, [pc, #12]	@ (8002610 <LED_Stop+0x18>)
 8002604:	f00d fb46 	bl	800fc94 <HAL_TIM_PWM_Stop>
}
 8002608:	bf00      	nop
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	200002e4 	.word	0x200002e4

08002614 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	461a      	mov	r2, r3
 8002620:	460b      	mov	r3, r1
 8002622:	72fb      	strb	r3, [r7, #11]
 8002624:	4613      	mov	r3, r2
 8002626:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	685c      	ldr	r4, [r3, #4]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	68d8      	ldr	r0, [r3, #12]
 8002630:	893b      	ldrh	r3, [r7, #8]
 8002632:	7af9      	ldrb	r1, [r7, #11]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	47a0      	blx	r4
 8002638:	6178      	str	r0, [r7, #20]

  return ret;
 800263a:	697b      	ldr	r3, [r7, #20]
}
 800263c:	4618      	mov	r0, r3
 800263e:	371c      	adds	r7, #28
 8002640:	46bd      	mov	sp, r7
 8002642:	bd90      	pop	{r4, r7, pc}

08002644 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8002644:	b590      	push	{r4, r7, lr}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	607a      	str	r2, [r7, #4]
 800264e:	461a      	mov	r2, r3
 8002650:	460b      	mov	r3, r1
 8002652:	72fb      	strb	r3, [r7, #11]
 8002654:	4613      	mov	r3, r2
 8002656:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681c      	ldr	r4, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	68d8      	ldr	r0, [r3, #12]
 8002660:	893b      	ldrh	r3, [r7, #8]
 8002662:	7af9      	ldrb	r1, [r7, #11]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	47a0      	blx	r4
 8002668:	6178      	str	r0, [r7, #20]

  return ret;
 800266a:	697b      	ldr	r3, [r7, #20]
}
 800266c:	4618      	mov	r0, r3
 800266e:	371c      	adds	r7, #28
 8002670:	46bd      	mov	sp, r7
 8002672:	bd90      	pop	{r4, r7, pc}

08002674 <lsm6dsv16x_reset_set>:
  * @param  val      Reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_set(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t val)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8002680:	f107 020c 	add.w	r2, r7, #12
 8002684:	2301      	movs	r3, #1
 8002686:	2112      	movs	r1, #18
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff ffc3 	bl	8002614 <lsm6dsv16x_read_reg>
 800268e:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8002690:	f107 0210 	add.w	r2, r7, #16
 8002694:	2301      	movs	r3, #1
 8002696:	2101      	movs	r1, #1
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff ffbb 	bl	8002614 <lsm6dsv16x_read_reg>
 800269e:	4602      	mov	r2, r0
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	4413      	add	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <lsm6dsv16x_reset_set+0x3c>
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	e02d      	b.n	800270c <lsm6dsv16x_reset_set+0x98>

  ctrl3.boot = ((uint8_t)val & 0x04U) >> 2;
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	089b      	lsrs	r3, r3, #2
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	7b3b      	ldrb	r3, [r7, #12]
 80026bc:	f362 13c7 	bfi	r3, r2, #7, #1
 80026c0:	733b      	strb	r3, [r7, #12]
  ctrl3.sw_reset = ((uint8_t)val & 0x02U) >> 1;
 80026c2:	78fb      	ldrb	r3, [r7, #3]
 80026c4:	085b      	lsrs	r3, r3, #1
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	7b3b      	ldrb	r3, [r7, #12]
 80026ce:	f362 0300 	bfi	r3, r2, #0, #1
 80026d2:	733b      	strb	r3, [r7, #12]
  func_cfg_access.sw_por = (uint8_t)val & 0x01U;
 80026d4:	78fb      	ldrb	r3, [r7, #3]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	7c3b      	ldrb	r3, [r7, #16]
 80026de:	f362 0382 	bfi	r3, r2, #2, #1
 80026e2:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80026e4:	f107 020c 	add.w	r2, r7, #12
 80026e8:	2301      	movs	r3, #1
 80026ea:	2112      	movs	r1, #18
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ffa9 	bl	8002644 <lsm6dsv16x_write_reg>
 80026f2:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80026f4:	f107 0210 	add.w	r2, r7, #16
 80026f8:	2301      	movs	r3, #1
 80026fa:	2101      	movs	r1, #1
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ffa1 	bl	8002644 <lsm6dsv16x_write_reg>
 8002702:	4602      	mov	r2, r0
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	4413      	add	r3, r2
 8002708:	617b      	str	r3, [r7, #20]

  return ret;
 800270a:	697b      	ldr	r3, [r7, #20]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <lsm6dsv16x_reset_get>:
  * @param  val      Global reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_get(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t *val)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800271e:	f107 020c 	add.w	r2, r7, #12
 8002722:	2301      	movs	r3, #1
 8002724:	2112      	movs	r1, #18
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff ff74 	bl	8002614 <lsm6dsv16x_read_reg>
 800272c:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 800272e:	f107 0210 	add.w	r2, r7, #16
 8002732:	2301      	movs	r3, #1
 8002734:	2101      	movs	r1, #1
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff ff6c 	bl	8002614 <lsm6dsv16x_read_reg>
 800273c:	4602      	mov	r2, r0
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	4413      	add	r3, r2
 8002742:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <lsm6dsv16x_reset_get+0x3a>
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	e033      	b.n	80027b6 <lsm6dsv16x_reset_get+0xa2>

  switch ((ctrl3.sw_reset << 2) + (ctrl3.boot << 1) + func_cfg_access.sw_por)
 800274e:	7b3b      	ldrb	r3, [r7, #12]
 8002750:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002754:	b2db      	uxtb	r3, r3
 8002756:	009a      	lsls	r2, r3, #2
 8002758:	7b3b      	ldrb	r3, [r7, #12]
 800275a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800275e:	b2db      	uxtb	r3, r3
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4413      	add	r3, r2
 8002764:	7c3a      	ldrb	r2, [r7, #16]
 8002766:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	4413      	add	r3, r2
 800276e:	2b04      	cmp	r3, #4
 8002770:	d81c      	bhi.n	80027ac <lsm6dsv16x_reset_get+0x98>
 8002772:	a201      	add	r2, pc, #4	@ (adr r2, 8002778 <lsm6dsv16x_reset_get+0x64>)
 8002774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002778:	0800278d 	.word	0x0800278d
 800277c:	08002795 	.word	0x08002795
 8002780:	0800279d 	.word	0x0800279d
 8002784:	080027ad 	.word	0x080027ad
 8002788:	080027a5 	.word	0x080027a5
  {
    case LSM6DSV16X_READY:
      *val = LSM6DSV16X_READY;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]
      break;
 8002792:	e00f      	b.n	80027b4 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_GLOBAL_RST:
      *val = LSM6DSV16X_GLOBAL_RST;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]
      break;
 800279a:	e00b      	b.n	80027b4 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CAL_PARAM:
      *val = LSM6DSV16X_RESTORE_CAL_PARAM;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2202      	movs	r2, #2
 80027a0:	701a      	strb	r2, [r3, #0]
      break;
 80027a2:	e007      	b.n	80027b4 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CTRL_REGS:
      *val = LSM6DSV16X_RESTORE_CTRL_REGS;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	2204      	movs	r2, #4
 80027a8:	701a      	strb	r2, [r3, #0]
      break;
 80027aa:	e003      	b.n	80027b4 <lsm6dsv16x_reset_get+0xa0>

    default:
      *val = LSM6DSV16X_GLOBAL_RST;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	2201      	movs	r2, #1
 80027b0:	701a      	strb	r2, [r3, #0]
      break;
 80027b2:	bf00      	nop
  }

  return ret;
 80027b4:	697b      	ldr	r3, [r7, #20]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop

080027c0 <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 80027ca:	2301      	movs	r3, #1
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	210f      	movs	r1, #15
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff ff1f 	bl	8002614 <lsm6dsv16x_read_reg>
 80027d6:	60f8      	str	r0, [r7, #12]

  return ret;
 80027d8:	68fb      	ldr	r3, [r7, #12]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b086      	sub	sp, #24
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	460b      	mov	r3, r1
 80027ec:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80027ee:	f107 0210 	add.w	r2, r7, #16
 80027f2:	2301      	movs	r3, #1
 80027f4:	2110      	movs	r1, #16
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff ff0c 	bl	8002614 <lsm6dsv16x_read_reg>
 80027fc:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <lsm6dsv16x_xl_data_rate_set+0x26>
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	e039      	b.n	800287c <lsm6dsv16x_xl_data_rate_set+0x9a>

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	b2da      	uxtb	r2, r3
 8002810:	7c3b      	ldrb	r3, [r7, #16]
 8002812:	f362 0303 	bfi	r3, r2, #0, #4
 8002816:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8002818:	f107 0210 	add.w	r2, r7, #16
 800281c:	2301      	movs	r3, #1
 800281e:	2110      	movs	r1, #16
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff ff0f 	bl	8002644 <lsm6dsv16x_write_reg>
 8002826:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <lsm6dsv16x_xl_data_rate_set+0x50>
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	e024      	b.n	800287c <lsm6dsv16x_xl_data_rate_set+0x9a>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8002832:	78fb      	ldrb	r3, [r7, #3]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8002838:	7cfb      	ldrb	r3, [r7, #19]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d01d      	beq.n	800287a <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800283e:	f107 020c 	add.w	r2, r7, #12
 8002842:	2301      	movs	r3, #1
 8002844:	2162      	movs	r1, #98	@ 0x62
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff fee4 	bl	8002614 <lsm6dsv16x_read_reg>
 800284c:	4602      	mov	r2, r0
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	4413      	add	r3, r2
 8002852:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8002854:	7cfb      	ldrb	r3, [r7, #19]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	b2da      	uxtb	r2, r3
 800285c:	7b3b      	ldrb	r3, [r7, #12]
 800285e:	f362 0301 	bfi	r3, r2, #0, #2
 8002862:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8002864:	f107 020c 	add.w	r2, r7, #12
 8002868:	2301      	movs	r3, #1
 800286a:	2162      	movs	r1, #98	@ 0x62
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff fee9 	bl	8002644 <lsm6dsv16x_write_reg>
 8002872:	4602      	mov	r2, r0
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	4413      	add	r3, r2
 8002878:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800287a:	697b      	ldr	r3, [r7, #20]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <lsm6dsv16x_xl_mode_set>:
  * @param  val      XL_HIGH_PERFORMANCE_MD, XL_HIGH_ACCURACY_ODR_MD, XL_LOW_POWER_2_AVG_MD, XL_LOW_POWER_4_AVG_MD, XL_LOW_POWER_8_AVG_MD, XL_NORMAL_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_xl_mode_t val)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8002890:	f107 0208 	add.w	r2, r7, #8
 8002894:	2301      	movs	r3, #1
 8002896:	2110      	movs	r1, #16
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff febb 	bl	8002614 <lsm6dsv16x_read_reg>
 800289e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10f      	bne.n	80028c6 <lsm6dsv16x_xl_mode_set+0x42>
  {
    ctrl1.op_mode_xl = (uint8_t)val & 0x07U;
 80028a6:	78fb      	ldrb	r3, [r7, #3]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	7a3b      	ldrb	r3, [r7, #8]
 80028b0:	f362 1306 	bfi	r3, r2, #4, #3
 80028b4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80028b6:	f107 0208 	add.w	r2, r7, #8
 80028ba:	2301      	movs	r3, #1
 80028bc:	2110      	movs	r1, #16
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff fec0 	bl	8002644 <lsm6dsv16x_write_reg>
 80028c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80028c6:	68fb      	ldr	r3, [r7, #12]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 80028dc:	f107 0210 	add.w	r2, r7, #16
 80028e0:	2301      	movs	r3, #1
 80028e2:	2111      	movs	r1, #17
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7ff fe95 	bl	8002614 <lsm6dsv16x_read_reg>
 80028ea:	6178      	str	r0, [r7, #20]
  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 80028ec:	78fb      	ldrb	r3, [r7, #3]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	7c3b      	ldrb	r3, [r7, #16]
 80028f6:	f362 0303 	bfi	r3, r2, #0, #4
 80028fa:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 80028fc:	f107 0210 	add.w	r2, r7, #16
 8002900:	2301      	movs	r3, #1
 8002902:	2111      	movs	r1, #17
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff fe9d 	bl	8002644 <lsm6dsv16x_write_reg>
 800290a:	4602      	mov	r2, r0
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	4413      	add	r3, r2
 8002910:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <lsm6dsv16x_gy_data_rate_set+0x4c>
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	e024      	b.n	8002966 <lsm6dsv16x_gy_data_rate_set+0x96>

  sel = ((uint8_t)val >> 4) & 0xFU;
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	091b      	lsrs	r3, r3, #4
 8002920:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8002922:	7cfb      	ldrb	r3, [r7, #19]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01d      	beq.n	8002964 <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8002928:	f107 020c 	add.w	r2, r7, #12
 800292c:	2301      	movs	r3, #1
 800292e:	2162      	movs	r1, #98	@ 0x62
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff fe6f 	bl	8002614 <lsm6dsv16x_read_reg>
 8002936:	4602      	mov	r2, r0
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	4413      	add	r3, r2
 800293c:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 800293e:	7cfb      	ldrb	r3, [r7, #19]
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	b2da      	uxtb	r2, r3
 8002946:	7b3b      	ldrb	r3, [r7, #12]
 8002948:	f362 0301 	bfi	r3, r2, #0, #2
 800294c:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800294e:	f107 020c 	add.w	r2, r7, #12
 8002952:	2301      	movs	r3, #1
 8002954:	2162      	movs	r1, #98	@ 0x62
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff fe74 	bl	8002644 <lsm6dsv16x_write_reg>
 800295c:	4602      	mov	r2, r0
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	4413      	add	r3, r2
 8002962:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002964:	697b      	ldr	r3, [r7, #20]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <lsm6dsv16x_gy_mode_set>:
  * @param  val      GY_HIGH_PERFORMANCE_MD, GY_HIGH_ACCURACY_ODR_MD, GY_SLEEP_MD, GY_LOW_POWER_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_gy_mode_t val)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	460b      	mov	r3, r1
 8002978:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 800297a:	f107 0208 	add.w	r2, r7, #8
 800297e:	2301      	movs	r3, #1
 8002980:	2111      	movs	r1, #17
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff fe46 	bl	8002614 <lsm6dsv16x_read_reg>
 8002988:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10f      	bne.n	80029b0 <lsm6dsv16x_gy_mode_set+0x42>
  {
    ctrl2.op_mode_g = (uint8_t)val & 0x07U;
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	b2da      	uxtb	r2, r3
 8002998:	7a3b      	ldrb	r3, [r7, #8]
 800299a:	f362 1306 	bfi	r3, r2, #4, #3
 800299e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 80029a0:	f107 0208 	add.w	r2, r7, #8
 80029a4:	2301      	movs	r3, #1
 80029a6:	2111      	movs	r1, #17
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff fe4b 	bl	8002644 <lsm6dsv16x_write_reg>
 80029ae:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80029b0:	68fb      	ldr	r3, [r7, #12]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b084      	sub	sp, #16
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	460b      	mov	r3, r1
 80029c4:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80029c6:	f107 0208 	add.w	r2, r7, #8
 80029ca:	2301      	movs	r3, #1
 80029cc:	2112      	movs	r1, #18
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7ff fe20 	bl	8002614 <lsm6dsv16x_read_reg>
 80029d4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10f      	bne.n	80029fc <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	7a3b      	ldrb	r3, [r7, #8]
 80029e6:	f362 1386 	bfi	r3, r2, #6, #1
 80029ea:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80029ec:	f107 0208 	add.w	r2, r7, #8
 80029f0:	2301      	movs	r3, #1
 80029f2:	2112      	movs	r1, #18
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff fe25 	bl	8002644 <lsm6dsv16x_write_reg>
 80029fa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80029fc:	68fb      	ldr	r3, [r7, #12]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <lsm6dsv16x_odr_trig_cfg_set>:
  * @param  val      number of data in the reference period.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_odr_trig_cfg_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_odr_trig_cfg_t odr_trig;
  int32_t ret;

  if (val >= 1U && val <= 3U) {
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d802      	bhi.n	8002a24 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
    return -1;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a22:	e015      	b.n	8002a50 <lsm6dsv16x_odr_trig_cfg_set+0x4a>
  }

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 8002a24:	f107 0208 	add.w	r2, r7, #8
 8002a28:	2301      	movs	r3, #1
 8002a2a:	2106      	movs	r1, #6
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff fdf1 	bl	8002614 <lsm6dsv16x_read_reg>
 8002a32:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d109      	bne.n	8002a4e <lsm6dsv16x_odr_trig_cfg_set+0x48>
  {
    odr_trig.odr_trig_nodr = val;
 8002a3a:	78fb      	ldrb	r3, [r7, #3]
 8002a3c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 8002a3e:	f107 0208 	add.w	r2, r7, #8
 8002a42:	2301      	movs	r3, #1
 8002a44:	2106      	movs	r1, #6
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff fdfc 	bl	8002644 <lsm6dsv16x_write_reg>
 8002a4c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8002a64:	f107 0208 	add.w	r2, r7, #8
 8002a68:	2301      	movs	r3, #1
 8002a6a:	2115      	movs	r1, #21
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff fdd1 	bl	8002614 <lsm6dsv16x_read_reg>
 8002a72:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10f      	bne.n	8002a9a <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 8002a7a:	78fb      	ldrb	r3, [r7, #3]
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	7a3b      	ldrb	r3, [r7, #8]
 8002a84:	f362 0303 	bfi	r3, r2, #0, #4
 8002a88:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8002a8a:	f107 0208 	add.w	r2, r7, #8
 8002a8e:	2301      	movs	r3, #1
 8002a90:	2115      	movs	r1, #21
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff fdd6 	bl	8002644 <lsm6dsv16x_write_reg>
 8002a98:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8002ab0:	f107 0208 	add.w	r2, r7, #8
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	2117      	movs	r1, #23
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7ff fdab 	bl	8002614 <lsm6dsv16x_read_reg>
 8002abe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10f      	bne.n	8002ae6 <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 8002ac6:	78fb      	ldrb	r3, [r7, #3]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	7a3b      	ldrb	r3, [r7, #8]
 8002ad0:	f362 0301 	bfi	r3, r2, #0, #2
 8002ad4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8002ad6:	f107 0208 	add.w	r2, r7, #8
 8002ada:	2301      	movs	r3, #1
 8002adc:	2117      	movs	r1, #23
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7ff fdb0 	bl	8002644 <lsm6dsv16x_write_reg>
 8002ae4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <lsm6dsv16x_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsv16x_pin_int1_route_set(stmdev_ctx_t *ctx,
                                      lsm6dsv16x_pin_int_route_t *val)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_int1_ctrl_t          int1_ctrl;
  lsm6dsv16x_md1_cfg_t            md1_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8002afa:	f107 0210 	add.w	r2, r7, #16
 8002afe:	2301      	movs	r3, #1
 8002b00:	210d      	movs	r1, #13
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff fd86 	bl	8002614 <lsm6dsv16x_read_reg>
 8002b08:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <lsm6dsv16x_pin_int1_route_set+0x24>
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	e0a0      	b.n	8002c56 <lsm6dsv16x_pin_int1_route_set+0x166>

  int1_ctrl.int1_drdy_xl       = val->drdy_xl;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	7c3b      	ldrb	r3, [r7, #16]
 8002b20:	f362 0300 	bfi	r3, r2, #0, #1
 8002b24:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_drdy_g        = val->drdy_g;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	7c3b      	ldrb	r3, [r7, #16]
 8002b32:	f362 0341 	bfi	r3, r2, #1, #1
 8002b36:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_th       = val->fifo_th;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	7c3b      	ldrb	r3, [r7, #16]
 8002b44:	f362 03c3 	bfi	r3, r2, #3, #1
 8002b48:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_ovr      = val->fifo_ovr;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	7c3b      	ldrb	r3, [r7, #16]
 8002b56:	f362 1304 	bfi	r3, r2, #4, #1
 8002b5a:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_full     = val->fifo_full;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	7c3b      	ldrb	r3, [r7, #16]
 8002b68:	f362 1345 	bfi	r3, r2, #5, #1
 8002b6c:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_cnt_bdr       = val->cnt_bdr;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	7c3b      	ldrb	r3, [r7, #16]
 8002b7a:	f362 1386 	bfi	r3, r2, #6, #1
 8002b7e:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8002b80:	f107 0210 	add.w	r2, r7, #16
 8002b84:	2301      	movs	r3, #1
 8002b86:	210d      	movs	r1, #13
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff fd5b 	bl	8002644 <lsm6dsv16x_write_reg>
 8002b8e:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <lsm6dsv16x_pin_int1_route_set+0xaa>
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	e05d      	b.n	8002c56 <lsm6dsv16x_pin_int1_route_set+0x166>

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8002b9a:	f107 020c 	add.w	r2, r7, #12
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	215e      	movs	r1, #94	@ 0x5e
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff fd36 	bl	8002614 <lsm6dsv16x_read_reg>
 8002ba8:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <lsm6dsv16x_pin_int1_route_set+0xc4>
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	e050      	b.n	8002c56 <lsm6dsv16x_pin_int1_route_set+0x166>

  md1_cfg.int1_shub            = val->shub;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	785b      	ldrb	r3, [r3, #1]
 8002bb8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	7b3b      	ldrb	r3, [r7, #12]
 8002bc0:	f362 0300 	bfi	r3, r2, #0, #1
 8002bc4:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_emb_func        = val->emb_func;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	785b      	ldrb	r3, [r3, #1]
 8002bca:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	7b3b      	ldrb	r3, [r7, #12]
 8002bd2:	f362 0341 	bfi	r3, r2, #1, #1
 8002bd6:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_6d              = val->sixd;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	785b      	ldrb	r3, [r3, #1]
 8002bdc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	7b3b      	ldrb	r3, [r7, #12]
 8002be4:	f362 0382 	bfi	r3, r2, #2, #1
 8002be8:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_single_tap      = val->single_tap;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	785b      	ldrb	r3, [r3, #1]
 8002bee:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	7b3b      	ldrb	r3, [r7, #12]
 8002bf6:	f362 1386 	bfi	r3, r2, #6, #1
 8002bfa:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_double_tap      = val->double_tap;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	785b      	ldrb	r3, [r3, #1]
 8002c00:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	7b3b      	ldrb	r3, [r7, #12]
 8002c08:	f362 03c3 	bfi	r3, r2, #3, #1
 8002c0c:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_wu              = val->wakeup;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	785b      	ldrb	r3, [r3, #1]
 8002c12:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	7b3b      	ldrb	r3, [r7, #12]
 8002c1a:	f362 1345 	bfi	r3, r2, #5, #1
 8002c1e:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_ff              = val->freefall;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	785b      	ldrb	r3, [r3, #1]
 8002c24:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	7b3b      	ldrb	r3, [r7, #12]
 8002c2c:	f362 1304 	bfi	r3, r2, #4, #1
 8002c30:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_sleep_change    = val->sleep_change;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	789b      	ldrb	r3, [r3, #2]
 8002c36:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	7b3b      	ldrb	r3, [r7, #12]
 8002c3e:	f362 13c7 	bfi	r3, r2, #7, #1
 8002c42:	733b      	strb	r3, [r7, #12]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8002c44:	f107 020c 	add.w	r2, r7, #12
 8002c48:	2301      	movs	r3, #1
 8002c4a:	215e      	movs	r1, #94	@ 0x5e
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff fcf9 	bl	8002644 <lsm6dsv16x_write_reg>
 8002c52:	6178      	str	r0, [r7, #20]

  return ret;
 8002c54:	697b      	ldr	r3, [r7, #20]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <lsm6dsv16x_den_polarity_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_den_polarity_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_den_polarity_t val)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b084      	sub	sp, #16
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	460b      	mov	r3, r1
 8002c68:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl4_t ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 8002c6a:	f107 0208 	add.w	r2, r7, #8
 8002c6e:	2301      	movs	r3, #1
 8002c70:	2113      	movs	r1, #19
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7ff fcce 	bl	8002614 <lsm6dsv16x_read_reg>
 8002c78:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10f      	bne.n	8002ca0 <lsm6dsv16x_den_polarity_set+0x42>
  {
    ctrl4.int2_in_lh = (uint8_t)val & 0x1U;
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	7a3b      	ldrb	r3, [r7, #8]
 8002c8a:	f362 0300 	bfi	r3, r2, #0, #1
 8002c8e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 8002c90:	f107 0208 	add.w	r2, r7, #8
 8002c94:	2301      	movs	r3, #1
 8002c96:	2113      	movs	r1, #19
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff fcd3 	bl	8002644 <lsm6dsv16x_write_reg>
 8002c9e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <lsm6dsv16x_fifo_watermark_set>:
  * @param  val      FIFO watermark threshold (1 LSb = TAG (1 Byte) + 1 sensor (6 Bytes) written in FIFO).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_watermark_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b084      	sub	sp, #16
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl1_t fifo_ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8002cb6:	f107 0208 	add.w	r2, r7, #8
 8002cba:	2301      	movs	r3, #1
 8002cbc:	2107      	movs	r1, #7
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff fca8 	bl	8002614 <lsm6dsv16x_read_reg>
 8002cc4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d109      	bne.n	8002ce0 <lsm6dsv16x_fifo_watermark_set+0x36>
  {
    fifo_ctrl1.wtm = val;
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8002cd0:	f107 0208 	add.w	r2, r7, #8
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	2107      	movs	r1, #7
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff fcb3 	bl	8002644 <lsm6dsv16x_write_reg>
 8002cde:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <lsm6dsv16x_fifo_xl_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_xl_batch_t val)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b084      	sub	sp, #16
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8002cf6:	f107 0208 	add.w	r2, r7, #8
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	2109      	movs	r1, #9
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff fc88 	bl	8002614 <lsm6dsv16x_read_reg>
 8002d04:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10f      	bne.n	8002d2c <lsm6dsv16x_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val & 0xFu;
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	7a3b      	ldrb	r3, [r7, #8]
 8002d16:	f362 0303 	bfi	r3, r2, #0, #4
 8002d1a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8002d1c:	f107 0208 	add.w	r2, r7, #8
 8002d20:	2301      	movs	r3, #1
 8002d22:	2109      	movs	r1, #9
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff fc8d 	bl	8002644 <lsm6dsv16x_write_reg>
 8002d2a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <lsm6dsv16x_fifo_gy_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_gy_batch_t val)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8002d42:	f107 0208 	add.w	r2, r7, #8
 8002d46:	2301      	movs	r3, #1
 8002d48:	2109      	movs	r1, #9
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff fc62 	bl	8002614 <lsm6dsv16x_read_reg>
 8002d50:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10f      	bne.n	8002d78 <lsm6dsv16x_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val & 0x0Fu;
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	7a3b      	ldrb	r3, [r7, #8]
 8002d62:	f362 1307 	bfi	r3, r2, #4, #4
 8002d66:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8002d68:	f107 0208 	add.w	r2, r7, #8
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	2109      	movs	r1, #9
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff fc67 	bl	8002644 <lsm6dsv16x_write_reg>
 8002d76:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002d78:	68fb      	ldr	r3, [r7, #12]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8002d8e:	f107 0208 	add.w	r2, r7, #8
 8002d92:	2301      	movs	r3, #1
 8002d94:	210a      	movs	r1, #10
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff fc3c 	bl	8002614 <lsm6dsv16x_read_reg>
 8002d9c:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10f      	bne.n	8002dc4 <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	7a3b      	ldrb	r3, [r7, #8]
 8002dae:	f362 0302 	bfi	r3, r2, #0, #3
 8002db2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8002db4:	f107 0208 	add.w	r2, r7, #8
 8002db8:	2301      	movs	r3, #1
 8002dba:	210a      	movs	r1, #10
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff fc41 	bl	8002644 <lsm6dsv16x_write_reg>
 8002dc2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <lsm6dsv16x_ui_i2c_i3c_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ui_i2c_i3c_mode_set(stmdev_ctx_t *ctx,
                                       lsm6dsv16x_ui_i2c_i3c_mode_t val)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b084      	sub	sp, #16
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_if_cfg_t if_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 8002dda:	f107 0208 	add.w	r2, r7, #8
 8002dde:	2301      	movs	r3, #1
 8002de0:	2103      	movs	r1, #3
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff fc16 	bl	8002614 <lsm6dsv16x_read_reg>
 8002de8:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10f      	bne.n	8002e10 <lsm6dsv16x_ui_i2c_i3c_mode_set+0x42>
  {
    if_cfg.i2c_i3c_disable = (uint8_t)val & 0x1U;
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	7a3b      	ldrb	r3, [r7, #8]
 8002dfa:	f362 0300 	bfi	r3, r2, #0, #1
 8002dfe:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 8002e00:	f107 0208 	add.w	r2, r7, #8
 8002e04:	2301      	movs	r3, #1
 8002e06:	2103      	movs	r1, #3
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff fc1b 	bl	8002644 <lsm6dsv16x_write_reg>
 8002e0e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002e10:	68fb      	ldr	r3, [r7, #12]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <acc_write>:
#include "global_variables.h"
#include "peripherals.h"

/* -------------SCRITTURA ACCELEROMETRO-------------*/
int32_t acc_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b084      	sub	sp, #16
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	461a      	mov	r2, r3
 8002e26:	460b      	mov	r3, r1
 8002e28:	72fb      	strb	r3, [r7, #11]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e38:	f008 f9cc 	bl	800b1d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8002e3c:	f107 010b 	add.w	r1, r7, #11
 8002e40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e44:	2201      	movs	r2, #1
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f00b fc4d 	bl	800e6e6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 8002e4c:	893a      	ldrh	r2, [r7, #8]
 8002e4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f00b fc46 	bl	800e6e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e64:	f008 f9b6 	bl	800b1d4 <HAL_GPIO_WritePin>
	return 0;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <acc_read>:

/* -------------LETTURA ACCELEROMETRO-------------*/
int32_t acc_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	460b      	mov	r3, r1
 8002e80:	72fb      	strb	r3, [r7, #11]
 8002e82:	4613      	mov	r3, r2
 8002e84:	813b      	strh	r3, [r7, #8]
	reg |= 0x80;
 8002e86:	7afb      	ldrb	r3, [r7, #11]
 8002e88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8002e90:	2200      	movs	r2, #0
 8002e92:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e9a:	f008 f99b 	bl	800b1d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8002e9e:	f107 010b 	add.w	r1, r7, #11
 8002ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f00b fc1c 	bl	800e6e6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(handle, bufp, len, 1000);
 8002eae:	893a      	ldrh	r2, [r7, #8]
 8002eb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f00b fd8b 	bl	800e9d2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ec2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ec6:	f008 f985 	bl	800b1d4 <HAL_GPIO_WritePin>
	return 0;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ed6:	b08f      	sub	sp, #60	@ 0x3c
 8002ed8:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002eda:	f005 ff4a 	bl	8008d72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ede:	f000 f983 	bl	80031e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ee2:	f000 fe57 	bl	8003b94 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ee6:	f000 fe27 	bl	8003b38 <MX_DMA_Init>
  MX_QUADSPI_Init();
 8002eea:	f000 faa9 	bl	8003440 <MX_QUADSPI_Init>
  MX_SPI2_Init();
 8002eee:	f000 fb5f 	bl	80035b0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8002ef2:	f000 fdf1 	bl	8003ad8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002ef6:	f000 f9c9 	bl	800328c <MX_ADC1_Init>
  MX_I2C3_Init();
 8002efa:	f000 fa61 	bl	80033c0 <MX_I2C3_Init>
  MX_TIM2_Init();
 8002efe:	f000 fc7b 	bl	80037f8 <MX_TIM2_Init>
  MX_UART4_Init();
 8002f02:	f000 fdb9 	bl	8003a78 <MX_UART4_Init>
  MX_TIM1_Init();
 8002f06:	f000 fbcf 	bl	80036a8 <MX_TIM1_Init>
  MX_CRC_Init();
 8002f0a:	f000 fa37 	bl	800337c <MX_CRC_Init>
  MX_TIM4_Init();
 8002f0e:	f000 fd3f 	bl	8003990 <MX_TIM4_Init>
  MX_RTC_Init();
 8002f12:	f000 fabb 	bl	800348c <MX_RTC_Init>
  MX_SPI3_Init();
 8002f16:	f000 fb89 	bl	800362c <MX_SPI3_Init>
  MX_TIM3_Init();
 8002f1a:	f000 fcc1 	bl	80038a0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	System_Init();
 8002f1e:	f7ff f8bb 	bl	8002098 <System_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		switch(state)
 8002f22:	4ba3      	ldr	r3, [pc, #652]	@ (80031b0 <main+0x2dc>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	f200 813c 	bhi.w	80031a4 <main+0x2d0>
 8002f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f34 <main+0x60>)
 8002f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f32:	bf00      	nop
 8002f34:	08002f45 	.word	0x08002f45
 8002f38:	08002fd5 	.word	0x08002fd5
 8002f3c:	08002fe1 	.word	0x08002fe1
 8002f40:	0800318b 	.word	0x0800318b
		{
		case IDLE:
			if(flags.MQTT_Message_Rx)
 8002f44:	4b9b      	ldr	r3, [pc, #620]	@ (80031b4 <main+0x2e0>)
 8002f46:	785b      	ldrb	r3, [r3, #1]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d006      	beq.n	8002f60 <main+0x8c>
			{
				SIM_Parse_Command();
 8002f52:	f7fe f8ff 	bl	8001154 <SIM_Parse_Command>
				flags.MQTT_Message_Rx = 0;
 8002f56:	4a97      	ldr	r2, [pc, #604]	@ (80031b4 <main+0x2e0>)
 8002f58:	7853      	ldrb	r3, [r2, #1]
 8002f5a:	f023 0304 	bic.w	r3, r3, #4
 8002f5e:	7053      	strb	r3, [r2, #1]
			}
			if(flags.CMD.Start_Meas)
 8002f60:	4b94      	ldr	r3, [pc, #592]	@ (80031b4 <main+0x2e0>)
 8002f62:	789b      	ldrb	r3, [r3, #2]
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d008      	beq.n	8002f80 <main+0xac>
			{
				state = MEASURE_INIT_STATE;
 8002f6e:	4b90      	ldr	r3, [pc, #576]	@ (80031b0 <main+0x2dc>)
 8002f70:	2201      	movs	r2, #1
 8002f72:	701a      	strb	r2, [r3, #0]
				flags.CMD.Start_Meas = 0;
 8002f74:	4a8f      	ldr	r2, [pc, #572]	@ (80031b4 <main+0x2e0>)
 8002f76:	7893      	ldrb	r3, [r2, #2]
 8002f78:	f023 0320 	bic.w	r3, r3, #32
 8002f7c:	7093      	strb	r3, [r2, #2]
			}
			else if(flags.CMD.Ping)
			{
				flags.CMD.Ping = 0;
			}
			break;
 8002f7e:	e113      	b.n	80031a8 <main+0x2d4>
			else if(flags.CMD.Set_Config)
 8002f80:	4b8c      	ldr	r3, [pc, #560]	@ (80031b4 <main+0x2e0>)
 8002f82:	789b      	ldrb	r3, [r3, #2]
 8002f84:	f003 0310 	and.w	r3, r3, #16
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d007      	beq.n	8002f9e <main+0xca>
				Apply_Config();
 8002f8e:	f001 fd31 	bl	80049f4 <Apply_Config>
				flags.CMD.Set_Config = 0;
 8002f92:	4a88      	ldr	r2, [pc, #544]	@ (80031b4 <main+0x2e0>)
 8002f94:	7893      	ldrb	r3, [r2, #2]
 8002f96:	f023 0310 	bic.w	r3, r3, #16
 8002f9a:	7093      	strb	r3, [r2, #2]
			break;
 8002f9c:	e104      	b.n	80031a8 <main+0x2d4>
			else if(flags.CMD.Start_OTA)
 8002f9e:	4b85      	ldr	r3, [pc, #532]	@ (80031b4 <main+0x2e0>)
 8002fa0:	789b      	ldrb	r3, [r3, #2]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <main+0xe4>
				flags.CMD.Start_OTA = 0;
 8002fac:	4a81      	ldr	r2, [pc, #516]	@ (80031b4 <main+0x2e0>)
 8002fae:	7893      	ldrb	r3, [r2, #2]
 8002fb0:	f023 0304 	bic.w	r3, r3, #4
 8002fb4:	7093      	strb	r3, [r2, #2]
			break;
 8002fb6:	e0f7      	b.n	80031a8 <main+0x2d4>
			else if(flags.CMD.Ping)
 8002fb8:	4b7e      	ldr	r3, [pc, #504]	@ (80031b4 <main+0x2e0>)
 8002fba:	789b      	ldrb	r3, [r3, #2]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 80f0 	beq.w	80031a8 <main+0x2d4>
				flags.CMD.Ping = 0;
 8002fc8:	4a7a      	ldr	r2, [pc, #488]	@ (80031b4 <main+0x2e0>)
 8002fca:	7893      	ldrb	r3, [r2, #2]
 8002fcc:	f023 0308 	bic.w	r3, r3, #8
 8002fd0:	7093      	strb	r3, [r2, #2]
			break;
 8002fd2:	e0e9      	b.n	80031a8 <main+0x2d4>
		case MEASURE_INIT_STATE:
			Start_Measure();
 8002fd4:	f001 f8f0 	bl	80041b8 <Start_Measure>
			state = MEASURING_STATE;
 8002fd8:	4b75      	ldr	r3, [pc, #468]	@ (80031b0 <main+0x2dc>)
 8002fda:	2202      	movs	r2, #2
 8002fdc:	701a      	strb	r2, [r3, #0]
			break;
 8002fde:	e0e6      	b.n	80031ae <main+0x2da>

		case MEASURING_STATE:
			if(flags.ADC_Complete && flags.ACC_Complete)
 8002fe0:	4b74      	ldr	r3, [pc, #464]	@ (80031b4 <main+0x2e0>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 80de 	beq.w	80031ac <main+0x2d8>
 8002ff0:	4b70      	ldr	r3, [pc, #448]	@ (80031b4 <main+0x2e0>)
 8002ff2:	785b      	ldrb	r3, [r3, #1]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 80d6 	beq.w	80031ac <main+0x2d8>
			{
				Save_Data();
 8003000:	f000 fec4 	bl	8003d8c <Save_Data>
				if(flags.BC_Interrupt)
 8003004:	4b6b      	ldr	r3, [pc, #428]	@ (80031b4 <main+0x2e0>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d011      	beq.n	8003036 <main+0x162>
				{
					BC_Read_Flags(&sys.BC_Flags);
 8003012:	4869      	ldr	r0, [pc, #420]	@ (80031b8 <main+0x2e4>)
 8003014:	f7fe fb6e 	bl	80016f4 <BC_Read_Flags>
					BC_Manage_Interrupts(sys.BC_Flags);
 8003018:	4b68      	ldr	r3, [pc, #416]	@ (80031bc <main+0x2e8>)
 800301a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800301e:	3310      	adds	r3, #16
 8003020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003024:	4610      	mov	r0, r2
 8003026:	4619      	mov	r1, r3
 8003028:	f7fe fbec 	bl	8001804 <BC_Manage_Interrupts>
					flags.BC_Interrupt = 0;
 800302c:	4a61      	ldr	r2, [pc, #388]	@ (80031b4 <main+0x2e0>)
 800302e:	7813      	ldrb	r3, [r2, #0]
 8003030:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003034:	7013      	strb	r3, [r2, #0]
				}
				if(flags.MQTT_Message_Rx)
 8003036:	4b5f      	ldr	r3, [pc, #380]	@ (80031b4 <main+0x2e0>)
 8003038:	785b      	ldrb	r3, [r3, #1]
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d006      	beq.n	8003052 <main+0x17e>
				{
					SIM_Parse_Command();
 8003044:	f7fe f886 	bl	8001154 <SIM_Parse_Command>
					flags.MQTT_Message_Rx = 0;
 8003048:	4a5a      	ldr	r2, [pc, #360]	@ (80031b4 <main+0x2e0>)
 800304a:	7853      	ldrb	r3, [r2, #1]
 800304c:	f023 0304 	bic.w	r3, r3, #4
 8003050:	7053      	strb	r3, [r2, #1]
				}
				if(flags.CMD.Data_Request)
 8003052:	4b58      	ldr	r3, [pc, #352]	@ (80031b4 <main+0x2e0>)
 8003054:	789b      	ldrb	r3, [r3, #2]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d047      	beq.n	80030f0 <main+0x21c>
				{
					sprintf(MQTT_Logging, "%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", Last_Pressure, Last_Volume, Last_Acceleration.x, Last_Acceleration.y, Last_Acceleration.z, Supply.i1, Supply.i2, Supply.i3, Supply.v1, Supply.v2, Supply.v3, Temperature);
 8003060:	4b57      	ldr	r3, [pc, #348]	@ (80031c0 <main+0x2ec>)
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	469c      	mov	ip, r3
 8003066:	4b57      	ldr	r3, [pc, #348]	@ (80031c4 <main+0x2f0>)
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	469e      	mov	lr, r3
 800306c:	4b56      	ldr	r3, [pc, #344]	@ (80031c8 <main+0x2f4>)
 800306e:	885b      	ldrh	r3, [r3, #2]
 8003070:	461a      	mov	r2, r3
 8003072:	4b55      	ldr	r3, [pc, #340]	@ (80031c8 <main+0x2f4>)
 8003074:	889b      	ldrh	r3, [r3, #4]
 8003076:	4619      	mov	r1, r3
 8003078:	4b53      	ldr	r3, [pc, #332]	@ (80031c8 <main+0x2f4>)
 800307a:	88db      	ldrh	r3, [r3, #6]
 800307c:	4618      	mov	r0, r3
 800307e:	4b53      	ldr	r3, [pc, #332]	@ (80031cc <main+0x2f8>)
 8003080:	88db      	ldrh	r3, [r3, #6]
 8003082:	461c      	mov	r4, r3
 8003084:	4b51      	ldr	r3, [pc, #324]	@ (80031cc <main+0x2f8>)
 8003086:	891b      	ldrh	r3, [r3, #8]
 8003088:	461d      	mov	r5, r3
 800308a:	4b50      	ldr	r3, [pc, #320]	@ (80031cc <main+0x2f8>)
 800308c:	895b      	ldrh	r3, [r3, #10]
 800308e:	461e      	mov	r6, r3
 8003090:	4b4e      	ldr	r3, [pc, #312]	@ (80031cc <main+0x2f8>)
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	4b4d      	ldr	r3, [pc, #308]	@ (80031cc <main+0x2f8>)
 8003098:	885b      	ldrh	r3, [r3, #2]
 800309a:	60bb      	str	r3, [r7, #8]
 800309c:	4b4b      	ldr	r3, [pc, #300]	@ (80031cc <main+0x2f8>)
 800309e:	889b      	ldrh	r3, [r3, #4]
 80030a0:	607b      	str	r3, [r7, #4]
 80030a2:	4b4b      	ldr	r3, [pc, #300]	@ (80031d0 <main+0x2fc>)
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	9308      	str	r3, [sp, #32]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	9307      	str	r3, [sp, #28]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	9306      	str	r3, [sp, #24]
 80030b4:	9605      	str	r6, [sp, #20]
 80030b6:	9504      	str	r5, [sp, #16]
 80030b8:	9403      	str	r4, [sp, #12]
 80030ba:	9002      	str	r0, [sp, #8]
 80030bc:	9101      	str	r1, [sp, #4]
 80030be:	9200      	str	r2, [sp, #0]
 80030c0:	4673      	mov	r3, lr
 80030c2:	4662      	mov	r2, ip
 80030c4:	4943      	ldr	r1, [pc, #268]	@ (80031d4 <main+0x300>)
 80030c6:	4844      	ldr	r0, [pc, #272]	@ (80031d8 <main+0x304>)
 80030c8:	f00f fc5c 	bl	8012984 <siprintf>
					SIM_publish_MQTT_Message(NULL, MQTT_Logging);
 80030cc:	4942      	ldr	r1, [pc, #264]	@ (80031d8 <main+0x304>)
 80030ce:	2000      	movs	r0, #0
 80030d0:	f7fe f9a4 	bl	800141c <SIM_publish_MQTT_Message>
					sys.SIM_Prompt_Status = HAL_GetTick();
 80030d4:	f005 feb6 	bl	8008e44 <HAL_GetTick>
 80030d8:	4603      	mov	r3, r0
 80030da:	4a38      	ldr	r2, [pc, #224]	@ (80031bc <main+0x2e8>)
 80030dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80030e0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
					flags.CMD.Data_Request = 0;
 80030e4:	4a33      	ldr	r2, [pc, #204]	@ (80031b4 <main+0x2e0>)
 80030e6:	7893      	ldrb	r3, [r2, #2]
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	7093      	strb	r3, [r2, #2]
 80030ee:	e01e      	b.n	800312e <main+0x25a>
				}
				else if(flags.CMD.Idle)
 80030f0:	4b30      	ldr	r3, [pc, #192]	@ (80031b4 <main+0x2e0>)
 80030f2:	789b      	ldrb	r3, [r3, #2]
 80030f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <main+0x23c>
				{
					state = IDLE;
 80030fe:	4b2c      	ldr	r3, [pc, #176]	@ (80031b0 <main+0x2dc>)
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
					flags.CMD.Idle = 0;
 8003104:	4a2b      	ldr	r2, [pc, #172]	@ (80031b4 <main+0x2e0>)
 8003106:	7893      	ldrb	r3, [r2, #2]
 8003108:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800310c:	7093      	strb	r3, [r2, #2]
 800310e:	e00e      	b.n	800312e <main+0x25a>
				}
				else if(flags.CMD.Measure_Request)
 8003110:	4b28      	ldr	r3, [pc, #160]	@ (80031b4 <main+0x2e0>)
 8003112:	789b      	ldrb	r3, [r3, #2]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d007      	beq.n	800312e <main+0x25a>
				{
					state = SEND_RECORDING_STATE;
 800311e:	4b24      	ldr	r3, [pc, #144]	@ (80031b0 <main+0x2dc>)
 8003120:	2203      	movs	r2, #3
 8003122:	701a      	strb	r2, [r3, #0]
					flags.CMD.Measure_Request = 0;
 8003124:	4a23      	ldr	r2, [pc, #140]	@ (80031b4 <main+0x2e0>)
 8003126:	7893      	ldrb	r3, [r2, #2]
 8003128:	f023 0302 	bic.w	r3, r3, #2
 800312c:	7093      	strb	r3, [r2, #2]
				}
				if(flags.MQTT_ReadytoSend)
 800312e:	4b21      	ldr	r3, [pc, #132]	@ (80031b4 <main+0x2e0>)
 8003130:	785b      	ldrb	r3, [r3, #1]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d007      	beq.n	800314c <main+0x278>
				{
					SIM_Send_Command_DMA(MQTT_Logging);
 800313c:	4826      	ldr	r0, [pc, #152]	@ (80031d8 <main+0x304>)
 800313e:	f7fd ff8b 	bl	8001058 <SIM_Send_Command_DMA>
					flags.MQTT_ReadytoSend = 0;
 8003142:	4a1c      	ldr	r2, [pc, #112]	@ (80031b4 <main+0x2e0>)
 8003144:	7853      	ldrb	r3, [r2, #1]
 8003146:	f023 0308 	bic.w	r3, r3, #8
 800314a:	7053      	strb	r3, [r2, #1]
				}
				if(sys.SIM_Prompt_Status > 0 && (HAL_GetTick() - sys.SIM_Prompt_Status) > SIM_PROMPT_TIMEOUT_MS)
 800314c:	4b1b      	ldr	r3, [pc, #108]	@ (80031bc <main+0x2e8>)
 800314e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003152:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003156:	2b00      	cmp	r3, #0
 8003158:	d028      	beq.n	80031ac <main+0x2d8>
 800315a:	f005 fe73 	bl	8008e44 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	4b16      	ldr	r3, [pc, #88]	@ (80031bc <main+0x2e8>)
 8003162:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003166:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003170:	4293      	cmp	r3, r2
 8003172:	d91b      	bls.n	80031ac <main+0x2d8>
				{
					SIM_Send_Command_DMA("AT+SMCONN\r");
 8003174:	4819      	ldr	r0, [pc, #100]	@ (80031dc <main+0x308>)
 8003176:	f7fd ff6f 	bl	8001058 <SIM_Send_Command_DMA>
					sys.SIM_Prompt_Status = 0;
 800317a:	4b10      	ldr	r3, [pc, #64]	@ (80031bc <main+0x2e8>)
 800317c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003180:	461a      	mov	r2, r3
 8003182:	2300      	movs	r3, #0
 8003184:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
				}
			}
			break;
 8003188:	e010      	b.n	80031ac <main+0x2d8>

		case SEND_RECORDING_STATE:
			HAL_ADC_Stop_DMA(PRESSURE_ADC);
 800318a:	4815      	ldr	r0, [pc, #84]	@ (80031e0 <main+0x30c>)
 800318c:	f006 faba 	bl	8009704 <HAL_ADC_Stop_DMA>
			HAL_TIM_OC_Stop_IT(ADC_TIMER, TIM_CHANNEL_3);
 8003190:	2108      	movs	r1, #8
 8003192:	4814      	ldr	r0, [pc, #80]	@ (80031e4 <main+0x310>)
 8003194:	f00c fb32 	bl	800f7fc <HAL_TIM_OC_Stop_IT>
			Send_Measure();
 8003198:	f001 f928 	bl	80043ec <Send_Measure>
			state = MEASURE_INIT_STATE;
 800319c:	4b04      	ldr	r3, [pc, #16]	@ (80031b0 <main+0x2dc>)
 800319e:	2201      	movs	r2, #1
 80031a0:	701a      	strb	r2, [r3, #0]
			break;
 80031a2:	e004      	b.n	80031ae <main+0x2da>

		default:
			break;
 80031a4:	bf00      	nop
 80031a6:	e6bc      	b.n	8002f22 <main+0x4e>
			break;
 80031a8:	bf00      	nop
 80031aa:	e6ba      	b.n	8002f22 <main+0x4e>
			break;
 80031ac:	bf00      	nop
		switch(state)
 80031ae:	e6b8      	b.n	8002f22 <main+0x4e>
 80031b0:	200005b4 	.word	0x200005b4
 80031b4:	20001980 	.word	0x20001980
 80031b8:	200015e8 	.word	0x200015e8
 80031bc:	200005b8 	.word	0x200005b8
 80031c0:	200043e4 	.word	0x200043e4
 80031c4:	200043e6 	.word	0x200043e6
 80031c8:	200043e8 	.word	0x200043e8
 80031cc:	20003b14 	.word	0x20003b14
 80031d0:	200043f0 	.word	0x200043f0
 80031d4:	08013ea4 	.word	0x08013ea4
 80031d8:	200043f4 	.word	0x200043f4
 80031dc:	08013ec8 	.word	0x08013ec8
 80031e0:	20000090 	.word	0x20000090
 80031e4:	200003c8 	.word	0x200003c8

080031e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b096      	sub	sp, #88	@ 0x58
 80031ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031ee:	f107 0314 	add.w	r3, r7, #20
 80031f2:	2244      	movs	r2, #68	@ 0x44
 80031f4:	2100      	movs	r1, #0
 80031f6:	4618      	mov	r0, r3
 80031f8:	f00f fc24 	bl	8012a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031fc:	463b      	mov	r3, r7
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	605a      	str	r2, [r3, #4]
 8003204:	609a      	str	r2, [r3, #8]
 8003206:	60da      	str	r2, [r3, #12]
 8003208:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800320a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800320e:	f008 fdef 	bl	800bdf0 <HAL_PWREx_ControlVoltageScaling>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003218:	f000 fdb2 	bl	8003d80 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800321c:	2309      	movs	r3, #9
 800321e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003220:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003224:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003226:	2301      	movs	r3, #1
 8003228:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800322a:	2302      	movs	r3, #2
 800322c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800322e:	2303      	movs	r3, #3
 8003230:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003232:	2301      	movs	r3, #1
 8003234:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8003236:	2314      	movs	r3, #20
 8003238:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800323a:	2307      	movs	r3, #7
 800323c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800323e:	2302      	movs	r3, #2
 8003240:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003242:	2302      	movs	r3, #2
 8003244:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003246:	f107 0314 	add.w	r3, r7, #20
 800324a:	4618      	mov	r0, r3
 800324c:	f009 fa88 	bl	800c760 <HAL_RCC_OscConfig>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8003256:	f000 fd93 	bl	8003d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800325a:	230f      	movs	r3, #15
 800325c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800325e:	2303      	movs	r3, #3
 8003260:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003262:	2300      	movs	r3, #0
 8003264:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800326e:	463b      	mov	r3, r7
 8003270:	2104      	movs	r1, #4
 8003272:	4618      	mov	r0, r3
 8003274:	f009 fe50 	bl	800cf18 <HAL_RCC_ClockConfig>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800327e:	f000 fd7f 	bl	8003d80 <Error_Handler>
  }
}
 8003282:	bf00      	nop
 8003284:	3758      	adds	r7, #88	@ 0x58
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08a      	sub	sp, #40	@ 0x28
 8003290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003292:	f107 031c 	add.w	r3, r7, #28
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	605a      	str	r2, [r3, #4]
 800329c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800329e:	1d3b      	adds	r3, r7, #4
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	611a      	str	r2, [r3, #16]
 80032ac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80032ae:	4b30      	ldr	r3, [pc, #192]	@ (8003370 <MX_ADC1_Init+0xe4>)
 80032b0:	4a30      	ldr	r2, [pc, #192]	@ (8003374 <MX_ADC1_Init+0xe8>)
 80032b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80032b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003370 <MX_ADC1_Init+0xe4>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80032ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003370 <MX_ADC1_Init+0xe4>)
 80032bc:	2200      	movs	r2, #0
 80032be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003370 <MX_ADC1_Init+0xe4>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80032c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003370 <MX_ADC1_Init+0xe4>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80032cc:	4b28      	ldr	r3, [pc, #160]	@ (8003370 <MX_ADC1_Init+0xe4>)
 80032ce:	2208      	movs	r2, #8
 80032d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80032d2:	4b27      	ldr	r3, [pc, #156]	@ (8003370 <MX_ADC1_Init+0xe4>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80032d8:	4b25      	ldr	r3, [pc, #148]	@ (8003370 <MX_ADC1_Init+0xe4>)
 80032da:	2200      	movs	r2, #0
 80032dc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80032de:	4b24      	ldr	r3, [pc, #144]	@ (8003370 <MX_ADC1_Init+0xe4>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80032e4:	4b22      	ldr	r3, [pc, #136]	@ (8003370 <MX_ADC1_Init+0xe4>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 80032ec:	4b20      	ldr	r3, [pc, #128]	@ (8003370 <MX_ADC1_Init+0xe4>)
 80032ee:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80032f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80032f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003370 <MX_ADC1_Init+0xe4>)
 80032f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80032fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003370 <MX_ADC1_Init+0xe4>)
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003304:	4b1a      	ldr	r3, [pc, #104]	@ (8003370 <MX_ADC1_Init+0xe4>)
 8003306:	2200      	movs	r2, #0
 8003308:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800330a:	4b19      	ldr	r3, [pc, #100]	@ (8003370 <MX_ADC1_Init+0xe4>)
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003312:	4817      	ldr	r0, [pc, #92]	@ (8003370 <MX_ADC1_Init+0xe4>)
 8003314:	f005 ffea 	bl	80092ec <HAL_ADC_Init>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800331e:	f000 fd2f 	bl	8003d80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003322:	2300      	movs	r3, #0
 8003324:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003326:	f107 031c 	add.w	r3, r7, #28
 800332a:	4619      	mov	r1, r3
 800332c:	4810      	ldr	r0, [pc, #64]	@ (8003370 <MX_ADC1_Init+0xe4>)
 800332e:	f007 f8a3 	bl	800a478 <HAL_ADCEx_MultiModeConfigChannel>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8003338:	f000 fd22 	bl	8003d80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800333c:	4b0e      	ldr	r3, [pc, #56]	@ (8003378 <MX_ADC1_Init+0xec>)
 800333e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003340:	2306      	movs	r3, #6
 8003342:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003348:	237f      	movs	r3, #127	@ 0x7f
 800334a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800334c:	2304      	movs	r3, #4
 800334e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003354:	1d3b      	adds	r3, r7, #4
 8003356:	4619      	mov	r1, r3
 8003358:	4805      	ldr	r0, [pc, #20]	@ (8003370 <MX_ADC1_Init+0xe4>)
 800335a:	f006 fa3f 	bl	80097dc <HAL_ADC_ConfigChannel>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8003364:	f000 fd0c 	bl	8003d80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003368:	bf00      	nop
 800336a:	3728      	adds	r7, #40	@ 0x28
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	20000090 	.word	0x20000090
 8003374:	50040000 	.word	0x50040000
 8003378:	25b00200 	.word	0x25b00200

0800337c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003380:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <MX_CRC_Init+0x3c>)
 8003382:	4a0e      	ldr	r2, [pc, #56]	@ (80033bc <MX_CRC_Init+0x40>)
 8003384:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003386:	4b0c      	ldr	r3, [pc, #48]	@ (80033b8 <MX_CRC_Init+0x3c>)
 8003388:	2200      	movs	r2, #0
 800338a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800338c:	4b0a      	ldr	r3, [pc, #40]	@ (80033b8 <MX_CRC_Init+0x3c>)
 800338e:	2200      	movs	r2, #0
 8003390:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003392:	4b09      	ldr	r3, [pc, #36]	@ (80033b8 <MX_CRC_Init+0x3c>)
 8003394:	2200      	movs	r2, #0
 8003396:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003398:	4b07      	ldr	r3, [pc, #28]	@ (80033b8 <MX_CRC_Init+0x3c>)
 800339a:	2200      	movs	r2, #0
 800339c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800339e:	4b06      	ldr	r3, [pc, #24]	@ (80033b8 <MX_CRC_Init+0x3c>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80033a4:	4804      	ldr	r0, [pc, #16]	@ (80033b8 <MX_CRC_Init+0x3c>)
 80033a6:	f007 fa43 	bl	800a830 <HAL_CRC_Init>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80033b0:	f000 fce6 	bl	8003d80 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80033b4:	bf00      	nop
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	2000013c 	.word	0x2000013c
 80033bc:	40023000 	.word	0x40023000

080033c0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80033c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003434 <MX_I2C3_Init+0x74>)
 80033c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003438 <MX_I2C3_Init+0x78>)
 80033c8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 80033ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003434 <MX_I2C3_Init+0x74>)
 80033cc:	4a1b      	ldr	r2, [pc, #108]	@ (800343c <MX_I2C3_Init+0x7c>)
 80033ce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80033d0:	4b18      	ldr	r3, [pc, #96]	@ (8003434 <MX_I2C3_Init+0x74>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033d6:	4b17      	ldr	r3, [pc, #92]	@ (8003434 <MX_I2C3_Init+0x74>)
 80033d8:	2201      	movs	r2, #1
 80033da:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033dc:	4b15      	ldr	r3, [pc, #84]	@ (8003434 <MX_I2C3_Init+0x74>)
 80033de:	2200      	movs	r2, #0
 80033e0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80033e2:	4b14      	ldr	r3, [pc, #80]	@ (8003434 <MX_I2C3_Init+0x74>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033e8:	4b12      	ldr	r3, [pc, #72]	@ (8003434 <MX_I2C3_Init+0x74>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033ee:	4b11      	ldr	r3, [pc, #68]	@ (8003434 <MX_I2C3_Init+0x74>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003434 <MX_I2C3_Init+0x74>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80033fa:	480e      	ldr	r0, [pc, #56]	@ (8003434 <MX_I2C3_Init+0x74>)
 80033fc:	f007 ff02 	bl	800b204 <HAL_I2C_Init>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8003406:	f000 fcbb 	bl	8003d80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800340a:	2100      	movs	r1, #0
 800340c:	4809      	ldr	r0, [pc, #36]	@ (8003434 <MX_I2C3_Init+0x74>)
 800340e:	f008 fc49 	bl	800bca4 <HAL_I2CEx_ConfigAnalogFilter>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003418:	f000 fcb2 	bl	8003d80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800341c:	2100      	movs	r1, #0
 800341e:	4805      	ldr	r0, [pc, #20]	@ (8003434 <MX_I2C3_Init+0x74>)
 8003420:	f008 fc8b 	bl	800bd3a <HAL_I2CEx_ConfigDigitalFilter>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800342a:	f000 fca9 	bl	8003d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20000160 	.word	0x20000160
 8003438:	40005c00 	.word	0x40005c00
 800343c:	10909cec 	.word	0x10909cec

08003440 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8003444:	4b0f      	ldr	r3, [pc, #60]	@ (8003484 <MX_QUADSPI_Init+0x44>)
 8003446:	4a10      	ldr	r2, [pc, #64]	@ (8003488 <MX_QUADSPI_Init+0x48>)
 8003448:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800344a:	4b0e      	ldr	r3, [pc, #56]	@ (8003484 <MX_QUADSPI_Init+0x44>)
 800344c:	22ff      	movs	r2, #255	@ 0xff
 800344e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8003450:	4b0c      	ldr	r3, [pc, #48]	@ (8003484 <MX_QUADSPI_Init+0x44>)
 8003452:	2201      	movs	r2, #1
 8003454:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8003456:	4b0b      	ldr	r3, [pc, #44]	@ (8003484 <MX_QUADSPI_Init+0x44>)
 8003458:	2200      	movs	r2, #0
 800345a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800345c:	4b09      	ldr	r3, [pc, #36]	@ (8003484 <MX_QUADSPI_Init+0x44>)
 800345e:	2201      	movs	r2, #1
 8003460:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8003462:	4b08      	ldr	r3, [pc, #32]	@ (8003484 <MX_QUADSPI_Init+0x44>)
 8003464:	2200      	movs	r2, #0
 8003466:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8003468:	4b06      	ldr	r3, [pc, #24]	@ (8003484 <MX_QUADSPI_Init+0x44>)
 800346a:	2200      	movs	r2, #0
 800346c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800346e:	4805      	ldr	r0, [pc, #20]	@ (8003484 <MX_QUADSPI_Init+0x44>)
 8003470:	f008 fd14 	bl	800be9c <HAL_QSPI_Init>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800347a:	f000 fc81 	bl	8003d80 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	200001b4 	.word	0x200001b4
 8003488:	a0001000 	.word	0xa0001000

0800348c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b092      	sub	sp, #72	@ 0x48
 8003490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003492:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	605a      	str	r2, [r3, #4]
 800349c:	609a      	str	r2, [r3, #8]
 800349e:	60da      	str	r2, [r3, #12]
 80034a0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80034a2:	2300      	movs	r3, #0
 80034a4:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 80034a6:	1d3b      	adds	r3, r7, #4
 80034a8:	222c      	movs	r2, #44	@ 0x2c
 80034aa:	2100      	movs	r1, #0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f00f fac9 	bl	8012a44 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80034b2:	4b3c      	ldr	r3, [pc, #240]	@ (80035a4 <MX_RTC_Init+0x118>)
 80034b4:	4a3c      	ldr	r2, [pc, #240]	@ (80035a8 <MX_RTC_Init+0x11c>)
 80034b6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80034b8:	4b3a      	ldr	r3, [pc, #232]	@ (80035a4 <MX_RTC_Init+0x118>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80034be:	4b39      	ldr	r3, [pc, #228]	@ (80035a4 <MX_RTC_Init+0x118>)
 80034c0:	227f      	movs	r2, #127	@ 0x7f
 80034c2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80034c4:	4b37      	ldr	r3, [pc, #220]	@ (80035a4 <MX_RTC_Init+0x118>)
 80034c6:	22ff      	movs	r2, #255	@ 0xff
 80034c8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80034ca:	4b36      	ldr	r3, [pc, #216]	@ (80035a4 <MX_RTC_Init+0x118>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80034d0:	4b34      	ldr	r3, [pc, #208]	@ (80035a4 <MX_RTC_Init+0x118>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80034d6:	4b33      	ldr	r3, [pc, #204]	@ (80035a4 <MX_RTC_Init+0x118>)
 80034d8:	2200      	movs	r2, #0
 80034da:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80034dc:	4b31      	ldr	r3, [pc, #196]	@ (80035a4 <MX_RTC_Init+0x118>)
 80034de:	2200      	movs	r2, #0
 80034e0:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80034e2:	4830      	ldr	r0, [pc, #192]	@ (80035a4 <MX_RTC_Init+0x118>)
 80034e4:	f00a fbf8 	bl	800dcd8 <HAL_RTC_Init>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80034ee:	f000 fc47 	bl	8003d80 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80034f2:	2300      	movs	r3, #0
 80034f4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003504:	2300      	movs	r3, #0
 8003506:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003508:	2300      	movs	r3, #0
 800350a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800350c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003510:	2200      	movs	r2, #0
 8003512:	4619      	mov	r1, r3
 8003514:	4823      	ldr	r0, [pc, #140]	@ (80035a4 <MX_RTC_Init+0x118>)
 8003516:	f00a fc67 	bl	800dde8 <HAL_RTC_SetTime>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8003520:	f000 fc2e 	bl	8003d80 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003524:	2301      	movs	r3, #1
 8003526:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 800352a:	2301      	movs	r3, #1
 800352c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 1;
 8003530:	2301      	movs	r3, #1
 8003532:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800353c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003540:	2200      	movs	r2, #0
 8003542:	4619      	mov	r1, r3
 8003544:	4817      	ldr	r0, [pc, #92]	@ (80035a4 <MX_RTC_Init+0x118>)
 8003546:	f00a fd48 	bl	800dfda <HAL_RTC_SetDate>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8003550:	f000 fc16 	bl	8003d80 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8003554:	2300      	movs	r3, #0
 8003556:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 800355c:	2300      	movs	r3, #0
 800355e:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003560:	2300      	movs	r3, #0
 8003562:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003564:	2300      	movs	r3, #0
 8003566:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 800356c:	4b0f      	ldr	r3, [pc, #60]	@ (80035ac <MX_RTC_Init+0x120>)
 800356e:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003570:	2300      	movs	r3, #0
 8003572:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003574:	2300      	movs	r3, #0
 8003576:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8003578:	2301      	movs	r3, #1
 800357a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 800357e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003584:	1d3b      	adds	r3, r7, #4
 8003586:	2200      	movs	r2, #0
 8003588:	4619      	mov	r1, r3
 800358a:	4806      	ldr	r0, [pc, #24]	@ (80035a4 <MX_RTC_Init+0x118>)
 800358c:	f00a fdac 	bl	800e0e8 <HAL_RTC_SetAlarm_IT>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8003596:	f000 fbf3 	bl	8003d80 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800359a:	bf00      	nop
 800359c:	3748      	adds	r7, #72	@ 0x48
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	200001f8 	.word	0x200001f8
 80035a8:	40002800 	.word	0x40002800
 80035ac:	80800080 	.word	0x80800080

080035b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80035b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003624 <MX_SPI2_Init+0x74>)
 80035b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003628 <MX_SPI2_Init+0x78>)
 80035b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80035ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003624 <MX_SPI2_Init+0x74>)
 80035bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80035c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80035c2:	4b18      	ldr	r3, [pc, #96]	@ (8003624 <MX_SPI2_Init+0x74>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80035c8:	4b16      	ldr	r3, [pc, #88]	@ (8003624 <MX_SPI2_Init+0x74>)
 80035ca:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80035ce:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035d0:	4b14      	ldr	r3, [pc, #80]	@ (8003624 <MX_SPI2_Init+0x74>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035d6:	4b13      	ldr	r3, [pc, #76]	@ (8003624 <MX_SPI2_Init+0x74>)
 80035d8:	2200      	movs	r2, #0
 80035da:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80035dc:	4b11      	ldr	r3, [pc, #68]	@ (8003624 <MX_SPI2_Init+0x74>)
 80035de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035e2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003624 <MX_SPI2_Init+0x74>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003624 <MX_SPI2_Init+0x74>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80035f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003624 <MX_SPI2_Init+0x74>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003624 <MX_SPI2_Init+0x74>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80035fc:	4b09      	ldr	r3, [pc, #36]	@ (8003624 <MX_SPI2_Init+0x74>)
 80035fe:	2207      	movs	r2, #7
 8003600:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003602:	4b08      	ldr	r3, [pc, #32]	@ (8003624 <MX_SPI2_Init+0x74>)
 8003604:	2200      	movs	r2, #0
 8003606:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003608:	4b06      	ldr	r3, [pc, #24]	@ (8003624 <MX_SPI2_Init+0x74>)
 800360a:	2208      	movs	r2, #8
 800360c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800360e:	4805      	ldr	r0, [pc, #20]	@ (8003624 <MX_SPI2_Init+0x74>)
 8003610:	f00a ffc6 	bl	800e5a0 <HAL_SPI_Init>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800361a:	f000 fbb1 	bl	8003d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	2000021c 	.word	0x2000021c
 8003628:	40003800 	.word	0x40003800

0800362c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003630:	4b1b      	ldr	r3, [pc, #108]	@ (80036a0 <MX_SPI3_Init+0x74>)
 8003632:	4a1c      	ldr	r2, [pc, #112]	@ (80036a4 <MX_SPI3_Init+0x78>)
 8003634:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003636:	4b1a      	ldr	r3, [pc, #104]	@ (80036a0 <MX_SPI3_Init+0x74>)
 8003638:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800363c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800363e:	4b18      	ldr	r3, [pc, #96]	@ (80036a0 <MX_SPI3_Init+0x74>)
 8003640:	2200      	movs	r2, #0
 8003642:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8003644:	4b16      	ldr	r3, [pc, #88]	@ (80036a0 <MX_SPI3_Init+0x74>)
 8003646:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800364a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800364c:	4b14      	ldr	r3, [pc, #80]	@ (80036a0 <MX_SPI3_Init+0x74>)
 800364e:	2200      	movs	r2, #0
 8003650:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003652:	4b13      	ldr	r3, [pc, #76]	@ (80036a0 <MX_SPI3_Init+0x74>)
 8003654:	2200      	movs	r2, #0
 8003656:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003658:	4b11      	ldr	r3, [pc, #68]	@ (80036a0 <MX_SPI3_Init+0x74>)
 800365a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800365e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003660:	4b0f      	ldr	r3, [pc, #60]	@ (80036a0 <MX_SPI3_Init+0x74>)
 8003662:	2200      	movs	r2, #0
 8003664:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003666:	4b0e      	ldr	r3, [pc, #56]	@ (80036a0 <MX_SPI3_Init+0x74>)
 8003668:	2200      	movs	r2, #0
 800366a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800366c:	4b0c      	ldr	r3, [pc, #48]	@ (80036a0 <MX_SPI3_Init+0x74>)
 800366e:	2200      	movs	r2, #0
 8003670:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003672:	4b0b      	ldr	r3, [pc, #44]	@ (80036a0 <MX_SPI3_Init+0x74>)
 8003674:	2200      	movs	r2, #0
 8003676:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003678:	4b09      	ldr	r3, [pc, #36]	@ (80036a0 <MX_SPI3_Init+0x74>)
 800367a:	2207      	movs	r2, #7
 800367c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800367e:	4b08      	ldr	r3, [pc, #32]	@ (80036a0 <MX_SPI3_Init+0x74>)
 8003680:	2200      	movs	r2, #0
 8003682:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003684:	4b06      	ldr	r3, [pc, #24]	@ (80036a0 <MX_SPI3_Init+0x74>)
 8003686:	2208      	movs	r2, #8
 8003688:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800368a:	4805      	ldr	r0, [pc, #20]	@ (80036a0 <MX_SPI3_Init+0x74>)
 800368c:	f00a ff88 	bl	800e5a0 <HAL_SPI_Init>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8003696:	f000 fb73 	bl	8003d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800369a:	bf00      	nop
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20000280 	.word	0x20000280
 80036a4:	40003c00 	.word	0x40003c00

080036a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b096      	sub	sp, #88	@ 0x58
 80036ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036ae:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	605a      	str	r2, [r3, #4]
 80036b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	605a      	str	r2, [r3, #4]
 80036c4:	609a      	str	r2, [r3, #8]
 80036c6:	60da      	str	r2, [r3, #12]
 80036c8:	611a      	str	r2, [r3, #16]
 80036ca:	615a      	str	r2, [r3, #20]
 80036cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80036ce:	1d3b      	adds	r3, r7, #4
 80036d0:	222c      	movs	r2, #44	@ 0x2c
 80036d2:	2100      	movs	r1, #0
 80036d4:	4618      	mov	r0, r3
 80036d6:	f00f f9b5 	bl	8012a44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80036da:	4b45      	ldr	r3, [pc, #276]	@ (80037f0 <MX_TIM1_Init+0x148>)
 80036dc:	4a45      	ldr	r2, [pc, #276]	@ (80037f4 <MX_TIM1_Init+0x14c>)
 80036de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1599;
 80036e0:	4b43      	ldr	r3, [pc, #268]	@ (80037f0 <MX_TIM1_Init+0x148>)
 80036e2:	f240 623f 	movw	r2, #1599	@ 0x63f
 80036e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036e8:	4b41      	ldr	r3, [pc, #260]	@ (80037f0 <MX_TIM1_Init+0x148>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 80036ee:	4b40      	ldr	r3, [pc, #256]	@ (80037f0 <MX_TIM1_Init+0x148>)
 80036f0:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80036f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036f6:	4b3e      	ldr	r3, [pc, #248]	@ (80037f0 <MX_TIM1_Init+0x148>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80036fc:	4b3c      	ldr	r3, [pc, #240]	@ (80037f0 <MX_TIM1_Init+0x148>)
 80036fe:	2200      	movs	r2, #0
 8003700:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003702:	4b3b      	ldr	r3, [pc, #236]	@ (80037f0 <MX_TIM1_Init+0x148>)
 8003704:	2200      	movs	r2, #0
 8003706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8003708:	4839      	ldr	r0, [pc, #228]	@ (80037f0 <MX_TIM1_Init+0x148>)
 800370a:	f00b fecc 	bl	800f4a6 <HAL_TIM_OC_Init>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8003714:	f000 fb34 	bl	8003d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003718:	2300      	movs	r3, #0
 800371a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800371c:	2300      	movs	r3, #0
 800371e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003720:	2300      	movs	r3, #0
 8003722:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003724:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003728:	4619      	mov	r1, r3
 800372a:	4831      	ldr	r0, [pc, #196]	@ (80037f0 <MX_TIM1_Init+0x148>)
 800372c:	f00d fcca 	bl	80110c4 <HAL_TIMEx_MasterConfigSynchronization>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8003736:	f000 fb23 	bl	8003d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800373a:	2300      	movs	r3, #0
 800373c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003742:	2300      	movs	r3, #0
 8003744:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003746:	2300      	movs	r3, #0
 8003748:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800374a:	2300      	movs	r3, #0
 800374c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800374e:	2300      	movs	r3, #0
 8003750:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003752:	2300      	movs	r3, #0
 8003754:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003756:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800375a:	2200      	movs	r2, #0
 800375c:	4619      	mov	r1, r3
 800375e:	4824      	ldr	r0, [pc, #144]	@ (80037f0 <MX_TIM1_Init+0x148>)
 8003760:	f00c fb86 	bl	800fe70 <HAL_TIM_OC_ConfigChannel>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800376a:	f000 fb09 	bl	8003d80 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800376e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003772:	2204      	movs	r2, #4
 8003774:	4619      	mov	r1, r3
 8003776:	481e      	ldr	r0, [pc, #120]	@ (80037f0 <MX_TIM1_Init+0x148>)
 8003778:	f00c fb7a 	bl	800fe70 <HAL_TIM_OC_ConfigChannel>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8003782:	f000 fafd 	bl	8003d80 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003786:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800378a:	2208      	movs	r2, #8
 800378c:	4619      	mov	r1, r3
 800378e:	4818      	ldr	r0, [pc, #96]	@ (80037f0 <MX_TIM1_Init+0x148>)
 8003790:	f00c fb6e 	bl	800fe70 <HAL_TIM_OC_ConfigChannel>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800379a:	f000 faf1 	bl	8003d80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800379e:	2300      	movs	r3, #0
 80037a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80037a2:	2300      	movs	r3, #0
 80037a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80037aa:	2300      	movs	r3, #0
 80037ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80037ae:	2300      	movs	r3, #0
 80037b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80037b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80037b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80037b8:	2300      	movs	r3, #0
 80037ba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80037bc:	2300      	movs	r3, #0
 80037be:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80037c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037c4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80037ca:	2300      	movs	r3, #0
 80037cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80037ce:	1d3b      	adds	r3, r7, #4
 80037d0:	4619      	mov	r1, r3
 80037d2:	4807      	ldr	r0, [pc, #28]	@ (80037f0 <MX_TIM1_Init+0x148>)
 80037d4:	f00d fcfe 	bl	80111d4 <HAL_TIMEx_ConfigBreakDeadTime>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 80037de:	f000 facf 	bl	8003d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80037e2:	4803      	ldr	r0, [pc, #12]	@ (80037f0 <MX_TIM1_Init+0x148>)
 80037e4:	f002 f810 	bl	8005808 <HAL_TIM_MspPostInit>

}
 80037e8:	bf00      	nop
 80037ea:	3758      	adds	r7, #88	@ 0x58
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	200002e4 	.word	0x200002e4
 80037f4:	40012c00 	.word	0x40012c00

080037f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037fe:	f107 0314 	add.w	r3, r7, #20
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	605a      	str	r2, [r3, #4]
 8003808:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800380a:	1d3b      	adds	r3, r7, #4
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003816:	4b21      	ldr	r3, [pc, #132]	@ (800389c <MX_TIM2_Init+0xa4>)
 8003818:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800381c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800381e:	4b1f      	ldr	r3, [pc, #124]	@ (800389c <MX_TIM2_Init+0xa4>)
 8003820:	2200      	movs	r2, #0
 8003822:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003824:	4b1d      	ldr	r3, [pc, #116]	@ (800389c <MX_TIM2_Init+0xa4>)
 8003826:	2200      	movs	r2, #0
 8003828:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800382a:	4b1c      	ldr	r3, [pc, #112]	@ (800389c <MX_TIM2_Init+0xa4>)
 800382c:	f04f 32ff 	mov.w	r2, #4294967295
 8003830:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003832:	4b1a      	ldr	r3, [pc, #104]	@ (800389c <MX_TIM2_Init+0xa4>)
 8003834:	2200      	movs	r2, #0
 8003836:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003838:	4b18      	ldr	r3, [pc, #96]	@ (800389c <MX_TIM2_Init+0xa4>)
 800383a:	2200      	movs	r2, #0
 800383c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800383e:	4817      	ldr	r0, [pc, #92]	@ (800389c <MX_TIM2_Init+0xa4>)
 8003840:	f00c fabe 	bl	800fdc0 <HAL_TIM_IC_Init>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800384a:	f000 fa99 	bl	8003d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003856:	f107 0314 	add.w	r3, r7, #20
 800385a:	4619      	mov	r1, r3
 800385c:	480f      	ldr	r0, [pc, #60]	@ (800389c <MX_TIM2_Init+0xa4>)
 800385e:	f00d fc31 	bl	80110c4 <HAL_TIMEx_MasterConfigSynchronization>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8003868:	f000 fa8a 	bl	8003d80 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800386c:	2300      	movs	r3, #0
 800386e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003870:	2301      	movs	r3, #1
 8003872:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800387c:	1d3b      	adds	r3, r7, #4
 800387e:	2200      	movs	r2, #0
 8003880:	4619      	mov	r1, r3
 8003882:	4806      	ldr	r0, [pc, #24]	@ (800389c <MX_TIM2_Init+0xa4>)
 8003884:	f00c fb6e 	bl	800ff64 <HAL_TIM_IC_ConfigChannel>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800388e:	f000 fa77 	bl	8003d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003892:	bf00      	nop
 8003894:	3720      	adds	r7, #32
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20000330 	.word	0x20000330

080038a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b090      	sub	sp, #64	@ 0x40
 80038a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80038a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
 80038b0:	609a      	str	r2, [r3, #8]
 80038b2:	60da      	str	r2, [r3, #12]
 80038b4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038b6:	f107 0320 	add.w	r3, r7, #32
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	605a      	str	r2, [r3, #4]
 80038c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038c2:	1d3b      	adds	r3, r7, #4
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	609a      	str	r2, [r3, #8]
 80038cc:	60da      	str	r2, [r3, #12]
 80038ce:	611a      	str	r2, [r3, #16]
 80038d0:	615a      	str	r2, [r3, #20]
 80038d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80038d4:	4b2c      	ldr	r3, [pc, #176]	@ (8003988 <MX_TIM3_Init+0xe8>)
 80038d6:	4a2d      	ldr	r2, [pc, #180]	@ (800398c <MX_TIM3_Init+0xec>)
 80038d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80038da:	4b2b      	ldr	r3, [pc, #172]	@ (8003988 <MX_TIM3_Init+0xe8>)
 80038dc:	2200      	movs	r2, #0
 80038de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038e0:	4b29      	ldr	r3, [pc, #164]	@ (8003988 <MX_TIM3_Init+0xe8>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 31;
 80038e6:	4b28      	ldr	r3, [pc, #160]	@ (8003988 <MX_TIM3_Init+0xe8>)
 80038e8:	221f      	movs	r2, #31
 80038ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038ec:	4b26      	ldr	r3, [pc, #152]	@ (8003988 <MX_TIM3_Init+0xe8>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038f2:	4b25      	ldr	r3, [pc, #148]	@ (8003988 <MX_TIM3_Init+0xe8>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80038f8:	4823      	ldr	r0, [pc, #140]	@ (8003988 <MX_TIM3_Init+0xe8>)
 80038fa:	f00b fd7d 	bl	800f3f8 <HAL_TIM_Base_Init>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003904:	f000 fa3c 	bl	8003d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003908:	481f      	ldr	r0, [pc, #124]	@ (8003988 <MX_TIM3_Init+0xe8>)
 800390a:	f00c f85b 	bl	800f9c4 <HAL_TIM_PWM_Init>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8003914:	f000 fa34 	bl	8003d80 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8003918:	2307      	movs	r3, #7
 800391a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800391c:	2330      	movs	r3, #48	@ 0x30
 800391e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8003920:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003924:	4619      	mov	r1, r3
 8003926:	4818      	ldr	r0, [pc, #96]	@ (8003988 <MX_TIM3_Init+0xe8>)
 8003928:	f00c fd95 	bl	8010456 <HAL_TIM_SlaveConfigSynchro>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003932:	f000 fa25 	bl	8003d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003936:	2300      	movs	r3, #0
 8003938:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800393a:	2300      	movs	r3, #0
 800393c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800393e:	f107 0320 	add.w	r3, r7, #32
 8003942:	4619      	mov	r1, r3
 8003944:	4810      	ldr	r0, [pc, #64]	@ (8003988 <MX_TIM3_Init+0xe8>)
 8003946:	f00d fbbd 	bl	80110c4 <HAL_TIMEx_MasterConfigSynchronization>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003950:	f000 fa16 	bl	8003d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003954:	2360      	movs	r3, #96	@ 0x60
 8003956:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 15;
 8003958:	230f      	movs	r3, #15
 800395a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800395c:	2300      	movs	r3, #0
 800395e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003964:	1d3b      	adds	r3, r7, #4
 8003966:	2208      	movs	r2, #8
 8003968:	4619      	mov	r1, r3
 800396a:	4807      	ldr	r0, [pc, #28]	@ (8003988 <MX_TIM3_Init+0xe8>)
 800396c:	f00c fb96 	bl	801009c <HAL_TIM_PWM_ConfigChannel>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8003976:	f000 fa03 	bl	8003d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800397a:	4803      	ldr	r0, [pc, #12]	@ (8003988 <MX_TIM3_Init+0xe8>)
 800397c:	f001 ff44 	bl	8005808 <HAL_TIM_MspPostInit>

}
 8003980:	bf00      	nop
 8003982:	3740      	adds	r7, #64	@ 0x40
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	2000037c 	.word	0x2000037c
 800398c:	40000400 	.word	0x40000400

08003990 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08e      	sub	sp, #56	@ 0x38
 8003994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003996:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	605a      	str	r2, [r3, #4]
 80039a0:	609a      	str	r2, [r3, #8]
 80039a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039a4:	f107 031c 	add.w	r3, r7, #28
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	605a      	str	r2, [r3, #4]
 80039ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039b0:	463b      	mov	r3, r7
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	605a      	str	r2, [r3, #4]
 80039b8:	609a      	str	r2, [r3, #8]
 80039ba:	60da      	str	r2, [r3, #12]
 80039bc:	611a      	str	r2, [r3, #16]
 80039be:	615a      	str	r2, [r3, #20]
 80039c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80039c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003a70 <MX_TIM4_Init+0xe0>)
 80039c4:	4a2b      	ldr	r2, [pc, #172]	@ (8003a74 <MX_TIM4_Init+0xe4>)
 80039c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 80039c8:	4b29      	ldr	r3, [pc, #164]	@ (8003a70 <MX_TIM4_Init+0xe0>)
 80039ca:	2263      	movs	r2, #99	@ 0x63
 80039cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039ce:	4b28      	ldr	r3, [pc, #160]	@ (8003a70 <MX_TIM4_Init+0xe0>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80039d4:	4b26      	ldr	r3, [pc, #152]	@ (8003a70 <MX_TIM4_Init+0xe0>)
 80039d6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80039da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039dc:	4b24      	ldr	r3, [pc, #144]	@ (8003a70 <MX_TIM4_Init+0xe0>)
 80039de:	2200      	movs	r2, #0
 80039e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039e2:	4b23      	ldr	r3, [pc, #140]	@ (8003a70 <MX_TIM4_Init+0xe0>)
 80039e4:	2280      	movs	r2, #128	@ 0x80
 80039e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80039e8:	4821      	ldr	r0, [pc, #132]	@ (8003a70 <MX_TIM4_Init+0xe0>)
 80039ea:	f00b fd05 	bl	800f3f8 <HAL_TIM_Base_Init>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80039f4:	f000 f9c4 	bl	8003d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80039fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a02:	4619      	mov	r1, r3
 8003a04:	481a      	ldr	r0, [pc, #104]	@ (8003a70 <MX_TIM4_Init+0xe0>)
 8003a06:	f00c fc5d 	bl	80102c4 <HAL_TIM_ConfigClockSource>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003a10:	f000 f9b6 	bl	8003d80 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8003a14:	4816      	ldr	r0, [pc, #88]	@ (8003a70 <MX_TIM4_Init+0xe0>)
 8003a16:	f00b fd46 	bl	800f4a6 <HAL_TIM_OC_Init>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003a20:	f000 f9ae 	bl	8003d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003a24:	2320      	movs	r3, #32
 8003a26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003a2c:	f107 031c 	add.w	r3, r7, #28
 8003a30:	4619      	mov	r1, r3
 8003a32:	480f      	ldr	r0, [pc, #60]	@ (8003a70 <MX_TIM4_Init+0xe0>)
 8003a34:	f00d fb46 	bl	80110c4 <HAL_TIMEx_MasterConfigSynchronization>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003a3e:	f000 f99f 	bl	8003d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003a42:	2300      	movs	r3, #0
 8003a44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003a46:	2300      	movs	r3, #0
 8003a48:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a52:	463b      	mov	r3, r7
 8003a54:	2208      	movs	r2, #8
 8003a56:	4619      	mov	r1, r3
 8003a58:	4805      	ldr	r0, [pc, #20]	@ (8003a70 <MX_TIM4_Init+0xe0>)
 8003a5a:	f00c fa09 	bl	800fe70 <HAL_TIM_OC_ConfigChannel>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8003a64:	f000 f98c 	bl	8003d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003a68:	bf00      	nop
 8003a6a:	3738      	adds	r7, #56	@ 0x38
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	200003c8 	.word	0x200003c8
 8003a74:	40000800 	.word	0x40000800

08003a78 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003a7c:	4b14      	ldr	r3, [pc, #80]	@ (8003ad0 <MX_UART4_Init+0x58>)
 8003a7e:	4a15      	ldr	r2, [pc, #84]	@ (8003ad4 <MX_UART4_Init+0x5c>)
 8003a80:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003a82:	4b13      	ldr	r3, [pc, #76]	@ (8003ad0 <MX_UART4_Init+0x58>)
 8003a84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003a88:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003a8a:	4b11      	ldr	r3, [pc, #68]	@ (8003ad0 <MX_UART4_Init+0x58>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003a90:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad0 <MX_UART4_Init+0x58>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003a96:	4b0e      	ldr	r3, [pc, #56]	@ (8003ad0 <MX_UART4_Init+0x58>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad0 <MX_UART4_Init+0x58>)
 8003a9e:	220c      	movs	r2, #12
 8003aa0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad0 <MX_UART4_Init+0x58>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003aa8:	4b09      	ldr	r3, [pc, #36]	@ (8003ad0 <MX_UART4_Init+0x58>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003aae:	4b08      	ldr	r3, [pc, #32]	@ (8003ad0 <MX_UART4_Init+0x58>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ab4:	4b06      	ldr	r3, [pc, #24]	@ (8003ad0 <MX_UART4_Init+0x58>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8003aba:	4805      	ldr	r0, [pc, #20]	@ (8003ad0 <MX_UART4_Init+0x58>)
 8003abc:	f00d fc56 	bl	801136c <HAL_HalfDuplex_Init>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8003ac6:	f000 f95b 	bl	8003d80 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003aca:	bf00      	nop
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20000414 	.word	0x20000414
 8003ad4:	40004c00 	.word	0x40004c00

08003ad8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003adc:	4b14      	ldr	r3, [pc, #80]	@ (8003b30 <MX_USART1_UART_Init+0x58>)
 8003ade:	4a15      	ldr	r2, [pc, #84]	@ (8003b34 <MX_USART1_UART_Init+0x5c>)
 8003ae0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003ae2:	4b13      	ldr	r3, [pc, #76]	@ (8003b30 <MX_USART1_UART_Init+0x58>)
 8003ae4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003ae8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003aea:	4b11      	ldr	r3, [pc, #68]	@ (8003b30 <MX_USART1_UART_Init+0x58>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003af0:	4b0f      	ldr	r3, [pc, #60]	@ (8003b30 <MX_USART1_UART_Init+0x58>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003af6:	4b0e      	ldr	r3, [pc, #56]	@ (8003b30 <MX_USART1_UART_Init+0x58>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003afc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b30 <MX_USART1_UART_Init+0x58>)
 8003afe:	220c      	movs	r2, #12
 8003b00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003b02:	4b0b      	ldr	r3, [pc, #44]	@ (8003b30 <MX_USART1_UART_Init+0x58>)
 8003b04:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003b08:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b0a:	4b09      	ldr	r3, [pc, #36]	@ (8003b30 <MX_USART1_UART_Init+0x58>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b10:	4b07      	ldr	r3, [pc, #28]	@ (8003b30 <MX_USART1_UART_Init+0x58>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b16:	4b06      	ldr	r3, [pc, #24]	@ (8003b30 <MX_USART1_UART_Init+0x58>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b1c:	4804      	ldr	r0, [pc, #16]	@ (8003b30 <MX_USART1_UART_Init+0x58>)
 8003b1e:	f00d fbd7 	bl	80112d0 <HAL_UART_Init>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8003b28:	f000 f92a 	bl	8003d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b2c:	bf00      	nop
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	2000049c 	.word	0x2000049c
 8003b34:	40013800 	.word	0x40013800

08003b38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b3e:	4b14      	ldr	r3, [pc, #80]	@ (8003b90 <MX_DMA_Init+0x58>)
 8003b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b42:	4a13      	ldr	r2, [pc, #76]	@ (8003b90 <MX_DMA_Init+0x58>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	6493      	str	r3, [r2, #72]	@ 0x48
 8003b4a:	4b11      	ldr	r3, [pc, #68]	@ (8003b90 <MX_DMA_Init+0x58>)
 8003b4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	607b      	str	r3, [r7, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003b56:	2200      	movs	r2, #0
 8003b58:	2100      	movs	r1, #0
 8003b5a:	200b      	movs	r0, #11
 8003b5c:	f006 fe2d 	bl	800a7ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003b60:	200b      	movs	r0, #11
 8003b62:	f006 fe46 	bl	800a7f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003b66:	2200      	movs	r2, #0
 8003b68:	2100      	movs	r1, #0
 8003b6a:	200e      	movs	r0, #14
 8003b6c:	f006 fe25 	bl	800a7ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003b70:	200e      	movs	r0, #14
 8003b72:	f006 fe3e 	bl	800a7f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003b76:	2200      	movs	r2, #0
 8003b78:	2100      	movs	r1, #0
 8003b7a:	200f      	movs	r0, #15
 8003b7c:	f006 fe1d 	bl	800a7ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003b80:	200f      	movs	r0, #15
 8003b82:	f006 fe36 	bl	800a7f2 <HAL_NVIC_EnableIRQ>

}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000

08003b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	@ 0x28
 8003b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b9a:	f107 0314 	add.w	r3, r7, #20
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	605a      	str	r2, [r3, #4]
 8003ba4:	609a      	str	r2, [r3, #8]
 8003ba6:	60da      	str	r2, [r3, #12]
 8003ba8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003baa:	4b71      	ldr	r3, [pc, #452]	@ (8003d70 <MX_GPIO_Init+0x1dc>)
 8003bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bae:	4a70      	ldr	r2, [pc, #448]	@ (8003d70 <MX_GPIO_Init+0x1dc>)
 8003bb0:	f043 0304 	orr.w	r3, r3, #4
 8003bb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bb6:	4b6e      	ldr	r3, [pc, #440]	@ (8003d70 <MX_GPIO_Init+0x1dc>)
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	613b      	str	r3, [r7, #16]
 8003bc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003bc2:	4b6b      	ldr	r3, [pc, #428]	@ (8003d70 <MX_GPIO_Init+0x1dc>)
 8003bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc6:	4a6a      	ldr	r2, [pc, #424]	@ (8003d70 <MX_GPIO_Init+0x1dc>)
 8003bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bce:	4b68      	ldr	r3, [pc, #416]	@ (8003d70 <MX_GPIO_Init+0x1dc>)
 8003bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bda:	4b65      	ldr	r3, [pc, #404]	@ (8003d70 <MX_GPIO_Init+0x1dc>)
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bde:	4a64      	ldr	r2, [pc, #400]	@ (8003d70 <MX_GPIO_Init+0x1dc>)
 8003be0:	f043 0301 	orr.w	r3, r3, #1
 8003be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003be6:	4b62      	ldr	r3, [pc, #392]	@ (8003d70 <MX_GPIO_Init+0x1dc>)
 8003be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bf2:	4b5f      	ldr	r3, [pc, #380]	@ (8003d70 <MX_GPIO_Init+0x1dc>)
 8003bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf6:	4a5e      	ldr	r2, [pc, #376]	@ (8003d70 <MX_GPIO_Init+0x1dc>)
 8003bf8:	f043 0302 	orr.w	r3, r3, #2
 8003bfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bfe:	4b5c      	ldr	r3, [pc, #368]	@ (8003d70 <MX_GPIO_Init+0x1dc>)
 8003c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	607b      	str	r3, [r7, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c0a:	4b59      	ldr	r3, [pc, #356]	@ (8003d70 <MX_GPIO_Init+0x1dc>)
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c0e:	4a58      	ldr	r2, [pc, #352]	@ (8003d70 <MX_GPIO_Init+0x1dc>)
 8003c10:	f043 0308 	orr.w	r3, r3, #8
 8003c14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c16:	4b56      	ldr	r3, [pc, #344]	@ (8003d70 <MX_GPIO_Init+0x1dc>)
 8003c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DBG_GPIO_Port, DBG_Pin, GPIO_PIN_RESET);
 8003c22:	2200      	movs	r2, #0
 8003c24:	2108      	movs	r1, #8
 8003c26:	4853      	ldr	r0, [pc, #332]	@ (8003d74 <MX_GPIO_Init+0x1e0>)
 8003c28:	f007 fad4 	bl	800b1d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c32:	4851      	ldr	r0, [pc, #324]	@ (8003d78 <MX_GPIO_Init+0x1e4>)
 8003c34:	f007 face 	bl	800b1d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH_nWP_Pin|FLASH_nRESET_Pin, GPIO_PIN_SET);
 8003c38:	2201      	movs	r2, #1
 8003c3a:	21c0      	movs	r1, #192	@ 0xc0
 8003c3c:	484d      	ldr	r0, [pc, #308]	@ (8003d74 <MX_GPIO_Init+0x1e0>)
 8003c3e:	f007 fac9 	bl	800b1d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LTE_POWER_ON_Pin|LTE_RESET_Pin, GPIO_PIN_SET);
 8003c42:	2201      	movs	r2, #1
 8003c44:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003c48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c4c:	f007 fac2 	bl	800b1d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8003c50:	2200      	movs	r2, #0
 8003c52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c5a:	f007 fabb 	bl	800b1d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DTR_GPIO_Port, DTR_Pin, GPIO_PIN_RESET);
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003c64:	4844      	ldr	r0, [pc, #272]	@ (8003d78 <MX_GPIO_Init+0x1e4>)
 8003c66:	f007 fab5 	bl	800b1d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USR_BTN_Pin PC4 */
  GPIO_InitStruct.Pin = USR_BTN_Pin|GPIO_PIN_4;
 8003c6a:	f242 0310 	movw	r3, #8208	@ 0x2010
 8003c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c70:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c7a:	f107 0314 	add.w	r3, r7, #20
 8003c7e:	4619      	mov	r1, r3
 8003c80:	483c      	ldr	r0, [pc, #240]	@ (8003d74 <MX_GPIO_Init+0x1e0>)
 8003c82:	f007 f8fd 	bl	800ae80 <HAL_GPIO_Init>

  /*Configure GPIO pins : DBG_Pin FLASH_nWP_Pin FLASH_nRESET_Pin */
  GPIO_InitStruct.Pin = DBG_Pin|FLASH_nWP_Pin|FLASH_nRESET_Pin;
 8003c86:	23c8      	movs	r3, #200	@ 0xc8
 8003c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c92:	2300      	movs	r3, #0
 8003c94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c96:	f107 0314 	add.w	r3, r7, #20
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4835      	ldr	r0, [pc, #212]	@ (8003d74 <MX_GPIO_Init+0x1e0>)
 8003c9e:	f007 f8ef 	bl	800ae80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003ca2:	2308      	movs	r3, #8
 8003ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cae:	f107 0314 	add.w	r3, r7, #20
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cb8:	f007 f8e2 	bl	800ae80 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_nCS_Pin DTR_Pin */
  GPIO_InitStruct.Pin = FLASH_nCS_Pin|DTR_Pin;
 8003cbc:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8003cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cce:	f107 0314 	add.w	r3, r7, #20
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4828      	ldr	r0, [pc, #160]	@ (8003d78 <MX_GPIO_Init+0x1e4>)
 8003cd6:	f007 f8d3 	bl	800ae80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LTE_POWER_ON_Pin LTE_RESET_Pin */
  GPIO_InitStruct.Pin = LTE_POWER_ON_Pin|LTE_RESET_Pin;
 8003cda:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003ce0:	2311      	movs	r3, #17
 8003ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cec:	f107 0314 	add.w	r3, r7, #20
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cf6:	f007 f8c3 	bl	800ae80 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_nCS_Pin */
  GPIO_InitStruct.Pin = ACC_nCS_Pin;
 8003cfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d00:	2301      	movs	r3, #1
 8003d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d04:	2300      	movs	r3, #0
 8003d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACC_nCS_GPIO_Port, &GPIO_InitStruct);
 8003d0c:	f107 0314 	add.w	r3, r7, #20
 8003d10:	4619      	mov	r1, r3
 8003d12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d16:	f007 f8b3 	bl	800ae80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d1a:	2304      	movs	r3, #4
 8003d1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d1e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d28:	f107 0314 	add.w	r3, r7, #20
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4813      	ldr	r0, [pc, #76]	@ (8003d7c <MX_GPIO_Init+0x1e8>)
 8003d30:	f007 f8a6 	bl	800ae80 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCD_Pin */
  GPIO_InitStruct.Pin = DCD_Pin;
 8003d34:	2320      	movs	r3, #32
 8003d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DCD_GPIO_Port, &GPIO_InitStruct);
 8003d40:	f107 0314 	add.w	r3, r7, #20
 8003d44:	4619      	mov	r1, r3
 8003d46:	480c      	ldr	r0, [pc, #48]	@ (8003d78 <MX_GPIO_Init+0x1e4>)
 8003d48:	f007 f89a 	bl	800ae80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003d4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d52:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d5c:	f107 0314 	add.w	r3, r7, #20
 8003d60:	4619      	mov	r1, r3
 8003d62:	4805      	ldr	r0, [pc, #20]	@ (8003d78 <MX_GPIO_Init+0x1e4>)
 8003d64:	f007 f88c 	bl	800ae80 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003d68:	bf00      	nop
 8003d6a:	3728      	adds	r7, #40	@ 0x28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40021000 	.word	0x40021000
 8003d74:	48000800 	.word	0x48000800
 8003d78:	48000400 	.word	0x48000400
 8003d7c:	48000c00 	.word	0x48000c00

08003d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d84:	b672      	cpsid	i
}
 8003d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003d88:	bf00      	nop
 8003d8a:	e7fd      	b.n	8003d88 <Error_Handler+0x8>

08003d8c <Save_Data>:
#include "stdlib.h"


/*-----ACQUISIZIONE MISURE E LOG DEI DATI-----*/
void Save_Data(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	f5ad 6d9a 	sub.w	sp, sp, #1232	@ 0x4d0
 8003d92:	af00      	add	r7, sp, #0
	if(flags.ADC_Half_Buffer)
 8003d94:	4b76      	ldr	r3, [pc, #472]	@ (8003f70 <Save_Data+0x1e4>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d037      	beq.n	8003e12 <Save_Data+0x86>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[0], PRESS_HALF_LEN);
 8003da2:	4b74      	ldr	r3, [pc, #464]	@ (8003f74 <Save_Data+0x1e8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	4b73      	ldr	r3, [pc, #460]	@ (8003f78 <Save_Data+0x1ec>)
 8003daa:	4413      	add	r3, r2
 8003dac:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003db0:	4972      	ldr	r1, [pc, #456]	@ (8003f7c <Save_Data+0x1f0>)
 8003db2:	4618      	mov	r0, r3
 8003db4:	f00e feca 	bl	8012b4c <memcpy>
		Last_Pressure = 0;
 8003db8:	4b71      	ldr	r3, [pc, #452]	@ (8003f80 <Save_Data+0x1f4>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8003dc4:	e00f      	b.n	8003de6 <Save_Data+0x5a>
		{
			Last_Pressure += Pressure[i];
 8003dc6:	4a6d      	ldr	r2, [pc, #436]	@ (8003f7c <Save_Data+0x1f0>)
 8003dc8:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8003dcc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003dd0:	4b6b      	ldr	r3, [pc, #428]	@ (8003f80 <Save_Data+0x1f4>)
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	4b69      	ldr	r3, [pc, #420]	@ (8003f80 <Save_Data+0x1f4>)
 8003dda:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 8003ddc:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8003de0:	3301      	adds	r3, #1
 8003de2:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8003de6:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8003dea:	2bc7      	cmp	r3, #199	@ 0xc7
 8003dec:	ddeb      	ble.n	8003dc6 <Save_Data+0x3a>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 8003dee:	4b64      	ldr	r3, [pc, #400]	@ (8003f80 <Save_Data+0x1f4>)
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	4a64      	ldr	r2, [pc, #400]	@ (8003f84 <Save_Data+0x1f8>)
 8003df4:	fba2 2303 	umull	r2, r3, r2, r3
 8003df8:	099b      	lsrs	r3, r3, #6
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	4b60      	ldr	r3, [pc, #384]	@ (8003f80 <Save_Data+0x1f4>)
 8003dfe:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[0]);
 8003e00:	485e      	ldr	r0, [pc, #376]	@ (8003f7c <Save_Data+0x1f0>)
 8003e02:	f000 fa43 	bl	800428c <Warning_Detection>
		flags.ADC_Half_Buffer = 0;
 8003e06:	4a5a      	ldr	r2, [pc, #360]	@ (8003f70 <Save_Data+0x1e4>)
 8003e08:	7813      	ldrb	r3, [r2, #0]
 8003e0a:	f023 0302 	bic.w	r3, r3, #2
 8003e0e:	7013      	strb	r3, [r2, #0]
 8003e10:	e03e      	b.n	8003e90 <Save_Data+0x104>
	}
	else if(flags.ADC_Full_Buffer)
 8003e12:	4b57      	ldr	r3, [pc, #348]	@ (8003f70 <Save_Data+0x1e4>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d037      	beq.n	8003e90 <Save_Data+0x104>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[PRESS_HALF_SAMPLES], PRESS_HALF_LEN);
 8003e20:	4b54      	ldr	r3, [pc, #336]	@ (8003f74 <Save_Data+0x1e8>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	4b54      	ldr	r3, [pc, #336]	@ (8003f78 <Save_Data+0x1ec>)
 8003e28:	4413      	add	r3, r2
 8003e2a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003e2e:	4956      	ldr	r1, [pc, #344]	@ (8003f88 <Save_Data+0x1fc>)
 8003e30:	4618      	mov	r0, r3
 8003e32:	f00e fe8b 	bl	8012b4c <memcpy>
		Last_Pressure = 0;
 8003e36:	4b52      	ldr	r3, [pc, #328]	@ (8003f80 <Save_Data+0x1f4>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 8003e3c:	23c8      	movs	r3, #200	@ 0xc8
 8003e3e:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 8003e42:	e00f      	b.n	8003e64 <Save_Data+0xd8>
		{
			Last_Pressure += Pressure[i];
 8003e44:	4a4d      	ldr	r2, [pc, #308]	@ (8003f7c <Save_Data+0x1f0>)
 8003e46:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8003e4a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003e4e:	4b4c      	ldr	r3, [pc, #304]	@ (8003f80 <Save_Data+0x1f4>)
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	4413      	add	r3, r2
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	4b4a      	ldr	r3, [pc, #296]	@ (8003f80 <Save_Data+0x1f4>)
 8003e58:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 8003e5a:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8003e5e:	3301      	adds	r3, #1
 8003e60:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 8003e64:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8003e68:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003e6c:	dbea      	blt.n	8003e44 <Save_Data+0xb8>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 8003e6e:	4b44      	ldr	r3, [pc, #272]	@ (8003f80 <Save_Data+0x1f4>)
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	4a44      	ldr	r2, [pc, #272]	@ (8003f84 <Save_Data+0x1f8>)
 8003e74:	fba2 2303 	umull	r2, r3, r2, r3
 8003e78:	099b      	lsrs	r3, r3, #6
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	4b40      	ldr	r3, [pc, #256]	@ (8003f80 <Save_Data+0x1f4>)
 8003e7e:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[PRESS_HALF_SAMPLES]);
 8003e80:	4841      	ldr	r0, [pc, #260]	@ (8003f88 <Save_Data+0x1fc>)
 8003e82:	f000 fa03 	bl	800428c <Warning_Detection>
		flags.ADC_Full_Buffer = 0;
 8003e86:	4a3a      	ldr	r2, [pc, #232]	@ (8003f70 <Save_Data+0x1e4>)
 8003e88:	7813      	ldrb	r3, [r2, #0]
 8003e8a:	f023 0304 	bic.w	r3, r3, #4
 8003e8e:	7013      	strb	r3, [r2, #0]
	}
	flags.ADC_Complete = 0;
 8003e90:	4a37      	ldr	r2, [pc, #220]	@ (8003f70 <Save_Data+0x1e4>)
 8003e92:	7813      	ldrb	r3, [r2, #0]
 8003e94:	f023 0301 	bic.w	r3, r3, #1
 8003e98:	7013      	strb	r3, [r2, #0]
	Address_Offset += PRESS_HALF_LEN;
 8003e9a:	4b36      	ldr	r3, [pc, #216]	@ (8003f74 <Save_Data+0x1e8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8003ea2:	4a34      	ldr	r2, [pc, #208]	@ (8003f74 <Save_Data+0x1e8>)
 8003ea4:	6013      	str	r3, [r2, #0]

	memcpy(Saving_Buffer + Address_Offset, Volume_Period, MAX_VOLUME_LEN);
 8003ea6:	4b33      	ldr	r3, [pc, #204]	@ (8003f74 <Save_Data+0x1e8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	4b32      	ldr	r3, [pc, #200]	@ (8003f78 <Save_Data+0x1ec>)
 8003eae:	4413      	add	r3, r2
 8003eb0:	2228      	movs	r2, #40	@ 0x28
 8003eb2:	4936      	ldr	r1, [pc, #216]	@ (8003f8c <Save_Data+0x200>)
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f00e fe49 	bl	8012b4c <memcpy>
	uint8_t current_period_cnt = Period_cnt;
 8003eba:	4b35      	ldr	r3, [pc, #212]	@ (8003f90 <Save_Data+0x204>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	f887 34bf 	strb.w	r3, [r7, #1215]	@ 0x4bf
	Last_Volume = 0;
 8003ec2:	4b34      	ldr	r3, [pc, #208]	@ (8003f94 <Save_Data+0x208>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < current_period_cnt; i++)
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 8003ece:	e00f      	b.n	8003ef0 <Save_Data+0x164>
	{
		Last_Volume += Volume_Period[i];
 8003ed0:	4a2e      	ldr	r2, [pc, #184]	@ (8003f8c <Save_Data+0x200>)
 8003ed2:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 8003ed6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003eda:	4b2e      	ldr	r3, [pc, #184]	@ (8003f94 <Save_Data+0x208>)
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	4413      	add	r3, r2
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	4b2c      	ldr	r3, [pc, #176]	@ (8003f94 <Save_Data+0x208>)
 8003ee4:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < current_period_cnt; i++)
 8003ee6:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 8003eea:	3301      	adds	r3, #1
 8003eec:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 8003ef0:	f897 34bf 	ldrb.w	r3, [r7, #1215]	@ 0x4bf
 8003ef4:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	dbe9      	blt.n	8003ed0 <Save_Data+0x144>
	}
	Last_Volume = (uint16_t)(Last_Volume / current_period_cnt);
 8003efc:	4b25      	ldr	r3, [pc, #148]	@ (8003f94 <Save_Data+0x208>)
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	461a      	mov	r2, r3
 8003f02:	f897 34bf 	ldrb.w	r3, [r7, #1215]	@ 0x4bf
 8003f06:	fb92 f3f3 	sdiv	r3, r2, r3
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	4b21      	ldr	r3, [pc, #132]	@ (8003f94 <Save_Data+0x208>)
 8003f0e:	801a      	strh	r2, [r3, #0]
	memset(Volume_Period, 0, sizeof(Volume_Period));
 8003f10:	2228      	movs	r2, #40	@ 0x28
 8003f12:	2100      	movs	r1, #0
 8003f14:	481d      	ldr	r0, [pc, #116]	@ (8003f8c <Save_Data+0x200>)
 8003f16:	f00e fd95 	bl	8012a44 <memset>
	Period_cnt = 0;
 8003f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8003f90 <Save_Data+0x204>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	701a      	strb	r2, [r3, #0]
	Address_Offset += MAX_VOLUME_LEN;
 8003f20:	4b14      	ldr	r3, [pc, #80]	@ (8003f74 <Save_Data+0x1e8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3328      	adds	r3, #40	@ 0x28
 8003f26:	4a13      	ldr	r2, [pc, #76]	@ (8003f74 <Save_Data+0x1e8>)
 8003f28:	6013      	str	r3, [r2, #0]

	if(flags.ACC_Present)
 8003f2a:	4b11      	ldr	r3, [pc, #68]	@ (8003f70 <Save_Data+0x1e4>)
 8003f2c:	785b      	ldrb	r3, [r3, #1]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 80a2 	beq.w	800407e <Save_Data+0x2f2>
	{
		memcpy(Saving_Buffer + Address_Offset, Acceleration, ACCELERATION_LEN);
 8003f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8003f74 <Save_Data+0x1e8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	4b0d      	ldr	r3, [pc, #52]	@ (8003f78 <Save_Data+0x1ec>)
 8003f42:	4413      	add	r3, r2
 8003f44:	4a14      	ldr	r2, [pc, #80]	@ (8003f98 <Save_Data+0x20c>)
 8003f46:	4618      	mov	r0, r3
 8003f48:	4611      	mov	r1, r2
 8003f4a:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f00e fdfc 	bl	8012b4c <memcpy>
		Last_Acceleration.x = 0;
 8003f54:	4b11      	ldr	r3, [pc, #68]	@ (8003f9c <Save_Data+0x210>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = 0;
 8003f5a:	4b10      	ldr	r3, [pc, #64]	@ (8003f9c <Save_Data+0x210>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = 0;
 8003f60:	4b0e      	ldr	r3, [pc, #56]	@ (8003f9c <Save_Data+0x210>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 8003f66:	2300      	movs	r3, #0
 8003f68:	f8c7 34c0 	str.w	r3, [r7, #1216]	@ 0x4c0
 8003f6c:	e062      	b.n	8004034 <Save_Data+0x2a8>
 8003f6e:	bf00      	nop
 8003f70:	20001980 	.word	0x20001980
 8003f74:	20004b88 	.word	0x20004b88
 8003f78:	20004458 	.word	0x20004458
 8003f7c:	20003b24 	.word	0x20003b24
 8003f80:	200043e4 	.word	0x200043e4
 8003f84:	51eb851f 	.word	0x51eb851f
 8003f88:	20003cb4 	.word	0x20003cb4
 8003f8c:	20003e44 	.word	0x20003e44
 8003f90:	20003b20 	.word	0x20003b20
 8003f94:	200043e6 	.word	0x200043e6
 8003f98:	20003e6c 	.word	0x20003e6c
 8003f9c:	200043e8 	.word	0x200043e8
		{
			Last_Acceleration.x += Acceleration[i+1] | (Acceleration[i+2] << 8); 
 8003fa0:	4b7a      	ldr	r3, [pc, #488]	@ (800418c <Save_Data+0x400>)
 8003fa2:	885a      	ldrh	r2, [r3, #2]
 8003fa4:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 8003fa8:	3301      	adds	r3, #1
 8003faa:	4979      	ldr	r1, [pc, #484]	@ (8004190 <Save_Data+0x404>)
 8003fac:	5ccb      	ldrb	r3, [r1, r3]
 8003fae:	b219      	sxth	r1, r3
 8003fb0:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 8003fb4:	3302      	adds	r3, #2
 8003fb6:	4876      	ldr	r0, [pc, #472]	@ (8004190 <Save_Data+0x404>)
 8003fb8:	5cc3      	ldrb	r3, [r0, r3]
 8003fba:	b21b      	sxth	r3, r3
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	b21b      	sxth	r3, r3
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	b21b      	sxth	r3, r3
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	4b70      	ldr	r3, [pc, #448]	@ (800418c <Save_Data+0x400>)
 8003fcc:	805a      	strh	r2, [r3, #2]
			Last_Acceleration.y += Acceleration[i+3] | (Acceleration[i+4] << 8); 
 8003fce:	4b6f      	ldr	r3, [pc, #444]	@ (800418c <Save_Data+0x400>)
 8003fd0:	889a      	ldrh	r2, [r3, #4]
 8003fd2:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 8003fd6:	3303      	adds	r3, #3
 8003fd8:	496d      	ldr	r1, [pc, #436]	@ (8004190 <Save_Data+0x404>)
 8003fda:	5ccb      	ldrb	r3, [r1, r3]
 8003fdc:	b219      	sxth	r1, r3
 8003fde:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	486a      	ldr	r0, [pc, #424]	@ (8004190 <Save_Data+0x404>)
 8003fe6:	5cc3      	ldrb	r3, [r0, r3]
 8003fe8:	b21b      	sxth	r3, r3
 8003fea:	021b      	lsls	r3, r3, #8
 8003fec:	b21b      	sxth	r3, r3
 8003fee:	430b      	orrs	r3, r1
 8003ff0:	b21b      	sxth	r3, r3
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	4b64      	ldr	r3, [pc, #400]	@ (800418c <Save_Data+0x400>)
 8003ffa:	809a      	strh	r2, [r3, #4]
			Last_Acceleration.z += Acceleration[i+5] | (Acceleration[i+6] << 8); 
 8003ffc:	4b63      	ldr	r3, [pc, #396]	@ (800418c <Save_Data+0x400>)
 8003ffe:	88da      	ldrh	r2, [r3, #6]
 8004000:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 8004004:	3305      	adds	r3, #5
 8004006:	4962      	ldr	r1, [pc, #392]	@ (8004190 <Save_Data+0x404>)
 8004008:	5ccb      	ldrb	r3, [r1, r3]
 800400a:	b219      	sxth	r1, r3
 800400c:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 8004010:	3306      	adds	r3, #6
 8004012:	485f      	ldr	r0, [pc, #380]	@ (8004190 <Save_Data+0x404>)
 8004014:	5cc3      	ldrb	r3, [r0, r3]
 8004016:	b21b      	sxth	r3, r3
 8004018:	021b      	lsls	r3, r3, #8
 800401a:	b21b      	sxth	r3, r3
 800401c:	430b      	orrs	r3, r1
 800401e:	b21b      	sxth	r3, r3
 8004020:	b29b      	uxth	r3, r3
 8004022:	4413      	add	r3, r2
 8004024:	b29a      	uxth	r2, r3
 8004026:	4b59      	ldr	r3, [pc, #356]	@ (800418c <Save_Data+0x400>)
 8004028:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 800402a:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 800402e:	3307      	adds	r3, #7
 8004030:	f8c7 34c0 	str.w	r3, [r7, #1216]	@ 0x4c0
 8004034:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 8004038:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 800403c:	dbb0      	blt.n	8003fa0 <Save_Data+0x214>
		}
		Last_Acceleration.x = (uint16_t)(Last_Acceleration.x / (ACCELERATION_LEN / 7));
 800403e:	4b53      	ldr	r3, [pc, #332]	@ (800418c <Save_Data+0x400>)
 8004040:	885b      	ldrh	r3, [r3, #2]
 8004042:	4a54      	ldr	r2, [pc, #336]	@ (8004194 <Save_Data+0x408>)
 8004044:	fba2 2303 	umull	r2, r3, r2, r3
 8004048:	099b      	lsrs	r3, r3, #6
 800404a:	b29a      	uxth	r2, r3
 800404c:	4b4f      	ldr	r3, [pc, #316]	@ (800418c <Save_Data+0x400>)
 800404e:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = (uint16_t)(Last_Acceleration.y / (ACCELERATION_LEN / 7));
 8004050:	4b4e      	ldr	r3, [pc, #312]	@ (800418c <Save_Data+0x400>)
 8004052:	889b      	ldrh	r3, [r3, #4]
 8004054:	4a4f      	ldr	r2, [pc, #316]	@ (8004194 <Save_Data+0x408>)
 8004056:	fba2 2303 	umull	r2, r3, r2, r3
 800405a:	099b      	lsrs	r3, r3, #6
 800405c:	b29a      	uxth	r2, r3
 800405e:	4b4b      	ldr	r3, [pc, #300]	@ (800418c <Save_Data+0x400>)
 8004060:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = (uint16_t)(Last_Acceleration.z / (ACCELERATION_LEN / 7));
 8004062:	4b4a      	ldr	r3, [pc, #296]	@ (800418c <Save_Data+0x400>)
 8004064:	88db      	ldrh	r3, [r3, #6]
 8004066:	4a4b      	ldr	r2, [pc, #300]	@ (8004194 <Save_Data+0x408>)
 8004068:	fba2 2303 	umull	r2, r3, r2, r3
 800406c:	099b      	lsrs	r3, r3, #6
 800406e:	b29a      	uxth	r2, r3
 8004070:	4b46      	ldr	r3, [pc, #280]	@ (800418c <Save_Data+0x400>)
 8004072:	80da      	strh	r2, [r3, #6]
		flags.ACC_Complete = 0;
 8004074:	4a48      	ldr	r2, [pc, #288]	@ (8004198 <Save_Data+0x40c>)
 8004076:	7853      	ldrb	r3, [r2, #1]
 8004078:	f023 0302 	bic.w	r3, r3, #2
 800407c:	7053      	strb	r3, [r2, #1]
	}
	Address_Offset += ACCELERATION_LEN;
 800407e:	4b47      	ldr	r3, [pc, #284]	@ (800419c <Save_Data+0x410>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 8004086:	4a45      	ldr	r2, [pc, #276]	@ (800419c <Save_Data+0x410>)
 8004088:	6013      	str	r3, [r2, #0]

	INA3221_Read_Measure(&Supply);
 800408a:	4845      	ldr	r0, [pc, #276]	@ (80041a0 <Save_Data+0x414>)
 800408c:	f7fc fbd8 	bl	8000840 <INA3221_Read_Measure>
	uint16_t new_temp = 0;
 8004090:	2300      	movs	r3, #0
 8004092:	f8a7 34bc 	strh.w	r3, [r7, #1212]	@ 0x4bc
	if((new_temp = Read_Temperature()) != 0)
 8004096:	f7fc fb79 	bl	800078c <Read_Temperature>
 800409a:	4603      	mov	r3, r0
 800409c:	f8a7 34bc 	strh.w	r3, [r7, #1212]	@ 0x4bc
 80040a0:	f8b7 34bc 	ldrh.w	r3, [r7, #1212]	@ 0x4bc
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <Save_Data+0x324>
	{
		Temperature = new_temp;
 80040a8:	4a3e      	ldr	r2, [pc, #248]	@ (80041a4 <Save_Data+0x418>)
 80040aa:	f8b7 34bc 	ldrh.w	r3, [r7, #1212]	@ 0x4bc
 80040ae:	8013      	strh	r3, [r2, #0]
	}

	uint8_t compressed_data[MAX_COMPRESSED_SIZE];
    uint32_t compressed_size = Compress_Sample(Saving_Buffer, SAVING_BUFFER_LEN, compressed_data);
 80040b0:	f107 0308 	add.w	r3, r7, #8
 80040b4:	461a      	mov	r2, r3
 80040b6:	f44f 61e6 	mov.w	r1, #1840	@ 0x730
 80040ba:	483b      	ldr	r0, [pc, #236]	@ (80041a8 <Save_Data+0x41c>)
 80040bc:	f000 fa46 	bl	800454c <Compress_Sample>
 80040c0:	4603      	mov	r3, r0
 80040c2:	f8c7 34b8 	str.w	r3, [r7, #1208]	@ 0x4b8

	Compressed_Sample_Typedef sample;
    sample.timestamp = HAL_GetTick();
 80040c6:	f004 febd 	bl	8008e44 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 80040d0:	f5a3 639a 	sub.w	r3, r3, #1232	@ 0x4d0
 80040d4:	601a      	str	r2, [r3, #0]
    sample.compressed_size = compressed_size;
 80040d6:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 80040da:	b29a      	uxth	r2, r3
 80040dc:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 80040e0:	f5a3 639a 	sub.w	r3, r3, #1232	@ 0x4d0
 80040e4:	809a      	strh	r2, [r3, #4]

	RAM_Save_Measure(&sample, compressed_data);
 80040e6:	f107 0208 	add.w	r2, r7, #8
 80040ea:	463b      	mov	r3, r7
 80040ec:	4611      	mov	r1, r2
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 f930 	bl	8004354 <RAM_Save_Measure>

	Address_Offset = 0;
 80040f4:	4b29      	ldr	r3, [pc, #164]	@ (800419c <Save_Data+0x410>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	601a      	str	r2, [r3, #0]

	if(flags.Hammer_Detected || flags.Threshold_Detected)
 80040fa:	4b27      	ldr	r3, [pc, #156]	@ (8004198 <Save_Data+0x40c>)
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	d106      	bne.n	8004116 <Save_Data+0x38a>
 8004108:	4b23      	ldr	r3, [pc, #140]	@ (8004198 <Save_Data+0x40c>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d034      	beq.n	8004180 <Save_Data+0x3f4>
	{
		Cycles_After_Warning++;
 8004116:	4b25      	ldr	r3, [pc, #148]	@ (80041ac <Save_Data+0x420>)
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	3301      	adds	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	4b23      	ldr	r3, [pc, #140]	@ (80041ac <Save_Data+0x420>)
 8004120:	801a      	strh	r2, [r3, #0]
		if(Cycles_After_Warning >= config.buffering_secs * (config.samp_freq / ACC_FIFO_WATERMARK))
 8004122:	4b22      	ldr	r3, [pc, #136]	@ (80041ac <Save_Data+0x420>)
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	4619      	mov	r1, r3
 8004128:	4b21      	ldr	r3, [pc, #132]	@ (80041b0 <Save_Data+0x424>)
 800412a:	791b      	ldrb	r3, [r3, #4]
 800412c:	4618      	mov	r0, r3
 800412e:	4b20      	ldr	r3, [pc, #128]	@ (80041b0 <Save_Data+0x424>)
 8004130:	885b      	ldrh	r3, [r3, #2]
 8004132:	4a18      	ldr	r2, [pc, #96]	@ (8004194 <Save_Data+0x408>)
 8004134:	fba2 2303 	umull	r2, r3, r2, r3
 8004138:	099b      	lsrs	r3, r3, #6
 800413a:	b29b      	uxth	r3, r3
 800413c:	fb00 f303 	mul.w	r3, r0, r3
 8004140:	4299      	cmp	r1, r3
 8004142:	db1d      	blt.n	8004180 <Save_Data+0x3f4>
		{
			state = SEND_RECORDING_STATE;
 8004144:	4b1b      	ldr	r3, [pc, #108]	@ (80041b4 <Save_Data+0x428>)
 8004146:	2203      	movs	r2, #3
 8004148:	701a      	strb	r2, [r3, #0]
			Cycles_After_Warning = 0;
 800414a:	4b18      	ldr	r3, [pc, #96]	@ (80041ac <Save_Data+0x420>)
 800414c:	2200      	movs	r2, #0
 800414e:	801a      	strh	r2, [r3, #0]
			if(flags.Hammer_Detected)
 8004150:	4b11      	ldr	r3, [pc, #68]	@ (8004198 <Save_Data+0x40c>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	f003 0320 	and.w	r3, r3, #32
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d004      	beq.n	8004168 <Save_Data+0x3dc>
			{
				flags.Hammer_Detected = 0;
 800415e:	4a0e      	ldr	r2, [pc, #56]	@ (8004198 <Save_Data+0x40c>)
 8004160:	7813      	ldrb	r3, [r2, #0]
 8004162:	f023 0320 	bic.w	r3, r3, #32
 8004166:	7013      	strb	r3, [r2, #0]
			}
			if(flags.Threshold_Detected)
 8004168:	4b0b      	ldr	r3, [pc, #44]	@ (8004198 <Save_Data+0x40c>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d004      	beq.n	8004180 <Save_Data+0x3f4>
			{
				flags.Threshold_Detected = 0;
 8004176:	4a08      	ldr	r2, [pc, #32]	@ (8004198 <Save_Data+0x40c>)
 8004178:	7813      	ldrb	r3, [r2, #0]
 800417a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800417e:	7013      	strb	r3, [r2, #0]
			}
		}
	}

}
 8004180:	bf00      	nop
 8004182:	f507 679a 	add.w	r7, r7, #1232	@ 0x4d0
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	200043e8 	.word	0x200043e8
 8004190:	20003e6c 	.word	0x20003e6c
 8004194:	51eb851f 	.word	0x51eb851f
 8004198:	20001980 	.word	0x20001980
 800419c:	20004b88 	.word	0x20004b88
 80041a0:	20003b14 	.word	0x20003b14
 80041a4:	200043f0 	.word	0x200043f0
 80041a8:	20004458 	.word	0x20004458
 80041ac:	20004b8c 	.word	0x20004b8c
 80041b0:	20001984 	.word	0x20001984
 80041b4:	200005b4 	.word	0x200005b4

080041b8 <Start_Measure>:

/*-----AVVIO MISURA-----*/
void Start_Measure(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
	sys.RAM_Samples_Number = (config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * 2;
 80041bc:	4b25      	ldr	r3, [pc, #148]	@ (8004254 <Start_Measure+0x9c>)
 80041be:	885b      	ldrh	r3, [r3, #2]
 80041c0:	4a25      	ldr	r2, [pc, #148]	@ (8004258 <Start_Measure+0xa0>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	099b      	lsrs	r3, r3, #6
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	4b21      	ldr	r3, [pc, #132]	@ (8004254 <Start_Measure+0x9c>)
 80041ce:	791b      	ldrb	r3, [r3, #4]
 80041d0:	fb02 f303 	mul.w	r3, r2, r3
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	461a      	mov	r2, r3
 80041d8:	4b20      	ldr	r3, [pc, #128]	@ (800425c <Start_Measure+0xa4>)
 80041da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041de:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	sys.RAM_Buffer_Len = 0;
 80041e2:	4b1e      	ldr	r3, [pc, #120]	@ (800425c <Start_Measure+0xa4>)
 80041e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041e8:	461a      	mov	r2, r3
 80041ea:	2300      	movs	r3, #0
 80041ec:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
	memset(Pressure, 0, sizeof(Pressure));
 80041f0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80041f4:	2100      	movs	r1, #0
 80041f6:	481a      	ldr	r0, [pc, #104]	@ (8004260 <Start_Measure+0xa8>)
 80041f8:	f00e fc24 	bl	8012a44 <memset>
	memset(Volume_Period, 0, sizeof(Volume_Period));
 80041fc:	2228      	movs	r2, #40	@ 0x28
 80041fe:	2100      	movs	r1, #0
 8004200:	4818      	ldr	r0, [pc, #96]	@ (8004264 <Start_Measure+0xac>)
 8004202:	f00e fc1f 	bl	8012a44 <memset>
	memset(Acceleration, 0, sizeof(Acceleration));
 8004206:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 800420a:	2100      	movs	r1, #0
 800420c:	4816      	ldr	r0, [pc, #88]	@ (8004268 <Start_Measure+0xb0>)
 800420e:	f00e fc19 	bl	8012a44 <memset>
	memset(&Supply, 0, sizeof(Supply));
 8004212:	220c      	movs	r2, #12
 8004214:	2100      	movs	r1, #0
 8004216:	4815      	ldr	r0, [pc, #84]	@ (800426c <Start_Measure+0xb4>)
 8004218:	f00e fc14 	bl	8012a44 <memset>
	Temperature = 0;
 800421c:	4b14      	ldr	r3, [pc, #80]	@ (8004270 <Start_Measure+0xb8>)
 800421e:	2200      	movs	r2, #0
 8004220:	801a      	strh	r2, [r3, #0]
	Saved_Bytes = 0;
 8004222:	4b14      	ldr	r3, [pc, #80]	@ (8004274 <Start_Measure+0xbc>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
	Saved_Samples = 0;
 8004228:	4b13      	ldr	r3, [pc, #76]	@ (8004278 <Start_Measure+0xc0>)
 800422a:	2200      	movs	r2, #0
 800422c:	801a      	strh	r2, [r3, #0]
	Address_Offset = 0;
 800422e:	4b13      	ldr	r3, [pc, #76]	@ (800427c <Start_Measure+0xc4>)
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
	Cycles_After_Warning = 0;
 8004234:	4b12      	ldr	r3, [pc, #72]	@ (8004280 <Start_Measure+0xc8>)
 8004236:	2200      	movs	r2, #0
 8004238:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Start_DMA(PRESSURE_ADC, (uint32_t*)&Pressure, PRESS_FULL_SAMPLES);
 800423a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800423e:	4908      	ldr	r1, [pc, #32]	@ (8004260 <Start_Measure+0xa8>)
 8004240:	4810      	ldr	r0, [pc, #64]	@ (8004284 <Start_Measure+0xcc>)
 8004242:	f005 f9a3 	bl	800958c <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start_IT(ADC_TIMER, TIM_CHANNEL_3);
 8004246:	2108      	movs	r1, #8
 8004248:	480f      	ldr	r0, [pc, #60]	@ (8004288 <Start_Measure+0xd0>)
 800424a:	f00b f983 	bl	800f554 <HAL_TIM_OC_Start_IT>
}
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20001984 	.word	0x20001984
 8004258:	51eb851f 	.word	0x51eb851f
 800425c:	200005b8 	.word	0x200005b8
 8004260:	20003b24 	.word	0x20003b24
 8004264:	20003e44 	.word	0x20003e44
 8004268:	20003e6c 	.word	0x20003e6c
 800426c:	20003b14 	.word	0x20003b14
 8004270:	200043f0 	.word	0x200043f0
 8004274:	20004b90 	.word	0x20004b90
 8004278:	20004b94 	.word	0x20004b94
 800427c:	20004b88 	.word	0x20004b88
 8004280:	20004b8c 	.word	0x20004b8c
 8004284:	20000090 	.word	0x20000090
 8004288:	200003c8 	.word	0x200003c8

0800428c <Warning_Detection>:

/*-----DETECTION COLPO D'ARIETE-----*/
void Warning_Detection(uint16_t* Data)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
	uint16_t max = Data[0];
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	881b      	ldrh	r3, [r3, #0]
 8004298:	81fb      	strh	r3, [r7, #14]
	uint16_t min = Data[0];
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	81bb      	strh	r3, [r7, #12]

	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 80042a0:	2301      	movs	r3, #1
 80042a2:	60bb      	str	r3, [r7, #8]
 80042a4:	e03a      	b.n	800431c <Warning_Detection+0x90>
	{
		if(Data[i] > max)
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	4413      	add	r3, r2
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	89fa      	ldrh	r2, [r7, #14]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d206      	bcs.n	80042c4 <Warning_Detection+0x38>
		{
			max = Data[i];
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	4413      	add	r3, r2
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	81fb      	strh	r3, [r7, #14]
 80042c2:	e00d      	b.n	80042e0 <Warning_Detection+0x54>
		}
		else if(Data[i] < min)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	4413      	add	r3, r2
 80042cc:	881b      	ldrh	r3, [r3, #0]
 80042ce:	89ba      	ldrh	r2, [r7, #12]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d905      	bls.n	80042e0 <Warning_Detection+0x54>
		{
			min = Data[i];
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	4413      	add	r3, r2
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	81bb      	strh	r3, [r7, #12]
		}

		if(Data[i] < sys.Low_th || Data[i] > sys.High_th)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	4413      	add	r3, r2
 80042e8:	881a      	ldrh	r2, [r3, #0]
 80042ea:	4b17      	ldr	r3, [pc, #92]	@ (8004348 <Warning_Detection+0xbc>)
 80042ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d30a      	bcc.n	800430c <Warning_Detection+0x80>
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	4413      	add	r3, r2
 80042fe:	881a      	ldrh	r2, [r3, #0]
 8004300:	4b11      	ldr	r3, [pc, #68]	@ (8004348 <Warning_Detection+0xbc>)
 8004302:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004306:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004308:	429a      	cmp	r2, r3
 800430a:	d904      	bls.n	8004316 <Warning_Detection+0x8a>
		{
			flags.Threshold_Detected= 1;
 800430c:	4a0f      	ldr	r2, [pc, #60]	@ (800434c <Warning_Detection+0xc0>)
 800430e:	7813      	ldrb	r3, [r2, #0]
 8004310:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004314:	7013      	strb	r3, [r2, #0]
	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	3301      	adds	r3, #1
 800431a:	60bb      	str	r3, [r7, #8]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004320:	ddc1      	ble.n	80042a6 <Warning_Detection+0x1a>
		}
	}

	if(max - min >= Hammer_Th)
 8004322:	89fa      	ldrh	r2, [r7, #14]
 8004324:	89bb      	ldrh	r3, [r7, #12]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	4a09      	ldr	r2, [pc, #36]	@ (8004350 <Warning_Detection+0xc4>)
 800432a:	8812      	ldrh	r2, [r2, #0]
 800432c:	4293      	cmp	r3, r2
 800432e:	db04      	blt.n	800433a <Warning_Detection+0xae>
	{
		flags.Hammer_Detected = 1;
 8004330:	4a06      	ldr	r2, [pc, #24]	@ (800434c <Warning_Detection+0xc0>)
 8004332:	7813      	ldrb	r3, [r2, #0]
 8004334:	f043 0320 	orr.w	r3, r3, #32
 8004338:	7013      	strb	r3, [r2, #0]
	}

}
 800433a:	bf00      	nop
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	200005b8 	.word	0x200005b8
 800434c:	20001980 	.word	0x20001980
 8004350:	20004b96 	.word	0x20004b96

08004354 <RAM_Save_Measure>:

/*-----SALVATAGGIO MISURA IN RAM-----*/
void RAM_Save_Measure(Compressed_Sample_Typedef* sample, uint8_t* compressed_data)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
    uint32_t total_size = METADATA_SIZE + sample->compressed_size;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	889b      	ldrh	r3, [r3, #4]
 8004362:	b29b      	uxth	r3, r3
 8004364:	3306      	adds	r3, #6
 8004366:	60bb      	str	r3, [r7, #8]
    uint32_t address = Saved_Bytes;
 8004368:	4b1d      	ldr	r3, [pc, #116]	@ (80043e0 <RAM_Save_Measure+0x8c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	60fb      	str	r3, [r7, #12]

	if(Saved_Samples >= sys.RAM_Samples_Number) 
 800436e:	4b1d      	ldr	r3, [pc, #116]	@ (80043e4 <RAM_Save_Measure+0x90>)
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	4b1c      	ldr	r3, [pc, #112]	@ (80043e8 <RAM_Save_Measure+0x94>)
 8004376:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800437a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800437e:	429a      	cmp	r2, r3
 8004380:	d30e      	bcc.n	80043a0 <RAM_Save_Measure+0x4c>
	{
		sys.RAM_Buffer_Len = Saved_Bytes;
 8004382:	4b17      	ldr	r3, [pc, #92]	@ (80043e0 <RAM_Save_Measure+0x8c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a18      	ldr	r2, [pc, #96]	@ (80043e8 <RAM_Save_Measure+0x94>)
 8004388:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800438c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
		Saved_Bytes = 0;
 8004390:	4b13      	ldr	r3, [pc, #76]	@ (80043e0 <RAM_Save_Measure+0x8c>)
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
		Saved_Samples = 0;
 8004396:	4b13      	ldr	r3, [pc, #76]	@ (80043e4 <RAM_Save_Measure+0x90>)
 8004398:	2200      	movs	r2, #0
 800439a:	801a      	strh	r2, [r3, #0]
		address = 0;
 800439c:	2300      	movs	r3, #0
 800439e:	60fb      	str	r3, [r7, #12]
    }

	RAM_Write(address, METADATA_SIZE, (uint8_t*)sample);
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	2106      	movs	r1, #6
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 feaf 	bl	8005108 <RAM_Write>
    address += METADATA_SIZE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3306      	adds	r3, #6
 80043ae:	60fb      	str	r3, [r7, #12]

	RAM_Write(address, sample->compressed_size, compressed_data);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	889b      	ldrh	r3, [r3, #4]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	4619      	mov	r1, r3
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 fea4 	bl	8005108 <RAM_Write>
    
    Saved_Bytes += total_size;
 80043c0:	4b07      	ldr	r3, [pc, #28]	@ (80043e0 <RAM_Save_Measure+0x8c>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4413      	add	r3, r2
 80043c8:	4a05      	ldr	r2, [pc, #20]	@ (80043e0 <RAM_Save_Measure+0x8c>)
 80043ca:	6013      	str	r3, [r2, #0]
	Saved_Samples++;
 80043cc:	4b05      	ldr	r3, [pc, #20]	@ (80043e4 <RAM_Save_Measure+0x90>)
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	3301      	adds	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	4b03      	ldr	r3, [pc, #12]	@ (80043e4 <RAM_Save_Measure+0x90>)
 80043d6:	801a      	strh	r2, [r3, #0]
}
 80043d8:	bf00      	nop
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	20004b90 	.word	0x20004b90
 80043e4:	20004b94 	.word	0x20004b94
 80043e8:	200005b8 	.word	0x200005b8

080043ec <Send_Measure>:

/*-----INVIO MISURA COMPLETA-----*/
void Send_Measure(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	f5ad 6dbc 	sub.w	sp, sp, #1504	@ 0x5e0
 80043f2:	af00      	add	r7, sp, #0
    uint8_t tcp_chunk[1460];
    uint32_t chunk_fill = 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	f8c7 35dc 	str.w	r3, [r7, #1500]	@ 0x5dc
    uint32_t address = Saved_Bytes;
 80043fa:	4b52      	ldr	r3, [pc, #328]	@ (8004544 <Send_Measure+0x158>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f8c7 35d8 	str.w	r3, [r7, #1496]	@ 0x5d8
    uint32_t total_processed = 0;
 8004402:	2300      	movs	r3, #0
 8004404:	f8c7 35d4 	str.w	r3, [r7, #1492]	@ 0x5d4

    while (total_processed < sys.RAM_Buffer_Len) 
 8004408:	e07f      	b.n	800450a <Send_Measure+0x11e>
	{
        Compressed_Sample_Typedef sample_header;
        RAM_Read(address, METADATA_SIZE, (uint8_t*)&sample_header);
 800440a:	1d3b      	adds	r3, r7, #4
 800440c:	461a      	mov	r2, r3
 800440e:	2106      	movs	r1, #6
 8004410:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	@ 0x5d8
 8004414:	f000 fe89 	bl	800512a <RAM_Read>
        address += METADATA_SIZE;
 8004418:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	@ 0x5d8
 800441c:	3306      	adds	r3, #6
 800441e:	f8c7 35d8 	str.w	r3, [r7, #1496]	@ 0x5d8

        uint32_t sample_total_size = METADATA_SIZE + sample_header.compressed_size;
 8004422:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8004426:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800442a:	889b      	ldrh	r3, [r3, #4]
 800442c:	3306      	adds	r3, #6
 800442e:	f8c7 35c8 	str.w	r3, [r7, #1480]	@ 0x5c8
        uint32_t sample_bytes_left = sample_total_size;
 8004432:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	@ 0x5c8
 8004436:	f8c7 35d0 	str.w	r3, [r7, #1488]	@ 0x5d0
        uint32_t sample_addr = address;
 800443a:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	@ 0x5d8
 800443e:	f8c7 35cc 	str.w	r3, [r7, #1484]	@ 0x5cc

        while (sample_bytes_left > 0) 
 8004442:	e040      	b.n	80044c6 <Send_Measure+0xda>
		{
            uint32_t chunk_space = sizeof(tcp_chunk) - chunk_fill;
 8004444:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	@ 0x5dc
 8004448:	f5c3 63b6 	rsb	r3, r3, #1456	@ 0x5b0
 800444c:	3304      	adds	r3, #4
 800444e:	f8c7 35c4 	str.w	r3, [r7, #1476]	@ 0x5c4
            uint32_t bytes_to_copy = (sample_bytes_left < chunk_space) ? sample_bytes_left : chunk_space;
 8004452:	f8d7 25c4 	ldr.w	r2, [r7, #1476]	@ 0x5c4
 8004456:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	@ 0x5d0
 800445a:	4293      	cmp	r3, r2
 800445c:	bf28      	it	cs
 800445e:	4613      	movcs	r3, r2
 8004460:	f8c7 35c0 	str.w	r3, [r7, #1472]	@ 0x5c0

            RAM_Read(sample_addr, bytes_to_copy, tcp_chunk + chunk_fill);
 8004464:	f107 020c 	add.w	r2, r7, #12
 8004468:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	@ 0x5dc
 800446c:	4413      	add	r3, r2
 800446e:	461a      	mov	r2, r3
 8004470:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	@ 0x5c0
 8004474:	f8d7 05cc 	ldr.w	r0, [r7, #1484]	@ 0x5cc
 8004478:	f000 fe57 	bl	800512a <RAM_Read>

            chunk_fill += bytes_to_copy;
 800447c:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	@ 0x5dc
 8004480:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004484:	4413      	add	r3, r2
 8004486:	f8c7 35dc 	str.w	r3, [r7, #1500]	@ 0x5dc
            sample_addr += bytes_to_copy;
 800448a:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	@ 0x5cc
 800448e:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004492:	4413      	add	r3, r2
 8004494:	f8c7 35cc 	str.w	r3, [r7, #1484]	@ 0x5cc
            sample_bytes_left -= bytes_to_copy;
 8004498:	f8d7 25d0 	ldr.w	r2, [r7, #1488]	@ 0x5d0
 800449c:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f8c7 35d0 	str.w	r3, [r7, #1488]	@ 0x5d0

            if (chunk_fill == sizeof(tcp_chunk)) 
 80044a6:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	@ 0x5dc
 80044aa:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d109      	bne.n	80044c6 <Send_Measure+0xda>
			{
                SIM_Send_TCP_Chunk(tcp_chunk, sizeof(tcp_chunk));
 80044b2:	f107 030c 	add.w	r3, r7, #12
 80044b6:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fc fff8 	bl	80014b0 <SIM_Send_TCP_Chunk>
                chunk_fill = 0;
 80044c0:	2300      	movs	r3, #0
 80044c2:	f8c7 35dc 	str.w	r3, [r7, #1500]	@ 0x5dc
        while (sample_bytes_left > 0) 
 80044c6:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	@ 0x5d0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1ba      	bne.n	8004444 <Send_Measure+0x58>
            }
        }

        address += sample_header.compressed_size;
 80044ce:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80044d2:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80044d6:	889b      	ldrh	r3, [r3, #4]
 80044d8:	461a      	mov	r2, r3
 80044da:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	@ 0x5d8
 80044de:	4413      	add	r3, r2
 80044e0:	f8c7 35d8 	str.w	r3, [r7, #1496]	@ 0x5d8
        total_processed += sample_total_size;
 80044e4:	f8d7 25d4 	ldr.w	r2, [r7, #1492]	@ 0x5d4
 80044e8:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	@ 0x5c8
 80044ec:	4413      	add	r3, r2
 80044ee:	f8c7 35d4 	str.w	r3, [r7, #1492]	@ 0x5d4

        if (address >= sys.RAM_Buffer_Len) 
 80044f2:	4b15      	ldr	r3, [pc, #84]	@ (8004548 <Send_Measure+0x15c>)
 80044f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80044fc:	f8d7 25d8 	ldr.w	r2, [r7, #1496]	@ 0x5d8
 8004500:	429a      	cmp	r2, r3
 8004502:	d302      	bcc.n	800450a <Send_Measure+0x11e>
		{
            address = 0;
 8004504:	2300      	movs	r3, #0
 8004506:	f8c7 35d8 	str.w	r3, [r7, #1496]	@ 0x5d8
    while (total_processed < sys.RAM_Buffer_Len) 
 800450a:	4b0f      	ldr	r3, [pc, #60]	@ (8004548 <Send_Measure+0x15c>)
 800450c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004510:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004514:	f8d7 25d4 	ldr.w	r2, [r7, #1492]	@ 0x5d4
 8004518:	429a      	cmp	r2, r3
 800451a:	f4ff af76 	bcc.w	800440a <Send_Measure+0x1e>
        }
    }

    // Invia ultimo chunk parziale
    if (chunk_fill > 0) 
 800451e:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	@ 0x5dc
 8004522:	2b00      	cmp	r3, #0
 8004524:	d008      	beq.n	8004538 <Send_Measure+0x14c>
	{
        SIM_Send_TCP_Chunk(tcp_chunk, chunk_fill);
 8004526:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	@ 0x5dc
 800452a:	b29a      	uxth	r2, r3
 800452c:	f107 030c 	add.w	r3, r7, #12
 8004530:	4611      	mov	r1, r2
 8004532:	4618      	mov	r0, r3
 8004534:	f7fc ffbc 	bl	80014b0 <SIM_Send_TCP_Chunk>
    }
}
 8004538:	bf00      	nop
 800453a:	f507 67bc 	add.w	r7, r7, #1504	@ 0x5e0
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20004b90 	.word	0x20004b90
 8004548:	200005b8 	.word	0x200005b8

0800454c <Compress_Sample>:

/*-----COMPRESSIONE DATI-----*/
uint16_t Compress_Sample(uint8_t *input, uint16_t input_len, uint8_t *output)
{
 800454c:	b480      	push	{r7}
 800454e:	b093      	sub	sp, #76	@ 0x4c
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	460b      	mov	r3, r1
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	817b      	strh	r3, [r7, #10]
    uint16_t out_idx = 0;
 800455a:	2300      	movs	r3, #0
 800455c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    // 1. Pressione: delta + RLE
    uint16_t *adc = (uint16_t*)input;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (int i = 0; i < PRESS_HALF_SAMPLES;) {
 8004564:	2300      	movs	r3, #0
 8004566:	643b      	str	r3, [r7, #64]	@ 0x40
 8004568:	e090      	b.n	800468c <Compress_Sample+0x140>
        int run = 1;
 800456a:	2301      	movs	r3, #1
 800456c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        while (i + run < PRESS_HALF_SAMPLES && adc[i] == adc[i + run]) run++;
 800456e:	e002      	b.n	8004576 <Compress_Sample+0x2a>
 8004570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004572:	3301      	adds	r3, #1
 8004574:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004576:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800457a:	4413      	add	r3, r2
 800457c:	2bc7      	cmp	r3, #199	@ 0xc7
 800457e:	dc0d      	bgt.n	800459c <Compress_Sample+0x50>
 8004580:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004586:	4413      	add	r3, r2
 8004588:	881a      	ldrh	r2, [r3, #0]
 800458a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800458c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800458e:	440b      	add	r3, r1
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004594:	440b      	add	r3, r1
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d0e9      	beq.n	8004570 <Compress_Sample+0x24>
        if (run > 2) {
 800459c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800459e:	2b02      	cmp	r3, #2
 80045a0:	dd39      	ble.n	8004616 <Compress_Sample+0xca>
            output[out_idx++] = 0x80; // RLE flag
 80045a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 80045ac:	461a      	mov	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4413      	add	r3, r2
 80045b2:	2280      	movs	r2, #128	@ 0x80
 80045b4:	701a      	strb	r2, [r3, #0]
            output[out_idx++] = run;
 80045b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 80045c0:	461a      	mov	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4413      	add	r3, r2
 80045c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	701a      	strb	r2, [r3, #0]
            output[out_idx++] = adc[i] & 0xFF;
 80045cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045d2:	4413      	add	r3, r2
 80045d4:	881a      	ldrh	r2, [r3, #0]
 80045d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80045da:	1c59      	adds	r1, r3, #1
 80045dc:	f8a7 1046 	strh.w	r1, [r7, #70]	@ 0x46
 80045e0:	4619      	mov	r1, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	440b      	add	r3, r1
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]
            output[out_idx++] = adc[i] >> 8;
 80045ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045f0:	4413      	add	r3, r2
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	0a1b      	lsrs	r3, r3, #8
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80045fc:	1c59      	adds	r1, r3, #1
 80045fe:	f8a7 1046 	strh.w	r1, [r7, #70]	@ 0x46
 8004602:	4619      	mov	r1, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	440b      	add	r3, r1
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	701a      	strb	r2, [r3, #0]
            i += run;
 800460c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800460e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004610:	4413      	add	r3, r2
 8004612:	643b      	str	r3, [r7, #64]	@ 0x40
 8004614:	e03a      	b.n	800468c <Compress_Sample+0x140>
        } else {
            int16_t delta = adc[i] - (i > 0 ? adc[i-1] : 0);
 8004616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800461c:	4413      	add	r3, r2
 800461e:	881a      	ldrh	r2, [r3, #0]
 8004620:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	dd08      	ble.n	8004638 <Compress_Sample+0xec>
 8004626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004628:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800462c:	3b01      	subs	r3, #1
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004632:	440b      	add	r3, r1
 8004634:	881b      	ldrh	r3, [r3, #0]
 8004636:	e000      	b.n	800463a <Compress_Sample+0xee>
 8004638:	2300      	movs	r3, #0
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	b29b      	uxth	r3, r3
 800463e:	82bb      	strh	r3, [r7, #20]
            output[out_idx++] = 0x00; // delta flag
 8004640:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 800464a:	461a      	mov	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4413      	add	r3, r2
 8004650:	2200      	movs	r2, #0
 8004652:	701a      	strb	r2, [r3, #0]
            output[out_idx++] = delta & 0xFF;
 8004654:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 800465e:	461a      	mov	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4413      	add	r3, r2
 8004664:	8aba      	ldrh	r2, [r7, #20]
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	701a      	strb	r2, [r3, #0]
            output[out_idx++] = delta >> 8;
 800466a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800466e:	121b      	asrs	r3, r3, #8
 8004670:	b21a      	sxth	r2, r3
 8004672:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004676:	1c59      	adds	r1, r3, #1
 8004678:	f8a7 1046 	strh.w	r1, [r7, #70]	@ 0x46
 800467c:	4619      	mov	r1, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	440b      	add	r3, r1
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]
            i++;
 8004686:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004688:	3301      	adds	r3, #1
 800468a:	643b      	str	r3, [r7, #64]	@ 0x40
    for (int i = 0; i < PRESS_HALF_SAMPLES;) {
 800468c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800468e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004690:	f77f af6b 	ble.w	800456a <Compress_Sample+0x1e>
        }
    }

    // 2. Flusso: RLE
    uint16_t *counter = (uint16_t*)(input + PRESS_HALF_LEN);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800469a:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = 0; i < MAX_VOLUME_SAMPLES;) {
 800469c:	2300      	movs	r3, #0
 800469e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046a0:	e082      	b.n	80047a8 <Compress_Sample+0x25c>
        int run = 1;
 80046a2:	2301      	movs	r3, #1
 80046a4:	637b      	str	r3, [r7, #52]	@ 0x34
        while (i + run < MAX_VOLUME_SAMPLES && counter[i] == counter[i + run]) run++;
 80046a6:	e002      	b.n	80046ae <Compress_Sample+0x162>
 80046a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046aa:	3301      	adds	r3, #1
 80046ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80046ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80046b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b2:	4413      	add	r3, r2
 80046b4:	2b13      	cmp	r3, #19
 80046b6:	dc0d      	bgt.n	80046d4 <Compress_Sample+0x188>
 80046b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046be:	4413      	add	r3, r2
 80046c0:	881a      	ldrh	r2, [r3, #0]
 80046c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80046c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046c6:	440b      	add	r3, r1
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046cc:	440b      	add	r3, r1
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d0e9      	beq.n	80046a8 <Compress_Sample+0x15c>
        if (run > 2) {
 80046d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	dd39      	ble.n	800474e <Compress_Sample+0x202>
            output[out_idx++] = 0x81; // RLE flag
 80046da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 80046e4:	461a      	mov	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4413      	add	r3, r2
 80046ea:	2281      	movs	r2, #129	@ 0x81
 80046ec:	701a      	strb	r2, [r3, #0]
            output[out_idx++] = run;
 80046ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 80046f8:	461a      	mov	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4413      	add	r3, r2
 80046fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	701a      	strb	r2, [r3, #0]
            output[out_idx++] = counter[i] & 0xFF;
 8004704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800470a:	4413      	add	r3, r2
 800470c:	881a      	ldrh	r2, [r3, #0]
 800470e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004712:	1c59      	adds	r1, r3, #1
 8004714:	f8a7 1046 	strh.w	r1, [r7, #70]	@ 0x46
 8004718:	4619      	mov	r1, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	440b      	add	r3, r1
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	701a      	strb	r2, [r3, #0]
            output[out_idx++] = counter[i] >> 8;
 8004722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004728:	4413      	add	r3, r2
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	0a1b      	lsrs	r3, r3, #8
 800472e:	b29a      	uxth	r2, r3
 8004730:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004734:	1c59      	adds	r1, r3, #1
 8004736:	f8a7 1046 	strh.w	r1, [r7, #70]	@ 0x46
 800473a:	4619      	mov	r1, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	440b      	add	r3, r1
 8004740:	b2d2      	uxtb	r2, r2
 8004742:	701a      	strb	r2, [r3, #0]
            i += run;
 8004744:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004748:	4413      	add	r3, r2
 800474a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800474c:	e02c      	b.n	80047a8 <Compress_Sample+0x25c>
        } else {
            output[out_idx++] = 0x01; // value flag
 800474e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 8004758:	461a      	mov	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4413      	add	r3, r2
 800475e:	2201      	movs	r2, #1
 8004760:	701a      	strb	r2, [r3, #0]
            output[out_idx++] = counter[i] & 0xFF;
 8004762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004768:	4413      	add	r3, r2
 800476a:	881a      	ldrh	r2, [r3, #0]
 800476c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004770:	1c59      	adds	r1, r3, #1
 8004772:	f8a7 1046 	strh.w	r1, [r7, #70]	@ 0x46
 8004776:	4619      	mov	r1, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	440b      	add	r3, r1
 800477c:	b2d2      	uxtb	r2, r2
 800477e:	701a      	strb	r2, [r3, #0]
            output[out_idx++] = counter[i] >> 8;
 8004780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004786:	4413      	add	r3, r2
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	0a1b      	lsrs	r3, r3, #8
 800478c:	b29a      	uxth	r2, r3
 800478e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004792:	1c59      	adds	r1, r3, #1
 8004794:	f8a7 1046 	strh.w	r1, [r7, #70]	@ 0x46
 8004798:	4619      	mov	r1, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	440b      	add	r3, r1
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]
            i++;
 80047a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a4:	3301      	adds	r3, #1
 80047a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (int i = 0; i < MAX_VOLUME_SAMPLES;) {
 80047a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047aa:	2b13      	cmp	r3, #19
 80047ac:	f77f af79 	ble.w	80046a2 <Compress_Sample+0x156>
        }
    }

    // 3. Accelerometro: header + delta/RLE per assi
    uint8_t *accel = input + PRESS_HALF_LEN + MAX_VOLUME_LEN;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80047b6:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < ACC_FIFO_WATERMARK; i++) {
 80047b8:	2300      	movs	r3, #0
 80047ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80047bc:	e10d      	b.n	80049da <Compress_Sample+0x48e>
        uint8_t header = accel[i*7];
 80047be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047c0:	4613      	mov	r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	1a9b      	subs	r3, r3, r2
 80047c6:	461a      	mov	r2, r3
 80047c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ca:	4413      	add	r3, r2
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        uint16_t x = accel[i*7+1] | (accel[i*7+2] << 8);
 80047d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047d4:	4613      	mov	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	3301      	adds	r3, #1
 80047dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047de:	4413      	add	r3, r2
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	b219      	sxth	r1, r3
 80047e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047e6:	4613      	mov	r3, r2
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	1a9b      	subs	r3, r3, r2
 80047ec:	3302      	adds	r3, #2
 80047ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047f0:	4413      	add	r3, r2
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	b21b      	sxth	r3, r3
 80047f6:	021b      	lsls	r3, r3, #8
 80047f8:	b21b      	sxth	r3, r3
 80047fa:	430b      	orrs	r3, r1
 80047fc:	b21b      	sxth	r3, r3
 80047fe:	843b      	strh	r3, [r7, #32]
        uint16_t y = accel[i*7+3] | (accel[i*7+4] << 8);
 8004800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004802:	4613      	mov	r3, r2
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	1a9b      	subs	r3, r3, r2
 8004808:	3303      	adds	r3, #3
 800480a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800480c:	4413      	add	r3, r2
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	b219      	sxth	r1, r3
 8004812:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004814:	4613      	mov	r3, r2
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	1a9b      	subs	r3, r3, r2
 800481a:	3304      	adds	r3, #4
 800481c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800481e:	4413      	add	r3, r2
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	b21b      	sxth	r3, r3
 8004824:	021b      	lsls	r3, r3, #8
 8004826:	b21b      	sxth	r3, r3
 8004828:	430b      	orrs	r3, r1
 800482a:	b21b      	sxth	r3, r3
 800482c:	83fb      	strh	r3, [r7, #30]
        uint16_t z = accel[i*7+5] | (accel[i*7+6] << 8);
 800482e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004830:	4613      	mov	r3, r2
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	3305      	adds	r3, #5
 8004838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800483a:	4413      	add	r3, r2
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	b219      	sxth	r1, r3
 8004840:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004842:	4613      	mov	r3, r2
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	1a9b      	subs	r3, r3, r2
 8004848:	3306      	adds	r3, #6
 800484a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800484c:	4413      	add	r3, r2
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	b21b      	sxth	r3, r3
 8004852:	021b      	lsls	r3, r3, #8
 8004854:	b21b      	sxth	r3, r3
 8004856:	430b      	orrs	r3, r1
 8004858:	b21b      	sxth	r3, r3
 800485a:	83bb      	strh	r3, [r7, #28]

        // Delta coding per X/Y/Z
        int16_t dx = x - (i > 0 ? (accel[(i-1)*7+1] | (accel[(i-1)*7+2] << 8)) : 0);
 800485c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485e:	2b00      	cmp	r3, #0
 8004860:	dd19      	ble.n	8004896 <Compress_Sample+0x34a>
 8004862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004864:	1e5a      	subs	r2, r3, #1
 8004866:	4613      	mov	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	1a9b      	subs	r3, r3, r2
 800486c:	3301      	adds	r3, #1
 800486e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004870:	4413      	add	r3, r2
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	b219      	sxth	r1, r3
 8004876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004878:	1e5a      	subs	r2, r3, #1
 800487a:	4613      	mov	r3, r2
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	1a9b      	subs	r3, r3, r2
 8004880:	3302      	adds	r3, #2
 8004882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004884:	4413      	add	r3, r2
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	b21b      	sxth	r3, r3
 800488a:	021b      	lsls	r3, r3, #8
 800488c:	b21b      	sxth	r3, r3
 800488e:	430b      	orrs	r3, r1
 8004890:	b21b      	sxth	r3, r3
 8004892:	b29b      	uxth	r3, r3
 8004894:	e000      	b.n	8004898 <Compress_Sample+0x34c>
 8004896:	2300      	movs	r3, #0
 8004898:	8c3a      	ldrh	r2, [r7, #32]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	b29b      	uxth	r3, r3
 800489e:	837b      	strh	r3, [r7, #26]
        int16_t dy = y - (i > 0 ? (accel[(i-1)*7+3] | (accel[(i-1)*7+4] << 8)) : 0);
 80048a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	dd19      	ble.n	80048da <Compress_Sample+0x38e>
 80048a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a8:	1e5a      	subs	r2, r3, #1
 80048aa:	4613      	mov	r3, r2
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	1a9b      	subs	r3, r3, r2
 80048b0:	3303      	adds	r3, #3
 80048b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048b4:	4413      	add	r3, r2
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	b219      	sxth	r1, r3
 80048ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048bc:	1e5a      	subs	r2, r3, #1
 80048be:	4613      	mov	r3, r2
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	3304      	adds	r3, #4
 80048c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048c8:	4413      	add	r3, r2
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	b21b      	sxth	r3, r3
 80048ce:	021b      	lsls	r3, r3, #8
 80048d0:	b21b      	sxth	r3, r3
 80048d2:	430b      	orrs	r3, r1
 80048d4:	b21b      	sxth	r3, r3
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	e000      	b.n	80048dc <Compress_Sample+0x390>
 80048da:	2300      	movs	r3, #0
 80048dc:	8bfa      	ldrh	r2, [r7, #30]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	833b      	strh	r3, [r7, #24]
        int16_t dz = z - (i > 0 ? (accel[(i-1)*7+5] | (accel[(i-1)*7+6] << 8)) : 0);
 80048e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	dd19      	ble.n	800491e <Compress_Sample+0x3d2>
 80048ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ec:	1e5a      	subs	r2, r3, #1
 80048ee:	4613      	mov	r3, r2
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	1a9b      	subs	r3, r3, r2
 80048f4:	3305      	adds	r3, #5
 80048f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048f8:	4413      	add	r3, r2
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	b219      	sxth	r1, r3
 80048fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004900:	1e5a      	subs	r2, r3, #1
 8004902:	4613      	mov	r3, r2
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	1a9b      	subs	r3, r3, r2
 8004908:	3306      	adds	r3, #6
 800490a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800490c:	4413      	add	r3, r2
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	b21b      	sxth	r3, r3
 8004912:	021b      	lsls	r3, r3, #8
 8004914:	b21b      	sxth	r3, r3
 8004916:	430b      	orrs	r3, r1
 8004918:	b21b      	sxth	r3, r3
 800491a:	b29b      	uxth	r3, r3
 800491c:	e000      	b.n	8004920 <Compress_Sample+0x3d4>
 800491e:	2300      	movs	r3, #0
 8004920:	8bba      	ldrh	r2, [r7, #28]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	b29b      	uxth	r3, r3
 8004926:	82fb      	strh	r3, [r7, #22]

        output[out_idx++] = header;
 8004928:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 8004932:	461a      	mov	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4413      	add	r3, r2
 8004938:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800493c:	701a      	strb	r2, [r3, #0]
        output[out_idx++] = dx & 0xFF;
 800493e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004942:	1c5a      	adds	r2, r3, #1
 8004944:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 8004948:	461a      	mov	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4413      	add	r3, r2
 800494e:	8b7a      	ldrh	r2, [r7, #26]
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	701a      	strb	r2, [r3, #0]
        output[out_idx++] = dx >> 8;
 8004954:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004958:	121b      	asrs	r3, r3, #8
 800495a:	b21a      	sxth	r2, r3
 800495c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004960:	1c59      	adds	r1, r3, #1
 8004962:	f8a7 1046 	strh.w	r1, [r7, #70]	@ 0x46
 8004966:	4619      	mov	r1, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	440b      	add	r3, r1
 800496c:	b2d2      	uxtb	r2, r2
 800496e:	701a      	strb	r2, [r3, #0]
        output[out_idx++] = dy & 0xFF;
 8004970:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 800497a:	461a      	mov	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4413      	add	r3, r2
 8004980:	8b3a      	ldrh	r2, [r7, #24]
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	701a      	strb	r2, [r3, #0]
        output[out_idx++] = dy >> 8;
 8004986:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800498a:	121b      	asrs	r3, r3, #8
 800498c:	b21a      	sxth	r2, r3
 800498e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004992:	1c59      	adds	r1, r3, #1
 8004994:	f8a7 1046 	strh.w	r1, [r7, #70]	@ 0x46
 8004998:	4619      	mov	r1, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	440b      	add	r3, r1
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	701a      	strb	r2, [r3, #0]
        output[out_idx++] = dz & 0xFF;
 80049a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 80049ac:	461a      	mov	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4413      	add	r3, r2
 80049b2:	8afa      	ldrh	r2, [r7, #22]
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	701a      	strb	r2, [r3, #0]
        output[out_idx++] = dz >> 8;
 80049b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80049bc:	121b      	asrs	r3, r3, #8
 80049be:	b21a      	sxth	r2, r3
 80049c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80049c4:	1c59      	adds	r1, r3, #1
 80049c6:	f8a7 1046 	strh.w	r1, [r7, #70]	@ 0x46
 80049ca:	4619      	mov	r1, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	440b      	add	r3, r1
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < ACC_FIFO_WATERMARK; i++) {
 80049d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d6:	3301      	adds	r3, #1
 80049d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80049da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049dc:	2bc7      	cmp	r3, #199	@ 0xc7
 80049de:	f77f aeee 	ble.w	80047be <Compress_Sample+0x272>
    }

    return out_idx;
 80049e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	374c      	adds	r7, #76	@ 0x4c
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
	...

080049f4 <Apply_Config>:

/*-----APPLICA VALORI CONFIGURAZIONE-----*/
void Apply_Config(void)
{
 80049f4:	b590      	push	{r4, r7, lr}
 80049f6:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
	FIL config_file;
	UINT bytes_read;
	
	if(strcmp(cfg_var, "DEVICE_ID") == 0) 
 80049fe:	4994      	ldr	r1, [pc, #592]	@ (8004c50 <Apply_Config+0x25c>)
 8004a00:	4894      	ldr	r0, [pc, #592]	@ (8004c54 <Apply_Config+0x260>)
 8004a02:	f7fb fbe5 	bl	80001d0 <strcmp>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d107      	bne.n	8004a1c <Apply_Config+0x28>
	{
		config.device_id = (uint8_t)atoi(new_cfg_val);
 8004a0c:	4892      	ldr	r0, [pc, #584]	@ (8004c58 <Apply_Config+0x264>)
 8004a0e:	f00d ff2f 	bl	8012870 <atoi>
 8004a12:	4603      	mov	r3, r0
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	4b91      	ldr	r3, [pc, #580]	@ (8004c5c <Apply_Config+0x268>)
 8004a18:	701a      	strb	r2, [r3, #0]
 8004a1a:	e0a0      	b.n	8004b5e <Apply_Config+0x16a>
    }
	else if(strcmp(cfg_var, "SAMP_FREQ") == 0)
 8004a1c:	4990      	ldr	r1, [pc, #576]	@ (8004c60 <Apply_Config+0x26c>)
 8004a1e:	488d      	ldr	r0, [pc, #564]	@ (8004c54 <Apply_Config+0x260>)
 8004a20:	f7fb fbd6 	bl	80001d0 <strcmp>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d107      	bne.n	8004a3a <Apply_Config+0x46>
	{
		config.samp_freq = (uint16_t)atoi(new_cfg_val);
 8004a2a:	488b      	ldr	r0, [pc, #556]	@ (8004c58 <Apply_Config+0x264>)
 8004a2c:	f00d ff20 	bl	8012870 <atoi>
 8004a30:	4603      	mov	r3, r0
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	4b89      	ldr	r3, [pc, #548]	@ (8004c5c <Apply_Config+0x268>)
 8004a36:	805a      	strh	r2, [r3, #2]
 8004a38:	e091      	b.n	8004b5e <Apply_Config+0x16a>
	}
	else if(strcmp(cfg_var, "BUFFER_SECS") == 0)
 8004a3a:	498a      	ldr	r1, [pc, #552]	@ (8004c64 <Apply_Config+0x270>)
 8004a3c:	4885      	ldr	r0, [pc, #532]	@ (8004c54 <Apply_Config+0x260>)
 8004a3e:	f7fb fbc7 	bl	80001d0 <strcmp>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d107      	bne.n	8004a58 <Apply_Config+0x64>
	{
		config.buffering_secs = (uint8_t)atoi(new_cfg_val);
 8004a48:	4883      	ldr	r0, [pc, #524]	@ (8004c58 <Apply_Config+0x264>)
 8004a4a:	f00d ff11 	bl	8012870 <atoi>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	4b82      	ldr	r3, [pc, #520]	@ (8004c5c <Apply_Config+0x268>)
 8004a54:	711a      	strb	r2, [r3, #4]
 8004a56:	e082      	b.n	8004b5e <Apply_Config+0x16a>
	}
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 8004a58:	4983      	ldr	r1, [pc, #524]	@ (8004c68 <Apply_Config+0x274>)
 8004a5a:	487e      	ldr	r0, [pc, #504]	@ (8004c54 <Apply_Config+0x260>)
 8004a5c:	f7fb fbb8 	bl	80001d0 <strcmp>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d107      	bne.n	8004a76 <Apply_Config+0x82>
	{
		config.hammer_th = (uint16_t)atoi(new_cfg_val);
 8004a66:	487c      	ldr	r0, [pc, #496]	@ (8004c58 <Apply_Config+0x264>)
 8004a68:	f00d ff02 	bl	8012870 <atoi>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	4b7a      	ldr	r3, [pc, #488]	@ (8004c5c <Apply_Config+0x268>)
 8004a72:	80da      	strh	r2, [r3, #6]
 8004a74:	e073      	b.n	8004b5e <Apply_Config+0x16a>
	}
    else if(strcmp(cfg_var, "HIGH_TH") == 0) 
 8004a76:	497d      	ldr	r1, [pc, #500]	@ (8004c6c <Apply_Config+0x278>)
 8004a78:	4876      	ldr	r0, [pc, #472]	@ (8004c54 <Apply_Config+0x260>)
 8004a7a:	f7fb fba9 	bl	80001d0 <strcmp>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d113      	bne.n	8004aac <Apply_Config+0xb8>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 8004a84:	4b7a      	ldr	r3, [pc, #488]	@ (8004c70 <Apply_Config+0x27c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	db68      	blt.n	8004b5e <Apply_Config+0x16a>
 8004a8c:	4b78      	ldr	r3, [pc, #480]	@ (8004c70 <Apply_Config+0x27c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b17      	cmp	r3, #23
 8004a92:	dc64      	bgt.n	8004b5e <Apply_Config+0x16a>
		{
            config.high_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 8004a94:	4870      	ldr	r0, [pc, #448]	@ (8004c58 <Apply_Config+0x264>)
 8004a96:	f00d feeb 	bl	8012870 <atoi>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	4b74      	ldr	r3, [pc, #464]	@ (8004c70 <Apply_Config+0x27c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	b291      	uxth	r1, r2
 8004aa2:	4a6e      	ldr	r2, [pc, #440]	@ (8004c5c <Apply_Config+0x268>)
 8004aa4:	331c      	adds	r3, #28
 8004aa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004aaa:	e058      	b.n	8004b5e <Apply_Config+0x16a>
        }
    }
    else if(strcmp(cfg_var, "LOW_TH") == 0) 
 8004aac:	4971      	ldr	r1, [pc, #452]	@ (8004c74 <Apply_Config+0x280>)
 8004aae:	4869      	ldr	r0, [pc, #420]	@ (8004c54 <Apply_Config+0x260>)
 8004ab0:	f7fb fb8e 	bl	80001d0 <strcmp>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d113      	bne.n	8004ae2 <Apply_Config+0xee>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 8004aba:	4b6d      	ldr	r3, [pc, #436]	@ (8004c70 <Apply_Config+0x27c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	db4d      	blt.n	8004b5e <Apply_Config+0x16a>
 8004ac2:	4b6b      	ldr	r3, [pc, #428]	@ (8004c70 <Apply_Config+0x27c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b17      	cmp	r3, #23
 8004ac8:	dc49      	bgt.n	8004b5e <Apply_Config+0x16a>
		{
            config.low_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 8004aca:	4863      	ldr	r0, [pc, #396]	@ (8004c58 <Apply_Config+0x264>)
 8004acc:	f00d fed0 	bl	8012870 <atoi>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	4b67      	ldr	r3, [pc, #412]	@ (8004c70 <Apply_Config+0x27c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	b291      	uxth	r1, r2
 8004ad8:	4a60      	ldr	r2, [pc, #384]	@ (8004c5c <Apply_Config+0x268>)
 8004ada:	3304      	adds	r3, #4
 8004adc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004ae0:	e03d      	b.n	8004b5e <Apply_Config+0x16a>
        }
    }
    else if(strcmp(cfg_var, "DATA_TOPIC") == 0) 
 8004ae2:	4965      	ldr	r1, [pc, #404]	@ (8004c78 <Apply_Config+0x284>)
 8004ae4:	485b      	ldr	r0, [pc, #364]	@ (8004c54 <Apply_Config+0x260>)
 8004ae6:	f7fb fb73 	bl	80001d0 <strcmp>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10d      	bne.n	8004b0c <Apply_Config+0x118>
	{
        strncpy(config.data_topic, new_cfg_val, sizeof(config.data_topic) - 1);
 8004af0:	223f      	movs	r2, #63	@ 0x3f
 8004af2:	4959      	ldr	r1, [pc, #356]	@ (8004c58 <Apply_Config+0x264>)
 8004af4:	4861      	ldr	r0, [pc, #388]	@ (8004c7c <Apply_Config+0x288>)
 8004af6:	f00d ffcc 	bl	8012a92 <strncpy>
        config.data_topic[sizeof(config.data_topic) - 1] = '\0';
 8004afa:	4b58      	ldr	r3, [pc, #352]	@ (8004c5c <Apply_Config+0x268>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
		strcpy(sys.MQTT.Data_Topic, config.data_topic);
 8004b02:	495e      	ldr	r1, [pc, #376]	@ (8004c7c <Apply_Config+0x288>)
 8004b04:	485e      	ldr	r0, [pc, #376]	@ (8004c80 <Apply_Config+0x28c>)
 8004b06:	f00e f819 	bl	8012b3c <strcpy>
 8004b0a:	e028      	b.n	8004b5e <Apply_Config+0x16a>
    }
    else if(strcmp(cfg_var, "CMD_TOPIC") == 0) 
 8004b0c:	495d      	ldr	r1, [pc, #372]	@ (8004c84 <Apply_Config+0x290>)
 8004b0e:	4851      	ldr	r0, [pc, #324]	@ (8004c54 <Apply_Config+0x260>)
 8004b10:	f7fb fb5e 	bl	80001d0 <strcmp>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10d      	bne.n	8004b36 <Apply_Config+0x142>
	{
        strncpy(config.command_topic, new_cfg_val, sizeof(config.command_topic) - 1);
 8004b1a:	223f      	movs	r2, #63	@ 0x3f
 8004b1c:	494e      	ldr	r1, [pc, #312]	@ (8004c58 <Apply_Config+0x264>)
 8004b1e:	485a      	ldr	r0, [pc, #360]	@ (8004c88 <Apply_Config+0x294>)
 8004b20:	f00d ffb7 	bl	8012a92 <strncpy>
        config.command_topic[sizeof(config.command_topic) - 1] = '\0';
 8004b24:	4b4d      	ldr	r3, [pc, #308]	@ (8004c5c <Apply_Config+0x268>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
		strcpy(sys.MQTT.Command_Topic, config.command_topic);
 8004b2c:	4956      	ldr	r1, [pc, #344]	@ (8004c88 <Apply_Config+0x294>)
 8004b2e:	4857      	ldr	r0, [pc, #348]	@ (8004c8c <Apply_Config+0x298>)
 8004b30:	f00e f804 	bl	8012b3c <strcpy>
 8004b34:	e013      	b.n	8004b5e <Apply_Config+0x16a>
    }
	else if(strcmp(cfg_var, "OTA_TOPIC") == 0)
 8004b36:	4956      	ldr	r1, [pc, #344]	@ (8004c90 <Apply_Config+0x29c>)
 8004b38:	4846      	ldr	r0, [pc, #280]	@ (8004c54 <Apply_Config+0x260>)
 8004b3a:	f7fb fb49 	bl	80001d0 <strcmp>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d17c      	bne.n	8004c3e <Apply_Config+0x24a>
	{
		strncpy(config.ota_topic, new_cfg_val, sizeof(config.ota_topic) - 1);
 8004b44:	223f      	movs	r2, #63	@ 0x3f
 8004b46:	4944      	ldr	r1, [pc, #272]	@ (8004c58 <Apply_Config+0x264>)
 8004b48:	4852      	ldr	r0, [pc, #328]	@ (8004c94 <Apply_Config+0x2a0>)
 8004b4a:	f00d ffa2 	bl	8012a92 <strncpy>
		config.ota_topic[sizeof(config.ota_topic) - 1] = '\0';
 8004b4e:	4b43      	ldr	r3, [pc, #268]	@ (8004c5c <Apply_Config+0x268>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2127 	strb.w	r2, [r3, #295]	@ 0x127
		strcpy(sys.MQTT.OTA_Topic, config.ota_topic);
 8004b56:	494f      	ldr	r1, [pc, #316]	@ (8004c94 <Apply_Config+0x2a0>)
 8004b58:	484f      	ldr	r0, [pc, #316]	@ (8004c98 <Apply_Config+0x2a4>)
 8004b5a:	f00d ffef 	bl	8012b3c <strcpy>
	else
	{
		return;
	}

	if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 8004b5e:	4b3f      	ldr	r3, [pc, #252]	@ (8004c5c <Apply_Config+0x268>)
 8004b60:	885b      	ldrh	r3, [r3, #2]
 8004b62:	4a4e      	ldr	r2, [pc, #312]	@ (8004c9c <Apply_Config+0x2a8>)
 8004b64:	fba2 2303 	umull	r2, r3, r2, r3
 8004b68:	099b      	lsrs	r3, r3, #6
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c5c <Apply_Config+0x268>)
 8004b70:	791b      	ldrb	r3, [r3, #4]
 8004b72:	fb02 f303 	mul.w	r3, r2, r3
 8004b76:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8004b7a:	fb02 f303 	mul.w	r3, r2, r3
 8004b7e:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	461c      	mov	r4, r3
 8004b86:	f000 fb03 	bl	8005190 <psram_get_size>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	429c      	cmp	r4, r3
 8004b8e:	d910      	bls.n	8004bb2 <Apply_Config+0x1be>
	{
		if(config.samp_freq > 1600)
 8004b90:	4b32      	ldr	r3, [pc, #200]	@ (8004c5c <Apply_Config+0x268>)
 8004b92:	885b      	ldrh	r3, [r3, #2]
 8004b94:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004b98:	d904      	bls.n	8004ba4 <Apply_Config+0x1b0>
		{
			config.samp_freq = 1600;
 8004b9a:	4b30      	ldr	r3, [pc, #192]	@ (8004c5c <Apply_Config+0x268>)
 8004b9c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004ba0:	805a      	strh	r2, [r3, #2]
 8004ba2:	e006      	b.n	8004bb2 <Apply_Config+0x1be>
		}
		else if(config.buffering_secs > 30)
 8004ba4:	4b2d      	ldr	r3, [pc, #180]	@ (8004c5c <Apply_Config+0x268>)
 8004ba6:	791b      	ldrb	r3, [r3, #4]
 8004ba8:	2b1e      	cmp	r3, #30
 8004baa:	d902      	bls.n	8004bb2 <Apply_Config+0x1be>
		{
			config.buffering_secs = 30;
 8004bac:	4b2b      	ldr	r3, [pc, #172]	@ (8004c5c <Apply_Config+0x268>)
 8004bae:	221e      	movs	r2, #30
 8004bb0:	711a      	strb	r2, [r3, #4]
		}
	}

	if (f_open(&config_file, APP_CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK) 
 8004bb2:	f107 0310 	add.w	r3, r7, #16
 8004bb6:	3b08      	subs	r3, #8
 8004bb8:	220a      	movs	r2, #10
 8004bba:	4939      	ldr	r1, [pc, #228]	@ (8004ca0 <Apply_Config+0x2ac>)
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f002 fe27 	bl	8007810 <f_open>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d13c      	bne.n	8004c42 <Apply_Config+0x24e>
	{
		return;
	}

	if (f_open(&config_file, APP_CONFIG_FILE, FA_READ) == FR_OK) 
 8004bc8:	f107 0310 	add.w	r3, r7, #16
 8004bcc:	3b08      	subs	r3, #8
 8004bce:	2201      	movs	r2, #1
 8004bd0:	4933      	ldr	r1, [pc, #204]	@ (8004ca0 <Apply_Config+0x2ac>)
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f002 fe1c 	bl	8007810 <f_open>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d121      	bne.n	8004c22 <Apply_Config+0x22e>
	{
		if (f_read(&config_file, &config, sizeof(config), &bytes_read) == FR_OK && bytes_read == sizeof(config))
 8004bde:	f107 0310 	add.w	r3, r7, #16
 8004be2:	3b0c      	subs	r3, #12
 8004be4:	f107 0010 	add.w	r0, r7, #16
 8004be8:	3808      	subs	r0, #8
 8004bea:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8004bee:	491b      	ldr	r1, [pc, #108]	@ (8004c5c <Apply_Config+0x268>)
 8004bf0:	f002 ffa6 	bl	8007b40 <f_read>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10d      	bne.n	8004c16 <Apply_Config+0x222>
 8004bfa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004bfe:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004c02:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 8004c06:	d106      	bne.n	8004c16 <Apply_Config+0x222>
		{
			f_close(&config_file);
 8004c08:	f107 0310 	add.w	r3, r7, #16
 8004c0c:	3b08      	subs	r3, #8
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f003 faf2 	bl	80081f8 <f_close>
			return;
 8004c14:	e016      	b.n	8004c44 <Apply_Config+0x250>
		}
		f_close(&config_file);
 8004c16:	f107 0310 	add.w	r3, r7, #16
 8004c1a:	3b08      	subs	r3, #8
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f003 faeb 	bl	80081f8 <f_close>
	}
	memset(cfg_var, 0, sizeof(cfg_var));
 8004c22:	2214      	movs	r2, #20
 8004c24:	2100      	movs	r1, #0
 8004c26:	480b      	ldr	r0, [pc, #44]	@ (8004c54 <Apply_Config+0x260>)
 8004c28:	f00d ff0c 	bl	8012a44 <memset>
	cfg_idx = 0;
 8004c2c:	4b10      	ldr	r3, [pc, #64]	@ (8004c70 <Apply_Config+0x27c>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 8004c32:	220a      	movs	r2, #10
 8004c34:	2100      	movs	r1, #0
 8004c36:	4808      	ldr	r0, [pc, #32]	@ (8004c58 <Apply_Config+0x264>)
 8004c38:	f00d ff04 	bl	8012a44 <memset>
 8004c3c:	e002      	b.n	8004c44 <Apply_Config+0x250>
		return;
 8004c3e:	bf00      	nop
 8004c40:	e000      	b.n	8004c44 <Apply_Config+0x250>
		return;
 8004c42:	bf00      	nop
}
 8004c44:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd90      	pop	{r4, r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	08013ed4 	.word	0x08013ed4
 8004c54:	20005008 	.word	0x20005008
 8004c58:	20005020 	.word	0x20005020
 8004c5c:	20001984 	.word	0x20001984
 8004c60:	08013ee0 	.word	0x08013ee0
 8004c64:	08013eec 	.word	0x08013eec
 8004c68:	08013ef8 	.word	0x08013ef8
 8004c6c:	08013f04 	.word	0x08013f04
 8004c70:	2000501c 	.word	0x2000501c
 8004c74:	08013f0c 	.word	0x08013f0c
 8004c78:	08013f14 	.word	0x08013f14
 8004c7c:	200019ec 	.word	0x200019ec
 8004c80:	20001854 	.word	0x20001854
 8004c84:	08013f20 	.word	0x08013f20
 8004c88:	20001a2c 	.word	0x20001a2c
 8004c8c:	200018b8 	.word	0x200018b8
 8004c90:	08013f2c 	.word	0x08013f2c
 8004c94:	20001a6c 	.word	0x20001a6c
 8004c98:	2000191c 	.word	0x2000191c
 8004c9c:	51eb851f 	.word	0x51eb851f
 8004ca0:	08013f38 	.word	0x08013f38

08004ca4 <psram_reset>:
uint32_t	psramSize = 0;
uint32_t	psramNumPages = 0;


int psram_reset()
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08e      	sub	sp, #56	@ 0x38
 8004ca8:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = {0};
 8004caa:	463b      	mov	r3, r7
 8004cac:	2238      	movs	r2, #56	@ 0x38
 8004cae:	2100      	movs	r1, #0
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f00d fec7 	bl	8012a44 <memset>

	sCommand.Instruction = 0x66;
 8004cb6:	2366      	movs	r3, #102	@ 0x66
 8004cb8:	603b      	str	r3, [r7, #0]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8004cba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004cbe:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_NONE;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60fb      	str	r3, [r7, #12]
	sCommand.NbData = 0;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004cc8:	463b      	mov	r3, r7
 8004cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cce:	4619      	mov	r1, r3
 8004cd0:	480e      	ldr	r0, [pc, #56]	@ (8004d0c <psram_reset+0x68>)
 8004cd2:	f007 f959 	bl	800bf88 <HAL_QSPI_Command>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <psram_reset+0x3e>
	{
		return -1;
 8004cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce0:	e00f      	b.n	8004d02 <psram_reset+0x5e>
	}

	sCommand.Instruction = 0x99;
 8004ce2:	2399      	movs	r3, #153	@ 0x99
 8004ce4:	603b      	str	r3, [r7, #0]

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ce6:	463b      	mov	r3, r7
 8004ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cec:	4619      	mov	r1, r3
 8004cee:	4807      	ldr	r0, [pc, #28]	@ (8004d0c <psram_reset+0x68>)
 8004cf0:	f007 f94a 	bl	800bf88 <HAL_QSPI_Command>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <psram_reset+0x5c>
	{
		return -1;
 8004cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8004cfe:	e000      	b.n	8004d02 <psram_reset+0x5e>
	}

	return 0;
 8004d00:	2300      	movs	r3, #0

}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3738      	adds	r7, #56	@ 0x38
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	200001b4 	.word	0x200001b4

08004d10 <psram_qpi_mode>:
{
	return psramQSPI;
}

int psram_qpi_mode(uint8_t enable)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b090      	sub	sp, #64	@ 0x40
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	4603      	mov	r3, r0
 8004d18:	71fb      	strb	r3, [r7, #7]

	QSPI_CommandTypeDef sCommand = {0};
 8004d1a:	f107 0308 	add.w	r3, r7, #8
 8004d1e:	2238      	movs	r2, #56	@ 0x38
 8004d20:	2100      	movs	r1, #0
 8004d22:	4618      	mov	r0, r3
 8004d24:	f00d fe8e 	bl	8012a44 <memset>

	if(!psramInitDone)return -1;
 8004d28:	4b1c      	ldr	r3, [pc, #112]	@ (8004d9c <psram_qpi_mode+0x8c>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d102      	bne.n	8004d36 <psram_qpi_mode+0x26>
 8004d30:	f04f 33ff 	mov.w	r3, #4294967295
 8004d34:	e02d      	b.n	8004d92 <psram_qpi_mode+0x82>

	if(psramQSPI==1 && enable == 0)
 8004d36:	4b1a      	ldr	r3, [pc, #104]	@ (8004da0 <psram_qpi_mode+0x90>)
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d108      	bne.n	8004d50 <psram_qpi_mode+0x40>
 8004d3e:	79fb      	ldrb	r3, [r7, #7]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d105      	bne.n	8004d50 <psram_qpi_mode+0x40>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_DISABLE;
 8004d44:	23f5      	movs	r3, #245	@ 0xf5
 8004d46:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8004d48:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004d4c:	623b      	str	r3, [r7, #32]
 8004d4e:	e00e      	b.n	8004d6e <psram_qpi_mode+0x5e>

	}else if(psramQSPI==0 && enable == 1)
 8004d50:	4b13      	ldr	r3, [pc, #76]	@ (8004da0 <psram_qpi_mode+0x90>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d108      	bne.n	8004d6a <psram_qpi_mode+0x5a>
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d105      	bne.n	8004d6a <psram_qpi_mode+0x5a>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_ENABLE;
 8004d5e:	2335      	movs	r3, #53	@ 0x35
 8004d60:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8004d62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d66:	623b      	str	r3, [r7, #32]
 8004d68:	e001      	b.n	8004d6e <psram_qpi_mode+0x5e>

	}else{

		return 0;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	e011      	b.n	8004d92 <psram_qpi_mode+0x82>

	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004d6e:	f107 0308 	add.w	r3, r7, #8
 8004d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d76:	4619      	mov	r1, r3
 8004d78:	480a      	ldr	r0, [pc, #40]	@ (8004da4 <psram_qpi_mode+0x94>)
 8004d7a:	f007 f905 	bl	800bf88 <HAL_QSPI_Command>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <psram_qpi_mode+0x7a>
	{
		return -1;
 8004d84:	f04f 33ff 	mov.w	r3, #4294967295
 8004d88:	e003      	b.n	8004d92 <psram_qpi_mode+0x82>
	}

	psramQSPI = enable;
 8004d8a:	4a05      	ldr	r2, [pc, #20]	@ (8004da0 <psram_qpi_mode+0x90>)
 8004d8c:	79fb      	ldrb	r3, [r7, #7]
 8004d8e:	7013      	strb	r3, [r2, #0]

	return 0;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3740      	adds	r7, #64	@ 0x40
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	2000502a 	.word	0x2000502a
 8004da0:	2000502b 	.word	0x2000502b
 8004da4:	200001b4 	.word	0x200001b4

08004da8 <psram_read_id>:

int psram_read_id(uint8_t *id_data, int id_data_size)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b090      	sub	sp, #64	@ 0x40
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef sCommand = {0};
 8004db2:	f107 0308 	add.w	r3, r7, #8
 8004db6:	2238      	movs	r2, #56	@ 0x38
 8004db8:	2100      	movs	r1, #0
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f00d fe42 	bl	8012a44 <memset>

	if(id_data == NULL || id_data_size < 8)return -2;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <psram_read_id+0x24>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b07      	cmp	r3, #7
 8004dca:	dc02      	bgt.n	8004dd2 <psram_read_id+0x2a>
 8004dcc:	f06f 0301 	mvn.w	r3, #1
 8004dd0:	e034      	b.n	8004e3c <psram_read_id+0x94>

	sCommand.Instruction = 0x9F;
 8004dd2:	239f      	movs	r3, #159	@ 0x9f
 8004dd4:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8004dd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004dda:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	60fb      	str	r3, [r7, #12]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8004de0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004de4:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8004de6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004dea:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode    = QSPI_DATA_1_LINE;
 8004dec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.NbData = 8;
 8004df2:	2308      	movs	r3, #8
 8004df4:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004df6:	2300      	movs	r3, #0
 8004df8:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004e02:	2300      	movs	r3, #0
 8004e04:	63fb      	str	r3, [r7, #60]	@ 0x3c

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e06:	f107 0308 	add.w	r3, r7, #8
 8004e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e0e:	4619      	mov	r1, r3
 8004e10:	480c      	ldr	r0, [pc, #48]	@ (8004e44 <psram_read_id+0x9c>)
 8004e12:	f007 f8b9 	bl	800bf88 <HAL_QSPI_Command>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <psram_read_id+0x7a>
	{
		return -1;
 8004e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e20:	e00c      	b.n	8004e3c <psram_read_id+0x94>
	}

	if (HAL_QSPI_Receive(PSRAM_SPI, id_data, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	4806      	ldr	r0, [pc, #24]	@ (8004e44 <psram_read_id+0x9c>)
 8004e2a:	f007 f9a2 	bl	800c172 <HAL_QSPI_Receive>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <psram_read_id+0x92>
	{
		return -1;
 8004e34:	f04f 33ff 	mov.w	r3, #4294967295
 8004e38:	e000      	b.n	8004e3c <psram_read_id+0x94>
	}


	return 0;
 8004e3a:	2300      	movs	r3, #0

}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3740      	adds	r7, #64	@ 0x40
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	200001b4 	.word	0x200001b4

08004e48 <psram_internal_read_write>:

int psram_internal_read_write(uint8_t write, uint32_t address, uint16_t nbytes, uint8_t *pBuffer)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b092      	sub	sp, #72	@ 0x48
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60b9      	str	r1, [r7, #8]
 8004e50:	607b      	str	r3, [r7, #4]
 8004e52:	4603      	mov	r3, r0
 8004e54:	73fb      	strb	r3, [r7, #15]
 8004e56:	4613      	mov	r3, r2
 8004e58:	81bb      	strh	r3, [r7, #12]

	QSPI_CommandTypeDef sCommand = {0};
 8004e5a:	f107 0310 	add.w	r3, r7, #16
 8004e5e:	2238      	movs	r2, #56	@ 0x38
 8004e60:	2100      	movs	r1, #0
 8004e62:	4618      	mov	r0, r3
 8004e64:	f00d fdee 	bl	8012a44 <memset>

	sCommand.Address = address;
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004e70:	2300      	movs	r3, #0
 8004e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004e74:	2300      	movs	r3, #0
 8004e76:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.NbData = nbytes;
 8004e7c:	89bb      	ldrh	r3, [r7, #12]
 8004e7e:	63bb      	str	r3, [r7, #56]	@ 0x38

	if(psramQSPI)
 8004e80:	4b33      	ldr	r3, [pc, #204]	@ (8004f50 <psram_internal_read_write+0x108>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d01a      	beq.n	8004ebe <psram_internal_read_write+0x76>
	{
		//QSPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE_QUAD : PSRAM_CMD_READ_FAST_QIO;
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <psram_internal_read_write+0x4a>
 8004e8e:	2338      	movs	r3, #56	@ 0x38
 8004e90:	e000      	b.n	8004e94 <psram_internal_read_write+0x4c>
 8004e92:	23eb      	movs	r3, #235	@ 0xeb
 8004e94:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8004e96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8004e9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004ea0:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 8004ea2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_4_LINES;
 8004ea8:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8004eac:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_QPI_READ_FAST_QIO_WAIT;
 8004eae:	7bfb      	ldrb	r3, [r7, #15]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <psram_internal_read_write+0x70>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	e000      	b.n	8004eba <psram_internal_read_write+0x72>
 8004eb8:	2306      	movs	r3, #6
 8004eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ebc:	e019      	b.n	8004ef2 <psram_internal_read_write+0xaa>
	}else{
		//SPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE : PSRAM_CMD_READ_FAST;
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <psram_internal_read_write+0x80>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	e000      	b.n	8004eca <psram_internal_read_write+0x82>
 8004ec8:	230b      	movs	r3, #11
 8004eca:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8004ecc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8004ed2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004ed6:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8004ed8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_1_LINE;
 8004ede:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ee2:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_READ_FAST_WAIT;
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <psram_internal_read_write+0xa6>
 8004eea:	2300      	movs	r3, #0
 8004eec:	e000      	b.n	8004ef0 <psram_internal_read_write+0xa8>
 8004eee:	2308      	movs	r3, #8
 8004ef0:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ef2:	f107 0310 	add.w	r3, r7, #16
 8004ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004efa:	4619      	mov	r1, r3
 8004efc:	4815      	ldr	r0, [pc, #84]	@ (8004f54 <psram_internal_read_write+0x10c>)
 8004efe:	f007 f843 	bl	800bf88 <HAL_QSPI_Command>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <psram_internal_read_write+0xc6>
	{
		return -1;
 8004f08:	f04f 33ff 	mov.w	r3, #4294967295
 8004f0c:	e01b      	b.n	8004f46 <psram_internal_read_write+0xfe>
	}

	if(write)
 8004f0e:	7bfb      	ldrb	r3, [r7, #15]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00b      	beq.n	8004f2c <psram_internal_read_write+0xe4>
	{
		if (HAL_QSPI_Transmit(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004f14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f18:	6879      	ldr	r1, [r7, #4]
 8004f1a:	480e      	ldr	r0, [pc, #56]	@ (8004f54 <psram_internal_read_write+0x10c>)
 8004f1c:	f007 f892 	bl	800c044 <HAL_QSPI_Transmit>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00e      	beq.n	8004f44 <psram_internal_read_write+0xfc>
		{
			return -1;
 8004f26:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2a:	e00c      	b.n	8004f46 <psram_internal_read_write+0xfe>
		}

	}else{

		if (HAL_QSPI_Receive(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f30:	6879      	ldr	r1, [r7, #4]
 8004f32:	4808      	ldr	r0, [pc, #32]	@ (8004f54 <psram_internal_read_write+0x10c>)
 8004f34:	f007 f91d 	bl	800c172 <HAL_QSPI_Receive>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <psram_internal_read_write+0xfc>
		{
			return -1;
 8004f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f42:	e000      	b.n	8004f46 <psram_internal_read_write+0xfe>
		}

	}

	return 0;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3748      	adds	r7, #72	@ 0x48
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	2000502b 	.word	0x2000502b
 8004f54:	200001b4 	.word	0x200001b4

08004f58 <psram_sector_read_write>:


//Funzione usata da FatFs
int psram_sector_read_write(uint8_t write, uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	607a      	str	r2, [r7, #4]
 8004f62:	603b      	str	r3, [r7, #0]
 8004f64:	4603      	mov	r3, r0
 8004f66:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * PSRAM_PAGE_SIZE;
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	029b      	lsls	r3, r3, #10
 8004f74:	61bb      	str	r3, [r7, #24]

	while(nsectors > 0)
 8004f76:	e018      	b.n	8004faa <psram_sector_read_write+0x52>
	{
		result = psram_internal_read_write(write, address, PSRAM_PAGE_SIZE, wPtr);
 8004f78:	7bf8      	ldrb	r0, [r7, #15]
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f80:	69b9      	ldr	r1, [r7, #24]
 8004f82:	f7ff ff61 	bl	8004e48 <psram_internal_read_write>
 8004f86:	6178      	str	r0, [r7, #20]
		if(result < 0)return -1;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	da02      	bge.n	8004f94 <psram_sector_read_write+0x3c>
 8004f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f92:	e00e      	b.n	8004fb2 <psram_sector_read_write+0x5a>
		address += PSRAM_PAGE_SIZE;
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f9a:	61bb      	str	r3, [r7, #24]
		wPtr += PSRAM_PAGE_SIZE;
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004fa2:	61fb      	str	r3, [r7, #28]
		nsectors--;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	607b      	str	r3, [r7, #4]
	while(nsectors > 0)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e3      	bne.n	8004f78 <psram_sector_read_write+0x20>
	}

	return 0;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3720      	adds	r7, #32
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <psram_read_write>:



int psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b088      	sub	sp, #32
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60b9      	str	r1, [r7, #8]
 8004fc4:	607a      	str	r2, [r7, #4]
 8004fc6:	603b      	str	r3, [r7, #0]
 8004fc8:	4603      	mov	r3, r0
 8004fca:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	61bb      	str	r3, [r7, #24]
	uint32_t trBytes = 0;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	61fb      	str	r3, [r7, #28]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 8004fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8005054 <psram_read_write+0x98>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d002      	beq.n	8004fe6 <psram_read_write+0x2a>
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d102      	bne.n	8004fec <psram_read_write+0x30>
 8004fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fea:	e02e      	b.n	800504a <psram_read_write+0x8e>
	if(address + nbytes >= psramSize)return -2;
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	441a      	add	r2, r3
 8004ff2:	4b19      	ldr	r3, [pc, #100]	@ (8005058 <psram_read_write+0x9c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d323      	bcc.n	8005042 <psram_read_write+0x86>
 8004ffa:	f06f 0301 	mvn.w	r3, #1
 8004ffe:	e024      	b.n	800504a <psram_read_write+0x8e>

	while(nbytes > 0)
	{
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005006:	bf28      	it	cs
 8005008:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 800500c:	617b      	str	r3, [r7, #20]
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	b29a      	uxth	r2, r3
 8005012:	7bf8      	ldrb	r0, [r7, #15]
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	68b9      	ldr	r1, [r7, #8]
 8005018:	f7ff ff16 	bl	8004e48 <psram_internal_read_write>
 800501c:	61b8      	str	r0, [r7, #24]

		if(result < 0)return -1;
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	da02      	bge.n	800502a <psram_read_write+0x6e>
 8005024:	f04f 33ff 	mov.w	r3, #4294967295
 8005028:	e00f      	b.n	800504a <psram_read_write+0x8e>

		address += trBytes;
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	4413      	add	r3, r2
 8005030:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	4413      	add	r3, r2
 8005038:	61fb      	str	r3, [r7, #28]
		nbytes -= trBytes;
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	607b      	str	r3, [r7, #4]
	while(nbytes > 0)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1db      	bne.n	8005000 <psram_read_write+0x44>
	}

	return 0;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3720      	adds	r7, #32
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	2000502a 	.word	0x2000502a
 8005058:	20005034 	.word	0x20005034

0800505c <raw_psram_read_write>:

int raw_psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af00      	add	r7, sp, #0
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	607a      	str	r2, [r7, #4]
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	4603      	mov	r3, r0
 800506a:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 800506c:	2300      	movs	r3, #0
 800506e:	617b      	str	r3, [r7, #20]
	uint32_t trBytes = 0;
 8005070:	2300      	movs	r3, #0
 8005072:	61fb      	str	r3, [r7, #28]
	uint8_t *wPtr = pBuffer;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	61bb      	str	r3, [r7, #24]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 8005078:	4b21      	ldr	r3, [pc, #132]	@ (8005100 <raw_psram_read_write+0xa4>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <raw_psram_read_write+0x2a>
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d102      	bne.n	800508c <raw_psram_read_write+0x30>
 8005086:	f04f 33ff 	mov.w	r3, #4294967295
 800508a:	e035      	b.n	80050f8 <raw_psram_read_write+0x9c>
	if(address + nbytes >= psramSize)return -2;
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	441a      	add	r2, r3
 8005092:	4b1c      	ldr	r3, [pc, #112]	@ (8005104 <raw_psram_read_write+0xa8>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	429a      	cmp	r2, r3
 8005098:	d302      	bcc.n	80050a0 <raw_psram_read_write+0x44>
 800509a:	f06f 0301 	mvn.w	r3, #1
 800509e:	e02b      	b.n	80050f8 <raw_psram_read_write+0x9c>

	trBytes = 1024 - address % 1024;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050a6:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 80050aa:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 80050ac:	e020      	b.n	80050f0 <raw_psram_read_write+0x94>
	{
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	7bf8      	ldrb	r0, [r7, #15]
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	68b9      	ldr	r1, [r7, #8]
 80050b8:	f7ff fec6 	bl	8004e48 <psram_internal_read_write>
 80050bc:	6178      	str	r0, [r7, #20]

		if(result < 0)return -1;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	da02      	bge.n	80050ca <raw_psram_read_write+0x6e>
 80050c4:	f04f 33ff 	mov.w	r3, #4294967295
 80050c8:	e016      	b.n	80050f8 <raw_psram_read_write+0x9c>

		address += trBytes;
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	4413      	add	r3, r2
 80050d0:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	4413      	add	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
		nbytes -= trBytes;
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	607b      	str	r3, [r7, #4]
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050e8:	bf28      	it	cs
 80050ea:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 80050ee:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1db      	bne.n	80050ae <raw_psram_read_write+0x52>
	}

	return 0;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3720      	adds	r7, #32
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	2000502a 	.word	0x2000502a
 8005104:	20005034 	.word	0x20005034

08005108 <RAM_Write>:
{
	return psram_read_write(1, address, nbytes, pBuffer);
}

int RAM_Write(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
	return raw_psram_read_write(1, address, nbytes, pBuffer);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	68f9      	ldr	r1, [r7, #12]
 800511a:	2001      	movs	r0, #1
 800511c:	f7ff ff9e 	bl	800505c <raw_psram_read_write>
 8005120:	4603      	mov	r3, r0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <RAM_Read>:

int RAM_Read(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b084      	sub	sp, #16
 800512e:	af00      	add	r7, sp, #0
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	607a      	str	r2, [r7, #4]
	return psram_read_write(0, address, nbytes, pBuffer);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	68f9      	ldr	r1, [r7, #12]
 800513c:	2000      	movs	r0, #0
 800513e:	f7ff ff3d 	bl	8004fbc <psram_read_write>
 8005142:	4603      	mov	r3, r0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <psram_is_initialized>:


int psram_is_initialized()
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0
	return psramInitDone;
 8005150:	4b03      	ldr	r3, [pc, #12]	@ (8005160 <psram_is_initialized+0x14>)
 8005152:	781b      	ldrb	r3, [r3, #0]
}
 8005154:	4618      	mov	r0, r3
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	2000502a 	.word	0x2000502a

08005164 <psram_get_sector_size>:

unsigned int psram_get_sector_size()
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
	return PSRAM_PAGE_SIZE;
 8005168:	f44f 6380 	mov.w	r3, #1024	@ 0x400
}
 800516c:	4618      	mov	r0, r3
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
	...

08005178 <psram_get_sector_count>:

unsigned int psram_get_sector_count()
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
	return psramNumPages;
 800517c:	4b03      	ldr	r3, [pc, #12]	@ (800518c <psram_get_sector_count+0x14>)
 800517e:	681b      	ldr	r3, [r3, #0]
}
 8005180:	4618      	mov	r0, r3
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	20005038 	.word	0x20005038

08005190 <psram_get_size>:

unsigned int psram_get_size()
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
	return psramSize;
 8005194:	4b03      	ldr	r3, [pc, #12]	@ (80051a4 <psram_get_size+0x14>)
 8005196:	681b      	ldr	r3, [r3, #0]
}
 8005198:	4618      	mov	r0, r3
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	20005034 	.word	0x20005034

080051a8 <psram_init>:

int psram_init()
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0

	uint8_t density = 0xFF;
 80051ae:	23ff      	movs	r3, #255	@ 0xff
 80051b0:	71fb      	strb	r3, [r7, #7]

	psramInitDone = 0;
 80051b2:	4b20      	ldr	r3, [pc, #128]	@ (8005234 <psram_init+0x8c>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	701a      	strb	r2, [r3, #0]

	if(psram_reset() < 0)return -1;
 80051b8:	f7ff fd74 	bl	8004ca4 <psram_reset>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	da02      	bge.n	80051c8 <psram_init+0x20>
 80051c2:	f04f 33ff 	mov.w	r3, #4294967295
 80051c6:	e030      	b.n	800522a <psram_init+0x82>

	memset(psramId, 0xFF, sizeof(psramId));
 80051c8:	2208      	movs	r2, #8
 80051ca:	21ff      	movs	r1, #255	@ 0xff
 80051cc:	481a      	ldr	r0, [pc, #104]	@ (8005238 <psram_init+0x90>)
 80051ce:	f00d fc39 	bl	8012a44 <memset>

	if(psram_read_id(psramId, sizeof(psramId)) < 0)return -1;
 80051d2:	2108      	movs	r1, #8
 80051d4:	4818      	ldr	r0, [pc, #96]	@ (8005238 <psram_init+0x90>)
 80051d6:	f7ff fde7 	bl	8004da8 <psram_read_id>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	da02      	bge.n	80051e6 <psram_init+0x3e>
 80051e0:	f04f 33ff 	mov.w	r3, #4294967295
 80051e4:	e021      	b.n	800522a <psram_init+0x82>

	density = psramId[2] >> 5;
 80051e6:	4b14      	ldr	r3, [pc, #80]	@ (8005238 <psram_init+0x90>)
 80051e8:	789b      	ldrb	r3, [r3, #2]
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	71fb      	strb	r3, [r7, #7]

	if(psramId[0] == PSRAM_MANUFACTURER && psramId[1] == PSRAM_KGD && density <= PSRAM_DENSITY_64MB)
 80051ee:	4b12      	ldr	r3, [pc, #72]	@ (8005238 <psram_init+0x90>)
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b0d      	cmp	r3, #13
 80051f4:	d117      	bne.n	8005226 <psram_init+0x7e>
 80051f6:	4b10      	ldr	r3, [pc, #64]	@ (8005238 <psram_init+0x90>)
 80051f8:	785b      	ldrb	r3, [r3, #1]
 80051fa:	2b5d      	cmp	r3, #93	@ 0x5d
 80051fc:	d113      	bne.n	8005226 <psram_init+0x7e>
 80051fe:	79fb      	ldrb	r3, [r7, #7]
 8005200:	2b03      	cmp	r3, #3
 8005202:	d810      	bhi.n	8005226 <psram_init+0x7e>
	{
		psramSize = PSRAM_DENSITY_64MB_EADDR;
 8005204:	4b0d      	ldr	r3, [pc, #52]	@ (800523c <psram_init+0x94>)
 8005206:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800520a:	601a      	str	r2, [r3, #0]
		psramNumPages = psramSize / PSRAM_PAGE_SIZE;
 800520c:	4b0b      	ldr	r3, [pc, #44]	@ (800523c <psram_init+0x94>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	0a9b      	lsrs	r3, r3, #10
 8005212:	4a0b      	ldr	r2, [pc, #44]	@ (8005240 <psram_init+0x98>)
 8005214:	6013      	str	r3, [r2, #0]

		psram_qpi_mode(1);
 8005216:	2001      	movs	r0, #1
 8005218:	f7ff fd7a 	bl	8004d10 <psram_qpi_mode>

		psramInitDone = 1;
 800521c:	4b05      	ldr	r3, [pc, #20]	@ (8005234 <psram_init+0x8c>)
 800521e:	2201      	movs	r2, #1
 8005220:	701a      	strb	r2, [r3, #0]
		return 0;
 8005222:	2300      	movs	r3, #0
 8005224:	e001      	b.n	800522a <psram_init+0x82>
	}else{
		return -1;
 8005226:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 800522a:	4618      	mov	r0, r3
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	2000502a 	.word	0x2000502a
 8005238:	2000502c 	.word	0x2000502c
 800523c:	20005034 	.word	0x20005034
 8005240:	20005038 	.word	0x20005038

08005244 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800524a:	4b0f      	ldr	r3, [pc, #60]	@ (8005288 <HAL_MspInit+0x44>)
 800524c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800524e:	4a0e      	ldr	r2, [pc, #56]	@ (8005288 <HAL_MspInit+0x44>)
 8005250:	f043 0301 	orr.w	r3, r3, #1
 8005254:	6613      	str	r3, [r2, #96]	@ 0x60
 8005256:	4b0c      	ldr	r3, [pc, #48]	@ (8005288 <HAL_MspInit+0x44>)
 8005258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	607b      	str	r3, [r7, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005262:	4b09      	ldr	r3, [pc, #36]	@ (8005288 <HAL_MspInit+0x44>)
 8005264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005266:	4a08      	ldr	r2, [pc, #32]	@ (8005288 <HAL_MspInit+0x44>)
 8005268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800526c:	6593      	str	r3, [r2, #88]	@ 0x58
 800526e:	4b06      	ldr	r3, [pc, #24]	@ (8005288 <HAL_MspInit+0x44>)
 8005270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005276:	603b      	str	r3, [r7, #0]
 8005278:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	40021000 	.word	0x40021000

0800528c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b0ac      	sub	sp, #176	@ 0xb0
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005294:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	605a      	str	r2, [r3, #4]
 800529e:	609a      	str	r2, [r3, #8]
 80052a0:	60da      	str	r2, [r3, #12]
 80052a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80052a4:	f107 0314 	add.w	r3, r7, #20
 80052a8:	2288      	movs	r2, #136	@ 0x88
 80052aa:	2100      	movs	r1, #0
 80052ac:	4618      	mov	r0, r3
 80052ae:	f00d fbc9 	bl	8012a44 <memset>
  if(hadc->Instance==ADC1)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a3d      	ldr	r2, [pc, #244]	@ (80053ac <HAL_ADC_MspInit+0x120>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d172      	bne.n	80053a2 <HAL_ADC_MspInit+0x116>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80052bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80052c0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80052c2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80052c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80052ca:	2303      	movs	r3, #3
 80052cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80052ce:	2301      	movs	r3, #1
 80052d0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80052d2:	2308      	movs	r3, #8
 80052d4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80052d6:	2307      	movs	r3, #7
 80052d8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80052da:	2302      	movs	r3, #2
 80052dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80052de:	2302      	movs	r3, #2
 80052e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80052e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80052e6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80052e8:	f107 0314 	add.w	r3, r7, #20
 80052ec:	4618      	mov	r0, r3
 80052ee:	f008 f837 	bl	800d360 <HAL_RCCEx_PeriphCLKConfig>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80052f8:	f7fe fd42 	bl	8003d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80052fc:	4b2c      	ldr	r3, [pc, #176]	@ (80053b0 <HAL_ADC_MspInit+0x124>)
 80052fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005300:	4a2b      	ldr	r2, [pc, #172]	@ (80053b0 <HAL_ADC_MspInit+0x124>)
 8005302:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005306:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005308:	4b29      	ldr	r3, [pc, #164]	@ (80053b0 <HAL_ADC_MspInit+0x124>)
 800530a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800530c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005310:	613b      	str	r3, [r7, #16]
 8005312:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005314:	4b26      	ldr	r3, [pc, #152]	@ (80053b0 <HAL_ADC_MspInit+0x124>)
 8005316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005318:	4a25      	ldr	r2, [pc, #148]	@ (80053b0 <HAL_ADC_MspInit+0x124>)
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005320:	4b23      	ldr	r3, [pc, #140]	@ (80053b0 <HAL_ADC_MspInit+0x124>)
 8005322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800532c:	2310      	movs	r3, #16
 800532e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8005332:	230b      	movs	r3, #11
 8005334:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005338:	2300      	movs	r3, #0
 800533a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800533e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005342:	4619      	mov	r1, r3
 8005344:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005348:	f005 fd9a 	bl	800ae80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800534c:	4b19      	ldr	r3, [pc, #100]	@ (80053b4 <HAL_ADC_MspInit+0x128>)
 800534e:	4a1a      	ldr	r2, [pc, #104]	@ (80053b8 <HAL_ADC_MspInit+0x12c>)
 8005350:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8005352:	4b18      	ldr	r3, [pc, #96]	@ (80053b4 <HAL_ADC_MspInit+0x128>)
 8005354:	2200      	movs	r2, #0
 8005356:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005358:	4b16      	ldr	r3, [pc, #88]	@ (80053b4 <HAL_ADC_MspInit+0x128>)
 800535a:	2200      	movs	r2, #0
 800535c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800535e:	4b15      	ldr	r3, [pc, #84]	@ (80053b4 <HAL_ADC_MspInit+0x128>)
 8005360:	2200      	movs	r2, #0
 8005362:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005364:	4b13      	ldr	r3, [pc, #76]	@ (80053b4 <HAL_ADC_MspInit+0x128>)
 8005366:	2280      	movs	r2, #128	@ 0x80
 8005368:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800536a:	4b12      	ldr	r3, [pc, #72]	@ (80053b4 <HAL_ADC_MspInit+0x128>)
 800536c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005370:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005372:	4b10      	ldr	r3, [pc, #64]	@ (80053b4 <HAL_ADC_MspInit+0x128>)
 8005374:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005378:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800537a:	4b0e      	ldr	r3, [pc, #56]	@ (80053b4 <HAL_ADC_MspInit+0x128>)
 800537c:	2220      	movs	r2, #32
 800537e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005380:	4b0c      	ldr	r3, [pc, #48]	@ (80053b4 <HAL_ADC_MspInit+0x128>)
 8005382:	2200      	movs	r2, #0
 8005384:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005386:	480b      	ldr	r0, [pc, #44]	@ (80053b4 <HAL_ADC_MspInit+0x128>)
 8005388:	f005 fb44 	bl	800aa14 <HAL_DMA_Init>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8005392:	f7fe fcf5 	bl	8003d80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a06      	ldr	r2, [pc, #24]	@ (80053b4 <HAL_ADC_MspInit+0x128>)
 800539a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800539c:	4a05      	ldr	r2, [pc, #20]	@ (80053b4 <HAL_ADC_MspInit+0x128>)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80053a2:	bf00      	nop
 80053a4:	37b0      	adds	r7, #176	@ 0xb0
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	50040000 	.word	0x50040000
 80053b0:	40021000 	.word	0x40021000
 80053b4:	200000f4 	.word	0x200000f4
 80053b8:	40020008 	.word	0x40020008

080053bc <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a0a      	ldr	r2, [pc, #40]	@ (80053f4 <HAL_CRC_MspInit+0x38>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d10b      	bne.n	80053e6 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80053ce:	4b0a      	ldr	r3, [pc, #40]	@ (80053f8 <HAL_CRC_MspInit+0x3c>)
 80053d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053d2:	4a09      	ldr	r2, [pc, #36]	@ (80053f8 <HAL_CRC_MspInit+0x3c>)
 80053d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80053d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80053da:	4b07      	ldr	r3, [pc, #28]	@ (80053f8 <HAL_CRC_MspInit+0x3c>)
 80053dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80053e6:	bf00      	nop
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	40023000 	.word	0x40023000
 80053f8:	40021000 	.word	0x40021000

080053fc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b0ac      	sub	sp, #176	@ 0xb0
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005404:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	605a      	str	r2, [r3, #4]
 800540e:	609a      	str	r2, [r3, #8]
 8005410:	60da      	str	r2, [r3, #12]
 8005412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005414:	f107 0314 	add.w	r3, r7, #20
 8005418:	2288      	movs	r2, #136	@ 0x88
 800541a:	2100      	movs	r1, #0
 800541c:	4618      	mov	r0, r3
 800541e:	f00d fb11 	bl	8012a44 <memset>
  if(hi2c->Instance==I2C3)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a21      	ldr	r2, [pc, #132]	@ (80054ac <HAL_I2C_MspInit+0xb0>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d13b      	bne.n	80054a4 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800542c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005430:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8005432:	2300      	movs	r3, #0
 8005434:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005436:	f107 0314 	add.w	r3, r7, #20
 800543a:	4618      	mov	r0, r3
 800543c:	f007 ff90 	bl	800d360 <HAL_RCCEx_PeriphCLKConfig>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005446:	f7fe fc9b 	bl	8003d80 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800544a:	4b19      	ldr	r3, [pc, #100]	@ (80054b0 <HAL_I2C_MspInit+0xb4>)
 800544c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800544e:	4a18      	ldr	r2, [pc, #96]	@ (80054b0 <HAL_I2C_MspInit+0xb4>)
 8005450:	f043 0304 	orr.w	r3, r3, #4
 8005454:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005456:	4b16      	ldr	r3, [pc, #88]	@ (80054b0 <HAL_I2C_MspInit+0xb4>)
 8005458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	613b      	str	r3, [r7, #16]
 8005460:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005462:	2303      	movs	r3, #3
 8005464:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005468:	2312      	movs	r3, #18
 800546a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800546e:	2300      	movs	r3, #0
 8005470:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005474:	2303      	movs	r3, #3
 8005476:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800547a:	2304      	movs	r3, #4
 800547c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005480:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005484:	4619      	mov	r1, r3
 8005486:	480b      	ldr	r0, [pc, #44]	@ (80054b4 <HAL_I2C_MspInit+0xb8>)
 8005488:	f005 fcfa 	bl	800ae80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800548c:	4b08      	ldr	r3, [pc, #32]	@ (80054b0 <HAL_I2C_MspInit+0xb4>)
 800548e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005490:	4a07      	ldr	r2, [pc, #28]	@ (80054b0 <HAL_I2C_MspInit+0xb4>)
 8005492:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005496:	6593      	str	r3, [r2, #88]	@ 0x58
 8005498:	4b05      	ldr	r3, [pc, #20]	@ (80054b0 <HAL_I2C_MspInit+0xb4>)
 800549a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800549c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 80054a4:	bf00      	nop
 80054a6:	37b0      	adds	r7, #176	@ 0xb0
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40005c00 	.word	0x40005c00
 80054b0:	40021000 	.word	0x40021000
 80054b4:	48000800 	.word	0x48000800

080054b8 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08a      	sub	sp, #40	@ 0x28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054c0:	f107 0314 	add.w	r3, r7, #20
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	605a      	str	r2, [r3, #4]
 80054ca:	609a      	str	r2, [r3, #8]
 80054cc:	60da      	str	r2, [r3, #12]
 80054ce:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a26      	ldr	r2, [pc, #152]	@ (8005570 <HAL_QSPI_MspInit+0xb8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d145      	bne.n	8005566 <HAL_QSPI_MspInit+0xae>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80054da:	4b26      	ldr	r3, [pc, #152]	@ (8005574 <HAL_QSPI_MspInit+0xbc>)
 80054dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054de:	4a25      	ldr	r2, [pc, #148]	@ (8005574 <HAL_QSPI_MspInit+0xbc>)
 80054e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80054e6:	4b23      	ldr	r3, [pc, #140]	@ (8005574 <HAL_QSPI_MspInit+0xbc>)
 80054e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ee:	613b      	str	r3, [r7, #16]
 80054f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054f2:	4b20      	ldr	r3, [pc, #128]	@ (8005574 <HAL_QSPI_MspInit+0xbc>)
 80054f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054f6:	4a1f      	ldr	r2, [pc, #124]	@ (8005574 <HAL_QSPI_MspInit+0xbc>)
 80054f8:	f043 0301 	orr.w	r3, r3, #1
 80054fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80054fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005574 <HAL_QSPI_MspInit+0xbc>)
 8005500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800550a:	4b1a      	ldr	r3, [pc, #104]	@ (8005574 <HAL_QSPI_MspInit+0xbc>)
 800550c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800550e:	4a19      	ldr	r2, [pc, #100]	@ (8005574 <HAL_QSPI_MspInit+0xbc>)
 8005510:	f043 0302 	orr.w	r3, r3, #2
 8005514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005516:	4b17      	ldr	r3, [pc, #92]	@ (8005574 <HAL_QSPI_MspInit+0xbc>)
 8005518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	60bb      	str	r3, [r7, #8]
 8005520:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005522:	23c0      	movs	r3, #192	@ 0xc0
 8005524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005526:	2302      	movs	r3, #2
 8005528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552a:	2300      	movs	r3, #0
 800552c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800552e:	2303      	movs	r3, #3
 8005530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8005532:	230a      	movs	r3, #10
 8005534:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005536:	f107 0314 	add.w	r3, r7, #20
 800553a:	4619      	mov	r1, r3
 800553c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005540:	f005 fc9e 	bl	800ae80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8005544:	f640 4303 	movw	r3, #3075	@ 0xc03
 8005548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800554a:	2302      	movs	r3, #2
 800554c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554e:	2300      	movs	r3, #0
 8005550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005552:	2303      	movs	r3, #3
 8005554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8005556:	230a      	movs	r3, #10
 8005558:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800555a:	f107 0314 	add.w	r3, r7, #20
 800555e:	4619      	mov	r1, r3
 8005560:	4805      	ldr	r0, [pc, #20]	@ (8005578 <HAL_QSPI_MspInit+0xc0>)
 8005562:	f005 fc8d 	bl	800ae80 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8005566:	bf00      	nop
 8005568:	3728      	adds	r7, #40	@ 0x28
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	a0001000 	.word	0xa0001000
 8005574:	40021000 	.word	0x40021000
 8005578:	48000400 	.word	0x48000400

0800557c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b0a4      	sub	sp, #144	@ 0x90
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005584:	f107 0308 	add.w	r3, r7, #8
 8005588:	2288      	movs	r2, #136	@ 0x88
 800558a:	2100      	movs	r1, #0
 800558c:	4618      	mov	r0, r3
 800558e:	f00d fa59 	bl	8012a44 <memset>
  if(hrtc->Instance==RTC)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a14      	ldr	r2, [pc, #80]	@ (80055e8 <HAL_RTC_MspInit+0x6c>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d120      	bne.n	80055de <HAL_RTC_MspInit+0x62>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800559c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80055a0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80055a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80055a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80055aa:	f107 0308 	add.w	r3, r7, #8
 80055ae:	4618      	mov	r0, r3
 80055b0:	f007 fed6 	bl	800d360 <HAL_RCCEx_PeriphCLKConfig>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80055ba:	f7fe fbe1 	bl	8003d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80055be:	4b0b      	ldr	r3, [pc, #44]	@ (80055ec <HAL_RTC_MspInit+0x70>)
 80055c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c4:	4a09      	ldr	r2, [pc, #36]	@ (80055ec <HAL_RTC_MspInit+0x70>)
 80055c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80055ce:	2200      	movs	r2, #0
 80055d0:	2100      	movs	r1, #0
 80055d2:	2029      	movs	r0, #41	@ 0x29
 80055d4:	f005 f8f1 	bl	800a7ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80055d8:	2029      	movs	r0, #41	@ 0x29
 80055da:	f005 f90a 	bl	800a7f2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80055de:	bf00      	nop
 80055e0:	3790      	adds	r7, #144	@ 0x90
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	40002800 	.word	0x40002800
 80055ec:	40021000 	.word	0x40021000

080055f0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08c      	sub	sp, #48	@ 0x30
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055f8:	f107 031c 	add.w	r3, r7, #28
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	605a      	str	r2, [r3, #4]
 8005602:	609a      	str	r2, [r3, #8]
 8005604:	60da      	str	r2, [r3, #12]
 8005606:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a2f      	ldr	r2, [pc, #188]	@ (80056cc <HAL_SPI_MspInit+0xdc>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d129      	bne.n	8005666 <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005612:	4b2f      	ldr	r3, [pc, #188]	@ (80056d0 <HAL_SPI_MspInit+0xe0>)
 8005614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005616:	4a2e      	ldr	r2, [pc, #184]	@ (80056d0 <HAL_SPI_MspInit+0xe0>)
 8005618:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800561c:	6593      	str	r3, [r2, #88]	@ 0x58
 800561e:	4b2c      	ldr	r3, [pc, #176]	@ (80056d0 <HAL_SPI_MspInit+0xe0>)
 8005620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005622:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005626:	61bb      	str	r3, [r7, #24]
 8005628:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800562a:	4b29      	ldr	r3, [pc, #164]	@ (80056d0 <HAL_SPI_MspInit+0xe0>)
 800562c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800562e:	4a28      	ldr	r2, [pc, #160]	@ (80056d0 <HAL_SPI_MspInit+0xe0>)
 8005630:	f043 0302 	orr.w	r3, r3, #2
 8005634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005636:	4b26      	ldr	r3, [pc, #152]	@ (80056d0 <HAL_SPI_MspInit+0xe0>)
 8005638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	617b      	str	r3, [r7, #20]
 8005640:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005642:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8005646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005648:	2302      	movs	r3, #2
 800564a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800564c:	2300      	movs	r3, #0
 800564e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005650:	2303      	movs	r3, #3
 8005652:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005654:	2305      	movs	r3, #5
 8005656:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005658:	f107 031c 	add.w	r3, r7, #28
 800565c:	4619      	mov	r1, r3
 800565e:	481d      	ldr	r0, [pc, #116]	@ (80056d4 <HAL_SPI_MspInit+0xe4>)
 8005660:	f005 fc0e 	bl	800ae80 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005664:	e02d      	b.n	80056c2 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a1b      	ldr	r2, [pc, #108]	@ (80056d8 <HAL_SPI_MspInit+0xe8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d128      	bne.n	80056c2 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005670:	4b17      	ldr	r3, [pc, #92]	@ (80056d0 <HAL_SPI_MspInit+0xe0>)
 8005672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005674:	4a16      	ldr	r2, [pc, #88]	@ (80056d0 <HAL_SPI_MspInit+0xe0>)
 8005676:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800567a:	6593      	str	r3, [r2, #88]	@ 0x58
 800567c:	4b14      	ldr	r3, [pc, #80]	@ (80056d0 <HAL_SPI_MspInit+0xe0>)
 800567e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005680:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005684:	613b      	str	r3, [r7, #16]
 8005686:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005688:	4b11      	ldr	r3, [pc, #68]	@ (80056d0 <HAL_SPI_MspInit+0xe0>)
 800568a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800568c:	4a10      	ldr	r2, [pc, #64]	@ (80056d0 <HAL_SPI_MspInit+0xe0>)
 800568e:	f043 0304 	orr.w	r3, r3, #4
 8005692:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005694:	4b0e      	ldr	r3, [pc, #56]	@ (80056d0 <HAL_SPI_MspInit+0xe0>)
 8005696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	60fb      	str	r3, [r7, #12]
 800569e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80056a0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80056a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056a6:	2302      	movs	r3, #2
 80056a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056aa:	2300      	movs	r3, #0
 80056ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056ae:	2303      	movs	r3, #3
 80056b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80056b2:	2306      	movs	r3, #6
 80056b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056b6:	f107 031c 	add.w	r3, r7, #28
 80056ba:	4619      	mov	r1, r3
 80056bc:	4807      	ldr	r0, [pc, #28]	@ (80056dc <HAL_SPI_MspInit+0xec>)
 80056be:	f005 fbdf 	bl	800ae80 <HAL_GPIO_Init>
}
 80056c2:	bf00      	nop
 80056c4:	3730      	adds	r7, #48	@ 0x30
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	40003800 	.word	0x40003800
 80056d0:	40021000 	.word	0x40021000
 80056d4:	48000400 	.word	0x48000400
 80056d8:	40003c00 	.word	0x40003c00
 80056dc:	48000800 	.word	0x48000800

080056e0 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a0a      	ldr	r2, [pc, #40]	@ (8005718 <HAL_TIM_OC_MspInit+0x38>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d10b      	bne.n	800570a <HAL_TIM_OC_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80056f2:	4b0a      	ldr	r3, [pc, #40]	@ (800571c <HAL_TIM_OC_MspInit+0x3c>)
 80056f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056f6:	4a09      	ldr	r2, [pc, #36]	@ (800571c <HAL_TIM_OC_MspInit+0x3c>)
 80056f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80056fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80056fe:	4b07      	ldr	r3, [pc, #28]	@ (800571c <HAL_TIM_OC_MspInit+0x3c>)
 8005700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005702:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800570a:	bf00      	nop
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40012c00 	.word	0x40012c00
 800571c:	40021000 	.word	0x40021000

08005720 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08a      	sub	sp, #40	@ 0x28
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005728:	f107 0314 	add.w	r3, r7, #20
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	605a      	str	r2, [r3, #4]
 8005732:	609a      	str	r2, [r3, #8]
 8005734:	60da      	str	r2, [r3, #12]
 8005736:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005740:	d128      	bne.n	8005794 <HAL_TIM_IC_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005742:	4b16      	ldr	r3, [pc, #88]	@ (800579c <HAL_TIM_IC_MspInit+0x7c>)
 8005744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005746:	4a15      	ldr	r2, [pc, #84]	@ (800579c <HAL_TIM_IC_MspInit+0x7c>)
 8005748:	f043 0301 	orr.w	r3, r3, #1
 800574c:	6593      	str	r3, [r2, #88]	@ 0x58
 800574e:	4b13      	ldr	r3, [pc, #76]	@ (800579c <HAL_TIM_IC_MspInit+0x7c>)
 8005750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	613b      	str	r3, [r7, #16]
 8005758:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800575a:	4b10      	ldr	r3, [pc, #64]	@ (800579c <HAL_TIM_IC_MspInit+0x7c>)
 800575c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800575e:	4a0f      	ldr	r2, [pc, #60]	@ (800579c <HAL_TIM_IC_MspInit+0x7c>)
 8005760:	f043 0301 	orr.w	r3, r3, #1
 8005764:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005766:	4b0d      	ldr	r3, [pc, #52]	@ (800579c <HAL_TIM_IC_MspInit+0x7c>)
 8005768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005772:	2320      	movs	r3, #32
 8005774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005776:	2302      	movs	r3, #2
 8005778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800577a:	2301      	movs	r3, #1
 800577c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800577e:	2300      	movs	r3, #0
 8005780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005782:	2301      	movs	r3, #1
 8005784:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005786:	f107 0314 	add.w	r3, r7, #20
 800578a:	4619      	mov	r1, r3
 800578c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005790:	f005 fb76 	bl	800ae80 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8005794:	bf00      	nop
 8005796:	3728      	adds	r7, #40	@ 0x28
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	40021000 	.word	0x40021000

080057a0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a13      	ldr	r2, [pc, #76]	@ (80057fc <HAL_TIM_Base_MspInit+0x5c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d10c      	bne.n	80057cc <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80057b2:	4b13      	ldr	r3, [pc, #76]	@ (8005800 <HAL_TIM_Base_MspInit+0x60>)
 80057b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b6:	4a12      	ldr	r2, [pc, #72]	@ (8005800 <HAL_TIM_Base_MspInit+0x60>)
 80057b8:	f043 0302 	orr.w	r3, r3, #2
 80057bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80057be:	4b10      	ldr	r3, [pc, #64]	@ (8005800 <HAL_TIM_Base_MspInit+0x60>)
 80057c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80057ca:	e010      	b.n	80057ee <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a0c      	ldr	r2, [pc, #48]	@ (8005804 <HAL_TIM_Base_MspInit+0x64>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d10b      	bne.n	80057ee <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80057d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005800 <HAL_TIM_Base_MspInit+0x60>)
 80057d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057da:	4a09      	ldr	r2, [pc, #36]	@ (8005800 <HAL_TIM_Base_MspInit+0x60>)
 80057dc:	f043 0304 	orr.w	r3, r3, #4
 80057e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80057e2:	4b07      	ldr	r3, [pc, #28]	@ (8005800 <HAL_TIM_Base_MspInit+0x60>)
 80057e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e6:	f003 0304 	and.w	r3, r3, #4
 80057ea:	60bb      	str	r3, [r7, #8]
 80057ec:	68bb      	ldr	r3, [r7, #8]
}
 80057ee:	bf00      	nop
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	40000400 	.word	0x40000400
 8005800:	40021000 	.word	0x40021000
 8005804:	40000800 	.word	0x40000800

08005808 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08a      	sub	sp, #40	@ 0x28
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005810:	f107 0314 	add.w	r3, r7, #20
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	605a      	str	r2, [r3, #4]
 800581a:	609a      	str	r2, [r3, #8]
 800581c:	60da      	str	r2, [r3, #12]
 800581e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a23      	ldr	r2, [pc, #140]	@ (80058b4 <HAL_TIM_MspPostInit+0xac>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d11e      	bne.n	8005868 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800582a:	4b23      	ldr	r3, [pc, #140]	@ (80058b8 <HAL_TIM_MspPostInit+0xb0>)
 800582c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800582e:	4a22      	ldr	r2, [pc, #136]	@ (80058b8 <HAL_TIM_MspPostInit+0xb0>)
 8005830:	f043 0301 	orr.w	r3, r3, #1
 8005834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005836:	4b20      	ldr	r3, [pc, #128]	@ (80058b8 <HAL_TIM_MspPostInit+0xb0>)
 8005838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	613b      	str	r3, [r7, #16]
 8005840:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8005842:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8005846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005848:	2302      	movs	r3, #2
 800584a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800584c:	2300      	movs	r3, #0
 800584e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005850:	2300      	movs	r3, #0
 8005852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005854:	2301      	movs	r3, #1
 8005856:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005858:	f107 0314 	add.w	r3, r7, #20
 800585c:	4619      	mov	r1, r3
 800585e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005862:	f005 fb0d 	bl	800ae80 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005866:	e021      	b.n	80058ac <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a13      	ldr	r2, [pc, #76]	@ (80058bc <HAL_TIM_MspPostInit+0xb4>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d11c      	bne.n	80058ac <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005872:	4b11      	ldr	r3, [pc, #68]	@ (80058b8 <HAL_TIM_MspPostInit+0xb0>)
 8005874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005876:	4a10      	ldr	r2, [pc, #64]	@ (80058b8 <HAL_TIM_MspPostInit+0xb0>)
 8005878:	f043 0304 	orr.w	r3, r3, #4
 800587c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800587e:	4b0e      	ldr	r3, [pc, #56]	@ (80058b8 <HAL_TIM_MspPostInit+0xb0>)
 8005880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005882:	f003 0304 	and.w	r3, r3, #4
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800588a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800588e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005890:	2302      	movs	r3, #2
 8005892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005894:	2300      	movs	r3, #0
 8005896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005898:	2300      	movs	r3, #0
 800589a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800589c:	2302      	movs	r3, #2
 800589e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058a0:	f107 0314 	add.w	r3, r7, #20
 80058a4:	4619      	mov	r1, r3
 80058a6:	4806      	ldr	r0, [pc, #24]	@ (80058c0 <HAL_TIM_MspPostInit+0xb8>)
 80058a8:	f005 faea 	bl	800ae80 <HAL_GPIO_Init>
}
 80058ac:	bf00      	nop
 80058ae:	3728      	adds	r7, #40	@ 0x28
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	40012c00 	.word	0x40012c00
 80058b8:	40021000 	.word	0x40021000
 80058bc:	40000400 	.word	0x40000400
 80058c0:	48000800 	.word	0x48000800

080058c4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b0ae      	sub	sp, #184	@ 0xb8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058cc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80058d0:	2200      	movs	r2, #0
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	605a      	str	r2, [r3, #4]
 80058d6:	609a      	str	r2, [r3, #8]
 80058d8:	60da      	str	r2, [r3, #12]
 80058da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80058dc:	f107 031c 	add.w	r3, r7, #28
 80058e0:	2288      	movs	r2, #136	@ 0x88
 80058e2:	2100      	movs	r1, #0
 80058e4:	4618      	mov	r0, r3
 80058e6:	f00d f8ad 	bl	8012a44 <memset>
  if(huart->Instance==UART4)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a6b      	ldr	r2, [pc, #428]	@ (8005a9c <HAL_UART_MspInit+0x1d8>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d13c      	bne.n	800596e <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80058f4:	2308      	movs	r3, #8
 80058f6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80058f8:	2300      	movs	r3, #0
 80058fa:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80058fc:	f107 031c 	add.w	r3, r7, #28
 8005900:	4618      	mov	r0, r3
 8005902:	f007 fd2d 	bl	800d360 <HAL_RCCEx_PeriphCLKConfig>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800590c:	f7fe fa38 	bl	8003d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005910:	4b63      	ldr	r3, [pc, #396]	@ (8005aa0 <HAL_UART_MspInit+0x1dc>)
 8005912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005914:	4a62      	ldr	r2, [pc, #392]	@ (8005aa0 <HAL_UART_MspInit+0x1dc>)
 8005916:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800591a:	6593      	str	r3, [r2, #88]	@ 0x58
 800591c:	4b60      	ldr	r3, [pc, #384]	@ (8005aa0 <HAL_UART_MspInit+0x1dc>)
 800591e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005920:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005924:	61bb      	str	r3, [r7, #24]
 8005926:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005928:	4b5d      	ldr	r3, [pc, #372]	@ (8005aa0 <HAL_UART_MspInit+0x1dc>)
 800592a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800592c:	4a5c      	ldr	r2, [pc, #368]	@ (8005aa0 <HAL_UART_MspInit+0x1dc>)
 800592e:	f043 0301 	orr.w	r3, r3, #1
 8005932:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005934:	4b5a      	ldr	r3, [pc, #360]	@ (8005aa0 <HAL_UART_MspInit+0x1dc>)
 8005936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	617b      	str	r3, [r7, #20]
 800593e:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005940:	2301      	movs	r3, #1
 8005942:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005946:	2312      	movs	r3, #18
 8005948:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800594c:	2301      	movs	r3, #1
 800594e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005952:	2303      	movs	r3, #3
 8005954:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005958:	2308      	movs	r3, #8
 800595a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800595e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8005962:	4619      	mov	r1, r3
 8005964:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005968:	f005 fa8a 	bl	800ae80 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 800596c:	e092      	b.n	8005a94 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART1)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a4c      	ldr	r2, [pc, #304]	@ (8005aa4 <HAL_UART_MspInit+0x1e0>)
 8005974:	4293      	cmp	r3, r2
 8005976:	f040 808d 	bne.w	8005a94 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800597a:	2301      	movs	r3, #1
 800597c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800597e:	2300      	movs	r3, #0
 8005980:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005982:	f107 031c 	add.w	r3, r7, #28
 8005986:	4618      	mov	r0, r3
 8005988:	f007 fcea 	bl	800d360 <HAL_RCCEx_PeriphCLKConfig>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8005992:	f7fe f9f5 	bl	8003d80 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005996:	4b42      	ldr	r3, [pc, #264]	@ (8005aa0 <HAL_UART_MspInit+0x1dc>)
 8005998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800599a:	4a41      	ldr	r2, [pc, #260]	@ (8005aa0 <HAL_UART_MspInit+0x1dc>)
 800599c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80059a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80059a2:	4b3f      	ldr	r3, [pc, #252]	@ (8005aa0 <HAL_UART_MspInit+0x1dc>)
 80059a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059aa:	613b      	str	r3, [r7, #16]
 80059ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059ae:	4b3c      	ldr	r3, [pc, #240]	@ (8005aa0 <HAL_UART_MspInit+0x1dc>)
 80059b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059b2:	4a3b      	ldr	r2, [pc, #236]	@ (8005aa0 <HAL_UART_MspInit+0x1dc>)
 80059b4:	f043 0302 	orr.w	r3, r3, #2
 80059b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059ba:	4b39      	ldr	r3, [pc, #228]	@ (8005aa0 <HAL_UART_MspInit+0x1dc>)
 80059bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 80059c6:	23d8      	movs	r3, #216	@ 0xd8
 80059c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059cc:	2302      	movs	r3, #2
 80059ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059d2:	2300      	movs	r3, #0
 80059d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059d8:	2303      	movs	r3, #3
 80059da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80059de:	2307      	movs	r3, #7
 80059e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059e4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80059e8:	4619      	mov	r1, r3
 80059ea:	482f      	ldr	r0, [pc, #188]	@ (8005aa8 <HAL_UART_MspInit+0x1e4>)
 80059ec:	f005 fa48 	bl	800ae80 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80059f0:	4b2e      	ldr	r3, [pc, #184]	@ (8005aac <HAL_UART_MspInit+0x1e8>)
 80059f2:	4a2f      	ldr	r2, [pc, #188]	@ (8005ab0 <HAL_UART_MspInit+0x1ec>)
 80059f4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80059f6:	4b2d      	ldr	r3, [pc, #180]	@ (8005aac <HAL_UART_MspInit+0x1e8>)
 80059f8:	2202      	movs	r2, #2
 80059fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80059fc:	4b2b      	ldr	r3, [pc, #172]	@ (8005aac <HAL_UART_MspInit+0x1e8>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a02:	4b2a      	ldr	r3, [pc, #168]	@ (8005aac <HAL_UART_MspInit+0x1e8>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a08:	4b28      	ldr	r3, [pc, #160]	@ (8005aac <HAL_UART_MspInit+0x1e8>)
 8005a0a:	2280      	movs	r2, #128	@ 0x80
 8005a0c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a0e:	4b27      	ldr	r3, [pc, #156]	@ (8005aac <HAL_UART_MspInit+0x1e8>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a14:	4b25      	ldr	r3, [pc, #148]	@ (8005aac <HAL_UART_MspInit+0x1e8>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005a1a:	4b24      	ldr	r3, [pc, #144]	@ (8005aac <HAL_UART_MspInit+0x1e8>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005a20:	4b22      	ldr	r3, [pc, #136]	@ (8005aac <HAL_UART_MspInit+0x1e8>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005a26:	4821      	ldr	r0, [pc, #132]	@ (8005aac <HAL_UART_MspInit+0x1e8>)
 8005a28:	f004 fff4 	bl	800aa14 <HAL_DMA_Init>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <HAL_UART_MspInit+0x172>
      Error_Handler();
 8005a32:	f7fe f9a5 	bl	8003d80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a1c      	ldr	r2, [pc, #112]	@ (8005aac <HAL_UART_MspInit+0x1e8>)
 8005a3a:	675a      	str	r2, [r3, #116]	@ 0x74
 8005a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8005aac <HAL_UART_MspInit+0x1e8>)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8005a42:	4b1c      	ldr	r3, [pc, #112]	@ (8005ab4 <HAL_UART_MspInit+0x1f0>)
 8005a44:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab8 <HAL_UART_MspInit+0x1f4>)
 8005a46:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8005a48:	4b1a      	ldr	r3, [pc, #104]	@ (8005ab4 <HAL_UART_MspInit+0x1f0>)
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a4e:	4b19      	ldr	r3, [pc, #100]	@ (8005ab4 <HAL_UART_MspInit+0x1f0>)
 8005a50:	2210      	movs	r2, #16
 8005a52:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a54:	4b17      	ldr	r3, [pc, #92]	@ (8005ab4 <HAL_UART_MspInit+0x1f0>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a5a:	4b16      	ldr	r3, [pc, #88]	@ (8005ab4 <HAL_UART_MspInit+0x1f0>)
 8005a5c:	2280      	movs	r2, #128	@ 0x80
 8005a5e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a60:	4b14      	ldr	r3, [pc, #80]	@ (8005ab4 <HAL_UART_MspInit+0x1f0>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a66:	4b13      	ldr	r3, [pc, #76]	@ (8005ab4 <HAL_UART_MspInit+0x1f0>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005a6c:	4b11      	ldr	r3, [pc, #68]	@ (8005ab4 <HAL_UART_MspInit+0x1f0>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005a72:	4b10      	ldr	r3, [pc, #64]	@ (8005ab4 <HAL_UART_MspInit+0x1f0>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005a78:	480e      	ldr	r0, [pc, #56]	@ (8005ab4 <HAL_UART_MspInit+0x1f0>)
 8005a7a:	f004 ffcb 	bl	800aa14 <HAL_DMA_Init>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8005a84:	f7fe f97c 	bl	8003d80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8005ab4 <HAL_UART_MspInit+0x1f0>)
 8005a8c:	671a      	str	r2, [r3, #112]	@ 0x70
 8005a8e:	4a09      	ldr	r2, [pc, #36]	@ (8005ab4 <HAL_UART_MspInit+0x1f0>)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8005a94:	bf00      	nop
 8005a96:	37b8      	adds	r7, #184	@ 0xb8
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	40004c00 	.word	0x40004c00
 8005aa0:	40021000 	.word	0x40021000
 8005aa4:	40013800 	.word	0x40013800
 8005aa8:	48000400 	.word	0x48000400
 8005aac:	20000524 	.word	0x20000524
 8005ab0:	40020058 	.word	0x40020058
 8005ab4:	2000056c 	.word	0x2000056c
 8005ab8:	40020044 	.word	0x40020044

08005abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005ac0:	bf00      	nop
 8005ac2:	e7fd      	b.n	8005ac0 <NMI_Handler+0x4>

08005ac4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ac8:	bf00      	nop
 8005aca:	e7fd      	b.n	8005ac8 <HardFault_Handler+0x4>

08005acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ad0:	bf00      	nop
 8005ad2:	e7fd      	b.n	8005ad0 <MemManage_Handler+0x4>

08005ad4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ad8:	bf00      	nop
 8005ada:	e7fd      	b.n	8005ad8 <BusFault_Handler+0x4>

08005adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ae0:	bf00      	nop
 8005ae2:	e7fd      	b.n	8005ae0 <UsageFault_Handler+0x4>

08005ae4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005ae8:	bf00      	nop
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005af2:	b480      	push	{r7}
 8005af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005af6:	bf00      	nop
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b04:	bf00      	nop
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b12:	f003 f983 	bl	8008e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005b16:	bf00      	nop
 8005b18:	bd80      	pop	{r7, pc}
	...

08005b1c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005b20:	4802      	ldr	r0, [pc, #8]	@ (8005b2c <DMA1_Channel1_IRQHandler+0x10>)
 8005b22:	f005 f8cd 	bl	800acc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005b26:	bf00      	nop
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	200000f4 	.word	0x200000f4

08005b30 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005b34:	4802      	ldr	r0, [pc, #8]	@ (8005b40 <DMA1_Channel4_IRQHandler+0x10>)
 8005b36:	f005 f8c3 	bl	800acc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005b3a:	bf00      	nop
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	2000056c 	.word	0x2000056c

08005b44 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005b48:	4802      	ldr	r0, [pc, #8]	@ (8005b54 <DMA1_Channel5_IRQHandler+0x10>)
 8005b4a:	f005 f8b9 	bl	800acc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005b4e:	bf00      	nop
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	20000524 	.word	0x20000524

08005b58 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8005b5c:	4802      	ldr	r0, [pc, #8]	@ (8005b68 <RTC_Alarm_IRQHandler+0x10>)
 8005b5e:	f008 fbff 	bl	800e360 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8005b62:	bf00      	nop
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	200001f8 	.word	0x200001f8

08005b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005b74:	4a14      	ldr	r2, [pc, #80]	@ (8005bc8 <_sbrk+0x5c>)
 8005b76:	4b15      	ldr	r3, [pc, #84]	@ (8005bcc <_sbrk+0x60>)
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005b80:	4b13      	ldr	r3, [pc, #76]	@ (8005bd0 <_sbrk+0x64>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d102      	bne.n	8005b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005b88:	4b11      	ldr	r3, [pc, #68]	@ (8005bd0 <_sbrk+0x64>)
 8005b8a:	4a12      	ldr	r2, [pc, #72]	@ (8005bd4 <_sbrk+0x68>)
 8005b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005b8e:	4b10      	ldr	r3, [pc, #64]	@ (8005bd0 <_sbrk+0x64>)
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4413      	add	r3, r2
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d207      	bcs.n	8005bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005b9c:	f00c ffa2 	bl	8012ae4 <__errno>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	220c      	movs	r2, #12
 8005ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8005baa:	e009      	b.n	8005bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005bac:	4b08      	ldr	r3, [pc, #32]	@ (8005bd0 <_sbrk+0x64>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005bb2:	4b07      	ldr	r3, [pc, #28]	@ (8005bd0 <_sbrk+0x64>)
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4413      	add	r3, r2
 8005bba:	4a05      	ldr	r2, [pc, #20]	@ (8005bd0 <_sbrk+0x64>)
 8005bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3718      	adds	r7, #24
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	20018000 	.word	0x20018000
 8005bcc:	00000400 	.word	0x00000400
 8005bd0:	2000503c 	.word	0x2000503c
 8005bd4:	20005198 	.word	0x20005198

08005bd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005bdc:	4b06      	ldr	r3, [pc, #24]	@ (8005bf8 <SystemInit+0x20>)
 8005bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be2:	4a05      	ldr	r2, [pc, #20]	@ (8005bf8 <SystemInit+0x20>)
 8005be4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005be8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8005bec:	bf00      	nop
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	e000ed00 	.word	0xe000ed00

08005bfc <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	4603      	mov	r3, r0
 8005c04:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;

	switch (pdrv) {
 8005c06:	79fb      	ldrb	r3, [r7, #7]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <disk_status+0x16>
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d00c      	beq.n	8005c2a <disk_status+0x2e>
 8005c10:	e017      	b.n	8005c42 <disk_status+0x46>
	case DEV_RAM :

		if(!psram_is_initialized())
 8005c12:	f7ff fa9b 	bl	800514c <psram_is_initialized>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d102      	bne.n	8005c22 <disk_status+0x26>
		{
			stat = STA_NOINIT;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	73fb      	strb	r3, [r7, #15]
 8005c20:	e001      	b.n	8005c26 <disk_status+0x2a>
		}else{
			stat = 0;
 8005c22:	2300      	movs	r3, #0
 8005c24:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8005c26:	7bfb      	ldrb	r3, [r7, #15]
 8005c28:	e00c      	b.n	8005c44 <disk_status+0x48>

	case DEV_MMC :

		if(!extflash_is_initialized())
 8005c2a:	f7fc f9c7 	bl	8001fbc <extflash_is_initialized>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d102      	bne.n	8005c3a <disk_status+0x3e>
		{
			stat = STA_NOINIT;
 8005c34:	2301      	movs	r3, #1
 8005c36:	73fb      	strb	r3, [r7, #15]
 8005c38:	e001      	b.n	8005c3e <disk_status+0x42>
		}else{
			stat = 0;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
 8005c40:	e000      	b.n	8005c44 <disk_status+0x48>

	}
	return STA_NOINIT;
 8005c42:	2301      	movs	r3, #1
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	4603      	mov	r3, r0
 8005c54:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;
	switch (pdrv) {
 8005c56:	79fb      	ldrb	r3, [r7, #7]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <disk_initialize+0x16>
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d00c      	beq.n	8005c7a <disk_initialize+0x2e>
 8005c60:	e017      	b.n	8005c92 <disk_initialize+0x46>
	case DEV_RAM :

		if(psram_init() < 0)
 8005c62:	f7ff faa1 	bl	80051a8 <psram_init>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	da02      	bge.n	8005c72 <disk_initialize+0x26>
		{
			stat = STA_NODISK;
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	73fb      	strb	r3, [r7, #15]
 8005c70:	e001      	b.n	8005c76 <disk_initialize+0x2a>
		}else{
			stat = 0;
 8005c72:	2300      	movs	r3, #0
 8005c74:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
 8005c78:	e00c      	b.n	8005c94 <disk_initialize+0x48>

	case DEV_MMC :

		if(extflash_init() < 0)
 8005c7a:	f7fc f9ab 	bl	8001fd4 <extflash_init>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	da02      	bge.n	8005c8a <disk_initialize+0x3e>
		{
			stat = STA_NODISK;
 8005c84:	2302      	movs	r3, #2
 8005c86:	73fb      	strb	r3, [r7, #15]
 8005c88:	e001      	b.n	8005c8e <disk_initialize+0x42>
		}else{
			stat = 0;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8005c8e:	7bfb      	ldrb	r3, [r7, #15]
 8005c90:	e000      	b.n	8005c94 <disk_initialize+0x48>

	}
	return STA_NOINIT;
 8005c92:	2301      	movs	r3, #1
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	607a      	str	r2, [r7, #4]
 8005ca6:	603b      	str	r3, [r7, #0]
 8005ca8:	4603      	mov	r3, r0
 8005caa:	73fb      	strb	r3, [r7, #15]
	DRESULT res;
	int result;

	switch (pdrv) {
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <disk_read+0x1c>
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d010      	beq.n	8005cd8 <disk_read+0x3c>
 8005cb6:	e01e      	b.n	8005cf6 <disk_read+0x5a>
	case DEV_RAM :

		if(psram_sector_read_write(0, sector, count, buff) < 0)
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	6879      	ldr	r1, [r7, #4]
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	f7ff f94a 	bl	8004f58 <psram_sector_read_write>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	da02      	bge.n	8005cd0 <disk_read+0x34>
		{
			res = RES_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	75fb      	strb	r3, [r7, #23]
 8005cce:	e001      	b.n	8005cd4 <disk_read+0x38>
		}else{

			res = 0;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8005cd4:	7dfb      	ldrb	r3, [r7, #23]
 8005cd6:	e00f      	b.n	8005cf8 <disk_read+0x5c>

	case DEV_MMC :

		if(extflash_sector_read(sector, count, buff) < 0)
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	6839      	ldr	r1, [r7, #0]
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7fc f851 	bl	8001d84 <extflash_sector_read>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	da02      	bge.n	8005cee <disk_read+0x52>
		{
			res = RES_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	75fb      	strb	r3, [r7, #23]
 8005cec:	e001      	b.n	8005cf2 <disk_read+0x56>
		}else{

			res = 0;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8005cf2:	7dfb      	ldrb	r3, [r7, #23]
 8005cf4:	e000      	b.n	8005cf8 <disk_read+0x5c>

	}

	return RES_PARERR;
 8005cf6:	2304      	movs	r3, #4
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	607a      	str	r2, [r7, #4]
 8005d0a:	603b      	str	r3, [r7, #0]
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	73fb      	strb	r3, [r7, #15]
	DRESULT res = RES_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	75fb      	strb	r3, [r7, #23]

	switch (pdrv) {
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d002      	beq.n	8005d20 <disk_write+0x20>
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d010      	beq.n	8005d40 <disk_write+0x40>
 8005d1e:	e01e      	b.n	8005d5e <disk_write+0x5e>
	case DEV_RAM :

		if(psram_sector_read_write(1, sector, count, (const uint8_t *)buff) < 0)
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	6879      	ldr	r1, [r7, #4]
 8005d26:	2001      	movs	r0, #1
 8005d28:	f7ff f916 	bl	8004f58 <psram_sector_read_write>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	da02      	bge.n	8005d38 <disk_write+0x38>
		{
			res = RES_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	75fb      	strb	r3, [r7, #23]
 8005d36:	e001      	b.n	8005d3c <disk_write+0x3c>
		}else{

			res = 0;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8005d3c:	7dfb      	ldrb	r3, [r7, #23]
 8005d3e:	e00f      	b.n	8005d60 <disk_write+0x60>

	case DEV_MMC :

		if(extflash_sector_write(sector, count, buff) < 0)
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	6839      	ldr	r1, [r7, #0]
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7fc f8b2 	bl	8001eae <extflash_sector_write>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	da02      	bge.n	8005d56 <disk_write+0x56>
		{
			res = RES_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	75fb      	strb	r3, [r7, #23]
 8005d54:	e001      	b.n	8005d5a <disk_write+0x5a>
		}else{

			res = 0;
 8005d56:	2300      	movs	r3, #0
 8005d58:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8005d5a:	7dfb      	ldrb	r3, [r7, #23]
 8005d5c:	e000      	b.n	8005d60 <disk_write+0x60>

	}

	return RES_PARERR;
 8005d5e:	2304      	movs	r3, #4
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	4603      	mov	r3, r0
 8005d70:	603a      	str	r2, [r7, #0]
 8005d72:	71fb      	strb	r3, [r7, #7]
 8005d74:	460b      	mov	r3, r1
 8005d76:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_PARERR;
 8005d78:	2304      	movs	r3, #4
 8005d7a:	73fb      	strb	r3, [r7, #15]

	switch (pdrv) {
 8005d7c:	79fb      	ldrb	r3, [r7, #7]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d002      	beq.n	8005d88 <disk_ioctl+0x20>
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d036      	beq.n	8005df4 <disk_ioctl+0x8c>
 8005d86:	e06b      	b.n	8005e60 <disk_ioctl+0xf8>
	case DEV_RAM :

		if(!psram_is_initialized())return RES_NOTRDY;
 8005d88:	f7ff f9e0 	bl	800514c <psram_is_initialized>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <disk_ioctl+0x2e>
 8005d92:	2303      	movs	r3, #3
 8005d94:	e065      	b.n	8005e62 <disk_ioctl+0xfa>

		switch(cmd)
 8005d96:	79bb      	ldrb	r3, [r7, #6]
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d826      	bhi.n	8005dea <disk_ioctl+0x82>
 8005d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005da4 <disk_ioctl+0x3c>)
 8005d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da2:	bf00      	nop
 8005da4:	08005de5 	.word	0x08005de5
 8005da8:	08005db9 	.word	0x08005db9
 8005dac:	08005dc9 	.word	0x08005dc9
 8005db0:	08005dd9 	.word	0x08005dd9
 8005db4:	08005de5 	.word	0x08005de5
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = psram_get_sector_count();
 8005db8:	f7ff f9de 	bl	8005178 <psram_get_sector_count>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	601a      	str	r2, [r3, #0]
				res = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	73fb      	strb	r3, [r7, #15]
				break;
 8005dc6:	e013      	b.n	8005df0 <disk_ioctl+0x88>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = psram_get_sector_size();
 8005dc8:	f7ff f9cc 	bl	8005164 <psram_get_sector_size>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	601a      	str	r2, [r3, #0]
				res = 0;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	73fb      	strb	r3, [r7, #15]
				break;
 8005dd6:	e00b      	b.n	8005df0 <disk_ioctl+0x88>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	601a      	str	r2, [r3, #0]
				res = 0;
 8005dde:	2300      	movs	r3, #0
 8005de0:	73fb      	strb	r3, [r7, #15]
				break;
 8005de2:	e005      	b.n	8005df0 <disk_ioctl+0x88>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 8005de4:	2300      	movs	r3, #0
 8005de6:	73fb      	strb	r3, [r7, #15]
				break;
 8005de8:	e002      	b.n	8005df0 <disk_ioctl+0x88>

			default:
				res = RES_PARERR;
 8005dea:	2304      	movs	r3, #4
 8005dec:	73fb      	strb	r3, [r7, #15]
				break;
 8005dee:	bf00      	nop
		}

		return res;
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
 8005df2:	e036      	b.n	8005e62 <disk_ioctl+0xfa>

	case DEV_MMC :

		if(!extflash_is_initialized())return RES_NOTRDY;
 8005df4:	f7fc f8e2 	bl	8001fbc <extflash_is_initialized>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <disk_ioctl+0x9a>
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e02f      	b.n	8005e62 <disk_ioctl+0xfa>

		switch(cmd)
 8005e02:	79bb      	ldrb	r3, [r7, #6]
 8005e04:	2b04      	cmp	r3, #4
 8005e06:	d826      	bhi.n	8005e56 <disk_ioctl+0xee>
 8005e08:	a201      	add	r2, pc, #4	@ (adr r2, 8005e10 <disk_ioctl+0xa8>)
 8005e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0e:	bf00      	nop
 8005e10:	08005e51 	.word	0x08005e51
 8005e14:	08005e25 	.word	0x08005e25
 8005e18:	08005e35 	.word	0x08005e35
 8005e1c:	08005e45 	.word	0x08005e45
 8005e20:	08005e51 	.word	0x08005e51
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = extflash_get_sector_count();
 8005e24:	f7fc f8be 	bl	8001fa4 <extflash_get_sector_count>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	601a      	str	r2, [r3, #0]
				res = 0;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	73fb      	strb	r3, [r7, #15]
				break;
 8005e32:	e013      	b.n	8005e5c <disk_ioctl+0xf4>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = extflash_get_sector_size();
 8005e34:	f7fc f8ad 	bl	8001f92 <extflash_get_sector_size>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	601a      	str	r2, [r3, #0]
				res = 0;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	73fb      	strb	r3, [r7, #15]
				break;
 8005e42:	e00b      	b.n	8005e5c <disk_ioctl+0xf4>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	2201      	movs	r2, #1
 8005e48:	601a      	str	r2, [r3, #0]
				res = 0;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	73fb      	strb	r3, [r7, #15]
				break;
 8005e4e:	e005      	b.n	8005e5c <disk_ioctl+0xf4>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 8005e50:	2300      	movs	r3, #0
 8005e52:	73fb      	strb	r3, [r7, #15]
				break;
 8005e54:	e002      	b.n	8005e5c <disk_ioctl+0xf4>

			default:
				res = RES_PARERR;
 8005e56:	2304      	movs	r3, #4
 8005e58:	73fb      	strb	r3, [r7, #15]
				break;
 8005e5a:	bf00      	nop
		}

		return res;
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
 8005e5e:	e000      	b.n	8005e62 <disk_ioctl+0xfa>

	}

	return RES_PARERR;
 8005e60:	2304      	movs	r3, #4
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop

08005e6c <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3301      	adds	r3, #1
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005e7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e80:	021b      	lsls	r3, r3, #8
 8005e82:	b21a      	sxth	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	b21b      	sxth	r3, r3
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	b21b      	sxth	r3, r3
 8005e8e:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005e90:	89fb      	ldrh	r3, [r7, #14]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b085      	sub	sp, #20
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	3303      	adds	r3, #3
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	021b      	lsls	r3, r3, #8
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	3202      	adds	r2, #2
 8005eb6:	7812      	ldrb	r2, [r2, #0]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	021b      	lsls	r3, r3, #8
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	3201      	adds	r2, #1
 8005ec4:	7812      	ldrb	r2, [r2, #0]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	021b      	lsls	r3, r3, #8
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	7812      	ldrb	r2, [r2, #0]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]
	return rv;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3714      	adds	r7, #20
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	460b      	mov	r3, r1
 8005eee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	607a      	str	r2, [r7, #4]
 8005ef6:	887a      	ldrh	r2, [r7, #2]
 8005ef8:	b2d2      	uxtb	r2, r2
 8005efa:	701a      	strb	r2, [r3, #0]
 8005efc:	887b      	ldrh	r3, [r7, #2]
 8005efe:	0a1b      	lsrs	r3, r3, #8
 8005f00:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	1c5a      	adds	r2, r3, #1
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	887a      	ldrh	r2, [r7, #2]
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	701a      	strb	r2, [r3, #0]
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	1c5a      	adds	r2, r3, #1
 8005f28:	607a      	str	r2, [r7, #4]
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	b2d2      	uxtb	r2, r2
 8005f2e:	701a      	strb	r2, [r3, #0]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	0a1b      	lsrs	r3, r3, #8
 8005f34:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	607a      	str	r2, [r7, #4]
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	701a      	strb	r2, [r3, #0]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	0a1b      	lsrs	r3, r3, #8
 8005f46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	607a      	str	r2, [r7, #4]
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	b2d2      	uxtb	r2, r2
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	0a1b      	lsrs	r3, r3, #8
 8005f58:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	1c5a      	adds	r2, r3, #1
 8005f5e:	607a      	str	r2, [r7, #4]
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	b2d2      	uxtb	r2, r2
 8005f64:	701a      	strb	r2, [r3, #0]
}
 8005f66:	bf00      	nop
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b083      	sub	sp, #12
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	4603      	mov	r3, r0
 8005f7a:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8005f7c:	79fb      	ldrb	r3, [r7, #7]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <dbc_1st+0x14>
 8005f82:	2300      	movs	r3, #0
 8005f84:	e000      	b.n	8005f88 <dbc_1st+0x16>
#endif
	return 0;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8005f9e:	79fb      	ldrb	r3, [r7, #7]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <dbc_2nd+0x14>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	e000      	b.n	8005faa <dbc_2nd+0x16>
#endif
	return 0;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	791b      	ldrb	r3, [r3, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d02c      	beq.n	8006024 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	7858      	ldrb	r0, [r3, #1]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fd8:	2301      	movs	r3, #1
 8005fda:	f7ff fe91 	bl	8005d00 <disk_write>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d11d      	bne.n	8006020 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff2:	1ad2      	subs	r2, r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d213      	bcs.n	8006024 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	78db      	ldrb	r3, [r3, #3]
 8006000:	2b02      	cmp	r3, #2
 8006002:	d10f      	bne.n	8006024 <sync_window+0x6e>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	7858      	ldrb	r0, [r3, #1]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	441a      	add	r2, r3
 8006018:	2301      	movs	r3, #1
 800601a:	f7ff fe71 	bl	8005d00 <disk_write>
 800601e:	e001      	b.n	8006024 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8006020:	2301      	movs	r3, #1
 8006022:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8006024:	7bfb      	ldrb	r3, [r7, #15]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b084      	sub	sp, #16
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	429a      	cmp	r2, r3
 8006044:	d01b      	beq.n	800607e <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7ff ffb5 	bl	8005fb6 <sync_window>
 800604c:	4603      	mov	r3, r0
 800604e:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d113      	bne.n	800607e <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	7858      	ldrb	r0, [r3, #1]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006060:	2301      	movs	r3, #1
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	f7ff fe1a 	bl	8005c9c <disk_read>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d004      	beq.n	8006078 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 800606e:	f04f 33ff 	mov.w	r3, #4294967295
 8006072:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006074:	2301      	movs	r3, #1
 8006076:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800607e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7ff ff90 	bl	8005fb6 <sync_window>
 8006096:	4603      	mov	r3, r0
 8006098:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d158      	bne.n	8006152 <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d148      	bne.n	800613a <sync_fs+0xb2>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	795b      	ldrb	r3, [r3, #5]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d144      	bne.n	800613a <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3334      	adds	r3, #52	@ 0x34
 80060b4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80060b8:	2100      	movs	r1, #0
 80060ba:	4618      	mov	r0, r3
 80060bc:	f00c fcc2 	bl	8012a44 <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3334      	adds	r3, #52	@ 0x34
 80060c4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80060c8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7ff ff09 	bl	8005ee4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	3334      	adds	r3, #52	@ 0x34
 80060d6:	4921      	ldr	r1, [pc, #132]	@ (800615c <sync_fs+0xd4>)
 80060d8:	4618      	mov	r0, r3
 80060da:	f7ff ff1e 	bl	8005f1a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	3334      	adds	r3, #52	@ 0x34
 80060e2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80060e6:	491e      	ldr	r1, [pc, #120]	@ (8006160 <sync_fs+0xd8>)
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7ff ff16 	bl	8005f1a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	3334      	adds	r3, #52	@ 0x34
 80060f2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	4619      	mov	r1, r3
 80060fc:	4610      	mov	r0, r2
 80060fe:	f7ff ff0c 	bl	8005f1a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	3334      	adds	r3, #52	@ 0x34
 8006106:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	4619      	mov	r1, r3
 8006110:	4610      	mov	r0, r2
 8006112:	f7ff ff02 	bl	8005f1a <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	7858      	ldrb	r0, [r3, #1]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800612e:	2301      	movs	r3, #1
 8006130:	f7ff fde6 	bl	8005d00 <disk_write>
			fs->fsi_flag = 0;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	785b      	ldrb	r3, [r3, #1]
 800613e:	2200      	movs	r2, #0
 8006140:	2100      	movs	r1, #0
 8006142:	4618      	mov	r0, r3
 8006144:	f7ff fe10 	bl	8005d68 <disk_ioctl>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <sync_fs+0xca>
 800614e:	2301      	movs	r3, #1
 8006150:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006152:	7bfb      	ldrb	r3, [r7, #15]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	41615252 	.word	0x41615252
 8006160:	61417272 	.word	0x61417272

08006164 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	3b02      	subs	r3, #2
 8006172:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	3b02      	subs	r3, #2
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	429a      	cmp	r2, r3
 800617e:	d301      	bcc.n	8006184 <clst2sect+0x20>
 8006180:	2300      	movs	r3, #0
 8006182:	e008      	b.n	8006196 <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	895b      	ldrh	r3, [r3, #10]
 800618c:	4619      	mov	r1, r3
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	fb01 f303 	mul.w	r3, r1, r3
 8006194:	4413      	add	r3, r2
}
 8006196:	4618      	mov	r0, r3
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b086      	sub	sp, #24
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d904      	bls.n	80061c2 <get_fat+0x20>
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d302      	bcc.n	80061c8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80061c2:	2301      	movs	r3, #1
 80061c4:	617b      	str	r3, [r7, #20]
 80061c6:	e0ba      	b.n	800633e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80061c8:	f04f 33ff 	mov.w	r3, #4294967295
 80061cc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	2b03      	cmp	r3, #3
 80061d4:	f000 8082 	beq.w	80062dc <get_fat+0x13a>
 80061d8:	2b03      	cmp	r3, #3
 80061da:	f300 80a6 	bgt.w	800632a <get_fat+0x188>
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d002      	beq.n	80061e8 <get_fat+0x46>
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d055      	beq.n	8006292 <get_fat+0xf0>
 80061e6:	e0a0      	b.n	800632a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	085b      	lsrs	r3, r3, #1
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	4413      	add	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	899b      	ldrh	r3, [r3, #12]
 80061fe:	4619      	mov	r1, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	fbb3 f3f1 	udiv	r3, r3, r1
 8006206:	4413      	add	r3, r2
 8006208:	4619      	mov	r1, r3
 800620a:	6938      	ldr	r0, [r7, #16]
 800620c:	f7ff ff0f 	bl	800602e <move_window>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	f040 808c 	bne.w	8006330 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	60fa      	str	r2, [r7, #12]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	8992      	ldrh	r2, [r2, #12]
 8006222:	fbb3 f1f2 	udiv	r1, r3, r2
 8006226:	fb01 f202 	mul.w	r2, r1, r2
 800622a:	1a9b      	subs	r3, r3, r2
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	4413      	add	r3, r2
 8006230:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006234:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	899b      	ldrh	r3, [r3, #12]
 800623e:	4619      	mov	r1, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	fbb3 f3f1 	udiv	r3, r3, r1
 8006246:	4413      	add	r3, r2
 8006248:	4619      	mov	r1, r3
 800624a:	6938      	ldr	r0, [r7, #16]
 800624c:	f7ff feef 	bl	800602e <move_window>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d16e      	bne.n	8006334 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	899b      	ldrh	r3, [r3, #12]
 800625a:	461a      	mov	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006262:	fb01 f202 	mul.w	r2, r1, r2
 8006266:	1a9b      	subs	r3, r3, r2
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	4413      	add	r3, r2
 800626c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006270:	021b      	lsls	r3, r3, #8
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	4313      	orrs	r3, r2
 8006276:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <get_fat+0xe6>
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	091b      	lsrs	r3, r3, #4
 8006286:	e002      	b.n	800628e <get_fat+0xec>
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800628e:	617b      	str	r3, [r7, #20]
			break;
 8006290:	e055      	b.n	800633e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	899b      	ldrh	r3, [r3, #12]
 800629a:	085b      	lsrs	r3, r3, #1
 800629c:	b29b      	uxth	r3, r3
 800629e:	4619      	mov	r1, r3
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80062a6:	4413      	add	r3, r2
 80062a8:	4619      	mov	r1, r3
 80062aa:	6938      	ldr	r0, [r7, #16]
 80062ac:	f7ff febf 	bl	800602e <move_window>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d140      	bne.n	8006338 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	8992      	ldrh	r2, [r2, #12]
 80062c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80062c8:	fb00 f202 	mul.w	r2, r0, r2
 80062cc:	1a9b      	subs	r3, r3, r2
 80062ce:	440b      	add	r3, r1
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7ff fdcb 	bl	8005e6c <ld_word>
 80062d6:	4603      	mov	r3, r0
 80062d8:	617b      	str	r3, [r7, #20]
			break;
 80062da:	e030      	b.n	800633e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	899b      	ldrh	r3, [r3, #12]
 80062e4:	089b      	lsrs	r3, r3, #2
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	4619      	mov	r1, r3
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80062f0:	4413      	add	r3, r2
 80062f2:	4619      	mov	r1, r3
 80062f4:	6938      	ldr	r0, [r7, #16]
 80062f6:	f7ff fe9a 	bl	800602e <move_window>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d11d      	bne.n	800633c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	8992      	ldrh	r2, [r2, #12]
 800630e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006312:	fb00 f202 	mul.w	r2, r0, r2
 8006316:	1a9b      	subs	r3, r3, r2
 8006318:	440b      	add	r3, r1
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff fdbf 	bl	8005e9e <ld_dword>
 8006320:	4603      	mov	r3, r0
 8006322:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006326:	617b      	str	r3, [r7, #20]
			break;
 8006328:	e009      	b.n	800633e <get_fat+0x19c>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 800632a:	2301      	movs	r3, #1
 800632c:	617b      	str	r3, [r7, #20]
 800632e:	e006      	b.n	800633e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006330:	bf00      	nop
 8006332:	e004      	b.n	800633e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006334:	bf00      	nop
 8006336:	e002      	b.n	800633e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006338:	bf00      	nop
 800633a:	e000      	b.n	800633e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800633c:	bf00      	nop
		}
	}

	return val;
 800633e:	697b      	ldr	r3, [r7, #20]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3718      	adds	r7, #24
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006348:	b590      	push	{r4, r7, lr}
 800634a:	b089      	sub	sp, #36	@ 0x24
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006354:	2302      	movs	r3, #2
 8006356:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2b01      	cmp	r3, #1
 800635c:	f240 8109 	bls.w	8006572 <put_fat+0x22a>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	429a      	cmp	r2, r3
 8006368:	f080 8103 	bcs.w	8006572 <put_fat+0x22a>
		switch (fs->fs_type) {
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b03      	cmp	r3, #3
 8006372:	f000 80b6 	beq.w	80064e2 <put_fat+0x19a>
 8006376:	2b03      	cmp	r3, #3
 8006378:	f300 80fb 	bgt.w	8006572 <put_fat+0x22a>
 800637c:	2b01      	cmp	r3, #1
 800637e:	d003      	beq.n	8006388 <put_fat+0x40>
 8006380:	2b02      	cmp	r3, #2
 8006382:	f000 8083 	beq.w	800648c <put_fat+0x144>
 8006386:	e0f4      	b.n	8006572 <put_fat+0x22a>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	61bb      	str	r3, [r7, #24]
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	085b      	lsrs	r3, r3, #1
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	4413      	add	r3, r2
 8006394:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	899b      	ldrh	r3, [r3, #12]
 800639e:	4619      	mov	r1, r3
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80063a6:	4413      	add	r3, r2
 80063a8:	4619      	mov	r1, r3
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f7ff fe3f 	bl	800602e <move_window>
 80063b0:	4603      	mov	r3, r0
 80063b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80063b4:	7ffb      	ldrb	r3, [r7, #31]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f040 80d4 	bne.w	8006564 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	61ba      	str	r2, [r7, #24]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	8992      	ldrh	r2, [r2, #12]
 80063cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80063d0:	fb00 f202 	mul.w	r2, r0, r2
 80063d4:	1a9b      	subs	r3, r3, r2
 80063d6:	440b      	add	r3, r1
 80063d8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00d      	beq.n	8006400 <put_fat+0xb8>
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	b25b      	sxtb	r3, r3
 80063ea:	f003 030f 	and.w	r3, r3, #15
 80063ee:	b25a      	sxtb	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	b25b      	sxtb	r3, r3
 80063f4:	011b      	lsls	r3, r3, #4
 80063f6:	b25b      	sxtb	r3, r3
 80063f8:	4313      	orrs	r3, r2
 80063fa:	b25b      	sxtb	r3, r3
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	e001      	b.n	8006404 <put_fat+0xbc>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	b2db      	uxtb	r3, r3
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2201      	movs	r2, #1
 800640c:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	899b      	ldrh	r3, [r3, #12]
 8006416:	4619      	mov	r1, r3
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	fbb3 f3f1 	udiv	r3, r3, r1
 800641e:	4413      	add	r3, r2
 8006420:	4619      	mov	r1, r3
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f7ff fe03 	bl	800602e <move_window>
 8006428:	4603      	mov	r3, r0
 800642a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800642c:	7ffb      	ldrb	r3, [r7, #31]
 800642e:	2b00      	cmp	r3, #0
 8006430:	f040 809a 	bne.w	8006568 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	899b      	ldrh	r3, [r3, #12]
 800643e:	461a      	mov	r2, r3
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	fbb3 f0f2 	udiv	r0, r3, r2
 8006446:	fb00 f202 	mul.w	r2, r0, r2
 800644a:	1a9b      	subs	r3, r3, r2
 800644c:	440b      	add	r3, r1
 800644e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <put_fat+0x11a>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	091b      	lsrs	r3, r3, #4
 800645e:	b2db      	uxtb	r3, r3
 8006460:	e00e      	b.n	8006480 <put_fat+0x138>
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	b25b      	sxtb	r3, r3
 8006468:	f023 030f 	bic.w	r3, r3, #15
 800646c:	b25a      	sxtb	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	0a1b      	lsrs	r3, r3, #8
 8006472:	b25b      	sxtb	r3, r3
 8006474:	f003 030f 	and.w	r3, r3, #15
 8006478:	b25b      	sxtb	r3, r3
 800647a:	4313      	orrs	r3, r2
 800647c:	b25b      	sxtb	r3, r3
 800647e:	b2db      	uxtb	r3, r3
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2201      	movs	r2, #1
 8006488:	711a      	strb	r2, [r3, #4]
			break;
 800648a:	e072      	b.n	8006572 <put_fat+0x22a>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	899b      	ldrh	r3, [r3, #12]
 8006494:	085b      	lsrs	r3, r3, #1
 8006496:	b29b      	uxth	r3, r3
 8006498:	4619      	mov	r1, r3
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	fbb3 f3f1 	udiv	r3, r3, r1
 80064a0:	4413      	add	r3, r2
 80064a2:	4619      	mov	r1, r3
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f7ff fdc2 	bl	800602e <move_window>
 80064aa:	4603      	mov	r3, r0
 80064ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80064ae:	7ffb      	ldrb	r3, [r7, #31]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d15b      	bne.n	800656c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	005b      	lsls	r3, r3, #1
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	8992      	ldrh	r2, [r2, #12]
 80064c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80064c6:	fb00 f202 	mul.w	r2, r0, r2
 80064ca:	1a9b      	subs	r3, r3, r2
 80064cc:	440b      	add	r3, r1
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	b292      	uxth	r2, r2
 80064d2:	4611      	mov	r1, r2
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7ff fd05 	bl	8005ee4 <st_word>
			fs->wflag = 1;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2201      	movs	r2, #1
 80064de:	711a      	strb	r2, [r3, #4]
			break;
 80064e0:	e047      	b.n	8006572 <put_fat+0x22a>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	899b      	ldrh	r3, [r3, #12]
 80064ea:	089b      	lsrs	r3, r3, #2
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	4619      	mov	r1, r3
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80064f6:	4413      	add	r3, r2
 80064f8:	4619      	mov	r1, r3
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f7ff fd97 	bl	800602e <move_window>
 8006500:	4603      	mov	r3, r0
 8006502:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006504:	7ffb      	ldrb	r3, [r7, #31]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d132      	bne.n	8006570 <put_fat+0x228>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	8992      	ldrh	r2, [r2, #12]
 800651e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006522:	fb00 f202 	mul.w	r2, r0, r2
 8006526:	1a9b      	subs	r3, r3, r2
 8006528:	440b      	add	r3, r1
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff fcb7 	bl	8005e9e <ld_dword>
 8006530:	4603      	mov	r3, r0
 8006532:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006536:	4323      	orrs	r3, r4
 8006538:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	8992      	ldrh	r2, [r2, #12]
 8006548:	fbb3 f0f2 	udiv	r0, r3, r2
 800654c:	fb00 f202 	mul.w	r2, r0, r2
 8006550:	1a9b      	subs	r3, r3, r2
 8006552:	440b      	add	r3, r1
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	4618      	mov	r0, r3
 8006558:	f7ff fcdf 	bl	8005f1a <st_dword>
			fs->wflag = 1;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2201      	movs	r2, #1
 8006560:	711a      	strb	r2, [r3, #4]
			break;
 8006562:	e006      	b.n	8006572 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006564:	bf00      	nop
 8006566:	e004      	b.n	8006572 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006568:	bf00      	nop
 800656a:	e002      	b.n	8006572 <put_fat+0x22a>
			if (res != FR_OK) break;
 800656c:	bf00      	nop
 800656e:	e000      	b.n	8006572 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006570:	bf00      	nop
		}
	}
	return res;
 8006572:	7ffb      	ldrb	r3, [r7, #31]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3724      	adds	r7, #36	@ 0x24
 8006578:	46bd      	mov	sp, r7
 800657a:	bd90      	pop	{r4, r7, pc}

0800657c <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b088      	sub	sp, #32
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d904      	bls.n	80065a2 <remove_chain+0x26>
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d301      	bcc.n	80065a6 <remove_chain+0x2a>
 80065a2:	2302      	movs	r3, #2
 80065a4:	e04b      	b.n	800663e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00c      	beq.n	80065c6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80065ac:	f04f 32ff 	mov.w	r2, #4294967295
 80065b0:	6879      	ldr	r1, [r7, #4]
 80065b2:	69b8      	ldr	r0, [r7, #24]
 80065b4:	f7ff fec8 	bl	8006348 <put_fat>
 80065b8:	4603      	mov	r3, r0
 80065ba:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80065bc:	7ffb      	ldrb	r3, [r7, #31]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <remove_chain+0x4a>
 80065c2:	7ffb      	ldrb	r3, [r7, #31]
 80065c4:	e03b      	b.n	800663e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80065c6:	68b9      	ldr	r1, [r7, #8]
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f7ff fdea 	bl	80061a2 <get_fat>
 80065ce:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d031      	beq.n	800663a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d101      	bne.n	80065e0 <remove_chain+0x64>
 80065dc:	2302      	movs	r3, #2
 80065de:	e02e      	b.n	800663e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e6:	d101      	bne.n	80065ec <remove_chain+0x70>
 80065e8:	2301      	movs	r3, #1
 80065ea:	e028      	b.n	800663e <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80065ec:	2200      	movs	r2, #0
 80065ee:	68b9      	ldr	r1, [r7, #8]
 80065f0:	69b8      	ldr	r0, [r7, #24]
 80065f2:	f7ff fea9 	bl	8006348 <put_fat>
 80065f6:	4603      	mov	r3, r0
 80065f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80065fa:	7ffb      	ldrb	r3, [r7, #31]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <remove_chain+0x88>
 8006600:	7ffb      	ldrb	r3, [r7, #31]
 8006602:	e01c      	b.n	800663e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	695a      	ldr	r2, [r3, #20]
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	3b02      	subs	r3, #2
 800660e:	429a      	cmp	r2, r3
 8006610:	d20b      	bcs.n	800662a <remove_chain+0xae>
			fs->free_clst++;
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	795b      	ldrb	r3, [r3, #5]
 8006620:	f043 0301 	orr.w	r3, r3, #1
 8006624:	b2da      	uxtb	r2, r3
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	715a      	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	429a      	cmp	r2, r3
 8006636:	d3c6      	bcc.n	80065c6 <remove_chain+0x4a>
 8006638:	e000      	b.n	800663c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800663a:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3720      	adds	r7, #32
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b088      	sub	sp, #32
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10d      	bne.n	8006678 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d004      	beq.n	8006672 <create_chain+0x2c>
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	429a      	cmp	r2, r3
 8006670:	d31b      	bcc.n	80066aa <create_chain+0x64>
 8006672:	2301      	movs	r3, #1
 8006674:	61bb      	str	r3, [r7, #24]
 8006676:	e018      	b.n	80066aa <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7ff fd91 	bl	80061a2 <get_fat>
 8006680:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d801      	bhi.n	800668c <create_chain+0x46>
 8006688:	2301      	movs	r3, #1
 800668a:	e0a9      	b.n	80067e0 <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006692:	d101      	bne.n	8006698 <create_chain+0x52>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	e0a3      	b.n	80067e0 <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d201      	bcs.n	80066a6 <create_chain+0x60>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	e09c      	b.n	80067e0 <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <create_chain+0x70>
 80066b2:	2300      	movs	r3, #0
 80066b4:	e094      	b.n	80067e0 <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 80066b6:	2300      	movs	r3, #0
 80066b8:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d129      	bne.n	8006716 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	3301      	adds	r3, #1
 80066c6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	69fa      	ldr	r2, [r7, #28]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d301      	bcc.n	80066d6 <create_chain+0x90>
 80066d2:	2302      	movs	r3, #2
 80066d4:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 80066d6:	69f9      	ldr	r1, [r7, #28]
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7ff fd62 	bl	80061a2 <get_fat>
 80066de:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d003      	beq.n	80066ee <create_chain+0xa8>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ec:	d101      	bne.n	80066f2 <create_chain+0xac>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	e076      	b.n	80067e0 <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00e      	beq.n	8006716 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d906      	bls.n	8006712 <create_chain+0xcc>
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	429a      	cmp	r2, r3
 800670c:	d201      	bcs.n	8006712 <create_chain+0xcc>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8006712:	2300      	movs	r3, #0
 8006714:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d129      	bne.n	8006770 <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	3301      	adds	r3, #1
 8006724:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	69fa      	ldr	r2, [r7, #28]
 800672c:	429a      	cmp	r2, r3
 800672e:	d307      	bcc.n	8006740 <create_chain+0xfa>
					ncl = 2;
 8006730:	2302      	movs	r3, #2
 8006732:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8006734:	69fa      	ldr	r2, [r7, #28]
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	429a      	cmp	r2, r3
 800673a:	d901      	bls.n	8006740 <create_chain+0xfa>
 800673c:	2300      	movs	r3, #0
 800673e:	e04f      	b.n	80067e0 <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006740:	69f9      	ldr	r1, [r7, #28]
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7ff fd2d 	bl	80061a2 <get_fat>
 8006748:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00e      	beq.n	800676e <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d003      	beq.n	800675e <create_chain+0x118>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675c:	d101      	bne.n	8006762 <create_chain+0x11c>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	e03e      	b.n	80067e0 <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8006762:	69fa      	ldr	r2, [r7, #28]
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	429a      	cmp	r2, r3
 8006768:	d1da      	bne.n	8006720 <create_chain+0xda>
 800676a:	2300      	movs	r3, #0
 800676c:	e038      	b.n	80067e0 <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 800676e:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8006770:	f04f 32ff 	mov.w	r2, #4294967295
 8006774:	69f9      	ldr	r1, [r7, #28]
 8006776:	6938      	ldr	r0, [r7, #16]
 8006778:	f7ff fde6 	bl	8006348 <put_fat>
 800677c:	4603      	mov	r3, r0
 800677e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006780:	7dfb      	ldrb	r3, [r7, #23]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d109      	bne.n	800679a <create_chain+0x154>
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d006      	beq.n	800679a <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 800678c:	69fa      	ldr	r2, [r7, #28]
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	6938      	ldr	r0, [r7, #16]
 8006792:	f7ff fdd9 	bl	8006348 <put_fat>
 8006796:	4603      	mov	r3, r0
 8006798:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800679a:	7dfb      	ldrb	r3, [r7, #23]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d116      	bne.n	80067ce <create_chain+0x188>
		fs->last_clst = ncl;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	69fa      	ldr	r2, [r7, #28]
 80067a4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	695a      	ldr	r2, [r3, #20]
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	3b02      	subs	r3, #2
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d804      	bhi.n	80067be <create_chain+0x178>
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	695b      	ldr	r3, [r3, #20]
 80067b8:	1e5a      	subs	r2, r3, #1
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	795b      	ldrb	r3, [r3, #5]
 80067c2:	f043 0301 	orr.w	r3, r3, #1
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	715a      	strb	r2, [r3, #5]
 80067cc:	e007      	b.n	80067de <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80067ce:	7dfb      	ldrb	r3, [r7, #23]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d102      	bne.n	80067da <create_chain+0x194>
 80067d4:	f04f 33ff 	mov.w	r3, #4294967295
 80067d8:	e000      	b.n	80067dc <create_chain+0x196>
 80067da:	2301      	movs	r3, #1
 80067dc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80067de:	69fb      	ldr	r3, [r7, #28]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3720      	adds	r7, #32
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7ff fbdf 	bl	8005fb6 <sync_window>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <dir_clear+0x1a>
 80067fe:	2301      	movs	r3, #1
 8006800:	e036      	b.n	8006870 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8006802:	6839      	ldr	r1, [r7, #0]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff fcad 	bl	8006164 <clst2sect>
 800680a:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	631a      	str	r2, [r3, #48]	@ 0x30
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	3334      	adds	r3, #52	@ 0x34
 8006816:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800681a:	2100      	movs	r1, #0
 800681c:	4618      	mov	r0, r3
 800681e:	f00c f911 	bl	8012a44 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	3334      	adds	r3, #52	@ 0x34
 8006826:	60fb      	str	r3, [r7, #12]
 8006828:	2301      	movs	r3, #1
 800682a:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800682c:	2300      	movs	r3, #0
 800682e:	617b      	str	r3, [r7, #20]
 8006830:	e003      	b.n	800683a <dir_clear+0x52>
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	4413      	add	r3, r2
 8006838:	617b      	str	r3, [r7, #20]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	895b      	ldrh	r3, [r3, #10]
 800683e:	461a      	mov	r2, r3
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	4293      	cmp	r3, r2
 8006844:	d20b      	bcs.n	800685e <dir_clear+0x76>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	7858      	ldrb	r0, [r3, #1]
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	441a      	add	r2, r3
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	68f9      	ldr	r1, [r7, #12]
 8006854:	f7ff fa54 	bl	8005d00 <disk_write>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d0e9      	beq.n	8006832 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	895b      	ldrh	r3, [r3, #10]
 8006862:	461a      	mov	r2, r3
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	4293      	cmp	r3, r2
 8006868:	bf14      	ite	ne
 800686a:	2301      	movne	r3, #1
 800686c:	2300      	moveq	r3, #0
 800686e:	b2db      	uxtb	r3, r3
}
 8006870:	4618      	mov	r0, r3
 8006872:	3718      	adds	r7, #24
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800688e:	d204      	bcs.n	800689a <dir_sdi+0x22>
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	f003 031f 	and.w	r3, r3, #31
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <dir_sdi+0x26>
		return FR_INT_ERR;
 800689a:	2302      	movs	r3, #2
 800689c:	e071      	b.n	8006982 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d106      	bne.n	80068be <dir_sdi+0x46>
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d902      	bls.n	80068be <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068bc:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10c      	bne.n	80068de <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	095b      	lsrs	r3, r3, #5
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	8912      	ldrh	r2, [r2, #8]
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d301      	bcc.n	80068d4 <dir_sdi+0x5c>
 80068d0:	2302      	movs	r3, #2
 80068d2:	e056      	b.n	8006982 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	619a      	str	r2, [r3, #24]
 80068dc:	e02d      	b.n	800693a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	895b      	ldrh	r3, [r3, #10]
 80068e2:	461a      	mov	r2, r3
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	899b      	ldrh	r3, [r3, #12]
 80068e8:	fb02 f303 	mul.w	r3, r2, r3
 80068ec:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80068ee:	e019      	b.n	8006924 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6979      	ldr	r1, [r7, #20]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7ff fc54 	bl	80061a2 <get_fat>
 80068fa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006902:	d101      	bne.n	8006908 <dir_sdi+0x90>
 8006904:	2301      	movs	r3, #1
 8006906:	e03c      	b.n	8006982 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d904      	bls.n	8006918 <dir_sdi+0xa0>
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	429a      	cmp	r2, r3
 8006916:	d301      	bcc.n	800691c <dir_sdi+0xa4>
 8006918:	2302      	movs	r3, #2
 800691a:	e032      	b.n	8006982 <dir_sdi+0x10a>
			ofs -= csz;
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	429a      	cmp	r2, r3
 800692a:	d2e1      	bcs.n	80068f0 <dir_sdi+0x78>
		}
		dp->sect = clst2sect(fs, clst);
 800692c:	6979      	ldr	r1, [r7, #20]
 800692e:	6938      	ldr	r0, [r7, #16]
 8006930:	f7ff fc18 	bl	8006164 <clst2sect>
 8006934:	4602      	mov	r2, r0
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <dir_sdi+0xd4>
 8006948:	2302      	movs	r3, #2
 800694a:	e01a      	b.n	8006982 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	699a      	ldr	r2, [r3, #24]
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	899b      	ldrh	r3, [r3, #12]
 8006954:	4619      	mov	r1, r3
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	fbb3 f3f1 	udiv	r3, r3, r1
 800695c:	441a      	add	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	899b      	ldrh	r3, [r3, #12]
 800696c:	461a      	mov	r2, r3
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	fbb3 f0f2 	udiv	r0, r3, r2
 8006974:	fb00 f202 	mul.w	r2, r0, r2
 8006978:	1a9b      	subs	r3, r3, r2
 800697a:	18ca      	adds	r2, r1, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b086      	sub	sp, #24
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	3320      	adds	r3, #32
 80069a0:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069a8:	d302      	bcc.n	80069b0 <dir_next+0x26>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d101      	bne.n	80069bc <dir_next+0x32>
 80069b8:	2304      	movs	r3, #4
 80069ba:	e088      	b.n	8006ace <dir_next+0x144>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	899b      	ldrh	r3, [r3, #12]
 80069c0:	461a      	mov	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80069c8:	fb01 f202 	mul.w	r2, r1, r2
 80069cc:	1a9b      	subs	r3, r3, r2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d16a      	bne.n	8006aa8 <dir_next+0x11e>
		dp->sect++;				/* Next sector */
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10a      	bne.n	80069fa <dir_next+0x70>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	095b      	lsrs	r3, r3, #5
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	8912      	ldrh	r2, [r2, #8]
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d35b      	bcc.n	8006aa8 <dir_next+0x11e>
				dp->sect = 0; return FR_NO_FILE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	619a      	str	r2, [r3, #24]
 80069f6:	2304      	movs	r3, #4
 80069f8:	e069      	b.n	8006ace <dir_next+0x144>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	899b      	ldrh	r3, [r3, #12]
 80069fe:	461a      	mov	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	8952      	ldrh	r2, [r2, #10]
 8006a0a:	3a01      	subs	r2, #1
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d14a      	bne.n	8006aa8 <dir_next+0x11e>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4610      	mov	r0, r2
 8006a1c:	f7ff fbc1 	bl	80061a2 <get_fat>
 8006a20:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d801      	bhi.n	8006a2c <dir_next+0xa2>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	e050      	b.n	8006ace <dir_next+0x144>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a32:	d101      	bne.n	8006a38 <dir_next+0xae>
 8006a34:	2301      	movs	r3, #1
 8006a36:	e04a      	b.n	8006ace <dir_next+0x144>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d328      	bcc.n	8006a94 <dir_next+0x10a>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d104      	bne.n	8006a52 <dir_next+0xc8>
						dp->sect = 0; return FR_NO_FILE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	619a      	str	r2, [r3, #24]
 8006a4e:	2304      	movs	r3, #4
 8006a50:	e03d      	b.n	8006ace <dir_next+0x144>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	f7ff fdf3 	bl	8006646 <create_chain>
 8006a60:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <dir_next+0xe2>
 8006a68:	2307      	movs	r3, #7
 8006a6a:	e030      	b.n	8006ace <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d101      	bne.n	8006a76 <dir_next+0xec>
 8006a72:	2302      	movs	r3, #2
 8006a74:	e02b      	b.n	8006ace <dir_next+0x144>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7c:	d101      	bne.n	8006a82 <dir_next+0xf8>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e025      	b.n	8006ace <dir_next+0x144>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8006a82:	6979      	ldr	r1, [r7, #20]
 8006a84:	6938      	ldr	r0, [r7, #16]
 8006a86:	f7ff feaf 	bl	80067e8 <dir_clear>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <dir_next+0x10a>
 8006a90:	2301      	movs	r3, #1
 8006a92:	e01c      	b.n	8006ace <dir_next+0x144>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8006a9a:	6979      	ldr	r1, [r7, #20]
 8006a9c:	6938      	ldr	r0, [r7, #16]
 8006a9e:	f7ff fb61 	bl	8006164 <clst2sect>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	899b      	ldrh	r3, [r3, #12]
 8006ab8:	461a      	mov	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ac0:	fb00 f202 	mul.w	r2, r0, r2
 8006ac4:	1a9b      	subs	r3, r3, r2
 8006ac6:	18ca      	adds	r2, r1, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3718      	adds	r7, #24
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b086      	sub	sp, #24
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7ff fec5 	bl	8006878 <dir_sdi>
 8006aee:	4603      	mov	r3, r0
 8006af0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006af2:	7dfb      	ldrb	r3, [r7, #23]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d12b      	bne.n	8006b50 <dir_alloc+0x7a>
		n = 0;
 8006af8:	2300      	movs	r3, #0
 8006afa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	4619      	mov	r1, r3
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f7ff fa93 	bl	800602e <move_window>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d11d      	bne.n	8006b4e <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	2be5      	cmp	r3, #229	@ 0xe5
 8006b1a:	d004      	beq.n	8006b26 <dir_alloc+0x50>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	69db      	ldr	r3, [r3, #28]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d107      	bne.n	8006b36 <dir_alloc+0x60>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	613b      	str	r3, [r7, #16]
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d102      	bne.n	8006b3a <dir_alloc+0x64>
 8006b34:	e00c      	b.n	8006b50 <dir_alloc+0x7a>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 8006b36:	2300      	movs	r3, #0
 8006b38:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f7ff ff24 	bl	800698a <dir_next>
 8006b42:	4603      	mov	r3, r0
 8006b44:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8006b46:	7dfb      	ldrb	r3, [r7, #23]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d0d7      	beq.n	8006afc <dir_alloc+0x26>
 8006b4c:	e000      	b.n	8006b50 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006b4e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006b50:	7dfb      	ldrb	r3, [r7, #23]
 8006b52:	2b04      	cmp	r3, #4
 8006b54:	d101      	bne.n	8006b5a <dir_alloc+0x84>
 8006b56:	2307      	movs	r3, #7
 8006b58:	75fb      	strb	r3, [r7, #23]
	return res;
 8006b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3718      	adds	r7, #24
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	331a      	adds	r3, #26
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7ff f97a 	bl	8005e6c <ld_word>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2b03      	cmp	r3, #3
 8006b82:	d109      	bne.n	8006b98 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	3314      	adds	r3, #20
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff f96f 	bl	8005e6c <ld_word>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	041b      	lsls	r3, r3, #16
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006b98:	68fb      	ldr	r3, [r7, #12]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b084      	sub	sp, #16
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	60f8      	str	r0, [r7, #12]
 8006baa:	60b9      	str	r1, [r7, #8]
 8006bac:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	331a      	adds	r3, #26
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	b292      	uxth	r2, r2
 8006bb6:	4611      	mov	r1, r2
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7ff f993 	bl	8005ee4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d109      	bne.n	8006bda <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	f103 0214 	add.w	r2, r3, #20
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	0c1b      	lsrs	r3, r3, #16
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	f7ff f985 	bl	8005ee4 <st_word>
	}
}
 8006bda:	bf00      	nop
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b086      	sub	sp, #24
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7ff fe40 	bl	8006878 <dir_sdi>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006bfc:	7dfb      	ldrb	r3, [r7, #23]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <dir_find+0x24>
 8006c02:	7dfb      	ldrb	r3, [r7, #23]
 8006c04:	e03e      	b.n	8006c84 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6938      	ldr	r0, [r7, #16]
 8006c0e:	f7ff fa0e 	bl	800602e <move_window>
 8006c12:	4603      	mov	r3, r0
 8006c14:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006c16:	7dfb      	ldrb	r3, [r7, #23]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d12f      	bne.n	8006c7c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d102      	bne.n	8006c30 <dir_find+0x4e>
 8006c2a:	2304      	movs	r3, #4
 8006c2c:	75fb      	strb	r3, [r7, #23]
 8006c2e:	e028      	b.n	8006c82 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	330b      	adds	r3, #11
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	330b      	adds	r3, #11
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	f003 0308 	and.w	r3, r3, #8
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10a      	bne.n	8006c68 <dir_find+0x86>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	69d8      	ldr	r0, [r3, #28]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	3320      	adds	r3, #32
 8006c5a:	220b      	movs	r2, #11
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	f00b fee1 	bl	8012a24 <memcmp>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00b      	beq.n	8006c80 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006c68:	2100      	movs	r1, #0
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7ff fe8d 	bl	800698a <dir_next>
 8006c70:	4603      	mov	r3, r0
 8006c72:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006c74:	7dfb      	ldrb	r3, [r7, #23]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d0c5      	beq.n	8006c06 <dir_find+0x24>
 8006c7a:	e002      	b.n	8006c82 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006c7c:	bf00      	nop
 8006c7e:	e000      	b.n	8006c82 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006c80:	bf00      	nop

	return res;
 8006c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3718      	adds	r7, #24
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --n_ent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7ff ff1a 	bl	8006ad6 <dir_alloc>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d11c      	bne.n	8006ce6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	68b8      	ldr	r0, [r7, #8]
 8006cb4:	f7ff f9bb 	bl	800602e <move_window>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d111      	bne.n	8006ce6 <dir_register+0x5a>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	2100      	movs	r1, #0
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f00b feba 	bl	8012a44 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	69d8      	ldr	r0, [r3, #28]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	3320      	adds	r3, #32
 8006cd8:	220b      	movs	r2, #11
 8006cda:	4619      	mov	r1, r3
 8006cdc:	f00b ff36 	bl	8012b4c <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08a      	sub	sp, #40	@ 0x28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
	BYTE *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3320      	adds	r3, #32
 8006d04:	613b      	str	r3, [r7, #16]
	memset(sfn, ' ', 11);
 8006d06:	220b      	movs	r2, #11
 8006d08:	2120      	movs	r1, #32
 8006d0a:	6938      	ldr	r0, [r7, #16]
 8006d0c:	f00b fe9a 	bl	8012a44 <memset>
	si = i = 0; ni = 8;
 8006d10:	2300      	movs	r3, #0
 8006d12:	61bb      	str	r3, [r7, #24]
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	61fb      	str	r3, [r7, #28]
 8006d18:	2308      	movs	r3, #8
 8006d1a:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	1c5a      	adds	r2, r3, #1
 8006d20:	61fa      	str	r2, [r7, #28]
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	4413      	add	r3, r2
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d30:	2b20      	cmp	r3, #32
 8006d32:	f240 8089 	bls.w	8006e48 <create_name+0x158>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 8006d36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d3a:	2b2f      	cmp	r3, #47	@ 0x2f
 8006d3c:	d007      	beq.n	8006d4e <create_name+0x5e>
 8006d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d42:	2b5c      	cmp	r3, #92	@ 0x5c
 8006d44:	d110      	bne.n	8006d68 <create_name+0x78>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 8006d46:	e002      	b.n	8006d4e <create_name+0x5e>
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	61fb      	str	r3, [r7, #28]
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	4413      	add	r3, r2
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	2b2f      	cmp	r3, #47	@ 0x2f
 8006d58:	d0f6      	beq.n	8006d48 <create_name+0x58>
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	4413      	add	r3, r2
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	2b5c      	cmp	r3, #92	@ 0x5c
 8006d64:	d0f0      	beq.n	8006d48 <create_name+0x58>
			break;
 8006d66:	e070      	b.n	8006e4a <create_name+0x15a>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8006d68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d6e:	d003      	beq.n	8006d78 <create_name+0x88>
 8006d70:	69ba      	ldr	r2, [r7, #24]
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d30d      	bcc.n	8006d94 <create_name+0xa4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	2b0b      	cmp	r3, #11
 8006d7c:	d003      	beq.n	8006d86 <create_name+0x96>
 8006d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d82:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d84:	d001      	beq.n	8006d8a <create_name+0x9a>
 8006d86:	2306      	movs	r3, #6
 8006d88:	e081      	b.n	8006e8e <create_name+0x19e>
			i = 8; ni = 11;				/* Enter file extension field */
 8006d8a:	2308      	movs	r3, #8
 8006d8c:	61bb      	str	r3, [r7, #24]
 8006d8e:	230b      	movs	r3, #11
 8006d90:	623b      	str	r3, [r7, #32]
			continue;
 8006d92:	e058      	b.n	8006e46 <create_name+0x156>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
 8006d94:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	da07      	bge.n	8006dac <create_name+0xbc>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 8006d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006da0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006da4:	4a3c      	ldr	r2, [pc, #240]	@ (8006e98 <create_name+0x1a8>)
 8006da6:	5cd3      	ldrb	r3, [r2, r3]
 8006da8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 8006dac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7ff f8de 	bl	8005f72 <dbc_1st>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d024      	beq.n	8006e06 <create_name+0x116>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	61fa      	str	r2, [r7, #28]
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7ff f8e1 	bl	8005f94 <dbc_2nd>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d004      	beq.n	8006de2 <create_name+0xf2>
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d301      	bcc.n	8006de6 <create_name+0xf6>
 8006de2:	2306      	movs	r3, #6
 8006de4:	e053      	b.n	8006e8e <create_name+0x19e>
			sfn[i++] = c;
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	61ba      	str	r2, [r7, #24]
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	4413      	add	r3, r2
 8006df0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006df4:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	61ba      	str	r2, [r7, #24]
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	4413      	add	r3, r2
 8006e00:	7bfa      	ldrb	r2, [r7, #15]
 8006e02:	701a      	strb	r2, [r3, #0]
 8006e04:	e78a      	b.n	8006d1c <create_name+0x2c>
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006e06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	4823      	ldr	r0, [pc, #140]	@ (8006e9c <create_name+0x1ac>)
 8006e0e:	f00b fe21 	bl	8012a54 <strchr>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d001      	beq.n	8006e1c <create_name+0x12c>
 8006e18:	2306      	movs	r3, #6
 8006e1a:	e038      	b.n	8006e8e <create_name+0x19e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e20:	2b60      	cmp	r3, #96	@ 0x60
 8006e22:	d908      	bls.n	8006e36 <create_name+0x146>
 8006e24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e28:	2b7a      	cmp	r3, #122	@ 0x7a
 8006e2a:	d804      	bhi.n	8006e36 <create_name+0x146>
 8006e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e30:	3b20      	subs	r3, #32
 8006e32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			sfn[i++] = c;
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	1c5a      	adds	r2, r3, #1
 8006e3a:	61ba      	str	r2, [r7, #24]
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006e44:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 8006e46:	e769      	b.n	8006d1c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006e48:	bf00      	nop
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	441a      	add	r2, r3
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <create_name+0x16e>
 8006e5a:	2306      	movs	r3, #6
 8006e5c:	e017      	b.n	8006e8e <create_name+0x19e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	2be5      	cmp	r3, #229	@ 0xe5
 8006e64:	d102      	bne.n	8006e6c <create_name+0x17c>
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2205      	movs	r2, #5
 8006e6a:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 8006e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e70:	2b20      	cmp	r3, #32
 8006e72:	d905      	bls.n	8006e80 <create_name+0x190>
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	4413      	add	r3, r2
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	2b20      	cmp	r3, #32
 8006e7e:	d801      	bhi.n	8006e84 <create_name+0x194>
 8006e80:	2204      	movs	r2, #4
 8006e82:	e000      	b.n	8006e86 <create_name+0x196>
 8006e84:	2200      	movs	r2, #0
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	330b      	adds	r3, #11
 8006e8a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006e8c:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3728      	adds	r7, #40	@ 0x28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	08013ffc 	.word	0x08013ffc
 8006e9c:	08013f58 	.word	0x08013f58

08006ea0 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 8006eb0:	e002      	b.n	8006eb8 <follow_path+0x18>
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	603b      	str	r3, [r7, #0]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	2b2f      	cmp	r3, #47	@ 0x2f
 8006ebe:	d0f8      	beq.n	8006eb2 <follow_path+0x12>
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	2b5c      	cmp	r3, #92	@ 0x5c
 8006ec6:	d0f4      	beq.n	8006eb2 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	2b1f      	cmp	r3, #31
 8006ed4:	d80a      	bhi.n	8006eec <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2280      	movs	r2, #128	@ 0x80
 8006eda:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 8006ede:	2100      	movs	r1, #0
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7ff fcc9 	bl	8006878 <dir_sdi>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	75fb      	strb	r3, [r7, #23]
 8006eea:	e048      	b.n	8006f7e <follow_path+0xde>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006eec:	463b      	mov	r3, r7
 8006eee:	4619      	mov	r1, r3
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f7ff fefd 	bl	8006cf0 <create_name>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006efa:	7dfb      	ldrb	r3, [r7, #23]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d139      	bne.n	8006f74 <follow_path+0xd4>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f7ff fe6e 	bl	8006be2 <dir_find>
 8006f06:	4603      	mov	r3, r0
 8006f08:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8006f10:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 8006f12:	7dfb      	ldrb	r3, [r7, #23]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00a      	beq.n	8006f2e <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006f18:	7dfb      	ldrb	r3, [r7, #23]
 8006f1a:	2b04      	cmp	r3, #4
 8006f1c:	d12c      	bne.n	8006f78 <follow_path+0xd8>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
 8006f20:	f003 0304 	and.w	r3, r3, #4
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d127      	bne.n	8006f78 <follow_path+0xd8>
 8006f28:	2305      	movs	r3, #5
 8006f2a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006f2c:	e024      	b.n	8006f78 <follow_path+0xd8>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8006f2e:	7bfb      	ldrb	r3, [r7, #15]
 8006f30:	f003 0304 	and.w	r3, r3, #4
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d121      	bne.n	8006f7c <follow_path+0xdc>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	799b      	ldrb	r3, [r3, #6]
 8006f3c:	f003 0310 	and.w	r3, r3, #16
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d102      	bne.n	8006f4a <follow_path+0xaa>
				res = FR_NO_PATH; break;
 8006f44:	2305      	movs	r3, #5
 8006f46:	75fb      	strb	r3, [r7, #23]
 8006f48:	e019      	b.n	8006f7e <follow_path+0xde>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	8992      	ldrh	r2, [r2, #12]
 8006f58:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f5c:	fb00 f202 	mul.w	r2, r0, r2
 8006f60:	1a9b      	subs	r3, r3, r2
 8006f62:	440b      	add	r3, r1
 8006f64:	4619      	mov	r1, r3
 8006f66:	6938      	ldr	r0, [r7, #16]
 8006f68:	f7ff fdfc 	bl	8006b64 <ld_clust>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006f72:	e7bb      	b.n	8006eec <follow_path+0x4c>
			if (res != FR_OK) break;
 8006f74:	bf00      	nop
 8006f76:	e002      	b.n	8006f7e <follow_path+0xde>
				break;
 8006f78:	bf00      	nop
 8006f7a:	e000      	b.n	8006f7e <follow_path+0xde>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8006f7c:	bf00      	nop
			}
		}
	}

	return res;
 8006f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b08b      	sub	sp, #44	@ 0x2c
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 8006f90:	f04f 33ff 	mov.w	r3, #4294967295
 8006f94:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9e:	623b      	str	r3, [r7, #32]
	if (!tp) return vol;	/* Invalid path name? */
 8006fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <get_ldnumber+0x22>
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	e080      	b.n	80070ac <get_ldnumber+0x124>
	do {					/* Find a colon in the path */
		tc = *tt++;
 8006faa:	6a3b      	ldr	r3, [r7, #32]
 8006fac:	1c5a      	adds	r2, r3, #1
 8006fae:	623a      	str	r2, [r7, #32]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	77fb      	strb	r3, [r7, #31]
	} while (!IsTerminator(tc) && tc != ':');
 8006fb4:	7ffb      	ldrb	r3, [r7, #31]
 8006fb6:	2b20      	cmp	r3, #32
 8006fb8:	d902      	bls.n	8006fc0 <get_ldnumber+0x38>
 8006fba:	7ffb      	ldrb	r3, [r7, #31]
 8006fbc:	2b3a      	cmp	r3, #58	@ 0x3a
 8006fbe:	d1f4      	bne.n	8006faa <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8006fc0:	7ffb      	ldrb	r3, [r7, #31]
 8006fc2:	2b3a      	cmp	r3, #58	@ 0x3a
 8006fc4:	d11c      	bne.n	8007000 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8006fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	2b2f      	cmp	r3, #47	@ 0x2f
 8006fd0:	d90c      	bls.n	8006fec <get_ldnumber+0x64>
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	2b39      	cmp	r3, #57	@ 0x39
 8006fd8:	d808      	bhi.n	8006fec <get_ldnumber+0x64>
 8006fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fdc:	3302      	adds	r3, #2
 8006fde:	6a3a      	ldr	r2, [r7, #32]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d103      	bne.n	8006fec <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	3b30      	subs	r3, #48	@ 0x30
 8006fea:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	dc04      	bgt.n	8006ffc <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a3a      	ldr	r2, [r7, #32]
 8006ffa:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	e055      	b.n	80070ac <get_ldnumber+0x124>
	}
#if FF_STR_VOLUME_ID == 2		/* Unix style volume ID is enabled */
	if (*tp == '/') {			/* Is there a volume ID? */
 8007000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	2b2f      	cmp	r3, #47	@ 0x2f
 8007006:	d14e      	bne.n	80070a6 <get_ldnumber+0x11e>
		while (*(tp + 1) == '/') tp++;	/* Skip duplicated separator */
 8007008:	e002      	b.n	8007010 <get_ldnumber+0x88>
 800700a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700c:	3301      	adds	r3, #1
 800700e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007012:	3301      	adds	r3, #1
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2b2f      	cmp	r3, #47	@ 0x2f
 8007018:	d0f7      	beq.n	800700a <get_ldnumber+0x82>
		i = 0;
 800701a:	2300      	movs	r3, #0
 800701c:	61bb      	str	r3, [r7, #24]
		do {
			tt = tp; sp = VolumeStr[i]; /* Path name and this string volume ID */
 800701e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007020:	623b      	str	r3, [r7, #32]
 8007022:	4a25      	ldr	r2, [pc, #148]	@ (80070b8 <get_ldnumber+0x130>)
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800702a:	613b      	str	r3, [r7, #16]
			do {	/* Compare the volume ID with path name */
				c = *sp++; tc = *(++tt);
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	1c5a      	adds	r2, r3, #1
 8007030:	613a      	str	r2, [r7, #16]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	73fb      	strb	r3, [r7, #15]
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	3301      	adds	r3, #1
 800703a:	623b      	str	r3, [r7, #32]
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	77fb      	strb	r3, [r7, #31]
				if (IsLower(c)) c -= 0x20;
 8007042:	7bfb      	ldrb	r3, [r7, #15]
 8007044:	2b60      	cmp	r3, #96	@ 0x60
 8007046:	d905      	bls.n	8007054 <get_ldnumber+0xcc>
 8007048:	7bfb      	ldrb	r3, [r7, #15]
 800704a:	2b7a      	cmp	r3, #122	@ 0x7a
 800704c:	d802      	bhi.n	8007054 <get_ldnumber+0xcc>
 800704e:	7bfb      	ldrb	r3, [r7, #15]
 8007050:	3b20      	subs	r3, #32
 8007052:	73fb      	strb	r3, [r7, #15]
				if (IsLower(tc)) tc -= 0x20;
 8007054:	7ffb      	ldrb	r3, [r7, #31]
 8007056:	2b60      	cmp	r3, #96	@ 0x60
 8007058:	d905      	bls.n	8007066 <get_ldnumber+0xde>
 800705a:	7ffb      	ldrb	r3, [r7, #31]
 800705c:	2b7a      	cmp	r3, #122	@ 0x7a
 800705e:	d802      	bhi.n	8007066 <get_ldnumber+0xde>
 8007060:	7ffb      	ldrb	r3, [r7, #31]
 8007062:	3b20      	subs	r3, #32
 8007064:	77fb      	strb	r3, [r7, #31]
			} while (c && (TCHAR)c == tc);
 8007066:	7bfb      	ldrb	r3, [r7, #15]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d003      	beq.n	8007074 <get_ldnumber+0xec>
 800706c:	7bfa      	ldrb	r2, [r7, #15]
 800706e:	7ffb      	ldrb	r3, [r7, #31]
 8007070:	429a      	cmp	r2, r3
 8007072:	d0db      	beq.n	800702c <get_ldnumber+0xa4>
		} while ((c || (tc != '/' && !IsTerminator(tc))) && ++i < FF_VOLUMES);	/* Repeat for each ID until pattern match */
 8007074:	7bfb      	ldrb	r3, [r7, #15]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d105      	bne.n	8007086 <get_ldnumber+0xfe>
 800707a:	7ffb      	ldrb	r3, [r7, #31]
 800707c:	2b2f      	cmp	r3, #47	@ 0x2f
 800707e:	d008      	beq.n	8007092 <get_ldnumber+0x10a>
 8007080:	7ffb      	ldrb	r3, [r7, #31]
 8007082:	2b20      	cmp	r3, #32
 8007084:	d905      	bls.n	8007092 <get_ldnumber+0x10a>
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	3301      	adds	r3, #1
 800708a:	61bb      	str	r3, [r7, #24]
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	2b01      	cmp	r3, #1
 8007090:	ddc5      	ble.n	800701e <get_ldnumber+0x96>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	2b01      	cmp	r3, #1
 8007096:	dc04      	bgt.n	80070a2 <get_ldnumber+0x11a>
			vol = i;		/* Drive number */
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a3a      	ldr	r2, [r7, #32]
 80070a0:	601a      	str	r2, [r3, #0]
		}
		return vol;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	e002      	b.n	80070ac <get_ldnumber+0x124>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 80070a6:	2300      	movs	r3, #0
 80070a8:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 80070aa:	697b      	ldr	r3, [r7, #20]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	372c      	adds	r7, #44	@ 0x2c
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	20000004 	.word	0x20000004

080070bc <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	711a      	strb	r2, [r3, #4]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f04f 32ff 	mov.w	r2, #4294967295
 80070d2:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 80070d4:	6839      	ldr	r1, [r7, #0]
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7fe ffa9 	bl	800602e <move_window>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <check_fs+0x2a>
 80070e2:	2304      	movs	r3, #4
 80070e4:	e088      	b.n	80071f8 <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	3334      	adds	r3, #52	@ 0x34
 80070ea:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fe febc 	bl	8005e6c <ld_word>
 80070f4:	4603      	mov	r3, r0
 80070f6:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80070fe:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 8007100:	7b7b      	ldrb	r3, [r7, #13]
 8007102:	2beb      	cmp	r3, #235	@ 0xeb
 8007104:	d005      	beq.n	8007112 <check_fs+0x56>
 8007106:	7b7b      	ldrb	r3, [r7, #13]
 8007108:	2be9      	cmp	r3, #233	@ 0xe9
 800710a:	d002      	beq.n	8007112 <check_fs+0x56>
 800710c:	7b7b      	ldrb	r3, [r7, #13]
 800710e:	2be8      	cmp	r3, #232	@ 0xe8
 8007110:	d16a      	bne.n	80071e8 <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 8007112:	89fb      	ldrh	r3, [r7, #14]
 8007114:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8007118:	4293      	cmp	r3, r2
 800711a:	d10c      	bne.n	8007136 <check_fs+0x7a>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	3334      	adds	r3, #52	@ 0x34
 8007120:	3352      	adds	r3, #82	@ 0x52
 8007122:	2208      	movs	r2, #8
 8007124:	4936      	ldr	r1, [pc, #216]	@ (8007200 <check_fs+0x144>)
 8007126:	4618      	mov	r0, r3
 8007128:	f00b fc7c 	bl	8012a24 <memcmp>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 8007132:	2300      	movs	r3, #0
 8007134:	e060      	b.n	80071f8 <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	3334      	adds	r3, #52	@ 0x34
 800713a:	330b      	adds	r3, #11
 800713c:	4618      	mov	r0, r3
 800713e:	f7fe fe95 	bl	8005e6c <ld_word>
 8007142:	4603      	mov	r3, r0
 8007144:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800714c:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 800714e:	897a      	ldrh	r2, [r7, #10]
 8007150:	897b      	ldrh	r3, [r7, #10]
 8007152:	3b01      	subs	r3, #1
 8007154:	4013      	ands	r3, r2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d146      	bne.n	80071e8 <check_fs+0x12c>
 800715a:	897b      	ldrh	r3, [r7, #10]
 800715c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007160:	d342      	bcc.n	80071e8 <check_fs+0x12c>
 8007162:	897b      	ldrh	r3, [r7, #10]
 8007164:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007168:	d83e      	bhi.n	80071e8 <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800716a:	7b7b      	ldrb	r3, [r7, #13]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d03b      	beq.n	80071e8 <check_fs+0x12c>
 8007170:	7b7a      	ldrb	r2, [r7, #13]
 8007172:	7b7b      	ldrb	r3, [r7, #13]
 8007174:	3b01      	subs	r3, #1
 8007176:	4013      	ands	r3, r2
 8007178:	2b00      	cmp	r3, #0
 800717a:	d135      	bne.n	80071e8 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3334      	adds	r3, #52	@ 0x34
 8007180:	330e      	adds	r3, #14
 8007182:	4618      	mov	r0, r3
 8007184:	f7fe fe72 	bl	8005e6c <ld_word>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d02c      	beq.n	80071e8 <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007194:	3b01      	subs	r3, #1
 8007196:	2b01      	cmp	r3, #1
 8007198:	d826      	bhi.n	80071e8 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	3334      	adds	r3, #52	@ 0x34
 800719e:	3311      	adds	r3, #17
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fe fe63 	bl	8005e6c <ld_word>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d01d      	beq.n	80071e8 <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	3334      	adds	r3, #52	@ 0x34
 80071b0:	3313      	adds	r3, #19
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7fe fe5a 	bl	8005e6c <ld_word>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80071bc:	d809      	bhi.n	80071d2 <check_fs+0x116>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	3334      	adds	r3, #52	@ 0x34
 80071c2:	3320      	adds	r3, #32
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7fe fe6a 	bl	8005e9e <ld_dword>
 80071ca:	4603      	mov	r3, r0
 80071cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071d0:	d30a      	bcc.n	80071e8 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	3334      	adds	r3, #52	@ 0x34
 80071d6:	3316      	adds	r3, #22
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fe fe47 	bl	8005e6c <ld_word>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 80071e4:	2300      	movs	r3, #0
 80071e6:	e007      	b.n	80071f8 <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 80071e8:	89fb      	ldrh	r3, [r7, #14]
 80071ea:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d101      	bne.n	80071f6 <check_fs+0x13a>
 80071f2:	2302      	movs	r3, #2
 80071f4:	e000      	b.n	80071f8 <check_fs+0x13c>
 80071f6:	2303      	movs	r3, #3
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	08013f68 	.word	0x08013f68

08007204 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b088      	sub	sp, #32
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 800720e:	2100      	movs	r1, #0
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7ff ff53 	bl	80070bc <check_fs>
 8007216:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	2b02      	cmp	r3, #2
 800721c:	d007      	beq.n	800722e <find_volume+0x2a>
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	2b02      	cmp	r3, #2
 8007222:	d802      	bhi.n	800722a <find_volume+0x26>
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <find_volume+0x2a>
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	e045      	b.n	80072ba <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800722e:	2300      	movs	r3, #0
 8007230:	61fb      	str	r3, [r7, #28]
 8007232:	e014      	b.n	800725e <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	011b      	lsls	r3, r3, #4
 800723e:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 8007242:	4413      	add	r3, r2
 8007244:	4618      	mov	r0, r3
 8007246:	f7fe fe2a 	bl	8005e9e <ld_dword>
 800724a:	4602      	mov	r2, r0
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	3320      	adds	r3, #32
 8007252:	443b      	add	r3, r7
 8007254:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	3301      	adds	r3, #1
 800725c:	61fb      	str	r3, [r7, #28]
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	2b03      	cmp	r3, #3
 8007262:	d9e7      	bls.n	8007234 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d002      	beq.n	8007270 <find_volume+0x6c>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	3b01      	subs	r3, #1
 800726e:	e000      	b.n	8007272 <find_volume+0x6e>
 8007270:	2300      	movs	r3, #0
 8007272:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	3320      	adds	r3, #32
 800727a:	443b      	add	r3, r7
 800727c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00b      	beq.n	800729c <find_volume+0x98>
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	3320      	adds	r3, #32
 800728a:	443b      	add	r3, r7
 800728c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8007290:	4619      	mov	r1, r3
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7ff ff12 	bl	80070bc <check_fs>
 8007298:	4603      	mov	r3, r0
 800729a:	e000      	b.n	800729e <find_volume+0x9a>
 800729c:	2303      	movs	r3, #3
 800729e:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d108      	bne.n	80072b8 <find_volume+0xb4>
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d905      	bls.n	80072b8 <find_volume+0xb4>
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	3301      	adds	r3, #1
 80072b0:	61fb      	str	r3, [r7, #28]
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	2b03      	cmp	r3, #3
 80072b6:	d9dd      	bls.n	8007274 <find_volume+0x70>
	return fmt;
 80072b8:	69bb      	ldr	r3, [r7, #24]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3720      	adds	r7, #32
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
	...

080072c4 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b090      	sub	sp, #64	@ 0x40
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	4613      	mov	r3, r2
 80072d0:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	2200      	movs	r2, #0
 80072d6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f7ff fe55 	bl	8006f88 <get_ldnumber>
 80072de:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 80072e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	da01      	bge.n	80072ea <mount_volume+0x26>
 80072e6:	230b      	movs	r3, #11
 80072e8:	e207      	b.n	80076fa <mount_volume+0x436>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 80072ea:	4aa2      	ldr	r2, [pc, #648]	@ (8007574 <mount_volume+0x2b0>)
 80072ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 80072f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <mount_volume+0x3a>
 80072fa:	230c      	movs	r3, #12
 80072fc:	e1fd      	b.n	80076fa <mount_volume+0x436>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007302:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007304:	79fb      	ldrb	r3, [r7, #7]
 8007306:	f023 0301 	bic.w	r3, r3, #1
 800730a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800730c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d01a      	beq.n	800734a <mount_volume+0x86>
		stat = disk_status(fs->pdrv);
 8007314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007316:	785b      	ldrb	r3, [r3, #1]
 8007318:	4618      	mov	r0, r3
 800731a:	f7fe fc6f 	bl	8005bfc <disk_status>
 800731e:	4603      	mov	r3, r0
 8007320:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007324:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10c      	bne.n	800734a <mount_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007330:	79fb      	ldrb	r3, [r7, #7]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d007      	beq.n	8007346 <mount_volume+0x82>
 8007336:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800733a:	f003 0304 	and.w	r3, r3, #4
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <mount_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007342:	230a      	movs	r3, #10
 8007344:	e1d9      	b.n	80076fa <mount_volume+0x436>
			}
			return FR_OK;				/* The filesystem object is already valid */
 8007346:	2300      	movs	r3, #0
 8007348:	e1d7      	b.n	80076fa <mount_volume+0x436>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 800734a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800734c:	2200      	movs	r2, #0
 800734e:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8007350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007352:	785b      	ldrb	r3, [r3, #1]
 8007354:	4618      	mov	r0, r3
 8007356:	f7fe fc79 	bl	8005c4c <disk_initialize>
 800735a:	4603      	mov	r3, r0
 800735c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007360:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007364:	f003 0301 	and.w	r3, r3, #1
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <mount_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800736c:	2303      	movs	r3, #3
 800736e:	e1c4      	b.n	80076fa <mount_volume+0x436>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007370:	79fb      	ldrb	r3, [r7, #7]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d007      	beq.n	8007386 <mount_volume+0xc2>
 8007376:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800737a:	f003 0304 	and.w	r3, r3, #4
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <mount_volume+0xc2>
		return FR_WRITE_PROTECTED;
 8007382:	230a      	movs	r3, #10
 8007384:	e1b9      	b.n	80076fa <mount_volume+0x436>
	}
#if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007388:	7858      	ldrb	r0, [r3, #1]
 800738a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800738c:	330c      	adds	r3, #12
 800738e:	461a      	mov	r2, r3
 8007390:	2102      	movs	r1, #2
 8007392:	f7fe fce9 	bl	8005d68 <disk_ioctl>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d001      	beq.n	80073a0 <mount_volume+0xdc>
 800739c:	2301      	movs	r3, #1
 800739e:	e1ac      	b.n	80076fa <mount_volume+0x436>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80073a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a2:	899b      	ldrh	r3, [r3, #12]
 80073a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073a8:	d80d      	bhi.n	80073c6 <mount_volume+0x102>
 80073aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ac:	899b      	ldrh	r3, [r3, #12]
 80073ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073b2:	d308      	bcc.n	80073c6 <mount_volume+0x102>
 80073b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b6:	899b      	ldrh	r3, [r3, #12]
 80073b8:	461a      	mov	r2, r3
 80073ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073bc:	899b      	ldrh	r3, [r3, #12]
 80073be:	3b01      	subs	r3, #1
 80073c0:	4013      	ands	r3, r2
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <mount_volume+0x106>
 80073c6:	2301      	movs	r3, #1
 80073c8:	e197      	b.n	80076fa <mount_volume+0x436>
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 80073ca:	2100      	movs	r1, #0
 80073cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073ce:	f7ff ff19 	bl	8007204 <find_volume>
 80073d2:	6338      	str	r0, [r7, #48]	@ 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 80073d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d6:	2b04      	cmp	r3, #4
 80073d8:	d101      	bne.n	80073de <mount_volume+0x11a>
 80073da:	2301      	movs	r3, #1
 80073dc:	e18d      	b.n	80076fa <mount_volume+0x436>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80073de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d901      	bls.n	80073e8 <mount_volume+0x124>
 80073e4:	230d      	movs	r3, #13
 80073e6:	e188      	b.n	80076fa <mount_volume+0x436>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 80073e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ec:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80073ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f0:	3334      	adds	r3, #52	@ 0x34
 80073f2:	330b      	adds	r3, #11
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7fe fd39 	bl	8005e6c <ld_word>
 80073fa:	4603      	mov	r3, r0
 80073fc:	461a      	mov	r2, r3
 80073fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007400:	899b      	ldrh	r3, [r3, #12]
 8007402:	429a      	cmp	r2, r3
 8007404:	d001      	beq.n	800740a <mount_volume+0x146>
 8007406:	230d      	movs	r3, #13
 8007408:	e177      	b.n	80076fa <mount_volume+0x436>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800740a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740c:	3334      	adds	r3, #52	@ 0x34
 800740e:	3316      	adds	r3, #22
 8007410:	4618      	mov	r0, r3
 8007412:	f7fe fd2b 	bl	8005e6c <ld_word>
 8007416:	4603      	mov	r3, r0
 8007418:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800741a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800741c:	2b00      	cmp	r3, #0
 800741e:	d106      	bne.n	800742e <mount_volume+0x16a>
 8007420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007422:	3334      	adds	r3, #52	@ 0x34
 8007424:	3324      	adds	r3, #36	@ 0x24
 8007426:	4618      	mov	r0, r3
 8007428:	f7fe fd39 	bl	8005e9e <ld_dword>
 800742c:	63b8      	str	r0, [r7, #56]	@ 0x38
		fs->fsize = fasize;
 800742e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007430:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007432:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007436:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800743a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800743c:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800743e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007440:	78db      	ldrb	r3, [r3, #3]
 8007442:	2b01      	cmp	r3, #1
 8007444:	d005      	beq.n	8007452 <mount_volume+0x18e>
 8007446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007448:	78db      	ldrb	r3, [r3, #3]
 800744a:	2b02      	cmp	r3, #2
 800744c:	d001      	beq.n	8007452 <mount_volume+0x18e>
 800744e:	230d      	movs	r3, #13
 8007450:	e153      	b.n	80076fa <mount_volume+0x436>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007454:	78db      	ldrb	r3, [r3, #3]
 8007456:	461a      	mov	r2, r3
 8007458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800745a:	fb02 f303 	mul.w	r3, r2, r3
 800745e:	63bb      	str	r3, [r7, #56]	@ 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007462:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007466:	461a      	mov	r2, r3
 8007468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746a:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800746c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746e:	895b      	ldrh	r3, [r3, #10]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d008      	beq.n	8007486 <mount_volume+0x1c2>
 8007474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007476:	895b      	ldrh	r3, [r3, #10]
 8007478:	461a      	mov	r2, r3
 800747a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747c:	895b      	ldrh	r3, [r3, #10]
 800747e:	3b01      	subs	r3, #1
 8007480:	4013      	ands	r3, r2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d001      	beq.n	800748a <mount_volume+0x1c6>
 8007486:	230d      	movs	r3, #13
 8007488:	e137      	b.n	80076fa <mount_volume+0x436>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800748a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748c:	3334      	adds	r3, #52	@ 0x34
 800748e:	3311      	adds	r3, #17
 8007490:	4618      	mov	r0, r3
 8007492:	f7fe fceb 	bl	8005e6c <ld_word>
 8007496:	4603      	mov	r3, r0
 8007498:	461a      	mov	r2, r3
 800749a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749c:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800749e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a0:	891b      	ldrh	r3, [r3, #8]
 80074a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074a4:	8992      	ldrh	r2, [r2, #12]
 80074a6:	0952      	lsrs	r2, r2, #5
 80074a8:	b292      	uxth	r2, r2
 80074aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80074ae:	fb01 f202 	mul.w	r2, r1, r2
 80074b2:	1a9b      	subs	r3, r3, r2
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <mount_volume+0x1fa>
 80074ba:	230d      	movs	r3, #13
 80074bc:	e11d      	b.n	80076fa <mount_volume+0x436>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80074be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c0:	3334      	adds	r3, #52	@ 0x34
 80074c2:	3313      	adds	r3, #19
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7fe fcd1 	bl	8005e6c <ld_word>
 80074ca:	4603      	mov	r3, r0
 80074cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80074ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d106      	bne.n	80074e2 <mount_volume+0x21e>
 80074d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d6:	3334      	adds	r3, #52	@ 0x34
 80074d8:	3320      	adds	r3, #32
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fe fcdf 	bl	8005e9e <ld_dword>
 80074e0:	63f8      	str	r0, [r7, #60]	@ 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80074e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e4:	3334      	adds	r3, #52	@ 0x34
 80074e6:	330e      	adds	r3, #14
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7fe fcbf 	bl	8005e6c <ld_word>
 80074ee:	4603      	mov	r3, r0
 80074f0:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80074f2:	8bfb      	ldrh	r3, [r7, #30]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d101      	bne.n	80074fc <mount_volume+0x238>
 80074f8:	230d      	movs	r3, #13
 80074fa:	e0fe      	b.n	80076fa <mount_volume+0x436>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80074fc:	8bfa      	ldrh	r2, [r7, #30]
 80074fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007500:	4413      	add	r3, r2
 8007502:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007504:	8911      	ldrh	r1, [r2, #8]
 8007506:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007508:	8992      	ldrh	r2, [r2, #12]
 800750a:	0952      	lsrs	r2, r2, #5
 800750c:	b292      	uxth	r2, r2
 800750e:	fbb1 f2f2 	udiv	r2, r1, r2
 8007512:	b292      	uxth	r2, r2
 8007514:	4413      	add	r3, r2
 8007516:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007518:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	429a      	cmp	r2, r3
 800751e:	d201      	bcs.n	8007524 <mount_volume+0x260>
 8007520:	230d      	movs	r3, #13
 8007522:	e0ea      	b.n	80076fa <mount_volume+0x436>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007524:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800752c:	8952      	ldrh	r2, [r2, #10]
 800752e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007532:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <mount_volume+0x27a>
 800753a:	230d      	movs	r3, #13
 800753c:	e0dd      	b.n	80076fa <mount_volume+0x436>
		fmt = 0;
 800753e:	2300      	movs	r3, #0
 8007540:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	4a0c      	ldr	r2, [pc, #48]	@ (8007578 <mount_volume+0x2b4>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d801      	bhi.n	800754e <mount_volume+0x28a>
 800754a:	2303      	movs	r3, #3
 800754c:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007554:	4293      	cmp	r3, r2
 8007556:	d801      	bhi.n	800755c <mount_volume+0x298>
 8007558:	2302      	movs	r3, #2
 800755a:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007562:	4293      	cmp	r3, r2
 8007564:	d801      	bhi.n	800756a <mount_volume+0x2a6>
 8007566:	2301      	movs	r3, #1
 8007568:	633b      	str	r3, [r7, #48]	@ 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 800756a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756c:	2b00      	cmp	r3, #0
 800756e:	d105      	bne.n	800757c <mount_volume+0x2b8>
 8007570:	230d      	movs	r3, #13
 8007572:	e0c2      	b.n	80076fa <mount_volume+0x436>
 8007574:	20005040 	.word	0x20005040
 8007578:	0ffffff5 	.word	0x0ffffff5

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	1c9a      	adds	r2, r3, #2
 8007580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007582:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007586:	6a3a      	ldr	r2, [r7, #32]
 8007588:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800758a:	8bfa      	ldrh	r2, [r7, #30]
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	441a      	add	r2, r3
 8007590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007592:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007594:	6a3a      	ldr	r2, [r7, #32]
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	441a      	add	r2, r3
 800759a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800759c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800759e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d11e      	bne.n	80075e2 <mount_volume+0x31e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80075a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a6:	3334      	adds	r3, #52	@ 0x34
 80075a8:	332a      	adds	r3, #42	@ 0x2a
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7fe fc5e 	bl	8005e6c <ld_word>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <mount_volume+0x2f6>
 80075b6:	230d      	movs	r3, #13
 80075b8:	e09f      	b.n	80076fa <mount_volume+0x436>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80075ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075bc:	891b      	ldrh	r3, [r3, #8]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d001      	beq.n	80075c6 <mount_volume+0x302>
 80075c2:	230d      	movs	r3, #13
 80075c4:	e099      	b.n	80076fa <mount_volume+0x436>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80075c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c8:	3334      	adds	r3, #52	@ 0x34
 80075ca:	332c      	adds	r3, #44	@ 0x2c
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7fe fc66 	bl	8005e9e <ld_dword>
 80075d2:	4602      	mov	r2, r0
 80075d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d6:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80075d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	637b      	str	r3, [r7, #52]	@ 0x34
 80075e0:	e01e      	b.n	8007620 <mount_volume+0x35c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80075e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e4:	891b      	ldrh	r3, [r3, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d101      	bne.n	80075ee <mount_volume+0x32a>
 80075ea:	230d      	movs	r3, #13
 80075ec:	e085      	b.n	80076fa <mount_volume+0x436>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80075ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80075f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f4:	441a      	add	r2, r3
 80075f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f8:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80075fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d103      	bne.n	8007608 <mount_volume+0x344>
 8007600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	005b      	lsls	r3, r3, #1
 8007606:	e00a      	b.n	800761e <mount_volume+0x35a>
 8007608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800760a:	699a      	ldr	r2, [r3, #24]
 800760c:	4613      	mov	r3, r2
 800760e:	005b      	lsls	r3, r3, #1
 8007610:	4413      	add	r3, r2
 8007612:	085a      	lsrs	r2, r3, #1
 8007614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800761e:	637b      	str	r3, [r7, #52]	@ 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007622:	69da      	ldr	r2, [r3, #28]
 8007624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007626:	899b      	ldrh	r3, [r3, #12]
 8007628:	4619      	mov	r1, r3
 800762a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800762c:	440b      	add	r3, r1
 800762e:	3b01      	subs	r3, #1
 8007630:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007632:	8989      	ldrh	r1, [r1, #12]
 8007634:	fbb3 f3f1 	udiv	r3, r3, r1
 8007638:	429a      	cmp	r2, r3
 800763a:	d201      	bcs.n	8007640 <mount_volume+0x37c>
 800763c:	230d      	movs	r3, #13
 800763e:	e05c      	b.n	80076fa <mount_volume+0x436>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007642:	f04f 32ff 	mov.w	r2, #4294967295
 8007646:	615a      	str	r2, [r3, #20]
 8007648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800764a:	695a      	ldr	r2, [r3, #20]
 800764c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800764e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007652:	2280      	movs	r2, #128	@ 0x80
 8007654:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8007656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007658:	2b03      	cmp	r3, #3
 800765a:	d13f      	bne.n	80076dc <mount_volume+0x418>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800765c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800765e:	3334      	adds	r3, #52	@ 0x34
 8007660:	3330      	adds	r3, #48	@ 0x30
 8007662:	4618      	mov	r0, r3
 8007664:	f7fe fc02 	bl	8005e6c <ld_word>
 8007668:	4603      	mov	r3, r0
 800766a:	2b01      	cmp	r3, #1
 800766c:	d136      	bne.n	80076dc <mount_volume+0x418>
			&& move_window(fs, bsect + 1) == FR_OK)
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	3301      	adds	r3, #1
 8007672:	4619      	mov	r1, r3
 8007674:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007676:	f7fe fcda 	bl	800602e <move_window>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d12d      	bne.n	80076dc <mount_volume+0x418>
		{
			fs->fsi_flag = 0;
 8007680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007682:	2200      	movs	r2, #0
 8007684:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8007686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007688:	3334      	adds	r3, #52	@ 0x34
 800768a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800768e:	4618      	mov	r0, r3
 8007690:	f7fe fbec 	bl	8005e6c <ld_word>
 8007694:	4603      	mov	r3, r0
 8007696:	461a      	mov	r2, r3
 8007698:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800769c:	429a      	cmp	r2, r3
 800769e:	d11d      	bne.n	80076dc <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80076a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a2:	3334      	adds	r3, #52	@ 0x34
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fe fbfa 	bl	8005e9e <ld_dword>
 80076aa:	4603      	mov	r3, r0
 80076ac:	4a15      	ldr	r2, [pc, #84]	@ (8007704 <mount_volume+0x440>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d114      	bne.n	80076dc <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80076b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b4:	3334      	adds	r3, #52	@ 0x34
 80076b6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7fe fbef 	bl	8005e9e <ld_dword>
 80076c0:	4603      	mov	r3, r0
 80076c2:	4a11      	ldr	r2, [pc, #68]	@ (8007708 <mount_volume+0x444>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d109      	bne.n	80076dc <mount_volume+0x418>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80076c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ca:	3334      	adds	r3, #52	@ 0x34
 80076cc:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7fe fbe4 	bl	8005e9e <ld_dword>
 80076d6:	4602      	mov	r2, r0
 80076d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076da:	611a      	str	r2, [r3, #16]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 80076dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 80076e4:	4b09      	ldr	r3, [pc, #36]	@ (800770c <mount_volume+0x448>)
 80076e6:	881b      	ldrh	r3, [r3, #0]
 80076e8:	3301      	adds	r3, #1
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	4b07      	ldr	r3, [pc, #28]	@ (800770c <mount_volume+0x448>)
 80076ee:	801a      	strh	r2, [r3, #0]
 80076f0:	4b06      	ldr	r3, [pc, #24]	@ (800770c <mount_volume+0x448>)
 80076f2:	881a      	ldrh	r2, [r3, #0]
 80076f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f6:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3740      	adds	r7, #64	@ 0x40
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	41615252 	.word	0x41615252
 8007708:	61417272 	.word	0x61417272
 800770c:	20005048 	.word	0x20005048

08007710 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800771a:	2309      	movs	r3, #9
 800771c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d01c      	beq.n	800775e <validate+0x4e>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d018      	beq.n	800775e <validate+0x4e>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d013      	beq.n	800775e <validate+0x4e>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	889a      	ldrh	r2, [r3, #4]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	88db      	ldrh	r3, [r3, #6]
 8007740:	429a      	cmp	r2, r3
 8007742:	d10c      	bne.n	800775e <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	785b      	ldrb	r3, [r3, #1]
 800774a:	4618      	mov	r0, r3
 800774c:	f7fe fa56 	bl	8005bfc <disk_status>
 8007750:	4603      	mov	r3, r0
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	2b00      	cmp	r3, #0
 8007758:	d101      	bne.n	800775e <validate+0x4e>
			res = FR_OK;
 800775a:	2300      	movs	r3, #0
 800775c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 800775e:	7bfb      	ldrb	r3, [r7, #15]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d102      	bne.n	800776a <validate+0x5a>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	e000      	b.n	800776c <validate+0x5c>
 800776a:	2300      	movs	r3, #0
 800776c:	683a      	ldr	r2, [r7, #0]
 800776e:	6013      	str	r3, [r2, #0]
	return res;
 8007770:	7bfb      	ldrb	r3, [r7, #15]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
	...

0800777c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b088      	sub	sp, #32
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	4613      	mov	r3, r2
 8007788:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 800778e:	f107 0310 	add.w	r3, r7, #16
 8007792:	4618      	mov	r0, r3
 8007794:	f7ff fbf8 	bl	8006f88 <get_ldnumber>
 8007798:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	2b00      	cmp	r3, #0
 800779e:	da01      	bge.n	80077a4 <f_mount+0x28>
 80077a0:	230b      	movs	r3, #11
 80077a2:	e02e      	b.n	8007802 <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 80077a4:	4a19      	ldr	r2, [pc, #100]	@ (800780c <f_mount+0x90>)
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077ac:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d007      	beq.n	80077c4 <f_mount+0x48>
		FatFs[vol] = 0;
 80077b4:	4a15      	ldr	r2, [pc, #84]	@ (800780c <f_mount+0x90>)
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	2100      	movs	r1, #0
 80077ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	2200      	movs	r2, #0
 80077c2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00b      	beq.n	80077e2 <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	69fa      	ldr	r2, [r7, #28]
 80077ce:	b2d2      	uxtb	r2, r2
 80077d0:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	490c      	ldr	r1, [pc, #48]	@ (800780c <f_mount+0x90>)
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 80077e2:	79fb      	ldrb	r3, [r7, #7]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <f_mount+0x70>
 80077e8:	2300      	movs	r3, #0
 80077ea:	e00a      	b.n	8007802 <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 80077ec:	f107 010c 	add.w	r1, r7, #12
 80077f0:	f107 0308 	add.w	r3, r7, #8
 80077f4:	2200      	movs	r2, #0
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7ff fd64 	bl	80072c4 <mount_volume>
 80077fc:	4603      	mov	r3, r0
 80077fe:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007800:	7dfb      	ldrb	r3, [r7, #23]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3720      	adds	r7, #32
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20005040 	.word	0x20005040

08007810 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b098      	sub	sp, #96	@ 0x60
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	4613      	mov	r3, r2
 800781c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <f_open+0x18>
 8007824:	2309      	movs	r3, #9
 8007826:	e184      	b.n	8007b32 <f_open+0x322>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8007828:	79fb      	ldrb	r3, [r7, #7]
 800782a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800782e:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 8007830:	79fa      	ldrb	r2, [r7, #7]
 8007832:	f107 0114 	add.w	r1, r7, #20
 8007836:	f107 0308 	add.w	r3, r7, #8
 800783a:	4618      	mov	r0, r3
 800783c:	f7ff fd42 	bl	80072c4 <mount_volume>
 8007840:	4603      	mov	r3, r0
 8007842:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8007846:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800784a:	2b00      	cmp	r3, #0
 800784c:	f040 8168 	bne.w	8007b20 <f_open+0x310>
		dj.obj.fs = fs;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	f107 0318 	add.w	r3, r7, #24
 800785a:	4611      	mov	r1, r2
 800785c:	4618      	mov	r0, r3
 800785e:	f7ff fb1f 	bl	8006ea0 <follow_path>
 8007862:	4603      	mov	r3, r0
 8007864:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8007868:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800786c:	2b00      	cmp	r3, #0
 800786e:	d107      	bne.n	8007880 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007870:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007874:	b25b      	sxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	da02      	bge.n	8007880 <f_open+0x70>
				res = FR_INVALID_NAME;
 800787a:	2306      	movs	r3, #6
 800787c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007880:	79fb      	ldrb	r3, [r7, #7]
 8007882:	f003 031c 	and.w	r3, r3, #28
 8007886:	2b00      	cmp	r3, #0
 8007888:	d077      	beq.n	800797a <f_open+0x16a>
			if (res != FR_OK) {					/* No file, create new */
 800788a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800788e:	2b00      	cmp	r3, #0
 8007890:	d010      	beq.n	80078b4 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007892:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007896:	2b04      	cmp	r3, #4
 8007898:	d107      	bne.n	80078aa <f_open+0x9a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800789a:	f107 0318 	add.w	r3, r7, #24
 800789e:	4618      	mov	r0, r3
 80078a0:	f7ff f9f4 	bl	8006c8c <dir_register>
 80078a4:	4603      	mov	r3, r0
 80078a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80078aa:	79fb      	ldrb	r3, [r7, #7]
 80078ac:	f043 0308 	orr.w	r3, r3, #8
 80078b0:	71fb      	strb	r3, [r7, #7]
 80078b2:	e010      	b.n	80078d6 <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80078b4:	7fbb      	ldrb	r3, [r7, #30]
 80078b6:	f003 0311 	and.w	r3, r3, #17
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d003      	beq.n	80078c6 <f_open+0xb6>
					res = FR_DENIED;
 80078be:	2307      	movs	r3, #7
 80078c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80078c4:	e007      	b.n	80078d6 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80078c6:	79fb      	ldrb	r3, [r7, #7]
 80078c8:	f003 0304 	and.w	r3, r3, #4
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <f_open+0xc6>
 80078d0:	2308      	movs	r3, #8
 80078d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 80078d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d167      	bne.n	80079ae <f_open+0x19e>
 80078de:	79fb      	ldrb	r3, [r7, #7]
 80078e0:	f003 0308 	and.w	r3, r3, #8
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d062      	beq.n	80079ae <f_open+0x19e>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 80078e8:	4b94      	ldr	r3, [pc, #592]	@ (8007b3c <f_open+0x32c>)
 80078ea:	653b      	str	r3, [r7, #80]	@ 0x50
					st_dword(dj.dir + DIR_CrtTime, tm);
 80078ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ee:	330e      	adds	r3, #14
 80078f0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fe fb11 	bl	8005f1a <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 80078f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078fa:	3316      	adds	r3, #22
 80078fc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fe fb0b 	bl	8005f1a <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007908:	4611      	mov	r1, r2
 800790a:	4618      	mov	r0, r3
 800790c:	f7ff f92a 	bl	8006b64 <ld_clust>
 8007910:	64f8      	str	r0, [r7, #76]	@ 0x4c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007914:	330b      	adds	r3, #11
 8007916:	2220      	movs	r2, #32
 8007918:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800791e:	2200      	movs	r2, #0
 8007920:	4618      	mov	r0, r3
 8007922:	f7ff f93e 	bl	8006ba2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007928:	331c      	adds	r3, #28
 800792a:	2100      	movs	r1, #0
 800792c:	4618      	mov	r0, r3
 800792e:	f7fe faf4 	bl	8005f1a <st_dword>
					fs->wflag = 1;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	2201      	movs	r2, #1
 8007936:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8007938:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800793a:	2b00      	cmp	r3, #0
 800793c:	d037      	beq.n	80079ae <f_open+0x19e>
						sc = fs->winsect;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007942:	64bb      	str	r3, [r7, #72]	@ 0x48
						res = remove_chain(&dj.obj, cl, 0);
 8007944:	f107 0318 	add.w	r3, r7, #24
 8007948:	2200      	movs	r2, #0
 800794a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800794c:	4618      	mov	r0, r3
 800794e:	f7fe fe15 	bl	800657c <remove_chain>
 8007952:	4603      	mov	r3, r0
 8007954:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8007958:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800795c:	2b00      	cmp	r3, #0
 800795e:	d126      	bne.n	80079ae <f_open+0x19e>
							res = move_window(fs, sc);
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007964:	4618      	mov	r0, r3
 8007966:	f7fe fb62 	bl	800602e <move_window>
 800796a:	4603      	mov	r3, r0
 800796c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007974:	3a01      	subs	r2, #1
 8007976:	611a      	str	r2, [r3, #16]
 8007978:	e019      	b.n	80079ae <f_open+0x19e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 800797a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800797e:	2b00      	cmp	r3, #0
 8007980:	d115      	bne.n	80079ae <f_open+0x19e>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8007982:	7fbb      	ldrb	r3, [r7, #30]
 8007984:	f003 0310 	and.w	r3, r3, #16
 8007988:	2b00      	cmp	r3, #0
 800798a:	d003      	beq.n	8007994 <f_open+0x184>
					res = FR_NO_FILE;
 800798c:	2304      	movs	r3, #4
 800798e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007992:	e00c      	b.n	80079ae <f_open+0x19e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8007994:	79fb      	ldrb	r3, [r7, #7]
 8007996:	f003 0302 	and.w	r3, r3, #2
 800799a:	2b00      	cmp	r3, #0
 800799c:	d007      	beq.n	80079ae <f_open+0x19e>
 800799e:	7fbb      	ldrb	r3, [r7, #30]
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <f_open+0x19e>
						res = FR_DENIED;
 80079a8:	2307      	movs	r3, #7
 80079aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80079ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10f      	bne.n	80079d6 <f_open+0x1c6>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 80079b6:	79fb      	ldrb	r3, [r7, #7]
 80079b8:	f003 0308 	and.w	r3, r3, #8
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d003      	beq.n	80079c8 <f_open+0x1b8>
 80079c0:	79fb      	ldrb	r3, [r7, #7]
 80079c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079c6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 80079d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 80079d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f040 80a0 	bne.w	8007b20 <f_open+0x310>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079e4:	4611      	mov	r1, r2
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7ff f8bc 	bl	8006b64 <ld_clust>
 80079ec:	4602      	mov	r2, r0
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80079f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f4:	331c      	adds	r3, #28
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fe fa51 	bl	8005e9e <ld_dword>
 80079fc:	4602      	mov	r2, r0
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	88da      	ldrh	r2, [r3, #6]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	79fa      	ldrb	r2, [r7, #7]
 8007a14:	741a      	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	3328      	adds	r3, #40	@ 0x28
 8007a2c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007a30:	2100      	movs	r1, #0
 8007a32:	4618      	mov	r0, r3
 8007a34:	f00b f806 	bl	8012a44 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007a38:	79fb      	ldrb	r3, [r7, #7]
 8007a3a:	f003 0320 	and.w	r3, r3, #32
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d06e      	beq.n	8007b20 <f_open+0x310>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d06a      	beq.n	8007b20 <f_open+0x310>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	68da      	ldr	r2, [r3, #12]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	895b      	ldrh	r3, [r3, #10]
 8007a56:	461a      	mov	r2, r3
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	899b      	ldrh	r3, [r3, #12]
 8007a5c:	fb02 f303 	mul.w	r3, r2, r3
 8007a60:	647b      	str	r3, [r7, #68]	@ 0x44
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a6e:	e016      	b.n	8007a9e <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fe fb94 	bl	80061a2 <get_fat>
 8007a7a:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007a7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d802      	bhi.n	8007a88 <f_open+0x278>
 8007a82:	2302      	movs	r3, #2
 8007a84:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007a88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a8e:	d102      	bne.n	8007a96 <f_open+0x286>
 8007a90:	2301      	movs	r3, #1
 8007a92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007a96:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007a98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a9e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d103      	bne.n	8007aae <f_open+0x29e>
 8007aa6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007aa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d8e0      	bhi.n	8007a70 <f_open+0x260>
				}
				fp->clust = clst;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ab2:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007ab4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d131      	bne.n	8007b20 <f_open+0x310>
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	899b      	ldrh	r3, [r3, #12]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ac4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ac8:	fb01 f202 	mul.w	r2, r1, r2
 8007acc:	1a9b      	subs	r3, r3, r2
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d026      	beq.n	8007b20 <f_open+0x310>
					sc = clst2sect(fs, clst);
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fe fb44 	bl	8006164 <clst2sect>
 8007adc:	64b8      	str	r0, [r7, #72]	@ 0x48
					if (sc == 0) {
 8007ade:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d103      	bne.n	8007aec <f_open+0x2dc>
						res = FR_INT_ERR;
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007aea:	e019      	b.n	8007b20 <f_open+0x310>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	899b      	ldrh	r3, [r3, #12]
 8007af0:	461a      	mov	r2, r3
 8007af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007af4:	fbb3 f2f2 	udiv	r2, r3, r2
 8007af8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007afa:	441a      	add	r2, r3
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	7858      	ldrb	r0, [r3, #1]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	69da      	ldr	r2, [r3, #28]
 8007b0e:	2301      	movs	r3, #1
 8007b10:	f7fe f8c4 	bl	8005c9c <disk_read>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d002      	beq.n	8007b20 <f_open+0x310>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007b20:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d002      	beq.n	8007b2e <f_open+0x31e>
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007b2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3760      	adds	r7, #96	@ 0x60
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	54210000 	.word	0x54210000

08007b40 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b08e      	sub	sp, #56	@ 0x38
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	607a      	str	r2, [r7, #4]
 8007b4c:	603b      	str	r3, [r7, #0]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	2200      	movs	r2, #0
 8007b56:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f107 0214 	add.w	r2, r7, #20
 8007b5e:	4611      	mov	r1, r2
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7ff fdd5 	bl	8007710 <validate>
 8007b66:	4603      	mov	r3, r0
 8007b68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007b6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d107      	bne.n	8007b84 <f_read+0x44>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	7c5b      	ldrb	r3, [r3, #17]
 8007b78:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007b7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d002      	beq.n	8007b8a <f_read+0x4a>
 8007b84:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007b88:	e129      	b.n	8007dde <f_read+0x29e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	7c1b      	ldrb	r3, [r3, #16]
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d101      	bne.n	8007b9a <f_read+0x5a>
 8007b96:	2307      	movs	r3, #7
 8007b98:	e121      	b.n	8007dde <f_read+0x29e>
	remain = fp->obj.objsize - fp->fptr;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	68da      	ldr	r2, [r3, #12]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	6a3b      	ldr	r3, [r7, #32]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	f240 8112 	bls.w	8007dd4 <f_read+0x294>
 8007bb0:	6a3b      	ldr	r3, [r7, #32]
 8007bb2:	607b      	str	r3, [r7, #4]

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8007bb4:	e10e      	b.n	8007dd4 <f_read+0x294>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	8992      	ldrh	r2, [r2, #12]
 8007bbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bc2:	fb01 f202 	mul.w	r2, r1, r2
 8007bc6:	1a9b      	subs	r3, r3, r2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f040 80c9 	bne.w	8007d60 <f_read+0x220>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	8992      	ldrh	r2, [r2, #12]
 8007bd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	8952      	ldrh	r2, [r2, #10]
 8007bde:	3a01      	subs	r2, #1
 8007be0:	4013      	ands	r3, r2
 8007be2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d123      	bne.n	8007c32 <f_read+0xf2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	695b      	ldr	r3, [r3, #20]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d103      	bne.n	8007bfa <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bf8:	e007      	b.n	8007c0a <f_read+0xca>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	4619      	mov	r1, r3
 8007c02:	4610      	mov	r0, r2
 8007c04:	f7fe facd 	bl	80061a2 <get_fat>
 8007c08:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d804      	bhi.n	8007c1a <f_read+0xda>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2202      	movs	r2, #2
 8007c14:	745a      	strb	r2, [r3, #17]
 8007c16:	2302      	movs	r3, #2
 8007c18:	e0e1      	b.n	8007dde <f_read+0x29e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c20:	d104      	bne.n	8007c2c <f_read+0xec>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2201      	movs	r2, #1
 8007c26:	745a      	strb	r2, [r3, #17]
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e0d8      	b.n	8007dde <f_read+0x29e>
				fp->clust = clst;				/* Update current cluster */
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c30:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	4619      	mov	r1, r3
 8007c3a:	4610      	mov	r0, r2
 8007c3c:	f7fe fa92 	bl	8006164 <clst2sect>
 8007c40:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d104      	bne.n	8007c52 <f_read+0x112>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	745a      	strb	r2, [r3, #17]
 8007c4e:	2302      	movs	r3, #2
 8007c50:	e0c5      	b.n	8007dde <f_read+0x29e>
			sect += csect;
 8007c52:	69ba      	ldr	r2, [r7, #24]
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	4413      	add	r3, r2
 8007c58:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	899b      	ldrh	r3, [r3, #12]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c66:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8007c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d041      	beq.n	8007cf2 <f_read+0x1b2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007c6e:	69fa      	ldr	r2, [r7, #28]
 8007c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c72:	4413      	add	r3, r2
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	8952      	ldrh	r2, [r2, #10]
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d905      	bls.n	8007c88 <f_read+0x148>
					cc = fs->csize - csect;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	895b      	ldrh	r3, [r3, #10]
 8007c80:	461a      	mov	r2, r3
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	7858      	ldrb	r0, [r3, #1]
 8007c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c92:	f7fe f803 	bl	8005c9c <disk_read>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d004      	beq.n	8007ca6 <f_read+0x166>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	745a      	strb	r2, [r3, #17]
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e09b      	b.n	8007dde <f_read+0x29e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	7c1b      	ldrb	r3, [r3, #16]
 8007caa:	b25b      	sxtb	r3, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	da18      	bge.n	8007ce2 <f_read+0x1a2>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	69da      	ldr	r2, [r3, #28]
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d911      	bls.n	8007ce2 <f_read+0x1a2>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	69da      	ldr	r2, [r3, #28]
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	8992      	ldrh	r2, [r2, #12]
 8007cca:	fb02 f303 	mul.w	r3, r2, r3
 8007cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cd0:	18d0      	adds	r0, r2, r3
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	899b      	ldrh	r3, [r3, #12]
 8007cdc:	461a      	mov	r2, r3
 8007cde:	f00a ff35 	bl	8012b4c <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	899b      	ldrh	r3, [r3, #12]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cea:	fb02 f303 	mul.w	r3, r2, r3
 8007cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8007cf0:	e05c      	b.n	8007dac <f_read+0x26c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	69db      	ldr	r3, [r3, #28]
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d02e      	beq.n	8007d5a <f_read+0x21a>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	7c1b      	ldrb	r3, [r3, #16]
 8007d00:	b25b      	sxtb	r3, r3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	da18      	bge.n	8007d38 <f_read+0x1f8>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	7858      	ldrb	r0, [r3, #1]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	69da      	ldr	r2, [r3, #28]
 8007d14:	2301      	movs	r3, #1
 8007d16:	f7fd fff3 	bl	8005d00 <disk_write>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d004      	beq.n	8007d2a <f_read+0x1ea>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2201      	movs	r2, #1
 8007d24:	745a      	strb	r2, [r3, #17]
 8007d26:	2301      	movs	r3, #1
 8007d28:	e059      	b.n	8007dde <f_read+0x29e>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	7c1b      	ldrb	r3, [r3, #16]
 8007d2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	7858      	ldrb	r0, [r3, #1]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8007d42:	2301      	movs	r3, #1
 8007d44:	69ba      	ldr	r2, [r7, #24]
 8007d46:	f7fd ffa9 	bl	8005c9c <disk_read>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d004      	beq.n	8007d5a <f_read+0x21a>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2201      	movs	r2, #1
 8007d54:	745a      	strb	r2, [r3, #17]
 8007d56:	2301      	movs	r3, #1
 8007d58:	e041      	b.n	8007dde <f_read+0x29e>
			}
#endif
			fp->sect = sect;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	69ba      	ldr	r2, [r7, #24]
 8007d5e:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	899b      	ldrh	r3, [r3, #12]
 8007d64:	4618      	mov	r0, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	8992      	ldrh	r2, [r2, #12]
 8007d6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d72:	fb01 f202 	mul.w	r2, r1, r2
 8007d76:	1a9b      	subs	r3, r3, r2
 8007d78:	1ac3      	subs	r3, r0, r3
 8007d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007d7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d901      	bls.n	8007d88 <f_read+0x248>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	8992      	ldrh	r2, [r2, #12]
 8007d96:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d9a:	fb00 f202 	mul.w	r2, r0, r2
 8007d9e:	1a9b      	subs	r3, r3, r2
 8007da0:	440b      	add	r3, r1
 8007da2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007da4:	4619      	mov	r1, r3
 8007da6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007da8:	f00a fed0 	bl	8012b4c <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	607b      	str	r3, [r7, #4]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dba:	441a      	add	r2, r3
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	601a      	str	r2, [r3, #0]
 8007dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc4:	4413      	add	r3, r2
 8007dc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	695a      	ldr	r2, [r3, #20]
 8007dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dce:	441a      	add	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	615a      	str	r2, [r3, #20]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f47f aeed 	bne.w	8007bb6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3738      	adds	r7, #56	@ 0x38
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b08c      	sub	sp, #48	@ 0x30
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	60f8      	str	r0, [r7, #12]
 8007dee:	60b9      	str	r1, [r7, #8]
 8007df0:	607a      	str	r2, [r7, #4]
 8007df2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f107 0210 	add.w	r2, r7, #16
 8007e04:	4611      	mov	r1, r2
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7ff fc82 	bl	8007710 <validate>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007e12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d107      	bne.n	8007e2a <f_write+0x44>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	7c5b      	ldrb	r3, [r3, #17]
 8007e1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007e22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <f_write+0x4a>
 8007e2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007e2e:	e15e      	b.n	80080ee <f_write+0x308>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	7c1b      	ldrb	r3, [r3, #16]
 8007e34:	f003 0302 	and.w	r3, r3, #2
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d101      	bne.n	8007e40 <f_write+0x5a>
 8007e3c:	2307      	movs	r3, #7
 8007e3e:	e156      	b.n	80080ee <f_write+0x308>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	695a      	ldr	r2, [r3, #20]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	441a      	add	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	f080 8140 	bcs.w	80080d2 <f_write+0x2ec>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	43db      	mvns	r3, r3
 8007e58:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8007e5a:	e13a      	b.n	80080d2 <f_write+0x2ec>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	695b      	ldr	r3, [r3, #20]
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	8992      	ldrh	r2, [r2, #12]
 8007e64:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e68:	fb01 f202 	mul.w	r2, r1, r2
 8007e6c:	1a9b      	subs	r3, r3, r2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f040 80e5 	bne.w	800803e <f_write+0x258>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	695b      	ldr	r3, [r3, #20]
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	8992      	ldrh	r2, [r2, #12]
 8007e7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	8952      	ldrh	r2, [r2, #10]
 8007e84:	3a01      	subs	r2, #1
 8007e86:	4013      	ands	r3, r2
 8007e88:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d137      	bne.n	8007f00 <f_write+0x11a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	695b      	ldr	r3, [r3, #20]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10c      	bne.n	8007eb2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10e      	bne.n	8007ec2 <f_write+0xdc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fe fbcc 	bl	8006646 <create_chain>
 8007eae:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007eb0:	e007      	b.n	8007ec2 <f_write+0xdc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	4619      	mov	r1, r3
 8007eba:	4610      	mov	r0, r2
 8007ebc:	f7fe fbc3 	bl	8006646 <create_chain>
 8007ec0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f000 8109 	beq.w	80080dc <f_write+0x2f6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d104      	bne.n	8007eda <f_write+0xf4>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	745a      	strb	r2, [r3, #17]
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	e109      	b.n	80080ee <f_write+0x308>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee0:	d104      	bne.n	8007eec <f_write+0x106>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	745a      	strb	r2, [r3, #17]
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e100      	b.n	80080ee <f_write+0x308>
				fp->clust = clst;			/* Update current cluster */
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ef0:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d102      	bne.n	8007f00 <f_write+0x11a>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007efe:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	7c1b      	ldrb	r3, [r3, #16]
 8007f04:	b25b      	sxtb	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	da18      	bge.n	8007f3c <f_write+0x156>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	7858      	ldrb	r0, [r3, #1]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	69da      	ldr	r2, [r3, #28]
 8007f18:	2301      	movs	r3, #1
 8007f1a:	f7fd fef1 	bl	8005d00 <disk_write>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d004      	beq.n	8007f2e <f_write+0x148>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2201      	movs	r2, #1
 8007f28:	745a      	strb	r2, [r3, #17]
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e0df      	b.n	80080ee <f_write+0x308>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	7c1b      	ldrb	r3, [r3, #16]
 8007f32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f36:	b2da      	uxtb	r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	4619      	mov	r1, r3
 8007f44:	4610      	mov	r0, r2
 8007f46:	f7fe f90d 	bl	8006164 <clst2sect>
 8007f4a:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d104      	bne.n	8007f5c <f_write+0x176>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2202      	movs	r2, #2
 8007f56:	745a      	strb	r2, [r3, #17]
 8007f58:	2302      	movs	r3, #2
 8007f5a:	e0c8      	b.n	80080ee <f_write+0x308>
			sect += csect;
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	4413      	add	r3, r2
 8007f62:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	899b      	ldrh	r3, [r3, #12]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f70:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8007f72:	6a3b      	ldr	r3, [r7, #32]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d043      	beq.n	8008000 <f_write+0x21a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007f78:	69ba      	ldr	r2, [r7, #24]
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	8952      	ldrh	r2, [r2, #10]
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d905      	bls.n	8007f92 <f_write+0x1ac>
					cc = fs->csize - csect;
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	895b      	ldrh	r3, [r3, #10]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	7858      	ldrb	r0, [r3, #1]
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	69f9      	ldr	r1, [r7, #28]
 8007f9c:	f7fd feb0 	bl	8005d00 <disk_write>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d004      	beq.n	8007fb0 <f_write+0x1ca>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	745a      	strb	r2, [r3, #17]
 8007fac:	2301      	movs	r3, #1
 8007fae:	e09e      	b.n	80080ee <f_write+0x308>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	69da      	ldr	r2, [r3, #28]
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	6a3a      	ldr	r2, [r7, #32]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d918      	bls.n	8007ff0 <f_write+0x20a>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	69da      	ldr	r2, [r3, #28]
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	8992      	ldrh	r2, [r2, #12]
 8007fd0:	fb02 f303 	mul.w	r3, r2, r3
 8007fd4:	69fa      	ldr	r2, [r7, #28]
 8007fd6:	18d1      	adds	r1, r2, r3
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	899b      	ldrh	r3, [r3, #12]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	f00a fdb5 	bl	8012b4c <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	7c1b      	ldrb	r3, [r3, #16]
 8007fe6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	899b      	ldrh	r3, [r3, #12]
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	6a3b      	ldr	r3, [r7, #32]
 8007ff8:	fb02 f303 	mul.w	r3, r2, r3
 8007ffc:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8007ffe:	e04b      	b.n	8008098 <f_write+0x2b2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	697a      	ldr	r2, [r7, #20]
 8008006:	429a      	cmp	r2, r3
 8008008:	d016      	beq.n	8008038 <f_write+0x252>
				fp->fptr < fp->obj.objsize &&
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	695a      	ldr	r2, [r3, #20]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008012:	429a      	cmp	r2, r3
 8008014:	d210      	bcs.n	8008038 <f_write+0x252>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	7858      	ldrb	r0, [r3, #1]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8008020:	2301      	movs	r3, #1
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	f7fd fe3a 	bl	8005c9c <disk_read>
 8008028:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800802a:	2b00      	cmp	r3, #0
 800802c:	d004      	beq.n	8008038 <f_write+0x252>
					ABORT(fs, FR_DISK_ERR);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2201      	movs	r2, #1
 8008032:	745a      	strb	r2, [r3, #17]
 8008034:	2301      	movs	r3, #1
 8008036:	e05a      	b.n	80080ee <f_write+0x308>
			}
#endif
			fp->sect = sect;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	899b      	ldrh	r3, [r3, #12]
 8008042:	4618      	mov	r0, r3
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	8992      	ldrh	r2, [r2, #12]
 800804c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008050:	fb01 f202 	mul.w	r2, r1, r2
 8008054:	1a9b      	subs	r3, r3, r2
 8008056:	1ac3      	subs	r3, r0, r3
 8008058:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800805a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	429a      	cmp	r2, r3
 8008060:	d901      	bls.n	8008066 <f_write+0x280>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	627b      	str	r3, [r7, #36]	@ 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	695b      	ldr	r3, [r3, #20]
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	8992      	ldrh	r2, [r2, #12]
 8008074:	fbb3 f0f2 	udiv	r0, r3, r2
 8008078:	fb00 f202 	mul.w	r2, r0, r2
 800807c:	1a9b      	subs	r3, r3, r2
 800807e:	440b      	add	r3, r1
 8008080:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008082:	69f9      	ldr	r1, [r7, #28]
 8008084:	4618      	mov	r0, r3
 8008086:	f00a fd61 	bl	8012b4c <memcpy>
		fp->flag |= FA_DIRTY;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	7c1b      	ldrb	r3, [r3, #16]
 800808e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008092:	b2da      	uxtb	r2, r3
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	741a      	strb	r2, [r3, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	607b      	str	r3, [r7, #4]
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a6:	441a      	add	r2, r3
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	69fa      	ldr	r2, [r7, #28]
 80080ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b0:	4413      	add	r3, r2
 80080b2:	61fb      	str	r3, [r7, #28]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	695a      	ldr	r2, [r3, #20]
 80080b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ba:	441a      	add	r2, r3
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	615a      	str	r2, [r3, #20]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	68da      	ldr	r2, [r3, #12]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	695b      	ldr	r3, [r3, #20]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	bf38      	it	cc
 80080cc:	461a      	movcc	r2, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	60da      	str	r2, [r3, #12]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f47f aec1 	bne.w	8007e5c <f_write+0x76>
 80080da:	e000      	b.n	80080de <f_write+0x2f8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80080dc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	7c1b      	ldrb	r3, [r3, #16]
 80080e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080e6:	b2da      	uxtb	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3730      	adds	r7, #48	@ 0x30
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
	...

080080f8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f107 0208 	add.w	r2, r7, #8
 8008106:	4611      	mov	r1, r2
 8008108:	4618      	mov	r0, r3
 800810a:	f7ff fb01 	bl	8007710 <validate>
 800810e:	4603      	mov	r3, r0
 8008110:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008112:	7dfb      	ldrb	r3, [r7, #23]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d167      	bne.n	80081e8 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	7c1b      	ldrb	r3, [r3, #16]
 800811c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008120:	2b00      	cmp	r3, #0
 8008122:	d061      	beq.n	80081e8 <f_sync+0xf0>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	7c1b      	ldrb	r3, [r3, #16]
 8008128:	b25b      	sxtb	r3, r3
 800812a:	2b00      	cmp	r3, #0
 800812c:	da15      	bge.n	800815a <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	7858      	ldrb	r0, [r3, #1]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	69da      	ldr	r2, [r3, #28]
 800813c:	2301      	movs	r3, #1
 800813e:	f7fd fddf 	bl	8005d00 <disk_write>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <f_sync+0x54>
 8008148:	2301      	movs	r3, #1
 800814a:	e04e      	b.n	80081ea <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	7c1b      	ldrb	r3, [r3, #16]
 8008150:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008154:	b2da      	uxtb	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800815a:	4b26      	ldr	r3, [pc, #152]	@ (80081f4 <f_sync+0xfc>)
 800815c:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a1b      	ldr	r3, [r3, #32]
 8008164:	4619      	mov	r1, r3
 8008166:	4610      	mov	r0, r2
 8008168:	f7fd ff61 	bl	800602e <move_window>
 800816c:	4603      	mov	r3, r0
 800816e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008170:	7dfb      	ldrb	r3, [r7, #23]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d138      	bne.n	80081e8 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800817a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	330b      	adds	r3, #11
 8008180:	781a      	ldrb	r2, [r3, #0]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	330b      	adds	r3, #11
 8008186:	f042 0220 	orr.w	r2, r2, #32
 800818a:	b2d2      	uxtb	r2, r2
 800818c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6818      	ldr	r0, [r3, #0]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	461a      	mov	r2, r3
 8008198:	68f9      	ldr	r1, [r7, #12]
 800819a:	f7fe fd02 	bl	8006ba2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f103 021c 	add.w	r2, r3, #28
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	4619      	mov	r1, r3
 80081aa:	4610      	mov	r0, r2
 80081ac:	f7fd feb5 	bl	8005f1a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	3316      	adds	r3, #22
 80081b4:	6939      	ldr	r1, [r7, #16]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7fd feaf 	bl	8005f1a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	3312      	adds	r3, #18
 80081c0:	2100      	movs	r1, #0
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fd fe8e 	bl	8005ee4 <st_word>
					fs->wflag = 1;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	2201      	movs	r2, #1
 80081cc:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7fd ff59 	bl	8006088 <sync_fs>
 80081d6:	4603      	mov	r3, r0
 80081d8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	7c1b      	ldrb	r3, [r3, #16]
 80081de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081e2:	b2da      	uxtb	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80081e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3718      	adds	r7, #24
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	54210000 	.word	0x54210000

080081f8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7ff ff79 	bl	80080f8 <f_sync>
 8008206:	4603      	mov	r3, r0
 8008208:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800820a:	7bfb      	ldrb	r3, [r7, #15]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10e      	bne.n	800822e <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f107 0208 	add.w	r2, r7, #8
 8008216:	4611      	mov	r1, r2
 8008218:	4618      	mov	r0, r3
 800821a:	f7ff fa79 	bl	8007710 <validate>
 800821e:	4603      	mov	r3, r0
 8008220:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008222:	7bfb      	ldrb	r3, [r7, #15]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d102      	bne.n	800822e <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800822e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID for each partition (for only MBR) */
	BYTE *buf			/* Working buffer for a sector */
)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b08e      	sub	sp, #56	@ 0x38
 800823c:	af00      	add	r7, sp, #0
 800823e:	60b9      	str	r1, [r7, #8]
 8008240:	607b      	str	r3, [r7, #4]
 8008242:	4603      	mov	r3, r0
 8008244:	73fb      	strb	r3, [r7, #15]
 8008246:	4613      	mov	r3, r2
 8008248:	73bb      	strb	r3, [r7, #14]
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 800824a:	f107 0210 	add.w	r2, r7, #16
 800824e:	7bfb      	ldrb	r3, [r7, #15]
 8008250:	2101      	movs	r1, #1
 8008252:	4618      	mov	r0, r3
 8008254:	f7fd fd88 	bl	8005d68 <disk_ioctl>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d001      	beq.n	8008262 <create_partition+0x2a>
 800825e:	2301      	movs	r3, #1
 8008260:	e108      	b.n	8008474 <create_partition+0x23c>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	623b      	str	r3, [r7, #32]
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
 8008266:	233f      	movs	r3, #63	@ 0x3f
 8008268:	77fb      	strb	r3, [r7, #31]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 800826a:	2308      	movs	r3, #8
 800826c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008270:	e004      	b.n	800827c <create_partition+0x44>
 8008272:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008276:	005b      	lsls	r3, r3, #1
 8008278:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800827c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00a      	beq.n	800829a <create_partition+0x62>
 8008284:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008288:	6a3a      	ldr	r2, [r7, #32]
 800828a:	fbb2 f2f3 	udiv	r2, r2, r3
 800828e:	7ffb      	ldrb	r3, [r7, #31]
 8008290:	fbb2 f3f3 	udiv	r3, r2, r3
 8008294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008298:	d8eb      	bhi.n	8008272 <create_partition+0x3a>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 800829a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d102      	bne.n	80082a8 <create_partition+0x70>
 80082a2:	23ff      	movs	r3, #255	@ 0xff
 80082a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 80082a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80082ac:	2100      	movs	r1, #0
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f00a fbc8 	bl	8012a44 <memset>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80082ba:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 80082bc:	2300      	movs	r3, #0
 80082be:	637b      	str	r3, [r7, #52]	@ 0x34
 80082c0:	7ffb      	ldrb	r3, [r7, #31]
 80082c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80082c4:	e0b5      	b.n	8008432 <create_partition+0x1fa>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 80082c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	4413      	add	r3, r2
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 80082d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082d4:	2b64      	cmp	r3, #100	@ 0x64
 80082d6:	d80d      	bhi.n	80082f4 <create_partition+0xbc>
 80082d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082da:	2b64      	cmp	r3, #100	@ 0x64
 80082dc:	d008      	beq.n	80082f0 <create_partition+0xb8>
 80082de:	6a3b      	ldr	r3, [r7, #32]
 80082e0:	4a66      	ldr	r2, [pc, #408]	@ (800847c <create_partition+0x244>)
 80082e2:	fba2 2303 	umull	r2, r3, r2, r3
 80082e6:	095b      	lsrs	r3, r3, #5
 80082e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082ea:	fb02 f303 	mul.w	r3, r2, r3
 80082ee:	e000      	b.n	80082f2 <create_partition+0xba>
 80082f0:	6a3b      	ldr	r3, [r7, #32]
 80082f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 80082f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082f8:	4413      	add	r3, r2
 80082fa:	6a3a      	ldr	r2, [r7, #32]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d305      	bcc.n	800830c <create_partition+0xd4>
 8008300:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008304:	4413      	add	r3, r2
 8008306:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008308:	429a      	cmp	r2, r3
 800830a:	d903      	bls.n	8008314 <create_partition+0xdc>
 800830c:	6a3a      	ldr	r2, [r7, #32]
 800830e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 8008314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008316:	2b00      	cmp	r3, #0
 8008318:	f000 8097 	beq.w	800844a <create_partition+0x212>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 800831c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800831e:	3308      	adds	r3, #8
 8008320:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008322:	4618      	mov	r0, r3
 8008324:	f7fd fdf9 	bl	8005f1a <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 8008328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832a:	330c      	adds	r3, #12
 800832c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800832e:	4618      	mov	r0, r3
 8008330:	f7fd fdf3 	bl	8005f1a <st_dword>
			pte[PTE_System] = sys;					/* System type */
 8008334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008336:	3304      	adds	r3, #4
 8008338:	7bba      	ldrb	r2, [r7, #14]
 800833a:	701a      	strb	r2, [r3, #0]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 800833c:	7ffb      	ldrb	r3, [r7, #31]
 800833e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008340:	fbb2 f2f3 	udiv	r2, r2, r3
 8008344:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008348:	fbb2 f3f3 	udiv	r3, r2, r3
 800834c:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 800834e:	7ffb      	ldrb	r3, [r7, #31]
 8008350:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008352:	fbb2 f3f3 	udiv	r3, r2, r3
 8008356:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800835a:	fbb3 f1f2 	udiv	r1, r3, r2
 800835e:	fb01 f202 	mul.w	r2, r1, r2
 8008362:	1a9b      	subs	r3, r3, r2
 8008364:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 8008366:	7ffa      	ldrb	r2, [r7, #31]
 8008368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836a:	fbb3 f1f2 	udiv	r1, r3, r2
 800836e:	fb01 f202 	mul.w	r2, r1, r2
 8008372:	1a9b      	subs	r3, r3, r2
 8008374:	b2db      	uxtb	r3, r3
 8008376:	3301      	adds	r3, #1
 8008378:	75bb      	strb	r3, [r7, #22]
			pte[PTE_StHead] = hd;
 800837a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837c:	3301      	adds	r3, #1
 800837e:	7dfa      	ldrb	r2, [r7, #23]
 8008380:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	089b      	lsrs	r3, r3, #2
 8008386:	b2db      	uxtb	r3, r3
 8008388:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800838c:	b2d9      	uxtb	r1, r3
 800838e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008390:	3302      	adds	r3, #2
 8008392:	7dba      	ldrb	r2, [r7, #22]
 8008394:	430a      	orrs	r2, r1
 8008396:	b2d2      	uxtb	r2, r2
 8008398:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = (BYTE)cy;
 800839a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800839c:	3303      	adds	r3, #3
 800839e:	69ba      	ldr	r2, [r7, #24]
 80083a0:	b2d2      	uxtb	r2, r2
 80083a2:	701a      	strb	r2, [r3, #0]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 80083a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083a8:	4413      	add	r3, r2
 80083aa:	1e5a      	subs	r2, r3, #1
 80083ac:	7ffb      	ldrb	r3, [r7, #31]
 80083ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80083b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ba:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 80083bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083c0:	4413      	add	r3, r2
 80083c2:	1e5a      	subs	r2, r3, #1
 80083c4:	7ffb      	ldrb	r3, [r7, #31]
 80083c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ca:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80083ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80083d2:	fb01 f202 	mul.w	r2, r1, r2
 80083d6:	1a9b      	subs	r3, r3, r2
 80083d8:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 80083da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083de:	4413      	add	r3, r2
 80083e0:	3b01      	subs	r3, #1
 80083e2:	7ffa      	ldrb	r2, [r7, #31]
 80083e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80083e8:	fb01 f202 	mul.w	r2, r1, r2
 80083ec:	1a9b      	subs	r3, r3, r2
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	3301      	adds	r3, #1
 80083f2:	75bb      	strb	r3, [r7, #22]
			pte[PTE_EdHead] = hd;
 80083f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f6:	3305      	adds	r3, #5
 80083f8:	7dfa      	ldrb	r2, [r7, #23]
 80083fa:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	089b      	lsrs	r3, r3, #2
 8008400:	b2db      	uxtb	r3, r3
 8008402:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008406:	b2d9      	uxtb	r1, r3
 8008408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840a:	3306      	adds	r3, #6
 800840c:	7dba      	ldrb	r2, [r7, #22]
 800840e:	430a      	orrs	r2, r1
 8008410:	b2d2      	uxtb	r2, r2
 8008412:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)cy;
 8008414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008416:	3307      	adds	r3, #7
 8008418:	69ba      	ldr	r2, [r7, #24]
 800841a:	b2d2      	uxtb	r2, r2
 800841c:	701a      	strb	r2, [r3, #0]

			pte += SZ_PTE;		/* Next entry */
 800841e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008420:	3310      	adds	r3, #16
 8008422:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8008424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008426:	3301      	adds	r3, #1
 8008428:	637b      	str	r3, [r7, #52]	@ 0x34
 800842a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800842c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800842e:	4413      	add	r3, r2
 8008430:	633b      	str	r3, [r7, #48]	@ 0x30
 8008432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008434:	2b03      	cmp	r3, #3
 8008436:	d809      	bhi.n	800844c <create_partition+0x214>
 8008438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800843a:	2b00      	cmp	r3, #0
 800843c:	d006      	beq.n	800844c <create_partition+0x214>
 800843e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	429a      	cmp	r2, r3
 8008444:	f4ff af3f 	bcc.w	80082c6 <create_partition+0x8e>
 8008448:	e000      	b.n	800844c <create_partition+0x214>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800844a:	bf00      	nop
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008452:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008456:	4618      	mov	r0, r3
 8008458:	f7fd fd44 	bl	8005ee4 <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800845c:	7bf8      	ldrb	r0, [r7, #15]
 800845e:	2301      	movs	r3, #1
 8008460:	2200      	movs	r2, #0
 8008462:	6879      	ldr	r1, [r7, #4]
 8008464:	f7fd fc4c 	bl	8005d00 <disk_write>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d001      	beq.n	8008472 <create_partition+0x23a>
 800846e:	2301      	movs	r3, #1
 8008470:	e000      	b.n	8008474 <create_partition+0x23c>
	}

	return FR_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3738      	adds	r7, #56	@ 0x38
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	51eb851f 	.word	0x51eb851f

08008480 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b09e      	sub	sp, #120	@ 0x78
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
 800848c:	603b      	str	r3, [r7, #0]
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800848e:	f107 030c 	add.w	r3, r7, #12
 8008492:	4618      	mov	r0, r3
 8008494:	f7fe fd78 	bl	8006f88 <get_ldnumber>
 8008498:	6478      	str	r0, [r7, #68]	@ 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800849a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800849c:	2b00      	cmp	r3, #0
 800849e:	da02      	bge.n	80084a6 <f_mkfs+0x26>
 80084a0:	230b      	movs	r3, #11
 80084a2:	f000 bc39 	b.w	8008d18 <f_mkfs+0x898>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 80084a6:	4a90      	ldr	r2, [pc, #576]	@ (80086e8 <f_mkfs+0x268>)
 80084a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d005      	beq.n	80084be <f_mkfs+0x3e>
 80084b2:	4a8d      	ldr	r2, [pc, #564]	@ (80086e8 <f_mkfs+0x268>)
 80084b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084ba:	2200      	movs	r2, #0
 80084bc:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 80084be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084c0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */
 80084c4:	2300      	movs	r3, #0
 80084c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 80084ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7fd fbbc 	bl	8005c4c <disk_initialize>
 80084d4:	4603      	mov	r3, r0
 80084d6:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	if (ds & STA_NOINIT) return FR_NOT_READY;
 80084da:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80084de:	f003 0301 	and.w	r3, r3, #1
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d002      	beq.n	80084ec <f_mkfs+0x6c>
 80084e6:	2303      	movs	r3, #3
 80084e8:	f000 bc16 	b.w	8008d18 <f_mkfs+0x898>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 80084ec:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80084f0:	f003 0304 	and.w	r3, r3, #4
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <f_mkfs+0x7e>
 80084f8:	230a      	movs	r3, #10
 80084fa:	f000 bc0d 	b.w	8008d18 <f_mkfs+0x898>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d101      	bne.n	8008508 <f_mkfs+0x88>
 8008504:	4b79      	ldr	r3, [pc, #484]	@ (80086ec <f_mkfs+0x26c>)
 8008506:	60bb      	str	r3, [r7, #8]
	sz_blk = opt->align;
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	61fb      	str	r3, [r7, #28]
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the paramter or lower layer */
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d107      	bne.n	8008524 <f_mkfs+0xa4>
 8008514:	f107 021c 	add.w	r2, r7, #28
 8008518:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800851c:	2103      	movs	r1, #3
 800851e:	4618      	mov	r0, r3
 8008520:	f7fd fc22 	bl	8005d68 <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d009      	beq.n	800853e <f_mkfs+0xbe>
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008530:	d805      	bhi.n	800853e <f_mkfs+0xbe>
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	1e5a      	subs	r2, r3, #1
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	4013      	ands	r3, r2
 800853a:	2b00      	cmp	r3, #0
 800853c:	d001      	beq.n	8008542 <f_mkfs+0xc2>
 800853e:	2301      	movs	r3, #1
 8008540:	61fb      	str	r3, [r7, #28]
#if FF_MAX_SS != FF_MIN_SS
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 8008542:	f107 0220 	add.w	r2, r7, #32
 8008546:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800854a:	2102      	movs	r1, #2
 800854c:	4618      	mov	r0, r3
 800854e:	f7fd fc0b 	bl	8005d68 <disk_ioctl>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d001      	beq.n	800855c <f_mkfs+0xdc>
 8008558:	2301      	movs	r3, #1
 800855a:	e3dd      	b.n	8008d18 <f_mkfs+0x898>
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 800855c:	8c3b      	ldrh	r3, [r7, #32]
 800855e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008562:	d80a      	bhi.n	800857a <f_mkfs+0xfa>
 8008564:	8c3b      	ldrh	r3, [r7, #32]
 8008566:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800856a:	d306      	bcc.n	800857a <f_mkfs+0xfa>
 800856c:	8c3b      	ldrh	r3, [r7, #32]
 800856e:	461a      	mov	r2, r3
 8008570:	8c3b      	ldrh	r3, [r7, #32]
 8008572:	3b01      	subs	r3, #1
 8008574:	4013      	ands	r3, r2
 8008576:	2b00      	cmp	r3, #0
 8008578:	d001      	beq.n	800857e <f_mkfs+0xfe>
 800857a:	2301      	movs	r3, #1
 800857c:	e3cc      	b.n	8008d18 <f_mkfs+0x898>
#else
	ss = FF_MAX_SS;
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	f003 030f 	and.w	r3, r3, #15
 8008586:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	785b      	ldrb	r3, [r3, #1]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d006      	beq.n	80085a0 <f_mkfs+0x120>
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	785b      	ldrb	r3, [r3, #1]
 8008596:	2b02      	cmp	r3, #2
 8008598:	d802      	bhi.n	80085a0 <f_mkfs+0x120>
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	785b      	ldrb	r3, [r3, #1]
 800859e:	e000      	b.n	80085a2 <f_mkfs+0x122>
 80085a0:	2301      	movs	r3, #1
 80085a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d013      	beq.n	80085d4 <f_mkfs+0x154>
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085b4:	d80e      	bhi.n	80085d4 <f_mkfs+0x154>
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	8c3a      	ldrh	r2, [r7, #32]
 80085bc:	0952      	lsrs	r2, r2, #5
 80085be:	b292      	uxth	r2, r2
 80085c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80085c4:	fb01 f202 	mul.w	r2, r1, r2
 80085c8:	1a9b      	subs	r3, r3, r2
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d102      	bne.n	80085d4 <f_mkfs+0x154>
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	e001      	b.n	80085d8 <f_mkfs+0x158>
 80085d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80085d8:	63bb      	str	r3, [r7, #56]	@ 0x38
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085e2:	d80a      	bhi.n	80085fa <f_mkfs+0x17a>
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	68da      	ldr	r2, [r3, #12]
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	3b01      	subs	r3, #1
 80085ee:	4013      	ands	r3, r2
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d102      	bne.n	80085fa <f_mkfs+0x17a>
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	e000      	b.n	80085fc <f_mkfs+0x17c>
 80085fa:	2300      	movs	r3, #0
 80085fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sz_au /= ss;	/* Byte --> Sector */
 80085fe:	8c3b      	ldrh	r3, [r7, #32]
 8008600:	461a      	mov	r2, r3
 8008602:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008604:	fbb3 f3f2 	udiv	r3, r3, r2
 8008608:	64fb      	str	r3, [r7, #76]	@ 0x4c

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 800860a:	8c3b      	ldrh	r3, [r7, #32]
 800860c:	461a      	mov	r2, r3
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	fbb3 f3f2 	udiv	r3, r3, r2
 8008614:	637b      	str	r3, [r7, #52]	@ 0x34
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 8008616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008618:	2b00      	cmp	r3, #0
 800861a:	d101      	bne.n	8008620 <f_mkfs+0x1a0>
 800861c:	2311      	movs	r3, #17
 800861e:	e37b      	b.n	8008d18 <f_mkfs+0x898>
	buf = (BYTE*)work;		/* Working buffer */
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	633b      	str	r3, [r7, #48]	@ 0x30
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 8008624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008626:	2b00      	cmp	r3, #0
 8008628:	d101      	bne.n	800862e <f_mkfs+0x1ae>
 800862a:	2311      	movs	r3, #17
 800862c:	e374      	b.n	8008d18 <f_mkfs+0x898>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 800862e:	2300      	movs	r3, #0
 8008630:	61bb      	str	r3, [r7, #24]
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	66fb      	str	r3, [r7, #108]	@ 0x6c
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8008636:	f107 0218 	add.w	r2, r7, #24
 800863a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800863e:	2101      	movs	r1, #1
 8008640:	4618      	mov	r0, r3
 8008642:	f7fd fb91 	bl	8005d68 <disk_ioctl>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d001      	beq.n	8008650 <f_mkfs+0x1d0>
 800864c:	2301      	movs	r3, #1
 800864e:	e363      	b.n	8008d18 <f_mkfs+0x898>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 8008650:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008654:	f003 0308 	and.w	r3, r3, #8
 8008658:	2b00      	cmp	r3, #0
 800865a:	d108      	bne.n	800866e <f_mkfs+0x1ee>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 800865c:	69bb      	ldr	r3, [r7, #24]
 800865e:	2b3f      	cmp	r3, #63	@ 0x3f
 8008660:	d905      	bls.n	800866e <f_mkfs+0x1ee>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 8008662:	233f      	movs	r3, #63	@ 0x3f
 8008664:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008666:	69ba      	ldr	r2, [r7, #24]
 8008668:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	61bb      	str	r3, [r7, #24]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	2b7f      	cmp	r3, #127	@ 0x7f
 8008672:	d801      	bhi.n	8008678 <f_mkfs+0x1f8>
 8008674:	230e      	movs	r3, #14
 8008676:	e34f      	b.n	8008d18 <f_mkfs+0x898>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 8008678:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800867a:	2b80      	cmp	r3, #128	@ 0x80
 800867c:	d901      	bls.n	8008682 <f_mkfs+0x202>
 800867e:	2380      	movs	r3, #128	@ 0x80
 8008680:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 8008682:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008686:	f003 0302 	and.w	r3, r3, #2
 800868a:	2b00      	cmp	r3, #0
 800868c:	d009      	beq.n	80086a2 <f_mkfs+0x222>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 800868e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008692:	f003 0301 	and.w	r3, r3, #1
 8008696:	2b00      	cmp	r3, #0
 8008698:	d103      	bne.n	80086a2 <f_mkfs+0x222>
				fsty = FS_FAT32; break;
 800869a:	2303      	movs	r3, #3
 800869c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 80086a0:	e00a      	b.n	80086b8 <f_mkfs+0x238>
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 80086a2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d101      	bne.n	80086b2 <f_mkfs+0x232>
 80086ae:	2313      	movs	r3, #19
 80086b0:	e332      	b.n	8008d18 <f_mkfs+0x898>
		fsty = FS_FAT16;
 80086b2:	2302      	movs	r3, #2
 80086b4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	f103 43a8 	add.w	r3, r3, #1409286144	@ 0x54000000
 80086be:	f503 1304 	add.w	r3, r3, #2162688	@ 0x210000
 80086c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
 80086c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086c6:	663b      	str	r3, [r7, #96]	@ 0x60
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 80086c8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	d141      	bne.n	8008754 <f_mkfs+0x2d4>
				if (pau == 0) {	/* AU auto-selection */
 80086d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d120      	bne.n	8008718 <f_mkfs+0x298>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	0c5b      	lsrs	r3, r3, #17
 80086da:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80086dc:	2300      	movs	r3, #0
 80086de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086e0:	2301      	movs	r3, #1
 80086e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80086e4:	e00a      	b.n	80086fc <f_mkfs+0x27c>
 80086e6:	bf00      	nop
 80086e8:	20005040 	.word	0x20005040
 80086ec:	0801407c 	.word	0x0801407c
 80086f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086f2:	3301      	adds	r3, #1
 80086f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80086f8:	005b      	lsls	r3, r3, #1
 80086fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80086fc:	4a95      	ldr	r2, [pc, #596]	@ (8008954 <f_mkfs+0x4d4>)
 80086fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008700:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d007      	beq.n	8008718 <f_mkfs+0x298>
 8008708:	4a92      	ldr	r2, [pc, #584]	@ (8008954 <f_mkfs+0x4d4>)
 800870a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800870c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008710:	461a      	mov	r2, r3
 8008712:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008714:	4293      	cmp	r3, r2
 8008716:	d2eb      	bcs.n	80086f0 <f_mkfs+0x270>
				}
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 8008718:	69ba      	ldr	r2, [r7, #24]
 800871a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800871c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008720:	62bb      	str	r3, [r7, #40]	@ 0x28
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8008722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008724:	3302      	adds	r3, #2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	8c3a      	ldrh	r2, [r7, #32]
 800872a:	4413      	add	r3, r2
 800872c:	3b01      	subs	r3, #1
 800872e:	8c3a      	ldrh	r2, [r7, #32]
 8008730:	fbb3 f3f2 	udiv	r3, r3, r2
 8008734:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 8008736:	2320      	movs	r3, #32
 8008738:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = 0;		/* No static directory */
 800873a:	2300      	movs	r3, #0
 800873c:	653b      	str	r3, [r7, #80]	@ 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800873e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008740:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008744:	4293      	cmp	r3, r2
 8008746:	d903      	bls.n	8008750 <f_mkfs+0x2d0>
 8008748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800874a:	4a83      	ldr	r2, [pc, #524]	@ (8008958 <f_mkfs+0x4d8>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d94b      	bls.n	80087e8 <f_mkfs+0x368>
 8008750:	230e      	movs	r3, #14
 8008752:	e2e1      	b.n	8008d18 <f_mkfs+0x898>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 8008754:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008756:	2b00      	cmp	r3, #0
 8008758:	d11b      	bne.n	8008792 <f_mkfs+0x312>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	0b1b      	lsrs	r3, r3, #12
 800875e:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8008760:	2300      	movs	r3, #0
 8008762:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008764:	2301      	movs	r3, #1
 8008766:	663b      	str	r3, [r7, #96]	@ 0x60
 8008768:	e005      	b.n	8008776 <f_mkfs+0x2f6>
 800876a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800876c:	3301      	adds	r3, #1
 800876e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008770:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008772:	005b      	lsls	r3, r3, #1
 8008774:	663b      	str	r3, [r7, #96]	@ 0x60
 8008776:	4a79      	ldr	r2, [pc, #484]	@ (800895c <f_mkfs+0x4dc>)
 8008778:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800877a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d007      	beq.n	8008792 <f_mkfs+0x312>
 8008782:	4a76      	ldr	r2, [pc, #472]	@ (800895c <f_mkfs+0x4dc>)
 8008784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800878a:	461a      	mov	r2, r3
 800878c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800878e:	4293      	cmp	r3, r2
 8008790:	d2eb      	bcs.n	800876a <f_mkfs+0x2ea>
				}
				n_clst = (DWORD)sz_vol / pau;
 8008792:	69ba      	ldr	r2, [r7, #24]
 8008794:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008796:	fbb2 f3f3 	udiv	r3, r2, r3
 800879a:	62bb      	str	r3, [r7, #40]	@ 0x28
				if (n_clst > MAX_FAT12) {
 800879c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800879e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d904      	bls.n	80087b0 <f_mkfs+0x330>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80087a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a8:	3302      	adds	r3, #2
 80087aa:	005b      	lsls	r3, r3, #1
 80087ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80087ae:	e00a      	b.n	80087c6 <f_mkfs+0x346>
				} else {
					fsty = FS_FAT12;
 80087b0:	2301      	movs	r3, #1
 80087b2:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80087b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087b8:	4613      	mov	r3, r2
 80087ba:	005b      	lsls	r3, r3, #1
 80087bc:	4413      	add	r3, r2
 80087be:	3301      	adds	r3, #1
 80087c0:	085b      	lsrs	r3, r3, #1
 80087c2:	3303      	adds	r3, #3
 80087c4:	667b      	str	r3, [r7, #100]	@ 0x64
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80087c6:	8c3b      	ldrh	r3, [r7, #32]
 80087c8:	461a      	mov	r2, r3
 80087ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087cc:	4413      	add	r3, r2
 80087ce:	3b01      	subs	r3, #1
 80087d0:	8c3a      	ldrh	r2, [r7, #32]
 80087d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80087d6:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 80087d8:	2301      	movs	r3, #1
 80087da:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 80087dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087de:	015b      	lsls	r3, r3, #5
 80087e0:	8c3a      	ldrh	r2, [r7, #32]
 80087e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80087e6:	653b      	str	r3, [r7, #80]	@ 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80087e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80087ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80087ec:	4413      	add	r3, r2
 80087ee:	66bb      	str	r3, [r7, #104]	@ 0x68
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 80087f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80087f4:	fb03 f202 	mul.w	r2, r3, r2
 80087f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80087fa:	4413      	add	r3, r2
 80087fc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80087fe:	4413      	add	r3, r2
 8008800:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 8008802:	69fa      	ldr	r2, [r7, #28]
 8008804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008806:	4413      	add	r3, r2
 8008808:	1e5a      	subs	r2, r3, #1
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	425b      	negs	r3, r3
 800880e:	401a      	ands	r2, r3
 8008810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	667b      	str	r3, [r7, #100]	@ 0x64
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 8008816:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800881a:	2b03      	cmp	r3, #3
 800881c:	d108      	bne.n	8008830 <f_mkfs+0x3b0>
				sz_rsv += n; b_fat += n;
 800881e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008820:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008822:	4413      	add	r3, r2
 8008824:	677b      	str	r3, [r7, #116]	@ 0x74
 8008826:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008828:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800882a:	4413      	add	r3, r2
 800882c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800882e:	e019      	b.n	8008864 <f_mkfs+0x3e4>
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
 8008830:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008832:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008834:	fbb3 f2f2 	udiv	r2, r3, r2
 8008838:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800883a:	fb01 f202 	mul.w	r2, r1, r2
 800883e:	1a9b      	subs	r3, r3, r2
 8008840:	2b00      	cmp	r3, #0
 8008842:	d008      	beq.n	8008856 <f_mkfs+0x3d6>
					n--; sz_rsv++; b_fat++;
 8008844:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008846:	3b01      	subs	r3, #1
 8008848:	667b      	str	r3, [r7, #100]	@ 0x64
 800884a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800884c:	3301      	adds	r3, #1
 800884e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008850:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008852:	3301      	adds	r3, #1
 8008854:	66bb      	str	r3, [r7, #104]	@ 0x68
				}
				sz_fat += n / n_fat;
 8008856:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800885a:	fbb2 f3f3 	udiv	r3, r2, r3
 800885e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008860:	4413      	add	r3, r2
 8008862:	657b      	str	r3, [r7, #84]	@ 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 8008864:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008866:	011a      	lsls	r2, r3, #4
 8008868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800886a:	441a      	add	r2, r3
 800886c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800886e:	1ad2      	subs	r2, r2, r3
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	429a      	cmp	r2, r3
 8008874:	d901      	bls.n	800887a <f_mkfs+0x3fa>
 8008876:	230e      	movs	r3, #14
 8008878:	e24e      	b.n	8008d18 <f_mkfs+0x898>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 800887a:	69ba      	ldr	r2, [r7, #24]
 800887c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800887e:	1ad2      	subs	r2, r2, r3
 8008880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008882:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008884:	fb01 f303 	mul.w	r3, r1, r3
 8008888:	1ad2      	subs	r2, r2, r3
 800888a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800888c:	1ad2      	subs	r2, r2, r3
 800888e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008890:	fbb2 f3f3 	udiv	r3, r2, r3
 8008894:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (fsty == FS_FAT32) {
 8008896:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800889a:	2b03      	cmp	r3, #3
 800889c:	d10f      	bne.n	80088be <f_mkfs+0x43e>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 800889e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d80a      	bhi.n	80088be <f_mkfs+0x43e>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80088a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d105      	bne.n	80088ba <f_mkfs+0x43a>
 80088ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088b0:	085b      	lsrs	r3, r3, #1
 80088b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d145      	bne.n	8008946 <f_mkfs+0x4c6>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 80088ba:	230e      	movs	r3, #14
 80088bc:	e22c      	b.n	8008d18 <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT16) {
 80088be:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d134      	bne.n	8008930 <f_mkfs+0x4b0>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 80088c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d91f      	bls.n	8008910 <f_mkfs+0x490>
					if (sz_au == 0 && (pau * 2) <= 64) {
 80088d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d107      	bne.n	80088e6 <f_mkfs+0x466>
 80088d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088d8:	005b      	lsls	r3, r3, #1
 80088da:	2b40      	cmp	r3, #64	@ 0x40
 80088dc:	d803      	bhi.n	80088e6 <f_mkfs+0x466>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 80088de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088e0:	005b      	lsls	r3, r3, #1
 80088e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088e4:	e034      	b.n	8008950 <f_mkfs+0x4d0>
					}
					if ((fsopt & FM_FAT32)) {
 80088e6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80088ea:	f003 0302 	and.w	r3, r3, #2
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d003      	beq.n	80088fa <f_mkfs+0x47a>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80088f2:	2303      	movs	r3, #3
 80088f4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 80088f8:	e02a      	b.n	8008950 <f_mkfs+0x4d0>
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80088fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d105      	bne.n	800890c <f_mkfs+0x48c>
 8008900:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008902:	005b      	lsls	r3, r3, #1
 8008904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008906:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008908:	2b80      	cmp	r3, #128	@ 0x80
 800890a:	d91e      	bls.n	800894a <f_mkfs+0x4ca>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800890c:	230e      	movs	r3, #14
 800890e:	e203      	b.n	8008d18 <f_mkfs+0x898>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8008910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008912:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008916:	4293      	cmp	r3, r2
 8008918:	d80a      	bhi.n	8008930 <f_mkfs+0x4b0>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800891a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800891c:	2b00      	cmp	r3, #0
 800891e:	d105      	bne.n	800892c <f_mkfs+0x4ac>
 8008920:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008922:	005b      	lsls	r3, r3, #1
 8008924:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008928:	2b80      	cmp	r3, #128	@ 0x80
 800892a:	d910      	bls.n	800894e <f_mkfs+0x4ce>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800892c:	230e      	movs	r3, #14
 800892e:	e1f3      	b.n	8008d18 <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 8008930:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008934:	2b01      	cmp	r3, #1
 8008936:	d113      	bne.n	8008960 <f_mkfs+0x4e0>
 8008938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800893a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800893e:	4293      	cmp	r3, r2
 8008940:	d90e      	bls.n	8008960 <f_mkfs+0x4e0>
 8008942:	230e      	movs	r3, #14
 8008944:	e1e8      	b.n	8008d18 <f_mkfs+0x898>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8008946:	bf00      	nop
 8008948:	e6bc      	b.n	80086c4 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800894a:	bf00      	nop
 800894c:	e6ba      	b.n	80086c4 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800894e:	bf00      	nop
			pau = sz_au;
 8008950:	e6b8      	b.n	80086c4 <f_mkfs+0x244>
 8008952:	bf00      	nop
 8008954:	0801408c 	.word	0x0801408c
 8008958:	0ffffff5 	.word	0x0ffffff5
 800895c:	0801409c 	.word	0x0801409c

			/* Ok, it is the valid cluster configuration */
			break;
 8008960:	bf00      	nop
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
 8008962:	8c3b      	ldrh	r3, [r7, #32]
 8008964:	461a      	mov	r2, r3
 8008966:	2100      	movs	r1, #0
 8008968:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800896a:	f00a f86b 	bl	8012a44 <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 800896e:	220b      	movs	r2, #11
 8008970:	49b1      	ldr	r1, [pc, #708]	@ (8008c38 <f_mkfs+0x7b8>)
 8008972:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008974:	f00a f8ea 	bl	8012b4c <memcpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8008978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897a:	330b      	adds	r3, #11
 800897c:	8c3a      	ldrh	r2, [r7, #32]
 800897e:	4611      	mov	r1, r2
 8008980:	4618      	mov	r0, r3
 8008982:	f7fd faaf 	bl	8005ee4 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8008986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008988:	330d      	adds	r3, #13
 800898a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800898c:	b2d2      	uxtb	r2, r2
 800898e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8008990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008992:	330e      	adds	r3, #14
 8008994:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008996:	b292      	uxth	r2, r2
 8008998:	4611      	mov	r1, r2
 800899a:	4618      	mov	r0, r3
 800899c:	f7fd faa2 	bl	8005ee4 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 80089a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a2:	3310      	adds	r3, #16
 80089a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80089a6:	b2d2      	uxtb	r2, r2
 80089a8:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 80089aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ac:	f103 0211 	add.w	r2, r3, #17
 80089b0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80089b4:	2b03      	cmp	r3, #3
 80089b6:	d002      	beq.n	80089be <f_mkfs+0x53e>
 80089b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	e000      	b.n	80089c0 <f_mkfs+0x540>
 80089be:	2300      	movs	r3, #0
 80089c0:	4619      	mov	r1, r3
 80089c2:	4610      	mov	r0, r2
 80089c4:	f7fd fa8e 	bl	8005ee4 <st_word>
		if (sz_vol < 0x10000) {
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089ce:	d208      	bcs.n	80089e2 <f_mkfs+0x562>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 80089d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d2:	3313      	adds	r3, #19
 80089d4:	69ba      	ldr	r2, [r7, #24]
 80089d6:	b292      	uxth	r2, r2
 80089d8:	4611      	mov	r1, r2
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fd fa82 	bl	8005ee4 <st_word>
 80089e0:	e006      	b.n	80089f0 <f_mkfs+0x570>
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 80089e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e4:	3320      	adds	r3, #32
 80089e6:	69ba      	ldr	r2, [r7, #24]
 80089e8:	4611      	mov	r1, r2
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fd fa95 	bl	8005f1a <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80089f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f2:	3315      	adds	r3, #21
 80089f4:	22f8      	movs	r2, #248	@ 0xf8
 80089f6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80089f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fa:	3318      	adds	r3, #24
 80089fc:	213f      	movs	r1, #63	@ 0x3f
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fd fa70 	bl	8005ee4 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8008a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a06:	331a      	adds	r3, #26
 8008a08:	21ff      	movs	r1, #255	@ 0xff
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fd fa6a 	bl	8005ee4 <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 8008a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a12:	331c      	adds	r3, #28
 8008a14:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fd fa7f 	bl	8005f1a <st_dword>
		if (fsty == FS_FAT32) {
 8008a1c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008a20:	2b03      	cmp	r3, #3
 8008a22:	d12d      	bne.n	8008a80 <f_mkfs+0x600>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 8008a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a26:	3343      	adds	r3, #67	@ 0x43
 8008a28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fd fa75 	bl	8005f1a <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8008a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a32:	3324      	adds	r3, #36	@ 0x24
 8008a34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7fd fa6f 	bl	8005f1a <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3e:	332c      	adds	r3, #44	@ 0x2c
 8008a40:	2102      	movs	r1, #2
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7fd fa69 	bl	8005f1a <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8008a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4a:	3330      	adds	r3, #48	@ 0x30
 8008a4c:	2101      	movs	r1, #1
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7fd fa48 	bl	8005ee4 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8008a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a56:	3332      	adds	r3, #50	@ 0x32
 8008a58:	2106      	movs	r1, #6
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fd fa42 	bl	8005ee4 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8008a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a62:	3340      	adds	r3, #64	@ 0x40
 8008a64:	2280      	movs	r2, #128	@ 0x80
 8008a66:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8008a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a6a:	3342      	adds	r3, #66	@ 0x42
 8008a6c:	2229      	movs	r2, #41	@ 0x29
 8008a6e:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8008a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a72:	3347      	adds	r3, #71	@ 0x47
 8008a74:	2213      	movs	r2, #19
 8008a76:	4971      	ldr	r1, [pc, #452]	@ (8008c3c <f_mkfs+0x7bc>)
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f00a f867 	bl	8012b4c <memcpy>
 8008a7e:	e01c      	b.n	8008aba <f_mkfs+0x63a>
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 8008a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a82:	3327      	adds	r3, #39	@ 0x27
 8008a84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fd fa47 	bl	8005f1a <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8008a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a8e:	3316      	adds	r3, #22
 8008a90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a92:	b292      	uxth	r2, r2
 8008a94:	4611      	mov	r1, r2
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7fd fa24 	bl	8005ee4 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8008a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9e:	3324      	adds	r3, #36	@ 0x24
 8008aa0:	2280      	movs	r2, #128	@ 0x80
 8008aa2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8008aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa6:	3326      	adds	r3, #38	@ 0x26
 8008aa8:	2229      	movs	r2, #41	@ 0x29
 8008aaa:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8008aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aae:	332b      	adds	r3, #43	@ 0x2b
 8008ab0:	2213      	movs	r2, #19
 8008ab2:	4963      	ldr	r1, [pc, #396]	@ (8008c40 <f_mkfs+0x7c0>)
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f00a f849 	bl	8012b4c <memcpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8008aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008abc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008ac0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7fd fa0d 	bl	8005ee4 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 8008aca:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8008ace:	2301      	movs	r3, #1
 8008ad0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008ad2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008ad4:	f7fd f914 	bl	8005d00 <disk_write>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <f_mkfs+0x662>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e11a      	b.n	8008d18 <f_mkfs+0x898>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 8008ae2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008ae6:	2b03      	cmp	r3, #3
 8008ae8:	d140      	bne.n	8008b6c <f_mkfs+0x6ec>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8008aea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008aec:	1d9a      	adds	r2, r3, #6
 8008aee:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8008af2:	2301      	movs	r3, #1
 8008af4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008af6:	f7fd f903 	bl	8005d00 <disk_write>
			memset(buf, 0, ss);
 8008afa:	8c3b      	ldrh	r3, [r7, #32]
 8008afc:	461a      	mov	r2, r3
 8008afe:	2100      	movs	r1, #0
 8008b00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b02:	f009 ff9f 	bl	8012a44 <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8008b06:	494f      	ldr	r1, [pc, #316]	@ (8008c44 <f_mkfs+0x7c4>)
 8008b08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b0a:	f7fd fa06 	bl	8005f1a <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b10:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008b14:	494c      	ldr	r1, [pc, #304]	@ (8008c48 <f_mkfs+0x7c8>)
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7fd f9ff 	bl	8005f1a <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b24:	3b01      	subs	r3, #1
 8008b26:	4619      	mov	r1, r3
 8008b28:	4610      	mov	r0, r2
 8008b2a:	f7fd f9f6 	bl	8005f1a <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b30:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008b34:	2102      	movs	r1, #2
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7fd f9ef 	bl	8005f1a <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8008b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008b42:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fd f9cc 	bl	8005ee4 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8008b4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b4e:	1dda      	adds	r2, r3, #7
 8008b50:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8008b54:	2301      	movs	r3, #1
 8008b56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008b58:	f7fd f8d2 	bl	8005d00 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8008b5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b5e:	1c5a      	adds	r2, r3, #1
 8008b60:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8008b64:	2301      	movs	r3, #1
 8008b66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008b68:	f7fd f8ca 	bl	8005d00 <disk_write>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
 8008b6c:	8c3b      	ldrh	r3, [r7, #32]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b72:	fb02 f303 	mul.w	r3, r2, r3
 8008b76:	461a      	mov	r2, r3
 8008b78:	2100      	movs	r1, #0
 8008b7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b7c:	f009 ff62 	bl	8012a44 <memset>
		sect = b_fat;		/* FAT start sector */
 8008b80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b82:	673b      	str	r3, [r7, #112]	@ 0x70
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 8008b84:	2300      	movs	r3, #0
 8008b86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b88:	e04b      	b.n	8008c22 <f_mkfs+0x7a2>
			if (fsty == FS_FAT32) {
 8008b8a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008b8e:	2b03      	cmp	r3, #3
 8008b90:	d113      	bne.n	8008bba <f_mkfs+0x73a>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
 8008b92:	f06f 0107 	mvn.w	r1, #7
 8008b96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b98:	f7fd f9bf 	bl	8005f1a <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7fd f9b8 	bl	8005f1a <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
 8008baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bac:	3308      	adds	r3, #8
 8008bae:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fd f9b1 	bl	8005f1a <st_dword>
 8008bb8:	e00b      	b.n	8008bd2 <f_mkfs+0x752>
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 8008bba:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d101      	bne.n	8008bc6 <f_mkfs+0x746>
 8008bc2:	4b22      	ldr	r3, [pc, #136]	@ (8008c4c <f_mkfs+0x7cc>)
 8008bc4:	e001      	b.n	8008bca <f_mkfs+0x74a>
 8008bc6:	f06f 0307 	mvn.w	r3, #7
 8008bca:	4619      	mov	r1, r3
 8008bcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bce:	f7fd f9a4 	bl	8005f1a <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8008bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8008bd6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	bf28      	it	cs
 8008bde:	4613      	movcs	r3, r2
 8008be0:	667b      	str	r3, [r7, #100]	@ 0x64
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8008be2:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8008be6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008be8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008bea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008bec:	f7fd f888 	bl	8005d00 <disk_write>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <f_mkfs+0x77a>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e08e      	b.n	8008d18 <f_mkfs+0x898>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
 8008bfa:	8c3b      	ldrh	r3, [r7, #32]
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	2100      	movs	r1, #0
 8008c00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c02:	f009 ff1f 	bl	8012a44 <memset>
				sect += n; nsect -= n;
 8008c06:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008c08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c0a:	4413      	add	r3, r2
 8008c0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c0e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008c10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c12:	1ad3      	subs	r3, r2, r3
 8008c14:	65fb      	str	r3, [r7, #92]	@ 0x5c
			} while (nsect);
 8008c16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1dc      	bne.n	8008bd6 <f_mkfs+0x756>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 8008c1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c1e:	3301      	adds	r3, #1
 8008c20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d3af      	bcc.n	8008b8a <f_mkfs+0x70a>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8008c2a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	d10e      	bne.n	8008c50 <f_mkfs+0x7d0>
 8008c32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c34:	e00d      	b.n	8008c52 <f_mkfs+0x7d2>
 8008c36:	bf00      	nop
 8008c38:	08013f74 	.word	0x08013f74
 8008c3c:	08013f80 	.word	0x08013f80
 8008c40:	08013f94 	.word	0x08013f94
 8008c44:	41615252 	.word	0x41615252
 8008c48:	61417272 	.word	0x61417272
 8008c4c:	00fffff8 	.word	0x00fffff8
 8008c50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c52:	65fb      	str	r3, [r7, #92]	@ 0x5c
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8008c54:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	bf28      	it	cs
 8008c5c:	4613      	movcs	r3, r2
 8008c5e:	667b      	str	r3, [r7, #100]	@ 0x64
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8008c60:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8008c64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c66:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008c68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008c6a:	f7fd f849 	bl	8005d00 <disk_write>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <f_mkfs+0x7f8>
 8008c74:	2301      	movs	r3, #1
 8008c76:	e04f      	b.n	8008d18 <f_mkfs+0x898>
			sect += n; nsect -= n;
 8008c78:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008c7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c7c:	4413      	add	r3, r2
 8008c7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c80:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008c82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	65fb      	str	r3, [r7, #92]	@ 0x5c
		} while (nsect);
 8008c88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1e2      	bne.n	8008c54 <f_mkfs+0x7d4>
	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;		/* exFAT */
	} else if (fsty == FS_FAT32) {
 8008c8e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008c92:	2b03      	cmp	r3, #3
 8008c94:	d103      	bne.n	8008c9e <f_mkfs+0x81e>
		sys = 0x0C;		/* FAT32X */
 8008c96:	230c      	movs	r3, #12
 8008c98:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8008c9c:	e012      	b.n	8008cc4 <f_mkfs+0x844>
	} else if (sz_vol >= 0x10000) {
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ca4:	d303      	bcc.n	8008cae <f_mkfs+0x82e>
		sys = 0x06;		/* FAT12/16 (large) */
 8008ca6:	2306      	movs	r3, #6
 8008ca8:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8008cac:	e00a      	b.n	8008cc4 <f_mkfs+0x844>
	} else if (fsty == FS_FAT16) {
 8008cae:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d103      	bne.n	8008cbe <f_mkfs+0x83e>
		sys = 0x04;		/* FAT16 */
 8008cb6:	2304      	movs	r3, #4
 8008cb8:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8008cbc:	e002      	b.n	8008cc4 <f_mkfs+0x844>
	} else {
		sys = 0x01;		/* FAT12 */
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 8008cc4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008cc8:	f003 0308 	and.w	r3, r3, #8
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d116      	bne.n	8008cfe <f_mkfs+0x87e>
			lba[0] = sz_vol; lba[1] = 0;
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	613b      	str	r3, [r7, #16]
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	617b      	str	r3, [r7, #20]
			res = create_partition(pdrv, lba, sys, buf);
 8008cd8:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 8008cdc:	f107 0110 	add.w	r1, r7, #16
 8008ce0:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8008ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce6:	f7ff faa7 	bl	8008238 <create_partition>
 8008cea:	4603      	mov	r3, r0
 8008cec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			if (res != FR_OK) LEAVE_MKFS(res);
 8008cf0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d002      	beq.n	8008cfe <f_mkfs+0x87e>
 8008cf8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008cfc:	e00c      	b.n	8008d18 <f_mkfs+0x898>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8008cfe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008d02:	2200      	movs	r2, #0
 8008d04:	2100      	movs	r1, #0
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7fd f82e 	bl	8005d68 <disk_ioctl>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <f_mkfs+0x896>
 8008d12:	2301      	movs	r3, #1
 8008d14:	e000      	b.n	8008d18 <f_mkfs+0x898>

	LEAVE_MKFS(FR_OK);
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3778      	adds	r7, #120	@ 0x78
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8008d20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008d58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008d24:	f7fc ff58 	bl	8005bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008d28:	480c      	ldr	r0, [pc, #48]	@ (8008d5c <LoopForever+0x6>)
  ldr r1, =_edata
 8008d2a:	490d      	ldr	r1, [pc, #52]	@ (8008d60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8008d64 <LoopForever+0xe>)
  movs r3, #0
 8008d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008d30:	e002      	b.n	8008d38 <LoopCopyDataInit>

08008d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008d36:	3304      	adds	r3, #4

08008d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008d3c:	d3f9      	bcc.n	8008d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8008d68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008d40:	4c0a      	ldr	r4, [pc, #40]	@ (8008d6c <LoopForever+0x16>)
  movs r3, #0
 8008d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008d44:	e001      	b.n	8008d4a <LoopFillZerobss>

08008d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008d48:	3204      	adds	r2, #4

08008d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008d4c:	d3fb      	bcc.n	8008d46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008d4e:	f009 fecf 	bl	8012af0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008d52:	f7fa f8bf 	bl	8002ed4 <main>

08008d56 <LoopForever>:

LoopForever:
    b LoopForever
 8008d56:	e7fe      	b.n	8008d56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008d58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8008d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008d60:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8008d64:	0801420c 	.word	0x0801420c
  ldr r2, =_sbss
 8008d68:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8008d6c:	20005198 	.word	0x20005198

08008d70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008d70:	e7fe      	b.n	8008d70 <ADC1_2_IRQHandler>

08008d72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b082      	sub	sp, #8
 8008d76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008d7c:	2003      	movs	r0, #3
 8008d7e:	f001 fd11 	bl	800a7a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008d82:	200f      	movs	r0, #15
 8008d84:	f000 f80e 	bl	8008da4 <HAL_InitTick>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d002      	beq.n	8008d94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	71fb      	strb	r3, [r7, #7]
 8008d92:	e001      	b.n	8008d98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008d94:	f7fc fa56 	bl	8005244 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008d98:	79fb      	ldrb	r3, [r7, #7]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
	...

08008da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008dac:	2300      	movs	r3, #0
 8008dae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8008db0:	4b17      	ldr	r3, [pc, #92]	@ (8008e10 <HAL_InitTick+0x6c>)
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d023      	beq.n	8008e00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8008db8:	4b16      	ldr	r3, [pc, #88]	@ (8008e14 <HAL_InitTick+0x70>)
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	4b14      	ldr	r3, [pc, #80]	@ (8008e10 <HAL_InitTick+0x6c>)
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f001 fd21 	bl	800a816 <HAL_SYSTICK_Config>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10f      	bne.n	8008dfa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2b0f      	cmp	r3, #15
 8008dde:	d809      	bhi.n	8008df4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008de0:	2200      	movs	r2, #0
 8008de2:	6879      	ldr	r1, [r7, #4]
 8008de4:	f04f 30ff 	mov.w	r0, #4294967295
 8008de8:	f001 fce7 	bl	800a7ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008dec:	4a0a      	ldr	r2, [pc, #40]	@ (8008e18 <HAL_InitTick+0x74>)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6013      	str	r3, [r2, #0]
 8008df2:	e007      	b.n	8008e04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	73fb      	strb	r3, [r7, #15]
 8008df8:	e004      	b.n	8008e04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	73fb      	strb	r3, [r7, #15]
 8008dfe:	e001      	b.n	8008e04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3710      	adds	r7, #16
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	20000010 	.word	0x20000010
 8008e14:	20000000 	.word	0x20000000
 8008e18:	2000000c 	.word	0x2000000c

08008e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008e20:	4b06      	ldr	r3, [pc, #24]	@ (8008e3c <HAL_IncTick+0x20>)
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	461a      	mov	r2, r3
 8008e26:	4b06      	ldr	r3, [pc, #24]	@ (8008e40 <HAL_IncTick+0x24>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	4a04      	ldr	r2, [pc, #16]	@ (8008e40 <HAL_IncTick+0x24>)
 8008e2e:	6013      	str	r3, [r2, #0]
}
 8008e30:	bf00      	nop
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	20000010 	.word	0x20000010
 8008e40:	2000504c 	.word	0x2000504c

08008e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008e44:	b480      	push	{r7}
 8008e46:	af00      	add	r7, sp, #0
  return uwTick;
 8008e48:	4b03      	ldr	r3, [pc, #12]	@ (8008e58 <HAL_GetTick+0x14>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	2000504c 	.word	0x2000504c

08008e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008e64:	f7ff ffee 	bl	8008e44 <HAL_GetTick>
 8008e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e74:	d005      	beq.n	8008e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8008e76:	4b0a      	ldr	r3, [pc, #40]	@ (8008ea0 <HAL_Delay+0x44>)
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	4413      	add	r3, r2
 8008e80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008e82:	bf00      	nop
 8008e84:	f7ff ffde 	bl	8008e44 <HAL_GetTick>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d8f7      	bhi.n	8008e84 <HAL_Delay+0x28>
  {
  }
}
 8008e94:	bf00      	nop
 8008e96:	bf00      	nop
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	20000010 	.word	0x20000010

08008ea4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	431a      	orrs	r2, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	609a      	str	r2, [r3, #8]
}
 8008ebe:	bf00      	nop
 8008ec0:	370c      	adds	r7, #12
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008eca:	b480      	push	{r7}
 8008ecc:	b083      	sub	sp, #12
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
 8008ed2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	431a      	orrs	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	609a      	str	r2, [r3, #8]
}
 8008ee4:	bf00      	nop
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b087      	sub	sp, #28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
 8008f18:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	3360      	adds	r3, #96	@ 0x60
 8008f1e:	461a      	mov	r2, r3
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4413      	add	r3, r2
 8008f26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	4b08      	ldr	r3, [pc, #32]	@ (8008f50 <LL_ADC_SetOffset+0x44>)
 8008f2e:	4013      	ands	r3, r2
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8008f36:	683a      	ldr	r2, [r7, #0]
 8008f38:	430a      	orrs	r2, r1
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008f44:	bf00      	nop
 8008f46:	371c      	adds	r7, #28
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr
 8008f50:	03fff000 	.word	0x03fff000

08008f54 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	3360      	adds	r3, #96	@ 0x60
 8008f62:	461a      	mov	r2, r3
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	4413      	add	r3, r2
 8008f6a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b087      	sub	sp, #28
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	3360      	adds	r3, #96	@ 0x60
 8008f90:	461a      	mov	r2, r3
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	4413      	add	r3, r2
 8008f98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	431a      	orrs	r2, r3
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8008faa:	bf00      	nop
 8008fac:	371c      	adds	r7, #28
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr

08008fb6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8008fb6:	b480      	push	{r7}
 8008fb8:	b083      	sub	sp, #12
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d101      	bne.n	8008fce <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e000      	b.n	8008fd0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b087      	sub	sp, #28
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	3330      	adds	r3, #48	@ 0x30
 8008fec:	461a      	mov	r2, r3
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	0a1b      	lsrs	r3, r3, #8
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	f003 030c 	and.w	r3, r3, #12
 8008ff8:	4413      	add	r3, r2
 8008ffa:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	f003 031f 	and.w	r3, r3, #31
 8009006:	211f      	movs	r1, #31
 8009008:	fa01 f303 	lsl.w	r3, r1, r3
 800900c:	43db      	mvns	r3, r3
 800900e:	401a      	ands	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	0e9b      	lsrs	r3, r3, #26
 8009014:	f003 011f 	and.w	r1, r3, #31
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	f003 031f 	and.w	r3, r3, #31
 800901e:	fa01 f303 	lsl.w	r3, r1, r3
 8009022:	431a      	orrs	r2, r3
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009028:	bf00      	nop
 800902a:	371c      	adds	r7, #28
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8009034:	b480      	push	{r7}
 8009036:	b087      	sub	sp, #28
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	3314      	adds	r3, #20
 8009044:	461a      	mov	r2, r3
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	0e5b      	lsrs	r3, r3, #25
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	f003 0304 	and.w	r3, r3, #4
 8009050:	4413      	add	r3, r2
 8009052:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	0d1b      	lsrs	r3, r3, #20
 800905c:	f003 031f 	and.w	r3, r3, #31
 8009060:	2107      	movs	r1, #7
 8009062:	fa01 f303 	lsl.w	r3, r1, r3
 8009066:	43db      	mvns	r3, r3
 8009068:	401a      	ands	r2, r3
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	0d1b      	lsrs	r3, r3, #20
 800906e:	f003 031f 	and.w	r3, r3, #31
 8009072:	6879      	ldr	r1, [r7, #4]
 8009074:	fa01 f303 	lsl.w	r3, r1, r3
 8009078:	431a      	orrs	r2, r3
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800907e:	bf00      	nop
 8009080:	371c      	adds	r7, #28
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr
	...

0800908c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090a4:	43db      	mvns	r3, r3
 80090a6:	401a      	ands	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f003 0318 	and.w	r3, r3, #24
 80090ae:	4908      	ldr	r1, [pc, #32]	@ (80090d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80090b0:	40d9      	lsrs	r1, r3
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	400b      	ands	r3, r1
 80090b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090ba:	431a      	orrs	r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80090c2:	bf00      	nop
 80090c4:	3714      	adds	r7, #20
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	0007ffff 	.word	0x0007ffff

080090d4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	f003 031f 	and.w	r3, r3, #31
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8009100:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	6093      	str	r3, [r2, #8]
}
 8009108:	bf00      	nop
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009124:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009128:	d101      	bne.n	800912e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800912a:	2301      	movs	r3, #1
 800912c:	e000      	b.n	8009130 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800914c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009150:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009158:	bf00      	nop
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009174:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009178:	d101      	bne.n	800917e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800917a:	2301      	movs	r3, #1
 800917c:	e000      	b.n	8009180 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800919c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80091a0:	f043 0201 	orr.w	r2, r3, #1
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80091c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80091c8:	f043 0202 	orr.w	r2, r3, #2
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80091d0:	bf00      	nop
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	f003 0301 	and.w	r3, r3, #1
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d101      	bne.n	80091f4 <LL_ADC_IsEnabled+0x18>
 80091f0:	2301      	movs	r3, #1
 80091f2:	e000      	b.n	80091f6 <LL_ADC_IsEnabled+0x1a>
 80091f4:	2300      	movs	r3, #0
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	370c      	adds	r7, #12
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr

08009202 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8009202:	b480      	push	{r7}
 8009204:	b083      	sub	sp, #12
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	f003 0302 	and.w	r3, r3, #2
 8009212:	2b02      	cmp	r3, #2
 8009214:	d101      	bne.n	800921a <LL_ADC_IsDisableOngoing+0x18>
 8009216:	2301      	movs	r3, #1
 8009218:	e000      	b.n	800921c <LL_ADC_IsDisableOngoing+0x1a>
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009238:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800923c:	f043 0204 	orr.w	r2, r3, #4
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009244:	bf00      	nop
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009260:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009264:	f043 0210 	orr.w	r2, r3, #16
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800926c:	bf00      	nop
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	f003 0304 	and.w	r3, r3, #4
 8009288:	2b04      	cmp	r3, #4
 800928a:	d101      	bne.n	8009290 <LL_ADC_REG_IsConversionOngoing+0x18>
 800928c:	2301      	movs	r3, #1
 800928e:	e000      	b.n	8009292 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	370c      	adds	r7, #12
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr

0800929e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800929e:	b480      	push	{r7}
 80092a0:	b083      	sub	sp, #12
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80092ae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80092b2:	f043 0220 	orr.w	r2, r3, #32
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80092ba:	bf00      	nop
 80092bc:	370c      	adds	r7, #12
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80092c6:	b480      	push	{r7}
 80092c8:	b083      	sub	sp, #12
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	f003 0308 	and.w	r3, r3, #8
 80092d6:	2b08      	cmp	r3, #8
 80092d8:	d101      	bne.n	80092de <LL_ADC_INJ_IsConversionOngoing+0x18>
 80092da:	2301      	movs	r3, #1
 80092dc:	e000      	b.n	80092e0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80092ec:	b590      	push	{r4, r7, lr}
 80092ee:	b089      	sub	sp, #36	@ 0x24
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80092f4:	2300      	movs	r3, #0
 80092f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80092f8:	2300      	movs	r3, #0
 80092fa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e130      	b.n	8009568 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009310:	2b00      	cmp	r3, #0
 8009312:	d109      	bne.n	8009328 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f7fb ffb9 	bl	800528c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4618      	mov	r0, r3
 800932e:	f7ff fef1 	bl	8009114 <LL_ADC_IsDeepPowerDownEnabled>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d004      	beq.n	8009342 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4618      	mov	r0, r3
 800933e:	f7ff fed7 	bl	80090f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4618      	mov	r0, r3
 8009348:	f7ff ff0c 	bl	8009164 <LL_ADC_IsInternalRegulatorEnabled>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d115      	bne.n	800937e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4618      	mov	r0, r3
 8009358:	f7ff fef0 	bl	800913c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800935c:	4b84      	ldr	r3, [pc, #528]	@ (8009570 <HAL_ADC_Init+0x284>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	099b      	lsrs	r3, r3, #6
 8009362:	4a84      	ldr	r2, [pc, #528]	@ (8009574 <HAL_ADC_Init+0x288>)
 8009364:	fba2 2303 	umull	r2, r3, r2, r3
 8009368:	099b      	lsrs	r3, r3, #6
 800936a:	3301      	adds	r3, #1
 800936c:	005b      	lsls	r3, r3, #1
 800936e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8009370:	e002      	b.n	8009378 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	3b01      	subs	r3, #1
 8009376:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1f9      	bne.n	8009372 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4618      	mov	r0, r3
 8009384:	f7ff feee 	bl	8009164 <LL_ADC_IsInternalRegulatorEnabled>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10d      	bne.n	80093aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009392:	f043 0210 	orr.w	r2, r3, #16
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800939e:	f043 0201 	orr.w	r2, r3, #1
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7ff ff62 	bl	8009278 <LL_ADC_REG_IsConversionOngoing>
 80093b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093ba:	f003 0310 	and.w	r3, r3, #16
 80093be:	2b00      	cmp	r3, #0
 80093c0:	f040 80c9 	bne.w	8009556 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f040 80c5 	bne.w	8009556 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093d0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80093d4:	f043 0202 	orr.w	r2, r3, #2
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7ff fefb 	bl	80091dc <LL_ADC_IsEnabled>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d115      	bne.n	8009418 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80093ec:	4862      	ldr	r0, [pc, #392]	@ (8009578 <HAL_ADC_Init+0x28c>)
 80093ee:	f7ff fef5 	bl	80091dc <LL_ADC_IsEnabled>
 80093f2:	4604      	mov	r4, r0
 80093f4:	4861      	ldr	r0, [pc, #388]	@ (800957c <HAL_ADC_Init+0x290>)
 80093f6:	f7ff fef1 	bl	80091dc <LL_ADC_IsEnabled>
 80093fa:	4603      	mov	r3, r0
 80093fc:	431c      	orrs	r4, r3
 80093fe:	4860      	ldr	r0, [pc, #384]	@ (8009580 <HAL_ADC_Init+0x294>)
 8009400:	f7ff feec 	bl	80091dc <LL_ADC_IsEnabled>
 8009404:	4603      	mov	r3, r0
 8009406:	4323      	orrs	r3, r4
 8009408:	2b00      	cmp	r3, #0
 800940a:	d105      	bne.n	8009418 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	4619      	mov	r1, r3
 8009412:	485c      	ldr	r0, [pc, #368]	@ (8009584 <HAL_ADC_Init+0x298>)
 8009414:	f7ff fd46 	bl	8008ea4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	7e5b      	ldrb	r3, [r3, #25]
 800941c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009422:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8009428:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800942e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009436:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009438:	4313      	orrs	r3, r2
 800943a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009442:	2b01      	cmp	r3, #1
 8009444:	d106      	bne.n	8009454 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800944a:	3b01      	subs	r3, #1
 800944c:	045b      	lsls	r3, r3, #17
 800944e:	69ba      	ldr	r2, [r7, #24]
 8009450:	4313      	orrs	r3, r2
 8009452:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009458:	2b00      	cmp	r3, #0
 800945a:	d009      	beq.n	8009470 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009460:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009468:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800946a:	69ba      	ldr	r2, [r7, #24]
 800946c:	4313      	orrs	r3, r2
 800946e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68da      	ldr	r2, [r3, #12]
 8009476:	4b44      	ldr	r3, [pc, #272]	@ (8009588 <HAL_ADC_Init+0x29c>)
 8009478:	4013      	ands	r3, r2
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	6812      	ldr	r2, [r2, #0]
 800947e:	69b9      	ldr	r1, [r7, #24]
 8009480:	430b      	orrs	r3, r1
 8009482:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4618      	mov	r0, r3
 800948a:	f7ff ff1c 	bl	80092c6 <LL_ADC_INJ_IsConversionOngoing>
 800948e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d13d      	bne.n	8009512 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d13a      	bne.n	8009512 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80094a0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80094a8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80094aa:	4313      	orrs	r3, r2
 80094ac:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80094b8:	f023 0302 	bic.w	r3, r3, #2
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	6812      	ldr	r2, [r2, #0]
 80094c0:	69b9      	ldr	r1, [r7, #24]
 80094c2:	430b      	orrs	r3, r1
 80094c4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d118      	bne.n	8009502 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80094da:	f023 0304 	bic.w	r3, r3, #4
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80094e6:	4311      	orrs	r1, r2
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80094ec:	4311      	orrs	r1, r2
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80094f2:	430a      	orrs	r2, r1
 80094f4:	431a      	orrs	r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f042 0201 	orr.w	r2, r2, #1
 80094fe:	611a      	str	r2, [r3, #16]
 8009500:	e007      	b.n	8009512 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	691a      	ldr	r2, [r3, #16]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f022 0201 	bic.w	r2, r2, #1
 8009510:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	691b      	ldr	r3, [r3, #16]
 8009516:	2b01      	cmp	r3, #1
 8009518:	d10c      	bne.n	8009534 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009520:	f023 010f 	bic.w	r1, r3, #15
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	69db      	ldr	r3, [r3, #28]
 8009528:	1e5a      	subs	r2, r3, #1
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	430a      	orrs	r2, r1
 8009530:	631a      	str	r2, [r3, #48]	@ 0x30
 8009532:	e007      	b.n	8009544 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f022 020f 	bic.w	r2, r2, #15
 8009542:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009548:	f023 0303 	bic.w	r3, r3, #3
 800954c:	f043 0201 	orr.w	r2, r3, #1
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	655a      	str	r2, [r3, #84]	@ 0x54
 8009554:	e007      	b.n	8009566 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800955a:	f043 0210 	orr.w	r2, r3, #16
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009566:	7ffb      	ldrb	r3, [r7, #31]
}
 8009568:	4618      	mov	r0, r3
 800956a:	3724      	adds	r7, #36	@ 0x24
 800956c:	46bd      	mov	sp, r7
 800956e:	bd90      	pop	{r4, r7, pc}
 8009570:	20000000 	.word	0x20000000
 8009574:	053e2d63 	.word	0x053e2d63
 8009578:	50040000 	.word	0x50040000
 800957c:	50040100 	.word	0x50040100
 8009580:	50040200 	.word	0x50040200
 8009584:	50040300 	.word	0x50040300
 8009588:	fff0c007 	.word	0xfff0c007

0800958c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009598:	4853      	ldr	r0, [pc, #332]	@ (80096e8 <HAL_ADC_Start_DMA+0x15c>)
 800959a:	f7ff fd9b 	bl	80090d4 <LL_ADC_GetMultimode>
 800959e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7ff fe67 	bl	8009278 <LL_ADC_REG_IsConversionOngoing>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f040 8093 	bne.w	80096d8 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d101      	bne.n	80095c0 <HAL_ADC_Start_DMA+0x34>
 80095bc:	2302      	movs	r3, #2
 80095be:	e08e      	b.n	80096de <HAL_ADC_Start_DMA+0x152>
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a47      	ldr	r2, [pc, #284]	@ (80096ec <HAL_ADC_Start_DMA+0x160>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d008      	beq.n	80095e4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d005      	beq.n	80095e4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	2b05      	cmp	r3, #5
 80095dc:	d002      	beq.n	80095e4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	2b09      	cmp	r3, #9
 80095e2:	d172      	bne.n	80096ca <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f000 fda7 	bl	800a138 <ADC_Enable>
 80095ea:	4603      	mov	r3, r0
 80095ec:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80095ee:	7dfb      	ldrb	r3, [r7, #23]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d165      	bne.n	80096c0 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80095fc:	f023 0301 	bic.w	r3, r3, #1
 8009600:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a38      	ldr	r2, [pc, #224]	@ (80096f0 <HAL_ADC_Start_DMA+0x164>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d002      	beq.n	8009618 <HAL_ADC_Start_DMA+0x8c>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	e000      	b.n	800961a <HAL_ADC_Start_DMA+0x8e>
 8009618:	4b36      	ldr	r3, [pc, #216]	@ (80096f4 <HAL_ADC_Start_DMA+0x168>)
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	6812      	ldr	r2, [r2, #0]
 800961e:	4293      	cmp	r3, r2
 8009620:	d002      	beq.n	8009628 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d105      	bne.n	8009634 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800962c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009638:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800963c:	2b00      	cmp	r3, #0
 800963e:	d006      	beq.n	800964e <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009644:	f023 0206 	bic.w	r2, r3, #6
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	659a      	str	r2, [r3, #88]	@ 0x58
 800964c:	e002      	b.n	8009654 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009658:	4a27      	ldr	r2, [pc, #156]	@ (80096f8 <HAL_ADC_Start_DMA+0x16c>)
 800965a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009660:	4a26      	ldr	r2, [pc, #152]	@ (80096fc <HAL_ADC_Start_DMA+0x170>)
 8009662:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009668:	4a25      	ldr	r2, [pc, #148]	@ (8009700 <HAL_ADC_Start_DMA+0x174>)
 800966a:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	221c      	movs	r2, #28
 8009672:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	685a      	ldr	r2, [r3, #4]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f042 0210 	orr.w	r2, r2, #16
 800968a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68da      	ldr	r2, [r3, #12]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f042 0201 	orr.w	r2, r2, #1
 800969a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3340      	adds	r3, #64	@ 0x40
 80096a6:	4619      	mov	r1, r3
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f001 fa6a 	bl	800ab84 <HAL_DMA_Start_IT>
 80096b0:	4603      	mov	r3, r0
 80096b2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7ff fdb5 	bl	8009228 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80096be:	e00d      	b.n	80096dc <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2200      	movs	r2, #0
 80096c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80096c8:	e008      	b.n	80096dc <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80096d6:	e001      	b.n	80096dc <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80096d8:	2302      	movs	r3, #2
 80096da:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80096dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3718      	adds	r7, #24
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	50040300 	.word	0x50040300
 80096ec:	50040200 	.word	0x50040200
 80096f0:	50040100 	.word	0x50040100
 80096f4:	50040000 	.word	0x50040000
 80096f8:	0800a303 	.word	0x0800a303
 80096fc:	0800a3db 	.word	0x0800a3db
 8009700:	0800a3f7 	.word	0x0800a3f7

08009704 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009712:	2b01      	cmp	r3, #1
 8009714:	d101      	bne.n	800971a <HAL_ADC_Stop_DMA+0x16>
 8009716:	2302      	movs	r3, #2
 8009718:	e051      	b.n	80097be <HAL_ADC_Stop_DMA+0xba>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2201      	movs	r2, #1
 800971e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8009722:	2103      	movs	r1, #3
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 fc4b 	bl	8009fc0 <ADC_ConversionStop>
 800972a:	4603      	mov	r3, r0
 800972c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d13f      	bne.n	80097b4 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68da      	ldr	r2, [r3, #12]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f022 0201 	bic.w	r2, r2, #1
 8009742:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009748:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800974c:	b2db      	uxtb	r3, r3
 800974e:	2b02      	cmp	r3, #2
 8009750:	d10f      	bne.n	8009772 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009756:	4618      	mov	r0, r3
 8009758:	f001 fa74 	bl	800ac44 <HAL_DMA_Abort>
 800975c:	4603      	mov	r3, r0
 800975e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8009760:	7bfb      	ldrb	r3, [r7, #15]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d005      	beq.n	8009772 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800976a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	685a      	ldr	r2, [r3, #4]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f022 0210 	bic.w	r2, r2, #16
 8009780:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8009782:	7bfb      	ldrb	r3, [r7, #15]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d105      	bne.n	8009794 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 fd5b 	bl	800a244 <ADC_Disable>
 800978e:	4603      	mov	r3, r0
 8009790:	73fb      	strb	r3, [r7, #15]
 8009792:	e002      	b.n	800979a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 fd55 	bl	800a244 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800979a:	7bfb      	ldrb	r3, [r7, #15]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d109      	bne.n	80097b4 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097a4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80097a8:	f023 0301 	bic.w	r3, r3, #1
 80097ac:	f043 0201 	orr.w	r2, r3, #1
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80097c6:	b480      	push	{r7}
 80097c8:	b083      	sub	sp, #12
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80097ce:	bf00      	nop
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
	...

080097dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b0b6      	sub	sp, #216	@ 0xd8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80097ec:	2300      	movs	r3, #0
 80097ee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d101      	bne.n	80097fe <HAL_ADC_ConfigChannel+0x22>
 80097fa:	2302      	movs	r3, #2
 80097fc:	e3c9      	b.n	8009f92 <HAL_ADC_ConfigChannel+0x7b6>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2201      	movs	r2, #1
 8009802:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4618      	mov	r0, r3
 800980c:	f7ff fd34 	bl	8009278 <LL_ADC_REG_IsConversionOngoing>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	f040 83aa 	bne.w	8009f6c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	2b05      	cmp	r3, #5
 8009826:	d824      	bhi.n	8009872 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	3b02      	subs	r3, #2
 800982e:	2b03      	cmp	r3, #3
 8009830:	d81b      	bhi.n	800986a <HAL_ADC_ConfigChannel+0x8e>
 8009832:	a201      	add	r2, pc, #4	@ (adr r2, 8009838 <HAL_ADC_ConfigChannel+0x5c>)
 8009834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009838:	08009849 	.word	0x08009849
 800983c:	08009851 	.word	0x08009851
 8009840:	08009859 	.word	0x08009859
 8009844:	08009861 	.word	0x08009861
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8009848:	230c      	movs	r3, #12
 800984a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800984e:	e010      	b.n	8009872 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8009850:	2312      	movs	r3, #18
 8009852:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009856:	e00c      	b.n	8009872 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8009858:	2318      	movs	r3, #24
 800985a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800985e:	e008      	b.n	8009872 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8009860:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009864:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009868:	e003      	b.n	8009872 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800986a:	2306      	movs	r3, #6
 800986c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009870:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6818      	ldr	r0, [r3, #0]
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	461a      	mov	r2, r3
 800987c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8009880:	f7ff fbac 	bl	8008fdc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4618      	mov	r0, r3
 800988a:	f7ff fcf5 	bl	8009278 <LL_ADC_REG_IsConversionOngoing>
 800988e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4618      	mov	r0, r3
 8009898:	f7ff fd15 	bl	80092c6 <LL_ADC_INJ_IsConversionOngoing>
 800989c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80098a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f040 81a4 	bne.w	8009bf2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80098aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f040 819f 	bne.w	8009bf2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6818      	ldr	r0, [r3, #0]
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	6819      	ldr	r1, [r3, #0]
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	461a      	mov	r2, r3
 80098c2:	f7ff fbb7 	bl	8009034 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	695a      	ldr	r2, [r3, #20]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	08db      	lsrs	r3, r3, #3
 80098d2:	f003 0303 	and.w	r3, r3, #3
 80098d6:	005b      	lsls	r3, r3, #1
 80098d8:	fa02 f303 	lsl.w	r3, r2, r3
 80098dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	2b04      	cmp	r3, #4
 80098e6:	d00a      	beq.n	80098fe <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6818      	ldr	r0, [r3, #0]
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	6919      	ldr	r1, [r3, #16]
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80098f8:	f7ff fb08 	bl	8008f0c <LL_ADC_SetOffset>
 80098fc:	e179      	b.n	8009bf2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2100      	movs	r1, #0
 8009904:	4618      	mov	r0, r3
 8009906:	f7ff fb25 	bl	8008f54 <LL_ADC_GetOffsetChannel>
 800990a:	4603      	mov	r3, r0
 800990c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009910:	2b00      	cmp	r3, #0
 8009912:	d10a      	bne.n	800992a <HAL_ADC_ConfigChannel+0x14e>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2100      	movs	r1, #0
 800991a:	4618      	mov	r0, r3
 800991c:	f7ff fb1a 	bl	8008f54 <LL_ADC_GetOffsetChannel>
 8009920:	4603      	mov	r3, r0
 8009922:	0e9b      	lsrs	r3, r3, #26
 8009924:	f003 021f 	and.w	r2, r3, #31
 8009928:	e01e      	b.n	8009968 <HAL_ADC_ConfigChannel+0x18c>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2100      	movs	r1, #0
 8009930:	4618      	mov	r0, r3
 8009932:	f7ff fb0f 	bl	8008f54 <LL_ADC_GetOffsetChannel>
 8009936:	4603      	mov	r3, r0
 8009938:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800993c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009940:	fa93 f3a3 	rbit	r3, r3
 8009944:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009948:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800994c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009950:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009954:	2b00      	cmp	r3, #0
 8009956:	d101      	bne.n	800995c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8009958:	2320      	movs	r3, #32
 800995a:	e004      	b.n	8009966 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800995c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009960:	fab3 f383 	clz	r3, r3
 8009964:	b2db      	uxtb	r3, r3
 8009966:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009970:	2b00      	cmp	r3, #0
 8009972:	d105      	bne.n	8009980 <HAL_ADC_ConfigChannel+0x1a4>
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	0e9b      	lsrs	r3, r3, #26
 800997a:	f003 031f 	and.w	r3, r3, #31
 800997e:	e018      	b.n	80099b2 <HAL_ADC_ConfigChannel+0x1d6>
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009988:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800998c:	fa93 f3a3 	rbit	r3, r3
 8009990:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8009994:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009998:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800999c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d101      	bne.n	80099a8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80099a4:	2320      	movs	r3, #32
 80099a6:	e004      	b.n	80099b2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80099a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80099ac:	fab3 f383 	clz	r3, r3
 80099b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d106      	bne.n	80099c4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2200      	movs	r2, #0
 80099bc:	2100      	movs	r1, #0
 80099be:	4618      	mov	r0, r3
 80099c0:	f7ff fade 	bl	8008f80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2101      	movs	r1, #1
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7ff fac2 	bl	8008f54 <LL_ADC_GetOffsetChannel>
 80099d0:	4603      	mov	r3, r0
 80099d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d10a      	bne.n	80099f0 <HAL_ADC_ConfigChannel+0x214>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2101      	movs	r1, #1
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7ff fab7 	bl	8008f54 <LL_ADC_GetOffsetChannel>
 80099e6:	4603      	mov	r3, r0
 80099e8:	0e9b      	lsrs	r3, r3, #26
 80099ea:	f003 021f 	and.w	r2, r3, #31
 80099ee:	e01e      	b.n	8009a2e <HAL_ADC_ConfigChannel+0x252>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2101      	movs	r1, #1
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7ff faac 	bl	8008f54 <LL_ADC_GetOffsetChannel>
 80099fc:	4603      	mov	r3, r0
 80099fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a06:	fa93 f3a3 	rbit	r3, r3
 8009a0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8009a0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009a12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8009a16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d101      	bne.n	8009a22 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8009a1e:	2320      	movs	r3, #32
 8009a20:	e004      	b.n	8009a2c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8009a22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009a26:	fab3 f383 	clz	r3, r3
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d105      	bne.n	8009a46 <HAL_ADC_ConfigChannel+0x26a>
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	0e9b      	lsrs	r3, r3, #26
 8009a40:	f003 031f 	and.w	r3, r3, #31
 8009a44:	e018      	b.n	8009a78 <HAL_ADC_ConfigChannel+0x29c>
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009a52:	fa93 f3a3 	rbit	r3, r3
 8009a56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8009a5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a5e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8009a62:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d101      	bne.n	8009a6e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8009a6a:	2320      	movs	r3, #32
 8009a6c:	e004      	b.n	8009a78 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8009a6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a72:	fab3 f383 	clz	r3, r3
 8009a76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d106      	bne.n	8009a8a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2200      	movs	r2, #0
 8009a82:	2101      	movs	r1, #1
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7ff fa7b 	bl	8008f80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2102      	movs	r1, #2
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7ff fa5f 	bl	8008f54 <LL_ADC_GetOffsetChannel>
 8009a96:	4603      	mov	r3, r0
 8009a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d10a      	bne.n	8009ab6 <HAL_ADC_ConfigChannel+0x2da>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2102      	movs	r1, #2
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7ff fa54 	bl	8008f54 <LL_ADC_GetOffsetChannel>
 8009aac:	4603      	mov	r3, r0
 8009aae:	0e9b      	lsrs	r3, r3, #26
 8009ab0:	f003 021f 	and.w	r2, r3, #31
 8009ab4:	e01e      	b.n	8009af4 <HAL_ADC_ConfigChannel+0x318>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2102      	movs	r1, #2
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7ff fa49 	bl	8008f54 <LL_ADC_GetOffsetChannel>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ac8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009acc:	fa93 f3a3 	rbit	r3, r3
 8009ad0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8009ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ad8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8009adc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d101      	bne.n	8009ae8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8009ae4:	2320      	movs	r3, #32
 8009ae6:	e004      	b.n	8009af2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8009ae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009aec:	fab3 f383 	clz	r3, r3
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d105      	bne.n	8009b0c <HAL_ADC_ConfigChannel+0x330>
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	0e9b      	lsrs	r3, r3, #26
 8009b06:	f003 031f 	and.w	r3, r3, #31
 8009b0a:	e014      	b.n	8009b36 <HAL_ADC_ConfigChannel+0x35a>
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009b14:	fa93 f3a3 	rbit	r3, r3
 8009b18:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8009b1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8009b20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d101      	bne.n	8009b2c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8009b28:	2320      	movs	r3, #32
 8009b2a:	e004      	b.n	8009b36 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8009b2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009b30:	fab3 f383 	clz	r3, r3
 8009b34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d106      	bne.n	8009b48 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	2102      	movs	r1, #2
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7ff fa1c 	bl	8008f80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2103      	movs	r1, #3
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7ff fa00 	bl	8008f54 <LL_ADC_GetOffsetChannel>
 8009b54:	4603      	mov	r3, r0
 8009b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d10a      	bne.n	8009b74 <HAL_ADC_ConfigChannel+0x398>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2103      	movs	r1, #3
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7ff f9f5 	bl	8008f54 <LL_ADC_GetOffsetChannel>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	0e9b      	lsrs	r3, r3, #26
 8009b6e:	f003 021f 	and.w	r2, r3, #31
 8009b72:	e017      	b.n	8009ba4 <HAL_ADC_ConfigChannel+0x3c8>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2103      	movs	r1, #3
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7ff f9ea 	bl	8008f54 <LL_ADC_GetOffsetChannel>
 8009b80:	4603      	mov	r3, r0
 8009b82:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b86:	fa93 f3a3 	rbit	r3, r3
 8009b8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8009b8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b8e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8009b90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d101      	bne.n	8009b9a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8009b96:	2320      	movs	r3, #32
 8009b98:	e003      	b.n	8009ba2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8009b9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b9c:	fab3 f383 	clz	r3, r3
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d105      	bne.n	8009bbc <HAL_ADC_ConfigChannel+0x3e0>
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	0e9b      	lsrs	r3, r3, #26
 8009bb6:	f003 031f 	and.w	r3, r3, #31
 8009bba:	e011      	b.n	8009be0 <HAL_ADC_ConfigChannel+0x404>
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bc4:	fa93 f3a3 	rbit	r3, r3
 8009bc8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8009bca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009bcc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8009bce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d101      	bne.n	8009bd8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8009bd4:	2320      	movs	r3, #32
 8009bd6:	e003      	b.n	8009be0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8009bd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009bda:	fab3 f383 	clz	r3, r3
 8009bde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d106      	bne.n	8009bf2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2200      	movs	r2, #0
 8009bea:	2103      	movs	r1, #3
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7ff f9c7 	bl	8008f80 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7ff faf0 	bl	80091dc <LL_ADC_IsEnabled>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f040 8140 	bne.w	8009e84 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6818      	ldr	r0, [r3, #0]
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	6819      	ldr	r1, [r3, #0]
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	68db      	ldr	r3, [r3, #12]
 8009c10:	461a      	mov	r2, r3
 8009c12:	f7ff fa3b 	bl	800908c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	4a8f      	ldr	r2, [pc, #572]	@ (8009e58 <HAL_ADC_ConfigChannel+0x67c>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	f040 8131 	bne.w	8009e84 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10b      	bne.n	8009c4a <HAL_ADC_ConfigChannel+0x46e>
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	0e9b      	lsrs	r3, r3, #26
 8009c38:	3301      	adds	r3, #1
 8009c3a:	f003 031f 	and.w	r3, r3, #31
 8009c3e:	2b09      	cmp	r3, #9
 8009c40:	bf94      	ite	ls
 8009c42:	2301      	movls	r3, #1
 8009c44:	2300      	movhi	r3, #0
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	e019      	b.n	8009c7e <HAL_ADC_ConfigChannel+0x4a2>
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c52:	fa93 f3a3 	rbit	r3, r3
 8009c56:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8009c58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8009c5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d101      	bne.n	8009c66 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8009c62:	2320      	movs	r3, #32
 8009c64:	e003      	b.n	8009c6e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8009c66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c68:	fab3 f383 	clz	r3, r3
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	3301      	adds	r3, #1
 8009c70:	f003 031f 	and.w	r3, r3, #31
 8009c74:	2b09      	cmp	r3, #9
 8009c76:	bf94      	ite	ls
 8009c78:	2301      	movls	r3, #1
 8009c7a:	2300      	movhi	r3, #0
 8009c7c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d079      	beq.n	8009d76 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d107      	bne.n	8009c9e <HAL_ADC_ConfigChannel+0x4c2>
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	0e9b      	lsrs	r3, r3, #26
 8009c94:	3301      	adds	r3, #1
 8009c96:	069b      	lsls	r3, r3, #26
 8009c98:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009c9c:	e015      	b.n	8009cca <HAL_ADC_ConfigChannel+0x4ee>
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ca6:	fa93 f3a3 	rbit	r3, r3
 8009caa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8009cac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cae:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8009cb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d101      	bne.n	8009cba <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8009cb6:	2320      	movs	r3, #32
 8009cb8:	e003      	b.n	8009cc2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8009cba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cbc:	fab3 f383 	clz	r3, r3
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	069b      	lsls	r3, r3, #26
 8009cc6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d109      	bne.n	8009cea <HAL_ADC_ConfigChannel+0x50e>
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	0e9b      	lsrs	r3, r3, #26
 8009cdc:	3301      	adds	r3, #1
 8009cde:	f003 031f 	and.w	r3, r3, #31
 8009ce2:	2101      	movs	r1, #1
 8009ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ce8:	e017      	b.n	8009d1a <HAL_ADC_ConfigChannel+0x53e>
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cf2:	fa93 f3a3 	rbit	r3, r3
 8009cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8009cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cfa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8009cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d101      	bne.n	8009d06 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8009d02:	2320      	movs	r3, #32
 8009d04:	e003      	b.n	8009d0e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8009d06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d08:	fab3 f383 	clz	r3, r3
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	3301      	adds	r3, #1
 8009d10:	f003 031f 	and.w	r3, r3, #31
 8009d14:	2101      	movs	r1, #1
 8009d16:	fa01 f303 	lsl.w	r3, r1, r3
 8009d1a:	ea42 0103 	orr.w	r1, r2, r3
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d10a      	bne.n	8009d40 <HAL_ADC_ConfigChannel+0x564>
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	0e9b      	lsrs	r3, r3, #26
 8009d30:	3301      	adds	r3, #1
 8009d32:	f003 021f 	and.w	r2, r3, #31
 8009d36:	4613      	mov	r3, r2
 8009d38:	005b      	lsls	r3, r3, #1
 8009d3a:	4413      	add	r3, r2
 8009d3c:	051b      	lsls	r3, r3, #20
 8009d3e:	e018      	b.n	8009d72 <HAL_ADC_ConfigChannel+0x596>
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d48:	fa93 f3a3 	rbit	r3, r3
 8009d4c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8009d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d50:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8009d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d101      	bne.n	8009d5c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8009d58:	2320      	movs	r3, #32
 8009d5a:	e003      	b.n	8009d64 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8009d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d5e:	fab3 f383 	clz	r3, r3
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	3301      	adds	r3, #1
 8009d66:	f003 021f 	and.w	r2, r3, #31
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	005b      	lsls	r3, r3, #1
 8009d6e:	4413      	add	r3, r2
 8009d70:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009d72:	430b      	orrs	r3, r1
 8009d74:	e081      	b.n	8009e7a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d107      	bne.n	8009d92 <HAL_ADC_ConfigChannel+0x5b6>
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	0e9b      	lsrs	r3, r3, #26
 8009d88:	3301      	adds	r3, #1
 8009d8a:	069b      	lsls	r3, r3, #26
 8009d8c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009d90:	e015      	b.n	8009dbe <HAL_ADC_ConfigChannel+0x5e2>
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d9a:	fa93 f3a3 	rbit	r3, r3
 8009d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8009da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8009da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d101      	bne.n	8009dae <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8009daa:	2320      	movs	r3, #32
 8009dac:	e003      	b.n	8009db6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8009dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009db0:	fab3 f383 	clz	r3, r3
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	3301      	adds	r3, #1
 8009db8:	069b      	lsls	r3, r3, #26
 8009dba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d109      	bne.n	8009dde <HAL_ADC_ConfigChannel+0x602>
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	0e9b      	lsrs	r3, r3, #26
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	f003 031f 	and.w	r3, r3, #31
 8009dd6:	2101      	movs	r1, #1
 8009dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8009ddc:	e017      	b.n	8009e0e <HAL_ADC_ConfigChannel+0x632>
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009de4:	69fb      	ldr	r3, [r7, #28]
 8009de6:	fa93 f3a3 	rbit	r3, r3
 8009dea:	61bb      	str	r3, [r7, #24]
  return result;
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8009df0:	6a3b      	ldr	r3, [r7, #32]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d101      	bne.n	8009dfa <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8009df6:	2320      	movs	r3, #32
 8009df8:	e003      	b.n	8009e02 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8009dfa:	6a3b      	ldr	r3, [r7, #32]
 8009dfc:	fab3 f383 	clz	r3, r3
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	3301      	adds	r3, #1
 8009e04:	f003 031f 	and.w	r3, r3, #31
 8009e08:	2101      	movs	r1, #1
 8009e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e0e:	ea42 0103 	orr.w	r1, r2, r3
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d10d      	bne.n	8009e3a <HAL_ADC_ConfigChannel+0x65e>
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	0e9b      	lsrs	r3, r3, #26
 8009e24:	3301      	adds	r3, #1
 8009e26:	f003 021f 	and.w	r2, r3, #31
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	005b      	lsls	r3, r3, #1
 8009e2e:	4413      	add	r3, r2
 8009e30:	3b1e      	subs	r3, #30
 8009e32:	051b      	lsls	r3, r3, #20
 8009e34:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009e38:	e01e      	b.n	8009e78 <HAL_ADC_ConfigChannel+0x69c>
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	fa93 f3a3 	rbit	r3, r3
 8009e46:	60fb      	str	r3, [r7, #12]
  return result;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d104      	bne.n	8009e5c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8009e52:	2320      	movs	r3, #32
 8009e54:	e006      	b.n	8009e64 <HAL_ADC_ConfigChannel+0x688>
 8009e56:	bf00      	nop
 8009e58:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	fab3 f383 	clz	r3, r3
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	3301      	adds	r3, #1
 8009e66:	f003 021f 	and.w	r2, r3, #31
 8009e6a:	4613      	mov	r3, r2
 8009e6c:	005b      	lsls	r3, r3, #1
 8009e6e:	4413      	add	r3, r2
 8009e70:	3b1e      	subs	r3, #30
 8009e72:	051b      	lsls	r3, r3, #20
 8009e74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009e78:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8009e7a:	683a      	ldr	r2, [r7, #0]
 8009e7c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009e7e:	4619      	mov	r1, r3
 8009e80:	f7ff f8d8 	bl	8009034 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	4b44      	ldr	r3, [pc, #272]	@ (8009f9c <HAL_ADC_ConfigChannel+0x7c0>)
 8009e8a:	4013      	ands	r3, r2
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d07a      	beq.n	8009f86 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009e90:	4843      	ldr	r0, [pc, #268]	@ (8009fa0 <HAL_ADC_ConfigChannel+0x7c4>)
 8009e92:	f7ff f82d 	bl	8008ef0 <LL_ADC_GetCommonPathInternalCh>
 8009e96:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a41      	ldr	r2, [pc, #260]	@ (8009fa4 <HAL_ADC_ConfigChannel+0x7c8>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d12c      	bne.n	8009efe <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009ea4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009ea8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d126      	bne.n	8009efe <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a3c      	ldr	r2, [pc, #240]	@ (8009fa8 <HAL_ADC_ConfigChannel+0x7cc>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d004      	beq.n	8009ec4 <HAL_ADC_ConfigChannel+0x6e8>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a3b      	ldr	r2, [pc, #236]	@ (8009fac <HAL_ADC_ConfigChannel+0x7d0>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d15d      	bne.n	8009f80 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009ec4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009ec8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009ecc:	4619      	mov	r1, r3
 8009ece:	4834      	ldr	r0, [pc, #208]	@ (8009fa0 <HAL_ADC_ConfigChannel+0x7c4>)
 8009ed0:	f7fe fffb 	bl	8008eca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009ed4:	4b36      	ldr	r3, [pc, #216]	@ (8009fb0 <HAL_ADC_ConfigChannel+0x7d4>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	099b      	lsrs	r3, r3, #6
 8009eda:	4a36      	ldr	r2, [pc, #216]	@ (8009fb4 <HAL_ADC_ConfigChannel+0x7d8>)
 8009edc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee0:	099b      	lsrs	r3, r3, #6
 8009ee2:	1c5a      	adds	r2, r3, #1
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	005b      	lsls	r3, r3, #1
 8009ee8:	4413      	add	r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009eee:	e002      	b.n	8009ef6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d1f9      	bne.n	8009ef0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009efc:	e040      	b.n	8009f80 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a2d      	ldr	r2, [pc, #180]	@ (8009fb8 <HAL_ADC_ConfigChannel+0x7dc>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d118      	bne.n	8009f3a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009f08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009f0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d112      	bne.n	8009f3a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a23      	ldr	r2, [pc, #140]	@ (8009fa8 <HAL_ADC_ConfigChannel+0x7cc>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d004      	beq.n	8009f28 <HAL_ADC_ConfigChannel+0x74c>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a22      	ldr	r2, [pc, #136]	@ (8009fac <HAL_ADC_ConfigChannel+0x7d0>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d12d      	bne.n	8009f84 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009f28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009f2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009f30:	4619      	mov	r1, r3
 8009f32:	481b      	ldr	r0, [pc, #108]	@ (8009fa0 <HAL_ADC_ConfigChannel+0x7c4>)
 8009f34:	f7fe ffc9 	bl	8008eca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009f38:	e024      	b.n	8009f84 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a1f      	ldr	r2, [pc, #124]	@ (8009fbc <HAL_ADC_ConfigChannel+0x7e0>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d120      	bne.n	8009f86 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009f44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009f48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d11a      	bne.n	8009f86 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a14      	ldr	r2, [pc, #80]	@ (8009fa8 <HAL_ADC_ConfigChannel+0x7cc>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d115      	bne.n	8009f86 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009f5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009f5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009f62:	4619      	mov	r1, r3
 8009f64:	480e      	ldr	r0, [pc, #56]	@ (8009fa0 <HAL_ADC_ConfigChannel+0x7c4>)
 8009f66:	f7fe ffb0 	bl	8008eca <LL_ADC_SetCommonPathInternalCh>
 8009f6a:	e00c      	b.n	8009f86 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f70:	f043 0220 	orr.w	r2, r3, #32
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8009f7e:	e002      	b.n	8009f86 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009f80:	bf00      	nop
 8009f82:	e000      	b.n	8009f86 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009f84:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8009f8e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	37d8      	adds	r7, #216	@ 0xd8
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	80080000 	.word	0x80080000
 8009fa0:	50040300 	.word	0x50040300
 8009fa4:	c7520000 	.word	0xc7520000
 8009fa8:	50040000 	.word	0x50040000
 8009fac:	50040200 	.word	0x50040200
 8009fb0:	20000000 	.word	0x20000000
 8009fb4:	053e2d63 	.word	0x053e2d63
 8009fb8:	cb840000 	.word	0xcb840000
 8009fbc:	80000001 	.word	0x80000001

08009fc0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b088      	sub	sp, #32
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7ff f94e 	bl	8009278 <LL_ADC_REG_IsConversionOngoing>
 8009fdc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7ff f96f 	bl	80092c6 <LL_ADC_INJ_IsConversionOngoing>
 8009fe8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d103      	bne.n	8009ff8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f000 8098 	beq.w	800a128 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a002:	2b00      	cmp	r3, #0
 800a004:	d02a      	beq.n	800a05c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	7e5b      	ldrb	r3, [r3, #25]
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d126      	bne.n	800a05c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	7e1b      	ldrb	r3, [r3, #24]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d122      	bne.n	800a05c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800a016:	2301      	movs	r3, #1
 800a018:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800a01a:	e014      	b.n	800a046 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	4a45      	ldr	r2, [pc, #276]	@ (800a134 <ADC_ConversionStop+0x174>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d90d      	bls.n	800a040 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a028:	f043 0210 	orr.w	r2, r3, #16
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a034:	f043 0201 	orr.w	r2, r3, #1
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	e074      	b.n	800a12a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	3301      	adds	r3, #1
 800a044:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a050:	2b40      	cmp	r3, #64	@ 0x40
 800a052:	d1e3      	bne.n	800a01c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2240      	movs	r2, #64	@ 0x40
 800a05a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800a05c:	69bb      	ldr	r3, [r7, #24]
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d014      	beq.n	800a08c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4618      	mov	r0, r3
 800a068:	f7ff f906 	bl	8009278 <LL_ADC_REG_IsConversionOngoing>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00c      	beq.n	800a08c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4618      	mov	r0, r3
 800a078:	f7ff f8c3 	bl	8009202 <LL_ADC_IsDisableOngoing>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d104      	bne.n	800a08c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4618      	mov	r0, r3
 800a088:	f7ff f8e2 	bl	8009250 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d014      	beq.n	800a0bc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4618      	mov	r0, r3
 800a098:	f7ff f915 	bl	80092c6 <LL_ADC_INJ_IsConversionOngoing>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00c      	beq.n	800a0bc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7ff f8ab 	bl	8009202 <LL_ADC_IsDisableOngoing>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d104      	bne.n	800a0bc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7ff f8f1 	bl	800929e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	d005      	beq.n	800a0ce <ADC_ConversionStop+0x10e>
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	2b03      	cmp	r3, #3
 800a0c6:	d105      	bne.n	800a0d4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800a0c8:	230c      	movs	r3, #12
 800a0ca:	617b      	str	r3, [r7, #20]
        break;
 800a0cc:	e005      	b.n	800a0da <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800a0ce:	2308      	movs	r3, #8
 800a0d0:	617b      	str	r3, [r7, #20]
        break;
 800a0d2:	e002      	b.n	800a0da <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800a0d4:	2304      	movs	r3, #4
 800a0d6:	617b      	str	r3, [r7, #20]
        break;
 800a0d8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800a0da:	f7fe feb3 	bl	8008e44 <HAL_GetTick>
 800a0de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a0e0:	e01b      	b.n	800a11a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800a0e2:	f7fe feaf 	bl	8008e44 <HAL_GetTick>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	1ad3      	subs	r3, r2, r3
 800a0ec:	2b05      	cmp	r3, #5
 800a0ee:	d914      	bls.n	800a11a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	689a      	ldr	r2, [r3, #8]
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00d      	beq.n	800a11a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a102:	f043 0210 	orr.w	r2, r3, #16
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a10e:	f043 0201 	orr.w	r2, r3, #1
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	e007      	b.n	800a12a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	689a      	ldr	r2, [r3, #8]
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	4013      	ands	r3, r2
 800a124:	2b00      	cmp	r3, #0
 800a126:	d1dc      	bne.n	800a0e2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3720      	adds	r7, #32
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	a33fffff 	.word	0xa33fffff

0800a138 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800a140:	2300      	movs	r3, #0
 800a142:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4618      	mov	r0, r3
 800a14a:	f7ff f847 	bl	80091dc <LL_ADC_IsEnabled>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d169      	bne.n	800a228 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	689a      	ldr	r2, [r3, #8]
 800a15a:	4b36      	ldr	r3, [pc, #216]	@ (800a234 <ADC_Enable+0xfc>)
 800a15c:	4013      	ands	r3, r2
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00d      	beq.n	800a17e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a166:	f043 0210 	orr.w	r2, r3, #16
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a172:	f043 0201 	orr.w	r2, r3, #1
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	e055      	b.n	800a22a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4618      	mov	r0, r3
 800a184:	f7ff f802 	bl	800918c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800a188:	482b      	ldr	r0, [pc, #172]	@ (800a238 <ADC_Enable+0x100>)
 800a18a:	f7fe feb1 	bl	8008ef0 <LL_ADC_GetCommonPathInternalCh>
 800a18e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800a190:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800a194:	2b00      	cmp	r3, #0
 800a196:	d013      	beq.n	800a1c0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a198:	4b28      	ldr	r3, [pc, #160]	@ (800a23c <ADC_Enable+0x104>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	099b      	lsrs	r3, r3, #6
 800a19e:	4a28      	ldr	r2, [pc, #160]	@ (800a240 <ADC_Enable+0x108>)
 800a1a0:	fba2 2303 	umull	r2, r3, r2, r3
 800a1a4:	099b      	lsrs	r3, r3, #6
 800a1a6:	1c5a      	adds	r2, r3, #1
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	005b      	lsls	r3, r3, #1
 800a1ac:	4413      	add	r3, r2
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800a1b2:	e002      	b.n	800a1ba <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1f9      	bne.n	800a1b4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800a1c0:	f7fe fe40 	bl	8008e44 <HAL_GetTick>
 800a1c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a1c6:	e028      	b.n	800a21a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7ff f805 	bl	80091dc <LL_ADC_IsEnabled>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d104      	bne.n	800a1e2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7fe ffd5 	bl	800918c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a1e2:	f7fe fe2f 	bl	8008e44 <HAL_GetTick>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	1ad3      	subs	r3, r2, r3
 800a1ec:	2b02      	cmp	r3, #2
 800a1ee:	d914      	bls.n	800a21a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 0301 	and.w	r3, r3, #1
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d00d      	beq.n	800a21a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a202:	f043 0210 	orr.w	r2, r3, #16
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a20e:	f043 0201 	orr.w	r2, r3, #1
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	e007      	b.n	800a22a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f003 0301 	and.w	r3, r3, #1
 800a224:	2b01      	cmp	r3, #1
 800a226:	d1cf      	bne.n	800a1c8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	8000003f 	.word	0x8000003f
 800a238:	50040300 	.word	0x50040300
 800a23c:	20000000 	.word	0x20000000
 800a240:	053e2d63 	.word	0x053e2d63

0800a244 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4618      	mov	r0, r3
 800a252:	f7fe ffd6 	bl	8009202 <LL_ADC_IsDisableOngoing>
 800a256:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7fe ffbd 	bl	80091dc <LL_ADC_IsEnabled>
 800a262:	4603      	mov	r3, r0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d047      	beq.n	800a2f8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d144      	bne.n	800a2f8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	f003 030d 	and.w	r3, r3, #13
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d10c      	bne.n	800a296 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4618      	mov	r0, r3
 800a282:	f7fe ff97 	bl	80091b4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2203      	movs	r2, #3
 800a28c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a28e:	f7fe fdd9 	bl	8008e44 <HAL_GetTick>
 800a292:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a294:	e029      	b.n	800a2ea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a29a:	f043 0210 	orr.w	r2, r3, #16
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2a6:	f043 0201 	orr.w	r2, r3, #1
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e023      	b.n	800a2fa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a2b2:	f7fe fdc7 	bl	8008e44 <HAL_GetTick>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	1ad3      	subs	r3, r2, r3
 800a2bc:	2b02      	cmp	r3, #2
 800a2be:	d914      	bls.n	800a2ea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	f003 0301 	and.w	r3, r3, #1
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00d      	beq.n	800a2ea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2d2:	f043 0210 	orr.w	r2, r3, #16
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2de:	f043 0201 	orr.w	r2, r3, #1
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e007      	b.n	800a2fa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	f003 0301 	and.w	r3, r3, #1
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d1dc      	bne.n	800a2b2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b084      	sub	sp, #16
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a30e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a314:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d14b      	bne.n	800a3b4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a320:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f003 0308 	and.w	r3, r3, #8
 800a332:	2b00      	cmp	r3, #0
 800a334:	d021      	beq.n	800a37a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7fe fe3b 	bl	8008fb6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d032      	beq.n	800a3ac <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a350:	2b00      	cmp	r3, #0
 800a352:	d12b      	bne.n	800a3ac <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a358:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a364:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d11f      	bne.n	800a3ac <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a370:	f043 0201 	orr.w	r2, r3, #1
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	655a      	str	r2, [r3, #84]	@ 0x54
 800a378:	e018      	b.n	800a3ac <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	f003 0302 	and.w	r3, r3, #2
 800a384:	2b00      	cmp	r3, #0
 800a386:	d111      	bne.n	800a3ac <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a38c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a398:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d105      	bne.n	800a3ac <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3a4:	f043 0201 	orr.w	r2, r3, #1
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f7f7 fafb 	bl	80019a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a3b2:	e00e      	b.n	800a3d2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3b8:	f003 0310 	and.w	r3, r3, #16
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d003      	beq.n	800a3c8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f7ff fa00 	bl	80097c6 <HAL_ADC_ErrorCallback>
}
 800a3c6:	e004      	b.n	800a3d2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	4798      	blx	r3
}
 800a3d2:	bf00      	nop
 800a3d4:	3710      	adds	r7, #16
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b084      	sub	sp, #16
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3e6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a3e8:	68f8      	ldr	r0, [r7, #12]
 800a3ea:	f7f7 fac1 	bl	8001970 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a3ee:	bf00      	nop
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b084      	sub	sp, #16
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a402:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a408:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a414:	f043 0204 	orr.w	r2, r3, #4
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a41c:	68f8      	ldr	r0, [r7, #12]
 800a41e:	f7ff f9d2 	bl	80097c6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a422:	bf00      	nop
 800a424:	3710      	adds	r7, #16
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <LL_ADC_IsEnabled>:
{
 800a42a:	b480      	push	{r7}
 800a42c:	b083      	sub	sp, #12
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	f003 0301 	and.w	r3, r3, #1
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d101      	bne.n	800a442 <LL_ADC_IsEnabled+0x18>
 800a43e:	2301      	movs	r3, #1
 800a440:	e000      	b.n	800a444 <LL_ADC_IsEnabled+0x1a>
 800a442:	2300      	movs	r3, #0
}
 800a444:	4618      	mov	r0, r3
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <LL_ADC_REG_IsConversionOngoing>:
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	f003 0304 	and.w	r3, r3, #4
 800a460:	2b04      	cmp	r3, #4
 800a462:	d101      	bne.n	800a468 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a464:	2301      	movs	r3, #1
 800a466:	e000      	b.n	800a46a <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	370c      	adds	r7, #12
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr
	...

0800a478 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800a478:	b590      	push	{r4, r7, lr}
 800a47a:	b09f      	sub	sp, #124	@ 0x7c
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a482:	2300      	movs	r3, #0
 800a484:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d101      	bne.n	800a496 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800a492:	2302      	movs	r3, #2
 800a494:	e093      	b.n	800a5be <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2201      	movs	r2, #1
 800a49a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800a49e:	2300      	movs	r3, #0
 800a4a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a47      	ldr	r2, [pc, #284]	@ (800a5c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d102      	bne.n	800a4b6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800a4b0:	4b46      	ldr	r3, [pc, #280]	@ (800a5cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800a4b2:	60bb      	str	r3, [r7, #8]
 800a4b4:	e001      	b.n	800a4ba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d10b      	bne.n	800a4d8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4c4:	f043 0220 	orr.w	r2, r3, #32
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e072      	b.n	800a5be <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7ff ffb8 	bl	800a450 <LL_ADC_REG_IsConversionOngoing>
 800a4e0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7ff ffb2 	bl	800a450 <LL_ADC_REG_IsConversionOngoing>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d154      	bne.n	800a59c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800a4f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d151      	bne.n	800a59c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800a4f8:	4b35      	ldr	r3, [pc, #212]	@ (800a5d0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800a4fa:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d02c      	beq.n	800a55e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800a504:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	6859      	ldr	r1, [r3, #4]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a516:	035b      	lsls	r3, r3, #13
 800a518:	430b      	orrs	r3, r1
 800a51a:	431a      	orrs	r2, r3
 800a51c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a51e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a520:	4829      	ldr	r0, [pc, #164]	@ (800a5c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800a522:	f7ff ff82 	bl	800a42a <LL_ADC_IsEnabled>
 800a526:	4604      	mov	r4, r0
 800a528:	4828      	ldr	r0, [pc, #160]	@ (800a5cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800a52a:	f7ff ff7e 	bl	800a42a <LL_ADC_IsEnabled>
 800a52e:	4603      	mov	r3, r0
 800a530:	431c      	orrs	r4, r3
 800a532:	4828      	ldr	r0, [pc, #160]	@ (800a5d4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800a534:	f7ff ff79 	bl	800a42a <LL_ADC_IsEnabled>
 800a538:	4603      	mov	r3, r0
 800a53a:	4323      	orrs	r3, r4
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d137      	bne.n	800a5b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800a540:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800a548:	f023 030f 	bic.w	r3, r3, #15
 800a54c:	683a      	ldr	r2, [r7, #0]
 800a54e:	6811      	ldr	r1, [r2, #0]
 800a550:	683a      	ldr	r2, [r7, #0]
 800a552:	6892      	ldr	r2, [r2, #8]
 800a554:	430a      	orrs	r2, r1
 800a556:	431a      	orrs	r2, r3
 800a558:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a55a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800a55c:	e028      	b.n	800a5b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800a55e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a566:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a568:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a56a:	4817      	ldr	r0, [pc, #92]	@ (800a5c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800a56c:	f7ff ff5d 	bl	800a42a <LL_ADC_IsEnabled>
 800a570:	4604      	mov	r4, r0
 800a572:	4816      	ldr	r0, [pc, #88]	@ (800a5cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800a574:	f7ff ff59 	bl	800a42a <LL_ADC_IsEnabled>
 800a578:	4603      	mov	r3, r0
 800a57a:	431c      	orrs	r4, r3
 800a57c:	4815      	ldr	r0, [pc, #84]	@ (800a5d4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800a57e:	f7ff ff54 	bl	800a42a <LL_ADC_IsEnabled>
 800a582:	4603      	mov	r3, r0
 800a584:	4323      	orrs	r3, r4
 800a586:	2b00      	cmp	r3, #0
 800a588:	d112      	bne.n	800a5b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800a58a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800a592:	f023 030f 	bic.w	r3, r3, #15
 800a596:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a598:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800a59a:	e009      	b.n	800a5b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5a0:	f043 0220 	orr.w	r2, r3, #32
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800a5ae:	e000      	b.n	800a5b2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800a5b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800a5ba:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	377c      	adds	r7, #124	@ 0x7c
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd90      	pop	{r4, r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	50040000 	.word	0x50040000
 800a5cc:	50040100 	.word	0x50040100
 800a5d0:	50040300 	.word	0x50040300
 800a5d4:	50040200 	.word	0x50040200

0800a5d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f003 0307 	and.w	r3, r3, #7
 800a5e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a5e8:	4b0c      	ldr	r3, [pc, #48]	@ (800a61c <__NVIC_SetPriorityGrouping+0x44>)
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a5ee:	68ba      	ldr	r2, [r7, #8]
 800a5f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a5f4:	4013      	ands	r3, r2
 800a5f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a600:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a604:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a60a:	4a04      	ldr	r2, [pc, #16]	@ (800a61c <__NVIC_SetPriorityGrouping+0x44>)
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	60d3      	str	r3, [r2, #12]
}
 800a610:	bf00      	nop
 800a612:	3714      	adds	r7, #20
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr
 800a61c:	e000ed00 	.word	0xe000ed00

0800a620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a620:	b480      	push	{r7}
 800a622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a624:	4b04      	ldr	r3, [pc, #16]	@ (800a638 <__NVIC_GetPriorityGrouping+0x18>)
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	0a1b      	lsrs	r3, r3, #8
 800a62a:	f003 0307 	and.w	r3, r3, #7
}
 800a62e:	4618      	mov	r0, r3
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr
 800a638:	e000ed00 	.word	0xe000ed00

0800a63c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	4603      	mov	r3, r0
 800a644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	db0b      	blt.n	800a666 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a64e:	79fb      	ldrb	r3, [r7, #7]
 800a650:	f003 021f 	and.w	r2, r3, #31
 800a654:	4907      	ldr	r1, [pc, #28]	@ (800a674 <__NVIC_EnableIRQ+0x38>)
 800a656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a65a:	095b      	lsrs	r3, r3, #5
 800a65c:	2001      	movs	r0, #1
 800a65e:	fa00 f202 	lsl.w	r2, r0, r2
 800a662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a666:	bf00      	nop
 800a668:	370c      	adds	r7, #12
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	e000e100 	.word	0xe000e100

0800a678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	4603      	mov	r3, r0
 800a680:	6039      	str	r1, [r7, #0]
 800a682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	db0a      	blt.n	800a6a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	b2da      	uxtb	r2, r3
 800a690:	490c      	ldr	r1, [pc, #48]	@ (800a6c4 <__NVIC_SetPriority+0x4c>)
 800a692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a696:	0112      	lsls	r2, r2, #4
 800a698:	b2d2      	uxtb	r2, r2
 800a69a:	440b      	add	r3, r1
 800a69c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a6a0:	e00a      	b.n	800a6b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	b2da      	uxtb	r2, r3
 800a6a6:	4908      	ldr	r1, [pc, #32]	@ (800a6c8 <__NVIC_SetPriority+0x50>)
 800a6a8:	79fb      	ldrb	r3, [r7, #7]
 800a6aa:	f003 030f 	and.w	r3, r3, #15
 800a6ae:	3b04      	subs	r3, #4
 800a6b0:	0112      	lsls	r2, r2, #4
 800a6b2:	b2d2      	uxtb	r2, r2
 800a6b4:	440b      	add	r3, r1
 800a6b6:	761a      	strb	r2, [r3, #24]
}
 800a6b8:	bf00      	nop
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr
 800a6c4:	e000e100 	.word	0xe000e100
 800a6c8:	e000ed00 	.word	0xe000ed00

0800a6cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b089      	sub	sp, #36	@ 0x24
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f003 0307 	and.w	r3, r3, #7
 800a6de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	f1c3 0307 	rsb	r3, r3, #7
 800a6e6:	2b04      	cmp	r3, #4
 800a6e8:	bf28      	it	cs
 800a6ea:	2304      	movcs	r3, #4
 800a6ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	3304      	adds	r3, #4
 800a6f2:	2b06      	cmp	r3, #6
 800a6f4:	d902      	bls.n	800a6fc <NVIC_EncodePriority+0x30>
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	3b03      	subs	r3, #3
 800a6fa:	e000      	b.n	800a6fe <NVIC_EncodePriority+0x32>
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a700:	f04f 32ff 	mov.w	r2, #4294967295
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	fa02 f303 	lsl.w	r3, r2, r3
 800a70a:	43da      	mvns	r2, r3
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	401a      	ands	r2, r3
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a714:	f04f 31ff 	mov.w	r1, #4294967295
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	fa01 f303 	lsl.w	r3, r1, r3
 800a71e:	43d9      	mvns	r1, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a724:	4313      	orrs	r3, r2
         );
}
 800a726:	4618      	mov	r0, r3
 800a728:	3724      	adds	r7, #36	@ 0x24
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
	...

0800a734 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a734:	b480      	push	{r7}
 800a736:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a738:	f3bf 8f4f 	dsb	sy
}
 800a73c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a73e:	4b06      	ldr	r3, [pc, #24]	@ (800a758 <__NVIC_SystemReset+0x24>)
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a746:	4904      	ldr	r1, [pc, #16]	@ (800a758 <__NVIC_SystemReset+0x24>)
 800a748:	4b04      	ldr	r3, [pc, #16]	@ (800a75c <__NVIC_SystemReset+0x28>)
 800a74a:	4313      	orrs	r3, r2
 800a74c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a74e:	f3bf 8f4f 	dsb	sy
}
 800a752:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a754:	bf00      	nop
 800a756:	e7fd      	b.n	800a754 <__NVIC_SystemReset+0x20>
 800a758:	e000ed00 	.word	0xe000ed00
 800a75c:	05fa0004 	.word	0x05fa0004

0800a760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	3b01      	subs	r3, #1
 800a76c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a770:	d301      	bcc.n	800a776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a772:	2301      	movs	r3, #1
 800a774:	e00f      	b.n	800a796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a776:	4a0a      	ldr	r2, [pc, #40]	@ (800a7a0 <SysTick_Config+0x40>)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	3b01      	subs	r3, #1
 800a77c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a77e:	210f      	movs	r1, #15
 800a780:	f04f 30ff 	mov.w	r0, #4294967295
 800a784:	f7ff ff78 	bl	800a678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a788:	4b05      	ldr	r3, [pc, #20]	@ (800a7a0 <SysTick_Config+0x40>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a78e:	4b04      	ldr	r3, [pc, #16]	@ (800a7a0 <SysTick_Config+0x40>)
 800a790:	2207      	movs	r2, #7
 800a792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	3708      	adds	r7, #8
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	e000e010 	.word	0xe000e010

0800a7a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f7ff ff13 	bl	800a5d8 <__NVIC_SetPriorityGrouping>
}
 800a7b2:	bf00      	nop
 800a7b4:	3708      	adds	r7, #8
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b086      	sub	sp, #24
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	60b9      	str	r1, [r7, #8]
 800a7c4:	607a      	str	r2, [r7, #4]
 800a7c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a7cc:	f7ff ff28 	bl	800a620 <__NVIC_GetPriorityGrouping>
 800a7d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	68b9      	ldr	r1, [r7, #8]
 800a7d6:	6978      	ldr	r0, [r7, #20]
 800a7d8:	f7ff ff78 	bl	800a6cc <NVIC_EncodePriority>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7e2:	4611      	mov	r1, r2
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7ff ff47 	bl	800a678 <__NVIC_SetPriority>
}
 800a7ea:	bf00      	nop
 800a7ec:	3718      	adds	r7, #24
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b082      	sub	sp, #8
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a7fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a800:	4618      	mov	r0, r3
 800a802:	f7ff ff1b 	bl	800a63c <__NVIC_EnableIRQ>
}
 800a806:	bf00      	nop
 800a808:	3708      	adds	r7, #8
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800a812:	f7ff ff8f 	bl	800a734 <__NVIC_SystemReset>

0800a816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a816:	b580      	push	{r7, lr}
 800a818:	b082      	sub	sp, #8
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f7ff ff9e 	bl	800a760 <SysTick_Config>
 800a824:	4603      	mov	r3, r0
}
 800a826:	4618      	mov	r0, r3
 800a828:	3708      	adds	r7, #8
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
	...

0800a830 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d101      	bne.n	800a842 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800a83e:	2301      	movs	r3, #1
 800a840:	e054      	b.n	800a8ec <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	7f5b      	ldrb	r3, [r3, #29]
 800a846:	b2db      	uxtb	r3, r3
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d105      	bne.n	800a858 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f7fa fdb2 	bl	80053bc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2202      	movs	r2, #2
 800a85c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	791b      	ldrb	r3, [r3, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d10c      	bne.n	800a880 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a22      	ldr	r2, [pc, #136]	@ (800a8f4 <HAL_CRC_Init+0xc4>)
 800a86c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	689a      	ldr	r2, [r3, #8]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f022 0218 	bic.w	r2, r2, #24
 800a87c:	609a      	str	r2, [r3, #8]
 800a87e:	e00c      	b.n	800a89a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6899      	ldr	r1, [r3, #8]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	461a      	mov	r2, r3
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 f834 	bl	800a8f8 <HAL_CRCEx_Polynomial_Set>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d001      	beq.n	800a89a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800a896:	2301      	movs	r3, #1
 800a898:	e028      	b.n	800a8ec <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	795b      	ldrb	r3, [r3, #5]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d105      	bne.n	800a8ae <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a8aa:	611a      	str	r2, [r3, #16]
 800a8ac:	e004      	b.n	800a8b8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	6912      	ldr	r2, [r2, #16]
 800a8b6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	695a      	ldr	r2, [r3, #20]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	430a      	orrs	r2, r1
 800a8cc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	699a      	ldr	r2, [r3, #24]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	430a      	orrs	r2, r1
 800a8e2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800a8ea:	2300      	movs	r3, #0
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3708      	adds	r7, #8
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	04c11db7 	.word	0x04c11db7

0800a8f8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b087      	sub	sp, #28
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	60b9      	str	r1, [r7, #8]
 800a902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a904:	2300      	movs	r3, #0
 800a906:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800a908:	231f      	movs	r3, #31
 800a90a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	f003 0301 	and.w	r3, r3, #1
 800a912:	2b00      	cmp	r3, #0
 800a914:	d102      	bne.n	800a91c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	75fb      	strb	r3, [r7, #23]
 800a91a:	e063      	b.n	800a9e4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800a91c:	bf00      	nop
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	1e5a      	subs	r2, r3, #1
 800a922:	613a      	str	r2, [r7, #16]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d009      	beq.n	800a93c <HAL_CRCEx_Polynomial_Set+0x44>
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	f003 031f 	and.w	r3, r3, #31
 800a92e:	68ba      	ldr	r2, [r7, #8]
 800a930:	fa22 f303 	lsr.w	r3, r2, r3
 800a934:	f003 0301 	and.w	r3, r3, #1
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d0f0      	beq.n	800a91e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2b18      	cmp	r3, #24
 800a940:	d846      	bhi.n	800a9d0 <HAL_CRCEx_Polynomial_Set+0xd8>
 800a942:	a201      	add	r2, pc, #4	@ (adr r2, 800a948 <HAL_CRCEx_Polynomial_Set+0x50>)
 800a944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a948:	0800a9d7 	.word	0x0800a9d7
 800a94c:	0800a9d1 	.word	0x0800a9d1
 800a950:	0800a9d1 	.word	0x0800a9d1
 800a954:	0800a9d1 	.word	0x0800a9d1
 800a958:	0800a9d1 	.word	0x0800a9d1
 800a95c:	0800a9d1 	.word	0x0800a9d1
 800a960:	0800a9d1 	.word	0x0800a9d1
 800a964:	0800a9d1 	.word	0x0800a9d1
 800a968:	0800a9c5 	.word	0x0800a9c5
 800a96c:	0800a9d1 	.word	0x0800a9d1
 800a970:	0800a9d1 	.word	0x0800a9d1
 800a974:	0800a9d1 	.word	0x0800a9d1
 800a978:	0800a9d1 	.word	0x0800a9d1
 800a97c:	0800a9d1 	.word	0x0800a9d1
 800a980:	0800a9d1 	.word	0x0800a9d1
 800a984:	0800a9d1 	.word	0x0800a9d1
 800a988:	0800a9b9 	.word	0x0800a9b9
 800a98c:	0800a9d1 	.word	0x0800a9d1
 800a990:	0800a9d1 	.word	0x0800a9d1
 800a994:	0800a9d1 	.word	0x0800a9d1
 800a998:	0800a9d1 	.word	0x0800a9d1
 800a99c:	0800a9d1 	.word	0x0800a9d1
 800a9a0:	0800a9d1 	.word	0x0800a9d1
 800a9a4:	0800a9d1 	.word	0x0800a9d1
 800a9a8:	0800a9ad 	.word	0x0800a9ad
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	2b06      	cmp	r3, #6
 800a9b0:	d913      	bls.n	800a9da <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800a9b6:	e010      	b.n	800a9da <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	2b07      	cmp	r3, #7
 800a9bc:	d90f      	bls.n	800a9de <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800a9c2:	e00c      	b.n	800a9de <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	2b0f      	cmp	r3, #15
 800a9c8:	d90b      	bls.n	800a9e2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800a9ce:	e008      	b.n	800a9e2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	75fb      	strb	r3, [r7, #23]
        break;
 800a9d4:	e006      	b.n	800a9e4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800a9d6:	bf00      	nop
 800a9d8:	e004      	b.n	800a9e4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800a9da:	bf00      	nop
 800a9dc:	e002      	b.n	800a9e4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800a9de:	bf00      	nop
 800a9e0:	e000      	b.n	800a9e4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800a9e2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800a9e4:	7dfb      	ldrb	r3, [r7, #23]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d10d      	bne.n	800aa06 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	68ba      	ldr	r2, [r7, #8]
 800a9f0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	f023 0118 	bic.w	r1, r3, #24
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	430a      	orrs	r2, r1
 800aa04:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800aa06:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	371c      	adds	r7, #28
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b085      	sub	sp, #20
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d101      	bne.n	800aa26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800aa22:	2301      	movs	r3, #1
 800aa24:	e098      	b.n	800ab58 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	4b4d      	ldr	r3, [pc, #308]	@ (800ab64 <HAL_DMA_Init+0x150>)
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d80f      	bhi.n	800aa52 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	461a      	mov	r2, r3
 800aa38:	4b4b      	ldr	r3, [pc, #300]	@ (800ab68 <HAL_DMA_Init+0x154>)
 800aa3a:	4413      	add	r3, r2
 800aa3c:	4a4b      	ldr	r2, [pc, #300]	@ (800ab6c <HAL_DMA_Init+0x158>)
 800aa3e:	fba2 2303 	umull	r2, r3, r2, r3
 800aa42:	091b      	lsrs	r3, r3, #4
 800aa44:	009a      	lsls	r2, r3, #2
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	4a48      	ldr	r2, [pc, #288]	@ (800ab70 <HAL_DMA_Init+0x15c>)
 800aa4e:	641a      	str	r2, [r3, #64]	@ 0x40
 800aa50:	e00e      	b.n	800aa70 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	461a      	mov	r2, r3
 800aa58:	4b46      	ldr	r3, [pc, #280]	@ (800ab74 <HAL_DMA_Init+0x160>)
 800aa5a:	4413      	add	r3, r2
 800aa5c:	4a43      	ldr	r2, [pc, #268]	@ (800ab6c <HAL_DMA_Init+0x158>)
 800aa5e:	fba2 2303 	umull	r2, r3, r2, r3
 800aa62:	091b      	lsrs	r3, r3, #4
 800aa64:	009a      	lsls	r2, r3, #2
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4a42      	ldr	r2, [pc, #264]	@ (800ab78 <HAL_DMA_Init+0x164>)
 800aa6e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2202      	movs	r2, #2
 800aa74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800aa86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800aa94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aaa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	699b      	ldr	r3, [r3, #24]
 800aaa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aaac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6a1b      	ldr	r3, [r3, #32]
 800aab2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800aab4:	68fa      	ldr	r2, [r7, #12]
 800aab6:	4313      	orrs	r3, r2
 800aab8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	68fa      	ldr	r2, [r7, #12]
 800aac0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aaca:	d039      	beq.n	800ab40 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aad0:	4a27      	ldr	r2, [pc, #156]	@ (800ab70 <HAL_DMA_Init+0x15c>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d11a      	bne.n	800ab0c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800aad6:	4b29      	ldr	r3, [pc, #164]	@ (800ab7c <HAL_DMA_Init+0x168>)
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aade:	f003 031c 	and.w	r3, r3, #28
 800aae2:	210f      	movs	r1, #15
 800aae4:	fa01 f303 	lsl.w	r3, r1, r3
 800aae8:	43db      	mvns	r3, r3
 800aaea:	4924      	ldr	r1, [pc, #144]	@ (800ab7c <HAL_DMA_Init+0x168>)
 800aaec:	4013      	ands	r3, r2
 800aaee:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800aaf0:	4b22      	ldr	r3, [pc, #136]	@ (800ab7c <HAL_DMA_Init+0x168>)
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6859      	ldr	r1, [r3, #4]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aafc:	f003 031c 	and.w	r3, r3, #28
 800ab00:	fa01 f303 	lsl.w	r3, r1, r3
 800ab04:	491d      	ldr	r1, [pc, #116]	@ (800ab7c <HAL_DMA_Init+0x168>)
 800ab06:	4313      	orrs	r3, r2
 800ab08:	600b      	str	r3, [r1, #0]
 800ab0a:	e019      	b.n	800ab40 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800ab0c:	4b1c      	ldr	r3, [pc, #112]	@ (800ab80 <HAL_DMA_Init+0x16c>)
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab14:	f003 031c 	and.w	r3, r3, #28
 800ab18:	210f      	movs	r1, #15
 800ab1a:	fa01 f303 	lsl.w	r3, r1, r3
 800ab1e:	43db      	mvns	r3, r3
 800ab20:	4917      	ldr	r1, [pc, #92]	@ (800ab80 <HAL_DMA_Init+0x16c>)
 800ab22:	4013      	ands	r3, r2
 800ab24:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800ab26:	4b16      	ldr	r3, [pc, #88]	@ (800ab80 <HAL_DMA_Init+0x16c>)
 800ab28:	681a      	ldr	r2, [r3, #0]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6859      	ldr	r1, [r3, #4]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab32:	f003 031c 	and.w	r3, r3, #28
 800ab36:	fa01 f303 	lsl.w	r3, r1, r3
 800ab3a:	4911      	ldr	r1, [pc, #68]	@ (800ab80 <HAL_DMA_Init+0x16c>)
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2201      	movs	r2, #1
 800ab4a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3714      	adds	r7, #20
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr
 800ab64:	40020407 	.word	0x40020407
 800ab68:	bffdfff8 	.word	0xbffdfff8
 800ab6c:	cccccccd 	.word	0xcccccccd
 800ab70:	40020000 	.word	0x40020000
 800ab74:	bffdfbf8 	.word	0xbffdfbf8
 800ab78:	40020400 	.word	0x40020400
 800ab7c:	400200a8 	.word	0x400200a8
 800ab80:	400204a8 	.word	0x400204a8

0800ab84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b086      	sub	sp, #24
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	607a      	str	r2, [r7, #4]
 800ab90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab92:	2300      	movs	r3, #0
 800ab94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d101      	bne.n	800aba4 <HAL_DMA_Start_IT+0x20>
 800aba0:	2302      	movs	r3, #2
 800aba2:	e04b      	b.n	800ac3c <HAL_DMA_Start_IT+0xb8>
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d13a      	bne.n	800ac2e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2202      	movs	r2, #2
 800abbc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2200      	movs	r2, #0
 800abc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f022 0201 	bic.w	r2, r2, #1
 800abd4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	68b9      	ldr	r1, [r7, #8]
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f000 f91e 	bl	800ae1e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d008      	beq.n	800abfc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f042 020e 	orr.w	r2, r2, #14
 800abf8:	601a      	str	r2, [r3, #0]
 800abfa:	e00f      	b.n	800ac1c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f022 0204 	bic.w	r2, r2, #4
 800ac0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f042 020a 	orr.w	r2, r2, #10
 800ac1a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	681a      	ldr	r2, [r3, #0]
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f042 0201 	orr.w	r2, r2, #1
 800ac2a:	601a      	str	r2, [r3, #0]
 800ac2c:	e005      	b.n	800ac3a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800ac36:	2302      	movs	r3, #2
 800ac38:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800ac3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3718      	adds	r7, #24
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	2b02      	cmp	r3, #2
 800ac5a:	d008      	beq.n	800ac6e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2204      	movs	r2, #4
 800ac60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e022      	b.n	800acb4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f022 020e 	bic.w	r2, r2, #14
 800ac7c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f022 0201 	bic.w	r2, r2, #1
 800ac8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac92:	f003 021c 	and.w	r2, r3, #28
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac9a:	2101      	movs	r1, #1
 800ac9c:	fa01 f202 	lsl.w	r2, r1, r2
 800aca0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2201      	movs	r2, #1
 800aca6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800acb2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3714      	adds	r7, #20
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acdc:	f003 031c 	and.w	r3, r3, #28
 800ace0:	2204      	movs	r2, #4
 800ace2:	409a      	lsls	r2, r3
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	4013      	ands	r3, r2
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d026      	beq.n	800ad3a <HAL_DMA_IRQHandler+0x7a>
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	f003 0304 	and.w	r3, r3, #4
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d021      	beq.n	800ad3a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f003 0320 	and.w	r3, r3, #32
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d107      	bne.n	800ad14 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f022 0204 	bic.w	r2, r2, #4
 800ad12:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad18:	f003 021c 	and.w	r2, r3, #28
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad20:	2104      	movs	r1, #4
 800ad22:	fa01 f202 	lsl.w	r2, r1, r2
 800ad26:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d071      	beq.n	800ae14 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800ad38:	e06c      	b.n	800ae14 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad3e:	f003 031c 	and.w	r3, r3, #28
 800ad42:	2202      	movs	r2, #2
 800ad44:	409a      	lsls	r2, r3
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	4013      	ands	r3, r2
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d02e      	beq.n	800adac <HAL_DMA_IRQHandler+0xec>
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	f003 0302 	and.w	r3, r3, #2
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d029      	beq.n	800adac <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f003 0320 	and.w	r3, r3, #32
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d10b      	bne.n	800ad7e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f022 020a 	bic.w	r2, r2, #10
 800ad74:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad82:	f003 021c 	and.w	r2, r3, #28
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad8a:	2102      	movs	r1, #2
 800ad8c:	fa01 f202 	lsl.w	r2, r1, r2
 800ad90:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d038      	beq.n	800ae14 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800adaa:	e033      	b.n	800ae14 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adb0:	f003 031c 	and.w	r3, r3, #28
 800adb4:	2208      	movs	r2, #8
 800adb6:	409a      	lsls	r2, r3
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	4013      	ands	r3, r2
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d02a      	beq.n	800ae16 <HAL_DMA_IRQHandler+0x156>
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	f003 0308 	and.w	r3, r3, #8
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d025      	beq.n	800ae16 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f022 020e 	bic.w	r2, r2, #14
 800add8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adde:	f003 021c 	and.w	r2, r3, #28
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ade6:	2101      	movs	r1, #1
 800ade8:	fa01 f202 	lsl.w	r2, r1, r2
 800adec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2201      	movs	r2, #1
 800adf2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2201      	movs	r2, #1
 800adf8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d004      	beq.n	800ae16 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800ae14:	bf00      	nop
 800ae16:	bf00      	nop
}
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ae1e:	b480      	push	{r7}
 800ae20:	b085      	sub	sp, #20
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	60f8      	str	r0, [r7, #12]
 800ae26:	60b9      	str	r1, [r7, #8]
 800ae28:	607a      	str	r2, [r7, #4]
 800ae2a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae30:	f003 021c 	and.w	r2, r3, #28
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae38:	2101      	movs	r1, #1
 800ae3a:	fa01 f202 	lsl.w	r2, r1, r2
 800ae3e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	683a      	ldr	r2, [r7, #0]
 800ae46:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	2b10      	cmp	r3, #16
 800ae4e:	d108      	bne.n	800ae62 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	68ba      	ldr	r2, [r7, #8]
 800ae5e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ae60:	e007      	b.n	800ae72 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	68ba      	ldr	r2, [r7, #8]
 800ae68:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	60da      	str	r2, [r3, #12]
}
 800ae72:	bf00      	nop
 800ae74:	3714      	adds	r7, #20
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr
	...

0800ae80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b087      	sub	sp, #28
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ae8e:	e17f      	b.n	800b190 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	2101      	movs	r1, #1
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	fa01 f303 	lsl.w	r3, r1, r3
 800ae9c:	4013      	ands	r3, r2
 800ae9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f000 8171 	beq.w	800b18a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	f003 0303 	and.w	r3, r3, #3
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d005      	beq.n	800aec0 <HAL_GPIO_Init+0x40>
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	f003 0303 	and.w	r3, r3, #3
 800aebc:	2b02      	cmp	r3, #2
 800aebe:	d130      	bne.n	800af22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	005b      	lsls	r3, r3, #1
 800aeca:	2203      	movs	r2, #3
 800aecc:	fa02 f303 	lsl.w	r3, r2, r3
 800aed0:	43db      	mvns	r3, r3
 800aed2:	693a      	ldr	r2, [r7, #16]
 800aed4:	4013      	ands	r3, r2
 800aed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	68da      	ldr	r2, [r3, #12]
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	005b      	lsls	r3, r3, #1
 800aee0:	fa02 f303 	lsl.w	r3, r2, r3
 800aee4:	693a      	ldr	r2, [r7, #16]
 800aee6:	4313      	orrs	r3, r2
 800aee8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	693a      	ldr	r2, [r7, #16]
 800aeee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800aef6:	2201      	movs	r2, #1
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	fa02 f303 	lsl.w	r3, r2, r3
 800aefe:	43db      	mvns	r3, r3
 800af00:	693a      	ldr	r2, [r7, #16]
 800af02:	4013      	ands	r3, r2
 800af04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	091b      	lsrs	r3, r3, #4
 800af0c:	f003 0201 	and.w	r2, r3, #1
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	fa02 f303 	lsl.w	r3, r2, r3
 800af16:	693a      	ldr	r2, [r7, #16]
 800af18:	4313      	orrs	r3, r2
 800af1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	693a      	ldr	r2, [r7, #16]
 800af20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	f003 0303 	and.w	r3, r3, #3
 800af2a:	2b03      	cmp	r3, #3
 800af2c:	d118      	bne.n	800af60 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800af34:	2201      	movs	r2, #1
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	fa02 f303 	lsl.w	r3, r2, r3
 800af3c:	43db      	mvns	r3, r3
 800af3e:	693a      	ldr	r2, [r7, #16]
 800af40:	4013      	ands	r3, r2
 800af42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	08db      	lsrs	r3, r3, #3
 800af4a:	f003 0201 	and.w	r2, r3, #1
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	fa02 f303 	lsl.w	r3, r2, r3
 800af54:	693a      	ldr	r2, [r7, #16]
 800af56:	4313      	orrs	r3, r2
 800af58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	693a      	ldr	r2, [r7, #16]
 800af5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	f003 0303 	and.w	r3, r3, #3
 800af68:	2b03      	cmp	r3, #3
 800af6a:	d017      	beq.n	800af9c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	005b      	lsls	r3, r3, #1
 800af76:	2203      	movs	r2, #3
 800af78:	fa02 f303 	lsl.w	r3, r2, r3
 800af7c:	43db      	mvns	r3, r3
 800af7e:	693a      	ldr	r2, [r7, #16]
 800af80:	4013      	ands	r3, r2
 800af82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	689a      	ldr	r2, [r3, #8]
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	005b      	lsls	r3, r3, #1
 800af8c:	fa02 f303 	lsl.w	r3, r2, r3
 800af90:	693a      	ldr	r2, [r7, #16]
 800af92:	4313      	orrs	r3, r2
 800af94:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	693a      	ldr	r2, [r7, #16]
 800af9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	f003 0303 	and.w	r3, r3, #3
 800afa4:	2b02      	cmp	r3, #2
 800afa6:	d123      	bne.n	800aff0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	08da      	lsrs	r2, r3, #3
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	3208      	adds	r2, #8
 800afb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	f003 0307 	and.w	r3, r3, #7
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	220f      	movs	r2, #15
 800afc0:	fa02 f303 	lsl.w	r3, r2, r3
 800afc4:	43db      	mvns	r3, r3
 800afc6:	693a      	ldr	r2, [r7, #16]
 800afc8:	4013      	ands	r3, r2
 800afca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	691a      	ldr	r2, [r3, #16]
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	f003 0307 	and.w	r3, r3, #7
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	fa02 f303 	lsl.w	r3, r2, r3
 800afdc:	693a      	ldr	r2, [r7, #16]
 800afde:	4313      	orrs	r3, r2
 800afe0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	08da      	lsrs	r2, r3, #3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	3208      	adds	r2, #8
 800afea:	6939      	ldr	r1, [r7, #16]
 800afec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	005b      	lsls	r3, r3, #1
 800affa:	2203      	movs	r2, #3
 800affc:	fa02 f303 	lsl.w	r3, r2, r3
 800b000:	43db      	mvns	r3, r3
 800b002:	693a      	ldr	r2, [r7, #16]
 800b004:	4013      	ands	r3, r2
 800b006:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	f003 0203 	and.w	r2, r3, #3
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	005b      	lsls	r3, r3, #1
 800b014:	fa02 f303 	lsl.w	r3, r2, r3
 800b018:	693a      	ldr	r2, [r7, #16]
 800b01a:	4313      	orrs	r3, r2
 800b01c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	693a      	ldr	r2, [r7, #16]
 800b022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	f000 80ac 	beq.w	800b18a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b032:	4b5f      	ldr	r3, [pc, #380]	@ (800b1b0 <HAL_GPIO_Init+0x330>)
 800b034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b036:	4a5e      	ldr	r2, [pc, #376]	@ (800b1b0 <HAL_GPIO_Init+0x330>)
 800b038:	f043 0301 	orr.w	r3, r3, #1
 800b03c:	6613      	str	r3, [r2, #96]	@ 0x60
 800b03e:	4b5c      	ldr	r3, [pc, #368]	@ (800b1b0 <HAL_GPIO_Init+0x330>)
 800b040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b042:	f003 0301 	and.w	r3, r3, #1
 800b046:	60bb      	str	r3, [r7, #8]
 800b048:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800b04a:	4a5a      	ldr	r2, [pc, #360]	@ (800b1b4 <HAL_GPIO_Init+0x334>)
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	089b      	lsrs	r3, r3, #2
 800b050:	3302      	adds	r3, #2
 800b052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b056:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	f003 0303 	and.w	r3, r3, #3
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	220f      	movs	r2, #15
 800b062:	fa02 f303 	lsl.w	r3, r2, r3
 800b066:	43db      	mvns	r3, r3
 800b068:	693a      	ldr	r2, [r7, #16]
 800b06a:	4013      	ands	r3, r2
 800b06c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800b074:	d025      	beq.n	800b0c2 <HAL_GPIO_Init+0x242>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	4a4f      	ldr	r2, [pc, #316]	@ (800b1b8 <HAL_GPIO_Init+0x338>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d01f      	beq.n	800b0be <HAL_GPIO_Init+0x23e>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4a4e      	ldr	r2, [pc, #312]	@ (800b1bc <HAL_GPIO_Init+0x33c>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d019      	beq.n	800b0ba <HAL_GPIO_Init+0x23a>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4a4d      	ldr	r2, [pc, #308]	@ (800b1c0 <HAL_GPIO_Init+0x340>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d013      	beq.n	800b0b6 <HAL_GPIO_Init+0x236>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4a4c      	ldr	r2, [pc, #304]	@ (800b1c4 <HAL_GPIO_Init+0x344>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d00d      	beq.n	800b0b2 <HAL_GPIO_Init+0x232>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4a4b      	ldr	r2, [pc, #300]	@ (800b1c8 <HAL_GPIO_Init+0x348>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d007      	beq.n	800b0ae <HAL_GPIO_Init+0x22e>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4a4a      	ldr	r2, [pc, #296]	@ (800b1cc <HAL_GPIO_Init+0x34c>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d101      	bne.n	800b0aa <HAL_GPIO_Init+0x22a>
 800b0a6:	2306      	movs	r3, #6
 800b0a8:	e00c      	b.n	800b0c4 <HAL_GPIO_Init+0x244>
 800b0aa:	2307      	movs	r3, #7
 800b0ac:	e00a      	b.n	800b0c4 <HAL_GPIO_Init+0x244>
 800b0ae:	2305      	movs	r3, #5
 800b0b0:	e008      	b.n	800b0c4 <HAL_GPIO_Init+0x244>
 800b0b2:	2304      	movs	r3, #4
 800b0b4:	e006      	b.n	800b0c4 <HAL_GPIO_Init+0x244>
 800b0b6:	2303      	movs	r3, #3
 800b0b8:	e004      	b.n	800b0c4 <HAL_GPIO_Init+0x244>
 800b0ba:	2302      	movs	r3, #2
 800b0bc:	e002      	b.n	800b0c4 <HAL_GPIO_Init+0x244>
 800b0be:	2301      	movs	r3, #1
 800b0c0:	e000      	b.n	800b0c4 <HAL_GPIO_Init+0x244>
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	697a      	ldr	r2, [r7, #20]
 800b0c6:	f002 0203 	and.w	r2, r2, #3
 800b0ca:	0092      	lsls	r2, r2, #2
 800b0cc:	4093      	lsls	r3, r2
 800b0ce:	693a      	ldr	r2, [r7, #16]
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b0d4:	4937      	ldr	r1, [pc, #220]	@ (800b1b4 <HAL_GPIO_Init+0x334>)
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	089b      	lsrs	r3, r3, #2
 800b0da:	3302      	adds	r3, #2
 800b0dc:	693a      	ldr	r2, [r7, #16]
 800b0de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b0e2:	4b3b      	ldr	r3, [pc, #236]	@ (800b1d0 <HAL_GPIO_Init+0x350>)
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	43db      	mvns	r3, r3
 800b0ec:	693a      	ldr	r2, [r7, #16]
 800b0ee:	4013      	ands	r3, r2
 800b0f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d003      	beq.n	800b106 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800b0fe:	693a      	ldr	r2, [r7, #16]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	4313      	orrs	r3, r2
 800b104:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b106:	4a32      	ldr	r2, [pc, #200]	@ (800b1d0 <HAL_GPIO_Init+0x350>)
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b10c:	4b30      	ldr	r3, [pc, #192]	@ (800b1d0 <HAL_GPIO_Init+0x350>)
 800b10e:	68db      	ldr	r3, [r3, #12]
 800b110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	43db      	mvns	r3, r3
 800b116:	693a      	ldr	r2, [r7, #16]
 800b118:	4013      	ands	r3, r2
 800b11a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b124:	2b00      	cmp	r3, #0
 800b126:	d003      	beq.n	800b130 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800b128:	693a      	ldr	r2, [r7, #16]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	4313      	orrs	r3, r2
 800b12e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b130:	4a27      	ldr	r2, [pc, #156]	@ (800b1d0 <HAL_GPIO_Init+0x350>)
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800b136:	4b26      	ldr	r3, [pc, #152]	@ (800b1d0 <HAL_GPIO_Init+0x350>)
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	43db      	mvns	r3, r3
 800b140:	693a      	ldr	r2, [r7, #16]
 800b142:	4013      	ands	r3, r2
 800b144:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d003      	beq.n	800b15a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800b152:	693a      	ldr	r2, [r7, #16]
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	4313      	orrs	r3, r2
 800b158:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b15a:	4a1d      	ldr	r2, [pc, #116]	@ (800b1d0 <HAL_GPIO_Init+0x350>)
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800b160:	4b1b      	ldr	r3, [pc, #108]	@ (800b1d0 <HAL_GPIO_Init+0x350>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	43db      	mvns	r3, r3
 800b16a:	693a      	ldr	r2, [r7, #16]
 800b16c:	4013      	ands	r3, r2
 800b16e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d003      	beq.n	800b184 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800b17c:	693a      	ldr	r2, [r7, #16]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	4313      	orrs	r3, r2
 800b182:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b184:	4a12      	ldr	r2, [pc, #72]	@ (800b1d0 <HAL_GPIO_Init+0x350>)
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	3301      	adds	r3, #1
 800b18e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	fa22 f303 	lsr.w	r3, r2, r3
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	f47f ae78 	bne.w	800ae90 <HAL_GPIO_Init+0x10>
  }
}
 800b1a0:	bf00      	nop
 800b1a2:	bf00      	nop
 800b1a4:	371c      	adds	r7, #28
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	40021000 	.word	0x40021000
 800b1b4:	40010000 	.word	0x40010000
 800b1b8:	48000400 	.word	0x48000400
 800b1bc:	48000800 	.word	0x48000800
 800b1c0:	48000c00 	.word	0x48000c00
 800b1c4:	48001000 	.word	0x48001000
 800b1c8:	48001400 	.word	0x48001400
 800b1cc:	48001800 	.word	0x48001800
 800b1d0:	40010400 	.word	0x40010400

0800b1d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	460b      	mov	r3, r1
 800b1de:	807b      	strh	r3, [r7, #2]
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b1e4:	787b      	ldrb	r3, [r7, #1]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d003      	beq.n	800b1f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b1ea:	887a      	ldrh	r2, [r7, #2]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b1f0:	e002      	b.n	800b1f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b1f2:	887a      	ldrh	r2, [r7, #2]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b1f8:	bf00      	nop
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b082      	sub	sp, #8
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d101      	bne.n	800b216 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b212:	2301      	movs	r3, #1
 800b214:	e08d      	b.n	800b332 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d106      	bne.n	800b230 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2200      	movs	r2, #0
 800b226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f7fa f8e6 	bl	80053fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2224      	movs	r2, #36	@ 0x24
 800b234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f022 0201 	bic.w	r2, r2, #1
 800b246:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	685a      	ldr	r2, [r3, #4]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b254:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	689a      	ldr	r2, [r3, #8]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b264:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	d107      	bne.n	800b27e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	689a      	ldr	r2, [r3, #8]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b27a:	609a      	str	r2, [r3, #8]
 800b27c:	e006      	b.n	800b28c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	689a      	ldr	r2, [r3, #8]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800b28a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	2b02      	cmp	r3, #2
 800b292:	d108      	bne.n	800b2a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	685a      	ldr	r2, [r3, #4]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b2a2:	605a      	str	r2, [r3, #4]
 800b2a4:	e007      	b.n	800b2b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	685a      	ldr	r2, [r3, #4]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b2b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	6812      	ldr	r2, [r2, #0]
 800b2c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b2c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	68da      	ldr	r2, [r3, #12]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b2d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	691a      	ldr	r2, [r3, #16]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	695b      	ldr	r3, [r3, #20]
 800b2e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	699b      	ldr	r3, [r3, #24]
 800b2ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	430a      	orrs	r2, r1
 800b2f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	69d9      	ldr	r1, [r3, #28]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6a1a      	ldr	r2, [r3, #32]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	430a      	orrs	r2, r1
 800b302:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f042 0201 	orr.w	r2, r2, #1
 800b312:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2200      	movs	r2, #0
 800b318:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2220      	movs	r2, #32
 800b31e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2200      	movs	r2, #0
 800b326:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	3708      	adds	r7, #8
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
	...

0800b33c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b088      	sub	sp, #32
 800b340:	af02      	add	r7, sp, #8
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	607a      	str	r2, [r7, #4]
 800b346:	461a      	mov	r2, r3
 800b348:	460b      	mov	r3, r1
 800b34a:	817b      	strh	r3, [r7, #10]
 800b34c:	4613      	mov	r3, r2
 800b34e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b356:	b2db      	uxtb	r3, r3
 800b358:	2b20      	cmp	r3, #32
 800b35a:	f040 80fd 	bne.w	800b558 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b364:	2b01      	cmp	r3, #1
 800b366:	d101      	bne.n	800b36c <HAL_I2C_Master_Transmit+0x30>
 800b368:	2302      	movs	r3, #2
 800b36a:	e0f6      	b.n	800b55a <HAL_I2C_Master_Transmit+0x21e>
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2201      	movs	r2, #1
 800b370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b374:	f7fd fd66 	bl	8008e44 <HAL_GetTick>
 800b378:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	9300      	str	r3, [sp, #0]
 800b37e:	2319      	movs	r3, #25
 800b380:	2201      	movs	r2, #1
 800b382:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f000 fa0a 	bl	800b7a0 <I2C_WaitOnFlagUntilTimeout>
 800b38c:	4603      	mov	r3, r0
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d001      	beq.n	800b396 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800b392:	2301      	movs	r3, #1
 800b394:	e0e1      	b.n	800b55a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2221      	movs	r2, #33	@ 0x21
 800b39a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2210      	movs	r2, #16
 800b3a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	893a      	ldrh	r2, [r7, #8]
 800b3b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	2bff      	cmp	r3, #255	@ 0xff
 800b3c6:	d906      	bls.n	800b3d6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	22ff      	movs	r2, #255	@ 0xff
 800b3cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800b3ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b3d2:	617b      	str	r3, [r7, #20]
 800b3d4:	e007      	b.n	800b3e6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3da:	b29a      	uxth	r2, r3
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b3e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b3e4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d024      	beq.n	800b438 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3f2:	781a      	ldrb	r2, [r3, #0]
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3fe:	1c5a      	adds	r2, r3, #1
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b408:	b29b      	uxth	r3, r3
 800b40a:	3b01      	subs	r3, #1
 800b40c:	b29a      	uxth	r2, r3
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b416:	3b01      	subs	r3, #1
 800b418:	b29a      	uxth	r2, r3
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b422:	b2db      	uxtb	r3, r3
 800b424:	3301      	adds	r3, #1
 800b426:	b2da      	uxtb	r2, r3
 800b428:	8979      	ldrh	r1, [r7, #10]
 800b42a:	4b4e      	ldr	r3, [pc, #312]	@ (800b564 <HAL_I2C_Master_Transmit+0x228>)
 800b42c:	9300      	str	r3, [sp, #0]
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	68f8      	ldr	r0, [r7, #12]
 800b432:	f000 fc05 	bl	800bc40 <I2C_TransferConfig>
 800b436:	e066      	b.n	800b506 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b43c:	b2da      	uxtb	r2, r3
 800b43e:	8979      	ldrh	r1, [r7, #10]
 800b440:	4b48      	ldr	r3, [pc, #288]	@ (800b564 <HAL_I2C_Master_Transmit+0x228>)
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f000 fbfa 	bl	800bc40 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800b44c:	e05b      	b.n	800b506 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b44e:	693a      	ldr	r2, [r7, #16]
 800b450:	6a39      	ldr	r1, [r7, #32]
 800b452:	68f8      	ldr	r0, [r7, #12]
 800b454:	f000 f9fd 	bl	800b852 <I2C_WaitOnTXISFlagUntilTimeout>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d001      	beq.n	800b462 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
 800b460:	e07b      	b.n	800b55a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b466:	781a      	ldrb	r2, [r3, #0]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b472:	1c5a      	adds	r2, r3, #1
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	3b01      	subs	r3, #1
 800b480:	b29a      	uxth	r2, r3
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b48a:	3b01      	subs	r3, #1
 800b48c:	b29a      	uxth	r2, r3
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b496:	b29b      	uxth	r3, r3
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d034      	beq.n	800b506 <HAL_I2C_Master_Transmit+0x1ca>
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d130      	bne.n	800b506 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	9300      	str	r3, [sp, #0]
 800b4a8:	6a3b      	ldr	r3, [r7, #32]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	2180      	movs	r1, #128	@ 0x80
 800b4ae:	68f8      	ldr	r0, [r7, #12]
 800b4b0:	f000 f976 	bl	800b7a0 <I2C_WaitOnFlagUntilTimeout>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d001      	beq.n	800b4be <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e04d      	b.n	800b55a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	2bff      	cmp	r3, #255	@ 0xff
 800b4c6:	d90e      	bls.n	800b4e6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	22ff      	movs	r2, #255	@ 0xff
 800b4cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4d2:	b2da      	uxtb	r2, r3
 800b4d4:	8979      	ldrh	r1, [r7, #10]
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f000 fbae 	bl	800bc40 <I2C_TransferConfig>
 800b4e4:	e00f      	b.n	800b506 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4ea:	b29a      	uxth	r2, r3
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4f4:	b2da      	uxtb	r2, r3
 800b4f6:	8979      	ldrh	r1, [r7, #10]
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	9300      	str	r3, [sp, #0]
 800b4fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b500:	68f8      	ldr	r0, [r7, #12]
 800b502:	f000 fb9d 	bl	800bc40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b50a:	b29b      	uxth	r3, r3
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d19e      	bne.n	800b44e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b510:	693a      	ldr	r2, [r7, #16]
 800b512:	6a39      	ldr	r1, [r7, #32]
 800b514:	68f8      	ldr	r0, [r7, #12]
 800b516:	f000 f9e3 	bl	800b8e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d001      	beq.n	800b524 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800b520:	2301      	movs	r3, #1
 800b522:	e01a      	b.n	800b55a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	2220      	movs	r2, #32
 800b52a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	6859      	ldr	r1, [r3, #4]
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	4b0c      	ldr	r3, [pc, #48]	@ (800b568 <HAL_I2C_Master_Transmit+0x22c>)
 800b538:	400b      	ands	r3, r1
 800b53a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2220      	movs	r2, #32
 800b540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2200      	movs	r2, #0
 800b548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2200      	movs	r2, #0
 800b550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b554:	2300      	movs	r3, #0
 800b556:	e000      	b.n	800b55a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800b558:	2302      	movs	r3, #2
  }
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3718      	adds	r7, #24
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	80002000 	.word	0x80002000
 800b568:	fe00e800 	.word	0xfe00e800

0800b56c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b088      	sub	sp, #32
 800b570:	af02      	add	r7, sp, #8
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	607a      	str	r2, [r7, #4]
 800b576:	461a      	mov	r2, r3
 800b578:	460b      	mov	r3, r1
 800b57a:	817b      	strh	r3, [r7, #10]
 800b57c:	4613      	mov	r3, r2
 800b57e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b586:	b2db      	uxtb	r3, r3
 800b588:	2b20      	cmp	r3, #32
 800b58a:	f040 80db 	bne.w	800b744 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b594:	2b01      	cmp	r3, #1
 800b596:	d101      	bne.n	800b59c <HAL_I2C_Master_Receive+0x30>
 800b598:	2302      	movs	r3, #2
 800b59a:	e0d4      	b.n	800b746 <HAL_I2C_Master_Receive+0x1da>
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b5a4:	f7fd fc4e 	bl	8008e44 <HAL_GetTick>
 800b5a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	9300      	str	r3, [sp, #0]
 800b5ae:	2319      	movs	r3, #25
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b5b6:	68f8      	ldr	r0, [r7, #12]
 800b5b8:	f000 f8f2 	bl	800b7a0 <I2C_WaitOnFlagUntilTimeout>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d001      	beq.n	800b5c6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	e0bf      	b.n	800b746 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2222      	movs	r2, #34	@ 0x22
 800b5ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2210      	movs	r2, #16
 800b5d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	893a      	ldrh	r2, [r7, #8]
 800b5e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	2bff      	cmp	r3, #255	@ 0xff
 800b5f6:	d90e      	bls.n	800b616 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b602:	b2da      	uxtb	r2, r3
 800b604:	8979      	ldrh	r1, [r7, #10]
 800b606:	4b52      	ldr	r3, [pc, #328]	@ (800b750 <HAL_I2C_Master_Receive+0x1e4>)
 800b608:	9300      	str	r3, [sp, #0]
 800b60a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b60e:	68f8      	ldr	r0, [r7, #12]
 800b610:	f000 fb16 	bl	800bc40 <I2C_TransferConfig>
 800b614:	e06d      	b.n	800b6f2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b61a:	b29a      	uxth	r2, r3
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b624:	b2da      	uxtb	r2, r3
 800b626:	8979      	ldrh	r1, [r7, #10]
 800b628:	4b49      	ldr	r3, [pc, #292]	@ (800b750 <HAL_I2C_Master_Receive+0x1e4>)
 800b62a:	9300      	str	r3, [sp, #0]
 800b62c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b630:	68f8      	ldr	r0, [r7, #12]
 800b632:	f000 fb05 	bl	800bc40 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800b636:	e05c      	b.n	800b6f2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b638:	697a      	ldr	r2, [r7, #20]
 800b63a:	6a39      	ldr	r1, [r7, #32]
 800b63c:	68f8      	ldr	r0, [r7, #12]
 800b63e:	f000 f993 	bl	800b968 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b642:	4603      	mov	r3, r0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d001      	beq.n	800b64c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800b648:	2301      	movs	r3, #1
 800b64a:	e07c      	b.n	800b746 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b656:	b2d2      	uxtb	r2, r2
 800b658:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b65e:	1c5a      	adds	r2, r3, #1
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b668:	3b01      	subs	r3, #1
 800b66a:	b29a      	uxth	r2, r3
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b674:	b29b      	uxth	r3, r3
 800b676:	3b01      	subs	r3, #1
 800b678:	b29a      	uxth	r2, r3
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b682:	b29b      	uxth	r3, r3
 800b684:	2b00      	cmp	r3, #0
 800b686:	d034      	beq.n	800b6f2 <HAL_I2C_Master_Receive+0x186>
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d130      	bne.n	800b6f2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	9300      	str	r3, [sp, #0]
 800b694:	6a3b      	ldr	r3, [r7, #32]
 800b696:	2200      	movs	r2, #0
 800b698:	2180      	movs	r1, #128	@ 0x80
 800b69a:	68f8      	ldr	r0, [r7, #12]
 800b69c:	f000 f880 	bl	800b7a0 <I2C_WaitOnFlagUntilTimeout>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d001      	beq.n	800b6aa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	e04d      	b.n	800b746 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	2bff      	cmp	r3, #255	@ 0xff
 800b6b2:	d90e      	bls.n	800b6d2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	22ff      	movs	r2, #255	@ 0xff
 800b6b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6be:	b2da      	uxtb	r2, r3
 800b6c0:	8979      	ldrh	r1, [r7, #10]
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b6ca:	68f8      	ldr	r0, [r7, #12]
 800b6cc:	f000 fab8 	bl	800bc40 <I2C_TransferConfig>
 800b6d0:	e00f      	b.n	800b6f2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6d6:	b29a      	uxth	r2, r3
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6e0:	b2da      	uxtb	r2, r3
 800b6e2:	8979      	ldrh	r1, [r7, #10]
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	9300      	str	r3, [sp, #0]
 800b6e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b6ec:	68f8      	ldr	r0, [r7, #12]
 800b6ee:	f000 faa7 	bl	800bc40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d19d      	bne.n	800b638 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6fc:	697a      	ldr	r2, [r7, #20]
 800b6fe:	6a39      	ldr	r1, [r7, #32]
 800b700:	68f8      	ldr	r0, [r7, #12]
 800b702:	f000 f8ed 	bl	800b8e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d001      	beq.n	800b710 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800b70c:	2301      	movs	r3, #1
 800b70e:	e01a      	b.n	800b746 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2220      	movs	r2, #32
 800b716:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	6859      	ldr	r1, [r3, #4]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	4b0c      	ldr	r3, [pc, #48]	@ (800b754 <HAL_I2C_Master_Receive+0x1e8>)
 800b724:	400b      	ands	r3, r1
 800b726:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2220      	movs	r2, #32
 800b72c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2200      	movs	r2, #0
 800b734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b740:	2300      	movs	r3, #0
 800b742:	e000      	b.n	800b746 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800b744:	2302      	movs	r3, #2
  }
}
 800b746:	4618      	mov	r0, r3
 800b748:	3718      	adds	r7, #24
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	80002400 	.word	0x80002400
 800b754:	fe00e800 	.word	0xfe00e800

0800b758 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b758:	b480      	push	{r7}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	699b      	ldr	r3, [r3, #24]
 800b766:	f003 0302 	and.w	r3, r3, #2
 800b76a:	2b02      	cmp	r3, #2
 800b76c:	d103      	bne.n	800b776 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	2200      	movs	r2, #0
 800b774:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	699b      	ldr	r3, [r3, #24]
 800b77c:	f003 0301 	and.w	r3, r3, #1
 800b780:	2b01      	cmp	r3, #1
 800b782:	d007      	beq.n	800b794 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	699a      	ldr	r2, [r3, #24]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f042 0201 	orr.w	r2, r2, #1
 800b792:	619a      	str	r2, [r3, #24]
  }
}
 800b794:	bf00      	nop
 800b796:	370c      	adds	r7, #12
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr

0800b7a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	603b      	str	r3, [r7, #0]
 800b7ac:	4613      	mov	r3, r2
 800b7ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b7b0:	e03b      	b.n	800b82a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b7b2:	69ba      	ldr	r2, [r7, #24]
 800b7b4:	6839      	ldr	r1, [r7, #0]
 800b7b6:	68f8      	ldr	r0, [r7, #12]
 800b7b8:	f000 f962 	bl	800ba80 <I2C_IsErrorOccurred>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d001      	beq.n	800b7c6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e041      	b.n	800b84a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7cc:	d02d      	beq.n	800b82a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7ce:	f7fd fb39 	bl	8008e44 <HAL_GetTick>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	1ad3      	subs	r3, r2, r3
 800b7d8:	683a      	ldr	r2, [r7, #0]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d302      	bcc.n	800b7e4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d122      	bne.n	800b82a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	699a      	ldr	r2, [r3, #24]
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	4013      	ands	r3, r2
 800b7ee:	68ba      	ldr	r2, [r7, #8]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	bf0c      	ite	eq
 800b7f4:	2301      	moveq	r3, #1
 800b7f6:	2300      	movne	r3, #0
 800b7f8:	b2db      	uxtb	r3, r3
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	79fb      	ldrb	r3, [r7, #7]
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d113      	bne.n	800b82a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b806:	f043 0220 	orr.w	r2, r3, #32
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2220      	movs	r2, #32
 800b812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2200      	movs	r2, #0
 800b81a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2200      	movs	r2, #0
 800b822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800b826:	2301      	movs	r3, #1
 800b828:	e00f      	b.n	800b84a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	699a      	ldr	r2, [r3, #24]
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	4013      	ands	r3, r2
 800b834:	68ba      	ldr	r2, [r7, #8]
 800b836:	429a      	cmp	r2, r3
 800b838:	bf0c      	ite	eq
 800b83a:	2301      	moveq	r3, #1
 800b83c:	2300      	movne	r3, #0
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	461a      	mov	r2, r3
 800b842:	79fb      	ldrb	r3, [r7, #7]
 800b844:	429a      	cmp	r2, r3
 800b846:	d0b4      	beq.n	800b7b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b848:	2300      	movs	r3, #0
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3710      	adds	r7, #16
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b084      	sub	sp, #16
 800b856:	af00      	add	r7, sp, #0
 800b858:	60f8      	str	r0, [r7, #12]
 800b85a:	60b9      	str	r1, [r7, #8]
 800b85c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b85e:	e033      	b.n	800b8c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	68b9      	ldr	r1, [r7, #8]
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	f000 f90b 	bl	800ba80 <I2C_IsErrorOccurred>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d001      	beq.n	800b874 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b870:	2301      	movs	r3, #1
 800b872:	e031      	b.n	800b8d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b87a:	d025      	beq.n	800b8c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b87c:	f7fd fae2 	bl	8008e44 <HAL_GetTick>
 800b880:	4602      	mov	r2, r0
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	1ad3      	subs	r3, r2, r3
 800b886:	68ba      	ldr	r2, [r7, #8]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d302      	bcc.n	800b892 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d11a      	bne.n	800b8c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	699b      	ldr	r3, [r3, #24]
 800b898:	f003 0302 	and.w	r3, r3, #2
 800b89c:	2b02      	cmp	r3, #2
 800b89e:	d013      	beq.n	800b8c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8a4:	f043 0220 	orr.w	r2, r3, #32
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2220      	movs	r2, #32
 800b8b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	e007      	b.n	800b8d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	699b      	ldr	r3, [r3, #24]
 800b8ce:	f003 0302 	and.w	r3, r3, #2
 800b8d2:	2b02      	cmp	r3, #2
 800b8d4:	d1c4      	bne.n	800b860 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3710      	adds	r7, #16
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b8ec:	e02f      	b.n	800b94e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	68b9      	ldr	r1, [r7, #8]
 800b8f2:	68f8      	ldr	r0, [r7, #12]
 800b8f4:	f000 f8c4 	bl	800ba80 <I2C_IsErrorOccurred>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d001      	beq.n	800b902 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b8fe:	2301      	movs	r3, #1
 800b900:	e02d      	b.n	800b95e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b902:	f7fd fa9f 	bl	8008e44 <HAL_GetTick>
 800b906:	4602      	mov	r2, r0
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	1ad3      	subs	r3, r2, r3
 800b90c:	68ba      	ldr	r2, [r7, #8]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d302      	bcc.n	800b918 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d11a      	bne.n	800b94e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	699b      	ldr	r3, [r3, #24]
 800b91e:	f003 0320 	and.w	r3, r3, #32
 800b922:	2b20      	cmp	r3, #32
 800b924:	d013      	beq.n	800b94e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b92a:	f043 0220 	orr.w	r2, r3, #32
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2220      	movs	r2, #32
 800b936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2200      	movs	r2, #0
 800b93e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2200      	movs	r2, #0
 800b946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800b94a:	2301      	movs	r3, #1
 800b94c:	e007      	b.n	800b95e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	699b      	ldr	r3, [r3, #24]
 800b954:	f003 0320 	and.w	r3, r3, #32
 800b958:	2b20      	cmp	r3, #32
 800b95a:	d1c8      	bne.n	800b8ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b95c:	2300      	movs	r3, #0
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
	...

0800b968 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b086      	sub	sp, #24
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b974:	2300      	movs	r3, #0
 800b976:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800b978:	e071      	b.n	800ba5e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	68b9      	ldr	r1, [r7, #8]
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	f000 f87e 	bl	800ba80 <I2C_IsErrorOccurred>
 800b984:	4603      	mov	r3, r0
 800b986:	2b00      	cmp	r3, #0
 800b988:	d001      	beq.n	800b98e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800b98a:	2301      	movs	r3, #1
 800b98c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	699b      	ldr	r3, [r3, #24]
 800b994:	f003 0320 	and.w	r3, r3, #32
 800b998:	2b20      	cmp	r3, #32
 800b99a:	d13b      	bne.n	800ba14 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800b99c:	7dfb      	ldrb	r3, [r7, #23]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d138      	bne.n	800ba14 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	699b      	ldr	r3, [r3, #24]
 800b9a8:	f003 0304 	and.w	r3, r3, #4
 800b9ac:	2b04      	cmp	r3, #4
 800b9ae:	d105      	bne.n	800b9bc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d001      	beq.n	800b9bc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	699b      	ldr	r3, [r3, #24]
 800b9c2:	f003 0310 	and.w	r3, r3, #16
 800b9c6:	2b10      	cmp	r3, #16
 800b9c8:	d121      	bne.n	800ba0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	2210      	movs	r2, #16
 800b9d0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2204      	movs	r2, #4
 800b9d6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	2220      	movs	r2, #32
 800b9de:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	6859      	ldr	r1, [r3, #4]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	4b24      	ldr	r3, [pc, #144]	@ (800ba7c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800b9ec:	400b      	ands	r3, r1
 800b9ee:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2220      	movs	r2, #32
 800b9f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2200      	movs	r2, #0
 800ba04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	75fb      	strb	r3, [r7, #23]
 800ba0c:	e002      	b.n	800ba14 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2200      	movs	r2, #0
 800ba12:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800ba14:	f7fd fa16 	bl	8008e44 <HAL_GetTick>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	1ad3      	subs	r3, r2, r3
 800ba1e:	68ba      	ldr	r2, [r7, #8]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d302      	bcc.n	800ba2a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d119      	bne.n	800ba5e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800ba2a:	7dfb      	ldrb	r3, [r7, #23]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d116      	bne.n	800ba5e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	699b      	ldr	r3, [r3, #24]
 800ba36:	f003 0304 	and.w	r3, r3, #4
 800ba3a:	2b04      	cmp	r3, #4
 800ba3c:	d00f      	beq.n	800ba5e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba42:	f043 0220 	orr.w	r2, r3, #32
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2220      	movs	r2, #32
 800ba4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2200      	movs	r2, #0
 800ba56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	699b      	ldr	r3, [r3, #24]
 800ba64:	f003 0304 	and.w	r3, r3, #4
 800ba68:	2b04      	cmp	r3, #4
 800ba6a:	d002      	beq.n	800ba72 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800ba6c:	7dfb      	ldrb	r3, [r7, #23]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d083      	beq.n	800b97a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800ba72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3718      	adds	r7, #24
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	fe00e800 	.word	0xfe00e800

0800ba80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b08a      	sub	sp, #40	@ 0x28
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	60b9      	str	r1, [r7, #8]
 800ba8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	699b      	ldr	r3, [r3, #24]
 800ba98:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800baa2:	69bb      	ldr	r3, [r7, #24]
 800baa4:	f003 0310 	and.w	r3, r3, #16
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d068      	beq.n	800bb7e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	2210      	movs	r2, #16
 800bab2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bab4:	e049      	b.n	800bb4a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800babc:	d045      	beq.n	800bb4a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800babe:	f7fd f9c1 	bl	8008e44 <HAL_GetTick>
 800bac2:	4602      	mov	r2, r0
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	1ad3      	subs	r3, r2, r3
 800bac8:	68ba      	ldr	r2, [r7, #8]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d302      	bcc.n	800bad4 <I2C_IsErrorOccurred+0x54>
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d13a      	bne.n	800bb4a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bade:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bae6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	699b      	ldr	r3, [r3, #24]
 800baee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800baf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800baf6:	d121      	bne.n	800bb3c <I2C_IsErrorOccurred+0xbc>
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bafe:	d01d      	beq.n	800bb3c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800bb00:	7cfb      	ldrb	r3, [r7, #19]
 800bb02:	2b20      	cmp	r3, #32
 800bb04:	d01a      	beq.n	800bb3c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	685a      	ldr	r2, [r3, #4]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bb14:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800bb16:	f7fd f995 	bl	8008e44 <HAL_GetTick>
 800bb1a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bb1c:	e00e      	b.n	800bb3c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800bb1e:	f7fd f991 	bl	8008e44 <HAL_GetTick>
 800bb22:	4602      	mov	r2, r0
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	1ad3      	subs	r3, r2, r3
 800bb28:	2b19      	cmp	r3, #25
 800bb2a:	d907      	bls.n	800bb3c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800bb2c:	6a3b      	ldr	r3, [r7, #32]
 800bb2e:	f043 0320 	orr.w	r3, r3, #32
 800bb32:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800bb34:	2301      	movs	r3, #1
 800bb36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800bb3a:	e006      	b.n	800bb4a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	699b      	ldr	r3, [r3, #24]
 800bb42:	f003 0320 	and.w	r3, r3, #32
 800bb46:	2b20      	cmp	r3, #32
 800bb48:	d1e9      	bne.n	800bb1e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	699b      	ldr	r3, [r3, #24]
 800bb50:	f003 0320 	and.w	r3, r3, #32
 800bb54:	2b20      	cmp	r3, #32
 800bb56:	d003      	beq.n	800bb60 <I2C_IsErrorOccurred+0xe0>
 800bb58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d0aa      	beq.n	800bab6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800bb60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d103      	bne.n	800bb70 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2220      	movs	r2, #32
 800bb6e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800bb70:	6a3b      	ldr	r3, [r7, #32]
 800bb72:	f043 0304 	orr.w	r3, r3, #4
 800bb76:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	699b      	ldr	r3, [r3, #24]
 800bb84:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800bb86:	69bb      	ldr	r3, [r7, #24]
 800bb88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d00b      	beq.n	800bba8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800bb90:	6a3b      	ldr	r3, [r7, #32]
 800bb92:	f043 0301 	orr.w	r3, r3, #1
 800bb96:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bba0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bba2:	2301      	movs	r3, #1
 800bba4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800bba8:	69bb      	ldr	r3, [r7, #24]
 800bbaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d00b      	beq.n	800bbca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800bbb2:	6a3b      	ldr	r3, [r7, #32]
 800bbb4:	f043 0308 	orr.w	r3, r3, #8
 800bbb8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bbc2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800bbca:	69bb      	ldr	r3, [r7, #24]
 800bbcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d00b      	beq.n	800bbec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800bbd4:	6a3b      	ldr	r3, [r7, #32]
 800bbd6:	f043 0302 	orr.w	r3, r3, #2
 800bbda:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bbe4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800bbec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d01c      	beq.n	800bc2e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bbf4:	68f8      	ldr	r0, [r7, #12]
 800bbf6:	f7ff fdaf 	bl	800b758 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	6859      	ldr	r1, [r3, #4]
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681a      	ldr	r2, [r3, #0]
 800bc04:	4b0d      	ldr	r3, [pc, #52]	@ (800bc3c <I2C_IsErrorOccurred+0x1bc>)
 800bc06:	400b      	ands	r3, r1
 800bc08:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bc0e:	6a3b      	ldr	r3, [r7, #32]
 800bc10:	431a      	orrs	r2, r3
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2220      	movs	r2, #32
 800bc1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2200      	movs	r2, #0
 800bc22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800bc2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3728      	adds	r7, #40	@ 0x28
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	fe00e800 	.word	0xfe00e800

0800bc40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b087      	sub	sp, #28
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	607b      	str	r3, [r7, #4]
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	817b      	strh	r3, [r7, #10]
 800bc4e:	4613      	mov	r3, r2
 800bc50:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bc52:	897b      	ldrh	r3, [r7, #10]
 800bc54:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bc58:	7a7b      	ldrb	r3, [r7, #9]
 800bc5a:	041b      	lsls	r3, r3, #16
 800bc5c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bc60:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bc66:	6a3b      	ldr	r3, [r7, #32]
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc6e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	685a      	ldr	r2, [r3, #4]
 800bc76:	6a3b      	ldr	r3, [r7, #32]
 800bc78:	0d5b      	lsrs	r3, r3, #21
 800bc7a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800bc7e:	4b08      	ldr	r3, [pc, #32]	@ (800bca0 <I2C_TransferConfig+0x60>)
 800bc80:	430b      	orrs	r3, r1
 800bc82:	43db      	mvns	r3, r3
 800bc84:	ea02 0103 	and.w	r1, r2, r3
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	697a      	ldr	r2, [r7, #20]
 800bc8e:	430a      	orrs	r2, r1
 800bc90:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800bc92:	bf00      	nop
 800bc94:	371c      	adds	r7, #28
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr
 800bc9e:	bf00      	nop
 800bca0:	03ff63ff 	.word	0x03ff63ff

0800bca4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	2b20      	cmp	r3, #32
 800bcb8:	d138      	bne.n	800bd2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d101      	bne.n	800bcc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bcc4:	2302      	movs	r3, #2
 800bcc6:	e032      	b.n	800bd2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2201      	movs	r2, #1
 800bccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2224      	movs	r2, #36	@ 0x24
 800bcd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	681a      	ldr	r2, [r3, #0]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f022 0201 	bic.w	r2, r2, #1
 800bce6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800bcf6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	6819      	ldr	r1, [r3, #0]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	683a      	ldr	r2, [r7, #0]
 800bd04:	430a      	orrs	r2, r1
 800bd06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f042 0201 	orr.w	r2, r2, #1
 800bd16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2220      	movs	r2, #32
 800bd1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	e000      	b.n	800bd2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bd2c:	2302      	movs	r3, #2
  }
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	370c      	adds	r7, #12
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr

0800bd3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bd3a:	b480      	push	{r7}
 800bd3c:	b085      	sub	sp, #20
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
 800bd42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	2b20      	cmp	r3, #32
 800bd4e:	d139      	bne.n	800bdc4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d101      	bne.n	800bd5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bd5a:	2302      	movs	r3, #2
 800bd5c:	e033      	b.n	800bdc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2201      	movs	r2, #1
 800bd62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2224      	movs	r2, #36	@ 0x24
 800bd6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f022 0201 	bic.w	r2, r2, #1
 800bd7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800bd8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	021b      	lsls	r3, r3, #8
 800bd92:	68fa      	ldr	r2, [r7, #12]
 800bd94:	4313      	orrs	r3, r2
 800bd96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	68fa      	ldr	r2, [r7, #12]
 800bd9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	681a      	ldr	r2, [r3, #0]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f042 0201 	orr.w	r2, r2, #1
 800bdae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2220      	movs	r2, #32
 800bdb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	e000      	b.n	800bdc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bdc4:	2302      	movs	r3, #2
  }
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3714      	adds	r7, #20
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr
	...

0800bdd4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800bdd8:	4b04      	ldr	r3, [pc, #16]	@ (800bdec <HAL_PWREx_GetVoltageRange+0x18>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr
 800bdea:	bf00      	nop
 800bdec:	40007000 	.word	0x40007000

0800bdf0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b085      	sub	sp, #20
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bdfe:	d130      	bne.n	800be62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800be00:	4b23      	ldr	r3, [pc, #140]	@ (800be90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800be08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be0c:	d038      	beq.n	800be80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800be0e:	4b20      	ldr	r3, [pc, #128]	@ (800be90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800be16:	4a1e      	ldr	r2, [pc, #120]	@ (800be90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800be1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800be1e:	4b1d      	ldr	r3, [pc, #116]	@ (800be94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	2232      	movs	r2, #50	@ 0x32
 800be24:	fb02 f303 	mul.w	r3, r2, r3
 800be28:	4a1b      	ldr	r2, [pc, #108]	@ (800be98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800be2a:	fba2 2303 	umull	r2, r3, r2, r3
 800be2e:	0c9b      	lsrs	r3, r3, #18
 800be30:	3301      	adds	r3, #1
 800be32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800be34:	e002      	b.n	800be3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	3b01      	subs	r3, #1
 800be3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800be3c:	4b14      	ldr	r3, [pc, #80]	@ (800be90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be3e:	695b      	ldr	r3, [r3, #20]
 800be40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800be44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be48:	d102      	bne.n	800be50 <HAL_PWREx_ControlVoltageScaling+0x60>
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d1f2      	bne.n	800be36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800be50:	4b0f      	ldr	r3, [pc, #60]	@ (800be90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be52:	695b      	ldr	r3, [r3, #20]
 800be54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800be58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be5c:	d110      	bne.n	800be80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800be5e:	2303      	movs	r3, #3
 800be60:	e00f      	b.n	800be82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800be62:	4b0b      	ldr	r3, [pc, #44]	@ (800be90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800be6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be6e:	d007      	beq.n	800be80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800be70:	4b07      	ldr	r3, [pc, #28]	@ (800be90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800be78:	4a05      	ldr	r2, [pc, #20]	@ (800be90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800be7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800be80:	2300      	movs	r3, #0
}
 800be82:	4618      	mov	r0, r3
 800be84:	3714      	adds	r7, #20
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	40007000 	.word	0x40007000
 800be94:	20000000 	.word	0x20000000
 800be98:	431bde83 	.word	0x431bde83

0800be9c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b086      	sub	sp, #24
 800bea0:	af02      	add	r7, sp, #8
 800bea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800bea4:	f7fc ffce 	bl	8008e44 <HAL_GetTick>
 800bea8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d101      	bne.n	800beb4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800beb0:	2301      	movs	r3, #1
 800beb2:	e063      	b.n	800bf7c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800beba:	b2db      	uxtb	r3, r3
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d10b      	bne.n	800bed8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f7f9 faf5 	bl	80054b8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800bece:	f241 3188 	movw	r1, #5000	@ 0x1388
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 fa68 	bl	800c3a8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	689b      	ldr	r3, [r3, #8]
 800bee6:	3b01      	subs	r3, #1
 800bee8:	021a      	lsls	r2, r3, #8
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	430a      	orrs	r2, r1
 800bef0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bef6:	9300      	str	r3, [sp, #0]
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2200      	movs	r2, #0
 800befc:	2120      	movs	r1, #32
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 fa60 	bl	800c3c4 <QSPI_WaitFlagStateUntilTimeout>
 800bf04:	4603      	mov	r3, r0
 800bf06:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800bf08:	7afb      	ldrb	r3, [r7, #11]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d131      	bne.n	800bf72 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bf18:	f023 0310 	bic.w	r3, r3, #16
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	6852      	ldr	r2, [r2, #4]
 800bf20:	0611      	lsls	r1, r2, #24
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	68d2      	ldr	r2, [r2, #12]
 800bf26:	4311      	orrs	r1, r2
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	6812      	ldr	r2, [r2, #0]
 800bf2c:	430b      	orrs	r3, r1
 800bf2e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	685a      	ldr	r2, [r3, #4]
 800bf36:	4b13      	ldr	r3, [pc, #76]	@ (800bf84 <HAL_QSPI_Init+0xe8>)
 800bf38:	4013      	ands	r3, r2
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	6912      	ldr	r2, [r2, #16]
 800bf3e:	0411      	lsls	r1, r2, #16
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	6952      	ldr	r2, [r2, #20]
 800bf44:	4311      	orrs	r1, r2
 800bf46:	687a      	ldr	r2, [r7, #4]
 800bf48:	6992      	ldr	r2, [r2, #24]
 800bf4a:	4311      	orrs	r1, r2
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	6812      	ldr	r2, [r2, #0]
 800bf50:	430b      	orrs	r3, r1
 800bf52:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	681a      	ldr	r2, [r3, #0]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f042 0201 	orr.w	r2, r2, #1
 800bf62:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2200      	movs	r2, #0
 800bf68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2200      	movs	r2, #0
 800bf76:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800bf7a:	7afb      	ldrb	r3, [r7, #11]
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3710      	adds	r7, #16
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	ffe0f8fe 	.word	0xffe0f8fe

0800bf88 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b088      	sub	sp, #32
 800bf8c:	af02      	add	r7, sp, #8
 800bf8e:	60f8      	str	r0, [r7, #12]
 800bf90:	60b9      	str	r1, [r7, #8]
 800bf92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800bf94:	f7fc ff56 	bl	8008e44 <HAL_GetTick>
 800bf98:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d101      	bne.n	800bfaa <HAL_QSPI_Command+0x22>
 800bfa6:	2302      	movs	r3, #2
 800bfa8:	e048      	b.n	800c03c <HAL_QSPI_Command+0xb4>
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	2201      	movs	r2, #1
 800bfae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800bfb8:	b2db      	uxtb	r3, r3
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d137      	bne.n	800c02e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2202      	movs	r2, #2
 800bfc8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	9300      	str	r3, [sp, #0]
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	2120      	movs	r1, #32
 800bfd6:	68f8      	ldr	r0, [r7, #12]
 800bfd8:	f000 f9f4 	bl	800c3c4 <QSPI_WaitFlagStateUntilTimeout>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800bfe0:	7dfb      	ldrb	r3, [r7, #23]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d125      	bne.n	800c032 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	68b9      	ldr	r1, [r7, #8]
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f000 fa21 	bl	800c432 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d115      	bne.n	800c024 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	9300      	str	r3, [sp, #0]
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	2201      	movs	r2, #1
 800c000:	2102      	movs	r1, #2
 800c002:	68f8      	ldr	r0, [r7, #12]
 800c004:	f000 f9de 	bl	800c3c4 <QSPI_WaitFlagStateUntilTimeout>
 800c008:	4603      	mov	r3, r0
 800c00a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800c00c:	7dfb      	ldrb	r3, [r7, #23]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d10f      	bne.n	800c032 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2202      	movs	r2, #2
 800c018:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2201      	movs	r2, #1
 800c01e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c022:	e006      	b.n	800c032 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2201      	movs	r2, #1
 800c028:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c02c:	e001      	b.n	800c032 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800c02e:	2302      	movs	r3, #2
 800c030:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2200      	movs	r2, #0
 800c036:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800c03a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3718      	adds	r7, #24
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b08a      	sub	sp, #40	@ 0x28
 800c048:	af02      	add	r7, sp, #8
 800c04a:	60f8      	str	r0, [r7, #12]
 800c04c:	60b9      	str	r1, [r7, #8]
 800c04e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c050:	2300      	movs	r3, #0
 800c052:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800c054:	f7fc fef6 	bl	8008e44 <HAL_GetTick>
 800c058:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	3320      	adds	r3, #32
 800c060:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c068:	b2db      	uxtb	r3, r3
 800c06a:	2b01      	cmp	r3, #1
 800c06c:	d101      	bne.n	800c072 <HAL_QSPI_Transmit+0x2e>
 800c06e:	2302      	movs	r3, #2
 800c070:	e07b      	b.n	800c16a <HAL_QSPI_Transmit+0x126>
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2201      	movs	r2, #1
 800c076:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c080:	b2db      	uxtb	r3, r3
 800c082:	2b01      	cmp	r3, #1
 800c084:	d16a      	bne.n	800c15c <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2200      	movs	r2, #0
 800c08a:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d05b      	beq.n	800c14a <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2212      	movs	r2, #18
 800c096:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	691b      	ldr	r3, [r3, #16]
 800c0a0:	1c5a      	adds	r2, r3, #1
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	625a      	str	r2, [r3, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	691b      	ldr	r3, [r3, #16]
 800c0ac:	1c5a      	adds	r2, r3, #1
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	68ba      	ldr	r2, [r7, #8]
 800c0b6:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	695a      	ldr	r2, [r3, #20]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800c0c6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800c0c8:	e01b      	b.n	800c102 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	9300      	str	r3, [sp, #0]
 800c0ce:	69bb      	ldr	r3, [r7, #24]
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	2104      	movs	r1, #4
 800c0d4:	68f8      	ldr	r0, [r7, #12]
 800c0d6:	f000 f975 	bl	800c3c4 <QSPI_WaitFlagStateUntilTimeout>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800c0de:	7ffb      	ldrb	r3, [r7, #31]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d113      	bne.n	800c10c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	69db      	ldr	r3, [r3, #28]
 800c0e8:	781a      	ldrb	r2, [r3, #0]
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	69db      	ldr	r3, [r3, #28]
 800c0f2:	1c5a      	adds	r2, r3, #1
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0fc:	1e5a      	subs	r2, r3, #1
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	625a      	str	r2, [r3, #36]	@ 0x24
      while(hqspi->TxXferCount > 0U)
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1df      	bne.n	800c0ca <HAL_QSPI_Transmit+0x86>
 800c10a:	e000      	b.n	800c10e <HAL_QSPI_Transmit+0xca>
          break;
 800c10c:	bf00      	nop
      }

      if (status == HAL_OK)
 800c10e:	7ffb      	ldrb	r3, [r7, #31]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d115      	bne.n	800c140 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	9300      	str	r3, [sp, #0]
 800c118:	69bb      	ldr	r3, [r7, #24]
 800c11a:	2201      	movs	r2, #1
 800c11c:	2102      	movs	r1, #2
 800c11e:	68f8      	ldr	r0, [r7, #12]
 800c120:	f000 f950 	bl	800c3c4 <QSPI_WaitFlagStateUntilTimeout>
 800c124:	4603      	mov	r3, r0
 800c126:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800c128:	7ffb      	ldrb	r3, [r7, #31]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d108      	bne.n	800c140 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	2202      	movs	r2, #2
 800c134:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800c136:	68f8      	ldr	r0, [r7, #12]
 800c138:	f000 f8bd 	bl	800c2b6 <HAL_QSPI_Abort>
 800c13c:	4603      	mov	r3, r0
 800c13e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2201      	movs	r2, #1
 800c144:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c148:	e00a      	b.n	800c160 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c14e:	f043 0208 	orr.w	r2, r3, #8
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800c156:	2301      	movs	r3, #1
 800c158:	77fb      	strb	r3, [r7, #31]
 800c15a:	e001      	b.n	800c160 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c15c:	2302      	movs	r3, #2
 800c15e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2200      	movs	r2, #0
 800c164:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800c168:	7ffb      	ldrb	r3, [r7, #31]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3720      	adds	r7, #32
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}

0800c172 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800c172:	b580      	push	{r7, lr}
 800c174:	b08a      	sub	sp, #40	@ 0x28
 800c176:	af02      	add	r7, sp, #8
 800c178:	60f8      	str	r0, [r7, #12]
 800c17a:	60b9      	str	r1, [r7, #8]
 800c17c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c17e:	2300      	movs	r3, #0
 800c180:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800c182:	f7fc fe5f 	bl	8008e44 <HAL_GetTick>
 800c186:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	699b      	ldr	r3, [r3, #24]
 800c18e:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	3320      	adds	r3, #32
 800c196:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c19e:	b2db      	uxtb	r3, r3
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d101      	bne.n	800c1a8 <HAL_QSPI_Receive+0x36>
 800c1a4:	2302      	movs	r3, #2
 800c1a6:	e082      	b.n	800c2ae <HAL_QSPI_Receive+0x13c>
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d171      	bne.n	800c2a0 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d062      	beq.n	800c28e <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2222      	movs	r2, #34	@ 0x22
 800c1cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	691b      	ldr	r3, [r3, #16]
 800c1d6:	1c5a      	adds	r2, r3, #1
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	631a      	str	r2, [r3, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	691b      	ldr	r3, [r3, #16]
 800c1e2:	1c5a      	adds	r2, r3, #1
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->pRxBuffPtr = pData;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	68ba      	ldr	r2, [r7, #8]
 800c1ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	695b      	ldr	r3, [r3, #20]
 800c1f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800c200:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	697a      	ldr	r2, [r7, #20]
 800c208:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800c20a:	e01c      	b.n	800c246 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	9300      	str	r3, [sp, #0]
 800c210:	69bb      	ldr	r3, [r7, #24]
 800c212:	2201      	movs	r2, #1
 800c214:	2106      	movs	r1, #6
 800c216:	68f8      	ldr	r0, [r7, #12]
 800c218:	f000 f8d4 	bl	800c3c4 <QSPI_WaitFlagStateUntilTimeout>
 800c21c:	4603      	mov	r3, r0
 800c21e:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800c220:	7ffb      	ldrb	r3, [r7, #31]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d114      	bne.n	800c250 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c22a:	693a      	ldr	r2, [r7, #16]
 800c22c:	7812      	ldrb	r2, [r2, #0]
 800c22e:	b2d2      	uxtb	r2, r2
 800c230:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c236:	1c5a      	adds	r2, r3, #1
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	629a      	str	r2, [r3, #40]	@ 0x28
        hqspi->RxXferCount--;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c240:	1e5a      	subs	r2, r3, #1
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	631a      	str	r2, [r3, #48]	@ 0x30
      while(hqspi->RxXferCount > 0U)
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d1de      	bne.n	800c20c <HAL_QSPI_Receive+0x9a>
 800c24e:	e000      	b.n	800c252 <HAL_QSPI_Receive+0xe0>
          break;
 800c250:	bf00      	nop
      }

      if (status == HAL_OK)
 800c252:	7ffb      	ldrb	r3, [r7, #31]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d115      	bne.n	800c284 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	9300      	str	r3, [sp, #0]
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	2201      	movs	r2, #1
 800c260:	2102      	movs	r1, #2
 800c262:	68f8      	ldr	r0, [r7, #12]
 800c264:	f000 f8ae 	bl	800c3c4 <QSPI_WaitFlagStateUntilTimeout>
 800c268:	4603      	mov	r3, r0
 800c26a:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800c26c:	7ffb      	ldrb	r3, [r7, #31]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d108      	bne.n	800c284 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	2202      	movs	r2, #2
 800c278:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800c27a:	68f8      	ldr	r0, [r7, #12]
 800c27c:	f000 f81b 	bl	800c2b6 <HAL_QSPI_Abort>
 800c280:	4603      	mov	r3, r0
 800c282:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2201      	movs	r2, #1
 800c288:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c28c:	e00a      	b.n	800c2a4 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c292:	f043 0208 	orr.w	r2, r3, #8
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800c29a:	2301      	movs	r3, #1
 800c29c:	77fb      	strb	r3, [r7, #31]
 800c29e:	e001      	b.n	800c2a4 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c2a0:	2302      	movs	r3, #2
 800c2a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800c2ac:	7ffb      	ldrb	r3, [r7, #31]
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3720      	adds	r7, #32
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b086      	sub	sp, #24
 800c2ba:	af02      	add	r7, sp, #8
 800c2bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800c2c2:	f7fc fdbf 	bl	8008e44 <HAL_GetTick>
 800c2c6:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c2ce:	b2db      	uxtb	r3, r3
 800c2d0:	f003 0302 	and.w	r3, r3, #2
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d062      	beq.n	800c39e <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f003 0304 	and.w	r3, r3, #4
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d017      	beq.n	800c31e <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f022 0204 	bic.w	r2, r2, #4
 800c2fc:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c302:	4618      	mov	r0, r3
 800c304:	f7fe fc9e 	bl	800ac44 <HAL_DMA_Abort>
 800c308:	4603      	mov	r3, r0
 800c30a:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800c30c:	7bfb      	ldrb	r3, [r7, #15]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d005      	beq.n	800c31e <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c316:	f043 0204 	orr.w	r2, r3, #4
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	689b      	ldr	r3, [r3, #8]
 800c324:	f003 0320 	and.w	r3, r3, #32
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d034      	beq.n	800c396 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f042 0202 	orr.w	r2, r2, #2
 800c33a:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c340:	9300      	str	r3, [sp, #0]
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	2201      	movs	r2, #1
 800c346:	2102      	movs	r1, #2
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 f83b 	bl	800c3c4 <QSPI_WaitFlagStateUntilTimeout>
 800c34e:	4603      	mov	r3, r0
 800c350:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 800c352:	7bfb      	ldrb	r3, [r7, #15]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d10e      	bne.n	800c376 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	2202      	movs	r2, #2
 800c35e:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c364:	9300      	str	r3, [sp, #0]
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	2200      	movs	r2, #0
 800c36a:	2120      	movs	r1, #32
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 f829 	bl	800c3c4 <QSPI_WaitFlagStateUntilTimeout>
 800c372:	4603      	mov	r3, r0
 800c374:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800c376:	7bfb      	ldrb	r3, [r7, #15]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d110      	bne.n	800c39e <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	695a      	ldr	r2, [r3, #20]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800c38a:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2201      	movs	r2, #1
 800c390:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c394:	e003      	b.n	800c39e <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2201      	movs	r2, #1
 800c39a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    }
  }

  return status;
 800c39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3710      	adds	r7, #16
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b083      	sub	sp, #12
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	683a      	ldr	r2, [r7, #0]
 800c3b6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800c3b8:	bf00      	nop
 800c3ba:	370c      	adds	r7, #12
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr

0800c3c4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	603b      	str	r3, [r7, #0]
 800c3d0:	4613      	mov	r3, r2
 800c3d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c3d4:	e01a      	b.n	800c40c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c3d6:	69bb      	ldr	r3, [r7, #24]
 800c3d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3dc:	d016      	beq.n	800c40c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c3de:	f7fc fd31 	bl	8008e44 <HAL_GetTick>
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	1ad3      	subs	r3, r2, r3
 800c3e8:	69ba      	ldr	r2, [r7, #24]
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d302      	bcc.n	800c3f4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d10b      	bne.n	800c40c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	2204      	movs	r2, #4
 800c3f8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c400:	f043 0201 	orr.w	r2, r3, #1
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800c408:	2301      	movs	r3, #1
 800c40a:	e00e      	b.n	800c42a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	689a      	ldr	r2, [r3, #8]
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	4013      	ands	r3, r2
 800c416:	2b00      	cmp	r3, #0
 800c418:	bf14      	ite	ne
 800c41a:	2301      	movne	r3, #1
 800c41c:	2300      	moveq	r3, #0
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	461a      	mov	r2, r3
 800c422:	79fb      	ldrb	r3, [r7, #7]
 800c424:	429a      	cmp	r2, r3
 800c426:	d1d6      	bne.n	800c3d6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c428:	2300      	movs	r3, #0
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800c432:	b480      	push	{r7}
 800c434:	b085      	sub	sp, #20
 800c436:	af00      	add	r7, sp, #0
 800c438:	60f8      	str	r0, [r7, #12]
 800c43a:	60b9      	str	r1, [r7, #8]
 800c43c:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c442:	2b00      	cmp	r3, #0
 800c444:	d009      	beq.n	800c45a <QSPI_Config+0x28>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c44c:	d005      	beq.n	800c45a <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	3a01      	subs	r2, #1
 800c458:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	699b      	ldr	r3, [r3, #24]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	f000 80c1 	beq.w	800c5e6 <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	6a1b      	ldr	r3, [r3, #32]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d063      	beq.n	800c534 <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	68ba      	ldr	r2, [r7, #8]
 800c472:	6892      	ldr	r2, [r2, #8]
 800c474:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	69db      	ldr	r3, [r3, #28]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d031      	beq.n	800c4e2 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c486:	431a      	orrs	r2, r3
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c48c:	431a      	orrs	r2, r3
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c492:	431a      	orrs	r2, r3
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	695b      	ldr	r3, [r3, #20]
 800c498:	049b      	lsls	r3, r3, #18
 800c49a:	431a      	orrs	r2, r3
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	691b      	ldr	r3, [r3, #16]
 800c4a0:	431a      	orrs	r2, r3
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	6a1b      	ldr	r3, [r3, #32]
 800c4a6:	431a      	orrs	r2, r3
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	68db      	ldr	r3, [r3, #12]
 800c4ac:	431a      	orrs	r2, r3
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	69db      	ldr	r3, [r3, #28]
 800c4b2:	431a      	orrs	r2, r3
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	699b      	ldr	r3, [r3, #24]
 800c4b8:	431a      	orrs	r2, r3
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	ea42 0103 	orr.w	r1, r2, r3
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	687a      	ldr	r2, [r7, #4]
 800c4c8:	430a      	orrs	r2, r1
 800c4ca:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c4d2:	f000 813f 	beq.w	800c754 <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	68ba      	ldr	r2, [r7, #8]
 800c4dc:	6852      	ldr	r2, [r2, #4]
 800c4de:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800c4e0:	e138      	b.n	800c754 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4ea:	431a      	orrs	r2, r3
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4f0:	431a      	orrs	r2, r3
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4f6:	431a      	orrs	r2, r3
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	695b      	ldr	r3, [r3, #20]
 800c4fc:	049b      	lsls	r3, r3, #18
 800c4fe:	431a      	orrs	r2, r3
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	691b      	ldr	r3, [r3, #16]
 800c504:	431a      	orrs	r2, r3
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	6a1b      	ldr	r3, [r3, #32]
 800c50a:	431a      	orrs	r2, r3
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	69db      	ldr	r3, [r3, #28]
 800c510:	431a      	orrs	r2, r3
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	699b      	ldr	r3, [r3, #24]
 800c516:	431a      	orrs	r2, r3
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	ea42 0103 	orr.w	r1, r2, r3
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	430a      	orrs	r2, r1
 800c528:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2200      	movs	r2, #0
 800c530:	619a      	str	r2, [r3, #24]
}
 800c532:	e10f      	b.n	800c754 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	69db      	ldr	r3, [r3, #28]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d02e      	beq.n	800c59a <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c544:	431a      	orrs	r2, r3
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c54a:	431a      	orrs	r2, r3
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c550:	431a      	orrs	r2, r3
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	695b      	ldr	r3, [r3, #20]
 800c556:	049b      	lsls	r3, r3, #18
 800c558:	431a      	orrs	r2, r3
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	6a1b      	ldr	r3, [r3, #32]
 800c55e:	431a      	orrs	r2, r3
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	431a      	orrs	r2, r3
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	69db      	ldr	r3, [r3, #28]
 800c56a:	431a      	orrs	r2, r3
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	699b      	ldr	r3, [r3, #24]
 800c570:	431a      	orrs	r2, r3
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	ea42 0103 	orr.w	r1, r2, r3
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	430a      	orrs	r2, r1
 800c582:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c58a:	f000 80e3 	beq.w	800c754 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	68ba      	ldr	r2, [r7, #8]
 800c594:	6852      	ldr	r2, [r2, #4]
 800c596:	619a      	str	r2, [r3, #24]
}
 800c598:	e0dc      	b.n	800c754 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5a2:	431a      	orrs	r2, r3
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5a8:	431a      	orrs	r2, r3
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5ae:	431a      	orrs	r2, r3
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	695b      	ldr	r3, [r3, #20]
 800c5b4:	049b      	lsls	r3, r3, #18
 800c5b6:	431a      	orrs	r2, r3
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	6a1b      	ldr	r3, [r3, #32]
 800c5bc:	431a      	orrs	r2, r3
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	69db      	ldr	r3, [r3, #28]
 800c5c2:	431a      	orrs	r2, r3
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	699b      	ldr	r3, [r3, #24]
 800c5c8:	431a      	orrs	r2, r3
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	ea42 0103 	orr.w	r1, r2, r3
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	430a      	orrs	r2, r1
 800c5da:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	619a      	str	r2, [r3, #24]
}
 800c5e4:	e0b6      	b.n	800c754 <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	6a1b      	ldr	r3, [r3, #32]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d05d      	beq.n	800c6aa <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	68ba      	ldr	r2, [r7, #8]
 800c5f4:	6892      	ldr	r2, [r2, #8]
 800c5f6:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	69db      	ldr	r3, [r3, #28]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d02e      	beq.n	800c65e <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c608:	431a      	orrs	r2, r3
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c60e:	431a      	orrs	r2, r3
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c614:	431a      	orrs	r2, r3
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	695b      	ldr	r3, [r3, #20]
 800c61a:	049b      	lsls	r3, r3, #18
 800c61c:	431a      	orrs	r2, r3
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	691b      	ldr	r3, [r3, #16]
 800c622:	431a      	orrs	r2, r3
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	6a1b      	ldr	r3, [r3, #32]
 800c628:	431a      	orrs	r2, r3
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	68db      	ldr	r3, [r3, #12]
 800c62e:	431a      	orrs	r2, r3
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	69db      	ldr	r3, [r3, #28]
 800c634:	431a      	orrs	r2, r3
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	699b      	ldr	r3, [r3, #24]
 800c63a:	ea42 0103 	orr.w	r1, r2, r3
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	430a      	orrs	r2, r1
 800c646:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c64e:	f000 8081 	beq.w	800c754 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	68ba      	ldr	r2, [r7, #8]
 800c658:	6852      	ldr	r2, [r2, #4]
 800c65a:	619a      	str	r2, [r3, #24]
}
 800c65c:	e07a      	b.n	800c754 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c666:	431a      	orrs	r2, r3
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c66c:	431a      	orrs	r2, r3
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c672:	431a      	orrs	r2, r3
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	695b      	ldr	r3, [r3, #20]
 800c678:	049b      	lsls	r3, r3, #18
 800c67a:	431a      	orrs	r2, r3
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	691b      	ldr	r3, [r3, #16]
 800c680:	431a      	orrs	r2, r3
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	6a1b      	ldr	r3, [r3, #32]
 800c686:	431a      	orrs	r2, r3
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	69db      	ldr	r3, [r3, #28]
 800c68c:	431a      	orrs	r2, r3
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	699b      	ldr	r3, [r3, #24]
 800c692:	ea42 0103 	orr.w	r1, r2, r3
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	687a      	ldr	r2, [r7, #4]
 800c69c:	430a      	orrs	r2, r1
 800c69e:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	619a      	str	r2, [r3, #24]
}
 800c6a8:	e054      	b.n	800c754 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	69db      	ldr	r3, [r3, #28]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d02a      	beq.n	800c708 <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6ba:	431a      	orrs	r2, r3
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6c0:	431a      	orrs	r2, r3
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6c6:	431a      	orrs	r2, r3
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	695b      	ldr	r3, [r3, #20]
 800c6cc:	049b      	lsls	r3, r3, #18
 800c6ce:	431a      	orrs	r2, r3
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	6a1b      	ldr	r3, [r3, #32]
 800c6d4:	431a      	orrs	r2, r3
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	68db      	ldr	r3, [r3, #12]
 800c6da:	431a      	orrs	r2, r3
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	69db      	ldr	r3, [r3, #28]
 800c6e0:	431a      	orrs	r2, r3
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	699b      	ldr	r3, [r3, #24]
 800c6e6:	ea42 0103 	orr.w	r1, r2, r3
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	430a      	orrs	r2, r1
 800c6f2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c6fa:	d02b      	beq.n	800c754 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	68ba      	ldr	r2, [r7, #8]
 800c702:	6852      	ldr	r2, [r2, #4]
 800c704:	619a      	str	r2, [r3, #24]
}
 800c706:	e025      	b.n	800c754 <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d021      	beq.n	800c754 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c718:	431a      	orrs	r2, r3
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c71e:	431a      	orrs	r2, r3
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c724:	431a      	orrs	r2, r3
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	695b      	ldr	r3, [r3, #20]
 800c72a:	049b      	lsls	r3, r3, #18
 800c72c:	431a      	orrs	r2, r3
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	6a1b      	ldr	r3, [r3, #32]
 800c732:	431a      	orrs	r2, r3
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	69db      	ldr	r3, [r3, #28]
 800c738:	431a      	orrs	r2, r3
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	699b      	ldr	r3, [r3, #24]
 800c73e:	ea42 0103 	orr.w	r1, r2, r3
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	430a      	orrs	r2, r1
 800c74a:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	2200      	movs	r2, #0
 800c752:	619a      	str	r2, [r3, #24]
}
 800c754:	bf00      	nop
 800c756:	3714      	adds	r7, #20
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b088      	sub	sp, #32
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d101      	bne.n	800c772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c76e:	2301      	movs	r3, #1
 800c770:	e3ca      	b.n	800cf08 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c772:	4b97      	ldr	r3, [pc, #604]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c774:	689b      	ldr	r3, [r3, #8]
 800c776:	f003 030c 	and.w	r3, r3, #12
 800c77a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c77c:	4b94      	ldr	r3, [pc, #592]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c77e:	68db      	ldr	r3, [r3, #12]
 800c780:	f003 0303 	and.w	r3, r3, #3
 800c784:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f003 0310 	and.w	r3, r3, #16
 800c78e:	2b00      	cmp	r3, #0
 800c790:	f000 80e4 	beq.w	800c95c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c794:	69bb      	ldr	r3, [r7, #24]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d007      	beq.n	800c7aa <HAL_RCC_OscConfig+0x4a>
 800c79a:	69bb      	ldr	r3, [r7, #24]
 800c79c:	2b0c      	cmp	r3, #12
 800c79e:	f040 808b 	bne.w	800c8b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	f040 8087 	bne.w	800c8b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c7aa:	4b89      	ldr	r3, [pc, #548]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f003 0302 	and.w	r3, r3, #2
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d005      	beq.n	800c7c2 <HAL_RCC_OscConfig+0x62>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	699b      	ldr	r3, [r3, #24]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d101      	bne.n	800c7c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800c7be:	2301      	movs	r3, #1
 800c7c0:	e3a2      	b.n	800cf08 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6a1a      	ldr	r2, [r3, #32]
 800c7c6:	4b82      	ldr	r3, [pc, #520]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f003 0308 	and.w	r3, r3, #8
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d004      	beq.n	800c7dc <HAL_RCC_OscConfig+0x7c>
 800c7d2:	4b7f      	ldr	r3, [pc, #508]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c7da:	e005      	b.n	800c7e8 <HAL_RCC_OscConfig+0x88>
 800c7dc:	4b7c      	ldr	r3, [pc, #496]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c7de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c7e2:	091b      	lsrs	r3, r3, #4
 800c7e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d223      	bcs.n	800c834 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6a1b      	ldr	r3, [r3, #32]
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f000 fd55 	bl	800d2a0 <RCC_SetFlashLatencyFromMSIRange>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d001      	beq.n	800c800 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	e383      	b.n	800cf08 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c800:	4b73      	ldr	r3, [pc, #460]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4a72      	ldr	r2, [pc, #456]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c806:	f043 0308 	orr.w	r3, r3, #8
 800c80a:	6013      	str	r3, [r2, #0]
 800c80c:	4b70      	ldr	r3, [pc, #448]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6a1b      	ldr	r3, [r3, #32]
 800c818:	496d      	ldr	r1, [pc, #436]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c81a:	4313      	orrs	r3, r2
 800c81c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c81e:	4b6c      	ldr	r3, [pc, #432]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	69db      	ldr	r3, [r3, #28]
 800c82a:	021b      	lsls	r3, r3, #8
 800c82c:	4968      	ldr	r1, [pc, #416]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c82e:	4313      	orrs	r3, r2
 800c830:	604b      	str	r3, [r1, #4]
 800c832:	e025      	b.n	800c880 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c834:	4b66      	ldr	r3, [pc, #408]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4a65      	ldr	r2, [pc, #404]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c83a:	f043 0308 	orr.w	r3, r3, #8
 800c83e:	6013      	str	r3, [r2, #0]
 800c840:	4b63      	ldr	r3, [pc, #396]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6a1b      	ldr	r3, [r3, #32]
 800c84c:	4960      	ldr	r1, [pc, #384]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c84e:	4313      	orrs	r3, r2
 800c850:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c852:	4b5f      	ldr	r3, [pc, #380]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	69db      	ldr	r3, [r3, #28]
 800c85e:	021b      	lsls	r3, r3, #8
 800c860:	495b      	ldr	r1, [pc, #364]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c862:	4313      	orrs	r3, r2
 800c864:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d109      	bne.n	800c880 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6a1b      	ldr	r3, [r3, #32]
 800c870:	4618      	mov	r0, r3
 800c872:	f000 fd15 	bl	800d2a0 <RCC_SetFlashLatencyFromMSIRange>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d001      	beq.n	800c880 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800c87c:	2301      	movs	r3, #1
 800c87e:	e343      	b.n	800cf08 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c880:	f000 fc4a 	bl	800d118 <HAL_RCC_GetSysClockFreq>
 800c884:	4602      	mov	r2, r0
 800c886:	4b52      	ldr	r3, [pc, #328]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c888:	689b      	ldr	r3, [r3, #8]
 800c88a:	091b      	lsrs	r3, r3, #4
 800c88c:	f003 030f 	and.w	r3, r3, #15
 800c890:	4950      	ldr	r1, [pc, #320]	@ (800c9d4 <HAL_RCC_OscConfig+0x274>)
 800c892:	5ccb      	ldrb	r3, [r1, r3]
 800c894:	f003 031f 	and.w	r3, r3, #31
 800c898:	fa22 f303 	lsr.w	r3, r2, r3
 800c89c:	4a4e      	ldr	r2, [pc, #312]	@ (800c9d8 <HAL_RCC_OscConfig+0x278>)
 800c89e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c8a0:	4b4e      	ldr	r3, [pc, #312]	@ (800c9dc <HAL_RCC_OscConfig+0x27c>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f7fc fa7d 	bl	8008da4 <HAL_InitTick>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800c8ae:	7bfb      	ldrb	r3, [r7, #15]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d052      	beq.n	800c95a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800c8b4:	7bfb      	ldrb	r3, [r7, #15]
 800c8b6:	e327      	b.n	800cf08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	699b      	ldr	r3, [r3, #24]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d032      	beq.n	800c926 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c8c0:	4b43      	ldr	r3, [pc, #268]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4a42      	ldr	r2, [pc, #264]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c8c6:	f043 0301 	orr.w	r3, r3, #1
 800c8ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c8cc:	f7fc faba 	bl	8008e44 <HAL_GetTick>
 800c8d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c8d2:	e008      	b.n	800c8e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c8d4:	f7fc fab6 	bl	8008e44 <HAL_GetTick>
 800c8d8:	4602      	mov	r2, r0
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	1ad3      	subs	r3, r2, r3
 800c8de:	2b02      	cmp	r3, #2
 800c8e0:	d901      	bls.n	800c8e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800c8e2:	2303      	movs	r3, #3
 800c8e4:	e310      	b.n	800cf08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c8e6:	4b3a      	ldr	r3, [pc, #232]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f003 0302 	and.w	r3, r3, #2
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d0f0      	beq.n	800c8d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c8f2:	4b37      	ldr	r3, [pc, #220]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4a36      	ldr	r2, [pc, #216]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c8f8:	f043 0308 	orr.w	r3, r3, #8
 800c8fc:	6013      	str	r3, [r2, #0]
 800c8fe:	4b34      	ldr	r3, [pc, #208]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6a1b      	ldr	r3, [r3, #32]
 800c90a:	4931      	ldr	r1, [pc, #196]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c90c:	4313      	orrs	r3, r2
 800c90e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c910:	4b2f      	ldr	r3, [pc, #188]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	69db      	ldr	r3, [r3, #28]
 800c91c:	021b      	lsls	r3, r3, #8
 800c91e:	492c      	ldr	r1, [pc, #176]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c920:	4313      	orrs	r3, r2
 800c922:	604b      	str	r3, [r1, #4]
 800c924:	e01a      	b.n	800c95c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c926:	4b2a      	ldr	r3, [pc, #168]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	4a29      	ldr	r2, [pc, #164]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c92c:	f023 0301 	bic.w	r3, r3, #1
 800c930:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c932:	f7fc fa87 	bl	8008e44 <HAL_GetTick>
 800c936:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c938:	e008      	b.n	800c94c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c93a:	f7fc fa83 	bl	8008e44 <HAL_GetTick>
 800c93e:	4602      	mov	r2, r0
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	1ad3      	subs	r3, r2, r3
 800c944:	2b02      	cmp	r3, #2
 800c946:	d901      	bls.n	800c94c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800c948:	2303      	movs	r3, #3
 800c94a:	e2dd      	b.n	800cf08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c94c:	4b20      	ldr	r3, [pc, #128]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f003 0302 	and.w	r3, r3, #2
 800c954:	2b00      	cmp	r3, #0
 800c956:	d1f0      	bne.n	800c93a <HAL_RCC_OscConfig+0x1da>
 800c958:	e000      	b.n	800c95c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c95a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f003 0301 	and.w	r3, r3, #1
 800c964:	2b00      	cmp	r3, #0
 800c966:	d074      	beq.n	800ca52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	2b08      	cmp	r3, #8
 800c96c:	d005      	beq.n	800c97a <HAL_RCC_OscConfig+0x21a>
 800c96e:	69bb      	ldr	r3, [r7, #24]
 800c970:	2b0c      	cmp	r3, #12
 800c972:	d10e      	bne.n	800c992 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	2b03      	cmp	r3, #3
 800c978:	d10b      	bne.n	800c992 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c97a:	4b15      	ldr	r3, [pc, #84]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c982:	2b00      	cmp	r3, #0
 800c984:	d064      	beq.n	800ca50 <HAL_RCC_OscConfig+0x2f0>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d160      	bne.n	800ca50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800c98e:	2301      	movs	r3, #1
 800c990:	e2ba      	b.n	800cf08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c99a:	d106      	bne.n	800c9aa <HAL_RCC_OscConfig+0x24a>
 800c99c:	4b0c      	ldr	r3, [pc, #48]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a0b      	ldr	r2, [pc, #44]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c9a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c9a6:	6013      	str	r3, [r2, #0]
 800c9a8:	e026      	b.n	800c9f8 <HAL_RCC_OscConfig+0x298>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c9b2:	d115      	bne.n	800c9e0 <HAL_RCC_OscConfig+0x280>
 800c9b4:	4b06      	ldr	r3, [pc, #24]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4a05      	ldr	r2, [pc, #20]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c9ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c9be:	6013      	str	r3, [r2, #0]
 800c9c0:	4b03      	ldr	r3, [pc, #12]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4a02      	ldr	r2, [pc, #8]	@ (800c9d0 <HAL_RCC_OscConfig+0x270>)
 800c9c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c9ca:	6013      	str	r3, [r2, #0]
 800c9cc:	e014      	b.n	800c9f8 <HAL_RCC_OscConfig+0x298>
 800c9ce:	bf00      	nop
 800c9d0:	40021000 	.word	0x40021000
 800c9d4:	08013fb4 	.word	0x08013fb4
 800c9d8:	20000000 	.word	0x20000000
 800c9dc:	2000000c 	.word	0x2000000c
 800c9e0:	4ba0      	ldr	r3, [pc, #640]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	4a9f      	ldr	r2, [pc, #636]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800c9e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c9ea:	6013      	str	r3, [r2, #0]
 800c9ec:	4b9d      	ldr	r3, [pc, #628]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a9c      	ldr	r2, [pc, #624]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800c9f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c9f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d013      	beq.n	800ca28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca00:	f7fc fa20 	bl	8008e44 <HAL_GetTick>
 800ca04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ca06:	e008      	b.n	800ca1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ca08:	f7fc fa1c 	bl	8008e44 <HAL_GetTick>
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	1ad3      	subs	r3, r2, r3
 800ca12:	2b64      	cmp	r3, #100	@ 0x64
 800ca14:	d901      	bls.n	800ca1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800ca16:	2303      	movs	r3, #3
 800ca18:	e276      	b.n	800cf08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ca1a:	4b92      	ldr	r3, [pc, #584]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d0f0      	beq.n	800ca08 <HAL_RCC_OscConfig+0x2a8>
 800ca26:	e014      	b.n	800ca52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca28:	f7fc fa0c 	bl	8008e44 <HAL_GetTick>
 800ca2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ca2e:	e008      	b.n	800ca42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ca30:	f7fc fa08 	bl	8008e44 <HAL_GetTick>
 800ca34:	4602      	mov	r2, r0
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	2b64      	cmp	r3, #100	@ 0x64
 800ca3c:	d901      	bls.n	800ca42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ca3e:	2303      	movs	r3, #3
 800ca40:	e262      	b.n	800cf08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ca42:	4b88      	ldr	r3, [pc, #544]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d1f0      	bne.n	800ca30 <HAL_RCC_OscConfig+0x2d0>
 800ca4e:	e000      	b.n	800ca52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f003 0302 	and.w	r3, r3, #2
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d060      	beq.n	800cb20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800ca5e:	69bb      	ldr	r3, [r7, #24]
 800ca60:	2b04      	cmp	r3, #4
 800ca62:	d005      	beq.n	800ca70 <HAL_RCC_OscConfig+0x310>
 800ca64:	69bb      	ldr	r3, [r7, #24]
 800ca66:	2b0c      	cmp	r3, #12
 800ca68:	d119      	bne.n	800ca9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	2b02      	cmp	r3, #2
 800ca6e:	d116      	bne.n	800ca9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ca70:	4b7c      	ldr	r3, [pc, #496]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d005      	beq.n	800ca88 <HAL_RCC_OscConfig+0x328>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d101      	bne.n	800ca88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800ca84:	2301      	movs	r3, #1
 800ca86:	e23f      	b.n	800cf08 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ca88:	4b76      	ldr	r3, [pc, #472]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	691b      	ldr	r3, [r3, #16]
 800ca94:	061b      	lsls	r3, r3, #24
 800ca96:	4973      	ldr	r1, [pc, #460]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800ca98:	4313      	orrs	r3, r2
 800ca9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ca9c:	e040      	b.n	800cb20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	68db      	ldr	r3, [r3, #12]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d023      	beq.n	800caee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800caa6:	4b6f      	ldr	r3, [pc, #444]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	4a6e      	ldr	r2, [pc, #440]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800caac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cab2:	f7fc f9c7 	bl	8008e44 <HAL_GetTick>
 800cab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cab8:	e008      	b.n	800cacc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800caba:	f7fc f9c3 	bl	8008e44 <HAL_GetTick>
 800cabe:	4602      	mov	r2, r0
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	1ad3      	subs	r3, r2, r3
 800cac4:	2b02      	cmp	r3, #2
 800cac6:	d901      	bls.n	800cacc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800cac8:	2303      	movs	r3, #3
 800caca:	e21d      	b.n	800cf08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cacc:	4b65      	ldr	r3, [pc, #404]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d0f0      	beq.n	800caba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cad8:	4b62      	ldr	r3, [pc, #392]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	691b      	ldr	r3, [r3, #16]
 800cae4:	061b      	lsls	r3, r3, #24
 800cae6:	495f      	ldr	r1, [pc, #380]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800cae8:	4313      	orrs	r3, r2
 800caea:	604b      	str	r3, [r1, #4]
 800caec:	e018      	b.n	800cb20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800caee:	4b5d      	ldr	r3, [pc, #372]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4a5c      	ldr	r2, [pc, #368]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800caf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800caf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cafa:	f7fc f9a3 	bl	8008e44 <HAL_GetTick>
 800cafe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cb00:	e008      	b.n	800cb14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cb02:	f7fc f99f 	bl	8008e44 <HAL_GetTick>
 800cb06:	4602      	mov	r2, r0
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	1ad3      	subs	r3, r2, r3
 800cb0c:	2b02      	cmp	r3, #2
 800cb0e:	d901      	bls.n	800cb14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800cb10:	2303      	movs	r3, #3
 800cb12:	e1f9      	b.n	800cf08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cb14:	4b53      	ldr	r3, [pc, #332]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d1f0      	bne.n	800cb02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f003 0308 	and.w	r3, r3, #8
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d03c      	beq.n	800cba6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	695b      	ldr	r3, [r3, #20]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d01c      	beq.n	800cb6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cb34:	4b4b      	ldr	r3, [pc, #300]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800cb36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cb3a:	4a4a      	ldr	r2, [pc, #296]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800cb3c:	f043 0301 	orr.w	r3, r3, #1
 800cb40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb44:	f7fc f97e 	bl	8008e44 <HAL_GetTick>
 800cb48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cb4a:	e008      	b.n	800cb5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cb4c:	f7fc f97a 	bl	8008e44 <HAL_GetTick>
 800cb50:	4602      	mov	r2, r0
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	1ad3      	subs	r3, r2, r3
 800cb56:	2b02      	cmp	r3, #2
 800cb58:	d901      	bls.n	800cb5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800cb5a:	2303      	movs	r3, #3
 800cb5c:	e1d4      	b.n	800cf08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cb5e:	4b41      	ldr	r3, [pc, #260]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800cb60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cb64:	f003 0302 	and.w	r3, r3, #2
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d0ef      	beq.n	800cb4c <HAL_RCC_OscConfig+0x3ec>
 800cb6c:	e01b      	b.n	800cba6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cb6e:	4b3d      	ldr	r3, [pc, #244]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800cb70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cb74:	4a3b      	ldr	r2, [pc, #236]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800cb76:	f023 0301 	bic.w	r3, r3, #1
 800cb7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb7e:	f7fc f961 	bl	8008e44 <HAL_GetTick>
 800cb82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cb84:	e008      	b.n	800cb98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cb86:	f7fc f95d 	bl	8008e44 <HAL_GetTick>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	1ad3      	subs	r3, r2, r3
 800cb90:	2b02      	cmp	r3, #2
 800cb92:	d901      	bls.n	800cb98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800cb94:	2303      	movs	r3, #3
 800cb96:	e1b7      	b.n	800cf08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cb98:	4b32      	ldr	r3, [pc, #200]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800cb9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cb9e:	f003 0302 	and.w	r3, r3, #2
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d1ef      	bne.n	800cb86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f003 0304 	and.w	r3, r3, #4
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	f000 80a6 	beq.w	800cd00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800cbb8:	4b2a      	ldr	r3, [pc, #168]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800cbba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cbbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d10d      	bne.n	800cbe0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cbc4:	4b27      	ldr	r3, [pc, #156]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800cbc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cbc8:	4a26      	ldr	r2, [pc, #152]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800cbca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cbce:	6593      	str	r3, [r2, #88]	@ 0x58
 800cbd0:	4b24      	ldr	r3, [pc, #144]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800cbd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cbd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cbd8:	60bb      	str	r3, [r7, #8]
 800cbda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cbdc:	2301      	movs	r3, #1
 800cbde:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cbe0:	4b21      	ldr	r3, [pc, #132]	@ (800cc68 <HAL_RCC_OscConfig+0x508>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d118      	bne.n	800cc1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cbec:	4b1e      	ldr	r3, [pc, #120]	@ (800cc68 <HAL_RCC_OscConfig+0x508>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a1d      	ldr	r2, [pc, #116]	@ (800cc68 <HAL_RCC_OscConfig+0x508>)
 800cbf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cbf6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cbf8:	f7fc f924 	bl	8008e44 <HAL_GetTick>
 800cbfc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cbfe:	e008      	b.n	800cc12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cc00:	f7fc f920 	bl	8008e44 <HAL_GetTick>
 800cc04:	4602      	mov	r2, r0
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	1ad3      	subs	r3, r2, r3
 800cc0a:	2b02      	cmp	r3, #2
 800cc0c:	d901      	bls.n	800cc12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800cc0e:	2303      	movs	r3, #3
 800cc10:	e17a      	b.n	800cf08 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cc12:	4b15      	ldr	r3, [pc, #84]	@ (800cc68 <HAL_RCC_OscConfig+0x508>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d0f0      	beq.n	800cc00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	689b      	ldr	r3, [r3, #8]
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d108      	bne.n	800cc38 <HAL_RCC_OscConfig+0x4d8>
 800cc26:	4b0f      	ldr	r3, [pc, #60]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800cc28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc2c:	4a0d      	ldr	r2, [pc, #52]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800cc2e:	f043 0301 	orr.w	r3, r3, #1
 800cc32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cc36:	e029      	b.n	800cc8c <HAL_RCC_OscConfig+0x52c>
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	689b      	ldr	r3, [r3, #8]
 800cc3c:	2b05      	cmp	r3, #5
 800cc3e:	d115      	bne.n	800cc6c <HAL_RCC_OscConfig+0x50c>
 800cc40:	4b08      	ldr	r3, [pc, #32]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800cc42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc46:	4a07      	ldr	r2, [pc, #28]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800cc48:	f043 0304 	orr.w	r3, r3, #4
 800cc4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cc50:	4b04      	ldr	r3, [pc, #16]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800cc52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc56:	4a03      	ldr	r2, [pc, #12]	@ (800cc64 <HAL_RCC_OscConfig+0x504>)
 800cc58:	f043 0301 	orr.w	r3, r3, #1
 800cc5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cc60:	e014      	b.n	800cc8c <HAL_RCC_OscConfig+0x52c>
 800cc62:	bf00      	nop
 800cc64:	40021000 	.word	0x40021000
 800cc68:	40007000 	.word	0x40007000
 800cc6c:	4b9c      	ldr	r3, [pc, #624]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800cc6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc72:	4a9b      	ldr	r2, [pc, #620]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800cc74:	f023 0301 	bic.w	r3, r3, #1
 800cc78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cc7c:	4b98      	ldr	r3, [pc, #608]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800cc7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc82:	4a97      	ldr	r2, [pc, #604]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800cc84:	f023 0304 	bic.w	r3, r3, #4
 800cc88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	689b      	ldr	r3, [r3, #8]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d016      	beq.n	800ccc2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc94:	f7fc f8d6 	bl	8008e44 <HAL_GetTick>
 800cc98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cc9a:	e00a      	b.n	800ccb2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc9c:	f7fc f8d2 	bl	8008e44 <HAL_GetTick>
 800cca0:	4602      	mov	r2, r0
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	1ad3      	subs	r3, r2, r3
 800cca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d901      	bls.n	800ccb2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800ccae:	2303      	movs	r3, #3
 800ccb0:	e12a      	b.n	800cf08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ccb2:	4b8b      	ldr	r3, [pc, #556]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800ccb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccb8:	f003 0302 	and.w	r3, r3, #2
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d0ed      	beq.n	800cc9c <HAL_RCC_OscConfig+0x53c>
 800ccc0:	e015      	b.n	800ccee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccc2:	f7fc f8bf 	bl	8008e44 <HAL_GetTick>
 800ccc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ccc8:	e00a      	b.n	800cce0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ccca:	f7fc f8bb 	bl	8008e44 <HAL_GetTick>
 800ccce:	4602      	mov	r2, r0
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	1ad3      	subs	r3, r2, r3
 800ccd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d901      	bls.n	800cce0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800ccdc:	2303      	movs	r3, #3
 800ccde:	e113      	b.n	800cf08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cce0:	4b7f      	ldr	r3, [pc, #508]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800cce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cce6:	f003 0302 	and.w	r3, r3, #2
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d1ed      	bne.n	800ccca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ccee:	7ffb      	ldrb	r3, [r7, #31]
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	d105      	bne.n	800cd00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ccf4:	4b7a      	ldr	r3, [pc, #488]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800ccf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ccf8:	4a79      	ldr	r2, [pc, #484]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800ccfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ccfe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	f000 80fe 	beq.w	800cf06 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd0e:	2b02      	cmp	r3, #2
 800cd10:	f040 80d0 	bne.w	800ceb4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800cd14:	4b72      	ldr	r3, [pc, #456]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800cd16:	68db      	ldr	r3, [r3, #12]
 800cd18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	f003 0203 	and.w	r2, r3, #3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d130      	bne.n	800cd8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd32:	3b01      	subs	r3, #1
 800cd34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d127      	bne.n	800cd8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd44:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d11f      	bne.n	800cd8a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800cd54:	2a07      	cmp	r2, #7
 800cd56:	bf14      	ite	ne
 800cd58:	2201      	movne	r2, #1
 800cd5a:	2200      	moveq	r2, #0
 800cd5c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d113      	bne.n	800cd8a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd6c:	085b      	lsrs	r3, r3, #1
 800cd6e:	3b01      	subs	r3, #1
 800cd70:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d109      	bne.n	800cd8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd80:	085b      	lsrs	r3, r3, #1
 800cd82:	3b01      	subs	r3, #1
 800cd84:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d06e      	beq.n	800ce68 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800cd8a:	69bb      	ldr	r3, [r7, #24]
 800cd8c:	2b0c      	cmp	r3, #12
 800cd8e:	d069      	beq.n	800ce64 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800cd90:	4b53      	ldr	r3, [pc, #332]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d105      	bne.n	800cda8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800cd9c:	4b50      	ldr	r3, [pc, #320]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d001      	beq.n	800cdac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800cda8:	2301      	movs	r3, #1
 800cdaa:	e0ad      	b.n	800cf08 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800cdac:	4b4c      	ldr	r3, [pc, #304]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4a4b      	ldr	r2, [pc, #300]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800cdb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cdb6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800cdb8:	f7fc f844 	bl	8008e44 <HAL_GetTick>
 800cdbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cdbe:	e008      	b.n	800cdd2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cdc0:	f7fc f840 	bl	8008e44 <HAL_GetTick>
 800cdc4:	4602      	mov	r2, r0
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	1ad3      	subs	r3, r2, r3
 800cdca:	2b02      	cmp	r3, #2
 800cdcc:	d901      	bls.n	800cdd2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800cdce:	2303      	movs	r3, #3
 800cdd0:	e09a      	b.n	800cf08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cdd2:	4b43      	ldr	r3, [pc, #268]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d1f0      	bne.n	800cdc0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cdde:	4b40      	ldr	r3, [pc, #256]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800cde0:	68da      	ldr	r2, [r3, #12]
 800cde2:	4b40      	ldr	r3, [pc, #256]	@ (800cee4 <HAL_RCC_OscConfig+0x784>)
 800cde4:	4013      	ands	r3, r2
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800cdea:	687a      	ldr	r2, [r7, #4]
 800cdec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cdee:	3a01      	subs	r2, #1
 800cdf0:	0112      	lsls	r2, r2, #4
 800cdf2:	4311      	orrs	r1, r2
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800cdf8:	0212      	lsls	r2, r2, #8
 800cdfa:	4311      	orrs	r1, r2
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ce00:	0852      	lsrs	r2, r2, #1
 800ce02:	3a01      	subs	r2, #1
 800ce04:	0552      	lsls	r2, r2, #21
 800ce06:	4311      	orrs	r1, r2
 800ce08:	687a      	ldr	r2, [r7, #4]
 800ce0a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800ce0c:	0852      	lsrs	r2, r2, #1
 800ce0e:	3a01      	subs	r2, #1
 800ce10:	0652      	lsls	r2, r2, #25
 800ce12:	4311      	orrs	r1, r2
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ce18:	0912      	lsrs	r2, r2, #4
 800ce1a:	0452      	lsls	r2, r2, #17
 800ce1c:	430a      	orrs	r2, r1
 800ce1e:	4930      	ldr	r1, [pc, #192]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800ce20:	4313      	orrs	r3, r2
 800ce22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ce24:	4b2e      	ldr	r3, [pc, #184]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	4a2d      	ldr	r2, [pc, #180]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800ce2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ce2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ce30:	4b2b      	ldr	r3, [pc, #172]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800ce32:	68db      	ldr	r3, [r3, #12]
 800ce34:	4a2a      	ldr	r2, [pc, #168]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800ce36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ce3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ce3c:	f7fc f802 	bl	8008e44 <HAL_GetTick>
 800ce40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ce42:	e008      	b.n	800ce56 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ce44:	f7fb fffe 	bl	8008e44 <HAL_GetTick>
 800ce48:	4602      	mov	r2, r0
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	1ad3      	subs	r3, r2, r3
 800ce4e:	2b02      	cmp	r3, #2
 800ce50:	d901      	bls.n	800ce56 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800ce52:	2303      	movs	r3, #3
 800ce54:	e058      	b.n	800cf08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ce56:	4b22      	ldr	r3, [pc, #136]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d0f0      	beq.n	800ce44 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ce62:	e050      	b.n	800cf06 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800ce64:	2301      	movs	r3, #1
 800ce66:	e04f      	b.n	800cf08 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ce68:	4b1d      	ldr	r3, [pc, #116]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d148      	bne.n	800cf06 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800ce74:	4b1a      	ldr	r3, [pc, #104]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4a19      	ldr	r2, [pc, #100]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800ce7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ce7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ce80:	4b17      	ldr	r3, [pc, #92]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800ce82:	68db      	ldr	r3, [r3, #12]
 800ce84:	4a16      	ldr	r2, [pc, #88]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800ce86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ce8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ce8c:	f7fb ffda 	bl	8008e44 <HAL_GetTick>
 800ce90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ce92:	e008      	b.n	800cea6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ce94:	f7fb ffd6 	bl	8008e44 <HAL_GetTick>
 800ce98:	4602      	mov	r2, r0
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	1ad3      	subs	r3, r2, r3
 800ce9e:	2b02      	cmp	r3, #2
 800cea0:	d901      	bls.n	800cea6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800cea2:	2303      	movs	r3, #3
 800cea4:	e030      	b.n	800cf08 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cea6:	4b0e      	ldr	r3, [pc, #56]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d0f0      	beq.n	800ce94 <HAL_RCC_OscConfig+0x734>
 800ceb2:	e028      	b.n	800cf06 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ceb4:	69bb      	ldr	r3, [r7, #24]
 800ceb6:	2b0c      	cmp	r3, #12
 800ceb8:	d023      	beq.n	800cf02 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ceba:	4b09      	ldr	r3, [pc, #36]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	4a08      	ldr	r2, [pc, #32]	@ (800cee0 <HAL_RCC_OscConfig+0x780>)
 800cec0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cec6:	f7fb ffbd 	bl	8008e44 <HAL_GetTick>
 800ceca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cecc:	e00c      	b.n	800cee8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cece:	f7fb ffb9 	bl	8008e44 <HAL_GetTick>
 800ced2:	4602      	mov	r2, r0
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	1ad3      	subs	r3, r2, r3
 800ced8:	2b02      	cmp	r3, #2
 800ceda:	d905      	bls.n	800cee8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800cedc:	2303      	movs	r3, #3
 800cede:	e013      	b.n	800cf08 <HAL_RCC_OscConfig+0x7a8>
 800cee0:	40021000 	.word	0x40021000
 800cee4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cee8:	4b09      	ldr	r3, [pc, #36]	@ (800cf10 <HAL_RCC_OscConfig+0x7b0>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d1ec      	bne.n	800cece <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800cef4:	4b06      	ldr	r3, [pc, #24]	@ (800cf10 <HAL_RCC_OscConfig+0x7b0>)
 800cef6:	68da      	ldr	r2, [r3, #12]
 800cef8:	4905      	ldr	r1, [pc, #20]	@ (800cf10 <HAL_RCC_OscConfig+0x7b0>)
 800cefa:	4b06      	ldr	r3, [pc, #24]	@ (800cf14 <HAL_RCC_OscConfig+0x7b4>)
 800cefc:	4013      	ands	r3, r2
 800cefe:	60cb      	str	r3, [r1, #12]
 800cf00:	e001      	b.n	800cf06 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800cf02:	2301      	movs	r3, #1
 800cf04:	e000      	b.n	800cf08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800cf06:	2300      	movs	r3, #0
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3720      	adds	r7, #32
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}
 800cf10:	40021000 	.word	0x40021000
 800cf14:	feeefffc 	.word	0xfeeefffc

0800cf18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b084      	sub	sp, #16
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d101      	bne.n	800cf2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	e0e7      	b.n	800d0fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cf2c:	4b75      	ldr	r3, [pc, #468]	@ (800d104 <HAL_RCC_ClockConfig+0x1ec>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f003 0307 	and.w	r3, r3, #7
 800cf34:	683a      	ldr	r2, [r7, #0]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d910      	bls.n	800cf5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf3a:	4b72      	ldr	r3, [pc, #456]	@ (800d104 <HAL_RCC_ClockConfig+0x1ec>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f023 0207 	bic.w	r2, r3, #7
 800cf42:	4970      	ldr	r1, [pc, #448]	@ (800d104 <HAL_RCC_ClockConfig+0x1ec>)
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	4313      	orrs	r3, r2
 800cf48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf4a:	4b6e      	ldr	r3, [pc, #440]	@ (800d104 <HAL_RCC_ClockConfig+0x1ec>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f003 0307 	and.w	r3, r3, #7
 800cf52:	683a      	ldr	r2, [r7, #0]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d001      	beq.n	800cf5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800cf58:	2301      	movs	r3, #1
 800cf5a:	e0cf      	b.n	800d0fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f003 0302 	and.w	r3, r3, #2
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d010      	beq.n	800cf8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	689a      	ldr	r2, [r3, #8]
 800cf6c:	4b66      	ldr	r3, [pc, #408]	@ (800d108 <HAL_RCC_ClockConfig+0x1f0>)
 800cf6e:	689b      	ldr	r3, [r3, #8]
 800cf70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d908      	bls.n	800cf8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cf78:	4b63      	ldr	r3, [pc, #396]	@ (800d108 <HAL_RCC_ClockConfig+0x1f0>)
 800cf7a:	689b      	ldr	r3, [r3, #8]
 800cf7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	689b      	ldr	r3, [r3, #8]
 800cf84:	4960      	ldr	r1, [pc, #384]	@ (800d108 <HAL_RCC_ClockConfig+0x1f0>)
 800cf86:	4313      	orrs	r3, r2
 800cf88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f003 0301 	and.w	r3, r3, #1
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d04c      	beq.n	800d030 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	2b03      	cmp	r3, #3
 800cf9c:	d107      	bne.n	800cfae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cf9e:	4b5a      	ldr	r3, [pc, #360]	@ (800d108 <HAL_RCC_ClockConfig+0x1f0>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d121      	bne.n	800cfee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800cfaa:	2301      	movs	r3, #1
 800cfac:	e0a6      	b.n	800d0fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	2b02      	cmp	r3, #2
 800cfb4:	d107      	bne.n	800cfc6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cfb6:	4b54      	ldr	r3, [pc, #336]	@ (800d108 <HAL_RCC_ClockConfig+0x1f0>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d115      	bne.n	800cfee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	e09a      	b.n	800d0fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	685b      	ldr	r3, [r3, #4]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d107      	bne.n	800cfde <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800cfce:	4b4e      	ldr	r3, [pc, #312]	@ (800d108 <HAL_RCC_ClockConfig+0x1f0>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f003 0302 	and.w	r3, r3, #2
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d109      	bne.n	800cfee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800cfda:	2301      	movs	r3, #1
 800cfdc:	e08e      	b.n	800d0fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cfde:	4b4a      	ldr	r3, [pc, #296]	@ (800d108 <HAL_RCC_ClockConfig+0x1f0>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d101      	bne.n	800cfee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800cfea:	2301      	movs	r3, #1
 800cfec:	e086      	b.n	800d0fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cfee:	4b46      	ldr	r3, [pc, #280]	@ (800d108 <HAL_RCC_ClockConfig+0x1f0>)
 800cff0:	689b      	ldr	r3, [r3, #8]
 800cff2:	f023 0203 	bic.w	r2, r3, #3
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	685b      	ldr	r3, [r3, #4]
 800cffa:	4943      	ldr	r1, [pc, #268]	@ (800d108 <HAL_RCC_ClockConfig+0x1f0>)
 800cffc:	4313      	orrs	r3, r2
 800cffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d000:	f7fb ff20 	bl	8008e44 <HAL_GetTick>
 800d004:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d006:	e00a      	b.n	800d01e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d008:	f7fb ff1c 	bl	8008e44 <HAL_GetTick>
 800d00c:	4602      	mov	r2, r0
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	1ad3      	subs	r3, r2, r3
 800d012:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d016:	4293      	cmp	r3, r2
 800d018:	d901      	bls.n	800d01e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800d01a:	2303      	movs	r3, #3
 800d01c:	e06e      	b.n	800d0fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d01e:	4b3a      	ldr	r3, [pc, #232]	@ (800d108 <HAL_RCC_ClockConfig+0x1f0>)
 800d020:	689b      	ldr	r3, [r3, #8]
 800d022:	f003 020c 	and.w	r2, r3, #12
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	685b      	ldr	r3, [r3, #4]
 800d02a:	009b      	lsls	r3, r3, #2
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d1eb      	bne.n	800d008 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	f003 0302 	and.w	r3, r3, #2
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d010      	beq.n	800d05e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	689a      	ldr	r2, [r3, #8]
 800d040:	4b31      	ldr	r3, [pc, #196]	@ (800d108 <HAL_RCC_ClockConfig+0x1f0>)
 800d042:	689b      	ldr	r3, [r3, #8]
 800d044:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d048:	429a      	cmp	r2, r3
 800d04a:	d208      	bcs.n	800d05e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d04c:	4b2e      	ldr	r3, [pc, #184]	@ (800d108 <HAL_RCC_ClockConfig+0x1f0>)
 800d04e:	689b      	ldr	r3, [r3, #8]
 800d050:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	689b      	ldr	r3, [r3, #8]
 800d058:	492b      	ldr	r1, [pc, #172]	@ (800d108 <HAL_RCC_ClockConfig+0x1f0>)
 800d05a:	4313      	orrs	r3, r2
 800d05c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d05e:	4b29      	ldr	r3, [pc, #164]	@ (800d104 <HAL_RCC_ClockConfig+0x1ec>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	f003 0307 	and.w	r3, r3, #7
 800d066:	683a      	ldr	r2, [r7, #0]
 800d068:	429a      	cmp	r2, r3
 800d06a:	d210      	bcs.n	800d08e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d06c:	4b25      	ldr	r3, [pc, #148]	@ (800d104 <HAL_RCC_ClockConfig+0x1ec>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	f023 0207 	bic.w	r2, r3, #7
 800d074:	4923      	ldr	r1, [pc, #140]	@ (800d104 <HAL_RCC_ClockConfig+0x1ec>)
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	4313      	orrs	r3, r2
 800d07a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d07c:	4b21      	ldr	r3, [pc, #132]	@ (800d104 <HAL_RCC_ClockConfig+0x1ec>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f003 0307 	and.w	r3, r3, #7
 800d084:	683a      	ldr	r2, [r7, #0]
 800d086:	429a      	cmp	r2, r3
 800d088:	d001      	beq.n	800d08e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800d08a:	2301      	movs	r3, #1
 800d08c:	e036      	b.n	800d0fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f003 0304 	and.w	r3, r3, #4
 800d096:	2b00      	cmp	r3, #0
 800d098:	d008      	beq.n	800d0ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d09a:	4b1b      	ldr	r3, [pc, #108]	@ (800d108 <HAL_RCC_ClockConfig+0x1f0>)
 800d09c:	689b      	ldr	r3, [r3, #8]
 800d09e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	68db      	ldr	r3, [r3, #12]
 800d0a6:	4918      	ldr	r1, [pc, #96]	@ (800d108 <HAL_RCC_ClockConfig+0x1f0>)
 800d0a8:	4313      	orrs	r3, r2
 800d0aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	f003 0308 	and.w	r3, r3, #8
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d009      	beq.n	800d0cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d0b8:	4b13      	ldr	r3, [pc, #76]	@ (800d108 <HAL_RCC_ClockConfig+0x1f0>)
 800d0ba:	689b      	ldr	r3, [r3, #8]
 800d0bc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	691b      	ldr	r3, [r3, #16]
 800d0c4:	00db      	lsls	r3, r3, #3
 800d0c6:	4910      	ldr	r1, [pc, #64]	@ (800d108 <HAL_RCC_ClockConfig+0x1f0>)
 800d0c8:	4313      	orrs	r3, r2
 800d0ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d0cc:	f000 f824 	bl	800d118 <HAL_RCC_GetSysClockFreq>
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d108 <HAL_RCC_ClockConfig+0x1f0>)
 800d0d4:	689b      	ldr	r3, [r3, #8]
 800d0d6:	091b      	lsrs	r3, r3, #4
 800d0d8:	f003 030f 	and.w	r3, r3, #15
 800d0dc:	490b      	ldr	r1, [pc, #44]	@ (800d10c <HAL_RCC_ClockConfig+0x1f4>)
 800d0de:	5ccb      	ldrb	r3, [r1, r3]
 800d0e0:	f003 031f 	and.w	r3, r3, #31
 800d0e4:	fa22 f303 	lsr.w	r3, r2, r3
 800d0e8:	4a09      	ldr	r2, [pc, #36]	@ (800d110 <HAL_RCC_ClockConfig+0x1f8>)
 800d0ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d0ec:	4b09      	ldr	r3, [pc, #36]	@ (800d114 <HAL_RCC_ClockConfig+0x1fc>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7fb fe57 	bl	8008da4 <HAL_InitTick>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	72fb      	strb	r3, [r7, #11]

  return status;
 800d0fa:	7afb      	ldrb	r3, [r7, #11]
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3710      	adds	r7, #16
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}
 800d104:	40022000 	.word	0x40022000
 800d108:	40021000 	.word	0x40021000
 800d10c:	08013fb4 	.word	0x08013fb4
 800d110:	20000000 	.word	0x20000000
 800d114:	2000000c 	.word	0x2000000c

0800d118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d118:	b480      	push	{r7}
 800d11a:	b089      	sub	sp, #36	@ 0x24
 800d11c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800d11e:	2300      	movs	r3, #0
 800d120:	61fb      	str	r3, [r7, #28]
 800d122:	2300      	movs	r3, #0
 800d124:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d126:	4b3e      	ldr	r3, [pc, #248]	@ (800d220 <HAL_RCC_GetSysClockFreq+0x108>)
 800d128:	689b      	ldr	r3, [r3, #8]
 800d12a:	f003 030c 	and.w	r3, r3, #12
 800d12e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d130:	4b3b      	ldr	r3, [pc, #236]	@ (800d220 <HAL_RCC_GetSysClockFreq+0x108>)
 800d132:	68db      	ldr	r3, [r3, #12]
 800d134:	f003 0303 	and.w	r3, r3, #3
 800d138:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d005      	beq.n	800d14c <HAL_RCC_GetSysClockFreq+0x34>
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	2b0c      	cmp	r3, #12
 800d144:	d121      	bne.n	800d18a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	2b01      	cmp	r3, #1
 800d14a:	d11e      	bne.n	800d18a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800d14c:	4b34      	ldr	r3, [pc, #208]	@ (800d220 <HAL_RCC_GetSysClockFreq+0x108>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f003 0308 	and.w	r3, r3, #8
 800d154:	2b00      	cmp	r3, #0
 800d156:	d107      	bne.n	800d168 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800d158:	4b31      	ldr	r3, [pc, #196]	@ (800d220 <HAL_RCC_GetSysClockFreq+0x108>)
 800d15a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d15e:	0a1b      	lsrs	r3, r3, #8
 800d160:	f003 030f 	and.w	r3, r3, #15
 800d164:	61fb      	str	r3, [r7, #28]
 800d166:	e005      	b.n	800d174 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800d168:	4b2d      	ldr	r3, [pc, #180]	@ (800d220 <HAL_RCC_GetSysClockFreq+0x108>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	091b      	lsrs	r3, r3, #4
 800d16e:	f003 030f 	and.w	r3, r3, #15
 800d172:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800d174:	4a2b      	ldr	r2, [pc, #172]	@ (800d224 <HAL_RCC_GetSysClockFreq+0x10c>)
 800d176:	69fb      	ldr	r3, [r7, #28]
 800d178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d17c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d10d      	bne.n	800d1a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800d184:	69fb      	ldr	r3, [r7, #28]
 800d186:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d188:	e00a      	b.n	800d1a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	2b04      	cmp	r3, #4
 800d18e:	d102      	bne.n	800d196 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d190:	4b25      	ldr	r3, [pc, #148]	@ (800d228 <HAL_RCC_GetSysClockFreq+0x110>)
 800d192:	61bb      	str	r3, [r7, #24]
 800d194:	e004      	b.n	800d1a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	2b08      	cmp	r3, #8
 800d19a:	d101      	bne.n	800d1a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d19c:	4b23      	ldr	r3, [pc, #140]	@ (800d22c <HAL_RCC_GetSysClockFreq+0x114>)
 800d19e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	2b0c      	cmp	r3, #12
 800d1a4:	d134      	bne.n	800d210 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d1a6:	4b1e      	ldr	r3, [pc, #120]	@ (800d220 <HAL_RCC_GetSysClockFreq+0x108>)
 800d1a8:	68db      	ldr	r3, [r3, #12]
 800d1aa:	f003 0303 	and.w	r3, r3, #3
 800d1ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	2b02      	cmp	r3, #2
 800d1b4:	d003      	beq.n	800d1be <HAL_RCC_GetSysClockFreq+0xa6>
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	2b03      	cmp	r3, #3
 800d1ba:	d003      	beq.n	800d1c4 <HAL_RCC_GetSysClockFreq+0xac>
 800d1bc:	e005      	b.n	800d1ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800d1be:	4b1a      	ldr	r3, [pc, #104]	@ (800d228 <HAL_RCC_GetSysClockFreq+0x110>)
 800d1c0:	617b      	str	r3, [r7, #20]
      break;
 800d1c2:	e005      	b.n	800d1d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800d1c4:	4b19      	ldr	r3, [pc, #100]	@ (800d22c <HAL_RCC_GetSysClockFreq+0x114>)
 800d1c6:	617b      	str	r3, [r7, #20]
      break;
 800d1c8:	e002      	b.n	800d1d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800d1ca:	69fb      	ldr	r3, [r7, #28]
 800d1cc:	617b      	str	r3, [r7, #20]
      break;
 800d1ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d1d0:	4b13      	ldr	r3, [pc, #76]	@ (800d220 <HAL_RCC_GetSysClockFreq+0x108>)
 800d1d2:	68db      	ldr	r3, [r3, #12]
 800d1d4:	091b      	lsrs	r3, r3, #4
 800d1d6:	f003 0307 	and.w	r3, r3, #7
 800d1da:	3301      	adds	r3, #1
 800d1dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800d1de:	4b10      	ldr	r3, [pc, #64]	@ (800d220 <HAL_RCC_GetSysClockFreq+0x108>)
 800d1e0:	68db      	ldr	r3, [r3, #12]
 800d1e2:	0a1b      	lsrs	r3, r3, #8
 800d1e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d1e8:	697a      	ldr	r2, [r7, #20]
 800d1ea:	fb03 f202 	mul.w	r2, r3, r2
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d1f6:	4b0a      	ldr	r3, [pc, #40]	@ (800d220 <HAL_RCC_GetSysClockFreq+0x108>)
 800d1f8:	68db      	ldr	r3, [r3, #12]
 800d1fa:	0e5b      	lsrs	r3, r3, #25
 800d1fc:	f003 0303 	and.w	r3, r3, #3
 800d200:	3301      	adds	r3, #1
 800d202:	005b      	lsls	r3, r3, #1
 800d204:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800d206:	697a      	ldr	r2, [r7, #20]
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d20e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800d210:	69bb      	ldr	r3, [r7, #24]
}
 800d212:	4618      	mov	r0, r3
 800d214:	3724      	adds	r7, #36	@ 0x24
 800d216:	46bd      	mov	sp, r7
 800d218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21c:	4770      	bx	lr
 800d21e:	bf00      	nop
 800d220:	40021000 	.word	0x40021000
 800d224:	08013fcc 	.word	0x08013fcc
 800d228:	00f42400 	.word	0x00f42400
 800d22c:	007a1200 	.word	0x007a1200

0800d230 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d230:	b480      	push	{r7}
 800d232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d234:	4b03      	ldr	r3, [pc, #12]	@ (800d244 <HAL_RCC_GetHCLKFreq+0x14>)
 800d236:	681b      	ldr	r3, [r3, #0]
}
 800d238:	4618      	mov	r0, r3
 800d23a:	46bd      	mov	sp, r7
 800d23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d240:	4770      	bx	lr
 800d242:	bf00      	nop
 800d244:	20000000 	.word	0x20000000

0800d248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d24c:	f7ff fff0 	bl	800d230 <HAL_RCC_GetHCLKFreq>
 800d250:	4602      	mov	r2, r0
 800d252:	4b06      	ldr	r3, [pc, #24]	@ (800d26c <HAL_RCC_GetPCLK1Freq+0x24>)
 800d254:	689b      	ldr	r3, [r3, #8]
 800d256:	0a1b      	lsrs	r3, r3, #8
 800d258:	f003 0307 	and.w	r3, r3, #7
 800d25c:	4904      	ldr	r1, [pc, #16]	@ (800d270 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d25e:	5ccb      	ldrb	r3, [r1, r3]
 800d260:	f003 031f 	and.w	r3, r3, #31
 800d264:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d268:	4618      	mov	r0, r3
 800d26a:	bd80      	pop	{r7, pc}
 800d26c:	40021000 	.word	0x40021000
 800d270:	08013fc4 	.word	0x08013fc4

0800d274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d278:	f7ff ffda 	bl	800d230 <HAL_RCC_GetHCLKFreq>
 800d27c:	4602      	mov	r2, r0
 800d27e:	4b06      	ldr	r3, [pc, #24]	@ (800d298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d280:	689b      	ldr	r3, [r3, #8]
 800d282:	0adb      	lsrs	r3, r3, #11
 800d284:	f003 0307 	and.w	r3, r3, #7
 800d288:	4904      	ldr	r1, [pc, #16]	@ (800d29c <HAL_RCC_GetPCLK2Freq+0x28>)
 800d28a:	5ccb      	ldrb	r3, [r1, r3]
 800d28c:	f003 031f 	and.w	r3, r3, #31
 800d290:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d294:	4618      	mov	r0, r3
 800d296:	bd80      	pop	{r7, pc}
 800d298:	40021000 	.word	0x40021000
 800d29c:	08013fc4 	.word	0x08013fc4

0800d2a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b086      	sub	sp, #24
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d2ac:	4b2a      	ldr	r3, [pc, #168]	@ (800d358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d2ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d003      	beq.n	800d2c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800d2b8:	f7fe fd8c 	bl	800bdd4 <HAL_PWREx_GetVoltageRange>
 800d2bc:	6178      	str	r0, [r7, #20]
 800d2be:	e014      	b.n	800d2ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800d2c0:	4b25      	ldr	r3, [pc, #148]	@ (800d358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d2c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2c4:	4a24      	ldr	r2, [pc, #144]	@ (800d358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d2c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d2ca:	6593      	str	r3, [r2, #88]	@ 0x58
 800d2cc:	4b22      	ldr	r3, [pc, #136]	@ (800d358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d2ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d2d4:	60fb      	str	r3, [r7, #12]
 800d2d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800d2d8:	f7fe fd7c 	bl	800bdd4 <HAL_PWREx_GetVoltageRange>
 800d2dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800d2de:	4b1e      	ldr	r3, [pc, #120]	@ (800d358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d2e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2e2:	4a1d      	ldr	r2, [pc, #116]	@ (800d358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d2e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d2e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d2f0:	d10b      	bne.n	800d30a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2b80      	cmp	r3, #128	@ 0x80
 800d2f6:	d919      	bls.n	800d32c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2ba0      	cmp	r3, #160	@ 0xa0
 800d2fc:	d902      	bls.n	800d304 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800d2fe:	2302      	movs	r3, #2
 800d300:	613b      	str	r3, [r7, #16]
 800d302:	e013      	b.n	800d32c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800d304:	2301      	movs	r3, #1
 800d306:	613b      	str	r3, [r7, #16]
 800d308:	e010      	b.n	800d32c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2b80      	cmp	r3, #128	@ 0x80
 800d30e:	d902      	bls.n	800d316 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800d310:	2303      	movs	r3, #3
 800d312:	613b      	str	r3, [r7, #16]
 800d314:	e00a      	b.n	800d32c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2b80      	cmp	r3, #128	@ 0x80
 800d31a:	d102      	bne.n	800d322 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800d31c:	2302      	movs	r3, #2
 800d31e:	613b      	str	r3, [r7, #16]
 800d320:	e004      	b.n	800d32c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2b70      	cmp	r3, #112	@ 0x70
 800d326:	d101      	bne.n	800d32c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800d328:	2301      	movs	r3, #1
 800d32a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d32c:	4b0b      	ldr	r3, [pc, #44]	@ (800d35c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f023 0207 	bic.w	r2, r3, #7
 800d334:	4909      	ldr	r1, [pc, #36]	@ (800d35c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	4313      	orrs	r3, r2
 800d33a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800d33c:	4b07      	ldr	r3, [pc, #28]	@ (800d35c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f003 0307 	and.w	r3, r3, #7
 800d344:	693a      	ldr	r2, [r7, #16]
 800d346:	429a      	cmp	r2, r3
 800d348:	d001      	beq.n	800d34e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800d34a:	2301      	movs	r3, #1
 800d34c:	e000      	b.n	800d350 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800d34e:	2300      	movs	r3, #0
}
 800d350:	4618      	mov	r0, r3
 800d352:	3718      	adds	r7, #24
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}
 800d358:	40021000 	.word	0x40021000
 800d35c:	40022000 	.word	0x40022000

0800d360 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b086      	sub	sp, #24
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d368:	2300      	movs	r3, #0
 800d36a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d36c:	2300      	movs	r3, #0
 800d36e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d041      	beq.n	800d400 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d380:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d384:	d02a      	beq.n	800d3dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800d386:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d38a:	d824      	bhi.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800d38c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d390:	d008      	beq.n	800d3a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800d392:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d396:	d81e      	bhi.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d00a      	beq.n	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800d39c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d3a0:	d010      	beq.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d3a2:	e018      	b.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800d3a4:	4b86      	ldr	r3, [pc, #536]	@ (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d3a6:	68db      	ldr	r3, [r3, #12]
 800d3a8:	4a85      	ldr	r2, [pc, #532]	@ (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d3aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d3ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d3b0:	e015      	b.n	800d3de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	3304      	adds	r3, #4
 800d3b6:	2100      	movs	r1, #0
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f000 fabb 	bl	800d934 <RCCEx_PLLSAI1_Config>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d3c2:	e00c      	b.n	800d3de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	3320      	adds	r3, #32
 800d3c8:	2100      	movs	r1, #0
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f000 fba6 	bl	800db1c <RCCEx_PLLSAI2_Config>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d3d4:	e003      	b.n	800d3de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	74fb      	strb	r3, [r7, #19]
      break;
 800d3da:	e000      	b.n	800d3de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800d3dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d3de:	7cfb      	ldrb	r3, [r7, #19]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d10b      	bne.n	800d3fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d3e4:	4b76      	ldr	r3, [pc, #472]	@ (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d3e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d3ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d3f2:	4973      	ldr	r1, [pc, #460]	@ (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d3f4:	4313      	orrs	r3, r2
 800d3f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800d3fa:	e001      	b.n	800d400 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3fc:	7cfb      	ldrb	r3, [r7, #19]
 800d3fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d041      	beq.n	800d490 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d410:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d414:	d02a      	beq.n	800d46c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800d416:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d41a:	d824      	bhi.n	800d466 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800d41c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d420:	d008      	beq.n	800d434 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d422:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d426:	d81e      	bhi.n	800d466 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d00a      	beq.n	800d442 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800d42c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d430:	d010      	beq.n	800d454 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800d432:	e018      	b.n	800d466 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800d434:	4b62      	ldr	r3, [pc, #392]	@ (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d436:	68db      	ldr	r3, [r3, #12]
 800d438:	4a61      	ldr	r2, [pc, #388]	@ (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d43a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d43e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d440:	e015      	b.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	3304      	adds	r3, #4
 800d446:	2100      	movs	r1, #0
 800d448:	4618      	mov	r0, r3
 800d44a:	f000 fa73 	bl	800d934 <RCCEx_PLLSAI1_Config>
 800d44e:	4603      	mov	r3, r0
 800d450:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d452:	e00c      	b.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	3320      	adds	r3, #32
 800d458:	2100      	movs	r1, #0
 800d45a:	4618      	mov	r0, r3
 800d45c:	f000 fb5e 	bl	800db1c <RCCEx_PLLSAI2_Config>
 800d460:	4603      	mov	r3, r0
 800d462:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d464:	e003      	b.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d466:	2301      	movs	r3, #1
 800d468:	74fb      	strb	r3, [r7, #19]
      break;
 800d46a:	e000      	b.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800d46c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d46e:	7cfb      	ldrb	r3, [r7, #19]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d10b      	bne.n	800d48c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d474:	4b52      	ldr	r3, [pc, #328]	@ (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d47a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d482:	494f      	ldr	r1, [pc, #316]	@ (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d484:	4313      	orrs	r3, r2
 800d486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800d48a:	e001      	b.n	800d490 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d48c:	7cfb      	ldrb	r3, [r7, #19]
 800d48e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d498:	2b00      	cmp	r3, #0
 800d49a:	f000 80a0 	beq.w	800d5de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d4a2:	4b47      	ldr	r3, [pc, #284]	@ (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d4a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d4a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d101      	bne.n	800d4b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	e000      	b.n	800d4b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d00d      	beq.n	800d4d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d4b8:	4b41      	ldr	r3, [pc, #260]	@ (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d4ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d4bc:	4a40      	ldr	r2, [pc, #256]	@ (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d4be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d4c2:	6593      	str	r3, [r2, #88]	@ 0x58
 800d4c4:	4b3e      	ldr	r3, [pc, #248]	@ (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d4c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d4c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d4cc:	60bb      	str	r3, [r7, #8]
 800d4ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d4d4:	4b3b      	ldr	r3, [pc, #236]	@ (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4a3a      	ldr	r2, [pc, #232]	@ (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800d4da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d4de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d4e0:	f7fb fcb0 	bl	8008e44 <HAL_GetTick>
 800d4e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d4e6:	e009      	b.n	800d4fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d4e8:	f7fb fcac 	bl	8008e44 <HAL_GetTick>
 800d4ec:	4602      	mov	r2, r0
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	1ad3      	subs	r3, r2, r3
 800d4f2:	2b02      	cmp	r3, #2
 800d4f4:	d902      	bls.n	800d4fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800d4f6:	2303      	movs	r3, #3
 800d4f8:	74fb      	strb	r3, [r7, #19]
        break;
 800d4fa:	e005      	b.n	800d508 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d4fc:	4b31      	ldr	r3, [pc, #196]	@ (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d504:	2b00      	cmp	r3, #0
 800d506:	d0ef      	beq.n	800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800d508:	7cfb      	ldrb	r3, [r7, #19]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d15c      	bne.n	800d5c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d50e:	4b2c      	ldr	r3, [pc, #176]	@ (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d514:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d518:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d01f      	beq.n	800d560 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d526:	697a      	ldr	r2, [r7, #20]
 800d528:	429a      	cmp	r2, r3
 800d52a:	d019      	beq.n	800d560 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d52c:	4b24      	ldr	r3, [pc, #144]	@ (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d52e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d532:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d536:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d538:	4b21      	ldr	r3, [pc, #132]	@ (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d53a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d53e:	4a20      	ldr	r2, [pc, #128]	@ (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d548:	4b1d      	ldr	r3, [pc, #116]	@ (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d54a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d54e:	4a1c      	ldr	r2, [pc, #112]	@ (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d550:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d554:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d558:	4a19      	ldr	r2, [pc, #100]	@ (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	f003 0301 	and.w	r3, r3, #1
 800d566:	2b00      	cmp	r3, #0
 800d568:	d016      	beq.n	800d598 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d56a:	f7fb fc6b 	bl	8008e44 <HAL_GetTick>
 800d56e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d570:	e00b      	b.n	800d58a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d572:	f7fb fc67 	bl	8008e44 <HAL_GetTick>
 800d576:	4602      	mov	r2, r0
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	1ad3      	subs	r3, r2, r3
 800d57c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d580:	4293      	cmp	r3, r2
 800d582:	d902      	bls.n	800d58a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800d584:	2303      	movs	r3, #3
 800d586:	74fb      	strb	r3, [r7, #19]
            break;
 800d588:	e006      	b.n	800d598 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d58a:	4b0d      	ldr	r3, [pc, #52]	@ (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d58c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d590:	f003 0302 	and.w	r3, r3, #2
 800d594:	2b00      	cmp	r3, #0
 800d596:	d0ec      	beq.n	800d572 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800d598:	7cfb      	ldrb	r3, [r7, #19]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d10c      	bne.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d59e:	4b08      	ldr	r3, [pc, #32]	@ (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d5a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d5a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d5ae:	4904      	ldr	r1, [pc, #16]	@ (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d5b0:	4313      	orrs	r3, r2
 800d5b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800d5b6:	e009      	b.n	800d5cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d5b8:	7cfb      	ldrb	r3, [r7, #19]
 800d5ba:	74bb      	strb	r3, [r7, #18]
 800d5bc:	e006      	b.n	800d5cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800d5be:	bf00      	nop
 800d5c0:	40021000 	.word	0x40021000
 800d5c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5c8:	7cfb      	ldrb	r3, [r7, #19]
 800d5ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d5cc:	7c7b      	ldrb	r3, [r7, #17]
 800d5ce:	2b01      	cmp	r3, #1
 800d5d0:	d105      	bne.n	800d5de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d5d2:	4b9e      	ldr	r3, [pc, #632]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d5d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5d6:	4a9d      	ldr	r2, [pc, #628]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d5d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d5dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	f003 0301 	and.w	r3, r3, #1
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d00a      	beq.n	800d600 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d5ea:	4b98      	ldr	r3, [pc, #608]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d5ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d5f0:	f023 0203 	bic.w	r2, r3, #3
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5f8:	4994      	ldr	r1, [pc, #592]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d5fa:	4313      	orrs	r3, r2
 800d5fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f003 0302 	and.w	r3, r3, #2
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d00a      	beq.n	800d622 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d60c:	4b8f      	ldr	r3, [pc, #572]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d60e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d612:	f023 020c 	bic.w	r2, r3, #12
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d61a:	498c      	ldr	r1, [pc, #560]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d61c:	4313      	orrs	r3, r2
 800d61e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f003 0304 	and.w	r3, r3, #4
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d00a      	beq.n	800d644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d62e:	4b87      	ldr	r3, [pc, #540]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d634:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d63c:	4983      	ldr	r1, [pc, #524]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d63e:	4313      	orrs	r3, r2
 800d640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f003 0308 	and.w	r3, r3, #8
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d00a      	beq.n	800d666 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d650:	4b7e      	ldr	r3, [pc, #504]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d656:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d65e:	497b      	ldr	r1, [pc, #492]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d660:	4313      	orrs	r3, r2
 800d662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f003 0310 	and.w	r3, r3, #16
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d00a      	beq.n	800d688 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d672:	4b76      	ldr	r3, [pc, #472]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d678:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d680:	4972      	ldr	r1, [pc, #456]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d682:	4313      	orrs	r3, r2
 800d684:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	f003 0320 	and.w	r3, r3, #32
 800d690:	2b00      	cmp	r3, #0
 800d692:	d00a      	beq.n	800d6aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d694:	4b6d      	ldr	r3, [pc, #436]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d69a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d6a2:	496a      	ldr	r1, [pc, #424]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d00a      	beq.n	800d6cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d6b6:	4b65      	ldr	r3, [pc, #404]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d6b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d6bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d6c4:	4961      	ldr	r1, [pc, #388]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d6c6:	4313      	orrs	r3, r2
 800d6c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d00a      	beq.n	800d6ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d6d8:	4b5c      	ldr	r3, [pc, #368]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d6da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d6de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d6e6:	4959      	ldr	r1, [pc, #356]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d6e8:	4313      	orrs	r3, r2
 800d6ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d00a      	beq.n	800d710 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d6fa:	4b54      	ldr	r3, [pc, #336]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d6fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d700:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d708:	4950      	ldr	r1, [pc, #320]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d70a:	4313      	orrs	r3, r2
 800d70c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d00a      	beq.n	800d732 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d71c:	4b4b      	ldr	r3, [pc, #300]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d71e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d722:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d72a:	4948      	ldr	r1, [pc, #288]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d72c:	4313      	orrs	r3, r2
 800d72e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d00a      	beq.n	800d754 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d73e:	4b43      	ldr	r3, [pc, #268]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d744:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d74c:	493f      	ldr	r1, [pc, #252]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d74e:	4313      	orrs	r3, r2
 800d750:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d028      	beq.n	800d7b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d760:	4b3a      	ldr	r3, [pc, #232]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d766:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d76e:	4937      	ldr	r1, [pc, #220]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d770:	4313      	orrs	r3, r2
 800d772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d77a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d77e:	d106      	bne.n	800d78e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d780:	4b32      	ldr	r3, [pc, #200]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d782:	68db      	ldr	r3, [r3, #12]
 800d784:	4a31      	ldr	r2, [pc, #196]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d786:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d78a:	60d3      	str	r3, [r2, #12]
 800d78c:	e011      	b.n	800d7b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d792:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d796:	d10c      	bne.n	800d7b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	3304      	adds	r3, #4
 800d79c:	2101      	movs	r1, #1
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f000 f8c8 	bl	800d934 <RCCEx_PLLSAI1_Config>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800d7a8:	7cfb      	ldrb	r3, [r7, #19]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d001      	beq.n	800d7b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800d7ae:	7cfb      	ldrb	r3, [r7, #19]
 800d7b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d028      	beq.n	800d810 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d7be:	4b23      	ldr	r3, [pc, #140]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d7c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d7c4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d7cc:	491f      	ldr	r1, [pc, #124]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d7d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d7dc:	d106      	bne.n	800d7ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d7de:	4b1b      	ldr	r3, [pc, #108]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d7e0:	68db      	ldr	r3, [r3, #12]
 800d7e2:	4a1a      	ldr	r2, [pc, #104]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d7e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d7e8:	60d3      	str	r3, [r2, #12]
 800d7ea:	e011      	b.n	800d810 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d7f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d7f4:	d10c      	bne.n	800d810 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	3304      	adds	r3, #4
 800d7fa:	2101      	movs	r1, #1
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f000 f899 	bl	800d934 <RCCEx_PLLSAI1_Config>
 800d802:	4603      	mov	r3, r0
 800d804:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d806:	7cfb      	ldrb	r3, [r7, #19]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d001      	beq.n	800d810 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800d80c:	7cfb      	ldrb	r3, [r7, #19]
 800d80e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d02b      	beq.n	800d874 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d81c:	4b0b      	ldr	r3, [pc, #44]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d81e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d822:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d82a:	4908      	ldr	r1, [pc, #32]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d82c:	4313      	orrs	r3, r2
 800d82e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d836:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d83a:	d109      	bne.n	800d850 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d83c:	4b03      	ldr	r3, [pc, #12]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d83e:	68db      	ldr	r3, [r3, #12]
 800d840:	4a02      	ldr	r2, [pc, #8]	@ (800d84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d842:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d846:	60d3      	str	r3, [r2, #12]
 800d848:	e014      	b.n	800d874 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800d84a:	bf00      	nop
 800d84c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d854:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d858:	d10c      	bne.n	800d874 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	3304      	adds	r3, #4
 800d85e:	2101      	movs	r1, #1
 800d860:	4618      	mov	r0, r3
 800d862:	f000 f867 	bl	800d934 <RCCEx_PLLSAI1_Config>
 800d866:	4603      	mov	r3, r0
 800d868:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d86a:	7cfb      	ldrb	r3, [r7, #19]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d001      	beq.n	800d874 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800d870:	7cfb      	ldrb	r3, [r7, #19]
 800d872:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d02f      	beq.n	800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d880:	4b2b      	ldr	r3, [pc, #172]	@ (800d930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800d882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d886:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d88e:	4928      	ldr	r1, [pc, #160]	@ (800d930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800d890:	4313      	orrs	r3, r2
 800d892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d89a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d89e:	d10d      	bne.n	800d8bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	3304      	adds	r3, #4
 800d8a4:	2102      	movs	r1, #2
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f000 f844 	bl	800d934 <RCCEx_PLLSAI1_Config>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d8b0:	7cfb      	ldrb	r3, [r7, #19]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d014      	beq.n	800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800d8b6:	7cfb      	ldrb	r3, [r7, #19]
 800d8b8:	74bb      	strb	r3, [r7, #18]
 800d8ba:	e011      	b.n	800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d8c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d8c4:	d10c      	bne.n	800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	3320      	adds	r3, #32
 800d8ca:	2102      	movs	r1, #2
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f000 f925 	bl	800db1c <RCCEx_PLLSAI2_Config>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d8d6:	7cfb      	ldrb	r3, [r7, #19]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d001      	beq.n	800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800d8dc:	7cfb      	ldrb	r3, [r7, #19]
 800d8de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d00a      	beq.n	800d902 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d8ec:	4b10      	ldr	r3, [pc, #64]	@ (800d930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800d8ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d8f2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d8fa:	490d      	ldr	r1, [pc, #52]	@ (800d930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800d8fc:	4313      	orrs	r3, r2
 800d8fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d00b      	beq.n	800d926 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d90e:	4b08      	ldr	r3, [pc, #32]	@ (800d930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800d910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d914:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d91e:	4904      	ldr	r1, [pc, #16]	@ (800d930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800d920:	4313      	orrs	r3, r2
 800d922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800d926:	7cbb      	ldrb	r3, [r7, #18]
}
 800d928:	4618      	mov	r0, r3
 800d92a:	3718      	adds	r7, #24
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}
 800d930:	40021000 	.word	0x40021000

0800d934 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b084      	sub	sp, #16
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d93e:	2300      	movs	r3, #0
 800d940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d942:	4b75      	ldr	r3, [pc, #468]	@ (800db18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800d944:	68db      	ldr	r3, [r3, #12]
 800d946:	f003 0303 	and.w	r3, r3, #3
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d018      	beq.n	800d980 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800d94e:	4b72      	ldr	r3, [pc, #456]	@ (800db18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800d950:	68db      	ldr	r3, [r3, #12]
 800d952:	f003 0203 	and.w	r2, r3, #3
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d10d      	bne.n	800d97a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
       ||
 800d962:	2b00      	cmp	r3, #0
 800d964:	d009      	beq.n	800d97a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800d966:	4b6c      	ldr	r3, [pc, #432]	@ (800db18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800d968:	68db      	ldr	r3, [r3, #12]
 800d96a:	091b      	lsrs	r3, r3, #4
 800d96c:	f003 0307 	and.w	r3, r3, #7
 800d970:	1c5a      	adds	r2, r3, #1
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	685b      	ldr	r3, [r3, #4]
       ||
 800d976:	429a      	cmp	r2, r3
 800d978:	d047      	beq.n	800da0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800d97a:	2301      	movs	r3, #1
 800d97c:	73fb      	strb	r3, [r7, #15]
 800d97e:	e044      	b.n	800da0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	2b03      	cmp	r3, #3
 800d986:	d018      	beq.n	800d9ba <RCCEx_PLLSAI1_Config+0x86>
 800d988:	2b03      	cmp	r3, #3
 800d98a:	d825      	bhi.n	800d9d8 <RCCEx_PLLSAI1_Config+0xa4>
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	d002      	beq.n	800d996 <RCCEx_PLLSAI1_Config+0x62>
 800d990:	2b02      	cmp	r3, #2
 800d992:	d009      	beq.n	800d9a8 <RCCEx_PLLSAI1_Config+0x74>
 800d994:	e020      	b.n	800d9d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d996:	4b60      	ldr	r3, [pc, #384]	@ (800db18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f003 0302 	and.w	r3, r3, #2
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d11d      	bne.n	800d9de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d9a6:	e01a      	b.n	800d9de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d9a8:	4b5b      	ldr	r3, [pc, #364]	@ (800db18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d116      	bne.n	800d9e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d9b8:	e013      	b.n	800d9e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d9ba:	4b57      	ldr	r3, [pc, #348]	@ (800db18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d10f      	bne.n	800d9e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d9c6:	4b54      	ldr	r3, [pc, #336]	@ (800db18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d109      	bne.n	800d9e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d9d6:	e006      	b.n	800d9e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800d9d8:	2301      	movs	r3, #1
 800d9da:	73fb      	strb	r3, [r7, #15]
      break;
 800d9dc:	e004      	b.n	800d9e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d9de:	bf00      	nop
 800d9e0:	e002      	b.n	800d9e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d9e2:	bf00      	nop
 800d9e4:	e000      	b.n	800d9e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d9e6:	bf00      	nop
    }

    if(status == HAL_OK)
 800d9e8:	7bfb      	ldrb	r3, [r7, #15]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d10d      	bne.n	800da0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d9ee:	4b4a      	ldr	r3, [pc, #296]	@ (800db18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800d9f0:	68db      	ldr	r3, [r3, #12]
 800d9f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6819      	ldr	r1, [r3, #0]
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	685b      	ldr	r3, [r3, #4]
 800d9fe:	3b01      	subs	r3, #1
 800da00:	011b      	lsls	r3, r3, #4
 800da02:	430b      	orrs	r3, r1
 800da04:	4944      	ldr	r1, [pc, #272]	@ (800db18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800da06:	4313      	orrs	r3, r2
 800da08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800da0a:	7bfb      	ldrb	r3, [r7, #15]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d17d      	bne.n	800db0c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800da10:	4b41      	ldr	r3, [pc, #260]	@ (800db18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a40      	ldr	r2, [pc, #256]	@ (800db18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800da16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800da1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da1c:	f7fb fa12 	bl	8008e44 <HAL_GetTick>
 800da20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800da22:	e009      	b.n	800da38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800da24:	f7fb fa0e 	bl	8008e44 <HAL_GetTick>
 800da28:	4602      	mov	r2, r0
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	1ad3      	subs	r3, r2, r3
 800da2e:	2b02      	cmp	r3, #2
 800da30:	d902      	bls.n	800da38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800da32:	2303      	movs	r3, #3
 800da34:	73fb      	strb	r3, [r7, #15]
        break;
 800da36:	e005      	b.n	800da44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800da38:	4b37      	ldr	r3, [pc, #220]	@ (800db18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800da40:	2b00      	cmp	r3, #0
 800da42:	d1ef      	bne.n	800da24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800da44:	7bfb      	ldrb	r3, [r7, #15]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d160      	bne.n	800db0c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d111      	bne.n	800da74 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800da50:	4b31      	ldr	r3, [pc, #196]	@ (800db18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800da52:	691b      	ldr	r3, [r3, #16]
 800da54:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800da58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800da5c:	687a      	ldr	r2, [r7, #4]
 800da5e:	6892      	ldr	r2, [r2, #8]
 800da60:	0211      	lsls	r1, r2, #8
 800da62:	687a      	ldr	r2, [r7, #4]
 800da64:	68d2      	ldr	r2, [r2, #12]
 800da66:	0912      	lsrs	r2, r2, #4
 800da68:	0452      	lsls	r2, r2, #17
 800da6a:	430a      	orrs	r2, r1
 800da6c:	492a      	ldr	r1, [pc, #168]	@ (800db18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800da6e:	4313      	orrs	r3, r2
 800da70:	610b      	str	r3, [r1, #16]
 800da72:	e027      	b.n	800dac4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	2b01      	cmp	r3, #1
 800da78:	d112      	bne.n	800daa0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800da7a:	4b27      	ldr	r3, [pc, #156]	@ (800db18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800da7c:	691b      	ldr	r3, [r3, #16]
 800da7e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800da82:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800da86:	687a      	ldr	r2, [r7, #4]
 800da88:	6892      	ldr	r2, [r2, #8]
 800da8a:	0211      	lsls	r1, r2, #8
 800da8c:	687a      	ldr	r2, [r7, #4]
 800da8e:	6912      	ldr	r2, [r2, #16]
 800da90:	0852      	lsrs	r2, r2, #1
 800da92:	3a01      	subs	r2, #1
 800da94:	0552      	lsls	r2, r2, #21
 800da96:	430a      	orrs	r2, r1
 800da98:	491f      	ldr	r1, [pc, #124]	@ (800db18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800da9a:	4313      	orrs	r3, r2
 800da9c:	610b      	str	r3, [r1, #16]
 800da9e:	e011      	b.n	800dac4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800daa0:	4b1d      	ldr	r3, [pc, #116]	@ (800db18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800daa2:	691b      	ldr	r3, [r3, #16]
 800daa4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800daa8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800daac:	687a      	ldr	r2, [r7, #4]
 800daae:	6892      	ldr	r2, [r2, #8]
 800dab0:	0211      	lsls	r1, r2, #8
 800dab2:	687a      	ldr	r2, [r7, #4]
 800dab4:	6952      	ldr	r2, [r2, #20]
 800dab6:	0852      	lsrs	r2, r2, #1
 800dab8:	3a01      	subs	r2, #1
 800daba:	0652      	lsls	r2, r2, #25
 800dabc:	430a      	orrs	r2, r1
 800dabe:	4916      	ldr	r1, [pc, #88]	@ (800db18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800dac0:	4313      	orrs	r3, r2
 800dac2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800dac4:	4b14      	ldr	r3, [pc, #80]	@ (800db18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	4a13      	ldr	r2, [pc, #76]	@ (800db18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800daca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dace:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dad0:	f7fb f9b8 	bl	8008e44 <HAL_GetTick>
 800dad4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800dad6:	e009      	b.n	800daec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800dad8:	f7fb f9b4 	bl	8008e44 <HAL_GetTick>
 800dadc:	4602      	mov	r2, r0
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	1ad3      	subs	r3, r2, r3
 800dae2:	2b02      	cmp	r3, #2
 800dae4:	d902      	bls.n	800daec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800dae6:	2303      	movs	r3, #3
 800dae8:	73fb      	strb	r3, [r7, #15]
          break;
 800daea:	e005      	b.n	800daf8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800daec:	4b0a      	ldr	r3, [pc, #40]	@ (800db18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d0ef      	beq.n	800dad8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800daf8:	7bfb      	ldrb	r3, [r7, #15]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d106      	bne.n	800db0c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800dafe:	4b06      	ldr	r3, [pc, #24]	@ (800db18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800db00:	691a      	ldr	r2, [r3, #16]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	699b      	ldr	r3, [r3, #24]
 800db06:	4904      	ldr	r1, [pc, #16]	@ (800db18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800db08:	4313      	orrs	r3, r2
 800db0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800db0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3710      	adds	r7, #16
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop
 800db18:	40021000 	.word	0x40021000

0800db1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b084      	sub	sp, #16
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800db26:	2300      	movs	r3, #0
 800db28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800db2a:	4b6a      	ldr	r3, [pc, #424]	@ (800dcd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800db2c:	68db      	ldr	r3, [r3, #12]
 800db2e:	f003 0303 	and.w	r3, r3, #3
 800db32:	2b00      	cmp	r3, #0
 800db34:	d018      	beq.n	800db68 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800db36:	4b67      	ldr	r3, [pc, #412]	@ (800dcd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800db38:	68db      	ldr	r3, [r3, #12]
 800db3a:	f003 0203 	and.w	r2, r3, #3
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	429a      	cmp	r2, r3
 800db44:	d10d      	bne.n	800db62 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
       ||
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d009      	beq.n	800db62 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800db4e:	4b61      	ldr	r3, [pc, #388]	@ (800dcd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800db50:	68db      	ldr	r3, [r3, #12]
 800db52:	091b      	lsrs	r3, r3, #4
 800db54:	f003 0307 	and.w	r3, r3, #7
 800db58:	1c5a      	adds	r2, r3, #1
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	685b      	ldr	r3, [r3, #4]
       ||
 800db5e:	429a      	cmp	r2, r3
 800db60:	d047      	beq.n	800dbf2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800db62:	2301      	movs	r3, #1
 800db64:	73fb      	strb	r3, [r7, #15]
 800db66:	e044      	b.n	800dbf2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	2b03      	cmp	r3, #3
 800db6e:	d018      	beq.n	800dba2 <RCCEx_PLLSAI2_Config+0x86>
 800db70:	2b03      	cmp	r3, #3
 800db72:	d825      	bhi.n	800dbc0 <RCCEx_PLLSAI2_Config+0xa4>
 800db74:	2b01      	cmp	r3, #1
 800db76:	d002      	beq.n	800db7e <RCCEx_PLLSAI2_Config+0x62>
 800db78:	2b02      	cmp	r3, #2
 800db7a:	d009      	beq.n	800db90 <RCCEx_PLLSAI2_Config+0x74>
 800db7c:	e020      	b.n	800dbc0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800db7e:	4b55      	ldr	r3, [pc, #340]	@ (800dcd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f003 0302 	and.w	r3, r3, #2
 800db86:	2b00      	cmp	r3, #0
 800db88:	d11d      	bne.n	800dbc6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800db8a:	2301      	movs	r3, #1
 800db8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800db8e:	e01a      	b.n	800dbc6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800db90:	4b50      	ldr	r3, [pc, #320]	@ (800dcd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d116      	bne.n	800dbca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800db9c:	2301      	movs	r3, #1
 800db9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800dba0:	e013      	b.n	800dbca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800dba2:	4b4c      	ldr	r3, [pc, #304]	@ (800dcd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d10f      	bne.n	800dbce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800dbae:	4b49      	ldr	r3, [pc, #292]	@ (800dcd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d109      	bne.n	800dbce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800dbba:	2301      	movs	r3, #1
 800dbbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800dbbe:	e006      	b.n	800dbce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	73fb      	strb	r3, [r7, #15]
      break;
 800dbc4:	e004      	b.n	800dbd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800dbc6:	bf00      	nop
 800dbc8:	e002      	b.n	800dbd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800dbca:	bf00      	nop
 800dbcc:	e000      	b.n	800dbd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800dbce:	bf00      	nop
    }

    if(status == HAL_OK)
 800dbd0:	7bfb      	ldrb	r3, [r7, #15]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d10d      	bne.n	800dbf2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800dbd6:	4b3f      	ldr	r3, [pc, #252]	@ (800dcd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800dbd8:	68db      	ldr	r3, [r3, #12]
 800dbda:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6819      	ldr	r1, [r3, #0]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	3b01      	subs	r3, #1
 800dbe8:	011b      	lsls	r3, r3, #4
 800dbea:	430b      	orrs	r3, r1
 800dbec:	4939      	ldr	r1, [pc, #228]	@ (800dcd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800dbf2:	7bfb      	ldrb	r3, [r7, #15]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d167      	bne.n	800dcc8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800dbf8:	4b36      	ldr	r3, [pc, #216]	@ (800dcd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	4a35      	ldr	r2, [pc, #212]	@ (800dcd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800dbfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dc02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc04:	f7fb f91e 	bl	8008e44 <HAL_GetTick>
 800dc08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800dc0a:	e009      	b.n	800dc20 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800dc0c:	f7fb f91a 	bl	8008e44 <HAL_GetTick>
 800dc10:	4602      	mov	r2, r0
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	1ad3      	subs	r3, r2, r3
 800dc16:	2b02      	cmp	r3, #2
 800dc18:	d902      	bls.n	800dc20 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800dc1a:	2303      	movs	r3, #3
 800dc1c:	73fb      	strb	r3, [r7, #15]
        break;
 800dc1e:	e005      	b.n	800dc2c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800dc20:	4b2c      	ldr	r3, [pc, #176]	@ (800dcd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d1ef      	bne.n	800dc0c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800dc2c:	7bfb      	ldrb	r3, [r7, #15]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d14a      	bne.n	800dcc8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d111      	bne.n	800dc5c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800dc38:	4b26      	ldr	r3, [pc, #152]	@ (800dcd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800dc3a:	695b      	ldr	r3, [r3, #20]
 800dc3c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800dc40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dc44:	687a      	ldr	r2, [r7, #4]
 800dc46:	6892      	ldr	r2, [r2, #8]
 800dc48:	0211      	lsls	r1, r2, #8
 800dc4a:	687a      	ldr	r2, [r7, #4]
 800dc4c:	68d2      	ldr	r2, [r2, #12]
 800dc4e:	0912      	lsrs	r2, r2, #4
 800dc50:	0452      	lsls	r2, r2, #17
 800dc52:	430a      	orrs	r2, r1
 800dc54:	491f      	ldr	r1, [pc, #124]	@ (800dcd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800dc56:	4313      	orrs	r3, r2
 800dc58:	614b      	str	r3, [r1, #20]
 800dc5a:	e011      	b.n	800dc80 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800dc5c:	4b1d      	ldr	r3, [pc, #116]	@ (800dcd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800dc5e:	695b      	ldr	r3, [r3, #20]
 800dc60:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800dc64:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800dc68:	687a      	ldr	r2, [r7, #4]
 800dc6a:	6892      	ldr	r2, [r2, #8]
 800dc6c:	0211      	lsls	r1, r2, #8
 800dc6e:	687a      	ldr	r2, [r7, #4]
 800dc70:	6912      	ldr	r2, [r2, #16]
 800dc72:	0852      	lsrs	r2, r2, #1
 800dc74:	3a01      	subs	r2, #1
 800dc76:	0652      	lsls	r2, r2, #25
 800dc78:	430a      	orrs	r2, r1
 800dc7a:	4916      	ldr	r1, [pc, #88]	@ (800dcd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800dc7c:	4313      	orrs	r3, r2
 800dc7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800dc80:	4b14      	ldr	r3, [pc, #80]	@ (800dcd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4a13      	ldr	r2, [pc, #76]	@ (800dcd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800dc86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dc8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc8c:	f7fb f8da 	bl	8008e44 <HAL_GetTick>
 800dc90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800dc92:	e009      	b.n	800dca8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800dc94:	f7fb f8d6 	bl	8008e44 <HAL_GetTick>
 800dc98:	4602      	mov	r2, r0
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	1ad3      	subs	r3, r2, r3
 800dc9e:	2b02      	cmp	r3, #2
 800dca0:	d902      	bls.n	800dca8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800dca2:	2303      	movs	r3, #3
 800dca4:	73fb      	strb	r3, [r7, #15]
          break;
 800dca6:	e005      	b.n	800dcb4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800dca8:	4b0a      	ldr	r3, [pc, #40]	@ (800dcd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d0ef      	beq.n	800dc94 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800dcb4:	7bfb      	ldrb	r3, [r7, #15]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d106      	bne.n	800dcc8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800dcba:	4b06      	ldr	r3, [pc, #24]	@ (800dcd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800dcbc:	695a      	ldr	r2, [r3, #20]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	695b      	ldr	r3, [r3, #20]
 800dcc2:	4904      	ldr	r1, [pc, #16]	@ (800dcd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800dcc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3710      	adds	r7, #16
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop
 800dcd4:	40021000 	.word	0x40021000

0800dcd8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800dce0:	2301      	movs	r3, #1
 800dce2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d079      	beq.n	800ddde <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800dcf0:	b2db      	uxtb	r3, r3
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d106      	bne.n	800dd04 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f7f7 fc3c 	bl	800557c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2202      	movs	r2, #2
 800dd08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	68db      	ldr	r3, [r3, #12]
 800dd12:	f003 0310 	and.w	r3, r3, #16
 800dd16:	2b10      	cmp	r3, #16
 800dd18:	d058      	beq.n	800ddcc <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	22ca      	movs	r2, #202	@ 0xca
 800dd20:	625a      	str	r2, [r3, #36]	@ 0x24
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	2253      	movs	r2, #83	@ 0x53
 800dd28:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f000 fb82 	bl	800e434 <RTC_EnterInitMode>
 800dd30:	4603      	mov	r3, r0
 800dd32:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800dd34:	7bfb      	ldrb	r3, [r7, #15]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d127      	bne.n	800dd8a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	689b      	ldr	r3, [r3, #8]
 800dd40:	687a      	ldr	r2, [r7, #4]
 800dd42:	6812      	ldr	r2, [r2, #0]
 800dd44:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800dd48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd4c:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	6899      	ldr	r1, [r3, #8]
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	685a      	ldr	r2, [r3, #4]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	691b      	ldr	r3, [r3, #16]
 800dd5c:	431a      	orrs	r2, r3
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	699b      	ldr	r3, [r3, #24]
 800dd62:	431a      	orrs	r2, r3
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	430a      	orrs	r2, r1
 800dd6a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	687a      	ldr	r2, [r7, #4]
 800dd72:	68d2      	ldr	r2, [r2, #12]
 800dd74:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	6919      	ldr	r1, [r3, #16]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	689b      	ldr	r3, [r3, #8]
 800dd80:	041a      	lsls	r2, r3, #16
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	430a      	orrs	r2, r1
 800dd88:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f000 fb86 	bl	800e49c <RTC_ExitInitMode>
 800dd90:	4603      	mov	r3, r0
 800dd92:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800dd94:	7bfb      	ldrb	r3, [r7, #15]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d113      	bne.n	800ddc2 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	f022 0203 	bic.w	r2, r2, #3
 800dda8:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	69da      	ldr	r2, [r3, #28]
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	695b      	ldr	r3, [r3, #20]
 800ddb8:	431a      	orrs	r2, r3
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	430a      	orrs	r2, r1
 800ddc0:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	22ff      	movs	r2, #255	@ 0xff
 800ddc8:	625a      	str	r2, [r3, #36]	@ 0x24
 800ddca:	e001      	b.n	800ddd0 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800ddd0:	7bfb      	ldrb	r3, [r7, #15]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d103      	bne.n	800ddde <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2201      	movs	r2, #1
 800ddda:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 800ddde:	7bfb      	ldrb	r3, [r7, #15]
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3710      	adds	r7, #16
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}

0800dde8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dde8:	b590      	push	{r4, r7, lr}
 800ddea:	b087      	sub	sp, #28
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	60f8      	str	r0, [r7, #12]
 800ddf0:	60b9      	str	r1, [r7, #8]
 800ddf2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ddfa:	2b01      	cmp	r3, #1
 800ddfc:	d101      	bne.n	800de02 <HAL_RTC_SetTime+0x1a>
 800ddfe:	2302      	movs	r3, #2
 800de00:	e08b      	b.n	800df1a <HAL_RTC_SetTime+0x132>
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	2201      	movs	r2, #1
 800de06:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	2202      	movs	r2, #2
 800de0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	22ca      	movs	r2, #202	@ 0xca
 800de18:	625a      	str	r2, [r3, #36]	@ 0x24
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	2253      	movs	r2, #83	@ 0x53
 800de20:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800de22:	68f8      	ldr	r0, [r7, #12]
 800de24:	f000 fb06 	bl	800e434 <RTC_EnterInitMode>
 800de28:	4603      	mov	r3, r0
 800de2a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800de2c:	7cfb      	ldrb	r3, [r7, #19]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d163      	bne.n	800defa <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d126      	bne.n	800de86 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	689b      	ldr	r3, [r3, #8]
 800de3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de42:	2b00      	cmp	r3, #0
 800de44:	d102      	bne.n	800de4c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	2200      	movs	r2, #0
 800de4a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	4618      	mov	r0, r3
 800de52:	f000 fb61 	bl	800e518 <RTC_ByteToBcd2>
 800de56:	4603      	mov	r3, r0
 800de58:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	785b      	ldrb	r3, [r3, #1]
 800de5e:	4618      	mov	r0, r3
 800de60:	f000 fb5a 	bl	800e518 <RTC_ByteToBcd2>
 800de64:	4603      	mov	r3, r0
 800de66:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800de68:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	789b      	ldrb	r3, [r3, #2]
 800de6e:	4618      	mov	r0, r3
 800de70:	f000 fb52 	bl	800e518 <RTC_ByteToBcd2>
 800de74:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800de76:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	78db      	ldrb	r3, [r3, #3]
 800de7e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800de80:	4313      	orrs	r3, r2
 800de82:	617b      	str	r3, [r7, #20]
 800de84:	e018      	b.n	800deb8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	689b      	ldr	r3, [r3, #8]
 800de8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de90:	2b00      	cmp	r3, #0
 800de92:	d102      	bne.n	800de9a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	2200      	movs	r2, #0
 800de98:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	785b      	ldrb	r3, [r3, #1]
 800dea4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800dea6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800dea8:	68ba      	ldr	r2, [r7, #8]
 800deaa:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800deac:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	78db      	ldrb	r3, [r3, #3]
 800deb2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800deb4:	4313      	orrs	r3, r2
 800deb6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800dec2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800dec6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	689a      	ldr	r2, [r3, #8]
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800ded6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	6899      	ldr	r1, [r3, #8]
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	68da      	ldr	r2, [r3, #12]
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	691b      	ldr	r3, [r3, #16]
 800dee6:	431a      	orrs	r2, r3
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	430a      	orrs	r2, r1
 800deee:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800def0:	68f8      	ldr	r0, [r7, #12]
 800def2:	f000 fad3 	bl	800e49c <RTC_ExitInitMode>
 800def6:	4603      	mov	r3, r0
 800def8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	22ff      	movs	r2, #255	@ 0xff
 800df00:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800df02:	7cfb      	ldrb	r3, [r7, #19]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d103      	bne.n	800df10 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	2201      	movs	r2, #1
 800df0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	2200      	movs	r2, #0
 800df14:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800df18:	7cfb      	ldrb	r3, [r7, #19]
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	371c      	adds	r7, #28
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd90      	pop	{r4, r7, pc}

0800df22 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800df22:	b580      	push	{r7, lr}
 800df24:	b086      	sub	sp, #24
 800df26:	af00      	add	r7, sp, #0
 800df28:	60f8      	str	r0, [r7, #12]
 800df2a:	60b9      	str	r1, [r7, #8]
 800df2c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	691b      	ldr	r3, [r3, #16]
 800df3e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800df50:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800df54:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	0c1b      	lsrs	r3, r3, #16
 800df5a:	b2db      	uxtb	r3, r3
 800df5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800df60:	b2da      	uxtb	r2, r3
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	0a1b      	lsrs	r3, r3, #8
 800df6a:	b2db      	uxtb	r3, r3
 800df6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df70:	b2da      	uxtb	r2, r3
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	b2db      	uxtb	r3, r3
 800df7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df7e:	b2da      	uxtb	r2, r3
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	0d9b      	lsrs	r3, r3, #22
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	f003 0301 	and.w	r3, r3, #1
 800df8e:	b2da      	uxtb	r2, r3
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d11a      	bne.n	800dfd0 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	781b      	ldrb	r3, [r3, #0]
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f000 fada 	bl	800e558 <RTC_Bcd2ToByte>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	785b      	ldrb	r3, [r3, #1]
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f000 fad1 	bl	800e558 <RTC_Bcd2ToByte>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	461a      	mov	r2, r3
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	789b      	ldrb	r3, [r3, #2]
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f000 fac8 	bl	800e558 <RTC_Bcd2ToByte>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	461a      	mov	r2, r3
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800dfd0:	2300      	movs	r3, #0
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3718      	adds	r7, #24
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}

0800dfda <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dfda:	b590      	push	{r4, r7, lr}
 800dfdc:	b087      	sub	sp, #28
 800dfde:	af00      	add	r7, sp, #0
 800dfe0:	60f8      	str	r0, [r7, #12]
 800dfe2:	60b9      	str	r1, [r7, #8]
 800dfe4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dfec:	2b01      	cmp	r3, #1
 800dfee:	d101      	bne.n	800dff4 <HAL_RTC_SetDate+0x1a>
 800dff0:	2302      	movs	r3, #2
 800dff2:	e075      	b.n	800e0e0 <HAL_RTC_SetDate+0x106>
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	2201      	movs	r2, #1
 800dff8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	2202      	movs	r2, #2
 800e000:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d10e      	bne.n	800e028 <HAL_RTC_SetDate+0x4e>
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	785b      	ldrb	r3, [r3, #1]
 800e00e:	f003 0310 	and.w	r3, r3, #16
 800e012:	2b00      	cmp	r3, #0
 800e014:	d008      	beq.n	800e028 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	785b      	ldrb	r3, [r3, #1]
 800e01a:	f023 0310 	bic.w	r3, r3, #16
 800e01e:	b2db      	uxtb	r3, r3
 800e020:	330a      	adds	r3, #10
 800e022:	b2da      	uxtb	r2, r3
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d11c      	bne.n	800e068 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	78db      	ldrb	r3, [r3, #3]
 800e032:	4618      	mov	r0, r3
 800e034:	f000 fa70 	bl	800e518 <RTC_ByteToBcd2>
 800e038:	4603      	mov	r3, r0
 800e03a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	785b      	ldrb	r3, [r3, #1]
 800e040:	4618      	mov	r0, r3
 800e042:	f000 fa69 	bl	800e518 <RTC_ByteToBcd2>
 800e046:	4603      	mov	r3, r0
 800e048:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800e04a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	789b      	ldrb	r3, [r3, #2]
 800e050:	4618      	mov	r0, r3
 800e052:	f000 fa61 	bl	800e518 <RTC_ByteToBcd2>
 800e056:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800e058:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	781b      	ldrb	r3, [r3, #0]
 800e060:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800e062:	4313      	orrs	r3, r2
 800e064:	617b      	str	r3, [r7, #20]
 800e066:	e00e      	b.n	800e086 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	78db      	ldrb	r3, [r3, #3]
 800e06c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	785b      	ldrb	r3, [r3, #1]
 800e072:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800e074:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800e076:	68ba      	ldr	r2, [r7, #8]
 800e078:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800e07a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	781b      	ldrb	r3, [r3, #0]
 800e080:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800e082:	4313      	orrs	r3, r2
 800e084:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	22ca      	movs	r2, #202	@ 0xca
 800e08c:	625a      	str	r2, [r3, #36]	@ 0x24
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	2253      	movs	r2, #83	@ 0x53
 800e094:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800e096:	68f8      	ldr	r0, [r7, #12]
 800e098:	f000 f9cc 	bl	800e434 <RTC_EnterInitMode>
 800e09c:	4603      	mov	r3, r0
 800e09e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800e0a0:	7cfb      	ldrb	r3, [r7, #19]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d10c      	bne.n	800e0c0 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	681a      	ldr	r2, [r3, #0]
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e0b0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e0b4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800e0b6:	68f8      	ldr	r0, [r7, #12]
 800e0b8:	f000 f9f0 	bl	800e49c <RTC_ExitInitMode>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	22ff      	movs	r2, #255	@ 0xff
 800e0c6:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800e0c8:	7cfb      	ldrb	r3, [r7, #19]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d103      	bne.n	800e0d6 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2201      	movs	r2, #1
 800e0d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	2200      	movs	r2, #0
 800e0da:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800e0de:	7cfb      	ldrb	r3, [r7, #19]
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	371c      	adds	r7, #28
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd90      	pop	{r4, r7, pc}

0800e0e8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800e0e8:	b590      	push	{r4, r7, lr}
 800e0ea:	b089      	sub	sp, #36	@ 0x24
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	60b9      	str	r1, [r7, #8]
 800e0f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e0fa:	2b01      	cmp	r3, #1
 800e0fc:	d101      	bne.n	800e102 <HAL_RTC_SetAlarm_IT+0x1a>
 800e0fe:	2302      	movs	r3, #2
 800e100:	e127      	b.n	800e352 <HAL_RTC_SetAlarm_IT+0x26a>
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2201      	movs	r2, #1
 800e106:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2202      	movs	r2, #2
 800e10e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d137      	bne.n	800e188 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	689b      	ldr	r3, [r3, #8]
 800e11e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e122:	2b00      	cmp	r3, #0
 800e124:	d102      	bne.n	800e12c <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	2200      	movs	r2, #0
 800e12a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	4618      	mov	r0, r3
 800e132:	f000 f9f1 	bl	800e518 <RTC_ByteToBcd2>
 800e136:	4603      	mov	r3, r0
 800e138:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	785b      	ldrb	r3, [r3, #1]
 800e13e:	4618      	mov	r0, r3
 800e140:	f000 f9ea 	bl	800e518 <RTC_ByteToBcd2>
 800e144:	4603      	mov	r3, r0
 800e146:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e148:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	789b      	ldrb	r3, [r3, #2]
 800e14e:	4618      	mov	r0, r3
 800e150:	f000 f9e2 	bl	800e518 <RTC_ByteToBcd2>
 800e154:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800e156:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	78db      	ldrb	r3, [r3, #3]
 800e15e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800e160:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e16a:	4618      	mov	r0, r3
 800e16c:	f000 f9d4 	bl	800e518 <RTC_ByteToBcd2>
 800e170:	4603      	mov	r3, r0
 800e172:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800e174:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800e17c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e182:	4313      	orrs	r3, r2
 800e184:	61fb      	str	r3, [r7, #28]
 800e186:	e023      	b.n	800e1d0 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	689b      	ldr	r3, [r3, #8]
 800e18e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e192:	2b00      	cmp	r3, #0
 800e194:	d102      	bne.n	800e19c <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	2200      	movs	r2, #0
 800e19a:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	785b      	ldrb	r3, [r3, #1]
 800e1a6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e1a8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800e1aa:	68ba      	ldr	r2, [r7, #8]
 800e1ac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800e1ae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	78db      	ldrb	r3, [r3, #3]
 800e1b4:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800e1b6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e1be:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800e1c0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800e1c6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e1cc:	4313      	orrs	r3, r2
 800e1ce:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	685a      	ldr	r2, [r3, #4]
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	69db      	ldr	r3, [r3, #28]
 800e1d8:	4313      	orrs	r3, r2
 800e1da:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	22ca      	movs	r2, #202	@ 0xca
 800e1e2:	625a      	str	r2, [r3, #36]	@ 0x24
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	2253      	movs	r2, #83	@ 0x53
 800e1ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e1f4:	d14a      	bne.n	800e28c <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	689a      	ldr	r2, [r3, #8]
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e204:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	68db      	ldr	r3, [r3, #12]
 800e20c:	b2da      	uxtb	r2, r3
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800e216:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 800e218:	f7fa fe14 	bl	8008e44 <HAL_GetTick>
 800e21c:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800e21e:	e015      	b.n	800e24c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e220:	f7fa fe10 	bl	8008e44 <HAL_GetTick>
 800e224:	4602      	mov	r2, r0
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	1ad3      	subs	r3, r2, r3
 800e22a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e22e:	d90d      	bls.n	800e24c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	22ff      	movs	r2, #255	@ 0xff
 800e236:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2203      	movs	r2, #3
 800e23c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2200      	movs	r2, #0
 800e244:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800e248:	2303      	movs	r3, #3
 800e24a:	e082      	b.n	800e352 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	68db      	ldr	r3, [r3, #12]
 800e252:	f003 0301 	and.w	r3, r3, #1
 800e256:	2b00      	cmp	r3, #0
 800e258:	d0e2      	beq.n	800e220 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	69fa      	ldr	r2, [r7, #28]
 800e260:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	69ba      	ldr	r2, [r7, #24]
 800e268:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	689a      	ldr	r2, [r3, #8]
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e278:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	689a      	ldr	r2, [r3, #8]
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e288:	609a      	str	r2, [r3, #8]
 800e28a:	e049      	b.n	800e320 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	689a      	ldr	r2, [r3, #8]
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800e29a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	68db      	ldr	r3, [r3, #12]
 800e2a2:	b2da      	uxtb	r2, r3
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800e2ac:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 800e2ae:	f7fa fdc9 	bl	8008e44 <HAL_GetTick>
 800e2b2:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800e2b4:	e015      	b.n	800e2e2 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e2b6:	f7fa fdc5 	bl	8008e44 <HAL_GetTick>
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	1ad3      	subs	r3, r2, r3
 800e2c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e2c4:	d90d      	bls.n	800e2e2 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	22ff      	movs	r2, #255	@ 0xff
 800e2cc:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	2203      	movs	r2, #3
 800e2d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800e2de:	2303      	movs	r3, #3
 800e2e0:	e037      	b.n	800e352 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	68db      	ldr	r3, [r3, #12]
 800e2e8:	f003 0302 	and.w	r3, r3, #2
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d0e2      	beq.n	800e2b6 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	69fa      	ldr	r2, [r7, #28]
 800e2f6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	69ba      	ldr	r2, [r7, #24]
 800e2fe:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	689a      	ldr	r2, [r3, #8]
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e30e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	689a      	ldr	r2, [r3, #8]
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e31e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800e320:	4b0e      	ldr	r3, [pc, #56]	@ (800e35c <HAL_RTC_SetAlarm_IT+0x274>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	4a0d      	ldr	r2, [pc, #52]	@ (800e35c <HAL_RTC_SetAlarm_IT+0x274>)
 800e326:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e32a:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800e32c:	4b0b      	ldr	r3, [pc, #44]	@ (800e35c <HAL_RTC_SetAlarm_IT+0x274>)
 800e32e:	689b      	ldr	r3, [r3, #8]
 800e330:	4a0a      	ldr	r2, [pc, #40]	@ (800e35c <HAL_RTC_SetAlarm_IT+0x274>)
 800e332:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e336:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	22ff      	movs	r2, #255	@ 0xff
 800e33e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	2201      	movs	r2, #1
 800e344:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2200      	movs	r2, #0
 800e34c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800e350:	2300      	movs	r3, #0
}
 800e352:	4618      	mov	r0, r3
 800e354:	3724      	adds	r7, #36	@ 0x24
 800e356:	46bd      	mov	sp, r7
 800e358:	bd90      	pop	{r4, r7, pc}
 800e35a:	bf00      	nop
 800e35c:	40010400 	.word	0x40010400

0800e360 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b082      	sub	sp, #8
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800e368:	4b1f      	ldr	r3, [pc, #124]	@ (800e3e8 <HAL_RTC_AlarmIRQHandler+0x88>)
 800e36a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e36e:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	689b      	ldr	r3, [r3, #8]
 800e376:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d012      	beq.n	800e3a4 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	68db      	ldr	r3, [r3, #12]
 800e384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d00b      	beq.n	800e3a4 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	68db      	ldr	r3, [r3, #12]
 800e392:	b2da      	uxtb	r2, r3
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800e39c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f7f3 fb1e 	bl	80019e0 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	689b      	ldr	r3, [r3, #8]
 800e3aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d012      	beq.n	800e3d8 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	68db      	ldr	r3, [r3, #12]
 800e3b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d00b      	beq.n	800e3d8 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	68db      	ldr	r3, [r3, #12]
 800e3c6:	b2da      	uxtb	r2, r3
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800e3d0:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f000 f8da 	bl	800e58c <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2201      	movs	r2, #1
 800e3dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 800e3e0:	bf00      	nop
 800e3e2:	3708      	adds	r7, #8
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}
 800e3e8:	40010400 	.word	0x40010400

0800e3ec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b084      	sub	sp, #16
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	4a0d      	ldr	r2, [pc, #52]	@ (800e430 <HAL_RTC_WaitForSynchro+0x44>)
 800e3fa:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800e3fc:	f7fa fd22 	bl	8008e44 <HAL_GetTick>
 800e400:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e402:	e009      	b.n	800e418 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e404:	f7fa fd1e 	bl	8008e44 <HAL_GetTick>
 800e408:	4602      	mov	r2, r0
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	1ad3      	subs	r3, r2, r3
 800e40e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e412:	d901      	bls.n	800e418 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800e414:	2303      	movs	r3, #3
 800e416:	e007      	b.n	800e428 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	68db      	ldr	r3, [r3, #12]
 800e41e:	f003 0320 	and.w	r3, r3, #32
 800e422:	2b00      	cmp	r3, #0
 800e424:	d0ee      	beq.n	800e404 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800e426:	2300      	movs	r3, #0
}
 800e428:	4618      	mov	r0, r3
 800e42a:	3710      	adds	r7, #16
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}
 800e430:	0003ff5f 	.word	0x0003ff5f

0800e434 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b084      	sub	sp, #16
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e43c:	2300      	movs	r3, #0
 800e43e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	68db      	ldr	r3, [r3, #12]
 800e446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d120      	bne.n	800e490 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f04f 32ff 	mov.w	r2, #4294967295
 800e456:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800e458:	f7fa fcf4 	bl	8008e44 <HAL_GetTick>
 800e45c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e45e:	e00d      	b.n	800e47c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e460:	f7fa fcf0 	bl	8008e44 <HAL_GetTick>
 800e464:	4602      	mov	r2, r0
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	1ad3      	subs	r3, r2, r3
 800e46a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e46e:	d905      	bls.n	800e47c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800e470:	2303      	movs	r3, #3
 800e472:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2203      	movs	r2, #3
 800e478:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	68db      	ldr	r3, [r3, #12]
 800e482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e486:	2b00      	cmp	r3, #0
 800e488:	d102      	bne.n	800e490 <RTC_EnterInitMode+0x5c>
 800e48a:	7bfb      	ldrb	r3, [r7, #15]
 800e48c:	2b03      	cmp	r3, #3
 800e48e:	d1e7      	bne.n	800e460 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800e490:	7bfb      	ldrb	r3, [r7, #15]
}
 800e492:	4618      	mov	r0, r3
 800e494:	3710      	adds	r7, #16
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
	...

0800e49c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b084      	sub	sp, #16
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800e4a8:	4b1a      	ldr	r3, [pc, #104]	@ (800e514 <RTC_ExitInitMode+0x78>)
 800e4aa:	68db      	ldr	r3, [r3, #12]
 800e4ac:	4a19      	ldr	r2, [pc, #100]	@ (800e514 <RTC_ExitInitMode+0x78>)
 800e4ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e4b2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e4b4:	4b17      	ldr	r3, [pc, #92]	@ (800e514 <RTC_ExitInitMode+0x78>)
 800e4b6:	689b      	ldr	r3, [r3, #8]
 800e4b8:	f003 0320 	and.w	r3, r3, #32
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d10c      	bne.n	800e4da <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f7ff ff93 	bl	800e3ec <HAL_RTC_WaitForSynchro>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d01e      	beq.n	800e50a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2203      	movs	r2, #3
 800e4d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800e4d4:	2303      	movs	r3, #3
 800e4d6:	73fb      	strb	r3, [r7, #15]
 800e4d8:	e017      	b.n	800e50a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e4da:	4b0e      	ldr	r3, [pc, #56]	@ (800e514 <RTC_ExitInitMode+0x78>)
 800e4dc:	689b      	ldr	r3, [r3, #8]
 800e4de:	4a0d      	ldr	r2, [pc, #52]	@ (800e514 <RTC_ExitInitMode+0x78>)
 800e4e0:	f023 0320 	bic.w	r3, r3, #32
 800e4e4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f7ff ff80 	bl	800e3ec <HAL_RTC_WaitForSynchro>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d005      	beq.n	800e4fe <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2203      	movs	r2, #3
 800e4f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800e4fa:	2303      	movs	r3, #3
 800e4fc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e4fe:	4b05      	ldr	r3, [pc, #20]	@ (800e514 <RTC_ExitInitMode+0x78>)
 800e500:	689b      	ldr	r3, [r3, #8]
 800e502:	4a04      	ldr	r2, [pc, #16]	@ (800e514 <RTC_ExitInitMode+0x78>)
 800e504:	f043 0320 	orr.w	r3, r3, #32
 800e508:	6093      	str	r3, [r2, #8]
  }

  return status;
 800e50a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3710      	adds	r7, #16
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	40002800 	.word	0x40002800

0800e518 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800e518:	b480      	push	{r7}
 800e51a:	b085      	sub	sp, #20
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	4603      	mov	r3, r0
 800e520:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800e522:	2300      	movs	r3, #0
 800e524:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800e526:	79fb      	ldrb	r3, [r7, #7]
 800e528:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800e52a:	e005      	b.n	800e538 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	3301      	adds	r3, #1
 800e530:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800e532:	7afb      	ldrb	r3, [r7, #11]
 800e534:	3b0a      	subs	r3, #10
 800e536:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800e538:	7afb      	ldrb	r3, [r7, #11]
 800e53a:	2b09      	cmp	r3, #9
 800e53c:	d8f6      	bhi.n	800e52c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	b2db      	uxtb	r3, r3
 800e542:	011b      	lsls	r3, r3, #4
 800e544:	b2da      	uxtb	r2, r3
 800e546:	7afb      	ldrb	r3, [r7, #11]
 800e548:	4313      	orrs	r3, r2
 800e54a:	b2db      	uxtb	r3, r3
}
 800e54c:	4618      	mov	r0, r3
 800e54e:	3714      	adds	r7, #20
 800e550:	46bd      	mov	sp, r7
 800e552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e556:	4770      	bx	lr

0800e558 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800e558:	b480      	push	{r7}
 800e55a:	b085      	sub	sp, #20
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	4603      	mov	r3, r0
 800e560:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800e562:	79fb      	ldrb	r3, [r7, #7]
 800e564:	091b      	lsrs	r3, r3, #4
 800e566:	b2db      	uxtb	r3, r3
 800e568:	461a      	mov	r2, r3
 800e56a:	0092      	lsls	r2, r2, #2
 800e56c:	4413      	add	r3, r2
 800e56e:	005b      	lsls	r3, r3, #1
 800e570:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800e572:	79fb      	ldrb	r3, [r7, #7]
 800e574:	f003 030f 	and.w	r3, r3, #15
 800e578:	b2da      	uxtb	r2, r3
 800e57a:	7bfb      	ldrb	r3, [r7, #15]
 800e57c:	4413      	add	r3, r2
 800e57e:	b2db      	uxtb	r3, r3
}
 800e580:	4618      	mov	r0, r3
 800e582:	3714      	adds	r7, #20
 800e584:	46bd      	mov	sp, r7
 800e586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58a:	4770      	bx	lr

0800e58c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800e58c:	b480      	push	{r7}
 800e58e:	b083      	sub	sp, #12
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800e594:	bf00      	nop
 800e596:	370c      	adds	r7, #12
 800e598:	46bd      	mov	sp, r7
 800e59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59e:	4770      	bx	lr

0800e5a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b084      	sub	sp, #16
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d101      	bne.n	800e5b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	e095      	b.n	800e6de <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d108      	bne.n	800e5cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	685b      	ldr	r3, [r3, #4]
 800e5be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e5c2:	d009      	beq.n	800e5d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	61da      	str	r2, [r3, #28]
 800e5ca:	e005      	b.n	800e5d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2200      	movs	r2, #0
 800e5dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e5e4:	b2db      	uxtb	r3, r3
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d106      	bne.n	800e5f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f7f6 fffc 	bl	80055f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2202      	movs	r2, #2
 800e5fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	681a      	ldr	r2, [r3, #0]
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e60e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	68db      	ldr	r3, [r3, #12]
 800e614:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e618:	d902      	bls.n	800e620 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e61a:	2300      	movs	r3, #0
 800e61c:	60fb      	str	r3, [r7, #12]
 800e61e:	e002      	b.n	800e626 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e620:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e624:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	68db      	ldr	r3, [r3, #12]
 800e62a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800e62e:	d007      	beq.n	800e640 <HAL_SPI_Init+0xa0>
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	68db      	ldr	r3, [r3, #12]
 800e634:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e638:	d002      	beq.n	800e640 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2200      	movs	r2, #0
 800e63e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	685b      	ldr	r3, [r3, #4]
 800e644:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	689b      	ldr	r3, [r3, #8]
 800e64c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800e650:	431a      	orrs	r2, r3
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	691b      	ldr	r3, [r3, #16]
 800e656:	f003 0302 	and.w	r3, r3, #2
 800e65a:	431a      	orrs	r2, r3
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	695b      	ldr	r3, [r3, #20]
 800e660:	f003 0301 	and.w	r3, r3, #1
 800e664:	431a      	orrs	r2, r3
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	699b      	ldr	r3, [r3, #24]
 800e66a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e66e:	431a      	orrs	r2, r3
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	69db      	ldr	r3, [r3, #28]
 800e674:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e678:	431a      	orrs	r2, r3
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6a1b      	ldr	r3, [r3, #32]
 800e67e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e682:	ea42 0103 	orr.w	r1, r2, r3
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e68a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	430a      	orrs	r2, r1
 800e694:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	699b      	ldr	r3, [r3, #24]
 800e69a:	0c1b      	lsrs	r3, r3, #16
 800e69c:	f003 0204 	and.w	r2, r3, #4
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6a4:	f003 0310 	and.w	r3, r3, #16
 800e6a8:	431a      	orrs	r2, r3
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e6ae:	f003 0308 	and.w	r3, r3, #8
 800e6b2:	431a      	orrs	r2, r3
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	68db      	ldr	r3, [r3, #12]
 800e6b8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800e6bc:	ea42 0103 	orr.w	r1, r2, r3
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	430a      	orrs	r2, r1
 800e6cc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2201      	movs	r2, #1
 800e6d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800e6dc:	2300      	movs	r3, #0
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3710      	adds	r7, #16
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}

0800e6e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e6e6:	b580      	push	{r7, lr}
 800e6e8:	b088      	sub	sp, #32
 800e6ea:	af00      	add	r7, sp, #0
 800e6ec:	60f8      	str	r0, [r7, #12]
 800e6ee:	60b9      	str	r1, [r7, #8]
 800e6f0:	603b      	str	r3, [r7, #0]
 800e6f2:	4613      	mov	r3, r2
 800e6f4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e6f6:	f7fa fba5 	bl	8008e44 <HAL_GetTick>
 800e6fa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800e6fc:	88fb      	ldrh	r3, [r7, #6]
 800e6fe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e706:	b2db      	uxtb	r3, r3
 800e708:	2b01      	cmp	r3, #1
 800e70a:	d001      	beq.n	800e710 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800e70c:	2302      	movs	r3, #2
 800e70e:	e15c      	b.n	800e9ca <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d002      	beq.n	800e71c <HAL_SPI_Transmit+0x36>
 800e716:	88fb      	ldrh	r3, [r7, #6]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d101      	bne.n	800e720 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800e71c:	2301      	movs	r3, #1
 800e71e:	e154      	b.n	800e9ca <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e726:	2b01      	cmp	r3, #1
 800e728:	d101      	bne.n	800e72e <HAL_SPI_Transmit+0x48>
 800e72a:	2302      	movs	r3, #2
 800e72c:	e14d      	b.n	800e9ca <HAL_SPI_Transmit+0x2e4>
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	2201      	movs	r2, #1
 800e732:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	2203      	movs	r2, #3
 800e73a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2200      	movs	r2, #0
 800e742:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	68ba      	ldr	r2, [r7, #8]
 800e748:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	88fa      	ldrh	r2, [r7, #6]
 800e74e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	88fa      	ldrh	r2, [r7, #6]
 800e754:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	2200      	movs	r2, #0
 800e75a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	2200      	movs	r2, #0
 800e760:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	2200      	movs	r2, #0
 800e768:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2200      	movs	r2, #0
 800e770:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	2200      	movs	r2, #0
 800e776:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	689b      	ldr	r3, [r3, #8]
 800e77c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e780:	d10f      	bne.n	800e7a2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	681a      	ldr	r2, [r3, #0]
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e790:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	681a      	ldr	r2, [r3, #0]
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e7a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7ac:	2b40      	cmp	r3, #64	@ 0x40
 800e7ae:	d007      	beq.n	800e7c0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	681a      	ldr	r2, [r3, #0]
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e7be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e7c8:	d952      	bls.n	800e870 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	685b      	ldr	r3, [r3, #4]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d002      	beq.n	800e7d8 <HAL_SPI_Transmit+0xf2>
 800e7d2:	8b7b      	ldrh	r3, [r7, #26]
 800e7d4:	2b01      	cmp	r3, #1
 800e7d6:	d145      	bne.n	800e864 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7dc:	881a      	ldrh	r2, [r3, #0]
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7e8:	1c9a      	adds	r2, r3, #2
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e7f2:	b29b      	uxth	r3, r3
 800e7f4:	3b01      	subs	r3, #1
 800e7f6:	b29a      	uxth	r2, r3
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e7fc:	e032      	b.n	800e864 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	689b      	ldr	r3, [r3, #8]
 800e804:	f003 0302 	and.w	r3, r3, #2
 800e808:	2b02      	cmp	r3, #2
 800e80a:	d112      	bne.n	800e832 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e810:	881a      	ldrh	r2, [r3, #0]
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e81c:	1c9a      	adds	r2, r3, #2
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e826:	b29b      	uxth	r3, r3
 800e828:	3b01      	subs	r3, #1
 800e82a:	b29a      	uxth	r2, r3
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e830:	e018      	b.n	800e864 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e832:	f7fa fb07 	bl	8008e44 <HAL_GetTick>
 800e836:	4602      	mov	r2, r0
 800e838:	69fb      	ldr	r3, [r7, #28]
 800e83a:	1ad3      	subs	r3, r2, r3
 800e83c:	683a      	ldr	r2, [r7, #0]
 800e83e:	429a      	cmp	r2, r3
 800e840:	d803      	bhi.n	800e84a <HAL_SPI_Transmit+0x164>
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e848:	d102      	bne.n	800e850 <HAL_SPI_Transmit+0x16a>
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d109      	bne.n	800e864 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	2201      	movs	r2, #1
 800e854:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	2200      	movs	r2, #0
 800e85c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800e860:	2303      	movs	r3, #3
 800e862:	e0b2      	b.n	800e9ca <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e868:	b29b      	uxth	r3, r3
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d1c7      	bne.n	800e7fe <HAL_SPI_Transmit+0x118>
 800e86e:	e083      	b.n	800e978 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	685b      	ldr	r3, [r3, #4]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d002      	beq.n	800e87e <HAL_SPI_Transmit+0x198>
 800e878:	8b7b      	ldrh	r3, [r7, #26]
 800e87a:	2b01      	cmp	r3, #1
 800e87c:	d177      	bne.n	800e96e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e882:	b29b      	uxth	r3, r3
 800e884:	2b01      	cmp	r3, #1
 800e886:	d912      	bls.n	800e8ae <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e88c:	881a      	ldrh	r2, [r3, #0]
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e898:	1c9a      	adds	r2, r3, #2
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	3b02      	subs	r3, #2
 800e8a6:	b29a      	uxth	r2, r3
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e8ac:	e05f      	b.n	800e96e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	330c      	adds	r3, #12
 800e8b8:	7812      	ldrb	r2, [r2, #0]
 800e8ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8c0:	1c5a      	adds	r2, r3, #1
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e8ca:	b29b      	uxth	r3, r3
 800e8cc:	3b01      	subs	r3, #1
 800e8ce:	b29a      	uxth	r2, r3
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800e8d4:	e04b      	b.n	800e96e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	689b      	ldr	r3, [r3, #8]
 800e8dc:	f003 0302 	and.w	r3, r3, #2
 800e8e0:	2b02      	cmp	r3, #2
 800e8e2:	d12b      	bne.n	800e93c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e8e8:	b29b      	uxth	r3, r3
 800e8ea:	2b01      	cmp	r3, #1
 800e8ec:	d912      	bls.n	800e914 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8f2:	881a      	ldrh	r2, [r3, #0]
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8fe:	1c9a      	adds	r2, r3, #2
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e908:	b29b      	uxth	r3, r3
 800e90a:	3b02      	subs	r3, #2
 800e90c:	b29a      	uxth	r2, r3
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e912:	e02c      	b.n	800e96e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	330c      	adds	r3, #12
 800e91e:	7812      	ldrb	r2, [r2, #0]
 800e920:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e926:	1c5a      	adds	r2, r3, #1
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e930:	b29b      	uxth	r3, r3
 800e932:	3b01      	subs	r3, #1
 800e934:	b29a      	uxth	r2, r3
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e93a:	e018      	b.n	800e96e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e93c:	f7fa fa82 	bl	8008e44 <HAL_GetTick>
 800e940:	4602      	mov	r2, r0
 800e942:	69fb      	ldr	r3, [r7, #28]
 800e944:	1ad3      	subs	r3, r2, r3
 800e946:	683a      	ldr	r2, [r7, #0]
 800e948:	429a      	cmp	r2, r3
 800e94a:	d803      	bhi.n	800e954 <HAL_SPI_Transmit+0x26e>
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e952:	d102      	bne.n	800e95a <HAL_SPI_Transmit+0x274>
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d109      	bne.n	800e96e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	2201      	movs	r2, #1
 800e95e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	2200      	movs	r2, #0
 800e966:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800e96a:	2303      	movs	r3, #3
 800e96c:	e02d      	b.n	800e9ca <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e972:	b29b      	uxth	r3, r3
 800e974:	2b00      	cmp	r3, #0
 800e976:	d1ae      	bne.n	800e8d6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e978:	69fa      	ldr	r2, [r7, #28]
 800e97a:	6839      	ldr	r1, [r7, #0]
 800e97c:	68f8      	ldr	r0, [r7, #12]
 800e97e:	f000 fcf5 	bl	800f36c <SPI_EndRxTxTransaction>
 800e982:	4603      	mov	r3, r0
 800e984:	2b00      	cmp	r3, #0
 800e986:	d002      	beq.n	800e98e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	2220      	movs	r2, #32
 800e98c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	689b      	ldr	r3, [r3, #8]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d10a      	bne.n	800e9ac <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e996:	2300      	movs	r3, #0
 800e998:	617b      	str	r3, [r7, #20]
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	68db      	ldr	r3, [r3, #12]
 800e9a0:	617b      	str	r3, [r7, #20]
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	689b      	ldr	r3, [r3, #8]
 800e9a8:	617b      	str	r3, [r7, #20]
 800e9aa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2201      	movs	r2, #1
 800e9b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d001      	beq.n	800e9c8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800e9c4:	2301      	movs	r3, #1
 800e9c6:	e000      	b.n	800e9ca <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800e9c8:	2300      	movs	r3, #0
  }
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3720      	adds	r7, #32
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}

0800e9d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e9d2:	b580      	push	{r7, lr}
 800e9d4:	b088      	sub	sp, #32
 800e9d6:	af02      	add	r7, sp, #8
 800e9d8:	60f8      	str	r0, [r7, #12]
 800e9da:	60b9      	str	r1, [r7, #8]
 800e9dc:	603b      	str	r3, [r7, #0]
 800e9de:	4613      	mov	r3, r2
 800e9e0:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e9e8:	b2db      	uxtb	r3, r3
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	d001      	beq.n	800e9f2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800e9ee:	2302      	movs	r3, #2
 800e9f0:	e123      	b.n	800ec3a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	685b      	ldr	r3, [r3, #4]
 800e9f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e9fa:	d112      	bne.n	800ea22 <HAL_SPI_Receive+0x50>
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	689b      	ldr	r3, [r3, #8]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d10e      	bne.n	800ea22 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	2204      	movs	r2, #4
 800ea08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ea0c:	88fa      	ldrh	r2, [r7, #6]
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	9300      	str	r3, [sp, #0]
 800ea12:	4613      	mov	r3, r2
 800ea14:	68ba      	ldr	r2, [r7, #8]
 800ea16:	68b9      	ldr	r1, [r7, #8]
 800ea18:	68f8      	ldr	r0, [r7, #12]
 800ea1a:	f000 f912 	bl	800ec42 <HAL_SPI_TransmitReceive>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	e10b      	b.n	800ec3a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ea22:	f7fa fa0f 	bl	8008e44 <HAL_GetTick>
 800ea26:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d002      	beq.n	800ea34 <HAL_SPI_Receive+0x62>
 800ea2e:	88fb      	ldrh	r3, [r7, #6]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d101      	bne.n	800ea38 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800ea34:	2301      	movs	r3, #1
 800ea36:	e100      	b.n	800ec3a <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800ea3e:	2b01      	cmp	r3, #1
 800ea40:	d101      	bne.n	800ea46 <HAL_SPI_Receive+0x74>
 800ea42:	2302      	movs	r3, #2
 800ea44:	e0f9      	b.n	800ec3a <HAL_SPI_Receive+0x268>
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	2201      	movs	r2, #1
 800ea4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2204      	movs	r2, #4
 800ea52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	68ba      	ldr	r2, [r7, #8]
 800ea60:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	88fa      	ldrh	r2, [r7, #6]
 800ea66:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	88fa      	ldrh	r2, [r7, #6]
 800ea6e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	2200      	movs	r2, #0
 800ea76:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	2200      	movs	r2, #0
 800ea82:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	2200      	movs	r2, #0
 800ea88:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	68db      	ldr	r3, [r3, #12]
 800ea94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ea98:	d908      	bls.n	800eaac <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	685a      	ldr	r2, [r3, #4]
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800eaa8:	605a      	str	r2, [r3, #4]
 800eaaa:	e007      	b.n	800eabc <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	685a      	ldr	r2, [r3, #4]
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800eaba:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	689b      	ldr	r3, [r3, #8]
 800eac0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eac4:	d10f      	bne.n	800eae6 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	681a      	ldr	r2, [r3, #0]
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ead4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	681a      	ldr	r2, [r3, #0]
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800eae4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eaf0:	2b40      	cmp	r3, #64	@ 0x40
 800eaf2:	d007      	beq.n	800eb04 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	681a      	ldr	r2, [r3, #0]
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800eb02:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	68db      	ldr	r3, [r3, #12]
 800eb08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800eb0c:	d875      	bhi.n	800ebfa <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800eb0e:	e037      	b.n	800eb80 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	689b      	ldr	r3, [r3, #8]
 800eb16:	f003 0301 	and.w	r3, r3, #1
 800eb1a:	2b01      	cmp	r3, #1
 800eb1c:	d117      	bne.n	800eb4e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	f103 020c 	add.w	r2, r3, #12
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb2a:	7812      	ldrb	r2, [r2, #0]
 800eb2c:	b2d2      	uxtb	r2, r2
 800eb2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb34:	1c5a      	adds	r2, r3, #1
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	3b01      	subs	r3, #1
 800eb44:	b29a      	uxth	r2, r3
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800eb4c:	e018      	b.n	800eb80 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb4e:	f7fa f979 	bl	8008e44 <HAL_GetTick>
 800eb52:	4602      	mov	r2, r0
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	1ad3      	subs	r3, r2, r3
 800eb58:	683a      	ldr	r2, [r7, #0]
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d803      	bhi.n	800eb66 <HAL_SPI_Receive+0x194>
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb64:	d102      	bne.n	800eb6c <HAL_SPI_Receive+0x19a>
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d109      	bne.n	800eb80 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	2201      	movs	r2, #1
 800eb70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	2200      	movs	r2, #0
 800eb78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800eb7c:	2303      	movs	r3, #3
 800eb7e:	e05c      	b.n	800ec3a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800eb86:	b29b      	uxth	r3, r3
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d1c1      	bne.n	800eb10 <HAL_SPI_Receive+0x13e>
 800eb8c:	e03b      	b.n	800ec06 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	689b      	ldr	r3, [r3, #8]
 800eb94:	f003 0301 	and.w	r3, r3, #1
 800eb98:	2b01      	cmp	r3, #1
 800eb9a:	d115      	bne.n	800ebc8 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	68da      	ldr	r2, [r3, #12]
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eba6:	b292      	uxth	r2, r2
 800eba8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebae:	1c9a      	adds	r2, r3, #2
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ebba:	b29b      	uxth	r3, r3
 800ebbc:	3b01      	subs	r3, #1
 800ebbe:	b29a      	uxth	r2, r3
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800ebc6:	e018      	b.n	800ebfa <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ebc8:	f7fa f93c 	bl	8008e44 <HAL_GetTick>
 800ebcc:	4602      	mov	r2, r0
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	1ad3      	subs	r3, r2, r3
 800ebd2:	683a      	ldr	r2, [r7, #0]
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d803      	bhi.n	800ebe0 <HAL_SPI_Receive+0x20e>
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebde:	d102      	bne.n	800ebe6 <HAL_SPI_Receive+0x214>
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d109      	bne.n	800ebfa <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	2201      	movs	r2, #1
 800ebea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800ebf6:	2303      	movs	r3, #3
 800ebf8:	e01f      	b.n	800ec3a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ec00:	b29b      	uxth	r3, r3
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d1c3      	bne.n	800eb8e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ec06:	697a      	ldr	r2, [r7, #20]
 800ec08:	6839      	ldr	r1, [r7, #0]
 800ec0a:	68f8      	ldr	r0, [r7, #12]
 800ec0c:	f000 fb56 	bl	800f2bc <SPI_EndRxTransaction>
 800ec10:	4603      	mov	r3, r0
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d002      	beq.n	800ec1c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	2220      	movs	r2, #32
 800ec1a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	2201      	movs	r2, #1
 800ec20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2200      	movs	r2, #0
 800ec28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d001      	beq.n	800ec38 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800ec34:	2301      	movs	r3, #1
 800ec36:	e000      	b.n	800ec3a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800ec38:	2300      	movs	r3, #0
  }
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3718      	adds	r7, #24
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}

0800ec42 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ec42:	b580      	push	{r7, lr}
 800ec44:	b08a      	sub	sp, #40	@ 0x28
 800ec46:	af00      	add	r7, sp, #0
 800ec48:	60f8      	str	r0, [r7, #12]
 800ec4a:	60b9      	str	r1, [r7, #8]
 800ec4c:	607a      	str	r2, [r7, #4]
 800ec4e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ec50:	2301      	movs	r3, #1
 800ec52:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ec54:	f7fa f8f6 	bl	8008e44 <HAL_GetTick>
 800ec58:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ec60:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	685b      	ldr	r3, [r3, #4]
 800ec66:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800ec68:	887b      	ldrh	r3, [r7, #2]
 800ec6a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800ec6c:	887b      	ldrh	r3, [r7, #2]
 800ec6e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ec70:	7ffb      	ldrb	r3, [r7, #31]
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d00c      	beq.n	800ec90 <HAL_SPI_TransmitReceive+0x4e>
 800ec76:	69bb      	ldr	r3, [r7, #24]
 800ec78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ec7c:	d106      	bne.n	800ec8c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	689b      	ldr	r3, [r3, #8]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d102      	bne.n	800ec8c <HAL_SPI_TransmitReceive+0x4a>
 800ec86:	7ffb      	ldrb	r3, [r7, #31]
 800ec88:	2b04      	cmp	r3, #4
 800ec8a:	d001      	beq.n	800ec90 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800ec8c:	2302      	movs	r3, #2
 800ec8e:	e1f3      	b.n	800f078 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d005      	beq.n	800eca2 <HAL_SPI_TransmitReceive+0x60>
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d002      	beq.n	800eca2 <HAL_SPI_TransmitReceive+0x60>
 800ec9c:	887b      	ldrh	r3, [r7, #2]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d101      	bne.n	800eca6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800eca2:	2301      	movs	r3, #1
 800eca4:	e1e8      	b.n	800f078 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	d101      	bne.n	800ecb4 <HAL_SPI_TransmitReceive+0x72>
 800ecb0:	2302      	movs	r3, #2
 800ecb2:	e1e1      	b.n	800f078 <HAL_SPI_TransmitReceive+0x436>
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ecc2:	b2db      	uxtb	r3, r3
 800ecc4:	2b04      	cmp	r3, #4
 800ecc6:	d003      	beq.n	800ecd0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	2205      	movs	r2, #5
 800eccc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	687a      	ldr	r2, [r7, #4]
 800ecda:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	887a      	ldrh	r2, [r7, #2]
 800ece0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	887a      	ldrh	r2, [r7, #2]
 800ece8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	68ba      	ldr	r2, [r7, #8]
 800ecf0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	887a      	ldrh	r2, [r7, #2]
 800ecf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	887a      	ldrh	r2, [r7, #2]
 800ecfc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	2200      	movs	r2, #0
 800ed02:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	2200      	movs	r2, #0
 800ed08:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	68db      	ldr	r3, [r3, #12]
 800ed0e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ed12:	d802      	bhi.n	800ed1a <HAL_SPI_TransmitReceive+0xd8>
 800ed14:	8abb      	ldrh	r3, [r7, #20]
 800ed16:	2b01      	cmp	r3, #1
 800ed18:	d908      	bls.n	800ed2c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	685a      	ldr	r2, [r3, #4]
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ed28:	605a      	str	r2, [r3, #4]
 800ed2a:	e007      	b.n	800ed3c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	685a      	ldr	r2, [r3, #4]
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ed3a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed46:	2b40      	cmp	r3, #64	@ 0x40
 800ed48:	d007      	beq.n	800ed5a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	681a      	ldr	r2, [r3, #0]
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ed58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	68db      	ldr	r3, [r3, #12]
 800ed5e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ed62:	f240 8083 	bls.w	800ee6c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	685b      	ldr	r3, [r3, #4]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d002      	beq.n	800ed74 <HAL_SPI_TransmitReceive+0x132>
 800ed6e:	8afb      	ldrh	r3, [r7, #22]
 800ed70:	2b01      	cmp	r3, #1
 800ed72:	d16f      	bne.n	800ee54 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed78:	881a      	ldrh	r2, [r3, #0]
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed84:	1c9a      	adds	r2, r3, #2
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ed8e:	b29b      	uxth	r3, r3
 800ed90:	3b01      	subs	r3, #1
 800ed92:	b29a      	uxth	r2, r3
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed98:	e05c      	b.n	800ee54 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	689b      	ldr	r3, [r3, #8]
 800eda0:	f003 0302 	and.w	r3, r3, #2
 800eda4:	2b02      	cmp	r3, #2
 800eda6:	d11b      	bne.n	800ede0 <HAL_SPI_TransmitReceive+0x19e>
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800edac:	b29b      	uxth	r3, r3
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d016      	beq.n	800ede0 <HAL_SPI_TransmitReceive+0x19e>
 800edb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edb4:	2b01      	cmp	r3, #1
 800edb6:	d113      	bne.n	800ede0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edbc:	881a      	ldrh	r2, [r3, #0]
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edc8:	1c9a      	adds	r2, r3, #2
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	3b01      	subs	r3, #1
 800edd6:	b29a      	uxth	r2, r3
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800eddc:	2300      	movs	r3, #0
 800edde:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	689b      	ldr	r3, [r3, #8]
 800ede6:	f003 0301 	and.w	r3, r3, #1
 800edea:	2b01      	cmp	r3, #1
 800edec:	d11c      	bne.n	800ee28 <HAL_SPI_TransmitReceive+0x1e6>
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800edf4:	b29b      	uxth	r3, r3
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d016      	beq.n	800ee28 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	68da      	ldr	r2, [r3, #12]
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee04:	b292      	uxth	r2, r2
 800ee06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee0c:	1c9a      	adds	r2, r3, #2
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	3b01      	subs	r3, #1
 800ee1c:	b29a      	uxth	r2, r3
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ee24:	2301      	movs	r3, #1
 800ee26:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ee28:	f7fa f80c 	bl	8008e44 <HAL_GetTick>
 800ee2c:	4602      	mov	r2, r0
 800ee2e:	6a3b      	ldr	r3, [r7, #32]
 800ee30:	1ad3      	subs	r3, r2, r3
 800ee32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee34:	429a      	cmp	r2, r3
 800ee36:	d80d      	bhi.n	800ee54 <HAL_SPI_TransmitReceive+0x212>
 800ee38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee3e:	d009      	beq.n	800ee54 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	2201      	movs	r2, #1
 800ee44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800ee50:	2303      	movs	r3, #3
 800ee52:	e111      	b.n	800f078 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ee58:	b29b      	uxth	r3, r3
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d19d      	bne.n	800ed9a <HAL_SPI_TransmitReceive+0x158>
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ee64:	b29b      	uxth	r3, r3
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d197      	bne.n	800ed9a <HAL_SPI_TransmitReceive+0x158>
 800ee6a:	e0e5      	b.n	800f038 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	685b      	ldr	r3, [r3, #4]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d003      	beq.n	800ee7c <HAL_SPI_TransmitReceive+0x23a>
 800ee74:	8afb      	ldrh	r3, [r7, #22]
 800ee76:	2b01      	cmp	r3, #1
 800ee78:	f040 80d1 	bne.w	800f01e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ee80:	b29b      	uxth	r3, r3
 800ee82:	2b01      	cmp	r3, #1
 800ee84:	d912      	bls.n	800eeac <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee8a:	881a      	ldrh	r2, [r3, #0]
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee96:	1c9a      	adds	r2, r3, #2
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	3b02      	subs	r3, #2
 800eea4:	b29a      	uxth	r2, r3
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800eeaa:	e0b8      	b.n	800f01e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	330c      	adds	r3, #12
 800eeb6:	7812      	ldrb	r2, [r2, #0]
 800eeb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eebe:	1c5a      	adds	r2, r3, #1
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eec8:	b29b      	uxth	r3, r3
 800eeca:	3b01      	subs	r3, #1
 800eecc:	b29a      	uxth	r2, r3
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eed2:	e0a4      	b.n	800f01e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	689b      	ldr	r3, [r3, #8]
 800eeda:	f003 0302 	and.w	r3, r3, #2
 800eede:	2b02      	cmp	r3, #2
 800eee0:	d134      	bne.n	800ef4c <HAL_SPI_TransmitReceive+0x30a>
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eee6:	b29b      	uxth	r3, r3
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d02f      	beq.n	800ef4c <HAL_SPI_TransmitReceive+0x30a>
 800eeec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeee:	2b01      	cmp	r3, #1
 800eef0:	d12c      	bne.n	800ef4c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eef6:	b29b      	uxth	r3, r3
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	d912      	bls.n	800ef22 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef00:	881a      	ldrh	r2, [r3, #0]
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef0c:	1c9a      	adds	r2, r3, #2
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ef16:	b29b      	uxth	r3, r3
 800ef18:	3b02      	subs	r3, #2
 800ef1a:	b29a      	uxth	r2, r3
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ef20:	e012      	b.n	800ef48 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	330c      	adds	r3, #12
 800ef2c:	7812      	ldrb	r2, [r2, #0]
 800ef2e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef34:	1c5a      	adds	r2, r3, #1
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	3b01      	subs	r3, #1
 800ef42:	b29a      	uxth	r2, r3
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	689b      	ldr	r3, [r3, #8]
 800ef52:	f003 0301 	and.w	r3, r3, #1
 800ef56:	2b01      	cmp	r3, #1
 800ef58:	d148      	bne.n	800efec <HAL_SPI_TransmitReceive+0x3aa>
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ef60:	b29b      	uxth	r3, r3
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d042      	beq.n	800efec <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ef6c:	b29b      	uxth	r3, r3
 800ef6e:	2b01      	cmp	r3, #1
 800ef70:	d923      	bls.n	800efba <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	68da      	ldr	r2, [r3, #12]
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef7c:	b292      	uxth	r2, r2
 800ef7e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef84:	1c9a      	adds	r2, r3, #2
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ef90:	b29b      	uxth	r3, r3
 800ef92:	3b02      	subs	r3, #2
 800ef94:	b29a      	uxth	r2, r3
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800efa2:	b29b      	uxth	r3, r3
 800efa4:	2b01      	cmp	r3, #1
 800efa6:	d81f      	bhi.n	800efe8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	685a      	ldr	r2, [r3, #4]
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800efb6:	605a      	str	r2, [r3, #4]
 800efb8:	e016      	b.n	800efe8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f103 020c 	add.w	r2, r3, #12
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efc6:	7812      	ldrb	r2, [r2, #0]
 800efc8:	b2d2      	uxtb	r2, r2
 800efca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efd0:	1c5a      	adds	r2, r3, #1
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800efdc:	b29b      	uxth	r3, r3
 800efde:	3b01      	subs	r3, #1
 800efe0:	b29a      	uxth	r2, r3
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800efe8:	2301      	movs	r3, #1
 800efea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800efec:	f7f9 ff2a 	bl	8008e44 <HAL_GetTick>
 800eff0:	4602      	mov	r2, r0
 800eff2:	6a3b      	ldr	r3, [r7, #32]
 800eff4:	1ad3      	subs	r3, r2, r3
 800eff6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eff8:	429a      	cmp	r2, r3
 800effa:	d803      	bhi.n	800f004 <HAL_SPI_TransmitReceive+0x3c2>
 800effc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800effe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f002:	d102      	bne.n	800f00a <HAL_SPI_TransmitReceive+0x3c8>
 800f004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f006:	2b00      	cmp	r3, #0
 800f008:	d109      	bne.n	800f01e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	2201      	movs	r2, #1
 800f00e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	2200      	movs	r2, #0
 800f016:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800f01a:	2303      	movs	r3, #3
 800f01c:	e02c      	b.n	800f078 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f022:	b29b      	uxth	r3, r3
 800f024:	2b00      	cmp	r3, #0
 800f026:	f47f af55 	bne.w	800eed4 <HAL_SPI_TransmitReceive+0x292>
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f030:	b29b      	uxth	r3, r3
 800f032:	2b00      	cmp	r3, #0
 800f034:	f47f af4e 	bne.w	800eed4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f038:	6a3a      	ldr	r2, [r7, #32]
 800f03a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f03c:	68f8      	ldr	r0, [r7, #12]
 800f03e:	f000 f995 	bl	800f36c <SPI_EndRxTxTransaction>
 800f042:	4603      	mov	r3, r0
 800f044:	2b00      	cmp	r3, #0
 800f046:	d008      	beq.n	800f05a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	2220      	movs	r2, #32
 800f04c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	2200      	movs	r2, #0
 800f052:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800f056:	2301      	movs	r3, #1
 800f058:	e00e      	b.n	800f078 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	2201      	movs	r2, #1
 800f05e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	2200      	movs	r2, #0
 800f066:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d001      	beq.n	800f076 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800f072:	2301      	movs	r3, #1
 800f074:	e000      	b.n	800f078 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800f076:	2300      	movs	r3, #0
  }
}
 800f078:	4618      	mov	r0, r3
 800f07a:	3728      	adds	r7, #40	@ 0x28
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}

0800f080 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b088      	sub	sp, #32
 800f084:	af00      	add	r7, sp, #0
 800f086:	60f8      	str	r0, [r7, #12]
 800f088:	60b9      	str	r1, [r7, #8]
 800f08a:	603b      	str	r3, [r7, #0]
 800f08c:	4613      	mov	r3, r2
 800f08e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f090:	f7f9 fed8 	bl	8008e44 <HAL_GetTick>
 800f094:	4602      	mov	r2, r0
 800f096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f098:	1a9b      	subs	r3, r3, r2
 800f09a:	683a      	ldr	r2, [r7, #0]
 800f09c:	4413      	add	r3, r2
 800f09e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f0a0:	f7f9 fed0 	bl	8008e44 <HAL_GetTick>
 800f0a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f0a6:	4b39      	ldr	r3, [pc, #228]	@ (800f18c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	015b      	lsls	r3, r3, #5
 800f0ac:	0d1b      	lsrs	r3, r3, #20
 800f0ae:	69fa      	ldr	r2, [r7, #28]
 800f0b0:	fb02 f303 	mul.w	r3, r2, r3
 800f0b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f0b6:	e054      	b.n	800f162 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0be:	d050      	beq.n	800f162 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f0c0:	f7f9 fec0 	bl	8008e44 <HAL_GetTick>
 800f0c4:	4602      	mov	r2, r0
 800f0c6:	69bb      	ldr	r3, [r7, #24]
 800f0c8:	1ad3      	subs	r3, r2, r3
 800f0ca:	69fa      	ldr	r2, [r7, #28]
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d902      	bls.n	800f0d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800f0d0:	69fb      	ldr	r3, [r7, #28]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d13d      	bne.n	800f152 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	685a      	ldr	r2, [r3, #4]
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f0e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f0ee:	d111      	bne.n	800f114 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	689b      	ldr	r3, [r3, #8]
 800f0f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f0f8:	d004      	beq.n	800f104 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	689b      	ldr	r3, [r3, #8]
 800f0fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f102:	d107      	bne.n	800f114 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	681a      	ldr	r2, [r3, #0]
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f112:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f118:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f11c:	d10f      	bne.n	800f13e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	681a      	ldr	r2, [r3, #0]
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f12c:	601a      	str	r2, [r3, #0]
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	681a      	ldr	r2, [r3, #0]
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f13c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	2201      	movs	r2, #1
 800f142:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	2200      	movs	r2, #0
 800f14a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800f14e:	2303      	movs	r3, #3
 800f150:	e017      	b.n	800f182 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d101      	bne.n	800f15c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f158:	2300      	movs	r3, #0
 800f15a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	3b01      	subs	r3, #1
 800f160:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	689a      	ldr	r2, [r3, #8]
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	4013      	ands	r3, r2
 800f16c:	68ba      	ldr	r2, [r7, #8]
 800f16e:	429a      	cmp	r2, r3
 800f170:	bf0c      	ite	eq
 800f172:	2301      	moveq	r3, #1
 800f174:	2300      	movne	r3, #0
 800f176:	b2db      	uxtb	r3, r3
 800f178:	461a      	mov	r2, r3
 800f17a:	79fb      	ldrb	r3, [r7, #7]
 800f17c:	429a      	cmp	r2, r3
 800f17e:	d19b      	bne.n	800f0b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f180:	2300      	movs	r3, #0
}
 800f182:	4618      	mov	r0, r3
 800f184:	3720      	adds	r7, #32
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}
 800f18a:	bf00      	nop
 800f18c:	20000000 	.word	0x20000000

0800f190 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b08a      	sub	sp, #40	@ 0x28
 800f194:	af00      	add	r7, sp, #0
 800f196:	60f8      	str	r0, [r7, #12]
 800f198:	60b9      	str	r1, [r7, #8]
 800f19a:	607a      	str	r2, [r7, #4]
 800f19c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800f1a2:	f7f9 fe4f 	bl	8008e44 <HAL_GetTick>
 800f1a6:	4602      	mov	r2, r0
 800f1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1aa:	1a9b      	subs	r3, r3, r2
 800f1ac:	683a      	ldr	r2, [r7, #0]
 800f1ae:	4413      	add	r3, r2
 800f1b0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800f1b2:	f7f9 fe47 	bl	8008e44 <HAL_GetTick>
 800f1b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	330c      	adds	r3, #12
 800f1be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800f1c0:	4b3d      	ldr	r3, [pc, #244]	@ (800f2b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800f1c2:	681a      	ldr	r2, [r3, #0]
 800f1c4:	4613      	mov	r3, r2
 800f1c6:	009b      	lsls	r3, r3, #2
 800f1c8:	4413      	add	r3, r2
 800f1ca:	00da      	lsls	r2, r3, #3
 800f1cc:	1ad3      	subs	r3, r2, r3
 800f1ce:	0d1b      	lsrs	r3, r3, #20
 800f1d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f1d2:	fb02 f303 	mul.w	r3, r2, r3
 800f1d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800f1d8:	e060      	b.n	800f29c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800f1e0:	d107      	bne.n	800f1f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d104      	bne.n	800f1f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800f1e8:	69fb      	ldr	r3, [r7, #28]
 800f1ea:	781b      	ldrb	r3, [r3, #0]
 800f1ec:	b2db      	uxtb	r3, r3
 800f1ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800f1f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1f8:	d050      	beq.n	800f29c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f1fa:	f7f9 fe23 	bl	8008e44 <HAL_GetTick>
 800f1fe:	4602      	mov	r2, r0
 800f200:	6a3b      	ldr	r3, [r7, #32]
 800f202:	1ad3      	subs	r3, r2, r3
 800f204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f206:	429a      	cmp	r2, r3
 800f208:	d902      	bls.n	800f210 <SPI_WaitFifoStateUntilTimeout+0x80>
 800f20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d13d      	bne.n	800f28c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	685a      	ldr	r2, [r3, #4]
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f21e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	685b      	ldr	r3, [r3, #4]
 800f224:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f228:	d111      	bne.n	800f24e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	689b      	ldr	r3, [r3, #8]
 800f22e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f232:	d004      	beq.n	800f23e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	689b      	ldr	r3, [r3, #8]
 800f238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f23c:	d107      	bne.n	800f24e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	681a      	ldr	r2, [r3, #0]
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f24c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f252:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f256:	d10f      	bne.n	800f278 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	681a      	ldr	r2, [r3, #0]
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f266:	601a      	str	r2, [r3, #0]
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	681a      	ldr	r2, [r3, #0]
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f276:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	2201      	movs	r2, #1
 800f27c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	2200      	movs	r2, #0
 800f284:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800f288:	2303      	movs	r3, #3
 800f28a:	e010      	b.n	800f2ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f28c:	69bb      	ldr	r3, [r7, #24]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d101      	bne.n	800f296 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800f292:	2300      	movs	r3, #0
 800f294:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800f296:	69bb      	ldr	r3, [r7, #24]
 800f298:	3b01      	subs	r3, #1
 800f29a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	689a      	ldr	r2, [r3, #8]
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	4013      	ands	r3, r2
 800f2a6:	687a      	ldr	r2, [r7, #4]
 800f2a8:	429a      	cmp	r2, r3
 800f2aa:	d196      	bne.n	800f1da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800f2ac:	2300      	movs	r3, #0
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3728      	adds	r7, #40	@ 0x28
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
 800f2b6:	bf00      	nop
 800f2b8:	20000000 	.word	0x20000000

0800f2bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b086      	sub	sp, #24
 800f2c0:	af02      	add	r7, sp, #8
 800f2c2:	60f8      	str	r0, [r7, #12]
 800f2c4:	60b9      	str	r1, [r7, #8]
 800f2c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f2d0:	d111      	bne.n	800f2f6 <SPI_EndRxTransaction+0x3a>
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	689b      	ldr	r3, [r3, #8]
 800f2d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f2da:	d004      	beq.n	800f2e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	689b      	ldr	r3, [r3, #8]
 800f2e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f2e4:	d107      	bne.n	800f2f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	681a      	ldr	r2, [r3, #0]
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f2f4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	9300      	str	r3, [sp, #0]
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	2180      	movs	r1, #128	@ 0x80
 800f300:	68f8      	ldr	r0, [r7, #12]
 800f302:	f7ff febd 	bl	800f080 <SPI_WaitFlagStateUntilTimeout>
 800f306:	4603      	mov	r3, r0
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d007      	beq.n	800f31c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f310:	f043 0220 	orr.w	r2, r3, #32
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f318:	2303      	movs	r3, #3
 800f31a:	e023      	b.n	800f364 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	685b      	ldr	r3, [r3, #4]
 800f320:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f324:	d11d      	bne.n	800f362 <SPI_EndRxTransaction+0xa6>
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	689b      	ldr	r3, [r3, #8]
 800f32a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f32e:	d004      	beq.n	800f33a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	689b      	ldr	r3, [r3, #8]
 800f334:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f338:	d113      	bne.n	800f362 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	9300      	str	r3, [sp, #0]
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	2200      	movs	r2, #0
 800f342:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800f346:	68f8      	ldr	r0, [r7, #12]
 800f348:	f7ff ff22 	bl	800f190 <SPI_WaitFifoStateUntilTimeout>
 800f34c:	4603      	mov	r3, r0
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d007      	beq.n	800f362 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f356:	f043 0220 	orr.w	r2, r3, #32
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800f35e:	2303      	movs	r3, #3
 800f360:	e000      	b.n	800f364 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800f362:	2300      	movs	r3, #0
}
 800f364:	4618      	mov	r0, r3
 800f366:	3710      	adds	r7, #16
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}

0800f36c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b086      	sub	sp, #24
 800f370:	af02      	add	r7, sp, #8
 800f372:	60f8      	str	r0, [r7, #12]
 800f374:	60b9      	str	r1, [r7, #8]
 800f376:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	9300      	str	r3, [sp, #0]
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	2200      	movs	r2, #0
 800f380:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800f384:	68f8      	ldr	r0, [r7, #12]
 800f386:	f7ff ff03 	bl	800f190 <SPI_WaitFifoStateUntilTimeout>
 800f38a:	4603      	mov	r3, r0
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d007      	beq.n	800f3a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f394:	f043 0220 	orr.w	r2, r3, #32
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f39c:	2303      	movs	r3, #3
 800f39e:	e027      	b.n	800f3f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	9300      	str	r3, [sp, #0]
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	2180      	movs	r1, #128	@ 0x80
 800f3aa:	68f8      	ldr	r0, [r7, #12]
 800f3ac:	f7ff fe68 	bl	800f080 <SPI_WaitFlagStateUntilTimeout>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d007      	beq.n	800f3c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f3ba:	f043 0220 	orr.w	r2, r3, #32
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f3c2:	2303      	movs	r3, #3
 800f3c4:	e014      	b.n	800f3f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	9300      	str	r3, [sp, #0]
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800f3d2:	68f8      	ldr	r0, [r7, #12]
 800f3d4:	f7ff fedc 	bl	800f190 <SPI_WaitFifoStateUntilTimeout>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d007      	beq.n	800f3ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f3e2:	f043 0220 	orr.w	r2, r3, #32
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f3ea:	2303      	movs	r3, #3
 800f3ec:	e000      	b.n	800f3f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800f3ee:	2300      	movs	r3, #0
}
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	3710      	adds	r7, #16
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}

0800f3f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b082      	sub	sp, #8
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d101      	bne.n	800f40a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f406:	2301      	movs	r3, #1
 800f408:	e049      	b.n	800f49e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f410:	b2db      	uxtb	r3, r3
 800f412:	2b00      	cmp	r3, #0
 800f414:	d106      	bne.n	800f424 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2200      	movs	r2, #0
 800f41a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f7f6 f9be 	bl	80057a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2202      	movs	r2, #2
 800f428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681a      	ldr	r2, [r3, #0]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	3304      	adds	r3, #4
 800f434:	4619      	mov	r1, r3
 800f436:	4610      	mov	r0, r2
 800f438:	f001 f850 	bl	80104dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2201      	movs	r2, #1
 800f440:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2201      	movs	r2, #1
 800f448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2201      	movs	r2, #1
 800f450:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2201      	movs	r2, #1
 800f458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2201      	movs	r2, #1
 800f460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2201      	movs	r2, #1
 800f468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2201      	movs	r2, #1
 800f470:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2201      	movs	r2, #1
 800f478:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2201      	movs	r2, #1
 800f480:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2201      	movs	r2, #1
 800f488:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2201      	movs	r2, #1
 800f490:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2201      	movs	r2, #1
 800f498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f49c:	2300      	movs	r3, #0
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3708      	adds	r7, #8
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}

0800f4a6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800f4a6:	b580      	push	{r7, lr}
 800f4a8:	b082      	sub	sp, #8
 800f4aa:	af00      	add	r7, sp, #0
 800f4ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d101      	bne.n	800f4b8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800f4b4:	2301      	movs	r3, #1
 800f4b6:	e049      	b.n	800f54c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f4be:	b2db      	uxtb	r3, r3
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d106      	bne.n	800f4d2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f7f6 f907 	bl	80056e0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	2202      	movs	r2, #2
 800f4d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681a      	ldr	r2, [r3, #0]
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	3304      	adds	r3, #4
 800f4e2:	4619      	mov	r1, r3
 800f4e4:	4610      	mov	r0, r2
 800f4e6:	f000 fff9 	bl	80104dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2201      	movs	r2, #1
 800f4ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2201      	movs	r2, #1
 800f4f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	2201      	movs	r2, #1
 800f506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2201      	movs	r2, #1
 800f50e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	2201      	movs	r2, #1
 800f516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2201      	movs	r2, #1
 800f51e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2201      	movs	r2, #1
 800f526:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2201      	movs	r2, #1
 800f52e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2201      	movs	r2, #1
 800f536:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2201      	movs	r2, #1
 800f53e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2201      	movs	r2, #1
 800f546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f54a:	2300      	movs	r3, #0
}
 800f54c:	4618      	mov	r0, r3
 800f54e:	3708      	adds	r7, #8
 800f550:	46bd      	mov	sp, r7
 800f552:	bd80      	pop	{r7, pc}

0800f554 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b084      	sub	sp, #16
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
 800f55c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f55e:	2300      	movs	r3, #0
 800f560:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d109      	bne.n	800f57c <HAL_TIM_OC_Start_IT+0x28>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f56e:	b2db      	uxtb	r3, r3
 800f570:	2b01      	cmp	r3, #1
 800f572:	bf14      	ite	ne
 800f574:	2301      	movne	r3, #1
 800f576:	2300      	moveq	r3, #0
 800f578:	b2db      	uxtb	r3, r3
 800f57a:	e03c      	b.n	800f5f6 <HAL_TIM_OC_Start_IT+0xa2>
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	2b04      	cmp	r3, #4
 800f580:	d109      	bne.n	800f596 <HAL_TIM_OC_Start_IT+0x42>
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f588:	b2db      	uxtb	r3, r3
 800f58a:	2b01      	cmp	r3, #1
 800f58c:	bf14      	ite	ne
 800f58e:	2301      	movne	r3, #1
 800f590:	2300      	moveq	r3, #0
 800f592:	b2db      	uxtb	r3, r3
 800f594:	e02f      	b.n	800f5f6 <HAL_TIM_OC_Start_IT+0xa2>
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	2b08      	cmp	r3, #8
 800f59a:	d109      	bne.n	800f5b0 <HAL_TIM_OC_Start_IT+0x5c>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f5a2:	b2db      	uxtb	r3, r3
 800f5a4:	2b01      	cmp	r3, #1
 800f5a6:	bf14      	ite	ne
 800f5a8:	2301      	movne	r3, #1
 800f5aa:	2300      	moveq	r3, #0
 800f5ac:	b2db      	uxtb	r3, r3
 800f5ae:	e022      	b.n	800f5f6 <HAL_TIM_OC_Start_IT+0xa2>
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	2b0c      	cmp	r3, #12
 800f5b4:	d109      	bne.n	800f5ca <HAL_TIM_OC_Start_IT+0x76>
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f5bc:	b2db      	uxtb	r3, r3
 800f5be:	2b01      	cmp	r3, #1
 800f5c0:	bf14      	ite	ne
 800f5c2:	2301      	movne	r3, #1
 800f5c4:	2300      	moveq	r3, #0
 800f5c6:	b2db      	uxtb	r3, r3
 800f5c8:	e015      	b.n	800f5f6 <HAL_TIM_OC_Start_IT+0xa2>
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	2b10      	cmp	r3, #16
 800f5ce:	d109      	bne.n	800f5e4 <HAL_TIM_OC_Start_IT+0x90>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f5d6:	b2db      	uxtb	r3, r3
 800f5d8:	2b01      	cmp	r3, #1
 800f5da:	bf14      	ite	ne
 800f5dc:	2301      	movne	r3, #1
 800f5de:	2300      	moveq	r3, #0
 800f5e0:	b2db      	uxtb	r3, r3
 800f5e2:	e008      	b.n	800f5f6 <HAL_TIM_OC_Start_IT+0xa2>
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	2b01      	cmp	r3, #1
 800f5ee:	bf14      	ite	ne
 800f5f0:	2301      	movne	r3, #1
 800f5f2:	2300      	moveq	r3, #0
 800f5f4:	b2db      	uxtb	r3, r3
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d001      	beq.n	800f5fe <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	e0e7      	b.n	800f7ce <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d104      	bne.n	800f60e <HAL_TIM_OC_Start_IT+0xba>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2202      	movs	r2, #2
 800f608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f60c:	e023      	b.n	800f656 <HAL_TIM_OC_Start_IT+0x102>
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	2b04      	cmp	r3, #4
 800f612:	d104      	bne.n	800f61e <HAL_TIM_OC_Start_IT+0xca>
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2202      	movs	r2, #2
 800f618:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f61c:	e01b      	b.n	800f656 <HAL_TIM_OC_Start_IT+0x102>
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	2b08      	cmp	r3, #8
 800f622:	d104      	bne.n	800f62e <HAL_TIM_OC_Start_IT+0xda>
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2202      	movs	r2, #2
 800f628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f62c:	e013      	b.n	800f656 <HAL_TIM_OC_Start_IT+0x102>
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	2b0c      	cmp	r3, #12
 800f632:	d104      	bne.n	800f63e <HAL_TIM_OC_Start_IT+0xea>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2202      	movs	r2, #2
 800f638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f63c:	e00b      	b.n	800f656 <HAL_TIM_OC_Start_IT+0x102>
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	2b10      	cmp	r3, #16
 800f642:	d104      	bne.n	800f64e <HAL_TIM_OC_Start_IT+0xfa>
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2202      	movs	r2, #2
 800f648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f64c:	e003      	b.n	800f656 <HAL_TIM_OC_Start_IT+0x102>
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2202      	movs	r2, #2
 800f652:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	2b0c      	cmp	r3, #12
 800f65a:	d841      	bhi.n	800f6e0 <HAL_TIM_OC_Start_IT+0x18c>
 800f65c:	a201      	add	r2, pc, #4	@ (adr r2, 800f664 <HAL_TIM_OC_Start_IT+0x110>)
 800f65e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f662:	bf00      	nop
 800f664:	0800f699 	.word	0x0800f699
 800f668:	0800f6e1 	.word	0x0800f6e1
 800f66c:	0800f6e1 	.word	0x0800f6e1
 800f670:	0800f6e1 	.word	0x0800f6e1
 800f674:	0800f6ab 	.word	0x0800f6ab
 800f678:	0800f6e1 	.word	0x0800f6e1
 800f67c:	0800f6e1 	.word	0x0800f6e1
 800f680:	0800f6e1 	.word	0x0800f6e1
 800f684:	0800f6bd 	.word	0x0800f6bd
 800f688:	0800f6e1 	.word	0x0800f6e1
 800f68c:	0800f6e1 	.word	0x0800f6e1
 800f690:	0800f6e1 	.word	0x0800f6e1
 800f694:	0800f6cf 	.word	0x0800f6cf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	68da      	ldr	r2, [r3, #12]
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	f042 0202 	orr.w	r2, r2, #2
 800f6a6:	60da      	str	r2, [r3, #12]
      break;
 800f6a8:	e01d      	b.n	800f6e6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	68da      	ldr	r2, [r3, #12]
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	f042 0204 	orr.w	r2, r2, #4
 800f6b8:	60da      	str	r2, [r3, #12]
      break;
 800f6ba:	e014      	b.n	800f6e6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	68da      	ldr	r2, [r3, #12]
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	f042 0208 	orr.w	r2, r2, #8
 800f6ca:	60da      	str	r2, [r3, #12]
      break;
 800f6cc:	e00b      	b.n	800f6e6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	68da      	ldr	r2, [r3, #12]
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	f042 0210 	orr.w	r2, r2, #16
 800f6dc:	60da      	str	r2, [r3, #12]
      break;
 800f6de:	e002      	b.n	800f6e6 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800f6e0:	2301      	movs	r3, #1
 800f6e2:	73fb      	strb	r3, [r7, #15]
      break;
 800f6e4:	bf00      	nop
  }

  if (status == HAL_OK)
 800f6e6:	7bfb      	ldrb	r3, [r7, #15]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d16f      	bne.n	800f7cc <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	2201      	movs	r2, #1
 800f6f2:	6839      	ldr	r1, [r7, #0]
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f001 fcbf 	bl	8011078 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	4a36      	ldr	r2, [pc, #216]	@ (800f7d8 <HAL_TIM_OC_Start_IT+0x284>)
 800f700:	4293      	cmp	r3, r2
 800f702:	d013      	beq.n	800f72c <HAL_TIM_OC_Start_IT+0x1d8>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	4a34      	ldr	r2, [pc, #208]	@ (800f7dc <HAL_TIM_OC_Start_IT+0x288>)
 800f70a:	4293      	cmp	r3, r2
 800f70c:	d00e      	beq.n	800f72c <HAL_TIM_OC_Start_IT+0x1d8>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	4a33      	ldr	r2, [pc, #204]	@ (800f7e0 <HAL_TIM_OC_Start_IT+0x28c>)
 800f714:	4293      	cmp	r3, r2
 800f716:	d009      	beq.n	800f72c <HAL_TIM_OC_Start_IT+0x1d8>
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	4a31      	ldr	r2, [pc, #196]	@ (800f7e4 <HAL_TIM_OC_Start_IT+0x290>)
 800f71e:	4293      	cmp	r3, r2
 800f720:	d004      	beq.n	800f72c <HAL_TIM_OC_Start_IT+0x1d8>
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	4a30      	ldr	r2, [pc, #192]	@ (800f7e8 <HAL_TIM_OC_Start_IT+0x294>)
 800f728:	4293      	cmp	r3, r2
 800f72a:	d101      	bne.n	800f730 <HAL_TIM_OC_Start_IT+0x1dc>
 800f72c:	2301      	movs	r3, #1
 800f72e:	e000      	b.n	800f732 <HAL_TIM_OC_Start_IT+0x1de>
 800f730:	2300      	movs	r3, #0
 800f732:	2b00      	cmp	r3, #0
 800f734:	d007      	beq.n	800f746 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f744:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	4a23      	ldr	r2, [pc, #140]	@ (800f7d8 <HAL_TIM_OC_Start_IT+0x284>)
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d01d      	beq.n	800f78c <HAL_TIM_OC_Start_IT+0x238>
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f758:	d018      	beq.n	800f78c <HAL_TIM_OC_Start_IT+0x238>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	4a23      	ldr	r2, [pc, #140]	@ (800f7ec <HAL_TIM_OC_Start_IT+0x298>)
 800f760:	4293      	cmp	r3, r2
 800f762:	d013      	beq.n	800f78c <HAL_TIM_OC_Start_IT+0x238>
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	4a21      	ldr	r2, [pc, #132]	@ (800f7f0 <HAL_TIM_OC_Start_IT+0x29c>)
 800f76a:	4293      	cmp	r3, r2
 800f76c:	d00e      	beq.n	800f78c <HAL_TIM_OC_Start_IT+0x238>
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	4a20      	ldr	r2, [pc, #128]	@ (800f7f4 <HAL_TIM_OC_Start_IT+0x2a0>)
 800f774:	4293      	cmp	r3, r2
 800f776:	d009      	beq.n	800f78c <HAL_TIM_OC_Start_IT+0x238>
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	4a17      	ldr	r2, [pc, #92]	@ (800f7dc <HAL_TIM_OC_Start_IT+0x288>)
 800f77e:	4293      	cmp	r3, r2
 800f780:	d004      	beq.n	800f78c <HAL_TIM_OC_Start_IT+0x238>
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	4a16      	ldr	r2, [pc, #88]	@ (800f7e0 <HAL_TIM_OC_Start_IT+0x28c>)
 800f788:	4293      	cmp	r3, r2
 800f78a:	d115      	bne.n	800f7b8 <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	689a      	ldr	r2, [r3, #8]
 800f792:	4b19      	ldr	r3, [pc, #100]	@ (800f7f8 <HAL_TIM_OC_Start_IT+0x2a4>)
 800f794:	4013      	ands	r3, r2
 800f796:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	2b06      	cmp	r3, #6
 800f79c:	d015      	beq.n	800f7ca <HAL_TIM_OC_Start_IT+0x276>
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f7a4:	d011      	beq.n	800f7ca <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	681a      	ldr	r2, [r3, #0]
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	f042 0201 	orr.w	r2, r2, #1
 800f7b4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7b6:	e008      	b.n	800f7ca <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	681a      	ldr	r2, [r3, #0]
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	f042 0201 	orr.w	r2, r2, #1
 800f7c6:	601a      	str	r2, [r3, #0]
 800f7c8:	e000      	b.n	800f7cc <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7ca:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800f7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3710      	adds	r7, #16
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}
 800f7d6:	bf00      	nop
 800f7d8:	40012c00 	.word	0x40012c00
 800f7dc:	40013400 	.word	0x40013400
 800f7e0:	40014000 	.word	0x40014000
 800f7e4:	40014400 	.word	0x40014400
 800f7e8:	40014800 	.word	0x40014800
 800f7ec:	40000400 	.word	0x40000400
 800f7f0:	40000800 	.word	0x40000800
 800f7f4:	40000c00 	.word	0x40000c00
 800f7f8:	00010007 	.word	0x00010007

0800f7fc <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b084      	sub	sp, #16
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
 800f804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f806:	2300      	movs	r3, #0
 800f808:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	2b0c      	cmp	r3, #12
 800f80e:	d841      	bhi.n	800f894 <HAL_TIM_OC_Stop_IT+0x98>
 800f810:	a201      	add	r2, pc, #4	@ (adr r2, 800f818 <HAL_TIM_OC_Stop_IT+0x1c>)
 800f812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f816:	bf00      	nop
 800f818:	0800f84d 	.word	0x0800f84d
 800f81c:	0800f895 	.word	0x0800f895
 800f820:	0800f895 	.word	0x0800f895
 800f824:	0800f895 	.word	0x0800f895
 800f828:	0800f85f 	.word	0x0800f85f
 800f82c:	0800f895 	.word	0x0800f895
 800f830:	0800f895 	.word	0x0800f895
 800f834:	0800f895 	.word	0x0800f895
 800f838:	0800f871 	.word	0x0800f871
 800f83c:	0800f895 	.word	0x0800f895
 800f840:	0800f895 	.word	0x0800f895
 800f844:	0800f895 	.word	0x0800f895
 800f848:	0800f883 	.word	0x0800f883
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	68da      	ldr	r2, [r3, #12]
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	f022 0202 	bic.w	r2, r2, #2
 800f85a:	60da      	str	r2, [r3, #12]
      break;
 800f85c:	e01d      	b.n	800f89a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	68da      	ldr	r2, [r3, #12]
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	f022 0204 	bic.w	r2, r2, #4
 800f86c:	60da      	str	r2, [r3, #12]
      break;
 800f86e:	e014      	b.n	800f89a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	68da      	ldr	r2, [r3, #12]
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	f022 0208 	bic.w	r2, r2, #8
 800f87e:	60da      	str	r2, [r3, #12]
      break;
 800f880:	e00b      	b.n	800f89a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	68da      	ldr	r2, [r3, #12]
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	f022 0210 	bic.w	r2, r2, #16
 800f890:	60da      	str	r2, [r3, #12]
      break;
 800f892:	e002      	b.n	800f89a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800f894:	2301      	movs	r3, #1
 800f896:	73fb      	strb	r3, [r7, #15]
      break;
 800f898:	bf00      	nop
  }

  if (status == HAL_OK)
 800f89a:	7bfb      	ldrb	r3, [r7, #15]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	f040 8081 	bne.w	800f9a4 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	6839      	ldr	r1, [r7, #0]
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f001 fbe4 	bl	8011078 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	4a3e      	ldr	r2, [pc, #248]	@ (800f9b0 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800f8b6:	4293      	cmp	r3, r2
 800f8b8:	d013      	beq.n	800f8e2 <HAL_TIM_OC_Stop_IT+0xe6>
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	4a3d      	ldr	r2, [pc, #244]	@ (800f9b4 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800f8c0:	4293      	cmp	r3, r2
 800f8c2:	d00e      	beq.n	800f8e2 <HAL_TIM_OC_Stop_IT+0xe6>
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	4a3b      	ldr	r2, [pc, #236]	@ (800f9b8 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800f8ca:	4293      	cmp	r3, r2
 800f8cc:	d009      	beq.n	800f8e2 <HAL_TIM_OC_Stop_IT+0xe6>
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	4a3a      	ldr	r2, [pc, #232]	@ (800f9bc <HAL_TIM_OC_Stop_IT+0x1c0>)
 800f8d4:	4293      	cmp	r3, r2
 800f8d6:	d004      	beq.n	800f8e2 <HAL_TIM_OC_Stop_IT+0xe6>
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	4a38      	ldr	r2, [pc, #224]	@ (800f9c0 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	d101      	bne.n	800f8e6 <HAL_TIM_OC_Stop_IT+0xea>
 800f8e2:	2301      	movs	r3, #1
 800f8e4:	e000      	b.n	800f8e8 <HAL_TIM_OC_Stop_IT+0xec>
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d017      	beq.n	800f91c <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	6a1a      	ldr	r2, [r3, #32]
 800f8f2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f8f6:	4013      	ands	r3, r2
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d10f      	bne.n	800f91c <HAL_TIM_OC_Stop_IT+0x120>
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	6a1a      	ldr	r2, [r3, #32]
 800f902:	f240 4344 	movw	r3, #1092	@ 0x444
 800f906:	4013      	ands	r3, r2
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d107      	bne.n	800f91c <HAL_TIM_OC_Stop_IT+0x120>
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f91a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	6a1a      	ldr	r2, [r3, #32]
 800f922:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f926:	4013      	ands	r3, r2
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d10f      	bne.n	800f94c <HAL_TIM_OC_Stop_IT+0x150>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	6a1a      	ldr	r2, [r3, #32]
 800f932:	f240 4344 	movw	r3, #1092	@ 0x444
 800f936:	4013      	ands	r3, r2
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d107      	bne.n	800f94c <HAL_TIM_OC_Stop_IT+0x150>
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	681a      	ldr	r2, [r3, #0]
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	f022 0201 	bic.w	r2, r2, #1
 800f94a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d104      	bne.n	800f95c <HAL_TIM_OC_Stop_IT+0x160>
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	2201      	movs	r2, #1
 800f956:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f95a:	e023      	b.n	800f9a4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	2b04      	cmp	r3, #4
 800f960:	d104      	bne.n	800f96c <HAL_TIM_OC_Stop_IT+0x170>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2201      	movs	r2, #1
 800f966:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f96a:	e01b      	b.n	800f9a4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	2b08      	cmp	r3, #8
 800f970:	d104      	bne.n	800f97c <HAL_TIM_OC_Stop_IT+0x180>
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	2201      	movs	r2, #1
 800f976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f97a:	e013      	b.n	800f9a4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	2b0c      	cmp	r3, #12
 800f980:	d104      	bne.n	800f98c <HAL_TIM_OC_Stop_IT+0x190>
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	2201      	movs	r2, #1
 800f986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f98a:	e00b      	b.n	800f9a4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	2b10      	cmp	r3, #16
 800f990:	d104      	bne.n	800f99c <HAL_TIM_OC_Stop_IT+0x1a0>
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2201      	movs	r2, #1
 800f996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f99a:	e003      	b.n	800f9a4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2201      	movs	r2, #1
 800f9a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800f9a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3710      	adds	r7, #16
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	40012c00 	.word	0x40012c00
 800f9b4:	40013400 	.word	0x40013400
 800f9b8:	40014000 	.word	0x40014000
 800f9bc:	40014400 	.word	0x40014400
 800f9c0:	40014800 	.word	0x40014800

0800f9c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b082      	sub	sp, #8
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d101      	bne.n	800f9d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	e049      	b.n	800fa6a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f9dc:	b2db      	uxtb	r3, r3
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d106      	bne.n	800f9f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	f000 f841 	bl	800fa72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2202      	movs	r2, #2
 800f9f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681a      	ldr	r2, [r3, #0]
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	3304      	adds	r3, #4
 800fa00:	4619      	mov	r1, r3
 800fa02:	4610      	mov	r0, r2
 800fa04:	f000 fd6a 	bl	80104dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2201      	movs	r2, #1
 800fa0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2201      	movs	r2, #1
 800fa14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2201      	movs	r2, #1
 800fa1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2201      	movs	r2, #1
 800fa24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2201      	movs	r2, #1
 800fa2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2201      	movs	r2, #1
 800fa34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2201      	movs	r2, #1
 800fa3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2201      	movs	r2, #1
 800fa44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	2201      	movs	r2, #1
 800fa4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2201      	movs	r2, #1
 800fa54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2201      	movs	r2, #1
 800fa5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2201      	movs	r2, #1
 800fa64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fa68:	2300      	movs	r3, #0
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3708      	adds	r7, #8
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}

0800fa72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800fa72:	b480      	push	{r7}
 800fa74:	b083      	sub	sp, #12
 800fa76:	af00      	add	r7, sp, #0
 800fa78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800fa7a:	bf00      	nop
 800fa7c:	370c      	adds	r7, #12
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa84:	4770      	bx	lr
	...

0800fa88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b084      	sub	sp, #16
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d109      	bne.n	800faac <HAL_TIM_PWM_Start+0x24>
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800fa9e:	b2db      	uxtb	r3, r3
 800faa0:	2b01      	cmp	r3, #1
 800faa2:	bf14      	ite	ne
 800faa4:	2301      	movne	r3, #1
 800faa6:	2300      	moveq	r3, #0
 800faa8:	b2db      	uxtb	r3, r3
 800faaa:	e03c      	b.n	800fb26 <HAL_TIM_PWM_Start+0x9e>
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	2b04      	cmp	r3, #4
 800fab0:	d109      	bne.n	800fac6 <HAL_TIM_PWM_Start+0x3e>
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800fab8:	b2db      	uxtb	r3, r3
 800faba:	2b01      	cmp	r3, #1
 800fabc:	bf14      	ite	ne
 800fabe:	2301      	movne	r3, #1
 800fac0:	2300      	moveq	r3, #0
 800fac2:	b2db      	uxtb	r3, r3
 800fac4:	e02f      	b.n	800fb26 <HAL_TIM_PWM_Start+0x9e>
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	2b08      	cmp	r3, #8
 800faca:	d109      	bne.n	800fae0 <HAL_TIM_PWM_Start+0x58>
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fad2:	b2db      	uxtb	r3, r3
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	bf14      	ite	ne
 800fad8:	2301      	movne	r3, #1
 800fada:	2300      	moveq	r3, #0
 800fadc:	b2db      	uxtb	r3, r3
 800fade:	e022      	b.n	800fb26 <HAL_TIM_PWM_Start+0x9e>
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	2b0c      	cmp	r3, #12
 800fae4:	d109      	bne.n	800fafa <HAL_TIM_PWM_Start+0x72>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800faec:	b2db      	uxtb	r3, r3
 800faee:	2b01      	cmp	r3, #1
 800faf0:	bf14      	ite	ne
 800faf2:	2301      	movne	r3, #1
 800faf4:	2300      	moveq	r3, #0
 800faf6:	b2db      	uxtb	r3, r3
 800faf8:	e015      	b.n	800fb26 <HAL_TIM_PWM_Start+0x9e>
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	2b10      	cmp	r3, #16
 800fafe:	d109      	bne.n	800fb14 <HAL_TIM_PWM_Start+0x8c>
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fb06:	b2db      	uxtb	r3, r3
 800fb08:	2b01      	cmp	r3, #1
 800fb0a:	bf14      	ite	ne
 800fb0c:	2301      	movne	r3, #1
 800fb0e:	2300      	moveq	r3, #0
 800fb10:	b2db      	uxtb	r3, r3
 800fb12:	e008      	b.n	800fb26 <HAL_TIM_PWM_Start+0x9e>
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800fb1a:	b2db      	uxtb	r3, r3
 800fb1c:	2b01      	cmp	r3, #1
 800fb1e:	bf14      	ite	ne
 800fb20:	2301      	movne	r3, #1
 800fb22:	2300      	moveq	r3, #0
 800fb24:	b2db      	uxtb	r3, r3
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d001      	beq.n	800fb2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800fb2a:	2301      	movs	r3, #1
 800fb2c:	e09c      	b.n	800fc68 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fb2e:	683b      	ldr	r3, [r7, #0]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d104      	bne.n	800fb3e <HAL_TIM_PWM_Start+0xb6>
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2202      	movs	r2, #2
 800fb38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fb3c:	e023      	b.n	800fb86 <HAL_TIM_PWM_Start+0xfe>
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	2b04      	cmp	r3, #4
 800fb42:	d104      	bne.n	800fb4e <HAL_TIM_PWM_Start+0xc6>
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2202      	movs	r2, #2
 800fb48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fb4c:	e01b      	b.n	800fb86 <HAL_TIM_PWM_Start+0xfe>
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	2b08      	cmp	r3, #8
 800fb52:	d104      	bne.n	800fb5e <HAL_TIM_PWM_Start+0xd6>
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2202      	movs	r2, #2
 800fb58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fb5c:	e013      	b.n	800fb86 <HAL_TIM_PWM_Start+0xfe>
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	2b0c      	cmp	r3, #12
 800fb62:	d104      	bne.n	800fb6e <HAL_TIM_PWM_Start+0xe6>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2202      	movs	r2, #2
 800fb68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fb6c:	e00b      	b.n	800fb86 <HAL_TIM_PWM_Start+0xfe>
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	2b10      	cmp	r3, #16
 800fb72:	d104      	bne.n	800fb7e <HAL_TIM_PWM_Start+0xf6>
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2202      	movs	r2, #2
 800fb78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fb7c:	e003      	b.n	800fb86 <HAL_TIM_PWM_Start+0xfe>
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2202      	movs	r2, #2
 800fb82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	2201      	movs	r2, #1
 800fb8c:	6839      	ldr	r1, [r7, #0]
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f001 fa72 	bl	8011078 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	4a35      	ldr	r2, [pc, #212]	@ (800fc70 <HAL_TIM_PWM_Start+0x1e8>)
 800fb9a:	4293      	cmp	r3, r2
 800fb9c:	d013      	beq.n	800fbc6 <HAL_TIM_PWM_Start+0x13e>
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	4a34      	ldr	r2, [pc, #208]	@ (800fc74 <HAL_TIM_PWM_Start+0x1ec>)
 800fba4:	4293      	cmp	r3, r2
 800fba6:	d00e      	beq.n	800fbc6 <HAL_TIM_PWM_Start+0x13e>
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	4a32      	ldr	r2, [pc, #200]	@ (800fc78 <HAL_TIM_PWM_Start+0x1f0>)
 800fbae:	4293      	cmp	r3, r2
 800fbb0:	d009      	beq.n	800fbc6 <HAL_TIM_PWM_Start+0x13e>
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	4a31      	ldr	r2, [pc, #196]	@ (800fc7c <HAL_TIM_PWM_Start+0x1f4>)
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	d004      	beq.n	800fbc6 <HAL_TIM_PWM_Start+0x13e>
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	4a2f      	ldr	r2, [pc, #188]	@ (800fc80 <HAL_TIM_PWM_Start+0x1f8>)
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	d101      	bne.n	800fbca <HAL_TIM_PWM_Start+0x142>
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	e000      	b.n	800fbcc <HAL_TIM_PWM_Start+0x144>
 800fbca:	2300      	movs	r3, #0
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d007      	beq.n	800fbe0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800fbde:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	4a22      	ldr	r2, [pc, #136]	@ (800fc70 <HAL_TIM_PWM_Start+0x1e8>)
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d01d      	beq.n	800fc26 <HAL_TIM_PWM_Start+0x19e>
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fbf2:	d018      	beq.n	800fc26 <HAL_TIM_PWM_Start+0x19e>
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	4a22      	ldr	r2, [pc, #136]	@ (800fc84 <HAL_TIM_PWM_Start+0x1fc>)
 800fbfa:	4293      	cmp	r3, r2
 800fbfc:	d013      	beq.n	800fc26 <HAL_TIM_PWM_Start+0x19e>
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	4a21      	ldr	r2, [pc, #132]	@ (800fc88 <HAL_TIM_PWM_Start+0x200>)
 800fc04:	4293      	cmp	r3, r2
 800fc06:	d00e      	beq.n	800fc26 <HAL_TIM_PWM_Start+0x19e>
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	4a1f      	ldr	r2, [pc, #124]	@ (800fc8c <HAL_TIM_PWM_Start+0x204>)
 800fc0e:	4293      	cmp	r3, r2
 800fc10:	d009      	beq.n	800fc26 <HAL_TIM_PWM_Start+0x19e>
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	4a17      	ldr	r2, [pc, #92]	@ (800fc74 <HAL_TIM_PWM_Start+0x1ec>)
 800fc18:	4293      	cmp	r3, r2
 800fc1a:	d004      	beq.n	800fc26 <HAL_TIM_PWM_Start+0x19e>
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	4a15      	ldr	r2, [pc, #84]	@ (800fc78 <HAL_TIM_PWM_Start+0x1f0>)
 800fc22:	4293      	cmp	r3, r2
 800fc24:	d115      	bne.n	800fc52 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	689a      	ldr	r2, [r3, #8]
 800fc2c:	4b18      	ldr	r3, [pc, #96]	@ (800fc90 <HAL_TIM_PWM_Start+0x208>)
 800fc2e:	4013      	ands	r3, r2
 800fc30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	2b06      	cmp	r3, #6
 800fc36:	d015      	beq.n	800fc64 <HAL_TIM_PWM_Start+0x1dc>
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fc3e:	d011      	beq.n	800fc64 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	681a      	ldr	r2, [r3, #0]
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	f042 0201 	orr.w	r2, r2, #1
 800fc4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc50:	e008      	b.n	800fc64 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	681a      	ldr	r2, [r3, #0]
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	f042 0201 	orr.w	r2, r2, #1
 800fc60:	601a      	str	r2, [r3, #0]
 800fc62:	e000      	b.n	800fc66 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fc66:	2300      	movs	r3, #0
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3710      	adds	r7, #16
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}
 800fc70:	40012c00 	.word	0x40012c00
 800fc74:	40013400 	.word	0x40013400
 800fc78:	40014000 	.word	0x40014000
 800fc7c:	40014400 	.word	0x40014400
 800fc80:	40014800 	.word	0x40014800
 800fc84:	40000400 	.word	0x40000400
 800fc88:	40000800 	.word	0x40000800
 800fc8c:	40000c00 	.word	0x40000c00
 800fc90:	00010007 	.word	0x00010007

0800fc94 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b082      	sub	sp, #8
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	2200      	movs	r2, #0
 800fca4:	6839      	ldr	r1, [r7, #0]
 800fca6:	4618      	mov	r0, r3
 800fca8:	f001 f9e6 	bl	8011078 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	4a3e      	ldr	r2, [pc, #248]	@ (800fdac <HAL_TIM_PWM_Stop+0x118>)
 800fcb2:	4293      	cmp	r3, r2
 800fcb4:	d013      	beq.n	800fcde <HAL_TIM_PWM_Stop+0x4a>
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	4a3d      	ldr	r2, [pc, #244]	@ (800fdb0 <HAL_TIM_PWM_Stop+0x11c>)
 800fcbc:	4293      	cmp	r3, r2
 800fcbe:	d00e      	beq.n	800fcde <HAL_TIM_PWM_Stop+0x4a>
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	4a3b      	ldr	r2, [pc, #236]	@ (800fdb4 <HAL_TIM_PWM_Stop+0x120>)
 800fcc6:	4293      	cmp	r3, r2
 800fcc8:	d009      	beq.n	800fcde <HAL_TIM_PWM_Stop+0x4a>
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	4a3a      	ldr	r2, [pc, #232]	@ (800fdb8 <HAL_TIM_PWM_Stop+0x124>)
 800fcd0:	4293      	cmp	r3, r2
 800fcd2:	d004      	beq.n	800fcde <HAL_TIM_PWM_Stop+0x4a>
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	4a38      	ldr	r2, [pc, #224]	@ (800fdbc <HAL_TIM_PWM_Stop+0x128>)
 800fcda:	4293      	cmp	r3, r2
 800fcdc:	d101      	bne.n	800fce2 <HAL_TIM_PWM_Stop+0x4e>
 800fcde:	2301      	movs	r3, #1
 800fce0:	e000      	b.n	800fce4 <HAL_TIM_PWM_Stop+0x50>
 800fce2:	2300      	movs	r3, #0
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d017      	beq.n	800fd18 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	6a1a      	ldr	r2, [r3, #32]
 800fcee:	f241 1311 	movw	r3, #4369	@ 0x1111
 800fcf2:	4013      	ands	r3, r2
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d10f      	bne.n	800fd18 <HAL_TIM_PWM_Stop+0x84>
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	6a1a      	ldr	r2, [r3, #32]
 800fcfe:	f240 4344 	movw	r3, #1092	@ 0x444
 800fd02:	4013      	ands	r3, r2
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d107      	bne.n	800fd18 <HAL_TIM_PWM_Stop+0x84>
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800fd16:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	6a1a      	ldr	r2, [r3, #32]
 800fd1e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800fd22:	4013      	ands	r3, r2
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d10f      	bne.n	800fd48 <HAL_TIM_PWM_Stop+0xb4>
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	6a1a      	ldr	r2, [r3, #32]
 800fd2e:	f240 4344 	movw	r3, #1092	@ 0x444
 800fd32:	4013      	ands	r3, r2
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d107      	bne.n	800fd48 <HAL_TIM_PWM_Stop+0xb4>
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	681a      	ldr	r2, [r3, #0]
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	f022 0201 	bic.w	r2, r2, #1
 800fd46:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d104      	bne.n	800fd58 <HAL_TIM_PWM_Stop+0xc4>
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2201      	movs	r2, #1
 800fd52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fd56:	e023      	b.n	800fda0 <HAL_TIM_PWM_Stop+0x10c>
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	2b04      	cmp	r3, #4
 800fd5c:	d104      	bne.n	800fd68 <HAL_TIM_PWM_Stop+0xd4>
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2201      	movs	r2, #1
 800fd62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fd66:	e01b      	b.n	800fda0 <HAL_TIM_PWM_Stop+0x10c>
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	2b08      	cmp	r3, #8
 800fd6c:	d104      	bne.n	800fd78 <HAL_TIM_PWM_Stop+0xe4>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	2201      	movs	r2, #1
 800fd72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fd76:	e013      	b.n	800fda0 <HAL_TIM_PWM_Stop+0x10c>
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	2b0c      	cmp	r3, #12
 800fd7c:	d104      	bne.n	800fd88 <HAL_TIM_PWM_Stop+0xf4>
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	2201      	movs	r2, #1
 800fd82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fd86:	e00b      	b.n	800fda0 <HAL_TIM_PWM_Stop+0x10c>
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	2b10      	cmp	r3, #16
 800fd8c:	d104      	bne.n	800fd98 <HAL_TIM_PWM_Stop+0x104>
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2201      	movs	r2, #1
 800fd92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fd96:	e003      	b.n	800fda0 <HAL_TIM_PWM_Stop+0x10c>
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2201      	movs	r2, #1
 800fd9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800fda0:	2300      	movs	r3, #0
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	3708      	adds	r7, #8
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop
 800fdac:	40012c00 	.word	0x40012c00
 800fdb0:	40013400 	.word	0x40013400
 800fdb4:	40014000 	.word	0x40014000
 800fdb8:	40014400 	.word	0x40014400
 800fdbc:	40014800 	.word	0x40014800

0800fdc0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b082      	sub	sp, #8
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d101      	bne.n	800fdd2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800fdce:	2301      	movs	r3, #1
 800fdd0:	e049      	b.n	800fe66 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fdd8:	b2db      	uxtb	r3, r3
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d106      	bne.n	800fdec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2200      	movs	r2, #0
 800fde2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f7f5 fc9a 	bl	8005720 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2202      	movs	r2, #2
 800fdf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681a      	ldr	r2, [r3, #0]
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	3304      	adds	r3, #4
 800fdfc:	4619      	mov	r1, r3
 800fdfe:	4610      	mov	r0, r2
 800fe00:	f000 fb6c 	bl	80104dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	2201      	movs	r2, #1
 800fe08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2201      	movs	r2, #1
 800fe10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2201      	movs	r2, #1
 800fe18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2201      	movs	r2, #1
 800fe20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2201      	movs	r2, #1
 800fe28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2201      	movs	r2, #1
 800fe30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2201      	movs	r2, #1
 800fe38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2201      	movs	r2, #1
 800fe40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2201      	movs	r2, #1
 800fe48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2201      	movs	r2, #1
 800fe50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2201      	movs	r2, #1
 800fe58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2201      	movs	r2, #1
 800fe60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fe64:	2300      	movs	r3, #0
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	3708      	adds	r7, #8
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}
	...

0800fe70 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b086      	sub	sp, #24
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	60f8      	str	r0, [r7, #12]
 800fe78:	60b9      	str	r1, [r7, #8]
 800fe7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fe86:	2b01      	cmp	r3, #1
 800fe88:	d101      	bne.n	800fe8e <HAL_TIM_OC_ConfigChannel+0x1e>
 800fe8a:	2302      	movs	r3, #2
 800fe8c:	e066      	b.n	800ff5c <HAL_TIM_OC_ConfigChannel+0xec>
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	2201      	movs	r2, #1
 800fe92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2b14      	cmp	r3, #20
 800fe9a:	d857      	bhi.n	800ff4c <HAL_TIM_OC_ConfigChannel+0xdc>
 800fe9c:	a201      	add	r2, pc, #4	@ (adr r2, 800fea4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800fe9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fea2:	bf00      	nop
 800fea4:	0800fef9 	.word	0x0800fef9
 800fea8:	0800ff4d 	.word	0x0800ff4d
 800feac:	0800ff4d 	.word	0x0800ff4d
 800feb0:	0800ff4d 	.word	0x0800ff4d
 800feb4:	0800ff07 	.word	0x0800ff07
 800feb8:	0800ff4d 	.word	0x0800ff4d
 800febc:	0800ff4d 	.word	0x0800ff4d
 800fec0:	0800ff4d 	.word	0x0800ff4d
 800fec4:	0800ff15 	.word	0x0800ff15
 800fec8:	0800ff4d 	.word	0x0800ff4d
 800fecc:	0800ff4d 	.word	0x0800ff4d
 800fed0:	0800ff4d 	.word	0x0800ff4d
 800fed4:	0800ff23 	.word	0x0800ff23
 800fed8:	0800ff4d 	.word	0x0800ff4d
 800fedc:	0800ff4d 	.word	0x0800ff4d
 800fee0:	0800ff4d 	.word	0x0800ff4d
 800fee4:	0800ff31 	.word	0x0800ff31
 800fee8:	0800ff4d 	.word	0x0800ff4d
 800feec:	0800ff4d 	.word	0x0800ff4d
 800fef0:	0800ff4d 	.word	0x0800ff4d
 800fef4:	0800ff3f 	.word	0x0800ff3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	68b9      	ldr	r1, [r7, #8]
 800fefe:	4618      	mov	r0, r3
 800ff00:	f000 fb92 	bl	8010628 <TIM_OC1_SetConfig>
      break;
 800ff04:	e025      	b.n	800ff52 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	68b9      	ldr	r1, [r7, #8]
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f000 fc1b 	bl	8010748 <TIM_OC2_SetConfig>
      break;
 800ff12:	e01e      	b.n	800ff52 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	68b9      	ldr	r1, [r7, #8]
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f000 fc9e 	bl	801085c <TIM_OC3_SetConfig>
      break;
 800ff20:	e017      	b.n	800ff52 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	68b9      	ldr	r1, [r7, #8]
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f000 fd1f 	bl	801096c <TIM_OC4_SetConfig>
      break;
 800ff2e:	e010      	b.n	800ff52 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	68b9      	ldr	r1, [r7, #8]
 800ff36:	4618      	mov	r0, r3
 800ff38:	f000 fd82 	bl	8010a40 <TIM_OC5_SetConfig>
      break;
 800ff3c:	e009      	b.n	800ff52 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	68b9      	ldr	r1, [r7, #8]
 800ff44:	4618      	mov	r0, r3
 800ff46:	f000 fddf 	bl	8010b08 <TIM_OC6_SetConfig>
      break;
 800ff4a:	e002      	b.n	800ff52 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800ff4c:	2301      	movs	r3, #1
 800ff4e:	75fb      	strb	r3, [r7, #23]
      break;
 800ff50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	2200      	movs	r2, #0
 800ff56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ff5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	3718      	adds	r7, #24
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}

0800ff64 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b086      	sub	sp, #24
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	60f8      	str	r0, [r7, #12]
 800ff6c:	60b9      	str	r1, [r7, #8]
 800ff6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ff70:	2300      	movs	r3, #0
 800ff72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ff7a:	2b01      	cmp	r3, #1
 800ff7c:	d101      	bne.n	800ff82 <HAL_TIM_IC_ConfigChannel+0x1e>
 800ff7e:	2302      	movs	r3, #2
 800ff80:	e088      	b.n	8010094 <HAL_TIM_IC_ConfigChannel+0x130>
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	2201      	movs	r2, #1
 800ff86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d11b      	bne.n	800ffc8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800ffa0:	f000 feac 	bl	8010cfc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	699a      	ldr	r2, [r3, #24]
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	f022 020c 	bic.w	r2, r2, #12
 800ffb2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	6999      	ldr	r1, [r3, #24]
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	689a      	ldr	r2, [r3, #8]
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	430a      	orrs	r2, r1
 800ffc4:	619a      	str	r2, [r3, #24]
 800ffc6:	e060      	b.n	801008a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2b04      	cmp	r3, #4
 800ffcc:	d11c      	bne.n	8010008 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ffda:	68bb      	ldr	r3, [r7, #8]
 800ffdc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800ffde:	f000 ff2a 	bl	8010e36 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	699a      	ldr	r2, [r3, #24]
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800fff0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	6999      	ldr	r1, [r3, #24]
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	689b      	ldr	r3, [r3, #8]
 800fffc:	021a      	lsls	r2, r3, #8
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	430a      	orrs	r2, r1
 8010004:	619a      	str	r2, [r3, #24]
 8010006:	e040      	b.n	801008a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2b08      	cmp	r3, #8
 801000c:	d11b      	bne.n	8010046 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 801001e:	f000 ff77 	bl	8010f10 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	69da      	ldr	r2, [r3, #28]
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	f022 020c 	bic.w	r2, r2, #12
 8010030:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	69d9      	ldr	r1, [r3, #28]
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	689a      	ldr	r2, [r3, #8]
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	430a      	orrs	r2, r1
 8010042:	61da      	str	r2, [r3, #28]
 8010044:	e021      	b.n	801008a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	2b0c      	cmp	r3, #12
 801004a:	d11c      	bne.n	8010086 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 801005c:	f000 ff94 	bl	8010f88 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	69da      	ldr	r2, [r3, #28]
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 801006e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	69d9      	ldr	r1, [r3, #28]
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	689b      	ldr	r3, [r3, #8]
 801007a:	021a      	lsls	r2, r3, #8
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	430a      	orrs	r2, r1
 8010082:	61da      	str	r2, [r3, #28]
 8010084:	e001      	b.n	801008a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8010086:	2301      	movs	r3, #1
 8010088:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	2200      	movs	r2, #0
 801008e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010092:	7dfb      	ldrb	r3, [r7, #23]
}
 8010094:	4618      	mov	r0, r3
 8010096:	3718      	adds	r7, #24
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}

0801009c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b086      	sub	sp, #24
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	60f8      	str	r0, [r7, #12]
 80100a4:	60b9      	str	r1, [r7, #8]
 80100a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80100a8:	2300      	movs	r3, #0
 80100aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80100b2:	2b01      	cmp	r3, #1
 80100b4:	d101      	bne.n	80100ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80100b6:	2302      	movs	r3, #2
 80100b8:	e0ff      	b.n	80102ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	2201      	movs	r2, #1
 80100be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2b14      	cmp	r3, #20
 80100c6:	f200 80f0 	bhi.w	80102aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80100ca:	a201      	add	r2, pc, #4	@ (adr r2, 80100d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80100cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100d0:	08010125 	.word	0x08010125
 80100d4:	080102ab 	.word	0x080102ab
 80100d8:	080102ab 	.word	0x080102ab
 80100dc:	080102ab 	.word	0x080102ab
 80100e0:	08010165 	.word	0x08010165
 80100e4:	080102ab 	.word	0x080102ab
 80100e8:	080102ab 	.word	0x080102ab
 80100ec:	080102ab 	.word	0x080102ab
 80100f0:	080101a7 	.word	0x080101a7
 80100f4:	080102ab 	.word	0x080102ab
 80100f8:	080102ab 	.word	0x080102ab
 80100fc:	080102ab 	.word	0x080102ab
 8010100:	080101e7 	.word	0x080101e7
 8010104:	080102ab 	.word	0x080102ab
 8010108:	080102ab 	.word	0x080102ab
 801010c:	080102ab 	.word	0x080102ab
 8010110:	08010229 	.word	0x08010229
 8010114:	080102ab 	.word	0x080102ab
 8010118:	080102ab 	.word	0x080102ab
 801011c:	080102ab 	.word	0x080102ab
 8010120:	08010269 	.word	0x08010269
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	68b9      	ldr	r1, [r7, #8]
 801012a:	4618      	mov	r0, r3
 801012c:	f000 fa7c 	bl	8010628 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	699a      	ldr	r2, [r3, #24]
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	f042 0208 	orr.w	r2, r2, #8
 801013e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	699a      	ldr	r2, [r3, #24]
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	f022 0204 	bic.w	r2, r2, #4
 801014e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	6999      	ldr	r1, [r3, #24]
 8010156:	68bb      	ldr	r3, [r7, #8]
 8010158:	691a      	ldr	r2, [r3, #16]
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	430a      	orrs	r2, r1
 8010160:	619a      	str	r2, [r3, #24]
      break;
 8010162:	e0a5      	b.n	80102b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	68b9      	ldr	r1, [r7, #8]
 801016a:	4618      	mov	r0, r3
 801016c:	f000 faec 	bl	8010748 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	699a      	ldr	r2, [r3, #24]
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801017e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	699a      	ldr	r2, [r3, #24]
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801018e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	6999      	ldr	r1, [r3, #24]
 8010196:	68bb      	ldr	r3, [r7, #8]
 8010198:	691b      	ldr	r3, [r3, #16]
 801019a:	021a      	lsls	r2, r3, #8
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	430a      	orrs	r2, r1
 80101a2:	619a      	str	r2, [r3, #24]
      break;
 80101a4:	e084      	b.n	80102b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	68b9      	ldr	r1, [r7, #8]
 80101ac:	4618      	mov	r0, r3
 80101ae:	f000 fb55 	bl	801085c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	69da      	ldr	r2, [r3, #28]
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	f042 0208 	orr.w	r2, r2, #8
 80101c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	69da      	ldr	r2, [r3, #28]
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	f022 0204 	bic.w	r2, r2, #4
 80101d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	69d9      	ldr	r1, [r3, #28]
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	691a      	ldr	r2, [r3, #16]
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	430a      	orrs	r2, r1
 80101e2:	61da      	str	r2, [r3, #28]
      break;
 80101e4:	e064      	b.n	80102b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	68b9      	ldr	r1, [r7, #8]
 80101ec:	4618      	mov	r0, r3
 80101ee:	f000 fbbd 	bl	801096c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	69da      	ldr	r2, [r3, #28]
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	69da      	ldr	r2, [r3, #28]
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	69d9      	ldr	r1, [r3, #28]
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	691b      	ldr	r3, [r3, #16]
 801021c:	021a      	lsls	r2, r3, #8
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	430a      	orrs	r2, r1
 8010224:	61da      	str	r2, [r3, #28]
      break;
 8010226:	e043      	b.n	80102b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	68b9      	ldr	r1, [r7, #8]
 801022e:	4618      	mov	r0, r3
 8010230:	f000 fc06 	bl	8010a40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	f042 0208 	orr.w	r2, r2, #8
 8010242:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	f022 0204 	bic.w	r2, r2, #4
 8010252:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	691a      	ldr	r2, [r3, #16]
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	430a      	orrs	r2, r1
 8010264:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8010266:	e023      	b.n	80102b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	68b9      	ldr	r1, [r7, #8]
 801026e:	4618      	mov	r0, r3
 8010270:	f000 fc4a 	bl	8010b08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010282:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010292:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801029a:	68bb      	ldr	r3, [r7, #8]
 801029c:	691b      	ldr	r3, [r3, #16]
 801029e:	021a      	lsls	r2, r3, #8
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	430a      	orrs	r2, r1
 80102a6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80102a8:	e002      	b.n	80102b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80102aa:	2301      	movs	r3, #1
 80102ac:	75fb      	strb	r3, [r7, #23]
      break;
 80102ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	2200      	movs	r2, #0
 80102b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80102b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80102ba:	4618      	mov	r0, r3
 80102bc:	3718      	adds	r7, #24
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}
 80102c2:	bf00      	nop

080102c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b084      	sub	sp, #16
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
 80102cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80102ce:	2300      	movs	r3, #0
 80102d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80102d8:	2b01      	cmp	r3, #1
 80102da:	d101      	bne.n	80102e0 <HAL_TIM_ConfigClockSource+0x1c>
 80102dc:	2302      	movs	r3, #2
 80102de:	e0b6      	b.n	801044e <HAL_TIM_ConfigClockSource+0x18a>
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	2201      	movs	r2, #1
 80102e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2202      	movs	r2, #2
 80102ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	689b      	ldr	r3, [r3, #8]
 80102f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80102fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8010302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010304:	68bb      	ldr	r3, [r7, #8]
 8010306:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801030a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	68ba      	ldr	r2, [r7, #8]
 8010312:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801031c:	d03e      	beq.n	801039c <HAL_TIM_ConfigClockSource+0xd8>
 801031e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010322:	f200 8087 	bhi.w	8010434 <HAL_TIM_ConfigClockSource+0x170>
 8010326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801032a:	f000 8086 	beq.w	801043a <HAL_TIM_ConfigClockSource+0x176>
 801032e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010332:	d87f      	bhi.n	8010434 <HAL_TIM_ConfigClockSource+0x170>
 8010334:	2b70      	cmp	r3, #112	@ 0x70
 8010336:	d01a      	beq.n	801036e <HAL_TIM_ConfigClockSource+0xaa>
 8010338:	2b70      	cmp	r3, #112	@ 0x70
 801033a:	d87b      	bhi.n	8010434 <HAL_TIM_ConfigClockSource+0x170>
 801033c:	2b60      	cmp	r3, #96	@ 0x60
 801033e:	d050      	beq.n	80103e2 <HAL_TIM_ConfigClockSource+0x11e>
 8010340:	2b60      	cmp	r3, #96	@ 0x60
 8010342:	d877      	bhi.n	8010434 <HAL_TIM_ConfigClockSource+0x170>
 8010344:	2b50      	cmp	r3, #80	@ 0x50
 8010346:	d03c      	beq.n	80103c2 <HAL_TIM_ConfigClockSource+0xfe>
 8010348:	2b50      	cmp	r3, #80	@ 0x50
 801034a:	d873      	bhi.n	8010434 <HAL_TIM_ConfigClockSource+0x170>
 801034c:	2b40      	cmp	r3, #64	@ 0x40
 801034e:	d058      	beq.n	8010402 <HAL_TIM_ConfigClockSource+0x13e>
 8010350:	2b40      	cmp	r3, #64	@ 0x40
 8010352:	d86f      	bhi.n	8010434 <HAL_TIM_ConfigClockSource+0x170>
 8010354:	2b30      	cmp	r3, #48	@ 0x30
 8010356:	d064      	beq.n	8010422 <HAL_TIM_ConfigClockSource+0x15e>
 8010358:	2b30      	cmp	r3, #48	@ 0x30
 801035a:	d86b      	bhi.n	8010434 <HAL_TIM_ConfigClockSource+0x170>
 801035c:	2b20      	cmp	r3, #32
 801035e:	d060      	beq.n	8010422 <HAL_TIM_ConfigClockSource+0x15e>
 8010360:	2b20      	cmp	r3, #32
 8010362:	d867      	bhi.n	8010434 <HAL_TIM_ConfigClockSource+0x170>
 8010364:	2b00      	cmp	r3, #0
 8010366:	d05c      	beq.n	8010422 <HAL_TIM_ConfigClockSource+0x15e>
 8010368:	2b10      	cmp	r3, #16
 801036a:	d05a      	beq.n	8010422 <HAL_TIM_ConfigClockSource+0x15e>
 801036c:	e062      	b.n	8010434 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801037e:	f000 fe5b 	bl	8011038 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	689b      	ldr	r3, [r3, #8]
 8010388:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801038a:	68bb      	ldr	r3, [r7, #8]
 801038c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010390:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	68ba      	ldr	r2, [r7, #8]
 8010398:	609a      	str	r2, [r3, #8]
      break;
 801039a:	e04f      	b.n	801043c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80103a0:	683b      	ldr	r3, [r7, #0]
 80103a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80103ac:	f000 fe44 	bl	8011038 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	689a      	ldr	r2, [r3, #8]
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80103be:	609a      	str	r2, [r3, #8]
      break;
 80103c0:	e03c      	b.n	801043c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80103ce:	461a      	mov	r2, r3
 80103d0:	f000 fd02 	bl	8010dd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	2150      	movs	r1, #80	@ 0x50
 80103da:	4618      	mov	r0, r3
 80103dc:	f000 fe11 	bl	8011002 <TIM_ITRx_SetConfig>
      break;
 80103e0:	e02c      	b.n	801043c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80103ee:	461a      	mov	r2, r3
 80103f0:	f000 fd5e 	bl	8010eb0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	2160      	movs	r1, #96	@ 0x60
 80103fa:	4618      	mov	r0, r3
 80103fc:	f000 fe01 	bl	8011002 <TIM_ITRx_SetConfig>
      break;
 8010400:	e01c      	b.n	801043c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801040e:	461a      	mov	r2, r3
 8010410:	f000 fce2 	bl	8010dd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	2140      	movs	r1, #64	@ 0x40
 801041a:	4618      	mov	r0, r3
 801041c:	f000 fdf1 	bl	8011002 <TIM_ITRx_SetConfig>
      break;
 8010420:	e00c      	b.n	801043c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	681a      	ldr	r2, [r3, #0]
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	4619      	mov	r1, r3
 801042c:	4610      	mov	r0, r2
 801042e:	f000 fde8 	bl	8011002 <TIM_ITRx_SetConfig>
      break;
 8010432:	e003      	b.n	801043c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8010434:	2301      	movs	r3, #1
 8010436:	73fb      	strb	r3, [r7, #15]
      break;
 8010438:	e000      	b.n	801043c <HAL_TIM_ConfigClockSource+0x178>
      break;
 801043a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2201      	movs	r2, #1
 8010440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2200      	movs	r2, #0
 8010448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801044c:	7bfb      	ldrb	r3, [r7, #15]
}
 801044e:	4618      	mov	r0, r3
 8010450:	3710      	adds	r7, #16
 8010452:	46bd      	mov	sp, r7
 8010454:	bd80      	pop	{r7, pc}

08010456 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8010456:	b580      	push	{r7, lr}
 8010458:	b082      	sub	sp, #8
 801045a:	af00      	add	r7, sp, #0
 801045c:	6078      	str	r0, [r7, #4]
 801045e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010466:	2b01      	cmp	r3, #1
 8010468:	d101      	bne.n	801046e <HAL_TIM_SlaveConfigSynchro+0x18>
 801046a:	2302      	movs	r3, #2
 801046c:	e031      	b.n	80104d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	2201      	movs	r2, #1
 8010472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2202      	movs	r2, #2
 801047a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 801047e:	6839      	ldr	r1, [r7, #0]
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f000 fba7 	bl	8010bd4 <TIM_SlaveTimer_SetConfig>
 8010486:	4603      	mov	r3, r0
 8010488:	2b00      	cmp	r3, #0
 801048a:	d009      	beq.n	80104a0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2201      	movs	r2, #1
 8010490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2200      	movs	r2, #0
 8010498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 801049c:	2301      	movs	r3, #1
 801049e:	e018      	b.n	80104d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	68da      	ldr	r2, [r3, #12]
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80104ae:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	68da      	ldr	r2, [r3, #12]
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80104be:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2201      	movs	r2, #1
 80104c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2200      	movs	r2, #0
 80104cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80104d0:	2300      	movs	r3, #0
}
 80104d2:	4618      	mov	r0, r3
 80104d4:	3708      	adds	r7, #8
 80104d6:	46bd      	mov	sp, r7
 80104d8:	bd80      	pop	{r7, pc}
	...

080104dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80104dc:	b480      	push	{r7}
 80104de:	b085      	sub	sp, #20
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
 80104e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	4a46      	ldr	r2, [pc, #280]	@ (8010608 <TIM_Base_SetConfig+0x12c>)
 80104f0:	4293      	cmp	r3, r2
 80104f2:	d013      	beq.n	801051c <TIM_Base_SetConfig+0x40>
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80104fa:	d00f      	beq.n	801051c <TIM_Base_SetConfig+0x40>
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	4a43      	ldr	r2, [pc, #268]	@ (801060c <TIM_Base_SetConfig+0x130>)
 8010500:	4293      	cmp	r3, r2
 8010502:	d00b      	beq.n	801051c <TIM_Base_SetConfig+0x40>
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	4a42      	ldr	r2, [pc, #264]	@ (8010610 <TIM_Base_SetConfig+0x134>)
 8010508:	4293      	cmp	r3, r2
 801050a:	d007      	beq.n	801051c <TIM_Base_SetConfig+0x40>
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	4a41      	ldr	r2, [pc, #260]	@ (8010614 <TIM_Base_SetConfig+0x138>)
 8010510:	4293      	cmp	r3, r2
 8010512:	d003      	beq.n	801051c <TIM_Base_SetConfig+0x40>
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	4a40      	ldr	r2, [pc, #256]	@ (8010618 <TIM_Base_SetConfig+0x13c>)
 8010518:	4293      	cmp	r3, r2
 801051a:	d108      	bne.n	801052e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010524:	683b      	ldr	r3, [r7, #0]
 8010526:	685b      	ldr	r3, [r3, #4]
 8010528:	68fa      	ldr	r2, [r7, #12]
 801052a:	4313      	orrs	r3, r2
 801052c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	4a35      	ldr	r2, [pc, #212]	@ (8010608 <TIM_Base_SetConfig+0x12c>)
 8010532:	4293      	cmp	r3, r2
 8010534:	d01f      	beq.n	8010576 <TIM_Base_SetConfig+0x9a>
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801053c:	d01b      	beq.n	8010576 <TIM_Base_SetConfig+0x9a>
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	4a32      	ldr	r2, [pc, #200]	@ (801060c <TIM_Base_SetConfig+0x130>)
 8010542:	4293      	cmp	r3, r2
 8010544:	d017      	beq.n	8010576 <TIM_Base_SetConfig+0x9a>
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	4a31      	ldr	r2, [pc, #196]	@ (8010610 <TIM_Base_SetConfig+0x134>)
 801054a:	4293      	cmp	r3, r2
 801054c:	d013      	beq.n	8010576 <TIM_Base_SetConfig+0x9a>
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	4a30      	ldr	r2, [pc, #192]	@ (8010614 <TIM_Base_SetConfig+0x138>)
 8010552:	4293      	cmp	r3, r2
 8010554:	d00f      	beq.n	8010576 <TIM_Base_SetConfig+0x9a>
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	4a2f      	ldr	r2, [pc, #188]	@ (8010618 <TIM_Base_SetConfig+0x13c>)
 801055a:	4293      	cmp	r3, r2
 801055c:	d00b      	beq.n	8010576 <TIM_Base_SetConfig+0x9a>
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	4a2e      	ldr	r2, [pc, #184]	@ (801061c <TIM_Base_SetConfig+0x140>)
 8010562:	4293      	cmp	r3, r2
 8010564:	d007      	beq.n	8010576 <TIM_Base_SetConfig+0x9a>
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	4a2d      	ldr	r2, [pc, #180]	@ (8010620 <TIM_Base_SetConfig+0x144>)
 801056a:	4293      	cmp	r3, r2
 801056c:	d003      	beq.n	8010576 <TIM_Base_SetConfig+0x9a>
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	4a2c      	ldr	r2, [pc, #176]	@ (8010624 <TIM_Base_SetConfig+0x148>)
 8010572:	4293      	cmp	r3, r2
 8010574:	d108      	bne.n	8010588 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801057c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	68db      	ldr	r3, [r3, #12]
 8010582:	68fa      	ldr	r2, [r7, #12]
 8010584:	4313      	orrs	r3, r2
 8010586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	695b      	ldr	r3, [r3, #20]
 8010592:	4313      	orrs	r3, r2
 8010594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	68fa      	ldr	r2, [r7, #12]
 801059a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	689a      	ldr	r2, [r3, #8]
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	681a      	ldr	r2, [r3, #0]
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	4a16      	ldr	r2, [pc, #88]	@ (8010608 <TIM_Base_SetConfig+0x12c>)
 80105b0:	4293      	cmp	r3, r2
 80105b2:	d00f      	beq.n	80105d4 <TIM_Base_SetConfig+0xf8>
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	4a18      	ldr	r2, [pc, #96]	@ (8010618 <TIM_Base_SetConfig+0x13c>)
 80105b8:	4293      	cmp	r3, r2
 80105ba:	d00b      	beq.n	80105d4 <TIM_Base_SetConfig+0xf8>
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	4a17      	ldr	r2, [pc, #92]	@ (801061c <TIM_Base_SetConfig+0x140>)
 80105c0:	4293      	cmp	r3, r2
 80105c2:	d007      	beq.n	80105d4 <TIM_Base_SetConfig+0xf8>
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	4a16      	ldr	r2, [pc, #88]	@ (8010620 <TIM_Base_SetConfig+0x144>)
 80105c8:	4293      	cmp	r3, r2
 80105ca:	d003      	beq.n	80105d4 <TIM_Base_SetConfig+0xf8>
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	4a15      	ldr	r2, [pc, #84]	@ (8010624 <TIM_Base_SetConfig+0x148>)
 80105d0:	4293      	cmp	r3, r2
 80105d2:	d103      	bne.n	80105dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	691a      	ldr	r2, [r3, #16]
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2201      	movs	r2, #1
 80105e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	691b      	ldr	r3, [r3, #16]
 80105e6:	f003 0301 	and.w	r3, r3, #1
 80105ea:	2b01      	cmp	r3, #1
 80105ec:	d105      	bne.n	80105fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	691b      	ldr	r3, [r3, #16]
 80105f2:	f023 0201 	bic.w	r2, r3, #1
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	611a      	str	r2, [r3, #16]
  }
}
 80105fa:	bf00      	nop
 80105fc:	3714      	adds	r7, #20
 80105fe:	46bd      	mov	sp, r7
 8010600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010604:	4770      	bx	lr
 8010606:	bf00      	nop
 8010608:	40012c00 	.word	0x40012c00
 801060c:	40000400 	.word	0x40000400
 8010610:	40000800 	.word	0x40000800
 8010614:	40000c00 	.word	0x40000c00
 8010618:	40013400 	.word	0x40013400
 801061c:	40014000 	.word	0x40014000
 8010620:	40014400 	.word	0x40014400
 8010624:	40014800 	.word	0x40014800

08010628 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010628:	b480      	push	{r7}
 801062a:	b087      	sub	sp, #28
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
 8010630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	6a1b      	ldr	r3, [r3, #32]
 8010636:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6a1b      	ldr	r3, [r3, #32]
 801063c:	f023 0201 	bic.w	r2, r3, #1
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	685b      	ldr	r3, [r3, #4]
 8010648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	699b      	ldr	r3, [r3, #24]
 801064e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801065a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	f023 0303 	bic.w	r3, r3, #3
 8010662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	68fa      	ldr	r2, [r7, #12]
 801066a:	4313      	orrs	r3, r2
 801066c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801066e:	697b      	ldr	r3, [r7, #20]
 8010670:	f023 0302 	bic.w	r3, r3, #2
 8010674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010676:	683b      	ldr	r3, [r7, #0]
 8010678:	689b      	ldr	r3, [r3, #8]
 801067a:	697a      	ldr	r2, [r7, #20]
 801067c:	4313      	orrs	r3, r2
 801067e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	4a2c      	ldr	r2, [pc, #176]	@ (8010734 <TIM_OC1_SetConfig+0x10c>)
 8010684:	4293      	cmp	r3, r2
 8010686:	d00f      	beq.n	80106a8 <TIM_OC1_SetConfig+0x80>
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	4a2b      	ldr	r2, [pc, #172]	@ (8010738 <TIM_OC1_SetConfig+0x110>)
 801068c:	4293      	cmp	r3, r2
 801068e:	d00b      	beq.n	80106a8 <TIM_OC1_SetConfig+0x80>
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	4a2a      	ldr	r2, [pc, #168]	@ (801073c <TIM_OC1_SetConfig+0x114>)
 8010694:	4293      	cmp	r3, r2
 8010696:	d007      	beq.n	80106a8 <TIM_OC1_SetConfig+0x80>
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	4a29      	ldr	r2, [pc, #164]	@ (8010740 <TIM_OC1_SetConfig+0x118>)
 801069c:	4293      	cmp	r3, r2
 801069e:	d003      	beq.n	80106a8 <TIM_OC1_SetConfig+0x80>
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	4a28      	ldr	r2, [pc, #160]	@ (8010744 <TIM_OC1_SetConfig+0x11c>)
 80106a4:	4293      	cmp	r3, r2
 80106a6:	d10c      	bne.n	80106c2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80106a8:	697b      	ldr	r3, [r7, #20]
 80106aa:	f023 0308 	bic.w	r3, r3, #8
 80106ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	68db      	ldr	r3, [r3, #12]
 80106b4:	697a      	ldr	r2, [r7, #20]
 80106b6:	4313      	orrs	r3, r2
 80106b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80106ba:	697b      	ldr	r3, [r7, #20]
 80106bc:	f023 0304 	bic.w	r3, r3, #4
 80106c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	4a1b      	ldr	r2, [pc, #108]	@ (8010734 <TIM_OC1_SetConfig+0x10c>)
 80106c6:	4293      	cmp	r3, r2
 80106c8:	d00f      	beq.n	80106ea <TIM_OC1_SetConfig+0xc2>
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	4a1a      	ldr	r2, [pc, #104]	@ (8010738 <TIM_OC1_SetConfig+0x110>)
 80106ce:	4293      	cmp	r3, r2
 80106d0:	d00b      	beq.n	80106ea <TIM_OC1_SetConfig+0xc2>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	4a19      	ldr	r2, [pc, #100]	@ (801073c <TIM_OC1_SetConfig+0x114>)
 80106d6:	4293      	cmp	r3, r2
 80106d8:	d007      	beq.n	80106ea <TIM_OC1_SetConfig+0xc2>
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	4a18      	ldr	r2, [pc, #96]	@ (8010740 <TIM_OC1_SetConfig+0x118>)
 80106de:	4293      	cmp	r3, r2
 80106e0:	d003      	beq.n	80106ea <TIM_OC1_SetConfig+0xc2>
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	4a17      	ldr	r2, [pc, #92]	@ (8010744 <TIM_OC1_SetConfig+0x11c>)
 80106e6:	4293      	cmp	r3, r2
 80106e8:	d111      	bne.n	801070e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80106ea:	693b      	ldr	r3, [r7, #16]
 80106ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80106f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80106f2:	693b      	ldr	r3, [r7, #16]
 80106f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80106f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	695b      	ldr	r3, [r3, #20]
 80106fe:	693a      	ldr	r2, [r7, #16]
 8010700:	4313      	orrs	r3, r2
 8010702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	699b      	ldr	r3, [r3, #24]
 8010708:	693a      	ldr	r2, [r7, #16]
 801070a:	4313      	orrs	r3, r2
 801070c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	693a      	ldr	r2, [r7, #16]
 8010712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	68fa      	ldr	r2, [r7, #12]
 8010718:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	685a      	ldr	r2, [r3, #4]
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	697a      	ldr	r2, [r7, #20]
 8010726:	621a      	str	r2, [r3, #32]
}
 8010728:	bf00      	nop
 801072a:	371c      	adds	r7, #28
 801072c:	46bd      	mov	sp, r7
 801072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010732:	4770      	bx	lr
 8010734:	40012c00 	.word	0x40012c00
 8010738:	40013400 	.word	0x40013400
 801073c:	40014000 	.word	0x40014000
 8010740:	40014400 	.word	0x40014400
 8010744:	40014800 	.word	0x40014800

08010748 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010748:	b480      	push	{r7}
 801074a:	b087      	sub	sp, #28
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
 8010750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6a1b      	ldr	r3, [r3, #32]
 8010756:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	6a1b      	ldr	r3, [r3, #32]
 801075c:	f023 0210 	bic.w	r2, r3, #16
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	685b      	ldr	r3, [r3, #4]
 8010768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	699b      	ldr	r3, [r3, #24]
 801076e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010776:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801077a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010782:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010784:	683b      	ldr	r3, [r7, #0]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	021b      	lsls	r3, r3, #8
 801078a:	68fa      	ldr	r2, [r7, #12]
 801078c:	4313      	orrs	r3, r2
 801078e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010790:	697b      	ldr	r3, [r7, #20]
 8010792:	f023 0320 	bic.w	r3, r3, #32
 8010796:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	689b      	ldr	r3, [r3, #8]
 801079c:	011b      	lsls	r3, r3, #4
 801079e:	697a      	ldr	r2, [r7, #20]
 80107a0:	4313      	orrs	r3, r2
 80107a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	4a28      	ldr	r2, [pc, #160]	@ (8010848 <TIM_OC2_SetConfig+0x100>)
 80107a8:	4293      	cmp	r3, r2
 80107aa:	d003      	beq.n	80107b4 <TIM_OC2_SetConfig+0x6c>
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	4a27      	ldr	r2, [pc, #156]	@ (801084c <TIM_OC2_SetConfig+0x104>)
 80107b0:	4293      	cmp	r3, r2
 80107b2:	d10d      	bne.n	80107d0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80107ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	68db      	ldr	r3, [r3, #12]
 80107c0:	011b      	lsls	r3, r3, #4
 80107c2:	697a      	ldr	r2, [r7, #20]
 80107c4:	4313      	orrs	r3, r2
 80107c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80107c8:	697b      	ldr	r3, [r7, #20]
 80107ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80107ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	4a1d      	ldr	r2, [pc, #116]	@ (8010848 <TIM_OC2_SetConfig+0x100>)
 80107d4:	4293      	cmp	r3, r2
 80107d6:	d00f      	beq.n	80107f8 <TIM_OC2_SetConfig+0xb0>
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	4a1c      	ldr	r2, [pc, #112]	@ (801084c <TIM_OC2_SetConfig+0x104>)
 80107dc:	4293      	cmp	r3, r2
 80107de:	d00b      	beq.n	80107f8 <TIM_OC2_SetConfig+0xb0>
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	4a1b      	ldr	r2, [pc, #108]	@ (8010850 <TIM_OC2_SetConfig+0x108>)
 80107e4:	4293      	cmp	r3, r2
 80107e6:	d007      	beq.n	80107f8 <TIM_OC2_SetConfig+0xb0>
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	4a1a      	ldr	r2, [pc, #104]	@ (8010854 <TIM_OC2_SetConfig+0x10c>)
 80107ec:	4293      	cmp	r3, r2
 80107ee:	d003      	beq.n	80107f8 <TIM_OC2_SetConfig+0xb0>
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	4a19      	ldr	r2, [pc, #100]	@ (8010858 <TIM_OC2_SetConfig+0x110>)
 80107f4:	4293      	cmp	r3, r2
 80107f6:	d113      	bne.n	8010820 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80107f8:	693b      	ldr	r3, [r7, #16]
 80107fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80107fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010800:	693b      	ldr	r3, [r7, #16]
 8010802:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010806:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	695b      	ldr	r3, [r3, #20]
 801080c:	009b      	lsls	r3, r3, #2
 801080e:	693a      	ldr	r2, [r7, #16]
 8010810:	4313      	orrs	r3, r2
 8010812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	699b      	ldr	r3, [r3, #24]
 8010818:	009b      	lsls	r3, r3, #2
 801081a:	693a      	ldr	r2, [r7, #16]
 801081c:	4313      	orrs	r3, r2
 801081e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	693a      	ldr	r2, [r7, #16]
 8010824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	68fa      	ldr	r2, [r7, #12]
 801082a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	685a      	ldr	r2, [r3, #4]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	697a      	ldr	r2, [r7, #20]
 8010838:	621a      	str	r2, [r3, #32]
}
 801083a:	bf00      	nop
 801083c:	371c      	adds	r7, #28
 801083e:	46bd      	mov	sp, r7
 8010840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010844:	4770      	bx	lr
 8010846:	bf00      	nop
 8010848:	40012c00 	.word	0x40012c00
 801084c:	40013400 	.word	0x40013400
 8010850:	40014000 	.word	0x40014000
 8010854:	40014400 	.word	0x40014400
 8010858:	40014800 	.word	0x40014800

0801085c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801085c:	b480      	push	{r7}
 801085e:	b087      	sub	sp, #28
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6a1b      	ldr	r3, [r3, #32]
 801086a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	6a1b      	ldr	r3, [r3, #32]
 8010870:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	685b      	ldr	r3, [r3, #4]
 801087c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	69db      	ldr	r3, [r3, #28]
 8010882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801088a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801088e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	f023 0303 	bic.w	r3, r3, #3
 8010896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	68fa      	ldr	r2, [r7, #12]
 801089e:	4313      	orrs	r3, r2
 80108a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80108a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	689b      	ldr	r3, [r3, #8]
 80108ae:	021b      	lsls	r3, r3, #8
 80108b0:	697a      	ldr	r2, [r7, #20]
 80108b2:	4313      	orrs	r3, r2
 80108b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	4a27      	ldr	r2, [pc, #156]	@ (8010958 <TIM_OC3_SetConfig+0xfc>)
 80108ba:	4293      	cmp	r3, r2
 80108bc:	d003      	beq.n	80108c6 <TIM_OC3_SetConfig+0x6a>
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	4a26      	ldr	r2, [pc, #152]	@ (801095c <TIM_OC3_SetConfig+0x100>)
 80108c2:	4293      	cmp	r3, r2
 80108c4:	d10d      	bne.n	80108e2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80108cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80108ce:	683b      	ldr	r3, [r7, #0]
 80108d0:	68db      	ldr	r3, [r3, #12]
 80108d2:	021b      	lsls	r3, r3, #8
 80108d4:	697a      	ldr	r2, [r7, #20]
 80108d6:	4313      	orrs	r3, r2
 80108d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80108e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	4a1c      	ldr	r2, [pc, #112]	@ (8010958 <TIM_OC3_SetConfig+0xfc>)
 80108e6:	4293      	cmp	r3, r2
 80108e8:	d00f      	beq.n	801090a <TIM_OC3_SetConfig+0xae>
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	4a1b      	ldr	r2, [pc, #108]	@ (801095c <TIM_OC3_SetConfig+0x100>)
 80108ee:	4293      	cmp	r3, r2
 80108f0:	d00b      	beq.n	801090a <TIM_OC3_SetConfig+0xae>
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	4a1a      	ldr	r2, [pc, #104]	@ (8010960 <TIM_OC3_SetConfig+0x104>)
 80108f6:	4293      	cmp	r3, r2
 80108f8:	d007      	beq.n	801090a <TIM_OC3_SetConfig+0xae>
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	4a19      	ldr	r2, [pc, #100]	@ (8010964 <TIM_OC3_SetConfig+0x108>)
 80108fe:	4293      	cmp	r3, r2
 8010900:	d003      	beq.n	801090a <TIM_OC3_SetConfig+0xae>
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	4a18      	ldr	r2, [pc, #96]	@ (8010968 <TIM_OC3_SetConfig+0x10c>)
 8010906:	4293      	cmp	r3, r2
 8010908:	d113      	bne.n	8010932 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801090a:	693b      	ldr	r3, [r7, #16]
 801090c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010912:	693b      	ldr	r3, [r7, #16]
 8010914:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	695b      	ldr	r3, [r3, #20]
 801091e:	011b      	lsls	r3, r3, #4
 8010920:	693a      	ldr	r2, [r7, #16]
 8010922:	4313      	orrs	r3, r2
 8010924:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010926:	683b      	ldr	r3, [r7, #0]
 8010928:	699b      	ldr	r3, [r3, #24]
 801092a:	011b      	lsls	r3, r3, #4
 801092c:	693a      	ldr	r2, [r7, #16]
 801092e:	4313      	orrs	r3, r2
 8010930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	693a      	ldr	r2, [r7, #16]
 8010936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	68fa      	ldr	r2, [r7, #12]
 801093c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	685a      	ldr	r2, [r3, #4]
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	697a      	ldr	r2, [r7, #20]
 801094a:	621a      	str	r2, [r3, #32]
}
 801094c:	bf00      	nop
 801094e:	371c      	adds	r7, #28
 8010950:	46bd      	mov	sp, r7
 8010952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010956:	4770      	bx	lr
 8010958:	40012c00 	.word	0x40012c00
 801095c:	40013400 	.word	0x40013400
 8010960:	40014000 	.word	0x40014000
 8010964:	40014400 	.word	0x40014400
 8010968:	40014800 	.word	0x40014800

0801096c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801096c:	b480      	push	{r7}
 801096e:	b087      	sub	sp, #28
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	6a1b      	ldr	r3, [r3, #32]
 801097a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	6a1b      	ldr	r3, [r3, #32]
 8010980:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	685b      	ldr	r3, [r3, #4]
 801098c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	69db      	ldr	r3, [r3, #28]
 8010992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801099a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801099e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80109a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	021b      	lsls	r3, r3, #8
 80109ae:	68fa      	ldr	r2, [r7, #12]
 80109b0:	4313      	orrs	r3, r2
 80109b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80109ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	689b      	ldr	r3, [r3, #8]
 80109c0:	031b      	lsls	r3, r3, #12
 80109c2:	693a      	ldr	r2, [r7, #16]
 80109c4:	4313      	orrs	r3, r2
 80109c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	4a18      	ldr	r2, [pc, #96]	@ (8010a2c <TIM_OC4_SetConfig+0xc0>)
 80109cc:	4293      	cmp	r3, r2
 80109ce:	d00f      	beq.n	80109f0 <TIM_OC4_SetConfig+0x84>
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	4a17      	ldr	r2, [pc, #92]	@ (8010a30 <TIM_OC4_SetConfig+0xc4>)
 80109d4:	4293      	cmp	r3, r2
 80109d6:	d00b      	beq.n	80109f0 <TIM_OC4_SetConfig+0x84>
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	4a16      	ldr	r2, [pc, #88]	@ (8010a34 <TIM_OC4_SetConfig+0xc8>)
 80109dc:	4293      	cmp	r3, r2
 80109de:	d007      	beq.n	80109f0 <TIM_OC4_SetConfig+0x84>
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	4a15      	ldr	r2, [pc, #84]	@ (8010a38 <TIM_OC4_SetConfig+0xcc>)
 80109e4:	4293      	cmp	r3, r2
 80109e6:	d003      	beq.n	80109f0 <TIM_OC4_SetConfig+0x84>
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	4a14      	ldr	r2, [pc, #80]	@ (8010a3c <TIM_OC4_SetConfig+0xd0>)
 80109ec:	4293      	cmp	r3, r2
 80109ee:	d109      	bne.n	8010a04 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80109f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	695b      	ldr	r3, [r3, #20]
 80109fc:	019b      	lsls	r3, r3, #6
 80109fe:	697a      	ldr	r2, [r7, #20]
 8010a00:	4313      	orrs	r3, r2
 8010a02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	697a      	ldr	r2, [r7, #20]
 8010a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	68fa      	ldr	r2, [r7, #12]
 8010a0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	685a      	ldr	r2, [r3, #4]
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	693a      	ldr	r2, [r7, #16]
 8010a1c:	621a      	str	r2, [r3, #32]
}
 8010a1e:	bf00      	nop
 8010a20:	371c      	adds	r7, #28
 8010a22:	46bd      	mov	sp, r7
 8010a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a28:	4770      	bx	lr
 8010a2a:	bf00      	nop
 8010a2c:	40012c00 	.word	0x40012c00
 8010a30:	40013400 	.word	0x40013400
 8010a34:	40014000 	.word	0x40014000
 8010a38:	40014400 	.word	0x40014400
 8010a3c:	40014800 	.word	0x40014800

08010a40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010a40:	b480      	push	{r7}
 8010a42:	b087      	sub	sp, #28
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
 8010a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	6a1b      	ldr	r3, [r3, #32]
 8010a4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	6a1b      	ldr	r3, [r3, #32]
 8010a54:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	685b      	ldr	r3, [r3, #4]
 8010a60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010a74:	683b      	ldr	r3, [r7, #0]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	68fa      	ldr	r2, [r7, #12]
 8010a7a:	4313      	orrs	r3, r2
 8010a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010a7e:	693b      	ldr	r3, [r7, #16]
 8010a80:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8010a84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010a86:	683b      	ldr	r3, [r7, #0]
 8010a88:	689b      	ldr	r3, [r3, #8]
 8010a8a:	041b      	lsls	r3, r3, #16
 8010a8c:	693a      	ldr	r2, [r7, #16]
 8010a8e:	4313      	orrs	r3, r2
 8010a90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	4a17      	ldr	r2, [pc, #92]	@ (8010af4 <TIM_OC5_SetConfig+0xb4>)
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d00f      	beq.n	8010aba <TIM_OC5_SetConfig+0x7a>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	4a16      	ldr	r2, [pc, #88]	@ (8010af8 <TIM_OC5_SetConfig+0xb8>)
 8010a9e:	4293      	cmp	r3, r2
 8010aa0:	d00b      	beq.n	8010aba <TIM_OC5_SetConfig+0x7a>
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	4a15      	ldr	r2, [pc, #84]	@ (8010afc <TIM_OC5_SetConfig+0xbc>)
 8010aa6:	4293      	cmp	r3, r2
 8010aa8:	d007      	beq.n	8010aba <TIM_OC5_SetConfig+0x7a>
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	4a14      	ldr	r2, [pc, #80]	@ (8010b00 <TIM_OC5_SetConfig+0xc0>)
 8010aae:	4293      	cmp	r3, r2
 8010ab0:	d003      	beq.n	8010aba <TIM_OC5_SetConfig+0x7a>
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	4a13      	ldr	r2, [pc, #76]	@ (8010b04 <TIM_OC5_SetConfig+0xc4>)
 8010ab6:	4293      	cmp	r3, r2
 8010ab8:	d109      	bne.n	8010ace <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010aba:	697b      	ldr	r3, [r7, #20]
 8010abc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	695b      	ldr	r3, [r3, #20]
 8010ac6:	021b      	lsls	r3, r3, #8
 8010ac8:	697a      	ldr	r2, [r7, #20]
 8010aca:	4313      	orrs	r3, r2
 8010acc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	697a      	ldr	r2, [r7, #20]
 8010ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	68fa      	ldr	r2, [r7, #12]
 8010ad8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	685a      	ldr	r2, [r3, #4]
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	693a      	ldr	r2, [r7, #16]
 8010ae6:	621a      	str	r2, [r3, #32]
}
 8010ae8:	bf00      	nop
 8010aea:	371c      	adds	r7, #28
 8010aec:	46bd      	mov	sp, r7
 8010aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af2:	4770      	bx	lr
 8010af4:	40012c00 	.word	0x40012c00
 8010af8:	40013400 	.word	0x40013400
 8010afc:	40014000 	.word	0x40014000
 8010b00:	40014400 	.word	0x40014400
 8010b04:	40014800 	.word	0x40014800

08010b08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010b08:	b480      	push	{r7}
 8010b0a:	b087      	sub	sp, #28
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
 8010b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	6a1b      	ldr	r3, [r3, #32]
 8010b16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	6a1b      	ldr	r3, [r3, #32]
 8010b1c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	685b      	ldr	r3, [r3, #4]
 8010b28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010b36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	021b      	lsls	r3, r3, #8
 8010b42:	68fa      	ldr	r2, [r7, #12]
 8010b44:	4313      	orrs	r3, r2
 8010b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010b48:	693b      	ldr	r3, [r7, #16]
 8010b4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	689b      	ldr	r3, [r3, #8]
 8010b54:	051b      	lsls	r3, r3, #20
 8010b56:	693a      	ldr	r2, [r7, #16]
 8010b58:	4313      	orrs	r3, r2
 8010b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	4a18      	ldr	r2, [pc, #96]	@ (8010bc0 <TIM_OC6_SetConfig+0xb8>)
 8010b60:	4293      	cmp	r3, r2
 8010b62:	d00f      	beq.n	8010b84 <TIM_OC6_SetConfig+0x7c>
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	4a17      	ldr	r2, [pc, #92]	@ (8010bc4 <TIM_OC6_SetConfig+0xbc>)
 8010b68:	4293      	cmp	r3, r2
 8010b6a:	d00b      	beq.n	8010b84 <TIM_OC6_SetConfig+0x7c>
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	4a16      	ldr	r2, [pc, #88]	@ (8010bc8 <TIM_OC6_SetConfig+0xc0>)
 8010b70:	4293      	cmp	r3, r2
 8010b72:	d007      	beq.n	8010b84 <TIM_OC6_SetConfig+0x7c>
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	4a15      	ldr	r2, [pc, #84]	@ (8010bcc <TIM_OC6_SetConfig+0xc4>)
 8010b78:	4293      	cmp	r3, r2
 8010b7a:	d003      	beq.n	8010b84 <TIM_OC6_SetConfig+0x7c>
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	4a14      	ldr	r2, [pc, #80]	@ (8010bd0 <TIM_OC6_SetConfig+0xc8>)
 8010b80:	4293      	cmp	r3, r2
 8010b82:	d109      	bne.n	8010b98 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010b84:	697b      	ldr	r3, [r7, #20]
 8010b86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	695b      	ldr	r3, [r3, #20]
 8010b90:	029b      	lsls	r3, r3, #10
 8010b92:	697a      	ldr	r2, [r7, #20]
 8010b94:	4313      	orrs	r3, r2
 8010b96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	697a      	ldr	r2, [r7, #20]
 8010b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	68fa      	ldr	r2, [r7, #12]
 8010ba2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010ba4:	683b      	ldr	r3, [r7, #0]
 8010ba6:	685a      	ldr	r2, [r3, #4]
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	693a      	ldr	r2, [r7, #16]
 8010bb0:	621a      	str	r2, [r3, #32]
}
 8010bb2:	bf00      	nop
 8010bb4:	371c      	adds	r7, #28
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bbc:	4770      	bx	lr
 8010bbe:	bf00      	nop
 8010bc0:	40012c00 	.word	0x40012c00
 8010bc4:	40013400 	.word	0x40013400
 8010bc8:	40014000 	.word	0x40014000
 8010bcc:	40014400 	.word	0x40014400
 8010bd0:	40014800 	.word	0x40014800

08010bd4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b086      	sub	sp, #24
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
 8010bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010bde:	2300      	movs	r3, #0
 8010be0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	689b      	ldr	r3, [r3, #8]
 8010be8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010bea:	693b      	ldr	r3, [r7, #16]
 8010bec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010bf0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	685b      	ldr	r3, [r3, #4]
 8010bf6:	693a      	ldr	r2, [r7, #16]
 8010bf8:	4313      	orrs	r3, r2
 8010bfa:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8010bfc:	693b      	ldr	r3, [r7, #16]
 8010bfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010c02:	f023 0307 	bic.w	r3, r3, #7
 8010c06:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	693a      	ldr	r2, [r7, #16]
 8010c0e:	4313      	orrs	r3, r2
 8010c10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	693a      	ldr	r2, [r7, #16]
 8010c18:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8010c1a:	683b      	ldr	r3, [r7, #0]
 8010c1c:	685b      	ldr	r3, [r3, #4]
 8010c1e:	2b70      	cmp	r3, #112	@ 0x70
 8010c20:	d01a      	beq.n	8010c58 <TIM_SlaveTimer_SetConfig+0x84>
 8010c22:	2b70      	cmp	r3, #112	@ 0x70
 8010c24:	d860      	bhi.n	8010ce8 <TIM_SlaveTimer_SetConfig+0x114>
 8010c26:	2b60      	cmp	r3, #96	@ 0x60
 8010c28:	d054      	beq.n	8010cd4 <TIM_SlaveTimer_SetConfig+0x100>
 8010c2a:	2b60      	cmp	r3, #96	@ 0x60
 8010c2c:	d85c      	bhi.n	8010ce8 <TIM_SlaveTimer_SetConfig+0x114>
 8010c2e:	2b50      	cmp	r3, #80	@ 0x50
 8010c30:	d046      	beq.n	8010cc0 <TIM_SlaveTimer_SetConfig+0xec>
 8010c32:	2b50      	cmp	r3, #80	@ 0x50
 8010c34:	d858      	bhi.n	8010ce8 <TIM_SlaveTimer_SetConfig+0x114>
 8010c36:	2b40      	cmp	r3, #64	@ 0x40
 8010c38:	d019      	beq.n	8010c6e <TIM_SlaveTimer_SetConfig+0x9a>
 8010c3a:	2b40      	cmp	r3, #64	@ 0x40
 8010c3c:	d854      	bhi.n	8010ce8 <TIM_SlaveTimer_SetConfig+0x114>
 8010c3e:	2b30      	cmp	r3, #48	@ 0x30
 8010c40:	d055      	beq.n	8010cee <TIM_SlaveTimer_SetConfig+0x11a>
 8010c42:	2b30      	cmp	r3, #48	@ 0x30
 8010c44:	d850      	bhi.n	8010ce8 <TIM_SlaveTimer_SetConfig+0x114>
 8010c46:	2b20      	cmp	r3, #32
 8010c48:	d051      	beq.n	8010cee <TIM_SlaveTimer_SetConfig+0x11a>
 8010c4a:	2b20      	cmp	r3, #32
 8010c4c:	d84c      	bhi.n	8010ce8 <TIM_SlaveTimer_SetConfig+0x114>
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d04d      	beq.n	8010cee <TIM_SlaveTimer_SetConfig+0x11a>
 8010c52:	2b10      	cmp	r3, #16
 8010c54:	d04b      	beq.n	8010cee <TIM_SlaveTimer_SetConfig+0x11a>
 8010c56:	e047      	b.n	8010ce8 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8010c5c:	683b      	ldr	r3, [r7, #0]
 8010c5e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8010c68:	f000 f9e6 	bl	8011038 <TIM_ETR_SetConfig>
      break;
 8010c6c:	e040      	b.n	8010cf0 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	2b05      	cmp	r3, #5
 8010c74:	d101      	bne.n	8010c7a <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8010c76:	2301      	movs	r3, #1
 8010c78:	e03b      	b.n	8010cf2 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	6a1b      	ldr	r3, [r3, #32]
 8010c80:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	6a1a      	ldr	r2, [r3, #32]
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	f022 0201 	bic.w	r2, r2, #1
 8010c90:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	699b      	ldr	r3, [r3, #24]
 8010c98:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010ca0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	691b      	ldr	r3, [r3, #16]
 8010ca6:	011b      	lsls	r3, r3, #4
 8010ca8:	68ba      	ldr	r2, [r7, #8]
 8010caa:	4313      	orrs	r3, r2
 8010cac:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	68ba      	ldr	r2, [r7, #8]
 8010cb4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	68fa      	ldr	r2, [r7, #12]
 8010cbc:	621a      	str	r2, [r3, #32]
      break;
 8010cbe:	e017      	b.n	8010cf0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8010cc4:	683b      	ldr	r3, [r7, #0]
 8010cc6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010ccc:	461a      	mov	r2, r3
 8010cce:	f000 f883 	bl	8010dd8 <TIM_TI1_ConfigInputStage>
      break;
 8010cd2:	e00d      	b.n	8010cf0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8010cdc:	683b      	ldr	r3, [r7, #0]
 8010cde:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010ce0:	461a      	mov	r2, r3
 8010ce2:	f000 f8e5 	bl	8010eb0 <TIM_TI2_ConfigInputStage>
      break;
 8010ce6:	e003      	b.n	8010cf0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8010ce8:	2301      	movs	r3, #1
 8010cea:	75fb      	strb	r3, [r7, #23]
      break;
 8010cec:	e000      	b.n	8010cf0 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8010cee:	bf00      	nop
  }

  return status;
 8010cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	3718      	adds	r7, #24
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd80      	pop	{r7, pc}
	...

08010cfc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8010cfc:	b480      	push	{r7}
 8010cfe:	b087      	sub	sp, #28
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	60f8      	str	r0, [r7, #12]
 8010d04:	60b9      	str	r1, [r7, #8]
 8010d06:	607a      	str	r2, [r7, #4]
 8010d08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	6a1b      	ldr	r3, [r3, #32]
 8010d0e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	6a1b      	ldr	r3, [r3, #32]
 8010d14:	f023 0201 	bic.w	r2, r3, #1
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	699b      	ldr	r3, [r3, #24]
 8010d20:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	4a26      	ldr	r2, [pc, #152]	@ (8010dc0 <TIM_TI1_SetConfig+0xc4>)
 8010d26:	4293      	cmp	r3, r2
 8010d28:	d017      	beq.n	8010d5a <TIM_TI1_SetConfig+0x5e>
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010d30:	d013      	beq.n	8010d5a <TIM_TI1_SetConfig+0x5e>
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	4a23      	ldr	r2, [pc, #140]	@ (8010dc4 <TIM_TI1_SetConfig+0xc8>)
 8010d36:	4293      	cmp	r3, r2
 8010d38:	d00f      	beq.n	8010d5a <TIM_TI1_SetConfig+0x5e>
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	4a22      	ldr	r2, [pc, #136]	@ (8010dc8 <TIM_TI1_SetConfig+0xcc>)
 8010d3e:	4293      	cmp	r3, r2
 8010d40:	d00b      	beq.n	8010d5a <TIM_TI1_SetConfig+0x5e>
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	4a21      	ldr	r2, [pc, #132]	@ (8010dcc <TIM_TI1_SetConfig+0xd0>)
 8010d46:	4293      	cmp	r3, r2
 8010d48:	d007      	beq.n	8010d5a <TIM_TI1_SetConfig+0x5e>
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	4a20      	ldr	r2, [pc, #128]	@ (8010dd0 <TIM_TI1_SetConfig+0xd4>)
 8010d4e:	4293      	cmp	r3, r2
 8010d50:	d003      	beq.n	8010d5a <TIM_TI1_SetConfig+0x5e>
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	4a1f      	ldr	r2, [pc, #124]	@ (8010dd4 <TIM_TI1_SetConfig+0xd8>)
 8010d56:	4293      	cmp	r3, r2
 8010d58:	d101      	bne.n	8010d5e <TIM_TI1_SetConfig+0x62>
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	e000      	b.n	8010d60 <TIM_TI1_SetConfig+0x64>
 8010d5e:	2300      	movs	r3, #0
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d008      	beq.n	8010d76 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8010d64:	697b      	ldr	r3, [r7, #20]
 8010d66:	f023 0303 	bic.w	r3, r3, #3
 8010d6a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8010d6c:	697a      	ldr	r2, [r7, #20]
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	4313      	orrs	r3, r2
 8010d72:	617b      	str	r3, [r7, #20]
 8010d74:	e003      	b.n	8010d7e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8010d76:	697b      	ldr	r3, [r7, #20]
 8010d78:	f043 0301 	orr.w	r3, r3, #1
 8010d7c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010d7e:	697b      	ldr	r3, [r7, #20]
 8010d80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010d84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	011b      	lsls	r3, r3, #4
 8010d8a:	b2db      	uxtb	r3, r3
 8010d8c:	697a      	ldr	r2, [r7, #20]
 8010d8e:	4313      	orrs	r3, r2
 8010d90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010d92:	693b      	ldr	r3, [r7, #16]
 8010d94:	f023 030a 	bic.w	r3, r3, #10
 8010d98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8010d9a:	68bb      	ldr	r3, [r7, #8]
 8010d9c:	f003 030a 	and.w	r3, r3, #10
 8010da0:	693a      	ldr	r2, [r7, #16]
 8010da2:	4313      	orrs	r3, r2
 8010da4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	697a      	ldr	r2, [r7, #20]
 8010daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	693a      	ldr	r2, [r7, #16]
 8010db0:	621a      	str	r2, [r3, #32]
}
 8010db2:	bf00      	nop
 8010db4:	371c      	adds	r7, #28
 8010db6:	46bd      	mov	sp, r7
 8010db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbc:	4770      	bx	lr
 8010dbe:	bf00      	nop
 8010dc0:	40012c00 	.word	0x40012c00
 8010dc4:	40000400 	.word	0x40000400
 8010dc8:	40000800 	.word	0x40000800
 8010dcc:	40000c00 	.word	0x40000c00
 8010dd0:	40013400 	.word	0x40013400
 8010dd4:	40014000 	.word	0x40014000

08010dd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010dd8:	b480      	push	{r7}
 8010dda:	b087      	sub	sp, #28
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	60f8      	str	r0, [r7, #12]
 8010de0:	60b9      	str	r1, [r7, #8]
 8010de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	6a1b      	ldr	r3, [r3, #32]
 8010de8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	6a1b      	ldr	r3, [r3, #32]
 8010dee:	f023 0201 	bic.w	r2, r3, #1
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	699b      	ldr	r3, [r3, #24]
 8010dfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010dfc:	693b      	ldr	r3, [r7, #16]
 8010dfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	011b      	lsls	r3, r3, #4
 8010e08:	693a      	ldr	r2, [r7, #16]
 8010e0a:	4313      	orrs	r3, r2
 8010e0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010e0e:	697b      	ldr	r3, [r7, #20]
 8010e10:	f023 030a 	bic.w	r3, r3, #10
 8010e14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010e16:	697a      	ldr	r2, [r7, #20]
 8010e18:	68bb      	ldr	r3, [r7, #8]
 8010e1a:	4313      	orrs	r3, r2
 8010e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	693a      	ldr	r2, [r7, #16]
 8010e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	697a      	ldr	r2, [r7, #20]
 8010e28:	621a      	str	r2, [r3, #32]
}
 8010e2a:	bf00      	nop
 8010e2c:	371c      	adds	r7, #28
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e34:	4770      	bx	lr

08010e36 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010e36:	b480      	push	{r7}
 8010e38:	b087      	sub	sp, #28
 8010e3a:	af00      	add	r7, sp, #0
 8010e3c:	60f8      	str	r0, [r7, #12]
 8010e3e:	60b9      	str	r1, [r7, #8]
 8010e40:	607a      	str	r2, [r7, #4]
 8010e42:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	6a1b      	ldr	r3, [r3, #32]
 8010e48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	6a1b      	ldr	r3, [r3, #32]
 8010e4e:	f023 0210 	bic.w	r2, r3, #16
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	699b      	ldr	r3, [r3, #24]
 8010e5a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8010e5c:	693b      	ldr	r3, [r7, #16]
 8010e5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	021b      	lsls	r3, r3, #8
 8010e68:	693a      	ldr	r2, [r7, #16]
 8010e6a:	4313      	orrs	r3, r2
 8010e6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010e6e:	693b      	ldr	r3, [r7, #16]
 8010e70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010e74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8010e76:	683b      	ldr	r3, [r7, #0]
 8010e78:	031b      	lsls	r3, r3, #12
 8010e7a:	b29b      	uxth	r3, r3
 8010e7c:	693a      	ldr	r2, [r7, #16]
 8010e7e:	4313      	orrs	r3, r2
 8010e80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010e88:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	011b      	lsls	r3, r3, #4
 8010e8e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8010e92:	697a      	ldr	r2, [r7, #20]
 8010e94:	4313      	orrs	r3, r2
 8010e96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	693a      	ldr	r2, [r7, #16]
 8010e9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	697a      	ldr	r2, [r7, #20]
 8010ea2:	621a      	str	r2, [r3, #32]
}
 8010ea4:	bf00      	nop
 8010ea6:	371c      	adds	r7, #28
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eae:	4770      	bx	lr

08010eb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010eb0:	b480      	push	{r7}
 8010eb2:	b087      	sub	sp, #28
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	60f8      	str	r0, [r7, #12]
 8010eb8:	60b9      	str	r1, [r7, #8]
 8010eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	6a1b      	ldr	r3, [r3, #32]
 8010ec0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	6a1b      	ldr	r3, [r3, #32]
 8010ec6:	f023 0210 	bic.w	r2, r3, #16
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	699b      	ldr	r3, [r3, #24]
 8010ed2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010ed4:	693b      	ldr	r3, [r7, #16]
 8010ed6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	031b      	lsls	r3, r3, #12
 8010ee0:	693a      	ldr	r2, [r7, #16]
 8010ee2:	4313      	orrs	r3, r2
 8010ee4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010ee6:	697b      	ldr	r3, [r7, #20]
 8010ee8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010eec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	011b      	lsls	r3, r3, #4
 8010ef2:	697a      	ldr	r2, [r7, #20]
 8010ef4:	4313      	orrs	r3, r2
 8010ef6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	693a      	ldr	r2, [r7, #16]
 8010efc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	697a      	ldr	r2, [r7, #20]
 8010f02:	621a      	str	r2, [r3, #32]
}
 8010f04:	bf00      	nop
 8010f06:	371c      	adds	r7, #28
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0e:	4770      	bx	lr

08010f10 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010f10:	b480      	push	{r7}
 8010f12:	b087      	sub	sp, #28
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	60f8      	str	r0, [r7, #12]
 8010f18:	60b9      	str	r1, [r7, #8]
 8010f1a:	607a      	str	r2, [r7, #4]
 8010f1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	6a1b      	ldr	r3, [r3, #32]
 8010f22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	6a1b      	ldr	r3, [r3, #32]
 8010f28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	69db      	ldr	r3, [r3, #28]
 8010f34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8010f36:	693b      	ldr	r3, [r7, #16]
 8010f38:	f023 0303 	bic.w	r3, r3, #3
 8010f3c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8010f3e:	693a      	ldr	r2, [r7, #16]
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	4313      	orrs	r3, r2
 8010f44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8010f46:	693b      	ldr	r3, [r7, #16]
 8010f48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010f4c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	011b      	lsls	r3, r3, #4
 8010f52:	b2db      	uxtb	r3, r3
 8010f54:	693a      	ldr	r2, [r7, #16]
 8010f56:	4313      	orrs	r3, r2
 8010f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8010f5a:	697b      	ldr	r3, [r7, #20]
 8010f5c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8010f60:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8010f62:	68bb      	ldr	r3, [r7, #8]
 8010f64:	021b      	lsls	r3, r3, #8
 8010f66:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8010f6a:	697a      	ldr	r2, [r7, #20]
 8010f6c:	4313      	orrs	r3, r2
 8010f6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	693a      	ldr	r2, [r7, #16]
 8010f74:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	697a      	ldr	r2, [r7, #20]
 8010f7a:	621a      	str	r2, [r3, #32]
}
 8010f7c:	bf00      	nop
 8010f7e:	371c      	adds	r7, #28
 8010f80:	46bd      	mov	sp, r7
 8010f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f86:	4770      	bx	lr

08010f88 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010f88:	b480      	push	{r7}
 8010f8a:	b087      	sub	sp, #28
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	60f8      	str	r0, [r7, #12]
 8010f90:	60b9      	str	r1, [r7, #8]
 8010f92:	607a      	str	r2, [r7, #4]
 8010f94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	6a1b      	ldr	r3, [r3, #32]
 8010f9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	6a1b      	ldr	r3, [r3, #32]
 8010fa0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	69db      	ldr	r3, [r3, #28]
 8010fac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8010fae:	693b      	ldr	r3, [r7, #16]
 8010fb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010fb4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	021b      	lsls	r3, r3, #8
 8010fba:	693a      	ldr	r2, [r7, #16]
 8010fbc:	4313      	orrs	r3, r2
 8010fbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8010fc0:	693b      	ldr	r3, [r7, #16]
 8010fc2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010fc6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	031b      	lsls	r3, r3, #12
 8010fcc:	b29b      	uxth	r3, r3
 8010fce:	693a      	ldr	r2, [r7, #16]
 8010fd0:	4313      	orrs	r3, r2
 8010fd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8010fd4:	697b      	ldr	r3, [r7, #20]
 8010fd6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8010fda:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8010fdc:	68bb      	ldr	r3, [r7, #8]
 8010fde:	031b      	lsls	r3, r3, #12
 8010fe0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8010fe4:	697a      	ldr	r2, [r7, #20]
 8010fe6:	4313      	orrs	r3, r2
 8010fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	693a      	ldr	r2, [r7, #16]
 8010fee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	697a      	ldr	r2, [r7, #20]
 8010ff4:	621a      	str	r2, [r3, #32]
}
 8010ff6:	bf00      	nop
 8010ff8:	371c      	adds	r7, #28
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011000:	4770      	bx	lr

08011002 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011002:	b480      	push	{r7}
 8011004:	b085      	sub	sp, #20
 8011006:	af00      	add	r7, sp, #0
 8011008:	6078      	str	r0, [r7, #4]
 801100a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	689b      	ldr	r3, [r3, #8]
 8011010:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011018:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801101a:	683a      	ldr	r2, [r7, #0]
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	4313      	orrs	r3, r2
 8011020:	f043 0307 	orr.w	r3, r3, #7
 8011024:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	68fa      	ldr	r2, [r7, #12]
 801102a:	609a      	str	r2, [r3, #8]
}
 801102c:	bf00      	nop
 801102e:	3714      	adds	r7, #20
 8011030:	46bd      	mov	sp, r7
 8011032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011036:	4770      	bx	lr

08011038 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011038:	b480      	push	{r7}
 801103a:	b087      	sub	sp, #28
 801103c:	af00      	add	r7, sp, #0
 801103e:	60f8      	str	r0, [r7, #12]
 8011040:	60b9      	str	r1, [r7, #8]
 8011042:	607a      	str	r2, [r7, #4]
 8011044:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	689b      	ldr	r3, [r3, #8]
 801104a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801104c:	697b      	ldr	r3, [r7, #20]
 801104e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011052:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	021a      	lsls	r2, r3, #8
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	431a      	orrs	r2, r3
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	4313      	orrs	r3, r2
 8011060:	697a      	ldr	r2, [r7, #20]
 8011062:	4313      	orrs	r3, r2
 8011064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	697a      	ldr	r2, [r7, #20]
 801106a:	609a      	str	r2, [r3, #8]
}
 801106c:	bf00      	nop
 801106e:	371c      	adds	r7, #28
 8011070:	46bd      	mov	sp, r7
 8011072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011076:	4770      	bx	lr

08011078 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011078:	b480      	push	{r7}
 801107a:	b087      	sub	sp, #28
 801107c:	af00      	add	r7, sp, #0
 801107e:	60f8      	str	r0, [r7, #12]
 8011080:	60b9      	str	r1, [r7, #8]
 8011082:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	f003 031f 	and.w	r3, r3, #31
 801108a:	2201      	movs	r2, #1
 801108c:	fa02 f303 	lsl.w	r3, r2, r3
 8011090:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	6a1a      	ldr	r2, [r3, #32]
 8011096:	697b      	ldr	r3, [r7, #20]
 8011098:	43db      	mvns	r3, r3
 801109a:	401a      	ands	r2, r3
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	6a1a      	ldr	r2, [r3, #32]
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	f003 031f 	and.w	r3, r3, #31
 80110aa:	6879      	ldr	r1, [r7, #4]
 80110ac:	fa01 f303 	lsl.w	r3, r1, r3
 80110b0:	431a      	orrs	r2, r3
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	621a      	str	r2, [r3, #32]
}
 80110b6:	bf00      	nop
 80110b8:	371c      	adds	r7, #28
 80110ba:	46bd      	mov	sp, r7
 80110bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c0:	4770      	bx	lr
	...

080110c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80110c4:	b480      	push	{r7}
 80110c6:	b085      	sub	sp, #20
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
 80110cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80110d4:	2b01      	cmp	r3, #1
 80110d6:	d101      	bne.n	80110dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80110d8:	2302      	movs	r3, #2
 80110da:	e068      	b.n	80111ae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	2201      	movs	r2, #1
 80110e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2202      	movs	r2, #2
 80110e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	685b      	ldr	r3, [r3, #4]
 80110f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	689b      	ldr	r3, [r3, #8]
 80110fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	4a2e      	ldr	r2, [pc, #184]	@ (80111bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8011102:	4293      	cmp	r3, r2
 8011104:	d004      	beq.n	8011110 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	4a2d      	ldr	r2, [pc, #180]	@ (80111c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801110c:	4293      	cmp	r3, r2
 801110e:	d108      	bne.n	8011122 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8011116:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	685b      	ldr	r3, [r3, #4]
 801111c:	68fa      	ldr	r2, [r7, #12]
 801111e:	4313      	orrs	r3, r2
 8011120:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011128:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	68fa      	ldr	r2, [r7, #12]
 8011130:	4313      	orrs	r3, r2
 8011132:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	68fa      	ldr	r2, [r7, #12]
 801113a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	4a1e      	ldr	r2, [pc, #120]	@ (80111bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8011142:	4293      	cmp	r3, r2
 8011144:	d01d      	beq.n	8011182 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801114e:	d018      	beq.n	8011182 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	4a1b      	ldr	r2, [pc, #108]	@ (80111c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011156:	4293      	cmp	r3, r2
 8011158:	d013      	beq.n	8011182 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	4a1a      	ldr	r2, [pc, #104]	@ (80111c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011160:	4293      	cmp	r3, r2
 8011162:	d00e      	beq.n	8011182 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	4a18      	ldr	r2, [pc, #96]	@ (80111cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801116a:	4293      	cmp	r3, r2
 801116c:	d009      	beq.n	8011182 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	4a13      	ldr	r2, [pc, #76]	@ (80111c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8011174:	4293      	cmp	r3, r2
 8011176:	d004      	beq.n	8011182 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	4a14      	ldr	r2, [pc, #80]	@ (80111d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801117e:	4293      	cmp	r3, r2
 8011180:	d10c      	bne.n	801119c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011182:	68bb      	ldr	r3, [r7, #8]
 8011184:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011188:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	689b      	ldr	r3, [r3, #8]
 801118e:	68ba      	ldr	r2, [r7, #8]
 8011190:	4313      	orrs	r3, r2
 8011192:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	68ba      	ldr	r2, [r7, #8]
 801119a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2201      	movs	r2, #1
 80111a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	2200      	movs	r2, #0
 80111a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80111ac:	2300      	movs	r3, #0
}
 80111ae:	4618      	mov	r0, r3
 80111b0:	3714      	adds	r7, #20
 80111b2:	46bd      	mov	sp, r7
 80111b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b8:	4770      	bx	lr
 80111ba:	bf00      	nop
 80111bc:	40012c00 	.word	0x40012c00
 80111c0:	40013400 	.word	0x40013400
 80111c4:	40000400 	.word	0x40000400
 80111c8:	40000800 	.word	0x40000800
 80111cc:	40000c00 	.word	0x40000c00
 80111d0:	40014000 	.word	0x40014000

080111d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80111d4:	b480      	push	{r7}
 80111d6:	b085      	sub	sp, #20
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
 80111dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80111de:	2300      	movs	r3, #0
 80111e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80111e8:	2b01      	cmp	r3, #1
 80111ea:	d101      	bne.n	80111f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80111ec:	2302      	movs	r3, #2
 80111ee:	e065      	b.n	80112bc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	2201      	movs	r2, #1
 80111f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	68db      	ldr	r3, [r3, #12]
 8011202:	4313      	orrs	r3, r2
 8011204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801120c:	683b      	ldr	r3, [r7, #0]
 801120e:	689b      	ldr	r3, [r3, #8]
 8011210:	4313      	orrs	r3, r2
 8011212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	685b      	ldr	r3, [r3, #4]
 801121e:	4313      	orrs	r3, r2
 8011220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	4313      	orrs	r3, r2
 801122e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	691b      	ldr	r3, [r3, #16]
 801123a:	4313      	orrs	r3, r2
 801123c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	695b      	ldr	r3, [r3, #20]
 8011248:	4313      	orrs	r3, r2
 801124a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8011252:	683b      	ldr	r3, [r7, #0]
 8011254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011256:	4313      	orrs	r3, r2
 8011258:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	699b      	ldr	r3, [r3, #24]
 8011264:	041b      	lsls	r3, r3, #16
 8011266:	4313      	orrs	r3, r2
 8011268:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	4a16      	ldr	r2, [pc, #88]	@ (80112c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8011270:	4293      	cmp	r3, r2
 8011272:	d004      	beq.n	801127e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	4a14      	ldr	r2, [pc, #80]	@ (80112cc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801127a:	4293      	cmp	r3, r2
 801127c:	d115      	bne.n	80112aa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011288:	051b      	lsls	r3, r3, #20
 801128a:	4313      	orrs	r3, r2
 801128c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	69db      	ldr	r3, [r3, #28]
 8011298:	4313      	orrs	r3, r2
 801129a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	6a1b      	ldr	r3, [r3, #32]
 80112a6:	4313      	orrs	r3, r2
 80112a8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	68fa      	ldr	r2, [r7, #12]
 80112b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	2200      	movs	r2, #0
 80112b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80112ba:	2300      	movs	r3, #0
}
 80112bc:	4618      	mov	r0, r3
 80112be:	3714      	adds	r7, #20
 80112c0:	46bd      	mov	sp, r7
 80112c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c6:	4770      	bx	lr
 80112c8:	40012c00 	.word	0x40012c00
 80112cc:	40013400 	.word	0x40013400

080112d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b082      	sub	sp, #8
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d101      	bne.n	80112e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80112de:	2301      	movs	r3, #1
 80112e0:	e040      	b.n	8011364 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d106      	bne.n	80112f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	2200      	movs	r2, #0
 80112ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80112f2:	6878      	ldr	r0, [r7, #4]
 80112f4:	f7f4 fae6 	bl	80058c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	2224      	movs	r2, #36	@ 0x24
 80112fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	681a      	ldr	r2, [r3, #0]
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	f022 0201 	bic.w	r2, r2, #1
 801130c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011312:	2b00      	cmp	r3, #0
 8011314:	d002      	beq.n	801131c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8011316:	6878      	ldr	r0, [r7, #4]
 8011318:	f000 fd22 	bl	8011d60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801131c:	6878      	ldr	r0, [r7, #4]
 801131e:	f000 fa67 	bl	80117f0 <UART_SetConfig>
 8011322:	4603      	mov	r3, r0
 8011324:	2b01      	cmp	r3, #1
 8011326:	d101      	bne.n	801132c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8011328:	2301      	movs	r3, #1
 801132a:	e01b      	b.n	8011364 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	685a      	ldr	r2, [r3, #4]
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801133a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	689a      	ldr	r2, [r3, #8]
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801134a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	681a      	ldr	r2, [r3, #0]
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	f042 0201 	orr.w	r2, r2, #1
 801135a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f000 fda1 	bl	8011ea4 <UART_CheckIdleState>
 8011362:	4603      	mov	r3, r0
}
 8011364:	4618      	mov	r0, r3
 8011366:	3708      	adds	r7, #8
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}

0801136c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b082      	sub	sp, #8
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d101      	bne.n	801137e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 801137a:	2301      	movs	r3, #1
 801137c:	e048      	b.n	8011410 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011382:	2b00      	cmp	r3, #0
 8011384:	d106      	bne.n	8011394 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	2200      	movs	r2, #0
 801138a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801138e:	6878      	ldr	r0, [r7, #4]
 8011390:	f7f4 fa98 	bl	80058c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	2224      	movs	r2, #36	@ 0x24
 8011398:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	681a      	ldr	r2, [r3, #0]
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	f022 0201 	bic.w	r2, r2, #1
 80113a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d002      	beq.n	80113b8 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80113b2:	6878      	ldr	r0, [r7, #4]
 80113b4:	f000 fcd4 	bl	8011d60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	f000 fa19 	bl	80117f0 <UART_SetConfig>
 80113be:	4603      	mov	r3, r0
 80113c0:	2b01      	cmp	r3, #1
 80113c2:	d101      	bne.n	80113c8 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 80113c4:	2301      	movs	r3, #1
 80113c6:	e023      	b.n	8011410 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	685a      	ldr	r2, [r3, #4]
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80113d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	689a      	ldr	r2, [r3, #8]
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80113e6:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	689a      	ldr	r2, [r3, #8]
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	f042 0208 	orr.w	r2, r2, #8
 80113f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	681a      	ldr	r2, [r3, #0]
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	f042 0201 	orr.w	r2, r2, #1
 8011406:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011408:	6878      	ldr	r0, [r7, #4]
 801140a:	f000 fd4b 	bl	8011ea4 <UART_CheckIdleState>
 801140e:	4603      	mov	r3, r0
}
 8011410:	4618      	mov	r0, r3
 8011412:	3708      	adds	r7, #8
 8011414:	46bd      	mov	sp, r7
 8011416:	bd80      	pop	{r7, pc}

08011418 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b08a      	sub	sp, #40	@ 0x28
 801141c:	af02      	add	r7, sp, #8
 801141e:	60f8      	str	r0, [r7, #12]
 8011420:	60b9      	str	r1, [r7, #8]
 8011422:	603b      	str	r3, [r7, #0]
 8011424:	4613      	mov	r3, r2
 8011426:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801142c:	2b20      	cmp	r3, #32
 801142e:	d177      	bne.n	8011520 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d002      	beq.n	801143c <HAL_UART_Transmit+0x24>
 8011436:	88fb      	ldrh	r3, [r7, #6]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d101      	bne.n	8011440 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801143c:	2301      	movs	r3, #1
 801143e:	e070      	b.n	8011522 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	2200      	movs	r2, #0
 8011444:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	2221      	movs	r2, #33	@ 0x21
 801144c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801144e:	f7f7 fcf9 	bl	8008e44 <HAL_GetTick>
 8011452:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	88fa      	ldrh	r2, [r7, #6]
 8011458:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	88fa      	ldrh	r2, [r7, #6]
 8011460:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	689b      	ldr	r3, [r3, #8]
 8011468:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801146c:	d108      	bne.n	8011480 <HAL_UART_Transmit+0x68>
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	691b      	ldr	r3, [r3, #16]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d104      	bne.n	8011480 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8011476:	2300      	movs	r3, #0
 8011478:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801147a:	68bb      	ldr	r3, [r7, #8]
 801147c:	61bb      	str	r3, [r7, #24]
 801147e:	e003      	b.n	8011488 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8011480:	68bb      	ldr	r3, [r7, #8]
 8011482:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011484:	2300      	movs	r3, #0
 8011486:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011488:	e02f      	b.n	80114ea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	9300      	str	r3, [sp, #0]
 801148e:	697b      	ldr	r3, [r7, #20]
 8011490:	2200      	movs	r2, #0
 8011492:	2180      	movs	r1, #128	@ 0x80
 8011494:	68f8      	ldr	r0, [r7, #12]
 8011496:	f000 fdad 	bl	8011ff4 <UART_WaitOnFlagUntilTimeout>
 801149a:	4603      	mov	r3, r0
 801149c:	2b00      	cmp	r3, #0
 801149e:	d004      	beq.n	80114aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	2220      	movs	r2, #32
 80114a4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80114a6:	2303      	movs	r3, #3
 80114a8:	e03b      	b.n	8011522 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80114aa:	69fb      	ldr	r3, [r7, #28]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d10b      	bne.n	80114c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80114b0:	69bb      	ldr	r3, [r7, #24]
 80114b2:	881a      	ldrh	r2, [r3, #0]
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80114bc:	b292      	uxth	r2, r2
 80114be:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80114c0:	69bb      	ldr	r3, [r7, #24]
 80114c2:	3302      	adds	r3, #2
 80114c4:	61bb      	str	r3, [r7, #24]
 80114c6:	e007      	b.n	80114d8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80114c8:	69fb      	ldr	r3, [r7, #28]
 80114ca:	781a      	ldrb	r2, [r3, #0]
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80114d2:	69fb      	ldr	r3, [r7, #28]
 80114d4:	3301      	adds	r3, #1
 80114d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80114de:	b29b      	uxth	r3, r3
 80114e0:	3b01      	subs	r3, #1
 80114e2:	b29a      	uxth	r2, r3
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80114f0:	b29b      	uxth	r3, r3
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d1c9      	bne.n	801148a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80114f6:	683b      	ldr	r3, [r7, #0]
 80114f8:	9300      	str	r3, [sp, #0]
 80114fa:	697b      	ldr	r3, [r7, #20]
 80114fc:	2200      	movs	r2, #0
 80114fe:	2140      	movs	r1, #64	@ 0x40
 8011500:	68f8      	ldr	r0, [r7, #12]
 8011502:	f000 fd77 	bl	8011ff4 <UART_WaitOnFlagUntilTimeout>
 8011506:	4603      	mov	r3, r0
 8011508:	2b00      	cmp	r3, #0
 801150a:	d004      	beq.n	8011516 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	2220      	movs	r2, #32
 8011510:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8011512:	2303      	movs	r3, #3
 8011514:	e005      	b.n	8011522 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	2220      	movs	r2, #32
 801151a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801151c:	2300      	movs	r3, #0
 801151e:	e000      	b.n	8011522 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8011520:	2302      	movs	r3, #2
  }
}
 8011522:	4618      	mov	r0, r3
 8011524:	3720      	adds	r7, #32
 8011526:	46bd      	mov	sp, r7
 8011528:	bd80      	pop	{r7, pc}

0801152a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801152a:	b580      	push	{r7, lr}
 801152c:	b08a      	sub	sp, #40	@ 0x28
 801152e:	af02      	add	r7, sp, #8
 8011530:	60f8      	str	r0, [r7, #12]
 8011532:	60b9      	str	r1, [r7, #8]
 8011534:	603b      	str	r3, [r7, #0]
 8011536:	4613      	mov	r3, r2
 8011538:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011540:	2b20      	cmp	r3, #32
 8011542:	f040 80b6 	bne.w	80116b2 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8011546:	68bb      	ldr	r3, [r7, #8]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d002      	beq.n	8011552 <HAL_UART_Receive+0x28>
 801154c:	88fb      	ldrh	r3, [r7, #6]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d101      	bne.n	8011556 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8011552:	2301      	movs	r3, #1
 8011554:	e0ae      	b.n	80116b4 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	2200      	movs	r2, #0
 801155a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	2222      	movs	r2, #34	@ 0x22
 8011562:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	2200      	movs	r2, #0
 801156a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801156c:	f7f7 fc6a 	bl	8008e44 <HAL_GetTick>
 8011570:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	88fa      	ldrh	r2, [r7, #6]
 8011576:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	88fa      	ldrh	r2, [r7, #6]
 801157e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	689b      	ldr	r3, [r3, #8]
 8011586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801158a:	d10e      	bne.n	80115aa <HAL_UART_Receive+0x80>
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	691b      	ldr	r3, [r3, #16]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d105      	bne.n	80115a0 <HAL_UART_Receive+0x76>
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801159a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801159e:	e02d      	b.n	80115fc <HAL_UART_Receive+0xd2>
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	22ff      	movs	r2, #255	@ 0xff
 80115a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80115a8:	e028      	b.n	80115fc <HAL_UART_Receive+0xd2>
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	689b      	ldr	r3, [r3, #8]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d10d      	bne.n	80115ce <HAL_UART_Receive+0xa4>
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	691b      	ldr	r3, [r3, #16]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d104      	bne.n	80115c4 <HAL_UART_Receive+0x9a>
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	22ff      	movs	r2, #255	@ 0xff
 80115be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80115c2:	e01b      	b.n	80115fc <HAL_UART_Receive+0xd2>
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	227f      	movs	r2, #127	@ 0x7f
 80115c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80115cc:	e016      	b.n	80115fc <HAL_UART_Receive+0xd2>
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	689b      	ldr	r3, [r3, #8]
 80115d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80115d6:	d10d      	bne.n	80115f4 <HAL_UART_Receive+0xca>
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	691b      	ldr	r3, [r3, #16]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d104      	bne.n	80115ea <HAL_UART_Receive+0xc0>
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	227f      	movs	r2, #127	@ 0x7f
 80115e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80115e8:	e008      	b.n	80115fc <HAL_UART_Receive+0xd2>
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	223f      	movs	r2, #63	@ 0x3f
 80115ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80115f2:	e003      	b.n	80115fc <HAL_UART_Receive+0xd2>
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	2200      	movs	r2, #0
 80115f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011602:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	689b      	ldr	r3, [r3, #8]
 8011608:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801160c:	d108      	bne.n	8011620 <HAL_UART_Receive+0xf6>
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	691b      	ldr	r3, [r3, #16]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d104      	bne.n	8011620 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8011616:	2300      	movs	r3, #0
 8011618:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801161a:	68bb      	ldr	r3, [r7, #8]
 801161c:	61bb      	str	r3, [r7, #24]
 801161e:	e003      	b.n	8011628 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011624:	2300      	movs	r3, #0
 8011626:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8011628:	e037      	b.n	801169a <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801162a:	683b      	ldr	r3, [r7, #0]
 801162c:	9300      	str	r3, [sp, #0]
 801162e:	697b      	ldr	r3, [r7, #20]
 8011630:	2200      	movs	r2, #0
 8011632:	2120      	movs	r1, #32
 8011634:	68f8      	ldr	r0, [r7, #12]
 8011636:	f000 fcdd 	bl	8011ff4 <UART_WaitOnFlagUntilTimeout>
 801163a:	4603      	mov	r3, r0
 801163c:	2b00      	cmp	r3, #0
 801163e:	d005      	beq.n	801164c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	2220      	movs	r2, #32
 8011644:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8011648:	2303      	movs	r3, #3
 801164a:	e033      	b.n	80116b4 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 801164c:	69fb      	ldr	r3, [r7, #28]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d10c      	bne.n	801166c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011658:	b29a      	uxth	r2, r3
 801165a:	8a7b      	ldrh	r3, [r7, #18]
 801165c:	4013      	ands	r3, r2
 801165e:	b29a      	uxth	r2, r3
 8011660:	69bb      	ldr	r3, [r7, #24]
 8011662:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8011664:	69bb      	ldr	r3, [r7, #24]
 8011666:	3302      	adds	r3, #2
 8011668:	61bb      	str	r3, [r7, #24]
 801166a:	e00d      	b.n	8011688 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011672:	b29b      	uxth	r3, r3
 8011674:	b2da      	uxtb	r2, r3
 8011676:	8a7b      	ldrh	r3, [r7, #18]
 8011678:	b2db      	uxtb	r3, r3
 801167a:	4013      	ands	r3, r2
 801167c:	b2da      	uxtb	r2, r3
 801167e:	69fb      	ldr	r3, [r7, #28]
 8011680:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8011682:	69fb      	ldr	r3, [r7, #28]
 8011684:	3301      	adds	r3, #1
 8011686:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801168e:	b29b      	uxth	r3, r3
 8011690:	3b01      	subs	r3, #1
 8011692:	b29a      	uxth	r2, r3
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80116a0:	b29b      	uxth	r3, r3
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d1c1      	bne.n	801162a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	2220      	movs	r2, #32
 80116aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80116ae:	2300      	movs	r3, #0
 80116b0:	e000      	b.n	80116b4 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80116b2:	2302      	movs	r3, #2
  }
}
 80116b4:	4618      	mov	r0, r3
 80116b6:	3720      	adds	r7, #32
 80116b8:	46bd      	mov	sp, r7
 80116ba:	bd80      	pop	{r7, pc}

080116bc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b08a      	sub	sp, #40	@ 0x28
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	60f8      	str	r0, [r7, #12]
 80116c4:	60b9      	str	r1, [r7, #8]
 80116c6:	4613      	mov	r3, r2
 80116c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80116ce:	2b20      	cmp	r3, #32
 80116d0:	d165      	bne.n	801179e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80116d2:	68bb      	ldr	r3, [r7, #8]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d002      	beq.n	80116de <HAL_UART_Transmit_DMA+0x22>
 80116d8:	88fb      	ldrh	r3, [r7, #6]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d101      	bne.n	80116e2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80116de:	2301      	movs	r3, #1
 80116e0:	e05e      	b.n	80117a0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	68ba      	ldr	r2, [r7, #8]
 80116e6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	88fa      	ldrh	r2, [r7, #6]
 80116ec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	88fa      	ldrh	r2, [r7, #6]
 80116f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	2200      	movs	r2, #0
 80116fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	2221      	movs	r2, #33	@ 0x21
 8011704:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801170a:	2b00      	cmp	r3, #0
 801170c:	d027      	beq.n	801175e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011712:	4a25      	ldr	r2, [pc, #148]	@ (80117a8 <HAL_UART_Transmit_DMA+0xec>)
 8011714:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801171a:	4a24      	ldr	r2, [pc, #144]	@ (80117ac <HAL_UART_Transmit_DMA+0xf0>)
 801171c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011722:	4a23      	ldr	r2, [pc, #140]	@ (80117b0 <HAL_UART_Transmit_DMA+0xf4>)
 8011724:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801172a:	2200      	movs	r2, #0
 801172c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011736:	4619      	mov	r1, r3
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	3328      	adds	r3, #40	@ 0x28
 801173e:	461a      	mov	r2, r3
 8011740:	88fb      	ldrh	r3, [r7, #6]
 8011742:	f7f9 fa1f 	bl	800ab84 <HAL_DMA_Start_IT>
 8011746:	4603      	mov	r3, r0
 8011748:	2b00      	cmp	r3, #0
 801174a:	d008      	beq.n	801175e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	2210      	movs	r2, #16
 8011750:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	2220      	movs	r2, #32
 8011758:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801175a:	2301      	movs	r3, #1
 801175c:	e020      	b.n	80117a0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	2240      	movs	r2, #64	@ 0x40
 8011764:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	3308      	adds	r3, #8
 801176c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801176e:	697b      	ldr	r3, [r7, #20]
 8011770:	e853 3f00 	ldrex	r3, [r3]
 8011774:	613b      	str	r3, [r7, #16]
   return(result);
 8011776:	693b      	ldr	r3, [r7, #16]
 8011778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801177c:	627b      	str	r3, [r7, #36]	@ 0x24
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	3308      	adds	r3, #8
 8011784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011786:	623a      	str	r2, [r7, #32]
 8011788:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801178a:	69f9      	ldr	r1, [r7, #28]
 801178c:	6a3a      	ldr	r2, [r7, #32]
 801178e:	e841 2300 	strex	r3, r2, [r1]
 8011792:	61bb      	str	r3, [r7, #24]
   return(result);
 8011794:	69bb      	ldr	r3, [r7, #24]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d1e5      	bne.n	8011766 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 801179a:	2300      	movs	r3, #0
 801179c:	e000      	b.n	80117a0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 801179e:	2302      	movs	r3, #2
  }
}
 80117a0:	4618      	mov	r0, r3
 80117a2:	3728      	adds	r7, #40	@ 0x28
 80117a4:	46bd      	mov	sp, r7
 80117a6:	bd80      	pop	{r7, pc}
 80117a8:	08012325 	.word	0x08012325
 80117ac:	080123bf 	.word	0x080123bf
 80117b0:	08012545 	.word	0x08012545

080117b4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80117b4:	b480      	push	{r7}
 80117b6:	b083      	sub	sp, #12
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80117bc:	bf00      	nop
 80117be:	370c      	adds	r7, #12
 80117c0:	46bd      	mov	sp, r7
 80117c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c6:	4770      	bx	lr

080117c8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80117c8:	b480      	push	{r7}
 80117ca:	b083      	sub	sp, #12
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80117d0:	bf00      	nop
 80117d2:	370c      	adds	r7, #12
 80117d4:	46bd      	mov	sp, r7
 80117d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117da:	4770      	bx	lr

080117dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80117dc:	b480      	push	{r7}
 80117de:	b083      	sub	sp, #12
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80117e4:	bf00      	nop
 80117e6:	370c      	adds	r7, #12
 80117e8:	46bd      	mov	sp, r7
 80117ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ee:	4770      	bx	lr

080117f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80117f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80117f4:	b08a      	sub	sp, #40	@ 0x28
 80117f6:	af00      	add	r7, sp, #0
 80117f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80117fa:	2300      	movs	r3, #0
 80117fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	689a      	ldr	r2, [r3, #8]
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	691b      	ldr	r3, [r3, #16]
 8011808:	431a      	orrs	r2, r3
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	695b      	ldr	r3, [r3, #20]
 801180e:	431a      	orrs	r2, r3
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	69db      	ldr	r3, [r3, #28]
 8011814:	4313      	orrs	r3, r2
 8011816:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	681a      	ldr	r2, [r3, #0]
 801181e:	4ba4      	ldr	r3, [pc, #656]	@ (8011ab0 <UART_SetConfig+0x2c0>)
 8011820:	4013      	ands	r3, r2
 8011822:	68fa      	ldr	r2, [r7, #12]
 8011824:	6812      	ldr	r2, [r2, #0]
 8011826:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011828:	430b      	orrs	r3, r1
 801182a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	685b      	ldr	r3, [r3, #4]
 8011832:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	68da      	ldr	r2, [r3, #12]
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	430a      	orrs	r2, r1
 8011840:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	699b      	ldr	r3, [r3, #24]
 8011846:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	4a99      	ldr	r2, [pc, #612]	@ (8011ab4 <UART_SetConfig+0x2c4>)
 801184e:	4293      	cmp	r3, r2
 8011850:	d004      	beq.n	801185c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	6a1b      	ldr	r3, [r3, #32]
 8011856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011858:	4313      	orrs	r3, r2
 801185a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	689b      	ldr	r3, [r3, #8]
 8011862:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801186c:	430a      	orrs	r2, r1
 801186e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	4a90      	ldr	r2, [pc, #576]	@ (8011ab8 <UART_SetConfig+0x2c8>)
 8011876:	4293      	cmp	r3, r2
 8011878:	d126      	bne.n	80118c8 <UART_SetConfig+0xd8>
 801187a:	4b90      	ldr	r3, [pc, #576]	@ (8011abc <UART_SetConfig+0x2cc>)
 801187c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011880:	f003 0303 	and.w	r3, r3, #3
 8011884:	2b03      	cmp	r3, #3
 8011886:	d81b      	bhi.n	80118c0 <UART_SetConfig+0xd0>
 8011888:	a201      	add	r2, pc, #4	@ (adr r2, 8011890 <UART_SetConfig+0xa0>)
 801188a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801188e:	bf00      	nop
 8011890:	080118a1 	.word	0x080118a1
 8011894:	080118b1 	.word	0x080118b1
 8011898:	080118a9 	.word	0x080118a9
 801189c:	080118b9 	.word	0x080118b9
 80118a0:	2301      	movs	r3, #1
 80118a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80118a6:	e116      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 80118a8:	2302      	movs	r3, #2
 80118aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80118ae:	e112      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 80118b0:	2304      	movs	r3, #4
 80118b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80118b6:	e10e      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 80118b8:	2308      	movs	r3, #8
 80118ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80118be:	e10a      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 80118c0:	2310      	movs	r3, #16
 80118c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80118c6:	e106      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	4a7c      	ldr	r2, [pc, #496]	@ (8011ac0 <UART_SetConfig+0x2d0>)
 80118ce:	4293      	cmp	r3, r2
 80118d0:	d138      	bne.n	8011944 <UART_SetConfig+0x154>
 80118d2:	4b7a      	ldr	r3, [pc, #488]	@ (8011abc <UART_SetConfig+0x2cc>)
 80118d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80118d8:	f003 030c 	and.w	r3, r3, #12
 80118dc:	2b0c      	cmp	r3, #12
 80118de:	d82d      	bhi.n	801193c <UART_SetConfig+0x14c>
 80118e0:	a201      	add	r2, pc, #4	@ (adr r2, 80118e8 <UART_SetConfig+0xf8>)
 80118e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118e6:	bf00      	nop
 80118e8:	0801191d 	.word	0x0801191d
 80118ec:	0801193d 	.word	0x0801193d
 80118f0:	0801193d 	.word	0x0801193d
 80118f4:	0801193d 	.word	0x0801193d
 80118f8:	0801192d 	.word	0x0801192d
 80118fc:	0801193d 	.word	0x0801193d
 8011900:	0801193d 	.word	0x0801193d
 8011904:	0801193d 	.word	0x0801193d
 8011908:	08011925 	.word	0x08011925
 801190c:	0801193d 	.word	0x0801193d
 8011910:	0801193d 	.word	0x0801193d
 8011914:	0801193d 	.word	0x0801193d
 8011918:	08011935 	.word	0x08011935
 801191c:	2300      	movs	r3, #0
 801191e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011922:	e0d8      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 8011924:	2302      	movs	r3, #2
 8011926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801192a:	e0d4      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 801192c:	2304      	movs	r3, #4
 801192e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011932:	e0d0      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 8011934:	2308      	movs	r3, #8
 8011936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801193a:	e0cc      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 801193c:	2310      	movs	r3, #16
 801193e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011942:	e0c8      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	4a5e      	ldr	r2, [pc, #376]	@ (8011ac4 <UART_SetConfig+0x2d4>)
 801194a:	4293      	cmp	r3, r2
 801194c:	d125      	bne.n	801199a <UART_SetConfig+0x1aa>
 801194e:	4b5b      	ldr	r3, [pc, #364]	@ (8011abc <UART_SetConfig+0x2cc>)
 8011950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011954:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8011958:	2b30      	cmp	r3, #48	@ 0x30
 801195a:	d016      	beq.n	801198a <UART_SetConfig+0x19a>
 801195c:	2b30      	cmp	r3, #48	@ 0x30
 801195e:	d818      	bhi.n	8011992 <UART_SetConfig+0x1a2>
 8011960:	2b20      	cmp	r3, #32
 8011962:	d00a      	beq.n	801197a <UART_SetConfig+0x18a>
 8011964:	2b20      	cmp	r3, #32
 8011966:	d814      	bhi.n	8011992 <UART_SetConfig+0x1a2>
 8011968:	2b00      	cmp	r3, #0
 801196a:	d002      	beq.n	8011972 <UART_SetConfig+0x182>
 801196c:	2b10      	cmp	r3, #16
 801196e:	d008      	beq.n	8011982 <UART_SetConfig+0x192>
 8011970:	e00f      	b.n	8011992 <UART_SetConfig+0x1a2>
 8011972:	2300      	movs	r3, #0
 8011974:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011978:	e0ad      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 801197a:	2302      	movs	r3, #2
 801197c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011980:	e0a9      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 8011982:	2304      	movs	r3, #4
 8011984:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011988:	e0a5      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 801198a:	2308      	movs	r3, #8
 801198c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011990:	e0a1      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 8011992:	2310      	movs	r3, #16
 8011994:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011998:	e09d      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	4a4a      	ldr	r2, [pc, #296]	@ (8011ac8 <UART_SetConfig+0x2d8>)
 80119a0:	4293      	cmp	r3, r2
 80119a2:	d125      	bne.n	80119f0 <UART_SetConfig+0x200>
 80119a4:	4b45      	ldr	r3, [pc, #276]	@ (8011abc <UART_SetConfig+0x2cc>)
 80119a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80119aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80119ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80119b0:	d016      	beq.n	80119e0 <UART_SetConfig+0x1f0>
 80119b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80119b4:	d818      	bhi.n	80119e8 <UART_SetConfig+0x1f8>
 80119b6:	2b80      	cmp	r3, #128	@ 0x80
 80119b8:	d00a      	beq.n	80119d0 <UART_SetConfig+0x1e0>
 80119ba:	2b80      	cmp	r3, #128	@ 0x80
 80119bc:	d814      	bhi.n	80119e8 <UART_SetConfig+0x1f8>
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d002      	beq.n	80119c8 <UART_SetConfig+0x1d8>
 80119c2:	2b40      	cmp	r3, #64	@ 0x40
 80119c4:	d008      	beq.n	80119d8 <UART_SetConfig+0x1e8>
 80119c6:	e00f      	b.n	80119e8 <UART_SetConfig+0x1f8>
 80119c8:	2300      	movs	r3, #0
 80119ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80119ce:	e082      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 80119d0:	2302      	movs	r3, #2
 80119d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80119d6:	e07e      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 80119d8:	2304      	movs	r3, #4
 80119da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80119de:	e07a      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 80119e0:	2308      	movs	r3, #8
 80119e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80119e6:	e076      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 80119e8:	2310      	movs	r3, #16
 80119ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80119ee:	e072      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	4a35      	ldr	r2, [pc, #212]	@ (8011acc <UART_SetConfig+0x2dc>)
 80119f6:	4293      	cmp	r3, r2
 80119f8:	d12a      	bne.n	8011a50 <UART_SetConfig+0x260>
 80119fa:	4b30      	ldr	r3, [pc, #192]	@ (8011abc <UART_SetConfig+0x2cc>)
 80119fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011a00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011a04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011a08:	d01a      	beq.n	8011a40 <UART_SetConfig+0x250>
 8011a0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011a0e:	d81b      	bhi.n	8011a48 <UART_SetConfig+0x258>
 8011a10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011a14:	d00c      	beq.n	8011a30 <UART_SetConfig+0x240>
 8011a16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011a1a:	d815      	bhi.n	8011a48 <UART_SetConfig+0x258>
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d003      	beq.n	8011a28 <UART_SetConfig+0x238>
 8011a20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011a24:	d008      	beq.n	8011a38 <UART_SetConfig+0x248>
 8011a26:	e00f      	b.n	8011a48 <UART_SetConfig+0x258>
 8011a28:	2300      	movs	r3, #0
 8011a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011a2e:	e052      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 8011a30:	2302      	movs	r3, #2
 8011a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011a36:	e04e      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 8011a38:	2304      	movs	r3, #4
 8011a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011a3e:	e04a      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 8011a40:	2308      	movs	r3, #8
 8011a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011a46:	e046      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 8011a48:	2310      	movs	r3, #16
 8011a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011a4e:	e042      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	4a17      	ldr	r2, [pc, #92]	@ (8011ab4 <UART_SetConfig+0x2c4>)
 8011a56:	4293      	cmp	r3, r2
 8011a58:	d13a      	bne.n	8011ad0 <UART_SetConfig+0x2e0>
 8011a5a:	4b18      	ldr	r3, [pc, #96]	@ (8011abc <UART_SetConfig+0x2cc>)
 8011a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011a60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8011a64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011a68:	d01a      	beq.n	8011aa0 <UART_SetConfig+0x2b0>
 8011a6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011a6e:	d81b      	bhi.n	8011aa8 <UART_SetConfig+0x2b8>
 8011a70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011a74:	d00c      	beq.n	8011a90 <UART_SetConfig+0x2a0>
 8011a76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011a7a:	d815      	bhi.n	8011aa8 <UART_SetConfig+0x2b8>
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d003      	beq.n	8011a88 <UART_SetConfig+0x298>
 8011a80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011a84:	d008      	beq.n	8011a98 <UART_SetConfig+0x2a8>
 8011a86:	e00f      	b.n	8011aa8 <UART_SetConfig+0x2b8>
 8011a88:	2300      	movs	r3, #0
 8011a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011a8e:	e022      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 8011a90:	2302      	movs	r3, #2
 8011a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011a96:	e01e      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 8011a98:	2304      	movs	r3, #4
 8011a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011a9e:	e01a      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 8011aa0:	2308      	movs	r3, #8
 8011aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011aa6:	e016      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 8011aa8:	2310      	movs	r3, #16
 8011aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011aae:	e012      	b.n	8011ad6 <UART_SetConfig+0x2e6>
 8011ab0:	efff69f3 	.word	0xefff69f3
 8011ab4:	40008000 	.word	0x40008000
 8011ab8:	40013800 	.word	0x40013800
 8011abc:	40021000 	.word	0x40021000
 8011ac0:	40004400 	.word	0x40004400
 8011ac4:	40004800 	.word	0x40004800
 8011ac8:	40004c00 	.word	0x40004c00
 8011acc:	40005000 	.word	0x40005000
 8011ad0:	2310      	movs	r3, #16
 8011ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	4a9f      	ldr	r2, [pc, #636]	@ (8011d58 <UART_SetConfig+0x568>)
 8011adc:	4293      	cmp	r3, r2
 8011ade:	d17a      	bne.n	8011bd6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011ae0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011ae4:	2b08      	cmp	r3, #8
 8011ae6:	d824      	bhi.n	8011b32 <UART_SetConfig+0x342>
 8011ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8011af0 <UART_SetConfig+0x300>)
 8011aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aee:	bf00      	nop
 8011af0:	08011b15 	.word	0x08011b15
 8011af4:	08011b33 	.word	0x08011b33
 8011af8:	08011b1d 	.word	0x08011b1d
 8011afc:	08011b33 	.word	0x08011b33
 8011b00:	08011b23 	.word	0x08011b23
 8011b04:	08011b33 	.word	0x08011b33
 8011b08:	08011b33 	.word	0x08011b33
 8011b0c:	08011b33 	.word	0x08011b33
 8011b10:	08011b2b 	.word	0x08011b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011b14:	f7fb fb98 	bl	800d248 <HAL_RCC_GetPCLK1Freq>
 8011b18:	61f8      	str	r0, [r7, #28]
        break;
 8011b1a:	e010      	b.n	8011b3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011b1c:	4b8f      	ldr	r3, [pc, #572]	@ (8011d5c <UART_SetConfig+0x56c>)
 8011b1e:	61fb      	str	r3, [r7, #28]
        break;
 8011b20:	e00d      	b.n	8011b3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011b22:	f7fb faf9 	bl	800d118 <HAL_RCC_GetSysClockFreq>
 8011b26:	61f8      	str	r0, [r7, #28]
        break;
 8011b28:	e009      	b.n	8011b3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011b2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011b2e:	61fb      	str	r3, [r7, #28]
        break;
 8011b30:	e005      	b.n	8011b3e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8011b32:	2300      	movs	r3, #0
 8011b34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8011b36:	2301      	movs	r3, #1
 8011b38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8011b3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011b3e:	69fb      	ldr	r3, [r7, #28]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	f000 80fb 	beq.w	8011d3c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	685a      	ldr	r2, [r3, #4]
 8011b4a:	4613      	mov	r3, r2
 8011b4c:	005b      	lsls	r3, r3, #1
 8011b4e:	4413      	add	r3, r2
 8011b50:	69fa      	ldr	r2, [r7, #28]
 8011b52:	429a      	cmp	r2, r3
 8011b54:	d305      	bcc.n	8011b62 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	685b      	ldr	r3, [r3, #4]
 8011b5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8011b5c:	69fa      	ldr	r2, [r7, #28]
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	d903      	bls.n	8011b6a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8011b62:	2301      	movs	r3, #1
 8011b64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8011b68:	e0e8      	b.n	8011d3c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8011b6a:	69fb      	ldr	r3, [r7, #28]
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	461c      	mov	r4, r3
 8011b70:	4615      	mov	r5, r2
 8011b72:	f04f 0200 	mov.w	r2, #0
 8011b76:	f04f 0300 	mov.w	r3, #0
 8011b7a:	022b      	lsls	r3, r5, #8
 8011b7c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8011b80:	0222      	lsls	r2, r4, #8
 8011b82:	68f9      	ldr	r1, [r7, #12]
 8011b84:	6849      	ldr	r1, [r1, #4]
 8011b86:	0849      	lsrs	r1, r1, #1
 8011b88:	2000      	movs	r0, #0
 8011b8a:	4688      	mov	r8, r1
 8011b8c:	4681      	mov	r9, r0
 8011b8e:	eb12 0a08 	adds.w	sl, r2, r8
 8011b92:	eb43 0b09 	adc.w	fp, r3, r9
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	685b      	ldr	r3, [r3, #4]
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	603b      	str	r3, [r7, #0]
 8011b9e:	607a      	str	r2, [r7, #4]
 8011ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011ba4:	4650      	mov	r0, sl
 8011ba6:	4659      	mov	r1, fp
 8011ba8:	f7ee fb7a 	bl	80002a0 <__aeabi_uldivmod>
 8011bac:	4602      	mov	r2, r0
 8011bae:	460b      	mov	r3, r1
 8011bb0:	4613      	mov	r3, r2
 8011bb2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011bb4:	69bb      	ldr	r3, [r7, #24]
 8011bb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011bba:	d308      	bcc.n	8011bce <UART_SetConfig+0x3de>
 8011bbc:	69bb      	ldr	r3, [r7, #24]
 8011bbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011bc2:	d204      	bcs.n	8011bce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	69ba      	ldr	r2, [r7, #24]
 8011bca:	60da      	str	r2, [r3, #12]
 8011bcc:	e0b6      	b.n	8011d3c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8011bce:	2301      	movs	r3, #1
 8011bd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8011bd4:	e0b2      	b.n	8011d3c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	69db      	ldr	r3, [r3, #28]
 8011bda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011bde:	d15e      	bne.n	8011c9e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8011be0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011be4:	2b08      	cmp	r3, #8
 8011be6:	d828      	bhi.n	8011c3a <UART_SetConfig+0x44a>
 8011be8:	a201      	add	r2, pc, #4	@ (adr r2, 8011bf0 <UART_SetConfig+0x400>)
 8011bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bee:	bf00      	nop
 8011bf0:	08011c15 	.word	0x08011c15
 8011bf4:	08011c1d 	.word	0x08011c1d
 8011bf8:	08011c25 	.word	0x08011c25
 8011bfc:	08011c3b 	.word	0x08011c3b
 8011c00:	08011c2b 	.word	0x08011c2b
 8011c04:	08011c3b 	.word	0x08011c3b
 8011c08:	08011c3b 	.word	0x08011c3b
 8011c0c:	08011c3b 	.word	0x08011c3b
 8011c10:	08011c33 	.word	0x08011c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011c14:	f7fb fb18 	bl	800d248 <HAL_RCC_GetPCLK1Freq>
 8011c18:	61f8      	str	r0, [r7, #28]
        break;
 8011c1a:	e014      	b.n	8011c46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011c1c:	f7fb fb2a 	bl	800d274 <HAL_RCC_GetPCLK2Freq>
 8011c20:	61f8      	str	r0, [r7, #28]
        break;
 8011c22:	e010      	b.n	8011c46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011c24:	4b4d      	ldr	r3, [pc, #308]	@ (8011d5c <UART_SetConfig+0x56c>)
 8011c26:	61fb      	str	r3, [r7, #28]
        break;
 8011c28:	e00d      	b.n	8011c46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011c2a:	f7fb fa75 	bl	800d118 <HAL_RCC_GetSysClockFreq>
 8011c2e:	61f8      	str	r0, [r7, #28]
        break;
 8011c30:	e009      	b.n	8011c46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011c32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011c36:	61fb      	str	r3, [r7, #28]
        break;
 8011c38:	e005      	b.n	8011c46 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8011c3e:	2301      	movs	r3, #1
 8011c40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8011c44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011c46:	69fb      	ldr	r3, [r7, #28]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d077      	beq.n	8011d3c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8011c4c:	69fb      	ldr	r3, [r7, #28]
 8011c4e:	005a      	lsls	r2, r3, #1
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	685b      	ldr	r3, [r3, #4]
 8011c54:	085b      	lsrs	r3, r3, #1
 8011c56:	441a      	add	r2, r3
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	685b      	ldr	r3, [r3, #4]
 8011c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c60:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011c62:	69bb      	ldr	r3, [r7, #24]
 8011c64:	2b0f      	cmp	r3, #15
 8011c66:	d916      	bls.n	8011c96 <UART_SetConfig+0x4a6>
 8011c68:	69bb      	ldr	r3, [r7, #24]
 8011c6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011c6e:	d212      	bcs.n	8011c96 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011c70:	69bb      	ldr	r3, [r7, #24]
 8011c72:	b29b      	uxth	r3, r3
 8011c74:	f023 030f 	bic.w	r3, r3, #15
 8011c78:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011c7a:	69bb      	ldr	r3, [r7, #24]
 8011c7c:	085b      	lsrs	r3, r3, #1
 8011c7e:	b29b      	uxth	r3, r3
 8011c80:	f003 0307 	and.w	r3, r3, #7
 8011c84:	b29a      	uxth	r2, r3
 8011c86:	8afb      	ldrh	r3, [r7, #22]
 8011c88:	4313      	orrs	r3, r2
 8011c8a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	8afa      	ldrh	r2, [r7, #22]
 8011c92:	60da      	str	r2, [r3, #12]
 8011c94:	e052      	b.n	8011d3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8011c96:	2301      	movs	r3, #1
 8011c98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8011c9c:	e04e      	b.n	8011d3c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011c9e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011ca2:	2b08      	cmp	r3, #8
 8011ca4:	d827      	bhi.n	8011cf6 <UART_SetConfig+0x506>
 8011ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8011cac <UART_SetConfig+0x4bc>)
 8011ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cac:	08011cd1 	.word	0x08011cd1
 8011cb0:	08011cd9 	.word	0x08011cd9
 8011cb4:	08011ce1 	.word	0x08011ce1
 8011cb8:	08011cf7 	.word	0x08011cf7
 8011cbc:	08011ce7 	.word	0x08011ce7
 8011cc0:	08011cf7 	.word	0x08011cf7
 8011cc4:	08011cf7 	.word	0x08011cf7
 8011cc8:	08011cf7 	.word	0x08011cf7
 8011ccc:	08011cef 	.word	0x08011cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011cd0:	f7fb faba 	bl	800d248 <HAL_RCC_GetPCLK1Freq>
 8011cd4:	61f8      	str	r0, [r7, #28]
        break;
 8011cd6:	e014      	b.n	8011d02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011cd8:	f7fb facc 	bl	800d274 <HAL_RCC_GetPCLK2Freq>
 8011cdc:	61f8      	str	r0, [r7, #28]
        break;
 8011cde:	e010      	b.n	8011d02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011ce0:	4b1e      	ldr	r3, [pc, #120]	@ (8011d5c <UART_SetConfig+0x56c>)
 8011ce2:	61fb      	str	r3, [r7, #28]
        break;
 8011ce4:	e00d      	b.n	8011d02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011ce6:	f7fb fa17 	bl	800d118 <HAL_RCC_GetSysClockFreq>
 8011cea:	61f8      	str	r0, [r7, #28]
        break;
 8011cec:	e009      	b.n	8011d02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011cf2:	61fb      	str	r3, [r7, #28]
        break;
 8011cf4:	e005      	b.n	8011d02 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8011cfa:	2301      	movs	r3, #1
 8011cfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8011d00:	bf00      	nop
    }

    if (pclk != 0U)
 8011d02:	69fb      	ldr	r3, [r7, #28]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d019      	beq.n	8011d3c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	685b      	ldr	r3, [r3, #4]
 8011d0c:	085a      	lsrs	r2, r3, #1
 8011d0e:	69fb      	ldr	r3, [r7, #28]
 8011d10:	441a      	add	r2, r3
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	685b      	ldr	r3, [r3, #4]
 8011d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d1a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011d1c:	69bb      	ldr	r3, [r7, #24]
 8011d1e:	2b0f      	cmp	r3, #15
 8011d20:	d909      	bls.n	8011d36 <UART_SetConfig+0x546>
 8011d22:	69bb      	ldr	r3, [r7, #24]
 8011d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011d28:	d205      	bcs.n	8011d36 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011d2a:	69bb      	ldr	r3, [r7, #24]
 8011d2c:	b29a      	uxth	r2, r3
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	60da      	str	r2, [r3, #12]
 8011d34:	e002      	b.n	8011d3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8011d36:	2301      	movs	r3, #1
 8011d38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	2200      	movs	r2, #0
 8011d40:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	2200      	movs	r2, #0
 8011d46:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8011d48:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	3728      	adds	r7, #40	@ 0x28
 8011d50:	46bd      	mov	sp, r7
 8011d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011d56:	bf00      	nop
 8011d58:	40008000 	.word	0x40008000
 8011d5c:	00f42400 	.word	0x00f42400

08011d60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011d60:	b480      	push	{r7}
 8011d62:	b083      	sub	sp, #12
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d6c:	f003 0308 	and.w	r3, r3, #8
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d00a      	beq.n	8011d8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	685b      	ldr	r3, [r3, #4]
 8011d7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	430a      	orrs	r2, r1
 8011d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d8e:	f003 0301 	and.w	r3, r3, #1
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d00a      	beq.n	8011dac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	685b      	ldr	r3, [r3, #4]
 8011d9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	430a      	orrs	r2, r1
 8011daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011db0:	f003 0302 	and.w	r3, r3, #2
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d00a      	beq.n	8011dce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	685b      	ldr	r3, [r3, #4]
 8011dbe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	430a      	orrs	r2, r1
 8011dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011dd2:	f003 0304 	and.w	r3, r3, #4
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d00a      	beq.n	8011df0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	685b      	ldr	r3, [r3, #4]
 8011de0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	430a      	orrs	r2, r1
 8011dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011df4:	f003 0310 	and.w	r3, r3, #16
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d00a      	beq.n	8011e12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	689b      	ldr	r3, [r3, #8]
 8011e02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	430a      	orrs	r2, r1
 8011e10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e16:	f003 0320 	and.w	r3, r3, #32
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d00a      	beq.n	8011e34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	689b      	ldr	r3, [r3, #8]
 8011e24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	430a      	orrs	r2, r1
 8011e32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d01a      	beq.n	8011e76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	685b      	ldr	r3, [r3, #4]
 8011e46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	430a      	orrs	r2, r1
 8011e54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011e5e:	d10a      	bne.n	8011e76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	685b      	ldr	r3, [r3, #4]
 8011e66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	430a      	orrs	r2, r1
 8011e74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d00a      	beq.n	8011e98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	685b      	ldr	r3, [r3, #4]
 8011e88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	430a      	orrs	r2, r1
 8011e96:	605a      	str	r2, [r3, #4]
  }
}
 8011e98:	bf00      	nop
 8011e9a:	370c      	adds	r7, #12
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea2:	4770      	bx	lr

08011ea4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b098      	sub	sp, #96	@ 0x60
 8011ea8:	af02      	add	r7, sp, #8
 8011eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	2200      	movs	r2, #0
 8011eb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011eb4:	f7f6 ffc6 	bl	8008e44 <HAL_GetTick>
 8011eb8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	f003 0308 	and.w	r3, r3, #8
 8011ec4:	2b08      	cmp	r3, #8
 8011ec6:	d12e      	bne.n	8011f26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011ec8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011ecc:	9300      	str	r3, [sp, #0]
 8011ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011ed6:	6878      	ldr	r0, [r7, #4]
 8011ed8:	f000 f88c 	bl	8011ff4 <UART_WaitOnFlagUntilTimeout>
 8011edc:	4603      	mov	r3, r0
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d021      	beq.n	8011f26 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011eea:	e853 3f00 	ldrex	r3, [r3]
 8011eee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ef2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011ef6:	653b      	str	r3, [r7, #80]	@ 0x50
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	461a      	mov	r2, r3
 8011efe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f00:	647b      	str	r3, [r7, #68]	@ 0x44
 8011f02:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011f06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011f08:	e841 2300 	strex	r3, r2, [r1]
 8011f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011f0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d1e6      	bne.n	8011ee2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	2220      	movs	r2, #32
 8011f18:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011f22:	2303      	movs	r3, #3
 8011f24:	e062      	b.n	8011fec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	f003 0304 	and.w	r3, r3, #4
 8011f30:	2b04      	cmp	r3, #4
 8011f32:	d149      	bne.n	8011fc8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011f34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011f38:	9300      	str	r3, [sp, #0]
 8011f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f000 f856 	bl	8011ff4 <UART_WaitOnFlagUntilTimeout>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d03c      	beq.n	8011fc8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f56:	e853 3f00 	ldrex	r3, [r3]
 8011f5a:	623b      	str	r3, [r7, #32]
   return(result);
 8011f5c:	6a3b      	ldr	r3, [r7, #32]
 8011f5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	461a      	mov	r2, r3
 8011f6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8011f6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011f74:	e841 2300 	strex	r3, r2, [r1]
 8011f78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d1e6      	bne.n	8011f4e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	3308      	adds	r3, #8
 8011f86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f88:	693b      	ldr	r3, [r7, #16]
 8011f8a:	e853 3f00 	ldrex	r3, [r3]
 8011f8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	f023 0301 	bic.w	r3, r3, #1
 8011f96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	3308      	adds	r3, #8
 8011f9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011fa0:	61fa      	str	r2, [r7, #28]
 8011fa2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fa4:	69b9      	ldr	r1, [r7, #24]
 8011fa6:	69fa      	ldr	r2, [r7, #28]
 8011fa8:	e841 2300 	strex	r3, r2, [r1]
 8011fac:	617b      	str	r3, [r7, #20]
   return(result);
 8011fae:	697b      	ldr	r3, [r7, #20]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d1e5      	bne.n	8011f80 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	2220      	movs	r2, #32
 8011fb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011fc4:	2303      	movs	r3, #3
 8011fc6:	e011      	b.n	8011fec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2220      	movs	r2, #32
 8011fcc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	2220      	movs	r2, #32
 8011fd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	2200      	movs	r2, #0
 8011fda:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	2200      	movs	r2, #0
 8011fe0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8011fea:	2300      	movs	r3, #0
}
 8011fec:	4618      	mov	r0, r3
 8011fee:	3758      	adds	r7, #88	@ 0x58
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	bd80      	pop	{r7, pc}

08011ff4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b084      	sub	sp, #16
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	60f8      	str	r0, [r7, #12]
 8011ffc:	60b9      	str	r1, [r7, #8]
 8011ffe:	603b      	str	r3, [r7, #0]
 8012000:	4613      	mov	r3, r2
 8012002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012004:	e04f      	b.n	80120a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012006:	69bb      	ldr	r3, [r7, #24]
 8012008:	f1b3 3fff 	cmp.w	r3, #4294967295
 801200c:	d04b      	beq.n	80120a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801200e:	f7f6 ff19 	bl	8008e44 <HAL_GetTick>
 8012012:	4602      	mov	r2, r0
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	1ad3      	subs	r3, r2, r3
 8012018:	69ba      	ldr	r2, [r7, #24]
 801201a:	429a      	cmp	r2, r3
 801201c:	d302      	bcc.n	8012024 <UART_WaitOnFlagUntilTimeout+0x30>
 801201e:	69bb      	ldr	r3, [r7, #24]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d101      	bne.n	8012028 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012024:	2303      	movs	r3, #3
 8012026:	e04e      	b.n	80120c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	f003 0304 	and.w	r3, r3, #4
 8012032:	2b00      	cmp	r3, #0
 8012034:	d037      	beq.n	80120a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8012036:	68bb      	ldr	r3, [r7, #8]
 8012038:	2b80      	cmp	r3, #128	@ 0x80
 801203a:	d034      	beq.n	80120a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	2b40      	cmp	r3, #64	@ 0x40
 8012040:	d031      	beq.n	80120a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	69db      	ldr	r3, [r3, #28]
 8012048:	f003 0308 	and.w	r3, r3, #8
 801204c:	2b08      	cmp	r3, #8
 801204e:	d110      	bne.n	8012072 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	2208      	movs	r2, #8
 8012056:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012058:	68f8      	ldr	r0, [r7, #12]
 801205a:	f000 f8ff 	bl	801225c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	2208      	movs	r2, #8
 8012062:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	2200      	movs	r2, #0
 801206a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 801206e:	2301      	movs	r3, #1
 8012070:	e029      	b.n	80120c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	69db      	ldr	r3, [r3, #28]
 8012078:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801207c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012080:	d111      	bne.n	80120a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801208a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801208c:	68f8      	ldr	r0, [r7, #12]
 801208e:	f000 f8e5 	bl	801225c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	2220      	movs	r2, #32
 8012096:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	2200      	movs	r2, #0
 801209e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80120a2:	2303      	movs	r3, #3
 80120a4:	e00f      	b.n	80120c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	69da      	ldr	r2, [r3, #28]
 80120ac:	68bb      	ldr	r3, [r7, #8]
 80120ae:	4013      	ands	r3, r2
 80120b0:	68ba      	ldr	r2, [r7, #8]
 80120b2:	429a      	cmp	r2, r3
 80120b4:	bf0c      	ite	eq
 80120b6:	2301      	moveq	r3, #1
 80120b8:	2300      	movne	r3, #0
 80120ba:	b2db      	uxtb	r3, r3
 80120bc:	461a      	mov	r2, r3
 80120be:	79fb      	ldrb	r3, [r7, #7]
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d0a0      	beq.n	8012006 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80120c4:	2300      	movs	r3, #0
}
 80120c6:	4618      	mov	r0, r3
 80120c8:	3710      	adds	r7, #16
 80120ca:	46bd      	mov	sp, r7
 80120cc:	bd80      	pop	{r7, pc}
	...

080120d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b096      	sub	sp, #88	@ 0x58
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	60f8      	str	r0, [r7, #12]
 80120d8:	60b9      	str	r1, [r7, #8]
 80120da:	4613      	mov	r3, r2
 80120dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	68ba      	ldr	r2, [r7, #8]
 80120e2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	88fa      	ldrh	r2, [r7, #6]
 80120e8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	2200      	movs	r2, #0
 80120f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	2222      	movs	r2, #34	@ 0x22
 80120f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012100:	2b00      	cmp	r3, #0
 8012102:	d028      	beq.n	8012156 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012108:	4a3e      	ldr	r2, [pc, #248]	@ (8012204 <UART_Start_Receive_DMA+0x134>)
 801210a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012110:	4a3d      	ldr	r2, [pc, #244]	@ (8012208 <UART_Start_Receive_DMA+0x138>)
 8012112:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012118:	4a3c      	ldr	r2, [pc, #240]	@ (801220c <UART_Start_Receive_DMA+0x13c>)
 801211a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012120:	2200      	movs	r2, #0
 8012122:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	3324      	adds	r3, #36	@ 0x24
 801212e:	4619      	mov	r1, r3
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012134:	461a      	mov	r2, r3
 8012136:	88fb      	ldrh	r3, [r7, #6]
 8012138:	f7f8 fd24 	bl	800ab84 <HAL_DMA_Start_IT>
 801213c:	4603      	mov	r3, r0
 801213e:	2b00      	cmp	r3, #0
 8012140:	d009      	beq.n	8012156 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	2210      	movs	r2, #16
 8012146:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	2220      	movs	r2, #32
 801214e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8012152:	2301      	movs	r3, #1
 8012154:	e051      	b.n	80121fa <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	691b      	ldr	r3, [r3, #16]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d018      	beq.n	8012190 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012166:	e853 3f00 	ldrex	r3, [r3]
 801216a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801216c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801216e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012172:	657b      	str	r3, [r7, #84]	@ 0x54
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	461a      	mov	r2, r3
 801217a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801217c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801217e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012180:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012182:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012184:	e841 2300 	strex	r3, r2, [r1]
 8012188:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801218a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801218c:	2b00      	cmp	r3, #0
 801218e:	d1e6      	bne.n	801215e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	3308      	adds	r3, #8
 8012196:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801219a:	e853 3f00 	ldrex	r3, [r3]
 801219e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80121a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121a2:	f043 0301 	orr.w	r3, r3, #1
 80121a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	3308      	adds	r3, #8
 80121ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80121b0:	637a      	str	r2, [r7, #52]	@ 0x34
 80121b2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80121b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80121b8:	e841 2300 	strex	r3, r2, [r1]
 80121bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80121be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d1e5      	bne.n	8012190 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	3308      	adds	r3, #8
 80121ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121cc:	697b      	ldr	r3, [r7, #20]
 80121ce:	e853 3f00 	ldrex	r3, [r3]
 80121d2:	613b      	str	r3, [r7, #16]
   return(result);
 80121d4:	693b      	ldr	r3, [r7, #16]
 80121d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80121da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	3308      	adds	r3, #8
 80121e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80121e4:	623a      	str	r2, [r7, #32]
 80121e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121e8:	69f9      	ldr	r1, [r7, #28]
 80121ea:	6a3a      	ldr	r2, [r7, #32]
 80121ec:	e841 2300 	strex	r3, r2, [r1]
 80121f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80121f2:	69bb      	ldr	r3, [r7, #24]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d1e5      	bne.n	80121c4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80121f8:	2300      	movs	r3, #0
}
 80121fa:	4618      	mov	r0, r3
 80121fc:	3758      	adds	r7, #88	@ 0x58
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd80      	pop	{r7, pc}
 8012202:	bf00      	nop
 8012204:	080123db 	.word	0x080123db
 8012208:	08012507 	.word	0x08012507
 801220c:	08012545 	.word	0x08012545

08012210 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8012210:	b480      	push	{r7}
 8012212:	b089      	sub	sp, #36	@ 0x24
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	e853 3f00 	ldrex	r3, [r3]
 8012224:	60bb      	str	r3, [r7, #8]
   return(result);
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801222c:	61fb      	str	r3, [r7, #28]
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	461a      	mov	r2, r3
 8012234:	69fb      	ldr	r3, [r7, #28]
 8012236:	61bb      	str	r3, [r7, #24]
 8012238:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801223a:	6979      	ldr	r1, [r7, #20]
 801223c:	69ba      	ldr	r2, [r7, #24]
 801223e:	e841 2300 	strex	r3, r2, [r1]
 8012242:	613b      	str	r3, [r7, #16]
   return(result);
 8012244:	693b      	ldr	r3, [r7, #16]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d1e6      	bne.n	8012218 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	2220      	movs	r2, #32
 801224e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8012250:	bf00      	nop
 8012252:	3724      	adds	r7, #36	@ 0x24
 8012254:	46bd      	mov	sp, r7
 8012256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225a:	4770      	bx	lr

0801225c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801225c:	b480      	push	{r7}
 801225e:	b095      	sub	sp, #84	@ 0x54
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801226a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801226c:	e853 3f00 	ldrex	r3, [r3]
 8012270:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8012272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012274:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012278:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	461a      	mov	r2, r3
 8012280:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012282:	643b      	str	r3, [r7, #64]	@ 0x40
 8012284:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012286:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012288:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801228a:	e841 2300 	strex	r3, r2, [r1]
 801228e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012292:	2b00      	cmp	r3, #0
 8012294:	d1e6      	bne.n	8012264 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	3308      	adds	r3, #8
 801229c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801229e:	6a3b      	ldr	r3, [r7, #32]
 80122a0:	e853 3f00 	ldrex	r3, [r3]
 80122a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80122a6:	69fb      	ldr	r3, [r7, #28]
 80122a8:	f023 0301 	bic.w	r3, r3, #1
 80122ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	3308      	adds	r3, #8
 80122b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80122b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80122b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80122bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80122be:	e841 2300 	strex	r3, r2, [r1]
 80122c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80122c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d1e5      	bne.n	8012296 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80122ce:	2b01      	cmp	r3, #1
 80122d0:	d118      	bne.n	8012304 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	e853 3f00 	ldrex	r3, [r3]
 80122de:	60bb      	str	r3, [r7, #8]
   return(result);
 80122e0:	68bb      	ldr	r3, [r7, #8]
 80122e2:	f023 0310 	bic.w	r3, r3, #16
 80122e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	461a      	mov	r2, r3
 80122ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80122f0:	61bb      	str	r3, [r7, #24]
 80122f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122f4:	6979      	ldr	r1, [r7, #20]
 80122f6:	69ba      	ldr	r2, [r7, #24]
 80122f8:	e841 2300 	strex	r3, r2, [r1]
 80122fc:	613b      	str	r3, [r7, #16]
   return(result);
 80122fe:	693b      	ldr	r3, [r7, #16]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d1e6      	bne.n	80122d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	2220      	movs	r2, #32
 8012308:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	2200      	movs	r2, #0
 8012310:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	2200      	movs	r2, #0
 8012316:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8012318:	bf00      	nop
 801231a:	3754      	adds	r7, #84	@ 0x54
 801231c:	46bd      	mov	sp, r7
 801231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012322:	4770      	bx	lr

08012324 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b090      	sub	sp, #64	@ 0x40
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012330:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	f003 0320 	and.w	r3, r3, #32
 801233c:	2b00      	cmp	r3, #0
 801233e:	d137      	bne.n	80123b0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8012340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012342:	2200      	movs	r2, #0
 8012344:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	3308      	adds	r3, #8
 801234e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012352:	e853 3f00 	ldrex	r3, [r3]
 8012356:	623b      	str	r3, [r7, #32]
   return(result);
 8012358:	6a3b      	ldr	r3, [r7, #32]
 801235a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801235e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	3308      	adds	r3, #8
 8012366:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012368:	633a      	str	r2, [r7, #48]	@ 0x30
 801236a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801236c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801236e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012370:	e841 2300 	strex	r3, r2, [r1]
 8012374:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012378:	2b00      	cmp	r3, #0
 801237a:	d1e5      	bne.n	8012348 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801237c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012382:	693b      	ldr	r3, [r7, #16]
 8012384:	e853 3f00 	ldrex	r3, [r3]
 8012388:	60fb      	str	r3, [r7, #12]
   return(result);
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012390:	637b      	str	r3, [r7, #52]	@ 0x34
 8012392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	461a      	mov	r2, r3
 8012398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801239a:	61fb      	str	r3, [r7, #28]
 801239c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801239e:	69b9      	ldr	r1, [r7, #24]
 80123a0:	69fa      	ldr	r2, [r7, #28]
 80123a2:	e841 2300 	strex	r3, r2, [r1]
 80123a6:	617b      	str	r3, [r7, #20]
   return(result);
 80123a8:	697b      	ldr	r3, [r7, #20]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d1e6      	bne.n	801237c <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80123ae:	e002      	b.n	80123b6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80123b0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80123b2:	f7ef fad3 	bl	800195c <HAL_UART_TxCpltCallback>
}
 80123b6:	bf00      	nop
 80123b8:	3740      	adds	r7, #64	@ 0x40
 80123ba:	46bd      	mov	sp, r7
 80123bc:	bd80      	pop	{r7, pc}

080123be <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80123be:	b580      	push	{r7, lr}
 80123c0:	b084      	sub	sp, #16
 80123c2:	af00      	add	r7, sp, #0
 80123c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123ca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80123cc:	68f8      	ldr	r0, [r7, #12]
 80123ce:	f7ff f9f1 	bl	80117b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80123d2:	bf00      	nop
 80123d4:	3710      	adds	r7, #16
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}

080123da <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80123da:	b580      	push	{r7, lr}
 80123dc:	b09c      	sub	sp, #112	@ 0x70
 80123de:	af00      	add	r7, sp, #0
 80123e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123e6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	f003 0320 	and.w	r3, r3, #32
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d171      	bne.n	80124da <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80123f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80123f8:	2200      	movs	r2, #0
 80123fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80123fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012406:	e853 3f00 	ldrex	r3, [r3]
 801240a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801240c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801240e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012412:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012414:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	461a      	mov	r2, r3
 801241a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801241c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801241e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012420:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012422:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012424:	e841 2300 	strex	r3, r2, [r1]
 8012428:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801242a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801242c:	2b00      	cmp	r3, #0
 801242e:	d1e6      	bne.n	80123fe <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012430:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	3308      	adds	r3, #8
 8012436:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801243a:	e853 3f00 	ldrex	r3, [r3]
 801243e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012442:	f023 0301 	bic.w	r3, r3, #1
 8012446:	667b      	str	r3, [r7, #100]	@ 0x64
 8012448:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	3308      	adds	r3, #8
 801244e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012450:	647a      	str	r2, [r7, #68]	@ 0x44
 8012452:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012454:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012456:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012458:	e841 2300 	strex	r3, r2, [r1]
 801245c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801245e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012460:	2b00      	cmp	r3, #0
 8012462:	d1e5      	bne.n	8012430 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012464:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	3308      	adds	r3, #8
 801246a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801246c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801246e:	e853 3f00 	ldrex	r3, [r3]
 8012472:	623b      	str	r3, [r7, #32]
   return(result);
 8012474:	6a3b      	ldr	r3, [r7, #32]
 8012476:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801247a:	663b      	str	r3, [r7, #96]	@ 0x60
 801247c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	3308      	adds	r3, #8
 8012482:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012484:	633a      	str	r2, [r7, #48]	@ 0x30
 8012486:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012488:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801248a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801248c:	e841 2300 	strex	r3, r2, [r1]
 8012490:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012494:	2b00      	cmp	r3, #0
 8012496:	d1e5      	bne.n	8012464 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012498:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801249a:	2220      	movs	r2, #32
 801249c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80124a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80124a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80124a4:	2b01      	cmp	r3, #1
 80124a6:	d118      	bne.n	80124da <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80124a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124ae:	693b      	ldr	r3, [r7, #16]
 80124b0:	e853 3f00 	ldrex	r3, [r3]
 80124b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	f023 0310 	bic.w	r3, r3, #16
 80124bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80124be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	461a      	mov	r2, r3
 80124c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80124c6:	61fb      	str	r3, [r7, #28]
 80124c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124ca:	69b9      	ldr	r1, [r7, #24]
 80124cc:	69fa      	ldr	r2, [r7, #28]
 80124ce:	e841 2300 	strex	r3, r2, [r1]
 80124d2:	617b      	str	r3, [r7, #20]
   return(result);
 80124d4:	697b      	ldr	r3, [r7, #20]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d1e6      	bne.n	80124a8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80124da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80124dc:	2200      	movs	r2, #0
 80124de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80124e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80124e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80124e4:	2b01      	cmp	r3, #1
 80124e6:	d107      	bne.n	80124f8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80124e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80124ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80124ee:	4619      	mov	r1, r3
 80124f0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80124f2:	f7ef f9bb 	bl	800186c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80124f6:	e002      	b.n	80124fe <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80124f8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80124fa:	f7ef fa25 	bl	8001948 <HAL_UART_RxCpltCallback>
}
 80124fe:	bf00      	nop
 8012500:	3770      	adds	r7, #112	@ 0x70
 8012502:	46bd      	mov	sp, r7
 8012504:	bd80      	pop	{r7, pc}

08012506 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012506:	b580      	push	{r7, lr}
 8012508:	b084      	sub	sp, #16
 801250a:	af00      	add	r7, sp, #0
 801250c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012512:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	2201      	movs	r2, #1
 8012518:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801251e:	2b01      	cmp	r3, #1
 8012520:	d109      	bne.n	8012536 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8012528:	085b      	lsrs	r3, r3, #1
 801252a:	b29b      	uxth	r3, r3
 801252c:	4619      	mov	r1, r3
 801252e:	68f8      	ldr	r0, [r7, #12]
 8012530:	f7ef f99c 	bl	800186c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012534:	e002      	b.n	801253c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8012536:	68f8      	ldr	r0, [r7, #12]
 8012538:	f7ff f946 	bl	80117c8 <HAL_UART_RxHalfCpltCallback>
}
 801253c:	bf00      	nop
 801253e:	3710      	adds	r7, #16
 8012540:	46bd      	mov	sp, r7
 8012542:	bd80      	pop	{r7, pc}

08012544 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b086      	sub	sp, #24
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012550:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8012552:	697b      	ldr	r3, [r7, #20]
 8012554:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012556:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8012558:	697b      	ldr	r3, [r7, #20]
 801255a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801255e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8012560:	697b      	ldr	r3, [r7, #20]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	689b      	ldr	r3, [r3, #8]
 8012566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801256a:	2b80      	cmp	r3, #128	@ 0x80
 801256c:	d109      	bne.n	8012582 <UART_DMAError+0x3e>
 801256e:	693b      	ldr	r3, [r7, #16]
 8012570:	2b21      	cmp	r3, #33	@ 0x21
 8012572:	d106      	bne.n	8012582 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8012574:	697b      	ldr	r3, [r7, #20]
 8012576:	2200      	movs	r2, #0
 8012578:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 801257c:	6978      	ldr	r0, [r7, #20]
 801257e:	f7ff fe47 	bl	8012210 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8012582:	697b      	ldr	r3, [r7, #20]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	689b      	ldr	r3, [r3, #8]
 8012588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801258c:	2b40      	cmp	r3, #64	@ 0x40
 801258e:	d109      	bne.n	80125a4 <UART_DMAError+0x60>
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	2b22      	cmp	r3, #34	@ 0x22
 8012594:	d106      	bne.n	80125a4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8012596:	697b      	ldr	r3, [r7, #20]
 8012598:	2200      	movs	r2, #0
 801259a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 801259e:	6978      	ldr	r0, [r7, #20]
 80125a0:	f7ff fe5c 	bl	801225c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80125a4:	697b      	ldr	r3, [r7, #20]
 80125a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80125aa:	f043 0210 	orr.w	r2, r3, #16
 80125ae:	697b      	ldr	r3, [r7, #20]
 80125b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80125b4:	6978      	ldr	r0, [r7, #20]
 80125b6:	f7ff f911 	bl	80117dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80125ba:	bf00      	nop
 80125bc:	3718      	adds	r7, #24
 80125be:	46bd      	mov	sp, r7
 80125c0:	bd80      	pop	{r7, pc}

080125c2 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 80125c2:	b580      	push	{r7, lr}
 80125c4:	b088      	sub	sp, #32
 80125c6:	af00      	add	r7, sp, #0
 80125c8:	60f8      	str	r0, [r7, #12]
 80125ca:	60b9      	str	r1, [r7, #8]
 80125cc:	603b      	str	r3, [r7, #0]
 80125ce:	4613      	mov	r3, r2
 80125d0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125d8:	2b20      	cmp	r3, #32
 80125da:	f040 80f0 	bne.w	80127be <HAL_UARTEx_ReceiveToIdle+0x1fc>
  {
    if ((pData == NULL) || (Size == 0U))
 80125de:	68bb      	ldr	r3, [r7, #8]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d002      	beq.n	80125ea <HAL_UARTEx_ReceiveToIdle+0x28>
 80125e4:	88fb      	ldrh	r3, [r7, #6]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d101      	bne.n	80125ee <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 80125ea:	2301      	movs	r3, #1
 80125ec:	e0e8      	b.n	80127c0 <HAL_UARTEx_ReceiveToIdle+0x1fe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	2200      	movs	r2, #0
 80125f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	2222      	movs	r2, #34	@ 0x22
 80125fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	2201      	movs	r2, #1
 8012602:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	2200      	movs	r2, #0
 8012608:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801260a:	f7f6 fc1b 	bl	8008e44 <HAL_GetTick>
 801260e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	88fa      	ldrh	r2, [r7, #6]
 8012614:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	88fa      	ldrh	r2, [r7, #6]
 801261c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	689b      	ldr	r3, [r3, #8]
 8012624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012628:	d10e      	bne.n	8012648 <HAL_UARTEx_ReceiveToIdle+0x86>
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	691b      	ldr	r3, [r3, #16]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d105      	bne.n	801263e <HAL_UARTEx_ReceiveToIdle+0x7c>
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8012638:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801263c:	e02d      	b.n	801269a <HAL_UARTEx_ReceiveToIdle+0xd8>
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	22ff      	movs	r2, #255	@ 0xff
 8012642:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8012646:	e028      	b.n	801269a <HAL_UARTEx_ReceiveToIdle+0xd8>
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	689b      	ldr	r3, [r3, #8]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d10d      	bne.n	801266c <HAL_UARTEx_ReceiveToIdle+0xaa>
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	691b      	ldr	r3, [r3, #16]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d104      	bne.n	8012662 <HAL_UARTEx_ReceiveToIdle+0xa0>
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	22ff      	movs	r2, #255	@ 0xff
 801265c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8012660:	e01b      	b.n	801269a <HAL_UARTEx_ReceiveToIdle+0xd8>
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	227f      	movs	r2, #127	@ 0x7f
 8012666:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801266a:	e016      	b.n	801269a <HAL_UARTEx_ReceiveToIdle+0xd8>
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	689b      	ldr	r3, [r3, #8]
 8012670:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012674:	d10d      	bne.n	8012692 <HAL_UARTEx_ReceiveToIdle+0xd0>
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	691b      	ldr	r3, [r3, #16]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d104      	bne.n	8012688 <HAL_UARTEx_ReceiveToIdle+0xc6>
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	227f      	movs	r2, #127	@ 0x7f
 8012682:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8012686:	e008      	b.n	801269a <HAL_UARTEx_ReceiveToIdle+0xd8>
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	223f      	movs	r2, #63	@ 0x3f
 801268c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8012690:	e003      	b.n	801269a <HAL_UARTEx_ReceiveToIdle+0xd8>
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	2200      	movs	r2, #0
 8012696:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80126a0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	689b      	ldr	r3, [r3, #8]
 80126a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80126aa:	d108      	bne.n	80126be <HAL_UARTEx_ReceiveToIdle+0xfc>
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	691b      	ldr	r3, [r3, #16]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d104      	bne.n	80126be <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 80126b4:	2300      	movs	r3, #0
 80126b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80126b8:	68bb      	ldr	r3, [r7, #8]
 80126ba:	61bb      	str	r3, [r7, #24]
 80126bc:	e003      	b.n	80126c6 <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 80126be:	68bb      	ldr	r3, [r7, #8]
 80126c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80126c2:	2300      	movs	r3, #0
 80126c4:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	2200      	movs	r2, #0
 80126ca:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80126cc:	e060      	b.n	8012790 <HAL_UARTEx_ReceiveToIdle+0x1ce>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	69db      	ldr	r3, [r3, #28]
 80126d4:	f003 0310 	and.w	r3, r3, #16
 80126d8:	2b10      	cmp	r3, #16
 80126da:	d110      	bne.n	80126fe <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	2210      	movs	r2, #16
 80126e2:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 80126e4:	683b      	ldr	r3, [r7, #0]
 80126e6:	881b      	ldrh	r3, [r3, #0]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d008      	beq.n	80126fe <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	2202      	movs	r2, #2
 80126f0:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	2220      	movs	r2, #32
 80126f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_OK;
 80126fa:	2300      	movs	r3, #0
 80126fc:	e060      	b.n	80127c0 <HAL_UARTEx_ReceiveToIdle+0x1fe>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	69db      	ldr	r3, [r3, #28]
 8012704:	f003 0320 	and.w	r3, r3, #32
 8012708:	2b20      	cmp	r3, #32
 801270a:	d12c      	bne.n	8012766 <HAL_UARTEx_ReceiveToIdle+0x1a4>
      {
        if (pdata8bits == NULL)
 801270c:	69fb      	ldr	r3, [r7, #28]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d10c      	bne.n	801272c <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012718:	b29a      	uxth	r2, r3
 801271a:	8a7b      	ldrh	r3, [r7, #18]
 801271c:	4013      	ands	r3, r2
 801271e:	b29a      	uxth	r2, r3
 8012720:	69bb      	ldr	r3, [r7, #24]
 8012722:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8012724:	69bb      	ldr	r3, [r7, #24]
 8012726:	3302      	adds	r3, #2
 8012728:	61bb      	str	r3, [r7, #24]
 801272a:	e00d      	b.n	8012748 <HAL_UARTEx_ReceiveToIdle+0x186>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012732:	b29b      	uxth	r3, r3
 8012734:	b2da      	uxtb	r2, r3
 8012736:	8a7b      	ldrh	r3, [r7, #18]
 8012738:	b2db      	uxtb	r3, r3
 801273a:	4013      	ands	r3, r2
 801273c:	b2da      	uxtb	r2, r3
 801273e:	69fb      	ldr	r3, [r7, #28]
 8012740:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 8012742:	69fb      	ldr	r3, [r7, #28]
 8012744:	3301      	adds	r3, #1
 8012746:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	881b      	ldrh	r3, [r3, #0]
 801274c:	3301      	adds	r3, #1
 801274e:	b29a      	uxth	r2, r3
 8012750:	683b      	ldr	r3, [r7, #0]
 8012752:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801275a:	b29b      	uxth	r3, r3
 801275c:	3b01      	subs	r3, #1
 801275e:	b29a      	uxth	r2, r3
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8012766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012768:	f1b3 3fff 	cmp.w	r3, #4294967295
 801276c:	d010      	beq.n	8012790 <HAL_UARTEx_ReceiveToIdle+0x1ce>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801276e:	f7f6 fb69 	bl	8008e44 <HAL_GetTick>
 8012772:	4602      	mov	r2, r0
 8012774:	697b      	ldr	r3, [r7, #20]
 8012776:	1ad3      	subs	r3, r2, r3
 8012778:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801277a:	429a      	cmp	r2, r3
 801277c:	d302      	bcc.n	8012784 <HAL_UARTEx_ReceiveToIdle+0x1c2>
 801277e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012780:	2b00      	cmp	r3, #0
 8012782:	d105      	bne.n	8012790 <HAL_UARTEx_ReceiveToIdle+0x1ce>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	2220      	movs	r2, #32
 8012788:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801278c:	2303      	movs	r3, #3
 801278e:	e017      	b.n	80127c0 <HAL_UARTEx_ReceiveToIdle+0x1fe>
    while (huart->RxXferCount > 0U)
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8012796:	b29b      	uxth	r3, r3
 8012798:	2b00      	cmp	r3, #0
 801279a:	d198      	bne.n	80126ce <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80127a8:	b29b      	uxth	r3, r3
 80127aa:	1ad3      	subs	r3, r2, r3
 80127ac:	b29a      	uxth	r2, r3
 80127ae:	683b      	ldr	r3, [r7, #0]
 80127b0:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	2220      	movs	r2, #32
 80127b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80127ba:	2300      	movs	r3, #0
 80127bc:	e000      	b.n	80127c0 <HAL_UARTEx_ReceiveToIdle+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80127be:	2302      	movs	r3, #2
  }
}
 80127c0:	4618      	mov	r0, r3
 80127c2:	3720      	adds	r7, #32
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd80      	pop	{r7, pc}

080127c8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b08c      	sub	sp, #48	@ 0x30
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	60f8      	str	r0, [r7, #12]
 80127d0:	60b9      	str	r1, [r7, #8]
 80127d2:	4613      	mov	r3, r2
 80127d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80127dc:	2b20      	cmp	r3, #32
 80127de:	d142      	bne.n	8012866 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80127e0:	68bb      	ldr	r3, [r7, #8]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d002      	beq.n	80127ec <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80127e6:	88fb      	ldrh	r3, [r7, #6]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d101      	bne.n	80127f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80127ec:	2301      	movs	r3, #1
 80127ee:	e03b      	b.n	8012868 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	2201      	movs	r2, #1
 80127f4:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	2200      	movs	r2, #0
 80127fa:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80127fc:	88fb      	ldrh	r3, [r7, #6]
 80127fe:	461a      	mov	r2, r3
 8012800:	68b9      	ldr	r1, [r7, #8]
 8012802:	68f8      	ldr	r0, [r7, #12]
 8012804:	f7ff fc64 	bl	80120d0 <UART_Start_Receive_DMA>
 8012808:	4603      	mov	r3, r0
 801280a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801280e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012812:	2b00      	cmp	r3, #0
 8012814:	d124      	bne.n	8012860 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801281a:	2b01      	cmp	r3, #1
 801281c:	d11d      	bne.n	801285a <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	2210      	movs	r2, #16
 8012824:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801282c:	69bb      	ldr	r3, [r7, #24]
 801282e:	e853 3f00 	ldrex	r3, [r3]
 8012832:	617b      	str	r3, [r7, #20]
   return(result);
 8012834:	697b      	ldr	r3, [r7, #20]
 8012836:	f043 0310 	orr.w	r3, r3, #16
 801283a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	461a      	mov	r2, r3
 8012842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012844:	627b      	str	r3, [r7, #36]	@ 0x24
 8012846:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012848:	6a39      	ldr	r1, [r7, #32]
 801284a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801284c:	e841 2300 	strex	r3, r2, [r1]
 8012850:	61fb      	str	r3, [r7, #28]
   return(result);
 8012852:	69fb      	ldr	r3, [r7, #28]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d1e6      	bne.n	8012826 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8012858:	e002      	b.n	8012860 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801285a:	2301      	movs	r3, #1
 801285c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8012860:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012864:	e000      	b.n	8012868 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8012866:	2302      	movs	r3, #2
  }
}
 8012868:	4618      	mov	r0, r3
 801286a:	3730      	adds	r7, #48	@ 0x30
 801286c:	46bd      	mov	sp, r7
 801286e:	bd80      	pop	{r7, pc}

08012870 <atoi>:
 8012870:	220a      	movs	r2, #10
 8012872:	2100      	movs	r1, #0
 8012874:	f000 b87c 	b.w	8012970 <strtol>

08012878 <_strtol_l.isra.0>:
 8012878:	2b24      	cmp	r3, #36	@ 0x24
 801287a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801287e:	4686      	mov	lr, r0
 8012880:	4690      	mov	r8, r2
 8012882:	d801      	bhi.n	8012888 <_strtol_l.isra.0+0x10>
 8012884:	2b01      	cmp	r3, #1
 8012886:	d106      	bne.n	8012896 <_strtol_l.isra.0+0x1e>
 8012888:	f000 f92c 	bl	8012ae4 <__errno>
 801288c:	2316      	movs	r3, #22
 801288e:	6003      	str	r3, [r0, #0]
 8012890:	2000      	movs	r0, #0
 8012892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012896:	4834      	ldr	r0, [pc, #208]	@ (8012968 <_strtol_l.isra.0+0xf0>)
 8012898:	460d      	mov	r5, r1
 801289a:	462a      	mov	r2, r5
 801289c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80128a0:	5d06      	ldrb	r6, [r0, r4]
 80128a2:	f016 0608 	ands.w	r6, r6, #8
 80128a6:	d1f8      	bne.n	801289a <_strtol_l.isra.0+0x22>
 80128a8:	2c2d      	cmp	r4, #45	@ 0x2d
 80128aa:	d110      	bne.n	80128ce <_strtol_l.isra.0+0x56>
 80128ac:	782c      	ldrb	r4, [r5, #0]
 80128ae:	2601      	movs	r6, #1
 80128b0:	1c95      	adds	r5, r2, #2
 80128b2:	f033 0210 	bics.w	r2, r3, #16
 80128b6:	d115      	bne.n	80128e4 <_strtol_l.isra.0+0x6c>
 80128b8:	2c30      	cmp	r4, #48	@ 0x30
 80128ba:	d10d      	bne.n	80128d8 <_strtol_l.isra.0+0x60>
 80128bc:	782a      	ldrb	r2, [r5, #0]
 80128be:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80128c2:	2a58      	cmp	r2, #88	@ 0x58
 80128c4:	d108      	bne.n	80128d8 <_strtol_l.isra.0+0x60>
 80128c6:	786c      	ldrb	r4, [r5, #1]
 80128c8:	3502      	adds	r5, #2
 80128ca:	2310      	movs	r3, #16
 80128cc:	e00a      	b.n	80128e4 <_strtol_l.isra.0+0x6c>
 80128ce:	2c2b      	cmp	r4, #43	@ 0x2b
 80128d0:	bf04      	itt	eq
 80128d2:	782c      	ldrbeq	r4, [r5, #0]
 80128d4:	1c95      	addeq	r5, r2, #2
 80128d6:	e7ec      	b.n	80128b2 <_strtol_l.isra.0+0x3a>
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d1f6      	bne.n	80128ca <_strtol_l.isra.0+0x52>
 80128dc:	2c30      	cmp	r4, #48	@ 0x30
 80128de:	bf14      	ite	ne
 80128e0:	230a      	movne	r3, #10
 80128e2:	2308      	moveq	r3, #8
 80128e4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80128e8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80128ec:	2200      	movs	r2, #0
 80128ee:	fbbc f9f3 	udiv	r9, ip, r3
 80128f2:	4610      	mov	r0, r2
 80128f4:	fb03 ca19 	mls	sl, r3, r9, ip
 80128f8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80128fc:	2f09      	cmp	r7, #9
 80128fe:	d80f      	bhi.n	8012920 <_strtol_l.isra.0+0xa8>
 8012900:	463c      	mov	r4, r7
 8012902:	42a3      	cmp	r3, r4
 8012904:	dd1b      	ble.n	801293e <_strtol_l.isra.0+0xc6>
 8012906:	1c57      	adds	r7, r2, #1
 8012908:	d007      	beq.n	801291a <_strtol_l.isra.0+0xa2>
 801290a:	4581      	cmp	r9, r0
 801290c:	d314      	bcc.n	8012938 <_strtol_l.isra.0+0xc0>
 801290e:	d101      	bne.n	8012914 <_strtol_l.isra.0+0x9c>
 8012910:	45a2      	cmp	sl, r4
 8012912:	db11      	blt.n	8012938 <_strtol_l.isra.0+0xc0>
 8012914:	fb00 4003 	mla	r0, r0, r3, r4
 8012918:	2201      	movs	r2, #1
 801291a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801291e:	e7eb      	b.n	80128f8 <_strtol_l.isra.0+0x80>
 8012920:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012924:	2f19      	cmp	r7, #25
 8012926:	d801      	bhi.n	801292c <_strtol_l.isra.0+0xb4>
 8012928:	3c37      	subs	r4, #55	@ 0x37
 801292a:	e7ea      	b.n	8012902 <_strtol_l.isra.0+0x8a>
 801292c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012930:	2f19      	cmp	r7, #25
 8012932:	d804      	bhi.n	801293e <_strtol_l.isra.0+0xc6>
 8012934:	3c57      	subs	r4, #87	@ 0x57
 8012936:	e7e4      	b.n	8012902 <_strtol_l.isra.0+0x8a>
 8012938:	f04f 32ff 	mov.w	r2, #4294967295
 801293c:	e7ed      	b.n	801291a <_strtol_l.isra.0+0xa2>
 801293e:	1c53      	adds	r3, r2, #1
 8012940:	d108      	bne.n	8012954 <_strtol_l.isra.0+0xdc>
 8012942:	2322      	movs	r3, #34	@ 0x22
 8012944:	f8ce 3000 	str.w	r3, [lr]
 8012948:	4660      	mov	r0, ip
 801294a:	f1b8 0f00 	cmp.w	r8, #0
 801294e:	d0a0      	beq.n	8012892 <_strtol_l.isra.0+0x1a>
 8012950:	1e69      	subs	r1, r5, #1
 8012952:	e006      	b.n	8012962 <_strtol_l.isra.0+0xea>
 8012954:	b106      	cbz	r6, 8012958 <_strtol_l.isra.0+0xe0>
 8012956:	4240      	negs	r0, r0
 8012958:	f1b8 0f00 	cmp.w	r8, #0
 801295c:	d099      	beq.n	8012892 <_strtol_l.isra.0+0x1a>
 801295e:	2a00      	cmp	r2, #0
 8012960:	d1f6      	bne.n	8012950 <_strtol_l.isra.0+0xd8>
 8012962:	f8c8 1000 	str.w	r1, [r8]
 8012966:	e794      	b.n	8012892 <_strtol_l.isra.0+0x1a>
 8012968:	080140ab 	.word	0x080140ab

0801296c <_strtol_r>:
 801296c:	f7ff bf84 	b.w	8012878 <_strtol_l.isra.0>

08012970 <strtol>:
 8012970:	4613      	mov	r3, r2
 8012972:	460a      	mov	r2, r1
 8012974:	4601      	mov	r1, r0
 8012976:	4802      	ldr	r0, [pc, #8]	@ (8012980 <strtol+0x10>)
 8012978:	6800      	ldr	r0, [r0, #0]
 801297a:	f7ff bf7d 	b.w	8012878 <_strtol_l.isra.0>
 801297e:	bf00      	nop
 8012980:	20000014 	.word	0x20000014

08012984 <siprintf>:
 8012984:	b40e      	push	{r1, r2, r3}
 8012986:	b510      	push	{r4, lr}
 8012988:	b09d      	sub	sp, #116	@ 0x74
 801298a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801298c:	9002      	str	r0, [sp, #8]
 801298e:	9006      	str	r0, [sp, #24]
 8012990:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012994:	480a      	ldr	r0, [pc, #40]	@ (80129c0 <siprintf+0x3c>)
 8012996:	9107      	str	r1, [sp, #28]
 8012998:	9104      	str	r1, [sp, #16]
 801299a:	490a      	ldr	r1, [pc, #40]	@ (80129c4 <siprintf+0x40>)
 801299c:	f853 2b04 	ldr.w	r2, [r3], #4
 80129a0:	9105      	str	r1, [sp, #20]
 80129a2:	2400      	movs	r4, #0
 80129a4:	a902      	add	r1, sp, #8
 80129a6:	6800      	ldr	r0, [r0, #0]
 80129a8:	9301      	str	r3, [sp, #4]
 80129aa:	941b      	str	r4, [sp, #108]	@ 0x6c
 80129ac:	f000 fa30 	bl	8012e10 <_svfiprintf_r>
 80129b0:	9b02      	ldr	r3, [sp, #8]
 80129b2:	701c      	strb	r4, [r3, #0]
 80129b4:	b01d      	add	sp, #116	@ 0x74
 80129b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129ba:	b003      	add	sp, #12
 80129bc:	4770      	bx	lr
 80129be:	bf00      	nop
 80129c0:	20000014 	.word	0x20000014
 80129c4:	ffff0208 	.word	0xffff0208

080129c8 <siscanf>:
 80129c8:	b40e      	push	{r1, r2, r3}
 80129ca:	b570      	push	{r4, r5, r6, lr}
 80129cc:	b09d      	sub	sp, #116	@ 0x74
 80129ce:	ac21      	add	r4, sp, #132	@ 0x84
 80129d0:	2500      	movs	r5, #0
 80129d2:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80129d6:	f854 6b04 	ldr.w	r6, [r4], #4
 80129da:	f8ad 2014 	strh.w	r2, [sp, #20]
 80129de:	951b      	str	r5, [sp, #108]	@ 0x6c
 80129e0:	9002      	str	r0, [sp, #8]
 80129e2:	9006      	str	r0, [sp, #24]
 80129e4:	f7ed fbfe 	bl	80001e4 <strlen>
 80129e8:	4b0b      	ldr	r3, [pc, #44]	@ (8012a18 <siscanf+0x50>)
 80129ea:	9003      	str	r0, [sp, #12]
 80129ec:	9007      	str	r0, [sp, #28]
 80129ee:	480b      	ldr	r0, [pc, #44]	@ (8012a1c <siscanf+0x54>)
 80129f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80129f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80129f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80129fa:	4632      	mov	r2, r6
 80129fc:	4623      	mov	r3, r4
 80129fe:	a902      	add	r1, sp, #8
 8012a00:	6800      	ldr	r0, [r0, #0]
 8012a02:	950f      	str	r5, [sp, #60]	@ 0x3c
 8012a04:	9514      	str	r5, [sp, #80]	@ 0x50
 8012a06:	9401      	str	r4, [sp, #4]
 8012a08:	f000 fb58 	bl	80130bc <__ssvfiscanf_r>
 8012a0c:	b01d      	add	sp, #116	@ 0x74
 8012a0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a12:	b003      	add	sp, #12
 8012a14:	4770      	bx	lr
 8012a16:	bf00      	nop
 8012a18:	08012a21 	.word	0x08012a21
 8012a1c:	20000014 	.word	0x20000014

08012a20 <__seofread>:
 8012a20:	2000      	movs	r0, #0
 8012a22:	4770      	bx	lr

08012a24 <memcmp>:
 8012a24:	b510      	push	{r4, lr}
 8012a26:	3901      	subs	r1, #1
 8012a28:	4402      	add	r2, r0
 8012a2a:	4290      	cmp	r0, r2
 8012a2c:	d101      	bne.n	8012a32 <memcmp+0xe>
 8012a2e:	2000      	movs	r0, #0
 8012a30:	e005      	b.n	8012a3e <memcmp+0x1a>
 8012a32:	7803      	ldrb	r3, [r0, #0]
 8012a34:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012a38:	42a3      	cmp	r3, r4
 8012a3a:	d001      	beq.n	8012a40 <memcmp+0x1c>
 8012a3c:	1b18      	subs	r0, r3, r4
 8012a3e:	bd10      	pop	{r4, pc}
 8012a40:	3001      	adds	r0, #1
 8012a42:	e7f2      	b.n	8012a2a <memcmp+0x6>

08012a44 <memset>:
 8012a44:	4402      	add	r2, r0
 8012a46:	4603      	mov	r3, r0
 8012a48:	4293      	cmp	r3, r2
 8012a4a:	d100      	bne.n	8012a4e <memset+0xa>
 8012a4c:	4770      	bx	lr
 8012a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8012a52:	e7f9      	b.n	8012a48 <memset+0x4>

08012a54 <strchr>:
 8012a54:	b2c9      	uxtb	r1, r1
 8012a56:	4603      	mov	r3, r0
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a5e:	b112      	cbz	r2, 8012a66 <strchr+0x12>
 8012a60:	428a      	cmp	r2, r1
 8012a62:	d1f9      	bne.n	8012a58 <strchr+0x4>
 8012a64:	4770      	bx	lr
 8012a66:	2900      	cmp	r1, #0
 8012a68:	bf18      	it	ne
 8012a6a:	2000      	movne	r0, #0
 8012a6c:	4770      	bx	lr

08012a6e <strncmp>:
 8012a6e:	b510      	push	{r4, lr}
 8012a70:	b16a      	cbz	r2, 8012a8e <strncmp+0x20>
 8012a72:	3901      	subs	r1, #1
 8012a74:	1884      	adds	r4, r0, r2
 8012a76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a7a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012a7e:	429a      	cmp	r2, r3
 8012a80:	d103      	bne.n	8012a8a <strncmp+0x1c>
 8012a82:	42a0      	cmp	r0, r4
 8012a84:	d001      	beq.n	8012a8a <strncmp+0x1c>
 8012a86:	2a00      	cmp	r2, #0
 8012a88:	d1f5      	bne.n	8012a76 <strncmp+0x8>
 8012a8a:	1ad0      	subs	r0, r2, r3
 8012a8c:	bd10      	pop	{r4, pc}
 8012a8e:	4610      	mov	r0, r2
 8012a90:	e7fc      	b.n	8012a8c <strncmp+0x1e>

08012a92 <strncpy>:
 8012a92:	b510      	push	{r4, lr}
 8012a94:	3901      	subs	r1, #1
 8012a96:	4603      	mov	r3, r0
 8012a98:	b132      	cbz	r2, 8012aa8 <strncpy+0x16>
 8012a9a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012a9e:	f803 4b01 	strb.w	r4, [r3], #1
 8012aa2:	3a01      	subs	r2, #1
 8012aa4:	2c00      	cmp	r4, #0
 8012aa6:	d1f7      	bne.n	8012a98 <strncpy+0x6>
 8012aa8:	441a      	add	r2, r3
 8012aaa:	2100      	movs	r1, #0
 8012aac:	4293      	cmp	r3, r2
 8012aae:	d100      	bne.n	8012ab2 <strncpy+0x20>
 8012ab0:	bd10      	pop	{r4, pc}
 8012ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8012ab6:	e7f9      	b.n	8012aac <strncpy+0x1a>

08012ab8 <strstr>:
 8012ab8:	780a      	ldrb	r2, [r1, #0]
 8012aba:	b570      	push	{r4, r5, r6, lr}
 8012abc:	b96a      	cbnz	r2, 8012ada <strstr+0x22>
 8012abe:	bd70      	pop	{r4, r5, r6, pc}
 8012ac0:	429a      	cmp	r2, r3
 8012ac2:	d109      	bne.n	8012ad8 <strstr+0x20>
 8012ac4:	460c      	mov	r4, r1
 8012ac6:	4605      	mov	r5, r0
 8012ac8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d0f6      	beq.n	8012abe <strstr+0x6>
 8012ad0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8012ad4:	429e      	cmp	r6, r3
 8012ad6:	d0f7      	beq.n	8012ac8 <strstr+0x10>
 8012ad8:	3001      	adds	r0, #1
 8012ada:	7803      	ldrb	r3, [r0, #0]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d1ef      	bne.n	8012ac0 <strstr+0x8>
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	e7ec      	b.n	8012abe <strstr+0x6>

08012ae4 <__errno>:
 8012ae4:	4b01      	ldr	r3, [pc, #4]	@ (8012aec <__errno+0x8>)
 8012ae6:	6818      	ldr	r0, [r3, #0]
 8012ae8:	4770      	bx	lr
 8012aea:	bf00      	nop
 8012aec:	20000014 	.word	0x20000014

08012af0 <__libc_init_array>:
 8012af0:	b570      	push	{r4, r5, r6, lr}
 8012af2:	4d0d      	ldr	r5, [pc, #52]	@ (8012b28 <__libc_init_array+0x38>)
 8012af4:	4c0d      	ldr	r4, [pc, #52]	@ (8012b2c <__libc_init_array+0x3c>)
 8012af6:	1b64      	subs	r4, r4, r5
 8012af8:	10a4      	asrs	r4, r4, #2
 8012afa:	2600      	movs	r6, #0
 8012afc:	42a6      	cmp	r6, r4
 8012afe:	d109      	bne.n	8012b14 <__libc_init_array+0x24>
 8012b00:	4d0b      	ldr	r5, [pc, #44]	@ (8012b30 <__libc_init_array+0x40>)
 8012b02:	4c0c      	ldr	r4, [pc, #48]	@ (8012b34 <__libc_init_array+0x44>)
 8012b04:	f001 f86e 	bl	8013be4 <_init>
 8012b08:	1b64      	subs	r4, r4, r5
 8012b0a:	10a4      	asrs	r4, r4, #2
 8012b0c:	2600      	movs	r6, #0
 8012b0e:	42a6      	cmp	r6, r4
 8012b10:	d105      	bne.n	8012b1e <__libc_init_array+0x2e>
 8012b12:	bd70      	pop	{r4, r5, r6, pc}
 8012b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b18:	4798      	blx	r3
 8012b1a:	3601      	adds	r6, #1
 8012b1c:	e7ee      	b.n	8012afc <__libc_init_array+0xc>
 8012b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b22:	4798      	blx	r3
 8012b24:	3601      	adds	r6, #1
 8012b26:	e7f2      	b.n	8012b0e <__libc_init_array+0x1e>
 8012b28:	08014204 	.word	0x08014204
 8012b2c:	08014204 	.word	0x08014204
 8012b30:	08014204 	.word	0x08014204
 8012b34:	08014208 	.word	0x08014208

08012b38 <__retarget_lock_acquire_recursive>:
 8012b38:	4770      	bx	lr

08012b3a <__retarget_lock_release_recursive>:
 8012b3a:	4770      	bx	lr

08012b3c <strcpy>:
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b42:	f803 2b01 	strb.w	r2, [r3], #1
 8012b46:	2a00      	cmp	r2, #0
 8012b48:	d1f9      	bne.n	8012b3e <strcpy+0x2>
 8012b4a:	4770      	bx	lr

08012b4c <memcpy>:
 8012b4c:	440a      	add	r2, r1
 8012b4e:	4291      	cmp	r1, r2
 8012b50:	f100 33ff 	add.w	r3, r0, #4294967295
 8012b54:	d100      	bne.n	8012b58 <memcpy+0xc>
 8012b56:	4770      	bx	lr
 8012b58:	b510      	push	{r4, lr}
 8012b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012b5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012b62:	4291      	cmp	r1, r2
 8012b64:	d1f9      	bne.n	8012b5a <memcpy+0xe>
 8012b66:	bd10      	pop	{r4, pc}

08012b68 <_free_r>:
 8012b68:	b538      	push	{r3, r4, r5, lr}
 8012b6a:	4605      	mov	r5, r0
 8012b6c:	2900      	cmp	r1, #0
 8012b6e:	d041      	beq.n	8012bf4 <_free_r+0x8c>
 8012b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b74:	1f0c      	subs	r4, r1, #4
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	bfb8      	it	lt
 8012b7a:	18e4      	addlt	r4, r4, r3
 8012b7c:	f000 f8e0 	bl	8012d40 <__malloc_lock>
 8012b80:	4a1d      	ldr	r2, [pc, #116]	@ (8012bf8 <_free_r+0x90>)
 8012b82:	6813      	ldr	r3, [r2, #0]
 8012b84:	b933      	cbnz	r3, 8012b94 <_free_r+0x2c>
 8012b86:	6063      	str	r3, [r4, #4]
 8012b88:	6014      	str	r4, [r2, #0]
 8012b8a:	4628      	mov	r0, r5
 8012b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b90:	f000 b8dc 	b.w	8012d4c <__malloc_unlock>
 8012b94:	42a3      	cmp	r3, r4
 8012b96:	d908      	bls.n	8012baa <_free_r+0x42>
 8012b98:	6820      	ldr	r0, [r4, #0]
 8012b9a:	1821      	adds	r1, r4, r0
 8012b9c:	428b      	cmp	r3, r1
 8012b9e:	bf01      	itttt	eq
 8012ba0:	6819      	ldreq	r1, [r3, #0]
 8012ba2:	685b      	ldreq	r3, [r3, #4]
 8012ba4:	1809      	addeq	r1, r1, r0
 8012ba6:	6021      	streq	r1, [r4, #0]
 8012ba8:	e7ed      	b.n	8012b86 <_free_r+0x1e>
 8012baa:	461a      	mov	r2, r3
 8012bac:	685b      	ldr	r3, [r3, #4]
 8012bae:	b10b      	cbz	r3, 8012bb4 <_free_r+0x4c>
 8012bb0:	42a3      	cmp	r3, r4
 8012bb2:	d9fa      	bls.n	8012baa <_free_r+0x42>
 8012bb4:	6811      	ldr	r1, [r2, #0]
 8012bb6:	1850      	adds	r0, r2, r1
 8012bb8:	42a0      	cmp	r0, r4
 8012bba:	d10b      	bne.n	8012bd4 <_free_r+0x6c>
 8012bbc:	6820      	ldr	r0, [r4, #0]
 8012bbe:	4401      	add	r1, r0
 8012bc0:	1850      	adds	r0, r2, r1
 8012bc2:	4283      	cmp	r3, r0
 8012bc4:	6011      	str	r1, [r2, #0]
 8012bc6:	d1e0      	bne.n	8012b8a <_free_r+0x22>
 8012bc8:	6818      	ldr	r0, [r3, #0]
 8012bca:	685b      	ldr	r3, [r3, #4]
 8012bcc:	6053      	str	r3, [r2, #4]
 8012bce:	4408      	add	r0, r1
 8012bd0:	6010      	str	r0, [r2, #0]
 8012bd2:	e7da      	b.n	8012b8a <_free_r+0x22>
 8012bd4:	d902      	bls.n	8012bdc <_free_r+0x74>
 8012bd6:	230c      	movs	r3, #12
 8012bd8:	602b      	str	r3, [r5, #0]
 8012bda:	e7d6      	b.n	8012b8a <_free_r+0x22>
 8012bdc:	6820      	ldr	r0, [r4, #0]
 8012bde:	1821      	adds	r1, r4, r0
 8012be0:	428b      	cmp	r3, r1
 8012be2:	bf04      	itt	eq
 8012be4:	6819      	ldreq	r1, [r3, #0]
 8012be6:	685b      	ldreq	r3, [r3, #4]
 8012be8:	6063      	str	r3, [r4, #4]
 8012bea:	bf04      	itt	eq
 8012bec:	1809      	addeq	r1, r1, r0
 8012bee:	6021      	streq	r1, [r4, #0]
 8012bf0:	6054      	str	r4, [r2, #4]
 8012bf2:	e7ca      	b.n	8012b8a <_free_r+0x22>
 8012bf4:	bd38      	pop	{r3, r4, r5, pc}
 8012bf6:	bf00      	nop
 8012bf8:	20005194 	.word	0x20005194

08012bfc <sbrk_aligned>:
 8012bfc:	b570      	push	{r4, r5, r6, lr}
 8012bfe:	4e0f      	ldr	r6, [pc, #60]	@ (8012c3c <sbrk_aligned+0x40>)
 8012c00:	460c      	mov	r4, r1
 8012c02:	6831      	ldr	r1, [r6, #0]
 8012c04:	4605      	mov	r5, r0
 8012c06:	b911      	cbnz	r1, 8012c0e <sbrk_aligned+0x12>
 8012c08:	f000 ff36 	bl	8013a78 <_sbrk_r>
 8012c0c:	6030      	str	r0, [r6, #0]
 8012c0e:	4621      	mov	r1, r4
 8012c10:	4628      	mov	r0, r5
 8012c12:	f000 ff31 	bl	8013a78 <_sbrk_r>
 8012c16:	1c43      	adds	r3, r0, #1
 8012c18:	d103      	bne.n	8012c22 <sbrk_aligned+0x26>
 8012c1a:	f04f 34ff 	mov.w	r4, #4294967295
 8012c1e:	4620      	mov	r0, r4
 8012c20:	bd70      	pop	{r4, r5, r6, pc}
 8012c22:	1cc4      	adds	r4, r0, #3
 8012c24:	f024 0403 	bic.w	r4, r4, #3
 8012c28:	42a0      	cmp	r0, r4
 8012c2a:	d0f8      	beq.n	8012c1e <sbrk_aligned+0x22>
 8012c2c:	1a21      	subs	r1, r4, r0
 8012c2e:	4628      	mov	r0, r5
 8012c30:	f000 ff22 	bl	8013a78 <_sbrk_r>
 8012c34:	3001      	adds	r0, #1
 8012c36:	d1f2      	bne.n	8012c1e <sbrk_aligned+0x22>
 8012c38:	e7ef      	b.n	8012c1a <sbrk_aligned+0x1e>
 8012c3a:	bf00      	nop
 8012c3c:	20005190 	.word	0x20005190

08012c40 <_malloc_r>:
 8012c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c44:	1ccd      	adds	r5, r1, #3
 8012c46:	f025 0503 	bic.w	r5, r5, #3
 8012c4a:	3508      	adds	r5, #8
 8012c4c:	2d0c      	cmp	r5, #12
 8012c4e:	bf38      	it	cc
 8012c50:	250c      	movcc	r5, #12
 8012c52:	2d00      	cmp	r5, #0
 8012c54:	4606      	mov	r6, r0
 8012c56:	db01      	blt.n	8012c5c <_malloc_r+0x1c>
 8012c58:	42a9      	cmp	r1, r5
 8012c5a:	d904      	bls.n	8012c66 <_malloc_r+0x26>
 8012c5c:	230c      	movs	r3, #12
 8012c5e:	6033      	str	r3, [r6, #0]
 8012c60:	2000      	movs	r0, #0
 8012c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012d3c <_malloc_r+0xfc>
 8012c6a:	f000 f869 	bl	8012d40 <__malloc_lock>
 8012c6e:	f8d8 3000 	ldr.w	r3, [r8]
 8012c72:	461c      	mov	r4, r3
 8012c74:	bb44      	cbnz	r4, 8012cc8 <_malloc_r+0x88>
 8012c76:	4629      	mov	r1, r5
 8012c78:	4630      	mov	r0, r6
 8012c7a:	f7ff ffbf 	bl	8012bfc <sbrk_aligned>
 8012c7e:	1c43      	adds	r3, r0, #1
 8012c80:	4604      	mov	r4, r0
 8012c82:	d158      	bne.n	8012d36 <_malloc_r+0xf6>
 8012c84:	f8d8 4000 	ldr.w	r4, [r8]
 8012c88:	4627      	mov	r7, r4
 8012c8a:	2f00      	cmp	r7, #0
 8012c8c:	d143      	bne.n	8012d16 <_malloc_r+0xd6>
 8012c8e:	2c00      	cmp	r4, #0
 8012c90:	d04b      	beq.n	8012d2a <_malloc_r+0xea>
 8012c92:	6823      	ldr	r3, [r4, #0]
 8012c94:	4639      	mov	r1, r7
 8012c96:	4630      	mov	r0, r6
 8012c98:	eb04 0903 	add.w	r9, r4, r3
 8012c9c:	f000 feec 	bl	8013a78 <_sbrk_r>
 8012ca0:	4581      	cmp	r9, r0
 8012ca2:	d142      	bne.n	8012d2a <_malloc_r+0xea>
 8012ca4:	6821      	ldr	r1, [r4, #0]
 8012ca6:	1a6d      	subs	r5, r5, r1
 8012ca8:	4629      	mov	r1, r5
 8012caa:	4630      	mov	r0, r6
 8012cac:	f7ff ffa6 	bl	8012bfc <sbrk_aligned>
 8012cb0:	3001      	adds	r0, #1
 8012cb2:	d03a      	beq.n	8012d2a <_malloc_r+0xea>
 8012cb4:	6823      	ldr	r3, [r4, #0]
 8012cb6:	442b      	add	r3, r5
 8012cb8:	6023      	str	r3, [r4, #0]
 8012cba:	f8d8 3000 	ldr.w	r3, [r8]
 8012cbe:	685a      	ldr	r2, [r3, #4]
 8012cc0:	bb62      	cbnz	r2, 8012d1c <_malloc_r+0xdc>
 8012cc2:	f8c8 7000 	str.w	r7, [r8]
 8012cc6:	e00f      	b.n	8012ce8 <_malloc_r+0xa8>
 8012cc8:	6822      	ldr	r2, [r4, #0]
 8012cca:	1b52      	subs	r2, r2, r5
 8012ccc:	d420      	bmi.n	8012d10 <_malloc_r+0xd0>
 8012cce:	2a0b      	cmp	r2, #11
 8012cd0:	d917      	bls.n	8012d02 <_malloc_r+0xc2>
 8012cd2:	1961      	adds	r1, r4, r5
 8012cd4:	42a3      	cmp	r3, r4
 8012cd6:	6025      	str	r5, [r4, #0]
 8012cd8:	bf18      	it	ne
 8012cda:	6059      	strne	r1, [r3, #4]
 8012cdc:	6863      	ldr	r3, [r4, #4]
 8012cde:	bf08      	it	eq
 8012ce0:	f8c8 1000 	streq.w	r1, [r8]
 8012ce4:	5162      	str	r2, [r4, r5]
 8012ce6:	604b      	str	r3, [r1, #4]
 8012ce8:	4630      	mov	r0, r6
 8012cea:	f000 f82f 	bl	8012d4c <__malloc_unlock>
 8012cee:	f104 000b 	add.w	r0, r4, #11
 8012cf2:	1d23      	adds	r3, r4, #4
 8012cf4:	f020 0007 	bic.w	r0, r0, #7
 8012cf8:	1ac2      	subs	r2, r0, r3
 8012cfa:	bf1c      	itt	ne
 8012cfc:	1a1b      	subne	r3, r3, r0
 8012cfe:	50a3      	strne	r3, [r4, r2]
 8012d00:	e7af      	b.n	8012c62 <_malloc_r+0x22>
 8012d02:	6862      	ldr	r2, [r4, #4]
 8012d04:	42a3      	cmp	r3, r4
 8012d06:	bf0c      	ite	eq
 8012d08:	f8c8 2000 	streq.w	r2, [r8]
 8012d0c:	605a      	strne	r2, [r3, #4]
 8012d0e:	e7eb      	b.n	8012ce8 <_malloc_r+0xa8>
 8012d10:	4623      	mov	r3, r4
 8012d12:	6864      	ldr	r4, [r4, #4]
 8012d14:	e7ae      	b.n	8012c74 <_malloc_r+0x34>
 8012d16:	463c      	mov	r4, r7
 8012d18:	687f      	ldr	r7, [r7, #4]
 8012d1a:	e7b6      	b.n	8012c8a <_malloc_r+0x4a>
 8012d1c:	461a      	mov	r2, r3
 8012d1e:	685b      	ldr	r3, [r3, #4]
 8012d20:	42a3      	cmp	r3, r4
 8012d22:	d1fb      	bne.n	8012d1c <_malloc_r+0xdc>
 8012d24:	2300      	movs	r3, #0
 8012d26:	6053      	str	r3, [r2, #4]
 8012d28:	e7de      	b.n	8012ce8 <_malloc_r+0xa8>
 8012d2a:	230c      	movs	r3, #12
 8012d2c:	6033      	str	r3, [r6, #0]
 8012d2e:	4630      	mov	r0, r6
 8012d30:	f000 f80c 	bl	8012d4c <__malloc_unlock>
 8012d34:	e794      	b.n	8012c60 <_malloc_r+0x20>
 8012d36:	6005      	str	r5, [r0, #0]
 8012d38:	e7d6      	b.n	8012ce8 <_malloc_r+0xa8>
 8012d3a:	bf00      	nop
 8012d3c:	20005194 	.word	0x20005194

08012d40 <__malloc_lock>:
 8012d40:	4801      	ldr	r0, [pc, #4]	@ (8012d48 <__malloc_lock+0x8>)
 8012d42:	f7ff bef9 	b.w	8012b38 <__retarget_lock_acquire_recursive>
 8012d46:	bf00      	nop
 8012d48:	2000518c 	.word	0x2000518c

08012d4c <__malloc_unlock>:
 8012d4c:	4801      	ldr	r0, [pc, #4]	@ (8012d54 <__malloc_unlock+0x8>)
 8012d4e:	f7ff bef4 	b.w	8012b3a <__retarget_lock_release_recursive>
 8012d52:	bf00      	nop
 8012d54:	2000518c 	.word	0x2000518c

08012d58 <__ssputs_r>:
 8012d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d5c:	688e      	ldr	r6, [r1, #8]
 8012d5e:	461f      	mov	r7, r3
 8012d60:	42be      	cmp	r6, r7
 8012d62:	680b      	ldr	r3, [r1, #0]
 8012d64:	4682      	mov	sl, r0
 8012d66:	460c      	mov	r4, r1
 8012d68:	4690      	mov	r8, r2
 8012d6a:	d82d      	bhi.n	8012dc8 <__ssputs_r+0x70>
 8012d6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012d70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012d74:	d026      	beq.n	8012dc4 <__ssputs_r+0x6c>
 8012d76:	6965      	ldr	r5, [r4, #20]
 8012d78:	6909      	ldr	r1, [r1, #16]
 8012d7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012d7e:	eba3 0901 	sub.w	r9, r3, r1
 8012d82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012d86:	1c7b      	adds	r3, r7, #1
 8012d88:	444b      	add	r3, r9
 8012d8a:	106d      	asrs	r5, r5, #1
 8012d8c:	429d      	cmp	r5, r3
 8012d8e:	bf38      	it	cc
 8012d90:	461d      	movcc	r5, r3
 8012d92:	0553      	lsls	r3, r2, #21
 8012d94:	d527      	bpl.n	8012de6 <__ssputs_r+0x8e>
 8012d96:	4629      	mov	r1, r5
 8012d98:	f7ff ff52 	bl	8012c40 <_malloc_r>
 8012d9c:	4606      	mov	r6, r0
 8012d9e:	b360      	cbz	r0, 8012dfa <__ssputs_r+0xa2>
 8012da0:	6921      	ldr	r1, [r4, #16]
 8012da2:	464a      	mov	r2, r9
 8012da4:	f7ff fed2 	bl	8012b4c <memcpy>
 8012da8:	89a3      	ldrh	r3, [r4, #12]
 8012daa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012dae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012db2:	81a3      	strh	r3, [r4, #12]
 8012db4:	6126      	str	r6, [r4, #16]
 8012db6:	6165      	str	r5, [r4, #20]
 8012db8:	444e      	add	r6, r9
 8012dba:	eba5 0509 	sub.w	r5, r5, r9
 8012dbe:	6026      	str	r6, [r4, #0]
 8012dc0:	60a5      	str	r5, [r4, #8]
 8012dc2:	463e      	mov	r6, r7
 8012dc4:	42be      	cmp	r6, r7
 8012dc6:	d900      	bls.n	8012dca <__ssputs_r+0x72>
 8012dc8:	463e      	mov	r6, r7
 8012dca:	6820      	ldr	r0, [r4, #0]
 8012dcc:	4632      	mov	r2, r6
 8012dce:	4641      	mov	r1, r8
 8012dd0:	f000 fe37 	bl	8013a42 <memmove>
 8012dd4:	68a3      	ldr	r3, [r4, #8]
 8012dd6:	1b9b      	subs	r3, r3, r6
 8012dd8:	60a3      	str	r3, [r4, #8]
 8012dda:	6823      	ldr	r3, [r4, #0]
 8012ddc:	4433      	add	r3, r6
 8012dde:	6023      	str	r3, [r4, #0]
 8012de0:	2000      	movs	r0, #0
 8012de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012de6:	462a      	mov	r2, r5
 8012de8:	f000 fe56 	bl	8013a98 <_realloc_r>
 8012dec:	4606      	mov	r6, r0
 8012dee:	2800      	cmp	r0, #0
 8012df0:	d1e0      	bne.n	8012db4 <__ssputs_r+0x5c>
 8012df2:	6921      	ldr	r1, [r4, #16]
 8012df4:	4650      	mov	r0, sl
 8012df6:	f7ff feb7 	bl	8012b68 <_free_r>
 8012dfa:	230c      	movs	r3, #12
 8012dfc:	f8ca 3000 	str.w	r3, [sl]
 8012e00:	89a3      	ldrh	r3, [r4, #12]
 8012e02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012e06:	81a3      	strh	r3, [r4, #12]
 8012e08:	f04f 30ff 	mov.w	r0, #4294967295
 8012e0c:	e7e9      	b.n	8012de2 <__ssputs_r+0x8a>
	...

08012e10 <_svfiprintf_r>:
 8012e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e14:	4698      	mov	r8, r3
 8012e16:	898b      	ldrh	r3, [r1, #12]
 8012e18:	061b      	lsls	r3, r3, #24
 8012e1a:	b09d      	sub	sp, #116	@ 0x74
 8012e1c:	4607      	mov	r7, r0
 8012e1e:	460d      	mov	r5, r1
 8012e20:	4614      	mov	r4, r2
 8012e22:	d510      	bpl.n	8012e46 <_svfiprintf_r+0x36>
 8012e24:	690b      	ldr	r3, [r1, #16]
 8012e26:	b973      	cbnz	r3, 8012e46 <_svfiprintf_r+0x36>
 8012e28:	2140      	movs	r1, #64	@ 0x40
 8012e2a:	f7ff ff09 	bl	8012c40 <_malloc_r>
 8012e2e:	6028      	str	r0, [r5, #0]
 8012e30:	6128      	str	r0, [r5, #16]
 8012e32:	b930      	cbnz	r0, 8012e42 <_svfiprintf_r+0x32>
 8012e34:	230c      	movs	r3, #12
 8012e36:	603b      	str	r3, [r7, #0]
 8012e38:	f04f 30ff 	mov.w	r0, #4294967295
 8012e3c:	b01d      	add	sp, #116	@ 0x74
 8012e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e42:	2340      	movs	r3, #64	@ 0x40
 8012e44:	616b      	str	r3, [r5, #20]
 8012e46:	2300      	movs	r3, #0
 8012e48:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e4a:	2320      	movs	r3, #32
 8012e4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012e50:	f8cd 800c 	str.w	r8, [sp, #12]
 8012e54:	2330      	movs	r3, #48	@ 0x30
 8012e56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012ff4 <_svfiprintf_r+0x1e4>
 8012e5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012e5e:	f04f 0901 	mov.w	r9, #1
 8012e62:	4623      	mov	r3, r4
 8012e64:	469a      	mov	sl, r3
 8012e66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e6a:	b10a      	cbz	r2, 8012e70 <_svfiprintf_r+0x60>
 8012e6c:	2a25      	cmp	r2, #37	@ 0x25
 8012e6e:	d1f9      	bne.n	8012e64 <_svfiprintf_r+0x54>
 8012e70:	ebba 0b04 	subs.w	fp, sl, r4
 8012e74:	d00b      	beq.n	8012e8e <_svfiprintf_r+0x7e>
 8012e76:	465b      	mov	r3, fp
 8012e78:	4622      	mov	r2, r4
 8012e7a:	4629      	mov	r1, r5
 8012e7c:	4638      	mov	r0, r7
 8012e7e:	f7ff ff6b 	bl	8012d58 <__ssputs_r>
 8012e82:	3001      	adds	r0, #1
 8012e84:	f000 80a7 	beq.w	8012fd6 <_svfiprintf_r+0x1c6>
 8012e88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012e8a:	445a      	add	r2, fp
 8012e8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8012e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	f000 809f 	beq.w	8012fd6 <_svfiprintf_r+0x1c6>
 8012e98:	2300      	movs	r3, #0
 8012e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8012e9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ea2:	f10a 0a01 	add.w	sl, sl, #1
 8012ea6:	9304      	str	r3, [sp, #16]
 8012ea8:	9307      	str	r3, [sp, #28]
 8012eaa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012eae:	931a      	str	r3, [sp, #104]	@ 0x68
 8012eb0:	4654      	mov	r4, sl
 8012eb2:	2205      	movs	r2, #5
 8012eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012eb8:	484e      	ldr	r0, [pc, #312]	@ (8012ff4 <_svfiprintf_r+0x1e4>)
 8012eba:	f7ed f9a1 	bl	8000200 <memchr>
 8012ebe:	9a04      	ldr	r2, [sp, #16]
 8012ec0:	b9d8      	cbnz	r0, 8012efa <_svfiprintf_r+0xea>
 8012ec2:	06d0      	lsls	r0, r2, #27
 8012ec4:	bf44      	itt	mi
 8012ec6:	2320      	movmi	r3, #32
 8012ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012ecc:	0711      	lsls	r1, r2, #28
 8012ece:	bf44      	itt	mi
 8012ed0:	232b      	movmi	r3, #43	@ 0x2b
 8012ed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8012eda:	2b2a      	cmp	r3, #42	@ 0x2a
 8012edc:	d015      	beq.n	8012f0a <_svfiprintf_r+0xfa>
 8012ede:	9a07      	ldr	r2, [sp, #28]
 8012ee0:	4654      	mov	r4, sl
 8012ee2:	2000      	movs	r0, #0
 8012ee4:	f04f 0c0a 	mov.w	ip, #10
 8012ee8:	4621      	mov	r1, r4
 8012eea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012eee:	3b30      	subs	r3, #48	@ 0x30
 8012ef0:	2b09      	cmp	r3, #9
 8012ef2:	d94b      	bls.n	8012f8c <_svfiprintf_r+0x17c>
 8012ef4:	b1b0      	cbz	r0, 8012f24 <_svfiprintf_r+0x114>
 8012ef6:	9207      	str	r2, [sp, #28]
 8012ef8:	e014      	b.n	8012f24 <_svfiprintf_r+0x114>
 8012efa:	eba0 0308 	sub.w	r3, r0, r8
 8012efe:	fa09 f303 	lsl.w	r3, r9, r3
 8012f02:	4313      	orrs	r3, r2
 8012f04:	9304      	str	r3, [sp, #16]
 8012f06:	46a2      	mov	sl, r4
 8012f08:	e7d2      	b.n	8012eb0 <_svfiprintf_r+0xa0>
 8012f0a:	9b03      	ldr	r3, [sp, #12]
 8012f0c:	1d19      	adds	r1, r3, #4
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	9103      	str	r1, [sp, #12]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	bfbb      	ittet	lt
 8012f16:	425b      	neglt	r3, r3
 8012f18:	f042 0202 	orrlt.w	r2, r2, #2
 8012f1c:	9307      	strge	r3, [sp, #28]
 8012f1e:	9307      	strlt	r3, [sp, #28]
 8012f20:	bfb8      	it	lt
 8012f22:	9204      	strlt	r2, [sp, #16]
 8012f24:	7823      	ldrb	r3, [r4, #0]
 8012f26:	2b2e      	cmp	r3, #46	@ 0x2e
 8012f28:	d10a      	bne.n	8012f40 <_svfiprintf_r+0x130>
 8012f2a:	7863      	ldrb	r3, [r4, #1]
 8012f2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f2e:	d132      	bne.n	8012f96 <_svfiprintf_r+0x186>
 8012f30:	9b03      	ldr	r3, [sp, #12]
 8012f32:	1d1a      	adds	r2, r3, #4
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	9203      	str	r2, [sp, #12]
 8012f38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012f3c:	3402      	adds	r4, #2
 8012f3e:	9305      	str	r3, [sp, #20]
 8012f40:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013004 <_svfiprintf_r+0x1f4>
 8012f44:	7821      	ldrb	r1, [r4, #0]
 8012f46:	2203      	movs	r2, #3
 8012f48:	4650      	mov	r0, sl
 8012f4a:	f7ed f959 	bl	8000200 <memchr>
 8012f4e:	b138      	cbz	r0, 8012f60 <_svfiprintf_r+0x150>
 8012f50:	9b04      	ldr	r3, [sp, #16]
 8012f52:	eba0 000a 	sub.w	r0, r0, sl
 8012f56:	2240      	movs	r2, #64	@ 0x40
 8012f58:	4082      	lsls	r2, r0
 8012f5a:	4313      	orrs	r3, r2
 8012f5c:	3401      	adds	r4, #1
 8012f5e:	9304      	str	r3, [sp, #16]
 8012f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f64:	4824      	ldr	r0, [pc, #144]	@ (8012ff8 <_svfiprintf_r+0x1e8>)
 8012f66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012f6a:	2206      	movs	r2, #6
 8012f6c:	f7ed f948 	bl	8000200 <memchr>
 8012f70:	2800      	cmp	r0, #0
 8012f72:	d036      	beq.n	8012fe2 <_svfiprintf_r+0x1d2>
 8012f74:	4b21      	ldr	r3, [pc, #132]	@ (8012ffc <_svfiprintf_r+0x1ec>)
 8012f76:	bb1b      	cbnz	r3, 8012fc0 <_svfiprintf_r+0x1b0>
 8012f78:	9b03      	ldr	r3, [sp, #12]
 8012f7a:	3307      	adds	r3, #7
 8012f7c:	f023 0307 	bic.w	r3, r3, #7
 8012f80:	3308      	adds	r3, #8
 8012f82:	9303      	str	r3, [sp, #12]
 8012f84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f86:	4433      	add	r3, r6
 8012f88:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f8a:	e76a      	b.n	8012e62 <_svfiprintf_r+0x52>
 8012f8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012f90:	460c      	mov	r4, r1
 8012f92:	2001      	movs	r0, #1
 8012f94:	e7a8      	b.n	8012ee8 <_svfiprintf_r+0xd8>
 8012f96:	2300      	movs	r3, #0
 8012f98:	3401      	adds	r4, #1
 8012f9a:	9305      	str	r3, [sp, #20]
 8012f9c:	4619      	mov	r1, r3
 8012f9e:	f04f 0c0a 	mov.w	ip, #10
 8012fa2:	4620      	mov	r0, r4
 8012fa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012fa8:	3a30      	subs	r2, #48	@ 0x30
 8012faa:	2a09      	cmp	r2, #9
 8012fac:	d903      	bls.n	8012fb6 <_svfiprintf_r+0x1a6>
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d0c6      	beq.n	8012f40 <_svfiprintf_r+0x130>
 8012fb2:	9105      	str	r1, [sp, #20]
 8012fb4:	e7c4      	b.n	8012f40 <_svfiprintf_r+0x130>
 8012fb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8012fba:	4604      	mov	r4, r0
 8012fbc:	2301      	movs	r3, #1
 8012fbe:	e7f0      	b.n	8012fa2 <_svfiprintf_r+0x192>
 8012fc0:	ab03      	add	r3, sp, #12
 8012fc2:	9300      	str	r3, [sp, #0]
 8012fc4:	462a      	mov	r2, r5
 8012fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8013000 <_svfiprintf_r+0x1f0>)
 8012fc8:	a904      	add	r1, sp, #16
 8012fca:	4638      	mov	r0, r7
 8012fcc:	f3af 8000 	nop.w
 8012fd0:	1c42      	adds	r2, r0, #1
 8012fd2:	4606      	mov	r6, r0
 8012fd4:	d1d6      	bne.n	8012f84 <_svfiprintf_r+0x174>
 8012fd6:	89ab      	ldrh	r3, [r5, #12]
 8012fd8:	065b      	lsls	r3, r3, #25
 8012fda:	f53f af2d 	bmi.w	8012e38 <_svfiprintf_r+0x28>
 8012fde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012fe0:	e72c      	b.n	8012e3c <_svfiprintf_r+0x2c>
 8012fe2:	ab03      	add	r3, sp, #12
 8012fe4:	9300      	str	r3, [sp, #0]
 8012fe6:	462a      	mov	r2, r5
 8012fe8:	4b05      	ldr	r3, [pc, #20]	@ (8013000 <_svfiprintf_r+0x1f0>)
 8012fea:	a904      	add	r1, sp, #16
 8012fec:	4638      	mov	r0, r7
 8012fee:	f000 fa49 	bl	8013484 <_printf_i>
 8012ff2:	e7ed      	b.n	8012fd0 <_svfiprintf_r+0x1c0>
 8012ff4:	080141ab 	.word	0x080141ab
 8012ff8:	080141b5 	.word	0x080141b5
 8012ffc:	00000000 	.word	0x00000000
 8013000:	08012d59 	.word	0x08012d59
 8013004:	080141b1 	.word	0x080141b1

08013008 <_sungetc_r>:
 8013008:	b538      	push	{r3, r4, r5, lr}
 801300a:	1c4b      	adds	r3, r1, #1
 801300c:	4614      	mov	r4, r2
 801300e:	d103      	bne.n	8013018 <_sungetc_r+0x10>
 8013010:	f04f 35ff 	mov.w	r5, #4294967295
 8013014:	4628      	mov	r0, r5
 8013016:	bd38      	pop	{r3, r4, r5, pc}
 8013018:	8993      	ldrh	r3, [r2, #12]
 801301a:	f023 0320 	bic.w	r3, r3, #32
 801301e:	8193      	strh	r3, [r2, #12]
 8013020:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013022:	6852      	ldr	r2, [r2, #4]
 8013024:	b2cd      	uxtb	r5, r1
 8013026:	b18b      	cbz	r3, 801304c <_sungetc_r+0x44>
 8013028:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801302a:	4293      	cmp	r3, r2
 801302c:	dd08      	ble.n	8013040 <_sungetc_r+0x38>
 801302e:	6823      	ldr	r3, [r4, #0]
 8013030:	1e5a      	subs	r2, r3, #1
 8013032:	6022      	str	r2, [r4, #0]
 8013034:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013038:	6863      	ldr	r3, [r4, #4]
 801303a:	3301      	adds	r3, #1
 801303c:	6063      	str	r3, [r4, #4]
 801303e:	e7e9      	b.n	8013014 <_sungetc_r+0xc>
 8013040:	4621      	mov	r1, r4
 8013042:	f000 fcc4 	bl	80139ce <__submore>
 8013046:	2800      	cmp	r0, #0
 8013048:	d0f1      	beq.n	801302e <_sungetc_r+0x26>
 801304a:	e7e1      	b.n	8013010 <_sungetc_r+0x8>
 801304c:	6921      	ldr	r1, [r4, #16]
 801304e:	6823      	ldr	r3, [r4, #0]
 8013050:	b151      	cbz	r1, 8013068 <_sungetc_r+0x60>
 8013052:	4299      	cmp	r1, r3
 8013054:	d208      	bcs.n	8013068 <_sungetc_r+0x60>
 8013056:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801305a:	42a9      	cmp	r1, r5
 801305c:	d104      	bne.n	8013068 <_sungetc_r+0x60>
 801305e:	3b01      	subs	r3, #1
 8013060:	3201      	adds	r2, #1
 8013062:	6023      	str	r3, [r4, #0]
 8013064:	6062      	str	r2, [r4, #4]
 8013066:	e7d5      	b.n	8013014 <_sungetc_r+0xc>
 8013068:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801306c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013070:	6363      	str	r3, [r4, #52]	@ 0x34
 8013072:	2303      	movs	r3, #3
 8013074:	63a3      	str	r3, [r4, #56]	@ 0x38
 8013076:	4623      	mov	r3, r4
 8013078:	f803 5f46 	strb.w	r5, [r3, #70]!
 801307c:	6023      	str	r3, [r4, #0]
 801307e:	2301      	movs	r3, #1
 8013080:	e7dc      	b.n	801303c <_sungetc_r+0x34>

08013082 <__ssrefill_r>:
 8013082:	b510      	push	{r4, lr}
 8013084:	460c      	mov	r4, r1
 8013086:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8013088:	b169      	cbz	r1, 80130a6 <__ssrefill_r+0x24>
 801308a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801308e:	4299      	cmp	r1, r3
 8013090:	d001      	beq.n	8013096 <__ssrefill_r+0x14>
 8013092:	f7ff fd69 	bl	8012b68 <_free_r>
 8013096:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013098:	6063      	str	r3, [r4, #4]
 801309a:	2000      	movs	r0, #0
 801309c:	6360      	str	r0, [r4, #52]	@ 0x34
 801309e:	b113      	cbz	r3, 80130a6 <__ssrefill_r+0x24>
 80130a0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80130a2:	6023      	str	r3, [r4, #0]
 80130a4:	bd10      	pop	{r4, pc}
 80130a6:	6923      	ldr	r3, [r4, #16]
 80130a8:	6023      	str	r3, [r4, #0]
 80130aa:	2300      	movs	r3, #0
 80130ac:	6063      	str	r3, [r4, #4]
 80130ae:	89a3      	ldrh	r3, [r4, #12]
 80130b0:	f043 0320 	orr.w	r3, r3, #32
 80130b4:	81a3      	strh	r3, [r4, #12]
 80130b6:	f04f 30ff 	mov.w	r0, #4294967295
 80130ba:	e7f3      	b.n	80130a4 <__ssrefill_r+0x22>

080130bc <__ssvfiscanf_r>:
 80130bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130c0:	460c      	mov	r4, r1
 80130c2:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80130c6:	2100      	movs	r1, #0
 80130c8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80130cc:	49a6      	ldr	r1, [pc, #664]	@ (8013368 <__ssvfiscanf_r+0x2ac>)
 80130ce:	91a0      	str	r1, [sp, #640]	@ 0x280
 80130d0:	f10d 0804 	add.w	r8, sp, #4
 80130d4:	49a5      	ldr	r1, [pc, #660]	@ (801336c <__ssvfiscanf_r+0x2b0>)
 80130d6:	4fa6      	ldr	r7, [pc, #664]	@ (8013370 <__ssvfiscanf_r+0x2b4>)
 80130d8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80130dc:	4606      	mov	r6, r0
 80130de:	91a1      	str	r1, [sp, #644]	@ 0x284
 80130e0:	9300      	str	r3, [sp, #0]
 80130e2:	f892 9000 	ldrb.w	r9, [r2]
 80130e6:	f1b9 0f00 	cmp.w	r9, #0
 80130ea:	f000 8158 	beq.w	801339e <__ssvfiscanf_r+0x2e2>
 80130ee:	f817 3009 	ldrb.w	r3, [r7, r9]
 80130f2:	f013 0308 	ands.w	r3, r3, #8
 80130f6:	f102 0501 	add.w	r5, r2, #1
 80130fa:	d019      	beq.n	8013130 <__ssvfiscanf_r+0x74>
 80130fc:	6863      	ldr	r3, [r4, #4]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	dd0f      	ble.n	8013122 <__ssvfiscanf_r+0x66>
 8013102:	6823      	ldr	r3, [r4, #0]
 8013104:	781a      	ldrb	r2, [r3, #0]
 8013106:	5cba      	ldrb	r2, [r7, r2]
 8013108:	0712      	lsls	r2, r2, #28
 801310a:	d401      	bmi.n	8013110 <__ssvfiscanf_r+0x54>
 801310c:	462a      	mov	r2, r5
 801310e:	e7e8      	b.n	80130e2 <__ssvfiscanf_r+0x26>
 8013110:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8013112:	3201      	adds	r2, #1
 8013114:	9245      	str	r2, [sp, #276]	@ 0x114
 8013116:	6862      	ldr	r2, [r4, #4]
 8013118:	3301      	adds	r3, #1
 801311a:	3a01      	subs	r2, #1
 801311c:	6062      	str	r2, [r4, #4]
 801311e:	6023      	str	r3, [r4, #0]
 8013120:	e7ec      	b.n	80130fc <__ssvfiscanf_r+0x40>
 8013122:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013124:	4621      	mov	r1, r4
 8013126:	4630      	mov	r0, r6
 8013128:	4798      	blx	r3
 801312a:	2800      	cmp	r0, #0
 801312c:	d0e9      	beq.n	8013102 <__ssvfiscanf_r+0x46>
 801312e:	e7ed      	b.n	801310c <__ssvfiscanf_r+0x50>
 8013130:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8013134:	f040 8085 	bne.w	8013242 <__ssvfiscanf_r+0x186>
 8013138:	9341      	str	r3, [sp, #260]	@ 0x104
 801313a:	9343      	str	r3, [sp, #268]	@ 0x10c
 801313c:	7853      	ldrb	r3, [r2, #1]
 801313e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013140:	bf02      	ittt	eq
 8013142:	2310      	moveq	r3, #16
 8013144:	1c95      	addeq	r5, r2, #2
 8013146:	9341      	streq	r3, [sp, #260]	@ 0x104
 8013148:	220a      	movs	r2, #10
 801314a:	46aa      	mov	sl, r5
 801314c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8013150:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8013154:	2b09      	cmp	r3, #9
 8013156:	d91e      	bls.n	8013196 <__ssvfiscanf_r+0xda>
 8013158:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8013374 <__ssvfiscanf_r+0x2b8>
 801315c:	2203      	movs	r2, #3
 801315e:	4658      	mov	r0, fp
 8013160:	f7ed f84e 	bl	8000200 <memchr>
 8013164:	b138      	cbz	r0, 8013176 <__ssvfiscanf_r+0xba>
 8013166:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8013168:	eba0 000b 	sub.w	r0, r0, fp
 801316c:	2301      	movs	r3, #1
 801316e:	4083      	lsls	r3, r0
 8013170:	4313      	orrs	r3, r2
 8013172:	9341      	str	r3, [sp, #260]	@ 0x104
 8013174:	4655      	mov	r5, sl
 8013176:	f815 3b01 	ldrb.w	r3, [r5], #1
 801317a:	2b78      	cmp	r3, #120	@ 0x78
 801317c:	d806      	bhi.n	801318c <__ssvfiscanf_r+0xd0>
 801317e:	2b57      	cmp	r3, #87	@ 0x57
 8013180:	d810      	bhi.n	80131a4 <__ssvfiscanf_r+0xe8>
 8013182:	2b25      	cmp	r3, #37	@ 0x25
 8013184:	d05d      	beq.n	8013242 <__ssvfiscanf_r+0x186>
 8013186:	d857      	bhi.n	8013238 <__ssvfiscanf_r+0x17c>
 8013188:	2b00      	cmp	r3, #0
 801318a:	d075      	beq.n	8013278 <__ssvfiscanf_r+0x1bc>
 801318c:	2303      	movs	r3, #3
 801318e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8013190:	230a      	movs	r3, #10
 8013192:	9342      	str	r3, [sp, #264]	@ 0x108
 8013194:	e088      	b.n	80132a8 <__ssvfiscanf_r+0x1ec>
 8013196:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8013198:	fb02 1103 	mla	r1, r2, r3, r1
 801319c:	3930      	subs	r1, #48	@ 0x30
 801319e:	9143      	str	r1, [sp, #268]	@ 0x10c
 80131a0:	4655      	mov	r5, sl
 80131a2:	e7d2      	b.n	801314a <__ssvfiscanf_r+0x8e>
 80131a4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80131a8:	2a20      	cmp	r2, #32
 80131aa:	d8ef      	bhi.n	801318c <__ssvfiscanf_r+0xd0>
 80131ac:	a101      	add	r1, pc, #4	@ (adr r1, 80131b4 <__ssvfiscanf_r+0xf8>)
 80131ae:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80131b2:	bf00      	nop
 80131b4:	08013287 	.word	0x08013287
 80131b8:	0801318d 	.word	0x0801318d
 80131bc:	0801318d 	.word	0x0801318d
 80131c0:	080132e1 	.word	0x080132e1
 80131c4:	0801318d 	.word	0x0801318d
 80131c8:	0801318d 	.word	0x0801318d
 80131cc:	0801318d 	.word	0x0801318d
 80131d0:	0801318d 	.word	0x0801318d
 80131d4:	0801318d 	.word	0x0801318d
 80131d8:	0801318d 	.word	0x0801318d
 80131dc:	0801318d 	.word	0x0801318d
 80131e0:	080132f7 	.word	0x080132f7
 80131e4:	080132dd 	.word	0x080132dd
 80131e8:	0801323f 	.word	0x0801323f
 80131ec:	0801323f 	.word	0x0801323f
 80131f0:	0801323f 	.word	0x0801323f
 80131f4:	0801318d 	.word	0x0801318d
 80131f8:	08013299 	.word	0x08013299
 80131fc:	0801318d 	.word	0x0801318d
 8013200:	0801318d 	.word	0x0801318d
 8013204:	0801318d 	.word	0x0801318d
 8013208:	0801318d 	.word	0x0801318d
 801320c:	08013307 	.word	0x08013307
 8013210:	080132a1 	.word	0x080132a1
 8013214:	0801327f 	.word	0x0801327f
 8013218:	0801318d 	.word	0x0801318d
 801321c:	0801318d 	.word	0x0801318d
 8013220:	08013303 	.word	0x08013303
 8013224:	0801318d 	.word	0x0801318d
 8013228:	080132dd 	.word	0x080132dd
 801322c:	0801318d 	.word	0x0801318d
 8013230:	0801318d 	.word	0x0801318d
 8013234:	08013287 	.word	0x08013287
 8013238:	3b45      	subs	r3, #69	@ 0x45
 801323a:	2b02      	cmp	r3, #2
 801323c:	d8a6      	bhi.n	801318c <__ssvfiscanf_r+0xd0>
 801323e:	2305      	movs	r3, #5
 8013240:	e031      	b.n	80132a6 <__ssvfiscanf_r+0x1ea>
 8013242:	6863      	ldr	r3, [r4, #4]
 8013244:	2b00      	cmp	r3, #0
 8013246:	dd0d      	ble.n	8013264 <__ssvfiscanf_r+0x1a8>
 8013248:	6823      	ldr	r3, [r4, #0]
 801324a:	781a      	ldrb	r2, [r3, #0]
 801324c:	454a      	cmp	r2, r9
 801324e:	f040 80a6 	bne.w	801339e <__ssvfiscanf_r+0x2e2>
 8013252:	3301      	adds	r3, #1
 8013254:	6862      	ldr	r2, [r4, #4]
 8013256:	6023      	str	r3, [r4, #0]
 8013258:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801325a:	3a01      	subs	r2, #1
 801325c:	3301      	adds	r3, #1
 801325e:	6062      	str	r2, [r4, #4]
 8013260:	9345      	str	r3, [sp, #276]	@ 0x114
 8013262:	e753      	b.n	801310c <__ssvfiscanf_r+0x50>
 8013264:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013266:	4621      	mov	r1, r4
 8013268:	4630      	mov	r0, r6
 801326a:	4798      	blx	r3
 801326c:	2800      	cmp	r0, #0
 801326e:	d0eb      	beq.n	8013248 <__ssvfiscanf_r+0x18c>
 8013270:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8013272:	2800      	cmp	r0, #0
 8013274:	f040 808b 	bne.w	801338e <__ssvfiscanf_r+0x2d2>
 8013278:	f04f 30ff 	mov.w	r0, #4294967295
 801327c:	e08b      	b.n	8013396 <__ssvfiscanf_r+0x2da>
 801327e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8013280:	f042 0220 	orr.w	r2, r2, #32
 8013284:	9241      	str	r2, [sp, #260]	@ 0x104
 8013286:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8013288:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801328c:	9241      	str	r2, [sp, #260]	@ 0x104
 801328e:	2210      	movs	r2, #16
 8013290:	2b6e      	cmp	r3, #110	@ 0x6e
 8013292:	9242      	str	r2, [sp, #264]	@ 0x108
 8013294:	d902      	bls.n	801329c <__ssvfiscanf_r+0x1e0>
 8013296:	e005      	b.n	80132a4 <__ssvfiscanf_r+0x1e8>
 8013298:	2300      	movs	r3, #0
 801329a:	9342      	str	r3, [sp, #264]	@ 0x108
 801329c:	2303      	movs	r3, #3
 801329e:	e002      	b.n	80132a6 <__ssvfiscanf_r+0x1ea>
 80132a0:	2308      	movs	r3, #8
 80132a2:	9342      	str	r3, [sp, #264]	@ 0x108
 80132a4:	2304      	movs	r3, #4
 80132a6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80132a8:	6863      	ldr	r3, [r4, #4]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	dd39      	ble.n	8013322 <__ssvfiscanf_r+0x266>
 80132ae:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80132b0:	0659      	lsls	r1, r3, #25
 80132b2:	d404      	bmi.n	80132be <__ssvfiscanf_r+0x202>
 80132b4:	6823      	ldr	r3, [r4, #0]
 80132b6:	781a      	ldrb	r2, [r3, #0]
 80132b8:	5cba      	ldrb	r2, [r7, r2]
 80132ba:	0712      	lsls	r2, r2, #28
 80132bc:	d438      	bmi.n	8013330 <__ssvfiscanf_r+0x274>
 80132be:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80132c0:	2b02      	cmp	r3, #2
 80132c2:	dc47      	bgt.n	8013354 <__ssvfiscanf_r+0x298>
 80132c4:	466b      	mov	r3, sp
 80132c6:	4622      	mov	r2, r4
 80132c8:	a941      	add	r1, sp, #260	@ 0x104
 80132ca:	4630      	mov	r0, r6
 80132cc:	f000 f9f8 	bl	80136c0 <_scanf_chars>
 80132d0:	2801      	cmp	r0, #1
 80132d2:	d064      	beq.n	801339e <__ssvfiscanf_r+0x2e2>
 80132d4:	2802      	cmp	r0, #2
 80132d6:	f47f af19 	bne.w	801310c <__ssvfiscanf_r+0x50>
 80132da:	e7c9      	b.n	8013270 <__ssvfiscanf_r+0x1b4>
 80132dc:	220a      	movs	r2, #10
 80132de:	e7d7      	b.n	8013290 <__ssvfiscanf_r+0x1d4>
 80132e0:	4629      	mov	r1, r5
 80132e2:	4640      	mov	r0, r8
 80132e4:	f000 fb3a 	bl	801395c <__sccl>
 80132e8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80132ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80132ee:	9341      	str	r3, [sp, #260]	@ 0x104
 80132f0:	4605      	mov	r5, r0
 80132f2:	2301      	movs	r3, #1
 80132f4:	e7d7      	b.n	80132a6 <__ssvfiscanf_r+0x1ea>
 80132f6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80132f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80132fc:	9341      	str	r3, [sp, #260]	@ 0x104
 80132fe:	2300      	movs	r3, #0
 8013300:	e7d1      	b.n	80132a6 <__ssvfiscanf_r+0x1ea>
 8013302:	2302      	movs	r3, #2
 8013304:	e7cf      	b.n	80132a6 <__ssvfiscanf_r+0x1ea>
 8013306:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8013308:	06c3      	lsls	r3, r0, #27
 801330a:	f53f aeff 	bmi.w	801310c <__ssvfiscanf_r+0x50>
 801330e:	9b00      	ldr	r3, [sp, #0]
 8013310:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8013312:	1d19      	adds	r1, r3, #4
 8013314:	9100      	str	r1, [sp, #0]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	07c0      	lsls	r0, r0, #31
 801331a:	bf4c      	ite	mi
 801331c:	801a      	strhmi	r2, [r3, #0]
 801331e:	601a      	strpl	r2, [r3, #0]
 8013320:	e6f4      	b.n	801310c <__ssvfiscanf_r+0x50>
 8013322:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013324:	4621      	mov	r1, r4
 8013326:	4630      	mov	r0, r6
 8013328:	4798      	blx	r3
 801332a:	2800      	cmp	r0, #0
 801332c:	d0bf      	beq.n	80132ae <__ssvfiscanf_r+0x1f2>
 801332e:	e79f      	b.n	8013270 <__ssvfiscanf_r+0x1b4>
 8013330:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8013332:	3201      	adds	r2, #1
 8013334:	9245      	str	r2, [sp, #276]	@ 0x114
 8013336:	6862      	ldr	r2, [r4, #4]
 8013338:	3a01      	subs	r2, #1
 801333a:	2a00      	cmp	r2, #0
 801333c:	6062      	str	r2, [r4, #4]
 801333e:	dd02      	ble.n	8013346 <__ssvfiscanf_r+0x28a>
 8013340:	3301      	adds	r3, #1
 8013342:	6023      	str	r3, [r4, #0]
 8013344:	e7b6      	b.n	80132b4 <__ssvfiscanf_r+0x1f8>
 8013346:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013348:	4621      	mov	r1, r4
 801334a:	4630      	mov	r0, r6
 801334c:	4798      	blx	r3
 801334e:	2800      	cmp	r0, #0
 8013350:	d0b0      	beq.n	80132b4 <__ssvfiscanf_r+0x1f8>
 8013352:	e78d      	b.n	8013270 <__ssvfiscanf_r+0x1b4>
 8013354:	2b04      	cmp	r3, #4
 8013356:	dc0f      	bgt.n	8013378 <__ssvfiscanf_r+0x2bc>
 8013358:	466b      	mov	r3, sp
 801335a:	4622      	mov	r2, r4
 801335c:	a941      	add	r1, sp, #260	@ 0x104
 801335e:	4630      	mov	r0, r6
 8013360:	f000 fa08 	bl	8013774 <_scanf_i>
 8013364:	e7b4      	b.n	80132d0 <__ssvfiscanf_r+0x214>
 8013366:	bf00      	nop
 8013368:	08013009 	.word	0x08013009
 801336c:	08013083 	.word	0x08013083
 8013370:	080140ab 	.word	0x080140ab
 8013374:	080141b1 	.word	0x080141b1
 8013378:	4b0a      	ldr	r3, [pc, #40]	@ (80133a4 <__ssvfiscanf_r+0x2e8>)
 801337a:	2b00      	cmp	r3, #0
 801337c:	f43f aec6 	beq.w	801310c <__ssvfiscanf_r+0x50>
 8013380:	466b      	mov	r3, sp
 8013382:	4622      	mov	r2, r4
 8013384:	a941      	add	r1, sp, #260	@ 0x104
 8013386:	4630      	mov	r0, r6
 8013388:	f3af 8000 	nop.w
 801338c:	e7a0      	b.n	80132d0 <__ssvfiscanf_r+0x214>
 801338e:	89a3      	ldrh	r3, [r4, #12]
 8013390:	065b      	lsls	r3, r3, #25
 8013392:	f53f af71 	bmi.w	8013278 <__ssvfiscanf_r+0x1bc>
 8013396:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801339a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801339e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80133a0:	e7f9      	b.n	8013396 <__ssvfiscanf_r+0x2da>
 80133a2:	bf00      	nop
 80133a4:	00000000 	.word	0x00000000

080133a8 <_printf_common>:
 80133a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133ac:	4616      	mov	r6, r2
 80133ae:	4698      	mov	r8, r3
 80133b0:	688a      	ldr	r2, [r1, #8]
 80133b2:	690b      	ldr	r3, [r1, #16]
 80133b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80133b8:	4293      	cmp	r3, r2
 80133ba:	bfb8      	it	lt
 80133bc:	4613      	movlt	r3, r2
 80133be:	6033      	str	r3, [r6, #0]
 80133c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80133c4:	4607      	mov	r7, r0
 80133c6:	460c      	mov	r4, r1
 80133c8:	b10a      	cbz	r2, 80133ce <_printf_common+0x26>
 80133ca:	3301      	adds	r3, #1
 80133cc:	6033      	str	r3, [r6, #0]
 80133ce:	6823      	ldr	r3, [r4, #0]
 80133d0:	0699      	lsls	r1, r3, #26
 80133d2:	bf42      	ittt	mi
 80133d4:	6833      	ldrmi	r3, [r6, #0]
 80133d6:	3302      	addmi	r3, #2
 80133d8:	6033      	strmi	r3, [r6, #0]
 80133da:	6825      	ldr	r5, [r4, #0]
 80133dc:	f015 0506 	ands.w	r5, r5, #6
 80133e0:	d106      	bne.n	80133f0 <_printf_common+0x48>
 80133e2:	f104 0a19 	add.w	sl, r4, #25
 80133e6:	68e3      	ldr	r3, [r4, #12]
 80133e8:	6832      	ldr	r2, [r6, #0]
 80133ea:	1a9b      	subs	r3, r3, r2
 80133ec:	42ab      	cmp	r3, r5
 80133ee:	dc26      	bgt.n	801343e <_printf_common+0x96>
 80133f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80133f4:	6822      	ldr	r2, [r4, #0]
 80133f6:	3b00      	subs	r3, #0
 80133f8:	bf18      	it	ne
 80133fa:	2301      	movne	r3, #1
 80133fc:	0692      	lsls	r2, r2, #26
 80133fe:	d42b      	bmi.n	8013458 <_printf_common+0xb0>
 8013400:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013404:	4641      	mov	r1, r8
 8013406:	4638      	mov	r0, r7
 8013408:	47c8      	blx	r9
 801340a:	3001      	adds	r0, #1
 801340c:	d01e      	beq.n	801344c <_printf_common+0xa4>
 801340e:	6823      	ldr	r3, [r4, #0]
 8013410:	6922      	ldr	r2, [r4, #16]
 8013412:	f003 0306 	and.w	r3, r3, #6
 8013416:	2b04      	cmp	r3, #4
 8013418:	bf02      	ittt	eq
 801341a:	68e5      	ldreq	r5, [r4, #12]
 801341c:	6833      	ldreq	r3, [r6, #0]
 801341e:	1aed      	subeq	r5, r5, r3
 8013420:	68a3      	ldr	r3, [r4, #8]
 8013422:	bf0c      	ite	eq
 8013424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013428:	2500      	movne	r5, #0
 801342a:	4293      	cmp	r3, r2
 801342c:	bfc4      	itt	gt
 801342e:	1a9b      	subgt	r3, r3, r2
 8013430:	18ed      	addgt	r5, r5, r3
 8013432:	2600      	movs	r6, #0
 8013434:	341a      	adds	r4, #26
 8013436:	42b5      	cmp	r5, r6
 8013438:	d11a      	bne.n	8013470 <_printf_common+0xc8>
 801343a:	2000      	movs	r0, #0
 801343c:	e008      	b.n	8013450 <_printf_common+0xa8>
 801343e:	2301      	movs	r3, #1
 8013440:	4652      	mov	r2, sl
 8013442:	4641      	mov	r1, r8
 8013444:	4638      	mov	r0, r7
 8013446:	47c8      	blx	r9
 8013448:	3001      	adds	r0, #1
 801344a:	d103      	bne.n	8013454 <_printf_common+0xac>
 801344c:	f04f 30ff 	mov.w	r0, #4294967295
 8013450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013454:	3501      	adds	r5, #1
 8013456:	e7c6      	b.n	80133e6 <_printf_common+0x3e>
 8013458:	18e1      	adds	r1, r4, r3
 801345a:	1c5a      	adds	r2, r3, #1
 801345c:	2030      	movs	r0, #48	@ 0x30
 801345e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013462:	4422      	add	r2, r4
 8013464:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013468:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801346c:	3302      	adds	r3, #2
 801346e:	e7c7      	b.n	8013400 <_printf_common+0x58>
 8013470:	2301      	movs	r3, #1
 8013472:	4622      	mov	r2, r4
 8013474:	4641      	mov	r1, r8
 8013476:	4638      	mov	r0, r7
 8013478:	47c8      	blx	r9
 801347a:	3001      	adds	r0, #1
 801347c:	d0e6      	beq.n	801344c <_printf_common+0xa4>
 801347e:	3601      	adds	r6, #1
 8013480:	e7d9      	b.n	8013436 <_printf_common+0x8e>
	...

08013484 <_printf_i>:
 8013484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013488:	7e0f      	ldrb	r7, [r1, #24]
 801348a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801348c:	2f78      	cmp	r7, #120	@ 0x78
 801348e:	4691      	mov	r9, r2
 8013490:	4680      	mov	r8, r0
 8013492:	460c      	mov	r4, r1
 8013494:	469a      	mov	sl, r3
 8013496:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801349a:	d807      	bhi.n	80134ac <_printf_i+0x28>
 801349c:	2f62      	cmp	r7, #98	@ 0x62
 801349e:	d80a      	bhi.n	80134b6 <_printf_i+0x32>
 80134a0:	2f00      	cmp	r7, #0
 80134a2:	f000 80d1 	beq.w	8013648 <_printf_i+0x1c4>
 80134a6:	2f58      	cmp	r7, #88	@ 0x58
 80134a8:	f000 80b8 	beq.w	801361c <_printf_i+0x198>
 80134ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80134b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80134b4:	e03a      	b.n	801352c <_printf_i+0xa8>
 80134b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80134ba:	2b15      	cmp	r3, #21
 80134bc:	d8f6      	bhi.n	80134ac <_printf_i+0x28>
 80134be:	a101      	add	r1, pc, #4	@ (adr r1, 80134c4 <_printf_i+0x40>)
 80134c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80134c4:	0801351d 	.word	0x0801351d
 80134c8:	08013531 	.word	0x08013531
 80134cc:	080134ad 	.word	0x080134ad
 80134d0:	080134ad 	.word	0x080134ad
 80134d4:	080134ad 	.word	0x080134ad
 80134d8:	080134ad 	.word	0x080134ad
 80134dc:	08013531 	.word	0x08013531
 80134e0:	080134ad 	.word	0x080134ad
 80134e4:	080134ad 	.word	0x080134ad
 80134e8:	080134ad 	.word	0x080134ad
 80134ec:	080134ad 	.word	0x080134ad
 80134f0:	0801362f 	.word	0x0801362f
 80134f4:	0801355b 	.word	0x0801355b
 80134f8:	080135e9 	.word	0x080135e9
 80134fc:	080134ad 	.word	0x080134ad
 8013500:	080134ad 	.word	0x080134ad
 8013504:	08013651 	.word	0x08013651
 8013508:	080134ad 	.word	0x080134ad
 801350c:	0801355b 	.word	0x0801355b
 8013510:	080134ad 	.word	0x080134ad
 8013514:	080134ad 	.word	0x080134ad
 8013518:	080135f1 	.word	0x080135f1
 801351c:	6833      	ldr	r3, [r6, #0]
 801351e:	1d1a      	adds	r2, r3, #4
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	6032      	str	r2, [r6, #0]
 8013524:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013528:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801352c:	2301      	movs	r3, #1
 801352e:	e09c      	b.n	801366a <_printf_i+0x1e6>
 8013530:	6833      	ldr	r3, [r6, #0]
 8013532:	6820      	ldr	r0, [r4, #0]
 8013534:	1d19      	adds	r1, r3, #4
 8013536:	6031      	str	r1, [r6, #0]
 8013538:	0606      	lsls	r6, r0, #24
 801353a:	d501      	bpl.n	8013540 <_printf_i+0xbc>
 801353c:	681d      	ldr	r5, [r3, #0]
 801353e:	e003      	b.n	8013548 <_printf_i+0xc4>
 8013540:	0645      	lsls	r5, r0, #25
 8013542:	d5fb      	bpl.n	801353c <_printf_i+0xb8>
 8013544:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013548:	2d00      	cmp	r5, #0
 801354a:	da03      	bge.n	8013554 <_printf_i+0xd0>
 801354c:	232d      	movs	r3, #45	@ 0x2d
 801354e:	426d      	negs	r5, r5
 8013550:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013554:	4858      	ldr	r0, [pc, #352]	@ (80136b8 <_printf_i+0x234>)
 8013556:	230a      	movs	r3, #10
 8013558:	e011      	b.n	801357e <_printf_i+0xfa>
 801355a:	6821      	ldr	r1, [r4, #0]
 801355c:	6833      	ldr	r3, [r6, #0]
 801355e:	0608      	lsls	r0, r1, #24
 8013560:	f853 5b04 	ldr.w	r5, [r3], #4
 8013564:	d402      	bmi.n	801356c <_printf_i+0xe8>
 8013566:	0649      	lsls	r1, r1, #25
 8013568:	bf48      	it	mi
 801356a:	b2ad      	uxthmi	r5, r5
 801356c:	2f6f      	cmp	r7, #111	@ 0x6f
 801356e:	4852      	ldr	r0, [pc, #328]	@ (80136b8 <_printf_i+0x234>)
 8013570:	6033      	str	r3, [r6, #0]
 8013572:	bf14      	ite	ne
 8013574:	230a      	movne	r3, #10
 8013576:	2308      	moveq	r3, #8
 8013578:	2100      	movs	r1, #0
 801357a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801357e:	6866      	ldr	r6, [r4, #4]
 8013580:	60a6      	str	r6, [r4, #8]
 8013582:	2e00      	cmp	r6, #0
 8013584:	db05      	blt.n	8013592 <_printf_i+0x10e>
 8013586:	6821      	ldr	r1, [r4, #0]
 8013588:	432e      	orrs	r6, r5
 801358a:	f021 0104 	bic.w	r1, r1, #4
 801358e:	6021      	str	r1, [r4, #0]
 8013590:	d04b      	beq.n	801362a <_printf_i+0x1a6>
 8013592:	4616      	mov	r6, r2
 8013594:	fbb5 f1f3 	udiv	r1, r5, r3
 8013598:	fb03 5711 	mls	r7, r3, r1, r5
 801359c:	5dc7      	ldrb	r7, [r0, r7]
 801359e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80135a2:	462f      	mov	r7, r5
 80135a4:	42bb      	cmp	r3, r7
 80135a6:	460d      	mov	r5, r1
 80135a8:	d9f4      	bls.n	8013594 <_printf_i+0x110>
 80135aa:	2b08      	cmp	r3, #8
 80135ac:	d10b      	bne.n	80135c6 <_printf_i+0x142>
 80135ae:	6823      	ldr	r3, [r4, #0]
 80135b0:	07df      	lsls	r7, r3, #31
 80135b2:	d508      	bpl.n	80135c6 <_printf_i+0x142>
 80135b4:	6923      	ldr	r3, [r4, #16]
 80135b6:	6861      	ldr	r1, [r4, #4]
 80135b8:	4299      	cmp	r1, r3
 80135ba:	bfde      	ittt	le
 80135bc:	2330      	movle	r3, #48	@ 0x30
 80135be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80135c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80135c6:	1b92      	subs	r2, r2, r6
 80135c8:	6122      	str	r2, [r4, #16]
 80135ca:	f8cd a000 	str.w	sl, [sp]
 80135ce:	464b      	mov	r3, r9
 80135d0:	aa03      	add	r2, sp, #12
 80135d2:	4621      	mov	r1, r4
 80135d4:	4640      	mov	r0, r8
 80135d6:	f7ff fee7 	bl	80133a8 <_printf_common>
 80135da:	3001      	adds	r0, #1
 80135dc:	d14a      	bne.n	8013674 <_printf_i+0x1f0>
 80135de:	f04f 30ff 	mov.w	r0, #4294967295
 80135e2:	b004      	add	sp, #16
 80135e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135e8:	6823      	ldr	r3, [r4, #0]
 80135ea:	f043 0320 	orr.w	r3, r3, #32
 80135ee:	6023      	str	r3, [r4, #0]
 80135f0:	4832      	ldr	r0, [pc, #200]	@ (80136bc <_printf_i+0x238>)
 80135f2:	2778      	movs	r7, #120	@ 0x78
 80135f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80135f8:	6823      	ldr	r3, [r4, #0]
 80135fa:	6831      	ldr	r1, [r6, #0]
 80135fc:	061f      	lsls	r7, r3, #24
 80135fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8013602:	d402      	bmi.n	801360a <_printf_i+0x186>
 8013604:	065f      	lsls	r7, r3, #25
 8013606:	bf48      	it	mi
 8013608:	b2ad      	uxthmi	r5, r5
 801360a:	6031      	str	r1, [r6, #0]
 801360c:	07d9      	lsls	r1, r3, #31
 801360e:	bf44      	itt	mi
 8013610:	f043 0320 	orrmi.w	r3, r3, #32
 8013614:	6023      	strmi	r3, [r4, #0]
 8013616:	b11d      	cbz	r5, 8013620 <_printf_i+0x19c>
 8013618:	2310      	movs	r3, #16
 801361a:	e7ad      	b.n	8013578 <_printf_i+0xf4>
 801361c:	4826      	ldr	r0, [pc, #152]	@ (80136b8 <_printf_i+0x234>)
 801361e:	e7e9      	b.n	80135f4 <_printf_i+0x170>
 8013620:	6823      	ldr	r3, [r4, #0]
 8013622:	f023 0320 	bic.w	r3, r3, #32
 8013626:	6023      	str	r3, [r4, #0]
 8013628:	e7f6      	b.n	8013618 <_printf_i+0x194>
 801362a:	4616      	mov	r6, r2
 801362c:	e7bd      	b.n	80135aa <_printf_i+0x126>
 801362e:	6833      	ldr	r3, [r6, #0]
 8013630:	6825      	ldr	r5, [r4, #0]
 8013632:	6961      	ldr	r1, [r4, #20]
 8013634:	1d18      	adds	r0, r3, #4
 8013636:	6030      	str	r0, [r6, #0]
 8013638:	062e      	lsls	r6, r5, #24
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	d501      	bpl.n	8013642 <_printf_i+0x1be>
 801363e:	6019      	str	r1, [r3, #0]
 8013640:	e002      	b.n	8013648 <_printf_i+0x1c4>
 8013642:	0668      	lsls	r0, r5, #25
 8013644:	d5fb      	bpl.n	801363e <_printf_i+0x1ba>
 8013646:	8019      	strh	r1, [r3, #0]
 8013648:	2300      	movs	r3, #0
 801364a:	6123      	str	r3, [r4, #16]
 801364c:	4616      	mov	r6, r2
 801364e:	e7bc      	b.n	80135ca <_printf_i+0x146>
 8013650:	6833      	ldr	r3, [r6, #0]
 8013652:	1d1a      	adds	r2, r3, #4
 8013654:	6032      	str	r2, [r6, #0]
 8013656:	681e      	ldr	r6, [r3, #0]
 8013658:	6862      	ldr	r2, [r4, #4]
 801365a:	2100      	movs	r1, #0
 801365c:	4630      	mov	r0, r6
 801365e:	f7ec fdcf 	bl	8000200 <memchr>
 8013662:	b108      	cbz	r0, 8013668 <_printf_i+0x1e4>
 8013664:	1b80      	subs	r0, r0, r6
 8013666:	6060      	str	r0, [r4, #4]
 8013668:	6863      	ldr	r3, [r4, #4]
 801366a:	6123      	str	r3, [r4, #16]
 801366c:	2300      	movs	r3, #0
 801366e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013672:	e7aa      	b.n	80135ca <_printf_i+0x146>
 8013674:	6923      	ldr	r3, [r4, #16]
 8013676:	4632      	mov	r2, r6
 8013678:	4649      	mov	r1, r9
 801367a:	4640      	mov	r0, r8
 801367c:	47d0      	blx	sl
 801367e:	3001      	adds	r0, #1
 8013680:	d0ad      	beq.n	80135de <_printf_i+0x15a>
 8013682:	6823      	ldr	r3, [r4, #0]
 8013684:	079b      	lsls	r3, r3, #30
 8013686:	d413      	bmi.n	80136b0 <_printf_i+0x22c>
 8013688:	68e0      	ldr	r0, [r4, #12]
 801368a:	9b03      	ldr	r3, [sp, #12]
 801368c:	4298      	cmp	r0, r3
 801368e:	bfb8      	it	lt
 8013690:	4618      	movlt	r0, r3
 8013692:	e7a6      	b.n	80135e2 <_printf_i+0x15e>
 8013694:	2301      	movs	r3, #1
 8013696:	4632      	mov	r2, r6
 8013698:	4649      	mov	r1, r9
 801369a:	4640      	mov	r0, r8
 801369c:	47d0      	blx	sl
 801369e:	3001      	adds	r0, #1
 80136a0:	d09d      	beq.n	80135de <_printf_i+0x15a>
 80136a2:	3501      	adds	r5, #1
 80136a4:	68e3      	ldr	r3, [r4, #12]
 80136a6:	9903      	ldr	r1, [sp, #12]
 80136a8:	1a5b      	subs	r3, r3, r1
 80136aa:	42ab      	cmp	r3, r5
 80136ac:	dcf2      	bgt.n	8013694 <_printf_i+0x210>
 80136ae:	e7eb      	b.n	8013688 <_printf_i+0x204>
 80136b0:	2500      	movs	r5, #0
 80136b2:	f104 0619 	add.w	r6, r4, #25
 80136b6:	e7f5      	b.n	80136a4 <_printf_i+0x220>
 80136b8:	080141bc 	.word	0x080141bc
 80136bc:	080141cd 	.word	0x080141cd

080136c0 <_scanf_chars>:
 80136c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136c4:	4615      	mov	r5, r2
 80136c6:	688a      	ldr	r2, [r1, #8]
 80136c8:	4680      	mov	r8, r0
 80136ca:	460c      	mov	r4, r1
 80136cc:	b932      	cbnz	r2, 80136dc <_scanf_chars+0x1c>
 80136ce:	698a      	ldr	r2, [r1, #24]
 80136d0:	2a00      	cmp	r2, #0
 80136d2:	bf14      	ite	ne
 80136d4:	f04f 32ff 	movne.w	r2, #4294967295
 80136d8:	2201      	moveq	r2, #1
 80136da:	608a      	str	r2, [r1, #8]
 80136dc:	6822      	ldr	r2, [r4, #0]
 80136de:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8013770 <_scanf_chars+0xb0>
 80136e2:	06d1      	lsls	r1, r2, #27
 80136e4:	bf5f      	itttt	pl
 80136e6:	681a      	ldrpl	r2, [r3, #0]
 80136e8:	1d11      	addpl	r1, r2, #4
 80136ea:	6019      	strpl	r1, [r3, #0]
 80136ec:	6816      	ldrpl	r6, [r2, #0]
 80136ee:	2700      	movs	r7, #0
 80136f0:	69a0      	ldr	r0, [r4, #24]
 80136f2:	b188      	cbz	r0, 8013718 <_scanf_chars+0x58>
 80136f4:	2801      	cmp	r0, #1
 80136f6:	d107      	bne.n	8013708 <_scanf_chars+0x48>
 80136f8:	682b      	ldr	r3, [r5, #0]
 80136fa:	781a      	ldrb	r2, [r3, #0]
 80136fc:	6963      	ldr	r3, [r4, #20]
 80136fe:	5c9b      	ldrb	r3, [r3, r2]
 8013700:	b953      	cbnz	r3, 8013718 <_scanf_chars+0x58>
 8013702:	2f00      	cmp	r7, #0
 8013704:	d031      	beq.n	801376a <_scanf_chars+0xaa>
 8013706:	e022      	b.n	801374e <_scanf_chars+0x8e>
 8013708:	2802      	cmp	r0, #2
 801370a:	d120      	bne.n	801374e <_scanf_chars+0x8e>
 801370c:	682b      	ldr	r3, [r5, #0]
 801370e:	781b      	ldrb	r3, [r3, #0]
 8013710:	f819 3003 	ldrb.w	r3, [r9, r3]
 8013714:	071b      	lsls	r3, r3, #28
 8013716:	d41a      	bmi.n	801374e <_scanf_chars+0x8e>
 8013718:	6823      	ldr	r3, [r4, #0]
 801371a:	06da      	lsls	r2, r3, #27
 801371c:	bf5e      	ittt	pl
 801371e:	682b      	ldrpl	r3, [r5, #0]
 8013720:	781b      	ldrbpl	r3, [r3, #0]
 8013722:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013726:	682a      	ldr	r2, [r5, #0]
 8013728:	686b      	ldr	r3, [r5, #4]
 801372a:	3201      	adds	r2, #1
 801372c:	602a      	str	r2, [r5, #0]
 801372e:	68a2      	ldr	r2, [r4, #8]
 8013730:	3b01      	subs	r3, #1
 8013732:	3a01      	subs	r2, #1
 8013734:	606b      	str	r3, [r5, #4]
 8013736:	3701      	adds	r7, #1
 8013738:	60a2      	str	r2, [r4, #8]
 801373a:	b142      	cbz	r2, 801374e <_scanf_chars+0x8e>
 801373c:	2b00      	cmp	r3, #0
 801373e:	dcd7      	bgt.n	80136f0 <_scanf_chars+0x30>
 8013740:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013744:	4629      	mov	r1, r5
 8013746:	4640      	mov	r0, r8
 8013748:	4798      	blx	r3
 801374a:	2800      	cmp	r0, #0
 801374c:	d0d0      	beq.n	80136f0 <_scanf_chars+0x30>
 801374e:	6823      	ldr	r3, [r4, #0]
 8013750:	f013 0310 	ands.w	r3, r3, #16
 8013754:	d105      	bne.n	8013762 <_scanf_chars+0xa2>
 8013756:	68e2      	ldr	r2, [r4, #12]
 8013758:	3201      	adds	r2, #1
 801375a:	60e2      	str	r2, [r4, #12]
 801375c:	69a2      	ldr	r2, [r4, #24]
 801375e:	b102      	cbz	r2, 8013762 <_scanf_chars+0xa2>
 8013760:	7033      	strb	r3, [r6, #0]
 8013762:	6923      	ldr	r3, [r4, #16]
 8013764:	443b      	add	r3, r7
 8013766:	6123      	str	r3, [r4, #16]
 8013768:	2000      	movs	r0, #0
 801376a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801376e:	bf00      	nop
 8013770:	080140ab 	.word	0x080140ab

08013774 <_scanf_i>:
 8013774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013778:	4698      	mov	r8, r3
 801377a:	4b74      	ldr	r3, [pc, #464]	@ (801394c <_scanf_i+0x1d8>)
 801377c:	460c      	mov	r4, r1
 801377e:	4682      	mov	sl, r0
 8013780:	4616      	mov	r6, r2
 8013782:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013786:	b087      	sub	sp, #28
 8013788:	ab03      	add	r3, sp, #12
 801378a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801378e:	4b70      	ldr	r3, [pc, #448]	@ (8013950 <_scanf_i+0x1dc>)
 8013790:	69a1      	ldr	r1, [r4, #24]
 8013792:	4a70      	ldr	r2, [pc, #448]	@ (8013954 <_scanf_i+0x1e0>)
 8013794:	2903      	cmp	r1, #3
 8013796:	bf08      	it	eq
 8013798:	461a      	moveq	r2, r3
 801379a:	68a3      	ldr	r3, [r4, #8]
 801379c:	9201      	str	r2, [sp, #4]
 801379e:	1e5a      	subs	r2, r3, #1
 80137a0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80137a4:	bf88      	it	hi
 80137a6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80137aa:	4627      	mov	r7, r4
 80137ac:	bf82      	ittt	hi
 80137ae:	eb03 0905 	addhi.w	r9, r3, r5
 80137b2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80137b6:	60a3      	strhi	r3, [r4, #8]
 80137b8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80137bc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80137c0:	bf98      	it	ls
 80137c2:	f04f 0900 	movls.w	r9, #0
 80137c6:	6023      	str	r3, [r4, #0]
 80137c8:	463d      	mov	r5, r7
 80137ca:	f04f 0b00 	mov.w	fp, #0
 80137ce:	6831      	ldr	r1, [r6, #0]
 80137d0:	ab03      	add	r3, sp, #12
 80137d2:	7809      	ldrb	r1, [r1, #0]
 80137d4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80137d8:	2202      	movs	r2, #2
 80137da:	f7ec fd11 	bl	8000200 <memchr>
 80137de:	b328      	cbz	r0, 801382c <_scanf_i+0xb8>
 80137e0:	f1bb 0f01 	cmp.w	fp, #1
 80137e4:	d159      	bne.n	801389a <_scanf_i+0x126>
 80137e6:	6862      	ldr	r2, [r4, #4]
 80137e8:	b92a      	cbnz	r2, 80137f6 <_scanf_i+0x82>
 80137ea:	6822      	ldr	r2, [r4, #0]
 80137ec:	2108      	movs	r1, #8
 80137ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80137f2:	6061      	str	r1, [r4, #4]
 80137f4:	6022      	str	r2, [r4, #0]
 80137f6:	6822      	ldr	r2, [r4, #0]
 80137f8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80137fc:	6022      	str	r2, [r4, #0]
 80137fe:	68a2      	ldr	r2, [r4, #8]
 8013800:	1e51      	subs	r1, r2, #1
 8013802:	60a1      	str	r1, [r4, #8]
 8013804:	b192      	cbz	r2, 801382c <_scanf_i+0xb8>
 8013806:	6832      	ldr	r2, [r6, #0]
 8013808:	1c51      	adds	r1, r2, #1
 801380a:	6031      	str	r1, [r6, #0]
 801380c:	7812      	ldrb	r2, [r2, #0]
 801380e:	f805 2b01 	strb.w	r2, [r5], #1
 8013812:	6872      	ldr	r2, [r6, #4]
 8013814:	3a01      	subs	r2, #1
 8013816:	2a00      	cmp	r2, #0
 8013818:	6072      	str	r2, [r6, #4]
 801381a:	dc07      	bgt.n	801382c <_scanf_i+0xb8>
 801381c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8013820:	4631      	mov	r1, r6
 8013822:	4650      	mov	r0, sl
 8013824:	4790      	blx	r2
 8013826:	2800      	cmp	r0, #0
 8013828:	f040 8085 	bne.w	8013936 <_scanf_i+0x1c2>
 801382c:	f10b 0b01 	add.w	fp, fp, #1
 8013830:	f1bb 0f03 	cmp.w	fp, #3
 8013834:	d1cb      	bne.n	80137ce <_scanf_i+0x5a>
 8013836:	6863      	ldr	r3, [r4, #4]
 8013838:	b90b      	cbnz	r3, 801383e <_scanf_i+0xca>
 801383a:	230a      	movs	r3, #10
 801383c:	6063      	str	r3, [r4, #4]
 801383e:	6863      	ldr	r3, [r4, #4]
 8013840:	4945      	ldr	r1, [pc, #276]	@ (8013958 <_scanf_i+0x1e4>)
 8013842:	6960      	ldr	r0, [r4, #20]
 8013844:	1ac9      	subs	r1, r1, r3
 8013846:	f000 f889 	bl	801395c <__sccl>
 801384a:	f04f 0b00 	mov.w	fp, #0
 801384e:	68a3      	ldr	r3, [r4, #8]
 8013850:	6822      	ldr	r2, [r4, #0]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d03d      	beq.n	80138d2 <_scanf_i+0x15e>
 8013856:	6831      	ldr	r1, [r6, #0]
 8013858:	6960      	ldr	r0, [r4, #20]
 801385a:	f891 c000 	ldrb.w	ip, [r1]
 801385e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013862:	2800      	cmp	r0, #0
 8013864:	d035      	beq.n	80138d2 <_scanf_i+0x15e>
 8013866:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801386a:	d124      	bne.n	80138b6 <_scanf_i+0x142>
 801386c:	0510      	lsls	r0, r2, #20
 801386e:	d522      	bpl.n	80138b6 <_scanf_i+0x142>
 8013870:	f10b 0b01 	add.w	fp, fp, #1
 8013874:	f1b9 0f00 	cmp.w	r9, #0
 8013878:	d003      	beq.n	8013882 <_scanf_i+0x10e>
 801387a:	3301      	adds	r3, #1
 801387c:	f109 39ff 	add.w	r9, r9, #4294967295
 8013880:	60a3      	str	r3, [r4, #8]
 8013882:	6873      	ldr	r3, [r6, #4]
 8013884:	3b01      	subs	r3, #1
 8013886:	2b00      	cmp	r3, #0
 8013888:	6073      	str	r3, [r6, #4]
 801388a:	dd1b      	ble.n	80138c4 <_scanf_i+0x150>
 801388c:	6833      	ldr	r3, [r6, #0]
 801388e:	3301      	adds	r3, #1
 8013890:	6033      	str	r3, [r6, #0]
 8013892:	68a3      	ldr	r3, [r4, #8]
 8013894:	3b01      	subs	r3, #1
 8013896:	60a3      	str	r3, [r4, #8]
 8013898:	e7d9      	b.n	801384e <_scanf_i+0xda>
 801389a:	f1bb 0f02 	cmp.w	fp, #2
 801389e:	d1ae      	bne.n	80137fe <_scanf_i+0x8a>
 80138a0:	6822      	ldr	r2, [r4, #0]
 80138a2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80138a6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80138aa:	d1c4      	bne.n	8013836 <_scanf_i+0xc2>
 80138ac:	2110      	movs	r1, #16
 80138ae:	6061      	str	r1, [r4, #4]
 80138b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80138b4:	e7a2      	b.n	80137fc <_scanf_i+0x88>
 80138b6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80138ba:	6022      	str	r2, [r4, #0]
 80138bc:	780b      	ldrb	r3, [r1, #0]
 80138be:	f805 3b01 	strb.w	r3, [r5], #1
 80138c2:	e7de      	b.n	8013882 <_scanf_i+0x10e>
 80138c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80138c8:	4631      	mov	r1, r6
 80138ca:	4650      	mov	r0, sl
 80138cc:	4798      	blx	r3
 80138ce:	2800      	cmp	r0, #0
 80138d0:	d0df      	beq.n	8013892 <_scanf_i+0x11e>
 80138d2:	6823      	ldr	r3, [r4, #0]
 80138d4:	05d9      	lsls	r1, r3, #23
 80138d6:	d50d      	bpl.n	80138f4 <_scanf_i+0x180>
 80138d8:	42bd      	cmp	r5, r7
 80138da:	d909      	bls.n	80138f0 <_scanf_i+0x17c>
 80138dc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80138e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80138e4:	4632      	mov	r2, r6
 80138e6:	4650      	mov	r0, sl
 80138e8:	4798      	blx	r3
 80138ea:	f105 39ff 	add.w	r9, r5, #4294967295
 80138ee:	464d      	mov	r5, r9
 80138f0:	42bd      	cmp	r5, r7
 80138f2:	d028      	beq.n	8013946 <_scanf_i+0x1d2>
 80138f4:	6822      	ldr	r2, [r4, #0]
 80138f6:	f012 0210 	ands.w	r2, r2, #16
 80138fa:	d113      	bne.n	8013924 <_scanf_i+0x1b0>
 80138fc:	702a      	strb	r2, [r5, #0]
 80138fe:	6863      	ldr	r3, [r4, #4]
 8013900:	9e01      	ldr	r6, [sp, #4]
 8013902:	4639      	mov	r1, r7
 8013904:	4650      	mov	r0, sl
 8013906:	47b0      	blx	r6
 8013908:	f8d8 3000 	ldr.w	r3, [r8]
 801390c:	6821      	ldr	r1, [r4, #0]
 801390e:	1d1a      	adds	r2, r3, #4
 8013910:	f8c8 2000 	str.w	r2, [r8]
 8013914:	f011 0f20 	tst.w	r1, #32
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	d00f      	beq.n	801393c <_scanf_i+0x1c8>
 801391c:	6018      	str	r0, [r3, #0]
 801391e:	68e3      	ldr	r3, [r4, #12]
 8013920:	3301      	adds	r3, #1
 8013922:	60e3      	str	r3, [r4, #12]
 8013924:	6923      	ldr	r3, [r4, #16]
 8013926:	1bed      	subs	r5, r5, r7
 8013928:	445d      	add	r5, fp
 801392a:	442b      	add	r3, r5
 801392c:	6123      	str	r3, [r4, #16]
 801392e:	2000      	movs	r0, #0
 8013930:	b007      	add	sp, #28
 8013932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013936:	f04f 0b00 	mov.w	fp, #0
 801393a:	e7ca      	b.n	80138d2 <_scanf_i+0x15e>
 801393c:	07ca      	lsls	r2, r1, #31
 801393e:	bf4c      	ite	mi
 8013940:	8018      	strhmi	r0, [r3, #0]
 8013942:	6018      	strpl	r0, [r3, #0]
 8013944:	e7eb      	b.n	801391e <_scanf_i+0x1aa>
 8013946:	2001      	movs	r0, #1
 8013948:	e7f2      	b.n	8013930 <_scanf_i+0x1bc>
 801394a:	bf00      	nop
 801394c:	08013fa8 	.word	0x08013fa8
 8013950:	0801296d 	.word	0x0801296d
 8013954:	08013bd1 	.word	0x08013bd1
 8013958:	080141ee 	.word	0x080141ee

0801395c <__sccl>:
 801395c:	b570      	push	{r4, r5, r6, lr}
 801395e:	780b      	ldrb	r3, [r1, #0]
 8013960:	4604      	mov	r4, r0
 8013962:	2b5e      	cmp	r3, #94	@ 0x5e
 8013964:	bf0b      	itete	eq
 8013966:	784b      	ldrbeq	r3, [r1, #1]
 8013968:	1c4a      	addne	r2, r1, #1
 801396a:	1c8a      	addeq	r2, r1, #2
 801396c:	2100      	movne	r1, #0
 801396e:	bf08      	it	eq
 8013970:	2101      	moveq	r1, #1
 8013972:	3801      	subs	r0, #1
 8013974:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8013978:	f800 1f01 	strb.w	r1, [r0, #1]!
 801397c:	42a8      	cmp	r0, r5
 801397e:	d1fb      	bne.n	8013978 <__sccl+0x1c>
 8013980:	b90b      	cbnz	r3, 8013986 <__sccl+0x2a>
 8013982:	1e50      	subs	r0, r2, #1
 8013984:	bd70      	pop	{r4, r5, r6, pc}
 8013986:	f081 0101 	eor.w	r1, r1, #1
 801398a:	54e1      	strb	r1, [r4, r3]
 801398c:	4610      	mov	r0, r2
 801398e:	4602      	mov	r2, r0
 8013990:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013994:	2d2d      	cmp	r5, #45	@ 0x2d
 8013996:	d005      	beq.n	80139a4 <__sccl+0x48>
 8013998:	2d5d      	cmp	r5, #93	@ 0x5d
 801399a:	d016      	beq.n	80139ca <__sccl+0x6e>
 801399c:	2d00      	cmp	r5, #0
 801399e:	d0f1      	beq.n	8013984 <__sccl+0x28>
 80139a0:	462b      	mov	r3, r5
 80139a2:	e7f2      	b.n	801398a <__sccl+0x2e>
 80139a4:	7846      	ldrb	r6, [r0, #1]
 80139a6:	2e5d      	cmp	r6, #93	@ 0x5d
 80139a8:	d0fa      	beq.n	80139a0 <__sccl+0x44>
 80139aa:	42b3      	cmp	r3, r6
 80139ac:	dcf8      	bgt.n	80139a0 <__sccl+0x44>
 80139ae:	3002      	adds	r0, #2
 80139b0:	461a      	mov	r2, r3
 80139b2:	3201      	adds	r2, #1
 80139b4:	4296      	cmp	r6, r2
 80139b6:	54a1      	strb	r1, [r4, r2]
 80139b8:	dcfb      	bgt.n	80139b2 <__sccl+0x56>
 80139ba:	1af2      	subs	r2, r6, r3
 80139bc:	3a01      	subs	r2, #1
 80139be:	1c5d      	adds	r5, r3, #1
 80139c0:	42b3      	cmp	r3, r6
 80139c2:	bfa8      	it	ge
 80139c4:	2200      	movge	r2, #0
 80139c6:	18ab      	adds	r3, r5, r2
 80139c8:	e7e1      	b.n	801398e <__sccl+0x32>
 80139ca:	4610      	mov	r0, r2
 80139cc:	e7da      	b.n	8013984 <__sccl+0x28>

080139ce <__submore>:
 80139ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139d2:	460c      	mov	r4, r1
 80139d4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80139d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80139da:	4299      	cmp	r1, r3
 80139dc:	d11d      	bne.n	8013a1a <__submore+0x4c>
 80139de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80139e2:	f7ff f92d 	bl	8012c40 <_malloc_r>
 80139e6:	b918      	cbnz	r0, 80139f0 <__submore+0x22>
 80139e8:	f04f 30ff 	mov.w	r0, #4294967295
 80139ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80139f4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80139f6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80139fa:	6360      	str	r0, [r4, #52]	@ 0x34
 80139fc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8013a00:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8013a04:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8013a08:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8013a0c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8013a10:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8013a14:	6020      	str	r0, [r4, #0]
 8013a16:	2000      	movs	r0, #0
 8013a18:	e7e8      	b.n	80139ec <__submore+0x1e>
 8013a1a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8013a1c:	0077      	lsls	r7, r6, #1
 8013a1e:	463a      	mov	r2, r7
 8013a20:	f000 f83a 	bl	8013a98 <_realloc_r>
 8013a24:	4605      	mov	r5, r0
 8013a26:	2800      	cmp	r0, #0
 8013a28:	d0de      	beq.n	80139e8 <__submore+0x1a>
 8013a2a:	eb00 0806 	add.w	r8, r0, r6
 8013a2e:	4601      	mov	r1, r0
 8013a30:	4632      	mov	r2, r6
 8013a32:	4640      	mov	r0, r8
 8013a34:	f7ff f88a 	bl	8012b4c <memcpy>
 8013a38:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8013a3c:	f8c4 8000 	str.w	r8, [r4]
 8013a40:	e7e9      	b.n	8013a16 <__submore+0x48>

08013a42 <memmove>:
 8013a42:	4288      	cmp	r0, r1
 8013a44:	b510      	push	{r4, lr}
 8013a46:	eb01 0402 	add.w	r4, r1, r2
 8013a4a:	d902      	bls.n	8013a52 <memmove+0x10>
 8013a4c:	4284      	cmp	r4, r0
 8013a4e:	4623      	mov	r3, r4
 8013a50:	d807      	bhi.n	8013a62 <memmove+0x20>
 8013a52:	1e43      	subs	r3, r0, #1
 8013a54:	42a1      	cmp	r1, r4
 8013a56:	d008      	beq.n	8013a6a <memmove+0x28>
 8013a58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013a5c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013a60:	e7f8      	b.n	8013a54 <memmove+0x12>
 8013a62:	4402      	add	r2, r0
 8013a64:	4601      	mov	r1, r0
 8013a66:	428a      	cmp	r2, r1
 8013a68:	d100      	bne.n	8013a6c <memmove+0x2a>
 8013a6a:	bd10      	pop	{r4, pc}
 8013a6c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013a70:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013a74:	e7f7      	b.n	8013a66 <memmove+0x24>
	...

08013a78 <_sbrk_r>:
 8013a78:	b538      	push	{r3, r4, r5, lr}
 8013a7a:	4d06      	ldr	r5, [pc, #24]	@ (8013a94 <_sbrk_r+0x1c>)
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	4604      	mov	r4, r0
 8013a80:	4608      	mov	r0, r1
 8013a82:	602b      	str	r3, [r5, #0]
 8013a84:	f7f2 f872 	bl	8005b6c <_sbrk>
 8013a88:	1c43      	adds	r3, r0, #1
 8013a8a:	d102      	bne.n	8013a92 <_sbrk_r+0x1a>
 8013a8c:	682b      	ldr	r3, [r5, #0]
 8013a8e:	b103      	cbz	r3, 8013a92 <_sbrk_r+0x1a>
 8013a90:	6023      	str	r3, [r4, #0]
 8013a92:	bd38      	pop	{r3, r4, r5, pc}
 8013a94:	20005188 	.word	0x20005188

08013a98 <_realloc_r>:
 8013a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a9c:	4607      	mov	r7, r0
 8013a9e:	4614      	mov	r4, r2
 8013aa0:	460d      	mov	r5, r1
 8013aa2:	b921      	cbnz	r1, 8013aae <_realloc_r+0x16>
 8013aa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013aa8:	4611      	mov	r1, r2
 8013aaa:	f7ff b8c9 	b.w	8012c40 <_malloc_r>
 8013aae:	b92a      	cbnz	r2, 8013abc <_realloc_r+0x24>
 8013ab0:	f7ff f85a 	bl	8012b68 <_free_r>
 8013ab4:	4625      	mov	r5, r4
 8013ab6:	4628      	mov	r0, r5
 8013ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013abc:	f000 f88a 	bl	8013bd4 <_malloc_usable_size_r>
 8013ac0:	4284      	cmp	r4, r0
 8013ac2:	4606      	mov	r6, r0
 8013ac4:	d802      	bhi.n	8013acc <_realloc_r+0x34>
 8013ac6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013aca:	d8f4      	bhi.n	8013ab6 <_realloc_r+0x1e>
 8013acc:	4621      	mov	r1, r4
 8013ace:	4638      	mov	r0, r7
 8013ad0:	f7ff f8b6 	bl	8012c40 <_malloc_r>
 8013ad4:	4680      	mov	r8, r0
 8013ad6:	b908      	cbnz	r0, 8013adc <_realloc_r+0x44>
 8013ad8:	4645      	mov	r5, r8
 8013ada:	e7ec      	b.n	8013ab6 <_realloc_r+0x1e>
 8013adc:	42b4      	cmp	r4, r6
 8013ade:	4622      	mov	r2, r4
 8013ae0:	4629      	mov	r1, r5
 8013ae2:	bf28      	it	cs
 8013ae4:	4632      	movcs	r2, r6
 8013ae6:	f7ff f831 	bl	8012b4c <memcpy>
 8013aea:	4629      	mov	r1, r5
 8013aec:	4638      	mov	r0, r7
 8013aee:	f7ff f83b 	bl	8012b68 <_free_r>
 8013af2:	e7f1      	b.n	8013ad8 <_realloc_r+0x40>

08013af4 <_strtoul_l.isra.0>:
 8013af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013af8:	4e34      	ldr	r6, [pc, #208]	@ (8013bcc <_strtoul_l.isra.0+0xd8>)
 8013afa:	4686      	mov	lr, r0
 8013afc:	460d      	mov	r5, r1
 8013afe:	4628      	mov	r0, r5
 8013b00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013b04:	5d37      	ldrb	r7, [r6, r4]
 8013b06:	f017 0708 	ands.w	r7, r7, #8
 8013b0a:	d1f8      	bne.n	8013afe <_strtoul_l.isra.0+0xa>
 8013b0c:	2c2d      	cmp	r4, #45	@ 0x2d
 8013b0e:	d110      	bne.n	8013b32 <_strtoul_l.isra.0+0x3e>
 8013b10:	782c      	ldrb	r4, [r5, #0]
 8013b12:	2701      	movs	r7, #1
 8013b14:	1c85      	adds	r5, r0, #2
 8013b16:	f033 0010 	bics.w	r0, r3, #16
 8013b1a:	d115      	bne.n	8013b48 <_strtoul_l.isra.0+0x54>
 8013b1c:	2c30      	cmp	r4, #48	@ 0x30
 8013b1e:	d10d      	bne.n	8013b3c <_strtoul_l.isra.0+0x48>
 8013b20:	7828      	ldrb	r0, [r5, #0]
 8013b22:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8013b26:	2858      	cmp	r0, #88	@ 0x58
 8013b28:	d108      	bne.n	8013b3c <_strtoul_l.isra.0+0x48>
 8013b2a:	786c      	ldrb	r4, [r5, #1]
 8013b2c:	3502      	adds	r5, #2
 8013b2e:	2310      	movs	r3, #16
 8013b30:	e00a      	b.n	8013b48 <_strtoul_l.isra.0+0x54>
 8013b32:	2c2b      	cmp	r4, #43	@ 0x2b
 8013b34:	bf04      	itt	eq
 8013b36:	782c      	ldrbeq	r4, [r5, #0]
 8013b38:	1c85      	addeq	r5, r0, #2
 8013b3a:	e7ec      	b.n	8013b16 <_strtoul_l.isra.0+0x22>
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d1f6      	bne.n	8013b2e <_strtoul_l.isra.0+0x3a>
 8013b40:	2c30      	cmp	r4, #48	@ 0x30
 8013b42:	bf14      	ite	ne
 8013b44:	230a      	movne	r3, #10
 8013b46:	2308      	moveq	r3, #8
 8013b48:	f04f 38ff 	mov.w	r8, #4294967295
 8013b4c:	2600      	movs	r6, #0
 8013b4e:	fbb8 f8f3 	udiv	r8, r8, r3
 8013b52:	fb03 f908 	mul.w	r9, r3, r8
 8013b56:	ea6f 0909 	mvn.w	r9, r9
 8013b5a:	4630      	mov	r0, r6
 8013b5c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8013b60:	f1bc 0f09 	cmp.w	ip, #9
 8013b64:	d810      	bhi.n	8013b88 <_strtoul_l.isra.0+0x94>
 8013b66:	4664      	mov	r4, ip
 8013b68:	42a3      	cmp	r3, r4
 8013b6a:	dd1e      	ble.n	8013baa <_strtoul_l.isra.0+0xb6>
 8013b6c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8013b70:	d007      	beq.n	8013b82 <_strtoul_l.isra.0+0x8e>
 8013b72:	4580      	cmp	r8, r0
 8013b74:	d316      	bcc.n	8013ba4 <_strtoul_l.isra.0+0xb0>
 8013b76:	d101      	bne.n	8013b7c <_strtoul_l.isra.0+0x88>
 8013b78:	45a1      	cmp	r9, r4
 8013b7a:	db13      	blt.n	8013ba4 <_strtoul_l.isra.0+0xb0>
 8013b7c:	fb00 4003 	mla	r0, r0, r3, r4
 8013b80:	2601      	movs	r6, #1
 8013b82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013b86:	e7e9      	b.n	8013b5c <_strtoul_l.isra.0+0x68>
 8013b88:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8013b8c:	f1bc 0f19 	cmp.w	ip, #25
 8013b90:	d801      	bhi.n	8013b96 <_strtoul_l.isra.0+0xa2>
 8013b92:	3c37      	subs	r4, #55	@ 0x37
 8013b94:	e7e8      	b.n	8013b68 <_strtoul_l.isra.0+0x74>
 8013b96:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8013b9a:	f1bc 0f19 	cmp.w	ip, #25
 8013b9e:	d804      	bhi.n	8013baa <_strtoul_l.isra.0+0xb6>
 8013ba0:	3c57      	subs	r4, #87	@ 0x57
 8013ba2:	e7e1      	b.n	8013b68 <_strtoul_l.isra.0+0x74>
 8013ba4:	f04f 36ff 	mov.w	r6, #4294967295
 8013ba8:	e7eb      	b.n	8013b82 <_strtoul_l.isra.0+0x8e>
 8013baa:	1c73      	adds	r3, r6, #1
 8013bac:	d106      	bne.n	8013bbc <_strtoul_l.isra.0+0xc8>
 8013bae:	2322      	movs	r3, #34	@ 0x22
 8013bb0:	f8ce 3000 	str.w	r3, [lr]
 8013bb4:	4630      	mov	r0, r6
 8013bb6:	b932      	cbnz	r2, 8013bc6 <_strtoul_l.isra.0+0xd2>
 8013bb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013bbc:	b107      	cbz	r7, 8013bc0 <_strtoul_l.isra.0+0xcc>
 8013bbe:	4240      	negs	r0, r0
 8013bc0:	2a00      	cmp	r2, #0
 8013bc2:	d0f9      	beq.n	8013bb8 <_strtoul_l.isra.0+0xc4>
 8013bc4:	b106      	cbz	r6, 8013bc8 <_strtoul_l.isra.0+0xd4>
 8013bc6:	1e69      	subs	r1, r5, #1
 8013bc8:	6011      	str	r1, [r2, #0]
 8013bca:	e7f5      	b.n	8013bb8 <_strtoul_l.isra.0+0xc4>
 8013bcc:	080140ab 	.word	0x080140ab

08013bd0 <_strtoul_r>:
 8013bd0:	f7ff bf90 	b.w	8013af4 <_strtoul_l.isra.0>

08013bd4 <_malloc_usable_size_r>:
 8013bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013bd8:	1f18      	subs	r0, r3, #4
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	bfbc      	itt	lt
 8013bde:	580b      	ldrlt	r3, [r1, r0]
 8013be0:	18c0      	addlt	r0, r0, r3
 8013be2:	4770      	bx	lr

08013be4 <_init>:
 8013be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013be6:	bf00      	nop
 8013be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013bea:	bc08      	pop	{r3}
 8013bec:	469e      	mov	lr, r3
 8013bee:	4770      	bx	lr

08013bf0 <_fini>:
 8013bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bf2:	bf00      	nop
 8013bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013bf6:	bc08      	pop	{r3}
 8013bf8:	469e      	mov	lr, r3
 8013bfa:	4770      	bx	lr
