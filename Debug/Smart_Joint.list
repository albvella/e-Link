
Smart_Joint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017a08  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a8c  08017b98  08017b98  00018b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018624  08018624  0001a084  2**0
                  CONTENTS
  4 .ARM          00000008  08018624  08018624  00019624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801862c  0801862c  0001a084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801862c  0801862c  0001962c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018630  08018630  00019630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08018634  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d20  20000088  080186b8  0001a088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005da8  080186b8  0001ada8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a299  00000000  00000000  0001a0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000068a0  00000000  00000000  0005434d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e68  00000000  00000000  0005abf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000247f  00000000  00000000  0005da58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003157c  00000000  00000000  0005fed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038def  00000000  00000000  00091453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124b10  00000000  00000000  000ca242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001eed52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d130  00000000  00000000  001eed98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001fbec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017b80 	.word	0x08017b80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08017b80 	.word	0x08017b80

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b988 	b.w	8000da4 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	468e      	mov	lr, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	4688      	mov	r8, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d962      	bls.n	8000b88 <__udivmoddi4+0xdc>
 8000ac2:	fab2 f682 	clz	r6, r2
 8000ac6:	b14e      	cbz	r6, 8000adc <__udivmoddi4+0x30>
 8000ac8:	f1c6 0320 	rsb	r3, r6, #32
 8000acc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ad0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad4:	40b7      	lsls	r7, r6
 8000ad6:	ea43 0808 	orr.w	r8, r3, r8
 8000ada:	40b4      	lsls	r4, r6
 8000adc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae0:	fa1f fc87 	uxth.w	ip, r7
 8000ae4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	fb0e 8811 	mls	r8, lr, r1, r8
 8000aee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af2:	fb01 f20c 	mul.w	r2, r1, ip
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b00:	f080 80ea 	bcs.w	8000cd8 <__udivmoddi4+0x22c>
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f240 80e7 	bls.w	8000cd8 <__udivmoddi4+0x22c>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	1a9a      	subs	r2, r3, r2
 8000b10:	b2a3      	uxth	r3, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b22:	459c      	cmp	ip, r3
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0x8e>
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2c:	f080 80d6 	bcs.w	8000cdc <__udivmoddi4+0x230>
 8000b30:	459c      	cmp	ip, r3
 8000b32:	f240 80d3 	bls.w	8000cdc <__udivmoddi4+0x230>
 8000b36:	443b      	add	r3, r7
 8000b38:	3802      	subs	r0, #2
 8000b3a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b3e:	eba3 030c 	sub.w	r3, r3, ip
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11d      	cbz	r5, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40f3      	lsrs	r3, r6
 8000b48:	2200      	movs	r2, #0
 8000b4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d905      	bls.n	8000b62 <__udivmoddi4+0xb6>
 8000b56:	b10d      	cbz	r5, 8000b5c <__udivmoddi4+0xb0>
 8000b58:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e7f5      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b62:	fab3 f183 	clz	r1, r3
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d146      	bne.n	8000bf8 <__udivmoddi4+0x14c>
 8000b6a:	4573      	cmp	r3, lr
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0xc8>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 8105 	bhi.w	8000d7e <__udivmoddi4+0x2d2>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0e5      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b82:	e9c5 4800 	strd	r4, r8, [r5]
 8000b86:	e7e2      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f000 8090 	beq.w	8000cae <__udivmoddi4+0x202>
 8000b8e:	fab2 f682 	clz	r6, r2
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	f040 80a4 	bne.w	8000ce0 <__udivmoddi4+0x234>
 8000b98:	1a8a      	subs	r2, r1, r2
 8000b9a:	0c03      	lsrs	r3, r0, #16
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	b280      	uxth	r0, r0
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000baa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb2:	fb04 f20c 	mul.w	r2, r4, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <__udivmoddi4+0x11e>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x11c>
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f200 80e0 	bhi.w	8000d88 <__udivmoddi4+0x2dc>
 8000bc8:	46c4      	mov	ip, r8
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bd0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bd4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bd8:	fb02 f404 	mul.w	r4, r2, r4
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x144>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x142>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f200 80ca 	bhi.w	8000d82 <__udivmoddi4+0x2d6>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	1b1b      	subs	r3, r3, r4
 8000bf2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bf6:	e7a5      	b.n	8000b44 <__udivmoddi4+0x98>
 8000bf8:	f1c1 0620 	rsb	r6, r1, #32
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000c02:	431f      	orrs	r7, r3
 8000c04:	fa0e f401 	lsl.w	r4, lr, r1
 8000c08:	fa20 f306 	lsr.w	r3, r0, r6
 8000c0c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c10:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c14:	4323      	orrs	r3, r4
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	fa1f fc87 	uxth.w	ip, r7
 8000c1e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c22:	0c1c      	lsrs	r4, r3, #16
 8000c24:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c2c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	fa02 f201 	lsl.w	r2, r2, r1
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x1a0>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c3e:	f080 809c 	bcs.w	8000d7a <__udivmoddi4+0x2ce>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8099 	bls.w	8000d7a <__udivmoddi4+0x2ce>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	fa1f fe83 	uxth.w	lr, r3
 8000c54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c58:	fb09 4413 	mls	r4, r9, r3, r4
 8000c5c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c60:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c64:	45a4      	cmp	ip, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x1ce>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c6e:	f080 8082 	bcs.w	8000d76 <__udivmoddi4+0x2ca>
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	d97f      	bls.n	8000d76 <__udivmoddi4+0x2ca>
 8000c76:	3b02      	subs	r3, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c7e:	eba4 040c 	sub.w	r4, r4, ip
 8000c82:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c86:	4564      	cmp	r4, ip
 8000c88:	4673      	mov	r3, lr
 8000c8a:	46e1      	mov	r9, ip
 8000c8c:	d362      	bcc.n	8000d54 <__udivmoddi4+0x2a8>
 8000c8e:	d05f      	beq.n	8000d50 <__udivmoddi4+0x2a4>
 8000c90:	b15d      	cbz	r5, 8000caa <__udivmoddi4+0x1fe>
 8000c92:	ebb8 0203 	subs.w	r2, r8, r3
 8000c96:	eb64 0409 	sbc.w	r4, r4, r9
 8000c9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000ca2:	431e      	orrs	r6, r3
 8000ca4:	40cc      	lsrs	r4, r1
 8000ca6:	e9c5 6400 	strd	r6, r4, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	e74f      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000cae:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cb2:	0c01      	lsrs	r1, r0, #16
 8000cb4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cb8:	b280      	uxth	r0, r0
 8000cba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	463c      	mov	r4, r7
 8000cc4:	46b8      	mov	r8, r7
 8000cc6:	46be      	mov	lr, r7
 8000cc8:	2620      	movs	r6, #32
 8000cca:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cce:	eba2 0208 	sub.w	r2, r2, r8
 8000cd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cd6:	e766      	b.n	8000ba6 <__udivmoddi4+0xfa>
 8000cd8:	4601      	mov	r1, r0
 8000cda:	e718      	b.n	8000b0e <__udivmoddi4+0x62>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	e72c      	b.n	8000b3a <__udivmoddi4+0x8e>
 8000ce0:	f1c6 0220 	rsb	r2, r6, #32
 8000ce4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ce8:	40b7      	lsls	r7, r6
 8000cea:	40b1      	lsls	r1, r6
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cfa:	b2bc      	uxth	r4, r7
 8000cfc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb08 f904 	mul.w	r9, r8, r4
 8000d0a:	40b0      	lsls	r0, r6
 8000d0c:	4589      	cmp	r9, r1
 8000d0e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d12:	b280      	uxth	r0, r0
 8000d14:	d93e      	bls.n	8000d94 <__udivmoddi4+0x2e8>
 8000d16:	1879      	adds	r1, r7, r1
 8000d18:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d1c:	d201      	bcs.n	8000d22 <__udivmoddi4+0x276>
 8000d1e:	4589      	cmp	r9, r1
 8000d20:	d81f      	bhi.n	8000d62 <__udivmoddi4+0x2b6>
 8000d22:	eba1 0109 	sub.w	r1, r1, r9
 8000d26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2a:	fb09 f804 	mul.w	r8, r9, r4
 8000d2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d32:	b292      	uxth	r2, r2
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	4542      	cmp	r2, r8
 8000d3a:	d229      	bcs.n	8000d90 <__udivmoddi4+0x2e4>
 8000d3c:	18ba      	adds	r2, r7, r2
 8000d3e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d42:	d2c4      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d44:	4542      	cmp	r2, r8
 8000d46:	d2c2      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d48:	f1a9 0102 	sub.w	r1, r9, #2
 8000d4c:	443a      	add	r2, r7
 8000d4e:	e7be      	b.n	8000cce <__udivmoddi4+0x222>
 8000d50:	45f0      	cmp	r8, lr
 8000d52:	d29d      	bcs.n	8000c90 <__udivmoddi4+0x1e4>
 8000d54:	ebbe 0302 	subs.w	r3, lr, r2
 8000d58:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	46e1      	mov	r9, ip
 8000d60:	e796      	b.n	8000c90 <__udivmoddi4+0x1e4>
 8000d62:	eba7 0909 	sub.w	r9, r7, r9
 8000d66:	4449      	add	r1, r9
 8000d68:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d6c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d70:	fb09 f804 	mul.w	r8, r9, r4
 8000d74:	e7db      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d76:	4673      	mov	r3, lr
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1ce>
 8000d7a:	4650      	mov	r0, sl
 8000d7c:	e766      	b.n	8000c4c <__udivmoddi4+0x1a0>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e6fd      	b.n	8000b7e <__udivmoddi4+0xd2>
 8000d82:	443b      	add	r3, r7
 8000d84:	3a02      	subs	r2, #2
 8000d86:	e733      	b.n	8000bf0 <__udivmoddi4+0x144>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	e71c      	b.n	8000bca <__udivmoddi4+0x11e>
 8000d90:	4649      	mov	r1, r9
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x222>
 8000d94:	eba1 0109 	sub.w	r1, r1, r9
 8000d98:	46c4      	mov	ip, r8
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fb09 f804 	mul.w	r8, r9, r4
 8000da2:	e7c4      	b.n	8000d2e <__udivmoddi4+0x282>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
 8000da8:	b480      	push	{r7}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	603b      	str	r3, [r7, #0]
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
#else
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000dbc:	d11a      	bne.n	8000df4 <LL_USART_SetBaudRate+0x4c>
#endif /* USART_PRESC_PRESCALER */
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	005a      	lsls	r2, r3, #1
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	085b      	lsrs	r3, r3, #1
 8000dc6:	441a      	add	r2, r3
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
    brrtemp = usartdiv & 0xFFF0U;
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	085b      	lsrs	r3, r3, #1
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	60da      	str	r2, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif /* USART_PRESC_PRESCALER */
  }
}
 8000df2:	e00a      	b.n	8000e0a <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	085a      	lsrs	r2, r3, #1
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	441a      	add	r2, r3
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	461a      	mov	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	60da      	str	r2, [r3, #12]
}
 8000e0a:	bf00      	nop
 8000e0c:	371c      	adds	r7, #28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <Temp_Sensor_Init>:
#include "stm32l4xx_ll_usart.h"


/*------INIZIALIZZAZIONE SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Init(void)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
	uint8_t data = 0xF0;
 8000e1e:	23f0      	movs	r3, #240	@ 0xf0
 8000e20:	71fb      	strb	r3, [r7, #7]

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 9600);
 8000e22:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e24:	681c      	ldr	r4, [r3, #0]
 8000e26:	f00f ff59 	bl	8010cdc <HAL_RCC_GetPCLK2Freq>
 8000e2a:	4601      	mov	r1, r0
 8000e2c:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000e30:	2200      	movs	r2, #0
 8000e32:	4620      	mov	r0, r4
 8000e34:	f7ff ffb8 	bl	8000da8 <LL_USART_SetBaudRate>

	HAL_UART_Transmit(TEMP_UART, &data, 1, 100);  // low for 500+us
 8000e38:	1df9      	adds	r1, r7, #7
 8000e3a:	2364      	movs	r3, #100	@ 0x64
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	4813      	ldr	r0, [pc, #76]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e40:	f014 fa26 	bl	8015290 <HAL_UART_Transmit>
	if (HAL_UART_Receive(TEMP_UART, &data, 1, 1000) != HAL_OK)
 8000e44:	1df9      	adds	r1, r7, #7
 8000e46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	480f      	ldr	r0, [pc, #60]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e4e:	f014 faa8 	bl	80153a2 <HAL_UART_Receive>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <Temp_Sensor_Init+0x44>
		while(1);
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <Temp_Sensor_Init+0x40>

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 115200);
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e5e:	681c      	ldr	r4, [r3, #0]
 8000e60:	f00f ff3c 	bl	8010cdc <HAL_RCC_GetPCLK2Freq>
 8000e64:	4601      	mov	r1, r0
 8000e66:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	f7ff ff9b 	bl	8000da8 <LL_USART_SetBaudRate>

	if (data == 0xF0)
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2bf0      	cmp	r3, #240	@ 0xf0
 8000e76:	d101      	bne.n	8000e7c <Temp_Sensor_Init+0x64>
		while(1);
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <Temp_Sensor_Init+0x60>

	Temp_Sensor_Write(0xCC);  // skip ROM
 8000e7c:	20cc      	movs	r0, #204	@ 0xcc
 8000e7e:	f000 f807 	bl	8000e90 <Temp_Sensor_Write>
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd90      	pop	{r4, r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000434 	.word	0x20000434

08000e90 <Temp_Sensor_Write>:

/*------SCRITTURA SU SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Write(uint8_t data)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[8];

	for (int i=0; i<8; i++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	e017      	b.n	8000ed0 <Temp_Sensor_Write+0x40>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 8000ea0:	79fa      	ldrb	r2, [r7, #7]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	fa42 f303 	asr.w	r3, r2, r3
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d006      	beq.n	8000ebe <Temp_Sensor_Write+0x2e>
		{
			buffer[i] = 0xFF;  // write 1
 8000eb0:	f107 020c 	add.w	r2, r7, #12
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	22ff      	movs	r2, #255	@ 0xff
 8000eba:	701a      	strb	r2, [r3, #0]
 8000ebc:	e005      	b.n	8000eca <Temp_Sensor_Write+0x3a>
		}
		else  // if the bit is low
		{
			buffer[i] = 0;  // write 0
 8000ebe:	f107 020c 	add.w	r2, r7, #12
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<8; i++)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	2b07      	cmp	r3, #7
 8000ed4:	dde4      	ble.n	8000ea0 <Temp_Sensor_Write+0x10>
		}
	}

	HAL_UART_Transmit(TEMP_UART, buffer, 8, 100);
 8000ed6:	f107 010c 	add.w	r1, r7, #12
 8000eda:	2364      	movs	r3, #100	@ 0x64
 8000edc:	2208      	movs	r2, #8
 8000ede:	4803      	ldr	r0, [pc, #12]	@ (8000eec <Temp_Sensor_Write+0x5c>)
 8000ee0:	f014 f9d6 	bl	8015290 <HAL_UART_Transmit>
}
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000434 	.word	0x20000434

08000ef0 <Temp_Sensor_ReadByte>:

/*------LETTURA BYTE DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadByte(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
	uint8_t RxByte = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	71bb      	strb	r3, [r7, #6]
 8000efe:	e00e      	b.n	8000f1e <Temp_Sensor_ReadByte+0x2e>
	{
		RxByte >>= 1;
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	085b      	lsrs	r3, r3, #1
 8000f04:	71fb      	strb	r3, [r7, #7]
		if (Temp_Sensor_ReadBit())
 8000f06:	f000 f813 	bl	8000f30 <Temp_Sensor_ReadBit>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <Temp_Sensor_ReadByte+0x28>
		{
			RxByte |= 0x80;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f16:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8000f18:	79bb      	ldrb	r3, [r7, #6]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	71bb      	strb	r3, [r7, #6]
 8000f1e:	79bb      	ldrb	r3, [r7, #6]
 8000f20:	2b07      	cmp	r3, #7
 8000f22:	d9ed      	bls.n	8000f00 <Temp_Sensor_ReadByte+0x10>
		}
	}
	return RxByte;
 8000f24:	79fb      	ldrb	r3, [r7, #7]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <Temp_Sensor_ReadBit>:

/*------LETTURA BIT DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadBit(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
    uint8_t ReadBitCMD = 0xFF;
 8000f36:	23ff      	movs	r3, #255	@ 0xff
 8000f38:	71fb      	strb	r3, [r7, #7]
    uint8_t RxBit;

    // Send Read Bit CMD
    HAL_UART_Transmit(&huart1, &ReadBitCMD, 1, 1);
 8000f3a:	1df9      	adds	r1, r7, #7
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4808      	ldr	r0, [pc, #32]	@ (8000f64 <Temp_Sensor_ReadBit+0x34>)
 8000f42:	f014 f9a5 	bl	8015290 <HAL_UART_Transmit>
    // Receive The Bit
    HAL_UART_Receive(&huart1, &RxBit, 1, 1);
 8000f46:	1db9      	adds	r1, r7, #6
 8000f48:	2301      	movs	r3, #1
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <Temp_Sensor_ReadBit+0x34>)
 8000f4e:	f014 fa28 	bl	80153a2 <HAL_UART_Receive>

    return (RxBit & 0x01);
 8000f52:	79bb      	ldrb	r3, [r7, #6]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200004bc 	.word	0x200004bc

08000f68 <Read_Temperature>:

/*------LETTURA TEMPERATURA------*/
uint16_t Read_Temperature(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
	uint8_t Temp_LSB = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_MSB = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	71bb      	strb	r3, [r7, #6]
	uint16_t Temp = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	80bb      	strh	r3, [r7, #4]
	
	Temp_Sensor_Init();
 8000f7a:	f7ff ff4d 	bl	8000e18 <Temp_Sensor_Init>
	Temp_Sensor_Write(0xCC);  // skip ROM
 8000f7e:	20cc      	movs	r0, #204	@ 0xcc
 8000f80:	f7ff ff86 	bl	8000e90 <Temp_Sensor_Write>

	uint8_t status = Temp_Sensor_ReadBit();
 8000f84:	f7ff ffd4 	bl	8000f30 <Temp_Sensor_ReadBit>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	70fb      	strb	r3, [r7, #3]

	if (status) 
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d01d      	beq.n	8000fce <Read_Temperature+0x66>
	{
		Temp_Sensor_Write(0xBE);  // read Scratch-pad
 8000f92:	20be      	movs	r0, #190	@ 0xbe
 8000f94:	f7ff ff7c 	bl	8000e90 <Temp_Sensor_Write>
		Temp_LSB = Temp_Sensor_ReadByte();
 8000f98:	f7ff ffaa 	bl	8000ef0 <Temp_Sensor_ReadByte>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	71fb      	strb	r3, [r7, #7]
	    Temp_MSB = Temp_Sensor_ReadByte();
 8000fa0:	f7ff ffa6 	bl	8000ef0 <Temp_Sensor_ReadByte>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	71bb      	strb	r3, [r7, #6]
		Temp_Sensor_Init();
 8000fa8:	f7ff ff36 	bl	8000e18 <Temp_Sensor_Init>
		Temp_Sensor_Write(0xCC);  // skip ROM
 8000fac:	20cc      	movs	r0, #204	@ 0xcc
 8000fae:	f7ff ff6f 	bl	8000e90 <Temp_Sensor_Write>
		Temp_Sensor_Write(0x44);  // convert t
 8000fb2:	2044      	movs	r0, #68	@ 0x44
 8000fb4:	f7ff ff6c 	bl	8000e90 <Temp_Sensor_Write>
		Temp = ((Temp_MSB << 8)) | Temp_LSB;
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	80bb      	strh	r3, [r7, #4]
		return Temp;
 8000fca:	88bb      	ldrh	r3, [r7, #4]
 8000fcc:	e000      	b.n	8000fd0 <Read_Temperature+0x68>
	}
	
	return 0; 
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <INA3221_Init>:
#include "INA3221_reg.h"
#include "peripherals.h"
#include "global_variables.h"

void INA3221_Init()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
	uint16_t rcheck = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	80fb      	strh	r3, [r7, #6]

	INA3221_write_reg(INA3221_REG_CONFIG, 0x8000);   //RESET
 8000fe2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 f880 	bl	80010ec <INA3221_write_reg>

	HAL_Delay(100);
 8000fec:	2064      	movs	r0, #100	@ 0x64
 8000fee:	f00a fc3b 	bl	800b868 <HAL_Delay>

	INA3221_read_reg(INA3221_REG_MID, &rcheck);
 8000ff2:	1dbb      	adds	r3, r7, #6
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	20fe      	movs	r0, #254	@ 0xfe
 8000ff8:	f000 f842 	bl	8001080 <INA3221_read_reg>

	if(rcheck != INA3221_DEFAULT_MID)
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	f245 4249 	movw	r2, #21577	@ 0x5449
 8001002:	4293      	cmp	r3, r2
 8001004:	d001      	beq.n	800100a <INA3221_Init+0x32>
		while(1);
 8001006:	bf00      	nop
 8001008:	e7fd      	b.n	8001006 <INA3221_Init+0x2e>

	INA3221_write_reg(INA3221_REG_CONFIG, 0x7D27);   //CH1 CH2 CH3 Enabled, 512 AVG, 1.1ms conv time, continous mode
 800100a:	f647 5127 	movw	r1, #32039	@ 0x7d27
 800100e:	2000      	movs	r0, #0
 8001010:	f000 f86c 	bl	80010ec <INA3221_write_reg>
	INA3221_Read_Measure(&Supply);
 8001014:	4803      	ldr	r0, [pc, #12]	@ (8001024 <INA3221_Init+0x4c>)
 8001016:	f000 f807 	bl	8001028 <INA3221_Read_Measure>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200038e0 	.word	0x200038e0

08001028 <INA3221_Read_Measure>:

void INA3221_Read_Measure(supply_bus_t *measure)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_1, (uint16_t *)&(measure->v1));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4619      	mov	r1, r3
 8001034:	2002      	movs	r0, #2
 8001036:	f000 f823 	bl	8001080 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_2, (uint16_t *)&(measure->v2));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3302      	adds	r3, #2
 800103e:	4619      	mov	r1, r3
 8001040:	2004      	movs	r0, #4
 8001042:	f000 f81d 	bl	8001080 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_3, (uint16_t *)&(measure->v3));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3304      	adds	r3, #4
 800104a:	4619      	mov	r1, r3
 800104c:	2006      	movs	r0, #6
 800104e:	f000 f817 	bl	8001080 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_1, (uint16_t *)&(measure->i1));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3306      	adds	r3, #6
 8001056:	4619      	mov	r1, r3
 8001058:	2001      	movs	r0, #1
 800105a:	f000 f811 	bl	8001080 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_2, (uint16_t *)&(measure->i2));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3308      	adds	r3, #8
 8001062:	4619      	mov	r1, r3
 8001064:	2003      	movs	r0, #3
 8001066:	f000 f80b 	bl	8001080 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_3, (uint16_t *)&(measure->i3));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	330a      	adds	r3, #10
 800106e:	4619      	mov	r1, r3
 8001070:	2005      	movs	r0, #5
 8001072:	f000 f805 	bl	8001080 <INA3221_read_reg>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <INA3221_read_reg>:


int INA3221_read_reg(uint8_t reg, uint16_t *rdata)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af02      	add	r7, sp, #8
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
 8001090:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 8001092:	2300      	movs	r3, #0
 8001094:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, &reg, 1, 100) == HAL_OK)
 8001096:	1dfa      	adds	r2, r7, #7
 8001098:	2364      	movs	r3, #100	@ 0x64
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	2180      	movs	r1, #128	@ 0x80
 80010a0:	4811      	ldr	r0, [pc, #68]	@ (80010e8 <INA3221_read_reg+0x68>)
 80010a2:	f00d fe7f 	bl	800eda4 <HAL_I2C_Master_Transmit>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d118      	bne.n	80010de <INA3221_read_reg+0x5e>
	{

		if(HAL_I2C_Master_Receive(I2C,  INA3221_ADDR_0 << 1, data, 2, 100) == HAL_OK)
 80010ac:	f107 0208 	add.w	r2, r7, #8
 80010b0:	2364      	movs	r3, #100	@ 0x64
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2302      	movs	r3, #2
 80010b6:	2180      	movs	r1, #128	@ 0x80
 80010b8:	480b      	ldr	r0, [pc, #44]	@ (80010e8 <INA3221_read_reg+0x68>)
 80010ba:	f00d ff8b 	bl	800efd4 <HAL_I2C_Master_Receive>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d10c      	bne.n	80010de <INA3221_read_reg+0x5e>
		{
			result = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 80010c8:	7a3b      	ldrb	r3, [r7, #8]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	7a7b      	ldrb	r3, [r7, #9]
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b21b      	sxth	r3, r3
 80010d8:	b29a      	uxth	r2, r3
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000180 	.word	0x20000180

080010ec <INA3221_write_reg>:


int INA3221_write_reg(uint8_t reg, uint16_t wdata)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af02      	add	r7, sp, #8
 80010f2:	4603      	mov	r3, r0
 80010f4:	460a      	mov	r2, r1
 80010f6:	71fb      	strb	r3, [r7, #7]
 80010f8:	4613      	mov	r3, r2
 80010fa:	80bb      	strh	r3, [r7, #4]
    int result = -1;
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001100:	60fb      	str	r3, [r7, #12]
    uint8_t data[3];
    
    data[0] = reg;                    
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	723b      	strb	r3, [r7, #8]
    data[1] = (wdata >> 8);          
 8001106:	88bb      	ldrh	r3, [r7, #4]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	b29b      	uxth	r3, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	727b      	strb	r3, [r7, #9]
    data[2] = (wdata & 0xFF);        
 8001110:	88bb      	ldrh	r3, [r7, #4]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	72bb      	strb	r3, [r7, #10]

    if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, data, 3, 100) == HAL_OK)
 8001116:	f107 0208 	add.w	r2, r7, #8
 800111a:	2364      	movs	r3, #100	@ 0x64
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2303      	movs	r3, #3
 8001120:	2180      	movs	r1, #128	@ 0x80
 8001122:	4806      	ldr	r0, [pc, #24]	@ (800113c <INA3221_write_reg+0x50>)
 8001124:	f00d fe3e 	bl	800eda4 <HAL_I2C_Master_Transmit>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <INA3221_write_reg+0x46>
    {
        result = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
    }
    
    return result;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000180 	.word	0x20000180

08001140 <RTC_Init>:
#include "RTC.h"


/*-----INIZiALIZZAZIONE ORA RTC-----*/
void RTC_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
	for (int retry = 0; retry < 3; retry++)
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	e00b      	b.n	8001164 <RTC_Init+0x24>
	{
		if (Get_DateTime_From_Network())
 800114c:	f000 f814 	bl	8001178 <Get_DateTime_From_Network>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10c      	bne.n	8001170 <RTC_Init+0x30>
		{
			return;
		}
		HAL_Delay(1000);
 8001156:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800115a:	f00a fb85 	bl	800b868 <HAL_Delay>
	for (int retry = 0; retry < 3; retry++)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3301      	adds	r3, #1
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b02      	cmp	r3, #2
 8001168:	ddf0      	ble.n	800114c <RTC_Init+0xc>
	}
	Set_Default_DateTime();
 800116a:	f000 f905 	bl	8001378 <Set_Default_DateTime>
 800116e:	e000      	b.n	8001172 <RTC_Init+0x32>
			return;
 8001170:	bf00      	nop
}
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <Get_DateTime_From_Network>:

/*-----SINCRONIZZAZIONE RTC DA RETE-----*/
int Get_DateTime_From_Network(void)
{
 8001178:	b5b0      	push	{r4, r5, r7, lr}
 800117a:	b0a2      	sub	sp, #136	@ 0x88
 800117c:	af00      	add	r7, sp, #0
	char response[100] = {0};
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	2264      	movs	r2, #100	@ 0x64
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f015 fc2a 	bl	80169e0 <memset>
	RTC_DateTypeDef sDate = {0};
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
	RTC_TimeTypeDef sTime = {0};
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

	SIM_Send_Command("AT+CCLK?\r");
 800119e:	4872      	ldr	r0, [pc, #456]	@ (8001368 <Get_DateTime_From_Network+0x1f0>)
 80011a0:	f000 fe6e 	bl	8001e80 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	f241 3188 	movw	r1, #5000	@ 0x1388
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 fe93 	bl	8001ed8 <SIM_Receive_Response>

    char* cclk_pos = strstr(response, "+CCLK: \"");
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	496d      	ldr	r1, [pc, #436]	@ (800136c <Get_DateTime_From_Network+0x1f4>)
 80011b8:	4618      	mov	r0, r3
 80011ba:	f015 fc4b 	bl	8016a54 <strstr>
 80011be:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (cclk_pos == NULL)
 80011c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <Get_DateTime_From_Network+0x56>
	{
        return 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e0c8      	b.n	8001360 <Get_DateTime_From_Network+0x1e8>
    }

    char* time_start = cclk_pos + 8;
 80011ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011d2:	3308      	adds	r3, #8
 80011d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    if (strlen(time_start) < 17)
 80011d8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80011dc:	f7ff f802 	bl	80001e4 <strlen>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b10      	cmp	r3, #16
 80011e4:	d801      	bhi.n	80011ea <Get_DateTime_From_Network+0x72>
	{
		return 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	e0ba      	b.n	8001360 <Get_DateTime_From_Network+0x1e8>
	}

	sDate.Year = (time_start[0] - '0') * 10 + (time_start[1] - '0');
 80011ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	3b30      	subs	r3, #48	@ 0x30
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	461a      	mov	r2, r3
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001202:	3301      	adds	r3, #1
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	b2db      	uxtb	r3, r3
 800120a:	3b30      	subs	r3, #48	@ 0x30
 800120c:	b2db      	uxtb	r3, r3
 800120e:	76fb      	strb	r3, [r7, #27]
	sDate.Month = (time_start[3] - '0') * 10 + (time_start[4] - '0');
 8001210:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001214:	3303      	adds	r3, #3
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	3b30      	subs	r3, #48	@ 0x30
 800121a:	b2db      	uxtb	r3, r3
 800121c:	461a      	mov	r2, r3
 800121e:	0092      	lsls	r2, r2, #2
 8001220:	4413      	add	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	b2da      	uxtb	r2, r3
 8001226:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800122a:	3304      	adds	r3, #4
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	b2db      	uxtb	r3, r3
 8001232:	3b30      	subs	r3, #48	@ 0x30
 8001234:	b2db      	uxtb	r3, r3
 8001236:	767b      	strb	r3, [r7, #25]
	sDate.Date = (time_start[6] - '0') * 10 + (time_start[7] - '0');
 8001238:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800123c:	3306      	adds	r3, #6
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	3b30      	subs	r3, #48	@ 0x30
 8001242:	b2db      	uxtb	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	0092      	lsls	r2, r2, #2
 8001248:	4413      	add	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	b2da      	uxtb	r2, r3
 800124e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001252:	3307      	adds	r3, #7
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	b2db      	uxtb	r3, r3
 800125a:	3b30      	subs	r3, #48	@ 0x30
 800125c:	b2db      	uxtb	r3, r3
 800125e:	76bb      	strb	r3, [r7, #26]

	sTime.Hours = (time_start[9] - '0') * 10 + (time_start[10] - '0');
 8001260:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001264:	3309      	adds	r3, #9
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	3b30      	subs	r3, #48	@ 0x30
 800126a:	b2db      	uxtb	r3, r3
 800126c:	461a      	mov	r2, r3
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	4413      	add	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	b2da      	uxtb	r2, r3
 8001276:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800127a:	330a      	adds	r3, #10
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
 8001280:	b2db      	uxtb	r3, r3
 8001282:	3b30      	subs	r3, #48	@ 0x30
 8001284:	b2db      	uxtb	r3, r3
 8001286:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = (time_start[12] - '0') * 10 + (time_start[13] - '0');
 8001288:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800128c:	330c      	adds	r3, #12
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	3b30      	subs	r3, #48	@ 0x30
 8001292:	b2db      	uxtb	r3, r3
 8001294:	461a      	mov	r2, r3
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	4413      	add	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	b2da      	uxtb	r2, r3
 800129e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012a2:	330d      	adds	r3, #13
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	3b30      	subs	r3, #48	@ 0x30
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = (time_start[15] - '0') * 10 + (time_start[16] - '0');
 80012b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012b4:	330f      	adds	r3, #15
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	3b30      	subs	r3, #48	@ 0x30
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	0092      	lsls	r2, r2, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012ca:	3310      	adds	r3, #16
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	3b30      	subs	r3, #48	@ 0x30
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	71bb      	strb	r3, [r7, #6]

	if (sDate.Month < 1 || sDate.Month > 12 ||
 80012d8:	7e7b      	ldrb	r3, [r7, #25]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d011      	beq.n	8001302 <Get_DateTime_From_Network+0x18a>
 80012de:	7e7b      	ldrb	r3, [r7, #25]
 80012e0:	2b0c      	cmp	r3, #12
 80012e2:	d80e      	bhi.n	8001302 <Get_DateTime_From_Network+0x18a>
        sDate.Date < 1 || sDate.Date > 31 ||
 80012e4:	7ebb      	ldrb	r3, [r7, #26]
	if (sDate.Month < 1 || sDate.Month > 12 ||
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00b      	beq.n	8001302 <Get_DateTime_From_Network+0x18a>
        sDate.Date < 1 || sDate.Date > 31 ||
 80012ea:	7ebb      	ldrb	r3, [r7, #26]
 80012ec:	2b1f      	cmp	r3, #31
 80012ee:	d808      	bhi.n	8001302 <Get_DateTime_From_Network+0x18a>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 80012f0:	793b      	ldrb	r3, [r7, #4]
        sDate.Date < 1 || sDate.Date > 31 ||
 80012f2:	2b17      	cmp	r3, #23
 80012f4:	d805      	bhi.n	8001302 <Get_DateTime_From_Network+0x18a>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 80012f6:	797b      	ldrb	r3, [r7, #5]
 80012f8:	2b3b      	cmp	r3, #59	@ 0x3b
 80012fa:	d802      	bhi.n	8001302 <Get_DateTime_From_Network+0x18a>
 80012fc:	79bb      	ldrb	r3, [r7, #6]
 80012fe:	2b3b      	cmp	r3, #59	@ 0x3b
 8001300:	d901      	bls.n	8001306 <Get_DateTime_From_Network+0x18e>
        return 0;
 8001302:	2300      	movs	r3, #0
 8001304:	e02c      	b.n	8001360 <Get_DateTime_From_Network+0x1e8>
    }

	sDate.WeekDay = Calculate_Weekday(sDate.Year + 2000, sDate.Month, sDate.Date);
 8001306:	7efb      	ldrb	r3, [r7, #27]
 8001308:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800130c:	b29b      	uxth	r3, r3
 800130e:	7e79      	ldrb	r1, [r7, #25]
 8001310:	7eba      	ldrb	r2, [r7, #26]
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f874 	bl	8001400 <Calculate_Weekday>
 8001318:	4603      	mov	r3, r0
 800131a:	763b      	strb	r3, [r7, #24]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001324:	f107 0318 	add.w	r3, r7, #24
 8001328:	2200      	movs	r2, #0
 800132a:	4619      	mov	r1, r3
 800132c:	4810      	ldr	r0, [pc, #64]	@ (8001370 <Get_DateTime_From_Network+0x1f8>)
 800132e:	f010 fb88 	bl	8011a42 <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2200      	movs	r2, #0
 8001336:	4619      	mov	r1, r3
 8001338:	480d      	ldr	r0, [pc, #52]	@ (8001370 <Get_DateTime_From_Network+0x1f8>)
 800133a:	f010 fa89 	bl	8011850 <HAL_RTC_SetTime>

    sys.onDate = sDate;
 800133e:	4b0d      	ldr	r3, [pc, #52]	@ (8001374 <Get_DateTime_From_Network+0x1fc>)
 8001340:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001344:	461a      	mov	r2, r3
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	6413      	str	r3, [r2, #64]	@ 0x40
    sys.onTime = sTime;
 800134a:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <Get_DateTime_From_Network+0x1fc>)
 800134c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001350:	f103 0444 	add.w	r4, r3, #68	@ 0x44
 8001354:	1d3d      	adds	r5, r7, #4
 8001356:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135a:	682b      	ldr	r3, [r5, #0]
 800135c:	6023      	str	r3, [r4, #0]
    
	return 1;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	3788      	adds	r7, #136	@ 0x88
 8001364:	46bd      	mov	sp, r7
 8001366:	bdb0      	pop	{r4, r5, r7, pc}
 8001368:	08017b98 	.word	0x08017b98
 800136c:	08017ba4 	.word	0x08017ba4
 8001370:	20000218 	.word	0x20000218
 8001374:	200005d8 	.word	0x200005d8

08001378 <Set_Default_DateTime>:

/*-----DATA E ORA DI DEFAULT 1/1/2020 00:00:00-----*/
void Set_Default_DateTime(void)
{
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
    RTC_DateTypeDef sDate = {0};
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
    RTC_TimeTypeDef sTime = {0};
 8001382:	463b      	mov	r3, r7
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]

    // Default: 01/01/2020 00:00:00
    sDate.Year = 20;  // 2020
 8001390:	2314      	movs	r3, #20
 8001392:	75fb      	strb	r3, [r7, #23]
    sDate.Month = RTC_MONTH_JANUARY;
 8001394:	2301      	movs	r3, #1
 8001396:	757b      	strb	r3, [r7, #21]
    sDate.Date = 1;
 8001398:	2301      	movs	r3, #1
 800139a:	75bb      	strb	r3, [r7, #22]
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY; // 1 Jan 2020 era mercoledì
 800139c:	2303      	movs	r3, #3
 800139e:	753b      	strb	r3, [r7, #20]

    sTime.Hours = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	703b      	strb	r3, [r7, #0]
    sTime.Minutes = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	707b      	strb	r3, [r7, #1]
    sTime.Seconds = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	70bb      	strb	r3, [r7, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]

    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	4619      	mov	r1, r3
 80013bc:	480e      	ldr	r0, [pc, #56]	@ (80013f8 <Set_Default_DateTime+0x80>)
 80013be:	f010 fb40 	bl	8011a42 <HAL_RTC_SetDate>
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80013c2:	463b      	mov	r3, r7
 80013c4:	2200      	movs	r2, #0
 80013c6:	4619      	mov	r1, r3
 80013c8:	480b      	ldr	r0, [pc, #44]	@ (80013f8 <Set_Default_DateTime+0x80>)
 80013ca:	f010 fa41 	bl	8011850 <HAL_RTC_SetTime>

    sys.onDate = sDate;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <Set_Default_DateTime+0x84>)
 80013d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013d4:	461a      	mov	r2, r3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	6413      	str	r3, [r2, #64]	@ 0x40
    sys.onTime = sTime;
 80013da:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <Set_Default_DateTime+0x84>)
 80013dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013e0:	f103 0444 	add.w	r4, r3, #68	@ 0x44
 80013e4:	463d      	mov	r5, r7
 80013e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ea:	682b      	ldr	r3, [r5, #0]
 80013ec:	6023      	str	r3, [r4, #0]
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bdb0      	pop	{r4, r5, r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000218 	.word	0x20000218
 80013fc:	200005d8 	.word	0x200005d8

08001400 <Calculate_Weekday>:

/*-----CALCOLO GIORNO SETTIMANA-----*/
uint8_t Calculate_Weekday(uint16_t year, uint8_t month, uint8_t day)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
 800140a:	460b      	mov	r3, r1
 800140c:	717b      	strb	r3, [r7, #5]
 800140e:	4613      	mov	r3, r2
 8001410:	713b      	strb	r3, [r7, #4]
    // Algoritmo di Zeller per calcolo giorno settimana
    if (month < 3) {
 8001412:	797b      	ldrb	r3, [r7, #5]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d805      	bhi.n	8001424 <Calculate_Weekday+0x24>
        month += 12;
 8001418:	797b      	ldrb	r3, [r7, #5]
 800141a:	330c      	adds	r3, #12
 800141c:	717b      	strb	r3, [r7, #5]
        year--;
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	3b01      	subs	r3, #1
 8001422:	80fb      	strh	r3, [r7, #6]
    }
    uint8_t zeller_day = (day + ((13 * (month + 1)) / 5) + year + (year / 4) - (year / 100) + (year / 400)) % 7;
 8001424:	7939      	ldrb	r1, [r7, #4]
 8001426:	797b      	ldrb	r3, [r7, #5]
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	4a1e      	ldr	r2, [pc, #120]	@ (80014b0 <Calculate_Weekday+0xb0>)
 8001436:	fb82 0203 	smull	r0, r2, r2, r3
 800143a:	1052      	asrs	r2, r2, #1
 800143c:	17db      	asrs	r3, r3, #31
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	18ca      	adds	r2, r1, r3
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	4413      	add	r3, r2
 8001446:	88fa      	ldrh	r2, [r7, #6]
 8001448:	0892      	lsrs	r2, r2, #2
 800144a:	b292      	uxth	r2, r2
 800144c:	4413      	add	r3, r2
 800144e:	88fa      	ldrh	r2, [r7, #6]
 8001450:	4918      	ldr	r1, [pc, #96]	@ (80014b4 <Calculate_Weekday+0xb4>)
 8001452:	fba1 1202 	umull	r1, r2, r1, r2
 8001456:	0952      	lsrs	r2, r2, #5
 8001458:	b292      	uxth	r2, r2
 800145a:	1a9b      	subs	r3, r3, r2
 800145c:	88fa      	ldrh	r2, [r7, #6]
 800145e:	4915      	ldr	r1, [pc, #84]	@ (80014b4 <Calculate_Weekday+0xb4>)
 8001460:	fba1 1202 	umull	r1, r2, r1, r2
 8001464:	09d2      	lsrs	r2, r2, #7
 8001466:	b292      	uxth	r2, r2
 8001468:	441a      	add	r2, r3
 800146a:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <Calculate_Weekday+0xb8>)
 800146c:	fb83 1302 	smull	r1, r3, r3, r2
 8001470:	4413      	add	r3, r2
 8001472:	1099      	asrs	r1, r3, #2
 8001474:	17d3      	asrs	r3, r2, #31
 8001476:	1ac9      	subs	r1, r1, r3
 8001478:	460b      	mov	r3, r1
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	1a5b      	subs	r3, r3, r1
 800147e:	1ad1      	subs	r1, r2, r3
 8001480:	460b      	mov	r3, r1
 8001482:	73fb      	strb	r3, [r7, #15]

    uint8_t hal_weekday_map[] = {RTC_WEEKDAY_SATURDAY, RTC_WEEKDAY_SUNDAY, RTC_WEEKDAY_MONDAY,
 8001484:	4a0d      	ldr	r2, [pc, #52]	@ (80014bc <Calculate_Weekday+0xbc>)
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800148e:	6018      	str	r0, [r3, #0]
 8001490:	3304      	adds	r3, #4
 8001492:	8019      	strh	r1, [r3, #0]
 8001494:	3302      	adds	r3, #2
 8001496:	0c0a      	lsrs	r2, r1, #16
 8001498:	701a      	strb	r2, [r3, #0]
                                 RTC_WEEKDAY_TUESDAY, RTC_WEEKDAY_WEDNESDAY, RTC_WEEKDAY_THURSDAY, RTC_WEEKDAY_FRIDAY};

    return hal_weekday_map[zeller_day];
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	3310      	adds	r3, #16
 800149e:	443b      	add	r3, r7
 80014a0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	66666667 	.word	0x66666667
 80014b4:	51eb851f 	.word	0x51eb851f
 80014b8:	92492493 	.word	0x92492493
 80014bc:	08017bb0 	.word	0x08017bb0

080014c0 <SIM_Init>:
#include "process.h"
#include "leds.h"

/*------INIZIALIZZAZIONE DEL MODULO LTE------*/
int SIM_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 80014c6:	af00      	add	r7, sp, #0
	char command[256];
	char response[256];
	sprintf(sys.apn, "sensor.net");
 80014c8:	4964      	ldr	r1, [pc, #400]	@ (800165c <SIM_Init+0x19c>)
 80014ca:	4865      	ldr	r0, [pc, #404]	@ (8001660 <SIM_Init+0x1a0>)
 80014cc:	f015 fa28 	bl	8016920 <siprintf>
	strcpy(sys.TCP.IP_address, config.tcp_IPaddress);
 80014d0:	4964      	ldr	r1, [pc, #400]	@ (8001664 <SIM_Init+0x1a4>)
 80014d2:	4865      	ldr	r0, [pc, #404]	@ (8001668 <SIM_Init+0x1a8>)
 80014d4:	f015 fb00 	bl	8016ad8 <strcpy>
	strcpy(sys.TCP.Port, config.tcp_Port);
 80014d8:	4964      	ldr	r1, [pc, #400]	@ (800166c <SIM_Init+0x1ac>)
 80014da:	4865      	ldr	r0, [pc, #404]	@ (8001670 <SIM_Init+0x1b0>)
 80014dc:	f015 fafc 	bl	8016ad8 <strcpy>
//	sprintf(sys.TCP.IP_address, "a");
//	sprintf(sys.TCP.Port, "a");

	memset(response, 0, sizeof(response));
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f015 fa78 	bl	80169e0 <memset>

	if(HAL_GPIO_ReadPin(LTE_STATUS_GPIO_Port, LTE_STATUS_Pin) != GPIO_PIN_SET)
 80014f0:	2108      	movs	r1, #8
 80014f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014f6:	f00d fb89 	bl	800ec0c <HAL_GPIO_ReadPin>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d00a      	beq.n	8001516 <SIM_Init+0x56>
	{
		SIM_Power_On();
 8001500:	f000 fc30 	bl	8001d64 <SIM_Power_On>
		while(HAL_GPIO_ReadPin(LTE_STATUS_GPIO_Port, LTE_STATUS_Pin) != GPIO_PIN_SET);            //Attesa accensione modulo
 8001504:	bf00      	nop
 8001506:	2108      	movs	r1, #8
 8001508:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800150c:	f00d fb7e 	bl	800ec0c <HAL_GPIO_ReadPin>
 8001510:	4603      	mov	r3, r0
 8001512:	2b01      	cmp	r3, #1
 8001514:	d1f7      	bne.n	8001506 <SIM_Init+0x46>

	}

	SIM_Send_Command("AT\r");                                                                     //Verifica comunicazione
 8001516:	4857      	ldr	r0, [pc, #348]	@ (8001674 <SIM_Init+0x1b4>)
 8001518:	f000 fcb2 	bl	8001e80 <SIM_Send_Command>
	SIM_Receive_Response(response, 2000);
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001524:	4618      	mov	r0, r3
 8001526:	f000 fcd7 	bl	8001ed8 <SIM_Receive_Response>
	if(strstr(response, "OK") == NULL)
 800152a:	f107 031c 	add.w	r3, r7, #28
 800152e:	4952      	ldr	r1, [pc, #328]	@ (8001678 <SIM_Init+0x1b8>)
 8001530:	4618      	mov	r0, r3
 8001532:	f015 fa8f 	bl	8016a54 <strstr>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d11c      	bne.n	8001576 <SIM_Init+0xb6>
	{
		if(huart1.Init.BaudRate != 921600)
 800153c:	4b4f      	ldr	r3, [pc, #316]	@ (800167c <SIM_Init+0x1bc>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f5b3 2f61 	cmp.w	r3, #921600	@ 0xe1000
 8001544:	d00d      	beq.n	8001562 <SIM_Init+0xa2>
		{
			huart1.Init.BaudRate = 921600;
 8001546:	4b4d      	ldr	r3, [pc, #308]	@ (800167c <SIM_Init+0x1bc>)
 8001548:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800154c:	605a      	str	r2, [r3, #4]
			HAL_UART_Init(SIM_UART);
 800154e:	484b      	ldr	r0, [pc, #300]	@ (800167c <SIM_Init+0x1bc>)
 8001550:	f013 fdfa 	bl	8015148 <HAL_UART_Init>
			SIM_Send_Command("AT+IPR=921600\r");               						              //Baudrate a 921600
 8001554:	484a      	ldr	r0, [pc, #296]	@ (8001680 <SIM_Init+0x1c0>)
 8001556:	f000 fc93 	bl	8001e80 <SIM_Send_Command>
			SIM_Wait_Response("OK");
 800155a:	4847      	ldr	r0, [pc, #284]	@ (8001678 <SIM_Init+0x1b8>)
 800155c:	f001 f824 	bl	80025a8 <SIM_Wait_Response>
 8001560:	e009      	b.n	8001576 <SIM_Init+0xb6>
		}
		else
		{
			huart1.Init.BaudRate = 38400;
 8001562:	4b46      	ldr	r3, [pc, #280]	@ (800167c <SIM_Init+0x1bc>)
 8001564:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001568:	605a      	str	r2, [r3, #4]
			HAL_UART_Init(SIM_UART);
 800156a:	4844      	ldr	r0, [pc, #272]	@ (800167c <SIM_Init+0x1bc>)
 800156c:	f013 fdec 	bl	8015148 <HAL_UART_Init>
			return -1;
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
 8001574:	e3ce      	b.n	8001d14 <SIM_Init+0x854>
		}

	}

	huart1.Init.BaudRate = 921600;
 8001576:	4b41      	ldr	r3, [pc, #260]	@ (800167c <SIM_Init+0x1bc>)
 8001578:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800157c:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(SIM_UART);
 800157e:	483f      	ldr	r0, [pc, #252]	@ (800167c <SIM_Init+0x1bc>)
 8001580:	f013 fde2 	bl	8015148 <HAL_UART_Init>

	SIM_Send_Command("ATE0\r");                                                                   //Non verbose mode
 8001584:	483f      	ldr	r0, [pc, #252]	@ (8001684 <SIM_Init+0x1c4>)
 8001586:	f000 fc7b 	bl	8001e80 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 800158a:	483b      	ldr	r0, [pc, #236]	@ (8001678 <SIM_Init+0x1b8>)
 800158c:	f001 f80c 	bl	80025a8 <SIM_Wait_Response>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <SIM_Init+0xdc>
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
 800159a:	e3bb      	b.n	8001d14 <SIM_Init+0x854>

	SIM_Send_Command("AT+CPSMS?\r");
 800159c:	483a      	ldr	r0, [pc, #232]	@ (8001688 <SIM_Init+0x1c8>)
 800159e:	f000 fc6f 	bl	8001e80 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 80015a2:	f107 031c 	add.w	r3, r7, #28
 80015a6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 fc94 	bl	8001ed8 <SIM_Receive_Response>

	SIM_Send_Command("AT+CFUN=1\r");                                                              //Full functionality
 80015b0:	4836      	ldr	r0, [pc, #216]	@ (800168c <SIM_Init+0x1cc>)
 80015b2:	f000 fc65 	bl	8001e80 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80015b6:	4830      	ldr	r0, [pc, #192]	@ (8001678 <SIM_Init+0x1b8>)
 80015b8:	f000 fff6 	bl	80025a8 <SIM_Wait_Response>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d002      	beq.n	80015c8 <SIM_Init+0x108>
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	e3a5      	b.n	8001d14 <SIM_Init+0x854>

	SIM_Send_Command("AT+CNMP=38\r");                                                             //Modalità solo LTE o NB-IoT
 80015c8:	4831      	ldr	r0, [pc, #196]	@ (8001690 <SIM_Init+0x1d0>)
 80015ca:	f000 fc59 	bl	8001e80 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80015ce:	482a      	ldr	r0, [pc, #168]	@ (8001678 <SIM_Init+0x1b8>)
 80015d0:	f000 ffea 	bl	80025a8 <SIM_Wait_Response>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <SIM_Init+0x120>
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
 80015de:	e399      	b.n	8001d14 <SIM_Init+0x854>

	SIM_Send_Command("AT+CMNB=2\r");                                                              //1=CAT-M, 2=NB-IoT, 3=Automatico
 80015e0:	482c      	ldr	r0, [pc, #176]	@ (8001694 <SIM_Init+0x1d4>)
 80015e2:	f000 fc4d 	bl	8001e80 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80015e6:	4824      	ldr	r0, [pc, #144]	@ (8001678 <SIM_Init+0x1b8>)
 80015e8:	f000 ffde 	bl	80025a8 <SIM_Wait_Response>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d002      	beq.n	80015f8 <SIM_Init+0x138>
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
 80015f6:	e38d      	b.n	8001d14 <SIM_Init+0x854>

	SIM_Send_Command("AT+CPIN?\r");																  //Controllo PIN
 80015f8:	4827      	ldr	r0, [pc, #156]	@ (8001698 <SIM_Init+0x1d8>)
 80015fa:	f000 fc41 	bl	8001e80 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 80015fe:	f107 031c 	add.w	r3, r7, #28
 8001602:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001606:	4618      	mov	r0, r3
 8001608:	f000 fc66 	bl	8001ed8 <SIM_Receive_Response>
	if(strstr(response, "READY") == NULL)
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4922      	ldr	r1, [pc, #136]	@ (800169c <SIM_Init+0x1dc>)
 8001612:	4618      	mov	r0, r3
 8001614:	f015 fa1e 	bl	8016a54 <strstr>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d144      	bne.n	80016a8 <SIM_Init+0x1e8>
	{
		if(strstr(response, "SIM PIN") != NULL)
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	491f      	ldr	r1, [pc, #124]	@ (80016a0 <SIM_Init+0x1e0>)
 8001624:	4618      	mov	r0, r3
 8001626:	f015 fa15 	bl	8016a54 <strstr>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d012      	beq.n	8001656 <SIM_Init+0x196>
		{
			SIM_Send_Command("AT+CPIN=0000\r");
 8001630:	481c      	ldr	r0, [pc, #112]	@ (80016a4 <SIM_Init+0x1e4>)
 8001632:	f000 fc25 	bl	8001e80 <SIM_Send_Command>
			SIM_Receive_Response(response, 5000);
 8001636:	f107 031c 	add.w	r3, r7, #28
 800163a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800163e:	4618      	mov	r0, r3
 8001640:	f000 fc4a 	bl	8001ed8 <SIM_Receive_Response>
			if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001644:	480c      	ldr	r0, [pc, #48]	@ (8001678 <SIM_Init+0x1b8>)
 8001646:	f000 ffaf 	bl	80025a8 <SIM_Wait_Response>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d02b      	beq.n	80016a8 <SIM_Init+0x1e8>
 8001650:	f04f 33ff 	mov.w	r3, #4294967295
 8001654:	e35e      	b.n	8001d14 <SIM_Init+0x854>
		}
		else
		{
			return -1;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	e35b      	b.n	8001d14 <SIM_Init+0x854>
 800165c:	08017bb8 	.word	0x08017bb8
 8001660:	20001630 	.word	0x20001630
 8001664:	200017f6 	.word	0x200017f6
 8001668:	200016b8 	.word	0x200016b8
 800166c:	20001836 	.word	0x20001836
 8001670:	2000171c 	.word	0x2000171c
 8001674:	08017bc4 	.word	0x08017bc4
 8001678:	08017bc8 	.word	0x08017bc8
 800167c:	200004bc 	.word	0x200004bc
 8001680:	08017bcc 	.word	0x08017bcc
 8001684:	08017bdc 	.word	0x08017bdc
 8001688:	08017be4 	.word	0x08017be4
 800168c:	08017bf0 	.word	0x08017bf0
 8001690:	08017bfc 	.word	0x08017bfc
 8001694:	08017c08 	.word	0x08017c08
 8001698:	08017c14 	.word	0x08017c14
 800169c:	08017c20 	.word	0x08017c20
 80016a0:	08017c28 	.word	0x08017c28
 80016a4:	08017c30 	.word	0x08017c30
		}
	}

	SIM_Send_Command("AT+CCID\r");                                                                // Verifica SIM card
 80016a8:	48d2      	ldr	r0, [pc, #840]	@ (80019f4 <SIM_Init+0x534>)
 80016aa:	f000 fbe9 	bl	8001e80 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 fc0e 	bl	8001ed8 <SIM_Receive_Response>

	SIM_Send_Command("AT+CGDCONT?\r");
 80016bc:	48ce      	ldr	r0, [pc, #824]	@ (80019f8 <SIM_Init+0x538>)
 80016be:	f000 fbdf 	bl	8001e80 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 80016c2:	f107 031c 	add.w	r3, r7, #28
 80016c6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 fc04 	bl	8001ed8 <SIM_Receive_Response>
	if(strstr(response, sys.apn) == NULL || strstr(response, "IPV4V6") == NULL)
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	49c9      	ldr	r1, [pc, #804]	@ (80019fc <SIM_Init+0x53c>)
 80016d6:	4618      	mov	r0, r3
 80016d8:	f015 f9bc 	bl	8016a54 <strstr>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d008      	beq.n	80016f4 <SIM_Init+0x234>
 80016e2:	f107 031c 	add.w	r3, r7, #28
 80016e6:	49c6      	ldr	r1, [pc, #792]	@ (8001a00 <SIM_Init+0x540>)
 80016e8:	4618      	mov	r0, r3
 80016ea:	f015 f9b3 	bl	8016a54 <strstr>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d112      	bne.n	800171a <SIM_Init+0x25a>
	{
		sprintf(command, "AT+CGDCONT=1,\"IPV4V6\",\"%s\"\r", sys.apn);                                //Configurazione APN
 80016f4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80016f8:	4ac0      	ldr	r2, [pc, #768]	@ (80019fc <SIM_Init+0x53c>)
 80016fa:	49c2      	ldr	r1, [pc, #776]	@ (8001a04 <SIM_Init+0x544>)
 80016fc:	4618      	mov	r0, r3
 80016fe:	f015 f90f 	bl	8016920 <siprintf>
		SIM_Send_Command(command);
 8001702:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001706:	4618      	mov	r0, r3
 8001708:	f000 fbba 	bl	8001e80 <SIM_Send_Command>
		SIM_Receive_Response(response, 5000);
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001714:	4618      	mov	r0, r3
 8001716:	f000 fbdf 	bl	8001ed8 <SIM_Receive_Response>
	}

	SIM_Send_Command("AT+CEREG?\r");                                                              //Controllo registrazione alla rete
 800171a:	48bb      	ldr	r0, [pc, #748]	@ (8001a08 <SIM_Init+0x548>)
 800171c:	f000 fbb0 	bl	8001e80 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001728:	4618      	mov	r0, r3
 800172a:	f000 fbd5 	bl	8001ed8 <SIM_Receive_Response>
	char* cereg_ptr = strstr(response, "+CEREG:");
 800172e:	f107 031c 	add.w	r3, r7, #28
 8001732:	49b6      	ldr	r1, [pc, #728]	@ (8001a0c <SIM_Init+0x54c>)
 8001734:	4618      	mov	r0, r3
 8001736:	f015 f98d 	bl	8016a54 <strstr>
 800173a:	f8c7 0240 	str.w	r0, [r7, #576]	@ 0x240
	int n = 0, stat_value = 0;
 800173e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8001742:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800174e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
	if(cereg_ptr && sscanf(cereg_ptr, "+CEREG: %d,%d", &n, &stat_value) >= 2)
 8001756:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800175a:	2b00      	cmp	r3, #0
 800175c:	d01b      	beq.n	8001796 <SIM_Init+0x2d6>
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	f107 0218 	add.w	r2, r7, #24
 8001766:	49aa      	ldr	r1, [pc, #680]	@ (8001a10 <SIM_Init+0x550>)
 8001768:	f8d7 0240 	ldr.w	r0, [r7, #576]	@ 0x240
 800176c:	f015 f8fa 	bl	8016964 <siscanf>
 8001770:	4603      	mov	r3, r0
 8001772:	2b01      	cmp	r3, #1
 8001774:	dd0f      	ble.n	8001796 <SIM_Init+0x2d6>
	{
		if(stat_value == 1 || stat_value == 5)
 8001776:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800177a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b01      	cmp	r3, #1
 8001782:	f000 80bd 	beq.w	8001900 <SIM_Init+0x440>
 8001786:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800178a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b05      	cmp	r3, #5
 8001792:	f000 80b5 	beq.w	8001900 <SIM_Init+0x440>
		{
			goto CSQ_PDP;
		}
	}

	SIM_Send_Command("AT+COPS?\r");                                                               //Operatore attuale
 8001796:	489f      	ldr	r0, [pc, #636]	@ (8001a14 <SIM_Init+0x554>)
 8001798:	f000 fb72 	bl	8001e80 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	f241 3188 	movw	r1, #5000	@ 0x1388
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 fb97 	bl	8001ed8 <SIM_Receive_Response>
	char* cops_ptr = strstr(response, "+COPS:");
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	499a      	ldr	r1, [pc, #616]	@ (8001a18 <SIM_Init+0x558>)
 80017b0:	4618      	mov	r0, r3
 80017b2:	f015 f94f 	bl	8016a54 <strstr>
 80017b6:	f8c7 023c 	str.w	r0, [r7, #572]	@ 0x23c
	int mode = 0, format = 0;
 80017ba:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80017be:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80017ca:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
	if(cops_ptr && sscanf(cops_ptr, "+COPS: %d,%d", &mode, &format) >= 2)
 80017d2:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d01d      	beq.n	8001816 <SIM_Init+0x356>
 80017da:	f107 030c 	add.w	r3, r7, #12
 80017de:	f107 0210 	add.w	r2, r7, #16
 80017e2:	498e      	ldr	r1, [pc, #568]	@ (8001a1c <SIM_Init+0x55c>)
 80017e4:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 80017e8:	f015 f8bc 	bl	8016964 <siscanf>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	dd11      	ble.n	8001816 <SIM_Init+0x356>
	{
		if(strstr(cops_ptr, "vodafone") == NULL)
 80017f2:	498b      	ldr	r1, [pc, #556]	@ (8001a20 <SIM_Init+0x560>)
 80017f4:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 80017f8:	f015 f92c 	bl	8016a54 <strstr>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d109      	bne.n	8001816 <SIM_Init+0x356>
		{
			SIM_Send_Command("AT+COPS=2\r");                                                          // Deregistra dalla rete
 8001802:	4888      	ldr	r0, [pc, #544]	@ (8001a24 <SIM_Init+0x564>)
 8001804:	f000 fb3c 	bl	8001e80 <SIM_Send_Command>
			SIM_Wait_Response("OK");
 8001808:	4887      	ldr	r0, [pc, #540]	@ (8001a28 <SIM_Init+0x568>)
 800180a:	f000 fecd 	bl	80025a8 <SIM_Wait_Response>
			HAL_Delay(20000);
 800180e:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8001812:	f00a f829 	bl	800b868 <HAL_Delay>
//	    // Fallback automatico
//	    SIM_Send_Command("AT+COPS=0,0\r");
//	}

//	SIM_Send_Command("AT+COPS=1,2,\"22210\"\r");
	SIM_Send_Command("AT+COPS=0\r");
 8001816:	4885      	ldr	r0, [pc, #532]	@ (8001a2c <SIM_Init+0x56c>)
 8001818:	f000 fb32 	bl	8001e80 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 800181c:	4882      	ldr	r0, [pc, #520]	@ (8001a28 <SIM_Init+0x568>)
 800181e:	f000 fec3 	bl	80025a8 <SIM_Wait_Response>
//	SIM_Receive_Response(response, 180000);

	SIM_Send_Command("AT+CEREG?\r");                                                              //Controllo registrazione alla rete
 8001822:	4879      	ldr	r0, [pc, #484]	@ (8001a08 <SIM_Init+0x548>)
 8001824:	f000 fb2c 	bl	8001e80 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001828:	f107 031c 	add.w	r3, r7, #28
 800182c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001830:	4618      	mov	r0, r3
 8001832:	f000 fb51 	bl	8001ed8 <SIM_Receive_Response>
	int stat = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
	while(stat != 1)
 800183c:	e051      	b.n	80018e2 <SIM_Init+0x422>
	{
		char* cereg_ptr = strstr(response, "+CEREG:");
 800183e:	f107 031c 	add.w	r3, r7, #28
 8001842:	4972      	ldr	r1, [pc, #456]	@ (8001a0c <SIM_Init+0x54c>)
 8001844:	4618      	mov	r0, r3
 8001846:	f015 f905 	bl	8016a54 <strstr>
 800184a:	f8c7 0238 	str.w	r0, [r7, #568]	@ 0x238
		int n = 0, stat_value = 0;
 800184e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8001852:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800185e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
		if(cereg_ptr && sscanf(cereg_ptr, "+CEREG: %d,%d", &n, &stat_value) >= 2)
 8001866:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800186a:	2b00      	cmp	r3, #0
 800186c:	d02b      	beq.n	80018c6 <SIM_Init+0x406>
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	f107 0208 	add.w	r2, r7, #8
 8001874:	4966      	ldr	r1, [pc, #408]	@ (8001a10 <SIM_Init+0x550>)
 8001876:	f8d7 0238 	ldr.w	r0, [r7, #568]	@ 0x238
 800187a:	f015 f873 	bl	8016964 <siscanf>
 800187e:	4603      	mov	r3, r0
 8001880:	2b01      	cmp	r3, #1
 8001882:	dd20      	ble.n	80018c6 <SIM_Init+0x406>
		{
			if(stat_value == 1 || stat_value == 5)
 8001884:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8001888:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d006      	beq.n	80018a0 <SIM_Init+0x3e0>
 8001892:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8001896:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b05      	cmp	r3, #5
 800189e:	d103      	bne.n	80018a8 <SIM_Init+0x3e8>
			{
				stat = 1;
 80018a0:	2301      	movs	r3, #1
 80018a2:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
			if(stat_value == 1 || stat_value == 5)
 80018a6:	e01c      	b.n	80018e2 <SIM_Init+0x422>
			}
			else
			{
				SIM_Send_Command("AT+CEREG?\r");
 80018a8:	4857      	ldr	r0, [pc, #348]	@ (8001a08 <SIM_Init+0x548>)
 80018aa:	f000 fae9 	bl	8001e80 <SIM_Send_Command>
				SIM_Receive_Response(response, 5000);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 fb0e 	bl	8001ed8 <SIM_Receive_Response>
				HAL_Delay(1000);
 80018bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018c0:	f009 ffd2 	bl	800b868 <HAL_Delay>
			if(stat_value == 1 || stat_value == 5)
 80018c4:	e00d      	b.n	80018e2 <SIM_Init+0x422>
			}
		}
		else
		{
			SIM_Send_Command("AT+CEREG?\r");
 80018c6:	4850      	ldr	r0, [pc, #320]	@ (8001a08 <SIM_Init+0x548>)
 80018c8:	f000 fada 	bl	8001e80 <SIM_Send_Command>
			SIM_Receive_Response(response, 5000);
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	f241 3188 	movw	r1, #5000	@ 0x1388
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 faff 	bl	8001ed8 <SIM_Receive_Response>
			HAL_Delay(1000);
 80018da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018de:	f009 ffc3 	bl	800b868 <HAL_Delay>
	while(stat != 1)
 80018e2:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d1a9      	bne.n	800183e <SIM_Init+0x37e>
		}
	}

	SIM_Send_Command("AT+COPS?\r");                                                               //Operatore attuale
 80018ea:	484a      	ldr	r0, [pc, #296]	@ (8001a14 <SIM_Init+0x554>)
 80018ec:	f000 fac8 	bl	8001e80 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	f241 3188 	movw	r1, #5000	@ 0x1388
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 faed 	bl	8001ed8 <SIM_Receive_Response>
 80018fe:	e000      	b.n	8001902 <SIM_Init+0x442>
			goto CSQ_PDP;
 8001900:	bf00      	nop

	CSQ_PDP:
	SIM_Send_Command("AT+CSQ\r");																  //Controllo qualità connessione
 8001902:	484b      	ldr	r0, [pc, #300]	@ (8001a30 <SIM_Init+0x570>)
 8001904:	f000 fabc 	bl	8001e80 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001908:	f107 031c 	add.w	r3, r7, #28
 800190c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001910:	4618      	mov	r0, r3
 8001912:	f000 fae1 	bl	8001ed8 <SIM_Receive_Response>
	if(strstr(response, "+CSQ: 99") != NULL)
 8001916:	f107 031c 	add.w	r3, r7, #28
 800191a:	4946      	ldr	r1, [pc, #280]	@ (8001a34 <SIM_Init+0x574>)
 800191c:	4618      	mov	r0, r3
 800191e:	f015 f899 	bl	8016a54 <strstr>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d02b      	beq.n	8001980 <SIM_Init+0x4c0>
	{
		SIM_Send_Command("AT+CFUN=0\r");     //Reset RF
 8001928:	4843      	ldr	r0, [pc, #268]	@ (8001a38 <SIM_Init+0x578>)
 800192a:	f000 faa9 	bl	8001e80 <SIM_Send_Command>
		SIM_Wait_Response("OK");
 800192e:	483e      	ldr	r0, [pc, #248]	@ (8001a28 <SIM_Init+0x568>)
 8001930:	f000 fe3a 	bl	80025a8 <SIM_Wait_Response>
		HAL_Delay(2000);
 8001934:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001938:	f009 ff96 	bl	800b868 <HAL_Delay>
		SIM_Send_Command("AT+CFUN=1\r");
 800193c:	483f      	ldr	r0, [pc, #252]	@ (8001a3c <SIM_Init+0x57c>)
 800193e:	f000 fa9f 	bl	8001e80 <SIM_Send_Command>
		SIM_Wait_Response("OK");
 8001942:	4839      	ldr	r0, [pc, #228]	@ (8001a28 <SIM_Init+0x568>)
 8001944:	f000 fe30 	bl	80025a8 <SIM_Wait_Response>
		HAL_Delay(3000);
 8001948:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800194c:	f009 ff8c 	bl	800b868 <HAL_Delay>

		SIM_Send_Command("AT+CSQ\r");
 8001950:	4837      	ldr	r0, [pc, #220]	@ (8001a30 <SIM_Init+0x570>)
 8001952:	f000 fa95 	bl	8001e80 <SIM_Send_Command>
		SIM_Receive_Response(response, 5000);
 8001956:	f107 031c 	add.w	r3, r7, #28
 800195a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800195e:	4618      	mov	r0, r3
 8001960:	f000 faba 	bl	8001ed8 <SIM_Receive_Response>

		if(strstr(response, "+CSQ: 99") != NULL)
 8001964:	f107 031c 	add.w	r3, r7, #28
 8001968:	4932      	ldr	r1, [pc, #200]	@ (8001a34 <SIM_Init+0x574>)
 800196a:	4618      	mov	r0, r3
 800196c:	f015 f872 	bl	8016a54 <strstr>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d004      	beq.n	8001980 <SIM_Init+0x4c0>
		{
			SIM_Power_Off();                 //Power cycle fisico
 8001976:	f000 fa2c 	bl	8001dd2 <SIM_Power_Off>
			return -1;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
 800197e:	e1c9      	b.n	8001d14 <SIM_Init+0x854>
		}
	}

	SIM_Send_Command("AT+CNACT?\r");                                                              //Verifica indirizzo IP
 8001980:	482f      	ldr	r0, [pc, #188]	@ (8001a40 <SIM_Init+0x580>)
 8001982:	f000 fa7d 	bl	8001e80 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001986:	f107 031c 	add.w	r3, r7, #28
 800198a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800198e:	4618      	mov	r0, r3
 8001990:	f000 faa2 	bl	8001ed8 <SIM_Receive_Response>
	if(SIM_Check_IP(response))
 8001994:	f107 031c 	add.w	r3, r7, #28
 8001998:	4618      	mov	r0, r3
 800199a:	f000 fac7 	bl	8001f2c <SIM_Check_IP>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f040 80cb 	bne.w	8001b3c <SIM_Init+0x67c>
	{
		goto TCP;
	}

	sprintf(command, "AT+CNACT=1,\"%s\"\r", sys.apn);                                             //Attivazione contesto PDP
 80019a6:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80019aa:	4a14      	ldr	r2, [pc, #80]	@ (80019fc <SIM_Init+0x53c>)
 80019ac:	4925      	ldr	r1, [pc, #148]	@ (8001a44 <SIM_Init+0x584>)
 80019ae:	4618      	mov	r0, r3
 80019b0:	f014 ffb6 	bl	8016920 <siprintf>
	SIM_Send_Command(command);
 80019b4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 fa61 	bl	8001e80 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 80019be:	481a      	ldr	r0, [pc, #104]	@ (8001a28 <SIM_Init+0x568>)
 80019c0:	f000 fdf2 	bl	80025a8 <SIM_Wait_Response>
	SIM_Receive_Response(response, 5000);
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	f241 3188 	movw	r1, #5000	@ 0x1388
 80019cc:	4618      	mov	r0, r3
 80019ce:	f000 fa83 	bl	8001ed8 <SIM_Receive_Response>
	if(strstr(response, "+APP PDP: ACTIVE") == NULL)
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	491c      	ldr	r1, [pc, #112]	@ (8001a48 <SIM_Init+0x588>)
 80019d8:	4618      	mov	r0, r3
 80019da:	f015 f83b 	bl	8016a54 <strstr>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d16e      	bne.n	8001ac2 <SIM_Init+0x602>
	{
		uint32_t pdp_start = HAL_GetTick();
 80019e4:	f009 ff34 	bl	800b850 <HAL_GetTick>
 80019e8:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234
    	const uint32_t PDP_TIMEOUT = 120000; 
 80019ec:	4b17      	ldr	r3, [pc, #92]	@ (8001a4c <SIM_Init+0x58c>)
 80019ee:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
		while(strstr(response, "+APP PDP: ACTIVE") == NULL && (HAL_GetTick() - pdp_start) < PDP_TIMEOUT)
 80019f2:	e047      	b.n	8001a84 <SIM_Init+0x5c4>
 80019f4:	08017c40 	.word	0x08017c40
 80019f8:	08017c4c 	.word	0x08017c4c
 80019fc:	20001630 	.word	0x20001630
 8001a00:	08017c5c 	.word	0x08017c5c
 8001a04:	08017c64 	.word	0x08017c64
 8001a08:	08017c80 	.word	0x08017c80
 8001a0c:	08017c8c 	.word	0x08017c8c
 8001a10:	08017c94 	.word	0x08017c94
 8001a14:	08017ca4 	.word	0x08017ca4
 8001a18:	08017cb0 	.word	0x08017cb0
 8001a1c:	08017cb8 	.word	0x08017cb8
 8001a20:	08017cc8 	.word	0x08017cc8
 8001a24:	08017cd4 	.word	0x08017cd4
 8001a28:	08017bc8 	.word	0x08017bc8
 8001a2c:	08017ce0 	.word	0x08017ce0
 8001a30:	08017cec 	.word	0x08017cec
 8001a34:	08017cf4 	.word	0x08017cf4
 8001a38:	08017d00 	.word	0x08017d00
 8001a3c:	08017bf0 	.word	0x08017bf0
 8001a40:	08017d0c 	.word	0x08017d0c
 8001a44:	08017d18 	.word	0x08017d18
 8001a48:	08017d2c 	.word	0x08017d2c
 8001a4c:	0001d4c0 	.word	0x0001d4c0
		{
			sprintf(command, "AT+CNACT=1,\"%s\"\r", sys.apn);
 8001a50:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001a54:	4ab2      	ldr	r2, [pc, #712]	@ (8001d20 <SIM_Init+0x860>)
 8001a56:	49b3      	ldr	r1, [pc, #716]	@ (8001d24 <SIM_Init+0x864>)
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f014 ff61 	bl	8016920 <siprintf>
			SIM_Send_Command(command);
 8001a5e:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 fa0c 	bl	8001e80 <SIM_Send_Command>
			SIM_Wait_Response("OK");
 8001a68:	48af      	ldr	r0, [pc, #700]	@ (8001d28 <SIM_Init+0x868>)
 8001a6a:	f000 fd9d 	bl	80025a8 <SIM_Wait_Response>
			SIM_Receive_Response(response, 5000);
 8001a6e:	f107 031c 	add.w	r3, r7, #28
 8001a72:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 fa2e 	bl	8001ed8 <SIM_Receive_Response>
			HAL_Delay(1000);
 8001a7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a80:	f009 fef2 	bl	800b868 <HAL_Delay>
		while(strstr(response, "+APP PDP: ACTIVE") == NULL && (HAL_GetTick() - pdp_start) < PDP_TIMEOUT)
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	49a8      	ldr	r1, [pc, #672]	@ (8001d2c <SIM_Init+0x86c>)
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f014 ffe2 	bl	8016a54 <strstr>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d109      	bne.n	8001aaa <SIM_Init+0x5ea>
 8001a96:	f009 fedb 	bl	800b850 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d8d2      	bhi.n	8001a50 <SIM_Init+0x590>
		}
		if(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8001aaa:	f107 031c 	add.w	r3, r7, #28
 8001aae:	499f      	ldr	r1, [pc, #636]	@ (8001d2c <SIM_Init+0x86c>)
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f014 ffcf 	bl	8016a54 <strstr>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d102      	bne.n	8001ac2 <SIM_Init+0x602>
		{
			return -1;  
 8001abc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac0:	e128      	b.n	8001d14 <SIM_Init+0x854>
		}
	}

	SIM_Send_Command("AT+CNACT?\r");                                                              //Verifica indirizzo IP
 8001ac2:	489b      	ldr	r0, [pc, #620]	@ (8001d30 <SIM_Init+0x870>)
 8001ac4:	f000 f9dc 	bl	8001e80 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001ac8:	f107 031c 	add.w	r3, r7, #28
 8001acc:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 fa01 	bl	8001ed8 <SIM_Receive_Response>
	uint32_t ip_start = HAL_GetTick();
 8001ad6:	f009 febb 	bl	800b850 <HAL_GetTick>
 8001ada:	f8c7 022c 	str.w	r0, [r7, #556]	@ 0x22c
	const uint32_t IP_TIMEOUT = 120000;
 8001ade:	4b95      	ldr	r3, [pc, #596]	@ (8001d34 <SIM_Init+0x874>)
 8001ae0:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
	while(!SIM_Check_IP(response) && (HAL_GetTick() - ip_start) < IP_TIMEOUT)
 8001ae4:	e00d      	b.n	8001b02 <SIM_Init+0x642>
	{
		SIM_Send_Command("AT+CNACT?\r");
 8001ae6:	4892      	ldr	r0, [pc, #584]	@ (8001d30 <SIM_Init+0x870>)
 8001ae8:	f000 f9ca 	bl	8001e80 <SIM_Send_Command>
		SIM_Receive_Response(response, 5000);
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001af4:	4618      	mov	r0, r3
 8001af6:	f000 f9ef 	bl	8001ed8 <SIM_Receive_Response>
		HAL_Delay(1000);
 8001afa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001afe:	f009 feb3 	bl	800b868 <HAL_Delay>
	while(!SIM_Check_IP(response) && (HAL_GetTick() - ip_start) < IP_TIMEOUT)
 8001b02:	f107 031c 	add.w	r3, r7, #28
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 fa10 	bl	8001f2c <SIM_Check_IP>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d109      	bne.n	8001b26 <SIM_Init+0x666>
 8001b12:	f009 fe9d 	bl	800b850 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d8df      	bhi.n	8001ae6 <SIM_Init+0x626>
	}
	if(!SIM_Check_IP(response))
 8001b26:	f107 031c 	add.w	r3, r7, #28
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f9fe 	bl	8001f2c <SIM_Check_IP>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d104      	bne.n	8001b40 <SIM_Init+0x680>
	{
		return -1;  
 8001b36:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3a:	e0eb      	b.n	8001d14 <SIM_Init+0x854>
		goto TCP;
 8001b3c:	bf00      	nop
 8001b3e:	e000      	b.n	8001b42 <SIM_Init+0x682>
	}
	
	TCP:
 8001b40:	bf00      	nop
	SIM_Send_Command("AT+CIPRXGET=0\r");                                                         //Impostazione ricezione automatica da server TCP
 8001b42:	487d      	ldr	r0, [pc, #500]	@ (8001d38 <SIM_Init+0x878>)
 8001b44:	f000 f99c 	bl	8001e80 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001b48:	4877      	ldr	r0, [pc, #476]	@ (8001d28 <SIM_Init+0x868>)
 8001b4a:	f000 fd2d 	bl	80025a8 <SIM_Wait_Response>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <SIM_Init+0x69a>
 8001b54:	f04f 33ff 	mov.w	r3, #4294967295
 8001b58:	e0dc      	b.n	8001d14 <SIM_Init+0x854>

	const uint32_t MAX_TCP_RETRIES = 3;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
	uint32_t retry_count = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
	int tcp_connected = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
	while(!tcp_connected && retry_count < MAX_TCP_RETRIES)
 8001b6c:	e081      	b.n	8001c72 <SIM_Init+0x7b2>
	{
		sprintf(command, "AT+CIPSTART=\"TCP\",\"%s\",%s\r", sys.TCP.IP_address, sys.TCP.Port);   //Connessione al server TCP
 8001b6e:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 8001b72:	4b72      	ldr	r3, [pc, #456]	@ (8001d3c <SIM_Init+0x87c>)
 8001b74:	4a72      	ldr	r2, [pc, #456]	@ (8001d40 <SIM_Init+0x880>)
 8001b76:	4973      	ldr	r1, [pc, #460]	@ (8001d44 <SIM_Init+0x884>)
 8001b78:	f014 fed2 	bl	8016920 <siprintf>
		SIM_Send_Command(command);
 8001b7c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001b80:	4618      	mov	r0, r3
 8001b82:	f000 f97d 	bl	8001e80 <SIM_Send_Command>
		SIM_Wait_Response("OK");
 8001b86:	4868      	ldr	r0, [pc, #416]	@ (8001d28 <SIM_Init+0x868>)
 8001b88:	f000 fd0e 	bl	80025a8 <SIM_Wait_Response>
		SIM_Receive_Response(response, 180000);
 8001b8c:	f107 031c 	add.w	r3, r7, #28
 8001b90:	496d      	ldr	r1, [pc, #436]	@ (8001d48 <SIM_Init+0x888>)
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 f9a0 	bl	8001ed8 <SIM_Receive_Response>
		
		if(strstr(response, "CONNECT OK") != NULL || strstr(response, "ALREADY CONNECT") != NULL)
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	496b      	ldr	r1, [pc, #428]	@ (8001d4c <SIM_Init+0x88c>)
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f014 ff58 	bl	8016a54 <strstr>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d108      	bne.n	8001bbc <SIM_Init+0x6fc>
 8001baa:	f107 031c 	add.w	r3, r7, #28
 8001bae:	4968      	ldr	r1, [pc, #416]	@ (8001d50 <SIM_Init+0x890>)
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f014 ff4f 	bl	8016a54 <strstr>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <SIM_Init+0x704>
		{
			tcp_connected = 1;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
			break;
 8001bc2:	e061      	b.n	8001c88 <SIM_Init+0x7c8>
		}
		else if(strstr(response, "CONNECT FAIL") != NULL)
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	4962      	ldr	r1, [pc, #392]	@ (8001d54 <SIM_Init+0x894>)
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f014 ff42 	bl	8016a54 <strstr>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d04d      	beq.n	8001c72 <SIM_Init+0x7b2>
		{
			SIM_Send_Command("AT+CNACT?\r");
 8001bd6:	4856      	ldr	r0, [pc, #344]	@ (8001d30 <SIM_Init+0x870>)
 8001bd8:	f000 f952 	bl	8001e80 <SIM_Send_Command>
			SIM_Receive_Response(response, 5000);
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 f977 	bl	8001ed8 <SIM_Receive_Response>
			if(!SIM_Check_IP(response))
 8001bea:	f107 031c 	add.w	r3, r7, #28
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f99c 	bl	8001f2c <SIM_Check_IP>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d102      	bne.n	8001c00 <SIM_Init+0x740>
			{
				return -1;  
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfe:	e089      	b.n	8001d14 <SIM_Init+0x854>
			}

			if(strstr(response, "PDP DEACT") != NULL)
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	4954      	ldr	r1, [pc, #336]	@ (8001d58 <SIM_Init+0x898>)
 8001c06:	4618      	mov	r0, r3
 8001c08:	f014 ff24 	bl	8016a54 <strstr>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d01a      	beq.n	8001c48 <SIM_Init+0x788>
			{
				sprintf(command, "AT+CNACT=1,\"%s\"\r", sys.apn);
 8001c12:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001c16:	4a42      	ldr	r2, [pc, #264]	@ (8001d20 <SIM_Init+0x860>)
 8001c18:	4942      	ldr	r1, [pc, #264]	@ (8001d24 <SIM_Init+0x864>)
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f014 fe80 	bl	8016920 <siprintf>
				SIM_Send_Command(command);
 8001c20:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 f92b 	bl	8001e80 <SIM_Send_Command>
				SIM_Wait_Response("OK");
 8001c2a:	483f      	ldr	r0, [pc, #252]	@ (8001d28 <SIM_Init+0x868>)
 8001c2c:	f000 fcbc 	bl	80025a8 <SIM_Wait_Response>
				SIM_Receive_Response(response, 5000);
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f000 f94d 	bl	8001ed8 <SIM_Receive_Response>
				HAL_Delay(10000);
 8001c3e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001c42:	f009 fe11 	bl	800b868 <HAL_Delay>
 8001c46:	e00b      	b.n	8001c60 <SIM_Init+0x7a0>
			}
			else if(strstr(response, "TCP CLOSED") != NULL)
 8001c48:	f107 031c 	add.w	r3, r7, #28
 8001c4c:	4943      	ldr	r1, [pc, #268]	@ (8001d5c <SIM_Init+0x89c>)
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f014 ff00 	bl	8016a54 <strstr>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <SIM_Init+0x7a0>
			{
				return -1;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5e:	e059      	b.n	8001d14 <SIM_Init+0x854>
			}
			
			HAL_Delay(5000);  // Attesa tra retry
 8001c60:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001c64:	f009 fe00 	bl	800b868 <HAL_Delay>
			retry_count++;
 8001c68:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
	while(!tcp_connected && retry_count < MAX_TCP_RETRIES)
 8001c72:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d106      	bne.n	8001c88 <SIM_Init+0x7c8>
 8001c7a:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8001c7e:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8001c82:	429a      	cmp	r2, r3
 8001c84:	f4ff af73 	bcc.w	8001b6e <SIM_Init+0x6ae>
		}
	}

	if(!tcp_connected)
 8001c88:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d102      	bne.n	8001c96 <SIM_Init+0x7d6>
	{
		return -1;  // Fallimento dopo tutti i retry
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295
 8001c94:	e03e      	b.n	8001d14 <SIM_Init+0x854>
	}

	SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        //Verifica connessione al server TCP
 8001c96:	4832      	ldr	r0, [pc, #200]	@ (8001d60 <SIM_Init+0x8a0>)
 8001c98:	f000 f8f2 	bl	8001e80 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 f917 	bl	8001ed8 <SIM_Receive_Response>
	uint32_t status_start = HAL_GetTick();
 8001caa:	f009 fdd1 	bl	800b850 <HAL_GetTick>
 8001cae:	f8c7 0220 	str.w	r0, [r7, #544]	@ 0x220
	const uint32_t CIPSTATUS_TIMEOUT = 30000;  
 8001cb2:	f247 5330 	movw	r3, #30000	@ 0x7530
 8001cb6:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c

	while(!SIM_Check_TCP_State(response) && (HAL_GetTick() - status_start) < CIPSTATUS_TIMEOUT)
 8001cba:	e00d      	b.n	8001cd8 <SIM_Init+0x818>
	{
		SIM_Send_Command("AT+CIPSTATUS=0\r");
 8001cbc:	4828      	ldr	r0, [pc, #160]	@ (8001d60 <SIM_Init+0x8a0>)
 8001cbe:	f000 f8df 	bl	8001e80 <SIM_Send_Command>
		SIM_Receive_Response(response, 5000);
 8001cc2:	f107 031c 	add.w	r3, r7, #28
 8001cc6:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 f904 	bl	8001ed8 <SIM_Receive_Response>
		HAL_Delay(1000);
 8001cd0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cd4:	f009 fdc8 	bl	800b868 <HAL_Delay>
	while(!SIM_Check_TCP_State(response) && (HAL_GetTick() - status_start) < CIPSTATUS_TIMEOUT)
 8001cd8:	f107 031c 	add.w	r3, r7, #28
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 f959 	bl	8001f94 <SIM_Check_TCP_State>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d109      	bne.n	8001cfc <SIM_Init+0x83c>
 8001ce8:	f009 fdb2 	bl	800b850 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d8df      	bhi.n	8001cbc <SIM_Init+0x7fc>
	}

	if(!SIM_Check_TCP_State(response))
 8001cfc:	f107 031c 	add.w	r3, r7, #28
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 f947 	bl	8001f94 <SIM_Check_TCP_State>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <SIM_Init+0x852>
	{
		return -1;  
 8001d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d10:	e000      	b.n	8001d14 <SIM_Init+0x854>
	}

	return 0;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	f507 7714 	add.w	r7, r7, #592	@ 0x250
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20001630 	.word	0x20001630
 8001d24:	08017d18 	.word	0x08017d18
 8001d28:	08017bc8 	.word	0x08017bc8
 8001d2c:	08017d2c 	.word	0x08017d2c
 8001d30:	08017d0c 	.word	0x08017d0c
 8001d34:	0001d4c0 	.word	0x0001d4c0
 8001d38:	08017d40 	.word	0x08017d40
 8001d3c:	2000171c 	.word	0x2000171c
 8001d40:	200016b8 	.word	0x200016b8
 8001d44:	08017d50 	.word	0x08017d50
 8001d48:	0002bf20 	.word	0x0002bf20
 8001d4c:	08017d6c 	.word	0x08017d6c
 8001d50:	08017d78 	.word	0x08017d78
 8001d54:	08017d88 	.word	0x08017d88
 8001d58:	08017d98 	.word	0x08017d98
 8001d5c:	08017da4 	.word	0x08017da4
 8001d60:	08017db0 	.word	0x08017db0

08001d64 <SIM_Power_On>:

/*------ACCENSIONE DEL MODULO LTE------*/
void SIM_Power_On(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_SET);
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d74:	f00c ff62 	bl	800ec3c <HAL_GPIO_WritePin>
	HAL_Delay(1500);
 8001d78:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001d7c:	f009 fd74 	bl	800b868 <HAL_Delay>
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_RESET);
 8001d80:	2200      	movs	r2, #0
 8001d82:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d8a:	f00c ff57 	bl	800ec3c <HAL_GPIO_WritePin>
	uint32_t timeout = HAL_GetTick();
 8001d8e:	f009 fd5f 	bl	800b850 <HAL_GetTick>
 8001d92:	6078      	str	r0, [r7, #4]
    while(HAL_GPIO_ReadPin(LTE_STATUS_GPIO_Port, LTE_STATUS_Pin) != GPIO_PIN_SET)
 8001d94:	e00b      	b.n	8001dae <SIM_Power_On+0x4a>
    {
        if(HAL_GetTick() - timeout > 5000) break; 
 8001d96:	f009 fd5b 	bl	800b850 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d80b      	bhi.n	8001dc0 <SIM_Power_On+0x5c>
        HAL_Delay(100);
 8001da8:	2064      	movs	r0, #100	@ 0x64
 8001daa:	f009 fd5d 	bl	800b868 <HAL_Delay>
    while(HAL_GPIO_ReadPin(LTE_STATUS_GPIO_Port, LTE_STATUS_Pin) != GPIO_PIN_SET)
 8001dae:	2108      	movs	r1, #8
 8001db0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001db4:	f00c ff2a 	bl	800ec0c <HAL_GPIO_ReadPin>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d1eb      	bne.n	8001d96 <SIM_Power_On+0x32>
 8001dbe:	e000      	b.n	8001dc2 <SIM_Power_On+0x5e>
        if(HAL_GetTick() - timeout > 5000) break; 
 8001dc0:	bf00      	nop
    }
    HAL_Delay(2000); 
 8001dc2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001dc6:	f009 fd4f 	bl	800b868 <HAL_Delay>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <SIM_Power_Off>:

/*------SPEGNIMENTO DEL MODULO LTE------*/
void SIM_Power_Off(void)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_SET);
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001dde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001de2:	f00c ff2b 	bl	800ec3c <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8001de6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001dea:	f009 fd3d 	bl	800b868 <HAL_Delay>
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_RESET);
 8001dee:	2200      	movs	r2, #0
 8001df0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001df4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001df8:	f00c ff20 	bl	800ec3c <HAL_GPIO_WritePin>
	uint32_t timeout = HAL_GetTick();
 8001dfc:	f009 fd28 	bl	800b850 <HAL_GetTick>
 8001e00:	6078      	str	r0, [r7, #4]
    while(HAL_GPIO_ReadPin(LTE_STATUS_GPIO_Port, LTE_STATUS_Pin) != GPIO_PIN_RESET)
 8001e02:	e00b      	b.n	8001e1c <SIM_Power_Off+0x4a>
    {
        if(HAL_GetTick() - timeout > 5000) break; 
 8001e04:	f009 fd24 	bl	800b850 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d80b      	bhi.n	8001e2e <SIM_Power_Off+0x5c>
        HAL_Delay(100);
 8001e16:	2064      	movs	r0, #100	@ 0x64
 8001e18:	f009 fd26 	bl	800b868 <HAL_Delay>
    while(HAL_GPIO_ReadPin(LTE_STATUS_GPIO_Port, LTE_STATUS_Pin) != GPIO_PIN_RESET)
 8001e1c:	2108      	movs	r1, #8
 8001e1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e22:	f00c fef3 	bl	800ec0c <HAL_GPIO_ReadPin>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1eb      	bne.n	8001e04 <SIM_Power_Off+0x32>
 8001e2c:	e000      	b.n	8001e30 <SIM_Power_Off+0x5e>
        if(HAL_GetTick() - timeout > 5000) break; 
 8001e2e:	bf00      	nop
    }
    HAL_Delay(5000);
 8001e30:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001e34:	f009 fd18 	bl	800b868 <HAL_Delay>
}
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <SIM_Reset>:

/*------RESET DEL MODULO LTE------*/
void SIM_Reset(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTE_RESET_GPIO_Port, LTE_RESET_Pin, GPIO_PIN_SET);
 8001e44:	2201      	movs	r2, #1
 8001e46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e4e:	f00c fef5 	bl	800ec3c <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001e52:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001e56:	f009 fd07 	bl	800b868 <HAL_Delay>
	HAL_GPIO_WritePin(LTE_RESET_GPIO_Port, LTE_RESET_Pin, GPIO_PIN_RESET);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e64:	f00c feea 	bl	800ec3c <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(LTE_STATUS_GPIO_Port, LTE_STATUS_Pin) != GPIO_PIN_SET);
 8001e68:	bf00      	nop
 8001e6a:	2108      	movs	r1, #8
 8001e6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e70:	f00c fecc 	bl	800ec0c <HAL_GPIO_ReadPin>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d1f7      	bne.n	8001e6a <SIM_Reset+0x2a>
}
 8001e7a:	bf00      	nop
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <SIM_Send_Command>:

/*------INVIO COMANDO AL MODULO LTE------*/
void SIM_Send_Command(char* command)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7fe f9ab 	bl	80001e4 <strlen>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(SIM_UART, (uint8_t*)command, len, 100);
 8001e92:	89fa      	ldrh	r2, [r7, #14]
 8001e94:	2364      	movs	r3, #100	@ 0x64
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4803      	ldr	r0, [pc, #12]	@ (8001ea8 <SIM_Send_Command+0x28>)
 8001e9a:	f013 f9f9 	bl	8015290 <HAL_UART_Transmit>
}
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200004bc 	.word	0x200004bc

08001eac <SIM_Send_Command_DMA>:

/*------INVIO COMANDO AL MODULO LTE (DMA)------*/
void SIM_Send_Command_DMA(char* command)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7fe f995 	bl	80001e4 <strlen>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit_DMA(SIM_UART, (uint8_t*)command, len);
 8001ebe:	89fb      	ldrh	r3, [r7, #14]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4803      	ldr	r0, [pc, #12]	@ (8001ed4 <SIM_Send_Command_DMA+0x28>)
 8001ec6:	f013 fb35 	bl	8015534 <HAL_UART_Transmit_DMA>
}
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200004bc 	.word	0x200004bc

08001ed8 <SIM_Receive_Response>:

/*------RICEZIONE RISPOSTA DAL MODULO LTE------*/
uint16_t SIM_Receive_Response(char* rx, uint32_t timeout_ms)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af02      	add	r7, sp, #8
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
	uint16_t RxLen = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	817b      	strh	r3, [r7, #10]
	uint32_t start_time = HAL_GetTick();
 8001ee6:	f009 fcb3 	bl	800b850 <HAL_GetTick>
 8001eea:	60f8      	str	r0, [r7, #12]

	while ((HAL_GetTick() - start_time) < timeout_ms)
 8001eec:	e00d      	b.n	8001f0a <SIM_Receive_Response+0x32>
	{
		HAL_UARTEx_ReceiveToIdle(SIM_UART, (uint8_t *)rx, 256, &RxLen, 500);
 8001eee:	f107 030a 	add.w	r3, r7, #10
 8001ef2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001ef6:	9200      	str	r2, [sp, #0]
 8001ef8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	480a      	ldr	r0, [pc, #40]	@ (8001f28 <SIM_Receive_Response+0x50>)
 8001f00:	f014 fb2d 	bl	801655e <HAL_UARTEx_ReceiveToIdle>
		if (RxLen > 0)
 8001f04:	897b      	ldrh	r3, [r7, #10]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d108      	bne.n	8001f1c <SIM_Receive_Response+0x44>
	while ((HAL_GetTick() - start_time) < timeout_ms)
 8001f0a:	f009 fca1 	bl	800b850 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d8e9      	bhi.n	8001eee <SIM_Receive_Response+0x16>
 8001f1a:	e000      	b.n	8001f1e <SIM_Receive_Response+0x46>
			break;
 8001f1c:	bf00      	nop
	}
	return RxLen;
 8001f1e:	897b      	ldrh	r3, [r7, #10]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	200004bc 	.word	0x200004bc

08001f2c <SIM_Check_IP>:

/*------CONTROLLO INDIRIZZO IP------*/
int SIM_Check_IP(const char* response)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08c      	sub	sp, #48	@ 0x30
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	char* cnact_pos = strstr(response, "+CNACT:");
 8001f34:	4915      	ldr	r1, [pc, #84]	@ (8001f8c <SIM_Check_IP+0x60>)
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f014 fd8c 	bl	8016a54 <strstr>
 8001f3c:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if(cnact_pos != NULL) 
 8001f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01d      	beq.n	8001f80 <SIM_Check_IP+0x54>
	{
		int status;
		char ip_addr[32] = {0};
 8001f44:	f107 0308 	add.w	r3, r7, #8
 8001f48:	2220      	movs	r2, #32
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f014 fd47 	bl	80169e0 <memset>
		if(sscanf(cnact_pos, "+CNACT: %d,%31s", &status, ip_addr) == 2)
 8001f52:	f107 0308 	add.w	r3, r7, #8
 8001f56:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001f5a:	490d      	ldr	r1, [pc, #52]	@ (8001f90 <SIM_Check_IP+0x64>)
 8001f5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001f5e:	f014 fd01 	bl	8016964 <siscanf>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d10b      	bne.n	8001f80 <SIM_Check_IP+0x54>
		{
			return (status == 1 && strlen(ip_addr) > 0) ? 1 : 0;
 8001f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d106      	bne.n	8001f7c <SIM_Check_IP+0x50>
 8001f6e:	f107 0308 	add.w	r3, r7, #8
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <SIM_Check_IP+0x50>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e002      	b.n	8001f82 <SIM_Check_IP+0x56>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	e000      	b.n	8001f82 <SIM_Check_IP+0x56>
		}
	}
	return 0;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3730      	adds	r7, #48	@ 0x30
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	08017dc0 	.word	0x08017dc0
 8001f90:	08017dc8 	.word	0x08017dc8

08001f94 <SIM_Check_TCP_State>:
    return 0;
}

/*------CONTROLLO STATO CONNESSIONE TCP------*/
int SIM_Check_TCP_State(const char* response)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
    char* cipstatus_pos = strstr(response, "+CIPSTATUS: 0");
 8001f9c:	490a      	ldr	r1, [pc, #40]	@ (8001fc8 <SIM_Check_TCP_State+0x34>)
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f014 fd58 	bl	8016a54 <strstr>
 8001fa4:	60f8      	str	r0, [r7, #12]
    if(cipstatus_pos != NULL) {
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d008      	beq.n	8001fbe <SIM_Check_TCP_State+0x2a>
        // Cerca "CONNECTED" nella stessa riga
        if(strstr(cipstatus_pos, "CONNECTED") != NULL) {
 8001fac:	4907      	ldr	r1, [pc, #28]	@ (8001fcc <SIM_Check_TCP_State+0x38>)
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f014 fd50 	bl	8016a54 <strstr>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <SIM_Check_TCP_State+0x2a>
            return 1;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <SIM_Check_TCP_State+0x2c>
        }
    }
    return 0;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	08017df4 	.word	0x08017df4
 8001fcc:	08017e04 	.word	0x08017e04

08001fd0 <SIM_Parse_Command>:

/*------PARSING MESSAGGIO MQTT------*/
void SIM_Parse_Command(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
	char* buf = (char*)sim_rx_buffer;
 8001fd6:	4b7b      	ldr	r3, [pc, #492]	@ (80021c4 <SIM_Parse_Command+0x1f4>)
 8001fd8:	60fb      	str	r3, [r7, #12]

	if(strncmp(buf, "+CMD,", 5) == 0)
 8001fda:	2205      	movs	r2, #5
 8001fdc:	497a      	ldr	r1, [pc, #488]	@ (80021c8 <SIM_Parse_Command+0x1f8>)
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f014 fd13 	bl	8016a0a <strncmp>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f040 80e7 	bne.w	80021ba <SIM_Parse_Command+0x1ea>
	{
		char* pos = buf + 5;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	3305      	adds	r3, #5
 8001ff0:	60bb      	str	r3, [r7, #8]
		// Estrai il valore del comando (cmd_val) come stringa
		char cmd_str[8] = {0};
 8001ff2:	463b      	mov	r3, r7
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
		int i = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
		while(pos[i] != ',' && pos[i] != '\0' && i < 7) 
 8001ffe:	e00b      	b.n	8002018 <SIM_Parse_Command+0x48>
		{
			cmd_str[i] = pos[i];
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	4413      	add	r3, r2
 8002006:	7819      	ldrb	r1, [r3, #0]
 8002008:	463a      	mov	r2, r7
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	4413      	add	r3, r2
 800200e:	460a      	mov	r2, r1
 8002010:	701a      	strb	r2, [r3, #0]
			i++;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	3301      	adds	r3, #1
 8002016:	617b      	str	r3, [r7, #20]
		while(pos[i] != ',' && pos[i] != '\0' && i < 7) 
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	4413      	add	r3, r2
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b2c      	cmp	r3, #44	@ 0x2c
 8002022:	d008      	beq.n	8002036 <SIM_Parse_Command+0x66>
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	4413      	add	r3, r2
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <SIM_Parse_Command+0x66>
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2b06      	cmp	r3, #6
 8002034:	dde4      	ble.n	8002000 <SIM_Parse_Command+0x30>
		}
		cmd_str[i] = '\0';
 8002036:	463a      	mov	r2, r7
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	4413      	add	r3, r2
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]

		// Avanza oltre la virgola per eventuale parsing successivo
		char* data_pos = pos + i;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	4413      	add	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
		if(*data_pos == ',') data_pos++;
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b2c      	cmp	r3, #44	@ 0x2c
 800204e:	d102      	bne.n	8002056 <SIM_Parse_Command+0x86>
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	3301      	adds	r3, #1
 8002054:	613b      	str	r3, [r7, #16]

		if(strcmp(cmd_str, "IDL") == 0) 
 8002056:	463b      	mov	r3, r7
 8002058:	495c      	ldr	r1, [pc, #368]	@ (80021cc <SIM_Parse_Command+0x1fc>)
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe f8b8 	bl	80001d0 <strcmp>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d105      	bne.n	8002072 <SIM_Parse_Command+0xa2>
		{
			flags.CMD.Idle = 1;
 8002066:	4a5a      	ldr	r2, [pc, #360]	@ (80021d0 <SIM_Parse_Command+0x200>)
 8002068:	7893      	ldrb	r3, [r2, #2]
 800206a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800206e:	7093      	strb	r3, [r2, #2]
		else if(strcmp(cmd_str, "RST") == 0) 
		{
			HAL_NVIC_SystemReset();
		}
	}
}
 8002070:	e0a3      	b.n	80021ba <SIM_Parse_Command+0x1ea>
		else if(strcmp(cmd_str, "SRT") == 0) 
 8002072:	463b      	mov	r3, r7
 8002074:	4957      	ldr	r1, [pc, #348]	@ (80021d4 <SIM_Parse_Command+0x204>)
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe f8aa 	bl	80001d0 <strcmp>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d105      	bne.n	800208e <SIM_Parse_Command+0xbe>
			flags.CMD.Start_Meas = 1;
 8002082:	4a53      	ldr	r2, [pc, #332]	@ (80021d0 <SIM_Parse_Command+0x200>)
 8002084:	7893      	ldrb	r3, [r2, #2]
 8002086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800208a:	7093      	strb	r3, [r2, #2]
}
 800208c:	e095      	b.n	80021ba <SIM_Parse_Command+0x1ea>
		else if(strcmp(cmd_str, "PNG") == 0) 
 800208e:	463b      	mov	r3, r7
 8002090:	4951      	ldr	r1, [pc, #324]	@ (80021d8 <SIM_Parse_Command+0x208>)
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe f89c 	bl	80001d0 <strcmp>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d105      	bne.n	80020aa <SIM_Parse_Command+0xda>
			flags.CMD.Ping = 1;
 800209e:	4a4c      	ldr	r2, [pc, #304]	@ (80021d0 <SIM_Parse_Command+0x200>)
 80020a0:	7893      	ldrb	r3, [r2, #2]
 80020a2:	f043 0308 	orr.w	r3, r3, #8
 80020a6:	7093      	strb	r3, [r2, #2]
}
 80020a8:	e087      	b.n	80021ba <SIM_Parse_Command+0x1ea>
		else if(strcmp(cmd_str, "SND") == 0) 
 80020aa:	463b      	mov	r3, r7
 80020ac:	494b      	ldr	r1, [pc, #300]	@ (80021dc <SIM_Parse_Command+0x20c>)
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe f88e 	bl	80001d0 <strcmp>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d119      	bne.n	80020ee <SIM_Parse_Command+0x11e>
			if(strcmp(data_pos, "1") == 0)
 80020ba:	4949      	ldr	r1, [pc, #292]	@ (80021e0 <SIM_Parse_Command+0x210>)
 80020bc:	6938      	ldr	r0, [r7, #16]
 80020be:	f7fe f887 	bl	80001d0 <strcmp>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d105      	bne.n	80020d4 <SIM_Parse_Command+0x104>
				flags.CMD.Data_Request = 1;
 80020c8:	4a41      	ldr	r2, [pc, #260]	@ (80021d0 <SIM_Parse_Command+0x200>)
 80020ca:	7893      	ldrb	r3, [r2, #2]
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	7093      	strb	r3, [r2, #2]
}
 80020d2:	e072      	b.n	80021ba <SIM_Parse_Command+0x1ea>
			else if(strcmp(data_pos, "0") == 0)
 80020d4:	4943      	ldr	r1, [pc, #268]	@ (80021e4 <SIM_Parse_Command+0x214>)
 80020d6:	6938      	ldr	r0, [r7, #16]
 80020d8:	f7fe f87a 	bl	80001d0 <strcmp>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d16b      	bne.n	80021ba <SIM_Parse_Command+0x1ea>
				flags.CMD.Data_Request = 0;
 80020e2:	4a3b      	ldr	r2, [pc, #236]	@ (80021d0 <SIM_Parse_Command+0x200>)
 80020e4:	7893      	ldrb	r3, [r2, #2]
 80020e6:	f023 0301 	bic.w	r3, r3, #1
 80020ea:	7093      	strb	r3, [r2, #2]
}
 80020ec:	e065      	b.n	80021ba <SIM_Parse_Command+0x1ea>
		else if(strcmp(cmd_str, "MSR") == 0) 
 80020ee:	463b      	mov	r3, r7
 80020f0:	493d      	ldr	r1, [pc, #244]	@ (80021e8 <SIM_Parse_Command+0x218>)
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe f86c 	bl	80001d0 <strcmp>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d117      	bne.n	800212e <SIM_Parse_Command+0x15e>
			if(!flags.CMD.Measure_Request) 
 80020fe:	4b34      	ldr	r3, [pc, #208]	@ (80021d0 <SIM_Parse_Command+0x200>)
 8002100:	789b      	ldrb	r3, [r3, #2]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d156      	bne.n	80021ba <SIM_Parse_Command+0x1ea>
				LED_Start(RED_LED, FAST, LOW);
 800210c:	2207      	movs	r2, #7
 800210e:	2100      	movs	r1, #0
 8002110:	2004      	movs	r0, #4
 8002112:	f001 fd61 	bl	8003bd8 <LED_Start>
				Send_Measure_Addr = Saved_Bytes;
 8002116:	4b35      	ldr	r3, [pc, #212]	@ (80021ec <SIM_Parse_Command+0x21c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a35      	ldr	r2, [pc, #212]	@ (80021f0 <SIM_Parse_Command+0x220>)
 800211c:	6013      	str	r3, [r2, #0]
				flags.CMD.Measure_Request = 1;
 800211e:	4a2c      	ldr	r2, [pc, #176]	@ (80021d0 <SIM_Parse_Command+0x200>)
 8002120:	7893      	ldrb	r3, [r2, #2]
 8002122:	f043 0302 	orr.w	r3, r3, #2
 8002126:	7093      	strb	r3, [r2, #2]
				Switch_Buffer();
 8002128:	f004 f8d4 	bl	80062d4 <Switch_Buffer>
}
 800212c:	e045      	b.n	80021ba <SIM_Parse_Command+0x1ea>
		else if(strcmp(cmd_str, "OTA") == 0) 
 800212e:	463b      	mov	r3, r7
 8002130:	4930      	ldr	r1, [pc, #192]	@ (80021f4 <SIM_Parse_Command+0x224>)
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe f84c 	bl	80001d0 <strcmp>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <SIM_Parse_Command+0x182>
			if(state == IDLE) 
 800213e:	4b2e      	ldr	r3, [pc, #184]	@ (80021f8 <SIM_Parse_Command+0x228>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d139      	bne.n	80021ba <SIM_Parse_Command+0x1ea>
				flags.CMD.Start_OTA = 1;
 8002146:	4a22      	ldr	r2, [pc, #136]	@ (80021d0 <SIM_Parse_Command+0x200>)
 8002148:	7893      	ldrb	r3, [r2, #2]
 800214a:	f043 0304 	orr.w	r3, r3, #4
 800214e:	7093      	strb	r3, [r2, #2]
}
 8002150:	e033      	b.n	80021ba <SIM_Parse_Command+0x1ea>
		else if(strcmp(cmd_str, "SET") == 0) 
 8002152:	463b      	mov	r3, r7
 8002154:	4929      	ldr	r1, [pc, #164]	@ (80021fc <SIM_Parse_Command+0x22c>)
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe f83a 	bl	80001d0 <strcmp>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10c      	bne.n	800217c <SIM_Parse_Command+0x1ac>
			if(state == IDLE) 
 8002162:	4b25      	ldr	r3, [pc, #148]	@ (80021f8 <SIM_Parse_Command+0x228>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d127      	bne.n	80021ba <SIM_Parse_Command+0x1ea>
				flags.CMD.Set_Config = 1;
 800216a:	4a19      	ldr	r2, [pc, #100]	@ (80021d0 <SIM_Parse_Command+0x200>)
 800216c:	7893      	ldrb	r3, [r2, #2]
 800216e:	f043 0310 	orr.w	r3, r3, #16
 8002172:	7093      	strb	r3, [r2, #2]
				SIM_Parse_Cfg(data_pos); 
 8002174:	6938      	ldr	r0, [r7, #16]
 8002176:	f000 f847 	bl	8002208 <SIM_Parse_Cfg>
}
 800217a:	e01e      	b.n	80021ba <SIM_Parse_Command+0x1ea>
		else if(strcmp(cmd_str, "GET") == 0) 
 800217c:	463b      	mov	r3, r7
 800217e:	4920      	ldr	r1, [pc, #128]	@ (8002200 <SIM_Parse_Command+0x230>)
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe f825 	bl	80001d0 <strcmp>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10c      	bne.n	80021a6 <SIM_Parse_Command+0x1d6>
			if(state == IDLE) 
 800218c:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <SIM_Parse_Command+0x228>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d112      	bne.n	80021ba <SIM_Parse_Command+0x1ea>
				flags.CMD.Get_Config = 1;
 8002194:	4a0e      	ldr	r2, [pc, #56]	@ (80021d0 <SIM_Parse_Command+0x200>)
 8002196:	7893      	ldrb	r3, [r2, #2]
 8002198:	f043 0320 	orr.w	r3, r3, #32
 800219c:	7093      	strb	r3, [r2, #2]
				SIM_Get_Cfg(data_pos);
 800219e:	6938      	ldr	r0, [r7, #16]
 80021a0:	f000 f8a6 	bl	80022f0 <SIM_Get_Cfg>
}
 80021a4:	e009      	b.n	80021ba <SIM_Parse_Command+0x1ea>
		else if(strcmp(cmd_str, "RST") == 0) 
 80021a6:	463b      	mov	r3, r7
 80021a8:	4916      	ldr	r1, [pc, #88]	@ (8002204 <SIM_Parse_Command+0x234>)
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe f810 	bl	80001d0 <strcmp>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <SIM_Parse_Command+0x1ea>
			HAL_NVIC_SystemReset();
 80021b6:	f00b f830 	bl	800d21a <HAL_NVIC_SystemReset>
}
 80021ba:	bf00      	nop
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20004f94 	.word	0x20004f94
 80021c8:	08017e10 	.word	0x08017e10
 80021cc:	08017e18 	.word	0x08017e18
 80021d0:	20001780 	.word	0x20001780
 80021d4:	08017e1c 	.word	0x08017e1c
 80021d8:	08017e20 	.word	0x08017e20
 80021dc:	08017e24 	.word	0x08017e24
 80021e0:	08017e28 	.word	0x08017e28
 80021e4:	08017e2c 	.word	0x08017e2c
 80021e8:	08017e30 	.word	0x08017e30
 80021ec:	20004960 	.word	0x20004960
 80021f0:	20004968 	.word	0x20004968
 80021f4:	08017e34 	.word	0x08017e34
 80021f8:	200005d4 	.word	0x200005d4
 80021fc:	08017e38 	.word	0x08017e38
 8002200:	08017e3c 	.word	0x08017e3c
 8002204:	08017e40 	.word	0x08017e40

08002208 <SIM_Parse_Cfg>:

/*-----PARSING CONFIGURAZIONE-----*/
void SIM_Parse_Cfg(char* cmd_start)
{   
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
    memset(cfg_var, 0, sizeof(cfg_var));
 8002210:	2214      	movs	r2, #20
 8002212:	2100      	movs	r1, #0
 8002214:	4833      	ldr	r0, [pc, #204]	@ (80022e4 <SIM_Parse_Cfg+0xdc>)
 8002216:	f014 fbe3 	bl	80169e0 <memset>
    memset(new_cfg_val, 0, sizeof(new_cfg_val));
 800221a:	220a      	movs	r2, #10
 800221c:	2100      	movs	r1, #0
 800221e:	4832      	ldr	r0, [pc, #200]	@ (80022e8 <SIM_Parse_Cfg+0xe0>)
 8002220:	f014 fbde 	bl	80169e0 <memset>
    
	char* pos = cmd_start + 4; // Salta "SET,"
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3304      	adds	r3, #4
 8002228:	61fb      	str	r3, [r7, #28]

	// Prima virgola (dopo SET)
	char* comma1 = strchr(pos, ',');
 800222a:	212c      	movs	r1, #44	@ 0x2c
 800222c:	69f8      	ldr	r0, [r7, #28]
 800222e:	f014 fbdf 	bl	80169f0 <strchr>
 8002232:	61b8      	str	r0, [r7, #24]
	if(!comma1) return;
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d04c      	beq.n	80022d4 <SIM_Parse_Cfg+0xcc>

	// Seconda virgola
	char* comma2 = strchr(comma1 + 1, ',');
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	3301      	adds	r3, #1
 800223e:	212c      	movs	r1, #44	@ 0x2c
 8002240:	4618      	mov	r0, r3
 8002242:	f014 fbd5 	bl	80169f0 <strchr>
 8002246:	6178      	str	r0, [r7, #20]
	if(!comma2) return;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d044      	beq.n	80022d8 <SIM_Parse_Cfg+0xd0>

	// Terza virgola
	char* comma3 = strchr(comma2 + 1, ',');
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	3301      	adds	r3, #1
 8002252:	212c      	movs	r1, #44	@ 0x2c
 8002254:	4618      	mov	r0, r3
 8002256:	f014 fbcb 	bl	80169f0 <strchr>
 800225a:	6138      	str	r0, [r7, #16]
	if(!comma3) return;
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d03c      	beq.n	80022dc <SIM_Parse_Cfg+0xd4>

	// Estrai cfg_var (tra SET, e prima virgola)
	int var_len = comma2 - comma1 - 1;
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	3b01      	subs	r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
	if(var_len > 0 && var_len < sizeof(cfg_var)) 
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	dd0e      	ble.n	8002290 <SIM_Parse_Cfg+0x88>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b13      	cmp	r3, #19
 8002276:	d80b      	bhi.n	8002290 <SIM_Parse_Cfg+0x88>
	{
		strncpy(cfg_var, comma1 + 1, var_len);
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	3301      	adds	r3, #1
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	4619      	mov	r1, r3
 8002280:	4818      	ldr	r0, [pc, #96]	@ (80022e4 <SIM_Parse_Cfg+0xdc>)
 8002282:	f014 fbd4 	bl	8016a2e <strncpy>
		cfg_var[var_len] = '\0';
 8002286:	4a17      	ldr	r2, [pc, #92]	@ (80022e4 <SIM_Parse_Cfg+0xdc>)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4413      	add	r3, r2
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
	}

	// Estrai cfg_idx
	cfg_idx = atoi(comma2 + 1);
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	3301      	adds	r3, #1
 8002294:	4618      	mov	r0, r3
 8002296:	f014 fab9 	bl	801680c <atoi>
 800229a:	4603      	mov	r3, r0
 800229c:	4a13      	ldr	r2, [pc, #76]	@ (80022ec <SIM_Parse_Cfg+0xe4>)
 800229e:	6013      	str	r3, [r2, #0]

	// Estrai new_cfg_val
	int val_len = strlen(comma3 + 1);
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	3301      	adds	r3, #1
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fd ff9d 	bl	80001e4 <strlen>
 80022aa:	4603      	mov	r3, r0
 80022ac:	60bb      	str	r3, [r7, #8]
	if(val_len > 0 && val_len < sizeof(new_cfg_val)) 
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	dd14      	ble.n	80022de <SIM_Parse_Cfg+0xd6>
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b09      	cmp	r3, #9
 80022b8:	d811      	bhi.n	80022de <SIM_Parse_Cfg+0xd6>
	{
		strncpy(new_cfg_val, comma3 + 1, val_len);
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	3301      	adds	r3, #1
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	4619      	mov	r1, r3
 80022c2:	4809      	ldr	r0, [pc, #36]	@ (80022e8 <SIM_Parse_Cfg+0xe0>)
 80022c4:	f014 fbb3 	bl	8016a2e <strncpy>
		new_cfg_val[val_len] = '\0';
 80022c8:	4a07      	ldr	r2, [pc, #28]	@ (80022e8 <SIM_Parse_Cfg+0xe0>)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	4413      	add	r3, r2
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
 80022d2:	e004      	b.n	80022de <SIM_Parse_Cfg+0xd6>
	if(!comma1) return;
 80022d4:	bf00      	nop
 80022d6:	e002      	b.n	80022de <SIM_Parse_Cfg+0xd6>
	if(!comma2) return;
 80022d8:	bf00      	nop
 80022da:	e000      	b.n	80022de <SIM_Parse_Cfg+0xd6>
	if(!comma3) return;
 80022dc:	bf00      	nop
	}
}
 80022de:	3720      	adds	r7, #32
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20005764 	.word	0x20005764
 80022e8:	2000577c 	.word	0x2000577c
 80022ec:	20005778 	.word	0x20005778

080022f0 <SIM_Get_Cfg>:

/*-----RECUPERO VALORE DI CONFIGURAZIONE-----*/
void SIM_Get_Cfg(char* cmd_start)
{   
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	memset(cfg_var, 0, sizeof(cfg_var));
 80022f8:	2214      	movs	r2, #20
 80022fa:	2100      	movs	r1, #0
 80022fc:	4821      	ldr	r0, [pc, #132]	@ (8002384 <SIM_Get_Cfg+0x94>)
 80022fe:	f014 fb6f 	bl	80169e0 <memset>
	memset(new_cfg_val, 0, sizeof(new_cfg_val));
 8002302:	220a      	movs	r2, #10
 8002304:	2100      	movs	r1, #0
 8002306:	4820      	ldr	r0, [pc, #128]	@ (8002388 <SIM_Get_Cfg+0x98>)
 8002308:	f014 fb6a 	bl	80169e0 <memset>
	
	char* pos = cmd_start + 4; // Salta "GET,"
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3304      	adds	r3, #4
 8002310:	617b      	str	r3, [r7, #20]

	// Prima virgola (dopo GET)
	char* comma1 = strchr(pos, ',');
 8002312:	212c      	movs	r1, #44	@ 0x2c
 8002314:	6978      	ldr	r0, [r7, #20]
 8002316:	f014 fb6b 	bl	80169f0 <strchr>
 800231a:	6138      	str	r0, [r7, #16]
	if(!comma1) return;
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d029      	beq.n	8002376 <SIM_Get_Cfg+0x86>

	// Seconda virgola
	char* comma2 = strchr(comma1 + 1, ',');
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	3301      	adds	r3, #1
 8002326:	212c      	movs	r1, #44	@ 0x2c
 8002328:	4618      	mov	r0, r3
 800232a:	f014 fb61 	bl	80169f0 <strchr>
 800232e:	60f8      	str	r0, [r7, #12]
	if(!comma2) return;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d021      	beq.n	800237a <SIM_Get_Cfg+0x8a>

	// Estrai cfg_var (tra GET, e prima virgola)
	int var_len = comma2 - comma1 - 1;
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	3b01      	subs	r3, #1
 800233e:	60bb      	str	r3, [r7, #8]
	if(var_len > 0 && var_len < sizeof(cfg_var)) 
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	dd0e      	ble.n	8002364 <SIM_Get_Cfg+0x74>
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b13      	cmp	r3, #19
 800234a:	d80b      	bhi.n	8002364 <SIM_Get_Cfg+0x74>
	{
		strncpy(cfg_var, comma1 + 1, var_len);
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	3301      	adds	r3, #1
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	4619      	mov	r1, r3
 8002354:	480b      	ldr	r0, [pc, #44]	@ (8002384 <SIM_Get_Cfg+0x94>)
 8002356:	f014 fb6a 	bl	8016a2e <strncpy>
		cfg_var[var_len] = '\0';
 800235a:	4a0a      	ldr	r2, [pc, #40]	@ (8002384 <SIM_Get_Cfg+0x94>)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	4413      	add	r3, r2
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
	}

	// Estrai cfg_idx
	cfg_idx = atoi(comma2 + 1);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	3301      	adds	r3, #1
 8002368:	4618      	mov	r0, r3
 800236a:	f014 fa4f 	bl	801680c <atoi>
 800236e:	4603      	mov	r3, r0
 8002370:	4a06      	ldr	r2, [pc, #24]	@ (800238c <SIM_Get_Cfg+0x9c>)
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	e002      	b.n	800237c <SIM_Get_Cfg+0x8c>
	if(!comma1) return;
 8002376:	bf00      	nop
 8002378:	e000      	b.n	800237c <SIM_Get_Cfg+0x8c>
	if(!comma2) return;
 800237a:	bf00      	nop
}
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20005764 	.word	0x20005764
 8002388:	2000577c 	.word	0x2000577c
 800238c:	20005778 	.word	0x20005778

08002390 <SIM_Send_TCP>:
    SIM_Wait_Response("OK");
}

/*-----INVIO DATI AL SERVER TCP-----*/
void SIM_Send_TCP(char* data)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b090      	sub	sp, #64	@ 0x40
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
    char cmd[50];
	uint16_t size = (uint16_t)strlen(data);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7fd ff23 	bl	80001e4 <strlen>
 800239e:	4603      	mov	r3, r0
 80023a0:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    sprintf(cmd, "AT+CIPSEND=%u\r", size);
 80023a2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80023a4:	f107 030c 	add.w	r3, r7, #12
 80023a8:	490c      	ldr	r1, [pc, #48]	@ (80023dc <SIM_Send_TCP+0x4c>)
 80023aa:	4618      	mov	r0, r3
 80023ac:	f014 fab8 	bl	8016920 <siprintf>
    SIM_Send_Command(cmd);
 80023b0:	f107 030c 	add.w	r3, r7, #12
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fd63 	bl	8001e80 <SIM_Send_Command>

    SIM_Wait_Response(">");
 80023ba:	4809      	ldr	r0, [pc, #36]	@ (80023e0 <SIM_Send_TCP+0x50>)
 80023bc:	f000 f8f4 	bl	80025a8 <SIM_Wait_Response>

    HAL_UART_Transmit(SIM_UART, (uint8_t*)data, size, 1000);
 80023c0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80023c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4806      	ldr	r0, [pc, #24]	@ (80023e4 <SIM_Send_TCP+0x54>)
 80023ca:	f012 ff61 	bl	8015290 <HAL_UART_Transmit>
    
    SIM_Wait_Response("SEND OK");
 80023ce:	4806      	ldr	r0, [pc, #24]	@ (80023e8 <SIM_Send_TCP+0x58>)
 80023d0:	f000 f8ea 	bl	80025a8 <SIM_Wait_Response>
}
 80023d4:	bf00      	nop
 80023d6:	3740      	adds	r7, #64	@ 0x40
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	08017e70 	.word	0x08017e70
 80023e0:	08017e6c 	.word	0x08017e6c
 80023e4:	200004bc 	.word	0x200004bc
 80023e8:	08017e80 	.word	0x08017e80

080023ec <SIM_Send_TCP_Chunk_DMA>:

/*-----INVIO DATI AL SERVER TCP CON DMA-----*/
void SIM_Send_TCP_Chunk_DMA(uint16_t size)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b090      	sub	sp, #64	@ 0x40
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	80fb      	strh	r3, [r7, #6]
    char cmd[50];

    sprintf(cmd, "AT+CIPSEND=%u\r", size);
 80023f6:	88fa      	ldrh	r2, [r7, #6]
 80023f8:	f107 030c 	add.w	r3, r7, #12
 80023fc:	4906      	ldr	r1, [pc, #24]	@ (8002418 <SIM_Send_TCP_Chunk_DMA+0x2c>)
 80023fe:	4618      	mov	r0, r3
 8002400:	f014 fa8e 	bl	8016920 <siprintf>
    SIM_Send_Command_DMA(cmd);
 8002404:	f107 030c 	add.w	r3, r7, #12
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fd4f 	bl	8001eac <SIM_Send_Command_DMA>
}
 800240e:	bf00      	nop
 8002410:	3740      	adds	r7, #64	@ 0x40
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	08017e70 	.word	0x08017e70

0800241c <SIM_Send_Infos>:

/*-----INVIO INFORMAZIONI AL SERVER MQTT-----*/
void SIM_Send_Infos(void)
{
 800241c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800241e:	f5ad 7d3f 	sub.w	sp, sp, #764	@ 0x2fc
 8002422:	af10      	add	r7, sp, #64	@ 0x40
	uint16_t len = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	f8a7 32b6 	strh.w	r3, [r7, #694]	@ 0x2b6
	char command[128];
	char infos[512];
	uint16_t new_temp = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	f8a7 32b4 	strh.w	r3, [r7, #692]	@ 0x2b4

	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 8002430:	4953      	ldr	r1, [pc, #332]	@ (8002580 <SIM_Send_Infos+0x164>)
 8002432:	203b      	movs	r0, #59	@ 0x3b
 8002434:	f000 fb88 	bl	8002b48 <BC_MultiRead_Reg>
	INA3221_Read_Measure(&Supply);
 8002438:	4852      	ldr	r0, [pc, #328]	@ (8002584 <SIM_Send_Infos+0x168>)
 800243a:	f7fe fdf5 	bl	8001028 <INA3221_Read_Measure>
	if((new_temp = Read_Temperature()) != 0)
 800243e:	f7fe fd93 	bl	8000f68 <Read_Temperature>
 8002442:	4603      	mov	r3, r0
 8002444:	f8a7 32b4 	strh.w	r3, [r7, #692]	@ 0x2b4
 8002448:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	@ 0x2b4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <SIM_Send_Infos+0x3c>
	{
		Temperature = new_temp;
 8002450:	4a4d      	ldr	r2, [pc, #308]	@ (8002588 <SIM_Send_Infos+0x16c>)
 8002452:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	@ 0x2b4
 8002456:	8013      	strh	r3, [r2, #0]
	}
	uint16_t fw_ver = FW_VERSION;
 8002458:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800245c:	f8a7 32b2 	strh.w	r3, [r7, #690]	@ 0x2b2

	sprintf(infos, "R:%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", config.device_id, fw_ver, sys.onDate.Year, sys.onDate.Month, sys.onDate.Date, sys.onTime.Hours, sys.onTime.Minutes, sys.onTime.Seconds, Vbatt, config.samp_freq, config.buffering_secs, Supply.v1, Supply.v2, Supply.v3, Supply.i1, Supply.i2, Supply.i3, Temperature);
 8002460:	4b4a      	ldr	r3, [pc, #296]	@ (800258c <SIM_Send_Infos+0x170>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	469c      	mov	ip, r3
 8002466:	f8b7 42b2 	ldrh.w	r4, [r7, #690]	@ 0x2b2
 800246a:	4b49      	ldr	r3, [pc, #292]	@ (8002590 <SIM_Send_Infos+0x174>)
 800246c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002470:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002474:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002476:	4b46      	ldr	r3, [pc, #280]	@ (8002590 <SIM_Send_Infos+0x174>)
 8002478:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800247c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002480:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002482:	4b43      	ldr	r3, [pc, #268]	@ (8002590 <SIM_Send_Infos+0x174>)
 8002484:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002488:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800248c:	627b      	str	r3, [r7, #36]	@ 0x24
 800248e:	4b40      	ldr	r3, [pc, #256]	@ (8002590 <SIM_Send_Infos+0x174>)
 8002490:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002494:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002498:	623b      	str	r3, [r7, #32]
 800249a:	4b3d      	ldr	r3, [pc, #244]	@ (8002590 <SIM_Send_Infos+0x174>)
 800249c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002590 <SIM_Send_Infos+0x174>)
 80024a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024ac:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	4b33      	ldr	r3, [pc, #204]	@ (8002580 <SIM_Send_Infos+0x164>)
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	4b34      	ldr	r3, [pc, #208]	@ (800258c <SIM_Send_Infos+0x170>)
 80024ba:	885b      	ldrh	r3, [r3, #2]
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	4b33      	ldr	r3, [pc, #204]	@ (800258c <SIM_Send_Infos+0x170>)
 80024c0:	791b      	ldrb	r3, [r3, #4]
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002584 <SIM_Send_Infos+0x168>)
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	4b2e      	ldr	r3, [pc, #184]	@ (8002584 <SIM_Send_Infos+0x168>)
 80024cc:	885b      	ldrh	r3, [r3, #2]
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002584 <SIM_Send_Infos+0x168>)
 80024d2:	889b      	ldrh	r3, [r3, #4]
 80024d4:	461e      	mov	r6, r3
 80024d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002584 <SIM_Send_Infos+0x168>)
 80024d8:	88db      	ldrh	r3, [r3, #6]
 80024da:	461d      	mov	r5, r3
 80024dc:	4b29      	ldr	r3, [pc, #164]	@ (8002584 <SIM_Send_Infos+0x168>)
 80024de:	891b      	ldrh	r3, [r3, #8]
 80024e0:	4619      	mov	r1, r3
 80024e2:	4b28      	ldr	r3, [pc, #160]	@ (8002584 <SIM_Send_Infos+0x168>)
 80024e4:	895b      	ldrh	r3, [r3, #10]
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b27      	ldr	r3, [pc, #156]	@ (8002588 <SIM_Send_Infos+0x16c>)
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80024f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80024f2:	920e      	str	r2, [sp, #56]	@ 0x38
 80024f4:	910d      	str	r1, [sp, #52]	@ 0x34
 80024f6:	950c      	str	r5, [sp, #48]	@ 0x30
 80024f8:	960b      	str	r6, [sp, #44]	@ 0x2c
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	920a      	str	r2, [sp, #40]	@ 0x28
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	9209      	str	r2, [sp, #36]	@ 0x24
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	9208      	str	r2, [sp, #32]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	9207      	str	r2, [sp, #28]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	9206      	str	r2, [sp, #24]
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	9205      	str	r2, [sp, #20]
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	9204      	str	r2, [sp, #16]
 8002516:	6a3a      	ldr	r2, [r7, #32]
 8002518:	9203      	str	r2, [sp, #12]
 800251a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800251c:	9202      	str	r2, [sp, #8]
 800251e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002520:	9201      	str	r2, [sp, #4]
 8002522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	4623      	mov	r3, r4
 8002528:	4662      	mov	r2, ip
 800252a:	491a      	ldr	r1, [pc, #104]	@ (8002594 <SIM_Send_Infos+0x178>)
 800252c:	f014 f9f8 	bl	8016920 <siprintf>
	len = (uint16_t)strlen(infos);
 8002530:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002534:	4618      	mov	r0, r3
 8002536:	f7fd fe55 	bl	80001e4 <strlen>
 800253a:	4603      	mov	r3, r0
 800253c:	f8a7 32b6 	strh.w	r3, [r7, #694]	@ 0x2b6

	sprintf(command, "AT+CIPSEND=%u\r",len);
 8002540:	f8b7 22b6 	ldrh.w	r2, [r7, #694]	@ 0x2b6
 8002544:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8002548:	4913      	ldr	r1, [pc, #76]	@ (8002598 <SIM_Send_Infos+0x17c>)
 800254a:	4618      	mov	r0, r3
 800254c:	f014 f9e8 	bl	8016920 <siprintf>
	SIM_Send_Command(command);
 8002550:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fc93 	bl	8001e80 <SIM_Send_Command>
	SIM_Wait_Response(">");
 800255a:	4810      	ldr	r0, [pc, #64]	@ (800259c <SIM_Send_Infos+0x180>)
 800255c:	f000 f824 	bl	80025a8 <SIM_Wait_Response>
	HAL_UART_Transmit(SIM_UART, (uint8_t*)infos, len, 100);
 8002560:	f8b7 22b6 	ldrh.w	r2, [r7, #694]	@ 0x2b6
 8002564:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8002568:	2364      	movs	r3, #100	@ 0x64
 800256a:	480d      	ldr	r0, [pc, #52]	@ (80025a0 <SIM_Send_Infos+0x184>)
 800256c:	f012 fe90 	bl	8015290 <HAL_UART_Transmit>
	SIM_Wait_Response("OK");
 8002570:	480c      	ldr	r0, [pc, #48]	@ (80025a4 <SIM_Send_Infos+0x188>)
 8002572:	f000 f819 	bl	80025a8 <SIM_Wait_Response>
}
 8002576:	bf00      	nop
 8002578:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 800257c:	46bd      	mov	sp, r7
 800257e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002580:	200041c2 	.word	0x200041c2
 8002584:	200038e0 	.word	0x200038e0
 8002588:	200041c0 	.word	0x200041c0
 800258c:	20001784 	.word	0x20001784
 8002590:	200005d8 	.word	0x200005d8
 8002594:	08017e88 	.word	0x08017e88
 8002598:	08017e70 	.word	0x08017e70
 800259c:	08017e6c 	.word	0x08017e6c
 80025a0:	200004bc 	.word	0x200004bc
 80025a4:	08017bc8 	.word	0x08017bc8

080025a8 <SIM_Wait_Response>:

/*-----ATTESA RISPOSTA-----*/
int SIM_Wait_Response(const char* expected)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b0c8      	sub	sp, #288	@ 0x120
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80025b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80025b6:	6018      	str	r0, [r3, #0]
    char rx[256];
    memset(rx, 0, sizeof(rx));
 80025b8:	f107 0310 	add.w	r3, r7, #16
 80025bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f014 fa0c 	bl	80169e0 <memset>
    uint16_t timeout = 2000; // 2 secondi
 80025c8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80025cc:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    uint32_t start_time = HAL_GetTick();
 80025d0:	f009 f93e 	bl	800b850 <HAL_GetTick>
 80025d4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while((HAL_GetTick() - start_time) < timeout)
 80025d8:	e02a      	b.n	8002630 <SIM_Wait_Response+0x88>
    {
        uint16_t RxLen = 0;
 80025da:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80025de:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80025e2:	2200      	movs	r2, #0
 80025e4:	801a      	strh	r2, [r3, #0]
        HAL_UARTEx_ReceiveToIdle(SIM_UART, (uint8_t*)rx, sizeof(rx), &RxLen, 500);
 80025e6:	f107 030e 	add.w	r3, r7, #14
 80025ea:	f107 0110 	add.w	r1, r7, #16
 80025ee:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80025f2:	9200      	str	r2, [sp, #0]
 80025f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025f8:	4816      	ldr	r0, [pc, #88]	@ (8002654 <SIM_Wait_Response+0xac>)
 80025fa:	f013 ffb0 	bl	801655e <HAL_UARTEx_ReceiveToIdle>
        
        if(RxLen > 0)
 80025fe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002602:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00e      	beq.n	800262a <SIM_Wait_Response+0x82>
        {
        	if(strstr(rx, expected))
 800260c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002610:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002614:	f107 0210 	add.w	r2, r7, #16
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	4610      	mov	r0, r2
 800261c:	f014 fa1a 	bl	8016a54 <strstr>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <SIM_Wait_Response+0x82>
        	{
        		return 0;
 8002626:	2300      	movs	r3, #0
 8002628:	e00e      	b.n	8002648 <SIM_Wait_Response+0xa0>
        	}
        }
        
        HAL_Delay(10);
 800262a:	200a      	movs	r0, #10
 800262c:	f009 f91c 	bl	800b868 <HAL_Delay>
    while((HAL_GetTick() - start_time) < timeout)
 8002630:	f009 f90e 	bl	800b850 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800263a:	1ad2      	subs	r2, r2, r3
 800263c:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8002640:	429a      	cmp	r2, r3
 8002642:	d3ca      	bcc.n	80025da <SIM_Wait_Response+0x32>
    }
	return -1;
 8002644:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002648:	4618      	mov	r0, r3
 800264a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	200004bc 	.word	0x200004bc

08002658 <SIM_Check_Connection>:

/*-----CONTROLLA STATO CONNESSIONE-----*/
void SIM_Check_Connection(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 800265e:	af00      	add	r7, sp, #0
	char command_sim[256];
	char response_sim[256];
	uint32_t start_time;
    const uint32_t CEREG_TIMEOUT = 180000;  
 8002660:	4b61      	ldr	r3, [pc, #388]	@ (80027e8 <SIM_Check_Connection+0x190>)
 8002662:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    const uint32_t TCP_TIMEOUT = 120000;     
 8002666:	4b61      	ldr	r3, [pc, #388]	@ (80027ec <SIM_Check_Connection+0x194>)
 8002668:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
    const uint32_t MAX_TCP_ATTEMPTS = 5;    
 800266c:	2305      	movs	r3, #5
 800266e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214

	int registered = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
	start_time = HAL_GetTick();
 8002678:	f009 f8ea 	bl	800b850 <HAL_GetTick>
 800267c:	f8c7 0210 	str.w	r0, [r7, #528]	@ 0x210
    while(!registered && (HAL_GetTick() - start_time) < CEREG_TIMEOUT)
 8002680:	e042      	b.n	8002708 <SIM_Check_Connection+0xb0>
    {
        SIM_Send_Command("AT+CEREG?\r");
 8002682:	485b      	ldr	r0, [pc, #364]	@ (80027f0 <SIM_Check_Connection+0x198>)
 8002684:	f7ff fbfc 	bl	8001e80 <SIM_Send_Command>
        SIM_Receive_Response(response_sim, 5000);
 8002688:	f107 030c 	add.w	r3, r7, #12
 800268c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fc21 	bl	8001ed8 <SIM_Receive_Response>
        int n = 0, stat_value = 0;
 8002696:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800269a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80026a6:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
        char* cereg_ptr = strstr(response_sim, "+CEREG:");
 80026ae:	f107 030c 	add.w	r3, r7, #12
 80026b2:	4950      	ldr	r1, [pc, #320]	@ (80027f4 <SIM_Check_Connection+0x19c>)
 80026b4:	4618      	mov	r0, r3
 80026b6:	f014 f9cd 	bl	8016a54 <strstr>
 80026ba:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
        if(cereg_ptr && sscanf(cereg_ptr, "+CEREG: %d,%d", &n, &stat_value) >= 2 && (stat_value == 1 || stat_value == 5))
 80026be:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d01c      	beq.n	8002700 <SIM_Check_Connection+0xa8>
 80026c6:	1d3b      	adds	r3, r7, #4
 80026c8:	f107 0208 	add.w	r2, r7, #8
 80026cc:	494a      	ldr	r1, [pc, #296]	@ (80027f8 <SIM_Check_Connection+0x1a0>)
 80026ce:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 80026d2:	f014 f947 	bl	8016964 <siscanf>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b01      	cmp	r3, #1
 80026da:	dd11      	ble.n	8002700 <SIM_Check_Connection+0xa8>
 80026dc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80026e0:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d006      	beq.n	80026f8 <SIM_Check_Connection+0xa0>
 80026ea:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80026ee:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b05      	cmp	r3, #5
 80026f6:	d103      	bne.n	8002700 <SIM_Check_Connection+0xa8>
        {
            registered = 1;
 80026f8:	2301      	movs	r3, #1
 80026fa:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 80026fe:	e003      	b.n	8002708 <SIM_Check_Connection+0xb0>
        }
        else
        {
            HAL_Delay(2000);
 8002700:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002704:	f009 f8b0 	bl	800b868 <HAL_Delay>
    while(!registered && (HAL_GetTick() - start_time) < CEREG_TIMEOUT)
 8002708:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 800270c:	2b00      	cmp	r3, #0
 800270e:	d109      	bne.n	8002724 <SIM_Check_Connection+0xcc>
 8002710:	f009 f89e 	bl	800b850 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8002720:	429a      	cmp	r2, r3
 8002722:	d8ae      	bhi.n	8002682 <SIM_Check_Connection+0x2a>
        }
    }

	if(!registered) 
 8002724:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <SIM_Check_Connection+0xd8>
	{
        HAL_NVIC_SystemReset(); 
 800272c:	f00a fd75 	bl	800d21a <HAL_NVIC_SystemReset>
    }

	SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        
 8002730:	4832      	ldr	r0, [pc, #200]	@ (80027fc <SIM_Check_Connection+0x1a4>)
 8002732:	f7ff fba5 	bl	8001e80 <SIM_Send_Command>
	SIM_Receive_Response(response_sim, 5000);
 8002736:	f107 030c 	add.w	r3, r7, #12
 800273a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fbca 	bl	8001ed8 <SIM_Receive_Response>
	start_time = HAL_GetTick();
 8002744:	f009 f884 	bl	800b850 <HAL_GetTick>
 8002748:	f8c7 0210 	str.w	r0, [r7, #528]	@ 0x210
    uint32_t tcp_attempts = 0;
 800274c:	2300      	movs	r3, #0
 800274e:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
	while(!SIM_Check_TCP_State(response_sim) && (HAL_GetTick() - start_time) < TCP_TIMEOUT && tcp_attempts < MAX_TCP_ATTEMPTS)
 8002752:	e021      	b.n	8002798 <SIM_Check_Connection+0x140>
	{
		sprintf(command_sim, "AT+CIPSTART=\"TCP\",\"%s\",%s\r", sys.TCP.IP_address, sys.TCP.Port);       
 8002754:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8002758:	4b29      	ldr	r3, [pc, #164]	@ (8002800 <SIM_Check_Connection+0x1a8>)
 800275a:	4a2a      	ldr	r2, [pc, #168]	@ (8002804 <SIM_Check_Connection+0x1ac>)
 800275c:	492a      	ldr	r1, [pc, #168]	@ (8002808 <SIM_Check_Connection+0x1b0>)
 800275e:	f014 f8df 	bl	8016920 <siprintf>
		SIM_Send_Command(command_sim);
 8002762:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fb8a 	bl	8001e80 <SIM_Send_Command>
		SIM_Wait_Response("CONNECT OK");
 800276c:	4827      	ldr	r0, [pc, #156]	@ (800280c <SIM_Check_Connection+0x1b4>)
 800276e:	f7ff ff1b 	bl	80025a8 <SIM_Wait_Response>
		SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        
 8002772:	4822      	ldr	r0, [pc, #136]	@ (80027fc <SIM_Check_Connection+0x1a4>)
 8002774:	f7ff fb84 	bl	8001e80 <SIM_Send_Command>
		SIM_Receive_Response(response_sim, 5000);
 8002778:	f107 030c 	add.w	r3, r7, #12
 800277c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fba9 	bl	8001ed8 <SIM_Receive_Response>
		tcp_attempts++;
 8002786:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 800278a:	3301      	adds	r3, #1
 800278c:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
		HAL_Delay(2000);
 8002790:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002794:	f009 f868 	bl	800b868 <HAL_Delay>
	while(!SIM_Check_TCP_State(response_sim) && (HAL_GetTick() - start_time) < TCP_TIMEOUT && tcp_attempts < MAX_TCP_ATTEMPTS)
 8002798:	f107 030c 	add.w	r3, r7, #12
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fbf9 	bl	8001f94 <SIM_Check_TCP_State>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10f      	bne.n	80027c8 <SIM_Check_Connection+0x170>
 80027a8:	f009 f852 	bl	800b850 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d905      	bls.n	80027c8 <SIM_Check_Connection+0x170>
 80027bc:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 80027c0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d3c5      	bcc.n	8002754 <SIM_Check_Connection+0xfc>
	}

	if(!SIM_Check_TCP_State(response_sim)) 
 80027c8:	f107 030c 	add.w	r3, r7, #12
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fbe1 	bl	8001f94 <SIM_Check_TCP_State>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <SIM_Check_Connection+0x184>
	{
        HAL_NVIC_SystemReset();
 80027d8:	f00a fd1f 	bl	800d21a <HAL_NVIC_SystemReset>
    }
}
 80027dc:	bf00      	nop
 80027de:	f507 770a 	add.w	r7, r7, #552	@ 0x228
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	0002bf20 	.word	0x0002bf20
 80027ec:	0001d4c0 	.word	0x0001d4c0
 80027f0:	08017c80 	.word	0x08017c80
 80027f4:	08017c8c 	.word	0x08017c8c
 80027f8:	08017c94 	.word	0x08017c94
 80027fc:	08017db0 	.word	0x08017db0
 8002800:	2000171c 	.word	0x2000171c
 8002804:	200016b8 	.word	0x200016b8
 8002808:	08017d50 	.word	0x08017d50
 800280c:	08017d6c 	.word	0x08017d6c

08002810 <Base64_Decode>:
#include "global_variables.h"


/*-----DECODIFICA BASE64-----*/
size_t Base64_Decode(const char *in, uint8_t *out, size_t out_len)
{
 8002810:	b480      	push	{r7}
 8002812:	b08b      	sub	sp, #44	@ 0x2c
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
    size_t i = 0, j = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002820:	2300      	movs	r3, #0
 8002822:	623b      	str	r3, [r7, #32]
    int v = 0, val = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	61fb      	str	r3, [r7, #28]
 8002828:	2300      	movs	r3, #0
 800282a:	61bb      	str	r3, [r7, #24]
    while (in[i] && in[i] != '\n' && in[i] != '\r')
 800282c:	e02b      	b.n	8002886 <Base64_Decode+0x76>
    {
        unsigned char c = base64_table[(unsigned char)in[i++]];
 800282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	627a      	str	r2, [r7, #36]	@ 0x24
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4413      	add	r3, r2
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	4b1e      	ldr	r3, [pc, #120]	@ (80028b8 <Base64_Decode+0xa8>)
 800283e:	5c9b      	ldrb	r3, [r3, r2]
 8002840:	75fb      	strb	r3, [r7, #23]
        if (c == 0x80) continue; // carattere non valido
 8002842:	7dfb      	ldrb	r3, [r7, #23]
 8002844:	2b80      	cmp	r3, #128	@ 0x80
 8002846:	d01d      	beq.n	8002884 <Base64_Decode+0x74>
        val = (val << 6) | c;
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	019a      	lsls	r2, r3, #6
 800284c:	7dfb      	ldrb	r3, [r7, #23]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        v += 6;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3306      	adds	r3, #6
 8002856:	61fb      	str	r3, [r7, #28]
        if (v >= 8)
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	2b07      	cmp	r3, #7
 800285c:	dd13      	ble.n	8002886 <Base64_Decode+0x76>
        {
            v -= 8;
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3b08      	subs	r3, #8
 8002862:	61fb      	str	r3, [r7, #28]
            if (j < out_len) out[j++] = (val >> v) & 0xFF;
 8002864:	6a3a      	ldr	r2, [r7, #32]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	429a      	cmp	r2, r3
 800286a:	d20c      	bcs.n	8002886 <Base64_Decode+0x76>
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	fa42 f103 	asr.w	r1, r2, r3
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	1c5a      	adds	r2, r3, #1
 8002878:	623a      	str	r2, [r7, #32]
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	4413      	add	r3, r2
 800287e:	b2ca      	uxtb	r2, r1
 8002880:	701a      	strb	r2, [r3, #0]
 8002882:	e000      	b.n	8002886 <Base64_Decode+0x76>
        if (c == 0x80) continue; // carattere non valido
 8002884:	bf00      	nop
    while (in[i] && in[i] != '\n' && in[i] != '\r')
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288a:	4413      	add	r3, r2
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00b      	beq.n	80028aa <Base64_Decode+0x9a>
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002896:	4413      	add	r3, r2
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b0a      	cmp	r3, #10
 800289c:	d005      	beq.n	80028aa <Base64_Decode+0x9a>
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a2:	4413      	add	r3, r2
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b0d      	cmp	r3, #13
 80028a8:	d1c1      	bne.n	800282e <Base64_Decode+0x1e>
        }
    }
    return j; // numero di byte decodificati
 80028aa:	6a3b      	ldr	r3, [r7, #32]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	372c      	adds	r7, #44	@ 0x2c
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	0801829c 	.word	0x0801829c

080028bc <Base64_Encode>:

/*-----CODIFICA BASE64-----*/
size_t Base64_Encode(const uint8_t *in, size_t in_len, char *out, size_t out_size)
{
 80028bc:	b480      	push	{r7}
 80028be:	b08b      	sub	sp, #44	@ 0x2c
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	603b      	str	r3, [r7, #0]
    size_t i = 0, j = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ce:	2300      	movs	r3, #0
 80028d0:	623b      	str	r3, [r7, #32]
    while (i < in_len && (j + 4) <= out_size)
 80028d2:	e06c      	b.n	80029ae <Base64_Encode+0xf2>
    {
        uint32_t octet_a = i < in_len ? in[i++] : 0;
 80028d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d206      	bcs.n	80028ea <Base64_Encode+0x2e>
 80028dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4413      	add	r3, r2
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	e000      	b.n	80028ec <Base64_Encode+0x30>
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
        uint32_t octet_b = i < in_len ? in[i++] : 0;
 80028ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d206      	bcs.n	8002904 <Base64_Encode+0x48>
 80028f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	627a      	str	r2, [r7, #36]	@ 0x24
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4413      	add	r3, r2
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	e000      	b.n	8002906 <Base64_Encode+0x4a>
 8002904:	2300      	movs	r3, #0
 8002906:	61bb      	str	r3, [r7, #24]
        uint32_t octet_c = i < in_len ? in[i++] : 0;
 8002908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	429a      	cmp	r2, r3
 800290e:	d206      	bcs.n	800291e <Base64_Encode+0x62>
 8002910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	627a      	str	r2, [r7, #36]	@ 0x24
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4413      	add	r3, r2
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	e000      	b.n	8002920 <Base64_Encode+0x64>
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
        uint32_t triple = (octet_a << 16) | (octet_b << 8) | octet_c;
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	041a      	lsls	r2, r3, #16
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	4313      	orrs	r3, r2
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	4313      	orrs	r3, r2
 8002930:	613b      	str	r3, [r7, #16]

        out[j++] = base64_enc_table[(triple >> 18) & 0x3F];
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	0c9b      	lsrs	r3, r3, #18
 8002936:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	1c59      	adds	r1, r3, #1
 800293e:	6239      	str	r1, [r7, #32]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	440b      	add	r3, r1
 8002944:	4926      	ldr	r1, [pc, #152]	@ (80029e0 <Base64_Encode+0x124>)
 8002946:	5c8a      	ldrb	r2, [r1, r2]
 8002948:	701a      	strb	r2, [r3, #0]
        out[j++] = base64_enc_table[(triple >> 12) & 0x3F];
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	0b1b      	lsrs	r3, r3, #12
 800294e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	1c59      	adds	r1, r3, #1
 8002956:	6239      	str	r1, [r7, #32]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	440b      	add	r3, r1
 800295c:	4920      	ldr	r1, [pc, #128]	@ (80029e0 <Base64_Encode+0x124>)
 800295e:	5c8a      	ldrb	r2, [r1, r2]
 8002960:	701a      	strb	r2, [r3, #0]
        out[j++] = (i > in_len + 1) ? '=' : base64_enc_table[(triple >> 6) & 0x3F];
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	3301      	adds	r3, #1
 8002966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002968:	429a      	cmp	r2, r3
 800296a:	d806      	bhi.n	800297a <Base64_Encode+0xbe>
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	099b      	lsrs	r3, r3, #6
 8002970:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002974:	4a1a      	ldr	r2, [pc, #104]	@ (80029e0 <Base64_Encode+0x124>)
 8002976:	5cd1      	ldrb	r1, [r2, r3]
 8002978:	e000      	b.n	800297c <Base64_Encode+0xc0>
 800297a:	213d      	movs	r1, #61	@ 0x3d
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	623a      	str	r2, [r7, #32]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	4413      	add	r3, r2
 8002986:	460a      	mov	r2, r1
 8002988:	701a      	strb	r2, [r3, #0]
        out[j++] = (i > in_len) ? '=' : base64_enc_table[triple & 0x3F];
 800298a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	429a      	cmp	r2, r3
 8002990:	d805      	bhi.n	800299e <Base64_Encode+0xe2>
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002998:	4a11      	ldr	r2, [pc, #68]	@ (80029e0 <Base64_Encode+0x124>)
 800299a:	5cd1      	ldrb	r1, [r2, r3]
 800299c:	e000      	b.n	80029a0 <Base64_Encode+0xe4>
 800299e:	213d      	movs	r1, #61	@ 0x3d
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	623a      	str	r2, [r7, #32]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	4413      	add	r3, r2
 80029aa:	460a      	mov	r2, r1
 80029ac:	701a      	strb	r2, [r3, #0]
    while (i < in_len && (j + 4) <= out_size)
 80029ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d204      	bcs.n	80029c0 <Base64_Encode+0x104>
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	3304      	adds	r3, #4
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d289      	bcs.n	80028d4 <Base64_Encode+0x18>
    }
    if (j < out_size) out[j] = '\0'; // null-terminate se vuoi una stringa
 80029c0:	6a3a      	ldr	r2, [r7, #32]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d204      	bcs.n	80029d2 <Base64_Encode+0x116>
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	4413      	add	r3, r2
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]
    return j; // lunghezza della stringa base64 prodotta (senza null)
 80029d2:	6a3b      	ldr	r3, [r7, #32]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	372c      	adds	r7, #44	@ 0x2c
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	0801839c 	.word	0x0801839c

080029e4 <BC_Init>:
#include "global_variables.h"


/*------INIZIALIZZAZIONE BATTERY CHARGER------*/
void BC_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
	BC_Write_Reg(REG00_MINIMAL_SYSTEM_VOLTAGE, 0x1A);           //Tensione minima di uscita con 3 celle = 9V   <----- Senza Batteria il sistema fornisce questa tensione
 80029e8:	211a      	movs	r1, #26
 80029ea:	2000      	movs	r0, #0
 80029ec:	f000 f836 	bl	8002a5c <BC_Write_Reg>
	BC_MultiWrite_Reg(REG01_CHARGE_VOLTAGE_LIMIT, 0x04EC);      //Limite tensione di carica con 3 celle = 12.6V
 80029f0:	f240 41ec 	movw	r1, #1260	@ 0x4ec
 80029f4:	2001      	movs	r0, #1
 80029f6:	f000 f87d 	bl	8002af4 <BC_MultiWrite_Reg>
	BC_MultiWrite_Reg(REG03_CHARGE_CURRENT_LIMIT, 0x0064);      //Limite corrente di carica con 3 celle = 1A
 80029fa:	2164      	movs	r1, #100	@ 0x64
 80029fc:	2003      	movs	r0, #3
 80029fe:	f000 f879 	bl	8002af4 <BC_MultiWrite_Reg>
	BC_Write_Reg(REG10_CHARGER_CONTROL_1, 0x85);                //Tensione di OVP in ingresso = 26V
 8002a02:	2185      	movs	r1, #133	@ 0x85
 8002a04:	2010      	movs	r0, #16
 8002a06:	f000 f829 	bl	8002a5c <BC_Write_Reg>
	BC_Write_Reg(REG14_CHARGER_CONTROL_5, 0x96);                //Informazione sulla presenza dello Ship-FET
 8002a0a:	2196      	movs	r1, #150	@ 0x96
 8002a0c:	2014      	movs	r0, #20
 8002a0e:	f000 f825 	bl	8002a5c <BC_Write_Reg>
	BC_Write_Reg(REG15_MPPT_CONTROL, 0xAB);                     //MPPT attivato, tensione di MPP = 0.875*Vin, misura di 300ms ogni 2 minuti della Vin
 8002a12:	21ab      	movs	r1, #171	@ 0xab
 8002a14:	2015      	movs	r0, #21
 8002a16:	f000 f821 	bl	8002a5c <BC_Write_Reg>
	BC_Write_Reg(REG28_CHARGER_MASK_0, 0xE1);                   //Interrupt attivati: Poor source, Power good, VAC2 present, VAC1 present
 8002a1a:	21e1      	movs	r1, #225	@ 0xe1
 8002a1c:	2028      	movs	r0, #40	@ 0x28
 8002a1e:	f000 f81d 	bl	8002a5c <BC_Write_Reg>
	BC_Write_Reg(REG29_CHARGER_MASK_1, 0xD7);                   //Interrupt attivati: nessuno
 8002a22:	21d7      	movs	r1, #215	@ 0xd7
 8002a24:	2029      	movs	r0, #41	@ 0x29
 8002a26:	f000 f819 	bl	8002a5c <BC_Write_Reg>
	BC_Write_Reg(REG2A_CHARGER_MASK_2, 0x7F);                   //Interrupt attivati: nessuno
 8002a2a:	217f      	movs	r1, #127	@ 0x7f
 8002a2c:	202a      	movs	r0, #42	@ 0x2a
 8002a2e:	f000 f815 	bl	8002a5c <BC_Write_Reg>
	BC_Write_Reg(REG2B_CHARGER_MASK_3, 0x1F);                   //Interrupt attivati: nessuno
 8002a32:	211f      	movs	r1, #31
 8002a34:	202b      	movs	r0, #43	@ 0x2b
 8002a36:	f000 f811 	bl	8002a5c <BC_Write_Reg>
	BC_Write_Reg(REG2C_FAULT_MASK_0, 0xFC);                     //Interrupt attivati: VAC2 over-voltage, VAC1 over-voltage
 8002a3a:	21fc      	movs	r1, #252	@ 0xfc
 8002a3c:	202c      	movs	r0, #44	@ 0x2c
 8002a3e:	f000 f80d 	bl	8002a5c <BC_Write_Reg>
	BC_Write_Reg(REG2D_FAULT_MASK_1, 0xF4);                     //Interrupt attivati: nessuno
 8002a42:	21f4      	movs	r1, #244	@ 0xf4
 8002a44:	202d      	movs	r0, #45	@ 0x2d
 8002a46:	f000 f809 	bl	8002a5c <BC_Write_Reg>

	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 8002a4a:	4903      	ldr	r1, [pc, #12]	@ (8002a58 <BC_Init+0x74>)
 8002a4c:	203b      	movs	r0, #59	@ 0x3b
 8002a4e:	f000 f87b 	bl	8002b48 <BC_MultiRead_Reg>
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	200041c2 	.word	0x200041c2

08002a5c <BC_Write_Reg>:

/*------SCRITTURA REGISTRO 8 BIT------*/
int BC_Write_Reg(uint8_t reg, uint8_t wdata)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	4603      	mov	r3, r0
 8002a64:	460a      	mov	r2, r1
 8002a66:	71fb      	strb	r3, [r7, #7]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	71bb      	strb	r3, [r7, #6]
	int result = -1;
 8002a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a70:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[2];
	toSend[0] = reg;
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	723b      	strb	r3, [r7, #8]
	toSend[1] = wdata;
 8002a76:	79bb      	ldrb	r3, [r7, #6]
 8002a78:	727b      	strb	r3, [r7, #9]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 2, 100) == HAL_OK)
 8002a7a:	f107 0208 	add.w	r2, r7, #8
 8002a7e:	2364      	movs	r3, #100	@ 0x64
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	2302      	movs	r3, #2
 8002a84:	21d6      	movs	r1, #214	@ 0xd6
 8002a86:	4806      	ldr	r0, [pc, #24]	@ (8002aa0 <BC_Write_Reg+0x44>)
 8002a88:	f00c f98c 	bl	800eda4 <HAL_I2C_Master_Transmit>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <BC_Write_Reg+0x3a>
	{
		result = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8002a96:	68fb      	ldr	r3, [r7, #12]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	20000180 	.word	0x20000180

08002aa4 <BC_Read_Reg>:

/*------LETTURA REGISTRO 8 BIT------*/
int BC_Read_Reg(uint8_t reg, uint8_t *rdata)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	4603      	mov	r3, r0
 8002aac:	6039      	str	r1, [r7, #0]
 8002aae:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8002ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab4:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8002ab6:	1dfa      	adds	r2, r7, #7
 8002ab8:	2364      	movs	r3, #100	@ 0x64
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	2301      	movs	r3, #1
 8002abe:	21d6      	movs	r1, #214	@ 0xd6
 8002ac0:	480b      	ldr	r0, [pc, #44]	@ (8002af0 <BC_Read_Reg+0x4c>)
 8002ac2:	f00c f96f 	bl	800eda4 <HAL_I2C_Master_Transmit>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10c      	bne.n	8002ae6 <BC_Read_Reg+0x42>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, rdata, 1, 100) == HAL_OK)
 8002acc:	2364      	movs	r3, #100	@ 0x64
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	21d6      	movs	r1, #214	@ 0xd6
 8002ad6:	4806      	ldr	r0, [pc, #24]	@ (8002af0 <BC_Read_Reg+0x4c>)
 8002ad8:	f00c fa7c 	bl	800efd4 <HAL_I2C_Master_Receive>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <BC_Read_Reg+0x42>
		{
			result = 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
		}
	}

	return result;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000180 	.word	0x20000180

08002af4 <BC_MultiWrite_Reg>:

/*------SCRITTURA REGISTRO 16 BIT------*/
int BC_MultiWrite_Reg(uint8_t reg, uint16_t wdata)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	4603      	mov	r3, r0
 8002afc:	460a      	mov	r2, r1
 8002afe:	71fb      	strb	r3, [r7, #7]
 8002b00:	4613      	mov	r3, r2
 8002b02:	80bb      	strh	r3, [r7, #4]
	int result = -1;
 8002b04:	f04f 33ff 	mov.w	r3, #4294967295
 8002b08:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[3];
	toSend[0] = reg;
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	723b      	strb	r3, [r7, #8]
	toSend[1] = (wdata & 0xFF00) >> 8;
 8002b0e:	88bb      	ldrh	r3, [r7, #4]
 8002b10:	0a1b      	lsrs	r3, r3, #8
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	727b      	strb	r3, [r7, #9]
	toSend[2] = wdata & 0x00FF;
 8002b18:	88bb      	ldrh	r3, [r7, #4]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 3, 100) == HAL_OK)
 8002b1e:	f107 0208 	add.w	r2, r7, #8
 8002b22:	2364      	movs	r3, #100	@ 0x64
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	2303      	movs	r3, #3
 8002b28:	21d6      	movs	r1, #214	@ 0xd6
 8002b2a:	4806      	ldr	r0, [pc, #24]	@ (8002b44 <BC_MultiWrite_Reg+0x50>)
 8002b2c:	f00c f93a 	bl	800eda4 <HAL_I2C_Master_Transmit>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <BC_MultiWrite_Reg+0x46>
	{
		result = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000180 	.word	0x20000180

08002b48 <BC_MultiRead_Reg>:

/*------LETTURA REGISTRO 16 BIT------*/
int BC_MultiRead_Reg(uint8_t reg, uint16_t *rdata)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	4603      	mov	r3, r0
 8002b50:	6039      	str	r1, [r7, #0]
 8002b52:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8002b54:	f04f 33ff 	mov.w	r3, #4294967295
 8002b58:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8002b5e:	1dfa      	adds	r2, r7, #7
 8002b60:	2364      	movs	r3, #100	@ 0x64
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	2301      	movs	r3, #1
 8002b66:	21d6      	movs	r1, #214	@ 0xd6
 8002b68:	4811      	ldr	r0, [pc, #68]	@ (8002bb0 <BC_MultiRead_Reg+0x68>)
 8002b6a:	f00c f91b 	bl	800eda4 <HAL_I2C_Master_Transmit>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d118      	bne.n	8002ba6 <BC_MultiRead_Reg+0x5e>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, data, 2, 100) == HAL_OK)
 8002b74:	f107 0208 	add.w	r2, r7, #8
 8002b78:	2364      	movs	r3, #100	@ 0x64
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	21d6      	movs	r1, #214	@ 0xd6
 8002b80:	480b      	ldr	r0, [pc, #44]	@ (8002bb0 <BC_MultiRead_Reg+0x68>)
 8002b82:	f00c fa27 	bl	800efd4 <HAL_I2C_Master_Receive>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10c      	bne.n	8002ba6 <BC_MultiRead_Reg+0x5e>
		{
			result = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 8002b90:	7a3b      	ldrb	r3, [r7, #8]
 8002b92:	b21b      	sxth	r3, r3
 8002b94:	021b      	lsls	r3, r3, #8
 8002b96:	b21a      	sxth	r2, r3
 8002b98:	7a7b      	ldrb	r3, [r7, #9]
 8002b9a:	b21b      	sxth	r3, r3
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	b21b      	sxth	r3, r3
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000180 	.word	0x20000180

08002bb4 <BC_Read_Flags>:

/*------LETTURA FLAGS DI INTERRUZIONE------*/
int BC_Read_Flags(uint64_t *flags)
{
 8002bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bb8:	b09b      	sub	sp, #108	@ 0x6c
 8002bba:	af02      	add	r7, sp, #8
 8002bbc:	64f8      	str	r0, [r7, #76]	@ 0x4c
	int result = -1;
 8002bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint8_t data[6] = {0};
 8002bc4:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002bc8:	2300      	movs	r3, #0
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	8093      	strh	r3, [r2, #4]
	uint8_t reg = REG22_CHARGER_FLAG_0;
 8002bce:	2322      	movs	r3, #34	@ 0x22
 8002bd0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8002bd4:	f107 0253 	add.w	r2, r7, #83	@ 0x53
 8002bd8:	2364      	movs	r3, #100	@ 0x64
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	2301      	movs	r3, #1
 8002bde:	21d6      	movs	r1, #214	@ 0xd6
 8002be0:	484a      	ldr	r0, [pc, #296]	@ (8002d0c <BC_Read_Flags+0x158>)
 8002be2:	f00c f8df 	bl	800eda4 <HAL_I2C_Master_Transmit>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f040 8089 	bne.w	8002d00 <BC_Read_Flags+0x14c>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1 , (uint8_t *)data, 6, 100) == HAL_OK)
 8002bee:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002bf2:	2364      	movs	r3, #100	@ 0x64
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	2306      	movs	r3, #6
 8002bf8:	21d6      	movs	r1, #214	@ 0xd6
 8002bfa:	4844      	ldr	r0, [pc, #272]	@ (8002d0c <BC_Read_Flags+0x158>)
 8002bfc:	f00c f9ea 	bl	800efd4 <HAL_I2C_Master_Receive>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d17c      	bne.n	8002d00 <BC_Read_Flags+0x14c>
		{
			result = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	65fb      	str	r3, [r7, #92]	@ 0x5c
			*flags = ((uint64_t)data[0] << 40) | ((uint64_t)data[1] << 32) | ((uint64_t)data[2] << 24) | ((uint64_t)data[3] << 16) | ((uint64_t)data[4] << 8) | (uint64_t)data[5];
 8002c0a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2200      	movs	r2, #0
 8002c12:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c14:	647a      	str	r2, [r7, #68]	@ 0x44
 8002c16:	f04f 0000 	mov.w	r0, #0
 8002c1a:	f04f 0100 	mov.w	r1, #0
 8002c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c20:	0219      	lsls	r1, r3, #8
 8002c22:	2000      	movs	r0, #0
 8002c24:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c2e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8002c3a:	0033      	movs	r3, r6
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	ea40 0802 	orr.w	r8, r0, r2
 8002c42:	ea41 0903 	orr.w	r9, r1, r3
 8002c46:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c50:	637a      	str	r2, [r7, #52]	@ 0x34
 8002c52:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8002c56:	460b      	mov	r3, r1
 8002c58:	0a1d      	lsrs	r5, r3, #8
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	061c      	lsls	r4, r3, #24
 8002c5e:	ea48 0304 	orr.w	r3, r8, r4
 8002c62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c64:	ea49 0305 	orr.w	r3, r9, r5
 8002c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c6a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2200      	movs	r2, #0
 8002c72:	623b      	str	r3, [r7, #32]
 8002c74:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c82:	4629      	mov	r1, r5
 8002c84:	040b      	lsls	r3, r1, #16
 8002c86:	4621      	mov	r1, r4
 8002c88:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8002c8c:	4621      	mov	r1, r4
 8002c8e:	040a      	lsls	r2, r1, #16
 8002c90:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002c94:	4621      	mov	r1, r4
 8002c96:	4311      	orrs	r1, r2
 8002c98:	61b9      	str	r1, [r7, #24]
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	4319      	orrs	r1, r3
 8002c9e:	61f9      	str	r1, [r7, #28]
 8002ca0:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	617a      	str	r2, [r7, #20]
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002cb8:	4629      	mov	r1, r5
 8002cba:	020b      	lsls	r3, r1, #8
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8002cc2:	4621      	mov	r1, r4
 8002cc4:	020a      	lsls	r2, r1, #8
 8002cc6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002cca:	4621      	mov	r1, r4
 8002ccc:	ea41 0a02 	orr.w	sl, r1, r2
 8002cd0:	4629      	mov	r1, r5
 8002cd2:	ea41 0b03 	orr.w	fp, r1, r3
 8002cd6:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2200      	movs	r2, #0
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	60fa      	str	r2, [r7, #12]
 8002ce2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	ea4a 0303 	orr.w	r3, sl, r3
 8002cec:	603b      	str	r3, [r7, #0]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	ea4b 0303 	orr.w	r3, fp, r3
 8002cf4:	607b      	str	r3, [r7, #4]
 8002cf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cf8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002cfc:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}

	return result;
 8002d00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3764      	adds	r7, #100	@ 0x64
 8002d06:	46bd      	mov	sp, r7
 8002d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d0c:	20000180 	.word	0x20000180

08002d10 <BC_Manage_Interrupts>:

/*------GESTIONE DELLE INTERRUZIONI------*/
void BC_Manage_Interrupts(uint64_t flags)
{
 8002d10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t status = 0;
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	73f9      	strb	r1, [r7, #15]

	if((flags & POOR_SOURCE_MASK) != 0)   //INGRESSO NON BUONO
 8002d20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f401 5380 	and.w	r3, r1, #4096	@ 0x1000
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	d00c      	beq.n	8002d48 <BC_Manage_Interrupts+0x38>
	{
		// ...gestione evento...
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 8002d2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	0a0a      	lsrs	r2, r1, #8
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	b2d3      	uxtb	r3, r2
 8002d40:	4619      	mov	r1, r3
 8002d42:	2022      	movs	r0, #34	@ 0x22
 8002d44:	f7ff fe8a 	bl	8002a5c <BC_Write_Reg>
	}

	if((flags & VAC2_CHANGE_MASK) != 0)  //PANNELLO INSERITO O RIMOSSO
 8002d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d4c:	f04f 0800 	mov.w	r8, #0
 8002d50:	f403 6980 	and.w	r9, r3, #1024	@ 0x400
 8002d54:	ea58 0309 	orrs.w	r3, r8, r9
 8002d58:	d020      	beq.n	8002d9c <BC_Manage_Interrupts+0x8c>
	{
		BC_Read_Reg(REG1B_CHARGER_STATUS_0, &status);
 8002d5a:	f107 030f 	add.w	r3, r7, #15
 8002d5e:	4619      	mov	r1, r3
 8002d60:	201b      	movs	r0, #27
 8002d62:	f7ff fe9f 	bl	8002aa4 <BC_Read_Reg>
		if((status & VAC2_PRESENT_MASK) != 0)
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d004      	beq.n	8002d7a <BC_Manage_Interrupts+0x6a>
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x80);                //Usa Pannello
 8002d70:	2180      	movs	r1, #128	@ 0x80
 8002d72:	2013      	movs	r0, #19
 8002d74:	f7ff fe72 	bl	8002a5c <BC_Write_Reg>
 8002d78:	e003      	b.n	8002d82 <BC_Manage_Interrupts+0x72>
		}
		else
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x40);                //Usa Turbina
 8002d7a:	2140      	movs	r1, #64	@ 0x40
 8002d7c:	2013      	movs	r0, #19
 8002d7e:	f7ff fe6d 	bl	8002a5c <BC_Write_Reg>
		}
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 8002d82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	0a0a      	lsrs	r2, r1, #8
 8002d90:	2300      	movs	r3, #0
 8002d92:	b2d3      	uxtb	r3, r2
 8002d94:	4619      	mov	r1, r3
 8002d96:	2022      	movs	r0, #34	@ 0x22
 8002d98:	f7ff fe60 	bl	8002a5c <BC_Write_Reg>
	}

	if((flags & VAC1_CHANGE_MASK) != 0)  //TURBINA INSERITA O RIMOSSA
 8002d9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002da0:	2400      	movs	r4, #0
 8002da2:	f403 7500 	and.w	r5, r3, #512	@ 0x200
 8002da6:	ea54 0305 	orrs.w	r3, r4, r5
 8002daa:	d00c      	beq.n	8002dc6 <BC_Manage_Interrupts+0xb6>
	{
		// ...gestione evento...
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 8002dac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	0a0a      	lsrs	r2, r1, #8
 8002dba:	2300      	movs	r3, #0
 8002dbc:	b2d3      	uxtb	r3, r2
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	2022      	movs	r0, #34	@ 0x22
 8002dc2:	f7ff fe4b 	bl	8002a5c <BC_Write_Reg>
	}

	flags = 0;
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	e9c7 2300 	strd	r2, r3, [r7]
}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002ddc <HAL_UARTEx_RxEventCallback>:
	}
}

/* ------CALLBACK UART RX IDLE------*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	807b      	strh	r3, [r7, #2]
	if(huart == SIM_UART)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a3d      	ldr	r2, [pc, #244]	@ (8002ee0 <HAL_UARTEx_RxEventCallback+0x104>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d16d      	bne.n	8002ecc <HAL_UARTEx_RxEventCallback+0xf0>
	{
		if(*(uint8_t*)sim_rx_buffer == '>')
 8002df0:	4b3c      	ldr	r3, [pc, #240]	@ (8002ee4 <HAL_UARTEx_RxEventCallback+0x108>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b3e      	cmp	r3, #62	@ 0x3e
 8002df6:	d127      	bne.n	8002e48 <HAL_UARTEx_RxEventCallback+0x6c>
		{
			if(flags.Log_TransferInProgress)
 8002df8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee8 <HAL_UARTEx_RxEventCallback+0x10c>)
 8002dfa:	785b      	ldrb	r3, [r3, #1]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00c      	beq.n	8002e20 <HAL_UARTEx_RxEventCallback+0x44>
			{
				flags.Log_ReadytoSend = 1;
 8002e06:	4a38      	ldr	r2, [pc, #224]	@ (8002ee8 <HAL_UARTEx_RxEventCallback+0x10c>)
 8002e08:	7853      	ldrb	r3, [r2, #1]
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	7053      	strb	r3, [r2, #1]
				sys.SIM_Prompt_Status = 0;
 8002e10:	4b36      	ldr	r3, [pc, #216]	@ (8002eec <HAL_UARTEx_RxEventCallback+0x110>)
 8002e12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e16:	461a      	mov	r2, r3
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002e1e:	e055      	b.n	8002ecc <HAL_UARTEx_RxEventCallback+0xf0>
			}
			else if(flags.CMD.Measure_Request)
 8002e20:	4b31      	ldr	r3, [pc, #196]	@ (8002ee8 <HAL_UARTEx_RxEventCallback+0x10c>)
 8002e22:	789b      	ldrb	r3, [r3, #2]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d04e      	beq.n	8002ecc <HAL_UARTEx_RxEventCallback+0xf0>
			{
				flags.Measure_ReadytoSend = 1;
 8002e2e:	4a2e      	ldr	r2, [pc, #184]	@ (8002ee8 <HAL_UARTEx_RxEventCallback+0x10c>)
 8002e30:	7853      	ldrb	r3, [r2, #1]
 8002e32:	f043 0302 	orr.w	r3, r3, #2
 8002e36:	7053      	strb	r3, [r2, #1]
				sys.SIM_Prompt_Status = 0;
 8002e38:	4b2c      	ldr	r3, [pc, #176]	@ (8002eec <HAL_UARTEx_RxEventCallback+0x110>)
 8002e3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e3e:	461a      	mov	r2, r3
 8002e40:	2300      	movs	r3, #0
 8002e42:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002e46:	e041      	b.n	8002ecc <HAL_UARTEx_RxEventCallback+0xf0>
			}
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x444E4553 &&              // "SEND"
 8002e48:	4b26      	ldr	r3, [pc, #152]	@ (8002ee4 <HAL_UARTEx_RxEventCallback+0x108>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a28      	ldr	r2, [pc, #160]	@ (8002ef0 <HAL_UARTEx_RxEventCallback+0x114>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d11e      	bne.n	8002e90 <HAL_UARTEx_RxEventCallback+0xb4>
				   *(uint32_t*)(sim_rx_buffer + 4) == 0x004B204F)       // " OK\0"
 8002e52:	4b28      	ldr	r3, [pc, #160]	@ (8002ef4 <HAL_UARTEx_RxEventCallback+0x118>)
 8002e54:	681b      	ldr	r3, [r3, #0]
		else if(*(uint32_t*)sim_rx_buffer == 0x444E4553 &&              // "SEND"
 8002e56:	4a28      	ldr	r2, [pc, #160]	@ (8002ef8 <HAL_UARTEx_RxEventCallback+0x11c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d119      	bne.n	8002e90 <HAL_UARTEx_RxEventCallback+0xb4>
		{
			if(flags.Log_TransferInProgress)
 8002e5c:	4b22      	ldr	r3, [pc, #136]	@ (8002ee8 <HAL_UARTEx_RxEventCallback+0x10c>)
 8002e5e:	785b      	ldrb	r3, [r3, #1]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <HAL_UARTEx_RxEventCallback+0x9a>
			{
				flags.Log_TransferInProgress = 0;
 8002e6a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ee8 <HAL_UARTEx_RxEventCallback+0x10c>)
 8002e6c:	7853      	ldrb	r3, [r2, #1]
 8002e6e:	f023 0308 	bic.w	r3, r3, #8
 8002e72:	7053      	strb	r3, [r2, #1]
			if(flags.Log_TransferInProgress)
 8002e74:	e029      	b.n	8002eca <HAL_UARTEx_RxEventCallback+0xee>
			}
			else if(flags.Meas_TransferInProgress)
 8002e76:	4b1c      	ldr	r3, [pc, #112]	@ (8002ee8 <HAL_UARTEx_RxEventCallback+0x10c>)
 8002e78:	785b      	ldrb	r3, [r3, #1]
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d022      	beq.n	8002eca <HAL_UARTEx_RxEventCallback+0xee>
			{
				flags.Meas_TransferInProgress = 0;
 8002e84:	4a18      	ldr	r2, [pc, #96]	@ (8002ee8 <HAL_UARTEx_RxEventCallback+0x10c>)
 8002e86:	7853      	ldrb	r3, [r2, #1]
 8002e88:	f023 0304 	bic.w	r3, r3, #4
 8002e8c:	7053      	strb	r3, [r2, #1]
			if(flags.Log_TransferInProgress)
 8002e8e:	e01c      	b.n	8002eca <HAL_UARTEx_RxEventCallback+0xee>
			}
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x4552524F)                 //"ERRO"
 8002e90:	4b14      	ldr	r3, [pc, #80]	@ (8002ee4 <HAL_UARTEx_RxEventCallback+0x108>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a19      	ldr	r2, [pc, #100]	@ (8002efc <HAL_UARTEx_RxEventCallback+0x120>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d10c      	bne.n	8002eb4 <HAL_UARTEx_RxEventCallback+0xd8>
		{
			flags.Log_ReadytoSend = 0;
 8002e9a:	4a13      	ldr	r2, [pc, #76]	@ (8002ee8 <HAL_UARTEx_RxEventCallback+0x10c>)
 8002e9c:	7853      	ldrb	r3, [r2, #1]
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	7053      	strb	r3, [r2, #1]
			sys.SIM_Prompt_Status = 0;
 8002ea4:	4b11      	ldr	r3, [pc, #68]	@ (8002eec <HAL_UARTEx_RxEventCallback+0x110>)
 8002ea6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eaa:	461a      	mov	r2, r3
 8002eac:	2300      	movs	r3, #0
 8002eae:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002eb2:	e00b      	b.n	8002ecc <HAL_UARTEx_RxEventCallback+0xf0>
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x444D432B)                 // "+CMD"
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee4 <HAL_UARTEx_RxEventCallback+0x108>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a11      	ldr	r2, [pc, #68]	@ (8002f00 <HAL_UARTEx_RxEventCallback+0x124>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d106      	bne.n	8002ecc <HAL_UARTEx_RxEventCallback+0xf0>
		{     
			flags.Message_Rx = 1;
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee8 <HAL_UARTEx_RxEventCallback+0x10c>)
 8002ec0:	7813      	ldrb	r3, [r2, #0]
 8002ec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ec6:	7013      	strb	r3, [r2, #0]
 8002ec8:	e000      	b.n	8002ecc <HAL_UARTEx_RxEventCallback+0xf0>
			if(flags.Log_TransferInProgress)
 8002eca:	bf00      	nop
		}


	}
	
	HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8002ecc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002ed0:	4904      	ldr	r1, [pc, #16]	@ (8002ee4 <HAL_UARTEx_RxEventCallback+0x108>)
 8002ed2:	4803      	ldr	r0, [pc, #12]	@ (8002ee0 <HAL_UARTEx_RxEventCallback+0x104>)
 8002ed4:	f013 fc46 	bl	8016764 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8002ed8:	bf00      	nop
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	200004bc 	.word	0x200004bc
 8002ee4:	20004f94 	.word	0x20004f94
 8002ee8:	20001780 	.word	0x20001780
 8002eec:	200005d8 	.word	0x200005d8
 8002ef0:	444e4553 	.word	0x444e4553
 8002ef4:	20004f98 	.word	0x20004f98
 8002ef8:	004b204f 	.word	0x004b204f
 8002efc:	4552524f 	.word	0x4552524f
 8002f00:	444d432b 	.word	0x444d432b

08002f04 <HAL_UART_RxCpltCallback>:

/* ------CALLBACK UART RX COMPLETE------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
	if (huart == SIM_UART)
	{

	}

}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_UART_TxCpltCallback>:

/* ------CALLBACK UART TX COMPLETE------*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
	if (huart == SIM_UART)
	{

	}

}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_ADC_ConvHalfCpltCallback>:

/* ------CALLBACK HALF ADC------*/
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a09      	ldr	r2, [pc, #36]	@ (8002f5c <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d109      	bne.n	8002f50 <HAL_ADC_ConvHalfCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8002f3c:	4a08      	ldr	r2, [pc, #32]	@ (8002f60 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8002f3e:	7813      	ldrb	r3, [r2, #0]
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	7013      	strb	r3, [r2, #0]
		flags.ADC_Half_Buffer = 1;
 8002f46:	4a06      	ldr	r2, [pc, #24]	@ (8002f60 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8002f48:	7813      	ldrb	r3, [r2, #0]
 8002f4a:	f043 0302 	orr.w	r3, r3, #2
 8002f4e:	7013      	strb	r3, [r2, #0]
	}
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	200000b0 	.word	0x200000b0
 8002f60:	20001780 	.word	0x20001780

08002f64 <HAL_ADC_ConvCpltCallback>:

/*------CALLBACK FULL ADC------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a09      	ldr	r2, [pc, #36]	@ (8002f94 <HAL_ADC_ConvCpltCallback+0x30>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d109      	bne.n	8002f88 <HAL_ADC_ConvCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8002f74:	4a08      	ldr	r2, [pc, #32]	@ (8002f98 <HAL_ADC_ConvCpltCallback+0x34>)
 8002f76:	7813      	ldrb	r3, [r2, #0]
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	7013      	strb	r3, [r2, #0]
		flags.ADC_Full_Buffer = 1;
 8002f7e:	4a06      	ldr	r2, [pc, #24]	@ (8002f98 <HAL_ADC_ConvCpltCallback+0x34>)
 8002f80:	7813      	ldrb	r3, [r2, #0]
 8002f82:	f043 0304 	orr.w	r3, r3, #4
 8002f86:	7013      	strb	r3, [r2, #0]
	}
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	200000b0 	.word	0x200000b0
 8002f98:	20001780 	.word	0x20001780

08002f9c <HAL_RTC_AlarmAEventCallback>:

/*------CALLBACK RTC CAMBIO ORA------*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b092      	sub	sp, #72	@ 0x48
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef gTime;
	RTC_AlarmTypeDef sAlarm = {0};
 8002fa4:	f107 0308 	add.w	r3, r7, #8
 8002fa8:	222c      	movs	r2, #44	@ 0x2c
 8002faa:	2100      	movs	r1, #0
 8002fac:	4618      	mov	r0, r3
 8002fae:	f013 fd17 	bl	80169e0 <memset>

	HAL_RTC_GetTime(hrtc, &gTime, RTC_FORMAT_BIN);
 8002fb2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	4619      	mov	r1, r3
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f00e fce5 	bl	801198a <HAL_RTC_GetTime>

	sys.Low_th = Low_TH_Array[gTime.Hours];
 8002fc0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4b17      	ldr	r3, [pc, #92]	@ (8003024 <HAL_RTC_AlarmAEventCallback+0x88>)
 8002fc8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002fcc:	4b16      	ldr	r3, [pc, #88]	@ (8003028 <HAL_RTC_AlarmAEventCallback+0x8c>)
 8002fce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fd2:	85da      	strh	r2, [r3, #46]	@ 0x2e
	sys.High_th = High_TH_Array[gTime.Hours];
 8002fd4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4b14      	ldr	r3, [pc, #80]	@ (800302c <HAL_RTC_AlarmAEventCallback+0x90>)
 8002fdc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002fe0:	4b11      	ldr	r3, [pc, #68]	@ (8003028 <HAL_RTC_AlarmAEventCallback+0x8c>)
 8002fe2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fe6:	861a      	strh	r2, [r3, #48]	@ 0x30

	sAlarm.AlarmTime.Hours = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	723b      	strb	r3, [r7, #8]
    sAlarm.AlarmTime.Minutes = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	727b      	strb	r3, [r7, #9]
    sAlarm.AlarmTime.Seconds = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	72bb      	strb	r3, [r7, #10]
    sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS | RTC_ALARMMASK_SECONDS;
 8002ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8003030 <HAL_RTC_AlarmAEventCallback+0x94>)
 8002ff6:	61fb      	str	r3, [r7, #28]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
    sAlarm.AlarmDateWeekDay = 1;
 8003000:	2301      	movs	r3, #1
 8003002:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    sAlarm.Alarm = RTC_ALARM_A;
 8003006:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800300a:	633b      	str	r3, [r7, #48]	@ 0x30
    
    HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BIN);
 800300c:	f107 0308 	add.w	r3, r7, #8
 8003010:	2200      	movs	r2, #0
 8003012:	4619      	mov	r1, r3
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f00e fd9b 	bl	8011b50 <HAL_RTC_SetAlarm_IT>
}
 800301a:	bf00      	nop
 800301c:	3748      	adds	r7, #72	@ 0x48
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20004f54 	.word	0x20004f54
 8003028:	200005d8 	.word	0x200005d8
 800302c:	20004f24 	.word	0x20004f24
 8003030:	80800080 	.word	0x80800080

08003034 <extflash_cs_set>:
uint32_t	exflashNumSectors = 0;
uint8_t		exflashInitDone = 0;


void extflash_cs_set()
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_RESET);
 8003038:	2200      	movs	r2, #0
 800303a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800303e:	4802      	ldr	r0, [pc, #8]	@ (8003048 <extflash_cs_set+0x14>)
 8003040:	f00b fdfc 	bl	800ec3c <HAL_GPIO_WritePin>
}
 8003044:	bf00      	nop
 8003046:	bd80      	pop	{r7, pc}
 8003048:	48000400 	.word	0x48000400

0800304c <extflash_cs_reset>:

void extflash_cs_reset()
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 8003050:	2201      	movs	r2, #1
 8003052:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003056:	4802      	ldr	r0, [pc, #8]	@ (8003060 <extflash_cs_reset+0x14>)
 8003058:	f00b fdf0 	bl	800ec3c <HAL_GPIO_WritePin>
}
 800305c:	bf00      	nop
 800305e:	bd80      	pop	{r7, pc}
 8003060:	48000400 	.word	0x48000400

08003064 <extflash_wp_reset>:
{
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_RESET);
}

void extflash_wp_reset()
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_SET);
 8003068:	2201      	movs	r2, #1
 800306a:	2140      	movs	r1, #64	@ 0x40
 800306c:	4802      	ldr	r0, [pc, #8]	@ (8003078 <extflash_wp_reset+0x14>)
 800306e:	f00b fde5 	bl	800ec3c <HAL_GPIO_WritePin>
}
 8003072:	bf00      	nop
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	48000800 	.word	0x48000800

0800307c <extflash_hard_reset>:


void extflash_hard_reset()
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_RESET);
 8003080:	2200      	movs	r2, #0
 8003082:	2180      	movs	r1, #128	@ 0x80
 8003084:	4806      	ldr	r0, [pc, #24]	@ (80030a0 <extflash_hard_reset+0x24>)
 8003086:	f00b fdd9 	bl	800ec3c <HAL_GPIO_WritePin>

	HAL_Delay(50);
 800308a:	2032      	movs	r0, #50	@ 0x32
 800308c:	f008 fbec 	bl	800b868 <HAL_Delay>

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_SET);
 8003090:	2201      	movs	r2, #1
 8003092:	2180      	movs	r1, #128	@ 0x80
 8003094:	4802      	ldr	r0, [pc, #8]	@ (80030a0 <extflash_hard_reset+0x24>)
 8003096:	f00b fdd1 	bl	800ec3c <HAL_GPIO_WritePin>

	return;
 800309a:	bf00      	nop
}
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	48000800 	.word	0x48000800

080030a4 <extflash_send_cmd>:


int32_t extflash_send_cmd(extflash_cmd_t command)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]

	uint8_t addr_bytes[4] = {0};
 80030ac:	2300      	movs	r3, #0
 80030ae:	61bb      	str	r3, [r7, #24]
	uint8_t dummy_bytes[8] = {0};
 80030b0:	f107 0310 	add.w	r3, r7, #16
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	605a      	str	r2, [r3, #4]
	uint8_t dummy = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	77fb      	strb	r3, [r7, #31]
	uint8_t cmd_data = command->cmd;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	73fb      	strb	r3, [r7, #15]

	if(command->address_en != 0)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	785b      	ldrb	r3, [r3, #1]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00d      	beq.n	80030e8 <extflash_send_cmd+0x44>
	{
		addr_bytes[0] = (command->address >> 16) & 0xFF;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	0c1b      	lsrs	r3, r3, #16
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	763b      	strb	r3, [r7, #24]
		addr_bytes[1] = (command->address >> 8) & 0xFF;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	0a1b      	lsrs	r3, r3, #8
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	767b      	strb	r3, [r7, #25]
		addr_bytes[2] = (command->address) & 0xFF;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	76bb      	strb	r3, [r7, #26]
	}

	extflash_cs_set();
 80030e8:	f7ff ffa4 	bl	8003034 <extflash_cs_set>

	HAL_SPI_Transmit(EXTFLASH_SPI, &cmd_data, 1, FLASH_SPI_DEF_TIMEOUT);
 80030ec:	f107 010f 	add.w	r1, r7, #15
 80030f0:	2364      	movs	r3, #100	@ 0x64
 80030f2:	2201      	movs	r2, #1
 80030f4:	4823      	ldr	r0, [pc, #140]	@ (8003184 <extflash_send_cmd+0xe0>)
 80030f6:	f00f f82a 	bl	801214e <HAL_SPI_Transmit>

	if(command->address_en != 0)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	785b      	ldrb	r3, [r3, #1]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d006      	beq.n	8003110 <extflash_send_cmd+0x6c>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, addr_bytes, 3, FLASH_SPI_DEF_TIMEOUT);
 8003102:	f107 0118 	add.w	r1, r7, #24
 8003106:	2364      	movs	r3, #100	@ 0x64
 8003108:	2203      	movs	r2, #3
 800310a:	481e      	ldr	r0, [pc, #120]	@ (8003184 <extflash_send_cmd+0xe0>)
 800310c:	f00f f81f 	bl	801214e <HAL_SPI_Transmit>
	}

	if(command->dummy_nb > 0)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	88db      	ldrh	r3, [r3, #6]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00e      	beq.n	8003136 <extflash_send_cmd+0x92>
	{
		dummy = command->dummy_nb > sizeof(dummy_bytes) ? sizeof(dummy_bytes) : command->dummy_nb;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	88db      	ldrh	r3, [r3, #6]
 800311c:	2b08      	cmp	r3, #8
 800311e:	bf28      	it	cs
 8003120:	2308      	movcs	r3, #8
 8003122:	b29b      	uxth	r3, r3
 8003124:	77fb      	strb	r3, [r7, #31]
		HAL_SPI_Transmit(EXTFLASH_SPI, dummy_bytes, dummy, FLASH_SPI_DEF_TIMEOUT);
 8003126:	7ffb      	ldrb	r3, [r7, #31]
 8003128:	b29a      	uxth	r2, r3
 800312a:	f107 0110 	add.w	r1, r7, #16
 800312e:	2364      	movs	r3, #100	@ 0x64
 8003130:	4814      	ldr	r0, [pc, #80]	@ (8003184 <extflash_send_cmd+0xe0>)
 8003132:	f00f f80c 	bl	801214e <HAL_SPI_Transmit>
	}

	if(command->tx_nb > 0 && command->tx_data != NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	885b      	ldrh	r3, [r3, #2]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00b      	beq.n	8003156 <extflash_send_cmd+0xb2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d007      	beq.n	8003156 <extflash_send_cmd+0xb2>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, command->tx_data, command->tx_nb, FLASH_SPI_DEF_TIMEOUT);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68d9      	ldr	r1, [r3, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	885a      	ldrh	r2, [r3, #2]
 800314e:	2364      	movs	r3, #100	@ 0x64
 8003150:	480c      	ldr	r0, [pc, #48]	@ (8003184 <extflash_send_cmd+0xe0>)
 8003152:	f00e fffc 	bl	801214e <HAL_SPI_Transmit>
	}

	if(command->rx_nb > 0 && command->rx_data != NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	889b      	ldrh	r3, [r3, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00b      	beq.n	8003176 <extflash_send_cmd+0xd2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d007      	beq.n	8003176 <extflash_send_cmd+0xd2>
	{
		HAL_SPI_Receive(EXTFLASH_SPI, command->rx_data, command->rx_nb, FLASH_SPI_DEF_TIMEOUT);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6919      	ldr	r1, [r3, #16]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	889a      	ldrh	r2, [r3, #4]
 800316e:	2364      	movs	r3, #100	@ 0x64
 8003170:	4804      	ldr	r0, [pc, #16]	@ (8003184 <extflash_send_cmd+0xe0>)
 8003172:	f00f f962 	bl	801243a <HAL_SPI_Receive>
	}

	extflash_cs_reset();
 8003176:	f7ff ff69 	bl	800304c <extflash_cs_reset>

	return 0;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3720      	adds	r7, #32
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	2000023c 	.word	0x2000023c

08003188 <extflash_read_extended_read_reg>:

}


int extflash_read_extended_read_reg(uint8_t *ereg)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 8003190:	f107 030c 	add.w	r3, r7, #12
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	60da      	str	r2, [r3, #12]
 800319e:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDERP;
 80031a0:	2381      	movs	r3, #129	@ 0x81
 80031a2:	733b      	strb	r3, [r7, #12]
	command.address_en = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	737b      	strb	r3, [r7, #13]
	command.address = 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
	command.rx_nb = 1;
 80031ac:	2301      	movs	r3, #1
 80031ae:	823b      	strh	r3, [r7, #16]
	command.rx_data = ereg;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	61fb      	str	r3, [r7, #28]

	return extflash_send_cmd(&command);
 80031b4:	f107 030c 	add.w	r3, r7, #12
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff ff73 	bl	80030a4 <extflash_send_cmd>
 80031be:	4603      	mov	r3, r0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3720      	adds	r7, #32
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <extflash_clear_extended_read_reg>:


int extflash_clear_extended_read_reg()
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
	extflash_cmd command = {0};
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	60da      	str	r2, [r3, #12]
 80031da:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_CLERP;
 80031dc:	2382      	movs	r3, #130	@ 0x82
 80031de:	713b      	strb	r3, [r7, #4]

	return extflash_send_cmd(&command);
 80031e0:	1d3b      	adds	r3, r7, #4
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff ff5e 	bl	80030a4 <extflash_send_cmd>
 80031e8:	4603      	mov	r3, r0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <extflash_set_write_protection>:
	return extflash_send_cmd(&command);

}

int extflash_set_write_protection(uint8_t enable)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b088      	sub	sp, #32
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	4603      	mov	r3, r0
 80031fa:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 80031fc:	f107 030c 	add.w	r3, r7, #12
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	60da      	str	r2, [r3, #12]
 800320a:	611a      	str	r2, [r3, #16]
	command.cmd = enable==0 ? EFLASH_CMD_WREN : EFLASH_CMD_WRDI;
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <extflash_set_write_protection+0x24>
 8003212:	2306      	movs	r3, #6
 8003214:	e000      	b.n	8003218 <extflash_set_write_protection+0x26>
 8003216:	2304      	movs	r3, #4
 8003218:	733b      	strb	r3, [r7, #12]

	return extflash_send_cmd(&command);
 800321a:	f107 030c 	add.w	r3, r7, #12
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff ff40 	bl	80030a4 <extflash_send_cmd>
 8003224:	4603      	mov	r3, r0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3720      	adds	r7, #32
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <extflash_read_sfdp>:

int extflash_read_sfdp(uint32_t regaddr, uint8_t *reg, uint8_t nregs)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b08a      	sub	sp, #40	@ 0x28
 8003232:	af00      	add	r7, sp, #0
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	4613      	mov	r3, r2
 800323a:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 800323c:	f107 0314 	add.w	r3, r7, #20
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDSFDP;
 800324c:	235a      	movs	r3, #90	@ 0x5a
 800324e:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 8003250:	2301      	movs	r3, #1
 8003252:	757b      	strb	r3, [r7, #21]
	command.address = regaddr;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8003258:	2301      	movs	r3, #1
 800325a:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nregs;
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	b29b      	uxth	r3, r3
 8003260:	833b      	strh	r3, [r7, #24]
	command.rx_data = reg;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8003266:	f107 0314 	add.w	r3, r7, #20
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff ff1a 	bl	80030a4 <extflash_send_cmd>
 8003270:	4603      	mov	r3, r0

}
 8003272:	4618      	mov	r0, r3
 8003274:	3728      	adds	r7, #40	@ 0x28
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <extflash_raw_read>:

int extflash_raw_read(uint32_t address, uint8_t *pBuffer, uint16_t nbytes)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b08a      	sub	sp, #40	@ 0x28
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	4613      	mov	r3, r2
 8003286:	80fb      	strh	r3, [r7, #6]

	extflash_cmd command = {0};
 8003288:	f107 0314 	add.w	r3, r7, #20
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	605a      	str	r2, [r3, #4]
 8003292:	609a      	str	r2, [r3, #8]
 8003294:	60da      	str	r2, [r3, #12]
 8003296:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_FRD;
 8003298:	230b      	movs	r3, #11
 800329a:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 800329c:	2301      	movs	r3, #1
 800329e:	757b      	strb	r3, [r7, #21]
	command.address = address;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 80032a4:	2301      	movs	r3, #1
 80032a6:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nbytes;
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	833b      	strh	r3, [r7, #24]
	command.rx_data = pBuffer;
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 80032b0:	f107 0314 	add.w	r3, r7, #20
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fef5 	bl	80030a4 <extflash_send_cmd>
 80032ba:	4603      	mov	r3, r0

}
 80032bc:	4618      	mov	r0, r3
 80032be:	3728      	adds	r7, #40	@ 0x28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <extflash_raw_erase>:

int extflash_raw_erase(uint32_t address)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 80032cc:	f107 030c 	add.w	r3, r7, #12
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_SER;
 80032dc:	23d7      	movs	r3, #215	@ 0xd7
 80032de:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 80032e0:	2301      	movs	r3, #1
 80032e2:	737b      	strb	r3, [r7, #13]
	command.address = address;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	617b      	str	r3, [r7, #20]

	return extflash_send_cmd(&command);
 80032e8:	f107 030c 	add.w	r3, r7, #12
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fed9 	bl	80030a4 <extflash_send_cmd>
 80032f2:	4603      	mov	r3, r0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3720      	adds	r7, #32
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <extflash_raw_page_write>:

int extflash_raw_page_write(uint32_t address, const uint8_t *pBuffer)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]

	extflash_cmd command = {0};
 8003306:	f107 030c 	add.w	r3, r7, #12
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	605a      	str	r2, [r3, #4]
 8003310:	609a      	str	r2, [r3, #8]
 8003312:	60da      	str	r2, [r3, #12]
 8003314:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_PP;
 8003316:	2302      	movs	r3, #2
 8003318:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 800331a:	2301      	movs	r3, #1
 800331c:	737b      	strb	r3, [r7, #13]
	command.address = address;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	617b      	str	r3, [r7, #20]
	command.tx_nb = EFLASH_DEF_PAGE_SIZE;
 8003322:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003326:	81fb      	strh	r3, [r7, #14]
	command.tx_data = pBuffer;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	61bb      	str	r3, [r7, #24]

	return extflash_send_cmd(&command);
 800332c:	f107 030c 	add.w	r3, r7, #12
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff feb7 	bl	80030a4 <extflash_send_cmd>
 8003336:	4603      	mov	r3, r0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3720      	adds	r7, #32
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <extflash_sector_read>:


int extflash_sector_read(uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	@ 0x28
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
	int result = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	61fb      	str	r3, [r7, #28]
	uint8_t ereg = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	75fb      	strb	r3, [r7, #23]
	uint32_t tmo = HAL_GetTick();
 8003354:	f008 fa7c 	bl	800b850 <HAL_GetTick>
 8003358:	61b8      	str	r0, [r7, #24]
	uint8_t *wPtr = pBuffer;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	031b      	lsls	r3, r3, #12
 8003362:	623b      	str	r3, [r7, #32]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8003364:	f107 0317 	add.w	r3, r7, #23
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff ff0d 	bl	8003188 <extflash_read_extended_read_reg>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	da10      	bge.n	8003396 <extflash_sector_read+0x56>
 8003374:	f04f 33ff 	mov.w	r3, #4294967295
 8003378:	e037      	b.n	80033ea <extflash_sector_read+0xaa>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 800337a:	f107 0317 	add.w	r3, r7, #23
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff ff02 	bl	8003188 <extflash_read_extended_read_reg>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	da02      	bge.n	8003390 <extflash_sector_read+0x50>
 800338a:	f04f 33ff 	mov.w	r3, #4294967295
 800338e:	e02c      	b.n	80033ea <extflash_sector_read+0xaa>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8003390:	2001      	movs	r0, #1
 8003392:	f008 fa69 	bl	800b868 <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
 8003396:	7dfb      	ldrb	r3, [r7, #23]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d020      	beq.n	80033e2 <extflash_sector_read+0xa2>
 80033a0:	f008 fa56 	bl	800b850 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033ae:	d3e4      	bcc.n	800337a <extflash_sector_read+0x3a>
	}

	while(nsectors > 0)
 80033b0:	e017      	b.n	80033e2 <extflash_sector_read+0xa2>
	{
		result = extflash_raw_read(address, wPtr, EFLASH_DEF_SECTOR_SIZE);
 80033b2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80033b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033b8:	6a38      	ldr	r0, [r7, #32]
 80033ba:	f7ff ff5e 	bl	800327a <extflash_raw_read>
 80033be:	61f8      	str	r0, [r7, #28]
		if(result < 0)return -1;
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	da02      	bge.n	80033cc <extflash_sector_read+0x8c>
 80033c6:	f04f 33ff 	mov.w	r3, #4294967295
 80033ca:	e00e      	b.n	80033ea <extflash_sector_read+0xaa>

		address += EFLASH_DEF_SECTOR_SIZE;
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033d2:	623b      	str	r3, [r7, #32]
		wPtr += EFLASH_DEF_SECTOR_SIZE;
 80033d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033da:	627b      	str	r3, [r7, #36]	@ 0x24
		nsectors--;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	3b01      	subs	r3, #1
 80033e0:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1e4      	bne.n	80033b2 <extflash_sector_read+0x72>
	}

	return 0;
 80033e8:	2300      	movs	r3, #0

}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3728      	adds	r7, #40	@ 0x28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <extflash_wait_for_wop>:

int extflash_wait_for_wop(uint32_t timeout)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
	uint8_t ereg = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	72fb      	strb	r3, [r7, #11]
	uint32_t tmo = HAL_GetTick();
 80033fe:	f008 fa27 	bl	800b850 <HAL_GetTick>
 8003402:	60f8      	str	r0, [r7, #12]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8003404:	f107 030b 	add.w	r3, r7, #11
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff febd 	bl	8003188 <extflash_read_extended_read_reg>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	da10      	bge.n	8003436 <extflash_wait_for_wop+0x44>
 8003414:	f04f 33ff 	mov.w	r3, #4294967295
 8003418:	e023      	b.n	8003462 <extflash_wait_for_wop+0x70>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 800341a:	f107 030b 	add.w	r3, r7, #11
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff feb2 	bl	8003188 <extflash_read_extended_read_reg>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	da02      	bge.n	8003430 <extflash_wait_for_wop+0x3e>
 800342a:	f04f 33ff 	mov.w	r3, #4294967295
 800342e:	e018      	b.n	8003462 <extflash_wait_for_wop+0x70>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8003430:	2001      	movs	r0, #1
 8003432:	f008 fa19 	bl	800b868 <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
 8003436:	7afb      	ldrb	r3, [r7, #11]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d007      	beq.n	8003450 <extflash_wait_for_wop+0x5e>
 8003440:	f008 fa06 	bl	800b850 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	429a      	cmp	r2, r3
 800344e:	d8e4      	bhi.n	800341a <extflash_wait_for_wop+0x28>
	}

	if(ereg & (ESTATUS_PROT_ERR | ESTATUS_P_ERR | ESTATUS_E_ERR))
 8003450:	7afb      	ldrb	r3, [r7, #11]
 8003452:	f003 030e 	and.w	r3, r3, #14
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <extflash_wait_for_wop+0x6e>
	{
		return -2; //Erase o write error
 800345a:	f06f 0301 	mvn.w	r3, #1
 800345e:	e000      	b.n	8003462 <extflash_wait_for_wop+0x70>
	}

	return 0;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <extflash_sector_write>:

int extflash_sector_write(uint32_t sector, uint32_t nsectors, const uint8_t *pBuffer)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b088      	sub	sp, #32
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	607a      	str	r2, [r7, #4]
	int result = 0;
 8003476:	2300      	movs	r3, #0
 8003478:	613b      	str	r3, [r7, #16]
	const uint8_t *wPtr = pBuffer;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	031b      	lsls	r3, r3, #12
 8003482:	61bb      	str	r3, [r7, #24]

	extflash_clear_extended_read_reg();
 8003484:	f7ff fea0 	bl	80031c8 <extflash_clear_extended_read_reg>

	while(nsectors > 0)
 8003488:	e04e      	b.n	8003528 <extflash_sector_write+0xbe>
	{
		//Controllo operazioni in corso
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 800348a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800348e:	f7ff ffb0 	bl	80033f2 <extflash_wait_for_wop>
 8003492:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	db4a      	blt.n	8003530 <extflash_sector_write+0xc6>

		//Erase del settore
		result = extflash_set_write_protection(0);
 800349a:	2000      	movs	r0, #0
 800349c:	f7ff fea9 	bl	80031f2 <extflash_set_write_protection>
 80034a0:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	db45      	blt.n	8003534 <extflash_sector_write+0xca>
		result = extflash_raw_erase(address);
 80034a8:	69b8      	ldr	r0, [r7, #24]
 80034aa:	f7ff ff0b 	bl	80032c4 <extflash_raw_erase>
 80034ae:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	db40      	blt.n	8003538 <extflash_sector_write+0xce>

		//Attesa ERASE
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 80034b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80034ba:	f7ff ff9a 	bl	80033f2 <extflash_wait_for_wop>
 80034be:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	db3a      	blt.n	800353c <extflash_sector_write+0xd2>

		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	e021      	b.n	8003510 <extflash_sector_write+0xa6>
		{
			result = extflash_set_write_protection(0);
 80034cc:	2000      	movs	r0, #0
 80034ce:	f7ff fe90 	bl	80031f2 <extflash_set_write_protection>
 80034d2:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	db1e      	blt.n	8003518 <extflash_sector_write+0xae>
			result = extflash_raw_page_write(address, wPtr);
 80034da:	69f9      	ldr	r1, [r7, #28]
 80034dc:	69b8      	ldr	r0, [r7, #24]
 80034de:	f7ff ff0d 	bl	80032fc <extflash_raw_page_write>
 80034e2:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	db18      	blt.n	800351c <extflash_sector_write+0xb2>

			address += EFLASH_DEF_PAGE_SIZE;
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80034f0:	61bb      	str	r3, [r7, #24]
			wPtr += EFLASH_DEF_PAGE_SIZE;
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80034f8:	61fb      	str	r3, [r7, #28]
			//Attesa write
			result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 80034fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80034fe:	f7ff ff78 	bl	80033f2 <extflash_wait_for_wop>
 8003502:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	2b00      	cmp	r3, #0
 8003508:	db0a      	blt.n	8003520 <extflash_sector_write+0xb6>
		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	3301      	adds	r3, #1
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2b0f      	cmp	r3, #15
 8003514:	ddda      	ble.n	80034cc <extflash_sector_write+0x62>
 8003516:	e004      	b.n	8003522 <extflash_sector_write+0xb8>
			if(result < 0)break;
 8003518:	bf00      	nop
 800351a:	e002      	b.n	8003522 <extflash_sector_write+0xb8>
			if(result < 0)break;
 800351c:	bf00      	nop
 800351e:	e000      	b.n	8003522 <extflash_sector_write+0xb8>
			if(result < 0)break;
 8003520:	bf00      	nop
		}

		nsectors--;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	3b01      	subs	r3, #1
 8003526:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1ad      	bne.n	800348a <extflash_sector_write+0x20>
 800352e:	e006      	b.n	800353e <extflash_sector_write+0xd4>
		if(result < 0)break;
 8003530:	bf00      	nop
 8003532:	e004      	b.n	800353e <extflash_sector_write+0xd4>
		if(result < 0)break;
 8003534:	bf00      	nop
 8003536:	e002      	b.n	800353e <extflash_sector_write+0xd4>
		if(result < 0)break;
 8003538:	bf00      	nop
 800353a:	e000      	b.n	800353e <extflash_sector_write+0xd4>
		if(result < 0)break;
 800353c:	bf00      	nop
	}

	extflash_set_write_protection(1);
 800353e:	2001      	movs	r0, #1
 8003540:	f7ff fe57 	bl	80031f2 <extflash_set_write_protection>

	return 0;
 8003544:	2300      	movs	r3, #0

}
 8003546:	4618      	mov	r0, r3
 8003548:	3720      	adds	r7, #32
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <extflash_get_sector_size>:


unsigned int extflash_get_sector_size()
{
 800354e:	b480      	push	{r7}
 8003550:	af00      	add	r7, sp, #0
	return EFLASH_DEF_SECTOR_SIZE;
 8003552:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 8003556:	4618      	mov	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <extflash_get_sector_count>:

unsigned int extflash_get_sector_count()
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
	return exflashNumSectors;
 8003564:	4b03      	ldr	r3, [pc, #12]	@ (8003574 <extflash_get_sector_count+0x14>)
 8003566:	681b      	ldr	r3, [r3, #0]
}
 8003568:	4618      	mov	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	200000a8 	.word	0x200000a8

08003578 <extflash_is_initialized>:
{
	return exflashSize;
}

int extflash_is_initialized()
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
	return exflashInitDone;
 800357c:	4b03      	ldr	r3, [pc, #12]	@ (800358c <extflash_is_initialized+0x14>)
 800357e:	781b      	ldrb	r3, [r3, #0]
}
 8003580:	4618      	mov	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	200000ac 	.word	0x200000ac

08003590 <extflash_init>:

int extflash_init()
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
	uint8_t manufacturer_id[2] = {0};
 8003596:	2300      	movs	r3, #0
 8003598:	83bb      	strh	r3, [r7, #28]
	extflash_cmd command = {0};
 800359a:	f107 0308 	add.w	r3, r7, #8
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	605a      	str	r2, [r3, #4]
 80035a4:	609a      	str	r2, [r3, #8]
 80035a6:	60da      	str	r2, [r3, #12]
 80035a8:	611a      	str	r2, [r3, #16]
	uint8_t density[4] = {0};
 80035aa:	2300      	movs	r3, #0
 80035ac:	607b      	str	r3, [r7, #4]

	exflashInitDone = 0;
 80035ae:	4b26      	ldr	r3, [pc, #152]	@ (8003648 <extflash_init+0xb8>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	701a      	strb	r2, [r3, #0]
	exflashNumSectors = 0;
 80035b4:	4b25      	ldr	r3, [pc, #148]	@ (800364c <extflash_init+0xbc>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]

	extflash_hard_reset();
 80035ba:	f7ff fd5f 	bl	800307c <extflash_hard_reset>
	extflash_cs_reset();
 80035be:	f7ff fd45 	bl	800304c <extflash_cs_reset>
	extflash_wp_reset();
 80035c2:	f7ff fd4f 	bl	8003064 <extflash_wp_reset>

	command.cmd = EFLASH_CMD_RDMDID;
 80035c6:	2390      	movs	r3, #144	@ 0x90
 80035c8:	723b      	strb	r3, [r7, #8]
	command.address_en = 1;
 80035ca:	2301      	movs	r3, #1
 80035cc:	727b      	strb	r3, [r7, #9]
	command.address = 0;
 80035ce:	2300      	movs	r3, #0
 80035d0:	613b      	str	r3, [r7, #16]
	command.rx_nb = 2;
 80035d2:	2302      	movs	r3, #2
 80035d4:	81bb      	strh	r3, [r7, #12]
	command.rx_data = manufacturer_id;
 80035d6:	f107 031c 	add.w	r3, r7, #28
 80035da:	61bb      	str	r3, [r7, #24]

	extflash_send_cmd(&command);
 80035dc:	f107 0308 	add.w	r3, r7, #8
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff fd5f 	bl	80030a4 <extflash_send_cmd>

	if(manufacturer_id[0] != EFLASH_DEF_MANIFACTURER || manufacturer_id[1] != EFLASH_DEF_DEVID)
 80035e6:	7f3b      	ldrb	r3, [r7, #28]
 80035e8:	2b9d      	cmp	r3, #157	@ 0x9d
 80035ea:	d102      	bne.n	80035f2 <extflash_init+0x62>
 80035ec:	7f7b      	ldrb	r3, [r7, #29]
 80035ee:	2b17      	cmp	r3, #23
 80035f0:	d002      	beq.n	80035f8 <extflash_init+0x68>
	{
		return -1;
 80035f2:	f04f 33ff 	mov.w	r3, #4294967295
 80035f6:	e022      	b.n	800363e <extflash_init+0xae>
	}

	memset((void *)&command, 0, sizeof(command));
 80035f8:	f107 0308 	add.w	r3, r7, #8
 80035fc:	2214      	movs	r2, #20
 80035fe:	2100      	movs	r1, #0
 8003600:	4618      	mov	r0, r3
 8003602:	f013 f9ed 	bl	80169e0 <memset>

	extflash_read_sfdp(SFDP_FLASH_DENSITY, density, sizeof(density));
 8003606:	1d3b      	adds	r3, r7, #4
 8003608:	2204      	movs	r2, #4
 800360a:	4619      	mov	r1, r3
 800360c:	2034      	movs	r0, #52	@ 0x34
 800360e:	f7ff fe0e 	bl	800322e <extflash_read_sfdp>

	memcpy(&exflashSize, density, sizeof(uint32_t));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a0e      	ldr	r2, [pc, #56]	@ (8003650 <extflash_init+0xc0>)
 8003616:	6013      	str	r3, [r2, #0]

	exflashSize += 1;
 8003618:	4b0d      	ldr	r3, [pc, #52]	@ (8003650 <extflash_init+0xc0>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3301      	adds	r3, #1
 800361e:	4a0c      	ldr	r2, [pc, #48]	@ (8003650 <extflash_init+0xc0>)
 8003620:	6013      	str	r3, [r2, #0]
	exflashSize >>= 3;
 8003622:	4b0b      	ldr	r3, [pc, #44]	@ (8003650 <extflash_init+0xc0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	08db      	lsrs	r3, r3, #3
 8003628:	4a09      	ldr	r2, [pc, #36]	@ (8003650 <extflash_init+0xc0>)
 800362a:	6013      	str	r3, [r2, #0]

	exflashNumSectors = exflashSize / EFLASH_DEF_SECTOR_SIZE;
 800362c:	4b08      	ldr	r3, [pc, #32]	@ (8003650 <extflash_init+0xc0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	0b1b      	lsrs	r3, r3, #12
 8003632:	4a06      	ldr	r2, [pc, #24]	@ (800364c <extflash_init+0xbc>)
 8003634:	6013      	str	r3, [r2, #0]

	exflashInitDone = 1;
 8003636:	4b04      	ldr	r3, [pc, #16]	@ (8003648 <extflash_init+0xb8>)
 8003638:	2201      	movs	r2, #1
 800363a:	701a      	strb	r2, [r3, #0]

	return 0;
 800363c:	2300      	movs	r3, #0

}
 800363e:	4618      	mov	r0, r3
 8003640:	3720      	adds	r7, #32
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	200000ac 	.word	0x200000ac
 800364c:	200000a8 	.word	0x200000a8
 8003650:	200000a4 	.word	0x200000a4

08003654 <System_Init>:
#include "lsm6dsv16x_rw.h"
#include "DS18B20.h"

/*-----INIZiALIZZAZIONE SISTEMA-----*/
void System_Init(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
	acc.write_reg = acc_write;
 8003658:	4b2a      	ldr	r3, [pc, #168]	@ (8003704 <System_Init+0xb0>)
 800365a:	4a2b      	ldr	r2, [pc, #172]	@ (8003708 <System_Init+0xb4>)
 800365c:	601a      	str	r2, [r3, #0]
	acc.read_reg = acc_read;
 800365e:	4b29      	ldr	r3, [pc, #164]	@ (8003704 <System_Init+0xb0>)
 8003660:	4a2a      	ldr	r2, [pc, #168]	@ (800370c <System_Init+0xb8>)
 8003662:	605a      	str	r2, [r3, #4]
	acc.handle = &hspi3;
 8003664:	4b27      	ldr	r3, [pc, #156]	@ (8003704 <System_Init+0xb0>)
 8003666:	4a2a      	ldr	r2, [pc, #168]	@ (8003710 <System_Init+0xbc>)
 8003668:	60da      	str	r2, [r3, #12]

	LED_Init();	
 800366a:	f000 fa97 	bl	8003b9c <LED_Init>
	LED_Start(GRN_LED, FAST, HIGH);
 800366e:	2205      	movs	r2, #5
 8003670:	2100      	movs	r1, #0
 8003672:	2008      	movs	r0, #8
 8003674:	f000 fab0 	bl	8003bd8 <LED_Start>

	BC_Init();
 8003678:	f7ff f9b4 	bl	80029e4 <BC_Init>
	INA3221_Init();
 800367c:	f7fd fcac 	bl	8000fd8 <INA3221_Init>
	FatFS_Init();
 8003680:	f000 f850 	bl	8003724 <FatFS_Init>
	Config_Init();
 8003684:	f000 f9be 	bl	8003a04 <Config_Init>
	Acc_Init(&acc, config.samp_freq);
 8003688:	4b22      	ldr	r3, [pc, #136]	@ (8003714 <System_Init+0xc0>)
 800368a:	885b      	ldrh	r3, [r3, #2]
 800368c:	4619      	mov	r1, r3
 800368e:	481d      	ldr	r0, [pc, #116]	@ (8003704 <System_Init+0xb0>)
 8003690:	f000 f8e4 	bl	800385c <Acc_Init>
	LED_Start(ORG_LED, FAST, HALF);
 8003694:	2206      	movs	r2, #6
 8003696:	2100      	movs	r1, #0
 8003698:	2000      	movs	r0, #0
 800369a:	f000 fa9d 	bl	8003bd8 <LED_Start>
	if(HAL_GPIO_ReadPin(LTE_STATUS_GPIO_Port, LTE_STATUS_Pin) != GPIO_PIN_SET)
 800369e:	2108      	movs	r1, #8
 80036a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036a4:	f00b fab2 	bl	800ec0c <HAL_GPIO_ReadPin>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d00a      	beq.n	80036c4 <System_Init+0x70>
	{
		SIM_Power_On();
 80036ae:	f7fe fb59 	bl	8001d64 <SIM_Power_On>
		while(HAL_GPIO_ReadPin(LTE_STATUS_GPIO_Port, LTE_STATUS_Pin) != GPIO_PIN_SET);            //Attesa accensione modulo
 80036b2:	bf00      	nop
 80036b4:	2108      	movs	r1, #8
 80036b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036ba:	f00b faa7 	bl	800ec0c <HAL_GPIO_ReadPin>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d1f7      	bne.n	80036b4 <System_Init+0x60>

	}
	SIM_Reset();
 80036c4:	f7fe fbbc 	bl	8001e40 <SIM_Reset>
	while(SIM_Init() != HAL_OK);
 80036c8:	bf00      	nop
 80036ca:	f7fd fef9 	bl	80014c0 <SIM_Init>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1fa      	bne.n	80036ca <System_Init+0x76>
	LED_Stop(ORG_LED);
 80036d4:	2000      	movs	r0, #0
 80036d6:	f000 fb4b 	bl	8003d70 <LED_Stop>
	RTC_Init();
 80036da:	f7fd fd31 	bl	8001140 <RTC_Init>
	Temperature = Read_Temperature();
 80036de:	f7fd fc43 	bl	8000f68 <Read_Temperature>
 80036e2:	4603      	mov	r3, r0
 80036e4:	461a      	mov	r2, r3
 80036e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003718 <System_Init+0xc4>)
 80036e8:	801a      	strh	r2, [r3, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 80036ea:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80036ee:	490b      	ldr	r1, [pc, #44]	@ (800371c <System_Init+0xc8>)
 80036f0:	480b      	ldr	r0, [pc, #44]	@ (8003720 <System_Init+0xcc>)
 80036f2:	f013 f837 	bl	8016764 <HAL_UARTEx_ReceiveToIdle_DMA>

	LED_Start(GRN_LED, MEDIUM, HALF);
 80036f6:	2206      	movs	r2, #6
 80036f8:	2101      	movs	r1, #1
 80036fa:	2008      	movs	r0, #8
 80036fc:	f000 fa6c 	bl	8003bd8 <LED_Start>
}
 8003700:	bf00      	nop
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20004f84 	.word	0x20004f84
 8003708:	080045c7 	.word	0x080045c7
 800370c:	0800461f 	.word	0x0800461f
 8003710:	200002a0 	.word	0x200002a0
 8003714:	20001784 	.word	0x20001784
 8003718:	200041c0 	.word	0x200041c0
 800371c:	20004f94 	.word	0x20004f94
 8003720:	200004bc 	.word	0x200004bc

08003724 <FatFS_Init>:

/*-----INIZiALIZZAZIONE MEMORIE-----*/
void FatFS_Init(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	75fb      	strb	r3, [r7, #23]
	MKFS_PARM mkfs_opt = {0};
 800372e:	1d3b      	adds	r3, r7, #4
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	609a      	str	r2, [r3, #8]
 8003738:	60da      	str	r2, [r3, #12]

	do
	{
		sys.RAM_Mounted = 0;
 800373a:	4b41      	ldr	r3, [pc, #260]	@ (8003840 <FatFS_Init+0x11c>)
 800373c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003740:	461a      	mov	r2, r3
 8003742:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003746:	f023 0302 	bic.w	r3, r3, #2
 800374a:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		
		mkfs_opt.fmt = FM_FAT;
 800374e:	2301      	movs	r3, #1
 8003750:	713b      	strb	r3, [r7, #4]
		mkfs_opt.au_size = 1024;
 8003752:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003756:	613b      	str	r3, [r7, #16]
		mkfs_opt.n_fat = 1;
 8003758:	2301      	movs	r3, #1
 800375a:	717b      	strb	r3, [r7, #5]
		mkfs_opt.align = 1;
 800375c:	2301      	movs	r3, #1
 800375e:	60bb      	str	r3, [r7, #8]

		fRes = f_mkfs("/ram", &mkfs_opt, psram_fs.win, sizeof(psram_fs.win));
 8003760:	1d39      	adds	r1, r7, #4
 8003762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003766:	4a37      	ldr	r2, [pc, #220]	@ (8003844 <FatFS_Init+0x120>)
 8003768:	4837      	ldr	r0, [pc, #220]	@ (8003848 <FatFS_Init+0x124>)
 800376a:	f007 fb8f 	bl	800ae8c <f_mkfs>
 800376e:	4603      	mov	r3, r0
 8003770:	75fb      	strb	r3, [r7, #23]
		if (fRes != FR_OK)
 8003772:	7dfb      	ldrb	r3, [r7, #23]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d114      	bne.n	80037a2 <FatFS_Init+0x7e>
		{
			break;
		}

		fRes = f_mount(&psram_fs, "/ram", 1);
 8003778:	2201      	movs	r2, #1
 800377a:	4933      	ldr	r1, [pc, #204]	@ (8003848 <FatFS_Init+0x124>)
 800377c:	4833      	ldr	r0, [pc, #204]	@ (800384c <FatFS_Init+0x128>)
 800377e:	f006 fd03 	bl	800a188 <f_mount>
 8003782:	4603      	mov	r3, r0
 8003784:	75fb      	strb	r3, [r7, #23]

		if (fRes != FR_OK)
 8003786:	7dfb      	ldrb	r3, [r7, #23]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10c      	bne.n	80037a6 <FatFS_Init+0x82>
		{
			break;
		}

		sys.RAM_Mounted = 1;
 800378c:	4b2c      	ldr	r3, [pc, #176]	@ (8003840 <FatFS_Init+0x11c>)
 800378e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003792:	461a      	mov	r2, r3
 8003794:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003798:	f043 0302 	orr.w	r3, r3, #2
 800379c:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 80037a0:	e002      	b.n	80037a8 <FatFS_Init+0x84>
			break;
 80037a2:	bf00      	nop
 80037a4:	e000      	b.n	80037a8 <FatFS_Init+0x84>
			break;
 80037a6:	bf00      	nop
	} while (1);

	do
	{
		sys.FLASH_Mounted = 0;
 80037a8:	4b25      	ldr	r3, [pc, #148]	@ (8003840 <FatFS_Init+0x11c>)
 80037aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037ae:	461a      	mov	r2, r3
 80037b0:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80037b4:	f023 0304 	bic.w	r3, r3, #4
 80037b8:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		fRes = f_mount(&flash_fs, "/flash", 1);
 80037bc:	2201      	movs	r2, #1
 80037be:	4924      	ldr	r1, [pc, #144]	@ (8003850 <FatFS_Init+0x12c>)
 80037c0:	4824      	ldr	r0, [pc, #144]	@ (8003854 <FatFS_Init+0x130>)
 80037c2:	f006 fce1 	bl	800a188 <f_mount>
 80037c6:	4603      	mov	r3, r0
 80037c8:	75fb      	strb	r3, [r7, #23]

		if (fRes == FR_NO_FILESYSTEM)
 80037ca:	7dfb      	ldrb	r3, [r7, #23]
 80037cc:	2b0d      	cmp	r3, #13
 80037ce:	d124      	bne.n	800381a <FatFS_Init+0xf6>
		{
			memset((void *)&mkfs_opt, 0, sizeof(mkfs_opt));
 80037d0:	1d3b      	adds	r3, r7, #4
 80037d2:	2210      	movs	r2, #16
 80037d4:	2100      	movs	r1, #0
 80037d6:	4618      	mov	r0, r3
 80037d8:	f013 f902 	bl	80169e0 <memset>
			mkfs_opt.fmt = FM_FAT;
 80037dc:	2301      	movs	r3, #1
 80037de:	713b      	strb	r3, [r7, #4]
			mkfs_opt.au_size = 4096;    
 80037e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037e4:	613b      	str	r3, [r7, #16]
			mkfs_opt.n_fat = 1;
 80037e6:	2301      	movs	r3, #1
 80037e8:	717b      	strb	r3, [r7, #5]
			mkfs_opt.align = 1;
 80037ea:	2301      	movs	r3, #1
 80037ec:	60bb      	str	r3, [r7, #8]

			fRes = f_mkfs("/flash", &mkfs_opt, flash_fs.win, sizeof(flash_fs.win));
 80037ee:	1d39      	adds	r1, r7, #4
 80037f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037f4:	4a18      	ldr	r2, [pc, #96]	@ (8003858 <FatFS_Init+0x134>)
 80037f6:	4816      	ldr	r0, [pc, #88]	@ (8003850 <FatFS_Init+0x12c>)
 80037f8:	f007 fb48 	bl	800ae8c <f_mkfs>
 80037fc:	4603      	mov	r3, r0
 80037fe:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 8003800:	7dfb      	ldrb	r3, [r7, #23]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d114      	bne.n	8003830 <FatFS_Init+0x10c>
			{
				break;
			}

			fRes = f_mount(&flash_fs, "/flash", 1);
 8003806:	2201      	movs	r2, #1
 8003808:	4911      	ldr	r1, [pc, #68]	@ (8003850 <FatFS_Init+0x12c>)
 800380a:	4812      	ldr	r0, [pc, #72]	@ (8003854 <FatFS_Init+0x130>)
 800380c:	f006 fcbc 	bl	800a188 <f_mount>
 8003810:	4603      	mov	r3, r0
 8003812:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 8003814:	7dfb      	ldrb	r3, [r7, #23]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10c      	bne.n	8003834 <FatFS_Init+0x110>
			{
				break;
			}
		}

		sys.FLASH_Mounted = 1;
 800381a:	4b09      	ldr	r3, [pc, #36]	@ (8003840 <FatFS_Init+0x11c>)
 800381c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003820:	461a      	mov	r2, r3
 8003822:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003826:	f043 0304 	orr.w	r3, r3, #4
 800382a:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 800382e:	e002      	b.n	8003836 <FatFS_Init+0x112>
				break;
 8003830:	bf00      	nop
 8003832:	e000      	b.n	8003836 <FatFS_Init+0x112>
				break;
 8003834:	bf00      	nop
	} while (1);


}
 8003836:	bf00      	nop
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	200005d8 	.word	0x200005d8
 8003844:	200018ac 	.word	0x200018ac
 8003848:	08017ec0 	.word	0x08017ec0
 800384c:	20001878 	.word	0x20001878
 8003850:	08017ec8 	.word	0x08017ec8
 8003854:	200028ac 	.word	0x200028ac
 8003858:	200028e0 	.word	0x200028e0

0800385c <Acc_Init>:

/*-----INIZiALIZZAZIONE ACCELEROMETRO-----*/
int Acc_Init(stmdev_ctx_t* acc, uint16_t fs)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	807b      	strh	r3, [r7, #2]
	lsm6dsv16x_reset_t rst;
	lsm6dsv16x_pin_int_route_t pin_int = {0};
 8003868:	f107 0310 	add.w	r3, r7, #16
 800386c:	2100      	movs	r1, #0
 800386e:	460a      	mov	r2, r1
 8003870:	801a      	strh	r2, [r3, #0]
 8003872:	460a      	mov	r2, r1
 8003874:	709a      	strb	r2, [r3, #2]
	uint8_t acc_whoamI = 0;
 8003876:	2300      	movs	r3, #0
 8003878:	73fb      	strb	r3, [r7, #15]
	uint8_t wmi_cnt = 0;
 800387a:	2300      	movs	r3, #0
 800387c:	75fb      	strb	r3, [r7, #23]

	pin_int.fifo_th = PROPERTY_ENABLE;
 800387e:	7c3b      	ldrb	r3, [r7, #16]
 8003880:	f043 0308 	orr.w	r3, r3, #8
 8003884:	743b      	strb	r3, [r7, #16]


	lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 8003886:	f107 030f 	add.w	r3, r7, #15
 800388a:	4619      	mov	r1, r3
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fb6d 	bl	8003f6c <lsm6dsv16x_device_id_get>
	if (acc_whoamI != LSM6DSV16X_ID)
 8003892:	7bfb      	ldrb	r3, [r7, #15]
 8003894:	2b70      	cmp	r3, #112	@ 0x70
 8003896:	d020      	beq.n	80038da <Acc_Init+0x7e>
		while (acc_whoamI != LSM6DSV16X_ID)
 8003898:	e01c      	b.n	80038d4 <Acc_Init+0x78>
		{
			lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 800389a:	f107 030f 	add.w	r3, r7, #15
 800389e:	4619      	mov	r1, r3
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 fb63 	bl	8003f6c <lsm6dsv16x_device_id_get>
			wmi_cnt++;
 80038a6:	7dfb      	ldrb	r3, [r7, #23]
 80038a8:	3301      	adds	r3, #1
 80038aa:	75fb      	strb	r3, [r7, #23]
			if (wmi_cnt == 3)
 80038ac:	7dfb      	ldrb	r3, [r7, #23]
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d110      	bne.n	80038d4 <Acc_Init+0x78>
			{
				sys.ACC_Present = 0;
 80038b2:	4b51      	ldr	r3, [pc, #324]	@ (80039f8 <Acc_Init+0x19c>)
 80038b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038b8:	461a      	mov	r2, r3
 80038ba:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80038be:	f023 0301 	bic.w	r3, r3, #1
 80038c2:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
				flags.ACC_Complete = 1;
 80038c6:	4a4d      	ldr	r2, [pc, #308]	@ (80039fc <Acc_Init+0x1a0>)
 80038c8:	7813      	ldrb	r3, [r2, #0]
 80038ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038ce:	7013      	strb	r3, [r2, #0]
				return 0;
 80038d0:	2300      	movs	r3, #0
 80038d2:	e08c      	b.n	80039ee <Acc_Init+0x192>
		while (acc_whoamI != LSM6DSV16X_ID)
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	2b70      	cmp	r3, #112	@ 0x70
 80038d8:	d1df      	bne.n	800389a <Acc_Init+0x3e>
			}
		}
	sys.ACC_Present = 1;
 80038da:	4b47      	ldr	r3, [pc, #284]	@ (80039f8 <Acc_Init+0x19c>)
 80038dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038e0:	461a      	mov	r2, r3
 80038e2:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80038e6:	f043 0301 	orr.w	r3, r3, #1
 80038ea:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
	lsm6dsv16x_reset_set(acc, LSM6DSV16X_GLOBAL_RST);
 80038ee:	2101      	movs	r1, #1
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 fa95 	bl	8003e20 <lsm6dsv16x_reset_set>
	do {
		lsm6dsv16x_reset_get(acc, &rst);
 80038f6:	f107 0316 	add.w	r3, r7, #22
 80038fa:	4619      	mov	r1, r3
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 fadf 	bl	8003ec0 <lsm6dsv16x_reset_get>
		HAL_Delay(10);
 8003902:	200a      	movs	r0, #10
 8003904:	f007 ffb0 	bl	800b868 <HAL_Delay>
	} while (rst != LSM6DSV16X_READY);
 8003908:	7dbb      	ldrb	r3, [r7, #22]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f3      	bne.n	80038f6 <Acc_Init+0x9a>

	lsm6dsv16x_block_data_update_set(acc, PROPERTY_ENABLE);
 800390e:	2101      	movs	r1, #1
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 fc28 	bl	8004166 <lsm6dsv16x_block_data_update_set>
	lsm6dsv16x_ui_i2c_i3c_mode_set(acc, LSM6DSV16X_I2C_I3C_DISABLE);
 8003916:	2101      	movs	r1, #1
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 fe2e 	bl	800457a <lsm6dsv16x_ui_i2c_i3c_mode_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_HIGH_PERFORMANCE_MD);
 800391e:	2100      	movs	r1, #0
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fb85 	bl	8004030 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_HIGH_PERFORMANCE_MD);
 8003926:	2100      	movs	r1, #0
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 fbf6 	bl	800411a <lsm6dsv16x_gy_mode_set>
	if(fs == 1600)
 800392e:	887b      	ldrh	r3, [r7, #2]
 8003930:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003934:	d104      	bne.n	8003940 <Acc_Init+0xe4>
	{
		lsm6dsv16x_fifo_xl_batch_set(acc, LSM6DSV16X_XL_BATCHED_AT_1920Hz);
 8003936:	210a      	movs	r1, #10
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 fdac 	bl	8004496 <lsm6dsv16x_fifo_xl_batch_set>
 800393e:	e00b      	b.n	8003958 <Acc_Init+0xfc>
	}
	else if(fs == 800)
 8003940:	887b      	ldrh	r3, [r7, #2]
 8003942:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8003946:	d104      	bne.n	8003952 <Acc_Init+0xf6>
	{
		lsm6dsv16x_fifo_xl_batch_set(acc, LSM6DSV16X_XL_BATCHED_AT_960Hz);
 8003948:	2109      	movs	r1, #9
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 fda3 	bl	8004496 <lsm6dsv16x_fifo_xl_batch_set>
 8003950:	e002      	b.n	8003958 <Acc_Init+0xfc>
	}
	else
	{
		return -1;
 8003952:	f04f 33ff 	mov.w	r3, #4294967295
 8003956:	e04a      	b.n	80039ee <Acc_Init+0x192>
	}
	lsm6dsv16x_fifo_gy_batch_set(acc, LSM6DSV16X_GY_NOT_BATCHED);
 8003958:	2100      	movs	r1, #0
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fdc1 	bl	80044e2 <lsm6dsv16x_fifo_gy_batch_set>
	lsm6dsv16x_fifo_mode_set(acc, LSM6DSV16X_BYPASS_MODE);
 8003960:	2100      	movs	r1, #0
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fde3 	bl	800452e <lsm6dsv16x_fifo_mode_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 8003968:	2100      	movs	r1, #0
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 fb0f 	bl	8003f8e <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_gy_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 8003970:	2100      	movs	r1, #0
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fb82 	bl	800407c <lsm6dsv16x_gy_data_rate_set>
	if(fs == 1600)
 8003978:	887b      	ldrh	r3, [r7, #2]
 800397a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800397e:	d104      	bne.n	800398a <Acc_Init+0x12e>
	{
		lsm6dsv16x_odr_trig_cfg_set(acc, 32);  //800SPS
 8003980:	2120      	movs	r1, #32
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fc15 	bl	80041b2 <lsm6dsv16x_odr_trig_cfg_set>
 8003988:	e00b      	b.n	80039a2 <Acc_Init+0x146>
	}
	else if(fs == 800)
 800398a:	887b      	ldrh	r3, [r7, #2]
 800398c:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8003990:	d104      	bne.n	800399c <Acc_Init+0x140>
	{
		lsm6dsv16x_odr_trig_cfg_set(acc, 16);  //800SPS
 8003992:	2110      	movs	r1, #16
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 fc0c 	bl	80041b2 <lsm6dsv16x_odr_trig_cfg_set>
 800399a:	e002      	b.n	80039a2 <Acc_Init+0x146>
	}
	else
	{
		return -1;
 800399c:	f04f 33ff 	mov.w	r3, #4294967295
 80039a0:	e025      	b.n	80039ee <Acc_Init+0x192>
	}
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_ODR_TRIGGERED_MD);
 80039a2:	2103      	movs	r1, #3
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 fb43 	bl	8004030 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_ODR_TRIGGERED_MD);
 80039aa:	2103      	movs	r1, #3
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 fbb4 	bl	800411a <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_den_polarity_set(acc, LSM6DSV16X_DEN_ACT_HIGH);
 80039b2:	2101      	movs	r1, #1
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 fd28 	bl	800440a <lsm6dsv16x_den_polarity_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_AT_960Hz);
 80039ba:	2109      	movs	r1, #9
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 fae6 	bl	8003f8e <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_xl_full_scale_set(acc, LSM6DSV16X_2g);
 80039c2:	2100      	movs	r1, #0
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 fc43 	bl	8004250 <lsm6dsv16x_xl_full_scale_set>
	lsm6dsv16x_gy_full_scale_set(acc, LSM6DSV16X_2000dps);
 80039ca:	2104      	movs	r1, #4
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 fc19 	bl	8004204 <lsm6dsv16x_gy_full_scale_set>
	lsm6dsv16x_fifo_watermark_set(acc, ACC_FIFO_WATERMARK);
 80039d2:	21c8      	movs	r1, #200	@ 0xc8
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 fd3e 	bl	8004456 <lsm6dsv16x_fifo_watermark_set>
	lsm6dsv16x_pin_int1_route_set(acc, &pin_int);
 80039da:	f107 0310 	add.w	r3, r7, #16
 80039de:	4619      	mov	r1, r3
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 fc5b 	bl	800429c <lsm6dsv16x_pin_int1_route_set>

	__HAL_GPIO_EXTI_CLEAR_IT(ACC_INTERRUPT);
 80039e6:	4b06      	ldr	r3, [pc, #24]	@ (8003a00 <Acc_Init+0x1a4>)
 80039e8:	2204      	movs	r2, #4
 80039ea:	615a      	str	r2, [r3, #20]
	return 0;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	200005d8 	.word	0x200005d8
 80039fc:	20001780 	.word	0x20001780
 8003a00:	40010400 	.word	0x40010400

08003a04 <Config_Init>:

/*-----INIZiALIZZAZIONE CONFIGURAZIONE-----*/
void Config_Init(void)
{
 8003a04:	b5b0      	push	{r4, r5, r7, lr}
 8003a06:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
    FIL config_file;
    UINT bytes_read;
    UINT bytes_written;

    if (f_open(&config_file, CONFIG_FILE, FA_READ) == FR_OK) 
 8003a0e:	f107 0318 	add.w	r3, r7, #24
 8003a12:	3b0c      	subs	r3, #12
 8003a14:	2201      	movs	r2, #1
 8003a16:	495b      	ldr	r1, [pc, #364]	@ (8003b84 <Config_Init+0x180>)
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f006 fbff 	bl	800a21c <f_open>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d11f      	bne.n	8003a64 <Config_Init+0x60>
	{
        if (f_read(&config_file, &config, sizeof(config), &bytes_read) == FR_OK && bytes_read == sizeof(config))
 8003a24:	f107 0318 	add.w	r3, r7, #24
 8003a28:	3b10      	subs	r3, #16
 8003a2a:	f107 0018 	add.w	r0, r7, #24
 8003a2e:	380c      	subs	r0, #12
 8003a30:	22f4      	movs	r2, #244	@ 0xf4
 8003a32:	4955      	ldr	r1, [pc, #340]	@ (8003b88 <Config_Init+0x184>)
 8003a34:	f006 fd8a 	bl	800a54c <f_read>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10c      	bne.n	8003a58 <Config_Init+0x54>
 8003a3e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003a42:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8003a46:	2bf4      	cmp	r3, #244	@ 0xf4
 8003a48:	d106      	bne.n	8003a58 <Config_Init+0x54>
		{
			f_close(&config_file);
 8003a4a:	f107 0318 	add.w	r3, r7, #24
 8003a4e:	3b0c      	subs	r3, #12
 8003a50:	4618      	mov	r0, r3
 8003a52:	f007 f8d7 	bl	800ac04 <f_close>
			return;
 8003a56:	e08f      	b.n	8003b78 <Config_Init+0x174>
        }
        f_close(&config_file);
 8003a58:	f107 0318 	add.w	r3, r7, #24
 8003a5c:	3b0c      	subs	r3, #12
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f007 f8d0 	bl	800ac04 <f_close>
    }

    config.device_id = 0;
 8003a64:	4b48      	ldr	r3, [pc, #288]	@ (8003b88 <Config_Init+0x184>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	701a      	strb	r2, [r3, #0]
	config.samp_freq = 800;
 8003a6a:	4b47      	ldr	r3, [pc, #284]	@ (8003b88 <Config_Init+0x184>)
 8003a6c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003a70:	805a      	strh	r2, [r3, #2]
	config.buffering_secs = 30;
 8003a72:	4b45      	ldr	r3, [pc, #276]	@ (8003b88 <Config_Init+0x184>)
 8003a74:	221e      	movs	r2, #30
 8003a76:	711a      	strb	r2, [r3, #4]
	config.connection_timeout_ms = 60000;
 8003a78:	4b43      	ldr	r3, [pc, #268]	@ (8003b88 <Config_Init+0x184>)
 8003a7a:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8003a7e:	609a      	str	r2, [r3, #8]
	config.log_period_ms = 10000;
 8003a80:	4b41      	ldr	r3, [pc, #260]	@ (8003b88 <Config_Init+0x184>)
 8003a82:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a86:	60da      	str	r2, [r3, #12]
	config.hammer_th = 4096;
 8003a88:	4b3f      	ldr	r3, [pc, #252]	@ (8003b88 <Config_Init+0x184>)
 8003a8a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a8e:	821a      	strh	r2, [r3, #16]
    for(int i = 0; i < 24; i++) 
 8003a90:	2300      	movs	r3, #0
 8003a92:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8003a96:	f102 0214 	add.w	r2, r2, #20
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	e021      	b.n	8003ae2 <Config_Init+0xde>
	{
        config.low_th[i] = 0;
 8003a9e:	4a3a      	ldr	r2, [pc, #232]	@ (8003b88 <Config_Init+0x184>)
 8003aa0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8003aa4:	f103 0314 	add.w	r3, r3, #20
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3308      	adds	r3, #8
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	4413      	add	r3, r2
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	805a      	strh	r2, [r3, #2]
        config.high_th[i] = 4096;
 8003ab4:	4a34      	ldr	r2, [pc, #208]	@ (8003b88 <Config_Init+0x184>)
 8003ab6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8003aba:	f103 0314 	add.w	r3, r3, #20
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	3320      	adds	r3, #32
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003aca:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < 24; i++) 
 8003acc:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8003ad0:	f103 0314 	add.w	r3, r3, #20
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8003adc:	f102 0214 	add.w	r2, r2, #20
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8003ae6:	f103 0314 	add.w	r3, r3, #20
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b17      	cmp	r3, #23
 8003aee:	ddd6      	ble.n	8003a9e <Config_Init+0x9a>
    }
    strcpy(config.tcp_IPaddress, "esdplab.unipa.it");
 8003af0:	4a26      	ldr	r2, [pc, #152]	@ (8003b8c <Config_Init+0x188>)
 8003af2:	4b27      	ldr	r3, [pc, #156]	@ (8003b90 <Config_Init+0x18c>)
 8003af4:	4615      	mov	r5, r2
 8003af6:	461c      	mov	r4, r3
 8003af8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003afa:	6028      	str	r0, [r5, #0]
 8003afc:	6069      	str	r1, [r5, #4]
 8003afe:	60aa      	str	r2, [r5, #8]
 8003b00:	60eb      	str	r3, [r5, #12]
 8003b02:	7823      	ldrb	r3, [r4, #0]
 8003b04:	742b      	strb	r3, [r5, #16]
    strcpy(config.tcp_Port, "8080");
 8003b06:	4b23      	ldr	r3, [pc, #140]	@ (8003b94 <Config_Init+0x190>)
 8003b08:	4a23      	ldr	r2, [pc, #140]	@ (8003b98 <Config_Init+0x194>)
 8003b0a:	6810      	ldr	r0, [r2, #0]
 8003b0c:	6018      	str	r0, [r3, #0]
 8003b0e:	7912      	ldrb	r2, [r2, #4]
 8003b10:	711a      	strb	r2, [r3, #4]

    if (f_open(&config_file, CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8003b12:	f107 0318 	add.w	r3, r7, #24
 8003b16:	3b0c      	subs	r3, #12
 8003b18:	220a      	movs	r2, #10
 8003b1a:	491a      	ldr	r1, [pc, #104]	@ (8003b84 <Config_Init+0x180>)
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f006 fb7d 	bl	800a21c <f_open>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d126      	bne.n	8003b76 <Config_Init+0x172>
    {
        return;
    }

    if (f_write(&config_file, &config, sizeof(Config_Typedef), &bytes_written) != FR_OK || bytes_written != sizeof(Config_Typedef)) 
 8003b28:	f107 0318 	add.w	r3, r7, #24
 8003b2c:	3b14      	subs	r3, #20
 8003b2e:	f107 0018 	add.w	r0, r7, #24
 8003b32:	380c      	subs	r0, #12
 8003b34:	22f4      	movs	r2, #244	@ 0xf4
 8003b36:	4914      	ldr	r1, [pc, #80]	@ (8003b88 <Config_Init+0x184>)
 8003b38:	f006 fe5b 	bl	800a7f2 <f_write>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d105      	bne.n	8003b4e <Config_Init+0x14a>
 8003b42:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003b46:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8003b4a:	2bf4      	cmp	r3, #244	@ 0xf4
 8003b4c:	d006      	beq.n	8003b5c <Config_Init+0x158>
	{
        f_close(&config_file);
 8003b4e:	f107 0318 	add.w	r3, r7, #24
 8003b52:	3b0c      	subs	r3, #12
 8003b54:	4618      	mov	r0, r3
 8003b56:	f007 f855 	bl	800ac04 <f_close>
        return;
 8003b5a:	e00d      	b.n	8003b78 <Config_Init+0x174>
    }
    
    f_sync(&config_file);
 8003b5c:	f107 0318 	add.w	r3, r7, #24
 8003b60:	3b0c      	subs	r3, #12
 8003b62:	4618      	mov	r0, r3
 8003b64:	f006 ffce 	bl	800ab04 <f_sync>
    f_close(&config_file);
 8003b68:	f107 0318 	add.w	r3, r7, #24
 8003b6c:	3b0c      	subs	r3, #12
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f007 f848 	bl	800ac04 <f_close>
 8003b74:	e000      	b.n	8003b78 <Config_Init+0x174>
        return;
 8003b76:	bf00      	nop
}
 8003b78:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bdb0      	pop	{r4, r5, r7, pc}
 8003b82:	bf00      	nop
 8003b84:	08017ed0 	.word	0x08017ed0
 8003b88:	20001784 	.word	0x20001784
 8003b8c:	200017f6 	.word	0x200017f6
 8003b90:	08017ee4 	.word	0x08017ee4
 8003b94:	20001836 	.word	0x20001836
 8003b98:	08017ef8 	.word	0x08017ef8

08003b9c <LED_Init>:
#include "peripherals.h"


/*-----INIZIALIZZAZIONE LEDs-----*/
void LED_Init(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
    LED_TIMER->Instance->CCR1 = 0;
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd4 <LED_Init+0x38>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	635a      	str	r2, [r3, #52]	@ 0x34
    LED_TIMER->Instance->CCR2 = 0;
 8003ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd4 <LED_Init+0x38>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2200      	movs	r2, #0
 8003bae:	639a      	str	r2, [r3, #56]	@ 0x38
    LED_TIMER->Instance->CCR3 = 0;
 8003bb0:	4b08      	ldr	r3, [pc, #32]	@ (8003bd4 <LED_Init+0x38>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(LED_TIMER, GRN_LED);
 8003bb8:	2108      	movs	r1, #8
 8003bba:	4806      	ldr	r0, [pc, #24]	@ (8003bd4 <LED_Init+0x38>)
 8003bbc:	f00f fc98 	bl	80134f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(LED_TIMER, ORG_LED);
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	4804      	ldr	r0, [pc, #16]	@ (8003bd4 <LED_Init+0x38>)
 8003bc4:	f00f fc94 	bl	80134f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(LED_TIMER, RED_LED);
 8003bc8:	2104      	movs	r1, #4
 8003bca:	4802      	ldr	r0, [pc, #8]	@ (8003bd4 <LED_Init+0x38>)
 8003bcc:	f00f fc90 	bl	80134f0 <HAL_TIM_PWM_Start>
}
 8003bd0:	bf00      	nop
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20000304 	.word	0x20000304

08003bd8 <LED_Start>:

/*------ACCENSIONE LED------*/
void LED_Start(uint32_t LED, uint8_t freq, uint8_t duty)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	70fb      	strb	r3, [r7, #3]
 8003be4:	4613      	mov	r3, r2
 8003be6:	70bb      	strb	r3, [r7, #2]
    TIM_HandleTypeDef *htim = LED_TIMER;
 8003be8:	4b5d      	ldr	r3, [pc, #372]	@ (8003d60 <LED_Start+0x188>)
 8003bea:	613b      	str	r3, [r7, #16]
	uint16_t pulse = 0;
 8003bec:	2300      	movs	r3, #0
 8003bee:	82fb      	strh	r3, [r7, #22]

    uint16_t prescaler = (uint16_t)(80000000 / 5000 - 1);
 8003bf0:	f643 637f 	movw	r3, #15999	@ 0x3e7f
 8003bf4:	81fb      	strh	r3, [r7, #14]
    uint16_t period = 0;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	82bb      	strh	r3, [r7, #20]

    switch(freq)
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	f200 80a4 	bhi.w	8003d4a <LED_Start+0x172>
 8003c02:	a201      	add	r2, pc, #4	@ (adr r2, 8003c08 <LED_Start+0x30>)
 8003c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c08:	08003c19 	.word	0x08003c19
 8003c0c:	08003c31 	.word	0x08003c31
 8003c10:	08003c41 	.word	0x08003c41
 8003c14:	08003c7d 	.word	0x08003c7d
    {
        case FAST:  
            period = (uint16_t)((80000000 / prescaler / 4) - 1);
 8003c18:	89fb      	ldrh	r3, [r7, #14]
 8003c1a:	4a52      	ldr	r2, [pc, #328]	@ (8003d64 <LED_Start+0x18c>)
 8003c1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	da00      	bge.n	8003c26 <LED_Start+0x4e>
 8003c24:	3303      	adds	r3, #3
 8003c26:	109b      	asrs	r3, r3, #2
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	82bb      	strh	r3, [r7, #20]
            break;
 8003c2e:	e043      	b.n	8003cb8 <LED_Start+0xe0>
        case MEDIUM:
            period = (uint16_t)((80000000 / prescaler / 1) - 1);
 8003c30:	89fb      	ldrh	r3, [r7, #14]
 8003c32:	4a4c      	ldr	r2, [pc, #304]	@ (8003d64 <LED_Start+0x18c>)
 8003c34:	fb92 f3f3 	sdiv	r3, r2, r3
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	82bb      	strh	r3, [r7, #20]
            break;
 8003c3e:	e03b      	b.n	8003cb8 <LED_Start+0xe0>
        case SLOW:
            period = (uint16_t)((80000000 / prescaler / 0.5) - 1);
 8003c40:	89fb      	ldrh	r3, [r7, #14]
 8003c42:	4a48      	ldr	r2, [pc, #288]	@ (8003d64 <LED_Start+0x18c>)
 8003c44:	fb92 f3f3 	sdiv	r3, r2, r3
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fc fc7b 	bl	8000544 <__aeabi_i2d>
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	4b45      	ldr	r3, [pc, #276]	@ (8003d68 <LED_Start+0x190>)
 8003c54:	f7fc fe0a 	bl	800086c <__aeabi_ddiv>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	4619      	mov	r1, r3
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	4b41      	ldr	r3, [pc, #260]	@ (8003d6c <LED_Start+0x194>)
 8003c66:	f7fc fb1f 	bl	80002a8 <__aeabi_dsub>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4610      	mov	r0, r2
 8003c70:	4619      	mov	r1, r3
 8003c72:	f7fc fee3 	bl	8000a3c <__aeabi_d2uiz>
 8003c76:	4603      	mov	r3, r0
 8003c78:	82bb      	strh	r3, [r7, #20]
            break;
 8003c7a:	e01d      	b.n	8003cb8 <LED_Start+0xe0>
        case VERY_SLOW:
            period = (uint16_t)((80000000 / prescaler / 0.1) - 1);
 8003c7c:	89fb      	ldrh	r3, [r7, #14]
 8003c7e:	4a39      	ldr	r2, [pc, #228]	@ (8003d64 <LED_Start+0x18c>)
 8003c80:	fb92 f3f3 	sdiv	r3, r2, r3
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fc fc5d 	bl	8000544 <__aeabi_i2d>
 8003c8a:	a333      	add	r3, pc, #204	@ (adr r3, 8003d58 <LED_Start+0x180>)
 8003c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c90:	f7fc fdec 	bl	800086c <__aeabi_ddiv>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4610      	mov	r0, r2
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	4b32      	ldr	r3, [pc, #200]	@ (8003d6c <LED_Start+0x194>)
 8003ca2:	f7fc fb01 	bl	80002a8 <__aeabi_dsub>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4610      	mov	r0, r2
 8003cac:	4619      	mov	r1, r3
 8003cae:	f7fc fec5 	bl	8000a3c <__aeabi_d2uiz>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	82bb      	strh	r3, [r7, #20]
            break;
 8003cb6:	bf00      	nop
        default:
            return;
    }

	switch(duty)
 8003cb8:	78bb      	ldrb	r3, [r7, #2]
 8003cba:	3b04      	subs	r3, #4
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d846      	bhi.n	8003d4e <LED_Start+0x176>
 8003cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc8 <LED_Start+0xf0>)
 8003cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc6:	bf00      	nop
 8003cc8:	08003cd9 	.word	0x08003cd9
 8003ccc:	08003cdf 	.word	0x08003cdf
 8003cd0:	08003cf3 	.word	0x08003cf3
 8003cd4:	08003cfb 	.word	0x08003cfb
	{
		case FULL:
			pulse = period; 
 8003cd8:	8abb      	ldrh	r3, [r7, #20]
 8003cda:	82fb      	strh	r3, [r7, #22]
		    break;
 8003cdc:	e011      	b.n	8003d02 <LED_Start+0x12a>
        case HIGH:
			pulse = period * 3 / 4;
 8003cde:	8aba      	ldrh	r2, [r7, #20]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	4413      	add	r3, r2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	da00      	bge.n	8003cec <LED_Start+0x114>
 8003cea:	3303      	adds	r3, #3
 8003cec:	109b      	asrs	r3, r3, #2
 8003cee:	82fb      	strh	r3, [r7, #22]
			break;
 8003cf0:	e007      	b.n	8003d02 <LED_Start+0x12a>
		case HALF:
			pulse = period / 2;
 8003cf2:	8abb      	ldrh	r3, [r7, #20]
 8003cf4:	085b      	lsrs	r3, r3, #1
 8003cf6:	82fb      	strh	r3, [r7, #22]
			break;
 8003cf8:	e003      	b.n	8003d02 <LED_Start+0x12a>
		case LOW:
			pulse = period / 4;
 8003cfa:	8abb      	ldrh	r3, [r7, #20]
 8003cfc:	089b      	lsrs	r3, r3, #2
 8003cfe:	82fb      	strh	r3, [r7, #22]
			break;
 8003d00:	bf00      	nop
        default:
            return;
	}

    // Imposta periodo e prescaler
    htim->Instance->PSC = prescaler;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	89fa      	ldrh	r2, [r7, #14]
 8003d08:	629a      	str	r2, [r3, #40]	@ 0x28
    htim->Instance->ARR = period;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	8aba      	ldrh	r2, [r7, #20]
 8003d10:	62da      	str	r2, [r3, #44]	@ 0x2c
	switch(LED)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d009      	beq.n	8003d2c <LED_Start+0x154>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d818      	bhi.n	8003d50 <LED_Start+0x178>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d008      	beq.n	8003d36 <LED_Start+0x15e>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d00a      	beq.n	8003d40 <LED_Start+0x168>
 8003d2a:	e011      	b.n	8003d50 <LED_Start+0x178>
    {
    case GRN_LED:
        LED_TIMER->Instance->CCR3 = pulse;
 8003d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d60 <LED_Start+0x188>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	8afa      	ldrh	r2, [r7, #22]
 8003d32:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8003d34:	e00c      	b.n	8003d50 <LED_Start+0x178>
    case ORG_LED:
        LED_TIMER->Instance->CCR1 = pulse;
 8003d36:	4b0a      	ldr	r3, [pc, #40]	@ (8003d60 <LED_Start+0x188>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	8afa      	ldrh	r2, [r7, #22]
 8003d3c:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8003d3e:	e007      	b.n	8003d50 <LED_Start+0x178>
    case RED_LED:
        LED_TIMER->Instance->CCR2 = pulse;
 8003d40:	4b07      	ldr	r3, [pc, #28]	@ (8003d60 <LED_Start+0x188>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	8afa      	ldrh	r2, [r7, #22]
 8003d46:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8003d48:	e002      	b.n	8003d50 <LED_Start+0x178>
            return;
 8003d4a:	bf00      	nop
 8003d4c:	e000      	b.n	8003d50 <LED_Start+0x178>
            return;
 8003d4e:	bf00      	nop
    }
}
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	9999999a 	.word	0x9999999a
 8003d5c:	3fb99999 	.word	0x3fb99999
 8003d60:	20000304 	.word	0x20000304
 8003d64:	04c4b400 	.word	0x04c4b400
 8003d68:	3fe00000 	.word	0x3fe00000
 8003d6c:	3ff00000 	.word	0x3ff00000

08003d70 <LED_Stop>:

/*------SPEGNIMENTO LED------*/
void LED_Stop(uint32_t LED)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	switch(LED)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d009      	beq.n	8003d92 <LED_Stop+0x22>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d815      	bhi.n	8003db0 <LED_Stop+0x40>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d008      	beq.n	8003d9c <LED_Stop+0x2c>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d00a      	beq.n	8003da6 <LED_Stop+0x36>
        break;
    case RED_LED:
        LED_TIMER->Instance->CCR2 = 0;
        break;
    }
}
 8003d90:	e00e      	b.n	8003db0 <LED_Stop+0x40>
        LED_TIMER->Instance->CCR3 = 0;
 8003d92:	4b0a      	ldr	r3, [pc, #40]	@ (8003dbc <LED_Stop+0x4c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2200      	movs	r2, #0
 8003d98:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8003d9a:	e009      	b.n	8003db0 <LED_Stop+0x40>
        LED_TIMER->Instance->CCR1 = 0;
 8003d9c:	4b07      	ldr	r3, [pc, #28]	@ (8003dbc <LED_Stop+0x4c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2200      	movs	r2, #0
 8003da2:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8003da4:	e004      	b.n	8003db0 <LED_Stop+0x40>
        LED_TIMER->Instance->CCR2 = 0;
 8003da6:	4b05      	ldr	r3, [pc, #20]	@ (8003dbc <LED_Stop+0x4c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2200      	movs	r2, #0
 8003dac:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8003dae:	bf00      	nop
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	20000304 	.word	0x20000304

08003dc0 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8003dc0:	b590      	push	{r4, r7, lr}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	607a      	str	r2, [r7, #4]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	460b      	mov	r3, r1
 8003dce:	72fb      	strb	r3, [r7, #11]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	685c      	ldr	r4, [r3, #4]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	68d8      	ldr	r0, [r3, #12]
 8003ddc:	893b      	ldrh	r3, [r7, #8]
 8003dde:	7af9      	ldrb	r1, [r7, #11]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	47a0      	blx	r4
 8003de4:	6178      	str	r0, [r7, #20]

  return ret;
 8003de6:	697b      	ldr	r3, [r7, #20]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	371c      	adds	r7, #28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd90      	pop	{r4, r7, pc}

08003df0 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8003df0:	b590      	push	{r4, r7, lr}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	607a      	str	r2, [r7, #4]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	72fb      	strb	r3, [r7, #11]
 8003e00:	4613      	mov	r3, r2
 8003e02:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681c      	ldr	r4, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	68d8      	ldr	r0, [r3, #12]
 8003e0c:	893b      	ldrh	r3, [r7, #8]
 8003e0e:	7af9      	ldrb	r1, [r7, #11]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	47a0      	blx	r4
 8003e14:	6178      	str	r0, [r7, #20]

  return ret;
 8003e16:	697b      	ldr	r3, [r7, #20]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd90      	pop	{r4, r7, pc}

08003e20 <lsm6dsv16x_reset_set>:
  * @param  val      Reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_set(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t val)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003e2c:	f107 020c 	add.w	r2, r7, #12
 8003e30:	2301      	movs	r3, #1
 8003e32:	2112      	movs	r1, #18
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7ff ffc3 	bl	8003dc0 <lsm6dsv16x_read_reg>
 8003e3a:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8003e3c:	f107 0210 	add.w	r2, r7, #16
 8003e40:	2301      	movs	r3, #1
 8003e42:	2101      	movs	r1, #1
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff ffbb 	bl	8003dc0 <lsm6dsv16x_read_reg>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	4413      	add	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <lsm6dsv16x_reset_set+0x3c>
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	e02d      	b.n	8003eb8 <lsm6dsv16x_reset_set+0x98>

  ctrl3.boot = ((uint8_t)val & 0x04U) >> 2;
 8003e5c:	78fb      	ldrb	r3, [r7, #3]
 8003e5e:	089b      	lsrs	r3, r3, #2
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	7b3b      	ldrb	r3, [r7, #12]
 8003e68:	f362 13c7 	bfi	r3, r2, #7, #1
 8003e6c:	733b      	strb	r3, [r7, #12]
  ctrl3.sw_reset = ((uint8_t)val & 0x02U) >> 1;
 8003e6e:	78fb      	ldrb	r3, [r7, #3]
 8003e70:	085b      	lsrs	r3, r3, #1
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	7b3b      	ldrb	r3, [r7, #12]
 8003e7a:	f362 0300 	bfi	r3, r2, #0, #1
 8003e7e:	733b      	strb	r3, [r7, #12]
  func_cfg_access.sw_por = (uint8_t)val & 0x01U;
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	7c3b      	ldrb	r3, [r7, #16]
 8003e8a:	f362 0382 	bfi	r3, r2, #2, #1
 8003e8e:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003e90:	f107 020c 	add.w	r2, r7, #12
 8003e94:	2301      	movs	r3, #1
 8003e96:	2112      	movs	r1, #18
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff ffa9 	bl	8003df0 <lsm6dsv16x_write_reg>
 8003e9e:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8003ea0:	f107 0210 	add.w	r2, r7, #16
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7ff ffa1 	bl	8003df0 <lsm6dsv16x_write_reg>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]

  return ret;
 8003eb6:	697b      	ldr	r3, [r7, #20]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <lsm6dsv16x_reset_get>:
  * @param  val      Global reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_get(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t *val)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003eca:	f107 020c 	add.w	r2, r7, #12
 8003ece:	2301      	movs	r3, #1
 8003ed0:	2112      	movs	r1, #18
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff ff74 	bl	8003dc0 <lsm6dsv16x_read_reg>
 8003ed8:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8003eda:	f107 0210 	add.w	r2, r7, #16
 8003ede:	2301      	movs	r3, #1
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7ff ff6c 	bl	8003dc0 <lsm6dsv16x_read_reg>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	4413      	add	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <lsm6dsv16x_reset_get+0x3a>
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	e033      	b.n	8003f62 <lsm6dsv16x_reset_get+0xa2>

  switch ((ctrl3.sw_reset << 2) + (ctrl3.boot << 1) + func_cfg_access.sw_por)
 8003efa:	7b3b      	ldrb	r3, [r7, #12]
 8003efc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	009a      	lsls	r2, r3, #2
 8003f04:	7b3b      	ldrb	r3, [r7, #12]
 8003f06:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	4413      	add	r3, r2
 8003f10:	7c3a      	ldrb	r2, [r7, #16]
 8003f12:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	4413      	add	r3, r2
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d81c      	bhi.n	8003f58 <lsm6dsv16x_reset_get+0x98>
 8003f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f24 <lsm6dsv16x_reset_get+0x64>)
 8003f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f24:	08003f39 	.word	0x08003f39
 8003f28:	08003f41 	.word	0x08003f41
 8003f2c:	08003f49 	.word	0x08003f49
 8003f30:	08003f59 	.word	0x08003f59
 8003f34:	08003f51 	.word	0x08003f51
  {
    case LSM6DSV16X_READY:
      *val = LSM6DSV16X_READY;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	701a      	strb	r2, [r3, #0]
      break;
 8003f3e:	e00f      	b.n	8003f60 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_GLOBAL_RST:
      *val = LSM6DSV16X_GLOBAL_RST;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	2201      	movs	r2, #1
 8003f44:	701a      	strb	r2, [r3, #0]
      break;
 8003f46:	e00b      	b.n	8003f60 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CAL_PARAM:
      *val = LSM6DSV16X_RESTORE_CAL_PARAM;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	701a      	strb	r2, [r3, #0]
      break;
 8003f4e:	e007      	b.n	8003f60 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CTRL_REGS:
      *val = LSM6DSV16X_RESTORE_CTRL_REGS;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2204      	movs	r2, #4
 8003f54:	701a      	strb	r2, [r3, #0]
      break;
 8003f56:	e003      	b.n	8003f60 <lsm6dsv16x_reset_get+0xa0>

    default:
      *val = LSM6DSV16X_GLOBAL_RST;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	701a      	strb	r2, [r3, #0]
      break;
 8003f5e:	bf00      	nop
  }

  return ret;
 8003f60:	697b      	ldr	r3, [r7, #20]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop

08003f6c <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 8003f76:	2301      	movs	r3, #1
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	210f      	movs	r1, #15
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff ff1f 	bl	8003dc0 <lsm6dsv16x_read_reg>
 8003f82:	60f8      	str	r0, [r7, #12]

  return ret;
 8003f84:	68fb      	ldr	r3, [r7, #12]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b086      	sub	sp, #24
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	460b      	mov	r3, r1
 8003f98:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8003f9a:	f107 0210 	add.w	r2, r7, #16
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	2110      	movs	r1, #16
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff ff0c 	bl	8003dc0 <lsm6dsv16x_read_reg>
 8003fa8:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <lsm6dsv16x_xl_data_rate_set+0x26>
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	e039      	b.n	8004028 <lsm6dsv16x_xl_data_rate_set+0x9a>

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 8003fb4:	78fb      	ldrb	r3, [r7, #3]
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	7c3b      	ldrb	r3, [r7, #16]
 8003fbe:	f362 0303 	bfi	r3, r2, #0, #4
 8003fc2:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8003fc4:	f107 0210 	add.w	r2, r7, #16
 8003fc8:	2301      	movs	r3, #1
 8003fca:	2110      	movs	r1, #16
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff ff0f 	bl	8003df0 <lsm6dsv16x_write_reg>
 8003fd2:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <lsm6dsv16x_xl_data_rate_set+0x50>
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	e024      	b.n	8004028 <lsm6dsv16x_xl_data_rate_set+0x9a>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8003fde:	78fb      	ldrb	r3, [r7, #3]
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8003fe4:	7cfb      	ldrb	r3, [r7, #19]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d01d      	beq.n	8004026 <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003fea:	f107 020c 	add.w	r2, r7, #12
 8003fee:	2301      	movs	r3, #1
 8003ff0:	2162      	movs	r1, #98	@ 0x62
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7ff fee4 	bl	8003dc0 <lsm6dsv16x_read_reg>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8004000:	7cfb      	ldrb	r3, [r7, #19]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	b2da      	uxtb	r2, r3
 8004008:	7b3b      	ldrb	r3, [r7, #12]
 800400a:	f362 0301 	bfi	r3, r2, #0, #2
 800400e:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8004010:	f107 020c 	add.w	r2, r7, #12
 8004014:	2301      	movs	r3, #1
 8004016:	2162      	movs	r1, #98	@ 0x62
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff fee9 	bl	8003df0 <lsm6dsv16x_write_reg>
 800401e:	4602      	mov	r2, r0
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	4413      	add	r3, r2
 8004024:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004026:	697b      	ldr	r3, [r7, #20]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <lsm6dsv16x_xl_mode_set>:
  * @param  val      XL_HIGH_PERFORMANCE_MD, XL_HIGH_ACCURACY_ODR_MD, XL_LOW_POWER_2_AVG_MD, XL_LOW_POWER_4_AVG_MD, XL_LOW_POWER_8_AVG_MD, XL_NORMAL_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_xl_mode_t val)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 800403c:	f107 0208 	add.w	r2, r7, #8
 8004040:	2301      	movs	r3, #1
 8004042:	2110      	movs	r1, #16
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7ff febb 	bl	8003dc0 <lsm6dsv16x_read_reg>
 800404a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10f      	bne.n	8004072 <lsm6dsv16x_xl_mode_set+0x42>
  {
    ctrl1.op_mode_xl = (uint8_t)val & 0x07U;
 8004052:	78fb      	ldrb	r3, [r7, #3]
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	b2da      	uxtb	r2, r3
 800405a:	7a3b      	ldrb	r3, [r7, #8]
 800405c:	f362 1306 	bfi	r3, r2, #4, #3
 8004060:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8004062:	f107 0208 	add.w	r2, r7, #8
 8004066:	2301      	movs	r3, #1
 8004068:	2110      	movs	r1, #16
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff fec0 	bl	8003df0 <lsm6dsv16x_write_reg>
 8004070:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004072:	68fb      	ldr	r3, [r7, #12]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8004088:	f107 0210 	add.w	r2, r7, #16
 800408c:	2301      	movs	r3, #1
 800408e:	2111      	movs	r1, #17
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff fe95 	bl	8003dc0 <lsm6dsv16x_read_reg>
 8004096:	6178      	str	r0, [r7, #20]
  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	7c3b      	ldrb	r3, [r7, #16]
 80040a2:	f362 0303 	bfi	r3, r2, #0, #4
 80040a6:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 80040a8:	f107 0210 	add.w	r2, r7, #16
 80040ac:	2301      	movs	r3, #1
 80040ae:	2111      	movs	r1, #17
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff fe9d 	bl	8003df0 <lsm6dsv16x_write_reg>
 80040b6:	4602      	mov	r2, r0
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	4413      	add	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <lsm6dsv16x_gy_data_rate_set+0x4c>
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	e024      	b.n	8004112 <lsm6dsv16x_gy_data_rate_set+0x96>

  sel = ((uint8_t)val >> 4) & 0xFU;
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	091b      	lsrs	r3, r3, #4
 80040cc:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 80040ce:	7cfb      	ldrb	r3, [r7, #19]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01d      	beq.n	8004110 <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80040d4:	f107 020c 	add.w	r2, r7, #12
 80040d8:	2301      	movs	r3, #1
 80040da:	2162      	movs	r1, #98	@ 0x62
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7ff fe6f 	bl	8003dc0 <lsm6dsv16x_read_reg>
 80040e2:	4602      	mov	r2, r0
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	4413      	add	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 80040ea:	7cfb      	ldrb	r3, [r7, #19]
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	7b3b      	ldrb	r3, [r7, #12]
 80040f4:	f362 0301 	bfi	r3, r2, #0, #2
 80040f8:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80040fa:	f107 020c 	add.w	r2, r7, #12
 80040fe:	2301      	movs	r3, #1
 8004100:	2162      	movs	r1, #98	@ 0x62
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff fe74 	bl	8003df0 <lsm6dsv16x_write_reg>
 8004108:	4602      	mov	r2, r0
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	4413      	add	r3, r2
 800410e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004110:	697b      	ldr	r3, [r7, #20]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <lsm6dsv16x_gy_mode_set>:
  * @param  val      GY_HIGH_PERFORMANCE_MD, GY_HIGH_ACCURACY_ODR_MD, GY_SLEEP_MD, GY_LOW_POWER_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_gy_mode_t val)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b084      	sub	sp, #16
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	460b      	mov	r3, r1
 8004124:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8004126:	f107 0208 	add.w	r2, r7, #8
 800412a:	2301      	movs	r3, #1
 800412c:	2111      	movs	r1, #17
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff fe46 	bl	8003dc0 <lsm6dsv16x_read_reg>
 8004134:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10f      	bne.n	800415c <lsm6dsv16x_gy_mode_set+0x42>
  {
    ctrl2.op_mode_g = (uint8_t)val & 0x07U;
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	b2da      	uxtb	r2, r3
 8004144:	7a3b      	ldrb	r3, [r7, #8]
 8004146:	f362 1306 	bfi	r3, r2, #4, #3
 800414a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 800414c:	f107 0208 	add.w	r2, r7, #8
 8004150:	2301      	movs	r3, #1
 8004152:	2111      	movs	r1, #17
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7ff fe4b 	bl	8003df0 <lsm6dsv16x_write_reg>
 800415a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800415c:	68fb      	ldr	r3, [r7, #12]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b084      	sub	sp, #16
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	460b      	mov	r3, r1
 8004170:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8004172:	f107 0208 	add.w	r2, r7, #8
 8004176:	2301      	movs	r3, #1
 8004178:	2112      	movs	r1, #18
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7ff fe20 	bl	8003dc0 <lsm6dsv16x_read_reg>
 8004180:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10f      	bne.n	80041a8 <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8004188:	78fb      	ldrb	r3, [r7, #3]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	b2da      	uxtb	r2, r3
 8004190:	7a3b      	ldrb	r3, [r7, #8]
 8004192:	f362 1386 	bfi	r3, r2, #6, #1
 8004196:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8004198:	f107 0208 	add.w	r2, r7, #8
 800419c:	2301      	movs	r3, #1
 800419e:	2112      	movs	r1, #18
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff fe25 	bl	8003df0 <lsm6dsv16x_write_reg>
 80041a6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80041a8:	68fb      	ldr	r3, [r7, #12]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <lsm6dsv16x_odr_trig_cfg_set>:
  * @param  val      number of data in the reference period.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_odr_trig_cfg_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b084      	sub	sp, #16
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	460b      	mov	r3, r1
 80041bc:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_odr_trig_cfg_t odr_trig;
  int32_t ret;

  if (val >= 1U && val <= 3U) {
 80041be:	78fb      	ldrb	r3, [r7, #3]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d802      	bhi.n	80041d0 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
    return -1;
 80041ca:	f04f 33ff 	mov.w	r3, #4294967295
 80041ce:	e015      	b.n	80041fc <lsm6dsv16x_odr_trig_cfg_set+0x4a>
  }

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 80041d0:	f107 0208 	add.w	r2, r7, #8
 80041d4:	2301      	movs	r3, #1
 80041d6:	2106      	movs	r1, #6
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7ff fdf1 	bl	8003dc0 <lsm6dsv16x_read_reg>
 80041de:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d109      	bne.n	80041fa <lsm6dsv16x_odr_trig_cfg_set+0x48>
  {
    odr_trig.odr_trig_nodr = val;
 80041e6:	78fb      	ldrb	r3, [r7, #3]
 80041e8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 80041ea:	f107 0208 	add.w	r2, r7, #8
 80041ee:	2301      	movs	r3, #1
 80041f0:	2106      	movs	r1, #6
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7ff fdfc 	bl	8003df0 <lsm6dsv16x_write_reg>
 80041f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80041fa:	68fb      	ldr	r3, [r7, #12]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8004210:	f107 0208 	add.w	r2, r7, #8
 8004214:	2301      	movs	r3, #1
 8004216:	2115      	movs	r1, #21
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7ff fdd1 	bl	8003dc0 <lsm6dsv16x_read_reg>
 800421e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10f      	bne.n	8004246 <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 8004226:	78fb      	ldrb	r3, [r7, #3]
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	b2da      	uxtb	r2, r3
 800422e:	7a3b      	ldrb	r3, [r7, #8]
 8004230:	f362 0303 	bfi	r3, r2, #0, #4
 8004234:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8004236:	f107 0208 	add.w	r2, r7, #8
 800423a:	2301      	movs	r3, #1
 800423c:	2115      	movs	r1, #21
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7ff fdd6 	bl	8003df0 <lsm6dsv16x_write_reg>
 8004244:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004246:	68fb      	ldr	r3, [r7, #12]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 800425c:	f107 0208 	add.w	r2, r7, #8
 8004260:	2301      	movs	r3, #1
 8004262:	2117      	movs	r1, #23
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7ff fdab 	bl	8003dc0 <lsm6dsv16x_read_reg>
 800426a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10f      	bne.n	8004292 <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 8004272:	78fb      	ldrb	r3, [r7, #3]
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	b2da      	uxtb	r2, r3
 800427a:	7a3b      	ldrb	r3, [r7, #8]
 800427c:	f362 0301 	bfi	r3, r2, #0, #2
 8004280:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8004282:	f107 0208 	add.w	r2, r7, #8
 8004286:	2301      	movs	r3, #1
 8004288:	2117      	movs	r1, #23
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7ff fdb0 	bl	8003df0 <lsm6dsv16x_write_reg>
 8004290:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004292:	68fb      	ldr	r3, [r7, #12]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <lsm6dsv16x_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsv16x_pin_int1_route_set(stmdev_ctx_t *ctx,
                                      lsm6dsv16x_pin_int_route_t *val)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_int1_ctrl_t          int1_ctrl;
  lsm6dsv16x_md1_cfg_t            md1_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 80042a6:	f107 0210 	add.w	r2, r7, #16
 80042aa:	2301      	movs	r3, #1
 80042ac:	210d      	movs	r1, #13
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff fd86 	bl	8003dc0 <lsm6dsv16x_read_reg>
 80042b4:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <lsm6dsv16x_pin_int1_route_set+0x24>
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	e0a0      	b.n	8004402 <lsm6dsv16x_pin_int1_route_set+0x166>

  int1_ctrl.int1_drdy_xl       = val->drdy_xl;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	7c3b      	ldrb	r3, [r7, #16]
 80042cc:	f362 0300 	bfi	r3, r2, #0, #1
 80042d0:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_drdy_g        = val->drdy_g;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	7c3b      	ldrb	r3, [r7, #16]
 80042de:	f362 0341 	bfi	r3, r2, #1, #1
 80042e2:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_th       = val->fifo_th;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	7c3b      	ldrb	r3, [r7, #16]
 80042f0:	f362 03c3 	bfi	r3, r2, #3, #1
 80042f4:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_ovr      = val->fifo_ovr;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	7c3b      	ldrb	r3, [r7, #16]
 8004302:	f362 1304 	bfi	r3, r2, #4, #1
 8004306:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_full     = val->fifo_full;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004310:	b2da      	uxtb	r2, r3
 8004312:	7c3b      	ldrb	r3, [r7, #16]
 8004314:	f362 1345 	bfi	r3, r2, #5, #1
 8004318:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_cnt_bdr       = val->cnt_bdr;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004322:	b2da      	uxtb	r2, r3
 8004324:	7c3b      	ldrb	r3, [r7, #16]
 8004326:	f362 1386 	bfi	r3, r2, #6, #1
 800432a:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 800432c:	f107 0210 	add.w	r2, r7, #16
 8004330:	2301      	movs	r3, #1
 8004332:	210d      	movs	r1, #13
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff fd5b 	bl	8003df0 <lsm6dsv16x_write_reg>
 800433a:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <lsm6dsv16x_pin_int1_route_set+0xaa>
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	e05d      	b.n	8004402 <lsm6dsv16x_pin_int1_route_set+0x166>

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8004346:	f107 020c 	add.w	r2, r7, #12
 800434a:	2301      	movs	r3, #1
 800434c:	215e      	movs	r1, #94	@ 0x5e
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7ff fd36 	bl	8003dc0 <lsm6dsv16x_read_reg>
 8004354:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <lsm6dsv16x_pin_int1_route_set+0xc4>
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	e050      	b.n	8004402 <lsm6dsv16x_pin_int1_route_set+0x166>

  md1_cfg.int1_shub            = val->shub;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	785b      	ldrb	r3, [r3, #1]
 8004364:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004368:	b2da      	uxtb	r2, r3
 800436a:	7b3b      	ldrb	r3, [r7, #12]
 800436c:	f362 0300 	bfi	r3, r2, #0, #1
 8004370:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_emb_func        = val->emb_func;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	785b      	ldrb	r3, [r3, #1]
 8004376:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800437a:	b2da      	uxtb	r2, r3
 800437c:	7b3b      	ldrb	r3, [r7, #12]
 800437e:	f362 0341 	bfi	r3, r2, #1, #1
 8004382:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_6d              = val->sixd;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	785b      	ldrb	r3, [r3, #1]
 8004388:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800438c:	b2da      	uxtb	r2, r3
 800438e:	7b3b      	ldrb	r3, [r7, #12]
 8004390:	f362 0382 	bfi	r3, r2, #2, #1
 8004394:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_single_tap      = val->single_tap;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	785b      	ldrb	r3, [r3, #1]
 800439a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	7b3b      	ldrb	r3, [r7, #12]
 80043a2:	f362 1386 	bfi	r3, r2, #6, #1
 80043a6:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_double_tap      = val->double_tap;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	785b      	ldrb	r3, [r3, #1]
 80043ac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	7b3b      	ldrb	r3, [r7, #12]
 80043b4:	f362 03c3 	bfi	r3, r2, #3, #1
 80043b8:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_wu              = val->wakeup;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	785b      	ldrb	r3, [r3, #1]
 80043be:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	7b3b      	ldrb	r3, [r7, #12]
 80043c6:	f362 1345 	bfi	r3, r2, #5, #1
 80043ca:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_ff              = val->freefall;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	785b      	ldrb	r3, [r3, #1]
 80043d0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	7b3b      	ldrb	r3, [r7, #12]
 80043d8:	f362 1304 	bfi	r3, r2, #4, #1
 80043dc:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_sleep_change    = val->sleep_change;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	789b      	ldrb	r3, [r3, #2]
 80043e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	7b3b      	ldrb	r3, [r7, #12]
 80043ea:	f362 13c7 	bfi	r3, r2, #7, #1
 80043ee:	733b      	strb	r3, [r7, #12]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80043f0:	f107 020c 	add.w	r2, r7, #12
 80043f4:	2301      	movs	r3, #1
 80043f6:	215e      	movs	r1, #94	@ 0x5e
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7ff fcf9 	bl	8003df0 <lsm6dsv16x_write_reg>
 80043fe:	6178      	str	r0, [r7, #20]

  return ret;
 8004400:	697b      	ldr	r3, [r7, #20]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <lsm6dsv16x_den_polarity_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_den_polarity_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_den_polarity_t val)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b084      	sub	sp, #16
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	460b      	mov	r3, r1
 8004414:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl4_t ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 8004416:	f107 0208 	add.w	r2, r7, #8
 800441a:	2301      	movs	r3, #1
 800441c:	2113      	movs	r1, #19
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7ff fcce 	bl	8003dc0 <lsm6dsv16x_read_reg>
 8004424:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10f      	bne.n	800444c <lsm6dsv16x_den_polarity_set+0x42>
  {
    ctrl4.int2_in_lh = (uint8_t)val & 0x1U;
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	b2da      	uxtb	r2, r3
 8004434:	7a3b      	ldrb	r3, [r7, #8]
 8004436:	f362 0300 	bfi	r3, r2, #0, #1
 800443a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 800443c:	f107 0208 	add.w	r2, r7, #8
 8004440:	2301      	movs	r3, #1
 8004442:	2113      	movs	r1, #19
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff fcd3 	bl	8003df0 <lsm6dsv16x_write_reg>
 800444a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800444c:	68fb      	ldr	r3, [r7, #12]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <lsm6dsv16x_fifo_watermark_set>:
  * @param  val      FIFO watermark threshold (1 LSb = TAG (1 Byte) + 1 sensor (6 Bytes) written in FIFO).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_watermark_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b084      	sub	sp, #16
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	460b      	mov	r3, r1
 8004460:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl1_t fifo_ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8004462:	f107 0208 	add.w	r2, r7, #8
 8004466:	2301      	movs	r3, #1
 8004468:	2107      	movs	r1, #7
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7ff fca8 	bl	8003dc0 <lsm6dsv16x_read_reg>
 8004470:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d109      	bne.n	800448c <lsm6dsv16x_fifo_watermark_set+0x36>
  {
    fifo_ctrl1.wtm = val;
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 800447c:	f107 0208 	add.w	r2, r7, #8
 8004480:	2301      	movs	r3, #1
 8004482:	2107      	movs	r1, #7
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7ff fcb3 	bl	8003df0 <lsm6dsv16x_write_reg>
 800448a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800448c:	68fb      	ldr	r3, [r7, #12]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <lsm6dsv16x_fifo_xl_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_xl_batch_t val)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b084      	sub	sp, #16
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	460b      	mov	r3, r1
 80044a0:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 80044a2:	f107 0208 	add.w	r2, r7, #8
 80044a6:	2301      	movs	r3, #1
 80044a8:	2109      	movs	r1, #9
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7ff fc88 	bl	8003dc0 <lsm6dsv16x_read_reg>
 80044b0:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10f      	bne.n	80044d8 <lsm6dsv16x_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val & 0xFu;
 80044b8:	78fb      	ldrb	r3, [r7, #3]
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	7a3b      	ldrb	r3, [r7, #8]
 80044c2:	f362 0303 	bfi	r3, r2, #0, #4
 80044c6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 80044c8:	f107 0208 	add.w	r2, r7, #8
 80044cc:	2301      	movs	r3, #1
 80044ce:	2109      	movs	r1, #9
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7ff fc8d 	bl	8003df0 <lsm6dsv16x_write_reg>
 80044d6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80044d8:	68fb      	ldr	r3, [r7, #12]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <lsm6dsv16x_fifo_gy_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_gy_batch_t val)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	460b      	mov	r3, r1
 80044ec:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 80044ee:	f107 0208 	add.w	r2, r7, #8
 80044f2:	2301      	movs	r3, #1
 80044f4:	2109      	movs	r1, #9
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7ff fc62 	bl	8003dc0 <lsm6dsv16x_read_reg>
 80044fc:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10f      	bne.n	8004524 <lsm6dsv16x_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val & 0x0Fu;
 8004504:	78fb      	ldrb	r3, [r7, #3]
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	b2da      	uxtb	r2, r3
 800450c:	7a3b      	ldrb	r3, [r7, #8]
 800450e:	f362 1307 	bfi	r3, r2, #4, #4
 8004512:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8004514:	f107 0208 	add.w	r2, r7, #8
 8004518:	2301      	movs	r3, #1
 800451a:	2109      	movs	r1, #9
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7ff fc67 	bl	8003df0 <lsm6dsv16x_write_reg>
 8004522:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004524:	68fb      	ldr	r3, [r7, #12]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b084      	sub	sp, #16
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
 8004536:	460b      	mov	r3, r1
 8004538:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 800453a:	f107 0208 	add.w	r2, r7, #8
 800453e:	2301      	movs	r3, #1
 8004540:	210a      	movs	r1, #10
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7ff fc3c 	bl	8003dc0 <lsm6dsv16x_read_reg>
 8004548:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10f      	bne.n	8004570 <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 8004550:	78fb      	ldrb	r3, [r7, #3]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	b2da      	uxtb	r2, r3
 8004558:	7a3b      	ldrb	r3, [r7, #8]
 800455a:	f362 0302 	bfi	r3, r2, #0, #3
 800455e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8004560:	f107 0208 	add.w	r2, r7, #8
 8004564:	2301      	movs	r3, #1
 8004566:	210a      	movs	r1, #10
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7ff fc41 	bl	8003df0 <lsm6dsv16x_write_reg>
 800456e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004570:	68fb      	ldr	r3, [r7, #12]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <lsm6dsv16x_ui_i2c_i3c_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ui_i2c_i3c_mode_set(stmdev_ctx_t *ctx,
                                       lsm6dsv16x_ui_i2c_i3c_mode_t val)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b084      	sub	sp, #16
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	460b      	mov	r3, r1
 8004584:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_if_cfg_t if_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 8004586:	f107 0208 	add.w	r2, r7, #8
 800458a:	2301      	movs	r3, #1
 800458c:	2103      	movs	r1, #3
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff fc16 	bl	8003dc0 <lsm6dsv16x_read_reg>
 8004594:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10f      	bne.n	80045bc <lsm6dsv16x_ui_i2c_i3c_mode_set+0x42>
  {
    if_cfg.i2c_i3c_disable = (uint8_t)val & 0x1U;
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	7a3b      	ldrb	r3, [r7, #8]
 80045a6:	f362 0300 	bfi	r3, r2, #0, #1
 80045aa:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 80045ac:	f107 0208 	add.w	r2, r7, #8
 80045b0:	2301      	movs	r3, #1
 80045b2:	2103      	movs	r1, #3
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff fc1b 	bl	8003df0 <lsm6dsv16x_write_reg>
 80045ba:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80045bc:	68fb      	ldr	r3, [r7, #12]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <acc_write>:
#include "global_variables.h"
#include "peripherals.h"

/* -------------SCRITTURA ACCELEROMETRO-------------*/
int32_t acc_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	60f8      	str	r0, [r7, #12]
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	461a      	mov	r2, r3
 80045d2:	460b      	mov	r3, r1
 80045d4:	72fb      	strb	r3, [r7, #11]
 80045d6:	4613      	mov	r3, r2
 80045d8:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 80045da:	2200      	movs	r2, #0
 80045dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80045e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80045e4:	f00a fb2a 	bl	800ec3c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 80045e8:	f107 010b 	add.w	r1, r7, #11
 80045ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045f0:	2201      	movs	r2, #1
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f00d fdab 	bl	801214e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 80045f8:	893a      	ldrh	r2, [r7, #8]
 80045fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f00d fda4 	bl	801214e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 8004606:	2201      	movs	r2, #1
 8004608:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800460c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004610:	f00a fb14 	bl	800ec3c <HAL_GPIO_WritePin>
	return 0;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <acc_read>:

/* -------------LETTURA ACCELEROMETRO-------------*/
int32_t acc_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b084      	sub	sp, #16
 8004622:	af00      	add	r7, sp, #0
 8004624:	60f8      	str	r0, [r7, #12]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	461a      	mov	r2, r3
 800462a:	460b      	mov	r3, r1
 800462c:	72fb      	strb	r3, [r7, #11]
 800462e:	4613      	mov	r3, r2
 8004630:	813b      	strh	r3, [r7, #8]
	reg |= 0x80;
 8004632:	7afb      	ldrb	r3, [r7, #11]
 8004634:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004638:	b2db      	uxtb	r3, r3
 800463a:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 800463c:	2200      	movs	r2, #0
 800463e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004642:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004646:	f00a faf9 	bl	800ec3c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 800464a:	f107 010b 	add.w	r1, r7, #11
 800464e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004652:	2201      	movs	r2, #1
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f00d fd7a 	bl	801214e <HAL_SPI_Transmit>
	HAL_SPI_Receive(handle, bufp, len, 1000);
 800465a:	893a      	ldrh	r2, [r7, #8]
 800465c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f00d fee9 	bl	801243a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 8004668:	2201      	movs	r2, #1
 800466a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800466e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004672:	f00a fae3 	bl	800ec3c <HAL_GPIO_WritePin>
	return 0;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004684:	f3bf 8f4f 	dsb	sy
}
 8004688:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800468a:	4b06      	ldr	r3, [pc, #24]	@ (80046a4 <__NVIC_SystemReset+0x24>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004692:	4904      	ldr	r1, [pc, #16]	@ (80046a4 <__NVIC_SystemReset+0x24>)
 8004694:	4b04      	ldr	r3, [pc, #16]	@ (80046a8 <__NVIC_SystemReset+0x28>)
 8004696:	4313      	orrs	r3, r2
 8004698:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800469a:	f3bf 8f4f 	dsb	sy
}
 800469e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80046a0:	bf00      	nop
 80046a2:	e7fd      	b.n	80046a0 <__NVIC_SystemReset+0x20>
 80046a4:	e000ed00 	.word	0xe000ed00
 80046a8:	05fa0004 	.word	0x05fa0004

080046ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80046ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ae:	b0d5      	sub	sp, #340	@ 0x154
 80046b0:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80046b2:	f007 f864 	bl	800b77e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80046b6:	f000 fbe1 	bl	8004e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80046ba:	f001 f8b5 	bl	8005828 <MX_GPIO_Init>
  MX_DMA_Init();
 80046be:	f001 f885 	bl	80057cc <MX_DMA_Init>
  MX_QUADSPI_Init();
 80046c2:	f000 fd07 	bl	80050d4 <MX_QUADSPI_Init>
  MX_SPI2_Init();
 80046c6:	f000 fdbd 	bl	8005244 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80046ca:	f001 f84f 	bl	800576c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80046ce:	f000 fc27 	bl	8004f20 <MX_ADC1_Init>
  MX_I2C3_Init();
 80046d2:	f000 fcbf 	bl	8005054 <MX_I2C3_Init>
  MX_TIM2_Init();
 80046d6:	f000 fed9 	bl	800548c <MX_TIM2_Init>
  MX_UART4_Init();
 80046da:	f001 f817 	bl	800570c <MX_UART4_Init>
  MX_TIM1_Init();
 80046de:	f000 fe2d 	bl	800533c <MX_TIM1_Init>
  MX_CRC_Init();
 80046e2:	f000 fc95 	bl	8005010 <MX_CRC_Init>
  MX_TIM4_Init();
 80046e6:	f000 ff9d 	bl	8005624 <MX_TIM4_Init>
  MX_RTC_Init();
 80046ea:	f000 fd19 	bl	8005120 <MX_RTC_Init>
  MX_SPI3_Init();
 80046ee:	f000 fde7 	bl	80052c0 <MX_SPI3_Init>
  MX_TIM3_Init();
 80046f2:	f000 ff1f 	bl	8005534 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	System_Init();
 80046f6:	f7fe ffad 	bl	8003654 <System_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		switch(state)
 80046fa:	4b85      	ldr	r3, [pc, #532]	@ (8004910 <main+0x264>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	2b03      	cmp	r3, #3
 8004700:	f200 8397 	bhi.w	8004e32 <main+0x786>
 8004704:	a201      	add	r2, pc, #4	@ (adr r2, 800470c <main+0x60>)
 8004706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470a:	bf00      	nop
 800470c:	0800471d 	.word	0x0800471d
 8004710:	080048f9 	.word	0x080048f9
 8004714:	08004939 	.word	0x08004939
 8004718:	08004d15 	.word	0x08004d15
		{
		case IDLE:
			if(flags.Message_Rx)
 800471c:	4b7d      	ldr	r3, [pc, #500]	@ (8004914 <main+0x268>)
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 80c5 	beq.w	80048b6 <main+0x20a>
			{
				LED_Start(RED_LED, MEDIUM, HIGH);
 800472c:	2205      	movs	r2, #5
 800472e:	2101      	movs	r1, #1
 8004730:	2004      	movs	r0, #4
 8004732:	f7ff fa51 	bl	8003bd8 <LED_Start>
				SIM_Parse_Command();
 8004736:	f7fd fc4b 	bl	8001fd0 <SIM_Parse_Command>
				flags.Message_Rx = 0;
 800473a:	4a76      	ldr	r2, [pc, #472]	@ (8004914 <main+0x268>)
 800473c:	7813      	ldrb	r3, [r2, #0]
 800473e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004742:	7013      	strb	r3, [r2, #0]
				if(flags.CMD.Start_Meas)
 8004744:	4b73      	ldr	r3, [pc, #460]	@ (8004914 <main+0x268>)
 8004746:	789b      	ldrb	r3, [r3, #2]
 8004748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d008      	beq.n	8004764 <main+0xb8>
				{
					state = MEASURE_INIT_STATE;
 8004752:	4b6f      	ldr	r3, [pc, #444]	@ (8004910 <main+0x264>)
 8004754:	2201      	movs	r2, #1
 8004756:	701a      	strb	r2, [r3, #0]
					flags.CMD.Start_Meas = 0;
 8004758:	4a6e      	ldr	r2, [pc, #440]	@ (8004914 <main+0x268>)
 800475a:	7893      	ldrb	r3, [r2, #2]
 800475c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004760:	7093      	strb	r3, [r2, #2]
 8004762:	e0a4      	b.n	80048ae <main+0x202>
				}
				else if(flags.CMD.Set_Config)
 8004764:	4b6b      	ldr	r3, [pc, #428]	@ (8004914 <main+0x268>)
 8004766:	789b      	ldrb	r3, [r3, #2]
 8004768:	f003 0310 	and.w	r3, r3, #16
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d007      	beq.n	8004782 <main+0xd6>
				{
					Apply_Config();
 8004772:	f002 fce3 	bl	800713c <Apply_Config>
					flags.CMD.Set_Config = 0;
 8004776:	4a67      	ldr	r2, [pc, #412]	@ (8004914 <main+0x268>)
 8004778:	7893      	ldrb	r3, [r2, #2]
 800477a:	f023 0310 	bic.w	r3, r3, #16
 800477e:	7093      	strb	r3, [r2, #2]
 8004780:	e095      	b.n	80048ae <main+0x202>
				}
				else if(flags.CMD.Get_Config)
 8004782:	4b64      	ldr	r3, [pc, #400]	@ (8004914 <main+0x268>)
 8004784:	789b      	ldrb	r3, [r3, #2]
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d007      	beq.n	80047a0 <main+0xf4>
				{
					Get_Config();
 8004790:	f002 fe6c 	bl	800746c <Get_Config>
					flags.CMD.Get_Config = 0;
 8004794:	4a5f      	ldr	r2, [pc, #380]	@ (8004914 <main+0x268>)
 8004796:	7893      	ldrb	r3, [r2, #2]
 8004798:	f023 0320 	bic.w	r3, r3, #32
 800479c:	7093      	strb	r3, [r2, #2]
 800479e:	e086      	b.n	80048ae <main+0x202>
				}
				else if(flags.CMD.Start_OTA)
 80047a0:	4b5c      	ldr	r3, [pc, #368]	@ (8004914 <main+0x268>)
 80047a2:	789b      	ldrb	r3, [r3, #2]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d015      	beq.n	80047da <main+0x12e>
				{
					LED_Stop(GRN_LED);
 80047ae:	2008      	movs	r0, #8
 80047b0:	f7ff fade 	bl	8003d70 <LED_Stop>
					LED_Start(ORG_LED, FAST, FULL);
 80047b4:	2204      	movs	r2, #4
 80047b6:	2100      	movs	r1, #0
 80047b8:	2000      	movs	r0, #0
 80047ba:	f7ff fa0d 	bl	8003bd8 <LED_Start>
					LED_Start(RED_LED, FAST, HIGH);
 80047be:	2205      	movs	r2, #5
 80047c0:	2100      	movs	r1, #0
 80047c2:	2004      	movs	r0, #4
 80047c4:	f7ff fa08 	bl	8003bd8 <LED_Start>
					state = OTA_STATE;
 80047c8:	4b51      	ldr	r3, [pc, #324]	@ (8004910 <main+0x264>)
 80047ca:	2203      	movs	r2, #3
 80047cc:	701a      	strb	r2, [r3, #0]
					flags.CMD.Start_OTA = 0;
 80047ce:	4a51      	ldr	r2, [pc, #324]	@ (8004914 <main+0x268>)
 80047d0:	7893      	ldrb	r3, [r2, #2]
 80047d2:	f023 0304 	bic.w	r3, r3, #4
 80047d6:	7093      	strb	r3, [r2, #2]
 80047d8:	e069      	b.n	80048ae <main+0x202>
				}
				else if(flags.CMD.Ping)
 80047da:	4b4e      	ldr	r3, [pc, #312]	@ (8004914 <main+0x268>)
 80047dc:	789b      	ldrb	r3, [r3, #2]
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d007      	beq.n	80047f8 <main+0x14c>
				{
					SIM_Send_Infos();
 80047e8:	f7fd fe18 	bl	800241c <SIM_Send_Infos>
					flags.CMD.Ping = 0;
 80047ec:	4a49      	ldr	r2, [pc, #292]	@ (8004914 <main+0x268>)
 80047ee:	7893      	ldrb	r3, [r2, #2]
 80047f0:	f023 0308 	bic.w	r3, r3, #8
 80047f4:	7093      	strb	r3, [r2, #2]
 80047f6:	e05a      	b.n	80048ae <main+0x202>
				}
				else if(flags.TCP_Parameter_Changed)
 80047f8:	4b46      	ldr	r3, [pc, #280]	@ (8004914 <main+0x268>)
 80047fa:	785b      	ldrb	r3, [r3, #1]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d053      	beq.n	80048ae <main+0x202>
				{
				  char response[256];
				  LED_Start(ORG_LED, MEDIUM, HALF);
 8004806:	2206      	movs	r2, #6
 8004808:	2101      	movs	r1, #1
 800480a:	2000      	movs	r0, #0
 800480c:	f7ff f9e4 	bl	8003bd8 <LED_Start>
				  SIM_Send_Command("AT+CIPCLOSE\n");
 8004810:	4841      	ldr	r0, [pc, #260]	@ (8004918 <main+0x26c>)
 8004812:	f7fd fb35 	bl	8001e80 <SIM_Send_Command>
				  SIM_Receive_Response(response, 2000);
 8004816:	f107 031c 	add.w	r3, r7, #28
 800481a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800481e:	4618      	mov	r0, r3
 8004820:	f7fd fb5a 	bl	8001ed8 <SIM_Receive_Response>
				  if(strstr(response, "CLOSE OK") == NULL && strstr(response, "ERROR") == NULL)
 8004824:	f107 031c 	add.w	r3, r7, #28
 8004828:	493c      	ldr	r1, [pc, #240]	@ (800491c <main+0x270>)
 800482a:	4618      	mov	r0, r3
 800482c:	f012 f912 	bl	8016a54 <strstr>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d131      	bne.n	800489a <main+0x1ee>
 8004836:	f107 031c 	add.w	r3, r7, #28
 800483a:	4939      	ldr	r1, [pc, #228]	@ (8004920 <main+0x274>)
 800483c:	4618      	mov	r0, r3
 800483e:	f012 f909 	bl	8016a54 <strstr>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d128      	bne.n	800489a <main+0x1ee>
				  {
					  memset(response, 0, sizeof(response));
 8004848:	f107 031c 	add.w	r3, r7, #28
 800484c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004850:	2100      	movs	r1, #0
 8004852:	4618      	mov	r0, r3
 8004854:	f012 f8c4 	bl	80169e0 <memset>
					  SIM_Send_Command("AT+CIPSHUT\n");
 8004858:	4832      	ldr	r0, [pc, #200]	@ (8004924 <main+0x278>)
 800485a:	f7fd fb11 	bl	8001e80 <SIM_Send_Command>
					  SIM_Receive_Response(response, 70000);
 800485e:	f107 031c 	add.w	r3, r7, #28
 8004862:	4931      	ldr	r1, [pc, #196]	@ (8004928 <main+0x27c>)
 8004864:	4618      	mov	r0, r3
 8004866:	f7fd fb37 	bl	8001ed8 <SIM_Receive_Response>
					  if(strstr(response, "SHUT OK") == NULL && strstr(response, "ERROR") == NULL)
 800486a:	f107 031c 	add.w	r3, r7, #28
 800486e:	492f      	ldr	r1, [pc, #188]	@ (800492c <main+0x280>)
 8004870:	4618      	mov	r0, r3
 8004872:	f012 f8ef 	bl	8016a54 <strstr>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10a      	bne.n	8004892 <main+0x1e6>
 800487c:	f107 031c 	add.w	r3, r7, #28
 8004880:	4927      	ldr	r1, [pc, #156]	@ (8004920 <main+0x274>)
 8004882:	4618      	mov	r0, r3
 8004884:	f012 f8e6 	bl	8016a54 <strstr>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <main+0x1e6>
					  {
						HAL_NVIC_SystemReset();
 800488e:	f008 fcc4 	bl	800d21a <HAL_NVIC_SystemReset>
					  }
					  HAL_Delay(1000);
 8004892:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004896:	f006 ffe7 	bl	800b868 <HAL_Delay>
				  }
				  SIM_Check_Connection();
 800489a:	f7fd fedd 	bl	8002658 <SIM_Check_Connection>
				  LED_Stop(ORG_LED);
 800489e:	2000      	movs	r0, #0
 80048a0:	f7ff fa66 	bl	8003d70 <LED_Stop>
				  flags.TCP_Parameter_Changed = 0;
 80048a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004914 <main+0x268>)
 80048a6:	7853      	ldrb	r3, [r2, #1]
 80048a8:	f023 0320 	bic.w	r3, r3, #32
 80048ac:	7053      	strb	r3, [r2, #1]
				}
				LED_Stop(RED_LED);
 80048ae:	2004      	movs	r0, #4
 80048b0:	f7ff fa5e 	bl	8003d70 <LED_Stop>
				LED_Start(ORG_LED, MEDIUM, HALF);
				SIM_Check_Connection();
				sys.SIM_Connection_Status = HAL_GetTick();
				LED_Stop(ORG_LED);
			}
			break;
 80048b4:	e2bf      	b.n	8004e36 <main+0x78a>
			else if(HAL_GetTick() - sys.SIM_Connection_Status > config.connection_timeout_ms)                  // Controllo connessione al server TCP ogni config.connection_timeout_ms millisecondi
 80048b6:	f006 ffcb 	bl	800b850 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	4b1c      	ldr	r3, [pc, #112]	@ (8004930 <main+0x284>)
 80048be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80048c6:	1ad2      	subs	r2, r2, r3
 80048c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004934 <main+0x288>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	f240 82b2 	bls.w	8004e36 <main+0x78a>
				LED_Start(ORG_LED, MEDIUM, HALF);
 80048d2:	2206      	movs	r2, #6
 80048d4:	2101      	movs	r1, #1
 80048d6:	2000      	movs	r0, #0
 80048d8:	f7ff f97e 	bl	8003bd8 <LED_Start>
				SIM_Check_Connection();
 80048dc:	f7fd febc 	bl	8002658 <SIM_Check_Connection>
				sys.SIM_Connection_Status = HAL_GetTick();
 80048e0:	f006 ffb6 	bl	800b850 <HAL_GetTick>
 80048e4:	4603      	mov	r3, r0
 80048e6:	4a12      	ldr	r2, [pc, #72]	@ (8004930 <main+0x284>)
 80048e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80048ec:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
				LED_Stop(ORG_LED);
 80048f0:	2000      	movs	r0, #0
 80048f2:	f7ff fa3d 	bl	8003d70 <LED_Stop>
			break;
 80048f6:	e29e      	b.n	8004e36 <main+0x78a>

		case MEASURE_INIT_STATE:
			Start_Measure();
 80048f8:	f001 fd6e 	bl	80063d8 <Start_Measure>
			LED_Start(GRN_LED, FAST, FULL);
 80048fc:	2204      	movs	r2, #4
 80048fe:	2100      	movs	r1, #0
 8004900:	2008      	movs	r0, #8
 8004902:	f7ff f969 	bl	8003bd8 <LED_Start>
			state = MEASURING_STATE;
 8004906:	4b02      	ldr	r3, [pc, #8]	@ (8004910 <main+0x264>)
 8004908:	2202      	movs	r2, #2
 800490a:	701a      	strb	r2, [r3, #0]
			break;
 800490c:	e296      	b.n	8004e3c <main+0x790>
 800490e:	bf00      	nop
 8004910:	200005d4 	.word	0x200005d4
 8004914:	20001780 	.word	0x20001780
 8004918:	08017f00 	.word	0x08017f00
 800491c:	08017f10 	.word	0x08017f10
 8004920:	08017f1c 	.word	0x08017f1c
 8004924:	08017f24 	.word	0x08017f24
 8004928:	00011170 	.word	0x00011170
 800492c:	08017f30 	.word	0x08017f30
 8004930:	200005d8 	.word	0x200005d8
 8004934:	20001784 	.word	0x20001784

		case MEASURING_STATE:
			if(flags.ADC_Complete && flags.ACC_Complete)
 8004938:	4bab      	ldr	r3, [pc, #684]	@ (8004be8 <main+0x53c>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 8279 	beq.w	8004e3a <main+0x78e>
 8004948:	4ba7      	ldr	r3, [pc, #668]	@ (8004be8 <main+0x53c>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 8271 	beq.w	8004e3a <main+0x78e>
			{
				Save_Data();
 8004958:	f001 faae 	bl	8005eb8 <Save_Data>
				if(flags.BC_Interrupt)
 800495c:	4ba2      	ldr	r3, [pc, #648]	@ (8004be8 <main+0x53c>)
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	f003 0320 	and.w	r3, r3, #32
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d010      	beq.n	800498c <main+0x2e0>
				{
					BC_Read_Flags(&sys.BC_Flags);
 800496a:	48a0      	ldr	r0, [pc, #640]	@ (8004bec <main+0x540>)
 800496c:	f7fe f922 	bl	8002bb4 <BC_Read_Flags>
					BC_Manage_Interrupts(sys.BC_Flags);
 8004970:	4b9f      	ldr	r3, [pc, #636]	@ (8004bf0 <main+0x544>)
 8004972:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8004976:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800497a:	4610      	mov	r0, r2
 800497c:	4619      	mov	r1, r3
 800497e:	f7fe f9c7 	bl	8002d10 <BC_Manage_Interrupts>
					flags.BC_Interrupt = 0;
 8004982:	4a99      	ldr	r2, [pc, #612]	@ (8004be8 <main+0x53c>)
 8004984:	7813      	ldrb	r3, [r2, #0]
 8004986:	f023 0320 	bic.w	r3, r3, #32
 800498a:	7013      	strb	r3, [r2, #0]
				}
				if(flags.Message_Rx)
 800498c:	4b96      	ldr	r3, [pc, #600]	@ (8004be8 <main+0x53c>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00b      	beq.n	80049b2 <main+0x306>
				{
					SIM_Parse_Command();
 800499a:	f7fd fb19 	bl	8001fd0 <SIM_Parse_Command>
					flags.SIM_isConnected = 1;
 800499e:	4a92      	ldr	r2, [pc, #584]	@ (8004be8 <main+0x53c>)
 80049a0:	7853      	ldrb	r3, [r2, #1]
 80049a2:	f043 0310 	orr.w	r3, r3, #16
 80049a6:	7053      	strb	r3, [r2, #1]
					flags.Message_Rx = 0;
 80049a8:	4a8f      	ldr	r2, [pc, #572]	@ (8004be8 <main+0x53c>)
 80049aa:	7813      	ldrb	r3, [r2, #0]
 80049ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049b0:	7013      	strb	r3, [r2, #0]
				}
				if(flags.CMD.Idle)
 80049b2:	4b8d      	ldr	r3, [pc, #564]	@ (8004be8 <main+0x53c>)
 80049b4:	789b      	ldrb	r3, [r3, #2]
 80049b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d022      	beq.n	8004a06 <main+0x35a>
				{
					if(!flags.Log_TransferInProgress && !flags.Meas_TransferInProgress)
 80049c0:	4b89      	ldr	r3, [pc, #548]	@ (8004be8 <main+0x53c>)
 80049c2:	785b      	ldrb	r3, [r3, #1]
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d11b      	bne.n	8004a06 <main+0x35a>
 80049ce:	4b86      	ldr	r3, [pc, #536]	@ (8004be8 <main+0x53c>)
 80049d0:	785b      	ldrb	r3, [r3, #1]
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d114      	bne.n	8004a06 <main+0x35a>
					{
						Stop_Measure();
 80049dc:	f001 fdca 	bl	8006574 <Stop_Measure>
						LED_Stop(ORG_LED);
 80049e0:	2000      	movs	r0, #0
 80049e2:	f7ff f9c5 	bl	8003d70 <LED_Stop>
						LED_Stop(RED_LED);
 80049e6:	2004      	movs	r0, #4
 80049e8:	f7ff f9c2 	bl	8003d70 <LED_Stop>
						LED_Start(GRN_LED, MEDIUM, HALF);
 80049ec:	2206      	movs	r2, #6
 80049ee:	2101      	movs	r1, #1
 80049f0:	2008      	movs	r0, #8
 80049f2:	f7ff f8f1 	bl	8003bd8 <LED_Start>
						state = IDLE;
 80049f6:	4b7f      	ldr	r3, [pc, #508]	@ (8004bf4 <main+0x548>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	701a      	strb	r2, [r3, #0]
						flags.CMD.Idle = 0;
 80049fc:	4a7a      	ldr	r2, [pc, #488]	@ (8004be8 <main+0x53c>)
 80049fe:	7893      	ldrb	r3, [r2, #2]
 8004a00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a04:	7093      	strb	r3, [r2, #2]
					}
				}
				if(flags.CMD.Data_Request)
 8004a06:	4b78      	ldr	r3, [pc, #480]	@ (8004be8 <main+0x53c>)
 8004a08:	789b      	ldrb	r3, [r3, #2]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 8098 	beq.w	8004b46 <main+0x49a>
				{
					if(HAL_GetTick() - sys.Log_Status > config.log_period_ms && !flags.Log_TransferInProgress && !flags.Meas_TransferInProgress)
 8004a16:	f006 ff1b 	bl	800b850 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	4b74      	ldr	r3, [pc, #464]	@ (8004bf0 <main+0x544>)
 8004a1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a22:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004a26:	1ad2      	subs	r2, r2, r3
 8004a28:	4b73      	ldr	r3, [pc, #460]	@ (8004bf8 <main+0x54c>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d96e      	bls.n	8004b0e <main+0x462>
 8004a30:	4b6d      	ldr	r3, [pc, #436]	@ (8004be8 <main+0x53c>)
 8004a32:	785b      	ldrb	r3, [r3, #1]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d167      	bne.n	8004b0e <main+0x462>
 8004a3e:	4b6a      	ldr	r3, [pc, #424]	@ (8004be8 <main+0x53c>)
 8004a40:	785b      	ldrb	r3, [r3, #1]
 8004a42:	f003 0304 	and.w	r3, r3, #4
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d160      	bne.n	8004b0e <main+0x462>
					{
						LED_Start(ORG_LED, FAST, HIGH);
 8004a4c:	2205      	movs	r2, #5
 8004a4e:	2100      	movs	r1, #0
 8004a50:	2000      	movs	r0, #0
 8004a52:	f7ff f8c1 	bl	8003bd8 <LED_Start>
						sprintf(Data_Logging, "L:%u,%u,%lu,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", config.device_id, Last_Pressure, Last_Volume, Last_Acceleration.x, Last_Acceleration.y, Last_Acceleration.z, Vbatt, Supply.i1, Supply.i2, Supply.i3, Supply.v1, Supply.v2, Supply.v3, Temperature);
 8004a56:	4b68      	ldr	r3, [pc, #416]	@ (8004bf8 <main+0x54c>)
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	469c      	mov	ip, r3
 8004a5c:	4b67      	ldr	r3, [pc, #412]	@ (8004bfc <main+0x550>)
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	469e      	mov	lr, r3
 8004a62:	4b67      	ldr	r3, [pc, #412]	@ (8004c00 <main+0x554>)
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	4b67      	ldr	r3, [pc, #412]	@ (8004c04 <main+0x558>)
 8004a68:	885b      	ldrh	r3, [r3, #2]
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4b65      	ldr	r3, [pc, #404]	@ (8004c04 <main+0x558>)
 8004a6e:	889b      	ldrh	r3, [r3, #4]
 8004a70:	4618      	mov	r0, r3
 8004a72:	4b64      	ldr	r3, [pc, #400]	@ (8004c04 <main+0x558>)
 8004a74:	88db      	ldrh	r3, [r3, #6]
 8004a76:	461c      	mov	r4, r3
 8004a78:	4b63      	ldr	r3, [pc, #396]	@ (8004c08 <main+0x55c>)
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	461d      	mov	r5, r3
 8004a7e:	4b63      	ldr	r3, [pc, #396]	@ (8004c0c <main+0x560>)
 8004a80:	88db      	ldrh	r3, [r3, #6]
 8004a82:	461e      	mov	r6, r3
 8004a84:	4b61      	ldr	r3, [pc, #388]	@ (8004c0c <main+0x560>)
 8004a86:	891b      	ldrh	r3, [r3, #8]
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	4b60      	ldr	r3, [pc, #384]	@ (8004c0c <main+0x560>)
 8004a8c:	895b      	ldrh	r3, [r3, #10]
 8004a8e:	613b      	str	r3, [r7, #16]
 8004a90:	4b5e      	ldr	r3, [pc, #376]	@ (8004c0c <main+0x560>)
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	4b5d      	ldr	r3, [pc, #372]	@ (8004c0c <main+0x560>)
 8004a98:	885b      	ldrh	r3, [r3, #2]
 8004a9a:	60bb      	str	r3, [r7, #8]
 8004a9c:	4b5b      	ldr	r3, [pc, #364]	@ (8004c0c <main+0x560>)
 8004a9e:	889b      	ldrh	r3, [r3, #4]
 8004aa0:	607b      	str	r3, [r7, #4]
 8004aa2:	4b5b      	ldr	r3, [pc, #364]	@ (8004c10 <main+0x564>)
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	930a      	str	r3, [sp, #40]	@ 0x28
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	9308      	str	r3, [sp, #32]
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	9307      	str	r3, [sp, #28]
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	9306      	str	r3, [sp, #24]
 8004abc:	9605      	str	r6, [sp, #20]
 8004abe:	9504      	str	r5, [sp, #16]
 8004ac0:	9403      	str	r4, [sp, #12]
 8004ac2:	9002      	str	r0, [sp, #8]
 8004ac4:	9101      	str	r1, [sp, #4]
 8004ac6:	9200      	str	r2, [sp, #0]
 8004ac8:	4673      	mov	r3, lr
 8004aca:	4662      	mov	r2, ip
 8004acc:	4951      	ldr	r1, [pc, #324]	@ (8004c14 <main+0x568>)
 8004ace:	4852      	ldr	r0, [pc, #328]	@ (8004c18 <main+0x56c>)
 8004ad0:	f011 ff26 	bl	8016920 <siprintf>
						SIM_Send_TCP_Chunk_DMA(strlen(Data_Logging));
 8004ad4:	4850      	ldr	r0, [pc, #320]	@ (8004c18 <main+0x56c>)
 8004ad6:	f7fb fb85 	bl	80001e4 <strlen>
 8004ada:	4603      	mov	r3, r0
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fd fc84 	bl	80023ec <SIM_Send_TCP_Chunk_DMA>
						sys.SIM_Prompt_Status = HAL_GetTick();
 8004ae4:	f006 feb4 	bl	800b850 <HAL_GetTick>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	4a41      	ldr	r2, [pc, #260]	@ (8004bf0 <main+0x544>)
 8004aec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004af0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
						sys.Log_Status = HAL_GetTick();
 8004af4:	f006 feac 	bl	800b850 <HAL_GetTick>
 8004af8:	4603      	mov	r3, r0
 8004afa:	4a3d      	ldr	r2, [pc, #244]	@ (8004bf0 <main+0x544>)
 8004afc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004b00:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
						flags.Log_TransferInProgress = 1;
 8004b04:	4a38      	ldr	r2, [pc, #224]	@ (8004be8 <main+0x53c>)
 8004b06:	7853      	ldrb	r3, [r2, #1]
 8004b08:	f043 0308 	orr.w	r3, r3, #8
 8004b0c:	7053      	strb	r3, [r2, #1]
					}
					if(flags.Log_ReadytoSend)
 8004b0e:	4b36      	ldr	r3, [pc, #216]	@ (8004be8 <main+0x53c>)
 8004b10:	785b      	ldrb	r3, [r3, #1]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d014      	beq.n	8004b46 <main+0x49a>
					{
						SIM_Send_Command_DMA(Data_Logging);
 8004b1c:	483e      	ldr	r0, [pc, #248]	@ (8004c18 <main+0x56c>)
 8004b1e:	f7fd f9c5 	bl	8001eac <SIM_Send_Command_DMA>
						LED_Stop(ORG_LED);
 8004b22:	2000      	movs	r0, #0
 8004b24:	f7ff f924 	bl	8003d70 <LED_Stop>
						flags.SIM_isConnected = 1;
 8004b28:	4a2f      	ldr	r2, [pc, #188]	@ (8004be8 <main+0x53c>)
 8004b2a:	7853      	ldrb	r3, [r2, #1]
 8004b2c:	f043 0310 	orr.w	r3, r3, #16
 8004b30:	7053      	strb	r3, [r2, #1]
						flags.Log_ReadytoSend = 0;
 8004b32:	4a2d      	ldr	r2, [pc, #180]	@ (8004be8 <main+0x53c>)
 8004b34:	7853      	ldrb	r3, [r2, #1]
 8004b36:	f023 0301 	bic.w	r3, r3, #1
 8004b3a:	7053      	strb	r3, [r2, #1]
						flags.Log_TransferInProgress = 0;
 8004b3c:	4a2a      	ldr	r2, [pc, #168]	@ (8004be8 <main+0x53c>)
 8004b3e:	7853      	ldrb	r3, [r2, #1]
 8004b40:	f023 0308 	bic.w	r3, r3, #8
 8004b44:	7053      	strb	r3, [r2, #1]
					}
				}
				if(flags.CMD.Measure_Request)
 8004b46:	4b28      	ldr	r3, [pc, #160]	@ (8004be8 <main+0x53c>)
 8004b48:	789b      	ldrb	r3, [r3, #2]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d075      	beq.n	8004c40 <main+0x594>
				{
					if(!flags.Meas_TransferInProgress && !flags.Log_TransferInProgress && !flags.Measure_ReadytoSend)
 8004b54:	4b24      	ldr	r3, [pc, #144]	@ (8004be8 <main+0x53c>)
 8004b56:	785b      	ldrb	r3, [r3, #1]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d12c      	bne.n	8004bbc <main+0x510>
 8004b62:	4b21      	ldr	r3, [pc, #132]	@ (8004be8 <main+0x53c>)
 8004b64:	785b      	ldrb	r3, [r3, #1]
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d125      	bne.n	8004bbc <main+0x510>
 8004b70:	4b1d      	ldr	r3, [pc, #116]	@ (8004be8 <main+0x53c>)
 8004b72:	785b      	ldrb	r3, [r3, #1]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d11e      	bne.n	8004bbc <main+0x510>
					{
						Send_Measure_Addr = Send_Measure_Chunk(sys.RAM_Buffer_Base_tosend, sys.Inactive_RAM_Len, Send_Measure_Addr);
 8004b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8004bf0 <main+0x544>)
 8004b80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b84:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004b88:	4a19      	ldr	r2, [pc, #100]	@ (8004bf0 <main+0x544>)
 8004b8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004b8e:	f8d2 10d0 	ldr.w	r1, [r2, #208]	@ 0xd0
 8004b92:	4a22      	ldr	r2, [pc, #136]	@ (8004c1c <main+0x570>)
 8004b94:	6812      	ldr	r2, [r2, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f001 fdfe 	bl	8006798 <Send_Measure_Chunk>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	4a1f      	ldr	r2, [pc, #124]	@ (8004c1c <main+0x570>)
 8004ba0:	6013      	str	r3, [r2, #0]
						sys.SIM_Prompt_Status = HAL_GetTick();
 8004ba2:	f006 fe55 	bl	800b850 <HAL_GetTick>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	4a11      	ldr	r2, [pc, #68]	@ (8004bf0 <main+0x544>)
 8004baa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004bae:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
						flags.Meas_TransferInProgress = 1;
 8004bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8004be8 <main+0x53c>)
 8004bb4:	7853      	ldrb	r3, [r2, #1]
 8004bb6:	f043 0304 	orr.w	r3, r3, #4
 8004bba:	7053      	strb	r3, [r2, #1]
					}
					if(flags.Measure_ReadytoSend)
 8004bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004be8 <main+0x53c>)
 8004bbe:	785b      	ldrb	r3, [r3, #1]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d03a      	beq.n	8004c40 <main+0x594>
					{
						SIM_Send_Command_DMA((char*)tcp_chunk);
 8004bca:	4815      	ldr	r0, [pc, #84]	@ (8004c20 <main+0x574>)
 8004bcc:	f7fd f96e 	bl	8001eac <SIM_Send_Command_DMA>
						flags.Measure_ReadytoSend = 0;
 8004bd0:	4a05      	ldr	r2, [pc, #20]	@ (8004be8 <main+0x53c>)
 8004bd2:	7853      	ldrb	r3, [r2, #1]
 8004bd4:	f023 0302 	bic.w	r3, r3, #2
 8004bd8:	7053      	strb	r3, [r2, #1]
						if (Send_Measure_Addr == (uint32_t)-1)
 8004bda:	4b10      	ldr	r3, [pc, #64]	@ (8004c1c <main+0x570>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be2:	d12d      	bne.n	8004c40 <main+0x594>
 8004be4:	e01e      	b.n	8004c24 <main+0x578>
 8004be6:	bf00      	nop
 8004be8:	20001780 	.word	0x20001780
 8004bec:	20001610 	.word	0x20001610
 8004bf0:	200005d8 	.word	0x200005d8
 8004bf4:	200005d4 	.word	0x200005d4
 8004bf8:	20001784 	.word	0x20001784
 8004bfc:	200041b0 	.word	0x200041b0
 8004c00:	200041b4 	.word	0x200041b4
 8004c04:	200041b8 	.word	0x200041b8
 8004c08:	200041c2 	.word	0x200041c2
 8004c0c:	200038e0 	.word	0x200038e0
 8004c10:	200041c0 	.word	0x200041c0
 8004c14:	08017f38 	.word	0x08017f38
 8004c18:	200041c4 	.word	0x200041c4
 8004c1c:	20004968 	.word	0x20004968
 8004c20:	2000496c 	.word	0x2000496c
						{
							  memset(tcp_chunk, 0, 1460);
 8004c24:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8004c28:	2100      	movs	r1, #0
 8004c2a:	4885      	ldr	r0, [pc, #532]	@ (8004e40 <main+0x794>)
 8004c2c:	f011 fed8 	bl	80169e0 <memset>
							  LED_Stop(RED_LED);
 8004c30:	2004      	movs	r0, #4
 8004c32:	f7ff f89d 	bl	8003d70 <LED_Stop>
							  flags.CMD.Measure_Request = 0;
 8004c36:	4a83      	ldr	r2, [pc, #524]	@ (8004e44 <main+0x798>)
 8004c38:	7893      	ldrb	r3, [r2, #2]
 8004c3a:	f023 0302 	bic.w	r3, r3, #2
 8004c3e:	7093      	strb	r3, [r2, #2]
						}
					}
				}
				if(sys.SIM_Prompt_Status > 0 && (HAL_GetTick() - sys.SIM_Prompt_Status) > SIM_PROMPT_TIMEOUT_MS)
 8004c40:	4b81      	ldr	r3, [pc, #516]	@ (8004e48 <main+0x79c>)
 8004c42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c46:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d02f      	beq.n	8004cae <main+0x602>
 8004c4e:	f006 fdff 	bl	800b850 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	4b7c      	ldr	r3, [pc, #496]	@ (8004e48 <main+0x79c>)
 8004c56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c5a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d922      	bls.n	8004cae <main+0x602>
				{
					  char cmd = 0x1A;
 8004c68:	231a      	movs	r3, #26
 8004c6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
					  SIM_Send_Command_DMA(&cmd);
 8004c6e:	f207 131f 	addw	r3, r7, #287	@ 0x11f
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fd f91a 	bl	8001eac <SIM_Send_Command_DMA>
					  flags.Log_TransferInProgress = 0;
 8004c78:	4a72      	ldr	r2, [pc, #456]	@ (8004e44 <main+0x798>)
 8004c7a:	7853      	ldrb	r3, [r2, #1]
 8004c7c:	f023 0308 	bic.w	r3, r3, #8
 8004c80:	7053      	strb	r3, [r2, #1]
					  flags.Meas_TransferInProgress = 0;
 8004c82:	4a70      	ldr	r2, [pc, #448]	@ (8004e44 <main+0x798>)
 8004c84:	7853      	ldrb	r3, [r2, #1]
 8004c86:	f023 0304 	bic.w	r3, r3, #4
 8004c8a:	7053      	strb	r3, [r2, #1]
					  flags.Measure_ReadytoSend = 0;
 8004c8c:	4a6d      	ldr	r2, [pc, #436]	@ (8004e44 <main+0x798>)
 8004c8e:	7853      	ldrb	r3, [r2, #1]
 8004c90:	f023 0302 	bic.w	r3, r3, #2
 8004c94:	7053      	strb	r3, [r2, #1]
					  flags.Log_ReadytoSend = 0;
 8004c96:	4a6b      	ldr	r2, [pc, #428]	@ (8004e44 <main+0x798>)
 8004c98:	7853      	ldrb	r3, [r2, #1]
 8004c9a:	f023 0301 	bic.w	r3, r3, #1
 8004c9e:	7053      	strb	r3, [r2, #1]
					  sys.SIM_Prompt_Status = 0;
 8004ca0:	4b69      	ldr	r3, [pc, #420]	@ (8004e48 <main+0x79c>)
 8004ca2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	2300      	movs	r3, #0
 8004caa:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
				}
				if(HAL_GetTick() - sys.SIM_Connection_Status > config.connection_timeout_ms)
 8004cae:	f006 fdcf 	bl	800b850 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	4b64      	ldr	r3, [pc, #400]	@ (8004e48 <main+0x79c>)
 8004cb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004cbe:	1ad2      	subs	r2, r2, r3
 8004cc0:	4b62      	ldr	r3, [pc, #392]	@ (8004e4c <main+0x7a0>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	f240 80b8 	bls.w	8004e3a <main+0x78e>
				{
					sys.SIM_Connection_Status = HAL_GetTick();
 8004cca:	f006 fdc1 	bl	800b850 <HAL_GetTick>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	4a5d      	ldr	r2, [pc, #372]	@ (8004e48 <main+0x79c>)
 8004cd2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004cd6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
					if(flags.SIM_isConnected)
 8004cda:	4b5a      	ldr	r3, [pc, #360]	@ (8004e44 <main+0x798>)
 8004cdc:	785b      	ldrb	r3, [r3, #1]
 8004cde:	f003 0310 	and.w	r3, r3, #16
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <main+0x648>
					{
						flags.SIM_isConnected = 0;
 8004ce8:	4a56      	ldr	r2, [pc, #344]	@ (8004e44 <main+0x798>)
 8004cea:	7853      	ldrb	r3, [r2, #1]
 8004cec:	f023 0310 	bic.w	r3, r3, #16
 8004cf0:	7053      	strb	r3, [r2, #1]
						flags.Meas_TransferInProgress = 0;
						flags.CMD.Idle = 1;
					}
				}
			}
			break;
 8004cf2:	e0a2      	b.n	8004e3a <main+0x78e>
						flags.Log_TransferInProgress = 0;
 8004cf4:	4a53      	ldr	r2, [pc, #332]	@ (8004e44 <main+0x798>)
 8004cf6:	7853      	ldrb	r3, [r2, #1]
 8004cf8:	f023 0308 	bic.w	r3, r3, #8
 8004cfc:	7053      	strb	r3, [r2, #1]
						flags.Meas_TransferInProgress = 0;
 8004cfe:	4a51      	ldr	r2, [pc, #324]	@ (8004e44 <main+0x798>)
 8004d00:	7853      	ldrb	r3, [r2, #1]
 8004d02:	f023 0304 	bic.w	r3, r3, #4
 8004d06:	7053      	strb	r3, [r2, #1]
						flags.CMD.Idle = 1;
 8004d08:	4a4e      	ldr	r2, [pc, #312]	@ (8004e44 <main+0x798>)
 8004d0a:	7893      	ldrb	r3, [r2, #2]
 8004d0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d10:	7093      	strb	r3, [r2, #2]
			break;
 8004d12:	e092      	b.n	8004e3a <main+0x78e>

		case OTA_STATE:
			if(OTA_Init() == HAL_OK)
 8004d14:	f000 fe6e 	bl	80059f4 <OTA_Init>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d171      	bne.n	8004e02 <main+0x756>
			{
				HAL_UART_DMAStop(SIM_UART);
 8004d1e:	484c      	ldr	r0, [pc, #304]	@ (8004e50 <main+0x7a4>)
 8004d20:	f010 fc84 	bl	801562c <HAL_UART_DMAStop>
				memset(sim_rx_buffer, 0, sizeof(sim_rx_buffer));
 8004d24:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004d28:	2100      	movs	r1, #0
 8004d2a:	484a      	ldr	r0, [pc, #296]	@ (8004e54 <main+0x7a8>)
 8004d2c:	f011 fe58 	bl	80169e0 <memset>

				SIM_Send_TCP("R:OTA_READY");
 8004d30:	4849      	ldr	r0, [pc, #292]	@ (8004e58 <main+0x7ac>)
 8004d32:	f7fd fb2d 	bl	8002390 <SIM_Send_TCP>
				if(OTA_Receive() == HAL_OK)
 8004d36:	f000 fe89 	bl	8005a4c <OTA_Receive>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d148      	bne.n	8004dd2 <main+0x726>
				{
					SIM_Send_TCP("R:OTA_RECEIVED");
 8004d40:	4846      	ldr	r0, [pc, #280]	@ (8004e5c <main+0x7b0>)
 8004d42:	f7fd fb25 	bl	8002390 <SIM_Send_TCP>
					if(OTA_CRC_Check() == HAL_OK)
 8004d46:	f000 ff05 	bl	8005b54 <OTA_CRC_Check>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d128      	bne.n	8004da2 <main+0x6f6>
					{
						SIM_Send_TCP("R:OTA_CRC_OK");
 8004d50:	4843      	ldr	r0, [pc, #268]	@ (8004e60 <main+0x7b4>)
 8004d52:	f7fd fb1d 	bl	8002390 <SIM_Send_TCP>
						if(OTA_Apply() == HAL_OK)
 8004d56:	f000 ffb1 	bl	8005cbc <OTA_Apply>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d108      	bne.n	8004d72 <main+0x6c6>
						{
							SIM_Send_TCP("R:OTA_SUCCESS");
 8004d60:	4840      	ldr	r0, [pc, #256]	@ (8004e64 <main+0x7b8>)
 8004d62:	f7fd fb15 	bl	8002390 <SIM_Send_TCP>
							HAL_Delay(500);
 8004d66:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004d6a:	f006 fd7d 	bl	800b868 <HAL_Delay>
							NVIC_SystemReset();
 8004d6e:	f7ff fc87 	bl	8004680 <__NVIC_SystemReset>
						}
						else
						{
							SIM_Send_TCP("R:OTA_APPLY_ERROR");
 8004d72:	483d      	ldr	r0, [pc, #244]	@ (8004e68 <main+0x7bc>)
 8004d74:	f7fd fb0c 	bl	8002390 <SIM_Send_TCP>
							HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8004d78:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004d7c:	4935      	ldr	r1, [pc, #212]	@ (8004e54 <main+0x7a8>)
 8004d7e:	4834      	ldr	r0, [pc, #208]	@ (8004e50 <main+0x7a4>)
 8004d80:	f011 fcf0 	bl	8016764 <HAL_UARTEx_ReceiveToIdle_DMA>
							LED_Stop(ORG_LED);
 8004d84:	2000      	movs	r0, #0
 8004d86:	f7fe fff3 	bl	8003d70 <LED_Stop>
							LED_Stop(RED_LED);
 8004d8a:	2004      	movs	r0, #4
 8004d8c:	f7fe fff0 	bl	8003d70 <LED_Stop>
							LED_Start(GRN_LED, MEDIUM, HALF);
 8004d90:	2206      	movs	r2, #6
 8004d92:	2101      	movs	r1, #1
 8004d94:	2008      	movs	r0, #8
 8004d96:	f7fe ff1f 	bl	8003bd8 <LED_Start>
							state = IDLE;
 8004d9a:	4b34      	ldr	r3, [pc, #208]	@ (8004e6c <main+0x7c0>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	701a      	strb	r2, [r3, #0]
				LED_Stop(ORG_LED);
				LED_Stop(RED_LED);
				LED_Start(GRN_LED, MEDIUM, HALF);
				state = IDLE;
			}
			break;
 8004da0:	e04c      	b.n	8004e3c <main+0x790>
						SIM_Send_TCP("R:OTA_CRC_ERROR");
 8004da2:	4833      	ldr	r0, [pc, #204]	@ (8004e70 <main+0x7c4>)
 8004da4:	f7fd faf4 	bl	8002390 <SIM_Send_TCP>
						HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8004da8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004dac:	4929      	ldr	r1, [pc, #164]	@ (8004e54 <main+0x7a8>)
 8004dae:	4828      	ldr	r0, [pc, #160]	@ (8004e50 <main+0x7a4>)
 8004db0:	f011 fcd8 	bl	8016764 <HAL_UARTEx_ReceiveToIdle_DMA>
						LED_Stop(ORG_LED);
 8004db4:	2000      	movs	r0, #0
 8004db6:	f7fe ffdb 	bl	8003d70 <LED_Stop>
						LED_Stop(RED_LED);
 8004dba:	2004      	movs	r0, #4
 8004dbc:	f7fe ffd8 	bl	8003d70 <LED_Stop>
						LED_Start(GRN_LED, MEDIUM, HALF);
 8004dc0:	2206      	movs	r2, #6
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	2008      	movs	r0, #8
 8004dc6:	f7fe ff07 	bl	8003bd8 <LED_Start>
						state = IDLE;
 8004dca:	4b28      	ldr	r3, [pc, #160]	@ (8004e6c <main+0x7c0>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	701a      	strb	r2, [r3, #0]
						break;
 8004dd0:	e034      	b.n	8004e3c <main+0x790>
					SIM_Send_TCP("R:OTA_RECEIVE_ERROR");
 8004dd2:	4828      	ldr	r0, [pc, #160]	@ (8004e74 <main+0x7c8>)
 8004dd4:	f7fd fadc 	bl	8002390 <SIM_Send_TCP>
					HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8004dd8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004ddc:	491d      	ldr	r1, [pc, #116]	@ (8004e54 <main+0x7a8>)
 8004dde:	481c      	ldr	r0, [pc, #112]	@ (8004e50 <main+0x7a4>)
 8004de0:	f011 fcc0 	bl	8016764 <HAL_UARTEx_ReceiveToIdle_DMA>
					LED_Stop(ORG_LED);
 8004de4:	2000      	movs	r0, #0
 8004de6:	f7fe ffc3 	bl	8003d70 <LED_Stop>
					LED_Stop(RED_LED);
 8004dea:	2004      	movs	r0, #4
 8004dec:	f7fe ffc0 	bl	8003d70 <LED_Stop>
					LED_Start(GRN_LED, MEDIUM, HALF);
 8004df0:	2206      	movs	r2, #6
 8004df2:	2101      	movs	r1, #1
 8004df4:	2008      	movs	r0, #8
 8004df6:	f7fe feef 	bl	8003bd8 <LED_Start>
					state = IDLE;
 8004dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8004e6c <main+0x7c0>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	701a      	strb	r2, [r3, #0]
			break;
 8004e00:	e01c      	b.n	8004e3c <main+0x790>
				SIM_Send_TCP("R:OTA_INIT_ERROR");
 8004e02:	481d      	ldr	r0, [pc, #116]	@ (8004e78 <main+0x7cc>)
 8004e04:	f7fd fac4 	bl	8002390 <SIM_Send_TCP>
				HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8004e08:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004e0c:	4911      	ldr	r1, [pc, #68]	@ (8004e54 <main+0x7a8>)
 8004e0e:	4810      	ldr	r0, [pc, #64]	@ (8004e50 <main+0x7a4>)
 8004e10:	f011 fca8 	bl	8016764 <HAL_UARTEx_ReceiveToIdle_DMA>
				LED_Stop(ORG_LED);
 8004e14:	2000      	movs	r0, #0
 8004e16:	f7fe ffab 	bl	8003d70 <LED_Stop>
				LED_Stop(RED_LED);
 8004e1a:	2004      	movs	r0, #4
 8004e1c:	f7fe ffa8 	bl	8003d70 <LED_Stop>
				LED_Start(GRN_LED, MEDIUM, HALF);
 8004e20:	2206      	movs	r2, #6
 8004e22:	2101      	movs	r1, #1
 8004e24:	2008      	movs	r0, #8
 8004e26:	f7fe fed7 	bl	8003bd8 <LED_Start>
				state = IDLE;
 8004e2a:	4b10      	ldr	r3, [pc, #64]	@ (8004e6c <main+0x7c0>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	701a      	strb	r2, [r3, #0]
			break;
 8004e30:	e004      	b.n	8004e3c <main+0x790>

		default:
			break;
 8004e32:	bf00      	nop
 8004e34:	e461      	b.n	80046fa <main+0x4e>
			break;
 8004e36:	bf00      	nop
 8004e38:	e45f      	b.n	80046fa <main+0x4e>
			break;
 8004e3a:	bf00      	nop
		switch(state)
 8004e3c:	e45d      	b.n	80046fa <main+0x4e>
 8004e3e:	bf00      	nop
 8004e40:	2000496c 	.word	0x2000496c
 8004e44:	20001780 	.word	0x20001780
 8004e48:	200005d8 	.word	0x200005d8
 8004e4c:	20001784 	.word	0x20001784
 8004e50:	200004bc 	.word	0x200004bc
 8004e54:	20004f94 	.word	0x20004f94
 8004e58:	08017f68 	.word	0x08017f68
 8004e5c:	08017f74 	.word	0x08017f74
 8004e60:	08017f84 	.word	0x08017f84
 8004e64:	08017f94 	.word	0x08017f94
 8004e68:	08017fa4 	.word	0x08017fa4
 8004e6c:	200005d4 	.word	0x200005d4
 8004e70:	08017fb8 	.word	0x08017fb8
 8004e74:	08017fc8 	.word	0x08017fc8
 8004e78:	08017fdc 	.word	0x08017fdc

08004e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b096      	sub	sp, #88	@ 0x58
 8004e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e82:	f107 0314 	add.w	r3, r7, #20
 8004e86:	2244      	movs	r2, #68	@ 0x44
 8004e88:	2100      	movs	r1, #0
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f011 fda8 	bl	80169e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e90:	463b      	mov	r3, r7
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	605a      	str	r2, [r3, #4]
 8004e98:	609a      	str	r2, [r3, #8]
 8004e9a:	60da      	str	r2, [r3, #12]
 8004e9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004e9e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004ea2:	f00a fcd9 	bl	800f858 <HAL_PWREx_ControlVoltageScaling>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8004eac:	f000 fd9c 	bl	80059e8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004eb0:	2309      	movs	r3, #9
 8004eb2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004eb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004eb8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8004eca:	2314      	movs	r3, #20
 8004ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004ece:	2307      	movs	r3, #7
 8004ed0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004eda:	f107 0314 	add.w	r3, r7, #20
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f00b f972 	bl	80101c8 <HAL_RCC_OscConfig>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004eea:	f000 fd7d 	bl	80059e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004eee:	230f      	movs	r3, #15
 8004ef0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004efa:	2300      	movs	r3, #0
 8004efc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004efe:	2300      	movs	r3, #0
 8004f00:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004f02:	463b      	mov	r3, r7
 8004f04:	2104      	movs	r1, #4
 8004f06:	4618      	mov	r0, r3
 8004f08:	f00b fd3a 	bl	8010980 <HAL_RCC_ClockConfig>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004f12:	f000 fd69 	bl	80059e8 <Error_Handler>
  }
}
 8004f16:	bf00      	nop
 8004f18:	3758      	adds	r7, #88	@ 0x58
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08a      	sub	sp, #40	@ 0x28
 8004f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004f26:	f107 031c 	add.w	r3, r7, #28
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	605a      	str	r2, [r3, #4]
 8004f30:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004f32:	1d3b      	adds	r3, r7, #4
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	605a      	str	r2, [r3, #4]
 8004f3a:	609a      	str	r2, [r3, #8]
 8004f3c:	60da      	str	r2, [r3, #12]
 8004f3e:	611a      	str	r2, [r3, #16]
 8004f40:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004f42:	4b30      	ldr	r3, [pc, #192]	@ (8005004 <MX_ADC1_Init+0xe4>)
 8004f44:	4a30      	ldr	r2, [pc, #192]	@ (8005008 <MX_ADC1_Init+0xe8>)
 8004f46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004f48:	4b2e      	ldr	r3, [pc, #184]	@ (8005004 <MX_ADC1_Init+0xe4>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8005004 <MX_ADC1_Init+0xe4>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004f54:	4b2b      	ldr	r3, [pc, #172]	@ (8005004 <MX_ADC1_Init+0xe4>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8005004 <MX_ADC1_Init+0xe4>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004f60:	4b28      	ldr	r3, [pc, #160]	@ (8005004 <MX_ADC1_Init+0xe4>)
 8004f62:	2208      	movs	r2, #8
 8004f64:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004f66:	4b27      	ldr	r3, [pc, #156]	@ (8005004 <MX_ADC1_Init+0xe4>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004f6c:	4b25      	ldr	r3, [pc, #148]	@ (8005004 <MX_ADC1_Init+0xe4>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8004f72:	4b24      	ldr	r3, [pc, #144]	@ (8005004 <MX_ADC1_Init+0xe4>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004f78:	4b22      	ldr	r3, [pc, #136]	@ (8005004 <MX_ADC1_Init+0xe4>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8004f80:	4b20      	ldr	r3, [pc, #128]	@ (8005004 <MX_ADC1_Init+0xe4>)
 8004f82:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004f86:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004f88:	4b1e      	ldr	r3, [pc, #120]	@ (8005004 <MX_ADC1_Init+0xe4>)
 8004f8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004f90:	4b1c      	ldr	r3, [pc, #112]	@ (8005004 <MX_ADC1_Init+0xe4>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004f98:	4b1a      	ldr	r3, [pc, #104]	@ (8005004 <MX_ADC1_Init+0xe4>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8004f9e:	4b19      	ldr	r3, [pc, #100]	@ (8005004 <MX_ADC1_Init+0xe4>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004fa6:	4817      	ldr	r0, [pc, #92]	@ (8005004 <MX_ADC1_Init+0xe4>)
 8004fa8:	f006 fea6 	bl	800bcf8 <HAL_ADC_Init>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8004fb2:	f000 fd19 	bl	80059e8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004fba:	f107 031c 	add.w	r3, r7, #28
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4810      	ldr	r0, [pc, #64]	@ (8005004 <MX_ADC1_Init+0xe4>)
 8004fc2:	f007 ff5f 	bl	800ce84 <HAL_ADCEx_MultiModeConfigChannel>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8004fcc:	f000 fd0c 	bl	80059e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800500c <MX_ADC1_Init+0xec>)
 8004fd2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004fd4:	2306      	movs	r3, #6
 8004fd6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004fdc:	237f      	movs	r3, #127	@ 0x7f
 8004fde:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004fe8:	1d3b      	adds	r3, r7, #4
 8004fea:	4619      	mov	r1, r3
 8004fec:	4805      	ldr	r0, [pc, #20]	@ (8005004 <MX_ADC1_Init+0xe4>)
 8004fee:	f007 f8fb 	bl	800c1e8 <HAL_ADC_ConfigChannel>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8004ff8:	f000 fcf6 	bl	80059e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004ffc:	bf00      	nop
 8004ffe:	3728      	adds	r7, #40	@ 0x28
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	200000b0 	.word	0x200000b0
 8005008:	50040000 	.word	0x50040000
 800500c:	25b00200 	.word	0x25b00200

08005010 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8005014:	4b0d      	ldr	r3, [pc, #52]	@ (800504c <MX_CRC_Init+0x3c>)
 8005016:	4a0e      	ldr	r2, [pc, #56]	@ (8005050 <MX_CRC_Init+0x40>)
 8005018:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800501a:	4b0c      	ldr	r3, [pc, #48]	@ (800504c <MX_CRC_Init+0x3c>)
 800501c:	2200      	movs	r2, #0
 800501e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8005020:	4b0a      	ldr	r3, [pc, #40]	@ (800504c <MX_CRC_Init+0x3c>)
 8005022:	2200      	movs	r2, #0
 8005024:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8005026:	4b09      	ldr	r3, [pc, #36]	@ (800504c <MX_CRC_Init+0x3c>)
 8005028:	2200      	movs	r2, #0
 800502a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800502c:	4b07      	ldr	r3, [pc, #28]	@ (800504c <MX_CRC_Init+0x3c>)
 800502e:	2200      	movs	r2, #0
 8005030:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8005032:	4b06      	ldr	r3, [pc, #24]	@ (800504c <MX_CRC_Init+0x3c>)
 8005034:	2201      	movs	r2, #1
 8005036:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8005038:	4804      	ldr	r0, [pc, #16]	@ (800504c <MX_CRC_Init+0x3c>)
 800503a:	f008 f8ff 	bl	800d23c <HAL_CRC_Init>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8005044:	f000 fcd0 	bl	80059e8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8005048:	bf00      	nop
 800504a:	bd80      	pop	{r7, pc}
 800504c:	2000015c 	.word	0x2000015c
 8005050:	40023000 	.word	0x40023000

08005054 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005058:	4b1b      	ldr	r3, [pc, #108]	@ (80050c8 <MX_I2C3_Init+0x74>)
 800505a:	4a1c      	ldr	r2, [pc, #112]	@ (80050cc <MX_I2C3_Init+0x78>)
 800505c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 800505e:	4b1a      	ldr	r3, [pc, #104]	@ (80050c8 <MX_I2C3_Init+0x74>)
 8005060:	4a1b      	ldr	r2, [pc, #108]	@ (80050d0 <MX_I2C3_Init+0x7c>)
 8005062:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8005064:	4b18      	ldr	r3, [pc, #96]	@ (80050c8 <MX_I2C3_Init+0x74>)
 8005066:	2200      	movs	r2, #0
 8005068:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800506a:	4b17      	ldr	r3, [pc, #92]	@ (80050c8 <MX_I2C3_Init+0x74>)
 800506c:	2201      	movs	r2, #1
 800506e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005070:	4b15      	ldr	r3, [pc, #84]	@ (80050c8 <MX_I2C3_Init+0x74>)
 8005072:	2200      	movs	r2, #0
 8005074:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8005076:	4b14      	ldr	r3, [pc, #80]	@ (80050c8 <MX_I2C3_Init+0x74>)
 8005078:	2200      	movs	r2, #0
 800507a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800507c:	4b12      	ldr	r3, [pc, #72]	@ (80050c8 <MX_I2C3_Init+0x74>)
 800507e:	2200      	movs	r2, #0
 8005080:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005082:	4b11      	ldr	r3, [pc, #68]	@ (80050c8 <MX_I2C3_Init+0x74>)
 8005084:	2200      	movs	r2, #0
 8005086:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005088:	4b0f      	ldr	r3, [pc, #60]	@ (80050c8 <MX_I2C3_Init+0x74>)
 800508a:	2200      	movs	r2, #0
 800508c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800508e:	480e      	ldr	r0, [pc, #56]	@ (80050c8 <MX_I2C3_Init+0x74>)
 8005090:	f009 fdec 	bl	800ec6c <HAL_I2C_Init>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800509a:	f000 fca5 	bl	80059e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800509e:	2100      	movs	r1, #0
 80050a0:	4809      	ldr	r0, [pc, #36]	@ (80050c8 <MX_I2C3_Init+0x74>)
 80050a2:	f00a fb33 	bl	800f70c <HAL_I2CEx_ConfigAnalogFilter>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80050ac:	f000 fc9c 	bl	80059e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80050b0:	2100      	movs	r1, #0
 80050b2:	4805      	ldr	r0, [pc, #20]	@ (80050c8 <MX_I2C3_Init+0x74>)
 80050b4:	f00a fb75 	bl	800f7a2 <HAL_I2CEx_ConfigDigitalFilter>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80050be:	f000 fc93 	bl	80059e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80050c2:	bf00      	nop
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000180 	.word	0x20000180
 80050cc:	40005c00 	.word	0x40005c00
 80050d0:	10d19ce4 	.word	0x10d19ce4

080050d4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80050d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005118 <MX_QUADSPI_Init+0x44>)
 80050da:	4a10      	ldr	r2, [pc, #64]	@ (800511c <MX_QUADSPI_Init+0x48>)
 80050dc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80050de:	4b0e      	ldr	r3, [pc, #56]	@ (8005118 <MX_QUADSPI_Init+0x44>)
 80050e0:	2201      	movs	r2, #1
 80050e2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80050e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005118 <MX_QUADSPI_Init+0x44>)
 80050e6:	2201      	movs	r2, #1
 80050e8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80050ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005118 <MX_QUADSPI_Init+0x44>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80050f0:	4b09      	ldr	r3, [pc, #36]	@ (8005118 <MX_QUADSPI_Init+0x44>)
 80050f2:	2218      	movs	r2, #24
 80050f4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80050f6:	4b08      	ldr	r3, [pc, #32]	@ (8005118 <MX_QUADSPI_Init+0x44>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80050fc:	4b06      	ldr	r3, [pc, #24]	@ (8005118 <MX_QUADSPI_Init+0x44>)
 80050fe:	2200      	movs	r2, #0
 8005100:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8005102:	4805      	ldr	r0, [pc, #20]	@ (8005118 <MX_QUADSPI_Init+0x44>)
 8005104:	f00a fbfe 	bl	800f904 <HAL_QSPI_Init>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800510e:	f000 fc6b 	bl	80059e8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8005112:	bf00      	nop
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	200001d4 	.word	0x200001d4
 800511c:	a0001000 	.word	0xa0001000

08005120 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b092      	sub	sp, #72	@ 0x48
 8005124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8005126:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	605a      	str	r2, [r3, #4]
 8005130:	609a      	str	r2, [r3, #8]
 8005132:	60da      	str	r2, [r3, #12]
 8005134:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8005136:	2300      	movs	r3, #0
 8005138:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800513a:	1d3b      	adds	r3, r7, #4
 800513c:	222c      	movs	r2, #44	@ 0x2c
 800513e:	2100      	movs	r1, #0
 8005140:	4618      	mov	r0, r3
 8005142:	f011 fc4d 	bl	80169e0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005146:	4b3c      	ldr	r3, [pc, #240]	@ (8005238 <MX_RTC_Init+0x118>)
 8005148:	4a3c      	ldr	r2, [pc, #240]	@ (800523c <MX_RTC_Init+0x11c>)
 800514a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800514c:	4b3a      	ldr	r3, [pc, #232]	@ (8005238 <MX_RTC_Init+0x118>)
 800514e:	2200      	movs	r2, #0
 8005150:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005152:	4b39      	ldr	r3, [pc, #228]	@ (8005238 <MX_RTC_Init+0x118>)
 8005154:	227f      	movs	r2, #127	@ 0x7f
 8005156:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8005158:	4b37      	ldr	r3, [pc, #220]	@ (8005238 <MX_RTC_Init+0x118>)
 800515a:	22ff      	movs	r2, #255	@ 0xff
 800515c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800515e:	4b36      	ldr	r3, [pc, #216]	@ (8005238 <MX_RTC_Init+0x118>)
 8005160:	2200      	movs	r2, #0
 8005162:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8005164:	4b34      	ldr	r3, [pc, #208]	@ (8005238 <MX_RTC_Init+0x118>)
 8005166:	2200      	movs	r2, #0
 8005168:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800516a:	4b33      	ldr	r3, [pc, #204]	@ (8005238 <MX_RTC_Init+0x118>)
 800516c:	2200      	movs	r2, #0
 800516e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005170:	4b31      	ldr	r3, [pc, #196]	@ (8005238 <MX_RTC_Init+0x118>)
 8005172:	2200      	movs	r2, #0
 8005174:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005176:	4830      	ldr	r0, [pc, #192]	@ (8005238 <MX_RTC_Init+0x118>)
 8005178:	f00c fae2 	bl	8011740 <HAL_RTC_Init>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8005182:	f000 fc31 	bl	80059e8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8005186:	2300      	movs	r3, #0
 8005188:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0;
 800518c:	2300      	movs	r3, #0
 800518e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0;
 8005192:	2300      	movs	r3, #0
 8005194:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005198:	2300      	movs	r3, #0
 800519a:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800519c:	2300      	movs	r3, #0
 800519e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80051a0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80051a4:	2200      	movs	r2, #0
 80051a6:	4619      	mov	r1, r3
 80051a8:	4823      	ldr	r0, [pc, #140]	@ (8005238 <MX_RTC_Init+0x118>)
 80051aa:	f00c fb51 	bl	8011850 <HAL_RTC_SetTime>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80051b4:	f000 fc18 	bl	80059e8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80051b8:	2301      	movs	r3, #1
 80051ba:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 80051be:	2301      	movs	r3, #1
 80051c0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 1;
 80051c4:	2301      	movs	r3, #1
 80051c6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0;
 80051ca:	2300      	movs	r3, #0
 80051cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80051d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80051d4:	2200      	movs	r2, #0
 80051d6:	4619      	mov	r1, r3
 80051d8:	4817      	ldr	r0, [pc, #92]	@ (8005238 <MX_RTC_Init+0x118>)
 80051da:	f00c fc32 	bl	8011a42 <HAL_RTC_SetDate>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80051e4:	f000 fc00 	bl	80059e8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 80051ec:	2300      	movs	r3, #0
 80051ee:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 80051f0:	2300      	movs	r3, #0
 80051f2:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 80051f4:	2300      	movs	r3, #0
 80051f6:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80051f8:	2300      	movs	r3, #0
 80051fa:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80051fc:	2300      	movs	r3, #0
 80051fe:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8005200:	4b0f      	ldr	r3, [pc, #60]	@ (8005240 <MX_RTC_Init+0x120>)
 8005202:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8005204:	2300      	movs	r3, #0
 8005206:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8005208:	2300      	movs	r3, #0
 800520a:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 1;
 800520c:	2301      	movs	r3, #1
 800520e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8005212:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8005218:	1d3b      	adds	r3, r7, #4
 800521a:	2200      	movs	r2, #0
 800521c:	4619      	mov	r1, r3
 800521e:	4806      	ldr	r0, [pc, #24]	@ (8005238 <MX_RTC_Init+0x118>)
 8005220:	f00c fc96 	bl	8011b50 <HAL_RTC_SetAlarm_IT>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 800522a:	f000 fbdd 	bl	80059e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800522e:	bf00      	nop
 8005230:	3748      	adds	r7, #72	@ 0x48
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20000218 	.word	0x20000218
 800523c:	40002800 	.word	0x40002800
 8005240:	80800080 	.word	0x80800080

08005244 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005248:	4b1b      	ldr	r3, [pc, #108]	@ (80052b8 <MX_SPI2_Init+0x74>)
 800524a:	4a1c      	ldr	r2, [pc, #112]	@ (80052bc <MX_SPI2_Init+0x78>)
 800524c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800524e:	4b1a      	ldr	r3, [pc, #104]	@ (80052b8 <MX_SPI2_Init+0x74>)
 8005250:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005254:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005256:	4b18      	ldr	r3, [pc, #96]	@ (80052b8 <MX_SPI2_Init+0x74>)
 8005258:	2200      	movs	r2, #0
 800525a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800525c:	4b16      	ldr	r3, [pc, #88]	@ (80052b8 <MX_SPI2_Init+0x74>)
 800525e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005262:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005264:	4b14      	ldr	r3, [pc, #80]	@ (80052b8 <MX_SPI2_Init+0x74>)
 8005266:	2200      	movs	r2, #0
 8005268:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800526a:	4b13      	ldr	r3, [pc, #76]	@ (80052b8 <MX_SPI2_Init+0x74>)
 800526c:	2200      	movs	r2, #0
 800526e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005270:	4b11      	ldr	r3, [pc, #68]	@ (80052b8 <MX_SPI2_Init+0x74>)
 8005272:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005276:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005278:	4b0f      	ldr	r3, [pc, #60]	@ (80052b8 <MX_SPI2_Init+0x74>)
 800527a:	2200      	movs	r2, #0
 800527c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800527e:	4b0e      	ldr	r3, [pc, #56]	@ (80052b8 <MX_SPI2_Init+0x74>)
 8005280:	2200      	movs	r2, #0
 8005282:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005284:	4b0c      	ldr	r3, [pc, #48]	@ (80052b8 <MX_SPI2_Init+0x74>)
 8005286:	2200      	movs	r2, #0
 8005288:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800528a:	4b0b      	ldr	r3, [pc, #44]	@ (80052b8 <MX_SPI2_Init+0x74>)
 800528c:	2200      	movs	r2, #0
 800528e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005290:	4b09      	ldr	r3, [pc, #36]	@ (80052b8 <MX_SPI2_Init+0x74>)
 8005292:	2207      	movs	r2, #7
 8005294:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005296:	4b08      	ldr	r3, [pc, #32]	@ (80052b8 <MX_SPI2_Init+0x74>)
 8005298:	2200      	movs	r2, #0
 800529a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800529c:	4b06      	ldr	r3, [pc, #24]	@ (80052b8 <MX_SPI2_Init+0x74>)
 800529e:	2208      	movs	r2, #8
 80052a0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80052a2:	4805      	ldr	r0, [pc, #20]	@ (80052b8 <MX_SPI2_Init+0x74>)
 80052a4:	f00c feb0 	bl	8012008 <HAL_SPI_Init>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80052ae:	f000 fb9b 	bl	80059e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80052b2:	bf00      	nop
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	2000023c 	.word	0x2000023c
 80052bc:	40003800 	.word	0x40003800

080052c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80052c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005334 <MX_SPI3_Init+0x74>)
 80052c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005338 <MX_SPI3_Init+0x78>)
 80052c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80052ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005334 <MX_SPI3_Init+0x74>)
 80052cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80052d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80052d2:	4b18      	ldr	r3, [pc, #96]	@ (8005334 <MX_SPI3_Init+0x74>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80052d8:	4b16      	ldr	r3, [pc, #88]	@ (8005334 <MX_SPI3_Init+0x74>)
 80052da:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80052de:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80052e0:	4b14      	ldr	r3, [pc, #80]	@ (8005334 <MX_SPI3_Init+0x74>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80052e6:	4b13      	ldr	r3, [pc, #76]	@ (8005334 <MX_SPI3_Init+0x74>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80052ec:	4b11      	ldr	r3, [pc, #68]	@ (8005334 <MX_SPI3_Init+0x74>)
 80052ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052f2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80052f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005334 <MX_SPI3_Init+0x74>)
 80052f6:	2218      	movs	r2, #24
 80052f8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80052fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005334 <MX_SPI3_Init+0x74>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005300:	4b0c      	ldr	r3, [pc, #48]	@ (8005334 <MX_SPI3_Init+0x74>)
 8005302:	2200      	movs	r2, #0
 8005304:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005306:	4b0b      	ldr	r3, [pc, #44]	@ (8005334 <MX_SPI3_Init+0x74>)
 8005308:	2200      	movs	r2, #0
 800530a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800530c:	4b09      	ldr	r3, [pc, #36]	@ (8005334 <MX_SPI3_Init+0x74>)
 800530e:	2207      	movs	r2, #7
 8005310:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005312:	4b08      	ldr	r3, [pc, #32]	@ (8005334 <MX_SPI3_Init+0x74>)
 8005314:	2200      	movs	r2, #0
 8005316:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005318:	4b06      	ldr	r3, [pc, #24]	@ (8005334 <MX_SPI3_Init+0x74>)
 800531a:	2208      	movs	r2, #8
 800531c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800531e:	4805      	ldr	r0, [pc, #20]	@ (8005334 <MX_SPI3_Init+0x74>)
 8005320:	f00c fe72 	bl	8012008 <HAL_SPI_Init>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800532a:	f000 fb5d 	bl	80059e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800532e:	bf00      	nop
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	200002a0 	.word	0x200002a0
 8005338:	40003c00 	.word	0x40003c00

0800533c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b096      	sub	sp, #88	@ 0x58
 8005340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005342:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	605a      	str	r2, [r3, #4]
 800534c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800534e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005352:	2200      	movs	r2, #0
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	605a      	str	r2, [r3, #4]
 8005358:	609a      	str	r2, [r3, #8]
 800535a:	60da      	str	r2, [r3, #12]
 800535c:	611a      	str	r2, [r3, #16]
 800535e:	615a      	str	r2, [r3, #20]
 8005360:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005362:	1d3b      	adds	r3, r7, #4
 8005364:	222c      	movs	r2, #44	@ 0x2c
 8005366:	2100      	movs	r1, #0
 8005368:	4618      	mov	r0, r3
 800536a:	f011 fb39 	bl	80169e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800536e:	4b45      	ldr	r3, [pc, #276]	@ (8005484 <MX_TIM1_Init+0x148>)
 8005370:	4a45      	ldr	r2, [pc, #276]	@ (8005488 <MX_TIM1_Init+0x14c>)
 8005372:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1599;
 8005374:	4b43      	ldr	r3, [pc, #268]	@ (8005484 <MX_TIM1_Init+0x148>)
 8005376:	f240 623f 	movw	r2, #1599	@ 0x63f
 800537a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800537c:	4b41      	ldr	r3, [pc, #260]	@ (8005484 <MX_TIM1_Init+0x148>)
 800537e:	2200      	movs	r2, #0
 8005380:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8005382:	4b40      	ldr	r3, [pc, #256]	@ (8005484 <MX_TIM1_Init+0x148>)
 8005384:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8005388:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800538a:	4b3e      	ldr	r3, [pc, #248]	@ (8005484 <MX_TIM1_Init+0x148>)
 800538c:	2200      	movs	r2, #0
 800538e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005390:	4b3c      	ldr	r3, [pc, #240]	@ (8005484 <MX_TIM1_Init+0x148>)
 8005392:	2200      	movs	r2, #0
 8005394:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005396:	4b3b      	ldr	r3, [pc, #236]	@ (8005484 <MX_TIM1_Init+0x148>)
 8005398:	2200      	movs	r2, #0
 800539a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800539c:	4839      	ldr	r0, [pc, #228]	@ (8005484 <MX_TIM1_Init+0x148>)
 800539e:	f00e f84f 	bl	8013440 <HAL_TIM_PWM_Init>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80053a8:	f000 fb1e 	bl	80059e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053ac:	2300      	movs	r3, #0
 80053ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80053b0:	2300      	movs	r3, #0
 80053b2:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053b4:	2300      	movs	r3, #0
 80053b6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80053b8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80053bc:	4619      	mov	r1, r3
 80053be:	4831      	ldr	r0, [pc, #196]	@ (8005484 <MX_TIM1_Init+0x148>)
 80053c0:	f00f fdbc 	bl	8014f3c <HAL_TIMEx_MasterConfigSynchronization>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80053ca:	f000 fb0d 	bl	80059e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80053ce:	2360      	movs	r3, #96	@ 0x60
 80053d0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80053d2:	2300      	movs	r3, #0
 80053d4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80053d6:	2300      	movs	r3, #0
 80053d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80053da:	2300      	movs	r3, #0
 80053dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80053de:	2300      	movs	r3, #0
 80053e0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80053e2:	2300      	movs	r3, #0
 80053e4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80053e6:	2300      	movs	r3, #0
 80053e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80053ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80053ee:	2200      	movs	r2, #0
 80053f0:	4619      	mov	r1, r3
 80053f2:	4824      	ldr	r0, [pc, #144]	@ (8005484 <MX_TIM1_Init+0x148>)
 80053f4:	f00e fd8e 	bl	8013f14 <HAL_TIM_PWM_ConfigChannel>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80053fe:	f000 faf3 	bl	80059e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005402:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005406:	2204      	movs	r2, #4
 8005408:	4619      	mov	r1, r3
 800540a:	481e      	ldr	r0, [pc, #120]	@ (8005484 <MX_TIM1_Init+0x148>)
 800540c:	f00e fd82 	bl	8013f14 <HAL_TIM_PWM_ConfigChannel>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8005416:	f000 fae7 	bl	80059e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800541a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800541e:	2208      	movs	r2, #8
 8005420:	4619      	mov	r1, r3
 8005422:	4818      	ldr	r0, [pc, #96]	@ (8005484 <MX_TIM1_Init+0x148>)
 8005424:	f00e fd76 	bl	8013f14 <HAL_TIM_PWM_ConfigChannel>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800542e:	f000 fadb 	bl	80059e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005432:	2300      	movs	r3, #0
 8005434:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005436:	2300      	movs	r3, #0
 8005438:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800543a:	2300      	movs	r3, #0
 800543c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800543e:	2300      	movs	r3, #0
 8005440:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005442:	2300      	movs	r3, #0
 8005444:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005446:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800544a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800544c:	2300      	movs	r3, #0
 800544e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005450:	2300      	movs	r3, #0
 8005452:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005454:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005458:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800545a:	2300      	movs	r3, #0
 800545c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800545e:	2300      	movs	r3, #0
 8005460:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005462:	1d3b      	adds	r3, r7, #4
 8005464:	4619      	mov	r1, r3
 8005466:	4807      	ldr	r0, [pc, #28]	@ (8005484 <MX_TIM1_Init+0x148>)
 8005468:	f00f fdf0 	bl	801504c <HAL_TIMEx_ConfigBreakDeadTime>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8005472:	f000 fab9 	bl	80059e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005476:	4803      	ldr	r0, [pc, #12]	@ (8005484 <MX_TIM1_Init+0x148>)
 8005478:	f002 fecc 	bl	8008214 <HAL_TIM_MspPostInit>

}
 800547c:	bf00      	nop
 800547e:	3758      	adds	r7, #88	@ 0x58
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20000304 	.word	0x20000304
 8005488:	40012c00 	.word	0x40012c00

0800548c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b088      	sub	sp, #32
 8005490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005492:	f107 0314 	add.w	r3, r7, #20
 8005496:	2200      	movs	r2, #0
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	605a      	str	r2, [r3, #4]
 800549c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800549e:	1d3b      	adds	r3, r7, #4
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	605a      	str	r2, [r3, #4]
 80054a6:	609a      	str	r2, [r3, #8]
 80054a8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80054aa:	4b21      	ldr	r3, [pc, #132]	@ (8005530 <MX_TIM2_Init+0xa4>)
 80054ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80054b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80054b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005530 <MX_TIM2_Init+0xa4>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005530 <MX_TIM2_Init+0xa4>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80054be:	4b1c      	ldr	r3, [pc, #112]	@ (8005530 <MX_TIM2_Init+0xa4>)
 80054c0:	f04f 32ff 	mov.w	r2, #4294967295
 80054c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054c6:	4b1a      	ldr	r3, [pc, #104]	@ (8005530 <MX_TIM2_Init+0xa4>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054cc:	4b18      	ldr	r3, [pc, #96]	@ (8005530 <MX_TIM2_Init+0xa4>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80054d2:	4817      	ldr	r0, [pc, #92]	@ (8005530 <MX_TIM2_Init+0xa4>)
 80054d4:	f00e f9a8 	bl	8013828 <HAL_TIM_IC_Init>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80054de:	f000 fa83 	bl	80059e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054e2:	2300      	movs	r3, #0
 80054e4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054e6:	2300      	movs	r3, #0
 80054e8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80054ea:	f107 0314 	add.w	r3, r7, #20
 80054ee:	4619      	mov	r1, r3
 80054f0:	480f      	ldr	r0, [pc, #60]	@ (8005530 <MX_TIM2_Init+0xa4>)
 80054f2:	f00f fd23 	bl	8014f3c <HAL_TIMEx_MasterConfigSynchronization>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80054fc:	f000 fa74 	bl	80059e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005500:	2300      	movs	r3, #0
 8005502:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005504:	2301      	movs	r3, #1
 8005506:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005508:	2300      	movs	r3, #0
 800550a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800550c:	2300      	movs	r3, #0
 800550e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005510:	1d3b      	adds	r3, r7, #4
 8005512:	2200      	movs	r2, #0
 8005514:	4619      	mov	r1, r3
 8005516:	4806      	ldr	r0, [pc, #24]	@ (8005530 <MX_TIM2_Init+0xa4>)
 8005518:	f00e fc60 	bl	8013ddc <HAL_TIM_IC_ConfigChannel>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8005522:	f000 fa61 	bl	80059e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005526:	bf00      	nop
 8005528:	3720      	adds	r7, #32
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20000350 	.word	0x20000350

08005534 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b090      	sub	sp, #64	@ 0x40
 8005538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800553a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800553e:	2200      	movs	r2, #0
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	605a      	str	r2, [r3, #4]
 8005544:	609a      	str	r2, [r3, #8]
 8005546:	60da      	str	r2, [r3, #12]
 8005548:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800554a:	f107 0320 	add.w	r3, r7, #32
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	605a      	str	r2, [r3, #4]
 8005554:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005556:	1d3b      	adds	r3, r7, #4
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	605a      	str	r2, [r3, #4]
 800555e:	609a      	str	r2, [r3, #8]
 8005560:	60da      	str	r2, [r3, #12]
 8005562:	611a      	str	r2, [r3, #16]
 8005564:	615a      	str	r2, [r3, #20]
 8005566:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005568:	4b2c      	ldr	r3, [pc, #176]	@ (800561c <MX_TIM3_Init+0xe8>)
 800556a:	4a2d      	ldr	r2, [pc, #180]	@ (8005620 <MX_TIM3_Init+0xec>)
 800556c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800556e:	4b2b      	ldr	r3, [pc, #172]	@ (800561c <MX_TIM3_Init+0xe8>)
 8005570:	2200      	movs	r2, #0
 8005572:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005574:	4b29      	ldr	r3, [pc, #164]	@ (800561c <MX_TIM3_Init+0xe8>)
 8005576:	2200      	movs	r2, #0
 8005578:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 31;
 800557a:	4b28      	ldr	r3, [pc, #160]	@ (800561c <MX_TIM3_Init+0xe8>)
 800557c:	221f      	movs	r2, #31
 800557e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005580:	4b26      	ldr	r3, [pc, #152]	@ (800561c <MX_TIM3_Init+0xe8>)
 8005582:	2200      	movs	r2, #0
 8005584:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005586:	4b25      	ldr	r3, [pc, #148]	@ (800561c <MX_TIM3_Init+0xe8>)
 8005588:	2200      	movs	r2, #0
 800558a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800558c:	4823      	ldr	r0, [pc, #140]	@ (800561c <MX_TIM3_Init+0xe8>)
 800558e:	f00d fc67 	bl	8012e60 <HAL_TIM_Base_Init>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8005598:	f000 fa26 	bl	80059e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800559c:	481f      	ldr	r0, [pc, #124]	@ (800561c <MX_TIM3_Init+0xe8>)
 800559e:	f00d ff4f 	bl	8013440 <HAL_TIM_PWM_Init>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80055a8:	f000 fa1e 	bl	80059e8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80055ac:	2307      	movs	r3, #7
 80055ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80055b0:	2330      	movs	r3, #48	@ 0x30
 80055b2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80055b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80055b8:	4619      	mov	r1, r3
 80055ba:	4818      	ldr	r0, [pc, #96]	@ (800561c <MX_TIM3_Init+0xe8>)
 80055bc:	f00e fe87 	bl	80142ce <HAL_TIM_SlaveConfigSynchro>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80055c6:	f000 fa0f 	bl	80059e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055ca:	2300      	movs	r3, #0
 80055cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055ce:	2300      	movs	r3, #0
 80055d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80055d2:	f107 0320 	add.w	r3, r7, #32
 80055d6:	4619      	mov	r1, r3
 80055d8:	4810      	ldr	r0, [pc, #64]	@ (800561c <MX_TIM3_Init+0xe8>)
 80055da:	f00f fcaf 	bl	8014f3c <HAL_TIMEx_MasterConfigSynchronization>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80055e4:	f000 fa00 	bl	80059e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055e8:	2360      	movs	r3, #96	@ 0x60
 80055ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 15;
 80055ec:	230f      	movs	r3, #15
 80055ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80055f4:	2300      	movs	r3, #0
 80055f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80055f8:	1d3b      	adds	r3, r7, #4
 80055fa:	2208      	movs	r2, #8
 80055fc:	4619      	mov	r1, r3
 80055fe:	4807      	ldr	r0, [pc, #28]	@ (800561c <MX_TIM3_Init+0xe8>)
 8005600:	f00e fc88 	bl	8013f14 <HAL_TIM_PWM_ConfigChannel>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800560a:	f000 f9ed 	bl	80059e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800560e:	4803      	ldr	r0, [pc, #12]	@ (800561c <MX_TIM3_Init+0xe8>)
 8005610:	f002 fe00 	bl	8008214 <HAL_TIM_MspPostInit>

}
 8005614:	bf00      	nop
 8005616:	3740      	adds	r7, #64	@ 0x40
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	2000039c 	.word	0x2000039c
 8005620:	40000400 	.word	0x40000400

08005624 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b08e      	sub	sp, #56	@ 0x38
 8005628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800562a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800562e:	2200      	movs	r2, #0
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	605a      	str	r2, [r3, #4]
 8005634:	609a      	str	r2, [r3, #8]
 8005636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005638:	f107 031c 	add.w	r3, r7, #28
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	605a      	str	r2, [r3, #4]
 8005642:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005644:	463b      	mov	r3, r7
 8005646:	2200      	movs	r2, #0
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	605a      	str	r2, [r3, #4]
 800564c:	609a      	str	r2, [r3, #8]
 800564e:	60da      	str	r2, [r3, #12]
 8005650:	611a      	str	r2, [r3, #16]
 8005652:	615a      	str	r2, [r3, #20]
 8005654:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005656:	4b2b      	ldr	r3, [pc, #172]	@ (8005704 <MX_TIM4_Init+0xe0>)
 8005658:	4a2b      	ldr	r2, [pc, #172]	@ (8005708 <MX_TIM4_Init+0xe4>)
 800565a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 800565c:	4b29      	ldr	r3, [pc, #164]	@ (8005704 <MX_TIM4_Init+0xe0>)
 800565e:	2263      	movs	r2, #99	@ 0x63
 8005660:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005662:	4b28      	ldr	r3, [pc, #160]	@ (8005704 <MX_TIM4_Init+0xe0>)
 8005664:	2200      	movs	r2, #0
 8005666:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8005668:	4b26      	ldr	r3, [pc, #152]	@ (8005704 <MX_TIM4_Init+0xe0>)
 800566a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800566e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005670:	4b24      	ldr	r3, [pc, #144]	@ (8005704 <MX_TIM4_Init+0xe0>)
 8005672:	2200      	movs	r2, #0
 8005674:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005676:	4b23      	ldr	r3, [pc, #140]	@ (8005704 <MX_TIM4_Init+0xe0>)
 8005678:	2280      	movs	r2, #128	@ 0x80
 800567a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800567c:	4821      	ldr	r0, [pc, #132]	@ (8005704 <MX_TIM4_Init+0xe0>)
 800567e:	f00d fbef 	bl	8012e60 <HAL_TIM_Base_Init>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8005688:	f000 f9ae 	bl	80059e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800568c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005690:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005692:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005696:	4619      	mov	r1, r3
 8005698:	481a      	ldr	r0, [pc, #104]	@ (8005704 <MX_TIM4_Init+0xe0>)
 800569a:	f00e fd4f 	bl	801413c <HAL_TIM_ConfigClockSource>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80056a4:	f000 f9a0 	bl	80059e8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80056a8:	4816      	ldr	r0, [pc, #88]	@ (8005704 <MX_TIM4_Init+0xe0>)
 80056aa:	f00d fc30 	bl	8012f0e <HAL_TIM_OC_Init>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80056b4:	f000 f998 	bl	80059e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80056b8:	2320      	movs	r3, #32
 80056ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056bc:	2300      	movs	r3, #0
 80056be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80056c0:	f107 031c 	add.w	r3, r7, #28
 80056c4:	4619      	mov	r1, r3
 80056c6:	480f      	ldr	r0, [pc, #60]	@ (8005704 <MX_TIM4_Init+0xe0>)
 80056c8:	f00f fc38 	bl	8014f3c <HAL_TIMEx_MasterConfigSynchronization>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80056d2:	f000 f989 	bl	80059e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80056d6:	2300      	movs	r3, #0
 80056d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80056da:	2300      	movs	r3, #0
 80056dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056de:	2300      	movs	r3, #0
 80056e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80056e2:	2300      	movs	r3, #0
 80056e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80056e6:	463b      	mov	r3, r7
 80056e8:	2208      	movs	r2, #8
 80056ea:	4619      	mov	r1, r3
 80056ec:	4805      	ldr	r0, [pc, #20]	@ (8005704 <MX_TIM4_Init+0xe0>)
 80056ee:	f00e fafb 	bl	8013ce8 <HAL_TIM_OC_ConfigChannel>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80056f8:	f000 f976 	bl	80059e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80056fc:	bf00      	nop
 80056fe:	3738      	adds	r7, #56	@ 0x38
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	200003e8 	.word	0x200003e8
 8005708:	40000800 	.word	0x40000800

0800570c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005710:	4b14      	ldr	r3, [pc, #80]	@ (8005764 <MX_UART4_Init+0x58>)
 8005712:	4a15      	ldr	r2, [pc, #84]	@ (8005768 <MX_UART4_Init+0x5c>)
 8005714:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8005716:	4b13      	ldr	r3, [pc, #76]	@ (8005764 <MX_UART4_Init+0x58>)
 8005718:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800571c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800571e:	4b11      	ldr	r3, [pc, #68]	@ (8005764 <MX_UART4_Init+0x58>)
 8005720:	2200      	movs	r2, #0
 8005722:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005724:	4b0f      	ldr	r3, [pc, #60]	@ (8005764 <MX_UART4_Init+0x58>)
 8005726:	2200      	movs	r2, #0
 8005728:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800572a:	4b0e      	ldr	r3, [pc, #56]	@ (8005764 <MX_UART4_Init+0x58>)
 800572c:	2200      	movs	r2, #0
 800572e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005730:	4b0c      	ldr	r3, [pc, #48]	@ (8005764 <MX_UART4_Init+0x58>)
 8005732:	220c      	movs	r2, #12
 8005734:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005736:	4b0b      	ldr	r3, [pc, #44]	@ (8005764 <MX_UART4_Init+0x58>)
 8005738:	2200      	movs	r2, #0
 800573a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800573c:	4b09      	ldr	r3, [pc, #36]	@ (8005764 <MX_UART4_Init+0x58>)
 800573e:	2200      	movs	r2, #0
 8005740:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005742:	4b08      	ldr	r3, [pc, #32]	@ (8005764 <MX_UART4_Init+0x58>)
 8005744:	2200      	movs	r2, #0
 8005746:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005748:	4b06      	ldr	r3, [pc, #24]	@ (8005764 <MX_UART4_Init+0x58>)
 800574a:	2200      	movs	r2, #0
 800574c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 800574e:	4805      	ldr	r0, [pc, #20]	@ (8005764 <MX_UART4_Init+0x58>)
 8005750:	f00f fd48 	bl	80151e4 <HAL_HalfDuplex_Init>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800575a:	f000 f945 	bl	80059e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800575e:	bf00      	nop
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	20000434 	.word	0x20000434
 8005768:	40004c00 	.word	0x40004c00

0800576c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005770:	4b14      	ldr	r3, [pc, #80]	@ (80057c4 <MX_USART1_UART_Init+0x58>)
 8005772:	4a15      	ldr	r2, [pc, #84]	@ (80057c8 <MX_USART1_UART_Init+0x5c>)
 8005774:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8005776:	4b13      	ldr	r3, [pc, #76]	@ (80057c4 <MX_USART1_UART_Init+0x58>)
 8005778:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800577c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800577e:	4b11      	ldr	r3, [pc, #68]	@ (80057c4 <MX_USART1_UART_Init+0x58>)
 8005780:	2200      	movs	r2, #0
 8005782:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005784:	4b0f      	ldr	r3, [pc, #60]	@ (80057c4 <MX_USART1_UART_Init+0x58>)
 8005786:	2200      	movs	r2, #0
 8005788:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800578a:	4b0e      	ldr	r3, [pc, #56]	@ (80057c4 <MX_USART1_UART_Init+0x58>)
 800578c:	2200      	movs	r2, #0
 800578e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005790:	4b0c      	ldr	r3, [pc, #48]	@ (80057c4 <MX_USART1_UART_Init+0x58>)
 8005792:	220c      	movs	r2, #12
 8005794:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005796:	4b0b      	ldr	r3, [pc, #44]	@ (80057c4 <MX_USART1_UART_Init+0x58>)
 8005798:	2200      	movs	r2, #0
 800579a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800579c:	4b09      	ldr	r3, [pc, #36]	@ (80057c4 <MX_USART1_UART_Init+0x58>)
 800579e:	2200      	movs	r2, #0
 80057a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80057a2:	4b08      	ldr	r3, [pc, #32]	@ (80057c4 <MX_USART1_UART_Init+0x58>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80057a8:	4b06      	ldr	r3, [pc, #24]	@ (80057c4 <MX_USART1_UART_Init+0x58>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80057ae:	4805      	ldr	r0, [pc, #20]	@ (80057c4 <MX_USART1_UART_Init+0x58>)
 80057b0:	f00f fcca 	bl	8015148 <HAL_UART_Init>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80057ba:	f000 f915 	bl	80059e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80057be:	bf00      	nop
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	200004bc 	.word	0x200004bc
 80057c8:	40013800 	.word	0x40013800

080057cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80057d2:	4b14      	ldr	r3, [pc, #80]	@ (8005824 <MX_DMA_Init+0x58>)
 80057d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057d6:	4a13      	ldr	r2, [pc, #76]	@ (8005824 <MX_DMA_Init+0x58>)
 80057d8:	f043 0301 	orr.w	r3, r3, #1
 80057dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80057de:	4b11      	ldr	r3, [pc, #68]	@ (8005824 <MX_DMA_Init+0x58>)
 80057e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	607b      	str	r3, [r7, #4]
 80057e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80057ea:	2200      	movs	r2, #0
 80057ec:	2100      	movs	r1, #0
 80057ee:	200b      	movs	r0, #11
 80057f0:	f007 fce9 	bl	800d1c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80057f4:	200b      	movs	r0, #11
 80057f6:	f007 fd02 	bl	800d1fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80057fa:	2200      	movs	r2, #0
 80057fc:	2100      	movs	r1, #0
 80057fe:	200e      	movs	r0, #14
 8005800:	f007 fce1 	bl	800d1c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8005804:	200e      	movs	r0, #14
 8005806:	f007 fcfa 	bl	800d1fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800580a:	2200      	movs	r2, #0
 800580c:	2100      	movs	r1, #0
 800580e:	200f      	movs	r0, #15
 8005810:	f007 fcd9 	bl	800d1c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8005814:	200f      	movs	r0, #15
 8005816:	f007 fcf2 	bl	800d1fe <HAL_NVIC_EnableIRQ>

}
 800581a:	bf00      	nop
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	40021000 	.word	0x40021000

08005828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b08a      	sub	sp, #40	@ 0x28
 800582c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800582e:	f107 0314 	add.w	r3, r7, #20
 8005832:	2200      	movs	r2, #0
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	605a      	str	r2, [r3, #4]
 8005838:	609a      	str	r2, [r3, #8]
 800583a:	60da      	str	r2, [r3, #12]
 800583c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800583e:	4b66      	ldr	r3, [pc, #408]	@ (80059d8 <MX_GPIO_Init+0x1b0>)
 8005840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005842:	4a65      	ldr	r2, [pc, #404]	@ (80059d8 <MX_GPIO_Init+0x1b0>)
 8005844:	f043 0304 	orr.w	r3, r3, #4
 8005848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800584a:	4b63      	ldr	r3, [pc, #396]	@ (80059d8 <MX_GPIO_Init+0x1b0>)
 800584c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800584e:	f003 0304 	and.w	r3, r3, #4
 8005852:	613b      	str	r3, [r7, #16]
 8005854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005856:	4b60      	ldr	r3, [pc, #384]	@ (80059d8 <MX_GPIO_Init+0x1b0>)
 8005858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800585a:	4a5f      	ldr	r2, [pc, #380]	@ (80059d8 <MX_GPIO_Init+0x1b0>)
 800585c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005862:	4b5d      	ldr	r3, [pc, #372]	@ (80059d8 <MX_GPIO_Init+0x1b0>)
 8005864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800586e:	4b5a      	ldr	r3, [pc, #360]	@ (80059d8 <MX_GPIO_Init+0x1b0>)
 8005870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005872:	4a59      	ldr	r2, [pc, #356]	@ (80059d8 <MX_GPIO_Init+0x1b0>)
 8005874:	f043 0301 	orr.w	r3, r3, #1
 8005878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800587a:	4b57      	ldr	r3, [pc, #348]	@ (80059d8 <MX_GPIO_Init+0x1b0>)
 800587c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	60bb      	str	r3, [r7, #8]
 8005884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005886:	4b54      	ldr	r3, [pc, #336]	@ (80059d8 <MX_GPIO_Init+0x1b0>)
 8005888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800588a:	4a53      	ldr	r2, [pc, #332]	@ (80059d8 <MX_GPIO_Init+0x1b0>)
 800588c:	f043 0302 	orr.w	r3, r3, #2
 8005890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005892:	4b51      	ldr	r3, [pc, #324]	@ (80059d8 <MX_GPIO_Init+0x1b0>)
 8005894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	607b      	str	r3, [r7, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800589e:	4b4e      	ldr	r3, [pc, #312]	@ (80059d8 <MX_GPIO_Init+0x1b0>)
 80058a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058a2:	4a4d      	ldr	r2, [pc, #308]	@ (80059d8 <MX_GPIO_Init+0x1b0>)
 80058a4:	f043 0308 	orr.w	r3, r3, #8
 80058a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058aa:	4b4b      	ldr	r3, [pc, #300]	@ (80059d8 <MX_GPIO_Init+0x1b0>)
 80058ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ae:	f003 0308 	and.w	r3, r3, #8
 80058b2:	603b      	str	r3, [r7, #0]
 80058b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DBG_GPIO_Port, DBG_Pin, GPIO_PIN_RESET);
 80058b6:	2200      	movs	r2, #0
 80058b8:	2108      	movs	r1, #8
 80058ba:	4848      	ldr	r0, [pc, #288]	@ (80059dc <MX_GPIO_Init+0x1b4>)
 80058bc:	f009 f9be 	bl	800ec3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 80058c0:	2201      	movs	r2, #1
 80058c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80058c6:	4846      	ldr	r0, [pc, #280]	@ (80059e0 <MX_GPIO_Init+0x1b8>)
 80058c8:	f009 f9b8 	bl	800ec3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH_nWP_Pin|FLASH_nRESET_Pin, GPIO_PIN_SET);
 80058cc:	2201      	movs	r2, #1
 80058ce:	21c0      	movs	r1, #192	@ 0xc0
 80058d0:	4842      	ldr	r0, [pc, #264]	@ (80059dc <MX_GPIO_Init+0x1b4>)
 80058d2:	f009 f9b3 	bl	800ec3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LTE_POWER_ON_Pin|LTE_RESET_Pin|ACC_nCS_Pin, GPIO_PIN_RESET);
 80058d6:	2200      	movs	r2, #0
 80058d8:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 80058dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80058e0:	f009 f9ac 	bl	800ec3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DTR_GPIO_Port, DTR_Pin, GPIO_PIN_RESET);
 80058e4:	2200      	movs	r2, #0
 80058e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80058ea:	483d      	ldr	r0, [pc, #244]	@ (80059e0 <MX_GPIO_Init+0x1b8>)
 80058ec:	f009 f9a6 	bl	800ec3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USR_BTN_Pin PC4 */
  GPIO_InitStruct.Pin = USR_BTN_Pin|GPIO_PIN_4;
 80058f0:	f242 0310 	movw	r3, #8208	@ 0x2010
 80058f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80058f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80058fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058fc:	2300      	movs	r3, #0
 80058fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005900:	f107 0314 	add.w	r3, r7, #20
 8005904:	4619      	mov	r1, r3
 8005906:	4835      	ldr	r0, [pc, #212]	@ (80059dc <MX_GPIO_Init+0x1b4>)
 8005908:	f008 ffd6 	bl	800e8b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DBG_Pin FLASH_nWP_Pin FLASH_nRESET_Pin */
  GPIO_InitStruct.Pin = DBG_Pin|FLASH_nWP_Pin|FLASH_nRESET_Pin;
 800590c:	23c8      	movs	r3, #200	@ 0xc8
 800590e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005910:	2301      	movs	r3, #1
 8005912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005914:	2300      	movs	r3, #0
 8005916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005918:	2300      	movs	r3, #0
 800591a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800591c:	f107 0314 	add.w	r3, r7, #20
 8005920:	4619      	mov	r1, r3
 8005922:	482e      	ldr	r0, [pc, #184]	@ (80059dc <MX_GPIO_Init+0x1b4>)
 8005924:	f008 ffc8 	bl	800e8b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LTE_STATUS_Pin */
  GPIO_InitStruct.Pin = LTE_STATUS_Pin;
 8005928:	2308      	movs	r3, #8
 800592a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800592c:	2300      	movs	r3, #0
 800592e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005930:	2300      	movs	r3, #0
 8005932:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTE_STATUS_GPIO_Port, &GPIO_InitStruct);
 8005934:	f107 0314 	add.w	r3, r7, #20
 8005938:	4619      	mov	r1, r3
 800593a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800593e:	f008 ffbb 	bl	800e8b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_nCS_Pin DTR_Pin */
  GPIO_InitStruct.Pin = FLASH_nCS_Pin|DTR_Pin;
 8005942:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8005946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005948:	2301      	movs	r3, #1
 800594a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800594c:	2300      	movs	r3, #0
 800594e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005950:	2300      	movs	r3, #0
 8005952:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005954:	f107 0314 	add.w	r3, r7, #20
 8005958:	4619      	mov	r1, r3
 800595a:	4821      	ldr	r0, [pc, #132]	@ (80059e0 <MX_GPIO_Init+0x1b8>)
 800595c:	f008 ffac 	bl	800e8b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LTE_POWER_ON_Pin LTE_RESET_Pin ACC_nCS_Pin */
  GPIO_InitStruct.Pin = LTE_POWER_ON_Pin|LTE_RESET_Pin|ACC_nCS_Pin;
 8005960:	f44f 4318 	mov.w	r3, #38912	@ 0x9800
 8005964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005966:	2301      	movs	r3, #1
 8005968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800596a:	2300      	movs	r3, #0
 800596c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800596e:	2300      	movs	r3, #0
 8005970:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005972:	f107 0314 	add.w	r3, r7, #20
 8005976:	4619      	mov	r1, r3
 8005978:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800597c:	f008 ff9c 	bl	800e8b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005980:	2304      	movs	r3, #4
 8005982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005984:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800598a:	2300      	movs	r3, #0
 800598c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800598e:	f107 0314 	add.w	r3, r7, #20
 8005992:	4619      	mov	r1, r3
 8005994:	4813      	ldr	r0, [pc, #76]	@ (80059e4 <MX_GPIO_Init+0x1bc>)
 8005996:	f008 ff8f 	bl	800e8b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCD_Pin */
  GPIO_InitStruct.Pin = DCD_Pin;
 800599a:	2320      	movs	r3, #32
 800599c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800599e:	2300      	movs	r3, #0
 80059a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a2:	2300      	movs	r3, #0
 80059a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DCD_GPIO_Port, &GPIO_InitStruct);
 80059a6:	f107 0314 	add.w	r3, r7, #20
 80059aa:	4619      	mov	r1, r3
 80059ac:	480c      	ldr	r0, [pc, #48]	@ (80059e0 <MX_GPIO_Init+0x1b8>)
 80059ae:	f008 ff83 	bl	800e8b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80059b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80059b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80059b8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80059bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059be:	2300      	movs	r3, #0
 80059c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059c2:	f107 0314 	add.w	r3, r7, #20
 80059c6:	4619      	mov	r1, r3
 80059c8:	4805      	ldr	r0, [pc, #20]	@ (80059e0 <MX_GPIO_Init+0x1b8>)
 80059ca:	f008 ff75 	bl	800e8b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80059ce:	bf00      	nop
 80059d0:	3728      	adds	r7, #40	@ 0x28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	40021000 	.word	0x40021000
 80059dc:	48000800 	.word	0x48000800
 80059e0:	48000400 	.word	0x48000400
 80059e4:	48000c00 	.word	0x48000c00

080059e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80059ec:	b672      	cpsid	i
}
 80059ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 80059f0:	bf00      	nop
 80059f2:	e7fd      	b.n	80059f0 <Error_Handler+0x8>

080059f4 <OTA_Init>:
#include "base64.h"


/*-----INIZIALIZZAZIONE OTA-----*/
int OTA_Init(void)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 80059fa:	2300      	movs	r3, #0
 80059fc:	71fb      	strb	r3, [r7, #7]

	if (sys.OTA_File_isOpen)
 80059fe:	4b10      	ldr	r3, [pc, #64]	@ (8005a40 <OTA_Init+0x4c>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <OTA_Init+0x1e>
	{
		f_close(&sys.OTA_File);
 8005a0c:	480d      	ldr	r0, [pc, #52]	@ (8005a44 <OTA_Init+0x50>)
 8005a0e:	f005 f8f9 	bl	800ac04 <f_close>
	}

	sys.OTA_File_isOpen = 0;
 8005a12:	4a0b      	ldr	r2, [pc, #44]	@ (8005a40 <OTA_Init+0x4c>)
 8005a14:	7813      	ldrb	r3, [r2, #0]
 8005a16:	f023 0301 	bic.w	r3, r3, #1
 8005a1a:	7013      	strb	r3, [r2, #0]

	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ | FA_WRITE | FA_CREATE_ALWAYS);
 8005a1c:	220b      	movs	r2, #11
 8005a1e:	490a      	ldr	r1, [pc, #40]	@ (8005a48 <OTA_Init+0x54>)
 8005a20:	4808      	ldr	r0, [pc, #32]	@ (8005a44 <OTA_Init+0x50>)
 8005a22:	f004 fbfb 	bl	800a21c <f_open>
 8005a26:	4603      	mov	r3, r0
 8005a28:	71fb      	strb	r3, [r7, #7]

	if (fRes != FR_OK)
 8005a2a:	79fb      	ldrb	r3, [r7, #7]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <OTA_Init+0x42>
	{
		return -1;
 8005a30:	f04f 33ff 	mov.w	r3, #4294967295
 8005a34:	e000      	b.n	8005a38 <OTA_Init+0x44>
	}

	return 0;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3708      	adds	r7, #8
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	200005d8 	.word	0x200005d8
 8005a44:	200005dc 	.word	0x200005dc
 8005a48:	08017ff0 	.word	0x08017ff0

08005a4c <OTA_Receive>:

/*-----RICEZIONE FILE OTA-----*/
int OTA_Receive(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	f6ad 3dc8 	subw	sp, sp, #3016	@ 0xbc8
 8005a52:	af00      	add	r7, sp, #0
	uint8_t rx_buffer[1500];
	UINT bytes_written = 0;
 8005a54:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 8005a58:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]
	uint8_t bin_buffer[1500];
	uint16_t Rx_Len = 0;
 8005a60:	2300      	movs	r3, #0
 8005a62:	f8a7 3bc6 	strh.w	r3, [r7, #3014]	@ 0xbc6

	while (1)
	{
		Rx_Len = SIM_Receive_Response((char*)rx_buffer, 5000);
 8005a66:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8005a6a:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fc fa32 	bl	8001ed8 <SIM_Receive_Response>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f8a7 3bc6 	strh.w	r3, [r7, #3014]	@ 0xbc6
		if (rx_buffer[0] == '\0' || (rx_buffer[0] == '\r' && rx_buffer[1] == '\n'))
 8005a7a:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 8005a7e:	f5a3 63bd 	sub.w	r3, r3, #1512	@ 0x5e8
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d04e      	beq.n	8005b26 <OTA_Receive+0xda>
 8005a88:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 8005a8c:	f5a3 63bd 	sub.w	r3, r3, #1512	@ 0x5e8
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b0d      	cmp	r3, #13
 8005a94:	d106      	bne.n	8005aa4 <OTA_Receive+0x58>
 8005a96:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 8005a9a:	f5a3 63bd 	sub.w	r3, r3, #1512	@ 0x5e8
 8005a9e:	785b      	ldrb	r3, [r3, #1]
 8005aa0:	2b0a      	cmp	r3, #10
 8005aa2:	d040      	beq.n	8005b26 <OTA_Receive+0xda>
		{
			break;
		}
		if(strncmp((char*)rx_buffer, "EOF", 3) == 0)
 8005aa4:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8005aa8:	2203      	movs	r2, #3
 8005aaa:	4926      	ldr	r1, [pc, #152]	@ (8005b44 <OTA_Receive+0xf8>)
 8005aac:	4618      	mov	r0, r3
 8005aae:	f010 ffac 	bl	8016a0a <strncmp>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d035      	beq.n	8005b24 <OTA_Receive+0xd8>
		{
			break;
		}
		if (Rx_Len == 0)
 8005ab8:	f8b7 3bc6 	ldrh.w	r3, [r7, #3014]	@ 0xbc6
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d105      	bne.n	8005acc <OTA_Receive+0x80>
		{
			f_close(&sys.OTA_File);
 8005ac0:	4821      	ldr	r0, [pc, #132]	@ (8005b48 <OTA_Receive+0xfc>)
 8005ac2:	f005 f89f 	bl	800ac04 <f_close>
			return -1;
 8005ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aca:	e035      	b.n	8005b38 <OTA_Receive+0xec>
		}
		size_t base64_len = strlen((char*)rx_buffer);
 8005acc:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7fa fb87 	bl	80001e4 <strlen>
 8005ad6:	f8c7 0bc0 	str.w	r0, [r7, #3008]	@ 0xbc0
		size_t bin_len = Base64_Decode((char*)rx_buffer, bin_buffer, base64_len);
 8005ada:	4639      	mov	r1, r7
 8005adc:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8005ae0:	f8d7 2bc0 	ldr.w	r2, [r7, #3008]	@ 0xbc0
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7fc fe93 	bl	8002810 <Base64_Decode>
 8005aea:	f8c7 0bbc 	str.w	r0, [r7, #3004]	@ 0xbbc
		f_write(&sys.OTA_File, bin_buffer, bin_len, &bytes_written);
 8005aee:	f207 53dc 	addw	r3, r7, #1500	@ 0x5dc
 8005af2:	4639      	mov	r1, r7
 8005af4:	f8d7 2bbc 	ldr.w	r2, [r7, #3004]	@ 0xbbc
 8005af8:	4813      	ldr	r0, [pc, #76]	@ (8005b48 <OTA_Receive+0xfc>)
 8005afa:	f004 fe7a 	bl	800a7f2 <f_write>
		if (bytes_written != bin_len)
 8005afe:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 8005b02:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f8d7 2bbc 	ldr.w	r2, [r7, #3004]	@ 0xbbc
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d005      	beq.n	8005b1c <OTA_Receive+0xd0>
		{
			f_close(&sys.OTA_File);
 8005b10:	480d      	ldr	r0, [pc, #52]	@ (8005b48 <OTA_Receive+0xfc>)
 8005b12:	f005 f877 	bl	800ac04 <f_close>
			return -1;
 8005b16:	f04f 33ff 	mov.w	r3, #4294967295
 8005b1a:	e00d      	b.n	8005b38 <OTA_Receive+0xec>
		}
		SIM_Send_TCP("ACK");
 8005b1c:	480b      	ldr	r0, [pc, #44]	@ (8005b4c <OTA_Receive+0x100>)
 8005b1e:	f7fc fc37 	bl	8002390 <SIM_Send_TCP>
	{
 8005b22:	e7a0      	b.n	8005a66 <OTA_Receive+0x1a>
			break;
 8005b24:	bf00      	nop
	}

	f_close(&sys.OTA_File);
 8005b26:	4808      	ldr	r0, [pc, #32]	@ (8005b48 <OTA_Receive+0xfc>)
 8005b28:	f005 f86c 	bl	800ac04 <f_close>
    sys.OTA_File_isOpen = 0;
 8005b2c:	4a08      	ldr	r2, [pc, #32]	@ (8005b50 <OTA_Receive+0x104>)
 8005b2e:	7813      	ldrb	r3, [r2, #0]
 8005b30:	f023 0301 	bic.w	r3, r3, #1
 8005b34:	7013      	strb	r3, [r2, #0]
	return 0;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f607 37c8 	addw	r7, r7, #3016	@ 0xbc8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	08018000 	.word	0x08018000
 8005b48:	200005dc 	.word	0x200005dc
 8005b4c:	08018004 	.word	0x08018004
 8005b50:	200005d8 	.word	0x200005d8

08005b54 <OTA_CRC_Check>:

int OTA_CRC_Check(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	f5ad 6d8c 	sub.w	sp, sp, #1120	@ 0x460
 8005b5a:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
	UINT read = 0;
 8005b62:	2300      	movs	r3, #0
 8005b64:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
	uint16_t ota_crc = 0;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f8a7 3454 	strh.w	r3, [r7, #1108]	@ 0x454
	uint8_t rx_buffer[64];
	uint32_t calc_crc = 0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	f8c7 345c 	str.w	r3, [r7, #1116]	@ 0x45c

	SIM_Receive_Response((char*)rx_buffer, 5000);
 8005b74:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8005b78:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fc f9ab 	bl	8001ed8 <SIM_Receive_Response>
	uint8_t crc_bin[8];
	size_t crc_len = Base64_Decode((char*)rx_buffer, crc_bin, sizeof(crc_bin));
 8005b82:	f507 6180 	add.w	r1, r7, #1024	@ 0x400
 8005b86:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8005b8a:	2208      	movs	r2, #8
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7fc fe3f 	bl	8002810 <Base64_Decode>
 8005b92:	f8c7 0450 	str.w	r0, [r7, #1104]	@ 0x450
	if (crc_len == 4)
 8005b96:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d118      	bne.n	8005bd0 <OTA_CRC_Check+0x7c>
	{
		ota_crc = (crc_bin[0] << 24) | (crc_bin[1] << 16) | (crc_bin[2] << 8) | crc_bin[3];
 8005b9e:	f897 3402 	ldrb.w	r3, [r7, #1026]	@ 0x402
 8005ba2:	b21b      	sxth	r3, r3
 8005ba4:	021b      	lsls	r3, r3, #8
 8005ba6:	b21a      	sxth	r2, r3
 8005ba8:	f897 3403 	ldrb.w	r3, [r7, #1027]	@ 0x403
 8005bac:	b21b      	sxth	r3, r3
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	b21b      	sxth	r3, r3
 8005bb2:	f8a7 3454 	strh.w	r3, [r7, #1108]	@ 0x454
	else
	{
		return -1;
	}

	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ);
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	493b      	ldr	r1, [pc, #236]	@ (8005ca8 <OTA_CRC_Check+0x154>)
 8005bba:	483c      	ldr	r0, [pc, #240]	@ (8005cac <OTA_CRC_Check+0x158>)
 8005bbc:	f004 fb2e 	bl	800a21c <f_open>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
	if (fRes != FR_OK)
 8005bc6:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d006      	beq.n	8005bdc <OTA_CRC_Check+0x88>
 8005bce:	e002      	b.n	8005bd6 <OTA_CRC_Check+0x82>
		return -1;
 8005bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd4:	e063      	b.n	8005c9e <OTA_CRC_Check+0x14a>
	{
		return -1;
 8005bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bda:	e060      	b.n	8005c9e <OTA_CRC_Check+0x14a>
	}

	uint32_t size = f_size(&sys.OTA_File);
 8005bdc:	4b34      	ldr	r3, [pc, #208]	@ (8005cb0 <OTA_CRC_Check+0x15c>)
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
    HAL_CRCEx_Input_Data_Reverse(HCRC, CRC_INPUTDATA_INVERSION_BYTE);
 8005be4:	2120      	movs	r1, #32
 8005be6:	4833      	ldr	r0, [pc, #204]	@ (8005cb4 <OTA_CRC_Check+0x160>)
 8005be8:	f007 fd28 	bl	800d63c <HAL_CRCEx_Input_Data_Reverse>
    HAL_CRCEx_Output_Data_Reverse(HCRC, CRC_OUTPUTDATA_INVERSION_ENABLE);
 8005bec:	2180      	movs	r1, #128	@ 0x80
 8005bee:	4831      	ldr	r0, [pc, #196]	@ (8005cb4 <OTA_CRC_Check+0x160>)
 8005bf0:	f007 fd40 	bl	800d674 <HAL_CRCEx_Output_Data_Reverse>
    HCRC->Instance->INIT = 0xFFFFFFFF;
 8005bf4:	4b2f      	ldr	r3, [pc, #188]	@ (8005cb4 <OTA_CRC_Check+0x160>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bfc:	611a      	str	r2, [r3, #16]
    HAL_CRCEx_Polynomial_Set(HCRC, 0x04c11db7, CRC_POLYLENGTH_32B);
 8005bfe:	2200      	movs	r2, #0
 8005c00:	492d      	ldr	r1, [pc, #180]	@ (8005cb8 <OTA_CRC_Check+0x164>)
 8005c02:	482c      	ldr	r0, [pc, #176]	@ (8005cb4 <OTA_CRC_Check+0x160>)
 8005c04:	f007 fc8c 	bl	800d520 <HAL_CRCEx_Polynomial_Set>

	while (size > 0)
 8005c08:	e038      	b.n	8005c7c <OTA_CRC_Check+0x128>
	{
		uint8_t buffer[1024];
		UINT to_read = (size > sizeof(buffer)) ? sizeof(buffer) : size;
 8005c0a:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 8005c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c12:	bf28      	it	cs
 8005c14:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8005c18:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
		if (f_read(&sys.OTA_File, buffer, to_read, &read) != FR_OK || read == 0)
 8005c1c:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8005c20:	4639      	mov	r1, r7
 8005c22:	f8d7 244c 	ldr.w	r2, [r7, #1100]	@ 0x44c
 8005c26:	4821      	ldr	r0, [pc, #132]	@ (8005cac <OTA_CRC_Check+0x158>)
 8005c28:	f004 fc90 	bl	800a54c <f_read>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d103      	bne.n	8005c3a <OTA_CRC_Check+0xe6>
 8005c32:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d105      	bne.n	8005c46 <OTA_CRC_Check+0xf2>
		{
			f_close(&sys.OTA_File);
 8005c3a:	481c      	ldr	r0, [pc, #112]	@ (8005cac <OTA_CRC_Check+0x158>)
 8005c3c:	f004 ffe2 	bl	800ac04 <f_close>
			return -1;
 8005c40:	f04f 33ff 	mov.w	r3, #4294967295
 8005c44:	e02b      	b.n	8005c9e <OTA_CRC_Check+0x14a>
		}
		calc_crc = HAL_CRC_Accumulate(HCRC, (uint32_t *)buffer, read / 4 + (read % 4 != 0));
 8005c46:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 8005c4a:	089b      	lsrs	r3, r3, #2
 8005c4c:	f8d7 2448 	ldr.w	r2, [r7, #1096]	@ 0x448
 8005c50:	f002 0203 	and.w	r2, r2, #3
 8005c54:	2a00      	cmp	r2, #0
 8005c56:	bf14      	ite	ne
 8005c58:	2201      	movne	r2, #1
 8005c5a:	2200      	moveq	r2, #0
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	441a      	add	r2, r3
 8005c60:	463b      	mov	r3, r7
 8005c62:	4619      	mov	r1, r3
 8005c64:	4813      	ldr	r0, [pc, #76]	@ (8005cb4 <OTA_CRC_Check+0x160>)
 8005c66:	f007 fb4d 	bl	800d304 <HAL_CRC_Accumulate>
 8005c6a:	f8c7 045c 	str.w	r0, [r7, #1116]	@ 0x45c
		size -= read;
 8005c6e:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 8005c72:	f8d7 2458 	ldr.w	r2, [r7, #1112]	@ 0x458
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
	while (size > 0)
 8005c7c:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1c2      	bne.n	8005c0a <OTA_CRC_Check+0xb6>
	}

	f_close(&sys.OTA_File);
 8005c84:	4809      	ldr	r0, [pc, #36]	@ (8005cac <OTA_CRC_Check+0x158>)
 8005c86:	f004 ffbd 	bl	800ac04 <f_close>

	if (calc_crc != ota_crc)
 8005c8a:	f8b7 3454 	ldrh.w	r3, [r7, #1108]	@ 0x454
 8005c8e:	f8d7 245c 	ldr.w	r2, [r7, #1116]	@ 0x45c
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d002      	beq.n	8005c9c <OTA_CRC_Check+0x148>
	{
		return -1; // CRC non corrisponde
 8005c96:	f04f 33ff 	mov.w	r3, #4294967295
 8005c9a:	e000      	b.n	8005c9e <OTA_CRC_Check+0x14a>
	}
	
	return 0; // CRC OK
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f507 678c 	add.w	r7, r7, #1120	@ 0x460
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	08017ff0 	.word	0x08017ff0
 8005cac:	200005dc 	.word	0x200005dc
 8005cb0:	200005d8 	.word	0x200005d8
 8005cb4:	2000015c 	.word	0x2000015c
 8005cb8:	04c11db7 	.word	0x04c11db7

08005cbc <OTA_Apply>:


/*-----APPLICAZIONE UPDATE-----*/
int OTA_Apply(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b098      	sub	sp, #96	@ 0x60
 8005cc0:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	int32_t result = 0;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint8_t ota_bank = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
	uint32_t faddr = 0;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t size = 0;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	65bb      	str	r3, [r7, #88]	@ 0x58
	uint64_t pword = 0;
 8005cda:	f04f 0200 	mov.w	r2, #0
 8005cde:	f04f 0300 	mov.w	r3, #0
 8005ce2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	uint32_t faddr_off = 0;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	657b      	str	r3, [r7, #84]	@ 0x54
	UINT read = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t PageError = 0;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
	FLASH_EraseInitTypeDef erase_cfg = {0};
 8005cf2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	605a      	str	r2, [r3, #4]
 8005cfc:	609a      	str	r2, [r3, #8]
 8005cfe:	60da      	str	r2, [r3, #12]

	const uint32_t BANKSIZE = FLASH_SIZE >> 1;
 8005d00:	4b68      	ldr	r3, [pc, #416]	@ (8005ea4 <OTA_Apply+0x1e8>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d006      	beq.n	8005d1c <OTA_Apply+0x60>
 8005d0e:	4b65      	ldr	r3, [pc, #404]	@ (8005ea4 <OTA_Apply+0x1e8>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	029b      	lsls	r3, r3, #10
 8005d14:	085a      	lsrs	r2, r3, #1
 8005d16:	4b64      	ldr	r3, [pc, #400]	@ (8005ea8 <OTA_Apply+0x1ec>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	e001      	b.n	8005d20 <OTA_Apply+0x64>
 8005d1c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005d20:	64bb      	str	r3, [r7, #72]	@ 0x48

	FLASH_OBProgramInitTypeDef ob = {0};
 8005d22:	463b      	mov	r3, r7
 8005d24:	2228      	movs	r2, #40	@ 0x28
 8005d26:	2100      	movs	r1, #0
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f010 fe59 	bl	80169e0 <memset>

	HAL_FLASHEx_OBGetConfig(&ob);
 8005d2e:	463b      	mov	r3, r7
 8005d30:	4618      	mov	r0, r3
 8005d32:	f008 f995 	bl	800e060 <HAL_FLASHEx_OBGetConfig>

	if ((ob.USERConfig & FLASH_OPTR_DUALBANK) == 0)
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d102      	bne.n	8005d46 <OTA_Apply+0x8a>
	{
		return -1;
 8005d40:	f04f 33ff 	mov.w	r3, #4294967295
 8005d44:	e0aa      	b.n	8005e9c <OTA_Apply+0x1e0>
	}

	ota_bank = (ob.USERConfig & FLASH_OPTR_BFB2) ? FLASH_BANK_1 : FLASH_BANK_2;
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <OTA_Apply+0x98>
 8005d50:	2301      	movs	r3, #1
 8005d52:	e000      	b.n	8005d56 <OTA_Apply+0x9a>
 8005d54:	2302      	movs	r3, #2
 8005d56:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

	// L'indirizzo deve essere sempre quello del banco 2 (se fa il boot da BANK2 il BANK1 viene rimappato)
	faddr = FLASH_BASE + BANKSIZE;
 8005d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d5c:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8005d60:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_FLASH_Unlock() != HAL_OK)
 8005d62:	f007 ff51 	bl	800dc08 <HAL_FLASH_Unlock>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <OTA_Apply+0xb6>
	{
		return -1;
 8005d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d70:	e094      	b.n	8005e9c <OTA_Apply+0x1e0>
	}

	f_close(&sys.OTA_File);
 8005d72:	484e      	ldr	r0, [pc, #312]	@ (8005eac <OTA_Apply+0x1f0>)
 8005d74:	f004 ff46 	bl	800ac04 <f_close>
	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ);
 8005d78:	2201      	movs	r2, #1
 8005d7a:	494d      	ldr	r1, [pc, #308]	@ (8005eb0 <OTA_Apply+0x1f4>)
 8005d7c:	484b      	ldr	r0, [pc, #300]	@ (8005eac <OTA_Apply+0x1f0>)
 8005d7e:	f004 fa4d 	bl	800a21c <f_open>
 8005d82:	4603      	mov	r3, r0
 8005d84:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	if (fRes != FR_OK)
 8005d88:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d003      	beq.n	8005d98 <OTA_Apply+0xdc>
	{
		result = -1;
 8005d90:	f04f 33ff 	mov.w	r3, #4294967295
 8005d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 8005d96:	e07b      	b.n	8005e90 <OTA_Apply+0x1d4>
	}

	if ((size = f_size(&sys.OTA_File)) > BANKSIZE)
 8005d98:	4b46      	ldr	r3, [pc, #280]	@ (8005eb4 <OTA_Apply+0x1f8>)
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d9e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005da0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d903      	bls.n	8005dae <OTA_Apply+0xf2>
	{
		result = -1;
 8005da6:	f04f 33ff 	mov.w	r3, #4294967295
 8005daa:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 8005dac:	e070      	b.n	8005e90 <OTA_Apply+0x1d4>
	}

	erase_cfg.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8005dae:	2301      	movs	r3, #1
 8005db0:	62bb      	str	r3, [r7, #40]	@ 0x28
	erase_cfg.Banks = ota_bank;
 8005db2:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8005db6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_FLASHEx_Erase(&erase_cfg, &PageError) != HAL_OK)
 8005db8:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8005dbc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f008 f842 	bl	800de4c <HAL_FLASHEx_Erase>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d026      	beq.n	8005e1c <OTA_Apply+0x160>
	{
		result = -1;
 8005dce:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 8005dd4:	e05c      	b.n	8005e90 <OTA_Apply+0x1d4>
	}

	while (size > 0)
	{
		pword = 0;
 8005dd6:	f04f 0200 	mov.w	r2, #0
 8005dda:	f04f 0300 	mov.w	r3, #0
 8005dde:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		if (f_read(&sys.OTA_File, (uint8_t *)&pword, sizeof(pword), &read) < 0)
 8005de2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005de6:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8005dea:	2208      	movs	r2, #8
 8005dec:	482f      	ldr	r0, [pc, #188]	@ (8005eac <OTA_Apply+0x1f0>)
 8005dee:	f004 fbad 	bl	800a54c <f_read>
			break;
		if (read == 0)
 8005df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d015      	beq.n	8005e24 <OTA_Apply+0x168>
			break;
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, faddr + faddr_off, pword) != HAL_OK)
 8005df8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dfc:	18d1      	adds	r1, r2, r3
 8005dfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005e02:	2000      	movs	r0, #0
 8005e04:	f007 fe94 	bl	800db30 <HAL_FLASH_Program>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10c      	bne.n	8005e28 <OTA_Apply+0x16c>
			break;
		faddr_off += sizeof(pword);
 8005e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e10:	3308      	adds	r3, #8
 8005e12:	657b      	str	r3, [r7, #84]	@ 0x54
		size -= read;
 8005e14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	65bb      	str	r3, [r7, #88]	@ 0x58
	while (size > 0)
 8005e1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1d9      	bne.n	8005dd6 <OTA_Apply+0x11a>
 8005e22:	e002      	b.n	8005e2a <OTA_Apply+0x16e>
			break;
 8005e24:	bf00      	nop
 8005e26:	e000      	b.n	8005e2a <OTA_Apply+0x16e>
			break;
 8005e28:	bf00      	nop
	}

	if (size > 0)
 8005e2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <OTA_Apply+0x17c>
	{
		result = -1;
 8005e30:	f04f 33ff 	mov.w	r3, #4294967295
 8005e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 8005e36:	e02b      	b.n	8005e90 <OTA_Apply+0x1d4>
	}

	HAL_FLASH_Lock();
 8005e38:	f007 ff08 	bl	800dc4c <HAL_FLASH_Lock>

	HAL_FLASHEx_OBGetConfig(&ob);
 8005e3c:	463b      	mov	r3, r7
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f008 f90e 	bl	800e060 <HAL_FLASHEx_OBGetConfig>
	HAL_FLASH_Unlock();
 8005e44:	f007 fee0 	bl	800dc08 <HAL_FLASH_Unlock>
	HAL_FLASH_OB_Unlock();
 8005e48:	f007 ff10 	bl	800dc6c <HAL_FLASH_OB_Unlock>

	ob.OptionType = OPTIONBYTE_USER;
 8005e4c:	2304      	movs	r3, #4
 8005e4e:	603b      	str	r3, [r7, #0]
	ob.USERType = OB_USER_BFB2;
 8005e50:	2380      	movs	r3, #128	@ 0x80
 8005e52:	617b      	str	r3, [r7, #20]
	ob.USERConfig = (ota_bank == FLASH_BANK_2) ? FLASH_OPTR_BFB2 : 0;
 8005e54:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d102      	bne.n	8005e62 <OTA_Apply+0x1a6>
 8005e5c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005e60:	e000      	b.n	8005e64 <OTA_Apply+0x1a8>
 8005e62:	2300      	movs	r3, #0
 8005e64:	61bb      	str	r3, [r7, #24]

	if (HAL_FLASHEx_OBProgram(&ob) != HAL_OK)
 8005e66:	463b      	mov	r3, r7
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f008 f88b 	bl	800df84 <HAL_FLASHEx_OBProgram>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d007      	beq.n	8005e84 <OTA_Apply+0x1c8>
	{
		HAL_FLASH_OB_Lock();
 8005e74:	f007 ff16 	bl	800dca4 <HAL_FLASH_OB_Lock>
		HAL_FLASH_Lock();
 8005e78:	f007 fee8 	bl	800dc4c <HAL_FLASH_Lock>
		result = -1;
 8005e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e80:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 8005e82:	e005      	b.n	8005e90 <OTA_Apply+0x1d4>
	}

	HAL_FLASH_OB_Launch();
 8005e84:	f007 ff1e 	bl	800dcc4 <HAL_FLASH_OB_Launch>
	HAL_FLASH_OB_Lock();
 8005e88:	f007 ff0c 	bl	800dca4 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 8005e8c:	f007 fede 	bl	800dc4c <HAL_FLASH_Lock>

	DONE:

	f_close(&sys.OTA_File);
 8005e90:	4806      	ldr	r0, [pc, #24]	@ (8005eac <OTA_Apply+0x1f0>)
 8005e92:	f004 feb7 	bl	800ac04 <f_close>

	HAL_FLASH_Lock();
 8005e96:	f007 fed9 	bl	800dc4c <HAL_FLASH_Lock>

	return result;
 8005e9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3760      	adds	r7, #96	@ 0x60
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	1fff75e0 	.word	0x1fff75e0
 8005ea8:	01fffe00 	.word	0x01fffe00
 8005eac:	200005dc 	.word	0x200005dc
 8005eb0:	08017ff0 	.word	0x08017ff0
 8005eb4:	200005d8 	.word	0x200005d8

08005eb8 <Save_Data>:
#include "init.h"


/*-----ACQUISIZIONE MISURE E LOG DEI DATI-----*/
void Save_Data(void)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08a      	sub	sp, #40	@ 0x28
 8005ebc:	af00      	add	r7, sp, #0
	if(flags.ADC_Half_Buffer)
 8005ebe:	4b6d      	ldr	r3, [pc, #436]	@ (8006074 <Save_Data+0x1bc>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d032      	beq.n	8005f32 <Save_Data+0x7a>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[0], PRESS_HALF_LEN);
 8005ecc:	4b6a      	ldr	r3, [pc, #424]	@ (8006078 <Save_Data+0x1c0>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	4b6a      	ldr	r3, [pc, #424]	@ (800607c <Save_Data+0x1c4>)
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005eda:	4969      	ldr	r1, [pc, #420]	@ (8006080 <Save_Data+0x1c8>)
 8005edc:	4618      	mov	r0, r3
 8005ede:	f010 fe03 	bl	8016ae8 <memcpy>
		Last_Pressure = 0;
 8005ee2:	4b68      	ldr	r3, [pc, #416]	@ (8006084 <Save_Data+0x1cc>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 8005ee8:	2300      	movs	r3, #0
 8005eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eec:	e00c      	b.n	8005f08 <Save_Data+0x50>
		{
			Last_Pressure += Pressure[i];
 8005eee:	4a64      	ldr	r2, [pc, #400]	@ (8006080 <Save_Data+0x1c8>)
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005ef6:	4b63      	ldr	r3, [pc, #396]	@ (8006084 <Save_Data+0x1cc>)
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	4413      	add	r3, r2
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	4b61      	ldr	r3, [pc, #388]	@ (8006084 <Save_Data+0x1cc>)
 8005f00:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 8005f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f04:	3301      	adds	r3, #1
 8005f06:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0a:	2bc7      	cmp	r3, #199	@ 0xc7
 8005f0c:	ddef      	ble.n	8005eee <Save_Data+0x36>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 8005f0e:	4b5d      	ldr	r3, [pc, #372]	@ (8006084 <Save_Data+0x1cc>)
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	4a5d      	ldr	r2, [pc, #372]	@ (8006088 <Save_Data+0x1d0>)
 8005f14:	fba2 2303 	umull	r2, r3, r2, r3
 8005f18:	099b      	lsrs	r3, r3, #6
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	4b59      	ldr	r3, [pc, #356]	@ (8006084 <Save_Data+0x1cc>)
 8005f1e:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[0]);
 8005f20:	4857      	ldr	r0, [pc, #348]	@ (8006080 <Save_Data+0x1c8>)
 8005f22:	f000 fb47 	bl	80065b4 <Warning_Detection>
		flags.ADC_Half_Buffer = 0;
 8005f26:	4a53      	ldr	r2, [pc, #332]	@ (8006074 <Save_Data+0x1bc>)
 8005f28:	7813      	ldrb	r3, [r2, #0]
 8005f2a:	f023 0302 	bic.w	r3, r3, #2
 8005f2e:	7013      	strb	r3, [r2, #0]
 8005f30:	e039      	b.n	8005fa6 <Save_Data+0xee>
	}
	else if(flags.ADC_Full_Buffer)
 8005f32:	4b50      	ldr	r3, [pc, #320]	@ (8006074 <Save_Data+0x1bc>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d032      	beq.n	8005fa6 <Save_Data+0xee>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[PRESS_HALF_SAMPLES], PRESS_HALF_LEN);
 8005f40:	4b4d      	ldr	r3, [pc, #308]	@ (8006078 <Save_Data+0x1c0>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	461a      	mov	r2, r3
 8005f46:	4b4d      	ldr	r3, [pc, #308]	@ (800607c <Save_Data+0x1c4>)
 8005f48:	4413      	add	r3, r2
 8005f4a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005f4e:	494f      	ldr	r1, [pc, #316]	@ (800608c <Save_Data+0x1d4>)
 8005f50:	4618      	mov	r0, r3
 8005f52:	f010 fdc9 	bl	8016ae8 <memcpy>
		Last_Pressure = 0;
 8005f56:	4b4b      	ldr	r3, [pc, #300]	@ (8006084 <Save_Data+0x1cc>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 8005f5c:	23c8      	movs	r3, #200	@ 0xc8
 8005f5e:	623b      	str	r3, [r7, #32]
 8005f60:	e00c      	b.n	8005f7c <Save_Data+0xc4>
		{
			Last_Pressure += Pressure[i];
 8005f62:	4a47      	ldr	r2, [pc, #284]	@ (8006080 <Save_Data+0x1c8>)
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005f6a:	4b46      	ldr	r3, [pc, #280]	@ (8006084 <Save_Data+0x1cc>)
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	4413      	add	r3, r2
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	4b44      	ldr	r3, [pc, #272]	@ (8006084 <Save_Data+0x1cc>)
 8005f74:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	623b      	str	r3, [r7, #32]
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8005f82:	dbee      	blt.n	8005f62 <Save_Data+0xaa>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 8005f84:	4b3f      	ldr	r3, [pc, #252]	@ (8006084 <Save_Data+0x1cc>)
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	4a3f      	ldr	r2, [pc, #252]	@ (8006088 <Save_Data+0x1d0>)
 8005f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f8e:	099b      	lsrs	r3, r3, #6
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	4b3c      	ldr	r3, [pc, #240]	@ (8006084 <Save_Data+0x1cc>)
 8005f94:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[PRESS_HALF_SAMPLES]);
 8005f96:	483d      	ldr	r0, [pc, #244]	@ (800608c <Save_Data+0x1d4>)
 8005f98:	f000 fb0c 	bl	80065b4 <Warning_Detection>
		flags.ADC_Full_Buffer = 0;
 8005f9c:	4a35      	ldr	r2, [pc, #212]	@ (8006074 <Save_Data+0x1bc>)
 8005f9e:	7813      	ldrb	r3, [r2, #0]
 8005fa0:	f023 0304 	bic.w	r3, r3, #4
 8005fa4:	7013      	strb	r3, [r2, #0]
	}
	flags.ADC_Complete = 0;
 8005fa6:	4a33      	ldr	r2, [pc, #204]	@ (8006074 <Save_Data+0x1bc>)
 8005fa8:	7813      	ldrb	r3, [r2, #0]
 8005faa:	f023 0301 	bic.w	r3, r3, #1
 8005fae:	7013      	strb	r3, [r2, #0]
	Address_Offset += PRESS_HALF_LEN;
 8005fb0:	4b31      	ldr	r3, [pc, #196]	@ (8006078 <Save_Data+0x1c0>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8005fb8:	4a2f      	ldr	r2, [pc, #188]	@ (8006078 <Save_Data+0x1c0>)
 8005fba:	6013      	str	r3, [r2, #0]

	memcpy(Saving_Buffer + Address_Offset, Volume_Period, MAX_VOLUME_LEN);
 8005fbc:	4b2e      	ldr	r3, [pc, #184]	@ (8006078 <Save_Data+0x1c0>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	4b2e      	ldr	r3, [pc, #184]	@ (800607c <Save_Data+0x1c4>)
 8005fc4:	4413      	add	r3, r2
 8005fc6:	2228      	movs	r2, #40	@ 0x28
 8005fc8:	4931      	ldr	r1, [pc, #196]	@ (8006090 <Save_Data+0x1d8>)
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f010 fd8c 	bl	8016ae8 <memcpy>
	uint8_t current_period_cnt = Period_cnt;
 8005fd0:	4b30      	ldr	r3, [pc, #192]	@ (8006094 <Save_Data+0x1dc>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	75fb      	strb	r3, [r7, #23]
	Last_Volume = 0;
 8005fd6:	4b30      	ldr	r3, [pc, #192]	@ (8006098 <Save_Data+0x1e0>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < current_period_cnt; i++)
 8005fdc:	2300      	movs	r3, #0
 8005fde:	61fb      	str	r3, [r7, #28]
 8005fe0:	e00b      	b.n	8005ffa <Save_Data+0x142>
	{
		Last_Volume += Volume_Period[i];
 8005fe2:	4a2b      	ldr	r2, [pc, #172]	@ (8006090 <Save_Data+0x1d8>)
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005fea:	4b2b      	ldr	r3, [pc, #172]	@ (8006098 <Save_Data+0x1e0>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4413      	add	r3, r2
 8005ff0:	4a29      	ldr	r2, [pc, #164]	@ (8006098 <Save_Data+0x1e0>)
 8005ff2:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < current_period_cnt; i++)
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	61fb      	str	r3, [r7, #28]
 8005ffa:	7dfb      	ldrb	r3, [r7, #23]
 8005ffc:	69fa      	ldr	r2, [r7, #28]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	dbef      	blt.n	8005fe2 <Save_Data+0x12a>
	}
	Last_Volume = (uint32_t)(Last_Volume / current_period_cnt);
 8006002:	4b25      	ldr	r3, [pc, #148]	@ (8006098 <Save_Data+0x1e0>)
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	7dfb      	ldrb	r3, [r7, #23]
 8006008:	fbb2 f3f3 	udiv	r3, r2, r3
 800600c:	4a22      	ldr	r2, [pc, #136]	@ (8006098 <Save_Data+0x1e0>)
 800600e:	6013      	str	r3, [r2, #0]
	memset(Volume_Period, 0, sizeof(Volume_Period));
 8006010:	2228      	movs	r2, #40	@ 0x28
 8006012:	2100      	movs	r1, #0
 8006014:	481e      	ldr	r0, [pc, #120]	@ (8006090 <Save_Data+0x1d8>)
 8006016:	f010 fce3 	bl	80169e0 <memset>
	Period_cnt = 0;
 800601a:	4b1e      	ldr	r3, [pc, #120]	@ (8006094 <Save_Data+0x1dc>)
 800601c:	2200      	movs	r2, #0
 800601e:	701a      	strb	r2, [r3, #0]
	Address_Offset += MAX_VOLUME_LEN;
 8006020:	4b15      	ldr	r3, [pc, #84]	@ (8006078 <Save_Data+0x1c0>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	3328      	adds	r3, #40	@ 0x28
 8006026:	4a14      	ldr	r2, [pc, #80]	@ (8006078 <Save_Data+0x1c0>)
 8006028:	6013      	str	r3, [r2, #0]

	if(sys.ACC_Present)
 800602a:	4b1c      	ldr	r3, [pc, #112]	@ (800609c <Save_Data+0x1e4>)
 800602c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006030:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 809a 	beq.w	8006174 <Save_Data+0x2bc>
	{
		memcpy(Saving_Buffer + Address_Offset, Acceleration, ACCELERATION_LEN);
 8006040:	4b0d      	ldr	r3, [pc, #52]	@ (8006078 <Save_Data+0x1c0>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	4b0d      	ldr	r3, [pc, #52]	@ (800607c <Save_Data+0x1c4>)
 8006048:	4413      	add	r3, r2
 800604a:	4a15      	ldr	r2, [pc, #84]	@ (80060a0 <Save_Data+0x1e8>)
 800604c:	4618      	mov	r0, r3
 800604e:	4611      	mov	r1, r2
 8006050:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8006054:	461a      	mov	r2, r3
 8006056:	f010 fd47 	bl	8016ae8 <memcpy>
		Last_Acceleration.x = 0;
 800605a:	4b12      	ldr	r3, [pc, #72]	@ (80060a4 <Save_Data+0x1ec>)
 800605c:	2200      	movs	r2, #0
 800605e:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = 0;
 8006060:	4b10      	ldr	r3, [pc, #64]	@ (80060a4 <Save_Data+0x1ec>)
 8006062:	2200      	movs	r2, #0
 8006064:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = 0;
 8006066:	4b0f      	ldr	r3, [pc, #60]	@ (80060a4 <Save_Data+0x1ec>)
 8006068:	2200      	movs	r2, #0
 800606a:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 800606c:	2300      	movs	r3, #0
 800606e:	61bb      	str	r3, [r7, #24]
 8006070:	e05c      	b.n	800612c <Save_Data+0x274>
 8006072:	bf00      	nop
 8006074:	20001780 	.word	0x20001780
 8006078:	20004958 	.word	0x20004958
 800607c:	20004228 	.word	0x20004228
 8006080:	200038f0 	.word	0x200038f0
 8006084:	200041b0 	.word	0x200041b0
 8006088:	51eb851f 	.word	0x51eb851f
 800608c:	20003a80 	.word	0x20003a80
 8006090:	20003c10 	.word	0x20003c10
 8006094:	200038ec 	.word	0x200038ec
 8006098:	200041b4 	.word	0x200041b4
 800609c:	200005d8 	.word	0x200005d8
 80060a0:	20003c38 	.word	0x20003c38
 80060a4:	200041b8 	.word	0x200041b8
		{
			Last_Acceleration.x += Acceleration[i+1] | (Acceleration[i+2] << 8); 
 80060a8:	4b7d      	ldr	r3, [pc, #500]	@ (80062a0 <Save_Data+0x3e8>)
 80060aa:	885a      	ldrh	r2, [r3, #2]
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	3301      	adds	r3, #1
 80060b0:	497c      	ldr	r1, [pc, #496]	@ (80062a4 <Save_Data+0x3ec>)
 80060b2:	5ccb      	ldrb	r3, [r1, r3]
 80060b4:	b219      	sxth	r1, r3
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	3302      	adds	r3, #2
 80060ba:	487a      	ldr	r0, [pc, #488]	@ (80062a4 <Save_Data+0x3ec>)
 80060bc:	5cc3      	ldrb	r3, [r0, r3]
 80060be:	b21b      	sxth	r3, r3
 80060c0:	021b      	lsls	r3, r3, #8
 80060c2:	b21b      	sxth	r3, r3
 80060c4:	430b      	orrs	r3, r1
 80060c6:	b21b      	sxth	r3, r3
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	4413      	add	r3, r2
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	4b74      	ldr	r3, [pc, #464]	@ (80062a0 <Save_Data+0x3e8>)
 80060d0:	805a      	strh	r2, [r3, #2]
			Last_Acceleration.y += Acceleration[i+3] | (Acceleration[i+4] << 8); 
 80060d2:	4b73      	ldr	r3, [pc, #460]	@ (80062a0 <Save_Data+0x3e8>)
 80060d4:	889a      	ldrh	r2, [r3, #4]
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	3303      	adds	r3, #3
 80060da:	4972      	ldr	r1, [pc, #456]	@ (80062a4 <Save_Data+0x3ec>)
 80060dc:	5ccb      	ldrb	r3, [r1, r3]
 80060de:	b219      	sxth	r1, r3
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	3304      	adds	r3, #4
 80060e4:	486f      	ldr	r0, [pc, #444]	@ (80062a4 <Save_Data+0x3ec>)
 80060e6:	5cc3      	ldrb	r3, [r0, r3]
 80060e8:	b21b      	sxth	r3, r3
 80060ea:	021b      	lsls	r3, r3, #8
 80060ec:	b21b      	sxth	r3, r3
 80060ee:	430b      	orrs	r3, r1
 80060f0:	b21b      	sxth	r3, r3
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	4413      	add	r3, r2
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	4b69      	ldr	r3, [pc, #420]	@ (80062a0 <Save_Data+0x3e8>)
 80060fa:	809a      	strh	r2, [r3, #4]
			Last_Acceleration.z += Acceleration[i+5] | (Acceleration[i+6] << 8); 
 80060fc:	4b68      	ldr	r3, [pc, #416]	@ (80062a0 <Save_Data+0x3e8>)
 80060fe:	88da      	ldrh	r2, [r3, #6]
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	3305      	adds	r3, #5
 8006104:	4967      	ldr	r1, [pc, #412]	@ (80062a4 <Save_Data+0x3ec>)
 8006106:	5ccb      	ldrb	r3, [r1, r3]
 8006108:	b219      	sxth	r1, r3
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	3306      	adds	r3, #6
 800610e:	4865      	ldr	r0, [pc, #404]	@ (80062a4 <Save_Data+0x3ec>)
 8006110:	5cc3      	ldrb	r3, [r0, r3]
 8006112:	b21b      	sxth	r3, r3
 8006114:	021b      	lsls	r3, r3, #8
 8006116:	b21b      	sxth	r3, r3
 8006118:	430b      	orrs	r3, r1
 800611a:	b21b      	sxth	r3, r3
 800611c:	b29b      	uxth	r3, r3
 800611e:	4413      	add	r3, r2
 8006120:	b29a      	uxth	r2, r3
 8006122:	4b5f      	ldr	r3, [pc, #380]	@ (80062a0 <Save_Data+0x3e8>)
 8006124:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	3307      	adds	r3, #7
 800612a:	61bb      	str	r3, [r7, #24]
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 8006132:	dbb9      	blt.n	80060a8 <Save_Data+0x1f0>
		}
		Last_Acceleration.x = (uint16_t)(Last_Acceleration.x / (ACCELERATION_LEN / 7));
 8006134:	4b5a      	ldr	r3, [pc, #360]	@ (80062a0 <Save_Data+0x3e8>)
 8006136:	885b      	ldrh	r3, [r3, #2]
 8006138:	4a5b      	ldr	r2, [pc, #364]	@ (80062a8 <Save_Data+0x3f0>)
 800613a:	fba2 2303 	umull	r2, r3, r2, r3
 800613e:	099b      	lsrs	r3, r3, #6
 8006140:	b29a      	uxth	r2, r3
 8006142:	4b57      	ldr	r3, [pc, #348]	@ (80062a0 <Save_Data+0x3e8>)
 8006144:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = (uint16_t)(Last_Acceleration.y / (ACCELERATION_LEN / 7));
 8006146:	4b56      	ldr	r3, [pc, #344]	@ (80062a0 <Save_Data+0x3e8>)
 8006148:	889b      	ldrh	r3, [r3, #4]
 800614a:	4a57      	ldr	r2, [pc, #348]	@ (80062a8 <Save_Data+0x3f0>)
 800614c:	fba2 2303 	umull	r2, r3, r2, r3
 8006150:	099b      	lsrs	r3, r3, #6
 8006152:	b29a      	uxth	r2, r3
 8006154:	4b52      	ldr	r3, [pc, #328]	@ (80062a0 <Save_Data+0x3e8>)
 8006156:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = (uint16_t)(Last_Acceleration.z / (ACCELERATION_LEN / 7));
 8006158:	4b51      	ldr	r3, [pc, #324]	@ (80062a0 <Save_Data+0x3e8>)
 800615a:	88db      	ldrh	r3, [r3, #6]
 800615c:	4a52      	ldr	r2, [pc, #328]	@ (80062a8 <Save_Data+0x3f0>)
 800615e:	fba2 2303 	umull	r2, r3, r2, r3
 8006162:	099b      	lsrs	r3, r3, #6
 8006164:	b29a      	uxth	r2, r3
 8006166:	4b4e      	ldr	r3, [pc, #312]	@ (80062a0 <Save_Data+0x3e8>)
 8006168:	80da      	strh	r2, [r3, #6]
		flags.ACC_Complete = 0;
 800616a:	4a50      	ldr	r2, [pc, #320]	@ (80062ac <Save_Data+0x3f4>)
 800616c:	7813      	ldrb	r3, [r2, #0]
 800616e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006172:	7013      	strb	r3, [r2, #0]
	}
	Address_Offset += ACCELERATION_LEN;
 8006174:	4b4e      	ldr	r3, [pc, #312]	@ (80062b0 <Save_Data+0x3f8>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 800617c:	4a4c      	ldr	r2, [pc, #304]	@ (80062b0 <Save_Data+0x3f8>)
 800617e:	6013      	str	r3, [r2, #0]

	INA3221_Read_Measure(&Supply);
 8006180:	484c      	ldr	r0, [pc, #304]	@ (80062b4 <Save_Data+0x3fc>)
 8006182:	f7fa ff51 	bl	8001028 <INA3221_Read_Measure>
	uint16_t new_temp = 0;
 8006186:	2300      	movs	r3, #0
 8006188:	82bb      	strh	r3, [r7, #20]
	if((new_temp = Read_Temperature()) != 0)
 800618a:	f7fa feed 	bl	8000f68 <Read_Temperature>
 800618e:	4603      	mov	r3, r0
 8006190:	82bb      	strh	r3, [r7, #20]
 8006192:	8abb      	ldrh	r3, [r7, #20]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d002      	beq.n	800619e <Save_Data+0x2e6>
	{
		Temperature = new_temp;
 8006198:	4a47      	ldr	r2, [pc, #284]	@ (80062b8 <Save_Data+0x400>)
 800619a:	8abb      	ldrh	r3, [r7, #20]
 800619c:	8013      	strh	r3, [r2, #0]
	}
	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 800619e:	4947      	ldr	r1, [pc, #284]	@ (80062bc <Save_Data+0x404>)
 80061a0:	203b      	movs	r0, #59	@ 0x3b
 80061a2:	f7fc fcd1 	bl	8002b48 <BC_MultiRead_Reg>
  __ASM volatile ("cpsid i" : : : "memory");
 80061a6:	b672      	cpsid	i
}
 80061a8:	bf00      	nop

	__disable_irq();
	Compressed_Sample_Typedef sample;
    sample.compressed_size = Compress_Sample(Saving_Buffer, SAVING_BUFFER_LEN, compressed_data);
 80061aa:	4638      	mov	r0, r7
 80061ac:	4b44      	ldr	r3, [pc, #272]	@ (80062c0 <Save_Data+0x408>)
 80061ae:	f44f 62e6 	mov.w	r2, #1840	@ 0x730
 80061b2:	4944      	ldr	r1, [pc, #272]	@ (80062c4 <Save_Data+0x40c>)
 80061b4:	f000 fcfa 	bl	8006bac <Compress_Sample>
 80061b8:	f107 030c 	add.w	r3, r7, #12
 80061bc:	463a      	mov	r2, r7
 80061be:	6810      	ldr	r0, [r2, #0]
 80061c0:	6018      	str	r0, [r3, #0]
 80061c2:	8892      	ldrh	r2, [r2, #4]
 80061c4:	809a      	strh	r2, [r3, #4]
	RAM_Save_Measure(&sample, compressed_data);
 80061c6:	f107 030c 	add.w	r3, r7, #12
 80061ca:	493d      	ldr	r1, [pc, #244]	@ (80062c0 <Save_Data+0x408>)
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 fa55 	bl	800667c <RAM_Save_Measure>
  __ASM volatile ("cpsie i" : : : "memory");
 80061d2:	b662      	cpsie	i
}
 80061d4:	bf00      	nop
	__enable_irq();

	Address_Offset = 0;
 80061d6:	4b36      	ldr	r3, [pc, #216]	@ (80062b0 <Save_Data+0x3f8>)
 80061d8:	2200      	movs	r2, #0
 80061da:	601a      	str	r2, [r3, #0]

	if(flags.Hammer_Detected || flags.Threshold_Detected)
 80061dc:	4b33      	ldr	r3, [pc, #204]	@ (80062ac <Save_Data+0x3f4>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	f003 0308 	and.w	r3, r3, #8
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d106      	bne.n	80061f8 <Save_Data+0x340>
 80061ea:	4b30      	ldr	r3, [pc, #192]	@ (80062ac <Save_Data+0x3f4>)
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	f003 0310 	and.w	r3, r3, #16
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d04e      	beq.n	8006296 <Save_Data+0x3de>
	{
		Cycles_After_Warning++;
 80061f8:	4b33      	ldr	r3, [pc, #204]	@ (80062c8 <Save_Data+0x410>)
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	3301      	adds	r3, #1
 80061fe:	b29a      	uxth	r2, r3
 8006200:	4b31      	ldr	r3, [pc, #196]	@ (80062c8 <Save_Data+0x410>)
 8006202:	801a      	strh	r2, [r3, #0]
		if(Cycles_After_Warning >= config.buffering_secs * (config.samp_freq / ACC_FIFO_WATERMARK))
 8006204:	4b30      	ldr	r3, [pc, #192]	@ (80062c8 <Save_Data+0x410>)
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	4619      	mov	r1, r3
 800620a:	4b30      	ldr	r3, [pc, #192]	@ (80062cc <Save_Data+0x414>)
 800620c:	791b      	ldrb	r3, [r3, #4]
 800620e:	4618      	mov	r0, r3
 8006210:	4b2e      	ldr	r3, [pc, #184]	@ (80062cc <Save_Data+0x414>)
 8006212:	885b      	ldrh	r3, [r3, #2]
 8006214:	4a24      	ldr	r2, [pc, #144]	@ (80062a8 <Save_Data+0x3f0>)
 8006216:	fba2 2303 	umull	r2, r3, r2, r3
 800621a:	099b      	lsrs	r3, r3, #6
 800621c:	b29b      	uxth	r3, r3
 800621e:	fb00 f303 	mul.w	r3, r0, r3
 8006222:	4299      	cmp	r1, r3
 8006224:	db37      	blt.n	8006296 <Save_Data+0x3de>
		{
			if(!flags.CMD.Measure_Request)
 8006226:	4b21      	ldr	r3, [pc, #132]	@ (80062ac <Save_Data+0x3f4>)
 8006228:	789b      	ldrb	r3, [r3, #2]
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	d130      	bne.n	8006296 <Save_Data+0x3de>
			{
				if (!flags.Meas_TransferInProgress)
 8006234:	4b1d      	ldr	r3, [pc, #116]	@ (80062ac <Save_Data+0x3f4>)
 8006236:	785b      	ldrb	r3, [r3, #1]
 8006238:	f003 0304 	and.w	r3, r3, #4
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d129      	bne.n	8006296 <Save_Data+0x3de>
				{
					LED_Start(RED_LED, FAST, LOW);
 8006242:	2207      	movs	r2, #7
 8006244:	2100      	movs	r1, #0
 8006246:	2004      	movs	r0, #4
 8006248:	f7fd fcc6 	bl	8003bd8 <LED_Start>
					Switch_Buffer();
 800624c:	f000 f842 	bl	80062d4 <Switch_Buffer>
					flags.CMD.Measure_Request = 1;
 8006250:	4a16      	ldr	r2, [pc, #88]	@ (80062ac <Save_Data+0x3f4>)
 8006252:	7893      	ldrb	r3, [r2, #2]
 8006254:	f043 0302 	orr.w	r3, r3, #2
 8006258:	7093      	strb	r3, [r2, #2]
					Send_Measure_Addr = 0;
 800625a:	4b1d      	ldr	r3, [pc, #116]	@ (80062d0 <Save_Data+0x418>)
 800625c:	2200      	movs	r2, #0
 800625e:	601a      	str	r2, [r3, #0]
					Cycles_After_Warning = 0;
 8006260:	4b19      	ldr	r3, [pc, #100]	@ (80062c8 <Save_Data+0x410>)
 8006262:	2200      	movs	r2, #0
 8006264:	801a      	strh	r2, [r3, #0]
					if(flags.Hammer_Detected)
 8006266:	4b11      	ldr	r3, [pc, #68]	@ (80062ac <Save_Data+0x3f4>)
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	f003 0308 	and.w	r3, r3, #8
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	d004      	beq.n	800627e <Save_Data+0x3c6>
					{
						flags.Hammer_Detected = 0;
 8006274:	4a0d      	ldr	r2, [pc, #52]	@ (80062ac <Save_Data+0x3f4>)
 8006276:	7813      	ldrb	r3, [r2, #0]
 8006278:	f023 0308 	bic.w	r3, r3, #8
 800627c:	7013      	strb	r3, [r2, #0]
					}
					if(flags.Threshold_Detected)
 800627e:	4b0b      	ldr	r3, [pc, #44]	@ (80062ac <Save_Data+0x3f4>)
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	f003 0310 	and.w	r3, r3, #16
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d004      	beq.n	8006296 <Save_Data+0x3de>
					{
						flags.Threshold_Detected = 0;
 800628c:	4a07      	ldr	r2, [pc, #28]	@ (80062ac <Save_Data+0x3f4>)
 800628e:	7813      	ldrb	r3, [r2, #0]
 8006290:	f023 0310 	bic.w	r3, r3, #16
 8006294:	7013      	strb	r3, [r2, #0]
				
			}
		}
	}

}
 8006296:	bf00      	nop
 8006298:	3728      	adds	r7, #40	@ 0x28
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	200041b8 	.word	0x200041b8
 80062a4:	20003c38 	.word	0x20003c38
 80062a8:	51eb851f 	.word	0x51eb851f
 80062ac:	20001780 	.word	0x20001780
 80062b0:	20004958 	.word	0x20004958
 80062b4:	200038e0 	.word	0x200038e0
 80062b8:	200041c0 	.word	0x200041c0
 80062bc:	200041c2 	.word	0x200041c2
 80062c0:	20005788 	.word	0x20005788
 80062c4:	20004228 	.word	0x20004228
 80062c8:	2000495c 	.word	0x2000495c
 80062cc:	20001784 	.word	0x20001784
 80062d0:	20004968 	.word	0x20004968

080062d4 <Switch_Buffer>:

/*-----CAMBIO BUFFER-----*/
void Switch_Buffer(void)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80062da:	b672      	cpsid	i
}
 80062dc:	bf00      	nop
	__disable_irq();
    uint32_t temp_len = sys.Current_RAM_Len;
 80062de:	4b27      	ldr	r3, [pc, #156]	@ (800637c <Switch_Buffer+0xa8>)
 80062e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062e4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80062e8:	607b      	str	r3, [r7, #4]
    sys.Inactive_RAM_Len = temp_len;
 80062ea:	4b24      	ldr	r3, [pc, #144]	@ (800637c <Switch_Buffer+0xa8>)
 80062ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062f0:	461a      	mov	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

    if (sys.Active_RAM_Buffer == 0) 
 80062f8:	4b20      	ldr	r3, [pc, #128]	@ (800637c <Switch_Buffer+0xa8>)
 80062fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062fe:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d116      	bne.n	8006334 <Switch_Buffer+0x60>
	{
		sys.RAM_Buffer_Base_tosend = RAM_SECOND_BUFFER_ADD;
 8006306:	4b1d      	ldr	r3, [pc, #116]	@ (800637c <Switch_Buffer+0xa8>)
 8006308:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800630c:	461a      	mov	r2, r3
 800630e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006312:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
        sys.Active_RAM_Buffer = 1;
 8006316:	4b19      	ldr	r3, [pc, #100]	@ (800637c <Switch_Buffer+0xa8>)
 8006318:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800631c:	2201      	movs	r2, #1
 800631e:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        sys.Current_RAM_Base = RAM_SECOND_BUFFER_ADD;
 8006322:	4b16      	ldr	r3, [pc, #88]	@ (800637c <Switch_Buffer+0xa8>)
 8006324:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006328:	461a      	mov	r2, r3
 800632a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800632e:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
 8006332:	e013      	b.n	800635c <Switch_Buffer+0x88>
    } 
	else 
	{
		sys.RAM_Buffer_Base_tosend = RAM_FIRST_BUFFER_ADD;
 8006334:	4b11      	ldr	r3, [pc, #68]	@ (800637c <Switch_Buffer+0xa8>)
 8006336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800633a:	461a      	mov	r2, r3
 800633c:	2300      	movs	r3, #0
 800633e:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
        sys.Active_RAM_Buffer = 0;
 8006342:	4b0e      	ldr	r3, [pc, #56]	@ (800637c <Switch_Buffer+0xa8>)
 8006344:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006348:	2200      	movs	r2, #0
 800634a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        sys.Current_RAM_Base = RAM_FIRST_BUFFER_ADD;
 800634e:	4b0b      	ldr	r3, [pc, #44]	@ (800637c <Switch_Buffer+0xa8>)
 8006350:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006354:	461a      	mov	r2, r3
 8006356:	2300      	movs	r3, #0
 8006358:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
    }

    sys.Current_RAM_Len = 0;
 800635c:	4b07      	ldr	r3, [pc, #28]	@ (800637c <Switch_Buffer+0xa8>)
 800635e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006362:	461a      	mov	r2, r3
 8006364:	2300      	movs	r3, #0
 8006366:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
  __ASM volatile ("cpsie i" : : : "memory");
 800636a:	b662      	cpsie	i
}
 800636c:	bf00      	nop
	__enable_irq();
}
 800636e:	bf00      	nop
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	200005d8 	.word	0x200005d8

08006380 <Erase_RAM_Data>:

/*-----CANCELLAZIONE DATI RAM-----*/
void Erase_RAM_Data(void)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8006386:	af00      	add	r7, sp, #0
	uint8_t zero_buffer[1024] = {0};
 8006388:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800638c:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8006390:	4618      	mov	r0, r3
 8006392:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006396:	461a      	mov	r2, r3
 8006398:	2100      	movs	r1, #0
 800639a:	f010 fb21 	bl	80169e0 <memset>
	for (uint32_t addr = 0; addr < 0x800000; addr += sizeof(zero_buffer)) 
 800639e:	2300      	movs	r3, #0
 80063a0:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 80063a4:	e00d      	b.n	80063c2 <Erase_RAM_Data+0x42>
	{
		RAM_Write(addr, sizeof(zero_buffer), zero_buffer);
 80063a6:	1d3b      	adds	r3, r7, #4
 80063a8:	461a      	mov	r2, r3
 80063aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80063ae:	f8d7 0404 	ldr.w	r0, [r7, #1028]	@ 0x404
 80063b2:	f001 fbaf 	bl	8007b14 <RAM_Write>
	for (uint32_t addr = 0; addr < 0x800000; addr += sizeof(zero_buffer)) 
 80063b6:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 80063ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063be:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 80063c2:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 80063c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80063ca:	d3ec      	bcc.n	80063a6 <Erase_RAM_Data+0x26>
	}
}
 80063cc:	bf00      	nop
 80063ce:	bf00      	nop
 80063d0:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <Start_Measure>:


/*-----AVVIO MISURA-----*/
void Start_Measure(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
	Erase_RAM_Data();
 80063dc:	f7ff ffd0 	bl	8006380 <Erase_RAM_Data>
	sys.RAM_Samples_Number = (config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * 2;
 80063e0:	4b50      	ldr	r3, [pc, #320]	@ (8006524 <Start_Measure+0x14c>)
 80063e2:	885b      	ldrh	r3, [r3, #2]
 80063e4:	4a50      	ldr	r2, [pc, #320]	@ (8006528 <Start_Measure+0x150>)
 80063e6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ea:	099b      	lsrs	r3, r3, #6
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	461a      	mov	r2, r3
 80063f0:	4b4c      	ldr	r3, [pc, #304]	@ (8006524 <Start_Measure+0x14c>)
 80063f2:	791b      	ldrb	r3, [r3, #4]
 80063f4:	fb02 f303 	mul.w	r3, r2, r3
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	461a      	mov	r2, r3
 80063fc:	4b4b      	ldr	r3, [pc, #300]	@ (800652c <Start_Measure+0x154>)
 80063fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006402:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	sys.Active_RAM_Buffer = 0;
 8006406:	4b49      	ldr	r3, [pc, #292]	@ (800652c <Start_Measure+0x154>)
 8006408:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800640c:	2200      	movs	r2, #0
 800640e:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
	sys.Inactive_RAM_Len = 0;
 8006412:	4b46      	ldr	r3, [pc, #280]	@ (800652c <Start_Measure+0x154>)
 8006414:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006418:	461a      	mov	r2, r3
 800641a:	2300      	movs	r3, #0
 800641c:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
	sys.Current_RAM_Base = RAM_FIRST_BUFFER_ADD;
 8006420:	4b42      	ldr	r3, [pc, #264]	@ (800652c <Start_Measure+0x154>)
 8006422:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006426:	461a      	mov	r2, r3
 8006428:	2300      	movs	r3, #0
 800642a:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
	sys.Current_RAM_Len = 0;
 800642e:	4b3f      	ldr	r3, [pc, #252]	@ (800652c <Start_Measure+0x154>)
 8006430:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006434:	461a      	mov	r2, r3
 8006436:	2300      	movs	r3, #0
 8006438:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
	flags.SIM_isConnected = 1;
 800643c:	4a3c      	ldr	r2, [pc, #240]	@ (8006530 <Start_Measure+0x158>)
 800643e:	7853      	ldrb	r3, [r2, #1]
 8006440:	f043 0310 	orr.w	r3, r3, #16
 8006444:	7053      	strb	r3, [r2, #1]
	memset(Pressure, 0, sizeof(Pressure));
 8006446:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800644a:	2100      	movs	r1, #0
 800644c:	4839      	ldr	r0, [pc, #228]	@ (8006534 <Start_Measure+0x15c>)
 800644e:	f010 fac7 	bl	80169e0 <memset>
	memset(Volume_Period, 0, sizeof(Volume_Period));
 8006452:	2228      	movs	r2, #40	@ 0x28
 8006454:	2100      	movs	r1, #0
 8006456:	4838      	ldr	r0, [pc, #224]	@ (8006538 <Start_Measure+0x160>)
 8006458:	f010 fac2 	bl	80169e0 <memset>
	memset(Acceleration, 0, sizeof(Acceleration));
 800645c:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8006460:	2100      	movs	r1, #0
 8006462:	4836      	ldr	r0, [pc, #216]	@ (800653c <Start_Measure+0x164>)
 8006464:	f010 fabc 	bl	80169e0 <memset>
	memset(&Supply, 0, sizeof(Supply));
 8006468:	220c      	movs	r2, #12
 800646a:	2100      	movs	r1, #0
 800646c:	4834      	ldr	r0, [pc, #208]	@ (8006540 <Start_Measure+0x168>)
 800646e:	f010 fab7 	bl	80169e0 <memset>
	Temperature = 0;
 8006472:	4b34      	ldr	r3, [pc, #208]	@ (8006544 <Start_Measure+0x16c>)
 8006474:	2200      	movs	r2, #0
 8006476:	801a      	strh	r2, [r3, #0]
	Saved_Bytes = 0;
 8006478:	4b33      	ldr	r3, [pc, #204]	@ (8006548 <Start_Measure+0x170>)
 800647a:	2200      	movs	r2, #0
 800647c:	601a      	str	r2, [r3, #0]
	Saved_Samples = 0;
 800647e:	4b33      	ldr	r3, [pc, #204]	@ (800654c <Start_Measure+0x174>)
 8006480:	2200      	movs	r2, #0
 8006482:	801a      	strh	r2, [r3, #0]
	Address_Offset = 0;
 8006484:	4b32      	ldr	r3, [pc, #200]	@ (8006550 <Start_Measure+0x178>)
 8006486:	2200      	movs	r2, #0
 8006488:	601a      	str	r2, [r3, #0]
	Cycles_After_Warning = 0;
 800648a:	4b32      	ldr	r3, [pc, #200]	@ (8006554 <Start_Measure+0x17c>)
 800648c:	2200      	movs	r2, #0
 800648e:	801a      	strh	r2, [r3, #0]
	Clear_Flags();
 8006490:	f001 f8ec 	bl	800766c <Clear_Flags>

	ADC_TIMER->Instance->PSC = 100 - 1;
 8006494:	4b30      	ldr	r3, [pc, #192]	@ (8006558 <Start_Measure+0x180>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2263      	movs	r2, #99	@ 0x63
 800649a:	629a      	str	r2, [r3, #40]	@ 0x28
	ADC_TIMER->Instance->ARR = (uint32_t)(SystemCoreClock / (ADC_TIMER->Instance->PSC * config.samp_freq)) - 1;
 800649c:	4b2f      	ldr	r3, [pc, #188]	@ (800655c <Start_Measure+0x184>)
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	4b2d      	ldr	r3, [pc, #180]	@ (8006558 <Start_Measure+0x180>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a6:	491f      	ldr	r1, [pc, #124]	@ (8006524 <Start_Measure+0x14c>)
 80064a8:	8849      	ldrh	r1, [r1, #2]
 80064aa:	fb01 f303 	mul.w	r3, r1, r3
 80064ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80064b2:	4b29      	ldr	r3, [pc, #164]	@ (8006558 <Start_Measure+0x180>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3a01      	subs	r2, #1
 80064b8:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->ARR = (uint32_t)(config.samp_freq / 25) - 1;
 80064ba:	4b1a      	ldr	r3, [pc, #104]	@ (8006524 <Start_Measure+0x14c>)
 80064bc:	885b      	ldrh	r3, [r3, #2]
 80064be:	4a1a      	ldr	r2, [pc, #104]	@ (8006528 <Start_Measure+0x150>)
 80064c0:	fba2 2303 	umull	r2, r3, r2, r3
 80064c4:	08db      	lsrs	r3, r3, #3
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	461a      	mov	r2, r3
 80064ca:	4b25      	ldr	r3, [pc, #148]	@ (8006560 <Start_Measure+0x188>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3a01      	subs	r2, #1
 80064d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->CCR3 = (uint32_t)((ACC_TIMER->Instance->ARR + 1) / 2);
 80064d2:	4b23      	ldr	r3, [pc, #140]	@ (8006560 <Start_Measure+0x188>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	4b21      	ldr	r3, [pc, #132]	@ (8006560 <Start_Measure+0x188>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	0852      	lsrs	r2, r2, #1
 80064e0:	63da      	str	r2, [r3, #60]	@ 0x3c
	if(Acc_Init(&acc, config.samp_freq) != HAL_OK)
 80064e2:	4b10      	ldr	r3, [pc, #64]	@ (8006524 <Start_Measure+0x14c>)
 80064e4:	885b      	ldrh	r3, [r3, #2]
 80064e6:	4619      	mov	r1, r3
 80064e8:	481e      	ldr	r0, [pc, #120]	@ (8006564 <Start_Measure+0x18c>)
 80064ea:	f7fd f9b7 	bl	800385c <Acc_Init>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d003      	beq.n	80064fc <Start_Measure+0x124>
	{
		state = IDLE;
 80064f4:	4b1c      	ldr	r3, [pc, #112]	@ (8006568 <Start_Measure+0x190>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	701a      	strb	r2, [r3, #0]
		return;
 80064fa:	e011      	b.n	8006520 <Start_Measure+0x148>
	}

	HAL_TIM_IC_Start_IT(VOLUME_TIMER, TIM_CHANNEL_1);
 80064fc:	2100      	movs	r1, #0
 80064fe:	481b      	ldr	r0, [pc, #108]	@ (800656c <Start_Measure+0x194>)
 8006500:	f00d f9ea 	bl	80138d8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(ACC_TIMER, TIM_CHANNEL_3);
 8006504:	2108      	movs	r1, #8
 8006506:	4816      	ldr	r0, [pc, #88]	@ (8006560 <Start_Measure+0x188>)
 8006508:	f00c fff2 	bl	80134f0 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(PRESSURE_ADC, (uint32_t*)&Pressure, PRESS_FULL_SAMPLES);
 800650c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006510:	4908      	ldr	r1, [pc, #32]	@ (8006534 <Start_Measure+0x15c>)
 8006512:	4817      	ldr	r0, [pc, #92]	@ (8006570 <Start_Measure+0x198>)
 8006514:	f005 fd40 	bl	800bf98 <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start_IT(ADC_TIMER, TIM_CHANNEL_3);
 8006518:	2108      	movs	r1, #8
 800651a:	480f      	ldr	r0, [pc, #60]	@ (8006558 <Start_Measure+0x180>)
 800651c:	f00c fd58 	bl	8012fd0 <HAL_TIM_OC_Start_IT>
}
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	20001784 	.word	0x20001784
 8006528:	51eb851f 	.word	0x51eb851f
 800652c:	200005d8 	.word	0x200005d8
 8006530:	20001780 	.word	0x20001780
 8006534:	200038f0 	.word	0x200038f0
 8006538:	20003c10 	.word	0x20003c10
 800653c:	20003c38 	.word	0x20003c38
 8006540:	200038e0 	.word	0x200038e0
 8006544:	200041c0 	.word	0x200041c0
 8006548:	20004960 	.word	0x20004960
 800654c:	20004964 	.word	0x20004964
 8006550:	20004958 	.word	0x20004958
 8006554:	2000495c 	.word	0x2000495c
 8006558:	200003e8 	.word	0x200003e8
 800655c:	20000000 	.word	0x20000000
 8006560:	2000039c 	.word	0x2000039c
 8006564:	20004f84 	.word	0x20004f84
 8006568:	200005d4 	.word	0x200005d4
 800656c:	20000350 	.word	0x20000350
 8006570:	200000b0 	.word	0x200000b0

08006574 <Stop_Measure>:

/*-----FINE MISURA-----*/
void Stop_Measure(void)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006578:	b672      	cpsid	i
}
 800657a:	bf00      	nop
	__disable_irq();
	HAL_ADC_Stop_DMA(PRESSURE_ADC);
 800657c:	4809      	ldr	r0, [pc, #36]	@ (80065a4 <Stop_Measure+0x30>)
 800657e:	f005 fdc7 	bl	800c110 <HAL_ADC_Stop_DMA>
	HAL_TIM_OC_Stop_IT(ADC_TIMER, TIM_CHANNEL_3);
 8006582:	2108      	movs	r1, #8
 8006584:	4808      	ldr	r0, [pc, #32]	@ (80065a8 <Stop_Measure+0x34>)
 8006586:	f00c fe77 	bl	8013278 <HAL_TIM_OC_Stop_IT>
	HAL_TIM_PWM_Stop(ACC_TIMER, TIM_CHANNEL_3);
 800658a:	2108      	movs	r1, #8
 800658c:	4807      	ldr	r0, [pc, #28]	@ (80065ac <Stop_Measure+0x38>)
 800658e:	f00d f8b5 	bl	80136fc <HAL_TIM_PWM_Stop>
	HAL_TIM_IC_Stop_IT(VOLUME_TIMER, TIM_CHANNEL_1);
 8006592:	2100      	movs	r1, #0
 8006594:	4806      	ldr	r0, [pc, #24]	@ (80065b0 <Stop_Measure+0x3c>)
 8006596:	f00d fae9 	bl	8013b6c <HAL_TIM_IC_Stop_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 800659a:	b662      	cpsie	i
}
 800659c:	bf00      	nop
	__enable_irq();
}
 800659e:	bf00      	nop
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	200000b0 	.word	0x200000b0
 80065a8:	200003e8 	.word	0x200003e8
 80065ac:	2000039c 	.word	0x2000039c
 80065b0:	20000350 	.word	0x20000350

080065b4 <Warning_Detection>:

/*-----DETECTION COLPO D'ARIETE-----*/
void Warning_Detection(uint16_t* Data)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
	uint16_t max = Data[0];
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	81fb      	strh	r3, [r7, #14]
	uint16_t min = Data[0];
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	81bb      	strh	r3, [r7, #12]

	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 80065c8:	2301      	movs	r3, #1
 80065ca:	60bb      	str	r3, [r7, #8]
 80065cc:	e03a      	b.n	8006644 <Warning_Detection+0x90>
	{
		if(Data[i] > max)
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	4413      	add	r3, r2
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	89fa      	ldrh	r2, [r7, #14]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d206      	bcs.n	80065ec <Warning_Detection+0x38>
		{
			max = Data[i];
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	4413      	add	r3, r2
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	81fb      	strh	r3, [r7, #14]
 80065ea:	e00d      	b.n	8006608 <Warning_Detection+0x54>
		}
		else if(Data[i] < min)
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	4413      	add	r3, r2
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	89ba      	ldrh	r2, [r7, #12]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d905      	bls.n	8006608 <Warning_Detection+0x54>
		{
			min = Data[i];
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	005b      	lsls	r3, r3, #1
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	4413      	add	r3, r2
 8006604:	881b      	ldrh	r3, [r3, #0]
 8006606:	81bb      	strh	r3, [r7, #12]
		}

		if(Data[i] < sys.Low_th || Data[i] > sys.High_th)
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	4413      	add	r3, r2
 8006610:	881a      	ldrh	r2, [r3, #0]
 8006612:	4b17      	ldr	r3, [pc, #92]	@ (8006670 <Warning_Detection+0xbc>)
 8006614:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006618:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800661a:	429a      	cmp	r2, r3
 800661c:	d30a      	bcc.n	8006634 <Warning_Detection+0x80>
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	4413      	add	r3, r2
 8006626:	881a      	ldrh	r2, [r3, #0]
 8006628:	4b11      	ldr	r3, [pc, #68]	@ (8006670 <Warning_Detection+0xbc>)
 800662a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800662e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8006630:	429a      	cmp	r2, r3
 8006632:	d904      	bls.n	800663e <Warning_Detection+0x8a>
		{
			flags.Threshold_Detected= 1;
 8006634:	4a0f      	ldr	r2, [pc, #60]	@ (8006674 <Warning_Detection+0xc0>)
 8006636:	7813      	ldrb	r3, [r2, #0]
 8006638:	f043 0310 	orr.w	r3, r3, #16
 800663c:	7013      	strb	r3, [r2, #0]
	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	3301      	adds	r3, #1
 8006642:	60bb      	str	r3, [r7, #8]
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2bc7      	cmp	r3, #199	@ 0xc7
 8006648:	ddc1      	ble.n	80065ce <Warning_Detection+0x1a>
		}
	}

	if(max - min >= Hammer_Th)
 800664a:	89fa      	ldrh	r2, [r7, #14]
 800664c:	89bb      	ldrh	r3, [r7, #12]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	4a09      	ldr	r2, [pc, #36]	@ (8006678 <Warning_Detection+0xc4>)
 8006652:	8812      	ldrh	r2, [r2, #0]
 8006654:	4293      	cmp	r3, r2
 8006656:	db04      	blt.n	8006662 <Warning_Detection+0xae>
	{
		flags.Hammer_Detected = 1;
 8006658:	4a06      	ldr	r2, [pc, #24]	@ (8006674 <Warning_Detection+0xc0>)
 800665a:	7813      	ldrb	r3, [r2, #0]
 800665c:	f043 0308 	orr.w	r3, r3, #8
 8006660:	7013      	strb	r3, [r2, #0]
	}

}
 8006662:	bf00      	nop
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	200005d8 	.word	0x200005d8
 8006674:	20001780 	.word	0x20001780
 8006678:	20004f20 	.word	0x20004f20

0800667c <RAM_Save_Measure>:

/*-----SALVATAGGIO MISURA IN RAM-----*/
void RAM_Save_Measure(Compressed_Sample_Typedef* sample, uint8_t* compressed_data)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
    uint32_t samples_size = sample->compressed_size.pressure_size +
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	b29b      	uxth	r3, r3
 800668c:	461a      	mov	r2, r3
                            sample->compressed_size.volume_size +
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	885b      	ldrh	r3, [r3, #2]
 8006692:	b29b      	uxth	r3, r3
    uint32_t samples_size = sample->compressed_size.pressure_size +
 8006694:	4413      	add	r3, r2
                            sample->compressed_size.acceleration_size;
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	8892      	ldrh	r2, [r2, #4]
 800669a:	b292      	uxth	r2, r2
                            sample->compressed_size.volume_size +
 800669c:	4413      	add	r3, r2
    uint32_t samples_size = sample->compressed_size.pressure_size +
 800669e:	617b      	str	r3, [r7, #20]
    uint32_t total_size = METADATA_SIZE + samples_size;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	3306      	adds	r3, #6
 80066a4:	613b      	str	r3, [r7, #16]

    // Controllo corruzione
    if (sys.Current_RAM_Len >= (RAM_SECOND_BUFFER_ADD - RAM_FIRST_BUFFER_ADD)) 
 80066a6:	4b38      	ldr	r3, [pc, #224]	@ (8006788 <RAM_Save_Measure+0x10c>)
 80066a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066ac:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80066b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066b4:	d30c      	bcc.n	80066d0 <RAM_Save_Measure+0x54>
	{
        sys.Current_RAM_Len = 0;
 80066b6:	4b34      	ldr	r3, [pc, #208]	@ (8006788 <RAM_Save_Measure+0x10c>)
 80066b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066bc:	461a      	mov	r2, r3
 80066be:	2300      	movs	r3, #0
 80066c0:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
        Saved_Bytes = 0;
 80066c4:	4b31      	ldr	r3, [pc, #196]	@ (800678c <RAM_Save_Measure+0x110>)
 80066c6:	2200      	movs	r2, #0
 80066c8:	601a      	str	r2, [r3, #0]
        Saved_Samples = 0;
 80066ca:	4b31      	ldr	r3, [pc, #196]	@ (8006790 <RAM_Save_Measure+0x114>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	801a      	strh	r2, [r3, #0]
    }

    // ========= LOGICA CIRCOLARE (PRIORITARIA) =========
    if(Saved_Samples >= sys.RAM_Samples_Number) 
 80066d0:	4b2f      	ldr	r3, [pc, #188]	@ (8006790 <RAM_Save_Measure+0x114>)
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	461a      	mov	r2, r3
 80066d6:	4b2c      	ldr	r3, [pc, #176]	@ (8006788 <RAM_Save_Measure+0x10c>)
 80066d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066dc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d30c      	bcc.n	80066fe <RAM_Save_Measure+0x82>
	{
        // RESET CIRCOLARE - riparti dall'inizio dello stesso buffer
        sys.Current_RAM_Len = 0;        // ← CORRETTO: riparte da zero
 80066e4:	4b28      	ldr	r3, [pc, #160]	@ (8006788 <RAM_Save_Measure+0x10c>)
 80066e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066ea:	461a      	mov	r2, r3
 80066ec:	2300      	movs	r3, #0
 80066ee:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
        Saved_Bytes = 0;
 80066f2:	4b26      	ldr	r3, [pc, #152]	@ (800678c <RAM_Save_Measure+0x110>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	601a      	str	r2, [r3, #0]
        Saved_Samples = 0;
 80066f8:	4b25      	ldr	r3, [pc, #148]	@ (8006790 <RAM_Save_Measure+0x114>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	801a      	strh	r2, [r3, #0]
    }

    uint32_t address = sys.Current_RAM_Base + sys.Current_RAM_Len;
 80066fe:	4b22      	ldr	r3, [pc, #136]	@ (8006788 <RAM_Save_Measure+0x10c>)
 8006700:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006704:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8006708:	4b1f      	ldr	r3, [pc, #124]	@ (8006788 <RAM_Save_Measure+0x10c>)
 800670a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800670e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006712:	4413      	add	r3, r2
 8006714:	60fb      	str	r3, [r7, #12]

    // Controllo overflow SOLO se non siamo in modalità circolare
    if (sys.Current_RAM_Len + total_size > (RAM_SECOND_BUFFER_ADD - RAM_FIRST_BUFFER_ADD)) 
 8006716:	4b1c      	ldr	r3, [pc, #112]	@ (8006788 <RAM_Save_Measure+0x10c>)
 8006718:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800671c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	4413      	add	r3, r2
 8006724:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006728:	d905      	bls.n	8006736 <RAM_Save_Measure+0xba>
	{
        // Overflow - forza switch buffer
        Switch_Buffer();
 800672a:	f7ff fdd3 	bl	80062d4 <Switch_Buffer>
        Send_Measure_Addr = 0;
 800672e:	4b19      	ldr	r3, [pc, #100]	@ (8006794 <RAM_Save_Measure+0x118>)
 8006730:	2200      	movs	r2, #0
 8006732:	601a      	str	r2, [r3, #0]
        return;
 8006734:	e024      	b.n	8006780 <RAM_Save_Measure+0x104>
    }

    // Salvataggio normale
    RAM_Write(address, METADATA_SIZE, (uint8_t*)sample);
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	2106      	movs	r1, #6
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f001 f9ea 	bl	8007b14 <RAM_Write>
    address += METADATA_SIZE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	3306      	adds	r3, #6
 8006744:	60fb      	str	r3, [r7, #12]
    RAM_Write(address, samples_size, compressed_data);
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	6979      	ldr	r1, [r7, #20]
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f001 f9e2 	bl	8007b14 <RAM_Write>
    
    Saved_Bytes += total_size;
 8006750:	4b0e      	ldr	r3, [pc, #56]	@ (800678c <RAM_Save_Measure+0x110>)
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	4413      	add	r3, r2
 8006758:	4a0c      	ldr	r2, [pc, #48]	@ (800678c <RAM_Save_Measure+0x110>)
 800675a:	6013      	str	r3, [r2, #0]
    sys.Current_RAM_Len += total_size;
 800675c:	4b0a      	ldr	r3, [pc, #40]	@ (8006788 <RAM_Save_Measure+0x10c>)
 800675e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006762:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	4413      	add	r3, r2
 800676a:	4a07      	ldr	r2, [pc, #28]	@ (8006788 <RAM_Save_Measure+0x10c>)
 800676c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006770:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
    Saved_Samples++;
 8006774:	4b06      	ldr	r3, [pc, #24]	@ (8006790 <RAM_Save_Measure+0x114>)
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	3301      	adds	r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	4b04      	ldr	r3, [pc, #16]	@ (8006790 <RAM_Save_Measure+0x114>)
 800677e:	801a      	strh	r2, [r3, #0]
}
 8006780:	3718      	adds	r7, #24
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	200005d8 	.word	0x200005d8
 800678c:	20004960 	.word	0x20004960
 8006790:	20004964 	.word	0x20004964
 8006794:	20004968 	.word	0x20004968

08006798 <Send_Measure_Chunk>:

/*-----INVIO CHUNK MISURA-----*/
uint32_t Send_Measure_Chunk(uint32_t buffer_base, uint32_t buffer_len, uint32_t start_address)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	f5ad 6d8b 	sub.w	sp, sp, #1112	@ 0x458
 800679e:	af00      	add	r7, sp, #0
 80067a0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80067a4:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 80067a8:	6018      	str	r0, [r3, #0]
 80067aa:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80067ae:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 80067b2:	6019      	str	r1, [r3, #0]
 80067b4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80067b8:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80067bc:	601a      	str	r2, [r3, #0]
    uint32_t raw_fill = 0;
 80067be:	2300      	movs	r3, #0
 80067c0:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
    uint8_t raw_buffer[1050]; // Dimensione ottimale per 1400 bytes TCP
    uint32_t address = start_address;
 80067c4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80067c8:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
    uint32_t end_address = start_address;
 80067d2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80067d6:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
    uint8_t first_loop = 1;
 80067e0:	2301      	movs	r3, #1
 80067e2:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f

    if (buffer_len == 0) 
 80067e6:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80067ea:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <Send_Measure_Chunk+0x60>
	{
        return 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	e1d1      	b.n	8006b9c <Send_Measure_Chunk+0x404>
    }

    do 
	{
        // Wraparound check
        if (address >= buffer_base + buffer_len) 
 80067f8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80067fc:	f2a3 424c 	subw	r2, r3, #1100	@ 0x44c
 8006800:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006804:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8006808:	6812      	ldr	r2, [r2, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4413      	add	r3, r2
 800680e:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 8006812:	429a      	cmp	r2, r3
 8006814:	d306      	bcc.n	8006824 <Send_Measure_Chunk+0x8c>
		{
            address = buffer_base;
 8006816:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800681a:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
        }

        // Spazio insufficiente per metadata
        if ((buffer_base + buffer_len - address) < METADATA_SIZE && address < buffer_base + buffer_len) 
 8006824:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006828:	f2a3 424c 	subw	r2, r3, #1100	@ 0x44c
 800682c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006830:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8006834:	6812      	ldr	r2, [r2, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	441a      	add	r2, r3
 800683a:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	2b05      	cmp	r3, #5
 8006842:	d80f      	bhi.n	8006864 <Send_Measure_Chunk+0xcc>
 8006844:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006848:	f2a3 424c 	subw	r2, r3, #1100	@ 0x44c
 800684c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006850:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8006854:	6812      	ldr	r2, [r2, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4413      	add	r3, r2
 800685a:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 800685e:	429a      	cmp	r2, r3
 8006860:	f0c0 8175 	bcc.w	8006b4e <Send_Measure_Chunk+0x3b6>
		{
            break;
        }
        
        // Buffer chunk pieno per metadata
        if ((raw_fill + METADATA_SIZE) > sizeof(raw_buffer)) 
 8006864:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8006868:	3306      	adds	r3, #6
 800686a:	f240 421a 	movw	r2, #1050	@ 0x41a
 800686e:	4293      	cmp	r3, r2
 8006870:	f200 816f 	bhi.w	8006b52 <Send_Measure_Chunk+0x3ba>
            break;
        }

        // ========= SINGOLA LETTURA METADATA =========
        Compressed_Sample_Typedef sample_header;
        RAM_Read(address, METADATA_SIZE, (uint8_t*)&sample_header);
 8006874:	f107 0310 	add.w	r3, r7, #16
 8006878:	461a      	mov	r2, r3
 800687a:	2106      	movs	r1, #6
 800687c:	f8d7 0450 	ldr.w	r0, [r7, #1104]	@ 0x450
 8006880:	f001 f959 	bl	8007b36 <RAM_Read>

        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 8006884:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006888:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	461a      	mov	r2, r3
                               sample_header.compressed_size.volume_size +
 8006890:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006894:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006898:	885b      	ldrh	r3, [r3, #2]
        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 800689a:	4413      	add	r3, r2
                               sample_header.compressed_size.acceleration_size;
 800689c:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 80068a0:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 80068a4:	8892      	ldrh	r2, [r2, #4]
                               sample_header.compressed_size.volume_size +
 80068a6:	4413      	add	r3, r2
        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 80068a8:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448

        // ========= VALIDAZIONE E CORREZIONE SAMPLE =========
        if (sample_size == 0 || 
 80068ac:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d01b      	beq.n	80068ec <Send_Measure_Chunk+0x154>
 80068b4:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 80068b8:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80068bc:	d816      	bhi.n	80068ec <Send_Measure_Chunk+0x154>
            sample_size > MAX_COMPRESSED_SIZE ||
            sample_header.compressed_size.pressure_size > 500 ||    // Limite ragionevole pressione
 80068be:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80068c2:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80068c6:	881b      	ldrh	r3, [r3, #0]
            sample_size > MAX_COMPRESSED_SIZE ||
 80068c8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80068cc:	d80e      	bhi.n	80068ec <Send_Measure_Chunk+0x154>
            sample_header.compressed_size.volume_size > 100 ||      // Limite ragionevole volume  
 80068ce:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80068d2:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80068d6:	885b      	ldrh	r3, [r3, #2]
            sample_header.compressed_size.pressure_size > 500 ||    // Limite ragionevole pressione
 80068d8:	2b64      	cmp	r3, #100	@ 0x64
 80068da:	d807      	bhi.n	80068ec <Send_Measure_Chunk+0x154>
            sample_header.compressed_size.acceleration_size > 1000) // Limite ragionevole acc
 80068dc:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80068e0:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80068e4:	889b      	ldrh	r3, [r3, #4]
            sample_header.compressed_size.volume_size > 100 ||      // Limite ragionevole volume  
 80068e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80068ea:	d914      	bls.n	8006916 <Send_Measure_Chunk+0x17e>
        { 
            // Sample corrotto - crea metadata di emergenza
            sample_header.compressed_size.pressure_size = sizeof(uint16_t);
 80068ec:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80068f0:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80068f4:	2202      	movs	r2, #2
 80068f6:	801a      	strh	r2, [r3, #0]
            sample_header.compressed_size.volume_size = sizeof(uint16_t);
 80068f8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80068fc:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006900:	2202      	movs	r2, #2
 8006902:	805a      	strh	r2, [r3, #2]
            sample_header.compressed_size.acceleration_size = sizeof(uint16_t);
 8006904:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006908:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800690c:	2202      	movs	r2, #2
 800690e:	809a      	strh	r2, [r3, #4]
            sample_size = sizeof(uint16_t) + sizeof(uint16_t) + sizeof(uint16_t);
 8006910:	2306      	movs	r3, #6
 8006912:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
        }

        uint32_t sample_total_size = METADATA_SIZE + sample_size;
 8006916:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 800691a:	3306      	adds	r3, #6
 800691c:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440

        // Buffer chunk non può contenere questo sample
        if ((raw_fill + sample_total_size) > sizeof(raw_buffer)) 
 8006920:	f8d7 2454 	ldr.w	r2, [r7, #1108]	@ 0x454
 8006924:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8006928:	4413      	add	r3, r2
 800692a:	f240 421a 	movw	r2, #1050	@ 0x41a
 800692e:	4293      	cmp	r3, r2
 8006930:	f200 8111 	bhi.w	8006b56 <Send_Measure_Chunk+0x3be>
		{
            break;
        }

        // ========= COPIA METADATA (CORRETTI) NEL BUFFER =========
        memcpy(raw_buffer + raw_fill, (uint8_t*)&sample_header, METADATA_SIZE);
 8006934:	f107 0218 	add.w	r2, r7, #24
 8006938:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 800693c:	18d1      	adds	r1, r2, r3
 800693e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006942:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006946:	460b      	mov	r3, r1
 8006948:	6810      	ldr	r0, [r2, #0]
 800694a:	6018      	str	r0, [r3, #0]
 800694c:	8892      	ldrh	r2, [r2, #4]
 800694e:	809a      	strh	r2, [r3, #4]
        raw_fill += METADATA_SIZE;
 8006950:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8006954:	3306      	adds	r3, #6
 8006956:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
        address += METADATA_SIZE;
 800695a:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800695e:	3306      	adds	r3, #6
 8006960:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
        if (address >= buffer_base + buffer_len) address = buffer_base;
 8006964:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006968:	f2a3 424c 	subw	r2, r3, #1100	@ 0x44c
 800696c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006970:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8006974:	6812      	ldr	r2, [r2, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4413      	add	r3, r2
 800697a:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 800697e:	429a      	cmp	r2, r3
 8006980:	d306      	bcc.n	8006990 <Send_Measure_Chunk+0x1f8>
 8006982:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006986:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450

        // ========= GESTIONE DATI SAMPLE =========
        if (sample_header.compressed_size.pressure_size == sizeof(uint16_t) && 
 8006990:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006994:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	2b02      	cmp	r3, #2
 800699c:	d152      	bne.n	8006a44 <Send_Measure_Chunk+0x2ac>
            sample_header.compressed_size.volume_size == sizeof(uint16_t) &&
 800699e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80069a2:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80069a6:	885b      	ldrh	r3, [r3, #2]
        if (sample_header.compressed_size.pressure_size == sizeof(uint16_t) && 
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d14b      	bne.n	8006a44 <Send_Measure_Chunk+0x2ac>
            sample_header.compressed_size.acceleration_size == sizeof(uint16_t)) 
 80069ac:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80069b0:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80069b4:	889b      	ldrh	r3, [r3, #4]
            sample_header.compressed_size.volume_size == sizeof(uint16_t) &&
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d144      	bne.n	8006a44 <Send_Measure_Chunk+0x2ac>
			{

            // Sample era corrotto - riempi con zeri
            memset(raw_buffer + raw_fill, 0, sample_size);
 80069ba:	f107 0218 	add.w	r2, r7, #24
 80069be:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 80069c2:	4413      	add	r3, r2
 80069c4:	f8d7 2448 	ldr.w	r2, [r7, #1096]	@ 0x448
 80069c8:	2100      	movs	r1, #0
 80069ca:	4618      	mov	r0, r3
 80069cc:	f010 f808 	bl	80169e0 <memset>
            raw_fill += sample_size;
 80069d0:	f8d7 2454 	ldr.w	r2, [r7, #1108]	@ 0x454
 80069d4:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 80069d8:	4413      	add	r3, r2
 80069da:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
            
            // Salta i dati corrotti in RAM (avanza di sample_size originale)
            // Nota: questo potrebbe non essere allineato, ma è meglio che rimanere bloccati
            address += sample_size;
 80069de:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 80069e2:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 80069e6:	4413      	add	r3, r2
 80069e8:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
            if (address >= buffer_base + buffer_len) 
 80069ec:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80069f0:	f2a3 424c 	subw	r2, r3, #1100	@ 0x44c
 80069f4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80069f8:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 80069fc:	6812      	ldr	r2, [r2, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4413      	add	r3, r2
 8006a02:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 8006a06:	429a      	cmp	r2, r3
 8006a08:	f0c0 8093 	bcc.w	8006b32 <Send_Measure_Chunk+0x39a>
			{
                address = buffer_base + ((address - buffer_base) % buffer_len);
 8006a0c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006a10:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8006a14:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8006a20:	f5a2 628a 	sub.w	r2, r2, #1104	@ 0x450
 8006a24:	6811      	ldr	r1, [r2, #0]
 8006a26:	fbb3 f1f1 	udiv	r1, r3, r1
 8006a2a:	6812      	ldr	r2, [r2, #0]
 8006a2c:	fb01 f202 	mul.w	r2, r1, r2
 8006a30:	1a9b      	subs	r3, r3, r2
 8006a32:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8006a36:	f2a2 424c 	subw	r2, r2, #1100	@ 0x44c
 8006a3a:	6812      	ldr	r2, [r2, #0]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
            if (address >= buffer_base + buffer_len) 
 8006a42:	e076      	b.n	8006b32 <Send_Measure_Chunk+0x39a>
            }
        } else {
            // Sample valido - leggi dati reali dalla RAM
            // Gestione wraparound sicura
            if (address + sample_size <= buffer_base + buffer_len) 
 8006a44:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 8006a48:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 8006a4c:	441a      	add	r2, r3
 8006a4e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006a52:	f2a3 414c 	subw	r1, r3, #1100	@ 0x44c
 8006a56:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006a5a:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8006a5e:	6809      	ldr	r1, [r1, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	440b      	add	r3, r1
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d80c      	bhi.n	8006a82 <Send_Measure_Chunk+0x2ea>
			{
                // Dati non vanno oltre il buffer
                RAM_Read(address, sample_size, raw_buffer + raw_fill);
 8006a68:	f107 0218 	add.w	r2, r7, #24
 8006a6c:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8006a70:	4413      	add	r3, r2
 8006a72:	461a      	mov	r2, r3
 8006a74:	f8d7 1448 	ldr.w	r1, [r7, #1096]	@ 0x448
 8006a78:	f8d7 0450 	ldr.w	r0, [r7, #1104]	@ 0x450
 8006a7c:	f001 f85b 	bl	8007b36 <RAM_Read>
 8006a80:	e033      	b.n	8006aea <Send_Measure_Chunk+0x352>
            } 
			else 
			{
                // Dati si split tra fine e inizio buffer
                uint32_t first_part = (buffer_base + buffer_len) - address;
 8006a82:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006a86:	f2a3 424c 	subw	r2, r3, #1100	@ 0x44c
 8006a8a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006a8e:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8006a92:	6812      	ldr	r2, [r2, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	441a      	add	r2, r3
 8006a98:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
                uint32_t second_part = sample_size - first_part;
 8006aa2:	f8d7 2448 	ldr.w	r2, [r7, #1096]	@ 0x448
 8006aa6:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
                RAM_Read(address, first_part, raw_buffer + raw_fill);
 8006ab0:	f107 0218 	add.w	r2, r7, #24
 8006ab4:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8006ab8:	4413      	add	r3, r2
 8006aba:	461a      	mov	r2, r3
 8006abc:	f8d7 143c 	ldr.w	r1, [r7, #1084]	@ 0x43c
 8006ac0:	f8d7 0450 	ldr.w	r0, [r7, #1104]	@ 0x450
 8006ac4:	f001 f837 	bl	8007b36 <RAM_Read>
                RAM_Read(buffer_base, second_part, raw_buffer + raw_fill + first_part);
 8006ac8:	f8d7 2454 	ldr.w	r2, [r7, #1108]	@ 0x454
 8006acc:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f107 0218 	add.w	r2, r7, #24
 8006ad6:	441a      	add	r2, r3
 8006ad8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006adc:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8006ae0:	f8d7 1438 	ldr.w	r1, [r7, #1080]	@ 0x438
 8006ae4:	6818      	ldr	r0, [r3, #0]
 8006ae6:	f001 f826 	bl	8007b36 <RAM_Read>
            }
            raw_fill += sample_size;
 8006aea:	f8d7 2454 	ldr.w	r2, [r7, #1108]	@ 0x454
 8006aee:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 8006af2:	4413      	add	r3, r2
 8006af4:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
            address += sample_size;
 8006af8:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 8006afc:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 8006b00:	4413      	add	r3, r2
 8006b02:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
            if (address >= buffer_base + buffer_len) address = buffer_base;
 8006b06:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006b0a:	f2a3 424c 	subw	r2, r3, #1100	@ 0x44c
 8006b0e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006b12:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8006b16:	6812      	ldr	r2, [r2, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d306      	bcc.n	8006b32 <Send_Measure_Chunk+0x39a>
 8006b24:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006b28:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
        }

        // Condizione di fine
        if (address == end_address && !first_loop) 
 8006b32:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 8006b36:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d103      	bne.n	8006b46 <Send_Measure_Chunk+0x3ae>
 8006b3e:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d009      	beq.n	8006b5a <Send_Measure_Chunk+0x3c2>
		{
            break;
        }
        first_loop = 0;
 8006b46:	2300      	movs	r3, #0
 8006b48:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f
	{
 8006b4c:	e654      	b.n	80067f8 <Send_Measure_Chunk+0x60>
            break;
 8006b4e:	bf00      	nop
 8006b50:	e004      	b.n	8006b5c <Send_Measure_Chunk+0x3c4>
            break;
 8006b52:	bf00      	nop
 8006b54:	e002      	b.n	8006b5c <Send_Measure_Chunk+0x3c4>
            break;
 8006b56:	bf00      	nop
 8006b58:	e000      	b.n	8006b5c <Send_Measure_Chunk+0x3c4>
            break;
 8006b5a:	bf00      	nop
    } while (1);

    if (raw_fill > 0) 
 8006b5c:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d010      	beq.n	8006b86 <Send_Measure_Chunk+0x3ee>
	{
        // Codifica in base64
        size_t b64_len = Base64_Encode(raw_buffer, raw_fill, (char*)tcp_chunk, sizeof(tcp_chunk));
 8006b64:	f107 0018 	add.w	r0, r7, #24
 8006b68:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8006b6c:	4a0e      	ldr	r2, [pc, #56]	@ (8006ba8 <Send_Measure_Chunk+0x410>)
 8006b6e:	f8d7 1454 	ldr.w	r1, [r7, #1108]	@ 0x454
 8006b72:	f7fb fea3 	bl	80028bc <Base64_Encode>
 8006b76:	f8c7 0434 	str.w	r0, [r7, #1076]	@ 0x434
        SIM_Send_TCP_Chunk_DMA(b64_len);
 8006b7a:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7fb fc33 	bl	80023ec <SIM_Send_TCP_Chunk_DMA>
    }

    if (address == end_address) 
 8006b86:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 8006b8a:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d102      	bne.n	8006b98 <Send_Measure_Chunk+0x400>
	{
        return (uint32_t)-1;
 8006b92:	f04f 33ff 	mov.w	r3, #4294967295
 8006b96:	e001      	b.n	8006b9c <Send_Measure_Chunk+0x404>
    }
    return address;
 8006b98:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f507 678b 	add.w	r7, r7, #1112	@ 0x458
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	2000496c 	.word	0x2000496c

08006bac <Compress_Sample>:

/*-----COMPRESSIONE DATI-----*/
Compressed_Sizes_Typedef Compress_Sample(uint8_t *input, uint16_t input_len, uint8_t *output)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b09a      	sub	sp, #104	@ 0x68
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	603b      	str	r3, [r7, #0]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	80fb      	strh	r3, [r7, #6]
	uint16_t out_idx = 0;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	uint8_t packed_byte = 0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	Compressed_Sizes_Typedef sizes = {0, 0, 0};
 8006bc8:	2300      	movs	r3, #0
 8006bca:	843b      	strh	r3, [r7, #32]
 8006bcc:	2300      	movs	r3, #0
 8006bce:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	84bb      	strh	r3, [r7, #36]	@ 0x24

    AdpcmState_Typedef press_state = {0, 0};
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	83bb      	strh	r3, [r7, #28]
 8006bd8:	2300      	movs	r3, #0
 8006bda:	77bb      	strb	r3, [r7, #30]
    AdpcmState_Typedef acc_x_state = {0, 0}, acc_y_state = {0, 0}, acc_z_state = {0, 0};
 8006bdc:	2300      	movs	r3, #0
 8006bde:	833b      	strh	r3, [r7, #24]
 8006be0:	2300      	movs	r3, #0
 8006be2:	76bb      	strb	r3, [r7, #26]
 8006be4:	2300      	movs	r3, #0
 8006be6:	82bb      	strh	r3, [r7, #20]
 8006be8:	2300      	movs	r3, #0
 8006bea:	75bb      	strb	r3, [r7, #22]
 8006bec:	2300      	movs	r3, #0
 8006bee:	823b      	strh	r3, [r7, #16]
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	74bb      	strb	r3, [r7, #18]

	// --- 1. Pressione ---
	uint16_t *adc = (uint16_t*)input;
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint16_t pressure_start = out_idx;
 8006bf8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006bfc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	output[out_idx++] = adc[0] & 0xFF;
 8006c00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c02:	881a      	ldrh	r2, [r3, #0]
 8006c04:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006c08:	1c59      	adds	r1, r3, #1
 8006c0a:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006c0e:	4619      	mov	r1, r3
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	440b      	add	r3, r1
 8006c14:	b2d2      	uxtb	r2, r2
 8006c16:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = adc[0] >> 8;
 8006c18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	0a1b      	lsrs	r3, r3, #8
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006c24:	1c59      	adds	r1, r3, #1
 8006c26:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	440b      	add	r3, r1
 8006c30:	b2d2      	uxtb	r2, r2
 8006c32:	701a      	strb	r2, [r3, #0]
	press_state.previous_value = adc[0];
 8006c34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	b21b      	sxth	r3, r3
 8006c3a:	83bb      	strh	r3, [r7, #28]
	for (int i = 1; i < PRESS_HALF_SAMPLES; i++) 
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c40:	e033      	b.n	8006caa <Compress_Sample+0xfe>
	{
		uint8_t nibble = ADPCM_Compression(adc[i], &press_state, step_size_table_12bit);
 8006c42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c48:	4413      	add	r3, r2
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	b21b      	sxth	r3, r3
 8006c4e:	f107 011c 	add.w	r1, r7, #28
 8006c52:	4a99      	ldr	r2, [pc, #612]	@ (8006eb8 <Compress_Sample+0x30c>)
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 f9cf 	bl	8006ff8 <ADPCM_Compression>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (i % 2 != 0) 
 8006c60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d004      	beq.n	8006c74 <Compress_Sample+0xc8>
		{
			packed_byte = nibble;
 8006c6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006c6e:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 8006c72:	e017      	b.n	8006ca4 <Compress_Sample+0xf8>
		} else 
		{
			packed_byte |= (nibble << 4);
 8006c74:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006c78:	011b      	lsls	r3, r3, #4
 8006c7a:	b25a      	sxtb	r2, r3
 8006c7c:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8006c80:	4313      	orrs	r3, r2
 8006c82:	b25b      	sxtb	r3, r3
 8006c84:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
			output[out_idx++] = packed_byte;
 8006c88:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8006c92:	461a      	mov	r2, r3
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	4413      	add	r3, r2
 8006c98:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 8006c9c:	701a      	strb	r2, [r3, #0]
			packed_byte = 0;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	for (int i = 1; i < PRESS_HALF_SAMPLES; i++) 
 8006ca4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006caa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006cac:	2bc7      	cmp	r3, #199	@ 0xc7
 8006cae:	ddc8      	ble.n	8006c42 <Compress_Sample+0x96>
	if (PRESS_HALF_SAMPLES % 2 != 0) 
	{
		output[out_idx++] = packed_byte;
		packed_byte = 0;
	}
	sizes.pressure_size = out_idx - pressure_start;
 8006cb0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8006cb4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	843b      	strh	r3, [r7, #32]

	// --- 2. Flusso (RLE) ---
	uint32_t *counter = (uint32_t*)(input + PRESS_HALF_LEN);
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006cc4:	643b      	str	r3, [r7, #64]	@ 0x40
	uint16_t volume_start = out_idx;
 8006cc6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006cca:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	uint32_t prev = counter[0];
 8006ccc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint16_t run_len = 1;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

	for (int i = 1; i < MAX_VOLUME_SAMPLES; i++) {
 8006cd8:	2301      	movs	r3, #1
 8006cda:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cdc:	e058      	b.n	8006d90 <Compress_Sample+0x1e4>
		if (counter[i] == prev && run_len < 255) {
 8006cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ce4:	4413      	add	r3, r2
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d109      	bne.n	8006d02 <Compress_Sample+0x156>
 8006cee:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006cf2:	2bfe      	cmp	r3, #254	@ 0xfe
 8006cf4:	d805      	bhi.n	8006d02 <Compress_Sample+0x156>
			run_len++;
 8006cf6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8006d00:	e043      	b.n	8006d8a <Compress_Sample+0x1de>
		} else {
			// Scrivi valore e run_len (4 byte valore + 1 byte run_len)
			output[out_idx++] = prev & 0xFF;
 8006d02:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006d06:	1c5a      	adds	r2, r3, #1
 8006d08:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	4413      	add	r3, r2
 8006d12:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006d14:	b2d2      	uxtb	r2, r2
 8006d16:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 8) & 0xFF;
 8006d18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d1a:	0a1a      	lsrs	r2, r3, #8
 8006d1c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006d20:	1c59      	adds	r1, r3, #1
 8006d22:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006d26:	4619      	mov	r1, r3
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	440b      	add	r3, r1
 8006d2c:	b2d2      	uxtb	r2, r2
 8006d2e:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 16) & 0xFF;
 8006d30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d32:	0c1a      	lsrs	r2, r3, #16
 8006d34:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006d38:	1c59      	adds	r1, r3, #1
 8006d3a:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006d3e:	4619      	mov	r1, r3
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	440b      	add	r3, r1
 8006d44:	b2d2      	uxtb	r2, r2
 8006d46:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 24) & 0xFF;
 8006d48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d4a:	0e1a      	lsrs	r2, r3, #24
 8006d4c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006d50:	1c59      	adds	r1, r3, #1
 8006d52:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006d56:	4619      	mov	r1, r3
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	440b      	add	r3, r1
 8006d5c:	b2d2      	uxtb	r2, r2
 8006d5e:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = run_len;
 8006d60:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8006d74:	b2d2      	uxtb	r2, r2
 8006d76:	701a      	strb	r2, [r3, #0]
			prev = counter[i];
 8006d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d7e:	4413      	add	r3, r2
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	65fb      	str	r3, [r7, #92]	@ 0x5c
			run_len = 1;
 8006d84:	2301      	movs	r3, #1
 8006d86:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	for (int i = 1; i < MAX_VOLUME_SAMPLES; i++) {
 8006d8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d92:	2b09      	cmp	r3, #9
 8006d94:	dda3      	ble.n	8006cde <Compress_Sample+0x132>
		}
	}
	// Scrivi l'ultimo run
	output[out_idx++] = prev & 0xFF;
 8006d96:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006d9a:	1c5a      	adds	r2, r3, #1
 8006d9c:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8006da0:	461a      	mov	r2, r3
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	4413      	add	r3, r2
 8006da6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006da8:	b2d2      	uxtb	r2, r2
 8006daa:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 8) & 0xFF;
 8006dac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006dae:	0a1a      	lsrs	r2, r3, #8
 8006db0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006db4:	1c59      	adds	r1, r3, #1
 8006db6:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006dba:	4619      	mov	r1, r3
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	440b      	add	r3, r1
 8006dc0:	b2d2      	uxtb	r2, r2
 8006dc2:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 16) & 0xFF;
 8006dc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006dc6:	0c1a      	lsrs	r2, r3, #16
 8006dc8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006dcc:	1c59      	adds	r1, r3, #1
 8006dce:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	440b      	add	r3, r1
 8006dd8:	b2d2      	uxtb	r2, r2
 8006dda:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 24) & 0xFF;
 8006ddc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006dde:	0e1a      	lsrs	r2, r3, #24
 8006de0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006de4:	1c59      	adds	r1, r3, #1
 8006de6:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006dea:	4619      	mov	r1, r3
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	440b      	add	r3, r1
 8006df0:	b2d2      	uxtb	r2, r2
 8006df2:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = run_len;
 8006df4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8006dfe:	461a      	mov	r2, r3
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	4413      	add	r3, r2
 8006e04:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8006e08:	b2d2      	uxtb	r2, r2
 8006e0a:	701a      	strb	r2, [r3, #0]

	sizes.volume_size = out_idx - volume_start;
 8006e0c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8006e10:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	847b      	strh	r3, [r7, #34]	@ 0x22

	// --- 3. Accelerometro (3 canali separati) ---
	uint8_t *accel = input + PRESS_HALF_LEN + MAX_VOLUME_LEN;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint16_t accel_start = out_idx;
 8006e20:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006e24:	86fb      	strh	r3, [r7, #54]	@ 0x36

	uint16_t x0 = accel[1] | (accel[2] << 8);
 8006e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e28:	3301      	adds	r3, #1
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	b21a      	sxth	r2, r3
 8006e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e30:	3302      	adds	r3, #2
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	b21b      	sxth	r3, r3
 8006e36:	021b      	lsls	r3, r3, #8
 8006e38:	b21b      	sxth	r3, r3
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	b21b      	sxth	r3, r3
 8006e3e:	86bb      	strh	r3, [r7, #52]	@ 0x34
	uint16_t y0 = accel[3] | (accel[4] << 8);
 8006e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e42:	3303      	adds	r3, #3
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	b21a      	sxth	r2, r3
 8006e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4a:	3304      	adds	r3, #4
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	b21b      	sxth	r3, r3
 8006e50:	021b      	lsls	r3, r3, #8
 8006e52:	b21b      	sxth	r3, r3
 8006e54:	4313      	orrs	r3, r2
 8006e56:	b21b      	sxth	r3, r3
 8006e58:	867b      	strh	r3, [r7, #50]	@ 0x32
	uint16_t z0 = accel[5] | (accel[6] << 8);
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5c:	3305      	adds	r3, #5
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	b21a      	sxth	r2, r3
 8006e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e64:	3306      	adds	r3, #6
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	b21b      	sxth	r3, r3
 8006e6a:	021b      	lsls	r3, r3, #8
 8006e6c:	b21b      	sxth	r3, r3
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	b21b      	sxth	r3, r3
 8006e72:	863b      	strh	r3, [r7, #48]	@ 0x30
	acc_x_state.previous_value = x0;
 8006e74:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8006e78:	833b      	strh	r3, [r7, #24]
	acc_y_state.previous_value = y0;
 8006e7a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8006e7e:	82bb      	strh	r3, [r7, #20]
	acc_z_state.previous_value = z0;
 8006e80:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8006e84:	823b      	strh	r3, [r7, #16]
	for(int k=0; k<7; ++k) output[out_idx++] = accel[k];
 8006e86:	2300      	movs	r3, #0
 8006e88:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e8a:	e00f      	b.n	8006eac <Compress_Sample+0x300>
 8006e8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e90:	441a      	add	r2, r3
 8006e92:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006e96:	1c59      	adds	r1, r3, #1
 8006e98:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	440b      	add	r3, r1
 8006ea2:	7812      	ldrb	r2, [r2, #0]
 8006ea4:	701a      	strb	r2, [r3, #0]
 8006ea6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	653b      	str	r3, [r7, #80]	@ 0x50
 8006eac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006eae:	2b06      	cmp	r3, #6
 8006eb0:	ddec      	ble.n	8006e8c <Compress_Sample+0x2e0>
	for (int i = 1; i < ACC_FIFO_WATERMARK; i++) 
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006eb6:	e087      	b.n	8006fc8 <Compress_Sample+0x41c>
 8006eb8:	080181e4 	.word	0x080181e4
	{
		uint16_t x = accel[i*7+1] | (accel[i*7+2] << 8);
 8006ebc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	00db      	lsls	r3, r3, #3
 8006ec2:	1a9b      	subs	r3, r3, r2
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ec8:	4413      	add	r3, r2
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	b219      	sxth	r1, r3
 8006ece:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	00db      	lsls	r3, r3, #3
 8006ed4:	1a9b      	subs	r3, r3, r2
 8006ed6:	3302      	adds	r3, #2
 8006ed8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006eda:	4413      	add	r3, r2
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	b21b      	sxth	r3, r3
 8006ee0:	021b      	lsls	r3, r3, #8
 8006ee2:	b21b      	sxth	r3, r3
 8006ee4:	430b      	orrs	r3, r1
 8006ee6:	b21b      	sxth	r3, r3
 8006ee8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		uint16_t y = accel[i*7+3] | (accel[i*7+4] << 8);
 8006eea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006eec:	4613      	mov	r3, r2
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	1a9b      	subs	r3, r3, r2
 8006ef2:	3303      	adds	r3, #3
 8006ef4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ef6:	4413      	add	r3, r2
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	b219      	sxth	r1, r3
 8006efc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006efe:	4613      	mov	r3, r2
 8006f00:	00db      	lsls	r3, r3, #3
 8006f02:	1a9b      	subs	r3, r3, r2
 8006f04:	3304      	adds	r3, #4
 8006f06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f08:	4413      	add	r3, r2
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	b21b      	sxth	r3, r3
 8006f0e:	021b      	lsls	r3, r3, #8
 8006f10:	b21b      	sxth	r3, r3
 8006f12:	430b      	orrs	r3, r1
 8006f14:	b21b      	sxth	r3, r3
 8006f16:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		uint16_t z = accel[i*7+5] | (accel[i*7+6] << 8);
 8006f18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	00db      	lsls	r3, r3, #3
 8006f1e:	1a9b      	subs	r3, r3, r2
 8006f20:	3305      	adds	r3, #5
 8006f22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f24:	4413      	add	r3, r2
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	b219      	sxth	r1, r3
 8006f2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	00db      	lsls	r3, r3, #3
 8006f30:	1a9b      	subs	r3, r3, r2
 8006f32:	3306      	adds	r3, #6
 8006f34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f36:	4413      	add	r3, r2
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	b21b      	sxth	r3, r3
 8006f3c:	021b      	lsls	r3, r3, #8
 8006f3e:	b21b      	sxth	r3, r3
 8006f40:	430b      	orrs	r3, r1
 8006f42:	b21b      	sxth	r3, r3
 8006f44:	857b      	strh	r3, [r7, #42]	@ 0x2a
		uint8_t nibble_x = ADPCM_Compression(x, &acc_x_state, step_size_table_16bit);
 8006f46:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8006f4a:	f107 0118 	add.w	r1, r7, #24
 8006f4e:	4a29      	ldr	r2, [pc, #164]	@ (8006ff4 <Compress_Sample+0x448>)
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 f851 	bl	8006ff8 <ADPCM_Compression>
 8006f56:	4603      	mov	r3, r0
 8006f58:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		uint8_t nibble_y = ADPCM_Compression(y, &acc_y_state, step_size_table_16bit);
 8006f5c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8006f60:	f107 0114 	add.w	r1, r7, #20
 8006f64:	4a23      	ldr	r2, [pc, #140]	@ (8006ff4 <Compress_Sample+0x448>)
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 f846 	bl	8006ff8 <ADPCM_Compression>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		uint8_t nibble_z = ADPCM_Compression(z, &acc_z_state, step_size_table_16bit);
 8006f72:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8006f76:	f107 0110 	add.w	r1, r7, #16
 8006f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8006ff4 <Compress_Sample+0x448>)
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f000 f83b 	bl	8006ff8 <ADPCM_Compression>
 8006f82:	4603      	mov	r3, r0
 8006f84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		output[out_idx++] = nibble_x | (nibble_y << 4);
 8006f88:	f997 3028 	ldrsb.w	r3, [r7, #40]	@ 0x28
 8006f8c:	011b      	lsls	r3, r3, #4
 8006f8e:	b25a      	sxtb	r2, r3
 8006f90:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 8006f94:	4313      	orrs	r3, r2
 8006f96:	b25a      	sxtb	r2, r3
 8006f98:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006f9c:	1c59      	adds	r1, r3, #1
 8006f9e:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	440b      	add	r3, r1
 8006fa8:	b2d2      	uxtb	r2, r2
 8006faa:	701a      	strb	r2, [r3, #0]
		output[out_idx++] = nibble_z;
 8006fac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006fb0:	1c5a      	adds	r2, r3, #1
 8006fb2:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006fc0:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < ACC_FIFO_WATERMARK; i++) 
 8006fc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fca:	2bc7      	cmp	r3, #199	@ 0xc7
 8006fcc:	f77f af76 	ble.w	8006ebc <Compress_Sample+0x310>
	}
	sizes.acceleration_size = out_idx - accel_start;
 8006fd0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8006fd4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	84bb      	strh	r3, [r7, #36]	@ 0x24

	return sizes;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f107 0320 	add.w	r3, r7, #32
 8006fe4:	6818      	ldr	r0, [r3, #0]
 8006fe6:	6010      	str	r0, [r2, #0]
 8006fe8:	889b      	ldrh	r3, [r3, #4]
 8006fea:	8093      	strh	r3, [r2, #4]
}
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	3768      	adds	r7, #104	@ 0x68
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	08018134 	.word	0x08018134

08006ff8 <ADPCM_Compression>:

/*-----FUNZIONE DI COMPRESSIONE ADPCM-----*/
uint8_t ADPCM_Compression(int16_t sample, AdpcmState_Typedef* state, const uint16_t* step_size_table) 
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b089      	sub	sp, #36	@ 0x24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	4603      	mov	r3, r0
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
 8007004:	81fb      	strh	r3, [r7, #14]
    int32_t diff = (int32_t)sample - state->previous_value;
 8007006:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8007010:	1a9b      	subs	r3, r3, r2
 8007012:	61fb      	str	r3, [r7, #28]
    uint16_t step = step_size_table[state->step_index];
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800701a:	005b      	lsls	r3, r3, #1
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	4413      	add	r3, r2
 8007020:	881b      	ldrh	r3, [r3, #0]
 8007022:	837b      	strh	r3, [r7, #26]
    uint8_t nibble = 0;
 8007024:	2300      	movs	r3, #0
 8007026:	767b      	strb	r3, [r7, #25]

    if (diff < 0) 
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	2b00      	cmp	r3, #0
 800702c:	da04      	bge.n	8007038 <ADPCM_Compression+0x40>
	{
        nibble = 8; // Bit di segno
 800702e:	2308      	movs	r3, #8
 8007030:	767b      	strb	r3, [r7, #25]
        diff = -diff;
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	425b      	negs	r3, r3
 8007036:	61fb      	str	r3, [r7, #28]
    }

	if (step == 0) step = 1;
 8007038:	8b7b      	ldrh	r3, [r7, #26]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <ADPCM_Compression+0x4a>
 800703e:	2301      	movs	r3, #1
 8007040:	837b      	strh	r3, [r7, #26]
    // Calcola il nibble quantizzato
    uint32_t temp = (uint32_t)diff * 4;
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	613b      	str	r3, [r7, #16]
    if (temp < step) 
 8007048:	8b7b      	ldrh	r3, [r7, #26]
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	429a      	cmp	r2, r3
 800704e:	d311      	bcc.n	8007074 <ADPCM_Compression+0x7c>
	{
        nibble |= 0;
    } 
	else 
	{
        nibble |= (uint8_t)((temp / step > 7) ? 7 : (temp / step));
 8007050:	8b7b      	ldrh	r3, [r7, #26]
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	fbb2 f3f3 	udiv	r3, r2, r3
 8007058:	2b07      	cmp	r3, #7
 800705a:	d805      	bhi.n	8007068 <ADPCM_Compression+0x70>
 800705c:	8b7b      	ldrh	r3, [r7, #26]
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	fbb2 f3f3 	udiv	r3, r2, r3
 8007064:	b25b      	sxtb	r3, r3
 8007066:	e000      	b.n	800706a <ADPCM_Compression+0x72>
 8007068:	2307      	movs	r3, #7
 800706a:	f997 2019 	ldrsb.w	r2, [r7, #25]
 800706e:	4313      	orrs	r3, r2
 8007070:	b25b      	sxtb	r3, r3
 8007072:	767b      	strb	r3, [r7, #25]
    }

    // Ricostruisci il valore per la predizione successiva (usando solo il nibble)
    int32_t reconstructed_diff = (step * (nibble & 7)) / 4 + step / 8;
 8007074:	8b7b      	ldrh	r3, [r7, #26]
 8007076:	7e7a      	ldrb	r2, [r7, #25]
 8007078:	f002 0207 	and.w	r2, r2, #7
 800707c:	fb02 f303 	mul.w	r3, r2, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	da00      	bge.n	8007086 <ADPCM_Compression+0x8e>
 8007084:	3303      	adds	r3, #3
 8007086:	109b      	asrs	r3, r3, #2
 8007088:	461a      	mov	r2, r3
 800708a:	8b7b      	ldrh	r3, [r7, #26]
 800708c:	08db      	lsrs	r3, r3, #3
 800708e:	b29b      	uxth	r3, r3
 8007090:	4413      	add	r3, r2
 8007092:	617b      	str	r3, [r7, #20]
    if (nibble & 8) {
 8007094:	7e7b      	ldrb	r3, [r7, #25]
 8007096:	f003 0308 	and.w	r3, r3, #8
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <ADPCM_Compression+0xac>
        reconstructed_diff = -reconstructed_diff;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	425b      	negs	r3, r3
 80070a2:	617b      	str	r3, [r7, #20]
    }
    
    state->previous_value += reconstructed_diff;
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	4413      	add	r3, r2
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	b21a      	sxth	r2, r3
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	801a      	strh	r2, [r3, #0]

    // CLAMP DINAMICO BASATO SULLA LUT
    if (step_size_table == step_size_table_12bit) 
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a1d      	ldr	r2, [pc, #116]	@ (8007134 <ADPCM_Compression+0x13c>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d111      	bne.n	80070e6 <ADPCM_Compression+0xee>
    {
        // Dati 12-bit ADC: unsigned 0-4095
        if (state->previous_value > 4095) state->previous_value = 4095;
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070cc:	db03      	blt.n	80070d6 <ADPCM_Compression+0xde>
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80070d4:	801a      	strh	r2, [r3, #0]
        if (state->previous_value < 0) state->previous_value = 0;
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	da02      	bge.n	80070e6 <ADPCM_Compression+0xee>
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2200      	movs	r2, #0
 80070e4:	801a      	strh	r2, [r3, #0]
        if (state->previous_value > 32767) state->previous_value = 32767;
        if (state->previous_value < -32768) state->previous_value = -32768;
    }

    // Aggiorna l'indice dello step
    state->step_index += index_adjustment_table[nibble & 7];
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	7e7b      	ldrb	r3, [r7, #25]
 80070f0:	f003 0307 	and.w	r3, r3, #7
 80070f4:	4910      	ldr	r1, [pc, #64]	@ (8007138 <ADPCM_Compression+0x140>)
 80070f6:	56cb      	ldrsb	r3, [r1, r3]
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	4413      	add	r3, r2
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	b25a      	sxtb	r2, r3
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	709a      	strb	r2, [r3, #2]
    if (state->step_index < 0) state->step_index = 0;
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800710a:	2b00      	cmp	r3, #0
 800710c:	da02      	bge.n	8007114 <ADPCM_Compression+0x11c>
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	2200      	movs	r2, #0
 8007112:	709a      	strb	r2, [r3, #2]
    if (state->step_index > 87) state->step_index = 87;
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800711a:	2b57      	cmp	r3, #87	@ 0x57
 800711c:	dd02      	ble.n	8007124 <ADPCM_Compression+0x12c>
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2257      	movs	r2, #87	@ 0x57
 8007122:	709a      	strb	r2, [r3, #2]

    return nibble;
 8007124:	7e7b      	ldrb	r3, [r7, #25]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3724      	adds	r7, #36	@ 0x24
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	080181e4 	.word	0x080181e4
 8007138:	08018294 	.word	0x08018294

0800713c <Apply_Config>:


/*-----APPLICA VALORI CONFIGURAZIONE-----*/
void Apply_Config(void)
{
 800713c:	b590      	push	{r4, r7, lr}
 800713e:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
	FIL config_file;
	UINT bytes_written;
	
	if(strcmp(cfg_var, "DEVICE_ID") == 0) 
 8007146:	49ad      	ldr	r1, [pc, #692]	@ (80073fc <Apply_Config+0x2c0>)
 8007148:	48ad      	ldr	r0, [pc, #692]	@ (8007400 <Apply_Config+0x2c4>)
 800714a:	f7f9 f841 	bl	80001d0 <strcmp>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d107      	bne.n	8007164 <Apply_Config+0x28>
	{
		config.device_id = (uint8_t)atoi(new_cfg_val);
 8007154:	48ab      	ldr	r0, [pc, #684]	@ (8007404 <Apply_Config+0x2c8>)
 8007156:	f00f fb59 	bl	801680c <atoi>
 800715a:	4603      	mov	r3, r0
 800715c:	b2da      	uxtb	r2, r3
 800715e:	4baa      	ldr	r3, [pc, #680]	@ (8007408 <Apply_Config+0x2cc>)
 8007160:	701a      	strb	r2, [r3, #0]
 8007162:	e119      	b.n	8007398 <Apply_Config+0x25c>
    }
	else if(strcmp(cfg_var, "SAMP_FREQ") == 0)
 8007164:	49a9      	ldr	r1, [pc, #676]	@ (800740c <Apply_Config+0x2d0>)
 8007166:	48a6      	ldr	r0, [pc, #664]	@ (8007400 <Apply_Config+0x2c4>)
 8007168:	f7f9 f832 	bl	80001d0 <strcmp>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d132      	bne.n	80071d8 <Apply_Config+0x9c>
	{
		if((uint16_t)atoi(new_cfg_val) != 800 && (uint16_t)atoi(new_cfg_val) != 1600)
 8007172:	48a4      	ldr	r0, [pc, #656]	@ (8007404 <Apply_Config+0x2c8>)
 8007174:	f00f fb4a 	bl	801680c <atoi>
 8007178:	4603      	mov	r3, r0
 800717a:	b29b      	uxth	r3, r3
 800717c:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8007180:	d008      	beq.n	8007194 <Apply_Config+0x58>
 8007182:	48a0      	ldr	r0, [pc, #640]	@ (8007404 <Apply_Config+0x2c8>)
 8007184:	f00f fb42 	bl	801680c <atoi>
 8007188:	4603      	mov	r3, r0
 800718a:	b29b      	uxth	r3, r3
 800718c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007190:	f040 8132 	bne.w	80073f8 <Apply_Config+0x2bc>
		{
			return;
		}
		else
		{
			if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 8007194:	4b9c      	ldr	r3, [pc, #624]	@ (8007408 <Apply_Config+0x2cc>)
 8007196:	885b      	ldrh	r3, [r3, #2]
 8007198:	4a9d      	ldr	r2, [pc, #628]	@ (8007410 <Apply_Config+0x2d4>)
 800719a:	fba2 2303 	umull	r2, r3, r2, r3
 800719e:	099b      	lsrs	r3, r3, #6
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	461a      	mov	r2, r3
 80071a4:	4b98      	ldr	r3, [pc, #608]	@ (8007408 <Apply_Config+0x2cc>)
 80071a6:	791b      	ldrb	r3, [r3, #4]
 80071a8:	fb02 f303 	mul.w	r3, r2, r3
 80071ac:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80071b0:	fb02 f303 	mul.w	r3, r2, r3
 80071b4:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	461c      	mov	r4, r3
 80071bc:	f000 fcee 	bl	8007b9c <psram_get_size>
 80071c0:	4603      	mov	r3, r0
 80071c2:	429c      	cmp	r4, r3
 80071c4:	f240 80e8 	bls.w	8007398 <Apply_Config+0x25c>
			{
				config.samp_freq = (uint16_t)atoi(new_cfg_val);
 80071c8:	488e      	ldr	r0, [pc, #568]	@ (8007404 <Apply_Config+0x2c8>)
 80071ca:	f00f fb1f 	bl	801680c <atoi>
 80071ce:	4603      	mov	r3, r0
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	4b8d      	ldr	r3, [pc, #564]	@ (8007408 <Apply_Config+0x2cc>)
 80071d4:	805a      	strh	r2, [r3, #2]
 80071d6:	e0df      	b.n	8007398 <Apply_Config+0x25c>
			}
		}
	}
	else if(strcmp(cfg_var, "BUFFER_SECS") == 0)
 80071d8:	498e      	ldr	r1, [pc, #568]	@ (8007414 <Apply_Config+0x2d8>)
 80071da:	4889      	ldr	r0, [pc, #548]	@ (8007400 <Apply_Config+0x2c4>)
 80071dc:	f7f8 fff8 	bl	80001d0 <strcmp>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d131      	bne.n	800724a <Apply_Config+0x10e>
	{
		if((uint8_t)atoi(new_cfg_val) < 5 || (uint8_t)atoi(new_cfg_val) > 30)
 80071e6:	4887      	ldr	r0, [pc, #540]	@ (8007404 <Apply_Config+0x2c8>)
 80071e8:	f00f fb10 	bl	801680c <atoi>
 80071ec:	4603      	mov	r3, r0
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b04      	cmp	r3, #4
 80071f2:	f240 8135 	bls.w	8007460 <Apply_Config+0x324>
 80071f6:	4883      	ldr	r0, [pc, #524]	@ (8007404 <Apply_Config+0x2c8>)
 80071f8:	f00f fb08 	bl	801680c <atoi>
 80071fc:	4603      	mov	r3, r0
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b1e      	cmp	r3, #30
 8007202:	f200 812d 	bhi.w	8007460 <Apply_Config+0x324>
		{
			return;
		}
		else
		{
			if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 8007206:	4b80      	ldr	r3, [pc, #512]	@ (8007408 <Apply_Config+0x2cc>)
 8007208:	885b      	ldrh	r3, [r3, #2]
 800720a:	4a81      	ldr	r2, [pc, #516]	@ (8007410 <Apply_Config+0x2d4>)
 800720c:	fba2 2303 	umull	r2, r3, r2, r3
 8007210:	099b      	lsrs	r3, r3, #6
 8007212:	b29b      	uxth	r3, r3
 8007214:	461a      	mov	r2, r3
 8007216:	4b7c      	ldr	r3, [pc, #496]	@ (8007408 <Apply_Config+0x2cc>)
 8007218:	791b      	ldrb	r3, [r3, #4]
 800721a:	fb02 f303 	mul.w	r3, r2, r3
 800721e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8007222:	fb02 f303 	mul.w	r3, r2, r3
 8007226:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 800722a:	005b      	lsls	r3, r3, #1
 800722c:	461c      	mov	r4, r3
 800722e:	f000 fcb5 	bl	8007b9c <psram_get_size>
 8007232:	4603      	mov	r3, r0
 8007234:	429c      	cmp	r4, r3
 8007236:	f240 80af 	bls.w	8007398 <Apply_Config+0x25c>
			{
				config.buffering_secs = (uint8_t)atoi(new_cfg_val);
 800723a:	4872      	ldr	r0, [pc, #456]	@ (8007404 <Apply_Config+0x2c8>)
 800723c:	f00f fae6 	bl	801680c <atoi>
 8007240:	4603      	mov	r3, r0
 8007242:	b2da      	uxtb	r2, r3
 8007244:	4b70      	ldr	r3, [pc, #448]	@ (8007408 <Apply_Config+0x2cc>)
 8007246:	711a      	strb	r2, [r3, #4]
 8007248:	e0a6      	b.n	8007398 <Apply_Config+0x25c>
			}
		}
	}
	else if(strcmp(cfg_var, "CONN_TIMEOUT") == 0)
 800724a:	4973      	ldr	r1, [pc, #460]	@ (8007418 <Apply_Config+0x2dc>)
 800724c:	486c      	ldr	r0, [pc, #432]	@ (8007400 <Apply_Config+0x2c4>)
 800724e:	f7f8 ffbf 	bl	80001d0 <strcmp>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d107      	bne.n	8007268 <Apply_Config+0x12c>
	{
		config.connection_timeout_ms = (uint32_t)atoi(new_cfg_val);
 8007258:	486a      	ldr	r0, [pc, #424]	@ (8007404 <Apply_Config+0x2c8>)
 800725a:	f00f fad7 	bl	801680c <atoi>
 800725e:	4603      	mov	r3, r0
 8007260:	461a      	mov	r2, r3
 8007262:	4b69      	ldr	r3, [pc, #420]	@ (8007408 <Apply_Config+0x2cc>)
 8007264:	609a      	str	r2, [r3, #8]
 8007266:	e097      	b.n	8007398 <Apply_Config+0x25c>
	}
	else if(strcmp(cfg_var, "LOG_PERIOD") == 0)
 8007268:	496c      	ldr	r1, [pc, #432]	@ (800741c <Apply_Config+0x2e0>)
 800726a:	4865      	ldr	r0, [pc, #404]	@ (8007400 <Apply_Config+0x2c4>)
 800726c:	f7f8 ffb0 	bl	80001d0 <strcmp>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d107      	bne.n	8007286 <Apply_Config+0x14a>
	{
		config.log_period_ms = (uint32_t)atoi(new_cfg_val);
 8007276:	4863      	ldr	r0, [pc, #396]	@ (8007404 <Apply_Config+0x2c8>)
 8007278:	f00f fac8 	bl	801680c <atoi>
 800727c:	4603      	mov	r3, r0
 800727e:	461a      	mov	r2, r3
 8007280:	4b61      	ldr	r3, [pc, #388]	@ (8007408 <Apply_Config+0x2cc>)
 8007282:	60da      	str	r2, [r3, #12]
 8007284:	e088      	b.n	8007398 <Apply_Config+0x25c>
	}
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 8007286:	4966      	ldr	r1, [pc, #408]	@ (8007420 <Apply_Config+0x2e4>)
 8007288:	485d      	ldr	r0, [pc, #372]	@ (8007400 <Apply_Config+0x2c4>)
 800728a:	f7f8 ffa1 	bl	80001d0 <strcmp>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d107      	bne.n	80072a4 <Apply_Config+0x168>
	{
		config.hammer_th = (uint16_t)atoi(new_cfg_val);
 8007294:	485b      	ldr	r0, [pc, #364]	@ (8007404 <Apply_Config+0x2c8>)
 8007296:	f00f fab9 	bl	801680c <atoi>
 800729a:	4603      	mov	r3, r0
 800729c:	b29a      	uxth	r2, r3
 800729e:	4b5a      	ldr	r3, [pc, #360]	@ (8007408 <Apply_Config+0x2cc>)
 80072a0:	821a      	strh	r2, [r3, #16]
 80072a2:	e079      	b.n	8007398 <Apply_Config+0x25c>
	}
    else if(strcmp(cfg_var, "HIGH_TH") == 0) 
 80072a4:	495f      	ldr	r1, [pc, #380]	@ (8007424 <Apply_Config+0x2e8>)
 80072a6:	4856      	ldr	r0, [pc, #344]	@ (8007400 <Apply_Config+0x2c4>)
 80072a8:	f7f8 ff92 	bl	80001d0 <strcmp>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d119      	bne.n	80072e6 <Apply_Config+0x1aa>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 80072b2:	4b5d      	ldr	r3, [pc, #372]	@ (8007428 <Apply_Config+0x2ec>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	db11      	blt.n	80072de <Apply_Config+0x1a2>
 80072ba:	4b5b      	ldr	r3, [pc, #364]	@ (8007428 <Apply_Config+0x2ec>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b17      	cmp	r3, #23
 80072c0:	dc0d      	bgt.n	80072de <Apply_Config+0x1a2>
		{
            config.high_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 80072c2:	4850      	ldr	r0, [pc, #320]	@ (8007404 <Apply_Config+0x2c8>)
 80072c4:	f00f faa2 	bl	801680c <atoi>
 80072c8:	4602      	mov	r2, r0
 80072ca:	4b57      	ldr	r3, [pc, #348]	@ (8007428 <Apply_Config+0x2ec>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	b291      	uxth	r1, r2
 80072d0:	4a4d      	ldr	r2, [pc, #308]	@ (8007408 <Apply_Config+0x2cc>)
 80072d2:	3320      	adds	r3, #32
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	4413      	add	r3, r2
 80072d8:	460a      	mov	r2, r1
 80072da:	805a      	strh	r2, [r3, #2]
 80072dc:	e05c      	b.n	8007398 <Apply_Config+0x25c>
        }
		else
		{
			SIM_Send_TCP("R:ERR");
 80072de:	4853      	ldr	r0, [pc, #332]	@ (800742c <Apply_Config+0x2f0>)
 80072e0:	f7fb f856 	bl	8002390 <SIM_Send_TCP>
			return;
 80072e4:	e0bd      	b.n	8007462 <Apply_Config+0x326>
		}
    }
    else if(strcmp(cfg_var, "LOW_TH") == 0) 
 80072e6:	4952      	ldr	r1, [pc, #328]	@ (8007430 <Apply_Config+0x2f4>)
 80072e8:	4845      	ldr	r0, [pc, #276]	@ (8007400 <Apply_Config+0x2c4>)
 80072ea:	f7f8 ff71 	bl	80001d0 <strcmp>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d119      	bne.n	8007328 <Apply_Config+0x1ec>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 80072f4:	4b4c      	ldr	r3, [pc, #304]	@ (8007428 <Apply_Config+0x2ec>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	db11      	blt.n	8007320 <Apply_Config+0x1e4>
 80072fc:	4b4a      	ldr	r3, [pc, #296]	@ (8007428 <Apply_Config+0x2ec>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b17      	cmp	r3, #23
 8007302:	dc0d      	bgt.n	8007320 <Apply_Config+0x1e4>
		{
            config.low_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 8007304:	483f      	ldr	r0, [pc, #252]	@ (8007404 <Apply_Config+0x2c8>)
 8007306:	f00f fa81 	bl	801680c <atoi>
 800730a:	4602      	mov	r2, r0
 800730c:	4b46      	ldr	r3, [pc, #280]	@ (8007428 <Apply_Config+0x2ec>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	b291      	uxth	r1, r2
 8007312:	4a3d      	ldr	r2, [pc, #244]	@ (8007408 <Apply_Config+0x2cc>)
 8007314:	3308      	adds	r3, #8
 8007316:	005b      	lsls	r3, r3, #1
 8007318:	4413      	add	r3, r2
 800731a:	460a      	mov	r2, r1
 800731c:	805a      	strh	r2, [r3, #2]
 800731e:	e03b      	b.n	8007398 <Apply_Config+0x25c>
        }
		else
		{
			SIM_Send_TCP("R:ERR");
 8007320:	4842      	ldr	r0, [pc, #264]	@ (800742c <Apply_Config+0x2f0>)
 8007322:	f7fb f835 	bl	8002390 <SIM_Send_TCP>
			return;
 8007326:	e09c      	b.n	8007462 <Apply_Config+0x326>
		}
    }
    else if(strcmp(cfg_var, "TCP_IP") == 0)
 8007328:	4942      	ldr	r1, [pc, #264]	@ (8007434 <Apply_Config+0x2f8>)
 800732a:	4835      	ldr	r0, [pc, #212]	@ (8007400 <Apply_Config+0x2c4>)
 800732c:	f7f8 ff50 	bl	80001d0 <strcmp>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d112      	bne.n	800735c <Apply_Config+0x220>
	{
        strncpy(config.tcp_IPaddress, new_cfg_val, sizeof(config.tcp_IPaddress) - 1);
 8007336:	223f      	movs	r2, #63	@ 0x3f
 8007338:	4932      	ldr	r1, [pc, #200]	@ (8007404 <Apply_Config+0x2c8>)
 800733a:	483f      	ldr	r0, [pc, #252]	@ (8007438 <Apply_Config+0x2fc>)
 800733c:	f00f fb77 	bl	8016a2e <strncpy>
        config.tcp_IPaddress[sizeof(config.tcp_IPaddress) - 1] = '\0';
 8007340:	4b31      	ldr	r3, [pc, #196]	@ (8007408 <Apply_Config+0x2cc>)
 8007342:	2200      	movs	r2, #0
 8007344:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
		strcpy(sys.TCP.IP_address, config.tcp_IPaddress);
 8007348:	493b      	ldr	r1, [pc, #236]	@ (8007438 <Apply_Config+0x2fc>)
 800734a:	483c      	ldr	r0, [pc, #240]	@ (800743c <Apply_Config+0x300>)
 800734c:	f00f fbc4 	bl	8016ad8 <strcpy>
		flags.TCP_Parameter_Changed = 1;
 8007350:	4a3b      	ldr	r2, [pc, #236]	@ (8007440 <Apply_Config+0x304>)
 8007352:	7853      	ldrb	r3, [r2, #1]
 8007354:	f043 0320 	orr.w	r3, r3, #32
 8007358:	7053      	strb	r3, [r2, #1]
 800735a:	e01d      	b.n	8007398 <Apply_Config+0x25c>
    }
    else if(strcmp(cfg_var, "TCP_PORT") == 0)
 800735c:	4939      	ldr	r1, [pc, #228]	@ (8007444 <Apply_Config+0x308>)
 800735e:	4828      	ldr	r0, [pc, #160]	@ (8007400 <Apply_Config+0x2c4>)
 8007360:	f7f8 ff36 	bl	80001d0 <strcmp>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d112      	bne.n	8007390 <Apply_Config+0x254>
	{
        strncpy(config.tcp_Port, new_cfg_val, sizeof(config.tcp_Port) - 1);
 800736a:	223f      	movs	r2, #63	@ 0x3f
 800736c:	4925      	ldr	r1, [pc, #148]	@ (8007404 <Apply_Config+0x2c8>)
 800736e:	4836      	ldr	r0, [pc, #216]	@ (8007448 <Apply_Config+0x30c>)
 8007370:	f00f fb5d 	bl	8016a2e <strncpy>
        config.tcp_Port[sizeof(config.tcp_Port) - 1] = '\0';
 8007374:	4b24      	ldr	r3, [pc, #144]	@ (8007408 <Apply_Config+0x2cc>)
 8007376:	2200      	movs	r2, #0
 8007378:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
		strcpy(sys.TCP.Port, config.tcp_Port);
 800737c:	4932      	ldr	r1, [pc, #200]	@ (8007448 <Apply_Config+0x30c>)
 800737e:	4833      	ldr	r0, [pc, #204]	@ (800744c <Apply_Config+0x310>)
 8007380:	f00f fbaa 	bl	8016ad8 <strcpy>
		flags.TCP_Parameter_Changed = 1;
 8007384:	4a2e      	ldr	r2, [pc, #184]	@ (8007440 <Apply_Config+0x304>)
 8007386:	7853      	ldrb	r3, [r2, #1]
 8007388:	f043 0320 	orr.w	r3, r3, #32
 800738c:	7053      	strb	r3, [r2, #1]
 800738e:	e003      	b.n	8007398 <Apply_Config+0x25c>
    }
	else
	{
		SIM_Send_TCP("R:VAR_ERR");
 8007390:	482f      	ldr	r0, [pc, #188]	@ (8007450 <Apply_Config+0x314>)
 8007392:	f7fa fffd 	bl	8002390 <SIM_Send_TCP>
		return;
 8007396:	e064      	b.n	8007462 <Apply_Config+0x326>
	}

	if (f_open(&config_file, CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) == FR_OK)
 8007398:	f107 0310 	add.w	r3, r7, #16
 800739c:	3b08      	subs	r3, #8
 800739e:	220a      	movs	r2, #10
 80073a0:	492c      	ldr	r1, [pc, #176]	@ (8007454 <Apply_Config+0x318>)
 80073a2:	4618      	mov	r0, r3
 80073a4:	f002 ff3a 	bl	800a21c <f_open>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d120      	bne.n	80073f0 <Apply_Config+0x2b4>
	{
		f_write(&config_file, &config, sizeof(config), &bytes_written);
 80073ae:	f107 0310 	add.w	r3, r7, #16
 80073b2:	3b0c      	subs	r3, #12
 80073b4:	f107 0010 	add.w	r0, r7, #16
 80073b8:	3808      	subs	r0, #8
 80073ba:	22f4      	movs	r2, #244	@ 0xf4
 80073bc:	4912      	ldr	r1, [pc, #72]	@ (8007408 <Apply_Config+0x2cc>)
 80073be:	f003 fa18 	bl	800a7f2 <f_write>
		f_close(&config_file);
 80073c2:	f107 0310 	add.w	r3, r7, #16
 80073c6:	3b08      	subs	r3, #8
 80073c8:	4618      	mov	r0, r3
 80073ca:	f003 fc1b 	bl	800ac04 <f_close>
	{
		SIM_Send_TCP("R:SAV_ERR");
		return;
	}
	
	memset(cfg_var, 0, sizeof(cfg_var));
 80073ce:	2214      	movs	r2, #20
 80073d0:	2100      	movs	r1, #0
 80073d2:	480b      	ldr	r0, [pc, #44]	@ (8007400 <Apply_Config+0x2c4>)
 80073d4:	f00f fb04 	bl	80169e0 <memset>
	cfg_idx = 0;
 80073d8:	4b13      	ldr	r3, [pc, #76]	@ (8007428 <Apply_Config+0x2ec>)
 80073da:	2200      	movs	r2, #0
 80073dc:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 80073de:	220a      	movs	r2, #10
 80073e0:	2100      	movs	r1, #0
 80073e2:	4808      	ldr	r0, [pc, #32]	@ (8007404 <Apply_Config+0x2c8>)
 80073e4:	f00f fafc 	bl	80169e0 <memset>
	SIM_Send_TCP("R:OK");
 80073e8:	481b      	ldr	r0, [pc, #108]	@ (8007458 <Apply_Config+0x31c>)
 80073ea:	f7fa ffd1 	bl	8002390 <SIM_Send_TCP>
 80073ee:	e038      	b.n	8007462 <Apply_Config+0x326>
		SIM_Send_TCP("R:SAV_ERR");
 80073f0:	481a      	ldr	r0, [pc, #104]	@ (800745c <Apply_Config+0x320>)
 80073f2:	f7fa ffcd 	bl	8002390 <SIM_Send_TCP>
		return;
 80073f6:	e034      	b.n	8007462 <Apply_Config+0x326>
			return;
 80073f8:	bf00      	nop
 80073fa:	e032      	b.n	8007462 <Apply_Config+0x326>
 80073fc:	08018008 	.word	0x08018008
 8007400:	20005764 	.word	0x20005764
 8007404:	2000577c 	.word	0x2000577c
 8007408:	20001784 	.word	0x20001784
 800740c:	08018014 	.word	0x08018014
 8007410:	51eb851f 	.word	0x51eb851f
 8007414:	08018020 	.word	0x08018020
 8007418:	0801802c 	.word	0x0801802c
 800741c:	0801803c 	.word	0x0801803c
 8007420:	08018048 	.word	0x08018048
 8007424:	08018054 	.word	0x08018054
 8007428:	20005778 	.word	0x20005778
 800742c:	0801805c 	.word	0x0801805c
 8007430:	08018064 	.word	0x08018064
 8007434:	0801806c 	.word	0x0801806c
 8007438:	200017f6 	.word	0x200017f6
 800743c:	200016b8 	.word	0x200016b8
 8007440:	20001780 	.word	0x20001780
 8007444:	08018074 	.word	0x08018074
 8007448:	20001836 	.word	0x20001836
 800744c:	2000171c 	.word	0x2000171c
 8007450:	08018080 	.word	0x08018080
 8007454:	0801808c 	.word	0x0801808c
 8007458:	080180ac 	.word	0x080180ac
 800745c:	080180a0 	.word	0x080180a0
			return;
 8007460:	bf00      	nop
}
 8007462:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	bd90      	pop	{r4, r7, pc}

0800746c <Get_Config>:

/*-----RECUPERO E INVIO VALORE DI CONFIGURAZIONE-----*/
void Get_Config(void)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b0a0      	sub	sp, #128	@ 0x80
 8007470:	af00      	add	r7, sp, #0
	char value_str[128] = {0};
 8007472:	463b      	mov	r3, r7
 8007474:	2280      	movs	r2, #128	@ 0x80
 8007476:	2100      	movs	r1, #0
 8007478:	4618      	mov	r0, r3
 800747a:	f00f fab1 	bl	80169e0 <memset>

	if(strcmp(cfg_var, "DEVICE_ID") == 0)
 800747e:	4967      	ldr	r1, [pc, #412]	@ (800761c <Get_Config+0x1b0>)
 8007480:	4867      	ldr	r0, [pc, #412]	@ (8007620 <Get_Config+0x1b4>)
 8007482:	f7f8 fea5 	bl	80001d0 <strcmp>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d108      	bne.n	800749e <Get_Config+0x32>
	{
		sprintf(value_str, "R:%u", config.device_id);
 800748c:	4b65      	ldr	r3, [pc, #404]	@ (8007624 <Get_Config+0x1b8>)
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	461a      	mov	r2, r3
 8007492:	463b      	mov	r3, r7
 8007494:	4964      	ldr	r1, [pc, #400]	@ (8007628 <Get_Config+0x1bc>)
 8007496:	4618      	mov	r0, r3
 8007498:	f00f fa42 	bl	8016920 <siprintf>
 800749c:	e0a9      	b.n	80075f2 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "SAMP_FREQ") == 0)
 800749e:	4963      	ldr	r1, [pc, #396]	@ (800762c <Get_Config+0x1c0>)
 80074a0:	485f      	ldr	r0, [pc, #380]	@ (8007620 <Get_Config+0x1b4>)
 80074a2:	f7f8 fe95 	bl	80001d0 <strcmp>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d108      	bne.n	80074be <Get_Config+0x52>
	{
		sprintf(value_str, "R:%u", config.samp_freq);
 80074ac:	4b5d      	ldr	r3, [pc, #372]	@ (8007624 <Get_Config+0x1b8>)
 80074ae:	885b      	ldrh	r3, [r3, #2]
 80074b0:	461a      	mov	r2, r3
 80074b2:	463b      	mov	r3, r7
 80074b4:	495c      	ldr	r1, [pc, #368]	@ (8007628 <Get_Config+0x1bc>)
 80074b6:	4618      	mov	r0, r3
 80074b8:	f00f fa32 	bl	8016920 <siprintf>
 80074bc:	e099      	b.n	80075f2 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "BUFFER_SECS") == 0)
 80074be:	495c      	ldr	r1, [pc, #368]	@ (8007630 <Get_Config+0x1c4>)
 80074c0:	4857      	ldr	r0, [pc, #348]	@ (8007620 <Get_Config+0x1b4>)
 80074c2:	f7f8 fe85 	bl	80001d0 <strcmp>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d108      	bne.n	80074de <Get_Config+0x72>
	{
		sprintf(value_str, "R:%u", config.buffering_secs);
 80074cc:	4b55      	ldr	r3, [pc, #340]	@ (8007624 <Get_Config+0x1b8>)
 80074ce:	791b      	ldrb	r3, [r3, #4]
 80074d0:	461a      	mov	r2, r3
 80074d2:	463b      	mov	r3, r7
 80074d4:	4954      	ldr	r1, [pc, #336]	@ (8007628 <Get_Config+0x1bc>)
 80074d6:	4618      	mov	r0, r3
 80074d8:	f00f fa22 	bl	8016920 <siprintf>
 80074dc:	e089      	b.n	80075f2 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "CONN_TIMEOUT") == 0)
 80074de:	4955      	ldr	r1, [pc, #340]	@ (8007634 <Get_Config+0x1c8>)
 80074e0:	484f      	ldr	r0, [pc, #316]	@ (8007620 <Get_Config+0x1b4>)
 80074e2:	f7f8 fe75 	bl	80001d0 <strcmp>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d107      	bne.n	80074fc <Get_Config+0x90>
	{
		sprintf(value_str, "R:%lu", config.connection_timeout_ms);
 80074ec:	4b4d      	ldr	r3, [pc, #308]	@ (8007624 <Get_Config+0x1b8>)
 80074ee:	689a      	ldr	r2, [r3, #8]
 80074f0:	463b      	mov	r3, r7
 80074f2:	4951      	ldr	r1, [pc, #324]	@ (8007638 <Get_Config+0x1cc>)
 80074f4:	4618      	mov	r0, r3
 80074f6:	f00f fa13 	bl	8016920 <siprintf>
 80074fa:	e07a      	b.n	80075f2 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "LOG_PERIOD") == 0)
 80074fc:	494f      	ldr	r1, [pc, #316]	@ (800763c <Get_Config+0x1d0>)
 80074fe:	4848      	ldr	r0, [pc, #288]	@ (8007620 <Get_Config+0x1b4>)
 8007500:	f7f8 fe66 	bl	80001d0 <strcmp>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d107      	bne.n	800751a <Get_Config+0xae>
	{
		sprintf(value_str, "R:%lu", config.log_period_ms);
 800750a:	4b46      	ldr	r3, [pc, #280]	@ (8007624 <Get_Config+0x1b8>)
 800750c:	68da      	ldr	r2, [r3, #12]
 800750e:	463b      	mov	r3, r7
 8007510:	4949      	ldr	r1, [pc, #292]	@ (8007638 <Get_Config+0x1cc>)
 8007512:	4618      	mov	r0, r3
 8007514:	f00f fa04 	bl	8016920 <siprintf>
 8007518:	e06b      	b.n	80075f2 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 800751a:	4949      	ldr	r1, [pc, #292]	@ (8007640 <Get_Config+0x1d4>)
 800751c:	4840      	ldr	r0, [pc, #256]	@ (8007620 <Get_Config+0x1b4>)
 800751e:	f7f8 fe57 	bl	80001d0 <strcmp>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d108      	bne.n	800753a <Get_Config+0xce>
	{
		sprintf(value_str, "R:%u", config.hammer_th);
 8007528:	4b3e      	ldr	r3, [pc, #248]	@ (8007624 <Get_Config+0x1b8>)
 800752a:	8a1b      	ldrh	r3, [r3, #16]
 800752c:	461a      	mov	r2, r3
 800752e:	463b      	mov	r3, r7
 8007530:	493d      	ldr	r1, [pc, #244]	@ (8007628 <Get_Config+0x1bc>)
 8007532:	4618      	mov	r0, r3
 8007534:	f00f f9f4 	bl	8016920 <siprintf>
 8007538:	e05b      	b.n	80075f2 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "HIGH_TH") == 0 && cfg_idx >= 0 && cfg_idx < 24)
 800753a:	4942      	ldr	r1, [pc, #264]	@ (8007644 <Get_Config+0x1d8>)
 800753c:	4838      	ldr	r0, [pc, #224]	@ (8007620 <Get_Config+0x1b4>)
 800753e:	f7f8 fe47 	bl	80001d0 <strcmp>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d115      	bne.n	8007574 <Get_Config+0x108>
 8007548:	4b3f      	ldr	r3, [pc, #252]	@ (8007648 <Get_Config+0x1dc>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	db11      	blt.n	8007574 <Get_Config+0x108>
 8007550:	4b3d      	ldr	r3, [pc, #244]	@ (8007648 <Get_Config+0x1dc>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b17      	cmp	r3, #23
 8007556:	dc0d      	bgt.n	8007574 <Get_Config+0x108>
	{
		sprintf(value_str, "R:%u", config.high_th[cfg_idx]);
 8007558:	4b3b      	ldr	r3, [pc, #236]	@ (8007648 <Get_Config+0x1dc>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a31      	ldr	r2, [pc, #196]	@ (8007624 <Get_Config+0x1b8>)
 800755e:	3320      	adds	r3, #32
 8007560:	005b      	lsls	r3, r3, #1
 8007562:	4413      	add	r3, r2
 8007564:	885b      	ldrh	r3, [r3, #2]
 8007566:	461a      	mov	r2, r3
 8007568:	463b      	mov	r3, r7
 800756a:	492f      	ldr	r1, [pc, #188]	@ (8007628 <Get_Config+0x1bc>)
 800756c:	4618      	mov	r0, r3
 800756e:	f00f f9d7 	bl	8016920 <siprintf>
 8007572:	e03e      	b.n	80075f2 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "LOW_TH") == 0 && cfg_idx >= 0 && cfg_idx < 24)
 8007574:	4935      	ldr	r1, [pc, #212]	@ (800764c <Get_Config+0x1e0>)
 8007576:	482a      	ldr	r0, [pc, #168]	@ (8007620 <Get_Config+0x1b4>)
 8007578:	f7f8 fe2a 	bl	80001d0 <strcmp>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d115      	bne.n	80075ae <Get_Config+0x142>
 8007582:	4b31      	ldr	r3, [pc, #196]	@ (8007648 <Get_Config+0x1dc>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	db11      	blt.n	80075ae <Get_Config+0x142>
 800758a:	4b2f      	ldr	r3, [pc, #188]	@ (8007648 <Get_Config+0x1dc>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b17      	cmp	r3, #23
 8007590:	dc0d      	bgt.n	80075ae <Get_Config+0x142>
	{
		sprintf(value_str, "R:%u", config.low_th[cfg_idx]);
 8007592:	4b2d      	ldr	r3, [pc, #180]	@ (8007648 <Get_Config+0x1dc>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a23      	ldr	r2, [pc, #140]	@ (8007624 <Get_Config+0x1b8>)
 8007598:	3308      	adds	r3, #8
 800759a:	005b      	lsls	r3, r3, #1
 800759c:	4413      	add	r3, r2
 800759e:	885b      	ldrh	r3, [r3, #2]
 80075a0:	461a      	mov	r2, r3
 80075a2:	463b      	mov	r3, r7
 80075a4:	4920      	ldr	r1, [pc, #128]	@ (8007628 <Get_Config+0x1bc>)
 80075a6:	4618      	mov	r0, r3
 80075a8:	f00f f9ba 	bl	8016920 <siprintf>
 80075ac:	e021      	b.n	80075f2 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "TCP_IP") == 0)
 80075ae:	4928      	ldr	r1, [pc, #160]	@ (8007650 <Get_Config+0x1e4>)
 80075b0:	481b      	ldr	r0, [pc, #108]	@ (8007620 <Get_Config+0x1b4>)
 80075b2:	f7f8 fe0d 	bl	80001d0 <strcmp>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d106      	bne.n	80075ca <Get_Config+0x15e>
	{
		sprintf(value_str, "R:%s", config.tcp_IPaddress);
 80075bc:	463b      	mov	r3, r7
 80075be:	4a25      	ldr	r2, [pc, #148]	@ (8007654 <Get_Config+0x1e8>)
 80075c0:	4925      	ldr	r1, [pc, #148]	@ (8007658 <Get_Config+0x1ec>)
 80075c2:	4618      	mov	r0, r3
 80075c4:	f00f f9ac 	bl	8016920 <siprintf>
 80075c8:	e013      	b.n	80075f2 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "TCP_PORT") == 0)
 80075ca:	4924      	ldr	r1, [pc, #144]	@ (800765c <Get_Config+0x1f0>)
 80075cc:	4814      	ldr	r0, [pc, #80]	@ (8007620 <Get_Config+0x1b4>)
 80075ce:	f7f8 fdff 	bl	80001d0 <strcmp>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d106      	bne.n	80075e6 <Get_Config+0x17a>
	{
		sprintf(value_str, "R:%s", config.tcp_Port);
 80075d8:	463b      	mov	r3, r7
 80075da:	4a21      	ldr	r2, [pc, #132]	@ (8007660 <Get_Config+0x1f4>)
 80075dc:	491e      	ldr	r1, [pc, #120]	@ (8007658 <Get_Config+0x1ec>)
 80075de:	4618      	mov	r0, r3
 80075e0:	f00f f99e 	bl	8016920 <siprintf>
 80075e4:	e005      	b.n	80075f2 <Get_Config+0x186>
	}
	else
	{
		strncpy(value_str, "R:ERR", sizeof(value_str)-1);
 80075e6:	463b      	mov	r3, r7
 80075e8:	227f      	movs	r2, #127	@ 0x7f
 80075ea:	491e      	ldr	r1, [pc, #120]	@ (8007664 <Get_Config+0x1f8>)
 80075ec:	4618      	mov	r0, r3
 80075ee:	f00f fa1e 	bl	8016a2e <strncpy>
	}

	memset(cfg_var, 0, sizeof(cfg_var));
 80075f2:	2214      	movs	r2, #20
 80075f4:	2100      	movs	r1, #0
 80075f6:	480a      	ldr	r0, [pc, #40]	@ (8007620 <Get_Config+0x1b4>)
 80075f8:	f00f f9f2 	bl	80169e0 <memset>
	cfg_idx = 0;
 80075fc:	4b12      	ldr	r3, [pc, #72]	@ (8007648 <Get_Config+0x1dc>)
 80075fe:	2200      	movs	r2, #0
 8007600:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 8007602:	220a      	movs	r2, #10
 8007604:	2100      	movs	r1, #0
 8007606:	4818      	ldr	r0, [pc, #96]	@ (8007668 <Get_Config+0x1fc>)
 8007608:	f00f f9ea 	bl	80169e0 <memset>

	SIM_Send_TCP(value_str);
 800760c:	463b      	mov	r3, r7
 800760e:	4618      	mov	r0, r3
 8007610:	f7fa febe 	bl	8002390 <SIM_Send_TCP>
}
 8007614:	bf00      	nop
 8007616:	3780      	adds	r7, #128	@ 0x80
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	08018008 	.word	0x08018008
 8007620:	20005764 	.word	0x20005764
 8007624:	20001784 	.word	0x20001784
 8007628:	080180b4 	.word	0x080180b4
 800762c:	08018014 	.word	0x08018014
 8007630:	08018020 	.word	0x08018020
 8007634:	0801802c 	.word	0x0801802c
 8007638:	080180bc 	.word	0x080180bc
 800763c:	0801803c 	.word	0x0801803c
 8007640:	08018048 	.word	0x08018048
 8007644:	08018054 	.word	0x08018054
 8007648:	20005778 	.word	0x20005778
 800764c:	08018064 	.word	0x08018064
 8007650:	0801806c 	.word	0x0801806c
 8007654:	200017f6 	.word	0x200017f6
 8007658:	080180c4 	.word	0x080180c4
 800765c:	08018074 	.word	0x08018074
 8007660:	20001836 	.word	0x20001836
 8007664:	0801805c 	.word	0x0801805c
 8007668:	2000577c 	.word	0x2000577c

0800766c <Clear_Flags>:

/*-----AZZERAMENTO FLAG-----*/
void Clear_Flags(void)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	af00      	add	r7, sp, #0
	if(!sys.ACC_Present)
 8007670:	4b0d      	ldr	r3, [pc, #52]	@ (80076a8 <Clear_Flags+0x3c>)
 8007672:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007676:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10a      	bne.n	800769a <Clear_Flags+0x2e>
	{
		memset(&flags, 0, sizeof(flags));
 8007684:	2203      	movs	r2, #3
 8007686:	2100      	movs	r1, #0
 8007688:	4808      	ldr	r0, [pc, #32]	@ (80076ac <Clear_Flags+0x40>)
 800768a:	f00f f9a9 	bl	80169e0 <memset>
		flags.ACC_Complete = 1;
 800768e:	4a07      	ldr	r2, [pc, #28]	@ (80076ac <Clear_Flags+0x40>)
 8007690:	7813      	ldrb	r3, [r2, #0]
 8007692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007696:	7013      	strb	r3, [r2, #0]
	else
	{
		memset(&flags, 0, sizeof(flags));
	}

}
 8007698:	e004      	b.n	80076a4 <Clear_Flags+0x38>
		memset(&flags, 0, sizeof(flags));
 800769a:	2203      	movs	r2, #3
 800769c:	2100      	movs	r1, #0
 800769e:	4803      	ldr	r0, [pc, #12]	@ (80076ac <Clear_Flags+0x40>)
 80076a0:	f00f f99e 	bl	80169e0 <memset>
}
 80076a4:	bf00      	nop
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	200005d8 	.word	0x200005d8
 80076ac:	20001780 	.word	0x20001780

080076b0 <psram_reset>:
uint32_t	psramSize = 0;
uint32_t	psramNumPages = 0;


int psram_reset()
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b08e      	sub	sp, #56	@ 0x38
 80076b4:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = {0};
 80076b6:	463b      	mov	r3, r7
 80076b8:	2238      	movs	r2, #56	@ 0x38
 80076ba:	2100      	movs	r1, #0
 80076bc:	4618      	mov	r0, r3
 80076be:	f00f f98f 	bl	80169e0 <memset>

	sCommand.Instruction = 0x66;
 80076c2:	2366      	movs	r3, #102	@ 0x66
 80076c4:	603b      	str	r3, [r7, #0]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80076c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80076ca:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_NONE;
 80076cc:	2300      	movs	r3, #0
 80076ce:	60fb      	str	r3, [r7, #12]
	sCommand.NbData = 0;
 80076d0:	2300      	movs	r3, #0
 80076d2:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80076d4:	463b      	mov	r3, r7
 80076d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076da:	4619      	mov	r1, r3
 80076dc:	480e      	ldr	r0, [pc, #56]	@ (8007718 <psram_reset+0x68>)
 80076de:	f008 f987 	bl	800f9f0 <HAL_QSPI_Command>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <psram_reset+0x3e>
	{
		return -1;
 80076e8:	f04f 33ff 	mov.w	r3, #4294967295
 80076ec:	e00f      	b.n	800770e <psram_reset+0x5e>
	}

	sCommand.Instruction = 0x99;
 80076ee:	2399      	movs	r3, #153	@ 0x99
 80076f0:	603b      	str	r3, [r7, #0]

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80076f2:	463b      	mov	r3, r7
 80076f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076f8:	4619      	mov	r1, r3
 80076fa:	4807      	ldr	r0, [pc, #28]	@ (8007718 <psram_reset+0x68>)
 80076fc:	f008 f978 	bl	800f9f0 <HAL_QSPI_Command>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d002      	beq.n	800770c <psram_reset+0x5c>
	{
		return -1;
 8007706:	f04f 33ff 	mov.w	r3, #4294967295
 800770a:	e000      	b.n	800770e <psram_reset+0x5e>
	}

	return 0;
 800770c:	2300      	movs	r3, #0

}
 800770e:	4618      	mov	r0, r3
 8007710:	3738      	adds	r7, #56	@ 0x38
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	200001d4 	.word	0x200001d4

0800771c <psram_qpi_mode>:
{
	return psramQSPI;
}

int psram_qpi_mode(uint8_t enable)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b090      	sub	sp, #64	@ 0x40
 8007720:	af00      	add	r7, sp, #0
 8007722:	4603      	mov	r3, r0
 8007724:	71fb      	strb	r3, [r7, #7]

	QSPI_CommandTypeDef sCommand = {0};
 8007726:	f107 0308 	add.w	r3, r7, #8
 800772a:	2238      	movs	r2, #56	@ 0x38
 800772c:	2100      	movs	r1, #0
 800772e:	4618      	mov	r0, r3
 8007730:	f00f f956 	bl	80169e0 <memset>

	if(!psramInitDone)return -1;
 8007734:	4b1c      	ldr	r3, [pc, #112]	@ (80077a8 <psram_qpi_mode+0x8c>)
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d102      	bne.n	8007742 <psram_qpi_mode+0x26>
 800773c:	f04f 33ff 	mov.w	r3, #4294967295
 8007740:	e02d      	b.n	800779e <psram_qpi_mode+0x82>

	if(psramQSPI==1 && enable == 0)
 8007742:	4b1a      	ldr	r3, [pc, #104]	@ (80077ac <psram_qpi_mode+0x90>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d108      	bne.n	800775c <psram_qpi_mode+0x40>
 800774a:	79fb      	ldrb	r3, [r7, #7]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d105      	bne.n	800775c <psram_qpi_mode+0x40>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_DISABLE;
 8007750:	23f5      	movs	r3, #245	@ 0xf5
 8007752:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8007754:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007758:	623b      	str	r3, [r7, #32]
 800775a:	e00e      	b.n	800777a <psram_qpi_mode+0x5e>

	}else if(psramQSPI==0 && enable == 1)
 800775c:	4b13      	ldr	r3, [pc, #76]	@ (80077ac <psram_qpi_mode+0x90>)
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d108      	bne.n	8007776 <psram_qpi_mode+0x5a>
 8007764:	79fb      	ldrb	r3, [r7, #7]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d105      	bne.n	8007776 <psram_qpi_mode+0x5a>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_ENABLE;
 800776a:	2335      	movs	r3, #53	@ 0x35
 800776c:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800776e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007772:	623b      	str	r3, [r7, #32]
 8007774:	e001      	b.n	800777a <psram_qpi_mode+0x5e>

	}else{

		return 0;
 8007776:	2300      	movs	r3, #0
 8007778:	e011      	b.n	800779e <psram_qpi_mode+0x82>

	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800777a:	f107 0308 	add.w	r3, r7, #8
 800777e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007782:	4619      	mov	r1, r3
 8007784:	480a      	ldr	r0, [pc, #40]	@ (80077b0 <psram_qpi_mode+0x94>)
 8007786:	f008 f933 	bl	800f9f0 <HAL_QSPI_Command>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <psram_qpi_mode+0x7a>
	{
		return -1;
 8007790:	f04f 33ff 	mov.w	r3, #4294967295
 8007794:	e003      	b.n	800779e <psram_qpi_mode+0x82>
	}

	psramQSPI = enable;
 8007796:	4a05      	ldr	r2, [pc, #20]	@ (80077ac <psram_qpi_mode+0x90>)
 8007798:	79fb      	ldrb	r3, [r7, #7]
 800779a:	7013      	strb	r3, [r2, #0]

	return 0;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3740      	adds	r7, #64	@ 0x40
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20005c38 	.word	0x20005c38
 80077ac:	20005c39 	.word	0x20005c39
 80077b0:	200001d4 	.word	0x200001d4

080077b4 <psram_read_id>:

int psram_read_id(uint8_t *id_data, int id_data_size)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b090      	sub	sp, #64	@ 0x40
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef sCommand = {0};
 80077be:	f107 0308 	add.w	r3, r7, #8
 80077c2:	2238      	movs	r2, #56	@ 0x38
 80077c4:	2100      	movs	r1, #0
 80077c6:	4618      	mov	r0, r3
 80077c8:	f00f f90a 	bl	80169e0 <memset>

	if(id_data == NULL || id_data_size < 8)return -2;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d002      	beq.n	80077d8 <psram_read_id+0x24>
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2b07      	cmp	r3, #7
 80077d6:	dc02      	bgt.n	80077de <psram_read_id+0x2a>
 80077d8:	f06f 0301 	mvn.w	r3, #1
 80077dc:	e034      	b.n	8007848 <psram_read_id+0x94>

	sCommand.Instruction = 0x9F;
 80077de:	239f      	movs	r3, #159	@ 0x9f
 80077e0:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80077e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80077e6:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 80077e8:	2300      	movs	r3, #0
 80077ea:	60fb      	str	r3, [r7, #12]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80077ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80077f0:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 80077f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80077f6:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode    = QSPI_DATA_1_LINE;
 80077f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80077fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.NbData = 8;
 80077fe:	2308      	movs	r3, #8
 8007800:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007802:	2300      	movs	r3, #0
 8007804:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8007806:	2300      	movs	r3, #0
 8007808:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800780a:	2300      	movs	r3, #0
 800780c:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800780e:	2300      	movs	r3, #0
 8007810:	63fb      	str	r3, [r7, #60]	@ 0x3c

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007812:	f107 0308 	add.w	r3, r7, #8
 8007816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800781a:	4619      	mov	r1, r3
 800781c:	480c      	ldr	r0, [pc, #48]	@ (8007850 <psram_read_id+0x9c>)
 800781e:	f008 f8e7 	bl	800f9f0 <HAL_QSPI_Command>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d002      	beq.n	800782e <psram_read_id+0x7a>
	{
		return -1;
 8007828:	f04f 33ff 	mov.w	r3, #4294967295
 800782c:	e00c      	b.n	8007848 <psram_read_id+0x94>
	}

	if (HAL_QSPI_Receive(PSRAM_SPI, id_data, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800782e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007832:	6879      	ldr	r1, [r7, #4]
 8007834:	4806      	ldr	r0, [pc, #24]	@ (8007850 <psram_read_id+0x9c>)
 8007836:	f008 f9d0 	bl	800fbda <HAL_QSPI_Receive>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <psram_read_id+0x92>
	{
		return -1;
 8007840:	f04f 33ff 	mov.w	r3, #4294967295
 8007844:	e000      	b.n	8007848 <psram_read_id+0x94>
	}


	return 0;
 8007846:	2300      	movs	r3, #0

}
 8007848:	4618      	mov	r0, r3
 800784a:	3740      	adds	r7, #64	@ 0x40
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	200001d4 	.word	0x200001d4

08007854 <psram_internal_read_write>:

int psram_internal_read_write(uint8_t write, uint32_t address, uint16_t nbytes, uint8_t *pBuffer)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b092      	sub	sp, #72	@ 0x48
 8007858:	af00      	add	r7, sp, #0
 800785a:	60b9      	str	r1, [r7, #8]
 800785c:	607b      	str	r3, [r7, #4]
 800785e:	4603      	mov	r3, r0
 8007860:	73fb      	strb	r3, [r7, #15]
 8007862:	4613      	mov	r3, r2
 8007864:	81bb      	strh	r3, [r7, #12]

	QSPI_CommandTypeDef sCommand = {0};
 8007866:	f107 0310 	add.w	r3, r7, #16
 800786a:	2238      	movs	r2, #56	@ 0x38
 800786c:	2100      	movs	r1, #0
 800786e:	4618      	mov	r0, r3
 8007870:	f00f f8b6 	bl	80169e0 <memset>

	sCommand.Address = address;
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007878:	2300      	movs	r3, #0
 800787a:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800787c:	2300      	movs	r3, #0
 800787e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007880:	2300      	movs	r3, #0
 8007882:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007884:	2300      	movs	r3, #0
 8007886:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.NbData = nbytes;
 8007888:	89bb      	ldrh	r3, [r7, #12]
 800788a:	63bb      	str	r3, [r7, #56]	@ 0x38

	if(psramQSPI)
 800788c:	4b33      	ldr	r3, [pc, #204]	@ (800795c <psram_internal_read_write+0x108>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d01a      	beq.n	80078ca <psram_internal_read_write+0x76>
	{
		//QSPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE_QUAD : PSRAM_CMD_READ_FAST_QIO;
 8007894:	7bfb      	ldrb	r3, [r7, #15]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d001      	beq.n	800789e <psram_internal_read_write+0x4a>
 800789a:	2338      	movs	r3, #56	@ 0x38
 800789c:	e000      	b.n	80078a0 <psram_internal_read_write+0x4c>
 800789e:	23eb      	movs	r3, #235	@ 0xeb
 80078a0:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 80078a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80078a6:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80078a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80078ac:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 80078ae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80078b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_4_LINES;
 80078b4:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80078b8:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_QPI_READ_FAST_QIO_WAIT;
 80078ba:	7bfb      	ldrb	r3, [r7, #15]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <psram_internal_read_write+0x70>
 80078c0:	2300      	movs	r3, #0
 80078c2:	e000      	b.n	80078c6 <psram_internal_read_write+0x72>
 80078c4:	2306      	movs	r3, #6
 80078c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80078c8:	e019      	b.n	80078fe <psram_internal_read_write+0xaa>
	}else{
		//SPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE : PSRAM_CMD_READ_FAST;
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <psram_internal_read_write+0x80>
 80078d0:	2302      	movs	r3, #2
 80078d2:	e000      	b.n	80078d6 <psram_internal_read_write+0x82>
 80078d4:	230b      	movs	r3, #11
 80078d6:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80078d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80078dc:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80078de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80078e2:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 80078e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80078e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_1_LINE;
 80078ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80078ee:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_READ_FAST_WAIT;
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <psram_internal_read_write+0xa6>
 80078f6:	2300      	movs	r3, #0
 80078f8:	e000      	b.n	80078fc <psram_internal_read_write+0xa8>
 80078fa:	2308      	movs	r3, #8
 80078fc:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80078fe:	f107 0310 	add.w	r3, r7, #16
 8007902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007906:	4619      	mov	r1, r3
 8007908:	4815      	ldr	r0, [pc, #84]	@ (8007960 <psram_internal_read_write+0x10c>)
 800790a:	f008 f871 	bl	800f9f0 <HAL_QSPI_Command>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d002      	beq.n	800791a <psram_internal_read_write+0xc6>
	{
		return -1;
 8007914:	f04f 33ff 	mov.w	r3, #4294967295
 8007918:	e01b      	b.n	8007952 <psram_internal_read_write+0xfe>
	}

	if(write)
 800791a:	7bfb      	ldrb	r3, [r7, #15]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00b      	beq.n	8007938 <psram_internal_read_write+0xe4>
	{
		if (HAL_QSPI_Transmit(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007920:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007924:	6879      	ldr	r1, [r7, #4]
 8007926:	480e      	ldr	r0, [pc, #56]	@ (8007960 <psram_internal_read_write+0x10c>)
 8007928:	f008 f8c0 	bl	800faac <HAL_QSPI_Transmit>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00e      	beq.n	8007950 <psram_internal_read_write+0xfc>
		{
			return -1;
 8007932:	f04f 33ff 	mov.w	r3, #4294967295
 8007936:	e00c      	b.n	8007952 <psram_internal_read_write+0xfe>
		}

	}else{

		if (HAL_QSPI_Receive(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800793c:	6879      	ldr	r1, [r7, #4]
 800793e:	4808      	ldr	r0, [pc, #32]	@ (8007960 <psram_internal_read_write+0x10c>)
 8007940:	f008 f94b 	bl	800fbda <HAL_QSPI_Receive>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d002      	beq.n	8007950 <psram_internal_read_write+0xfc>
		{
			return -1;
 800794a:	f04f 33ff 	mov.w	r3, #4294967295
 800794e:	e000      	b.n	8007952 <psram_internal_read_write+0xfe>
		}

	}

	return 0;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3748      	adds	r7, #72	@ 0x48
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	20005c39 	.word	0x20005c39
 8007960:	200001d4 	.word	0x200001d4

08007964 <psram_sector_read_write>:


//Funzione usata da FatFs
int psram_sector_read_write(uint8_t write, uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b088      	sub	sp, #32
 8007968:	af00      	add	r7, sp, #0
 800796a:	60b9      	str	r1, [r7, #8]
 800796c:	607a      	str	r2, [r7, #4]
 800796e:	603b      	str	r3, [r7, #0]
 8007970:	4603      	mov	r3, r0
 8007972:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8007974:	2300      	movs	r3, #0
 8007976:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * PSRAM_PAGE_SIZE;
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	029b      	lsls	r3, r3, #10
 8007980:	61bb      	str	r3, [r7, #24]

	while(nsectors > 0)
 8007982:	e018      	b.n	80079b6 <psram_sector_read_write+0x52>
	{
		result = psram_internal_read_write(write, address, PSRAM_PAGE_SIZE, wPtr);
 8007984:	7bf8      	ldrb	r0, [r7, #15]
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800798c:	69b9      	ldr	r1, [r7, #24]
 800798e:	f7ff ff61 	bl	8007854 <psram_internal_read_write>
 8007992:	6178      	str	r0, [r7, #20]
		if(result < 0)return -1;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	2b00      	cmp	r3, #0
 8007998:	da02      	bge.n	80079a0 <psram_sector_read_write+0x3c>
 800799a:	f04f 33ff 	mov.w	r3, #4294967295
 800799e:	e00e      	b.n	80079be <psram_sector_read_write+0x5a>
		address += PSRAM_PAGE_SIZE;
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079a6:	61bb      	str	r3, [r7, #24]
		wPtr += PSRAM_PAGE_SIZE;
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079ae:	61fb      	str	r3, [r7, #28]
		nsectors--;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	3b01      	subs	r3, #1
 80079b4:	607b      	str	r3, [r7, #4]
	while(nsectors > 0)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1e3      	bne.n	8007984 <psram_sector_read_write+0x20>
	}

	return 0;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3720      	adds	r7, #32
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
	...

080079c8 <psram_read_write>:



int psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b088      	sub	sp, #32
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60b9      	str	r1, [r7, #8]
 80079d0:	607a      	str	r2, [r7, #4]
 80079d2:	603b      	str	r3, [r7, #0]
 80079d4:	4603      	mov	r3, r0
 80079d6:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 80079d8:	2300      	movs	r3, #0
 80079da:	61bb      	str	r3, [r7, #24]
	uint32_t trBytes = 0;
 80079dc:	2300      	movs	r3, #0
 80079de:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	61fb      	str	r3, [r7, #28]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 80079e4:	4b1e      	ldr	r3, [pc, #120]	@ (8007a60 <psram_read_write+0x98>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <psram_read_write+0x2a>
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d102      	bne.n	80079f8 <psram_read_write+0x30>
 80079f2:	f04f 33ff 	mov.w	r3, #4294967295
 80079f6:	e02e      	b.n	8007a56 <psram_read_write+0x8e>
	if(address + nbytes >= psramSize)return -2;
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	441a      	add	r2, r3
 80079fe:	4b19      	ldr	r3, [pc, #100]	@ (8007a64 <psram_read_write+0x9c>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d323      	bcc.n	8007a4e <psram_read_write+0x86>
 8007a06:	f06f 0301 	mvn.w	r3, #1
 8007a0a:	e024      	b.n	8007a56 <psram_read_write+0x8e>

	while(nbytes > 0)
	{
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a12:	bf28      	it	cs
 8007a14:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8007a18:	617b      	str	r3, [r7, #20]
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	7bf8      	ldrb	r0, [r7, #15]
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	68b9      	ldr	r1, [r7, #8]
 8007a24:	f7ff ff16 	bl	8007854 <psram_internal_read_write>
 8007a28:	61b8      	str	r0, [r7, #24]

		if(result < 0)return -1;
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	da02      	bge.n	8007a36 <psram_read_write+0x6e>
 8007a30:	f04f 33ff 	mov.w	r3, #4294967295
 8007a34:	e00f      	b.n	8007a56 <psram_read_write+0x8e>

		address += trBytes;
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 8007a3e:	69fa      	ldr	r2, [r7, #28]
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	4413      	add	r3, r2
 8007a44:	61fb      	str	r3, [r7, #28]
		nbytes -= trBytes;
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	607b      	str	r3, [r7, #4]
	while(nbytes > 0)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1db      	bne.n	8007a0c <psram_read_write+0x44>
	}

	return 0;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3720      	adds	r7, #32
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	20005c38 	.word	0x20005c38
 8007a64:	20005c44 	.word	0x20005c44

08007a68 <raw_psram_read_write>:

int raw_psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b088      	sub	sp, #32
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60b9      	str	r1, [r7, #8]
 8007a70:	607a      	str	r2, [r7, #4]
 8007a72:	603b      	str	r3, [r7, #0]
 8007a74:	4603      	mov	r3, r0
 8007a76:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	617b      	str	r3, [r7, #20]
	uint32_t trBytes = 0;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	61fb      	str	r3, [r7, #28]
	uint8_t *wPtr = pBuffer;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	61bb      	str	r3, [r7, #24]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 8007a84:	4b21      	ldr	r3, [pc, #132]	@ (8007b0c <raw_psram_read_write+0xa4>)
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d002      	beq.n	8007a92 <raw_psram_read_write+0x2a>
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d102      	bne.n	8007a98 <raw_psram_read_write+0x30>
 8007a92:	f04f 33ff 	mov.w	r3, #4294967295
 8007a96:	e035      	b.n	8007b04 <raw_psram_read_write+0x9c>
	if(address + nbytes >= psramSize)return -2;
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	441a      	add	r2, r3
 8007a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8007b10 <raw_psram_read_write+0xa8>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d302      	bcc.n	8007aac <raw_psram_read_write+0x44>
 8007aa6:	f06f 0301 	mvn.w	r3, #1
 8007aaa:	e02b      	b.n	8007b04 <raw_psram_read_write+0x9c>

	trBytes = 1024 - address % 1024;
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ab2:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8007ab6:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 8007ab8:	e020      	b.n	8007afc <raw_psram_read_write+0x94>
	{
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	7bf8      	ldrb	r0, [r7, #15]
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	68b9      	ldr	r1, [r7, #8]
 8007ac4:	f7ff fec6 	bl	8007854 <psram_internal_read_write>
 8007ac8:	6178      	str	r0, [r7, #20]

		if(result < 0)return -1;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	da02      	bge.n	8007ad6 <raw_psram_read_write+0x6e>
 8007ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad4:	e016      	b.n	8007b04 <raw_psram_read_write+0x9c>

		address += trBytes;
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	4413      	add	r3, r2
 8007adc:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 8007ade:	69ba      	ldr	r2, [r7, #24]
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	61bb      	str	r3, [r7, #24]
		nbytes -= trBytes;
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	607b      	str	r3, [r7, #4]
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007af4:	bf28      	it	cs
 8007af6:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8007afa:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1db      	bne.n	8007aba <raw_psram_read_write+0x52>
	}

	return 0;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3720      	adds	r7, #32
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	20005c38 	.word	0x20005c38
 8007b10:	20005c44 	.word	0x20005c44

08007b14 <RAM_Write>:
{
	return psram_read_write(1, address, nbytes, pBuffer);
}

int RAM_Write(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
	return raw_psram_read_write(1, address, nbytes, pBuffer);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	68f9      	ldr	r1, [r7, #12]
 8007b26:	2001      	movs	r0, #1
 8007b28:	f7ff ff9e 	bl	8007a68 <raw_psram_read_write>
 8007b2c:	4603      	mov	r3, r0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <RAM_Read>:

int RAM_Read(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	60f8      	str	r0, [r7, #12]
 8007b3e:	60b9      	str	r1, [r7, #8]
 8007b40:	607a      	str	r2, [r7, #4]
	return psram_read_write(0, address, nbytes, pBuffer);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	68f9      	ldr	r1, [r7, #12]
 8007b48:	2000      	movs	r0, #0
 8007b4a:	f7ff ff3d 	bl	80079c8 <psram_read_write>
 8007b4e:	4603      	mov	r3, r0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <psram_is_initialized>:


int psram_is_initialized()
{
 8007b58:	b480      	push	{r7}
 8007b5a:	af00      	add	r7, sp, #0
	return psramInitDone;
 8007b5c:	4b03      	ldr	r3, [pc, #12]	@ (8007b6c <psram_is_initialized+0x14>)
 8007b5e:	781b      	ldrb	r3, [r3, #0]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	20005c38 	.word	0x20005c38

08007b70 <psram_get_sector_size>:

unsigned int psram_get_sector_size()
{
 8007b70:	b480      	push	{r7}
 8007b72:	af00      	add	r7, sp, #0
	return PSRAM_PAGE_SIZE;
 8007b74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
	...

08007b84 <psram_get_sector_count>:

unsigned int psram_get_sector_count()
{
 8007b84:	b480      	push	{r7}
 8007b86:	af00      	add	r7, sp, #0
	return psramNumPages;
 8007b88:	4b03      	ldr	r3, [pc, #12]	@ (8007b98 <psram_get_sector_count+0x14>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	20005c48 	.word	0x20005c48

08007b9c <psram_get_size>:

unsigned int psram_get_size()
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	af00      	add	r7, sp, #0
	return psramSize;
 8007ba0:	4b03      	ldr	r3, [pc, #12]	@ (8007bb0 <psram_get_size+0x14>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	20005c44 	.word	0x20005c44

08007bb4 <psram_init>:

int psram_init()
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0

	uint8_t density = 0xFF;
 8007bba:	23ff      	movs	r3, #255	@ 0xff
 8007bbc:	71fb      	strb	r3, [r7, #7]

	psramInitDone = 0;
 8007bbe:	4b20      	ldr	r3, [pc, #128]	@ (8007c40 <psram_init+0x8c>)
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	701a      	strb	r2, [r3, #0]

	if(psram_reset() < 0)return -1;
 8007bc4:	f7ff fd74 	bl	80076b0 <psram_reset>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	da02      	bge.n	8007bd4 <psram_init+0x20>
 8007bce:	f04f 33ff 	mov.w	r3, #4294967295
 8007bd2:	e030      	b.n	8007c36 <psram_init+0x82>

	memset(psramId, 0xFF, sizeof(psramId));
 8007bd4:	2208      	movs	r2, #8
 8007bd6:	21ff      	movs	r1, #255	@ 0xff
 8007bd8:	481a      	ldr	r0, [pc, #104]	@ (8007c44 <psram_init+0x90>)
 8007bda:	f00e ff01 	bl	80169e0 <memset>

	if(psram_read_id(psramId, sizeof(psramId)) < 0)return -1;
 8007bde:	2108      	movs	r1, #8
 8007be0:	4818      	ldr	r0, [pc, #96]	@ (8007c44 <psram_init+0x90>)
 8007be2:	f7ff fde7 	bl	80077b4 <psram_read_id>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	da02      	bge.n	8007bf2 <psram_init+0x3e>
 8007bec:	f04f 33ff 	mov.w	r3, #4294967295
 8007bf0:	e021      	b.n	8007c36 <psram_init+0x82>

	density = psramId[2] >> 5;
 8007bf2:	4b14      	ldr	r3, [pc, #80]	@ (8007c44 <psram_init+0x90>)
 8007bf4:	789b      	ldrb	r3, [r3, #2]
 8007bf6:	095b      	lsrs	r3, r3, #5
 8007bf8:	71fb      	strb	r3, [r7, #7]

	if(psramId[0] == PSRAM_MANUFACTURER && psramId[1] == PSRAM_KGD && density <= PSRAM_DENSITY_64MB)
 8007bfa:	4b12      	ldr	r3, [pc, #72]	@ (8007c44 <psram_init+0x90>)
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	2b0d      	cmp	r3, #13
 8007c00:	d117      	bne.n	8007c32 <psram_init+0x7e>
 8007c02:	4b10      	ldr	r3, [pc, #64]	@ (8007c44 <psram_init+0x90>)
 8007c04:	785b      	ldrb	r3, [r3, #1]
 8007c06:	2b5d      	cmp	r3, #93	@ 0x5d
 8007c08:	d113      	bne.n	8007c32 <psram_init+0x7e>
 8007c0a:	79fb      	ldrb	r3, [r7, #7]
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	d810      	bhi.n	8007c32 <psram_init+0x7e>
	{
		psramSize = PSRAM_DENSITY_64MB_EADDR;
 8007c10:	4b0d      	ldr	r3, [pc, #52]	@ (8007c48 <psram_init+0x94>)
 8007c12:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007c16:	601a      	str	r2, [r3, #0]
		psramNumPages = psramSize / PSRAM_PAGE_SIZE;
 8007c18:	4b0b      	ldr	r3, [pc, #44]	@ (8007c48 <psram_init+0x94>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	0a9b      	lsrs	r3, r3, #10
 8007c1e:	4a0b      	ldr	r2, [pc, #44]	@ (8007c4c <psram_init+0x98>)
 8007c20:	6013      	str	r3, [r2, #0]

		psram_qpi_mode(1);
 8007c22:	2001      	movs	r0, #1
 8007c24:	f7ff fd7a 	bl	800771c <psram_qpi_mode>

		psramInitDone = 1;
 8007c28:	4b05      	ldr	r3, [pc, #20]	@ (8007c40 <psram_init+0x8c>)
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	701a      	strb	r2, [r3, #0]
		return 0;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	e001      	b.n	8007c36 <psram_init+0x82>
	}else{
		return -1;
 8007c32:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	20005c38 	.word	0x20005c38
 8007c44:	20005c3c 	.word	0x20005c3c
 8007c48:	20005c44 	.word	0x20005c44
 8007c4c:	20005c48 	.word	0x20005c48

08007c50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c56:	4b0f      	ldr	r3, [pc, #60]	@ (8007c94 <HAL_MspInit+0x44>)
 8007c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c5a:	4a0e      	ldr	r2, [pc, #56]	@ (8007c94 <HAL_MspInit+0x44>)
 8007c5c:	f043 0301 	orr.w	r3, r3, #1
 8007c60:	6613      	str	r3, [r2, #96]	@ 0x60
 8007c62:	4b0c      	ldr	r3, [pc, #48]	@ (8007c94 <HAL_MspInit+0x44>)
 8007c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	607b      	str	r3, [r7, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007c6e:	4b09      	ldr	r3, [pc, #36]	@ (8007c94 <HAL_MspInit+0x44>)
 8007c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c72:	4a08      	ldr	r2, [pc, #32]	@ (8007c94 <HAL_MspInit+0x44>)
 8007c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c78:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c7a:	4b06      	ldr	r3, [pc, #24]	@ (8007c94 <HAL_MspInit+0x44>)
 8007c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c82:	603b      	str	r3, [r7, #0]
 8007c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007c86:	bf00      	nop
 8007c88:	370c      	adds	r7, #12
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	40021000 	.word	0x40021000

08007c98 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b0ac      	sub	sp, #176	@ 0xb0
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ca0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	601a      	str	r2, [r3, #0]
 8007ca8:	605a      	str	r2, [r3, #4]
 8007caa:	609a      	str	r2, [r3, #8]
 8007cac:	60da      	str	r2, [r3, #12]
 8007cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007cb0:	f107 0314 	add.w	r3, r7, #20
 8007cb4:	2288      	movs	r2, #136	@ 0x88
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f00e fe91 	bl	80169e0 <memset>
  if(hadc->Instance==ADC1)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a3d      	ldr	r2, [pc, #244]	@ (8007db8 <HAL_ADC_MspInit+0x120>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d172      	bne.n	8007dae <HAL_ADC_MspInit+0x116>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8007cc8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007ccc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8007cce:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007cd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8007cde:	2308      	movs	r3, #8
 8007ce0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8007ce2:	2307      	movs	r3, #7
 8007ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8007ce6:	2302      	movs	r3, #2
 8007ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8007cea:	2302      	movs	r3, #2
 8007cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8007cee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007cf2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007cf4:	f107 0314 	add.w	r3, r7, #20
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f009 f865 	bl	8010dc8 <HAL_RCCEx_PeriphCLKConfig>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8007d04:	f7fd fe70 	bl	80059e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8007d08:	4b2c      	ldr	r3, [pc, #176]	@ (8007dbc <HAL_ADC_MspInit+0x124>)
 8007d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d0c:	4a2b      	ldr	r2, [pc, #172]	@ (8007dbc <HAL_ADC_MspInit+0x124>)
 8007d0e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007d12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007d14:	4b29      	ldr	r3, [pc, #164]	@ (8007dbc <HAL_ADC_MspInit+0x124>)
 8007d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d1c:	613b      	str	r3, [r7, #16]
 8007d1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d20:	4b26      	ldr	r3, [pc, #152]	@ (8007dbc <HAL_ADC_MspInit+0x124>)
 8007d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d24:	4a25      	ldr	r2, [pc, #148]	@ (8007dbc <HAL_ADC_MspInit+0x124>)
 8007d26:	f043 0301 	orr.w	r3, r3, #1
 8007d2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007d2c:	4b23      	ldr	r3, [pc, #140]	@ (8007dbc <HAL_ADC_MspInit+0x124>)
 8007d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	60fb      	str	r3, [r7, #12]
 8007d36:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007d38:	2310      	movs	r3, #16
 8007d3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8007d3e:	230b      	movs	r3, #11
 8007d40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d44:	2300      	movs	r3, #0
 8007d46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d4a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007d4e:	4619      	mov	r1, r3
 8007d50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007d54:	f006 fdb0 	bl	800e8b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8007d58:	4b19      	ldr	r3, [pc, #100]	@ (8007dc0 <HAL_ADC_MspInit+0x128>)
 8007d5a:	4a1a      	ldr	r2, [pc, #104]	@ (8007dc4 <HAL_ADC_MspInit+0x12c>)
 8007d5c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8007d5e:	4b18      	ldr	r3, [pc, #96]	@ (8007dc0 <HAL_ADC_MspInit+0x128>)
 8007d60:	2200      	movs	r2, #0
 8007d62:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007d64:	4b16      	ldr	r3, [pc, #88]	@ (8007dc0 <HAL_ADC_MspInit+0x128>)
 8007d66:	2200      	movs	r2, #0
 8007d68:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007d6a:	4b15      	ldr	r3, [pc, #84]	@ (8007dc0 <HAL_ADC_MspInit+0x128>)
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007d70:	4b13      	ldr	r3, [pc, #76]	@ (8007dc0 <HAL_ADC_MspInit+0x128>)
 8007d72:	2280      	movs	r2, #128	@ 0x80
 8007d74:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007d76:	4b12      	ldr	r3, [pc, #72]	@ (8007dc0 <HAL_ADC_MspInit+0x128>)
 8007d78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007d7e:	4b10      	ldr	r3, [pc, #64]	@ (8007dc0 <HAL_ADC_MspInit+0x128>)
 8007d80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007d84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007d86:	4b0e      	ldr	r3, [pc, #56]	@ (8007dc0 <HAL_ADC_MspInit+0x128>)
 8007d88:	2220      	movs	r2, #32
 8007d8a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8007dc0 <HAL_ADC_MspInit+0x128>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007d92:	480b      	ldr	r0, [pc, #44]	@ (8007dc0 <HAL_ADC_MspInit+0x128>)
 8007d94:	f005 fc8a 	bl	800d6ac <HAL_DMA_Init>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8007d9e:	f7fd fe23 	bl	80059e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a06      	ldr	r2, [pc, #24]	@ (8007dc0 <HAL_ADC_MspInit+0x128>)
 8007da6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007da8:	4a05      	ldr	r2, [pc, #20]	@ (8007dc0 <HAL_ADC_MspInit+0x128>)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8007dae:	bf00      	nop
 8007db0:	37b0      	adds	r7, #176	@ 0xb0
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	50040000 	.word	0x50040000
 8007dbc:	40021000 	.word	0x40021000
 8007dc0:	20000114 	.word	0x20000114
 8007dc4:	40020008 	.word	0x40020008

08007dc8 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8007e00 <HAL_CRC_MspInit+0x38>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d10b      	bne.n	8007df2 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007dda:	4b0a      	ldr	r3, [pc, #40]	@ (8007e04 <HAL_CRC_MspInit+0x3c>)
 8007ddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dde:	4a09      	ldr	r2, [pc, #36]	@ (8007e04 <HAL_CRC_MspInit+0x3c>)
 8007de0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007de4:	6493      	str	r3, [r2, #72]	@ 0x48
 8007de6:	4b07      	ldr	r3, [pc, #28]	@ (8007e04 <HAL_CRC_MspInit+0x3c>)
 8007de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007dee:	60fb      	str	r3, [r7, #12]
 8007df0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8007df2:	bf00      	nop
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	40023000 	.word	0x40023000
 8007e04:	40021000 	.word	0x40021000

08007e08 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b0ac      	sub	sp, #176	@ 0xb0
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e10:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007e14:	2200      	movs	r2, #0
 8007e16:	601a      	str	r2, [r3, #0]
 8007e18:	605a      	str	r2, [r3, #4]
 8007e1a:	609a      	str	r2, [r3, #8]
 8007e1c:	60da      	str	r2, [r3, #12]
 8007e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007e20:	f107 0314 	add.w	r3, r7, #20
 8007e24:	2288      	movs	r2, #136	@ 0x88
 8007e26:	2100      	movs	r1, #0
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f00e fdd9 	bl	80169e0 <memset>
  if(hi2c->Instance==I2C3)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a21      	ldr	r2, [pc, #132]	@ (8007eb8 <HAL_I2C_MspInit+0xb0>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d13b      	bne.n	8007eb0 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8007e38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007e3c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007e42:	f107 0314 	add.w	r3, r7, #20
 8007e46:	4618      	mov	r0, r3
 8007e48:	f008 ffbe 	bl	8010dc8 <HAL_RCCEx_PeriphCLKConfig>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8007e52:	f7fd fdc9 	bl	80059e8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007e56:	4b19      	ldr	r3, [pc, #100]	@ (8007ebc <HAL_I2C_MspInit+0xb4>)
 8007e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e5a:	4a18      	ldr	r2, [pc, #96]	@ (8007ebc <HAL_I2C_MspInit+0xb4>)
 8007e5c:	f043 0304 	orr.w	r3, r3, #4
 8007e60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007e62:	4b16      	ldr	r3, [pc, #88]	@ (8007ebc <HAL_I2C_MspInit+0xb4>)
 8007e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e66:	f003 0304 	and.w	r3, r3, #4
 8007e6a:	613b      	str	r3, [r7, #16]
 8007e6c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007e74:	2312      	movs	r3, #18
 8007e76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e80:	2303      	movs	r3, #3
 8007e82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007e86:	2304      	movs	r3, #4
 8007e88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007e8c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007e90:	4619      	mov	r1, r3
 8007e92:	480b      	ldr	r0, [pc, #44]	@ (8007ec0 <HAL_I2C_MspInit+0xb8>)
 8007e94:	f006 fd10 	bl	800e8b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007e98:	4b08      	ldr	r3, [pc, #32]	@ (8007ebc <HAL_I2C_MspInit+0xb4>)
 8007e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e9c:	4a07      	ldr	r2, [pc, #28]	@ (8007ebc <HAL_I2C_MspInit+0xb4>)
 8007e9e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007ea2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ea4:	4b05      	ldr	r3, [pc, #20]	@ (8007ebc <HAL_I2C_MspInit+0xb4>)
 8007ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ea8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007eac:	60fb      	str	r3, [r7, #12]
 8007eae:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8007eb0:	bf00      	nop
 8007eb2:	37b0      	adds	r7, #176	@ 0xb0
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	40005c00 	.word	0x40005c00
 8007ebc:	40021000 	.word	0x40021000
 8007ec0:	48000800 	.word	0x48000800

08007ec4 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08a      	sub	sp, #40	@ 0x28
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ecc:	f107 0314 	add.w	r3, r7, #20
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	605a      	str	r2, [r3, #4]
 8007ed6:	609a      	str	r2, [r3, #8]
 8007ed8:	60da      	str	r2, [r3, #12]
 8007eda:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a26      	ldr	r2, [pc, #152]	@ (8007f7c <HAL_QSPI_MspInit+0xb8>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d145      	bne.n	8007f72 <HAL_QSPI_MspInit+0xae>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8007ee6:	4b26      	ldr	r3, [pc, #152]	@ (8007f80 <HAL_QSPI_MspInit+0xbc>)
 8007ee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eea:	4a25      	ldr	r2, [pc, #148]	@ (8007f80 <HAL_QSPI_MspInit+0xbc>)
 8007eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ef0:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ef2:	4b23      	ldr	r3, [pc, #140]	@ (8007f80 <HAL_QSPI_MspInit+0xbc>)
 8007ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007efa:	613b      	str	r3, [r7, #16]
 8007efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007efe:	4b20      	ldr	r3, [pc, #128]	@ (8007f80 <HAL_QSPI_MspInit+0xbc>)
 8007f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f02:	4a1f      	ldr	r2, [pc, #124]	@ (8007f80 <HAL_QSPI_MspInit+0xbc>)
 8007f04:	f043 0301 	orr.w	r3, r3, #1
 8007f08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8007f80 <HAL_QSPI_MspInit+0xbc>)
 8007f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	60fb      	str	r3, [r7, #12]
 8007f14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f16:	4b1a      	ldr	r3, [pc, #104]	@ (8007f80 <HAL_QSPI_MspInit+0xbc>)
 8007f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f1a:	4a19      	ldr	r2, [pc, #100]	@ (8007f80 <HAL_QSPI_MspInit+0xbc>)
 8007f1c:	f043 0302 	orr.w	r3, r3, #2
 8007f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007f22:	4b17      	ldr	r3, [pc, #92]	@ (8007f80 <HAL_QSPI_MspInit+0xbc>)
 8007f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	60bb      	str	r3, [r7, #8]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007f2e:	23c0      	movs	r3, #192	@ 0xc0
 8007f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f32:	2302      	movs	r3, #2
 8007f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f36:	2300      	movs	r3, #0
 8007f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8007f3e:	230a      	movs	r3, #10
 8007f40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f42:	f107 0314 	add.w	r3, r7, #20
 8007f46:	4619      	mov	r1, r3
 8007f48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007f4c:	f006 fcb4 	bl	800e8b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8007f50:	f640 4303 	movw	r3, #3075	@ 0xc03
 8007f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f56:	2302      	movs	r3, #2
 8007f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8007f62:	230a      	movs	r3, #10
 8007f64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f66:	f107 0314 	add.w	r3, r7, #20
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	4805      	ldr	r0, [pc, #20]	@ (8007f84 <HAL_QSPI_MspInit+0xc0>)
 8007f6e:	f006 fca3 	bl	800e8b8 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8007f72:	bf00      	nop
 8007f74:	3728      	adds	r7, #40	@ 0x28
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	a0001000 	.word	0xa0001000
 8007f80:	40021000 	.word	0x40021000
 8007f84:	48000400 	.word	0x48000400

08007f88 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b0a4      	sub	sp, #144	@ 0x90
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007f90:	f107 0308 	add.w	r3, r7, #8
 8007f94:	2288      	movs	r2, #136	@ 0x88
 8007f96:	2100      	movs	r1, #0
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f00e fd21 	bl	80169e0 <memset>
  if(hrtc->Instance==RTC)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a14      	ldr	r2, [pc, #80]	@ (8007ff4 <HAL_RTC_MspInit+0x6c>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d120      	bne.n	8007fea <HAL_RTC_MspInit+0x62>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007fa8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007fac:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007fae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007fb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007fb6:	f107 0308 	add.w	r3, r7, #8
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f008 ff04 	bl	8010dc8 <HAL_RCCEx_PeriphCLKConfig>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d001      	beq.n	8007fca <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8007fc6:	f7fd fd0f 	bl	80059e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007fca:	4b0b      	ldr	r3, [pc, #44]	@ (8007ff8 <HAL_RTC_MspInit+0x70>)
 8007fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fd0:	4a09      	ldr	r2, [pc, #36]	@ (8007ff8 <HAL_RTC_MspInit+0x70>)
 8007fd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8007fda:	2200      	movs	r2, #0
 8007fdc:	2100      	movs	r1, #0
 8007fde:	2029      	movs	r0, #41	@ 0x29
 8007fe0:	f005 f8f1 	bl	800d1c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8007fe4:	2029      	movs	r0, #41	@ 0x29
 8007fe6:	f005 f90a 	bl	800d1fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8007fea:	bf00      	nop
 8007fec:	3790      	adds	r7, #144	@ 0x90
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	40002800 	.word	0x40002800
 8007ff8:	40021000 	.word	0x40021000

08007ffc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b08c      	sub	sp, #48	@ 0x30
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008004:	f107 031c 	add.w	r3, r7, #28
 8008008:	2200      	movs	r2, #0
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	605a      	str	r2, [r3, #4]
 800800e:	609a      	str	r2, [r3, #8]
 8008010:	60da      	str	r2, [r3, #12]
 8008012:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a2f      	ldr	r2, [pc, #188]	@ (80080d8 <HAL_SPI_MspInit+0xdc>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d129      	bne.n	8008072 <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800801e:	4b2f      	ldr	r3, [pc, #188]	@ (80080dc <HAL_SPI_MspInit+0xe0>)
 8008020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008022:	4a2e      	ldr	r2, [pc, #184]	@ (80080dc <HAL_SPI_MspInit+0xe0>)
 8008024:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008028:	6593      	str	r3, [r2, #88]	@ 0x58
 800802a:	4b2c      	ldr	r3, [pc, #176]	@ (80080dc <HAL_SPI_MspInit+0xe0>)
 800802c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800802e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008032:	61bb      	str	r3, [r7, #24]
 8008034:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008036:	4b29      	ldr	r3, [pc, #164]	@ (80080dc <HAL_SPI_MspInit+0xe0>)
 8008038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800803a:	4a28      	ldr	r2, [pc, #160]	@ (80080dc <HAL_SPI_MspInit+0xe0>)
 800803c:	f043 0302 	orr.w	r3, r3, #2
 8008040:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008042:	4b26      	ldr	r3, [pc, #152]	@ (80080dc <HAL_SPI_MspInit+0xe0>)
 8008044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008046:	f003 0302 	and.w	r3, r3, #2
 800804a:	617b      	str	r3, [r7, #20]
 800804c:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800804e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8008052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008054:	2302      	movs	r3, #2
 8008056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008058:	2300      	movs	r3, #0
 800805a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800805c:	2303      	movs	r3, #3
 800805e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008060:	2305      	movs	r3, #5
 8008062:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008064:	f107 031c 	add.w	r3, r7, #28
 8008068:	4619      	mov	r1, r3
 800806a:	481d      	ldr	r0, [pc, #116]	@ (80080e0 <HAL_SPI_MspInit+0xe4>)
 800806c:	f006 fc24 	bl	800e8b8 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8008070:	e02d      	b.n	80080ce <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a1b      	ldr	r2, [pc, #108]	@ (80080e4 <HAL_SPI_MspInit+0xe8>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d128      	bne.n	80080ce <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800807c:	4b17      	ldr	r3, [pc, #92]	@ (80080dc <HAL_SPI_MspInit+0xe0>)
 800807e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008080:	4a16      	ldr	r2, [pc, #88]	@ (80080dc <HAL_SPI_MspInit+0xe0>)
 8008082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008086:	6593      	str	r3, [r2, #88]	@ 0x58
 8008088:	4b14      	ldr	r3, [pc, #80]	@ (80080dc <HAL_SPI_MspInit+0xe0>)
 800808a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800808c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008090:	613b      	str	r3, [r7, #16]
 8008092:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008094:	4b11      	ldr	r3, [pc, #68]	@ (80080dc <HAL_SPI_MspInit+0xe0>)
 8008096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008098:	4a10      	ldr	r2, [pc, #64]	@ (80080dc <HAL_SPI_MspInit+0xe0>)
 800809a:	f043 0304 	orr.w	r3, r3, #4
 800809e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80080a0:	4b0e      	ldr	r3, [pc, #56]	@ (80080dc <HAL_SPI_MspInit+0xe0>)
 80080a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080a4:	f003 0304 	and.w	r3, r3, #4
 80080a8:	60fb      	str	r3, [r7, #12]
 80080aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80080ac:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80080b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080b2:	2302      	movs	r3, #2
 80080b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080b6:	2300      	movs	r3, #0
 80080b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080ba:	2303      	movs	r3, #3
 80080bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80080be:	2306      	movs	r3, #6
 80080c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080c2:	f107 031c 	add.w	r3, r7, #28
 80080c6:	4619      	mov	r1, r3
 80080c8:	4807      	ldr	r0, [pc, #28]	@ (80080e8 <HAL_SPI_MspInit+0xec>)
 80080ca:	f006 fbf5 	bl	800e8b8 <HAL_GPIO_Init>
}
 80080ce:	bf00      	nop
 80080d0:	3730      	adds	r7, #48	@ 0x30
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	40003800 	.word	0x40003800
 80080dc:	40021000 	.word	0x40021000
 80080e0:	48000400 	.word	0x48000400
 80080e4:	40003c00 	.word	0x40003c00
 80080e8:	48000800 	.word	0x48000800

080080ec <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a0a      	ldr	r2, [pc, #40]	@ (8008124 <HAL_TIM_PWM_MspInit+0x38>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d10b      	bne.n	8008116 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80080fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008128 <HAL_TIM_PWM_MspInit+0x3c>)
 8008100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008102:	4a09      	ldr	r2, [pc, #36]	@ (8008128 <HAL_TIM_PWM_MspInit+0x3c>)
 8008104:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008108:	6613      	str	r3, [r2, #96]	@ 0x60
 800810a:	4b07      	ldr	r3, [pc, #28]	@ (8008128 <HAL_TIM_PWM_MspInit+0x3c>)
 800810c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800810e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008112:	60fb      	str	r3, [r7, #12]
 8008114:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8008116:	bf00      	nop
 8008118:	3714      	adds	r7, #20
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	40012c00 	.word	0x40012c00
 8008128:	40021000 	.word	0x40021000

0800812c <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b08a      	sub	sp, #40	@ 0x28
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008134:	f107 0314 	add.w	r3, r7, #20
 8008138:	2200      	movs	r2, #0
 800813a:	601a      	str	r2, [r3, #0]
 800813c:	605a      	str	r2, [r3, #4]
 800813e:	609a      	str	r2, [r3, #8]
 8008140:	60da      	str	r2, [r3, #12]
 8008142:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800814c:	d128      	bne.n	80081a0 <HAL_TIM_IC_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800814e:	4b16      	ldr	r3, [pc, #88]	@ (80081a8 <HAL_TIM_IC_MspInit+0x7c>)
 8008150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008152:	4a15      	ldr	r2, [pc, #84]	@ (80081a8 <HAL_TIM_IC_MspInit+0x7c>)
 8008154:	f043 0301 	orr.w	r3, r3, #1
 8008158:	6593      	str	r3, [r2, #88]	@ 0x58
 800815a:	4b13      	ldr	r3, [pc, #76]	@ (80081a8 <HAL_TIM_IC_MspInit+0x7c>)
 800815c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	613b      	str	r3, [r7, #16]
 8008164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008166:	4b10      	ldr	r3, [pc, #64]	@ (80081a8 <HAL_TIM_IC_MspInit+0x7c>)
 8008168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800816a:	4a0f      	ldr	r2, [pc, #60]	@ (80081a8 <HAL_TIM_IC_MspInit+0x7c>)
 800816c:	f043 0301 	orr.w	r3, r3, #1
 8008170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008172:	4b0d      	ldr	r3, [pc, #52]	@ (80081a8 <HAL_TIM_IC_MspInit+0x7c>)
 8008174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	60fb      	str	r3, [r7, #12]
 800817c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800817e:	2320      	movs	r3, #32
 8008180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008182:	2302      	movs	r3, #2
 8008184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008186:	2301      	movs	r3, #1
 8008188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800818a:	2300      	movs	r3, #0
 800818c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800818e:	2301      	movs	r3, #1
 8008190:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008192:	f107 0314 	add.w	r3, r7, #20
 8008196:	4619      	mov	r1, r3
 8008198:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800819c:	f006 fb8c 	bl	800e8b8 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80081a0:	bf00      	nop
 80081a2:	3728      	adds	r7, #40	@ 0x28
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	40021000 	.word	0x40021000

080081ac <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a13      	ldr	r2, [pc, #76]	@ (8008208 <HAL_TIM_Base_MspInit+0x5c>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d10c      	bne.n	80081d8 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80081be:	4b13      	ldr	r3, [pc, #76]	@ (800820c <HAL_TIM_Base_MspInit+0x60>)
 80081c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081c2:	4a12      	ldr	r2, [pc, #72]	@ (800820c <HAL_TIM_Base_MspInit+0x60>)
 80081c4:	f043 0302 	orr.w	r3, r3, #2
 80081c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80081ca:	4b10      	ldr	r3, [pc, #64]	@ (800820c <HAL_TIM_Base_MspInit+0x60>)
 80081cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081ce:	f003 0302 	and.w	r3, r3, #2
 80081d2:	60fb      	str	r3, [r7, #12]
 80081d4:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80081d6:	e010      	b.n	80081fa <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a0c      	ldr	r2, [pc, #48]	@ (8008210 <HAL_TIM_Base_MspInit+0x64>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d10b      	bne.n	80081fa <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80081e2:	4b0a      	ldr	r3, [pc, #40]	@ (800820c <HAL_TIM_Base_MspInit+0x60>)
 80081e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081e6:	4a09      	ldr	r2, [pc, #36]	@ (800820c <HAL_TIM_Base_MspInit+0x60>)
 80081e8:	f043 0304 	orr.w	r3, r3, #4
 80081ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80081ee:	4b07      	ldr	r3, [pc, #28]	@ (800820c <HAL_TIM_Base_MspInit+0x60>)
 80081f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081f2:	f003 0304 	and.w	r3, r3, #4
 80081f6:	60bb      	str	r3, [r7, #8]
 80081f8:	68bb      	ldr	r3, [r7, #8]
}
 80081fa:	bf00      	nop
 80081fc:	3714      	adds	r7, #20
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	40000400 	.word	0x40000400
 800820c:	40021000 	.word	0x40021000
 8008210:	40000800 	.word	0x40000800

08008214 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b08a      	sub	sp, #40	@ 0x28
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800821c:	f107 0314 	add.w	r3, r7, #20
 8008220:	2200      	movs	r2, #0
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	605a      	str	r2, [r3, #4]
 8008226:	609a      	str	r2, [r3, #8]
 8008228:	60da      	str	r2, [r3, #12]
 800822a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a23      	ldr	r2, [pc, #140]	@ (80082c0 <HAL_TIM_MspPostInit+0xac>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d11e      	bne.n	8008274 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008236:	4b23      	ldr	r3, [pc, #140]	@ (80082c4 <HAL_TIM_MspPostInit+0xb0>)
 8008238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800823a:	4a22      	ldr	r2, [pc, #136]	@ (80082c4 <HAL_TIM_MspPostInit+0xb0>)
 800823c:	f043 0301 	orr.w	r3, r3, #1
 8008240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008242:	4b20      	ldr	r3, [pc, #128]	@ (80082c4 <HAL_TIM_MspPostInit+0xb0>)
 8008244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008246:	f003 0301 	and.w	r3, r3, #1
 800824a:	613b      	str	r3, [r7, #16]
 800824c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800824e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8008252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008254:	2302      	movs	r3, #2
 8008256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008258:	2300      	movs	r3, #0
 800825a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800825c:	2300      	movs	r3, #0
 800825e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008260:	2301      	movs	r3, #1
 8008262:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008264:	f107 0314 	add.w	r3, r7, #20
 8008268:	4619      	mov	r1, r3
 800826a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800826e:	f006 fb23 	bl	800e8b8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008272:	e021      	b.n	80082b8 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a13      	ldr	r2, [pc, #76]	@ (80082c8 <HAL_TIM_MspPostInit+0xb4>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d11c      	bne.n	80082b8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800827e:	4b11      	ldr	r3, [pc, #68]	@ (80082c4 <HAL_TIM_MspPostInit+0xb0>)
 8008280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008282:	4a10      	ldr	r2, [pc, #64]	@ (80082c4 <HAL_TIM_MspPostInit+0xb0>)
 8008284:	f043 0304 	orr.w	r3, r3, #4
 8008288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800828a:	4b0e      	ldr	r3, [pc, #56]	@ (80082c4 <HAL_TIM_MspPostInit+0xb0>)
 800828c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800828e:	f003 0304 	and.w	r3, r3, #4
 8008292:	60fb      	str	r3, [r7, #12]
 8008294:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8008296:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800829a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800829c:	2302      	movs	r3, #2
 800829e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082a0:	2300      	movs	r3, #0
 80082a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082a4:	2300      	movs	r3, #0
 80082a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80082a8:	2302      	movs	r3, #2
 80082aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082ac:	f107 0314 	add.w	r3, r7, #20
 80082b0:	4619      	mov	r1, r3
 80082b2:	4806      	ldr	r0, [pc, #24]	@ (80082cc <HAL_TIM_MspPostInit+0xb8>)
 80082b4:	f006 fb00 	bl	800e8b8 <HAL_GPIO_Init>
}
 80082b8:	bf00      	nop
 80082ba:	3728      	adds	r7, #40	@ 0x28
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	40012c00 	.word	0x40012c00
 80082c4:	40021000 	.word	0x40021000
 80082c8:	40000400 	.word	0x40000400
 80082cc:	48000800 	.word	0x48000800

080082d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b0ae      	sub	sp, #184	@ 0xb8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082d8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80082dc:	2200      	movs	r2, #0
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	605a      	str	r2, [r3, #4]
 80082e2:	609a      	str	r2, [r3, #8]
 80082e4:	60da      	str	r2, [r3, #12]
 80082e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80082e8:	f107 031c 	add.w	r3, r7, #28
 80082ec:	2288      	movs	r2, #136	@ 0x88
 80082ee:	2100      	movs	r1, #0
 80082f0:	4618      	mov	r0, r3
 80082f2:	f00e fb75 	bl	80169e0 <memset>
  if(huart->Instance==UART4)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a6b      	ldr	r2, [pc, #428]	@ (80084a8 <HAL_UART_MspInit+0x1d8>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d13c      	bne.n	800837a <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8008300:	2308      	movs	r3, #8
 8008302:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8008304:	2300      	movs	r3, #0
 8008306:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008308:	f107 031c 	add.w	r3, r7, #28
 800830c:	4618      	mov	r0, r3
 800830e:	f008 fd5b 	bl	8010dc8 <HAL_RCCEx_PeriphCLKConfig>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d001      	beq.n	800831c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8008318:	f7fd fb66 	bl	80059e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800831c:	4b63      	ldr	r3, [pc, #396]	@ (80084ac <HAL_UART_MspInit+0x1dc>)
 800831e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008320:	4a62      	ldr	r2, [pc, #392]	@ (80084ac <HAL_UART_MspInit+0x1dc>)
 8008322:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008326:	6593      	str	r3, [r2, #88]	@ 0x58
 8008328:	4b60      	ldr	r3, [pc, #384]	@ (80084ac <HAL_UART_MspInit+0x1dc>)
 800832a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800832c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008330:	61bb      	str	r3, [r7, #24]
 8008332:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008334:	4b5d      	ldr	r3, [pc, #372]	@ (80084ac <HAL_UART_MspInit+0x1dc>)
 8008336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008338:	4a5c      	ldr	r2, [pc, #368]	@ (80084ac <HAL_UART_MspInit+0x1dc>)
 800833a:	f043 0301 	orr.w	r3, r3, #1
 800833e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008340:	4b5a      	ldr	r3, [pc, #360]	@ (80084ac <HAL_UART_MspInit+0x1dc>)
 8008342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008344:	f003 0301 	and.w	r3, r3, #1
 8008348:	617b      	str	r3, [r7, #20]
 800834a:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800834c:	2301      	movs	r3, #1
 800834e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008352:	2312      	movs	r3, #18
 8008354:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008358:	2301      	movs	r3, #1
 800835a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800835e:	2303      	movs	r3, #3
 8008360:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8008364:	2308      	movs	r3, #8
 8008366:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800836a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800836e:	4619      	mov	r1, r3
 8008370:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008374:	f006 faa0 	bl	800e8b8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8008378:	e092      	b.n	80084a0 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART1)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a4c      	ldr	r2, [pc, #304]	@ (80084b0 <HAL_UART_MspInit+0x1e0>)
 8008380:	4293      	cmp	r3, r2
 8008382:	f040 808d 	bne.w	80084a0 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008386:	2301      	movs	r3, #1
 8008388:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800838a:	2300      	movs	r3, #0
 800838c:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800838e:	f107 031c 	add.w	r3, r7, #28
 8008392:	4618      	mov	r0, r3
 8008394:	f008 fd18 	bl	8010dc8 <HAL_RCCEx_PeriphCLKConfig>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800839e:	f7fd fb23 	bl	80059e8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80083a2:	4b42      	ldr	r3, [pc, #264]	@ (80084ac <HAL_UART_MspInit+0x1dc>)
 80083a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083a6:	4a41      	ldr	r2, [pc, #260]	@ (80084ac <HAL_UART_MspInit+0x1dc>)
 80083a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80083ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80083ae:	4b3f      	ldr	r3, [pc, #252]	@ (80084ac <HAL_UART_MspInit+0x1dc>)
 80083b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083b6:	613b      	str	r3, [r7, #16]
 80083b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083ba:	4b3c      	ldr	r3, [pc, #240]	@ (80084ac <HAL_UART_MspInit+0x1dc>)
 80083bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083be:	4a3b      	ldr	r2, [pc, #236]	@ (80084ac <HAL_UART_MspInit+0x1dc>)
 80083c0:	f043 0302 	orr.w	r3, r3, #2
 80083c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80083c6:	4b39      	ldr	r3, [pc, #228]	@ (80084ac <HAL_UART_MspInit+0x1dc>)
 80083c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083ca:	f003 0302 	and.w	r3, r3, #2
 80083ce:	60fb      	str	r3, [r7, #12]
 80083d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 80083d2:	23d8      	movs	r3, #216	@ 0xd8
 80083d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083d8:	2302      	movs	r3, #2
 80083da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083de:	2300      	movs	r3, #0
 80083e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083e4:	2303      	movs	r3, #3
 80083e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80083ea:	2307      	movs	r3, #7
 80083ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083f0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80083f4:	4619      	mov	r1, r3
 80083f6:	482f      	ldr	r0, [pc, #188]	@ (80084b4 <HAL_UART_MspInit+0x1e4>)
 80083f8:	f006 fa5e 	bl	800e8b8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80083fc:	4b2e      	ldr	r3, [pc, #184]	@ (80084b8 <HAL_UART_MspInit+0x1e8>)
 80083fe:	4a2f      	ldr	r2, [pc, #188]	@ (80084bc <HAL_UART_MspInit+0x1ec>)
 8008400:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8008402:	4b2d      	ldr	r3, [pc, #180]	@ (80084b8 <HAL_UART_MspInit+0x1e8>)
 8008404:	2202      	movs	r2, #2
 8008406:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008408:	4b2b      	ldr	r3, [pc, #172]	@ (80084b8 <HAL_UART_MspInit+0x1e8>)
 800840a:	2200      	movs	r2, #0
 800840c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800840e:	4b2a      	ldr	r3, [pc, #168]	@ (80084b8 <HAL_UART_MspInit+0x1e8>)
 8008410:	2200      	movs	r2, #0
 8008412:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008414:	4b28      	ldr	r3, [pc, #160]	@ (80084b8 <HAL_UART_MspInit+0x1e8>)
 8008416:	2280      	movs	r2, #128	@ 0x80
 8008418:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800841a:	4b27      	ldr	r3, [pc, #156]	@ (80084b8 <HAL_UART_MspInit+0x1e8>)
 800841c:	2200      	movs	r2, #0
 800841e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008420:	4b25      	ldr	r3, [pc, #148]	@ (80084b8 <HAL_UART_MspInit+0x1e8>)
 8008422:	2200      	movs	r2, #0
 8008424:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8008426:	4b24      	ldr	r3, [pc, #144]	@ (80084b8 <HAL_UART_MspInit+0x1e8>)
 8008428:	2200      	movs	r2, #0
 800842a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800842c:	4b22      	ldr	r3, [pc, #136]	@ (80084b8 <HAL_UART_MspInit+0x1e8>)
 800842e:	2200      	movs	r2, #0
 8008430:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008432:	4821      	ldr	r0, [pc, #132]	@ (80084b8 <HAL_UART_MspInit+0x1e8>)
 8008434:	f005 f93a 	bl	800d6ac <HAL_DMA_Init>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <HAL_UART_MspInit+0x172>
      Error_Handler();
 800843e:	f7fd fad3 	bl	80059e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a1c      	ldr	r2, [pc, #112]	@ (80084b8 <HAL_UART_MspInit+0x1e8>)
 8008446:	675a      	str	r2, [r3, #116]	@ 0x74
 8008448:	4a1b      	ldr	r2, [pc, #108]	@ (80084b8 <HAL_UART_MspInit+0x1e8>)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800844e:	4b1c      	ldr	r3, [pc, #112]	@ (80084c0 <HAL_UART_MspInit+0x1f0>)
 8008450:	4a1c      	ldr	r2, [pc, #112]	@ (80084c4 <HAL_UART_MspInit+0x1f4>)
 8008452:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8008454:	4b1a      	ldr	r3, [pc, #104]	@ (80084c0 <HAL_UART_MspInit+0x1f0>)
 8008456:	2202      	movs	r2, #2
 8008458:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800845a:	4b19      	ldr	r3, [pc, #100]	@ (80084c0 <HAL_UART_MspInit+0x1f0>)
 800845c:	2210      	movs	r2, #16
 800845e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008460:	4b17      	ldr	r3, [pc, #92]	@ (80084c0 <HAL_UART_MspInit+0x1f0>)
 8008462:	2200      	movs	r2, #0
 8008464:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008466:	4b16      	ldr	r3, [pc, #88]	@ (80084c0 <HAL_UART_MspInit+0x1f0>)
 8008468:	2280      	movs	r2, #128	@ 0x80
 800846a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800846c:	4b14      	ldr	r3, [pc, #80]	@ (80084c0 <HAL_UART_MspInit+0x1f0>)
 800846e:	2200      	movs	r2, #0
 8008470:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008472:	4b13      	ldr	r3, [pc, #76]	@ (80084c0 <HAL_UART_MspInit+0x1f0>)
 8008474:	2200      	movs	r2, #0
 8008476:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8008478:	4b11      	ldr	r3, [pc, #68]	@ (80084c0 <HAL_UART_MspInit+0x1f0>)
 800847a:	2200      	movs	r2, #0
 800847c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800847e:	4b10      	ldr	r3, [pc, #64]	@ (80084c0 <HAL_UART_MspInit+0x1f0>)
 8008480:	2200      	movs	r2, #0
 8008482:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008484:	480e      	ldr	r0, [pc, #56]	@ (80084c0 <HAL_UART_MspInit+0x1f0>)
 8008486:	f005 f911 	bl	800d6ac <HAL_DMA_Init>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8008490:	f7fd faaa 	bl	80059e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a0a      	ldr	r2, [pc, #40]	@ (80084c0 <HAL_UART_MspInit+0x1f0>)
 8008498:	671a      	str	r2, [r3, #112]	@ 0x70
 800849a:	4a09      	ldr	r2, [pc, #36]	@ (80084c0 <HAL_UART_MspInit+0x1f0>)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80084a0:	bf00      	nop
 80084a2:	37b8      	adds	r7, #184	@ 0xb8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	40004c00 	.word	0x40004c00
 80084ac:	40021000 	.word	0x40021000
 80084b0:	40013800 	.word	0x40013800
 80084b4:	48000400 	.word	0x48000400
 80084b8:	20000544 	.word	0x20000544
 80084bc:	40020058 	.word	0x40020058
 80084c0:	2000058c 	.word	0x2000058c
 80084c4:	40020044 	.word	0x40020044

080084c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80084c8:	b480      	push	{r7}
 80084ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80084cc:	bf00      	nop
 80084ce:	e7fd      	b.n	80084cc <NMI_Handler+0x4>

080084d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80084d0:	b480      	push	{r7}
 80084d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80084d4:	bf00      	nop
 80084d6:	e7fd      	b.n	80084d4 <HardFault_Handler+0x4>

080084d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80084d8:	b480      	push	{r7}
 80084da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80084dc:	bf00      	nop
 80084de:	e7fd      	b.n	80084dc <MemManage_Handler+0x4>

080084e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80084e0:	b480      	push	{r7}
 80084e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80084e4:	bf00      	nop
 80084e6:	e7fd      	b.n	80084e4 <BusFault_Handler+0x4>

080084e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80084e8:	b480      	push	{r7}
 80084ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80084ec:	bf00      	nop
 80084ee:	e7fd      	b.n	80084ec <UsageFault_Handler+0x4>

080084f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80084f0:	b480      	push	{r7}
 80084f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80084f4:	bf00      	nop
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80084fe:	b480      	push	{r7}
 8008500:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008502:	bf00      	nop
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800850c:	b480      	push	{r7}
 800850e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008510:	bf00      	nop
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800851e:	f003 f983 	bl	800b828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008522:	bf00      	nop
 8008524:	bd80      	pop	{r7, pc}
	...

08008528 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800852c:	4802      	ldr	r0, [pc, #8]	@ (8008538 <DMA1_Channel1_IRQHandler+0x10>)
 800852e:	f005 fa13 	bl	800d958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008532:	bf00      	nop
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	20000114 	.word	0x20000114

0800853c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8008540:	4802      	ldr	r0, [pc, #8]	@ (800854c <DMA1_Channel4_IRQHandler+0x10>)
 8008542:	f005 fa09 	bl	800d958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8008546:	bf00      	nop
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	2000058c 	.word	0x2000058c

08008550 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8008554:	4802      	ldr	r0, [pc, #8]	@ (8008560 <DMA1_Channel5_IRQHandler+0x10>)
 8008556:	f005 f9ff 	bl	800d958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800855a:	bf00      	nop
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	20000544 	.word	0x20000544

08008564 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8008568:	4802      	ldr	r0, [pc, #8]	@ (8008574 <RTC_Alarm_IRQHandler+0x10>)
 800856a:	f009 fc2d 	bl	8011dc8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800856e:	bf00      	nop
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	20000218 	.word	0x20000218

08008578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b086      	sub	sp, #24
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008580:	4a14      	ldr	r2, [pc, #80]	@ (80085d4 <_sbrk+0x5c>)
 8008582:	4b15      	ldr	r3, [pc, #84]	@ (80085d8 <_sbrk+0x60>)
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800858c:	4b13      	ldr	r3, [pc, #76]	@ (80085dc <_sbrk+0x64>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d102      	bne.n	800859a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008594:	4b11      	ldr	r3, [pc, #68]	@ (80085dc <_sbrk+0x64>)
 8008596:	4a12      	ldr	r2, [pc, #72]	@ (80085e0 <_sbrk+0x68>)
 8008598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800859a:	4b10      	ldr	r3, [pc, #64]	@ (80085dc <_sbrk+0x64>)
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4413      	add	r3, r2
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d207      	bcs.n	80085b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80085a8:	f00e fa6a 	bl	8016a80 <__errno>
 80085ac:	4603      	mov	r3, r0
 80085ae:	220c      	movs	r2, #12
 80085b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80085b2:	f04f 33ff 	mov.w	r3, #4294967295
 80085b6:	e009      	b.n	80085cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80085b8:	4b08      	ldr	r3, [pc, #32]	@ (80085dc <_sbrk+0x64>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80085be:	4b07      	ldr	r3, [pc, #28]	@ (80085dc <_sbrk+0x64>)
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4413      	add	r3, r2
 80085c6:	4a05      	ldr	r2, [pc, #20]	@ (80085dc <_sbrk+0x64>)
 80085c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80085ca:	68fb      	ldr	r3, [r7, #12]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3718      	adds	r7, #24
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	20018000 	.word	0x20018000
 80085d8:	00000400 	.word	0x00000400
 80085dc:	20005c4c 	.word	0x20005c4c
 80085e0:	20005da8 	.word	0x20005da8

080085e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80085e4:	b480      	push	{r7}
 80085e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80085e8:	4b06      	ldr	r3, [pc, #24]	@ (8008604 <SystemInit+0x20>)
 80085ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ee:	4a05      	ldr	r2, [pc, #20]	@ (8008604 <SystemInit+0x20>)
 80085f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80085f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80085f8:	bf00      	nop
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	e000ed00 	.word	0xe000ed00

08008608 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	4603      	mov	r3, r0
 8008610:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;

	switch (pdrv) {
 8008612:	79fb      	ldrb	r3, [r7, #7]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d002      	beq.n	800861e <disk_status+0x16>
 8008618:	2b01      	cmp	r3, #1
 800861a:	d00c      	beq.n	8008636 <disk_status+0x2e>
 800861c:	e017      	b.n	800864e <disk_status+0x46>
	case DEV_RAM :

		if(!psram_is_initialized())
 800861e:	f7ff fa9b 	bl	8007b58 <psram_is_initialized>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d102      	bne.n	800862e <disk_status+0x26>
		{
			stat = STA_NOINIT;
 8008628:	2301      	movs	r3, #1
 800862a:	73fb      	strb	r3, [r7, #15]
 800862c:	e001      	b.n	8008632 <disk_status+0x2a>
		}else{
			stat = 0;
 800862e:	2300      	movs	r3, #0
 8008630:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8008632:	7bfb      	ldrb	r3, [r7, #15]
 8008634:	e00c      	b.n	8008650 <disk_status+0x48>

	case DEV_MMC :

		if(!extflash_is_initialized())
 8008636:	f7fa ff9f 	bl	8003578 <extflash_is_initialized>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d102      	bne.n	8008646 <disk_status+0x3e>
		{
			stat = STA_NOINIT;
 8008640:	2301      	movs	r3, #1
 8008642:	73fb      	strb	r3, [r7, #15]
 8008644:	e001      	b.n	800864a <disk_status+0x42>
		}else{
			stat = 0;
 8008646:	2300      	movs	r3, #0
 8008648:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 800864a:	7bfb      	ldrb	r3, [r7, #15]
 800864c:	e000      	b.n	8008650 <disk_status+0x48>

	}
	return STA_NOINIT;
 800864e:	2301      	movs	r3, #1
}
 8008650:	4618      	mov	r0, r3
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	4603      	mov	r3, r0
 8008660:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;
	switch (pdrv) {
 8008662:	79fb      	ldrb	r3, [r7, #7]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d002      	beq.n	800866e <disk_initialize+0x16>
 8008668:	2b01      	cmp	r3, #1
 800866a:	d00c      	beq.n	8008686 <disk_initialize+0x2e>
 800866c:	e017      	b.n	800869e <disk_initialize+0x46>
	case DEV_RAM :

		if(psram_init() < 0)
 800866e:	f7ff faa1 	bl	8007bb4 <psram_init>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	da02      	bge.n	800867e <disk_initialize+0x26>
		{
			stat = STA_NODISK;
 8008678:	2302      	movs	r3, #2
 800867a:	73fb      	strb	r3, [r7, #15]
 800867c:	e001      	b.n	8008682 <disk_initialize+0x2a>
		}else{
			stat = 0;
 800867e:	2300      	movs	r3, #0
 8008680:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8008682:	7bfb      	ldrb	r3, [r7, #15]
 8008684:	e00c      	b.n	80086a0 <disk_initialize+0x48>

	case DEV_MMC :

		if(extflash_init() < 0)
 8008686:	f7fa ff83 	bl	8003590 <extflash_init>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	da02      	bge.n	8008696 <disk_initialize+0x3e>
		{
			stat = STA_NODISK;
 8008690:	2302      	movs	r3, #2
 8008692:	73fb      	strb	r3, [r7, #15]
 8008694:	e001      	b.n	800869a <disk_initialize+0x42>
		}else{
			stat = 0;
 8008696:	2300      	movs	r3, #0
 8008698:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 800869a:	7bfb      	ldrb	r3, [r7, #15]
 800869c:	e000      	b.n	80086a0 <disk_initialize+0x48>

	}
	return STA_NOINIT;
 800869e:	2301      	movs	r3, #1
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60b9      	str	r1, [r7, #8]
 80086b0:	607a      	str	r2, [r7, #4]
 80086b2:	603b      	str	r3, [r7, #0]
 80086b4:	4603      	mov	r3, r0
 80086b6:	73fb      	strb	r3, [r7, #15]
	DRESULT res;
	int result;

	switch (pdrv) {
 80086b8:	7bfb      	ldrb	r3, [r7, #15]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d002      	beq.n	80086c4 <disk_read+0x1c>
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d010      	beq.n	80086e4 <disk_read+0x3c>
 80086c2:	e01e      	b.n	8008702 <disk_read+0x5a>
	case DEV_RAM :

		if(psram_sector_read_write(0, sector, count, buff) < 0)
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	683a      	ldr	r2, [r7, #0]
 80086c8:	6879      	ldr	r1, [r7, #4]
 80086ca:	2000      	movs	r0, #0
 80086cc:	f7ff f94a 	bl	8007964 <psram_sector_read_write>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	da02      	bge.n	80086dc <disk_read+0x34>
		{
			res = RES_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	75fb      	strb	r3, [r7, #23]
 80086da:	e001      	b.n	80086e0 <disk_read+0x38>
		}else{

			res = 0;
 80086dc:	2300      	movs	r3, #0
 80086de:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 80086e0:	7dfb      	ldrb	r3, [r7, #23]
 80086e2:	e00f      	b.n	8008704 <disk_read+0x5c>

	case DEV_MMC :

		if(extflash_sector_read(sector, count, buff) < 0)
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	6839      	ldr	r1, [r7, #0]
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f7fa fe29 	bl	8003340 <extflash_sector_read>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	da02      	bge.n	80086fa <disk_read+0x52>
		{
			res = RES_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	75fb      	strb	r3, [r7, #23]
 80086f8:	e001      	b.n	80086fe <disk_read+0x56>
		}else{

			res = 0;
 80086fa:	2300      	movs	r3, #0
 80086fc:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 80086fe:	7dfb      	ldrb	r3, [r7, #23]
 8008700:	e000      	b.n	8008704 <disk_read+0x5c>

	}

	return RES_PARERR;
 8008702:	2304      	movs	r3, #4
}
 8008704:	4618      	mov	r0, r3
 8008706:	3718      	adds	r7, #24
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	60b9      	str	r1, [r7, #8]
 8008714:	607a      	str	r2, [r7, #4]
 8008716:	603b      	str	r3, [r7, #0]
 8008718:	4603      	mov	r3, r0
 800871a:	73fb      	strb	r3, [r7, #15]
	DRESULT res = RES_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	75fb      	strb	r3, [r7, #23]

	switch (pdrv) {
 8008720:	7bfb      	ldrb	r3, [r7, #15]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d002      	beq.n	800872c <disk_write+0x20>
 8008726:	2b01      	cmp	r3, #1
 8008728:	d010      	beq.n	800874c <disk_write+0x40>
 800872a:	e01e      	b.n	800876a <disk_write+0x5e>
	case DEV_RAM :

		if(psram_sector_read_write(1, sector, count, (const uint8_t *)buff) < 0)
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	6879      	ldr	r1, [r7, #4]
 8008732:	2001      	movs	r0, #1
 8008734:	f7ff f916 	bl	8007964 <psram_sector_read_write>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	da02      	bge.n	8008744 <disk_write+0x38>
		{
			res = RES_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	75fb      	strb	r3, [r7, #23]
 8008742:	e001      	b.n	8008748 <disk_write+0x3c>
		}else{

			res = 0;
 8008744:	2300      	movs	r3, #0
 8008746:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8008748:	7dfb      	ldrb	r3, [r7, #23]
 800874a:	e00f      	b.n	800876c <disk_write+0x60>

	case DEV_MMC :

		if(extflash_sector_write(sector, count, buff) < 0)
 800874c:	68ba      	ldr	r2, [r7, #8]
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f7fa fe8a 	bl	800346a <extflash_sector_write>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	da02      	bge.n	8008762 <disk_write+0x56>
		{
			res = RES_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	75fb      	strb	r3, [r7, #23]
 8008760:	e001      	b.n	8008766 <disk_write+0x5a>
		}else{

			res = 0;
 8008762:	2300      	movs	r3, #0
 8008764:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8008766:	7dfb      	ldrb	r3, [r7, #23]
 8008768:	e000      	b.n	800876c <disk_write+0x60>

	}

	return RES_PARERR;
 800876a:	2304      	movs	r3, #4
}
 800876c:	4618      	mov	r0, r3
 800876e:	3718      	adds	r7, #24
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	4603      	mov	r3, r0
 800877c:	603a      	str	r2, [r7, #0]
 800877e:	71fb      	strb	r3, [r7, #7]
 8008780:	460b      	mov	r3, r1
 8008782:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_PARERR;
 8008784:	2304      	movs	r3, #4
 8008786:	73fb      	strb	r3, [r7, #15]

	switch (pdrv) {
 8008788:	79fb      	ldrb	r3, [r7, #7]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d002      	beq.n	8008794 <disk_ioctl+0x20>
 800878e:	2b01      	cmp	r3, #1
 8008790:	d036      	beq.n	8008800 <disk_ioctl+0x8c>
 8008792:	e06b      	b.n	800886c <disk_ioctl+0xf8>
	case DEV_RAM :

		if(!psram_is_initialized())return RES_NOTRDY;
 8008794:	f7ff f9e0 	bl	8007b58 <psram_is_initialized>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d101      	bne.n	80087a2 <disk_ioctl+0x2e>
 800879e:	2303      	movs	r3, #3
 80087a0:	e065      	b.n	800886e <disk_ioctl+0xfa>

		switch(cmd)
 80087a2:	79bb      	ldrb	r3, [r7, #6]
 80087a4:	2b04      	cmp	r3, #4
 80087a6:	d826      	bhi.n	80087f6 <disk_ioctl+0x82>
 80087a8:	a201      	add	r2, pc, #4	@ (adr r2, 80087b0 <disk_ioctl+0x3c>)
 80087aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ae:	bf00      	nop
 80087b0:	080087f1 	.word	0x080087f1
 80087b4:	080087c5 	.word	0x080087c5
 80087b8:	080087d5 	.word	0x080087d5
 80087bc:	080087e5 	.word	0x080087e5
 80087c0:	080087f1 	.word	0x080087f1
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = psram_get_sector_count();
 80087c4:	f7ff f9de 	bl	8007b84 <psram_get_sector_count>
 80087c8:	4602      	mov	r2, r0
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	601a      	str	r2, [r3, #0]
				res = 0;
 80087ce:	2300      	movs	r3, #0
 80087d0:	73fb      	strb	r3, [r7, #15]
				break;
 80087d2:	e013      	b.n	80087fc <disk_ioctl+0x88>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = psram_get_sector_size();
 80087d4:	f7ff f9cc 	bl	8007b70 <psram_get_sector_size>
 80087d8:	4602      	mov	r2, r0
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	601a      	str	r2, [r3, #0]
				res = 0;
 80087de:	2300      	movs	r3, #0
 80087e0:	73fb      	strb	r3, [r7, #15]
				break;
 80087e2:	e00b      	b.n	80087fc <disk_ioctl+0x88>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	2201      	movs	r2, #1
 80087e8:	601a      	str	r2, [r3, #0]
				res = 0;
 80087ea:	2300      	movs	r3, #0
 80087ec:	73fb      	strb	r3, [r7, #15]
				break;
 80087ee:	e005      	b.n	80087fc <disk_ioctl+0x88>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 80087f0:	2300      	movs	r3, #0
 80087f2:	73fb      	strb	r3, [r7, #15]
				break;
 80087f4:	e002      	b.n	80087fc <disk_ioctl+0x88>

			default:
				res = RES_PARERR;
 80087f6:	2304      	movs	r3, #4
 80087f8:	73fb      	strb	r3, [r7, #15]
				break;
 80087fa:	bf00      	nop
		}

		return res;
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
 80087fe:	e036      	b.n	800886e <disk_ioctl+0xfa>

	case DEV_MMC :

		if(!extflash_is_initialized())return RES_NOTRDY;
 8008800:	f7fa feba 	bl	8003578 <extflash_is_initialized>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d101      	bne.n	800880e <disk_ioctl+0x9a>
 800880a:	2303      	movs	r3, #3
 800880c:	e02f      	b.n	800886e <disk_ioctl+0xfa>

		switch(cmd)
 800880e:	79bb      	ldrb	r3, [r7, #6]
 8008810:	2b04      	cmp	r3, #4
 8008812:	d826      	bhi.n	8008862 <disk_ioctl+0xee>
 8008814:	a201      	add	r2, pc, #4	@ (adr r2, 800881c <disk_ioctl+0xa8>)
 8008816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881a:	bf00      	nop
 800881c:	0800885d 	.word	0x0800885d
 8008820:	08008831 	.word	0x08008831
 8008824:	08008841 	.word	0x08008841
 8008828:	08008851 	.word	0x08008851
 800882c:	0800885d 	.word	0x0800885d
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = extflash_get_sector_count();
 8008830:	f7fa fe96 	bl	8003560 <extflash_get_sector_count>
 8008834:	4602      	mov	r2, r0
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	601a      	str	r2, [r3, #0]
				res = 0;
 800883a:	2300      	movs	r3, #0
 800883c:	73fb      	strb	r3, [r7, #15]
				break;
 800883e:	e013      	b.n	8008868 <disk_ioctl+0xf4>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = extflash_get_sector_size();
 8008840:	f7fa fe85 	bl	800354e <extflash_get_sector_size>
 8008844:	4602      	mov	r2, r0
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	601a      	str	r2, [r3, #0]
				res = 0;
 800884a:	2300      	movs	r3, #0
 800884c:	73fb      	strb	r3, [r7, #15]
				break;
 800884e:	e00b      	b.n	8008868 <disk_ioctl+0xf4>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	2201      	movs	r2, #1
 8008854:	601a      	str	r2, [r3, #0]
				res = 0;
 8008856:	2300      	movs	r3, #0
 8008858:	73fb      	strb	r3, [r7, #15]
				break;
 800885a:	e005      	b.n	8008868 <disk_ioctl+0xf4>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 800885c:	2300      	movs	r3, #0
 800885e:	73fb      	strb	r3, [r7, #15]
				break;
 8008860:	e002      	b.n	8008868 <disk_ioctl+0xf4>

			default:
				res = RES_PARERR;
 8008862:	2304      	movs	r3, #4
 8008864:	73fb      	strb	r3, [r7, #15]
				break;
 8008866:	bf00      	nop
		}

		return res;
 8008868:	7bfb      	ldrb	r3, [r7, #15]
 800886a:	e000      	b.n	800886e <disk_ioctl+0xfa>

	}

	return RES_PARERR;
 800886c:	2304      	movs	r3, #4
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop

08008878 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	3301      	adds	r3, #1
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008888:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800888c:	021b      	lsls	r3, r3, #8
 800888e:	b21a      	sxth	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	b21b      	sxth	r3, r3
 8008896:	4313      	orrs	r3, r2
 8008898:	b21b      	sxth	r3, r3
 800889a:	81fb      	strh	r3, [r7, #14]
	return rv;
 800889c:	89fb      	ldrh	r3, [r7, #14]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3714      	adds	r7, #20
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr

080088aa <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80088aa:	b480      	push	{r7}
 80088ac:	b085      	sub	sp, #20
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	3303      	adds	r3, #3
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	021b      	lsls	r3, r3, #8
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	3202      	adds	r2, #2
 80088c2:	7812      	ldrb	r2, [r2, #0]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	021b      	lsls	r3, r3, #8
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	3201      	adds	r2, #1
 80088d0:	7812      	ldrb	r2, [r2, #0]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	021b      	lsls	r3, r3, #8
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	7812      	ldrb	r2, [r2, #0]
 80088de:	4313      	orrs	r3, r2
 80088e0:	60fb      	str	r3, [r7, #12]
	return rv;
 80088e2:	68fb      	ldr	r3, [r7, #12]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	460b      	mov	r3, r1
 80088fa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	1c5a      	adds	r2, r3, #1
 8008900:	607a      	str	r2, [r7, #4]
 8008902:	887a      	ldrh	r2, [r7, #2]
 8008904:	b2d2      	uxtb	r2, r2
 8008906:	701a      	strb	r2, [r3, #0]
 8008908:	887b      	ldrh	r3, [r7, #2]
 800890a:	0a1b      	lsrs	r3, r3, #8
 800890c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	1c5a      	adds	r2, r3, #1
 8008912:	607a      	str	r2, [r7, #4]
 8008914:	887a      	ldrh	r2, [r7, #2]
 8008916:	b2d2      	uxtb	r2, r2
 8008918:	701a      	strb	r2, [r3, #0]
}
 800891a:	bf00      	nop
 800891c:	370c      	adds	r7, #12
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr

08008926 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008926:	b480      	push	{r7}
 8008928:	b083      	sub	sp, #12
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
 800892e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	1c5a      	adds	r2, r3, #1
 8008934:	607a      	str	r2, [r7, #4]
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	b2d2      	uxtb	r2, r2
 800893a:	701a      	strb	r2, [r3, #0]
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	0a1b      	lsrs	r3, r3, #8
 8008940:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	1c5a      	adds	r2, r3, #1
 8008946:	607a      	str	r2, [r7, #4]
 8008948:	683a      	ldr	r2, [r7, #0]
 800894a:	b2d2      	uxtb	r2, r2
 800894c:	701a      	strb	r2, [r3, #0]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	0a1b      	lsrs	r3, r3, #8
 8008952:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	1c5a      	adds	r2, r3, #1
 8008958:	607a      	str	r2, [r7, #4]
 800895a:	683a      	ldr	r2, [r7, #0]
 800895c:	b2d2      	uxtb	r2, r2
 800895e:	701a      	strb	r2, [r3, #0]
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	0a1b      	lsrs	r3, r3, #8
 8008964:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	1c5a      	adds	r2, r3, #1
 800896a:	607a      	str	r2, [r7, #4]
 800896c:	683a      	ldr	r2, [r7, #0]
 800896e:	b2d2      	uxtb	r2, r2
 8008970:	701a      	strb	r2, [r3, #0]
}
 8008972:	bf00      	nop
 8008974:	370c      	adds	r7, #12
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 800897e:	b480      	push	{r7}
 8008980:	b083      	sub	sp, #12
 8008982:	af00      	add	r7, sp, #0
 8008984:	4603      	mov	r3, r0
 8008986:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8008988:	79fb      	ldrb	r3, [r7, #7]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <dbc_1st+0x14>
 800898e:	2300      	movs	r3, #0
 8008990:	e000      	b.n	8008994 <dbc_1st+0x16>
#endif
	return 0;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	4603      	mov	r3, r0
 80089a8:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 80089aa:	79fb      	ldrb	r3, [r7, #7]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d001      	beq.n	80089b4 <dbc_2nd+0x14>
 80089b0:	2300      	movs	r3, #0
 80089b2:	e000      	b.n	80089b6 <dbc_2nd+0x16>
#endif
	return 0;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr

080089c2 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b084      	sub	sp, #16
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	791b      	ldrb	r3, [r3, #4]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d02c      	beq.n	8008a30 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	7858      	ldrb	r0, [r3, #1]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089e4:	2301      	movs	r3, #1
 80089e6:	f7ff fe91 	bl	800870c <disk_write>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d11d      	bne.n	8008a2c <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089fe:	1ad2      	subs	r2, r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	69db      	ldr	r3, [r3, #28]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d213      	bcs.n	8008a30 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	78db      	ldrb	r3, [r3, #3]
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d10f      	bne.n	8008a30 <sync_window+0x6e>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	7858      	ldrb	r0, [r3, #1]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	69db      	ldr	r3, [r3, #28]
 8008a22:	441a      	add	r2, r3
 8008a24:	2301      	movs	r3, #1
 8008a26:	f7ff fe71 	bl	800870c <disk_write>
 8008a2a:	e001      	b.n	8008a30 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b084      	sub	sp, #16
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
 8008a42:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a4c:	683a      	ldr	r2, [r7, #0]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d01b      	beq.n	8008a8a <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7ff ffb5 	bl	80089c2 <sync_window>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d113      	bne.n	8008a8a <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	7858      	ldrb	r0, [r3, #1]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	f7ff fe1a 	bl	80086a8 <disk_read>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d004      	beq.n	8008a84 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8008a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a7e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	683a      	ldr	r2, [r7, #0]
 8008a88:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8008a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f7ff ff90 	bl	80089c2 <sync_window>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008aa6:	7bfb      	ldrb	r3, [r7, #15]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d158      	bne.n	8008b5e <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	2b03      	cmp	r3, #3
 8008ab2:	d148      	bne.n	8008b46 <sync_fs+0xb2>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	795b      	ldrb	r3, [r3, #5]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d144      	bne.n	8008b46 <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	3334      	adds	r3, #52	@ 0x34
 8008ac0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f00d ff8a 	bl	80169e0 <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	3334      	adds	r3, #52	@ 0x34
 8008ad0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008ad4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7ff ff09 	bl	80088f0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	3334      	adds	r3, #52	@ 0x34
 8008ae2:	4921      	ldr	r1, [pc, #132]	@ (8008b68 <sync_fs+0xd4>)
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7ff ff1e 	bl	8008926 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	3334      	adds	r3, #52	@ 0x34
 8008aee:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008af2:	491e      	ldr	r1, [pc, #120]	@ (8008b6c <sync_fs+0xd8>)
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7ff ff16 	bl	8008926 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	3334      	adds	r3, #52	@ 0x34
 8008afe:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	4619      	mov	r1, r3
 8008b08:	4610      	mov	r0, r2
 8008b0a:	f7ff ff0c 	bl	8008926 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	3334      	adds	r3, #52	@ 0x34
 8008b12:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	4610      	mov	r0, r2
 8008b1e:	f7ff ff02 	bl	8008926 <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a1b      	ldr	r3, [r3, #32]
 8008b26:	1c5a      	adds	r2, r3, #1
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	7858      	ldrb	r0, [r3, #1]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	f7ff fde6 	bl	800870c <disk_write>
			fs->fsi_flag = 0;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	785b      	ldrb	r3, [r3, #1]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7ff fe10 	bl	8008774 <disk_ioctl>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d001      	beq.n	8008b5e <sync_fs+0xca>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	41615252 	.word	0x41615252
 8008b6c:	61417272 	.word	0x61417272

08008b70 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	3b02      	subs	r3, #2
 8008b7e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	3b02      	subs	r3, #2
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d301      	bcc.n	8008b90 <clst2sect+0x20>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	e008      	b.n	8008ba2 <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	895b      	ldrh	r3, [r3, #10]
 8008b98:	4619      	mov	r1, r3
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ba0:	4413      	add	r3, r2
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	370c      	adds	r7, #12
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b086      	sub	sp, #24
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
 8008bb6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d904      	bls.n	8008bce <get_fat+0x20>
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	683a      	ldr	r2, [r7, #0]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d302      	bcc.n	8008bd4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008bce:	2301      	movs	r3, #1
 8008bd0:	617b      	str	r3, [r7, #20]
 8008bd2:	e0ba      	b.n	8008d4a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	2b03      	cmp	r3, #3
 8008be0:	f000 8082 	beq.w	8008ce8 <get_fat+0x13a>
 8008be4:	2b03      	cmp	r3, #3
 8008be6:	f300 80a6 	bgt.w	8008d36 <get_fat+0x188>
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d002      	beq.n	8008bf4 <get_fat+0x46>
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d055      	beq.n	8008c9e <get_fat+0xf0>
 8008bf2:	e0a0      	b.n	8008d36 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	60fb      	str	r3, [r7, #12]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	085b      	lsrs	r3, r3, #1
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	4413      	add	r3, r2
 8008c00:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	899b      	ldrh	r3, [r3, #12]
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c12:	4413      	add	r3, r2
 8008c14:	4619      	mov	r1, r3
 8008c16:	6938      	ldr	r0, [r7, #16]
 8008c18:	f7ff ff0f 	bl	8008a3a <move_window>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f040 808c 	bne.w	8008d3c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	1c5a      	adds	r2, r3, #1
 8008c28:	60fa      	str	r2, [r7, #12]
 8008c2a:	693a      	ldr	r2, [r7, #16]
 8008c2c:	8992      	ldrh	r2, [r2, #12]
 8008c2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c32:	fb01 f202 	mul.w	r2, r1, r2
 8008c36:	1a9b      	subs	r3, r3, r2
 8008c38:	693a      	ldr	r2, [r7, #16]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008c40:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	899b      	ldrh	r3, [r3, #12]
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c52:	4413      	add	r3, r2
 8008c54:	4619      	mov	r1, r3
 8008c56:	6938      	ldr	r0, [r7, #16]
 8008c58:	f7ff feef 	bl	8008a3a <move_window>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d16e      	bne.n	8008d40 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	899b      	ldrh	r3, [r3, #12]
 8008c66:	461a      	mov	r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c6e:	fb01 f202 	mul.w	r2, r1, r2
 8008c72:	1a9b      	subs	r3, r3, r2
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	4413      	add	r3, r2
 8008c78:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008c7c:	021b      	lsls	r3, r3, #8
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d002      	beq.n	8008c94 <get_fat+0xe6>
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	091b      	lsrs	r3, r3, #4
 8008c92:	e002      	b.n	8008c9a <get_fat+0xec>
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c9a:	617b      	str	r3, [r7, #20]
			break;
 8008c9c:	e055      	b.n	8008d4a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	899b      	ldrh	r3, [r3, #12]
 8008ca6:	085b      	lsrs	r3, r3, #1
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	4619      	mov	r1, r3
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8008cb2:	4413      	add	r3, r2
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	6938      	ldr	r0, [r7, #16]
 8008cb8:	f7ff febf 	bl	8008a3a <move_window>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d140      	bne.n	8008d44 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	005b      	lsls	r3, r3, #1
 8008ccc:	693a      	ldr	r2, [r7, #16]
 8008cce:	8992      	ldrh	r2, [r2, #12]
 8008cd0:	fbb3 f0f2 	udiv	r0, r3, r2
 8008cd4:	fb00 f202 	mul.w	r2, r0, r2
 8008cd8:	1a9b      	subs	r3, r3, r2
 8008cda:	440b      	add	r3, r1
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7ff fdcb 	bl	8008878 <ld_word>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	617b      	str	r3, [r7, #20]
			break;
 8008ce6:	e030      	b.n	8008d4a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	899b      	ldrh	r3, [r3, #12]
 8008cf0:	089b      	lsrs	r3, r3, #2
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	fbb3 f3f1 	udiv	r3, r3, r1
 8008cfc:	4413      	add	r3, r2
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6938      	ldr	r0, [r7, #16]
 8008d02:	f7ff fe9a 	bl	8008a3a <move_window>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d11d      	bne.n	8008d48 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	693a      	ldr	r2, [r7, #16]
 8008d18:	8992      	ldrh	r2, [r2, #12]
 8008d1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d1e:	fb00 f202 	mul.w	r2, r0, r2
 8008d22:	1a9b      	subs	r3, r3, r2
 8008d24:	440b      	add	r3, r1
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7ff fdbf 	bl	80088aa <ld_dword>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008d32:	617b      	str	r3, [r7, #20]
			break;
 8008d34:	e009      	b.n	8008d4a <get_fat+0x19c>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 8008d36:	2301      	movs	r3, #1
 8008d38:	617b      	str	r3, [r7, #20]
 8008d3a:	e006      	b.n	8008d4a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d3c:	bf00      	nop
 8008d3e:	e004      	b.n	8008d4a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d40:	bf00      	nop
 8008d42:	e002      	b.n	8008d4a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008d44:	bf00      	nop
 8008d46:	e000      	b.n	8008d4a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008d48:	bf00      	nop
		}
	}

	return val;
 8008d4a:	697b      	ldr	r3, [r7, #20]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3718      	adds	r7, #24
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008d54:	b590      	push	{r4, r7, lr}
 8008d56:	b089      	sub	sp, #36	@ 0x24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008d60:	2302      	movs	r3, #2
 8008d62:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	f240 8109 	bls.w	8008f7e <put_fat+0x22a>
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	699b      	ldr	r3, [r3, #24]
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	f080 8103 	bcs.w	8008f7e <put_fat+0x22a>
		switch (fs->fs_type) {
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	2b03      	cmp	r3, #3
 8008d7e:	f000 80b6 	beq.w	8008eee <put_fat+0x19a>
 8008d82:	2b03      	cmp	r3, #3
 8008d84:	f300 80fb 	bgt.w	8008f7e <put_fat+0x22a>
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d003      	beq.n	8008d94 <put_fat+0x40>
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	f000 8083 	beq.w	8008e98 <put_fat+0x144>
 8008d92:	e0f4      	b.n	8008f7e <put_fat+0x22a>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	61bb      	str	r3, [r7, #24]
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	085b      	lsrs	r3, r3, #1
 8008d9c:	69ba      	ldr	r2, [r7, #24]
 8008d9e:	4413      	add	r3, r2
 8008da0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	899b      	ldrh	r3, [r3, #12]
 8008daa:	4619      	mov	r1, r3
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8008db2:	4413      	add	r3, r2
 8008db4:	4619      	mov	r1, r3
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f7ff fe3f 	bl	8008a3a <move_window>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008dc0:	7ffb      	ldrb	r3, [r7, #31]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f040 80d4 	bne.w	8008f70 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	1c5a      	adds	r2, r3, #1
 8008dd2:	61ba      	str	r2, [r7, #24]
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	8992      	ldrh	r2, [r2, #12]
 8008dd8:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ddc:	fb00 f202 	mul.w	r2, r0, r2
 8008de0:	1a9b      	subs	r3, r3, r2
 8008de2:	440b      	add	r3, r1
 8008de4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	f003 0301 	and.w	r3, r3, #1
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00d      	beq.n	8008e0c <put_fat+0xb8>
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	b25b      	sxtb	r3, r3
 8008df6:	f003 030f 	and.w	r3, r3, #15
 8008dfa:	b25a      	sxtb	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	b25b      	sxtb	r3, r3
 8008e00:	011b      	lsls	r3, r3, #4
 8008e02:	b25b      	sxtb	r3, r3
 8008e04:	4313      	orrs	r3, r2
 8008e06:	b25b      	sxtb	r3, r3
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	e001      	b.n	8008e10 <put_fat+0xbc>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	697a      	ldr	r2, [r7, #20]
 8008e12:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2201      	movs	r2, #1
 8008e18:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	899b      	ldrh	r3, [r3, #12]
 8008e22:	4619      	mov	r1, r3
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e2a:	4413      	add	r3, r2
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f7ff fe03 	bl	8008a3a <move_window>
 8008e34:	4603      	mov	r3, r0
 8008e36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e38:	7ffb      	ldrb	r3, [r7, #31]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	f040 809a 	bne.w	8008f74 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	899b      	ldrh	r3, [r3, #12]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e52:	fb00 f202 	mul.w	r2, r0, r2
 8008e56:	1a9b      	subs	r3, r3, r2
 8008e58:	440b      	add	r3, r1
 8008e5a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	f003 0301 	and.w	r3, r3, #1
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d003      	beq.n	8008e6e <put_fat+0x11a>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	091b      	lsrs	r3, r3, #4
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	e00e      	b.n	8008e8c <put_fat+0x138>
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	b25b      	sxtb	r3, r3
 8008e74:	f023 030f 	bic.w	r3, r3, #15
 8008e78:	b25a      	sxtb	r2, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	0a1b      	lsrs	r3, r3, #8
 8008e7e:	b25b      	sxtb	r3, r3
 8008e80:	f003 030f 	and.w	r3, r3, #15
 8008e84:	b25b      	sxtb	r3, r3
 8008e86:	4313      	orrs	r3, r2
 8008e88:	b25b      	sxtb	r3, r3
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2201      	movs	r2, #1
 8008e94:	711a      	strb	r2, [r3, #4]
			break;
 8008e96:	e072      	b.n	8008f7e <put_fat+0x22a>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	899b      	ldrh	r3, [r3, #12]
 8008ea0:	085b      	lsrs	r3, r3, #1
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	fbb3 f3f1 	udiv	r3, r3, r1
 8008eac:	4413      	add	r3, r2
 8008eae:	4619      	mov	r1, r3
 8008eb0:	68f8      	ldr	r0, [r7, #12]
 8008eb2:	f7ff fdc2 	bl	8008a3a <move_window>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008eba:	7ffb      	ldrb	r3, [r7, #31]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d15b      	bne.n	8008f78 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	005b      	lsls	r3, r3, #1
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	8992      	ldrh	r2, [r2, #12]
 8008ece:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ed2:	fb00 f202 	mul.w	r2, r0, r2
 8008ed6:	1a9b      	subs	r3, r3, r2
 8008ed8:	440b      	add	r3, r1
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	b292      	uxth	r2, r2
 8008ede:	4611      	mov	r1, r2
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7ff fd05 	bl	80088f0 <st_word>
			fs->wflag = 1;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	711a      	strb	r2, [r3, #4]
			break;
 8008eec:	e047      	b.n	8008f7e <put_fat+0x22a>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	899b      	ldrh	r3, [r3, #12]
 8008ef6:	089b      	lsrs	r3, r3, #2
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	4619      	mov	r1, r3
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f02:	4413      	add	r3, r2
 8008f04:	4619      	mov	r1, r3
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f7ff fd97 	bl	8008a3a <move_window>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f10:	7ffb      	ldrb	r3, [r7, #31]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d132      	bne.n	8008f7c <put_fat+0x228>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	8992      	ldrh	r2, [r2, #12]
 8008f2a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f2e:	fb00 f202 	mul.w	r2, r0, r2
 8008f32:	1a9b      	subs	r3, r3, r2
 8008f34:	440b      	add	r3, r1
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7ff fcb7 	bl	80088aa <ld_dword>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008f42:	4323      	orrs	r3, r4
 8008f44:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	8992      	ldrh	r2, [r2, #12]
 8008f54:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f58:	fb00 f202 	mul.w	r2, r0, r2
 8008f5c:	1a9b      	subs	r3, r3, r2
 8008f5e:	440b      	add	r3, r1
 8008f60:	6879      	ldr	r1, [r7, #4]
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7ff fcdf 	bl	8008926 <st_dword>
			fs->wflag = 1;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	711a      	strb	r2, [r3, #4]
			break;
 8008f6e:	e006      	b.n	8008f7e <put_fat+0x22a>
			if (res != FR_OK) break;
 8008f70:	bf00      	nop
 8008f72:	e004      	b.n	8008f7e <put_fat+0x22a>
			if (res != FR_OK) break;
 8008f74:	bf00      	nop
 8008f76:	e002      	b.n	8008f7e <put_fat+0x22a>
			if (res != FR_OK) break;
 8008f78:	bf00      	nop
 8008f7a:	e000      	b.n	8008f7e <put_fat+0x22a>
			if (res != FR_OK) break;
 8008f7c:	bf00      	nop
		}
	}
	return res;
 8008f7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3724      	adds	r7, #36	@ 0x24
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd90      	pop	{r4, r7, pc}

08008f88 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b088      	sub	sp, #32
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d904      	bls.n	8008fae <remove_chain+0x26>
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d301      	bcc.n	8008fb2 <remove_chain+0x2a>
 8008fae:	2302      	movs	r3, #2
 8008fb0:	e04b      	b.n	800904a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00c      	beq.n	8008fd2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fbc:	6879      	ldr	r1, [r7, #4]
 8008fbe:	69b8      	ldr	r0, [r7, #24]
 8008fc0:	f7ff fec8 	bl	8008d54 <put_fat>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008fc8:	7ffb      	ldrb	r3, [r7, #31]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d001      	beq.n	8008fd2 <remove_chain+0x4a>
 8008fce:	7ffb      	ldrb	r3, [r7, #31]
 8008fd0:	e03b      	b.n	800904a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008fd2:	68b9      	ldr	r1, [r7, #8]
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f7ff fdea 	bl	8008bae <get_fat>
 8008fda:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d031      	beq.n	8009046 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d101      	bne.n	8008fec <remove_chain+0x64>
 8008fe8:	2302      	movs	r3, #2
 8008fea:	e02e      	b.n	800904a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff2:	d101      	bne.n	8008ff8 <remove_chain+0x70>
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e028      	b.n	800904a <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	68b9      	ldr	r1, [r7, #8]
 8008ffc:	69b8      	ldr	r0, [r7, #24]
 8008ffe:	f7ff fea9 	bl	8008d54 <put_fat>
 8009002:	4603      	mov	r3, r0
 8009004:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009006:	7ffb      	ldrb	r3, [r7, #31]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d001      	beq.n	8009010 <remove_chain+0x88>
 800900c:	7ffb      	ldrb	r3, [r7, #31]
 800900e:	e01c      	b.n	800904a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	695a      	ldr	r2, [r3, #20]
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	3b02      	subs	r3, #2
 800901a:	429a      	cmp	r2, r3
 800901c:	d20b      	bcs.n	8009036 <remove_chain+0xae>
			fs->free_clst++;
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	695b      	ldr	r3, [r3, #20]
 8009022:	1c5a      	adds	r2, r3, #1
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	795b      	ldrb	r3, [r3, #5]
 800902c:	f043 0301 	orr.w	r3, r3, #1
 8009030:	b2da      	uxtb	r2, r3
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	715a      	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	699b      	ldr	r3, [r3, #24]
 800903e:	68ba      	ldr	r2, [r7, #8]
 8009040:	429a      	cmp	r2, r3
 8009042:	d3c6      	bcc.n	8008fd2 <remove_chain+0x4a>
 8009044:	e000      	b.n	8009048 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009046:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3720      	adds	r7, #32
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b088      	sub	sp, #32
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d10d      	bne.n	8009084 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d004      	beq.n	800907e <create_chain+0x2c>
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	69ba      	ldr	r2, [r7, #24]
 800907a:	429a      	cmp	r2, r3
 800907c:	d31b      	bcc.n	80090b6 <create_chain+0x64>
 800907e:	2301      	movs	r3, #1
 8009080:	61bb      	str	r3, [r7, #24]
 8009082:	e018      	b.n	80090b6 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009084:	6839      	ldr	r1, [r7, #0]
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f7ff fd91 	bl	8008bae <get_fat>
 800908c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d801      	bhi.n	8009098 <create_chain+0x46>
 8009094:	2301      	movs	r3, #1
 8009096:	e0a9      	b.n	80091ec <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800909e:	d101      	bne.n	80090a4 <create_chain+0x52>
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	e0a3      	b.n	80091ec <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d201      	bcs.n	80090b2 <create_chain+0x60>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	e09c      	b.n	80091ec <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	695b      	ldr	r3, [r3, #20]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d101      	bne.n	80090c2 <create_chain+0x70>
 80090be:	2300      	movs	r3, #0
 80090c0:	e094      	b.n	80091ec <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 80090c2:	2300      	movs	r3, #0
 80090c4:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 80090c6:	69ba      	ldr	r2, [r7, #24]
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d129      	bne.n	8009122 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	3301      	adds	r3, #1
 80090d2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	699b      	ldr	r3, [r3, #24]
 80090d8:	69fa      	ldr	r2, [r7, #28]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d301      	bcc.n	80090e2 <create_chain+0x90>
 80090de:	2302      	movs	r3, #2
 80090e0:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 80090e2:	69f9      	ldr	r1, [r7, #28]
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f7ff fd62 	bl	8008bae <get_fat>
 80090ea:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d003      	beq.n	80090fa <create_chain+0xa8>
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f8:	d101      	bne.n	80090fe <create_chain+0xac>
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	e076      	b.n	80091ec <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00e      	beq.n	8009122 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d906      	bls.n	800911e <create_chain+0xcc>
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	699b      	ldr	r3, [r3, #24]
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	429a      	cmp	r2, r3
 8009118:	d201      	bcs.n	800911e <create_chain+0xcc>
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d129      	bne.n	800917c <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	3301      	adds	r3, #1
 8009130:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	69fa      	ldr	r2, [r7, #28]
 8009138:	429a      	cmp	r2, r3
 800913a:	d307      	bcc.n	800914c <create_chain+0xfa>
					ncl = 2;
 800913c:	2302      	movs	r3, #2
 800913e:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8009140:	69fa      	ldr	r2, [r7, #28]
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	429a      	cmp	r2, r3
 8009146:	d901      	bls.n	800914c <create_chain+0xfa>
 8009148:	2300      	movs	r3, #0
 800914a:	e04f      	b.n	80091ec <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 800914c:	69f9      	ldr	r1, [r7, #28]
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f7ff fd2d 	bl	8008bae <get_fat>
 8009154:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00e      	beq.n	800917a <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d003      	beq.n	800916a <create_chain+0x118>
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009168:	d101      	bne.n	800916e <create_chain+0x11c>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	e03e      	b.n	80091ec <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800916e:	69fa      	ldr	r2, [r7, #28]
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	429a      	cmp	r2, r3
 8009174:	d1da      	bne.n	800912c <create_chain+0xda>
 8009176:	2300      	movs	r3, #0
 8009178:	e038      	b.n	80091ec <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 800917a:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 800917c:	f04f 32ff 	mov.w	r2, #4294967295
 8009180:	69f9      	ldr	r1, [r7, #28]
 8009182:	6938      	ldr	r0, [r7, #16]
 8009184:	f7ff fde6 	bl	8008d54 <put_fat>
 8009188:	4603      	mov	r3, r0
 800918a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800918c:	7dfb      	ldrb	r3, [r7, #23]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d109      	bne.n	80091a6 <create_chain+0x154>
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d006      	beq.n	80091a6 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8009198:	69fa      	ldr	r2, [r7, #28]
 800919a:	6839      	ldr	r1, [r7, #0]
 800919c:	6938      	ldr	r0, [r7, #16]
 800919e:	f7ff fdd9 	bl	8008d54 <put_fat>
 80091a2:	4603      	mov	r3, r0
 80091a4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d116      	bne.n	80091da <create_chain+0x188>
		fs->last_clst = ncl;
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	69fa      	ldr	r2, [r7, #28]
 80091b0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	695a      	ldr	r2, [r3, #20]
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	699b      	ldr	r3, [r3, #24]
 80091ba:	3b02      	subs	r3, #2
 80091bc:	429a      	cmp	r2, r3
 80091be:	d804      	bhi.n	80091ca <create_chain+0x178>
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	695b      	ldr	r3, [r3, #20]
 80091c4:	1e5a      	subs	r2, r3, #1
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	795b      	ldrb	r3, [r3, #5]
 80091ce:	f043 0301 	orr.w	r3, r3, #1
 80091d2:	b2da      	uxtb	r2, r3
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	715a      	strb	r2, [r3, #5]
 80091d8:	e007      	b.n	80091ea <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80091da:	7dfb      	ldrb	r3, [r7, #23]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d102      	bne.n	80091e6 <create_chain+0x194>
 80091e0:	f04f 33ff 	mov.w	r3, #4294967295
 80091e4:	e000      	b.n	80091e8 <create_chain+0x196>
 80091e6:	2301      	movs	r3, #1
 80091e8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80091ea:	69fb      	ldr	r3, [r7, #28]
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3720      	adds	r7, #32
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b086      	sub	sp, #24
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7ff fbdf 	bl	80089c2 <sync_window>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d001      	beq.n	800920e <dir_clear+0x1a>
 800920a:	2301      	movs	r3, #1
 800920c:	e036      	b.n	800927c <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f7ff fcad 	bl	8008b70 <clst2sect>
 8009216:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	693a      	ldr	r2, [r7, #16]
 800921c:	631a      	str	r2, [r3, #48]	@ 0x30
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	3334      	adds	r3, #52	@ 0x34
 8009222:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009226:	2100      	movs	r1, #0
 8009228:	4618      	mov	r0, r3
 800922a:	f00d fbd9 	bl	80169e0 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	3334      	adds	r3, #52	@ 0x34
 8009232:	60fb      	str	r3, [r7, #12]
 8009234:	2301      	movs	r3, #1
 8009236:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8009238:	2300      	movs	r3, #0
 800923a:	617b      	str	r3, [r7, #20]
 800923c:	e003      	b.n	8009246 <dir_clear+0x52>
 800923e:	697a      	ldr	r2, [r7, #20]
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	4413      	add	r3, r2
 8009244:	617b      	str	r3, [r7, #20]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	895b      	ldrh	r3, [r3, #10]
 800924a:	461a      	mov	r2, r3
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	4293      	cmp	r3, r2
 8009250:	d20b      	bcs.n	800926a <dir_clear+0x76>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	7858      	ldrb	r0, [r3, #1]
 8009256:	693a      	ldr	r2, [r7, #16]
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	441a      	add	r2, r3
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	68f9      	ldr	r1, [r7, #12]
 8009260:	f7ff fa54 	bl	800870c <disk_write>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d0e9      	beq.n	800923e <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	895b      	ldrh	r3, [r3, #10]
 800926e:	461a      	mov	r2, r3
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	4293      	cmp	r3, r2
 8009274:	bf14      	ite	ne
 8009276:	2301      	movne	r3, #1
 8009278:	2300      	moveq	r3, #0
 800927a:	b2db      	uxtb	r3, r3
}
 800927c:	4618      	mov	r0, r3
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b086      	sub	sp, #24
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800929a:	d204      	bcs.n	80092a6 <dir_sdi+0x22>
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	f003 031f 	and.w	r3, r3, #31
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d001      	beq.n	80092aa <dir_sdi+0x26>
		return FR_INT_ERR;
 80092a6:	2302      	movs	r3, #2
 80092a8:	e071      	b.n	800938e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	683a      	ldr	r2, [r7, #0]
 80092ae:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d106      	bne.n	80092ca <dir_sdi+0x46>
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	d902      	bls.n	80092ca <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092c8:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d10c      	bne.n	80092ea <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	095b      	lsrs	r3, r3, #5
 80092d4:	693a      	ldr	r2, [r7, #16]
 80092d6:	8912      	ldrh	r2, [r2, #8]
 80092d8:	4293      	cmp	r3, r2
 80092da:	d301      	bcc.n	80092e0 <dir_sdi+0x5c>
 80092dc:	2302      	movs	r3, #2
 80092de:	e056      	b.n	800938e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	619a      	str	r2, [r3, #24]
 80092e8:	e02d      	b.n	8009346 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	895b      	ldrh	r3, [r3, #10]
 80092ee:	461a      	mov	r2, r3
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	899b      	ldrh	r3, [r3, #12]
 80092f4:	fb02 f303 	mul.w	r3, r2, r3
 80092f8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80092fa:	e019      	b.n	8009330 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6979      	ldr	r1, [r7, #20]
 8009300:	4618      	mov	r0, r3
 8009302:	f7ff fc54 	bl	8008bae <get_fat>
 8009306:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800930e:	d101      	bne.n	8009314 <dir_sdi+0x90>
 8009310:	2301      	movs	r3, #1
 8009312:	e03c      	b.n	800938e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	2b01      	cmp	r3, #1
 8009318:	d904      	bls.n	8009324 <dir_sdi+0xa0>
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	697a      	ldr	r2, [r7, #20]
 8009320:	429a      	cmp	r2, r3
 8009322:	d301      	bcc.n	8009328 <dir_sdi+0xa4>
 8009324:	2302      	movs	r3, #2
 8009326:	e032      	b.n	800938e <dir_sdi+0x10a>
			ofs -= csz;
 8009328:	683a      	ldr	r2, [r7, #0]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009330:	683a      	ldr	r2, [r7, #0]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	429a      	cmp	r2, r3
 8009336:	d2e1      	bcs.n	80092fc <dir_sdi+0x78>
		}
		dp->sect = clst2sect(fs, clst);
 8009338:	6979      	ldr	r1, [r7, #20]
 800933a:	6938      	ldr	r0, [r7, #16]
 800933c:	f7ff fc18 	bl	8008b70 <clst2sect>
 8009340:	4602      	mov	r2, r0
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	697a      	ldr	r2, [r7, #20]
 800934a:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	699b      	ldr	r3, [r3, #24]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d101      	bne.n	8009358 <dir_sdi+0xd4>
 8009354:	2302      	movs	r3, #2
 8009356:	e01a      	b.n	800938e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	699a      	ldr	r2, [r3, #24]
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	899b      	ldrh	r3, [r3, #12]
 8009360:	4619      	mov	r1, r3
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	fbb3 f3f1 	udiv	r3, r3, r1
 8009368:	441a      	add	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	899b      	ldrh	r3, [r3, #12]
 8009378:	461a      	mov	r2, r3
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009380:	fb00 f202 	mul.w	r2, r0, r2
 8009384:	1a9b      	subs	r3, r3, r2
 8009386:	18ca      	adds	r2, r1, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3718      	adds	r7, #24
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b086      	sub	sp, #24
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	3320      	adds	r3, #32
 80093ac:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80093b4:	d302      	bcc.n	80093bc <dir_next+0x26>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d101      	bne.n	80093c8 <dir_next+0x32>
 80093c4:	2304      	movs	r3, #4
 80093c6:	e088      	b.n	80094da <dir_next+0x144>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	899b      	ldrh	r3, [r3, #12]
 80093cc:	461a      	mov	r2, r3
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80093d4:	fb01 f202 	mul.w	r2, r1, r2
 80093d8:	1a9b      	subs	r3, r3, r2
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d16a      	bne.n	80094b4 <dir_next+0x11e>
		dp->sect++;				/* Next sector */
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	1c5a      	adds	r2, r3, #1
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	695b      	ldr	r3, [r3, #20]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d10a      	bne.n	8009406 <dir_next+0x70>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	095b      	lsrs	r3, r3, #5
 80093f4:	693a      	ldr	r2, [r7, #16]
 80093f6:	8912      	ldrh	r2, [r2, #8]
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d35b      	bcc.n	80094b4 <dir_next+0x11e>
				dp->sect = 0; return FR_NO_FILE;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	619a      	str	r2, [r3, #24]
 8009402:	2304      	movs	r3, #4
 8009404:	e069      	b.n	80094da <dir_next+0x144>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	899b      	ldrh	r3, [r3, #12]
 800940a:	461a      	mov	r2, r3
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009412:	693a      	ldr	r2, [r7, #16]
 8009414:	8952      	ldrh	r2, [r2, #10]
 8009416:	3a01      	subs	r2, #1
 8009418:	4013      	ands	r3, r2
 800941a:	2b00      	cmp	r3, #0
 800941c:	d14a      	bne.n	80094b4 <dir_next+0x11e>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	695b      	ldr	r3, [r3, #20]
 8009424:	4619      	mov	r1, r3
 8009426:	4610      	mov	r0, r2
 8009428:	f7ff fbc1 	bl	8008bae <get_fat>
 800942c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d801      	bhi.n	8009438 <dir_next+0xa2>
 8009434:	2302      	movs	r3, #2
 8009436:	e050      	b.n	80094da <dir_next+0x144>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800943e:	d101      	bne.n	8009444 <dir_next+0xae>
 8009440:	2301      	movs	r3, #1
 8009442:	e04a      	b.n	80094da <dir_next+0x144>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	699b      	ldr	r3, [r3, #24]
 8009448:	697a      	ldr	r2, [r7, #20]
 800944a:	429a      	cmp	r2, r3
 800944c:	d328      	bcc.n	80094a0 <dir_next+0x10a>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d104      	bne.n	800945e <dir_next+0xc8>
						dp->sect = 0; return FR_NO_FILE;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	619a      	str	r2, [r3, #24]
 800945a:	2304      	movs	r3, #4
 800945c:	e03d      	b.n	80094da <dir_next+0x144>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	695b      	ldr	r3, [r3, #20]
 8009464:	4619      	mov	r1, r3
 8009466:	4610      	mov	r0, r2
 8009468:	f7ff fdf3 	bl	8009052 <create_chain>
 800946c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d101      	bne.n	8009478 <dir_next+0xe2>
 8009474:	2307      	movs	r3, #7
 8009476:	e030      	b.n	80094da <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	2b01      	cmp	r3, #1
 800947c:	d101      	bne.n	8009482 <dir_next+0xec>
 800947e:	2302      	movs	r3, #2
 8009480:	e02b      	b.n	80094da <dir_next+0x144>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009488:	d101      	bne.n	800948e <dir_next+0xf8>
 800948a:	2301      	movs	r3, #1
 800948c:	e025      	b.n	80094da <dir_next+0x144>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 800948e:	6979      	ldr	r1, [r7, #20]
 8009490:	6938      	ldr	r0, [r7, #16]
 8009492:	f7ff feaf 	bl	80091f4 <dir_clear>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d001      	beq.n	80094a0 <dir_next+0x10a>
 800949c:	2301      	movs	r3, #1
 800949e:	e01c      	b.n	80094da <dir_next+0x144>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	697a      	ldr	r2, [r7, #20]
 80094a4:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 80094a6:	6979      	ldr	r1, [r7, #20]
 80094a8:	6938      	ldr	r0, [r7, #16]
 80094aa:	f7ff fb61 	bl	8008b70 <clst2sect>
 80094ae:	4602      	mov	r2, r0
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	899b      	ldrh	r3, [r3, #12]
 80094c4:	461a      	mov	r2, r3
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80094cc:	fb00 f202 	mul.w	r2, r0, r2
 80094d0:	1a9b      	subs	r3, r3, r2
 80094d2:	18ca      	adds	r2, r1, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3718      	adds	r7, #24
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b086      	sub	sp, #24
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80094f2:	2100      	movs	r1, #0
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7ff fec5 	bl	8009284 <dir_sdi>
 80094fa:	4603      	mov	r3, r0
 80094fc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80094fe:	7dfb      	ldrb	r3, [r7, #23]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d12b      	bne.n	800955c <dir_alloc+0x7a>
		n = 0;
 8009504:	2300      	movs	r3, #0
 8009506:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	4619      	mov	r1, r3
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	f7ff fa93 	bl	8008a3a <move_window>
 8009514:	4603      	mov	r3, r0
 8009516:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009518:	7dfb      	ldrb	r3, [r7, #23]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d11d      	bne.n	800955a <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	69db      	ldr	r3, [r3, #28]
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	2be5      	cmp	r3, #229	@ 0xe5
 8009526:	d004      	beq.n	8009532 <dir_alloc+0x50>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	69db      	ldr	r3, [r3, #28]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d107      	bne.n	8009542 <dir_alloc+0x60>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	3301      	adds	r3, #1
 8009536:	613b      	str	r3, [r7, #16]
 8009538:	693a      	ldr	r2, [r7, #16]
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	429a      	cmp	r2, r3
 800953e:	d102      	bne.n	8009546 <dir_alloc+0x64>
 8009540:	e00c      	b.n	800955c <dir_alloc+0x7a>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 8009542:	2300      	movs	r3, #0
 8009544:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8009546:	2101      	movs	r1, #1
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f7ff ff24 	bl	8009396 <dir_next>
 800954e:	4603      	mov	r3, r0
 8009550:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8009552:	7dfb      	ldrb	r3, [r7, #23]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d0d7      	beq.n	8009508 <dir_alloc+0x26>
 8009558:	e000      	b.n	800955c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800955a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800955c:	7dfb      	ldrb	r3, [r7, #23]
 800955e:	2b04      	cmp	r3, #4
 8009560:	d101      	bne.n	8009566 <dir_alloc+0x84>
 8009562:	2307      	movs	r3, #7
 8009564:	75fb      	strb	r3, [r7, #23]
	return res;
 8009566:	7dfb      	ldrb	r3, [r7, #23]
}
 8009568:	4618      	mov	r0, r3
 800956a:	3718      	adds	r7, #24
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	331a      	adds	r3, #26
 800957e:	4618      	mov	r0, r3
 8009580:	f7ff f97a 	bl	8008878 <ld_word>
 8009584:	4603      	mov	r3, r0
 8009586:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	2b03      	cmp	r3, #3
 800958e:	d109      	bne.n	80095a4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	3314      	adds	r3, #20
 8009594:	4618      	mov	r0, r3
 8009596:	f7ff f96f 	bl	8008878 <ld_word>
 800959a:	4603      	mov	r3, r0
 800959c:	041b      	lsls	r3, r3, #16
 800959e:	68fa      	ldr	r2, [r7, #12]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80095a4:	68fb      	ldr	r3, [r7, #12]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b084      	sub	sp, #16
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	60f8      	str	r0, [r7, #12]
 80095b6:	60b9      	str	r1, [r7, #8]
 80095b8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	331a      	adds	r3, #26
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	b292      	uxth	r2, r2
 80095c2:	4611      	mov	r1, r2
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7ff f993 	bl	80088f0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	2b03      	cmp	r3, #3
 80095d0:	d109      	bne.n	80095e6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	f103 0214 	add.w	r2, r3, #20
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	0c1b      	lsrs	r3, r3, #16
 80095dc:	b29b      	uxth	r3, r3
 80095de:	4619      	mov	r1, r3
 80095e0:	4610      	mov	r0, r2
 80095e2:	f7ff f985 	bl	80088f0 <st_word>
	}
}
 80095e6:	bf00      	nop
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b086      	sub	sp, #24
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80095fc:	2100      	movs	r1, #0
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f7ff fe40 	bl	8009284 <dir_sdi>
 8009604:	4603      	mov	r3, r0
 8009606:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009608:	7dfb      	ldrb	r3, [r7, #23]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <dir_find+0x24>
 800960e:	7dfb      	ldrb	r3, [r7, #23]
 8009610:	e03e      	b.n	8009690 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	4619      	mov	r1, r3
 8009618:	6938      	ldr	r0, [r7, #16]
 800961a:	f7ff fa0e 	bl	8008a3a <move_window>
 800961e:	4603      	mov	r3, r0
 8009620:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009622:	7dfb      	ldrb	r3, [r7, #23]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d12f      	bne.n	8009688 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	69db      	ldr	r3, [r3, #28]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009630:	7bfb      	ldrb	r3, [r7, #15]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d102      	bne.n	800963c <dir_find+0x4e>
 8009636:	2304      	movs	r3, #4
 8009638:	75fb      	strb	r3, [r7, #23]
 800963a:	e028      	b.n	800968e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	69db      	ldr	r3, [r3, #28]
 8009640:	330b      	adds	r3, #11
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009648:	b2da      	uxtb	r2, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	69db      	ldr	r3, [r3, #28]
 8009652:	330b      	adds	r3, #11
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	f003 0308 	and.w	r3, r3, #8
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10a      	bne.n	8009674 <dir_find+0x86>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	69d8      	ldr	r0, [r3, #28]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	3320      	adds	r3, #32
 8009666:	220b      	movs	r2, #11
 8009668:	4619      	mov	r1, r3
 800966a:	f00d f9a9 	bl	80169c0 <memcmp>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d00b      	beq.n	800968c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009674:	2100      	movs	r1, #0
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f7ff fe8d 	bl	8009396 <dir_next>
 800967c:	4603      	mov	r3, r0
 800967e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009680:	7dfb      	ldrb	r3, [r7, #23]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d0c5      	beq.n	8009612 <dir_find+0x24>
 8009686:	e002      	b.n	800968e <dir_find+0xa0>
		if (res != FR_OK) break;
 8009688:	bf00      	nop
 800968a:	e000      	b.n	800968e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800968c:	bf00      	nop

	return res;
 800968e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009690:	4618      	mov	r0, r3
 8009692:	3718      	adds	r7, #24
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --n_ent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80096a6:	2101      	movs	r1, #1
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f7ff ff1a 	bl	80094e2 <dir_alloc>
 80096ae:	4603      	mov	r3, r0
 80096b0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80096b2:	7bfb      	ldrb	r3, [r7, #15]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d11c      	bne.n	80096f2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	699b      	ldr	r3, [r3, #24]
 80096bc:	4619      	mov	r1, r3
 80096be:	68b8      	ldr	r0, [r7, #8]
 80096c0:	f7ff f9bb 	bl	8008a3a <move_window>
 80096c4:	4603      	mov	r3, r0
 80096c6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80096c8:	7bfb      	ldrb	r3, [r7, #15]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d111      	bne.n	80096f2 <dir_register+0x5a>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	69db      	ldr	r3, [r3, #28]
 80096d2:	2220      	movs	r2, #32
 80096d4:	2100      	movs	r1, #0
 80096d6:	4618      	mov	r0, r3
 80096d8:	f00d f982 	bl	80169e0 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	69d8      	ldr	r0, [r3, #28]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	3320      	adds	r3, #32
 80096e4:	220b      	movs	r2, #11
 80096e6:	4619      	mov	r1, r3
 80096e8:	f00d f9fe 	bl	8016ae8 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	2201      	movs	r2, #1
 80096f0:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80096f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b08a      	sub	sp, #40	@ 0x28
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
	BYTE *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	617b      	str	r3, [r7, #20]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	3320      	adds	r3, #32
 8009710:	613b      	str	r3, [r7, #16]
	memset(sfn, ' ', 11);
 8009712:	220b      	movs	r2, #11
 8009714:	2120      	movs	r1, #32
 8009716:	6938      	ldr	r0, [r7, #16]
 8009718:	f00d f962 	bl	80169e0 <memset>
	si = i = 0; ni = 8;
 800971c:	2300      	movs	r3, #0
 800971e:	61bb      	str	r3, [r7, #24]
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	61fb      	str	r3, [r7, #28]
 8009724:	2308      	movs	r3, #8
 8009726:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	1c5a      	adds	r2, r3, #1
 800972c:	61fa      	str	r2, [r7, #28]
 800972e:	697a      	ldr	r2, [r7, #20]
 8009730:	4413      	add	r3, r2
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009738:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800973c:	2b20      	cmp	r3, #32
 800973e:	f240 8089 	bls.w	8009854 <create_name+0x158>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 8009742:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009746:	2b2f      	cmp	r3, #47	@ 0x2f
 8009748:	d007      	beq.n	800975a <create_name+0x5e>
 800974a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800974e:	2b5c      	cmp	r3, #92	@ 0x5c
 8009750:	d110      	bne.n	8009774 <create_name+0x78>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 8009752:	e002      	b.n	800975a <create_name+0x5e>
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	3301      	adds	r3, #1
 8009758:	61fb      	str	r3, [r7, #28]
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	4413      	add	r3, r2
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	2b2f      	cmp	r3, #47	@ 0x2f
 8009764:	d0f6      	beq.n	8009754 <create_name+0x58>
 8009766:	697a      	ldr	r2, [r7, #20]
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	4413      	add	r3, r2
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	2b5c      	cmp	r3, #92	@ 0x5c
 8009770:	d0f0      	beq.n	8009754 <create_name+0x58>
			break;
 8009772:	e070      	b.n	8009856 <create_name+0x15a>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8009774:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009778:	2b2e      	cmp	r3, #46	@ 0x2e
 800977a:	d003      	beq.n	8009784 <create_name+0x88>
 800977c:	69ba      	ldr	r2, [r7, #24]
 800977e:	6a3b      	ldr	r3, [r7, #32]
 8009780:	429a      	cmp	r2, r3
 8009782:	d30d      	bcc.n	80097a0 <create_name+0xa4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8009784:	6a3b      	ldr	r3, [r7, #32]
 8009786:	2b0b      	cmp	r3, #11
 8009788:	d003      	beq.n	8009792 <create_name+0x96>
 800978a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800978e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009790:	d001      	beq.n	8009796 <create_name+0x9a>
 8009792:	2306      	movs	r3, #6
 8009794:	e081      	b.n	800989a <create_name+0x19e>
			i = 8; ni = 11;				/* Enter file extension field */
 8009796:	2308      	movs	r3, #8
 8009798:	61bb      	str	r3, [r7, #24]
 800979a:	230b      	movs	r3, #11
 800979c:	623b      	str	r3, [r7, #32]
			continue;
 800979e:	e058      	b.n	8009852 <create_name+0x156>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
 80097a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	da07      	bge.n	80097b8 <create_name+0xbc>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 80097a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097b0:	4a3c      	ldr	r2, [pc, #240]	@ (80098a4 <create_name+0x1a8>)
 80097b2:	5cd3      	ldrb	r3, [r2, r3]
 80097b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 80097b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097bc:	4618      	mov	r0, r3
 80097be:	f7ff f8de 	bl	800897e <dbc_1st>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d024      	beq.n	8009812 <create_name+0x116>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	1c5a      	adds	r2, r3, #1
 80097cc:	61fa      	str	r2, [r7, #28]
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	4413      	add	r3, r2
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 80097d6:	7bfb      	ldrb	r3, [r7, #15]
 80097d8:	4618      	mov	r0, r3
 80097da:	f7ff f8e1 	bl	80089a0 <dbc_2nd>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d004      	beq.n	80097ee <create_name+0xf2>
 80097e4:	6a3b      	ldr	r3, [r7, #32]
 80097e6:	3b01      	subs	r3, #1
 80097e8:	69ba      	ldr	r2, [r7, #24]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d301      	bcc.n	80097f2 <create_name+0xf6>
 80097ee:	2306      	movs	r3, #6
 80097f0:	e053      	b.n	800989a <create_name+0x19e>
			sfn[i++] = c;
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	1c5a      	adds	r2, r3, #1
 80097f6:	61ba      	str	r2, [r7, #24]
 80097f8:	693a      	ldr	r2, [r7, #16]
 80097fa:	4413      	add	r3, r2
 80097fc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009800:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	1c5a      	adds	r2, r3, #1
 8009806:	61ba      	str	r2, [r7, #24]
 8009808:	693a      	ldr	r2, [r7, #16]
 800980a:	4413      	add	r3, r2
 800980c:	7bfa      	ldrb	r2, [r7, #15]
 800980e:	701a      	strb	r2, [r3, #0]
 8009810:	e78a      	b.n	8009728 <create_name+0x2c>
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009812:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009816:	4619      	mov	r1, r3
 8009818:	4823      	ldr	r0, [pc, #140]	@ (80098a8 <create_name+0x1ac>)
 800981a:	f00d f8e9 	bl	80169f0 <strchr>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d001      	beq.n	8009828 <create_name+0x12c>
 8009824:	2306      	movs	r3, #6
 8009826:	e038      	b.n	800989a <create_name+0x19e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009828:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800982c:	2b60      	cmp	r3, #96	@ 0x60
 800982e:	d908      	bls.n	8009842 <create_name+0x146>
 8009830:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009834:	2b7a      	cmp	r3, #122	@ 0x7a
 8009836:	d804      	bhi.n	8009842 <create_name+0x146>
 8009838:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800983c:	3b20      	subs	r3, #32
 800983e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			sfn[i++] = c;
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	1c5a      	adds	r2, r3, #1
 8009846:	61ba      	str	r2, [r7, #24]
 8009848:	693a      	ldr	r2, [r7, #16]
 800984a:	4413      	add	r3, r2
 800984c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009850:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 8009852:	e769      	b.n	8009728 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009854:	bf00      	nop
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009856:	697a      	ldr	r2, [r7, #20]
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	441a      	add	r2, r3
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d101      	bne.n	800986a <create_name+0x16e>
 8009866:	2306      	movs	r3, #6
 8009868:	e017      	b.n	800989a <create_name+0x19e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	2be5      	cmp	r3, #229	@ 0xe5
 8009870:	d102      	bne.n	8009878 <create_name+0x17c>
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	2205      	movs	r2, #5
 8009876:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 8009878:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800987c:	2b20      	cmp	r3, #32
 800987e:	d905      	bls.n	800988c <create_name+0x190>
 8009880:	697a      	ldr	r2, [r7, #20]
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	4413      	add	r3, r2
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	2b20      	cmp	r3, #32
 800988a:	d801      	bhi.n	8009890 <create_name+0x194>
 800988c:	2204      	movs	r2, #4
 800988e:	e000      	b.n	8009892 <create_name+0x196>
 8009890:	2200      	movs	r2, #0
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	330b      	adds	r3, #11
 8009896:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009898:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 800989a:	4618      	mov	r0, r3
 800989c:	3728      	adds	r7, #40	@ 0x28
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	08018424 	.word	0x08018424
 80098a8:	080180d8 	.word	0x080180d8

080098ac <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 80098bc:	e002      	b.n	80098c4 <follow_path+0x18>
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	3301      	adds	r3, #1
 80098c2:	603b      	str	r3, [r7, #0]
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	2b2f      	cmp	r3, #47	@ 0x2f
 80098ca:	d0f8      	beq.n	80098be <follow_path+0x12>
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	2b5c      	cmp	r3, #92	@ 0x5c
 80098d2:	d0f4      	beq.n	80098be <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	2b1f      	cmp	r3, #31
 80098e0:	d80a      	bhi.n	80098f8 <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2280      	movs	r2, #128	@ 0x80
 80098e6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 80098ea:	2100      	movs	r1, #0
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f7ff fcc9 	bl	8009284 <dir_sdi>
 80098f2:	4603      	mov	r3, r0
 80098f4:	75fb      	strb	r3, [r7, #23]
 80098f6:	e048      	b.n	800998a <follow_path+0xde>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80098f8:	463b      	mov	r3, r7
 80098fa:	4619      	mov	r1, r3
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f7ff fefd 	bl	80096fc <create_name>
 8009902:	4603      	mov	r3, r0
 8009904:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009906:	7dfb      	ldrb	r3, [r7, #23]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d139      	bne.n	8009980 <follow_path+0xd4>
			res = dir_find(dp);				/* Find an object with the segment name */
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f7ff fe6e 	bl	80095ee <dir_find>
 8009912:	4603      	mov	r3, r0
 8009914:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800991c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 800991e:	7dfb      	ldrb	r3, [r7, #23]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00a      	beq.n	800993a <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009924:	7dfb      	ldrb	r3, [r7, #23]
 8009926:	2b04      	cmp	r3, #4
 8009928:	d12c      	bne.n	8009984 <follow_path+0xd8>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800992a:	7bfb      	ldrb	r3, [r7, #15]
 800992c:	f003 0304 	and.w	r3, r3, #4
 8009930:	2b00      	cmp	r3, #0
 8009932:	d127      	bne.n	8009984 <follow_path+0xd8>
 8009934:	2305      	movs	r3, #5
 8009936:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009938:	e024      	b.n	8009984 <follow_path+0xd8>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800993a:	7bfb      	ldrb	r3, [r7, #15]
 800993c:	f003 0304 	and.w	r3, r3, #4
 8009940:	2b00      	cmp	r3, #0
 8009942:	d121      	bne.n	8009988 <follow_path+0xdc>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	799b      	ldrb	r3, [r3, #6]
 8009948:	f003 0310 	and.w	r3, r3, #16
 800994c:	2b00      	cmp	r3, #0
 800994e:	d102      	bne.n	8009956 <follow_path+0xaa>
				res = FR_NO_PATH; break;
 8009950:	2305      	movs	r3, #5
 8009952:	75fb      	strb	r3, [r7, #23]
 8009954:	e019      	b.n	800998a <follow_path+0xde>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	693a      	ldr	r2, [r7, #16]
 8009962:	8992      	ldrh	r2, [r2, #12]
 8009964:	fbb3 f0f2 	udiv	r0, r3, r2
 8009968:	fb00 f202 	mul.w	r2, r0, r2
 800996c:	1a9b      	subs	r3, r3, r2
 800996e:	440b      	add	r3, r1
 8009970:	4619      	mov	r1, r3
 8009972:	6938      	ldr	r0, [r7, #16]
 8009974:	f7ff fdfc 	bl	8009570 <ld_clust>
 8009978:	4602      	mov	r2, r0
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800997e:	e7bb      	b.n	80098f8 <follow_path+0x4c>
			if (res != FR_OK) break;
 8009980:	bf00      	nop
 8009982:	e002      	b.n	800998a <follow_path+0xde>
				break;
 8009984:	bf00      	nop
 8009986:	e000      	b.n	800998a <follow_path+0xde>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8009988:	bf00      	nop
			}
		}
	}

	return res;
 800998a:	7dfb      	ldrb	r3, [r7, #23]
}
 800998c:	4618      	mov	r0, r3
 800998e:	3718      	adds	r7, #24
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8009994:	b480      	push	{r7}
 8009996:	b08b      	sub	sp, #44	@ 0x2c
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 800999c:	f04f 33ff 	mov.w	r3, #4294967295
 80099a0:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80099a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099aa:	623b      	str	r3, [r7, #32]
	if (!tp) return vol;	/* Invalid path name? */
 80099ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d101      	bne.n	80099b6 <get_ldnumber+0x22>
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	e080      	b.n	8009ab8 <get_ldnumber+0x124>
	do {					/* Find a colon in the path */
		tc = *tt++;
 80099b6:	6a3b      	ldr	r3, [r7, #32]
 80099b8:	1c5a      	adds	r2, r3, #1
 80099ba:	623a      	str	r2, [r7, #32]
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	77fb      	strb	r3, [r7, #31]
	} while (!IsTerminator(tc) && tc != ':');
 80099c0:	7ffb      	ldrb	r3, [r7, #31]
 80099c2:	2b20      	cmp	r3, #32
 80099c4:	d902      	bls.n	80099cc <get_ldnumber+0x38>
 80099c6:	7ffb      	ldrb	r3, [r7, #31]
 80099c8:	2b3a      	cmp	r3, #58	@ 0x3a
 80099ca:	d1f4      	bne.n	80099b6 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 80099cc:	7ffb      	ldrb	r3, [r7, #31]
 80099ce:	2b3a      	cmp	r3, #58	@ 0x3a
 80099d0:	d11c      	bne.n	8009a0c <get_ldnumber+0x78>
		i = FF_VOLUMES;
 80099d2:	2302      	movs	r3, #2
 80099d4:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 80099d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	2b2f      	cmp	r3, #47	@ 0x2f
 80099dc:	d90c      	bls.n	80099f8 <get_ldnumber+0x64>
 80099de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	2b39      	cmp	r3, #57	@ 0x39
 80099e4:	d808      	bhi.n	80099f8 <get_ldnumber+0x64>
 80099e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e8:	3302      	adds	r3, #2
 80099ea:	6a3a      	ldr	r2, [r7, #32]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d103      	bne.n	80099f8 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 80099f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	3b30      	subs	r3, #48	@ 0x30
 80099f6:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	dc04      	bgt.n	8009a08 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a3a      	ldr	r2, [r7, #32]
 8009a06:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	e055      	b.n	8009ab8 <get_ldnumber+0x124>
	}
#if FF_STR_VOLUME_ID == 2		/* Unix style volume ID is enabled */
	if (*tp == '/') {			/* Is there a volume ID? */
 8009a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	2b2f      	cmp	r3, #47	@ 0x2f
 8009a12:	d14e      	bne.n	8009ab2 <get_ldnumber+0x11e>
		while (*(tp + 1) == '/') tp++;	/* Skip duplicated separator */
 8009a14:	e002      	b.n	8009a1c <get_ldnumber+0x88>
 8009a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a18:	3301      	adds	r3, #1
 8009a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a1e:	3301      	adds	r3, #1
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	2b2f      	cmp	r3, #47	@ 0x2f
 8009a24:	d0f7      	beq.n	8009a16 <get_ldnumber+0x82>
		i = 0;
 8009a26:	2300      	movs	r3, #0
 8009a28:	61bb      	str	r3, [r7, #24]
		do {
			tt = tp; sp = VolumeStr[i]; /* Path name and this string volume ID */
 8009a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2c:	623b      	str	r3, [r7, #32]
 8009a2e:	4a25      	ldr	r2, [pc, #148]	@ (8009ac4 <get_ldnumber+0x130>)
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a36:	613b      	str	r3, [r7, #16]
			do {	/* Compare the volume ID with path name */
				c = *sp++; tc = *(++tt);
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	1c5a      	adds	r2, r3, #1
 8009a3c:	613a      	str	r2, [r7, #16]
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	73fb      	strb	r3, [r7, #15]
 8009a42:	6a3b      	ldr	r3, [r7, #32]
 8009a44:	3301      	adds	r3, #1
 8009a46:	623b      	str	r3, [r7, #32]
 8009a48:	6a3b      	ldr	r3, [r7, #32]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	77fb      	strb	r3, [r7, #31]
				if (IsLower(c)) c -= 0x20;
 8009a4e:	7bfb      	ldrb	r3, [r7, #15]
 8009a50:	2b60      	cmp	r3, #96	@ 0x60
 8009a52:	d905      	bls.n	8009a60 <get_ldnumber+0xcc>
 8009a54:	7bfb      	ldrb	r3, [r7, #15]
 8009a56:	2b7a      	cmp	r3, #122	@ 0x7a
 8009a58:	d802      	bhi.n	8009a60 <get_ldnumber+0xcc>
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
 8009a5c:	3b20      	subs	r3, #32
 8009a5e:	73fb      	strb	r3, [r7, #15]
				if (IsLower(tc)) tc -= 0x20;
 8009a60:	7ffb      	ldrb	r3, [r7, #31]
 8009a62:	2b60      	cmp	r3, #96	@ 0x60
 8009a64:	d905      	bls.n	8009a72 <get_ldnumber+0xde>
 8009a66:	7ffb      	ldrb	r3, [r7, #31]
 8009a68:	2b7a      	cmp	r3, #122	@ 0x7a
 8009a6a:	d802      	bhi.n	8009a72 <get_ldnumber+0xde>
 8009a6c:	7ffb      	ldrb	r3, [r7, #31]
 8009a6e:	3b20      	subs	r3, #32
 8009a70:	77fb      	strb	r3, [r7, #31]
			} while (c && (TCHAR)c == tc);
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d003      	beq.n	8009a80 <get_ldnumber+0xec>
 8009a78:	7bfa      	ldrb	r2, [r7, #15]
 8009a7a:	7ffb      	ldrb	r3, [r7, #31]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d0db      	beq.n	8009a38 <get_ldnumber+0xa4>
		} while ((c || (tc != '/' && !IsTerminator(tc))) && ++i < FF_VOLUMES);	/* Repeat for each ID until pattern match */
 8009a80:	7bfb      	ldrb	r3, [r7, #15]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d105      	bne.n	8009a92 <get_ldnumber+0xfe>
 8009a86:	7ffb      	ldrb	r3, [r7, #31]
 8009a88:	2b2f      	cmp	r3, #47	@ 0x2f
 8009a8a:	d008      	beq.n	8009a9e <get_ldnumber+0x10a>
 8009a8c:	7ffb      	ldrb	r3, [r7, #31]
 8009a8e:	2b20      	cmp	r3, #32
 8009a90:	d905      	bls.n	8009a9e <get_ldnumber+0x10a>
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	3301      	adds	r3, #1
 8009a96:	61bb      	str	r3, [r7, #24]
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	ddc5      	ble.n	8009a2a <get_ldnumber+0x96>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8009a9e:	69bb      	ldr	r3, [r7, #24]
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	dc04      	bgt.n	8009aae <get_ldnumber+0x11a>
			vol = i;		/* Drive number */
 8009aa4:	69bb      	ldr	r3, [r7, #24]
 8009aa6:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6a3a      	ldr	r2, [r7, #32]
 8009aac:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	e002      	b.n	8009ab8 <get_ldnumber+0x124>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8009ab6:	697b      	ldr	r3, [r7, #20]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	372c      	adds	r7, #44	@ 0x2c
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr
 8009ac4:	20000004 	.word	0x20000004

08009ac8 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	711a      	strb	r2, [r3, #4]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f04f 32ff 	mov.w	r2, #4294967295
 8009ade:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8009ae0:	6839      	ldr	r1, [r7, #0]
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7fe ffa9 	bl	8008a3a <move_window>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d001      	beq.n	8009af2 <check_fs+0x2a>
 8009aee:	2304      	movs	r3, #4
 8009af0:	e088      	b.n	8009c04 <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	3334      	adds	r3, #52	@ 0x34
 8009af6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fe febc 	bl	8008878 <ld_word>
 8009b00:	4603      	mov	r3, r0
 8009b02:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009b0a:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 8009b0c:	7b7b      	ldrb	r3, [r7, #13]
 8009b0e:	2beb      	cmp	r3, #235	@ 0xeb
 8009b10:	d005      	beq.n	8009b1e <check_fs+0x56>
 8009b12:	7b7b      	ldrb	r3, [r7, #13]
 8009b14:	2be9      	cmp	r3, #233	@ 0xe9
 8009b16:	d002      	beq.n	8009b1e <check_fs+0x56>
 8009b18:	7b7b      	ldrb	r3, [r7, #13]
 8009b1a:	2be8      	cmp	r3, #232	@ 0xe8
 8009b1c:	d16a      	bne.n	8009bf4 <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 8009b1e:	89fb      	ldrh	r3, [r7, #14]
 8009b20:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d10c      	bne.n	8009b42 <check_fs+0x7a>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	3334      	adds	r3, #52	@ 0x34
 8009b2c:	3352      	adds	r3, #82	@ 0x52
 8009b2e:	2208      	movs	r2, #8
 8009b30:	4936      	ldr	r1, [pc, #216]	@ (8009c0c <check_fs+0x144>)
 8009b32:	4618      	mov	r0, r3
 8009b34:	f00c ff44 	bl	80169c0 <memcmp>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d101      	bne.n	8009b42 <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 8009b3e:	2300      	movs	r3, #0
 8009b40:	e060      	b.n	8009c04 <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	3334      	adds	r3, #52	@ 0x34
 8009b46:	330b      	adds	r3, #11
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7fe fe95 	bl	8008878 <ld_word>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b58:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 8009b5a:	897a      	ldrh	r2, [r7, #10]
 8009b5c:	897b      	ldrh	r3, [r7, #10]
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	4013      	ands	r3, r2
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d146      	bne.n	8009bf4 <check_fs+0x12c>
 8009b66:	897b      	ldrh	r3, [r7, #10]
 8009b68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b6c:	d342      	bcc.n	8009bf4 <check_fs+0x12c>
 8009b6e:	897b      	ldrh	r3, [r7, #10]
 8009b70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b74:	d83e      	bhi.n	8009bf4 <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 8009b76:	7b7b      	ldrb	r3, [r7, #13]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d03b      	beq.n	8009bf4 <check_fs+0x12c>
 8009b7c:	7b7a      	ldrb	r2, [r7, #13]
 8009b7e:	7b7b      	ldrb	r3, [r7, #13]
 8009b80:	3b01      	subs	r3, #1
 8009b82:	4013      	ands	r3, r2
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d135      	bne.n	8009bf4 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	3334      	adds	r3, #52	@ 0x34
 8009b8c:	330e      	adds	r3, #14
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7fe fe72 	bl	8008878 <ld_word>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d02c      	beq.n	8009bf4 <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d826      	bhi.n	8009bf4 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	3334      	adds	r3, #52	@ 0x34
 8009baa:	3311      	adds	r3, #17
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7fe fe63 	bl	8008878 <ld_word>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d01d      	beq.n	8009bf4 <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	3334      	adds	r3, #52	@ 0x34
 8009bbc:	3313      	adds	r3, #19
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7fe fe5a 	bl	8008878 <ld_word>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8009bc8:	d809      	bhi.n	8009bde <check_fs+0x116>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	3334      	adds	r3, #52	@ 0x34
 8009bce:	3320      	adds	r3, #32
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7fe fe6a 	bl	80088aa <ld_dword>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bdc:	d30a      	bcc.n	8009bf4 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	3334      	adds	r3, #52	@ 0x34
 8009be2:	3316      	adds	r3, #22
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7fe fe47 	bl	8008878 <ld_word>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d001      	beq.n	8009bf4 <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	e007      	b.n	8009c04 <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 8009bf4:	89fb      	ldrh	r3, [r7, #14]
 8009bf6:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d101      	bne.n	8009c02 <check_fs+0x13a>
 8009bfe:	2302      	movs	r3, #2
 8009c00:	e000      	b.n	8009c04 <check_fs+0x13c>
 8009c02:	2303      	movs	r3, #3
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	080180e8 	.word	0x080180e8

08009c10 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b088      	sub	sp, #32
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f7ff ff53 	bl	8009ac8 <check_fs>
 8009c22:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d007      	beq.n	8009c3a <find_volume+0x2a>
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	d802      	bhi.n	8009c36 <find_volume+0x26>
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d101      	bne.n	8009c3a <find_volume+0x2a>
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	e045      	b.n	8009cc6 <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	61fb      	str	r3, [r7, #28]
 8009c3e:	e014      	b.n	8009c6a <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	011b      	lsls	r3, r3, #4
 8009c4a:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 8009c4e:	4413      	add	r3, r2
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fe fe2a 	bl	80088aa <ld_dword>
 8009c56:	4602      	mov	r2, r0
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	3320      	adds	r3, #32
 8009c5e:	443b      	add	r3, r7
 8009c60:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	3301      	adds	r3, #1
 8009c68:	61fb      	str	r3, [r7, #28]
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	2b03      	cmp	r3, #3
 8009c6e:	d9e7      	bls.n	8009c40 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d002      	beq.n	8009c7c <find_volume+0x6c>
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	e000      	b.n	8009c7e <find_volume+0x6e>
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	3320      	adds	r3, #32
 8009c86:	443b      	add	r3, r7
 8009c88:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00b      	beq.n	8009ca8 <find_volume+0x98>
 8009c90:	69fb      	ldr	r3, [r7, #28]
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	3320      	adds	r3, #32
 8009c96:	443b      	add	r3, r7
 8009c98:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f7ff ff12 	bl	8009ac8 <check_fs>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	e000      	b.n	8009caa <find_volume+0x9a>
 8009ca8:	2303      	movs	r3, #3
 8009caa:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d108      	bne.n	8009cc4 <find_volume+0xb4>
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d905      	bls.n	8009cc4 <find_volume+0xb4>
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	61fb      	str	r3, [r7, #28]
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	2b03      	cmp	r3, #3
 8009cc2:	d9dd      	bls.n	8009c80 <find_volume+0x70>
	return fmt;
 8009cc4:	69bb      	ldr	r3, [r7, #24]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3720      	adds	r7, #32
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
	...

08009cd0 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b090      	sub	sp, #64	@ 0x40
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	4613      	mov	r3, r2
 8009cdc:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f7ff fe55 	bl	8009994 <get_ldnumber>
 8009cea:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	da01      	bge.n	8009cf6 <mount_volume+0x26>
 8009cf2:	230b      	movs	r3, #11
 8009cf4:	e207      	b.n	800a106 <mount_volume+0x436>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8009cf6:	4aa2      	ldr	r2, [pc, #648]	@ (8009f80 <mount_volume+0x2b0>)
 8009cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8009d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d101      	bne.n	8009d0a <mount_volume+0x3a>
 8009d06:	230c      	movs	r3, #12
 8009d08:	e1fd      	b.n	800a106 <mount_volume+0x436>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d0e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009d10:	79fb      	ldrb	r3, [r7, #7]
 8009d12:	f023 0301 	bic.w	r3, r3, #1
 8009d16:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8009d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d01a      	beq.n	8009d56 <mount_volume+0x86>
		stat = disk_status(fs->pdrv);
 8009d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d22:	785b      	ldrb	r3, [r3, #1]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7fe fc6f 	bl	8008608 <disk_status>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009d30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d34:	f003 0301 	and.w	r3, r3, #1
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d10c      	bne.n	8009d56 <mount_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009d3c:	79fb      	ldrb	r3, [r7, #7]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d007      	beq.n	8009d52 <mount_volume+0x82>
 8009d42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d46:	f003 0304 	and.w	r3, r3, #4
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d001      	beq.n	8009d52 <mount_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009d4e:	230a      	movs	r3, #10
 8009d50:	e1d9      	b.n	800a106 <mount_volume+0x436>
			}
			return FR_OK;				/* The filesystem object is already valid */
 8009d52:	2300      	movs	r3, #0
 8009d54:	e1d7      	b.n	800a106 <mount_volume+0x436>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 8009d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d58:	2200      	movs	r2, #0
 8009d5a:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8009d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d5e:	785b      	ldrb	r3, [r3, #1]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fe fc79 	bl	8008658 <disk_initialize>
 8009d66:	4603      	mov	r3, r0
 8009d68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d70:	f003 0301 	and.w	r3, r3, #1
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d001      	beq.n	8009d7c <mount_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009d78:	2303      	movs	r3, #3
 8009d7a:	e1c4      	b.n	800a106 <mount_volume+0x436>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009d7c:	79fb      	ldrb	r3, [r7, #7]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d007      	beq.n	8009d92 <mount_volume+0xc2>
 8009d82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d86:	f003 0304 	and.w	r3, r3, #4
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <mount_volume+0xc2>
		return FR_WRITE_PROTECTED;
 8009d8e:	230a      	movs	r3, #10
 8009d90:	e1b9      	b.n	800a106 <mount_volume+0x436>
	}
#if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d94:	7858      	ldrb	r0, [r3, #1]
 8009d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d98:	330c      	adds	r3, #12
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	2102      	movs	r1, #2
 8009d9e:	f7fe fce9 	bl	8008774 <disk_ioctl>
 8009da2:	4603      	mov	r3, r0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d001      	beq.n	8009dac <mount_volume+0xdc>
 8009da8:	2301      	movs	r3, #1
 8009daa:	e1ac      	b.n	800a106 <mount_volume+0x436>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dae:	899b      	ldrh	r3, [r3, #12]
 8009db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009db4:	d80d      	bhi.n	8009dd2 <mount_volume+0x102>
 8009db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db8:	899b      	ldrh	r3, [r3, #12]
 8009dba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009dbe:	d308      	bcc.n	8009dd2 <mount_volume+0x102>
 8009dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc2:	899b      	ldrh	r3, [r3, #12]
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc8:	899b      	ldrh	r3, [r3, #12]
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	4013      	ands	r3, r2
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d001      	beq.n	8009dd6 <mount_volume+0x106>
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	e197      	b.n	800a106 <mount_volume+0x436>
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009dda:	f7ff ff19 	bl	8009c10 <find_volume>
 8009dde:	6338      	str	r0, [r7, #48]	@ 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 8009de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de2:	2b04      	cmp	r3, #4
 8009de4:	d101      	bne.n	8009dea <mount_volume+0x11a>
 8009de6:	2301      	movs	r3, #1
 8009de8:	e18d      	b.n	800a106 <mount_volume+0x436>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d901      	bls.n	8009df4 <mount_volume+0x124>
 8009df0:	230d      	movs	r3, #13
 8009df2:	e188      	b.n	800a106 <mount_volume+0x436>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 8009df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009df8:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dfc:	3334      	adds	r3, #52	@ 0x34
 8009dfe:	330b      	adds	r3, #11
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7fe fd39 	bl	8008878 <ld_word>
 8009e06:	4603      	mov	r3, r0
 8009e08:	461a      	mov	r2, r3
 8009e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e0c:	899b      	ldrh	r3, [r3, #12]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d001      	beq.n	8009e16 <mount_volume+0x146>
 8009e12:	230d      	movs	r3, #13
 8009e14:	e177      	b.n	800a106 <mount_volume+0x436>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e18:	3334      	adds	r3, #52	@ 0x34
 8009e1a:	3316      	adds	r3, #22
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7fe fd2b 	bl	8008878 <ld_word>
 8009e22:	4603      	mov	r3, r0
 8009e24:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d106      	bne.n	8009e3a <mount_volume+0x16a>
 8009e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e2e:	3334      	adds	r3, #52	@ 0x34
 8009e30:	3324      	adds	r3, #36	@ 0x24
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7fe fd39 	bl	80088aa <ld_dword>
 8009e38:	63b8      	str	r0, [r7, #56]	@ 0x38
		fs->fsize = fasize;
 8009e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e3e:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e42:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e48:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e4c:	78db      	ldrb	r3, [r3, #3]
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d005      	beq.n	8009e5e <mount_volume+0x18e>
 8009e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e54:	78db      	ldrb	r3, [r3, #3]
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	d001      	beq.n	8009e5e <mount_volume+0x18e>
 8009e5a:	230d      	movs	r3, #13
 8009e5c:	e153      	b.n	800a106 <mount_volume+0x436>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e60:	78db      	ldrb	r3, [r3, #3]
 8009e62:	461a      	mov	r2, r3
 8009e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e66:	fb02 f303 	mul.w	r3, r2, r3
 8009e6a:	63bb      	str	r3, [r7, #56]	@ 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e72:	461a      	mov	r2, r3
 8009e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e76:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e7a:	895b      	ldrh	r3, [r3, #10]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d008      	beq.n	8009e92 <mount_volume+0x1c2>
 8009e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e82:	895b      	ldrh	r3, [r3, #10]
 8009e84:	461a      	mov	r2, r3
 8009e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e88:	895b      	ldrh	r3, [r3, #10]
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	4013      	ands	r3, r2
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d001      	beq.n	8009e96 <mount_volume+0x1c6>
 8009e92:	230d      	movs	r3, #13
 8009e94:	e137      	b.n	800a106 <mount_volume+0x436>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e98:	3334      	adds	r3, #52	@ 0x34
 8009e9a:	3311      	adds	r3, #17
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7fe fceb 	bl	8008878 <ld_word>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ea8:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eac:	891b      	ldrh	r3, [r3, #8]
 8009eae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009eb0:	8992      	ldrh	r2, [r2, #12]
 8009eb2:	0952      	lsrs	r2, r2, #5
 8009eb4:	b292      	uxth	r2, r2
 8009eb6:	fbb3 f1f2 	udiv	r1, r3, r2
 8009eba:	fb01 f202 	mul.w	r2, r1, r2
 8009ebe:	1a9b      	subs	r3, r3, r2
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d001      	beq.n	8009eca <mount_volume+0x1fa>
 8009ec6:	230d      	movs	r3, #13
 8009ec8:	e11d      	b.n	800a106 <mount_volume+0x436>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ecc:	3334      	adds	r3, #52	@ 0x34
 8009ece:	3313      	adds	r3, #19
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7fe fcd1 	bl	8008878 <ld_word>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d106      	bne.n	8009eee <mount_volume+0x21e>
 8009ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee2:	3334      	adds	r3, #52	@ 0x34
 8009ee4:	3320      	adds	r3, #32
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7fe fcdf 	bl	80088aa <ld_dword>
 8009eec:	63f8      	str	r0, [r7, #60]	@ 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef0:	3334      	adds	r3, #52	@ 0x34
 8009ef2:	330e      	adds	r3, #14
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7fe fcbf 	bl	8008878 <ld_word>
 8009efa:	4603      	mov	r3, r0
 8009efc:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009efe:	8bfb      	ldrh	r3, [r7, #30]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d101      	bne.n	8009f08 <mount_volume+0x238>
 8009f04:	230d      	movs	r3, #13
 8009f06:	e0fe      	b.n	800a106 <mount_volume+0x436>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009f08:	8bfa      	ldrh	r2, [r7, #30]
 8009f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f0c:	4413      	add	r3, r2
 8009f0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009f10:	8911      	ldrh	r1, [r2, #8]
 8009f12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009f14:	8992      	ldrh	r2, [r2, #12]
 8009f16:	0952      	lsrs	r2, r2, #5
 8009f18:	b292      	uxth	r2, r2
 8009f1a:	fbb1 f2f2 	udiv	r2, r1, r2
 8009f1e:	b292      	uxth	r2, r2
 8009f20:	4413      	add	r3, r2
 8009f22:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009f24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d201      	bcs.n	8009f30 <mount_volume+0x260>
 8009f2c:	230d      	movs	r3, #13
 8009f2e:	e0ea      	b.n	800a106 <mount_volume+0x436>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009f30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009f38:	8952      	ldrh	r2, [r2, #10]
 8009f3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f3e:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d101      	bne.n	8009f4a <mount_volume+0x27a>
 8009f46:	230d      	movs	r3, #13
 8009f48:	e0dd      	b.n	800a106 <mount_volume+0x436>
		fmt = 0;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	4a0c      	ldr	r2, [pc, #48]	@ (8009f84 <mount_volume+0x2b4>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d801      	bhi.n	8009f5a <mount_volume+0x28a>
 8009f56:	2303      	movs	r3, #3
 8009f58:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d801      	bhi.n	8009f68 <mount_volume+0x298>
 8009f64:	2302      	movs	r3, #2
 8009f66:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d801      	bhi.n	8009f76 <mount_volume+0x2a6>
 8009f72:	2301      	movs	r3, #1
 8009f74:	633b      	str	r3, [r7, #48]	@ 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8009f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d105      	bne.n	8009f88 <mount_volume+0x2b8>
 8009f7c:	230d      	movs	r3, #13
 8009f7e:	e0c2      	b.n	800a106 <mount_volume+0x436>
 8009f80:	20005c50 	.word	0x20005c50
 8009f84:	0ffffff5 	.word	0x0ffffff5

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	1c9a      	adds	r2, r3, #2
 8009f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f8e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f92:	6a3a      	ldr	r2, [r7, #32]
 8009f94:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009f96:	8bfa      	ldrh	r2, [r7, #30]
 8009f98:	6a3b      	ldr	r3, [r7, #32]
 8009f9a:	441a      	add	r2, r3
 8009f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f9e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009fa0:	6a3a      	ldr	r2, [r7, #32]
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	441a      	add	r2, r3
 8009fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa8:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8009faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fac:	2b03      	cmp	r3, #3
 8009fae:	d11e      	bne.n	8009fee <mount_volume+0x31e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb2:	3334      	adds	r3, #52	@ 0x34
 8009fb4:	332a      	adds	r3, #42	@ 0x2a
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7fe fc5e 	bl	8008878 <ld_word>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d001      	beq.n	8009fc6 <mount_volume+0x2f6>
 8009fc2:	230d      	movs	r3, #13
 8009fc4:	e09f      	b.n	800a106 <mount_volume+0x436>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc8:	891b      	ldrh	r3, [r3, #8]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d001      	beq.n	8009fd2 <mount_volume+0x302>
 8009fce:	230d      	movs	r3, #13
 8009fd0:	e099      	b.n	800a106 <mount_volume+0x436>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd4:	3334      	adds	r3, #52	@ 0x34
 8009fd6:	332c      	adds	r3, #44	@ 0x2c
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7fe fc66 	bl	80088aa <ld_dword>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe2:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe6:	699b      	ldr	r3, [r3, #24]
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fec:	e01e      	b.n	800a02c <mount_volume+0x35c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8009fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff0:	891b      	ldrh	r3, [r3, #8]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d101      	bne.n	8009ffa <mount_volume+0x32a>
 8009ff6:	230d      	movs	r3, #13
 8009ff8:	e085      	b.n	800a106 <mount_volume+0x436>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ffc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a000:	441a      	add	r2, r3
 800a002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a004:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d103      	bne.n	800a014 <mount_volume+0x344>
 800a00c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	005b      	lsls	r3, r3, #1
 800a012:	e00a      	b.n	800a02a <mount_volume+0x35a>
 800a014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a016:	699a      	ldr	r2, [r3, #24]
 800a018:	4613      	mov	r3, r2
 800a01a:	005b      	lsls	r3, r3, #1
 800a01c:	4413      	add	r3, r2
 800a01e:	085a      	lsrs	r2, r3, #1
 800a020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a022:	699b      	ldr	r3, [r3, #24]
 800a024:	f003 0301 	and.w	r3, r3, #1
 800a028:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a02a:	637b      	str	r3, [r7, #52]	@ 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02e:	69da      	ldr	r2, [r3, #28]
 800a030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a032:	899b      	ldrh	r3, [r3, #12]
 800a034:	4619      	mov	r1, r3
 800a036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a038:	440b      	add	r3, r1
 800a03a:	3b01      	subs	r3, #1
 800a03c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a03e:	8989      	ldrh	r1, [r1, #12]
 800a040:	fbb3 f3f1 	udiv	r3, r3, r1
 800a044:	429a      	cmp	r2, r3
 800a046:	d201      	bcs.n	800a04c <mount_volume+0x37c>
 800a048:	230d      	movs	r3, #13
 800a04a:	e05c      	b.n	800a106 <mount_volume+0x436>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a04c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a04e:	f04f 32ff 	mov.w	r2, #4294967295
 800a052:	615a      	str	r2, [r3, #20]
 800a054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a056:	695a      	ldr	r2, [r3, #20]
 800a058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a05a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a05c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a05e:	2280      	movs	r2, #128	@ 0x80
 800a060:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800a062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a064:	2b03      	cmp	r3, #3
 800a066:	d13f      	bne.n	800a0e8 <mount_volume+0x418>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a06a:	3334      	adds	r3, #52	@ 0x34
 800a06c:	3330      	adds	r3, #48	@ 0x30
 800a06e:	4618      	mov	r0, r3
 800a070:	f7fe fc02 	bl	8008878 <ld_word>
 800a074:	4603      	mov	r3, r0
 800a076:	2b01      	cmp	r3, #1
 800a078:	d136      	bne.n	800a0e8 <mount_volume+0x418>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	3301      	adds	r3, #1
 800a07e:	4619      	mov	r1, r3
 800a080:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a082:	f7fe fcda 	bl	8008a3a <move_window>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d12d      	bne.n	800a0e8 <mount_volume+0x418>
		{
			fs->fsi_flag = 0;
 800a08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a08e:	2200      	movs	r2, #0
 800a090:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800a092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a094:	3334      	adds	r3, #52	@ 0x34
 800a096:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fe fbec 	bl	8008878 <ld_word>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d11d      	bne.n	800a0e8 <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ae:	3334      	adds	r3, #52	@ 0x34
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7fe fbfa 	bl	80088aa <ld_dword>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	4a15      	ldr	r2, [pc, #84]	@ (800a110 <mount_volume+0x440>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d114      	bne.n	800a0e8 <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a0be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c0:	3334      	adds	r3, #52	@ 0x34
 800a0c2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7fe fbef 	bl	80088aa <ld_dword>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	4a11      	ldr	r2, [pc, #68]	@ (800a114 <mount_volume+0x444>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d109      	bne.n	800a0e8 <mount_volume+0x418>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a0d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0d6:	3334      	adds	r3, #52	@ 0x34
 800a0d8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7fe fbe4 	bl	80088aa <ld_dword>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 800a0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ea:	b2da      	uxtb	r2, r3
 800a0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ee:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800a0f0:	4b09      	ldr	r3, [pc, #36]	@ (800a118 <mount_volume+0x448>)
 800a0f2:	881b      	ldrh	r3, [r3, #0]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	b29a      	uxth	r2, r3
 800a0f8:	4b07      	ldr	r3, [pc, #28]	@ (800a118 <mount_volume+0x448>)
 800a0fa:	801a      	strh	r2, [r3, #0]
 800a0fc:	4b06      	ldr	r3, [pc, #24]	@ (800a118 <mount_volume+0x448>)
 800a0fe:	881a      	ldrh	r2, [r3, #0]
 800a100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a102:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 800a104:	2300      	movs	r3, #0
}
 800a106:	4618      	mov	r0, r3
 800a108:	3740      	adds	r7, #64	@ 0x40
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	41615252 	.word	0x41615252
 800a114:	61417272 	.word	0x61417272
 800a118:	20005c58 	.word	0x20005c58

0800a11c <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a126:	2309      	movs	r3, #9
 800a128:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d01c      	beq.n	800a16a <validate+0x4e>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d018      	beq.n	800a16a <validate+0x4e>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d013      	beq.n	800a16a <validate+0x4e>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	889a      	ldrh	r2, [r3, #4]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	88db      	ldrh	r3, [r3, #6]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d10c      	bne.n	800a16a <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	785b      	ldrb	r3, [r3, #1]
 800a156:	4618      	mov	r0, r3
 800a158:	f7fe fa56 	bl	8008608 <disk_status>
 800a15c:	4603      	mov	r3, r0
 800a15e:	f003 0301 	and.w	r3, r3, #1
 800a162:	2b00      	cmp	r3, #0
 800a164:	d101      	bne.n	800a16a <validate+0x4e>
			res = FR_OK;
 800a166:	2300      	movs	r3, #0
 800a168:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 800a16a:	7bfb      	ldrb	r3, [r7, #15]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d102      	bne.n	800a176 <validate+0x5a>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	e000      	b.n	800a178 <validate+0x5c>
 800a176:	2300      	movs	r3, #0
 800a178:	683a      	ldr	r2, [r7, #0]
 800a17a:	6013      	str	r3, [r2, #0]
	return res;
 800a17c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
	...

0800a188 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b088      	sub	sp, #32
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	4613      	mov	r3, r2
 800a194:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 800a19a:	f107 0310 	add.w	r3, r7, #16
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7ff fbf8 	bl	8009994 <get_ldnumber>
 800a1a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a1a6:	69fb      	ldr	r3, [r7, #28]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	da01      	bge.n	800a1b0 <f_mount+0x28>
 800a1ac:	230b      	movs	r3, #11
 800a1ae:	e02e      	b.n	800a20e <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 800a1b0:	4a19      	ldr	r2, [pc, #100]	@ (800a218 <f_mount+0x90>)
 800a1b2:	69fb      	ldr	r3, [r7, #28]
 800a1b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d007      	beq.n	800a1d0 <f_mount+0x48>
		FatFs[vol] = 0;
 800a1c0:	4a15      	ldr	r2, [pc, #84]	@ (800a218 <f_mount+0x90>)
 800a1c2:	69fb      	ldr	r3, [r7, #28]
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00b      	beq.n	800a1ee <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	69fa      	ldr	r2, [r7, #28]
 800a1da:	b2d2      	uxtb	r2, r2
 800a1dc:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	490c      	ldr	r1, [pc, #48]	@ (800a218 <f_mount+0x90>)
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 800a1ee:	79fb      	ldrb	r3, [r7, #7]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d101      	bne.n	800a1f8 <f_mount+0x70>
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	e00a      	b.n	800a20e <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a1f8:	f107 010c 	add.w	r1, r7, #12
 800a1fc:	f107 0308 	add.w	r3, r7, #8
 800a200:	2200      	movs	r2, #0
 800a202:	4618      	mov	r0, r3
 800a204:	f7ff fd64 	bl	8009cd0 <mount_volume>
 800a208:	4603      	mov	r3, r0
 800a20a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a20c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3720      	adds	r7, #32
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	20005c50 	.word	0x20005c50

0800a21c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b098      	sub	sp, #96	@ 0x60
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	4613      	mov	r3, r2
 800a228:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d101      	bne.n	800a234 <f_open+0x18>
 800a230:	2309      	movs	r3, #9
 800a232:	e184      	b.n	800a53e <f_open+0x322>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 800a234:	79fb      	ldrb	r3, [r7, #7]
 800a236:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a23a:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 800a23c:	79fa      	ldrb	r2, [r7, #7]
 800a23e:	f107 0114 	add.w	r1, r7, #20
 800a242:	f107 0308 	add.w	r3, r7, #8
 800a246:	4618      	mov	r0, r3
 800a248:	f7ff fd42 	bl	8009cd0 <mount_volume>
 800a24c:	4603      	mov	r3, r0
 800a24e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800a252:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a256:	2b00      	cmp	r3, #0
 800a258:	f040 8168 	bne.w	800a52c <f_open+0x310>
		dj.obj.fs = fs;
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a260:	68ba      	ldr	r2, [r7, #8]
 800a262:	f107 0318 	add.w	r3, r7, #24
 800a266:	4611      	mov	r1, r2
 800a268:	4618      	mov	r0, r3
 800a26a:	f7ff fb1f 	bl	80098ac <follow_path>
 800a26e:	4603      	mov	r3, r0
 800a270:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 800a274:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d107      	bne.n	800a28c <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a27c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a280:	b25b      	sxtb	r3, r3
 800a282:	2b00      	cmp	r3, #0
 800a284:	da02      	bge.n	800a28c <f_open+0x70>
				res = FR_INVALID_NAME;
 800a286:	2306      	movs	r3, #6
 800a288:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a28c:	79fb      	ldrb	r3, [r7, #7]
 800a28e:	f003 031c 	and.w	r3, r3, #28
 800a292:	2b00      	cmp	r3, #0
 800a294:	d077      	beq.n	800a386 <f_open+0x16a>
			if (res != FR_OK) {					/* No file, create new */
 800a296:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d010      	beq.n	800a2c0 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a29e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a2a2:	2b04      	cmp	r3, #4
 800a2a4:	d107      	bne.n	800a2b6 <f_open+0x9a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800a2a6:	f107 0318 	add.w	r3, r7, #24
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7ff f9f4 	bl	8009698 <dir_register>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a2b6:	79fb      	ldrb	r3, [r7, #7]
 800a2b8:	f043 0308 	orr.w	r3, r3, #8
 800a2bc:	71fb      	strb	r3, [r7, #7]
 800a2be:	e010      	b.n	800a2e2 <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a2c0:	7fbb      	ldrb	r3, [r7, #30]
 800a2c2:	f003 0311 	and.w	r3, r3, #17
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d003      	beq.n	800a2d2 <f_open+0xb6>
					res = FR_DENIED;
 800a2ca:	2307      	movs	r3, #7
 800a2cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a2d0:	e007      	b.n	800a2e2 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a2d2:	79fb      	ldrb	r3, [r7, #7]
 800a2d4:	f003 0304 	and.w	r3, r3, #4
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d002      	beq.n	800a2e2 <f_open+0xc6>
 800a2dc:	2308      	movs	r3, #8
 800a2de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800a2e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d167      	bne.n	800a3ba <f_open+0x19e>
 800a2ea:	79fb      	ldrb	r3, [r7, #7]
 800a2ec:	f003 0308 	and.w	r3, r3, #8
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d062      	beq.n	800a3ba <f_open+0x19e>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 800a2f4:	4b94      	ldr	r3, [pc, #592]	@ (800a548 <f_open+0x32c>)
 800a2f6:	653b      	str	r3, [r7, #80]	@ 0x50
					st_dword(dj.dir + DIR_CrtTime, tm);
 800a2f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2fa:	330e      	adds	r3, #14
 800a2fc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7fe fb11 	bl	8008926 <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 800a304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a306:	3316      	adds	r3, #22
 800a308:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fe fb0b 	bl	8008926 <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a314:	4611      	mov	r1, r2
 800a316:	4618      	mov	r0, r3
 800a318:	f7ff f92a 	bl	8009570 <ld_clust>
 800a31c:	64f8      	str	r0, [r7, #76]	@ 0x4c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a31e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a320:	330b      	adds	r3, #11
 800a322:	2220      	movs	r2, #32
 800a324:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a32a:	2200      	movs	r2, #0
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7ff f93e 	bl	80095ae <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a334:	331c      	adds	r3, #28
 800a336:	2100      	movs	r1, #0
 800a338:	4618      	mov	r0, r3
 800a33a:	f7fe faf4 	bl	8008926 <st_dword>
					fs->wflag = 1;
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	2201      	movs	r2, #1
 800a342:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 800a344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a346:	2b00      	cmp	r3, #0
 800a348:	d037      	beq.n	800a3ba <f_open+0x19e>
						sc = fs->winsect;
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a34e:	64bb      	str	r3, [r7, #72]	@ 0x48
						res = remove_chain(&dj.obj, cl, 0);
 800a350:	f107 0318 	add.w	r3, r7, #24
 800a354:	2200      	movs	r2, #0
 800a356:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a358:	4618      	mov	r0, r3
 800a35a:	f7fe fe15 	bl	8008f88 <remove_chain>
 800a35e:	4603      	mov	r3, r0
 800a360:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800a364:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d126      	bne.n	800a3ba <f_open+0x19e>
							res = move_window(fs, sc);
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a370:	4618      	mov	r0, r3
 800a372:	f7fe fb62 	bl	8008a3a <move_window>
 800a376:	4603      	mov	r3, r0
 800a378:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a380:	3a01      	subs	r2, #1
 800a382:	611a      	str	r2, [r3, #16]
 800a384:	e019      	b.n	800a3ba <f_open+0x19e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 800a386:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d115      	bne.n	800a3ba <f_open+0x19e>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 800a38e:	7fbb      	ldrb	r3, [r7, #30]
 800a390:	f003 0310 	and.w	r3, r3, #16
 800a394:	2b00      	cmp	r3, #0
 800a396:	d003      	beq.n	800a3a0 <f_open+0x184>
					res = FR_NO_FILE;
 800a398:	2304      	movs	r3, #4
 800a39a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a39e:	e00c      	b.n	800a3ba <f_open+0x19e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 800a3a0:	79fb      	ldrb	r3, [r7, #7]
 800a3a2:	f003 0302 	and.w	r3, r3, #2
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d007      	beq.n	800a3ba <f_open+0x19e>
 800a3aa:	7fbb      	ldrb	r3, [r7, #30]
 800a3ac:	f003 0301 	and.w	r3, r3, #1
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d002      	beq.n	800a3ba <f_open+0x19e>
						res = FR_DENIED;
 800a3b4:	2307      	movs	r3, #7
 800a3b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a3ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10f      	bne.n	800a3e2 <f_open+0x1c6>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800a3c2:	79fb      	ldrb	r3, [r7, #7]
 800a3c4:	f003 0308 	and.w	r3, r3, #8
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d003      	beq.n	800a3d4 <f_open+0x1b8>
 800a3cc:	79fb      	ldrb	r3, [r7, #7]
 800a3ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3d2:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 800a3dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a3e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	f040 80a0 	bne.w	800a52c <f_open+0x310>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3f0:	4611      	mov	r1, r2
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7ff f8bc 	bl	8009570 <ld_clust>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a3fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a400:	331c      	adds	r3, #28
 800a402:	4618      	mov	r0, r3
 800a404:	f7fe fa51 	bl	80088aa <ld_dword>
 800a408:	4602      	mov	r2, r0
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 800a40e:	697a      	ldr	r2, [r7, #20]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	88da      	ldrh	r2, [r3, #6]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	79fa      	ldrb	r2, [r7, #7]
 800a420:	741a      	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2200      	movs	r2, #0
 800a426:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2200      	movs	r2, #0
 800a432:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	3328      	adds	r3, #40	@ 0x28
 800a438:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a43c:	2100      	movs	r1, #0
 800a43e:	4618      	mov	r0, r3
 800a440:	f00c face 	bl	80169e0 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a444:	79fb      	ldrb	r3, [r7, #7]
 800a446:	f003 0320 	and.w	r3, r3, #32
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d06e      	beq.n	800a52c <f_open+0x310>
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d06a      	beq.n	800a52c <f_open+0x310>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	68da      	ldr	r2, [r3, #12]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	895b      	ldrh	r3, [r3, #10]
 800a462:	461a      	mov	r2, r3
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	899b      	ldrh	r3, [r3, #12]
 800a468:	fb02 f303 	mul.w	r3, r2, r3
 800a46c:	647b      	str	r3, [r7, #68]	@ 0x44
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	657b      	str	r3, [r7, #84]	@ 0x54
 800a47a:	e016      	b.n	800a4aa <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a480:	4618      	mov	r0, r3
 800a482:	f7fe fb94 	bl	8008bae <get_fat>
 800a486:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a488:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d802      	bhi.n	800a494 <f_open+0x278>
 800a48e:	2302      	movs	r3, #2
 800a490:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a494:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a49a:	d102      	bne.n	800a4a2 <f_open+0x286>
 800a49c:	2301      	movs	r3, #1
 800a49e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a4a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a4a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4a6:	1ad3      	subs	r3, r2, r3
 800a4a8:	657b      	str	r3, [r7, #84]	@ 0x54
 800a4aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d103      	bne.n	800a4ba <f_open+0x29e>
 800a4b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a4b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d8e0      	bhi.n	800a47c <f_open+0x260>
				}
				fp->clust = clst;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a4be:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a4c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d131      	bne.n	800a52c <f_open+0x310>
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	899b      	ldrh	r3, [r3, #12]
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4d4:	fb01 f202 	mul.w	r2, r1, r2
 800a4d8:	1a9b      	subs	r3, r3, r2
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d026      	beq.n	800a52c <f_open+0x310>
					sc = clst2sect(fs, clst);
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7fe fb44 	bl	8008b70 <clst2sect>
 800a4e8:	64b8      	str	r0, [r7, #72]	@ 0x48
					if (sc == 0) {
 800a4ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d103      	bne.n	800a4f8 <f_open+0x2dc>
						res = FR_INT_ERR;
 800a4f0:	2302      	movs	r3, #2
 800a4f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a4f6:	e019      	b.n	800a52c <f_open+0x310>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	899b      	ldrh	r3, [r3, #12]
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a500:	fbb3 f2f2 	udiv	r2, r3, r2
 800a504:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a506:	441a      	add	r2, r3
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	7858      	ldrb	r0, [r3, #1]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	69da      	ldr	r2, [r3, #28]
 800a51a:	2301      	movs	r3, #1
 800a51c:	f7fe f8c4 	bl	80086a8 <disk_read>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	d002      	beq.n	800a52c <f_open+0x310>
 800a526:	2301      	movs	r3, #1
 800a528:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a52c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a530:	2b00      	cmp	r3, #0
 800a532:	d002      	beq.n	800a53a <f_open+0x31e>
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2200      	movs	r2, #0
 800a538:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a53a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3760      	adds	r7, #96	@ 0x60
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	54210000 	.word	0x54210000

0800a54c <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b08e      	sub	sp, #56	@ 0x38
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
 800a558:	603b      	str	r3, [r7, #0]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	2200      	movs	r2, #0
 800a562:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f107 0214 	add.w	r2, r7, #20
 800a56a:	4611      	mov	r1, r2
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7ff fdd5 	bl	800a11c <validate>
 800a572:	4603      	mov	r3, r0
 800a574:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a578:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d107      	bne.n	800a590 <f_read+0x44>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	7c5b      	ldrb	r3, [r3, #17]
 800a584:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a588:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d002      	beq.n	800a596 <f_read+0x4a>
 800a590:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a594:	e129      	b.n	800a7ea <f_read+0x29e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	7c1b      	ldrb	r3, [r3, #16]
 800a59a:	f003 0301 	and.w	r3, r3, #1
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d101      	bne.n	800a5a6 <f_read+0x5a>
 800a5a2:	2307      	movs	r3, #7
 800a5a4:	e121      	b.n	800a7ea <f_read+0x29e>
	remain = fp->obj.objsize - fp->fptr;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	68da      	ldr	r2, [r3, #12]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	695b      	ldr	r3, [r3, #20]
 800a5ae:	1ad3      	subs	r3, r2, r3
 800a5b0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	6a3b      	ldr	r3, [r7, #32]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	f240 8112 	bls.w	800a7e0 <f_read+0x294>
 800a5bc:	6a3b      	ldr	r3, [r7, #32]
 800a5be:	607b      	str	r3, [r7, #4]

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800a5c0:	e10e      	b.n	800a7e0 <f_read+0x294>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	695b      	ldr	r3, [r3, #20]
 800a5c6:	697a      	ldr	r2, [r7, #20]
 800a5c8:	8992      	ldrh	r2, [r2, #12]
 800a5ca:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5ce:	fb01 f202 	mul.w	r2, r1, r2
 800a5d2:	1a9b      	subs	r3, r3, r2
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f040 80c9 	bne.w	800a76c <f_read+0x220>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	695b      	ldr	r3, [r3, #20]
 800a5de:	697a      	ldr	r2, [r7, #20]
 800a5e0:	8992      	ldrh	r2, [r2, #12]
 800a5e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5e6:	697a      	ldr	r2, [r7, #20]
 800a5e8:	8952      	ldrh	r2, [r2, #10]
 800a5ea:	3a01      	subs	r2, #1
 800a5ec:	4013      	ands	r3, r2
 800a5ee:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d123      	bne.n	800a63e <f_read+0xf2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	695b      	ldr	r3, [r3, #20]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d103      	bne.n	800a606 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	633b      	str	r3, [r7, #48]	@ 0x30
 800a604:	e007      	b.n	800a616 <f_read+0xca>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	699b      	ldr	r3, [r3, #24]
 800a60c:	4619      	mov	r1, r3
 800a60e:	4610      	mov	r0, r2
 800a610:	f7fe facd 	bl	8008bae <get_fat>
 800a614:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d804      	bhi.n	800a626 <f_read+0xda>
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2202      	movs	r2, #2
 800a620:	745a      	strb	r2, [r3, #17]
 800a622:	2302      	movs	r3, #2
 800a624:	e0e1      	b.n	800a7ea <f_read+0x29e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a62c:	d104      	bne.n	800a638 <f_read+0xec>
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2201      	movs	r2, #1
 800a632:	745a      	strb	r2, [r3, #17]
 800a634:	2301      	movs	r3, #1
 800a636:	e0d8      	b.n	800a7ea <f_read+0x29e>
				fp->clust = clst;				/* Update current cluster */
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a63c:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800a63e:	697a      	ldr	r2, [r7, #20]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	699b      	ldr	r3, [r3, #24]
 800a644:	4619      	mov	r1, r3
 800a646:	4610      	mov	r0, r2
 800a648:	f7fe fa92 	bl	8008b70 <clst2sect>
 800a64c:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d104      	bne.n	800a65e <f_read+0x112>
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2202      	movs	r2, #2
 800a658:	745a      	strb	r2, [r3, #17]
 800a65a:	2302      	movs	r3, #2
 800a65c:	e0c5      	b.n	800a7ea <f_read+0x29e>
			sect += csect;
 800a65e:	69ba      	ldr	r2, [r7, #24]
 800a660:	69fb      	ldr	r3, [r7, #28]
 800a662:	4413      	add	r3, r2
 800a664:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	899b      	ldrh	r3, [r3, #12]
 800a66a:	461a      	mov	r2, r3
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a672:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 800a674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a676:	2b00      	cmp	r3, #0
 800a678:	d041      	beq.n	800a6fe <f_read+0x1b2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a67a:	69fa      	ldr	r2, [r7, #28]
 800a67c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a67e:	4413      	add	r3, r2
 800a680:	697a      	ldr	r2, [r7, #20]
 800a682:	8952      	ldrh	r2, [r2, #10]
 800a684:	4293      	cmp	r3, r2
 800a686:	d905      	bls.n	800a694 <f_read+0x148>
					cc = fs->csize - csect;
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	895b      	ldrh	r3, [r3, #10]
 800a68c:	461a      	mov	r2, r3
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	1ad3      	subs	r3, r2, r3
 800a692:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	7858      	ldrb	r0, [r3, #1]
 800a698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a69a:	69ba      	ldr	r2, [r7, #24]
 800a69c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a69e:	f7fe f803 	bl	80086a8 <disk_read>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d004      	beq.n	800a6b2 <f_read+0x166>
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	745a      	strb	r2, [r3, #17]
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e09b      	b.n	800a7ea <f_read+0x29e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	7c1b      	ldrb	r3, [r3, #16]
 800a6b6:	b25b      	sxtb	r3, r3
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	da18      	bge.n	800a6ee <f_read+0x1a2>
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	69da      	ldr	r2, [r3, #28]
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	1ad3      	subs	r3, r2, r3
 800a6c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d911      	bls.n	800a6ee <f_read+0x1a2>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	69da      	ldr	r2, [r3, #28]
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	1ad3      	subs	r3, r2, r3
 800a6d2:	697a      	ldr	r2, [r7, #20]
 800a6d4:	8992      	ldrh	r2, [r2, #12]
 800a6d6:	fb02 f303 	mul.w	r3, r2, r3
 800a6da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6dc:	18d0      	adds	r0, r2, r3
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	899b      	ldrh	r3, [r3, #12]
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	f00c f9fd 	bl	8016ae8 <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	899b      	ldrh	r3, [r3, #12]
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f6:	fb02 f303 	mul.w	r3, r2, r3
 800a6fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800a6fc:	e05c      	b.n	800a7b8 <f_read+0x26c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	69db      	ldr	r3, [r3, #28]
 800a702:	69ba      	ldr	r2, [r7, #24]
 800a704:	429a      	cmp	r2, r3
 800a706:	d02e      	beq.n	800a766 <f_read+0x21a>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	7c1b      	ldrb	r3, [r3, #16]
 800a70c:	b25b      	sxtb	r3, r3
 800a70e:	2b00      	cmp	r3, #0
 800a710:	da18      	bge.n	800a744 <f_read+0x1f8>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	7858      	ldrb	r0, [r3, #1]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	69da      	ldr	r2, [r3, #28]
 800a720:	2301      	movs	r3, #1
 800a722:	f7fd fff3 	bl	800870c <disk_write>
 800a726:	4603      	mov	r3, r0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d004      	beq.n	800a736 <f_read+0x1ea>
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2201      	movs	r2, #1
 800a730:	745a      	strb	r2, [r3, #17]
 800a732:	2301      	movs	r3, #1
 800a734:	e059      	b.n	800a7ea <f_read+0x29e>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	7c1b      	ldrb	r3, [r3, #16]
 800a73a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a73e:	b2da      	uxtb	r2, r3
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	7858      	ldrb	r0, [r3, #1]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a74e:	2301      	movs	r3, #1
 800a750:	69ba      	ldr	r2, [r7, #24]
 800a752:	f7fd ffa9 	bl	80086a8 <disk_read>
 800a756:	4603      	mov	r3, r0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d004      	beq.n	800a766 <f_read+0x21a>
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2201      	movs	r2, #1
 800a760:	745a      	strb	r2, [r3, #17]
 800a762:	2301      	movs	r3, #1
 800a764:	e041      	b.n	800a7ea <f_read+0x29e>
			}
#endif
			fp->sect = sect;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	69ba      	ldr	r2, [r7, #24]
 800a76a:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	899b      	ldrh	r3, [r3, #12]
 800a770:	4618      	mov	r0, r3
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	695b      	ldr	r3, [r3, #20]
 800a776:	697a      	ldr	r2, [r7, #20]
 800a778:	8992      	ldrh	r2, [r2, #12]
 800a77a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a77e:	fb01 f202 	mul.w	r2, r1, r2
 800a782:	1a9b      	subs	r3, r3, r2
 800a784:	1ac3      	subs	r3, r0, r3
 800a786:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a788:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d901      	bls.n	800a794 <f_read+0x248>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	695b      	ldr	r3, [r3, #20]
 800a79e:	697a      	ldr	r2, [r7, #20]
 800a7a0:	8992      	ldrh	r2, [r2, #12]
 800a7a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a7a6:	fb00 f202 	mul.w	r2, r0, r2
 800a7aa:	1a9b      	subs	r3, r3, r2
 800a7ac:	440b      	add	r3, r1
 800a7ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a7b4:	f00c f998 	bl	8016ae8 <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	607b      	str	r3, [r7, #4]
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c6:	441a      	add	r2, r3
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	601a      	str	r2, [r3, #0]
 800a7cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d0:	4413      	add	r3, r2
 800a7d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	695a      	ldr	r2, [r3, #20]
 800a7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7da:	441a      	add	r2, r3
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	615a      	str	r2, [r3, #20]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f47f aeed 	bne.w	800a5c2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3738      	adds	r7, #56	@ 0x38
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b08c      	sub	sp, #48	@ 0x30
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	60f8      	str	r0, [r7, #12]
 800a7fa:	60b9      	str	r1, [r7, #8]
 800a7fc:	607a      	str	r2, [r7, #4]
 800a7fe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	2200      	movs	r2, #0
 800a808:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f107 0210 	add.w	r2, r7, #16
 800a810:	4611      	mov	r1, r2
 800a812:	4618      	mov	r0, r3
 800a814:	f7ff fc82 	bl	800a11c <validate>
 800a818:	4603      	mov	r3, r0
 800a81a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a81e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a822:	2b00      	cmp	r3, #0
 800a824:	d107      	bne.n	800a836 <f_write+0x44>
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	7c5b      	ldrb	r3, [r3, #17]
 800a82a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a82e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a832:	2b00      	cmp	r3, #0
 800a834:	d002      	beq.n	800a83c <f_write+0x4a>
 800a836:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a83a:	e15e      	b.n	800aafa <f_write+0x308>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	7c1b      	ldrb	r3, [r3, #16]
 800a840:	f003 0302 	and.w	r3, r3, #2
 800a844:	2b00      	cmp	r3, #0
 800a846:	d101      	bne.n	800a84c <f_write+0x5a>
 800a848:	2307      	movs	r3, #7
 800a84a:	e156      	b.n	800aafa <f_write+0x308>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	695a      	ldr	r2, [r3, #20]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	441a      	add	r2, r3
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	695b      	ldr	r3, [r3, #20]
 800a858:	429a      	cmp	r2, r3
 800a85a:	f080 8140 	bcs.w	800aade <f_write+0x2ec>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	695b      	ldr	r3, [r3, #20]
 800a862:	43db      	mvns	r3, r3
 800a864:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800a866:	e13a      	b.n	800aade <f_write+0x2ec>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	695b      	ldr	r3, [r3, #20]
 800a86c:	693a      	ldr	r2, [r7, #16]
 800a86e:	8992      	ldrh	r2, [r2, #12]
 800a870:	fbb3 f1f2 	udiv	r1, r3, r2
 800a874:	fb01 f202 	mul.w	r2, r1, r2
 800a878:	1a9b      	subs	r3, r3, r2
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f040 80e5 	bne.w	800aa4a <f_write+0x258>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	695b      	ldr	r3, [r3, #20]
 800a884:	693a      	ldr	r2, [r7, #16]
 800a886:	8992      	ldrh	r2, [r2, #12]
 800a888:	fbb3 f3f2 	udiv	r3, r3, r2
 800a88c:	693a      	ldr	r2, [r7, #16]
 800a88e:	8952      	ldrh	r2, [r2, #10]
 800a890:	3a01      	subs	r2, #1
 800a892:	4013      	ands	r3, r2
 800a894:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d137      	bne.n	800a90c <f_write+0x11a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	695b      	ldr	r3, [r3, #20]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d10c      	bne.n	800a8be <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a8aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d10e      	bne.n	800a8ce <f_write+0xdc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2100      	movs	r1, #0
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7fe fbcc 	bl	8009052 <create_chain>
 800a8ba:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a8bc:	e007      	b.n	800a8ce <f_write+0xdc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	699b      	ldr	r3, [r3, #24]
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	4610      	mov	r0, r2
 800a8c8:	f7fe fbc3 	bl	8009052 <create_chain>
 800a8cc:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a8ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f000 8109 	beq.w	800aae8 <f_write+0x2f6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a8d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d104      	bne.n	800a8e6 <f_write+0xf4>
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2202      	movs	r2, #2
 800a8e0:	745a      	strb	r2, [r3, #17]
 800a8e2:	2302      	movs	r3, #2
 800a8e4:	e109      	b.n	800aafa <f_write+0x308>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ec:	d104      	bne.n	800a8f8 <f_write+0x106>
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	745a      	strb	r2, [r3, #17]
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e100      	b.n	800aafa <f_write+0x308>
				fp->clust = clst;			/* Update current cluster */
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a8fc:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d102      	bne.n	800a90c <f_write+0x11a>
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a90a:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	7c1b      	ldrb	r3, [r3, #16]
 800a910:	b25b      	sxtb	r3, r3
 800a912:	2b00      	cmp	r3, #0
 800a914:	da18      	bge.n	800a948 <f_write+0x156>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	7858      	ldrb	r0, [r3, #1]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	69da      	ldr	r2, [r3, #28]
 800a924:	2301      	movs	r3, #1
 800a926:	f7fd fef1 	bl	800870c <disk_write>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d004      	beq.n	800a93a <f_write+0x148>
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2201      	movs	r2, #1
 800a934:	745a      	strb	r2, [r3, #17]
 800a936:	2301      	movs	r3, #1
 800a938:	e0df      	b.n	800aafa <f_write+0x308>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	7c1b      	ldrb	r3, [r3, #16]
 800a93e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a942:	b2da      	uxtb	r2, r3
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800a948:	693a      	ldr	r2, [r7, #16]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	4619      	mov	r1, r3
 800a950:	4610      	mov	r0, r2
 800a952:	f7fe f90d 	bl	8008b70 <clst2sect>
 800a956:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d104      	bne.n	800a968 <f_write+0x176>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2202      	movs	r2, #2
 800a962:	745a      	strb	r2, [r3, #17]
 800a964:	2302      	movs	r3, #2
 800a966:	e0c8      	b.n	800aafa <f_write+0x308>
			sect += csect;
 800a968:	697a      	ldr	r2, [r7, #20]
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	4413      	add	r3, r2
 800a96e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	899b      	ldrh	r3, [r3, #12]
 800a974:	461a      	mov	r2, r3
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	fbb3 f3f2 	udiv	r3, r3, r2
 800a97c:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 800a97e:	6a3b      	ldr	r3, [r7, #32]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d043      	beq.n	800aa0c <f_write+0x21a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a984:	69ba      	ldr	r2, [r7, #24]
 800a986:	6a3b      	ldr	r3, [r7, #32]
 800a988:	4413      	add	r3, r2
 800a98a:	693a      	ldr	r2, [r7, #16]
 800a98c:	8952      	ldrh	r2, [r2, #10]
 800a98e:	4293      	cmp	r3, r2
 800a990:	d905      	bls.n	800a99e <f_write+0x1ac>
					cc = fs->csize - csect;
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	895b      	ldrh	r3, [r3, #10]
 800a996:	461a      	mov	r2, r3
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	1ad3      	subs	r3, r2, r3
 800a99c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	7858      	ldrb	r0, [r3, #1]
 800a9a2:	6a3b      	ldr	r3, [r7, #32]
 800a9a4:	697a      	ldr	r2, [r7, #20]
 800a9a6:	69f9      	ldr	r1, [r7, #28]
 800a9a8:	f7fd feb0 	bl	800870c <disk_write>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d004      	beq.n	800a9bc <f_write+0x1ca>
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	745a      	strb	r2, [r3, #17]
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e09e      	b.n	800aafa <f_write+0x308>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	69da      	ldr	r2, [r3, #28]
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	1ad3      	subs	r3, r2, r3
 800a9c4:	6a3a      	ldr	r2, [r7, #32]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d918      	bls.n	800a9fc <f_write+0x20a>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	69da      	ldr	r2, [r3, #28]
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	693a      	ldr	r2, [r7, #16]
 800a9da:	8992      	ldrh	r2, [r2, #12]
 800a9dc:	fb02 f303 	mul.w	r3, r2, r3
 800a9e0:	69fa      	ldr	r2, [r7, #28]
 800a9e2:	18d1      	adds	r1, r2, r3
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	899b      	ldrh	r3, [r3, #12]
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	f00c f87d 	bl	8016ae8 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	7c1b      	ldrb	r3, [r3, #16]
 800a9f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9f6:	b2da      	uxtb	r2, r3
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	899b      	ldrh	r3, [r3, #12]
 800aa00:	461a      	mov	r2, r3
 800aa02:	6a3b      	ldr	r3, [r7, #32]
 800aa04:	fb02 f303 	mul.w	r3, r2, r3
 800aa08:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800aa0a:	e04b      	b.n	800aaa4 <f_write+0x2b2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	69db      	ldr	r3, [r3, #28]
 800aa10:	697a      	ldr	r2, [r7, #20]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d016      	beq.n	800aa44 <f_write+0x252>
				fp->fptr < fp->obj.objsize &&
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	695a      	ldr	r2, [r3, #20]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d210      	bcs.n	800aa44 <f_write+0x252>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	7858      	ldrb	r0, [r3, #1]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	697a      	ldr	r2, [r7, #20]
 800aa30:	f7fd fe3a 	bl	80086a8 <disk_read>
 800aa34:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d004      	beq.n	800aa44 <f_write+0x252>
					ABORT(fs, FR_DISK_ERR);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	745a      	strb	r2, [r3, #17]
 800aa40:	2301      	movs	r3, #1
 800aa42:	e05a      	b.n	800aafa <f_write+0x308>
			}
#endif
			fp->sect = sect;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	899b      	ldrh	r3, [r3, #12]
 800aa4e:	4618      	mov	r0, r3
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	695b      	ldr	r3, [r3, #20]
 800aa54:	693a      	ldr	r2, [r7, #16]
 800aa56:	8992      	ldrh	r2, [r2, #12]
 800aa58:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa5c:	fb01 f202 	mul.w	r2, r1, r2
 800aa60:	1a9b      	subs	r3, r3, r2
 800aa62:	1ac3      	subs	r3, r0, r3
 800aa64:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800aa66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d901      	bls.n	800aa72 <f_write+0x280>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	627b      	str	r3, [r7, #36]	@ 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	695b      	ldr	r3, [r3, #20]
 800aa7c:	693a      	ldr	r2, [r7, #16]
 800aa7e:	8992      	ldrh	r2, [r2, #12]
 800aa80:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa84:	fb00 f202 	mul.w	r2, r0, r2
 800aa88:	1a9b      	subs	r3, r3, r2
 800aa8a:	440b      	add	r3, r1
 800aa8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa8e:	69f9      	ldr	r1, [r7, #28]
 800aa90:	4618      	mov	r0, r3
 800aa92:	f00c f829 	bl	8016ae8 <memcpy>
		fp->flag |= FA_DIRTY;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	7c1b      	ldrb	r3, [r3, #16]
 800aa9a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aa9e:	b2da      	uxtb	r2, r3
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	741a      	strb	r2, [r3, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa8:	1ad3      	subs	r3, r2, r3
 800aaaa:	607b      	str	r3, [r7, #4]
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	681a      	ldr	r2, [r3, #0]
 800aab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab2:	441a      	add	r2, r3
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	601a      	str	r2, [r3, #0]
 800aab8:	69fa      	ldr	r2, [r7, #28]
 800aaba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aabc:	4413      	add	r3, r2
 800aabe:	61fb      	str	r3, [r7, #28]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	695a      	ldr	r2, [r3, #20]
 800aac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac6:	441a      	add	r2, r3
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	615a      	str	r2, [r3, #20]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	68da      	ldr	r2, [r3, #12]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	695b      	ldr	r3, [r3, #20]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	bf38      	it	cc
 800aad8:	461a      	movcc	r2, r3
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	60da      	str	r2, [r3, #12]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	f47f aec1 	bne.w	800a868 <f_write+0x76>
 800aae6:	e000      	b.n	800aaea <f_write+0x2f8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aae8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	7c1b      	ldrb	r3, [r3, #16]
 800aaee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aaf2:	b2da      	uxtb	r2, r3
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3730      	adds	r7, #48	@ 0x30
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
	...

0800ab04 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b086      	sub	sp, #24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f107 0208 	add.w	r2, r7, #8
 800ab12:	4611      	mov	r1, r2
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7ff fb01 	bl	800a11c <validate>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ab1e:	7dfb      	ldrb	r3, [r7, #23]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d167      	bne.n	800abf4 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	7c1b      	ldrb	r3, [r3, #16]
 800ab28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d061      	beq.n	800abf4 <f_sync+0xf0>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	7c1b      	ldrb	r3, [r3, #16]
 800ab34:	b25b      	sxtb	r3, r3
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	da15      	bge.n	800ab66 <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	7858      	ldrb	r0, [r3, #1]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	69da      	ldr	r2, [r3, #28]
 800ab48:	2301      	movs	r3, #1
 800ab4a:	f7fd fddf 	bl	800870c <disk_write>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d001      	beq.n	800ab58 <f_sync+0x54>
 800ab54:	2301      	movs	r3, #1
 800ab56:	e04e      	b.n	800abf6 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	7c1b      	ldrb	r3, [r3, #16]
 800ab5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab60:	b2da      	uxtb	r2, r3
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ab66:	4b26      	ldr	r3, [pc, #152]	@ (800ac00 <f_sync+0xfc>)
 800ab68:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ab6a:	68ba      	ldr	r2, [r7, #8]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6a1b      	ldr	r3, [r3, #32]
 800ab70:	4619      	mov	r1, r3
 800ab72:	4610      	mov	r0, r2
 800ab74:	f7fd ff61 	bl	8008a3a <move_window>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ab7c:	7dfb      	ldrb	r3, [r7, #23]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d138      	bne.n	800abf4 <f_sync+0xf0>
					dir = fp->dir_ptr;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab86:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	330b      	adds	r3, #11
 800ab8c:	781a      	ldrb	r2, [r3, #0]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	330b      	adds	r3, #11
 800ab92:	f042 0220 	orr.w	r2, r2, #32
 800ab96:	b2d2      	uxtb	r2, r2
 800ab98:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6818      	ldr	r0, [r3, #0]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	689b      	ldr	r3, [r3, #8]
 800aba2:	461a      	mov	r2, r3
 800aba4:	68f9      	ldr	r1, [r7, #12]
 800aba6:	f7fe fd02 	bl	80095ae <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f103 021c 	add.w	r2, r3, #28
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	4619      	mov	r1, r3
 800abb6:	4610      	mov	r0, r2
 800abb8:	f7fd feb5 	bl	8008926 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	3316      	adds	r3, #22
 800abc0:	6939      	ldr	r1, [r7, #16]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7fd feaf 	bl	8008926 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	3312      	adds	r3, #18
 800abcc:	2100      	movs	r1, #0
 800abce:	4618      	mov	r0, r3
 800abd0:	f7fd fe8e 	bl	80088f0 <st_word>
					fs->wflag = 1;
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	2201      	movs	r2, #1
 800abd8:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fd ff59 	bl	8008a94 <sync_fs>
 800abe2:	4603      	mov	r3, r0
 800abe4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	7c1b      	ldrb	r3, [r3, #16]
 800abea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abee:	b2da      	uxtb	r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800abf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3718      	adds	r7, #24
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	54210000 	.word	0x54210000

0800ac04 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f7ff ff79 	bl	800ab04 <f_sync>
 800ac12:	4603      	mov	r3, r0
 800ac14:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ac16:	7bfb      	ldrb	r3, [r7, #15]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d10e      	bne.n	800ac3a <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f107 0208 	add.w	r2, r7, #8
 800ac22:	4611      	mov	r1, r2
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7ff fa79 	bl	800a11c <validate>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ac2e:	7bfb      	ldrb	r3, [r7, #15]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d102      	bne.n	800ac3a <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ac3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3710      	adds	r7, #16
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID for each partition (for only MBR) */
	BYTE *buf			/* Working buffer for a sector */
)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b08e      	sub	sp, #56	@ 0x38
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60b9      	str	r1, [r7, #8]
 800ac4c:	607b      	str	r3, [r7, #4]
 800ac4e:	4603      	mov	r3, r0
 800ac50:	73fb      	strb	r3, [r7, #15]
 800ac52:	4613      	mov	r3, r2
 800ac54:	73bb      	strb	r3, [r7, #14]
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 800ac56:	f107 0210 	add.w	r2, r7, #16
 800ac5a:	7bfb      	ldrb	r3, [r7, #15]
 800ac5c:	2101      	movs	r1, #1
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7fd fd88 	bl	8008774 <disk_ioctl>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d001      	beq.n	800ac6e <create_partition+0x2a>
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e108      	b.n	800ae80 <create_partition+0x23c>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	623b      	str	r3, [r7, #32]
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
 800ac72:	233f      	movs	r3, #63	@ 0x3f
 800ac74:	77fb      	strb	r3, [r7, #31]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 800ac76:	2308      	movs	r3, #8
 800ac78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ac7c:	e004      	b.n	800ac88 <create_partition+0x44>
 800ac7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac82:	005b      	lsls	r3, r3, #1
 800ac84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ac88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d00a      	beq.n	800aca6 <create_partition+0x62>
 800ac90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac94:	6a3a      	ldr	r2, [r7, #32]
 800ac96:	fbb2 f2f3 	udiv	r2, r2, r3
 800ac9a:	7ffb      	ldrb	r3, [r7, #31]
 800ac9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aca4:	d8eb      	bhi.n	800ac7e <create_partition+0x3a>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 800aca6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d102      	bne.n	800acb4 <create_partition+0x70>
 800acae:	23ff      	movs	r3, #255	@ 0xff
 800acb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 800acb4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800acb8:	2100      	movs	r1, #0
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f00b fe90 	bl	80169e0 <memset>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800acc6:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800acc8:	2300      	movs	r3, #0
 800acca:	637b      	str	r3, [r7, #52]	@ 0x34
 800accc:	7ffb      	ldrb	r3, [r7, #31]
 800acce:	633b      	str	r3, [r7, #48]	@ 0x30
 800acd0:	e0b5      	b.n	800ae3e <create_partition+0x1fa>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 800acd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	68ba      	ldr	r2, [r7, #8]
 800acd8:	4413      	add	r3, r2
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 800acde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ace0:	2b64      	cmp	r3, #100	@ 0x64
 800ace2:	d80d      	bhi.n	800ad00 <create_partition+0xbc>
 800ace4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ace6:	2b64      	cmp	r3, #100	@ 0x64
 800ace8:	d008      	beq.n	800acfc <create_partition+0xb8>
 800acea:	6a3b      	ldr	r3, [r7, #32]
 800acec:	4a66      	ldr	r2, [pc, #408]	@ (800ae88 <create_partition+0x244>)
 800acee:	fba2 2303 	umull	r2, r3, r2, r3
 800acf2:	095b      	lsrs	r3, r3, #5
 800acf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acf6:	fb02 f303 	mul.w	r3, r2, r3
 800acfa:	e000      	b.n	800acfe <create_partition+0xba>
 800acfc:	6a3b      	ldr	r3, [r7, #32]
 800acfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 800ad00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad04:	4413      	add	r3, r2
 800ad06:	6a3a      	ldr	r2, [r7, #32]
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d305      	bcc.n	800ad18 <create_partition+0xd4>
 800ad0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad10:	4413      	add	r3, r2
 800ad12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d903      	bls.n	800ad20 <create_partition+0xdc>
 800ad18:	6a3a      	ldr	r2, [r7, #32]
 800ad1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad1c:	1ad3      	subs	r3, r2, r3
 800ad1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800ad20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	f000 8097 	beq.w	800ae56 <create_partition+0x212>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 800ad28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad2a:	3308      	adds	r3, #8
 800ad2c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f7fd fdf9 	bl	8008926 <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 800ad34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad36:	330c      	adds	r3, #12
 800ad38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7fd fdf3 	bl	8008926 <st_dword>
			pte[PTE_System] = sys;					/* System type */
 800ad40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad42:	3304      	adds	r3, #4
 800ad44:	7bba      	ldrb	r2, [r7, #14]
 800ad46:	701a      	strb	r2, [r3, #0]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 800ad48:	7ffb      	ldrb	r3, [r7, #31]
 800ad4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad4c:	fbb2 f2f3 	udiv	r2, r2, r3
 800ad50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad54:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad58:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 800ad5a:	7ffb      	ldrb	r3, [r7, #31]
 800ad5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad62:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ad66:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad6a:	fb01 f202 	mul.w	r2, r1, r2
 800ad6e:	1a9b      	subs	r3, r3, r2
 800ad70:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 800ad72:	7ffa      	ldrb	r2, [r7, #31]
 800ad74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad76:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad7a:	fb01 f202 	mul.w	r2, r1, r2
 800ad7e:	1a9b      	subs	r3, r3, r2
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	3301      	adds	r3, #1
 800ad84:	75bb      	strb	r3, [r7, #22]
			pte[PTE_StHead] = hd;
 800ad86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad88:	3301      	adds	r3, #1
 800ad8a:	7dfa      	ldrb	r2, [r7, #23]
 800ad8c:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800ad8e:	69bb      	ldr	r3, [r7, #24]
 800ad90:	089b      	lsrs	r3, r3, #2
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ad98:	b2d9      	uxtb	r1, r3
 800ad9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad9c:	3302      	adds	r3, #2
 800ad9e:	7dba      	ldrb	r2, [r7, #22]
 800ada0:	430a      	orrs	r2, r1
 800ada2:	b2d2      	uxtb	r2, r2
 800ada4:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = (BYTE)cy;
 800ada6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada8:	3303      	adds	r3, #3
 800adaa:	69ba      	ldr	r2, [r7, #24]
 800adac:	b2d2      	uxtb	r2, r2
 800adae:	701a      	strb	r2, [r3, #0]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 800adb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adb4:	4413      	add	r3, r2
 800adb6:	1e5a      	subs	r2, r3, #1
 800adb8:	7ffb      	ldrb	r3, [r7, #31]
 800adba:	fbb2 f2f3 	udiv	r2, r2, r3
 800adbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800adc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800adc6:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 800adc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adcc:	4413      	add	r3, r2
 800adce:	1e5a      	subs	r2, r3, #1
 800add0:	7ffb      	ldrb	r3, [r7, #31]
 800add2:	fbb2 f3f3 	udiv	r3, r2, r3
 800add6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800adda:	fbb3 f1f2 	udiv	r1, r3, r2
 800adde:	fb01 f202 	mul.w	r2, r1, r2
 800ade2:	1a9b      	subs	r3, r3, r2
 800ade4:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 800ade6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ade8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adea:	4413      	add	r3, r2
 800adec:	3b01      	subs	r3, #1
 800adee:	7ffa      	ldrb	r2, [r7, #31]
 800adf0:	fbb3 f1f2 	udiv	r1, r3, r2
 800adf4:	fb01 f202 	mul.w	r2, r1, r2
 800adf8:	1a9b      	subs	r3, r3, r2
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	3301      	adds	r3, #1
 800adfe:	75bb      	strb	r3, [r7, #22]
			pte[PTE_EdHead] = hd;
 800ae00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae02:	3305      	adds	r3, #5
 800ae04:	7dfa      	ldrb	r2, [r7, #23]
 800ae06:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800ae08:	69bb      	ldr	r3, [r7, #24]
 800ae0a:	089b      	lsrs	r3, r3, #2
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ae12:	b2d9      	uxtb	r1, r3
 800ae14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae16:	3306      	adds	r3, #6
 800ae18:	7dba      	ldrb	r2, [r7, #22]
 800ae1a:	430a      	orrs	r2, r1
 800ae1c:	b2d2      	uxtb	r2, r2
 800ae1e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)cy;
 800ae20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae22:	3307      	adds	r3, #7
 800ae24:	69ba      	ldr	r2, [r7, #24]
 800ae26:	b2d2      	uxtb	r2, r2
 800ae28:	701a      	strb	r2, [r3, #0]

			pte += SZ_PTE;		/* Next entry */
 800ae2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae2c:	3310      	adds	r3, #16
 800ae2e:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800ae30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae32:	3301      	adds	r3, #1
 800ae34:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae3a:	4413      	add	r3, r2
 800ae3c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae40:	2b03      	cmp	r3, #3
 800ae42:	d809      	bhi.n	800ae58 <create_partition+0x214>
 800ae44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d006      	beq.n	800ae58 <create_partition+0x214>
 800ae4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae4c:	6a3b      	ldr	r3, [r7, #32]
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	f4ff af3f 	bcc.w	800acd2 <create_partition+0x8e>
 800ae54:	e000      	b.n	800ae58 <create_partition+0x214>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800ae56:	bf00      	nop
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ae5e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7fd fd44 	bl	80088f0 <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800ae68:	7bf8      	ldrb	r0, [r7, #15]
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	6879      	ldr	r1, [r7, #4]
 800ae70:	f7fd fc4c 	bl	800870c <disk_write>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d001      	beq.n	800ae7e <create_partition+0x23a>
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e000      	b.n	800ae80 <create_partition+0x23c>
	}

	return FR_OK;
 800ae7e:	2300      	movs	r3, #0
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3738      	adds	r7, #56	@ 0x38
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	51eb851f 	.word	0x51eb851f

0800ae8c <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b09e      	sub	sp, #120	@ 0x78
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	607a      	str	r2, [r7, #4]
 800ae98:	603b      	str	r3, [r7, #0]
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800ae9a:	f107 030c 	add.w	r3, r7, #12
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fe fd78 	bl	8009994 <get_ldnumber>
 800aea4:	6478      	str	r0, [r7, #68]	@ 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800aea6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	da02      	bge.n	800aeb2 <f_mkfs+0x26>
 800aeac:	230b      	movs	r3, #11
 800aeae:	f000 bc39 	b.w	800b724 <f_mkfs+0x898>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 800aeb2:	4a90      	ldr	r2, [pc, #576]	@ (800b0f4 <f_mkfs+0x268>)
 800aeb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aeb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d005      	beq.n	800aeca <f_mkfs+0x3e>
 800aebe:	4a8d      	ldr	r2, [pc, #564]	@ (800b0f4 <f_mkfs+0x268>)
 800aec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aec6:	2200      	movs	r2, #0
 800aec8:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 800aeca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aecc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */
 800aed0:	2300      	movs	r3, #0
 800aed2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 800aed6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7fd fbbc 	bl	8008658 <disk_initialize>
 800aee0:	4603      	mov	r3, r0
 800aee2:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	if (ds & STA_NOINIT) return FR_NOT_READY;
 800aee6:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800aeea:	f003 0301 	and.w	r3, r3, #1
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d002      	beq.n	800aef8 <f_mkfs+0x6c>
 800aef2:	2303      	movs	r3, #3
 800aef4:	f000 bc16 	b.w	800b724 <f_mkfs+0x898>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 800aef8:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800aefc:	f003 0304 	and.w	r3, r3, #4
 800af00:	2b00      	cmp	r3, #0
 800af02:	d002      	beq.n	800af0a <f_mkfs+0x7e>
 800af04:	230a      	movs	r3, #10
 800af06:	f000 bc0d 	b.w	800b724 <f_mkfs+0x898>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d101      	bne.n	800af14 <f_mkfs+0x88>
 800af10:	4b79      	ldr	r3, [pc, #484]	@ (800b0f8 <f_mkfs+0x26c>)
 800af12:	60bb      	str	r3, [r7, #8]
	sz_blk = opt->align;
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	61fb      	str	r3, [r7, #28]
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the paramter or lower layer */
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d107      	bne.n	800af30 <f_mkfs+0xa4>
 800af20:	f107 021c 	add.w	r2, r7, #28
 800af24:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800af28:	2103      	movs	r1, #3
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7fd fc22 	bl	8008774 <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d009      	beq.n	800af4a <f_mkfs+0xbe>
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af3c:	d805      	bhi.n	800af4a <f_mkfs+0xbe>
 800af3e:	69fb      	ldr	r3, [r7, #28]
 800af40:	1e5a      	subs	r2, r3, #1
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	4013      	ands	r3, r2
 800af46:	2b00      	cmp	r3, #0
 800af48:	d001      	beq.n	800af4e <f_mkfs+0xc2>
 800af4a:	2301      	movs	r3, #1
 800af4c:	61fb      	str	r3, [r7, #28]
#if FF_MAX_SS != FF_MIN_SS
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 800af4e:	f107 0220 	add.w	r2, r7, #32
 800af52:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800af56:	2102      	movs	r1, #2
 800af58:	4618      	mov	r0, r3
 800af5a:	f7fd fc0b 	bl	8008774 <disk_ioctl>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d001      	beq.n	800af68 <f_mkfs+0xdc>
 800af64:	2301      	movs	r3, #1
 800af66:	e3dd      	b.n	800b724 <f_mkfs+0x898>
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 800af68:	8c3b      	ldrh	r3, [r7, #32]
 800af6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af6e:	d80a      	bhi.n	800af86 <f_mkfs+0xfa>
 800af70:	8c3b      	ldrh	r3, [r7, #32]
 800af72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af76:	d306      	bcc.n	800af86 <f_mkfs+0xfa>
 800af78:	8c3b      	ldrh	r3, [r7, #32]
 800af7a:	461a      	mov	r2, r3
 800af7c:	8c3b      	ldrh	r3, [r7, #32]
 800af7e:	3b01      	subs	r3, #1
 800af80:	4013      	ands	r3, r2
 800af82:	2b00      	cmp	r3, #0
 800af84:	d001      	beq.n	800af8a <f_mkfs+0xfe>
 800af86:	2301      	movs	r3, #1
 800af88:	e3cc      	b.n	800b724 <f_mkfs+0x898>
#else
	ss = FF_MAX_SS;
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	f003 030f 	and.w	r3, r3, #15
 800af92:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	785b      	ldrb	r3, [r3, #1]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d006      	beq.n	800afac <f_mkfs+0x120>
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	785b      	ldrb	r3, [r3, #1]
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	d802      	bhi.n	800afac <f_mkfs+0x120>
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	785b      	ldrb	r3, [r3, #1]
 800afaa:	e000      	b.n	800afae <f_mkfs+0x122>
 800afac:	2301      	movs	r3, #1
 800afae:	63fb      	str	r3, [r7, #60]	@ 0x3c
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d013      	beq.n	800afe0 <f_mkfs+0x154>
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	689b      	ldr	r3, [r3, #8]
 800afbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800afc0:	d80e      	bhi.n	800afe0 <f_mkfs+0x154>
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	8c3a      	ldrh	r2, [r7, #32]
 800afc8:	0952      	lsrs	r2, r2, #5
 800afca:	b292      	uxth	r2, r2
 800afcc:	fbb3 f1f2 	udiv	r1, r3, r2
 800afd0:	fb01 f202 	mul.w	r2, r1, r2
 800afd4:	1a9b      	subs	r3, r3, r2
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d102      	bne.n	800afe0 <f_mkfs+0x154>
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	e001      	b.n	800afe4 <f_mkfs+0x158>
 800afe0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800afe4:	63bb      	str	r3, [r7, #56]	@ 0x38
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	68db      	ldr	r3, [r3, #12]
 800afea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800afee:	d80a      	bhi.n	800b006 <f_mkfs+0x17a>
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	68da      	ldr	r2, [r3, #12]
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	3b01      	subs	r3, #1
 800affa:	4013      	ands	r3, r2
 800affc:	2b00      	cmp	r3, #0
 800affe:	d102      	bne.n	800b006 <f_mkfs+0x17a>
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	e000      	b.n	800b008 <f_mkfs+0x17c>
 800b006:	2300      	movs	r3, #0
 800b008:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sz_au /= ss;	/* Byte --> Sector */
 800b00a:	8c3b      	ldrh	r3, [r7, #32]
 800b00c:	461a      	mov	r2, r3
 800b00e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b010:	fbb3 f3f2 	udiv	r3, r3, r2
 800b014:	64fb      	str	r3, [r7, #76]	@ 0x4c

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 800b016:	8c3b      	ldrh	r3, [r7, #32]
 800b018:	461a      	mov	r2, r3
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b020:	637b      	str	r3, [r7, #52]	@ 0x34
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 800b022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b024:	2b00      	cmp	r3, #0
 800b026:	d101      	bne.n	800b02c <f_mkfs+0x1a0>
 800b028:	2311      	movs	r3, #17
 800b02a:	e37b      	b.n	800b724 <f_mkfs+0x898>
	buf = (BYTE*)work;		/* Working buffer */
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	633b      	str	r3, [r7, #48]	@ 0x30
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 800b030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b032:	2b00      	cmp	r3, #0
 800b034:	d101      	bne.n	800b03a <f_mkfs+0x1ae>
 800b036:	2311      	movs	r3, #17
 800b038:	e374      	b.n	800b724 <f_mkfs+0x898>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 800b03a:	2300      	movs	r3, #0
 800b03c:	61bb      	str	r3, [r7, #24]
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	66fb      	str	r3, [r7, #108]	@ 0x6c
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800b042:	f107 0218 	add.w	r2, r7, #24
 800b046:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b04a:	2101      	movs	r1, #1
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7fd fb91 	bl	8008774 <disk_ioctl>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d001      	beq.n	800b05c <f_mkfs+0x1d0>
 800b058:	2301      	movs	r3, #1
 800b05a:	e363      	b.n	800b724 <f_mkfs+0x898>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 800b05c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800b060:	f003 0308 	and.w	r3, r3, #8
 800b064:	2b00      	cmp	r3, #0
 800b066:	d108      	bne.n	800b07a <f_mkfs+0x1ee>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	2b3f      	cmp	r3, #63	@ 0x3f
 800b06c:	d905      	bls.n	800b07a <f_mkfs+0x1ee>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 800b06e:	233f      	movs	r3, #63	@ 0x3f
 800b070:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b072:	69ba      	ldr	r2, [r7, #24]
 800b074:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b076:	1ad3      	subs	r3, r2, r3
 800b078:	61bb      	str	r3, [r7, #24]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 800b07a:	69bb      	ldr	r3, [r7, #24]
 800b07c:	2b7f      	cmp	r3, #127	@ 0x7f
 800b07e:	d801      	bhi.n	800b084 <f_mkfs+0x1f8>
 800b080:	230e      	movs	r3, #14
 800b082:	e34f      	b.n	800b724 <f_mkfs+0x898>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 800b084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b086:	2b80      	cmp	r3, #128	@ 0x80
 800b088:	d901      	bls.n	800b08e <f_mkfs+0x202>
 800b08a:	2380      	movs	r3, #128	@ 0x80
 800b08c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 800b08e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800b092:	f003 0302 	and.w	r3, r3, #2
 800b096:	2b00      	cmp	r3, #0
 800b098:	d009      	beq.n	800b0ae <f_mkfs+0x222>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 800b09a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800b09e:	f003 0301 	and.w	r3, r3, #1
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d103      	bne.n	800b0ae <f_mkfs+0x222>
				fsty = FS_FAT32; break;
 800b0a6:	2303      	movs	r3, #3
 800b0a8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800b0ac:	e00a      	b.n	800b0c4 <f_mkfs+0x238>
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 800b0ae:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800b0b2:	f003 0301 	and.w	r3, r3, #1
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d101      	bne.n	800b0be <f_mkfs+0x232>
 800b0ba:	2313      	movs	r3, #19
 800b0bc:	e332      	b.n	800b724 <f_mkfs+0x898>
		fsty = FS_FAT16;
 800b0be:	2302      	movs	r3, #2
 800b0c0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 800b0c4:	69bb      	ldr	r3, [r7, #24]
 800b0c6:	f103 43a8 	add.w	r3, r3, #1409286144	@ 0x54000000
 800b0ca:	f503 1304 	add.w	r3, r3, #2162688	@ 0x210000
 800b0ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
 800b0d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0d2:	663b      	str	r3, [r7, #96]	@ 0x60
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 800b0d4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b0d8:	2b03      	cmp	r3, #3
 800b0da:	d141      	bne.n	800b160 <f_mkfs+0x2d4>
				if (pau == 0) {	/* AU auto-selection */
 800b0dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d120      	bne.n	800b124 <f_mkfs+0x298>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	0c5b      	lsrs	r3, r3, #17
 800b0e6:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	663b      	str	r3, [r7, #96]	@ 0x60
 800b0f0:	e00a      	b.n	800b108 <f_mkfs+0x27c>
 800b0f2:	bf00      	nop
 800b0f4:	20005c50 	.word	0x20005c50
 800b0f8:	080184a4 	.word	0x080184a4
 800b0fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0fe:	3301      	adds	r3, #1
 800b100:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b102:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b104:	005b      	lsls	r3, r3, #1
 800b106:	663b      	str	r3, [r7, #96]	@ 0x60
 800b108:	4a95      	ldr	r2, [pc, #596]	@ (800b360 <f_mkfs+0x4d4>)
 800b10a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b10c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d007      	beq.n	800b124 <f_mkfs+0x298>
 800b114:	4a92      	ldr	r2, [pc, #584]	@ (800b360 <f_mkfs+0x4d4>)
 800b116:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b11c:	461a      	mov	r2, r3
 800b11e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b120:	4293      	cmp	r3, r2
 800b122:	d2eb      	bcs.n	800b0fc <f_mkfs+0x270>
				}
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 800b124:	69ba      	ldr	r2, [r7, #24]
 800b126:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b128:	fbb2 f3f3 	udiv	r3, r2, r3
 800b12c:	62bb      	str	r3, [r7, #40]	@ 0x28
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800b12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b130:	3302      	adds	r3, #2
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	8c3a      	ldrh	r2, [r7, #32]
 800b136:	4413      	add	r3, r2
 800b138:	3b01      	subs	r3, #1
 800b13a:	8c3a      	ldrh	r2, [r7, #32]
 800b13c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b140:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 800b142:	2320      	movs	r3, #32
 800b144:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = 0;		/* No static directory */
 800b146:	2300      	movs	r3, #0
 800b148:	653b      	str	r3, [r7, #80]	@ 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800b14a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b14c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b150:	4293      	cmp	r3, r2
 800b152:	d903      	bls.n	800b15c <f_mkfs+0x2d0>
 800b154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b156:	4a83      	ldr	r2, [pc, #524]	@ (800b364 <f_mkfs+0x4d8>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d94b      	bls.n	800b1f4 <f_mkfs+0x368>
 800b15c:	230e      	movs	r3, #14
 800b15e:	e2e1      	b.n	800b724 <f_mkfs+0x898>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 800b160:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b162:	2b00      	cmp	r3, #0
 800b164:	d11b      	bne.n	800b19e <f_mkfs+0x312>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	0b1b      	lsrs	r3, r3, #12
 800b16a:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b16c:	2300      	movs	r3, #0
 800b16e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b170:	2301      	movs	r3, #1
 800b172:	663b      	str	r3, [r7, #96]	@ 0x60
 800b174:	e005      	b.n	800b182 <f_mkfs+0x2f6>
 800b176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b178:	3301      	adds	r3, #1
 800b17a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b17c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b17e:	005b      	lsls	r3, r3, #1
 800b180:	663b      	str	r3, [r7, #96]	@ 0x60
 800b182:	4a79      	ldr	r2, [pc, #484]	@ (800b368 <f_mkfs+0x4dc>)
 800b184:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b186:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d007      	beq.n	800b19e <f_mkfs+0x312>
 800b18e:	4a76      	ldr	r2, [pc, #472]	@ (800b368 <f_mkfs+0x4dc>)
 800b190:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b196:	461a      	mov	r2, r3
 800b198:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d2eb      	bcs.n	800b176 <f_mkfs+0x2ea>
				}
				n_clst = (DWORD)sz_vol / pau;
 800b19e:	69ba      	ldr	r2, [r7, #24]
 800b1a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b1a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1a6:	62bb      	str	r3, [r7, #40]	@ 0x28
				if (n_clst > MAX_FAT12) {
 800b1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1aa:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d904      	bls.n	800b1bc <f_mkfs+0x330>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800b1b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1b4:	3302      	adds	r3, #2
 800b1b6:	005b      	lsls	r3, r3, #1
 800b1b8:	667b      	str	r3, [r7, #100]	@ 0x64
 800b1ba:	e00a      	b.n	800b1d2 <f_mkfs+0x346>
				} else {
					fsty = FS_FAT12;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800b1c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	005b      	lsls	r3, r3, #1
 800b1c8:	4413      	add	r3, r2
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	085b      	lsrs	r3, r3, #1
 800b1ce:	3303      	adds	r3, #3
 800b1d0:	667b      	str	r3, [r7, #100]	@ 0x64
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800b1d2:	8c3b      	ldrh	r3, [r7, #32]
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b1d8:	4413      	add	r3, r2
 800b1da:	3b01      	subs	r3, #1
 800b1dc:	8c3a      	ldrh	r2, [r7, #32]
 800b1de:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1e2:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 800b1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ea:	015b      	lsls	r3, r3, #5
 800b1ec:	8c3a      	ldrh	r2, [r7, #32]
 800b1ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1f2:	653b      	str	r3, [r7, #80]	@ 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800b1f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b1f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b1f8:	4413      	add	r3, r2
 800b1fa:	66bb      	str	r3, [r7, #104]	@ 0x68
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800b1fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b200:	fb03 f202 	mul.w	r2, r3, r2
 800b204:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b206:	4413      	add	r3, r2
 800b208:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b20a:	4413      	add	r3, r2
 800b20c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 800b20e:	69fa      	ldr	r2, [r7, #28]
 800b210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b212:	4413      	add	r3, r2
 800b214:	1e5a      	subs	r2, r3, #1
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	425b      	negs	r3, r3
 800b21a:	401a      	ands	r2, r3
 800b21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b21e:	1ad3      	subs	r3, r2, r3
 800b220:	667b      	str	r3, [r7, #100]	@ 0x64
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 800b222:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b226:	2b03      	cmp	r3, #3
 800b228:	d108      	bne.n	800b23c <f_mkfs+0x3b0>
				sz_rsv += n; b_fat += n;
 800b22a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800b22c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b22e:	4413      	add	r3, r2
 800b230:	677b      	str	r3, [r7, #116]	@ 0x74
 800b232:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b234:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b236:	4413      	add	r3, r2
 800b238:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b23a:	e019      	b.n	800b270 <f_mkfs+0x3e4>
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
 800b23c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b23e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b240:	fbb3 f2f2 	udiv	r2, r3, r2
 800b244:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b246:	fb01 f202 	mul.w	r2, r1, r2
 800b24a:	1a9b      	subs	r3, r3, r2
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d008      	beq.n	800b262 <f_mkfs+0x3d6>
					n--; sz_rsv++; b_fat++;
 800b250:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b252:	3b01      	subs	r3, #1
 800b254:	667b      	str	r3, [r7, #100]	@ 0x64
 800b256:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b258:	3301      	adds	r3, #1
 800b25a:	677b      	str	r3, [r7, #116]	@ 0x74
 800b25c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b25e:	3301      	adds	r3, #1
 800b260:	66bb      	str	r3, [r7, #104]	@ 0x68
				}
				sz_fat += n / n_fat;
 800b262:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b266:	fbb2 f3f3 	udiv	r3, r2, r3
 800b26a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b26c:	4413      	add	r3, r2
 800b26e:	657b      	str	r3, [r7, #84]	@ 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 800b270:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b272:	011a      	lsls	r2, r3, #4
 800b274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b276:	441a      	add	r2, r3
 800b278:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b27a:	1ad2      	subs	r2, r2, r3
 800b27c:	69bb      	ldr	r3, [r7, #24]
 800b27e:	429a      	cmp	r2, r3
 800b280:	d901      	bls.n	800b286 <f_mkfs+0x3fa>
 800b282:	230e      	movs	r3, #14
 800b284:	e24e      	b.n	800b724 <f_mkfs+0x898>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 800b286:	69ba      	ldr	r2, [r7, #24]
 800b288:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b28a:	1ad2      	subs	r2, r2, r3
 800b28c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b28e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b290:	fb01 f303 	mul.w	r3, r1, r3
 800b294:	1ad2      	subs	r2, r2, r3
 800b296:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b298:	1ad2      	subs	r2, r2, r3
 800b29a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b29c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2a0:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (fsty == FS_FAT32) {
 800b2a2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b2a6:	2b03      	cmp	r3, #3
 800b2a8:	d10f      	bne.n	800b2ca <f_mkfs+0x43e>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 800b2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ac:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d80a      	bhi.n	800b2ca <f_mkfs+0x43e>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800b2b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d105      	bne.n	800b2c6 <f_mkfs+0x43a>
 800b2ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b2bc:	085b      	lsrs	r3, r3, #1
 800b2be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d145      	bne.n	800b352 <f_mkfs+0x4c6>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800b2c6:	230e      	movs	r3, #14
 800b2c8:	e22c      	b.n	800b724 <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT16) {
 800b2ca:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b2ce:	2b02      	cmp	r3, #2
 800b2d0:	d134      	bne.n	800b33c <f_mkfs+0x4b0>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800b2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d91f      	bls.n	800b31c <f_mkfs+0x490>
					if (sz_au == 0 && (pau * 2) <= 64) {
 800b2dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d107      	bne.n	800b2f2 <f_mkfs+0x466>
 800b2e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b2e4:	005b      	lsls	r3, r3, #1
 800b2e6:	2b40      	cmp	r3, #64	@ 0x40
 800b2e8:	d803      	bhi.n	800b2f2 <f_mkfs+0x466>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 800b2ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b2ec:	005b      	lsls	r3, r3, #1
 800b2ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2f0:	e034      	b.n	800b35c <f_mkfs+0x4d0>
					}
					if ((fsopt & FM_FAT32)) {
 800b2f2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800b2f6:	f003 0302 	and.w	r3, r3, #2
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d003      	beq.n	800b306 <f_mkfs+0x47a>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800b2fe:	2303      	movs	r3, #3
 800b300:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800b304:	e02a      	b.n	800b35c <f_mkfs+0x4d0>
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b306:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d105      	bne.n	800b318 <f_mkfs+0x48c>
 800b30c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b30e:	005b      	lsls	r3, r3, #1
 800b310:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b312:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b314:	2b80      	cmp	r3, #128	@ 0x80
 800b316:	d91e      	bls.n	800b356 <f_mkfs+0x4ca>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800b318:	230e      	movs	r3, #14
 800b31a:	e203      	b.n	800b724 <f_mkfs+0x898>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800b31c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b31e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b322:	4293      	cmp	r3, r2
 800b324:	d80a      	bhi.n	800b33c <f_mkfs+0x4b0>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d105      	bne.n	800b338 <f_mkfs+0x4ac>
 800b32c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b32e:	005b      	lsls	r3, r3, #1
 800b330:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b334:	2b80      	cmp	r3, #128	@ 0x80
 800b336:	d910      	bls.n	800b35a <f_mkfs+0x4ce>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800b338:	230e      	movs	r3, #14
 800b33a:	e1f3      	b.n	800b724 <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 800b33c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b340:	2b01      	cmp	r3, #1
 800b342:	d113      	bne.n	800b36c <f_mkfs+0x4e0>
 800b344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b346:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d90e      	bls.n	800b36c <f_mkfs+0x4e0>
 800b34e:	230e      	movs	r3, #14
 800b350:	e1e8      	b.n	800b724 <f_mkfs+0x898>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800b352:	bf00      	nop
 800b354:	e6bc      	b.n	800b0d0 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b356:	bf00      	nop
 800b358:	e6ba      	b.n	800b0d0 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b35a:	bf00      	nop
			pau = sz_au;
 800b35c:	e6b8      	b.n	800b0d0 <f_mkfs+0x244>
 800b35e:	bf00      	nop
 800b360:	080184b4 	.word	0x080184b4
 800b364:	0ffffff5 	.word	0x0ffffff5
 800b368:	080184c4 	.word	0x080184c4

			/* Ok, it is the valid cluster configuration */
			break;
 800b36c:	bf00      	nop
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
 800b36e:	8c3b      	ldrh	r3, [r7, #32]
 800b370:	461a      	mov	r2, r3
 800b372:	2100      	movs	r1, #0
 800b374:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b376:	f00b fb33 	bl	80169e0 <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 800b37a:	220b      	movs	r2, #11
 800b37c:	49b1      	ldr	r1, [pc, #708]	@ (800b644 <f_mkfs+0x7b8>)
 800b37e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b380:	f00b fbb2 	bl	8016ae8 <memcpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800b384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b386:	330b      	adds	r3, #11
 800b388:	8c3a      	ldrh	r2, [r7, #32]
 800b38a:	4611      	mov	r1, r2
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7fd faaf 	bl	80088f0 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800b392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b394:	330d      	adds	r3, #13
 800b396:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b398:	b2d2      	uxtb	r2, r2
 800b39a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800b39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39e:	330e      	adds	r3, #14
 800b3a0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800b3a2:	b292      	uxth	r2, r2
 800b3a4:	4611      	mov	r1, r2
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7fd faa2 	bl	80088f0 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 800b3ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ae:	3310      	adds	r3, #16
 800b3b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b3b2:	b2d2      	uxtb	r2, r2
 800b3b4:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 800b3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b8:	f103 0211 	add.w	r2, r3, #17
 800b3bc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b3c0:	2b03      	cmp	r3, #3
 800b3c2:	d002      	beq.n	800b3ca <f_mkfs+0x53e>
 800b3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	e000      	b.n	800b3cc <f_mkfs+0x540>
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	4610      	mov	r0, r2
 800b3d0:	f7fd fa8e 	bl	80088f0 <st_word>
		if (sz_vol < 0x10000) {
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3da:	d208      	bcs.n	800b3ee <f_mkfs+0x562>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800b3dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3de:	3313      	adds	r3, #19
 800b3e0:	69ba      	ldr	r2, [r7, #24]
 800b3e2:	b292      	uxth	r2, r2
 800b3e4:	4611      	mov	r1, r2
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7fd fa82 	bl	80088f0 <st_word>
 800b3ec:	e006      	b.n	800b3fc <f_mkfs+0x570>
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 800b3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f0:	3320      	adds	r3, #32
 800b3f2:	69ba      	ldr	r2, [r7, #24]
 800b3f4:	4611      	mov	r1, r2
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7fd fa95 	bl	8008926 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800b3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3fe:	3315      	adds	r3, #21
 800b400:	22f8      	movs	r2, #248	@ 0xf8
 800b402:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800b404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b406:	3318      	adds	r3, #24
 800b408:	213f      	movs	r1, #63	@ 0x3f
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7fd fa70 	bl	80088f0 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800b410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b412:	331a      	adds	r3, #26
 800b414:	21ff      	movs	r1, #255	@ 0xff
 800b416:	4618      	mov	r0, r3
 800b418:	f7fd fa6a 	bl	80088f0 <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 800b41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b41e:	331c      	adds	r3, #28
 800b420:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b422:	4618      	mov	r0, r3
 800b424:	f7fd fa7f 	bl	8008926 <st_dword>
		if (fsty == FS_FAT32) {
 800b428:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b42c:	2b03      	cmp	r3, #3
 800b42e:	d12d      	bne.n	800b48c <f_mkfs+0x600>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 800b430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b432:	3343      	adds	r3, #67	@ 0x43
 800b434:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b436:	4618      	mov	r0, r3
 800b438:	f7fd fa75 	bl	8008926 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800b43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b43e:	3324      	adds	r3, #36	@ 0x24
 800b440:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b442:	4618      	mov	r0, r3
 800b444:	f7fd fa6f 	bl	8008926 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800b448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b44a:	332c      	adds	r3, #44	@ 0x2c
 800b44c:	2102      	movs	r1, #2
 800b44e:	4618      	mov	r0, r3
 800b450:	f7fd fa69 	bl	8008926 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800b454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b456:	3330      	adds	r3, #48	@ 0x30
 800b458:	2101      	movs	r1, #1
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fd fa48 	bl	80088f0 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800b460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b462:	3332      	adds	r3, #50	@ 0x32
 800b464:	2106      	movs	r1, #6
 800b466:	4618      	mov	r0, r3
 800b468:	f7fd fa42 	bl	80088f0 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800b46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b46e:	3340      	adds	r3, #64	@ 0x40
 800b470:	2280      	movs	r2, #128	@ 0x80
 800b472:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800b474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b476:	3342      	adds	r3, #66	@ 0x42
 800b478:	2229      	movs	r2, #41	@ 0x29
 800b47a:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800b47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b47e:	3347      	adds	r3, #71	@ 0x47
 800b480:	2213      	movs	r2, #19
 800b482:	4971      	ldr	r1, [pc, #452]	@ (800b648 <f_mkfs+0x7bc>)
 800b484:	4618      	mov	r0, r3
 800b486:	f00b fb2f 	bl	8016ae8 <memcpy>
 800b48a:	e01c      	b.n	800b4c6 <f_mkfs+0x63a>
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 800b48c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b48e:	3327      	adds	r3, #39	@ 0x27
 800b490:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b492:	4618      	mov	r0, r3
 800b494:	f7fd fa47 	bl	8008926 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800b498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b49a:	3316      	adds	r3, #22
 800b49c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b49e:	b292      	uxth	r2, r2
 800b4a0:	4611      	mov	r1, r2
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7fd fa24 	bl	80088f0 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800b4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4aa:	3324      	adds	r3, #36	@ 0x24
 800b4ac:	2280      	movs	r2, #128	@ 0x80
 800b4ae:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800b4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b2:	3326      	adds	r3, #38	@ 0x26
 800b4b4:	2229      	movs	r2, #41	@ 0x29
 800b4b6:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800b4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ba:	332b      	adds	r3, #43	@ 0x2b
 800b4bc:	2213      	movs	r2, #19
 800b4be:	4963      	ldr	r1, [pc, #396]	@ (800b64c <f_mkfs+0x7c0>)
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f00b fb11 	bl	8016ae8 <memcpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800b4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b4cc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7fd fa0d 	bl	80088f0 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 800b4d6:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800b4da:	2301      	movs	r3, #1
 800b4dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b4de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b4e0:	f7fd f914 	bl	800870c <disk_write>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d001      	beq.n	800b4ee <f_mkfs+0x662>
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	e11a      	b.n	800b724 <f_mkfs+0x898>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 800b4ee:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b4f2:	2b03      	cmp	r3, #3
 800b4f4:	d140      	bne.n	800b578 <f_mkfs+0x6ec>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800b4f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4f8:	1d9a      	adds	r2, r3, #6
 800b4fa:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800b4fe:	2301      	movs	r3, #1
 800b500:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b502:	f7fd f903 	bl	800870c <disk_write>
			memset(buf, 0, ss);
 800b506:	8c3b      	ldrh	r3, [r7, #32]
 800b508:	461a      	mov	r2, r3
 800b50a:	2100      	movs	r1, #0
 800b50c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b50e:	f00b fa67 	bl	80169e0 <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800b512:	494f      	ldr	r1, [pc, #316]	@ (800b650 <f_mkfs+0x7c4>)
 800b514:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b516:	f7fd fa06 	bl	8008926 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800b51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b51c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b520:	494c      	ldr	r1, [pc, #304]	@ (800b654 <f_mkfs+0x7c8>)
 800b522:	4618      	mov	r0, r3
 800b524:	f7fd f9ff 	bl	8008926 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800b528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b52a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b530:	3b01      	subs	r3, #1
 800b532:	4619      	mov	r1, r3
 800b534:	4610      	mov	r0, r2
 800b536:	f7fd f9f6 	bl	8008926 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800b53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b53c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b540:	2102      	movs	r1, #2
 800b542:	4618      	mov	r0, r3
 800b544:	f7fd f9ef 	bl	8008926 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800b548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b54a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b54e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b552:	4618      	mov	r0, r3
 800b554:	f7fd f9cc 	bl	80088f0 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800b558:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b55a:	1dda      	adds	r2, r3, #7
 800b55c:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800b560:	2301      	movs	r3, #1
 800b562:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b564:	f7fd f8d2 	bl	800870c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800b568:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b56a:	1c5a      	adds	r2, r3, #1
 800b56c:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800b570:	2301      	movs	r3, #1
 800b572:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b574:	f7fd f8ca 	bl	800870c <disk_write>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
 800b578:	8c3b      	ldrh	r3, [r7, #32]
 800b57a:	461a      	mov	r2, r3
 800b57c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b57e:	fb02 f303 	mul.w	r3, r2, r3
 800b582:	461a      	mov	r2, r3
 800b584:	2100      	movs	r1, #0
 800b586:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b588:	f00b fa2a 	bl	80169e0 <memset>
		sect = b_fat;		/* FAT start sector */
 800b58c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b58e:	673b      	str	r3, [r7, #112]	@ 0x70
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800b590:	2300      	movs	r3, #0
 800b592:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b594:	e04b      	b.n	800b62e <f_mkfs+0x7a2>
			if (fsty == FS_FAT32) {
 800b596:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b59a:	2b03      	cmp	r3, #3
 800b59c:	d113      	bne.n	800b5c6 <f_mkfs+0x73a>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
 800b59e:	f06f 0107 	mvn.w	r1, #7
 800b5a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b5a4:	f7fd f9bf 	bl	8008926 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
 800b5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5aa:	3304      	adds	r3, #4
 800b5ac:	f04f 31ff 	mov.w	r1, #4294967295
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7fd f9b8 	bl	8008926 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
 800b5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5b8:	3308      	adds	r3, #8
 800b5ba:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7fd f9b1 	bl	8008926 <st_dword>
 800b5c4:	e00b      	b.n	800b5de <f_mkfs+0x752>
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 800b5c6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d101      	bne.n	800b5d2 <f_mkfs+0x746>
 800b5ce:	4b22      	ldr	r3, [pc, #136]	@ (800b658 <f_mkfs+0x7cc>)
 800b5d0:	e001      	b.n	800b5d6 <f_mkfs+0x74a>
 800b5d2:	f06f 0307 	mvn.w	r3, #7
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b5da:	f7fd f9a4 	bl	8008926 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800b5de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800b5e2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b5e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	bf28      	it	cs
 800b5ea:	4613      	movcs	r3, r2
 800b5ec:	667b      	str	r3, [r7, #100]	@ 0x64
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800b5ee:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800b5f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b5f4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b5f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b5f8:	f7fd f888 	bl	800870c <disk_write>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d001      	beq.n	800b606 <f_mkfs+0x77a>
 800b602:	2301      	movs	r3, #1
 800b604:	e08e      	b.n	800b724 <f_mkfs+0x898>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
 800b606:	8c3b      	ldrh	r3, [r7, #32]
 800b608:	461a      	mov	r2, r3
 800b60a:	2100      	movs	r1, #0
 800b60c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b60e:	f00b f9e7 	bl	80169e0 <memset>
				sect += n; nsect -= n;
 800b612:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b614:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b616:	4413      	add	r3, r2
 800b618:	673b      	str	r3, [r7, #112]	@ 0x70
 800b61a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b61c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b61e:	1ad3      	subs	r3, r2, r3
 800b620:	65fb      	str	r3, [r7, #92]	@ 0x5c
			} while (nsect);
 800b622:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b624:	2b00      	cmp	r3, #0
 800b626:	d1dc      	bne.n	800b5e2 <f_mkfs+0x756>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800b628:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b62a:	3301      	adds	r3, #1
 800b62c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b62e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b632:	429a      	cmp	r2, r3
 800b634:	d3af      	bcc.n	800b596 <f_mkfs+0x70a>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800b636:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b63a:	2b03      	cmp	r3, #3
 800b63c:	d10e      	bne.n	800b65c <f_mkfs+0x7d0>
 800b63e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b640:	e00d      	b.n	800b65e <f_mkfs+0x7d2>
 800b642:	bf00      	nop
 800b644:	080180f4 	.word	0x080180f4
 800b648:	08018100 	.word	0x08018100
 800b64c:	08018114 	.word	0x08018114
 800b650:	41615252 	.word	0x41615252
 800b654:	61417272 	.word	0x61417272
 800b658:	00fffff8 	.word	0x00fffff8
 800b65c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b65e:	65fb      	str	r3, [r7, #92]	@ 0x5c
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800b660:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b664:	4293      	cmp	r3, r2
 800b666:	bf28      	it	cs
 800b668:	4613      	movcs	r3, r2
 800b66a:	667b      	str	r3, [r7, #100]	@ 0x64
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800b66c:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800b670:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b672:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b674:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b676:	f7fd f849 	bl	800870c <disk_write>
 800b67a:	4603      	mov	r3, r0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d001      	beq.n	800b684 <f_mkfs+0x7f8>
 800b680:	2301      	movs	r3, #1
 800b682:	e04f      	b.n	800b724 <f_mkfs+0x898>
			sect += n; nsect -= n;
 800b684:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b686:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b688:	4413      	add	r3, r2
 800b68a:	673b      	str	r3, [r7, #112]	@ 0x70
 800b68c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b68e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b690:	1ad3      	subs	r3, r2, r3
 800b692:	65fb      	str	r3, [r7, #92]	@ 0x5c
		} while (nsect);
 800b694:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b696:	2b00      	cmp	r3, #0
 800b698:	d1e2      	bne.n	800b660 <f_mkfs+0x7d4>
	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;		/* exFAT */
	} else if (fsty == FS_FAT32) {
 800b69a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b69e:	2b03      	cmp	r3, #3
 800b6a0:	d103      	bne.n	800b6aa <f_mkfs+0x81e>
		sys = 0x0C;		/* FAT32X */
 800b6a2:	230c      	movs	r3, #12
 800b6a4:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800b6a8:	e012      	b.n	800b6d0 <f_mkfs+0x844>
	} else if (sz_vol >= 0x10000) {
 800b6aa:	69bb      	ldr	r3, [r7, #24]
 800b6ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6b0:	d303      	bcc.n	800b6ba <f_mkfs+0x82e>
		sys = 0x06;		/* FAT12/16 (large) */
 800b6b2:	2306      	movs	r3, #6
 800b6b4:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800b6b8:	e00a      	b.n	800b6d0 <f_mkfs+0x844>
	} else if (fsty == FS_FAT16) {
 800b6ba:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b6be:	2b02      	cmp	r3, #2
 800b6c0:	d103      	bne.n	800b6ca <f_mkfs+0x83e>
		sys = 0x04;		/* FAT16 */
 800b6c2:	2304      	movs	r3, #4
 800b6c4:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800b6c8:	e002      	b.n	800b6d0 <f_mkfs+0x844>
	} else {
		sys = 0x01;		/* FAT12 */
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 800b6d0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800b6d4:	f003 0308 	and.w	r3, r3, #8
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d116      	bne.n	800b70a <f_mkfs+0x87e>
			lba[0] = sz_vol; lba[1] = 0;
 800b6dc:	69bb      	ldr	r3, [r7, #24]
 800b6de:	613b      	str	r3, [r7, #16]
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	617b      	str	r3, [r7, #20]
			res = create_partition(pdrv, lba, sys, buf);
 800b6e4:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 800b6e8:	f107 0110 	add.w	r1, r7, #16
 800b6ec:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800b6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f2:	f7ff faa7 	bl	800ac44 <create_partition>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			if (res != FR_OK) LEAVE_MKFS(res);
 800b6fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b700:	2b00      	cmp	r3, #0
 800b702:	d002      	beq.n	800b70a <f_mkfs+0x87e>
 800b704:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b708:	e00c      	b.n	800b724 <f_mkfs+0x898>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800b70a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b70e:	2200      	movs	r2, #0
 800b710:	2100      	movs	r1, #0
 800b712:	4618      	mov	r0, r3
 800b714:	f7fd f82e 	bl	8008774 <disk_ioctl>
 800b718:	4603      	mov	r3, r0
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d001      	beq.n	800b722 <f_mkfs+0x896>
 800b71e:	2301      	movs	r3, #1
 800b720:	e000      	b.n	800b724 <f_mkfs+0x898>

	LEAVE_MKFS(FR_OK);
 800b722:	2300      	movs	r3, #0
}
 800b724:	4618      	mov	r0, r3
 800b726:	3778      	adds	r7, #120	@ 0x78
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800b72c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800b764 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800b730:	f7fc ff58 	bl	80085e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b734:	480c      	ldr	r0, [pc, #48]	@ (800b768 <LoopForever+0x6>)
  ldr r1, =_edata
 800b736:	490d      	ldr	r1, [pc, #52]	@ (800b76c <LoopForever+0xa>)
  ldr r2, =_sidata
 800b738:	4a0d      	ldr	r2, [pc, #52]	@ (800b770 <LoopForever+0xe>)
  movs r3, #0
 800b73a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b73c:	e002      	b.n	800b744 <LoopCopyDataInit>

0800b73e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b73e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b742:	3304      	adds	r3, #4

0800b744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b748:	d3f9      	bcc.n	800b73e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b74a:	4a0a      	ldr	r2, [pc, #40]	@ (800b774 <LoopForever+0x12>)
  ldr r4, =_ebss
 800b74c:	4c0a      	ldr	r4, [pc, #40]	@ (800b778 <LoopForever+0x16>)
  movs r3, #0
 800b74e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b750:	e001      	b.n	800b756 <LoopFillZerobss>

0800b752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b754:	3204      	adds	r2, #4

0800b756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b758:	d3fb      	bcc.n	800b752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b75a:	f00b f997 	bl	8016a8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800b75e:	f7f8 ffa5 	bl	80046ac <main>

0800b762 <LoopForever>:

LoopForever:
    b LoopForever
 800b762:	e7fe      	b.n	800b762 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800b764:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800b768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b76c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800b770:	08018634 	.word	0x08018634
  ldr r2, =_sbss
 800b774:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800b778:	20005da8 	.word	0x20005da8

0800b77c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800b77c:	e7fe      	b.n	800b77c <ADC1_2_IRQHandler>

0800b77e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b77e:	b580      	push	{r7, lr}
 800b780:	b082      	sub	sp, #8
 800b782:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800b784:	2300      	movs	r3, #0
 800b786:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b788:	2003      	movs	r0, #3
 800b78a:	f001 fd11 	bl	800d1b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b78e:	200f      	movs	r0, #15
 800b790:	f000 f80e 	bl	800b7b0 <HAL_InitTick>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d002      	beq.n	800b7a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800b79a:	2301      	movs	r3, #1
 800b79c:	71fb      	strb	r3, [r7, #7]
 800b79e:	e001      	b.n	800b7a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800b7a0:	f7fc fa56 	bl	8007c50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800b7a4:	79fb      	ldrb	r3, [r7, #7]
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3708      	adds	r7, #8
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
	...

0800b7b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800b7bc:	4b17      	ldr	r3, [pc, #92]	@ (800b81c <HAL_InitTick+0x6c>)
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d023      	beq.n	800b80c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800b7c4:	4b16      	ldr	r3, [pc, #88]	@ (800b820 <HAL_InitTick+0x70>)
 800b7c6:	681a      	ldr	r2, [r3, #0]
 800b7c8:	4b14      	ldr	r3, [pc, #80]	@ (800b81c <HAL_InitTick+0x6c>)
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b7d2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b7d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f001 fd21 	bl	800d222 <HAL_SYSTICK_Config>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d10f      	bne.n	800b806 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2b0f      	cmp	r3, #15
 800b7ea:	d809      	bhi.n	800b800 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	6879      	ldr	r1, [r7, #4]
 800b7f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f4:	f001 fce7 	bl	800d1c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b7f8:	4a0a      	ldr	r2, [pc, #40]	@ (800b824 <HAL_InitTick+0x74>)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6013      	str	r3, [r2, #0]
 800b7fe:	e007      	b.n	800b810 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800b800:	2301      	movs	r3, #1
 800b802:	73fb      	strb	r3, [r7, #15]
 800b804:	e004      	b.n	800b810 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	73fb      	strb	r3, [r7, #15]
 800b80a:	e001      	b.n	800b810 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800b80c:	2301      	movs	r3, #1
 800b80e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800b810:	7bfb      	ldrb	r3, [r7, #15]
}
 800b812:	4618      	mov	r0, r3
 800b814:	3710      	adds	r7, #16
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	20000010 	.word	0x20000010
 800b820:	20000000 	.word	0x20000000
 800b824:	2000000c 	.word	0x2000000c

0800b828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b828:	b480      	push	{r7}
 800b82a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800b82c:	4b06      	ldr	r3, [pc, #24]	@ (800b848 <HAL_IncTick+0x20>)
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	461a      	mov	r2, r3
 800b832:	4b06      	ldr	r3, [pc, #24]	@ (800b84c <HAL_IncTick+0x24>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4413      	add	r3, r2
 800b838:	4a04      	ldr	r2, [pc, #16]	@ (800b84c <HAL_IncTick+0x24>)
 800b83a:	6013      	str	r3, [r2, #0]
}
 800b83c:	bf00      	nop
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	20000010 	.word	0x20000010
 800b84c:	20005c5c 	.word	0x20005c5c

0800b850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b850:	b480      	push	{r7}
 800b852:	af00      	add	r7, sp, #0
  return uwTick;
 800b854:	4b03      	ldr	r3, [pc, #12]	@ (800b864 <HAL_GetTick+0x14>)
 800b856:	681b      	ldr	r3, [r3, #0]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr
 800b862:	bf00      	nop
 800b864:	20005c5c 	.word	0x20005c5c

0800b868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b084      	sub	sp, #16
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b870:	f7ff ffee 	bl	800b850 <HAL_GetTick>
 800b874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b880:	d005      	beq.n	800b88e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800b882:	4b0a      	ldr	r3, [pc, #40]	@ (800b8ac <HAL_Delay+0x44>)
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	461a      	mov	r2, r3
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	4413      	add	r3, r2
 800b88c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b88e:	bf00      	nop
 800b890:	f7ff ffde 	bl	800b850 <HAL_GetTick>
 800b894:	4602      	mov	r2, r0
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	1ad3      	subs	r3, r2, r3
 800b89a:	68fa      	ldr	r2, [r7, #12]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d8f7      	bhi.n	800b890 <HAL_Delay+0x28>
  {
  }
}
 800b8a0:	bf00      	nop
 800b8a2:	bf00      	nop
 800b8a4:	3710      	adds	r7, #16
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	20000010 	.word	0x20000010

0800b8b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	431a      	orrs	r2, r3
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	609a      	str	r2, [r3, #8]
}
 800b8ca:	bf00      	nop
 800b8cc:	370c      	adds	r7, #12
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr

0800b8d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800b8d6:	b480      	push	{r7}
 800b8d8:	b083      	sub	sp, #12
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
 800b8de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	431a      	orrs	r2, r3
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	609a      	str	r2, [r3, #8]
}
 800b8f0:	bf00      	nop
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b083      	sub	sp, #12
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	689b      	ldr	r3, [r3, #8]
 800b908:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800b918:	b480      	push	{r7}
 800b91a:	b087      	sub	sp, #28
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	607a      	str	r2, [r7, #4]
 800b924:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	3360      	adds	r3, #96	@ 0x60
 800b92a:	461a      	mov	r2, r3
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	4413      	add	r3, r2
 800b932:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	4b08      	ldr	r3, [pc, #32]	@ (800b95c <LL_ADC_SetOffset+0x44>)
 800b93a:	4013      	ands	r3, r2
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800b942:	683a      	ldr	r2, [r7, #0]
 800b944:	430a      	orrs	r2, r1
 800b946:	4313      	orrs	r3, r2
 800b948:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800b950:	bf00      	nop
 800b952:	371c      	adds	r7, #28
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr
 800b95c:	03fff000 	.word	0x03fff000

0800b960 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800b960:	b480      	push	{r7}
 800b962:	b085      	sub	sp, #20
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	3360      	adds	r3, #96	@ 0x60
 800b96e:	461a      	mov	r2, r3
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	4413      	add	r3, r2
 800b976:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800b980:	4618      	mov	r0, r3
 800b982:	3714      	adds	r7, #20
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b087      	sub	sp, #28
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	3360      	adds	r3, #96	@ 0x60
 800b99c:	461a      	mov	r2, r3
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	4413      	add	r3, r2
 800b9a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	431a      	orrs	r2, r3
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800b9b6:	bf00      	nop
 800b9b8:	371c      	adds	r7, #28
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr

0800b9c2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800b9c2:	b480      	push	{r7}
 800b9c4:	b083      	sub	sp, #12
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d101      	bne.n	800b9da <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e000      	b.n	800b9dc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	370c      	adds	r7, #12
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b087      	sub	sp, #28
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	3330      	adds	r3, #48	@ 0x30
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	0a1b      	lsrs	r3, r3, #8
 800b9fe:	009b      	lsls	r3, r3, #2
 800ba00:	f003 030c 	and.w	r3, r3, #12
 800ba04:	4413      	add	r3, r2
 800ba06:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	f003 031f 	and.w	r3, r3, #31
 800ba12:	211f      	movs	r1, #31
 800ba14:	fa01 f303 	lsl.w	r3, r1, r3
 800ba18:	43db      	mvns	r3, r3
 800ba1a:	401a      	ands	r2, r3
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	0e9b      	lsrs	r3, r3, #26
 800ba20:	f003 011f 	and.w	r1, r3, #31
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	f003 031f 	and.w	r3, r3, #31
 800ba2a:	fa01 f303 	lsl.w	r3, r1, r3
 800ba2e:	431a      	orrs	r2, r3
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800ba34:	bf00      	nop
 800ba36:	371c      	adds	r7, #28
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b087      	sub	sp, #28
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	3314      	adds	r3, #20
 800ba50:	461a      	mov	r2, r3
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	0e5b      	lsrs	r3, r3, #25
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	f003 0304 	and.w	r3, r3, #4
 800ba5c:	4413      	add	r3, r2
 800ba5e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	681a      	ldr	r2, [r3, #0]
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	0d1b      	lsrs	r3, r3, #20
 800ba68:	f003 031f 	and.w	r3, r3, #31
 800ba6c:	2107      	movs	r1, #7
 800ba6e:	fa01 f303 	lsl.w	r3, r1, r3
 800ba72:	43db      	mvns	r3, r3
 800ba74:	401a      	ands	r2, r3
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	0d1b      	lsrs	r3, r3, #20
 800ba7a:	f003 031f 	and.w	r3, r3, #31
 800ba7e:	6879      	ldr	r1, [r7, #4]
 800ba80:	fa01 f303 	lsl.w	r3, r1, r3
 800ba84:	431a      	orrs	r2, r3
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800ba8a:	bf00      	nop
 800ba8c:	371c      	adds	r7, #28
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr
	...

0800ba98 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b085      	sub	sp, #20
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	60f8      	str	r0, [r7, #12]
 800baa0:	60b9      	str	r1, [r7, #8]
 800baa2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bab0:	43db      	mvns	r3, r3
 800bab2:	401a      	ands	r2, r3
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f003 0318 	and.w	r3, r3, #24
 800baba:	4908      	ldr	r1, [pc, #32]	@ (800badc <LL_ADC_SetChannelSingleDiff+0x44>)
 800babc:	40d9      	lsrs	r1, r3
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	400b      	ands	r3, r1
 800bac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bac6:	431a      	orrs	r2, r3
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800bace:	bf00      	nop
 800bad0:	3714      	adds	r7, #20
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr
 800bada:	bf00      	nop
 800badc:	0007ffff 	.word	0x0007ffff

0800bae0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b083      	sub	sp, #12
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	f003 031f 	and.w	r3, r3, #31
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	370c      	adds	r7, #12
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr

0800bafc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800bb0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	6093      	str	r3, [r2, #8]
}
 800bb14:	bf00      	nop
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	689b      	ldr	r3, [r3, #8]
 800bb2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bb30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb34:	d101      	bne.n	800bb3a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800bb36:	2301      	movs	r3, #1
 800bb38:	e000      	b.n	800bb3c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800bb3a:	2300      	movs	r3, #0
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	370c      	adds	r7, #12
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr

0800bb48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800bb58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800bb5c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800bb64:	bf00      	nop
 800bb66:	370c      	adds	r7, #12
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b083      	sub	sp, #12
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	689b      	ldr	r3, [r3, #8]
 800bb7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bb80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb84:	d101      	bne.n	800bb8a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800bb86:	2301      	movs	r3, #1
 800bb88:	e000      	b.n	800bb8c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800bb8a:	2300      	movs	r3, #0
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	370c      	adds	r7, #12
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bba8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800bbac:	f043 0201 	orr.w	r2, r3, #1
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800bbb4:	bf00      	nop
 800bbb6:	370c      	adds	r7, #12
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b083      	sub	sp, #12
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	689b      	ldr	r3, [r3, #8]
 800bbcc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bbd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800bbd4:	f043 0202 	orr.w	r2, r3, #2
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800bbdc:	bf00      	nop
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	f003 0301 	and.w	r3, r3, #1
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d101      	bne.n	800bc00 <LL_ADC_IsEnabled+0x18>
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	e000      	b.n	800bc02 <LL_ADC_IsEnabled+0x1a>
 800bc00:	2300      	movs	r3, #0
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	370c      	adds	r7, #12
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr

0800bc0e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800bc0e:	b480      	push	{r7}
 800bc10:	b083      	sub	sp, #12
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	689b      	ldr	r3, [r3, #8]
 800bc1a:	f003 0302 	and.w	r3, r3, #2
 800bc1e:	2b02      	cmp	r3, #2
 800bc20:	d101      	bne.n	800bc26 <LL_ADC_IsDisableOngoing+0x18>
 800bc22:	2301      	movs	r3, #1
 800bc24:	e000      	b.n	800bc28 <LL_ADC_IsDisableOngoing+0x1a>
 800bc26:	2300      	movs	r3, #0
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	370c      	adds	r7, #12
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b083      	sub	sp, #12
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800bc48:	f043 0204 	orr.w	r2, r3, #4
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800bc50:	bf00      	nop
 800bc52:	370c      	adds	r7, #12
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b083      	sub	sp, #12
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	689b      	ldr	r3, [r3, #8]
 800bc68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800bc70:	f043 0210 	orr.w	r2, r3, #16
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800bc78:	bf00      	nop
 800bc7a:	370c      	adds	r7, #12
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	689b      	ldr	r3, [r3, #8]
 800bc90:	f003 0304 	and.w	r3, r3, #4
 800bc94:	2b04      	cmp	r3, #4
 800bc96:	d101      	bne.n	800bc9c <LL_ADC_REG_IsConversionOngoing+0x18>
 800bc98:	2301      	movs	r3, #1
 800bc9a:	e000      	b.n	800bc9e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	370c      	adds	r7, #12
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr

0800bcaa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800bcaa:	b480      	push	{r7}
 800bcac:	b083      	sub	sp, #12
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	689b      	ldr	r3, [r3, #8]
 800bcb6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bcba:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800bcbe:	f043 0220 	orr.w	r2, r3, #32
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800bcc6:	bf00      	nop
 800bcc8:	370c      	adds	r7, #12
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr

0800bcd2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800bcd2:	b480      	push	{r7}
 800bcd4:	b083      	sub	sp, #12
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	689b      	ldr	r3, [r3, #8]
 800bcde:	f003 0308 	and.w	r3, r3, #8
 800bce2:	2b08      	cmp	r3, #8
 800bce4:	d101      	bne.n	800bcea <LL_ADC_INJ_IsConversionOngoing+0x18>
 800bce6:	2301      	movs	r3, #1
 800bce8:	e000      	b.n	800bcec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800bcea:	2300      	movs	r3, #0
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	370c      	adds	r7, #12
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800bcf8:	b590      	push	{r4, r7, lr}
 800bcfa:	b089      	sub	sp, #36	@ 0x24
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bd00:	2300      	movs	r3, #0
 800bd02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800bd04:	2300      	movs	r3, #0
 800bd06:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d101      	bne.n	800bd12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	e130      	b.n	800bf74 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	691b      	ldr	r3, [r3, #16]
 800bd16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d109      	bne.n	800bd34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f7fb ffb9 	bl	8007c98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7ff fef1 	bl	800bb20 <LL_ADC_IsDeepPowerDownEnabled>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d004      	beq.n	800bd4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7ff fed7 	bl	800bafc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7ff ff0c 	bl	800bb70 <LL_ADC_IsInternalRegulatorEnabled>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d115      	bne.n	800bd8a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7ff fef0 	bl	800bb48 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800bd68:	4b84      	ldr	r3, [pc, #528]	@ (800bf7c <HAL_ADC_Init+0x284>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	099b      	lsrs	r3, r3, #6
 800bd6e:	4a84      	ldr	r2, [pc, #528]	@ (800bf80 <HAL_ADC_Init+0x288>)
 800bd70:	fba2 2303 	umull	r2, r3, r2, r3
 800bd74:	099b      	lsrs	r3, r3, #6
 800bd76:	3301      	adds	r3, #1
 800bd78:	005b      	lsls	r3, r3, #1
 800bd7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800bd7c:	e002      	b.n	800bd84 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	3b01      	subs	r3, #1
 800bd82:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d1f9      	bne.n	800bd7e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7ff feee 	bl	800bb70 <LL_ADC_IsInternalRegulatorEnabled>
 800bd94:	4603      	mov	r3, r0
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d10d      	bne.n	800bdb6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd9e:	f043 0210 	orr.w	r2, r3, #16
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bdaa:	f043 0201 	orr.w	r2, r3, #1
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7ff ff62 	bl	800bc84 <LL_ADC_REG_IsConversionOngoing>
 800bdc0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdc6:	f003 0310 	and.w	r3, r3, #16
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	f040 80c9 	bne.w	800bf62 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	f040 80c5 	bne.w	800bf62 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bddc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800bde0:	f043 0202 	orr.w	r2, r3, #2
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7ff fefb 	bl	800bbe8 <LL_ADC_IsEnabled>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d115      	bne.n	800be24 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800bdf8:	4862      	ldr	r0, [pc, #392]	@ (800bf84 <HAL_ADC_Init+0x28c>)
 800bdfa:	f7ff fef5 	bl	800bbe8 <LL_ADC_IsEnabled>
 800bdfe:	4604      	mov	r4, r0
 800be00:	4861      	ldr	r0, [pc, #388]	@ (800bf88 <HAL_ADC_Init+0x290>)
 800be02:	f7ff fef1 	bl	800bbe8 <LL_ADC_IsEnabled>
 800be06:	4603      	mov	r3, r0
 800be08:	431c      	orrs	r4, r3
 800be0a:	4860      	ldr	r0, [pc, #384]	@ (800bf8c <HAL_ADC_Init+0x294>)
 800be0c:	f7ff feec 	bl	800bbe8 <LL_ADC_IsEnabled>
 800be10:	4603      	mov	r3, r0
 800be12:	4323      	orrs	r3, r4
 800be14:	2b00      	cmp	r3, #0
 800be16:	d105      	bne.n	800be24 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	4619      	mov	r1, r3
 800be1e:	485c      	ldr	r0, [pc, #368]	@ (800bf90 <HAL_ADC_Init+0x298>)
 800be20:	f7ff fd46 	bl	800b8b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	7e5b      	ldrb	r3, [r3, #25]
 800be28:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800be2e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800be34:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800be3a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800be42:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800be44:	4313      	orrs	r3, r2
 800be46:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d106      	bne.n	800be60 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be56:	3b01      	subs	r3, #1
 800be58:	045b      	lsls	r3, r3, #17
 800be5a:	69ba      	ldr	r2, [r7, #24]
 800be5c:	4313      	orrs	r3, r2
 800be5e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be64:	2b00      	cmp	r3, #0
 800be66:	d009      	beq.n	800be7c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be6c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be74:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800be76:	69ba      	ldr	r2, [r7, #24]
 800be78:	4313      	orrs	r3, r2
 800be7a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	68da      	ldr	r2, [r3, #12]
 800be82:	4b44      	ldr	r3, [pc, #272]	@ (800bf94 <HAL_ADC_Init+0x29c>)
 800be84:	4013      	ands	r3, r2
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	6812      	ldr	r2, [r2, #0]
 800be8a:	69b9      	ldr	r1, [r7, #24]
 800be8c:	430b      	orrs	r3, r1
 800be8e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4618      	mov	r0, r3
 800be96:	f7ff ff1c 	bl	800bcd2 <LL_ADC_INJ_IsConversionOngoing>
 800be9a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d13d      	bne.n	800bf1e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d13a      	bne.n	800bf1e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800beac:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800beb4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800beb6:	4313      	orrs	r3, r2
 800beb8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bec4:	f023 0302 	bic.w	r3, r3, #2
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	6812      	ldr	r2, [r2, #0]
 800becc:	69b9      	ldr	r1, [r7, #24]
 800bece:	430b      	orrs	r3, r1
 800bed0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d118      	bne.n	800bf0e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	691b      	ldr	r3, [r3, #16]
 800bee2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800bee6:	f023 0304 	bic.w	r3, r3, #4
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800bef2:	4311      	orrs	r1, r2
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800bef8:	4311      	orrs	r1, r2
 800befa:	687a      	ldr	r2, [r7, #4]
 800befc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800befe:	430a      	orrs	r2, r1
 800bf00:	431a      	orrs	r2, r3
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f042 0201 	orr.w	r2, r2, #1
 800bf0a:	611a      	str	r2, [r3, #16]
 800bf0c:	e007      	b.n	800bf1e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	691a      	ldr	r2, [r3, #16]
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f022 0201 	bic.w	r2, r2, #1
 800bf1c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	691b      	ldr	r3, [r3, #16]
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d10c      	bne.n	800bf40 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf2c:	f023 010f 	bic.w	r1, r3, #15
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	69db      	ldr	r3, [r3, #28]
 800bf34:	1e5a      	subs	r2, r3, #1
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	430a      	orrs	r2, r1
 800bf3c:	631a      	str	r2, [r3, #48]	@ 0x30
 800bf3e:	e007      	b.n	800bf50 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f022 020f 	bic.w	r2, r2, #15
 800bf4e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf54:	f023 0303 	bic.w	r3, r3, #3
 800bf58:	f043 0201 	orr.w	r2, r3, #1
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	655a      	str	r2, [r3, #84]	@ 0x54
 800bf60:	e007      	b.n	800bf72 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf66:	f043 0210 	orr.w	r2, r3, #16
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800bf72:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3724      	adds	r7, #36	@ 0x24
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd90      	pop	{r4, r7, pc}
 800bf7c:	20000000 	.word	0x20000000
 800bf80:	053e2d63 	.word	0x053e2d63
 800bf84:	50040000 	.word	0x50040000
 800bf88:	50040100 	.word	0x50040100
 800bf8c:	50040200 	.word	0x50040200
 800bf90:	50040300 	.word	0x50040300
 800bf94:	fff0c007 	.word	0xfff0c007

0800bf98 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b086      	sub	sp, #24
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800bfa4:	4853      	ldr	r0, [pc, #332]	@ (800c0f4 <HAL_ADC_Start_DMA+0x15c>)
 800bfa6:	f7ff fd9b 	bl	800bae0 <LL_ADC_GetMultimode>
 800bfaa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7ff fe67 	bl	800bc84 <LL_ADC_REG_IsConversionOngoing>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f040 8093 	bne.w	800c0e4 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d101      	bne.n	800bfcc <HAL_ADC_Start_DMA+0x34>
 800bfc8:	2302      	movs	r3, #2
 800bfca:	e08e      	b.n	800c0ea <HAL_ADC_Start_DMA+0x152>
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2201      	movs	r2, #1
 800bfd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4a47      	ldr	r2, [pc, #284]	@ (800c0f8 <HAL_ADC_Start_DMA+0x160>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d008      	beq.n	800bff0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d005      	beq.n	800bff0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	2b05      	cmp	r3, #5
 800bfe8:	d002      	beq.n	800bff0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	2b09      	cmp	r3, #9
 800bfee:	d172      	bne.n	800c0d6 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800bff0:	68f8      	ldr	r0, [r7, #12]
 800bff2:	f000 fda7 	bl	800cb44 <ADC_Enable>
 800bff6:	4603      	mov	r3, r0
 800bff8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800bffa:	7dfb      	ldrb	r3, [r7, #23]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d165      	bne.n	800c0cc <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c004:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c008:	f023 0301 	bic.w	r3, r3, #1
 800c00c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4a38      	ldr	r2, [pc, #224]	@ (800c0fc <HAL_ADC_Start_DMA+0x164>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d002      	beq.n	800c024 <HAL_ADC_Start_DMA+0x8c>
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	e000      	b.n	800c026 <HAL_ADC_Start_DMA+0x8e>
 800c024:	4b36      	ldr	r3, [pc, #216]	@ (800c100 <HAL_ADC_Start_DMA+0x168>)
 800c026:	68fa      	ldr	r2, [r7, #12]
 800c028:	6812      	ldr	r2, [r2, #0]
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d002      	beq.n	800c034 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d105      	bne.n	800c040 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c038:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c044:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d006      	beq.n	800c05a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c050:	f023 0206 	bic.w	r2, r3, #6
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	659a      	str	r2, [r3, #88]	@ 0x58
 800c058:	e002      	b.n	800c060 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2200      	movs	r2, #0
 800c05e:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c064:	4a27      	ldr	r2, [pc, #156]	@ (800c104 <HAL_ADC_Start_DMA+0x16c>)
 800c066:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c06c:	4a26      	ldr	r2, [pc, #152]	@ (800c108 <HAL_ADC_Start_DMA+0x170>)
 800c06e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c074:	4a25      	ldr	r2, [pc, #148]	@ (800c10c <HAL_ADC_Start_DMA+0x174>)
 800c076:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	221c      	movs	r2, #28
 800c07e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2200      	movs	r2, #0
 800c084:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	685a      	ldr	r2, [r3, #4]
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f042 0210 	orr.w	r2, r2, #16
 800c096:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	68da      	ldr	r2, [r3, #12]
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f042 0201 	orr.w	r2, r2, #1
 800c0a6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	3340      	adds	r3, #64	@ 0x40
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	68ba      	ldr	r2, [r7, #8]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f001 fbb0 	bl	800d81c <HAL_DMA_Start_IT>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f7ff fdb5 	bl	800bc34 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800c0ca:	e00d      	b.n	800c0e8 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800c0d4:	e008      	b.n	800c0e8 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800c0e2:	e001      	b.n	800c0e8 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800c0e4:	2302      	movs	r3, #2
 800c0e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800c0e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3718      	adds	r7, #24
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	50040300 	.word	0x50040300
 800c0f8:	50040200 	.word	0x50040200
 800c0fc:	50040100 	.word	0x50040100
 800c100:	50040000 	.word	0x50040000
 800c104:	0800cd0f 	.word	0x0800cd0f
 800c108:	0800cde7 	.word	0x0800cde7
 800c10c:	0800ce03 	.word	0x0800ce03

0800c110 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c11e:	2b01      	cmp	r3, #1
 800c120:	d101      	bne.n	800c126 <HAL_ADC_Stop_DMA+0x16>
 800c122:	2302      	movs	r3, #2
 800c124:	e051      	b.n	800c1ca <HAL_ADC_Stop_DMA+0xba>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2201      	movs	r2, #1
 800c12a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800c12e:	2103      	movs	r1, #3
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 fc4b 	bl	800c9cc <ADC_ConversionStop>
 800c136:	4603      	mov	r3, r0
 800c138:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800c13a:	7bfb      	ldrb	r3, [r7, #15]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d13f      	bne.n	800c1c0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	68da      	ldr	r2, [r3, #12]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f022 0201 	bic.w	r2, r2, #1
 800c14e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c154:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c158:	b2db      	uxtb	r3, r3
 800c15a:	2b02      	cmp	r3, #2
 800c15c:	d10f      	bne.n	800c17e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c162:	4618      	mov	r0, r3
 800c164:	f001 fbba 	bl	800d8dc <HAL_DMA_Abort>
 800c168:	4603      	mov	r3, r0
 800c16a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800c16c:	7bfb      	ldrb	r3, [r7, #15]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d005      	beq.n	800c17e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c176:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	685a      	ldr	r2, [r3, #4]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f022 0210 	bic.w	r2, r2, #16
 800c18c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800c18e:	7bfb      	ldrb	r3, [r7, #15]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d105      	bne.n	800c1a0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 fd5b 	bl	800cc50 <ADC_Disable>
 800c19a:	4603      	mov	r3, r0
 800c19c:	73fb      	strb	r3, [r7, #15]
 800c19e:	e002      	b.n	800c1a6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f000 fd55 	bl	800cc50 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800c1a6:	7bfb      	ldrb	r3, [r7, #15]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d109      	bne.n	800c1c0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1b0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800c1b4:	f023 0301 	bic.w	r3, r3, #1
 800c1b8:	f043 0201 	orr.w	r2, r3, #1
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800c1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3710      	adds	r7, #16
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800c1d2:	b480      	push	{r7}
 800c1d4:	b083      	sub	sp, #12
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800c1da:	bf00      	nop
 800c1dc:	370c      	adds	r7, #12
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr
	...

0800c1e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b0b6      	sub	sp, #216	@ 0xd8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c202:	2b01      	cmp	r3, #1
 800c204:	d101      	bne.n	800c20a <HAL_ADC_ConfigChannel+0x22>
 800c206:	2302      	movs	r3, #2
 800c208:	e3c9      	b.n	800c99e <HAL_ADC_ConfigChannel+0x7b6>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2201      	movs	r2, #1
 800c20e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4618      	mov	r0, r3
 800c218:	f7ff fd34 	bl	800bc84 <LL_ADC_REG_IsConversionOngoing>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	f040 83aa 	bne.w	800c978 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	2b05      	cmp	r3, #5
 800c232:	d824      	bhi.n	800c27e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	3b02      	subs	r3, #2
 800c23a:	2b03      	cmp	r3, #3
 800c23c:	d81b      	bhi.n	800c276 <HAL_ADC_ConfigChannel+0x8e>
 800c23e:	a201      	add	r2, pc, #4	@ (adr r2, 800c244 <HAL_ADC_ConfigChannel+0x5c>)
 800c240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c244:	0800c255 	.word	0x0800c255
 800c248:	0800c25d 	.word	0x0800c25d
 800c24c:	0800c265 	.word	0x0800c265
 800c250:	0800c26d 	.word	0x0800c26d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800c254:	230c      	movs	r3, #12
 800c256:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800c25a:	e010      	b.n	800c27e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800c25c:	2312      	movs	r3, #18
 800c25e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800c262:	e00c      	b.n	800c27e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800c264:	2318      	movs	r3, #24
 800c266:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800c26a:	e008      	b.n	800c27e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800c26c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c270:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800c274:	e003      	b.n	800c27e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800c276:	2306      	movs	r3, #6
 800c278:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800c27c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6818      	ldr	r0, [r3, #0]
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	461a      	mov	r2, r3
 800c288:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800c28c:	f7ff fbac 	bl	800b9e8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4618      	mov	r0, r3
 800c296:	f7ff fcf5 	bl	800bc84 <LL_ADC_REG_IsConversionOngoing>
 800c29a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7ff fd15 	bl	800bcd2 <LL_ADC_INJ_IsConversionOngoing>
 800c2a8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800c2ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	f040 81a4 	bne.w	800c5fe <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800c2b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	f040 819f 	bne.w	800c5fe <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6818      	ldr	r0, [r3, #0]
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	6819      	ldr	r1, [r3, #0]
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	689b      	ldr	r3, [r3, #8]
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	f7ff fbb7 	bl	800ba40 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	695a      	ldr	r2, [r3, #20]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	08db      	lsrs	r3, r3, #3
 800c2de:	f003 0303 	and.w	r3, r3, #3
 800c2e2:	005b      	lsls	r3, r3, #1
 800c2e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c2e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	691b      	ldr	r3, [r3, #16]
 800c2f0:	2b04      	cmp	r3, #4
 800c2f2:	d00a      	beq.n	800c30a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6818      	ldr	r0, [r3, #0]
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	6919      	ldr	r1, [r3, #16]
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c304:	f7ff fb08 	bl	800b918 <LL_ADC_SetOffset>
 800c308:	e179      	b.n	800c5fe <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	2100      	movs	r1, #0
 800c310:	4618      	mov	r0, r3
 800c312:	f7ff fb25 	bl	800b960 <LL_ADC_GetOffsetChannel>
 800c316:	4603      	mov	r3, r0
 800c318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d10a      	bne.n	800c336 <HAL_ADC_ConfigChannel+0x14e>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	2100      	movs	r1, #0
 800c326:	4618      	mov	r0, r3
 800c328:	f7ff fb1a 	bl	800b960 <LL_ADC_GetOffsetChannel>
 800c32c:	4603      	mov	r3, r0
 800c32e:	0e9b      	lsrs	r3, r3, #26
 800c330:	f003 021f 	and.w	r2, r3, #31
 800c334:	e01e      	b.n	800c374 <HAL_ADC_ConfigChannel+0x18c>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2100      	movs	r1, #0
 800c33c:	4618      	mov	r0, r3
 800c33e:	f7ff fb0f 	bl	800b960 <LL_ADC_GetOffsetChannel>
 800c342:	4603      	mov	r3, r0
 800c344:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c348:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c34c:	fa93 f3a3 	rbit	r3, r3
 800c350:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800c354:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c358:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800c35c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c360:	2b00      	cmp	r3, #0
 800c362:	d101      	bne.n	800c368 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800c364:	2320      	movs	r3, #32
 800c366:	e004      	b.n	800c372 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800c368:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c36c:	fab3 f383 	clz	r3, r3
 800c370:	b2db      	uxtb	r3, r3
 800c372:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d105      	bne.n	800c38c <HAL_ADC_ConfigChannel+0x1a4>
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	0e9b      	lsrs	r3, r3, #26
 800c386:	f003 031f 	and.w	r3, r3, #31
 800c38a:	e018      	b.n	800c3be <HAL_ADC_ConfigChannel+0x1d6>
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c394:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c398:	fa93 f3a3 	rbit	r3, r3
 800c39c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800c3a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c3a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800c3a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d101      	bne.n	800c3b4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800c3b0:	2320      	movs	r3, #32
 800c3b2:	e004      	b.n	800c3be <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800c3b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c3b8:	fab3 f383 	clz	r3, r3
 800c3bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d106      	bne.n	800c3d0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	2100      	movs	r1, #0
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7ff fade 	bl	800b98c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	2101      	movs	r1, #1
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7ff fac2 	bl	800b960 <LL_ADC_GetOffsetChannel>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d10a      	bne.n	800c3fc <HAL_ADC_ConfigChannel+0x214>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	2101      	movs	r1, #1
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f7ff fab7 	bl	800b960 <LL_ADC_GetOffsetChannel>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	0e9b      	lsrs	r3, r3, #26
 800c3f6:	f003 021f 	and.w	r2, r3, #31
 800c3fa:	e01e      	b.n	800c43a <HAL_ADC_ConfigChannel+0x252>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	2101      	movs	r1, #1
 800c402:	4618      	mov	r0, r3
 800c404:	f7ff faac 	bl	800b960 <LL_ADC_GetOffsetChannel>
 800c408:	4603      	mov	r3, r0
 800c40a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c40e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c412:	fa93 f3a3 	rbit	r3, r3
 800c416:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800c41a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c41e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800c422:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c426:	2b00      	cmp	r3, #0
 800c428:	d101      	bne.n	800c42e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800c42a:	2320      	movs	r3, #32
 800c42c:	e004      	b.n	800c438 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800c42e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c432:	fab3 f383 	clz	r3, r3
 800c436:	b2db      	uxtb	r3, r3
 800c438:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c442:	2b00      	cmp	r3, #0
 800c444:	d105      	bne.n	800c452 <HAL_ADC_ConfigChannel+0x26a>
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	0e9b      	lsrs	r3, r3, #26
 800c44c:	f003 031f 	and.w	r3, r3, #31
 800c450:	e018      	b.n	800c484 <HAL_ADC_ConfigChannel+0x29c>
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c45a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c45e:	fa93 f3a3 	rbit	r3, r3
 800c462:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800c466:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c46a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800c46e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c472:	2b00      	cmp	r3, #0
 800c474:	d101      	bne.n	800c47a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800c476:	2320      	movs	r3, #32
 800c478:	e004      	b.n	800c484 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800c47a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c47e:	fab3 f383 	clz	r3, r3
 800c482:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800c484:	429a      	cmp	r2, r3
 800c486:	d106      	bne.n	800c496 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	2200      	movs	r2, #0
 800c48e:	2101      	movs	r1, #1
 800c490:	4618      	mov	r0, r3
 800c492:	f7ff fa7b 	bl	800b98c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	2102      	movs	r1, #2
 800c49c:	4618      	mov	r0, r3
 800c49e:	f7ff fa5f 	bl	800b960 <LL_ADC_GetOffsetChannel>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d10a      	bne.n	800c4c2 <HAL_ADC_ConfigChannel+0x2da>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	2102      	movs	r1, #2
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7ff fa54 	bl	800b960 <LL_ADC_GetOffsetChannel>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	0e9b      	lsrs	r3, r3, #26
 800c4bc:	f003 021f 	and.w	r2, r3, #31
 800c4c0:	e01e      	b.n	800c500 <HAL_ADC_ConfigChannel+0x318>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	2102      	movs	r1, #2
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f7ff fa49 	bl	800b960 <LL_ADC_GetOffsetChannel>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c4d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c4d8:	fa93 f3a3 	rbit	r3, r3
 800c4dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800c4e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c4e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800c4e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d101      	bne.n	800c4f4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800c4f0:	2320      	movs	r3, #32
 800c4f2:	e004      	b.n	800c4fe <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800c4f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c4f8:	fab3 f383 	clz	r3, r3
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d105      	bne.n	800c518 <HAL_ADC_ConfigChannel+0x330>
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	0e9b      	lsrs	r3, r3, #26
 800c512:	f003 031f 	and.w	r3, r3, #31
 800c516:	e014      	b.n	800c542 <HAL_ADC_ConfigChannel+0x35a>
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c51e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c520:	fa93 f3a3 	rbit	r3, r3
 800c524:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800c526:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c528:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800c52c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c530:	2b00      	cmp	r3, #0
 800c532:	d101      	bne.n	800c538 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800c534:	2320      	movs	r3, #32
 800c536:	e004      	b.n	800c542 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800c538:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c53c:	fab3 f383 	clz	r3, r3
 800c540:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800c542:	429a      	cmp	r2, r3
 800c544:	d106      	bne.n	800c554 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	2200      	movs	r2, #0
 800c54c:	2102      	movs	r1, #2
 800c54e:	4618      	mov	r0, r3
 800c550:	f7ff fa1c 	bl	800b98c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	2103      	movs	r1, #3
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7ff fa00 	bl	800b960 <LL_ADC_GetOffsetChannel>
 800c560:	4603      	mov	r3, r0
 800c562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c566:	2b00      	cmp	r3, #0
 800c568:	d10a      	bne.n	800c580 <HAL_ADC_ConfigChannel+0x398>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	2103      	movs	r1, #3
 800c570:	4618      	mov	r0, r3
 800c572:	f7ff f9f5 	bl	800b960 <LL_ADC_GetOffsetChannel>
 800c576:	4603      	mov	r3, r0
 800c578:	0e9b      	lsrs	r3, r3, #26
 800c57a:	f003 021f 	and.w	r2, r3, #31
 800c57e:	e017      	b.n	800c5b0 <HAL_ADC_ConfigChannel+0x3c8>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	2103      	movs	r1, #3
 800c586:	4618      	mov	r0, r3
 800c588:	f7ff f9ea 	bl	800b960 <LL_ADC_GetOffsetChannel>
 800c58c:	4603      	mov	r3, r0
 800c58e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c590:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c592:	fa93 f3a3 	rbit	r3, r3
 800c596:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800c598:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c59a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800c59c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d101      	bne.n	800c5a6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800c5a2:	2320      	movs	r3, #32
 800c5a4:	e003      	b.n	800c5ae <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800c5a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c5a8:	fab3 f383 	clz	r3, r3
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d105      	bne.n	800c5c8 <HAL_ADC_ConfigChannel+0x3e0>
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	0e9b      	lsrs	r3, r3, #26
 800c5c2:	f003 031f 	and.w	r3, r3, #31
 800c5c6:	e011      	b.n	800c5ec <HAL_ADC_ConfigChannel+0x404>
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c5ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c5d0:	fa93 f3a3 	rbit	r3, r3
 800c5d4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800c5d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c5d8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800c5da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d101      	bne.n	800c5e4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800c5e0:	2320      	movs	r3, #32
 800c5e2:	e003      	b.n	800c5ec <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800c5e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c5e6:	fab3 f383 	clz	r3, r3
 800c5ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d106      	bne.n	800c5fe <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	2103      	movs	r1, #3
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f7ff f9c7 	bl	800b98c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	4618      	mov	r0, r3
 800c604:	f7ff faf0 	bl	800bbe8 <LL_ADC_IsEnabled>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	f040 8140 	bne.w	800c890 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6818      	ldr	r0, [r3, #0]
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	6819      	ldr	r1, [r3, #0]
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	68db      	ldr	r3, [r3, #12]
 800c61c:	461a      	mov	r2, r3
 800c61e:	f7ff fa3b 	bl	800ba98 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	68db      	ldr	r3, [r3, #12]
 800c626:	4a8f      	ldr	r2, [pc, #572]	@ (800c864 <HAL_ADC_ConfigChannel+0x67c>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	f040 8131 	bne.w	800c890 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d10b      	bne.n	800c656 <HAL_ADC_ConfigChannel+0x46e>
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	0e9b      	lsrs	r3, r3, #26
 800c644:	3301      	adds	r3, #1
 800c646:	f003 031f 	and.w	r3, r3, #31
 800c64a:	2b09      	cmp	r3, #9
 800c64c:	bf94      	ite	ls
 800c64e:	2301      	movls	r3, #1
 800c650:	2300      	movhi	r3, #0
 800c652:	b2db      	uxtb	r3, r3
 800c654:	e019      	b.n	800c68a <HAL_ADC_ConfigChannel+0x4a2>
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c65c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c65e:	fa93 f3a3 	rbit	r3, r3
 800c662:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800c664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c666:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800c668:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d101      	bne.n	800c672 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800c66e:	2320      	movs	r3, #32
 800c670:	e003      	b.n	800c67a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800c672:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c674:	fab3 f383 	clz	r3, r3
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	3301      	adds	r3, #1
 800c67c:	f003 031f 	and.w	r3, r3, #31
 800c680:	2b09      	cmp	r3, #9
 800c682:	bf94      	ite	ls
 800c684:	2301      	movls	r3, #1
 800c686:	2300      	movhi	r3, #0
 800c688:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d079      	beq.n	800c782 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c696:	2b00      	cmp	r3, #0
 800c698:	d107      	bne.n	800c6aa <HAL_ADC_ConfigChannel+0x4c2>
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	0e9b      	lsrs	r3, r3, #26
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	069b      	lsls	r3, r3, #26
 800c6a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800c6a8:	e015      	b.n	800c6d6 <HAL_ADC_ConfigChannel+0x4ee>
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c6b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6b2:	fa93 f3a3 	rbit	r3, r3
 800c6b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800c6b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6ba:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800c6bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d101      	bne.n	800c6c6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800c6c2:	2320      	movs	r3, #32
 800c6c4:	e003      	b.n	800c6ce <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800c6c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6c8:	fab3 f383 	clz	r3, r3
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	069b      	lsls	r3, r3, #26
 800c6d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d109      	bne.n	800c6f6 <HAL_ADC_ConfigChannel+0x50e>
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	0e9b      	lsrs	r3, r3, #26
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	f003 031f 	and.w	r3, r3, #31
 800c6ee:	2101      	movs	r1, #1
 800c6f0:	fa01 f303 	lsl.w	r3, r1, r3
 800c6f4:	e017      	b.n	800c726 <HAL_ADC_ConfigChannel+0x53e>
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c6fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6fe:	fa93 f3a3 	rbit	r3, r3
 800c702:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800c704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c706:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800c708:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d101      	bne.n	800c712 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800c70e:	2320      	movs	r3, #32
 800c710:	e003      	b.n	800c71a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800c712:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c714:	fab3 f383 	clz	r3, r3
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	3301      	adds	r3, #1
 800c71c:	f003 031f 	and.w	r3, r3, #31
 800c720:	2101      	movs	r1, #1
 800c722:	fa01 f303 	lsl.w	r3, r1, r3
 800c726:	ea42 0103 	orr.w	r1, r2, r3
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c732:	2b00      	cmp	r3, #0
 800c734:	d10a      	bne.n	800c74c <HAL_ADC_ConfigChannel+0x564>
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	0e9b      	lsrs	r3, r3, #26
 800c73c:	3301      	adds	r3, #1
 800c73e:	f003 021f 	and.w	r2, r3, #31
 800c742:	4613      	mov	r3, r2
 800c744:	005b      	lsls	r3, r3, #1
 800c746:	4413      	add	r3, r2
 800c748:	051b      	lsls	r3, r3, #20
 800c74a:	e018      	b.n	800c77e <HAL_ADC_ConfigChannel+0x596>
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c754:	fa93 f3a3 	rbit	r3, r3
 800c758:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800c75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c75c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800c75e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c760:	2b00      	cmp	r3, #0
 800c762:	d101      	bne.n	800c768 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800c764:	2320      	movs	r3, #32
 800c766:	e003      	b.n	800c770 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800c768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c76a:	fab3 f383 	clz	r3, r3
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	3301      	adds	r3, #1
 800c772:	f003 021f 	and.w	r2, r3, #31
 800c776:	4613      	mov	r3, r2
 800c778:	005b      	lsls	r3, r3, #1
 800c77a:	4413      	add	r3, r2
 800c77c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c77e:	430b      	orrs	r3, r1
 800c780:	e081      	b.n	800c886 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d107      	bne.n	800c79e <HAL_ADC_ConfigChannel+0x5b6>
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	0e9b      	lsrs	r3, r3, #26
 800c794:	3301      	adds	r3, #1
 800c796:	069b      	lsls	r3, r3, #26
 800c798:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800c79c:	e015      	b.n	800c7ca <HAL_ADC_ConfigChannel+0x5e2>
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c7a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7a6:	fa93 f3a3 	rbit	r3, r3
 800c7aa:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800c7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800c7b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d101      	bne.n	800c7ba <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800c7b6:	2320      	movs	r3, #32
 800c7b8:	e003      	b.n	800c7c2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800c7ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7bc:	fab3 f383 	clz	r3, r3
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	069b      	lsls	r3, r3, #26
 800c7c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d109      	bne.n	800c7ea <HAL_ADC_ConfigChannel+0x602>
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	0e9b      	lsrs	r3, r3, #26
 800c7dc:	3301      	adds	r3, #1
 800c7de:	f003 031f 	and.w	r3, r3, #31
 800c7e2:	2101      	movs	r1, #1
 800c7e4:	fa01 f303 	lsl.w	r3, r1, r3
 800c7e8:	e017      	b.n	800c81a <HAL_ADC_ConfigChannel+0x632>
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	fa93 f3a3 	rbit	r3, r3
 800c7f6:	61bb      	str	r3, [r7, #24]
  return result;
 800c7f8:	69bb      	ldr	r3, [r7, #24]
 800c7fa:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800c7fc:	6a3b      	ldr	r3, [r7, #32]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d101      	bne.n	800c806 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800c802:	2320      	movs	r3, #32
 800c804:	e003      	b.n	800c80e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800c806:	6a3b      	ldr	r3, [r7, #32]
 800c808:	fab3 f383 	clz	r3, r3
 800c80c:	b2db      	uxtb	r3, r3
 800c80e:	3301      	adds	r3, #1
 800c810:	f003 031f 	and.w	r3, r3, #31
 800c814:	2101      	movs	r1, #1
 800c816:	fa01 f303 	lsl.w	r3, r1, r3
 800c81a:	ea42 0103 	orr.w	r1, r2, r3
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c826:	2b00      	cmp	r3, #0
 800c828:	d10d      	bne.n	800c846 <HAL_ADC_ConfigChannel+0x65e>
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	0e9b      	lsrs	r3, r3, #26
 800c830:	3301      	adds	r3, #1
 800c832:	f003 021f 	and.w	r2, r3, #31
 800c836:	4613      	mov	r3, r2
 800c838:	005b      	lsls	r3, r3, #1
 800c83a:	4413      	add	r3, r2
 800c83c:	3b1e      	subs	r3, #30
 800c83e:	051b      	lsls	r3, r3, #20
 800c840:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c844:	e01e      	b.n	800c884 <HAL_ADC_ConfigChannel+0x69c>
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	fa93 f3a3 	rbit	r3, r3
 800c852:	60fb      	str	r3, [r7, #12]
  return result;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d104      	bne.n	800c868 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800c85e:	2320      	movs	r3, #32
 800c860:	e006      	b.n	800c870 <HAL_ADC_ConfigChannel+0x688>
 800c862:	bf00      	nop
 800c864:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	fab3 f383 	clz	r3, r3
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	3301      	adds	r3, #1
 800c872:	f003 021f 	and.w	r2, r3, #31
 800c876:	4613      	mov	r3, r2
 800c878:	005b      	lsls	r3, r3, #1
 800c87a:	4413      	add	r3, r2
 800c87c:	3b1e      	subs	r3, #30
 800c87e:	051b      	lsls	r3, r3, #20
 800c880:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c884:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800c886:	683a      	ldr	r2, [r7, #0]
 800c888:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c88a:	4619      	mov	r1, r3
 800c88c:	f7ff f8d8 	bl	800ba40 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	681a      	ldr	r2, [r3, #0]
 800c894:	4b44      	ldr	r3, [pc, #272]	@ (800c9a8 <HAL_ADC_ConfigChannel+0x7c0>)
 800c896:	4013      	ands	r3, r2
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d07a      	beq.n	800c992 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c89c:	4843      	ldr	r0, [pc, #268]	@ (800c9ac <HAL_ADC_ConfigChannel+0x7c4>)
 800c89e:	f7ff f82d 	bl	800b8fc <LL_ADC_GetCommonPathInternalCh>
 800c8a2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4a41      	ldr	r2, [pc, #260]	@ (800c9b0 <HAL_ADC_ConfigChannel+0x7c8>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d12c      	bne.n	800c90a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800c8b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c8b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d126      	bne.n	800c90a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4a3c      	ldr	r2, [pc, #240]	@ (800c9b4 <HAL_ADC_ConfigChannel+0x7cc>)
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d004      	beq.n	800c8d0 <HAL_ADC_ConfigChannel+0x6e8>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	4a3b      	ldr	r2, [pc, #236]	@ (800c9b8 <HAL_ADC_ConfigChannel+0x7d0>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d15d      	bne.n	800c98c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c8d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c8d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c8d8:	4619      	mov	r1, r3
 800c8da:	4834      	ldr	r0, [pc, #208]	@ (800c9ac <HAL_ADC_ConfigChannel+0x7c4>)
 800c8dc:	f7fe fffb 	bl	800b8d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c8e0:	4b36      	ldr	r3, [pc, #216]	@ (800c9bc <HAL_ADC_ConfigChannel+0x7d4>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	099b      	lsrs	r3, r3, #6
 800c8e6:	4a36      	ldr	r2, [pc, #216]	@ (800c9c0 <HAL_ADC_ConfigChannel+0x7d8>)
 800c8e8:	fba2 2303 	umull	r2, r3, r2, r3
 800c8ec:	099b      	lsrs	r3, r3, #6
 800c8ee:	1c5a      	adds	r2, r3, #1
 800c8f0:	4613      	mov	r3, r2
 800c8f2:	005b      	lsls	r3, r3, #1
 800c8f4:	4413      	add	r3, r2
 800c8f6:	009b      	lsls	r3, r3, #2
 800c8f8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800c8fa:	e002      	b.n	800c902 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	3b01      	subs	r3, #1
 800c900:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d1f9      	bne.n	800c8fc <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c908:	e040      	b.n	800c98c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	4a2d      	ldr	r2, [pc, #180]	@ (800c9c4 <HAL_ADC_ConfigChannel+0x7dc>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d118      	bne.n	800c946 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800c914:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c918:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d112      	bne.n	800c946 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	4a23      	ldr	r2, [pc, #140]	@ (800c9b4 <HAL_ADC_ConfigChannel+0x7cc>)
 800c926:	4293      	cmp	r3, r2
 800c928:	d004      	beq.n	800c934 <HAL_ADC_ConfigChannel+0x74c>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4a22      	ldr	r2, [pc, #136]	@ (800c9b8 <HAL_ADC_ConfigChannel+0x7d0>)
 800c930:	4293      	cmp	r3, r2
 800c932:	d12d      	bne.n	800c990 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c934:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c938:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c93c:	4619      	mov	r1, r3
 800c93e:	481b      	ldr	r0, [pc, #108]	@ (800c9ac <HAL_ADC_ConfigChannel+0x7c4>)
 800c940:	f7fe ffc9 	bl	800b8d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c944:	e024      	b.n	800c990 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4a1f      	ldr	r2, [pc, #124]	@ (800c9c8 <HAL_ADC_ConfigChannel+0x7e0>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d120      	bne.n	800c992 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800c950:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c954:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d11a      	bne.n	800c992 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a14      	ldr	r2, [pc, #80]	@ (800c9b4 <HAL_ADC_ConfigChannel+0x7cc>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d115      	bne.n	800c992 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c966:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c96a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c96e:	4619      	mov	r1, r3
 800c970:	480e      	ldr	r0, [pc, #56]	@ (800c9ac <HAL_ADC_ConfigChannel+0x7c4>)
 800c972:	f7fe ffb0 	bl	800b8d6 <LL_ADC_SetCommonPathInternalCh>
 800c976:	e00c      	b.n	800c992 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c97c:	f043 0220 	orr.w	r2, r3, #32
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800c984:	2301      	movs	r3, #1
 800c986:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800c98a:	e002      	b.n	800c992 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c98c:	bf00      	nop
 800c98e:	e000      	b.n	800c992 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c990:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2200      	movs	r2, #0
 800c996:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800c99a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	37d8      	adds	r7, #216	@ 0xd8
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
 800c9a6:	bf00      	nop
 800c9a8:	80080000 	.word	0x80080000
 800c9ac:	50040300 	.word	0x50040300
 800c9b0:	c7520000 	.word	0xc7520000
 800c9b4:	50040000 	.word	0x50040000
 800c9b8:	50040200 	.word	0x50040200
 800c9bc:	20000000 	.word	0x20000000
 800c9c0:	053e2d63 	.word	0x053e2d63
 800c9c4:	cb840000 	.word	0xcb840000
 800c9c8:	80000001 	.word	0x80000001

0800c9cc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b088      	sub	sp, #32
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f7ff f94e 	bl	800bc84 <LL_ADC_REG_IsConversionOngoing>
 800c9e8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7ff f96f 	bl	800bcd2 <LL_ADC_INJ_IsConversionOngoing>
 800c9f4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d103      	bne.n	800ca04 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	f000 8098 	beq.w	800cb34 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d02a      	beq.n	800ca68 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	7e5b      	ldrb	r3, [r3, #25]
 800ca16:	2b01      	cmp	r3, #1
 800ca18:	d126      	bne.n	800ca68 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	7e1b      	ldrb	r3, [r3, #24]
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	d122      	bne.n	800ca68 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800ca22:	2301      	movs	r3, #1
 800ca24:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800ca26:	e014      	b.n	800ca52 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800ca28:	69fb      	ldr	r3, [r7, #28]
 800ca2a:	4a45      	ldr	r2, [pc, #276]	@ (800cb40 <ADC_ConversionStop+0x174>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d90d      	bls.n	800ca4c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca34:	f043 0210 	orr.w	r2, r3, #16
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca40:	f043 0201 	orr.w	r2, r3, #1
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800ca48:	2301      	movs	r3, #1
 800ca4a:	e074      	b.n	800cb36 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800ca4c:	69fb      	ldr	r3, [r7, #28]
 800ca4e:	3301      	adds	r3, #1
 800ca50:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca5c:	2b40      	cmp	r3, #64	@ 0x40
 800ca5e:	d1e3      	bne.n	800ca28 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2240      	movs	r2, #64	@ 0x40
 800ca66:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800ca68:	69bb      	ldr	r3, [r7, #24]
 800ca6a:	2b02      	cmp	r3, #2
 800ca6c:	d014      	beq.n	800ca98 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7ff f906 	bl	800bc84 <LL_ADC_REG_IsConversionOngoing>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d00c      	beq.n	800ca98 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7ff f8c3 	bl	800bc0e <LL_ADC_IsDisableOngoing>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d104      	bne.n	800ca98 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7ff f8e2 	bl	800bc5c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800ca98:	69bb      	ldr	r3, [r7, #24]
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	d014      	beq.n	800cac8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7ff f915 	bl	800bcd2 <LL_ADC_INJ_IsConversionOngoing>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d00c      	beq.n	800cac8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7ff f8ab 	bl	800bc0e <LL_ADC_IsDisableOngoing>
 800cab8:	4603      	mov	r3, r0
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d104      	bne.n	800cac8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7ff f8f1 	bl	800bcaa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800cac8:	69bb      	ldr	r3, [r7, #24]
 800caca:	2b02      	cmp	r3, #2
 800cacc:	d005      	beq.n	800cada <ADC_ConversionStop+0x10e>
 800cace:	69bb      	ldr	r3, [r7, #24]
 800cad0:	2b03      	cmp	r3, #3
 800cad2:	d105      	bne.n	800cae0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800cad4:	230c      	movs	r3, #12
 800cad6:	617b      	str	r3, [r7, #20]
        break;
 800cad8:	e005      	b.n	800cae6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800cada:	2308      	movs	r3, #8
 800cadc:	617b      	str	r3, [r7, #20]
        break;
 800cade:	e002      	b.n	800cae6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800cae0:	2304      	movs	r3, #4
 800cae2:	617b      	str	r3, [r7, #20]
        break;
 800cae4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800cae6:	f7fe feb3 	bl	800b850 <HAL_GetTick>
 800caea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800caec:	e01b      	b.n	800cb26 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800caee:	f7fe feaf 	bl	800b850 <HAL_GetTick>
 800caf2:	4602      	mov	r2, r0
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	1ad3      	subs	r3, r2, r3
 800caf8:	2b05      	cmp	r3, #5
 800cafa:	d914      	bls.n	800cb26 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	689a      	ldr	r2, [r3, #8]
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	4013      	ands	r3, r2
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d00d      	beq.n	800cb26 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb0e:	f043 0210 	orr.w	r2, r3, #16
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb1a:	f043 0201 	orr.w	r2, r3, #1
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800cb22:	2301      	movs	r3, #1
 800cb24:	e007      	b.n	800cb36 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	689a      	ldr	r2, [r3, #8]
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	4013      	ands	r3, r2
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1dc      	bne.n	800caee <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800cb34:	2300      	movs	r3, #0
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3720      	adds	r7, #32
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	a33fffff 	.word	0xa33fffff

0800cb44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b084      	sub	sp, #16
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7ff f847 	bl	800bbe8 <LL_ADC_IsEnabled>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d169      	bne.n	800cc34 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	689a      	ldr	r2, [r3, #8]
 800cb66:	4b36      	ldr	r3, [pc, #216]	@ (800cc40 <ADC_Enable+0xfc>)
 800cb68:	4013      	ands	r3, r2
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d00d      	beq.n	800cb8a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb72:	f043 0210 	orr.w	r2, r3, #16
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb7e:	f043 0201 	orr.w	r2, r3, #1
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800cb86:	2301      	movs	r3, #1
 800cb88:	e055      	b.n	800cc36 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7ff f802 	bl	800bb98 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800cb94:	482b      	ldr	r0, [pc, #172]	@ (800cc44 <ADC_Enable+0x100>)
 800cb96:	f7fe feb1 	bl	800b8fc <LL_ADC_GetCommonPathInternalCh>
 800cb9a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800cb9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d013      	beq.n	800cbcc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800cba4:	4b28      	ldr	r3, [pc, #160]	@ (800cc48 <ADC_Enable+0x104>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	099b      	lsrs	r3, r3, #6
 800cbaa:	4a28      	ldr	r2, [pc, #160]	@ (800cc4c <ADC_Enable+0x108>)
 800cbac:	fba2 2303 	umull	r2, r3, r2, r3
 800cbb0:	099b      	lsrs	r3, r3, #6
 800cbb2:	1c5a      	adds	r2, r3, #1
 800cbb4:	4613      	mov	r3, r2
 800cbb6:	005b      	lsls	r3, r3, #1
 800cbb8:	4413      	add	r3, r2
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800cbbe:	e002      	b.n	800cbc6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	3b01      	subs	r3, #1
 800cbc4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d1f9      	bne.n	800cbc0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800cbcc:	f7fe fe40 	bl	800b850 <HAL_GetTick>
 800cbd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800cbd2:	e028      	b.n	800cc26 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7ff f805 	bl	800bbe8 <LL_ADC_IsEnabled>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d104      	bne.n	800cbee <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f7fe ffd5 	bl	800bb98 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800cbee:	f7fe fe2f 	bl	800b850 <HAL_GetTick>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	1ad3      	subs	r3, r2, r3
 800cbf8:	2b02      	cmp	r3, #2
 800cbfa:	d914      	bls.n	800cc26 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f003 0301 	and.w	r3, r3, #1
 800cc06:	2b01      	cmp	r3, #1
 800cc08:	d00d      	beq.n	800cc26 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc0e:	f043 0210 	orr.w	r2, r3, #16
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc1a:	f043 0201 	orr.w	r2, r3, #1
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800cc22:	2301      	movs	r3, #1
 800cc24:	e007      	b.n	800cc36 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f003 0301 	and.w	r3, r3, #1
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	d1cf      	bne.n	800cbd4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800cc34:	2300      	movs	r3, #0
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3710      	adds	r7, #16
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	8000003f 	.word	0x8000003f
 800cc44:	50040300 	.word	0x50040300
 800cc48:	20000000 	.word	0x20000000
 800cc4c:	053e2d63 	.word	0x053e2d63

0800cc50 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f7fe ffd6 	bl	800bc0e <LL_ADC_IsDisableOngoing>
 800cc62:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f7fe ffbd 	bl	800bbe8 <LL_ADC_IsEnabled>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d047      	beq.n	800cd04 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d144      	bne.n	800cd04 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	689b      	ldr	r3, [r3, #8]
 800cc80:	f003 030d 	and.w	r3, r3, #13
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d10c      	bne.n	800cca2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7fe ff97 	bl	800bbc0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2203      	movs	r2, #3
 800cc98:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800cc9a:	f7fe fdd9 	bl	800b850 <HAL_GetTick>
 800cc9e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800cca0:	e029      	b.n	800ccf6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cca6:	f043 0210 	orr.w	r2, r3, #16
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ccb2:	f043 0201 	orr.w	r2, r3, #1
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800ccba:	2301      	movs	r3, #1
 800ccbc:	e023      	b.n	800cd06 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800ccbe:	f7fe fdc7 	bl	800b850 <HAL_GetTick>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	1ad3      	subs	r3, r2, r3
 800ccc8:	2b02      	cmp	r3, #2
 800ccca:	d914      	bls.n	800ccf6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	689b      	ldr	r3, [r3, #8]
 800ccd2:	f003 0301 	and.w	r3, r3, #1
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d00d      	beq.n	800ccf6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccde:	f043 0210 	orr.w	r2, r3, #16
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ccea:	f043 0201 	orr.w	r2, r3, #1
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	e007      	b.n	800cd06 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	689b      	ldr	r3, [r3, #8]
 800ccfc:	f003 0301 	and.w	r3, r3, #1
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d1dc      	bne.n	800ccbe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800cd04:	2300      	movs	r3, #0
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3710      	adds	r7, #16
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}

0800cd0e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800cd0e:	b580      	push	{r7, lr}
 800cd10:	b084      	sub	sp, #16
 800cd12:	af00      	add	r7, sp, #0
 800cd14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd1a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd20:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d14b      	bne.n	800cdc0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd2c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f003 0308 	and.w	r3, r3, #8
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d021      	beq.n	800cd86 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7fe fe3b 	bl	800b9c2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d032      	beq.n	800cdb8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	68db      	ldr	r3, [r3, #12]
 800cd58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d12b      	bne.n	800cdb8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d11f      	bne.n	800cdb8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd7c:	f043 0201 	orr.w	r2, r3, #1
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	655a      	str	r2, [r3, #84]	@ 0x54
 800cd84:	e018      	b.n	800cdb8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	68db      	ldr	r3, [r3, #12]
 800cd8c:	f003 0302 	and.w	r3, r3, #2
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d111      	bne.n	800cdb8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cda4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d105      	bne.n	800cdb8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdb0:	f043 0201 	orr.w	r2, r3, #1
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800cdb8:	68f8      	ldr	r0, [r7, #12]
 800cdba:	f7f6 f8d3 	bl	8002f64 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800cdbe:	e00e      	b.n	800cdde <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdc4:	f003 0310 	and.w	r3, r3, #16
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d003      	beq.n	800cdd4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800cdcc:	68f8      	ldr	r0, [r7, #12]
 800cdce:	f7ff fa00 	bl	800c1d2 <HAL_ADC_ErrorCallback>
}
 800cdd2:	e004      	b.n	800cdde <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cdd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	4798      	blx	r3
}
 800cdde:	bf00      	nop
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}

0800cde6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800cde6:	b580      	push	{r7, lr}
 800cde8:	b084      	sub	sp, #16
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdf2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800cdf4:	68f8      	ldr	r0, [r7, #12]
 800cdf6:	f7f6 f899 	bl	8002f2c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800cdfa:	bf00      	nop
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b084      	sub	sp, #16
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce0e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce14:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce20:	f043 0204 	orr.w	r2, r3, #4
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800ce28:	68f8      	ldr	r0, [r7, #12]
 800ce2a:	f7ff f9d2 	bl	800c1d2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ce2e:	bf00      	nop
 800ce30:	3710      	adds	r7, #16
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <LL_ADC_IsEnabled>:
{
 800ce36:	b480      	push	{r7}
 800ce38:	b083      	sub	sp, #12
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	689b      	ldr	r3, [r3, #8]
 800ce42:	f003 0301 	and.w	r3, r3, #1
 800ce46:	2b01      	cmp	r3, #1
 800ce48:	d101      	bne.n	800ce4e <LL_ADC_IsEnabled+0x18>
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	e000      	b.n	800ce50 <LL_ADC_IsEnabled+0x1a>
 800ce4e:	2300      	movs	r3, #0
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	370c      	adds	r7, #12
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr

0800ce5c <LL_ADC_REG_IsConversionOngoing>:
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b083      	sub	sp, #12
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	689b      	ldr	r3, [r3, #8]
 800ce68:	f003 0304 	and.w	r3, r3, #4
 800ce6c:	2b04      	cmp	r3, #4
 800ce6e:	d101      	bne.n	800ce74 <LL_ADC_REG_IsConversionOngoing+0x18>
 800ce70:	2301      	movs	r3, #1
 800ce72:	e000      	b.n	800ce76 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800ce74:	2300      	movs	r3, #0
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	370c      	adds	r7, #12
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce80:	4770      	bx	lr
	...

0800ce84 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800ce84:	b590      	push	{r4, r7, lr}
 800ce86:	b09f      	sub	sp, #124	@ 0x7c
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ce9a:	2b01      	cmp	r3, #1
 800ce9c:	d101      	bne.n	800cea2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800ce9e:	2302      	movs	r3, #2
 800cea0:	e093      	b.n	800cfca <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2201      	movs	r2, #1
 800cea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800ceaa:	2300      	movs	r3, #0
 800ceac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800ceae:	2300      	movs	r3, #0
 800ceb0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4a47      	ldr	r2, [pc, #284]	@ (800cfd4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d102      	bne.n	800cec2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800cebc:	4b46      	ldr	r3, [pc, #280]	@ (800cfd8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800cebe:	60bb      	str	r3, [r7, #8]
 800cec0:	e001      	b.n	800cec6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800cec2:	2300      	movs	r3, #0
 800cec4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d10b      	bne.n	800cee4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ced0:	f043 0220 	orr.w	r2, r3, #32
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800cee0:	2301      	movs	r3, #1
 800cee2:	e072      	b.n	800cfca <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7ff ffb8 	bl	800ce5c <LL_ADC_REG_IsConversionOngoing>
 800ceec:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7ff ffb2 	bl	800ce5c <LL_ADC_REG_IsConversionOngoing>
 800cef8:	4603      	mov	r3, r0
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d154      	bne.n	800cfa8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800cefe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d151      	bne.n	800cfa8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800cf04:	4b35      	ldr	r3, [pc, #212]	@ (800cfdc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800cf06:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d02c      	beq.n	800cf6a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800cf10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf12:	689b      	ldr	r3, [r3, #8]
 800cf14:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	6859      	ldr	r1, [r3, #4]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cf22:	035b      	lsls	r3, r3, #13
 800cf24:	430b      	orrs	r3, r1
 800cf26:	431a      	orrs	r2, r3
 800cf28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf2a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800cf2c:	4829      	ldr	r0, [pc, #164]	@ (800cfd4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800cf2e:	f7ff ff82 	bl	800ce36 <LL_ADC_IsEnabled>
 800cf32:	4604      	mov	r4, r0
 800cf34:	4828      	ldr	r0, [pc, #160]	@ (800cfd8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800cf36:	f7ff ff7e 	bl	800ce36 <LL_ADC_IsEnabled>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	431c      	orrs	r4, r3
 800cf3e:	4828      	ldr	r0, [pc, #160]	@ (800cfe0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800cf40:	f7ff ff79 	bl	800ce36 <LL_ADC_IsEnabled>
 800cf44:	4603      	mov	r3, r0
 800cf46:	4323      	orrs	r3, r4
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d137      	bne.n	800cfbc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800cf4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf4e:	689b      	ldr	r3, [r3, #8]
 800cf50:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800cf54:	f023 030f 	bic.w	r3, r3, #15
 800cf58:	683a      	ldr	r2, [r7, #0]
 800cf5a:	6811      	ldr	r1, [r2, #0]
 800cf5c:	683a      	ldr	r2, [r7, #0]
 800cf5e:	6892      	ldr	r2, [r2, #8]
 800cf60:	430a      	orrs	r2, r1
 800cf62:	431a      	orrs	r2, r3
 800cf64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf66:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800cf68:	e028      	b.n	800cfbc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800cf6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf6c:	689b      	ldr	r3, [r3, #8]
 800cf6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800cf72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf74:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800cf76:	4817      	ldr	r0, [pc, #92]	@ (800cfd4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800cf78:	f7ff ff5d 	bl	800ce36 <LL_ADC_IsEnabled>
 800cf7c:	4604      	mov	r4, r0
 800cf7e:	4816      	ldr	r0, [pc, #88]	@ (800cfd8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800cf80:	f7ff ff59 	bl	800ce36 <LL_ADC_IsEnabled>
 800cf84:	4603      	mov	r3, r0
 800cf86:	431c      	orrs	r4, r3
 800cf88:	4815      	ldr	r0, [pc, #84]	@ (800cfe0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800cf8a:	f7ff ff54 	bl	800ce36 <LL_ADC_IsEnabled>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	4323      	orrs	r3, r4
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d112      	bne.n	800cfbc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800cf96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf98:	689b      	ldr	r3, [r3, #8]
 800cf9a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800cf9e:	f023 030f 	bic.w	r3, r3, #15
 800cfa2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cfa4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800cfa6:	e009      	b.n	800cfbc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfac:	f043 0220 	orr.w	r2, r3, #32
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800cfba:	e000      	b.n	800cfbe <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800cfbc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800cfc6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	377c      	adds	r7, #124	@ 0x7c
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd90      	pop	{r4, r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	50040000 	.word	0x50040000
 800cfd8:	50040100 	.word	0x50040100
 800cfdc:	50040300 	.word	0x50040300
 800cfe0:	50040200 	.word	0x50040200

0800cfe4 <__NVIC_SetPriorityGrouping>:
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b085      	sub	sp, #20
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f003 0307 	and.w	r3, r3, #7
 800cff2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cff4:	4b0c      	ldr	r3, [pc, #48]	@ (800d028 <__NVIC_SetPriorityGrouping+0x44>)
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cffa:	68ba      	ldr	r2, [r7, #8]
 800cffc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800d000:	4013      	ands	r3, r2
 800d002:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d00c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800d010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d016:	4a04      	ldr	r2, [pc, #16]	@ (800d028 <__NVIC_SetPriorityGrouping+0x44>)
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	60d3      	str	r3, [r2, #12]
}
 800d01c:	bf00      	nop
 800d01e:	3714      	adds	r7, #20
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr
 800d028:	e000ed00 	.word	0xe000ed00

0800d02c <__NVIC_GetPriorityGrouping>:
{
 800d02c:	b480      	push	{r7}
 800d02e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d030:	4b04      	ldr	r3, [pc, #16]	@ (800d044 <__NVIC_GetPriorityGrouping+0x18>)
 800d032:	68db      	ldr	r3, [r3, #12]
 800d034:	0a1b      	lsrs	r3, r3, #8
 800d036:	f003 0307 	and.w	r3, r3, #7
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	46bd      	mov	sp, r7
 800d03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d042:	4770      	bx	lr
 800d044:	e000ed00 	.word	0xe000ed00

0800d048 <__NVIC_EnableIRQ>:
{
 800d048:	b480      	push	{r7}
 800d04a:	b083      	sub	sp, #12
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	4603      	mov	r3, r0
 800d050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d056:	2b00      	cmp	r3, #0
 800d058:	db0b      	blt.n	800d072 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d05a:	79fb      	ldrb	r3, [r7, #7]
 800d05c:	f003 021f 	and.w	r2, r3, #31
 800d060:	4907      	ldr	r1, [pc, #28]	@ (800d080 <__NVIC_EnableIRQ+0x38>)
 800d062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d066:	095b      	lsrs	r3, r3, #5
 800d068:	2001      	movs	r0, #1
 800d06a:	fa00 f202 	lsl.w	r2, r0, r2
 800d06e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d072:	bf00      	nop
 800d074:	370c      	adds	r7, #12
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop
 800d080:	e000e100 	.word	0xe000e100

0800d084 <__NVIC_SetPriority>:
{
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	4603      	mov	r3, r0
 800d08c:	6039      	str	r1, [r7, #0]
 800d08e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d094:	2b00      	cmp	r3, #0
 800d096:	db0a      	blt.n	800d0ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	b2da      	uxtb	r2, r3
 800d09c:	490c      	ldr	r1, [pc, #48]	@ (800d0d0 <__NVIC_SetPriority+0x4c>)
 800d09e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0a2:	0112      	lsls	r2, r2, #4
 800d0a4:	b2d2      	uxtb	r2, r2
 800d0a6:	440b      	add	r3, r1
 800d0a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d0ac:	e00a      	b.n	800d0c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	b2da      	uxtb	r2, r3
 800d0b2:	4908      	ldr	r1, [pc, #32]	@ (800d0d4 <__NVIC_SetPriority+0x50>)
 800d0b4:	79fb      	ldrb	r3, [r7, #7]
 800d0b6:	f003 030f 	and.w	r3, r3, #15
 800d0ba:	3b04      	subs	r3, #4
 800d0bc:	0112      	lsls	r2, r2, #4
 800d0be:	b2d2      	uxtb	r2, r2
 800d0c0:	440b      	add	r3, r1
 800d0c2:	761a      	strb	r2, [r3, #24]
}
 800d0c4:	bf00      	nop
 800d0c6:	370c      	adds	r7, #12
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr
 800d0d0:	e000e100 	.word	0xe000e100
 800d0d4:	e000ed00 	.word	0xe000ed00

0800d0d8 <NVIC_EncodePriority>:
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b089      	sub	sp, #36	@ 0x24
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	60f8      	str	r0, [r7, #12]
 800d0e0:	60b9      	str	r1, [r7, #8]
 800d0e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f003 0307 	and.w	r3, r3, #7
 800d0ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d0ec:	69fb      	ldr	r3, [r7, #28]
 800d0ee:	f1c3 0307 	rsb	r3, r3, #7
 800d0f2:	2b04      	cmp	r3, #4
 800d0f4:	bf28      	it	cs
 800d0f6:	2304      	movcs	r3, #4
 800d0f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d0fa:	69fb      	ldr	r3, [r7, #28]
 800d0fc:	3304      	adds	r3, #4
 800d0fe:	2b06      	cmp	r3, #6
 800d100:	d902      	bls.n	800d108 <NVIC_EncodePriority+0x30>
 800d102:	69fb      	ldr	r3, [r7, #28]
 800d104:	3b03      	subs	r3, #3
 800d106:	e000      	b.n	800d10a <NVIC_EncodePriority+0x32>
 800d108:	2300      	movs	r3, #0
 800d10a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d10c:	f04f 32ff 	mov.w	r2, #4294967295
 800d110:	69bb      	ldr	r3, [r7, #24]
 800d112:	fa02 f303 	lsl.w	r3, r2, r3
 800d116:	43da      	mvns	r2, r3
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	401a      	ands	r2, r3
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d120:	f04f 31ff 	mov.w	r1, #4294967295
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	fa01 f303 	lsl.w	r3, r1, r3
 800d12a:	43d9      	mvns	r1, r3
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d130:	4313      	orrs	r3, r2
}
 800d132:	4618      	mov	r0, r3
 800d134:	3724      	adds	r7, #36	@ 0x24
 800d136:	46bd      	mov	sp, r7
 800d138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13c:	4770      	bx	lr
	...

0800d140 <__NVIC_SystemReset>:
{
 800d140:	b480      	push	{r7}
 800d142:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800d144:	f3bf 8f4f 	dsb	sy
}
 800d148:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d14a:	4b06      	ldr	r3, [pc, #24]	@ (800d164 <__NVIC_SystemReset+0x24>)
 800d14c:	68db      	ldr	r3, [r3, #12]
 800d14e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d152:	4904      	ldr	r1, [pc, #16]	@ (800d164 <__NVIC_SystemReset+0x24>)
 800d154:	4b04      	ldr	r3, [pc, #16]	@ (800d168 <__NVIC_SystemReset+0x28>)
 800d156:	4313      	orrs	r3, r2
 800d158:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d15a:	f3bf 8f4f 	dsb	sy
}
 800d15e:	bf00      	nop
    __NOP();
 800d160:	bf00      	nop
 800d162:	e7fd      	b.n	800d160 <__NVIC_SystemReset+0x20>
 800d164:	e000ed00 	.word	0xe000ed00
 800d168:	05fa0004 	.word	0x05fa0004

0800d16c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b082      	sub	sp, #8
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	3b01      	subs	r3, #1
 800d178:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d17c:	d301      	bcc.n	800d182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d17e:	2301      	movs	r3, #1
 800d180:	e00f      	b.n	800d1a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d182:	4a0a      	ldr	r2, [pc, #40]	@ (800d1ac <SysTick_Config+0x40>)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	3b01      	subs	r3, #1
 800d188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d18a:	210f      	movs	r1, #15
 800d18c:	f04f 30ff 	mov.w	r0, #4294967295
 800d190:	f7ff ff78 	bl	800d084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d194:	4b05      	ldr	r3, [pc, #20]	@ (800d1ac <SysTick_Config+0x40>)
 800d196:	2200      	movs	r2, #0
 800d198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d19a:	4b04      	ldr	r3, [pc, #16]	@ (800d1ac <SysTick_Config+0x40>)
 800d19c:	2207      	movs	r2, #7
 800d19e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d1a0:	2300      	movs	r3, #0
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3708      	adds	r7, #8
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	e000e010 	.word	0xe000e010

0800d1b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f7ff ff13 	bl	800cfe4 <__NVIC_SetPriorityGrouping>
}
 800d1be:	bf00      	nop
 800d1c0:	3708      	adds	r7, #8
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}

0800d1c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d1c6:	b580      	push	{r7, lr}
 800d1c8:	b086      	sub	sp, #24
 800d1ca:	af00      	add	r7, sp, #0
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	60b9      	str	r1, [r7, #8]
 800d1d0:	607a      	str	r2, [r7, #4]
 800d1d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800d1d8:	f7ff ff28 	bl	800d02c <__NVIC_GetPriorityGrouping>
 800d1dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d1de:	687a      	ldr	r2, [r7, #4]
 800d1e0:	68b9      	ldr	r1, [r7, #8]
 800d1e2:	6978      	ldr	r0, [r7, #20]
 800d1e4:	f7ff ff78 	bl	800d0d8 <NVIC_EncodePriority>
 800d1e8:	4602      	mov	r2, r0
 800d1ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1ee:	4611      	mov	r1, r2
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7ff ff47 	bl	800d084 <__NVIC_SetPriority>
}
 800d1f6:	bf00      	nop
 800d1f8:	3718      	adds	r7, #24
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}

0800d1fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d1fe:	b580      	push	{r7, lr}
 800d200:	b082      	sub	sp, #8
 800d202:	af00      	add	r7, sp, #0
 800d204:	4603      	mov	r3, r0
 800d206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d20c:	4618      	mov	r0, r3
 800d20e:	f7ff ff1b 	bl	800d048 <__NVIC_EnableIRQ>
}
 800d212:	bf00      	nop
 800d214:	3708      	adds	r7, #8
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}

0800d21a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800d21a:	b580      	push	{r7, lr}
 800d21c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800d21e:	f7ff ff8f 	bl	800d140 <__NVIC_SystemReset>

0800d222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d222:	b580      	push	{r7, lr}
 800d224:	b082      	sub	sp, #8
 800d226:	af00      	add	r7, sp, #0
 800d228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f7ff ff9e 	bl	800d16c <SysTick_Config>
 800d230:	4603      	mov	r3, r0
}
 800d232:	4618      	mov	r0, r3
 800d234:	3708      	adds	r7, #8
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
	...

0800d23c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d101      	bne.n	800d24e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800d24a:	2301      	movs	r3, #1
 800d24c:	e054      	b.n	800d2f8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	7f5b      	ldrb	r3, [r3, #29]
 800d252:	b2db      	uxtb	r3, r3
 800d254:	2b00      	cmp	r3, #0
 800d256:	d105      	bne.n	800d264 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2200      	movs	r2, #0
 800d25c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f7fa fdb2 	bl	8007dc8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2202      	movs	r2, #2
 800d268:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	791b      	ldrb	r3, [r3, #4]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d10c      	bne.n	800d28c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	4a22      	ldr	r2, [pc, #136]	@ (800d300 <HAL_CRC_Init+0xc4>)
 800d278:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	689a      	ldr	r2, [r3, #8]
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	f022 0218 	bic.w	r2, r2, #24
 800d288:	609a      	str	r2, [r3, #8]
 800d28a:	e00c      	b.n	800d2a6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6899      	ldr	r1, [r3, #8]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	461a      	mov	r2, r3
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f000 f942 	bl	800d520 <HAL_CRCEx_Polynomial_Set>
 800d29c:	4603      	mov	r3, r0
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d001      	beq.n	800d2a6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	e028      	b.n	800d2f8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	795b      	ldrb	r3, [r3, #5]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d105      	bne.n	800d2ba <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d2b6:	611a      	str	r2, [r3, #16]
 800d2b8:	e004      	b.n	800d2c4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	6912      	ldr	r2, [r2, #16]
 800d2c2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	689b      	ldr	r3, [r3, #8]
 800d2ca:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	695a      	ldr	r2, [r3, #20]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	430a      	orrs	r2, r1
 800d2d8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	689b      	ldr	r3, [r3, #8]
 800d2e0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	699a      	ldr	r2, [r3, #24]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	430a      	orrs	r2, r1
 800d2ee:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800d2f6:	2300      	movs	r3, #0
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3708      	adds	r7, #8
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	04c11db7 	.word	0x04c11db7

0800d304 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b086      	sub	sp, #24
 800d308:	af00      	add	r7, sp, #0
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800d310:	2300      	movs	r3, #0
 800d312:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	2202      	movs	r2, #2
 800d318:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	6a1b      	ldr	r3, [r3, #32]
 800d31e:	2b03      	cmp	r3, #3
 800d320:	d006      	beq.n	800d330 <HAL_CRC_Accumulate+0x2c>
 800d322:	2b03      	cmp	r3, #3
 800d324:	d829      	bhi.n	800d37a <HAL_CRC_Accumulate+0x76>
 800d326:	2b01      	cmp	r3, #1
 800d328:	d019      	beq.n	800d35e <HAL_CRC_Accumulate+0x5a>
 800d32a:	2b02      	cmp	r3, #2
 800d32c:	d01e      	beq.n	800d36c <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 800d32e:	e024      	b.n	800d37a <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 800d330:	2300      	movs	r3, #0
 800d332:	617b      	str	r3, [r7, #20]
 800d334:	e00a      	b.n	800d34c <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	68ba      	ldr	r2, [r7, #8]
 800d33c:	441a      	add	r2, r3
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	6812      	ldr	r2, [r2, #0]
 800d344:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	3301      	adds	r3, #1
 800d34a:	617b      	str	r3, [r7, #20]
 800d34c:	697a      	ldr	r2, [r7, #20]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	429a      	cmp	r2, r3
 800d352:	d3f0      	bcc.n	800d336 <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	613b      	str	r3, [r7, #16]
      break;
 800d35c:	e00e      	b.n	800d37c <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800d35e:	687a      	ldr	r2, [r7, #4]
 800d360:	68b9      	ldr	r1, [r7, #8]
 800d362:	68f8      	ldr	r0, [r7, #12]
 800d364:	f000 f812 	bl	800d38c <CRC_Handle_8>
 800d368:	6138      	str	r0, [r7, #16]
      break;
 800d36a:	e007      	b.n	800d37c <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800d36c:	687a      	ldr	r2, [r7, #4]
 800d36e:	68b9      	ldr	r1, [r7, #8]
 800d370:	68f8      	ldr	r0, [r7, #12]
 800d372:	f000 f89b 	bl	800d4ac <CRC_Handle_16>
 800d376:	6138      	str	r0, [r7, #16]
      break;
 800d378:	e000      	b.n	800d37c <HAL_CRC_Accumulate+0x78>
      break;
 800d37a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	2201      	movs	r2, #1
 800d380:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800d382:	693b      	ldr	r3, [r7, #16]
}
 800d384:	4618      	mov	r0, r3
 800d386:	3718      	adds	r7, #24
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b089      	sub	sp, #36	@ 0x24
 800d390:	af00      	add	r7, sp, #0
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800d398:	2300      	movs	r3, #0
 800d39a:	61fb      	str	r3, [r7, #28]
 800d39c:	e023      	b.n	800d3e6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	009b      	lsls	r3, r3, #2
 800d3a2:	68ba      	ldr	r2, [r7, #8]
 800d3a4:	4413      	add	r3, r2
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800d3aa:	69fb      	ldr	r3, [r7, #28]
 800d3ac:	009b      	lsls	r3, r3, #2
 800d3ae:	3301      	adds	r3, #1
 800d3b0:	68b9      	ldr	r1, [r7, #8]
 800d3b2:	440b      	add	r3, r1
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800d3b8:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800d3ba:	69fb      	ldr	r3, [r7, #28]
 800d3bc:	009b      	lsls	r3, r3, #2
 800d3be:	3302      	adds	r3, #2
 800d3c0:	68b9      	ldr	r1, [r7, #8]
 800d3c2:	440b      	add	r3, r1
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800d3c8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800d3ca:	69fb      	ldr	r3, [r7, #28]
 800d3cc:	009b      	lsls	r3, r3, #2
 800d3ce:	3303      	adds	r3, #3
 800d3d0:	68b9      	ldr	r1, [r7, #8]
 800d3d2:	440b      	add	r3, r1
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800d3dc:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800d3de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800d3e0:	69fb      	ldr	r3, [r7, #28]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	61fb      	str	r3, [r7, #28]
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	089b      	lsrs	r3, r3, #2
 800d3ea:	69fa      	ldr	r2, [r7, #28]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d3d6      	bcc.n	800d39e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f003 0303 	and.w	r3, r3, #3
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d04f      	beq.n	800d49a <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f003 0303 	and.w	r3, r3, #3
 800d400:	2b01      	cmp	r3, #1
 800d402:	d107      	bne.n	800d414 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800d404:	69fb      	ldr	r3, [r7, #28]
 800d406:	009b      	lsls	r3, r3, #2
 800d408:	68ba      	ldr	r2, [r7, #8]
 800d40a:	4413      	add	r3, r2
 800d40c:	68fa      	ldr	r2, [r7, #12]
 800d40e:	6812      	ldr	r2, [r2, #0]
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f003 0303 	and.w	r3, r3, #3
 800d41a:	2b02      	cmp	r3, #2
 800d41c:	d117      	bne.n	800d44e <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800d41e:	69fb      	ldr	r3, [r7, #28]
 800d420:	009b      	lsls	r3, r3, #2
 800d422:	68ba      	ldr	r2, [r7, #8]
 800d424:	4413      	add	r3, r2
 800d426:	781b      	ldrb	r3, [r3, #0]
 800d428:	b21b      	sxth	r3, r3
 800d42a:	021b      	lsls	r3, r3, #8
 800d42c:	b21a      	sxth	r2, r3
 800d42e:	69fb      	ldr	r3, [r7, #28]
 800d430:	009b      	lsls	r3, r3, #2
 800d432:	3301      	adds	r3, #1
 800d434:	68b9      	ldr	r1, [r7, #8]
 800d436:	440b      	add	r3, r1
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	b21b      	sxth	r3, r3
 800d43c:	4313      	orrs	r3, r2
 800d43e:	b21b      	sxth	r3, r3
 800d440:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	8b7a      	ldrh	r2, [r7, #26]
 800d44c:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f003 0303 	and.w	r3, r3, #3
 800d454:	2b03      	cmp	r3, #3
 800d456:	d120      	bne.n	800d49a <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800d458:	69fb      	ldr	r3, [r7, #28]
 800d45a:	009b      	lsls	r3, r3, #2
 800d45c:	68ba      	ldr	r2, [r7, #8]
 800d45e:	4413      	add	r3, r2
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	b21b      	sxth	r3, r3
 800d464:	021b      	lsls	r3, r3, #8
 800d466:	b21a      	sxth	r2, r3
 800d468:	69fb      	ldr	r3, [r7, #28]
 800d46a:	009b      	lsls	r3, r3, #2
 800d46c:	3301      	adds	r3, #1
 800d46e:	68b9      	ldr	r1, [r7, #8]
 800d470:	440b      	add	r3, r1
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	b21b      	sxth	r3, r3
 800d476:	4313      	orrs	r3, r2
 800d478:	b21b      	sxth	r3, r3
 800d47a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	8b7a      	ldrh	r2, [r7, #26]
 800d486:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800d488:	69fb      	ldr	r3, [r7, #28]
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	3302      	adds	r3, #2
 800d48e:	68ba      	ldr	r2, [r7, #8]
 800d490:	4413      	add	r3, r2
 800d492:	68fa      	ldr	r2, [r7, #12]
 800d494:	6812      	ldr	r2, [r2, #0]
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	681b      	ldr	r3, [r3, #0]
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3724      	adds	r7, #36	@ 0x24
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr

0800d4ac <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b087      	sub	sp, #28
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	617b      	str	r3, [r7, #20]
 800d4bc:	e013      	b.n	800d4e6 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	009b      	lsls	r3, r3, #2
 800d4c2:	68ba      	ldr	r2, [r7, #8]
 800d4c4:	4413      	add	r3, r2
 800d4c6:	881b      	ldrh	r3, [r3, #0]
 800d4c8:	041a      	lsls	r2, r3, #16
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	009b      	lsls	r3, r3, #2
 800d4ce:	3302      	adds	r3, #2
 800d4d0:	68b9      	ldr	r1, [r7, #8]
 800d4d2:	440b      	add	r3, r1
 800d4d4:	881b      	ldrh	r3, [r3, #0]
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	430a      	orrs	r2, r1
 800d4de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	617b      	str	r3, [r7, #20]
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	085b      	lsrs	r3, r3, #1
 800d4ea:	697a      	ldr	r2, [r7, #20]
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d3e6      	bcc.n	800d4be <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f003 0301 	and.w	r3, r3, #1
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d009      	beq.n	800d50e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	009b      	lsls	r3, r3, #2
 800d504:	68ba      	ldr	r2, [r7, #8]
 800d506:	4413      	add	r3, r2
 800d508:	881a      	ldrh	r2, [r3, #0]
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	681b      	ldr	r3, [r3, #0]
}
 800d514:	4618      	mov	r0, r3
 800d516:	371c      	adds	r7, #28
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr

0800d520 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800d520:	b480      	push	{r7}
 800d522:	b087      	sub	sp, #28
 800d524:	af00      	add	r7, sp, #0
 800d526:	60f8      	str	r0, [r7, #12]
 800d528:	60b9      	str	r1, [r7, #8]
 800d52a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d52c:	2300      	movs	r3, #0
 800d52e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800d530:	231f      	movs	r3, #31
 800d532:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	f003 0301 	and.w	r3, r3, #1
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d102      	bne.n	800d544 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800d53e:	2301      	movs	r3, #1
 800d540:	75fb      	strb	r3, [r7, #23]
 800d542:	e063      	b.n	800d60c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800d544:	bf00      	nop
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	1e5a      	subs	r2, r3, #1
 800d54a:	613a      	str	r2, [r7, #16]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d009      	beq.n	800d564 <HAL_CRCEx_Polynomial_Set+0x44>
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	f003 031f 	and.w	r3, r3, #31
 800d556:	68ba      	ldr	r2, [r7, #8]
 800d558:	fa22 f303 	lsr.w	r3, r2, r3
 800d55c:	f003 0301 	and.w	r3, r3, #1
 800d560:	2b00      	cmp	r3, #0
 800d562:	d0f0      	beq.n	800d546 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2b18      	cmp	r3, #24
 800d568:	d846      	bhi.n	800d5f8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800d56a:	a201      	add	r2, pc, #4	@ (adr r2, 800d570 <HAL_CRCEx_Polynomial_Set+0x50>)
 800d56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d570:	0800d5ff 	.word	0x0800d5ff
 800d574:	0800d5f9 	.word	0x0800d5f9
 800d578:	0800d5f9 	.word	0x0800d5f9
 800d57c:	0800d5f9 	.word	0x0800d5f9
 800d580:	0800d5f9 	.word	0x0800d5f9
 800d584:	0800d5f9 	.word	0x0800d5f9
 800d588:	0800d5f9 	.word	0x0800d5f9
 800d58c:	0800d5f9 	.word	0x0800d5f9
 800d590:	0800d5ed 	.word	0x0800d5ed
 800d594:	0800d5f9 	.word	0x0800d5f9
 800d598:	0800d5f9 	.word	0x0800d5f9
 800d59c:	0800d5f9 	.word	0x0800d5f9
 800d5a0:	0800d5f9 	.word	0x0800d5f9
 800d5a4:	0800d5f9 	.word	0x0800d5f9
 800d5a8:	0800d5f9 	.word	0x0800d5f9
 800d5ac:	0800d5f9 	.word	0x0800d5f9
 800d5b0:	0800d5e1 	.word	0x0800d5e1
 800d5b4:	0800d5f9 	.word	0x0800d5f9
 800d5b8:	0800d5f9 	.word	0x0800d5f9
 800d5bc:	0800d5f9 	.word	0x0800d5f9
 800d5c0:	0800d5f9 	.word	0x0800d5f9
 800d5c4:	0800d5f9 	.word	0x0800d5f9
 800d5c8:	0800d5f9 	.word	0x0800d5f9
 800d5cc:	0800d5f9 	.word	0x0800d5f9
 800d5d0:	0800d5d5 	.word	0x0800d5d5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	2b06      	cmp	r3, #6
 800d5d8:	d913      	bls.n	800d602 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800d5da:	2301      	movs	r3, #1
 800d5dc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800d5de:	e010      	b.n	800d602 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	2b07      	cmp	r3, #7
 800d5e4:	d90f      	bls.n	800d606 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800d5ea:	e00c      	b.n	800d606 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	2b0f      	cmp	r3, #15
 800d5f0:	d90b      	bls.n	800d60a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800d5f6:	e008      	b.n	800d60a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	75fb      	strb	r3, [r7, #23]
        break;
 800d5fc:	e006      	b.n	800d60c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800d5fe:	bf00      	nop
 800d600:	e004      	b.n	800d60c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800d602:	bf00      	nop
 800d604:	e002      	b.n	800d60c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800d606:	bf00      	nop
 800d608:	e000      	b.n	800d60c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800d60a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800d60c:	7dfb      	ldrb	r3, [r7, #23]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d10d      	bne.n	800d62e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	68ba      	ldr	r2, [r7, #8]
 800d618:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	689b      	ldr	r3, [r3, #8]
 800d620:	f023 0118 	bic.w	r1, r3, #24
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	687a      	ldr	r2, [r7, #4]
 800d62a:	430a      	orrs	r2, r1
 800d62c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800d62e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d630:	4618      	mov	r0, r3
 800d632:	371c      	adds	r7, #28
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr

0800d63c <HAL_CRCEx_Input_Data_Reverse>:
  *          @arg @ref CRC_INPUTDATA_INVERSION_HALFWORD HalfWord-wise bit reversal
  *          @arg @ref CRC_INPUTDATA_INVERSION_WORD     Word-wise bit reversal
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Input_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t InputReverseMode)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b083      	sub	sp, #12
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(InputReverseMode));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2202      	movs	r2, #2
 800d64a:	775a      	strb	r2, [r3, #29]

  /* set input data inversion mode */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, InputReverseMode);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	689b      	ldr	r3, [r3, #8]
 800d652:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	683a      	ldr	r2, [r7, #0]
 800d65c:	430a      	orrs	r2, r1
 800d65e:	609a      	str	r2, [r3, #8]
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2201      	movs	r2, #1
 800d664:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800d666:	2300      	movs	r3, #0
}
 800d668:	4618      	mov	r0, r3
 800d66a:	370c      	adds	r7, #12
 800d66c:	46bd      	mov	sp, r7
 800d66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d672:	4770      	bx	lr

0800d674 <HAL_CRCEx_Output_Data_Reverse>:
  *          @arg @ref CRC_OUTPUTDATA_INVERSION_DISABLE no CRC inversion (default value)
  *          @arg @ref CRC_OUTPUTDATA_INVERSION_ENABLE  bit-level inversion (e.g. for a 8-bit CRC: 0xB5 becomes 0xAD)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Output_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t OutputReverseMode)
{
 800d674:	b480      	push	{r7}
 800d676:	b083      	sub	sp, #12
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(OutputReverseMode));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2202      	movs	r2, #2
 800d682:	775a      	strb	r2, [r3, #29]

  /* set output data inversion mode */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, OutputReverseMode);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	689b      	ldr	r3, [r3, #8]
 800d68a:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	683a      	ldr	r2, [r7, #0]
 800d694:	430a      	orrs	r2, r1
 800d696:	609a      	str	r2, [r3, #8]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2201      	movs	r2, #1
 800d69c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800d69e:	2300      	movs	r3, #0
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	370c      	adds	r7, #12
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b085      	sub	sp, #20
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d101      	bne.n	800d6be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	e098      	b.n	800d7f0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	461a      	mov	r2, r3
 800d6c4:	4b4d      	ldr	r3, [pc, #308]	@ (800d7fc <HAL_DMA_Init+0x150>)
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d80f      	bhi.n	800d6ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	4b4b      	ldr	r3, [pc, #300]	@ (800d800 <HAL_DMA_Init+0x154>)
 800d6d2:	4413      	add	r3, r2
 800d6d4:	4a4b      	ldr	r2, [pc, #300]	@ (800d804 <HAL_DMA_Init+0x158>)
 800d6d6:	fba2 2303 	umull	r2, r3, r2, r3
 800d6da:	091b      	lsrs	r3, r3, #4
 800d6dc:	009a      	lsls	r2, r3, #2
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	4a48      	ldr	r2, [pc, #288]	@ (800d808 <HAL_DMA_Init+0x15c>)
 800d6e6:	641a      	str	r2, [r3, #64]	@ 0x40
 800d6e8:	e00e      	b.n	800d708 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	461a      	mov	r2, r3
 800d6f0:	4b46      	ldr	r3, [pc, #280]	@ (800d80c <HAL_DMA_Init+0x160>)
 800d6f2:	4413      	add	r3, r2
 800d6f4:	4a43      	ldr	r2, [pc, #268]	@ (800d804 <HAL_DMA_Init+0x158>)
 800d6f6:	fba2 2303 	umull	r2, r3, r2, r3
 800d6fa:	091b      	lsrs	r3, r3, #4
 800d6fc:	009a      	lsls	r2, r3, #2
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	4a42      	ldr	r2, [pc, #264]	@ (800d810 <HAL_DMA_Init+0x164>)
 800d706:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2202      	movs	r2, #2
 800d70c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800d71e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d722:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800d72c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	691b      	ldr	r3, [r3, #16]
 800d732:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d738:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	699b      	ldr	r3, [r3, #24]
 800d73e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d744:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6a1b      	ldr	r3, [r3, #32]
 800d74a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800d74c:	68fa      	ldr	r2, [r7, #12]
 800d74e:	4313      	orrs	r3, r2
 800d750:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	68fa      	ldr	r2, [r7, #12]
 800d758:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	689b      	ldr	r3, [r3, #8]
 800d75e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d762:	d039      	beq.n	800d7d8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d768:	4a27      	ldr	r2, [pc, #156]	@ (800d808 <HAL_DMA_Init+0x15c>)
 800d76a:	4293      	cmp	r3, r2
 800d76c:	d11a      	bne.n	800d7a4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800d76e:	4b29      	ldr	r3, [pc, #164]	@ (800d814 <HAL_DMA_Init+0x168>)
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d776:	f003 031c 	and.w	r3, r3, #28
 800d77a:	210f      	movs	r1, #15
 800d77c:	fa01 f303 	lsl.w	r3, r1, r3
 800d780:	43db      	mvns	r3, r3
 800d782:	4924      	ldr	r1, [pc, #144]	@ (800d814 <HAL_DMA_Init+0x168>)
 800d784:	4013      	ands	r3, r2
 800d786:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800d788:	4b22      	ldr	r3, [pc, #136]	@ (800d814 <HAL_DMA_Init+0x168>)
 800d78a:	681a      	ldr	r2, [r3, #0]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6859      	ldr	r1, [r3, #4]
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d794:	f003 031c 	and.w	r3, r3, #28
 800d798:	fa01 f303 	lsl.w	r3, r1, r3
 800d79c:	491d      	ldr	r1, [pc, #116]	@ (800d814 <HAL_DMA_Init+0x168>)
 800d79e:	4313      	orrs	r3, r2
 800d7a0:	600b      	str	r3, [r1, #0]
 800d7a2:	e019      	b.n	800d7d8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800d7a4:	4b1c      	ldr	r3, [pc, #112]	@ (800d818 <HAL_DMA_Init+0x16c>)
 800d7a6:	681a      	ldr	r2, [r3, #0]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7ac:	f003 031c 	and.w	r3, r3, #28
 800d7b0:	210f      	movs	r1, #15
 800d7b2:	fa01 f303 	lsl.w	r3, r1, r3
 800d7b6:	43db      	mvns	r3, r3
 800d7b8:	4917      	ldr	r1, [pc, #92]	@ (800d818 <HAL_DMA_Init+0x16c>)
 800d7ba:	4013      	ands	r3, r2
 800d7bc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800d7be:	4b16      	ldr	r3, [pc, #88]	@ (800d818 <HAL_DMA_Init+0x16c>)
 800d7c0:	681a      	ldr	r2, [r3, #0]
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6859      	ldr	r1, [r3, #4]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7ca:	f003 031c 	and.w	r3, r3, #28
 800d7ce:	fa01 f303 	lsl.w	r3, r1, r3
 800d7d2:	4911      	ldr	r1, [pc, #68]	@ (800d818 <HAL_DMA_Init+0x16c>)
 800d7d4:	4313      	orrs	r3, r2
 800d7d6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2201      	movs	r2, #1
 800d7e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800d7ee:	2300      	movs	r3, #0
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3714      	adds	r7, #20
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr
 800d7fc:	40020407 	.word	0x40020407
 800d800:	bffdfff8 	.word	0xbffdfff8
 800d804:	cccccccd 	.word	0xcccccccd
 800d808:	40020000 	.word	0x40020000
 800d80c:	bffdfbf8 	.word	0xbffdfbf8
 800d810:	40020400 	.word	0x40020400
 800d814:	400200a8 	.word	0x400200a8
 800d818:	400204a8 	.word	0x400204a8

0800d81c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b086      	sub	sp, #24
 800d820:	af00      	add	r7, sp, #0
 800d822:	60f8      	str	r0, [r7, #12]
 800d824:	60b9      	str	r1, [r7, #8]
 800d826:	607a      	str	r2, [r7, #4]
 800d828:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d82a:	2300      	movs	r3, #0
 800d82c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d834:	2b01      	cmp	r3, #1
 800d836:	d101      	bne.n	800d83c <HAL_DMA_Start_IT+0x20>
 800d838:	2302      	movs	r3, #2
 800d83a:	e04b      	b.n	800d8d4 <HAL_DMA_Start_IT+0xb8>
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	2201      	movs	r2, #1
 800d840:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	2b01      	cmp	r3, #1
 800d84e:	d13a      	bne.n	800d8c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	2202      	movs	r2, #2
 800d854:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2200      	movs	r2, #0
 800d85c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f022 0201 	bic.w	r2, r2, #1
 800d86c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	687a      	ldr	r2, [r7, #4]
 800d872:	68b9      	ldr	r1, [r7, #8]
 800d874:	68f8      	ldr	r0, [r7, #12]
 800d876:	f000 f92a 	bl	800dace <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d008      	beq.n	800d894 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	681a      	ldr	r2, [r3, #0]
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f042 020e 	orr.w	r2, r2, #14
 800d890:	601a      	str	r2, [r3, #0]
 800d892:	e00f      	b.n	800d8b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	681a      	ldr	r2, [r3, #0]
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	f022 0204 	bic.w	r2, r2, #4
 800d8a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	681a      	ldr	r2, [r3, #0]
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f042 020a 	orr.w	r2, r2, #10
 800d8b2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	681a      	ldr	r2, [r3, #0]
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f042 0201 	orr.w	r2, r2, #1
 800d8c2:	601a      	str	r2, [r3, #0]
 800d8c4:	e005      	b.n	800d8d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800d8ce:	2302      	movs	r3, #2
 800d8d0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800d8d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3718      	adds	r7, #24
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b085      	sub	sp, #20
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800d8ee:	b2db      	uxtb	r3, r3
 800d8f0:	2b02      	cmp	r3, #2
 800d8f2:	d008      	beq.n	800d906 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2204      	movs	r2, #4
 800d8f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800d902:	2301      	movs	r3, #1
 800d904:	e022      	b.n	800d94c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f022 020e 	bic.w	r2, r2, #14
 800d914:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	681a      	ldr	r2, [r3, #0]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	f022 0201 	bic.w	r2, r2, #1
 800d924:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d92a:	f003 021c 	and.w	r2, r3, #28
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d932:	2101      	movs	r1, #1
 800d934:	fa01 f202 	lsl.w	r2, r1, r2
 800d938:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2201      	movs	r2, #1
 800d93e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2200      	movs	r2, #0
 800d946:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800d94a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3714      	adds	r7, #20
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr

0800d958 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d974:	f003 031c 	and.w	r3, r3, #28
 800d978:	2204      	movs	r2, #4
 800d97a:	409a      	lsls	r2, r3
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	4013      	ands	r3, r2
 800d980:	2b00      	cmp	r3, #0
 800d982:	d026      	beq.n	800d9d2 <HAL_DMA_IRQHandler+0x7a>
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	f003 0304 	and.w	r3, r3, #4
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d021      	beq.n	800d9d2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f003 0320 	and.w	r3, r3, #32
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d107      	bne.n	800d9ac <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	681a      	ldr	r2, [r3, #0]
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f022 0204 	bic.w	r2, r2, #4
 800d9aa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9b0:	f003 021c 	and.w	r2, r3, #28
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9b8:	2104      	movs	r1, #4
 800d9ba:	fa01 f202 	lsl.w	r2, r1, r2
 800d9be:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d071      	beq.n	800daac <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800d9d0:	e06c      	b.n	800daac <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9d6:	f003 031c 	and.w	r3, r3, #28
 800d9da:	2202      	movs	r2, #2
 800d9dc:	409a      	lsls	r2, r3
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	4013      	ands	r3, r2
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d02e      	beq.n	800da44 <HAL_DMA_IRQHandler+0xec>
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	f003 0302 	and.w	r3, r3, #2
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d029      	beq.n	800da44 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	f003 0320 	and.w	r3, r3, #32
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d10b      	bne.n	800da16 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	681a      	ldr	r2, [r3, #0]
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	f022 020a 	bic.w	r2, r2, #10
 800da0c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2201      	movs	r2, #1
 800da12:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da1a:	f003 021c 	and.w	r2, r3, #28
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da22:	2102      	movs	r1, #2
 800da24:	fa01 f202 	lsl.w	r2, r1, r2
 800da28:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2200      	movs	r2, #0
 800da2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da36:	2b00      	cmp	r3, #0
 800da38:	d038      	beq.n	800daac <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800da42:	e033      	b.n	800daac <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da48:	f003 031c 	and.w	r3, r3, #28
 800da4c:	2208      	movs	r2, #8
 800da4e:	409a      	lsls	r2, r3
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	4013      	ands	r3, r2
 800da54:	2b00      	cmp	r3, #0
 800da56:	d02a      	beq.n	800daae <HAL_DMA_IRQHandler+0x156>
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	f003 0308 	and.w	r3, r3, #8
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d025      	beq.n	800daae <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	681a      	ldr	r2, [r3, #0]
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f022 020e 	bic.w	r2, r2, #14
 800da70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da76:	f003 021c 	and.w	r2, r3, #28
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da7e:	2101      	movs	r1, #1
 800da80:	fa01 f202 	lsl.w	r2, r1, r2
 800da84:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2201      	movs	r2, #1
 800da8a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2201      	movs	r2, #1
 800da90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2200      	movs	r2, #0
 800da98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d004      	beq.n	800daae <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800daac:	bf00      	nop
 800daae:	bf00      	nop
}
 800dab0:	3710      	adds	r7, #16
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}

0800dab6 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800dab6:	b480      	push	{r7}
 800dab8:	b083      	sub	sp, #12
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	370c      	adds	r7, #12
 800dac6:	46bd      	mov	sp, r7
 800dac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dacc:	4770      	bx	lr

0800dace <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800dace:	b480      	push	{r7}
 800dad0:	b085      	sub	sp, #20
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	60f8      	str	r0, [r7, #12]
 800dad6:	60b9      	str	r1, [r7, #8]
 800dad8:	607a      	str	r2, [r7, #4]
 800dada:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dae0:	f003 021c 	and.w	r2, r3, #28
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dae8:	2101      	movs	r1, #1
 800daea:	fa01 f202 	lsl.w	r2, r1, r2
 800daee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	683a      	ldr	r2, [r7, #0]
 800daf6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	689b      	ldr	r3, [r3, #8]
 800dafc:	2b10      	cmp	r3, #16
 800dafe:	d108      	bne.n	800db12 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	687a      	ldr	r2, [r7, #4]
 800db06:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	68ba      	ldr	r2, [r7, #8]
 800db0e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800db10:	e007      	b.n	800db22 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	68ba      	ldr	r2, [r7, #8]
 800db18:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	687a      	ldr	r2, [r7, #4]
 800db20:	60da      	str	r2, [r3, #12]
}
 800db22:	bf00      	nop
 800db24:	3714      	adds	r7, #20
 800db26:	46bd      	mov	sp, r7
 800db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2c:	4770      	bx	lr
	...

0800db30 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b086      	sub	sp, #24
 800db34:	af00      	add	r7, sp, #0
 800db36:	60f8      	str	r0, [r7, #12]
 800db38:	60b9      	str	r1, [r7, #8]
 800db3a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800db3e:	2300      	movs	r3, #0
 800db40:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800db42:	4b2f      	ldr	r3, [pc, #188]	@ (800dc00 <HAL_FLASH_Program+0xd0>)
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	2b01      	cmp	r3, #1
 800db48:	d101      	bne.n	800db4e <HAL_FLASH_Program+0x1e>
 800db4a:	2302      	movs	r3, #2
 800db4c:	e053      	b.n	800dbf6 <HAL_FLASH_Program+0xc6>
 800db4e:	4b2c      	ldr	r3, [pc, #176]	@ (800dc00 <HAL_FLASH_Program+0xd0>)
 800db50:	2201      	movs	r2, #1
 800db52:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800db54:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800db58:	f000 f8c6 	bl	800dce8 <FLASH_WaitForLastOperation>
 800db5c:	4603      	mov	r3, r0
 800db5e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800db60:	7dfb      	ldrb	r3, [r7, #23]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d143      	bne.n	800dbee <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800db66:	4b26      	ldr	r3, [pc, #152]	@ (800dc00 <HAL_FLASH_Program+0xd0>)
 800db68:	2200      	movs	r2, #0
 800db6a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800db6c:	4b25      	ldr	r3, [pc, #148]	@ (800dc04 <HAL_FLASH_Program+0xd4>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800db74:	2b00      	cmp	r3, #0
 800db76:	d009      	beq.n	800db8c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800db78:	4b22      	ldr	r3, [pc, #136]	@ (800dc04 <HAL_FLASH_Program+0xd4>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	4a21      	ldr	r2, [pc, #132]	@ (800dc04 <HAL_FLASH_Program+0xd4>)
 800db7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800db82:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800db84:	4b1e      	ldr	r3, [pc, #120]	@ (800dc00 <HAL_FLASH_Program+0xd0>)
 800db86:	2202      	movs	r2, #2
 800db88:	771a      	strb	r2, [r3, #28]
 800db8a:	e002      	b.n	800db92 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800db8c:	4b1c      	ldr	r3, [pc, #112]	@ (800dc00 <HAL_FLASH_Program+0xd0>)
 800db8e:	2200      	movs	r2, #0
 800db90:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d107      	bne.n	800dba8 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800db98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db9c:	68b8      	ldr	r0, [r7, #8]
 800db9e:	f000 f8f9 	bl	800dd94 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800dba2:	2301      	movs	r3, #1
 800dba4:	613b      	str	r3, [r7, #16]
 800dba6:	e010      	b.n	800dbca <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	2b01      	cmp	r3, #1
 800dbac:	d002      	beq.n	800dbb4 <HAL_FLASH_Program+0x84>
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	2b02      	cmp	r3, #2
 800dbb2:	d10a      	bne.n	800dbca <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	68b8      	ldr	r0, [r7, #8]
 800dbba:	f000 f911 	bl	800dde0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	2b02      	cmp	r3, #2
 800dbc2:	d102      	bne.n	800dbca <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800dbc4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800dbc8:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800dbca:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800dbce:	f000 f88b 	bl	800dce8 <FLASH_WaitForLastOperation>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d006      	beq.n	800dbea <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800dbdc:	4b09      	ldr	r3, [pc, #36]	@ (800dc04 <HAL_FLASH_Program+0xd4>)
 800dbde:	695a      	ldr	r2, [r3, #20]
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	43db      	mvns	r3, r3
 800dbe4:	4907      	ldr	r1, [pc, #28]	@ (800dc04 <HAL_FLASH_Program+0xd4>)
 800dbe6:	4013      	ands	r3, r2
 800dbe8:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800dbea:	f000 fae5 	bl	800e1b8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800dbee:	4b04      	ldr	r3, [pc, #16]	@ (800dc00 <HAL_FLASH_Program+0xd0>)
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	701a      	strb	r2, [r3, #0]

  return status;
 800dbf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3718      	adds	r7, #24
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	20000014 	.word	0x20000014
 800dc04:	40022000 	.word	0x40022000

0800dc08 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b083      	sub	sp, #12
 800dc0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800dc12:	4b0b      	ldr	r3, [pc, #44]	@ (800dc40 <HAL_FLASH_Unlock+0x38>)
 800dc14:	695b      	ldr	r3, [r3, #20]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	da0b      	bge.n	800dc32 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800dc1a:	4b09      	ldr	r3, [pc, #36]	@ (800dc40 <HAL_FLASH_Unlock+0x38>)
 800dc1c:	4a09      	ldr	r2, [pc, #36]	@ (800dc44 <HAL_FLASH_Unlock+0x3c>)
 800dc1e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800dc20:	4b07      	ldr	r3, [pc, #28]	@ (800dc40 <HAL_FLASH_Unlock+0x38>)
 800dc22:	4a09      	ldr	r2, [pc, #36]	@ (800dc48 <HAL_FLASH_Unlock+0x40>)
 800dc24:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800dc26:	4b06      	ldr	r3, [pc, #24]	@ (800dc40 <HAL_FLASH_Unlock+0x38>)
 800dc28:	695b      	ldr	r3, [r3, #20]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	da01      	bge.n	800dc32 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800dc32:	79fb      	ldrb	r3, [r7, #7]
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	370c      	adds	r7, #12
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr
 800dc40:	40022000 	.word	0x40022000
 800dc44:	45670123 	.word	0x45670123
 800dc48:	cdef89ab 	.word	0xcdef89ab

0800dc4c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800dc50:	4b05      	ldr	r3, [pc, #20]	@ (800dc68 <HAL_FLASH_Lock+0x1c>)
 800dc52:	695b      	ldr	r3, [r3, #20]
 800dc54:	4a04      	ldr	r2, [pc, #16]	@ (800dc68 <HAL_FLASH_Lock+0x1c>)
 800dc56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800dc5a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800dc5c:	2300      	movs	r3, #0
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr
 800dc68:	40022000 	.word	0x40022000

0800dc6c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 800dc70:	4b09      	ldr	r3, [pc, #36]	@ (800dc98 <HAL_FLASH_OB_Unlock+0x2c>)
 800dc72:	695b      	ldr	r3, [r3, #20]
 800dc74:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d007      	beq.n	800dc8c <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800dc7c:	4b06      	ldr	r3, [pc, #24]	@ (800dc98 <HAL_FLASH_OB_Unlock+0x2c>)
 800dc7e:	4a07      	ldr	r2, [pc, #28]	@ (800dc9c <HAL_FLASH_OB_Unlock+0x30>)
 800dc80:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800dc82:	4b05      	ldr	r3, [pc, #20]	@ (800dc98 <HAL_FLASH_OB_Unlock+0x2c>)
 800dc84:	4a06      	ldr	r2, [pc, #24]	@ (800dca0 <HAL_FLASH_OB_Unlock+0x34>)
 800dc86:	60da      	str	r2, [r3, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800dc88:	2300      	movs	r3, #0
 800dc8a:	e000      	b.n	800dc8e <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800dc8c:	2301      	movs	r3, #1
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	46bd      	mov	sp, r7
 800dc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc96:	4770      	bx	lr
 800dc98:	40022000 	.word	0x40022000
 800dc9c:	08192a3b 	.word	0x08192a3b
 800dca0:	4c5d6e7f 	.word	0x4c5d6e7f

0800dca4 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800dca4:	b480      	push	{r7}
 800dca6:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 800dca8:	4b05      	ldr	r3, [pc, #20]	@ (800dcc0 <HAL_FLASH_OB_Lock+0x1c>)
 800dcaa:	695b      	ldr	r3, [r3, #20]
 800dcac:	4a04      	ldr	r2, [pc, #16]	@ (800dcc0 <HAL_FLASH_OB_Lock+0x1c>)
 800dcae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dcb2:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800dcb4:	2300      	movs	r3, #0
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbe:	4770      	bx	lr
 800dcc0:	40022000 	.word	0x40022000

0800dcc4 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 800dcc8:	4b06      	ldr	r3, [pc, #24]	@ (800dce4 <HAL_FLASH_OB_Launch+0x20>)
 800dcca:	695b      	ldr	r3, [r3, #20]
 800dccc:	4a05      	ldr	r2, [pc, #20]	@ (800dce4 <HAL_FLASH_OB_Launch+0x20>)
 800dcce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800dcd2:	6153      	str	r3, [r2, #20]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 800dcd4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800dcd8:	f000 f806 	bl	800dce8 <FLASH_WaitForLastOperation>
 800dcdc:	4603      	mov	r3, r0
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	40022000 	.word	0x40022000

0800dce8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800dcf0:	f7fd fdae 	bl	800b850 <HAL_GetTick>
 800dcf4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800dcf6:	e00d      	b.n	800dd14 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcfe:	d009      	beq.n	800dd14 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800dd00:	f7fd fda6 	bl	800b850 <HAL_GetTick>
 800dd04:	4602      	mov	r2, r0
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	1ad3      	subs	r3, r2, r3
 800dd0a:	687a      	ldr	r2, [r7, #4]
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	d801      	bhi.n	800dd14 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800dd10:	2303      	movs	r3, #3
 800dd12:	e036      	b.n	800dd82 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800dd14:	4b1d      	ldr	r3, [pc, #116]	@ (800dd8c <FLASH_WaitForLastOperation+0xa4>)
 800dd16:	691b      	ldr	r3, [r3, #16]
 800dd18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d1eb      	bne.n	800dcf8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800dd20:	4b1a      	ldr	r3, [pc, #104]	@ (800dd8c <FLASH_WaitForLastOperation+0xa4>)
 800dd22:	691a      	ldr	r2, [r3, #16]
 800dd24:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800dd28:	4013      	ands	r3, r2
 800dd2a:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d01d      	beq.n	800dd6e <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800dd32:	4b17      	ldr	r3, [pc, #92]	@ (800dd90 <FLASH_WaitForLastOperation+0xa8>)
 800dd34:	685a      	ldr	r2, [r3, #4]
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	4a15      	ldr	r2, [pc, #84]	@ (800dd90 <FLASH_WaitForLastOperation+0xa8>)
 800dd3c:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd44:	d307      	bcc.n	800dd56 <FLASH_WaitForLastOperation+0x6e>
 800dd46:	4b11      	ldr	r3, [pc, #68]	@ (800dd8c <FLASH_WaitForLastOperation+0xa4>)
 800dd48:	699a      	ldr	r2, [r3, #24]
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800dd50:	490e      	ldr	r1, [pc, #56]	@ (800dd8c <FLASH_WaitForLastOperation+0xa4>)
 800dd52:	4313      	orrs	r3, r2
 800dd54:	618b      	str	r3, [r1, #24]
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d004      	beq.n	800dd6a <FLASH_WaitForLastOperation+0x82>
 800dd60:	4a0a      	ldr	r2, [pc, #40]	@ (800dd8c <FLASH_WaitForLastOperation+0xa4>)
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800dd68:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	e009      	b.n	800dd82 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800dd6e:	4b07      	ldr	r3, [pc, #28]	@ (800dd8c <FLASH_WaitForLastOperation+0xa4>)
 800dd70:	691b      	ldr	r3, [r3, #16]
 800dd72:	f003 0301 	and.w	r3, r3, #1
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d002      	beq.n	800dd80 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800dd7a:	4b04      	ldr	r3, [pc, #16]	@ (800dd8c <FLASH_WaitForLastOperation+0xa4>)
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800dd80:	2300      	movs	r3, #0
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3710      	adds	r7, #16
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}
 800dd8a:	bf00      	nop
 800dd8c:	40022000 	.word	0x40022000
 800dd90:	20000014 	.word	0x20000014

0800dd94 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800dd94:	b480      	push	{r7}
 800dd96:	b085      	sub	sp, #20
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	60f8      	str	r0, [r7, #12]
 800dd9c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800dda0:	4b0e      	ldr	r3, [pc, #56]	@ (800dddc <FLASH_Program_DoubleWord+0x48>)
 800dda2:	695b      	ldr	r3, [r3, #20]
 800dda4:	4a0d      	ldr	r2, [pc, #52]	@ (800dddc <FLASH_Program_DoubleWord+0x48>)
 800dda6:	f043 0301 	orr.w	r3, r3, #1
 800ddaa:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	683a      	ldr	r2, [r7, #0]
 800ddb0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800ddb2:	f3bf 8f6f 	isb	sy
}
 800ddb6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800ddb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ddbc:	f04f 0200 	mov.w	r2, #0
 800ddc0:	f04f 0300 	mov.w	r3, #0
 800ddc4:	000a      	movs	r2, r1
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	68f9      	ldr	r1, [r7, #12]
 800ddca:	3104      	adds	r1, #4
 800ddcc:	4613      	mov	r3, r2
 800ddce:	600b      	str	r3, [r1, #0]
}
 800ddd0:	bf00      	nop
 800ddd2:	3714      	adds	r7, #20
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddda:	4770      	bx	lr
 800dddc:	40022000 	.word	0x40022000

0800dde0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800dde0:	b480      	push	{r7}
 800dde2:	b089      	sub	sp, #36	@ 0x24
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800ddea:	2340      	movs	r3, #64	@ 0x40
 800ddec:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800ddf6:	4b14      	ldr	r3, [pc, #80]	@ (800de48 <FLASH_Program_Fast+0x68>)
 800ddf8:	695b      	ldr	r3, [r3, #20]
 800ddfa:	4a13      	ldr	r2, [pc, #76]	@ (800de48 <FLASH_Program_Fast+0x68>)
 800ddfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800de00:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de02:	f3ef 8310 	mrs	r3, PRIMASK
 800de06:	60fb      	str	r3, [r7, #12]
  return(result);
 800de08:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800de0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800de0c:	b672      	cpsid	i
}
 800de0e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	681a      	ldr	r2, [r3, #0]
 800de14:	69bb      	ldr	r3, [r7, #24]
 800de16:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800de18:	69bb      	ldr	r3, [r7, #24]
 800de1a:	3304      	adds	r3, #4
 800de1c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	3304      	adds	r3, #4
 800de22:	617b      	str	r3, [r7, #20]
    row_index--;
 800de24:	7ffb      	ldrb	r3, [r7, #31]
 800de26:	3b01      	subs	r3, #1
 800de28:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800de2a:	7ffb      	ldrb	r3, [r7, #31]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d1ef      	bne.n	800de10 <FLASH_Program_Fast+0x30>
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	f383 8810 	msr	PRIMASK, r3
}
 800de3a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800de3c:	bf00      	nop
 800de3e:	3724      	adds	r7, #36	@ 0x24
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr
 800de48:	40022000 	.word	0x40022000

0800de4c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b084      	sub	sp, #16
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800de56:	4b49      	ldr	r3, [pc, #292]	@ (800df7c <HAL_FLASHEx_Erase+0x130>)
 800de58:	781b      	ldrb	r3, [r3, #0]
 800de5a:	2b01      	cmp	r3, #1
 800de5c:	d101      	bne.n	800de62 <HAL_FLASHEx_Erase+0x16>
 800de5e:	2302      	movs	r3, #2
 800de60:	e087      	b.n	800df72 <HAL_FLASHEx_Erase+0x126>
 800de62:	4b46      	ldr	r3, [pc, #280]	@ (800df7c <HAL_FLASHEx_Erase+0x130>)
 800de64:	2201      	movs	r2, #1
 800de66:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800de68:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800de6c:	f7ff ff3c 	bl	800dce8 <FLASH_WaitForLastOperation>
 800de70:	4603      	mov	r3, r0
 800de72:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800de74:	7bfb      	ldrb	r3, [r7, #15]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d177      	bne.n	800df6a <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800de7a:	4b40      	ldr	r3, [pc, #256]	@ (800df7c <HAL_FLASHEx_Erase+0x130>)
 800de7c:	2200      	movs	r2, #0
 800de7e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800de80:	4b3f      	ldr	r3, [pc, #252]	@ (800df80 <HAL_FLASHEx_Erase+0x134>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d013      	beq.n	800deb4 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800de8c:	4b3c      	ldr	r3, [pc, #240]	@ (800df80 <HAL_FLASHEx_Erase+0x134>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800de94:	2b00      	cmp	r3, #0
 800de96:	d009      	beq.n	800deac <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800de98:	4b39      	ldr	r3, [pc, #228]	@ (800df80 <HAL_FLASHEx_Erase+0x134>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	4a38      	ldr	r2, [pc, #224]	@ (800df80 <HAL_FLASHEx_Erase+0x134>)
 800de9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dea2:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800dea4:	4b35      	ldr	r3, [pc, #212]	@ (800df7c <HAL_FLASHEx_Erase+0x130>)
 800dea6:	2203      	movs	r2, #3
 800dea8:	771a      	strb	r2, [r3, #28]
 800deaa:	e016      	b.n	800deda <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800deac:	4b33      	ldr	r3, [pc, #204]	@ (800df7c <HAL_FLASHEx_Erase+0x130>)
 800deae:	2201      	movs	r2, #1
 800deb0:	771a      	strb	r2, [r3, #28]
 800deb2:	e012      	b.n	800deda <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800deb4:	4b32      	ldr	r3, [pc, #200]	@ (800df80 <HAL_FLASHEx_Erase+0x134>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800debc:	2b00      	cmp	r3, #0
 800debe:	d009      	beq.n	800ded4 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800dec0:	4b2f      	ldr	r3, [pc, #188]	@ (800df80 <HAL_FLASHEx_Erase+0x134>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	4a2e      	ldr	r2, [pc, #184]	@ (800df80 <HAL_FLASHEx_Erase+0x134>)
 800dec6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800deca:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800decc:	4b2b      	ldr	r3, [pc, #172]	@ (800df7c <HAL_FLASHEx_Erase+0x130>)
 800dece:	2202      	movs	r2, #2
 800ded0:	771a      	strb	r2, [r3, #28]
 800ded2:	e002      	b.n	800deda <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800ded4:	4b29      	ldr	r3, [pc, #164]	@ (800df7c <HAL_FLASHEx_Erase+0x130>)
 800ded6:	2200      	movs	r2, #0
 800ded8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	2b01      	cmp	r3, #1
 800dee0:	d113      	bne.n	800df0a <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	685b      	ldr	r3, [r3, #4]
 800dee6:	4618      	mov	r0, r3
 800dee8:	f000 f908 	bl	800e0fc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800deec:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800def0:	f7ff fefa 	bl	800dce8 <FLASH_WaitForLastOperation>
 800def4:	4603      	mov	r3, r0
 800def6:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800def8:	4b21      	ldr	r3, [pc, #132]	@ (800df80 <HAL_FLASHEx_Erase+0x134>)
 800defa:	695b      	ldr	r3, [r3, #20]
 800defc:	4a20      	ldr	r2, [pc, #128]	@ (800df80 <HAL_FLASHEx_Erase+0x134>)
 800defe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800df02:	f023 0304 	bic.w	r3, r3, #4
 800df06:	6153      	str	r3, [r2, #20]
 800df08:	e02d      	b.n	800df66 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	f04f 32ff 	mov.w	r2, #4294967295
 800df10:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	689b      	ldr	r3, [r3, #8]
 800df16:	60bb      	str	r3, [r7, #8]
 800df18:	e01d      	b.n	800df56 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	685b      	ldr	r3, [r3, #4]
 800df1e:	4619      	mov	r1, r3
 800df20:	68b8      	ldr	r0, [r7, #8]
 800df22:	f000 f913 	bl	800e14c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800df26:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800df2a:	f7ff fedd 	bl	800dce8 <FLASH_WaitForLastOperation>
 800df2e:	4603      	mov	r3, r0
 800df30:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800df32:	4b13      	ldr	r3, [pc, #76]	@ (800df80 <HAL_FLASHEx_Erase+0x134>)
 800df34:	695b      	ldr	r3, [r3, #20]
 800df36:	4a12      	ldr	r2, [pc, #72]	@ (800df80 <HAL_FLASHEx_Erase+0x134>)
 800df38:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800df3c:	f023 0302 	bic.w	r3, r3, #2
 800df40:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800df42:	7bfb      	ldrb	r3, [r7, #15]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d003      	beq.n	800df50 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	68ba      	ldr	r2, [r7, #8]
 800df4c:	601a      	str	r2, [r3, #0]
          break;
 800df4e:	e00a      	b.n	800df66 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	3301      	adds	r3, #1
 800df54:	60bb      	str	r3, [r7, #8]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	689a      	ldr	r2, [r3, #8]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	68db      	ldr	r3, [r3, #12]
 800df5e:	4413      	add	r3, r2
 800df60:	68ba      	ldr	r2, [r7, #8]
 800df62:	429a      	cmp	r2, r3
 800df64:	d3d9      	bcc.n	800df1a <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800df66:	f000 f927 	bl	800e1b8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800df6a:	4b04      	ldr	r3, [pc, #16]	@ (800df7c <HAL_FLASHEx_Erase+0x130>)
 800df6c:	2200      	movs	r2, #0
 800df6e:	701a      	strb	r2, [r3, #0]

  return status;
 800df70:	7bfb      	ldrb	r3, [r7, #15]
}
 800df72:	4618      	mov	r0, r3
 800df74:	3710      	adds	r7, #16
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
 800df7a:	bf00      	nop
 800df7c:	20000014 	.word	0x20000014
 800df80:	40022000 	.word	0x40022000

0800df84 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b084      	sub	sp, #16
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800df8c:	2300      	movs	r3, #0
 800df8e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800df90:	4b32      	ldr	r3, [pc, #200]	@ (800e05c <HAL_FLASHEx_OBProgram+0xd8>)
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	2b01      	cmp	r3, #1
 800df96:	d101      	bne.n	800df9c <HAL_FLASHEx_OBProgram+0x18>
 800df98:	2302      	movs	r3, #2
 800df9a:	e05a      	b.n	800e052 <HAL_FLASHEx_OBProgram+0xce>
 800df9c:	4b2f      	ldr	r3, [pc, #188]	@ (800e05c <HAL_FLASHEx_OBProgram+0xd8>)
 800df9e:	2201      	movs	r2, #1
 800dfa0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800dfa2:	4b2e      	ldr	r3, [pc, #184]	@ (800e05c <HAL_FLASHEx_OBProgram+0xd8>)
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	f003 0301 	and.w	r3, r3, #1
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d00d      	beq.n	800dfd0 <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if(FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6858      	ldr	r0, [r3, #4]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6899      	ldr	r1, [r3, #8]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	68db      	ldr	r3, [r3, #12]
 800dfc0:	461a      	mov	r2, r3
 800dfc2:	f000 f943 	bl	800e24c <FLASH_OB_WRPConfig>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d001      	beq.n	800dfd0 <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 800dfcc:	2301      	movs	r3, #1
 800dfce:	73fb      	strb	r3, [r7, #15]
    }

  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f003 0302 	and.w	r3, r3, #2
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d009      	beq.n	800dff0 <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	691b      	ldr	r3, [r3, #16]
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f000 f997 	bl	800e314 <FLASH_OB_RDPConfig>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d001      	beq.n	800dff0 <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 800dfec:	2301      	movs	r3, #1
 800dfee:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* User Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	f003 0304 	and.w	r3, r3, #4
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d00c      	beq.n	800e016 <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	695a      	ldr	r2, [r3, #20]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	699b      	ldr	r3, [r3, #24]
 800e004:	4619      	mov	r1, r3
 800e006:	4610      	mov	r0, r2
 800e008:	f000 f9b2 	bl	800e370 <FLASH_OB_UserConfig>
 800e00c:	4603      	mov	r3, r0
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d001      	beq.n	800e016 <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 800e012:	2301      	movs	r3, #1
 800e014:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* PCROP Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f003 0308 	and.w	r3, r3, #8
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d013      	beq.n	800e04a <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6a1a      	ldr	r2, [r3, #32]
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d00d      	beq.n	800e04a <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	69d8      	ldr	r0, [r3, #28]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6a19      	ldr	r1, [r3, #32]
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e03a:	461a      	mov	r2, r3
 800e03c:	f000 fa90 	bl	800e560 <FLASH_OB_PCROPConfig>
 800e040:	4603      	mov	r3, r0
 800e042:	2b00      	cmp	r3, #0
 800e044:	d001      	beq.n	800e04a <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 800e046:	2301      	movs	r3, #1
 800e048:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e04a:	4b04      	ldr	r3, [pc, #16]	@ (800e05c <HAL_FLASHEx_OBProgram+0xd8>)
 800e04c:	2200      	movs	r2, #0
 800e04e:	701a      	strb	r2, [r3, #0]

  return status;
 800e050:	7bfb      	ldrb	r3, [r7, #15]
}
 800e052:	4618      	mov	r0, r3
 800e054:	3710      	adds	r7, #16
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
 800e05a:	bf00      	nop
 800e05c:	20000014 	.word	0x20000014

0800e060 <HAL_FLASHEx_OBGetConfig>:
  *         which area is requested for the WRP and PCROP, else no information will be returned
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b082      	sub	sp, #8
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2206      	movs	r2, #6
 800e06c:	601a      	str	r2, [r3, #0]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d00b      	beq.n	800e08e <HAL_FLASHEx_OBGetConfig+0x2e>
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	685b      	ldr	r3, [r3, #4]
 800e07a:	2b01      	cmp	r3, #1
 800e07c:	d007      	beq.n	800e08e <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	685b      	ldr	r3, [r3, #4]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800e082:	2b02      	cmp	r3, #2
 800e084:	d003      	beq.n	800e08e <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	685b      	ldr	r3, [r3, #4]
 800e08a:	2b04      	cmp	r3, #4
 800e08c:	d10f      	bne.n	800e0ae <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	f043 0201 	orr.w	r2, r3, #1
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6858      	ldr	r0, [r3, #4]
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f103 0108 	add.w	r1, r3, #8
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	330c      	adds	r3, #12
 800e0a8:	461a      	mov	r2, r3
 800e0aa:	f000 fb05 	bl	800e6b8 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800e0ae:	f000 fb4d 	bl	800e74c <FLASH_OB_GetRDP>
 800e0b2:	4602      	mov	r2, r0
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800e0b8:	f000 fb62 	bl	800e780 <FLASH_OB_GetUser>
 800e0bc:	4602      	mov	r2, r0
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	619a      	str	r2, [r3, #24]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	69db      	ldr	r3, [r3, #28]
 800e0c6:	2b01      	cmp	r3, #1
 800e0c8:	d003      	beq.n	800e0d2 <HAL_FLASHEx_OBGetConfig+0x72>
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	69db      	ldr	r3, [r3, #28]
 800e0ce:	2b02      	cmp	r3, #2
 800e0d0:	d110      	bne.n	800e0f4 <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if(pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	f043 0208 	orr.w	r2, r3, #8
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f103 001c 	add.w	r0, r3, #28
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f103 0120 	add.w	r1, r3, #32
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	3324      	adds	r3, #36	@ 0x24
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	f000 fb5a 	bl	800e7a8 <FLASH_OB_GetPCROP>
  }
}
 800e0f4:	bf00      	nop
 800e0f6:	3708      	adds	r7, #8
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f003 0301 	and.w	r3, r3, #1
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d005      	beq.n	800e11a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800e10e:	4b0e      	ldr	r3, [pc, #56]	@ (800e148 <FLASH_MassErase+0x4c>)
 800e110:	695b      	ldr	r3, [r3, #20]
 800e112:	4a0d      	ldr	r2, [pc, #52]	@ (800e148 <FLASH_MassErase+0x4c>)
 800e114:	f043 0304 	orr.w	r3, r3, #4
 800e118:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f003 0302 	and.w	r3, r3, #2
 800e120:	2b00      	cmp	r3, #0
 800e122:	d005      	beq.n	800e130 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800e124:	4b08      	ldr	r3, [pc, #32]	@ (800e148 <FLASH_MassErase+0x4c>)
 800e126:	695b      	ldr	r3, [r3, #20]
 800e128:	4a07      	ldr	r2, [pc, #28]	@ (800e148 <FLASH_MassErase+0x4c>)
 800e12a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e12e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800e130:	4b05      	ldr	r3, [pc, #20]	@ (800e148 <FLASH_MassErase+0x4c>)
 800e132:	695b      	ldr	r3, [r3, #20]
 800e134:	4a04      	ldr	r2, [pc, #16]	@ (800e148 <FLASH_MassErase+0x4c>)
 800e136:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e13a:	6153      	str	r3, [r2, #20]
}
 800e13c:	bf00      	nop
 800e13e:	370c      	adds	r7, #12
 800e140:	46bd      	mov	sp, r7
 800e142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e146:	4770      	bx	lr
 800e148:	40022000 	.word	0x40022000

0800e14c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b083      	sub	sp, #12
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	f003 0301 	and.w	r3, r3, #1
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d006      	beq.n	800e16e <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800e160:	4b14      	ldr	r3, [pc, #80]	@ (800e1b4 <FLASH_PageErase+0x68>)
 800e162:	695b      	ldr	r3, [r3, #20]
 800e164:	4a13      	ldr	r2, [pc, #76]	@ (800e1b4 <FLASH_PageErase+0x68>)
 800e166:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e16a:	6153      	str	r3, [r2, #20]
 800e16c:	e005      	b.n	800e17a <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800e16e:	4b11      	ldr	r3, [pc, #68]	@ (800e1b4 <FLASH_PageErase+0x68>)
 800e170:	695b      	ldr	r3, [r3, #20]
 800e172:	4a10      	ldr	r2, [pc, #64]	@ (800e1b4 <FLASH_PageErase+0x68>)
 800e174:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e178:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800e17a:	4b0e      	ldr	r3, [pc, #56]	@ (800e1b4 <FLASH_PageErase+0x68>)
 800e17c:	695b      	ldr	r3, [r3, #20]
 800e17e:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	00db      	lsls	r3, r3, #3
 800e186:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 800e18a:	490a      	ldr	r1, [pc, #40]	@ (800e1b4 <FLASH_PageErase+0x68>)
 800e18c:	4313      	orrs	r3, r2
 800e18e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800e190:	4b08      	ldr	r3, [pc, #32]	@ (800e1b4 <FLASH_PageErase+0x68>)
 800e192:	695b      	ldr	r3, [r3, #20]
 800e194:	4a07      	ldr	r2, [pc, #28]	@ (800e1b4 <FLASH_PageErase+0x68>)
 800e196:	f043 0302 	orr.w	r3, r3, #2
 800e19a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800e19c:	4b05      	ldr	r3, [pc, #20]	@ (800e1b4 <FLASH_PageErase+0x68>)
 800e19e:	695b      	ldr	r3, [r3, #20]
 800e1a0:	4a04      	ldr	r2, [pc, #16]	@ (800e1b4 <FLASH_PageErase+0x68>)
 800e1a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e1a6:	6153      	str	r3, [r2, #20]
}
 800e1a8:	bf00      	nop
 800e1aa:	370c      	adds	r7, #12
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b2:	4770      	bx	lr
 800e1b4:	40022000 	.word	0x40022000

0800e1b8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b083      	sub	sp, #12
 800e1bc:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800e1be:	4b21      	ldr	r3, [pc, #132]	@ (800e244 <FLASH_FlushCaches+0x8c>)
 800e1c0:	7f1b      	ldrb	r3, [r3, #28]
 800e1c2:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800e1c4:	79fb      	ldrb	r3, [r7, #7]
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	d002      	beq.n	800e1d0 <FLASH_FlushCaches+0x18>
 800e1ca:	79fb      	ldrb	r3, [r7, #7]
 800e1cc:	2b03      	cmp	r3, #3
 800e1ce:	d117      	bne.n	800e200 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800e1d0:	4b1d      	ldr	r3, [pc, #116]	@ (800e248 <FLASH_FlushCaches+0x90>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	4a1c      	ldr	r2, [pc, #112]	@ (800e248 <FLASH_FlushCaches+0x90>)
 800e1d6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e1da:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800e1dc:	4b1a      	ldr	r3, [pc, #104]	@ (800e248 <FLASH_FlushCaches+0x90>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	4a19      	ldr	r2, [pc, #100]	@ (800e248 <FLASH_FlushCaches+0x90>)
 800e1e2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e1e6:	6013      	str	r3, [r2, #0]
 800e1e8:	4b17      	ldr	r3, [pc, #92]	@ (800e248 <FLASH_FlushCaches+0x90>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	4a16      	ldr	r2, [pc, #88]	@ (800e248 <FLASH_FlushCaches+0x90>)
 800e1ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e1f2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e1f4:	4b14      	ldr	r3, [pc, #80]	@ (800e248 <FLASH_FlushCaches+0x90>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	4a13      	ldr	r2, [pc, #76]	@ (800e248 <FLASH_FlushCaches+0x90>)
 800e1fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e1fe:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800e200:	79fb      	ldrb	r3, [r7, #7]
 800e202:	2b02      	cmp	r3, #2
 800e204:	d002      	beq.n	800e20c <FLASH_FlushCaches+0x54>
 800e206:	79fb      	ldrb	r3, [r7, #7]
 800e208:	2b03      	cmp	r3, #3
 800e20a:	d111      	bne.n	800e230 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800e20c:	4b0e      	ldr	r3, [pc, #56]	@ (800e248 <FLASH_FlushCaches+0x90>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	4a0d      	ldr	r2, [pc, #52]	@ (800e248 <FLASH_FlushCaches+0x90>)
 800e212:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e216:	6013      	str	r3, [r2, #0]
 800e218:	4b0b      	ldr	r3, [pc, #44]	@ (800e248 <FLASH_FlushCaches+0x90>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4a0a      	ldr	r2, [pc, #40]	@ (800e248 <FLASH_FlushCaches+0x90>)
 800e21e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e222:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800e224:	4b08      	ldr	r3, [pc, #32]	@ (800e248 <FLASH_FlushCaches+0x90>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4a07      	ldr	r2, [pc, #28]	@ (800e248 <FLASH_FlushCaches+0x90>)
 800e22a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e22e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800e230:	4b04      	ldr	r3, [pc, #16]	@ (800e244 <FLASH_FlushCaches+0x8c>)
 800e232:	2200      	movs	r2, #0
 800e234:	771a      	strb	r2, [r3, #28]
}
 800e236:	bf00      	nop
 800e238:	370c      	adds	r7, #12
 800e23a:	46bd      	mov	sp, r7
 800e23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e240:	4770      	bx	lr
 800e242:	bf00      	nop
 800e244:	20000014 	.word	0x20000014
 800e248:	40022000 	.word	0x40022000

0800e24c <FLASH_OB_WRPConfig>:
  *          This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1)
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b086      	sub	sp, #24
 800e250:	af00      	add	r7, sp, #0
 800e252:	60f8      	str	r0, [r7, #12]
 800e254:	60b9      	str	r1, [r7, #8]
 800e256:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e258:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e25c:	f7ff fd44 	bl	800dce8 <FLASH_WaitForLastOperation>
 800e260:	4603      	mov	r3, r0
 800e262:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800e264:	7dfb      	ldrb	r3, [r7, #23]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d14c      	bne.n	800e304 <FLASH_OB_WRPConfig+0xb8>
  {
    /* Configure the write protected area */
    if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d10b      	bne.n	800e288 <FLASH_OB_WRPConfig+0x3c>
    {
      MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
 800e270:	4b27      	ldr	r3, [pc, #156]	@ (800e310 <FLASH_OB_WRPConfig+0xc4>)
 800e272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e274:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	0419      	lsls	r1, r3, #16
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	430b      	orrs	r3, r1
 800e280:	4923      	ldr	r1, [pc, #140]	@ (800e310 <FLASH_OB_WRPConfig+0xc4>)
 800e282:	4313      	orrs	r3, r2
 800e284:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800e286:	e02b      	b.n	800e2e0 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2b01      	cmp	r3, #1
 800e28c:	d10b      	bne.n	800e2a6 <FLASH_OB_WRPConfig+0x5a>
    {
      MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
 800e28e:	4b20      	ldr	r3, [pc, #128]	@ (800e310 <FLASH_OB_WRPConfig+0xc4>)
 800e290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e292:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	0419      	lsls	r1, r3, #16
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	430b      	orrs	r3, r1
 800e29e:	491c      	ldr	r1, [pc, #112]	@ (800e310 <FLASH_OB_WRPConfig+0xc4>)
 800e2a0:	4313      	orrs	r3, r2
 800e2a2:	630b      	str	r3, [r1, #48]	@ 0x30
 800e2a4:	e01c      	b.n	800e2e0 <FLASH_OB_WRPConfig+0x94>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	2b02      	cmp	r3, #2
 800e2aa:	d10b      	bne.n	800e2c4 <FLASH_OB_WRPConfig+0x78>
    {
      MODIFY_REG(FLASH->WRP2AR, (FLASH_WRP2AR_WRP2A_STRT | FLASH_WRP2AR_WRP2A_END),
 800e2ac:	4b18      	ldr	r3, [pc, #96]	@ (800e310 <FLASH_OB_WRPConfig+0xc4>)
 800e2ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e2b0:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	0419      	lsls	r1, r3, #16
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	430b      	orrs	r3, r1
 800e2bc:	4914      	ldr	r1, [pc, #80]	@ (800e310 <FLASH_OB_WRPConfig+0xc4>)
 800e2be:	4313      	orrs	r3, r2
 800e2c0:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800e2c2:	e00d      	b.n	800e2e0 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	2b04      	cmp	r3, #4
 800e2c8:	d10a      	bne.n	800e2e0 <FLASH_OB_WRPConfig+0x94>
    {
      MODIFY_REG(FLASH->WRP2BR, (FLASH_WRP2BR_WRP2B_STRT | FLASH_WRP2BR_WRP2B_END),
 800e2ca:	4b11      	ldr	r3, [pc, #68]	@ (800e310 <FLASH_OB_WRPConfig+0xc4>)
 800e2cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2ce:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	0419      	lsls	r1, r3, #16
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	430b      	orrs	r3, r1
 800e2da:	490d      	ldr	r1, [pc, #52]	@ (800e310 <FLASH_OB_WRPConfig+0xc4>)
 800e2dc:	4313      	orrs	r3, r2
 800e2de:	650b      	str	r3, [r1, #80]	@ 0x50
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800e2e0:	4b0b      	ldr	r3, [pc, #44]	@ (800e310 <FLASH_OB_WRPConfig+0xc4>)
 800e2e2:	695b      	ldr	r3, [r3, #20]
 800e2e4:	4a0a      	ldr	r2, [pc, #40]	@ (800e310 <FLASH_OB_WRPConfig+0xc4>)
 800e2e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e2ea:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e2ec:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e2f0:	f7ff fcfa 	bl	800dce8 <FLASH_WaitForLastOperation>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	75fb      	strb	r3, [r7, #23]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800e2f8:	4b05      	ldr	r3, [pc, #20]	@ (800e310 <FLASH_OB_WRPConfig+0xc4>)
 800e2fa:	695b      	ldr	r3, [r3, #20]
 800e2fc:	4a04      	ldr	r2, [pc, #16]	@ (800e310 <FLASH_OB_WRPConfig+0xc4>)
 800e2fe:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e302:	6153      	str	r3, [r2, #20]
  }

  return status;
 800e304:	7dfb      	ldrb	r3, [r7, #23]
}
 800e306:	4618      	mov	r0, r3
 800e308:	3718      	adds	r7, #24
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
 800e30e:	bf00      	nop
 800e310:	40022000 	.word	0x40022000

0800e314 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b084      	sub	sp, #16
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e31c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e320:	f7ff fce2 	bl	800dce8 <FLASH_WaitForLastOperation>
 800e324:	4603      	mov	r3, r0
 800e326:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800e328:	7bfb      	ldrb	r3, [r7, #15]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d119      	bne.n	800e362 <FLASH_OB_RDPConfig+0x4e>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 800e32e:	4b0f      	ldr	r3, [pc, #60]	@ (800e36c <FLASH_OB_RDPConfig+0x58>)
 800e330:	6a1b      	ldr	r3, [r3, #32]
 800e332:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e336:	490d      	ldr	r1, [pc, #52]	@ (800e36c <FLASH_OB_RDPConfig+0x58>)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	4313      	orrs	r3, r2
 800e33c:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800e33e:	4b0b      	ldr	r3, [pc, #44]	@ (800e36c <FLASH_OB_RDPConfig+0x58>)
 800e340:	695b      	ldr	r3, [r3, #20]
 800e342:	4a0a      	ldr	r2, [pc, #40]	@ (800e36c <FLASH_OB_RDPConfig+0x58>)
 800e344:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e348:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e34a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e34e:	f7ff fccb 	bl	800dce8 <FLASH_WaitForLastOperation>
 800e352:	4603      	mov	r3, r0
 800e354:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800e356:	4b05      	ldr	r3, [pc, #20]	@ (800e36c <FLASH_OB_RDPConfig+0x58>)
 800e358:	695b      	ldr	r3, [r3, #20]
 800e35a:	4a04      	ldr	r2, [pc, #16]	@ (800e36c <FLASH_OB_RDPConfig+0x58>)
 800e35c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e360:	6153      	str	r3, [r2, #20]
  }

  return status;
 800e362:	7bfb      	ldrb	r3, [r7, #15]
}
 800e364:	4618      	mov	r0, r3
 800e366:	3710      	adds	r7, #16
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}
 800e36c:	40022000 	.word	0x40022000

0800e370 <FLASH_OB_UserConfig>:
  *         DUALBANK(Bit21), nBOOT1(Bit23), SRAM2_PE(Bit24) and SRAM2_RST(Bit25).
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b086      	sub	sp, #24
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 800e37a:	2300      	movs	r3, #0
 800e37c:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 800e37e:	2300      	movs	r3, #0
 800e380:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e382:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e386:	f7ff fcaf 	bl	800dce8 <FLASH_WaitForLastOperation>
 800e38a:	4603      	mov	r3, r0
 800e38c:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800e38e:	7bfb      	ldrb	r3, [r7, #15]
 800e390:	2b00      	cmp	r3, #0
 800e392:	f040 80de 	bne.w	800e552 <FLASH_OB_UserConfig+0x1e2>
  {
    if((UserType & OB_USER_BOR_LEV) != 0U)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f003 0301 	and.w	r3, r3, #1
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d009      	beq.n	800e3b4 <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e3a6:	697a      	ldr	r2, [r7, #20]
 800e3a8:	4313      	orrs	r3, r2
 800e3aa:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800e3b2:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STOP) != 0U)
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f003 0302 	and.w	r3, r3, #2
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d009      	beq.n	800e3d2 <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e3c4:	697a      	ldr	r2, [r7, #20]
 800e3c6:	4313      	orrs	r3, r2
 800e3c8:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e3d0:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STDBY) != 0U)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f003 0304 	and.w	r3, r3, #4
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d009      	beq.n	800e3f0 <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e3e2:	697a      	ldr	r2, [r7, #20]
 800e3e4:	4313      	orrs	r3, r2
 800e3e6:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800e3ee:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_SHDW) != 0U)
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d009      	beq.n	800e40e <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e400:	697a      	ldr	r2, [r7, #20]
 800e402:	4313      	orrs	r3, r2
 800e404:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 800e406:	693b      	ldr	r3, [r7, #16]
 800e408:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e40c:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_SW) != 0U)
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	f003 0308 	and.w	r3, r3, #8
 800e414:	2b00      	cmp	r3, #0
 800e416:	d009      	beq.n	800e42c <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e41e:	697a      	ldr	r2, [r7, #20]
 800e420:	4313      	orrs	r3, r2
 800e422:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e42a:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STOP) != 0U)
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f003 0310 	and.w	r3, r3, #16
 800e432:	2b00      	cmp	r3, #0
 800e434:	d009      	beq.n	800e44a <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e43c:	697a      	ldr	r2, [r7, #20]
 800e43e:	4313      	orrs	r3, r2
 800e440:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 800e442:	693b      	ldr	r3, [r7, #16]
 800e444:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e448:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STDBY) != 0U)
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f003 0320 	and.w	r3, r3, #32
 800e450:	2b00      	cmp	r3, #0
 800e452:	d009      	beq.n	800e468 <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e45a:	697a      	ldr	r2, [r7, #20]
 800e45c:	4313      	orrs	r3, r2
 800e45e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e466:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_WWDG_SW) != 0U)
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d009      	beq.n	800e486 <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e478:	697a      	ldr	r2, [r7, #20]
 800e47a:	4313      	orrs	r3, r2
 800e47c:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e484:	613b      	str	r3, [r7, #16]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_BFB2) != 0U)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d009      	beq.n	800e4a4 <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e496:	697a      	ldr	r2, [r7, #20]
 800e498:	4313      	orrs	r3, r2
 800e49a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 800e49c:	693b      	ldr	r3, [r7, #16]
 800e49e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e4a2:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_DUALBANK) != 0U)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d009      	beq.n	800e4c2 <FLASH_OB_UserConfig+0x152>
#else
      /* DUALBANK option byte should be modified */
      assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));

      /* Set value and mask for DUALBANK option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e4b4:	697a      	ldr	r2, [r7, #20]
 800e4b6:	4313      	orrs	r3, r2
 800e4b8:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_DUALBANK;
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e4c0:	613b      	str	r3, [r7, #16]
#endif
    }
#endif

    if((UserType & OB_USER_nBOOT1) != 0U)
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d009      	beq.n	800e4e0 <FLASH_OB_UserConfig+0x170>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e4d2:	697a      	ldr	r2, [r7, #20]
 800e4d4:	4313      	orrs	r3, r2
 800e4d6:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e4de:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_PE) != 0U)
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d009      	beq.n	800e4fe <FLASH_OB_UserConfig+0x18e>
    {
      /* SRAM2_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_PARITY(UserConfig & FLASH_OPTR_SRAM2_PE));

      /* Set value and mask for SRAM2_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_PE);
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e4f0:	697a      	ldr	r2, [r7, #20]
 800e4f2:	4313      	orrs	r3, r2
 800e4f4:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_PE;
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e4fc:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_RST) != 0U)
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e504:	2b00      	cmp	r3, #0
 800e506:	d009      	beq.n	800e51c <FLASH_OB_UserConfig+0x1ac>
    {
      /* SRAM2_RST option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));

      /* Set value and mask for SRAM2_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e50e:	697a      	ldr	r2, [r7, #20]
 800e510:	4313      	orrs	r3, r2
 800e512:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800e51a:	613b      	str	r3, [r7, #16]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
    }
#endif

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 800e51c:	4b0f      	ldr	r3, [pc, #60]	@ (800e55c <FLASH_OB_UserConfig+0x1ec>)
 800e51e:	6a1a      	ldr	r2, [r3, #32]
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	43db      	mvns	r3, r3
 800e524:	401a      	ands	r2, r3
 800e526:	490d      	ldr	r1, [pc, #52]	@ (800e55c <FLASH_OB_UserConfig+0x1ec>)
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	4313      	orrs	r3, r2
 800e52c:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800e52e:	4b0b      	ldr	r3, [pc, #44]	@ (800e55c <FLASH_OB_UserConfig+0x1ec>)
 800e530:	695b      	ldr	r3, [r3, #20]
 800e532:	4a0a      	ldr	r2, [pc, #40]	@ (800e55c <FLASH_OB_UserConfig+0x1ec>)
 800e534:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e538:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e53a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e53e:	f7ff fbd3 	bl	800dce8 <FLASH_WaitForLastOperation>
 800e542:	4603      	mov	r3, r0
 800e544:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800e546:	4b05      	ldr	r3, [pc, #20]	@ (800e55c <FLASH_OB_UserConfig+0x1ec>)
 800e548:	695b      	ldr	r3, [r3, #20]
 800e54a:	4a04      	ldr	r2, [pc, #16]	@ (800e55c <FLASH_OB_UserConfig+0x1ec>)
 800e54c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e550:	6153      	str	r3, [r2, #20]
  }

  return status;
 800e552:	7bfb      	ldrb	r3, [r7, #15]
}
 800e554:	4618      	mov	r0, r3
 800e556:	3718      	adds	r7, #24
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}
 800e55c:	40022000 	.word	0x40022000

0800e560 <FLASH_OB_PCROPConfig>:
  *          This parameter can be an address between PCROPStartAddr and end of the bank
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b088      	sub	sp, #32
 800e564:	af00      	add	r7, sp, #0
 800e566:	60f8      	str	r0, [r7, #12]
 800e568:	60b9      	str	r1, [r7, #8]
 800e56a:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e56c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e570:	f7ff fbba 	bl	800dce8 <FLASH_WaitForLastOperation>
 800e574:	4603      	mov	r3, r0
 800e576:	77fb      	strb	r3, [r7, #31]

  if(status == HAL_OK)
 800e578:	7ffb      	ldrb	r3, [r7, #31]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	f040 808c 	bne.w	800e698 <FLASH_OB_PCROPConfig+0x138>
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800e580:	4b48      	ldr	r3, [pc, #288]	@ (800e6a4 <FLASH_OB_PCROPConfig+0x144>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d115      	bne.n	800e5b8 <FLASH_OB_PCROPConfig+0x58>
    {
      bank1_addr = FLASH_BASE;
 800e58c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e590:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800e592:	4b45      	ldr	r3, [pc, #276]	@ (800e6a8 <FLASH_OB_PCROPConfig+0x148>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	b29b      	uxth	r3, r3
 800e598:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e59c:	4293      	cmp	r3, r2
 800e59e:	d008      	beq.n	800e5b2 <FLASH_OB_PCROPConfig+0x52>
 800e5a0:	4b41      	ldr	r3, [pc, #260]	@ (800e6a8 <FLASH_OB_PCROPConfig+0x148>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	029b      	lsls	r3, r3, #10
 800e5a6:	085a      	lsrs	r2, r3, #1
 800e5a8:	4b40      	ldr	r3, [pc, #256]	@ (800e6ac <FLASH_OB_PCROPConfig+0x14c>)
 800e5aa:	4013      	ands	r3, r2
 800e5ac:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800e5b0:	e000      	b.n	800e5b4 <FLASH_OB_PCROPConfig+0x54>
 800e5b2:	4b3f      	ldr	r3, [pc, #252]	@ (800e6b0 <FLASH_OB_PCROPConfig+0x150>)
 800e5b4:	617b      	str	r3, [r7, #20]
 800e5b6:	e014      	b.n	800e5e2 <FLASH_OB_PCROPConfig+0x82>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800e5b8:	4b3b      	ldr	r3, [pc, #236]	@ (800e6a8 <FLASH_OB_PCROPConfig+0x148>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	b29b      	uxth	r3, r3
 800e5be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d008      	beq.n	800e5d8 <FLASH_OB_PCROPConfig+0x78>
 800e5c6:	4b38      	ldr	r3, [pc, #224]	@ (800e6a8 <FLASH_OB_PCROPConfig+0x148>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	029b      	lsls	r3, r3, #10
 800e5cc:	085a      	lsrs	r2, r3, #1
 800e5ce:	4b37      	ldr	r3, [pc, #220]	@ (800e6ac <FLASH_OB_PCROPConfig+0x14c>)
 800e5d0:	4013      	ands	r3, r2
 800e5d2:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800e5d6:	e000      	b.n	800e5da <FLASH_OB_PCROPConfig+0x7a>
 800e5d8:	4b35      	ldr	r3, [pc, #212]	@ (800e6b0 <FLASH_OB_PCROPConfig+0x150>)
 800e5da:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 800e5dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e5e0:	617b      	str	r3, [r7, #20]
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	f003 0303 	and.w	r3, r3, #3
 800e5e8:	2b01      	cmp	r3, #1
 800e5ea:	d11a      	bne.n	800e622 <FLASH_OB_PCROPConfig+0xc2>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 800e5ec:	68ba      	ldr	r2, [r7, #8]
 800e5ee:	69bb      	ldr	r3, [r7, #24]
 800e5f0:	1ad3      	subs	r3, r2, r3
 800e5f2:	08db      	lsrs	r3, r3, #3
 800e5f4:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 800e5f6:	4b2f      	ldr	r3, [pc, #188]	@ (800e6b4 <FLASH_OB_PCROPConfig+0x154>)
 800e5f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5fa:	0c1b      	lsrs	r3, r3, #16
 800e5fc:	041b      	lsls	r3, r3, #16
 800e5fe:	492d      	ldr	r1, [pc, #180]	@ (800e6b4 <FLASH_OB_PCROPConfig+0x154>)
 800e600:	693a      	ldr	r2, [r7, #16]
 800e602:	4313      	orrs	r3, r2
 800e604:	624b      	str	r3, [r1, #36]	@ 0x24

        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 800e606:	687a      	ldr	r2, [r7, #4]
 800e608:	69bb      	ldr	r3, [r7, #24]
 800e60a:	1ad3      	subs	r3, r2, r3
 800e60c:	08db      	lsrs	r3, r3, #3
 800e60e:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 800e610:	4b28      	ldr	r3, [pc, #160]	@ (800e6b4 <FLASH_OB_PCROPConfig+0x154>)
 800e612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e614:	0c1b      	lsrs	r3, r3, #16
 800e616:	041b      	lsls	r3, r3, #16
 800e618:	4926      	ldr	r1, [pc, #152]	@ (800e6b4 <FLASH_OB_PCROPConfig+0x154>)
 800e61a:	693a      	ldr	r2, [r7, #16]
 800e61c:	4313      	orrs	r3, r2
 800e61e:	628b      	str	r3, [r1, #40]	@ 0x28
 800e620:	e01e      	b.n	800e660 <FLASH_OB_PCROPConfig+0x100>
      }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	f003 0303 	and.w	r3, r3, #3
 800e628:	2b02      	cmp	r3, #2
 800e62a:	d119      	bne.n	800e660 <FLASH_OB_PCROPConfig+0x100>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 800e62c:	68ba      	ldr	r2, [r7, #8]
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	1ad3      	subs	r3, r2, r3
 800e632:	08db      	lsrs	r3, r3, #3
 800e634:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 800e636:	4b1f      	ldr	r3, [pc, #124]	@ (800e6b4 <FLASH_OB_PCROPConfig+0x154>)
 800e638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e63a:	0c1b      	lsrs	r3, r3, #16
 800e63c:	041b      	lsls	r3, r3, #16
 800e63e:	491d      	ldr	r1, [pc, #116]	@ (800e6b4 <FLASH_OB_PCROPConfig+0x154>)
 800e640:	693a      	ldr	r2, [r7, #16]
 800e642:	4313      	orrs	r3, r2
 800e644:	644b      	str	r3, [r1, #68]	@ 0x44

        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 800e646:	687a      	ldr	r2, [r7, #4]
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	1ad3      	subs	r3, r2, r3
 800e64c:	08db      	lsrs	r3, r3, #3
 800e64e:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 800e650:	4b18      	ldr	r3, [pc, #96]	@ (800e6b4 <FLASH_OB_PCROPConfig+0x154>)
 800e652:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e654:	0c1b      	lsrs	r3, r3, #16
 800e656:	041b      	lsls	r3, r3, #16
 800e658:	4916      	ldr	r1, [pc, #88]	@ (800e6b4 <FLASH_OB_PCROPConfig+0x154>)
 800e65a:	693a      	ldr	r2, [r7, #16]
 800e65c:	4313      	orrs	r3, r2
 800e65e:	648b      	str	r3, [r1, #72]	@ 0x48
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 800e660:	4b14      	ldr	r3, [pc, #80]	@ (800e6b4 <FLASH_OB_PCROPConfig+0x154>)
 800e662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e664:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e66e:	4911      	ldr	r1, [pc, #68]	@ (800e6b4 <FLASH_OB_PCROPConfig+0x154>)
 800e670:	4313      	orrs	r3, r2
 800e672:	628b      	str	r3, [r1, #40]	@ 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800e674:	4b0f      	ldr	r3, [pc, #60]	@ (800e6b4 <FLASH_OB_PCROPConfig+0x154>)
 800e676:	695b      	ldr	r3, [r3, #20]
 800e678:	4a0e      	ldr	r2, [pc, #56]	@ (800e6b4 <FLASH_OB_PCROPConfig+0x154>)
 800e67a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e67e:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e680:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e684:	f7ff fb30 	bl	800dce8 <FLASH_WaitForLastOperation>
 800e688:	4603      	mov	r3, r0
 800e68a:	77fb      	strb	r3, [r7, #31]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800e68c:	4b09      	ldr	r3, [pc, #36]	@ (800e6b4 <FLASH_OB_PCROPConfig+0x154>)
 800e68e:	695b      	ldr	r3, [r3, #20]
 800e690:	4a08      	ldr	r2, [pc, #32]	@ (800e6b4 <FLASH_OB_PCROPConfig+0x154>)
 800e692:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e696:	6153      	str	r3, [r2, #20]
  }

  return status;
 800e698:	7ffb      	ldrb	r3, [r7, #31]
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3720      	adds	r7, #32
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	40010000 	.word	0x40010000
 800e6a8:	1fff75e0 	.word	0x1fff75e0
 800e6ac:	01fffe00 	.word	0x01fffe00
 800e6b0:	08080000 	.word	0x08080000
 800e6b4:	40022000 	.word	0x40022000

0800e6b8 <FLASH_OB_GetWRP>:
  *                        the write protected area
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t * WRPStartOffset, uint32_t * WRDPEndOffset)
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b085      	sub	sp, #20
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	60f8      	str	r0, [r7, #12]
 800e6c0:	60b9      	str	r1, [r7, #8]
 800e6c2:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d10b      	bne.n	800e6e2 <FLASH_OB_GetWRP+0x2a>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 800e6ca:	4b1f      	ldr	r3, [pc, #124]	@ (800e748 <FLASH_OB_GetWRP+0x90>)
 800e6cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6ce:	b2da      	uxtb	r2, r3
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 800e6d4:	4b1c      	ldr	r3, [pc, #112]	@ (800e748 <FLASH_OB_GetWRP+0x90>)
 800e6d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6d8:	0c1b      	lsrs	r3, r3, #16
 800e6da:	b2da      	uxtb	r2, r3
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 800e6e0:	e02b      	b.n	800e73a <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2b01      	cmp	r3, #1
 800e6e6:	d10b      	bne.n	800e700 <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 800e6e8:	4b17      	ldr	r3, [pc, #92]	@ (800e748 <FLASH_OB_GetWRP+0x90>)
 800e6ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6ec:	b2da      	uxtb	r2, r3
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 800e6f2:	4b15      	ldr	r3, [pc, #84]	@ (800e748 <FLASH_OB_GetWRP+0x90>)
 800e6f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6f6:	0c1b      	lsrs	r3, r3, #16
 800e6f8:	b2da      	uxtb	r2, r3
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	601a      	str	r2, [r3, #0]
}
 800e6fe:	e01c      	b.n	800e73a <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	2b02      	cmp	r3, #2
 800e704:	d10b      	bne.n	800e71e <FLASH_OB_GetWRP+0x66>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 800e706:	4b10      	ldr	r3, [pc, #64]	@ (800e748 <FLASH_OB_GetWRP+0x90>)
 800e708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e70a:	b2da      	uxtb	r2, r3
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 800e710:	4b0d      	ldr	r3, [pc, #52]	@ (800e748 <FLASH_OB_GetWRP+0x90>)
 800e712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e714:	0c1b      	lsrs	r3, r3, #16
 800e716:	b2da      	uxtb	r2, r3
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	601a      	str	r2, [r3, #0]
}
 800e71c:	e00d      	b.n	800e73a <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2b04      	cmp	r3, #4
 800e722:	d10a      	bne.n	800e73a <FLASH_OB_GetWRP+0x82>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 800e724:	4b08      	ldr	r3, [pc, #32]	@ (800e748 <FLASH_OB_GetWRP+0x90>)
 800e726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e728:	b2da      	uxtb	r2, r3
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 800e72e:	4b06      	ldr	r3, [pc, #24]	@ (800e748 <FLASH_OB_GetWRP+0x90>)
 800e730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e732:	0c1b      	lsrs	r3, r3, #16
 800e734:	b2da      	uxtb	r2, r3
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	601a      	str	r2, [r3, #0]
}
 800e73a:	bf00      	nop
 800e73c:	3714      	adds	r7, #20
 800e73e:	46bd      	mov	sp, r7
 800e740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e744:	4770      	bx	lr
 800e746:	bf00      	nop
 800e748:	40022000 	.word	0x40022000

0800e74c <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 800e74c:	b480      	push	{r7}
 800e74e:	b083      	sub	sp, #12
 800e750:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800e752:	4b0a      	ldr	r3, [pc, #40]	@ (800e77c <FLASH_OB_GetRDP+0x30>)
 800e754:	6a1b      	ldr	r3, [r3, #32]
 800e756:	b2db      	uxtb	r3, r3
 800e758:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2baa      	cmp	r3, #170	@ 0xaa
 800e75e:	d004      	beq.n	800e76a <FLASH_OB_GetRDP+0x1e>
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2bcc      	cmp	r3, #204	@ 0xcc
 800e764:	d001      	beq.n	800e76a <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 800e766:	23bb      	movs	r3, #187	@ 0xbb
 800e768:	e002      	b.n	800e770 <FLASH_OB_GetRDP+0x24>
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 800e76a:	4b04      	ldr	r3, [pc, #16]	@ (800e77c <FLASH_OB_GetRDP+0x30>)
 800e76c:	6a1b      	ldr	r3, [r3, #32]
 800e76e:	b2db      	uxtb	r3, r3
  }
}
 800e770:	4618      	mov	r0, r3
 800e772:	370c      	adds	r7, #12
 800e774:	46bd      	mov	sp, r7
 800e776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77a:	4770      	bx	lr
 800e77c:	40022000 	.word	0x40022000

0800e780 <FLASH_OB_GetUser>:
  *         BOR_LEV(Bit8-10), nRST_STOP(Bit12), nRST_STDBY(Bit13), nRST_SHDW(Bit14),
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27).
  */
static uint32_t FLASH_OB_GetUser(void)
{
 800e780:	b480      	push	{r7}
 800e782:	b083      	sub	sp, #12
 800e784:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 800e786:	4b07      	ldr	r3, [pc, #28]	@ (800e7a4 <FLASH_OB_GetUser+0x24>)
 800e788:	6a1b      	ldr	r3, [r3, #32]
 800e78a:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e792:	607b      	str	r3, [r7, #4]

  return user_config;
 800e794:	687b      	ldr	r3, [r7, #4]
}
 800e796:	4618      	mov	r0, r3
 800e798:	370c      	adds	r7, #12
 800e79a:	46bd      	mov	sp, r7
 800e79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a0:	4770      	bx	lr
 800e7a2:	bf00      	nop
 800e7a4:	40022000 	.word	0x40022000

0800e7a8 <FLASH_OB_GetPCROP>:
  *                       the Proprietary code readout protection
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t * PCROPConfig, uint32_t * PCROPStartAddr, uint32_t * PCROPEndAddr)
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b089      	sub	sp, #36	@ 0x24
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	60f8      	str	r0, [r7, #12]
 800e7b0:	60b9      	str	r1, [r7, #8]
 800e7b2:	607a      	str	r2, [r7, #4]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800e7b4:	4b3b      	ldr	r3, [pc, #236]	@ (800e8a4 <FLASH_OB_GetPCROP+0xfc>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d115      	bne.n	800e7ec <FLASH_OB_GetPCROP+0x44>
  {
    bank1_addr = FLASH_BASE;
 800e7c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e7c4:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800e7c6:	4b38      	ldr	r3, [pc, #224]	@ (800e8a8 <FLASH_OB_GetPCROP+0x100>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	b29b      	uxth	r3, r3
 800e7cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	d008      	beq.n	800e7e6 <FLASH_OB_GetPCROP+0x3e>
 800e7d4:	4b34      	ldr	r3, [pc, #208]	@ (800e8a8 <FLASH_OB_GetPCROP+0x100>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	029b      	lsls	r3, r3, #10
 800e7da:	085a      	lsrs	r2, r3, #1
 800e7dc:	4b33      	ldr	r3, [pc, #204]	@ (800e8ac <FLASH_OB_GetPCROP+0x104>)
 800e7de:	4013      	ands	r3, r2
 800e7e0:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800e7e4:	e000      	b.n	800e7e8 <FLASH_OB_GetPCROP+0x40>
 800e7e6:	4b32      	ldr	r3, [pc, #200]	@ (800e8b0 <FLASH_OB_GetPCROP+0x108>)
 800e7e8:	61bb      	str	r3, [r7, #24]
 800e7ea:	e014      	b.n	800e816 <FLASH_OB_GetPCROP+0x6e>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800e7ec:	4b2e      	ldr	r3, [pc, #184]	@ (800e8a8 <FLASH_OB_GetPCROP+0x100>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d008      	beq.n	800e80c <FLASH_OB_GetPCROP+0x64>
 800e7fa:	4b2b      	ldr	r3, [pc, #172]	@ (800e8a8 <FLASH_OB_GetPCROP+0x100>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	029b      	lsls	r3, r3, #10
 800e800:	085a      	lsrs	r2, r3, #1
 800e802:	4b2a      	ldr	r3, [pc, #168]	@ (800e8ac <FLASH_OB_GetPCROP+0x104>)
 800e804:	4013      	ands	r3, r2
 800e806:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800e80a:	e000      	b.n	800e80e <FLASH_OB_GetPCROP+0x66>
 800e80c:	4b28      	ldr	r3, [pc, #160]	@ (800e8b0 <FLASH_OB_GetPCROP+0x108>)
 800e80e:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 800e810:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e814:	61bb      	str	r3, [r7, #24]
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f003 0303 	and.w	r3, r3, #3
 800e81e:	2b01      	cmp	r3, #1
 800e820:	d115      	bne.n	800e84e <FLASH_OB_GetPCROP+0xa6>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 800e822:	4b24      	ldr	r3, [pc, #144]	@ (800e8b4 <FLASH_OB_GetPCROP+0x10c>)
 800e824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e826:	b29b      	uxth	r3, r3
 800e828:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	00da      	lsls	r2, r3, #3
 800e82e:	69fb      	ldr	r3, [r7, #28]
 800e830:	441a      	add	r2, r3
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 800e836:	4b1f      	ldr	r3, [pc, #124]	@ (800e8b4 <FLASH_OB_GetPCROP+0x10c>)
 800e838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e83a:	b29b      	uxth	r3, r3
 800e83c:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	00da      	lsls	r2, r3, #3
 800e842:	69fb      	ldr	r3, [r7, #28]
 800e844:	4413      	add	r3, r2
 800e846:	1dda      	adds	r2, r3, #7
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	601a      	str	r2, [r3, #0]
 800e84c:	e01a      	b.n	800e884 <FLASH_OB_GetPCROP+0xdc>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f003 0303 	and.w	r3, r3, #3
 800e856:	2b02      	cmp	r3, #2
 800e858:	d114      	bne.n	800e884 <FLASH_OB_GetPCROP+0xdc>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 800e85a:	4b16      	ldr	r3, [pc, #88]	@ (800e8b4 <FLASH_OB_GetPCROP+0x10c>)
 800e85c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e85e:	b29b      	uxth	r3, r3
 800e860:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	00da      	lsls	r2, r3, #3
 800e866:	69bb      	ldr	r3, [r7, #24]
 800e868:	441a      	add	r2, r3
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 800e86e:	4b11      	ldr	r3, [pc, #68]	@ (800e8b4 <FLASH_OB_GetPCROP+0x10c>)
 800e870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e872:	b29b      	uxth	r3, r3
 800e874:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr + 0x7U;
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	00da      	lsls	r2, r3, #3
 800e87a:	69bb      	ldr	r3, [r7, #24]
 800e87c:	4413      	add	r3, r2
 800e87e:	1dda      	adds	r2, r3, #7
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 800e884:	4b0b      	ldr	r3, [pc, #44]	@ (800e8b4 <FLASH_OB_GetPCROP+0x10c>)
 800e886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e888:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	431a      	orrs	r2, r3
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	601a      	str	r2, [r3, #0]
}
 800e896:	bf00      	nop
 800e898:	3724      	adds	r7, #36	@ 0x24
 800e89a:	46bd      	mov	sp, r7
 800e89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a0:	4770      	bx	lr
 800e8a2:	bf00      	nop
 800e8a4:	40010000 	.word	0x40010000
 800e8a8:	1fff75e0 	.word	0x1fff75e0
 800e8ac:	01fffe00 	.word	0x01fffe00
 800e8b0:	08080000 	.word	0x08080000
 800e8b4:	40022000 	.word	0x40022000

0800e8b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b087      	sub	sp, #28
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
 800e8c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e8c6:	e17f      	b.n	800ebc8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	681a      	ldr	r2, [r3, #0]
 800e8cc:	2101      	movs	r1, #1
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	fa01 f303 	lsl.w	r3, r1, r3
 800e8d4:	4013      	ands	r3, r2
 800e8d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	f000 8171 	beq.w	800ebc2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	685b      	ldr	r3, [r3, #4]
 800e8e4:	f003 0303 	and.w	r3, r3, #3
 800e8e8:	2b01      	cmp	r3, #1
 800e8ea:	d005      	beq.n	800e8f8 <HAL_GPIO_Init+0x40>
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	685b      	ldr	r3, [r3, #4]
 800e8f0:	f003 0303 	and.w	r3, r3, #3
 800e8f4:	2b02      	cmp	r3, #2
 800e8f6:	d130      	bne.n	800e95a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	689b      	ldr	r3, [r3, #8]
 800e8fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	005b      	lsls	r3, r3, #1
 800e902:	2203      	movs	r2, #3
 800e904:	fa02 f303 	lsl.w	r3, r2, r3
 800e908:	43db      	mvns	r3, r3
 800e90a:	693a      	ldr	r2, [r7, #16]
 800e90c:	4013      	ands	r3, r2
 800e90e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	68da      	ldr	r2, [r3, #12]
 800e914:	697b      	ldr	r3, [r7, #20]
 800e916:	005b      	lsls	r3, r3, #1
 800e918:	fa02 f303 	lsl.w	r3, r2, r3
 800e91c:	693a      	ldr	r2, [r7, #16]
 800e91e:	4313      	orrs	r3, r2
 800e920:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	693a      	ldr	r2, [r7, #16]
 800e926:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	685b      	ldr	r3, [r3, #4]
 800e92c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e92e:	2201      	movs	r2, #1
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	fa02 f303 	lsl.w	r3, r2, r3
 800e936:	43db      	mvns	r3, r3
 800e938:	693a      	ldr	r2, [r7, #16]
 800e93a:	4013      	ands	r3, r2
 800e93c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	685b      	ldr	r3, [r3, #4]
 800e942:	091b      	lsrs	r3, r3, #4
 800e944:	f003 0201 	and.w	r2, r3, #1
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	fa02 f303 	lsl.w	r3, r2, r3
 800e94e:	693a      	ldr	r2, [r7, #16]
 800e950:	4313      	orrs	r3, r2
 800e952:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	693a      	ldr	r2, [r7, #16]
 800e958:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	685b      	ldr	r3, [r3, #4]
 800e95e:	f003 0303 	and.w	r3, r3, #3
 800e962:	2b03      	cmp	r3, #3
 800e964:	d118      	bne.n	800e998 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e96a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800e96c:	2201      	movs	r2, #1
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	fa02 f303 	lsl.w	r3, r2, r3
 800e974:	43db      	mvns	r3, r3
 800e976:	693a      	ldr	r2, [r7, #16]
 800e978:	4013      	ands	r3, r2
 800e97a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	685b      	ldr	r3, [r3, #4]
 800e980:	08db      	lsrs	r3, r3, #3
 800e982:	f003 0201 	and.w	r2, r3, #1
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	fa02 f303 	lsl.w	r3, r2, r3
 800e98c:	693a      	ldr	r2, [r7, #16]
 800e98e:	4313      	orrs	r3, r2
 800e990:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	693a      	ldr	r2, [r7, #16]
 800e996:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	f003 0303 	and.w	r3, r3, #3
 800e9a0:	2b03      	cmp	r3, #3
 800e9a2:	d017      	beq.n	800e9d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	68db      	ldr	r3, [r3, #12]
 800e9a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	005b      	lsls	r3, r3, #1
 800e9ae:	2203      	movs	r2, #3
 800e9b0:	fa02 f303 	lsl.w	r3, r2, r3
 800e9b4:	43db      	mvns	r3, r3
 800e9b6:	693a      	ldr	r2, [r7, #16]
 800e9b8:	4013      	ands	r3, r2
 800e9ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	689a      	ldr	r2, [r3, #8]
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	005b      	lsls	r3, r3, #1
 800e9c4:	fa02 f303 	lsl.w	r3, r2, r3
 800e9c8:	693a      	ldr	r2, [r7, #16]
 800e9ca:	4313      	orrs	r3, r2
 800e9cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	693a      	ldr	r2, [r7, #16]
 800e9d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	685b      	ldr	r3, [r3, #4]
 800e9d8:	f003 0303 	and.w	r3, r3, #3
 800e9dc:	2b02      	cmp	r3, #2
 800e9de:	d123      	bne.n	800ea28 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	08da      	lsrs	r2, r3, #3
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	3208      	adds	r2, #8
 800e9e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	f003 0307 	and.w	r3, r3, #7
 800e9f4:	009b      	lsls	r3, r3, #2
 800e9f6:	220f      	movs	r2, #15
 800e9f8:	fa02 f303 	lsl.w	r3, r2, r3
 800e9fc:	43db      	mvns	r3, r3
 800e9fe:	693a      	ldr	r2, [r7, #16]
 800ea00:	4013      	ands	r3, r2
 800ea02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	691a      	ldr	r2, [r3, #16]
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	f003 0307 	and.w	r3, r3, #7
 800ea0e:	009b      	lsls	r3, r3, #2
 800ea10:	fa02 f303 	lsl.w	r3, r2, r3
 800ea14:	693a      	ldr	r2, [r7, #16]
 800ea16:	4313      	orrs	r3, r2
 800ea18:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	08da      	lsrs	r2, r3, #3
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	3208      	adds	r2, #8
 800ea22:	6939      	ldr	r1, [r7, #16]
 800ea24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	005b      	lsls	r3, r3, #1
 800ea32:	2203      	movs	r2, #3
 800ea34:	fa02 f303 	lsl.w	r3, r2, r3
 800ea38:	43db      	mvns	r3, r3
 800ea3a:	693a      	ldr	r2, [r7, #16]
 800ea3c:	4013      	ands	r3, r2
 800ea3e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	685b      	ldr	r3, [r3, #4]
 800ea44:	f003 0203 	and.w	r2, r3, #3
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	005b      	lsls	r3, r3, #1
 800ea4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ea50:	693a      	ldr	r2, [r7, #16]
 800ea52:	4313      	orrs	r3, r2
 800ea54:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	693a      	ldr	r2, [r7, #16]
 800ea5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	685b      	ldr	r3, [r3, #4]
 800ea60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	f000 80ac 	beq.w	800ebc2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ea6a:	4b5f      	ldr	r3, [pc, #380]	@ (800ebe8 <HAL_GPIO_Init+0x330>)
 800ea6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ea6e:	4a5e      	ldr	r2, [pc, #376]	@ (800ebe8 <HAL_GPIO_Init+0x330>)
 800ea70:	f043 0301 	orr.w	r3, r3, #1
 800ea74:	6613      	str	r3, [r2, #96]	@ 0x60
 800ea76:	4b5c      	ldr	r3, [pc, #368]	@ (800ebe8 <HAL_GPIO_Init+0x330>)
 800ea78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ea7a:	f003 0301 	and.w	r3, r3, #1
 800ea7e:	60bb      	str	r3, [r7, #8]
 800ea80:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800ea82:	4a5a      	ldr	r2, [pc, #360]	@ (800ebec <HAL_GPIO_Init+0x334>)
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	089b      	lsrs	r3, r3, #2
 800ea88:	3302      	adds	r3, #2
 800ea8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	f003 0303 	and.w	r3, r3, #3
 800ea96:	009b      	lsls	r3, r3, #2
 800ea98:	220f      	movs	r2, #15
 800ea9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ea9e:	43db      	mvns	r3, r3
 800eaa0:	693a      	ldr	r2, [r7, #16]
 800eaa2:	4013      	ands	r3, r2
 800eaa4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800eaac:	d025      	beq.n	800eafa <HAL_GPIO_Init+0x242>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	4a4f      	ldr	r2, [pc, #316]	@ (800ebf0 <HAL_GPIO_Init+0x338>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d01f      	beq.n	800eaf6 <HAL_GPIO_Init+0x23e>
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	4a4e      	ldr	r2, [pc, #312]	@ (800ebf4 <HAL_GPIO_Init+0x33c>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d019      	beq.n	800eaf2 <HAL_GPIO_Init+0x23a>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	4a4d      	ldr	r2, [pc, #308]	@ (800ebf8 <HAL_GPIO_Init+0x340>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d013      	beq.n	800eaee <HAL_GPIO_Init+0x236>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	4a4c      	ldr	r2, [pc, #304]	@ (800ebfc <HAL_GPIO_Init+0x344>)
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d00d      	beq.n	800eaea <HAL_GPIO_Init+0x232>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	4a4b      	ldr	r2, [pc, #300]	@ (800ec00 <HAL_GPIO_Init+0x348>)
 800ead2:	4293      	cmp	r3, r2
 800ead4:	d007      	beq.n	800eae6 <HAL_GPIO_Init+0x22e>
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	4a4a      	ldr	r2, [pc, #296]	@ (800ec04 <HAL_GPIO_Init+0x34c>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	d101      	bne.n	800eae2 <HAL_GPIO_Init+0x22a>
 800eade:	2306      	movs	r3, #6
 800eae0:	e00c      	b.n	800eafc <HAL_GPIO_Init+0x244>
 800eae2:	2307      	movs	r3, #7
 800eae4:	e00a      	b.n	800eafc <HAL_GPIO_Init+0x244>
 800eae6:	2305      	movs	r3, #5
 800eae8:	e008      	b.n	800eafc <HAL_GPIO_Init+0x244>
 800eaea:	2304      	movs	r3, #4
 800eaec:	e006      	b.n	800eafc <HAL_GPIO_Init+0x244>
 800eaee:	2303      	movs	r3, #3
 800eaf0:	e004      	b.n	800eafc <HAL_GPIO_Init+0x244>
 800eaf2:	2302      	movs	r3, #2
 800eaf4:	e002      	b.n	800eafc <HAL_GPIO_Init+0x244>
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	e000      	b.n	800eafc <HAL_GPIO_Init+0x244>
 800eafa:	2300      	movs	r3, #0
 800eafc:	697a      	ldr	r2, [r7, #20]
 800eafe:	f002 0203 	and.w	r2, r2, #3
 800eb02:	0092      	lsls	r2, r2, #2
 800eb04:	4093      	lsls	r3, r2
 800eb06:	693a      	ldr	r2, [r7, #16]
 800eb08:	4313      	orrs	r3, r2
 800eb0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800eb0c:	4937      	ldr	r1, [pc, #220]	@ (800ebec <HAL_GPIO_Init+0x334>)
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	089b      	lsrs	r3, r3, #2
 800eb12:	3302      	adds	r3, #2
 800eb14:	693a      	ldr	r2, [r7, #16]
 800eb16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800eb1a:	4b3b      	ldr	r3, [pc, #236]	@ (800ec08 <HAL_GPIO_Init+0x350>)
 800eb1c:	689b      	ldr	r3, [r3, #8]
 800eb1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	43db      	mvns	r3, r3
 800eb24:	693a      	ldr	r2, [r7, #16]
 800eb26:	4013      	ands	r3, r2
 800eb28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	685b      	ldr	r3, [r3, #4]
 800eb2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d003      	beq.n	800eb3e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800eb36:	693a      	ldr	r2, [r7, #16]
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	4313      	orrs	r3, r2
 800eb3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800eb3e:	4a32      	ldr	r2, [pc, #200]	@ (800ec08 <HAL_GPIO_Init+0x350>)
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800eb44:	4b30      	ldr	r3, [pc, #192]	@ (800ec08 <HAL_GPIO_Init+0x350>)
 800eb46:	68db      	ldr	r3, [r3, #12]
 800eb48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	43db      	mvns	r3, r3
 800eb4e:	693a      	ldr	r2, [r7, #16]
 800eb50:	4013      	ands	r3, r2
 800eb52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d003      	beq.n	800eb68 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800eb60:	693a      	ldr	r2, [r7, #16]
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	4313      	orrs	r3, r2
 800eb66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800eb68:	4a27      	ldr	r2, [pc, #156]	@ (800ec08 <HAL_GPIO_Init+0x350>)
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800eb6e:	4b26      	ldr	r3, [pc, #152]	@ (800ec08 <HAL_GPIO_Init+0x350>)
 800eb70:	685b      	ldr	r3, [r3, #4]
 800eb72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	43db      	mvns	r3, r3
 800eb78:	693a      	ldr	r2, [r7, #16]
 800eb7a:	4013      	ands	r3, r2
 800eb7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d003      	beq.n	800eb92 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800eb8a:	693a      	ldr	r2, [r7, #16]
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	4313      	orrs	r3, r2
 800eb90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800eb92:	4a1d      	ldr	r2, [pc, #116]	@ (800ec08 <HAL_GPIO_Init+0x350>)
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800eb98:	4b1b      	ldr	r3, [pc, #108]	@ (800ec08 <HAL_GPIO_Init+0x350>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	43db      	mvns	r3, r3
 800eba2:	693a      	ldr	r2, [r7, #16]
 800eba4:	4013      	ands	r3, r2
 800eba6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	685b      	ldr	r3, [r3, #4]
 800ebac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d003      	beq.n	800ebbc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800ebb4:	693a      	ldr	r2, [r7, #16]
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	4313      	orrs	r3, r2
 800ebba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800ebbc:	4a12      	ldr	r2, [pc, #72]	@ (800ec08 <HAL_GPIO_Init+0x350>)
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	681a      	ldr	r2, [r3, #0]
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	fa22 f303 	lsr.w	r3, r2, r3
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	f47f ae78 	bne.w	800e8c8 <HAL_GPIO_Init+0x10>
  }
}
 800ebd8:	bf00      	nop
 800ebda:	bf00      	nop
 800ebdc:	371c      	adds	r7, #28
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe4:	4770      	bx	lr
 800ebe6:	bf00      	nop
 800ebe8:	40021000 	.word	0x40021000
 800ebec:	40010000 	.word	0x40010000
 800ebf0:	48000400 	.word	0x48000400
 800ebf4:	48000800 	.word	0x48000800
 800ebf8:	48000c00 	.word	0x48000c00
 800ebfc:	48001000 	.word	0x48001000
 800ec00:	48001400 	.word	0x48001400
 800ec04:	48001800 	.word	0x48001800
 800ec08:	40010400 	.word	0x40010400

0800ec0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b085      	sub	sp, #20
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
 800ec14:	460b      	mov	r3, r1
 800ec16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	691a      	ldr	r2, [r3, #16]
 800ec1c:	887b      	ldrh	r3, [r7, #2]
 800ec1e:	4013      	ands	r3, r2
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d002      	beq.n	800ec2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ec24:	2301      	movs	r3, #1
 800ec26:	73fb      	strb	r3, [r7, #15]
 800ec28:	e001      	b.n	800ec2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ec2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	3714      	adds	r7, #20
 800ec34:	46bd      	mov	sp, r7
 800ec36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3a:	4770      	bx	lr

0800ec3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b083      	sub	sp, #12
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	460b      	mov	r3, r1
 800ec46:	807b      	strh	r3, [r7, #2]
 800ec48:	4613      	mov	r3, r2
 800ec4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ec4c:	787b      	ldrb	r3, [r7, #1]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d003      	beq.n	800ec5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ec52:	887a      	ldrh	r2, [r7, #2]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ec58:	e002      	b.n	800ec60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ec5a:	887a      	ldrh	r2, [r7, #2]
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800ec60:	bf00      	nop
 800ec62:	370c      	adds	r7, #12
 800ec64:	46bd      	mov	sp, r7
 800ec66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6a:	4770      	bx	lr

0800ec6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b082      	sub	sp, #8
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d101      	bne.n	800ec7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	e08d      	b.n	800ed9a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ec84:	b2db      	uxtb	r3, r3
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d106      	bne.n	800ec98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f7f9 f8b8 	bl	8007e08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2224      	movs	r2, #36	@ 0x24
 800ec9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f022 0201 	bic.w	r2, r2, #1
 800ecae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	685a      	ldr	r2, [r3, #4]
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800ecbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	689a      	ldr	r2, [r3, #8]
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800eccc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	68db      	ldr	r3, [r3, #12]
 800ecd2:	2b01      	cmp	r3, #1
 800ecd4:	d107      	bne.n	800ece6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	689a      	ldr	r2, [r3, #8]
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ece2:	609a      	str	r2, [r3, #8]
 800ece4:	e006      	b.n	800ecf4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	689a      	ldr	r2, [r3, #8]
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800ecf2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	68db      	ldr	r3, [r3, #12]
 800ecf8:	2b02      	cmp	r3, #2
 800ecfa:	d108      	bne.n	800ed0e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	685a      	ldr	r2, [r3, #4]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ed0a:	605a      	str	r2, [r3, #4]
 800ed0c:	e007      	b.n	800ed1e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	685a      	ldr	r2, [r3, #4]
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ed1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	687a      	ldr	r2, [r7, #4]
 800ed26:	6812      	ldr	r2, [r2, #0]
 800ed28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ed2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ed30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	68da      	ldr	r2, [r3, #12]
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ed40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	691a      	ldr	r2, [r3, #16]
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	695b      	ldr	r3, [r3, #20]
 800ed4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	699b      	ldr	r3, [r3, #24]
 800ed52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	430a      	orrs	r2, r1
 800ed5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	69d9      	ldr	r1, [r3, #28]
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	6a1a      	ldr	r2, [r3, #32]
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	430a      	orrs	r2, r1
 800ed6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	681a      	ldr	r2, [r3, #0]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f042 0201 	orr.w	r2, r2, #1
 800ed7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2220      	movs	r2, #32
 800ed86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2200      	movs	r2, #0
 800ed94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800ed98:	2300      	movs	r3, #0
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3708      	adds	r7, #8
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
	...

0800eda4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b088      	sub	sp, #32
 800eda8:	af02      	add	r7, sp, #8
 800edaa:	60f8      	str	r0, [r7, #12]
 800edac:	607a      	str	r2, [r7, #4]
 800edae:	461a      	mov	r2, r3
 800edb0:	460b      	mov	r3, r1
 800edb2:	817b      	strh	r3, [r7, #10]
 800edb4:	4613      	mov	r3, r2
 800edb6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800edbe:	b2db      	uxtb	r3, r3
 800edc0:	2b20      	cmp	r3, #32
 800edc2:	f040 80fd 	bne.w	800efc0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800edcc:	2b01      	cmp	r3, #1
 800edce:	d101      	bne.n	800edd4 <HAL_I2C_Master_Transmit+0x30>
 800edd0:	2302      	movs	r3, #2
 800edd2:	e0f6      	b.n	800efc2 <HAL_I2C_Master_Transmit+0x21e>
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	2201      	movs	r2, #1
 800edd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800eddc:	f7fc fd38 	bl	800b850 <HAL_GetTick>
 800ede0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ede2:	693b      	ldr	r3, [r7, #16]
 800ede4:	9300      	str	r3, [sp, #0]
 800ede6:	2319      	movs	r3, #25
 800ede8:	2201      	movs	r2, #1
 800edea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800edee:	68f8      	ldr	r0, [r7, #12]
 800edf0:	f000 fa0a 	bl	800f208 <I2C_WaitOnFlagUntilTimeout>
 800edf4:	4603      	mov	r3, r0
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d001      	beq.n	800edfe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800edfa:	2301      	movs	r3, #1
 800edfc:	e0e1      	b.n	800efc2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2221      	movs	r2, #33	@ 0x21
 800ee02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	2210      	movs	r2, #16
 800ee0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	2200      	movs	r2, #0
 800ee12:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	687a      	ldr	r2, [r7, #4]
 800ee18:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	893a      	ldrh	r2, [r7, #8]
 800ee1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2200      	movs	r2, #0
 800ee24:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee2a:	b29b      	uxth	r3, r3
 800ee2c:	2bff      	cmp	r3, #255	@ 0xff
 800ee2e:	d906      	bls.n	800ee3e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	22ff      	movs	r2, #255	@ 0xff
 800ee34:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800ee36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ee3a:	617b      	str	r3, [r7, #20]
 800ee3c:	e007      	b.n	800ee4e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee42:	b29a      	uxth	r2, r3
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800ee48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ee4c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d024      	beq.n	800eea0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee5a:	781a      	ldrb	r2, [r3, #0]
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee66:	1c5a      	adds	r2, r3, #1
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	3b01      	subs	r3, #1
 800ee74:	b29a      	uxth	r2, r3
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ee7e:	3b01      	subs	r3, #1
 800ee80:	b29a      	uxth	r2, r3
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ee8a:	b2db      	uxtb	r3, r3
 800ee8c:	3301      	adds	r3, #1
 800ee8e:	b2da      	uxtb	r2, r3
 800ee90:	8979      	ldrh	r1, [r7, #10]
 800ee92:	4b4e      	ldr	r3, [pc, #312]	@ (800efcc <HAL_I2C_Master_Transmit+0x228>)
 800ee94:	9300      	str	r3, [sp, #0]
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	68f8      	ldr	r0, [r7, #12]
 800ee9a:	f000 fc05 	bl	800f6a8 <I2C_TransferConfig>
 800ee9e:	e066      	b.n	800ef6e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eea4:	b2da      	uxtb	r2, r3
 800eea6:	8979      	ldrh	r1, [r7, #10]
 800eea8:	4b48      	ldr	r3, [pc, #288]	@ (800efcc <HAL_I2C_Master_Transmit+0x228>)
 800eeaa:	9300      	str	r3, [sp, #0]
 800eeac:	697b      	ldr	r3, [r7, #20]
 800eeae:	68f8      	ldr	r0, [r7, #12]
 800eeb0:	f000 fbfa 	bl	800f6a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800eeb4:	e05b      	b.n	800ef6e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eeb6:	693a      	ldr	r2, [r7, #16]
 800eeb8:	6a39      	ldr	r1, [r7, #32]
 800eeba:	68f8      	ldr	r0, [r7, #12]
 800eebc:	f000 f9fd 	bl	800f2ba <I2C_WaitOnTXISFlagUntilTimeout>
 800eec0:	4603      	mov	r3, r0
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d001      	beq.n	800eeca <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800eec6:	2301      	movs	r3, #1
 800eec8:	e07b      	b.n	800efc2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eece:	781a      	ldrb	r2, [r3, #0]
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eeda:	1c5a      	adds	r2, r3, #1
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eee4:	b29b      	uxth	r3, r3
 800eee6:	3b01      	subs	r3, #1
 800eee8:	b29a      	uxth	r2, r3
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eef2:	3b01      	subs	r3, #1
 800eef4:	b29a      	uxth	r2, r3
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eefe:	b29b      	uxth	r3, r3
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d034      	beq.n	800ef6e <HAL_I2C_Master_Transmit+0x1ca>
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d130      	bne.n	800ef6e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ef0c:	693b      	ldr	r3, [r7, #16]
 800ef0e:	9300      	str	r3, [sp, #0]
 800ef10:	6a3b      	ldr	r3, [r7, #32]
 800ef12:	2200      	movs	r2, #0
 800ef14:	2180      	movs	r1, #128	@ 0x80
 800ef16:	68f8      	ldr	r0, [r7, #12]
 800ef18:	f000 f976 	bl	800f208 <I2C_WaitOnFlagUntilTimeout>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d001      	beq.n	800ef26 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800ef22:	2301      	movs	r3, #1
 800ef24:	e04d      	b.n	800efc2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef2a:	b29b      	uxth	r3, r3
 800ef2c:	2bff      	cmp	r3, #255	@ 0xff
 800ef2e:	d90e      	bls.n	800ef4e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	22ff      	movs	r2, #255	@ 0xff
 800ef34:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef3a:	b2da      	uxtb	r2, r3
 800ef3c:	8979      	ldrh	r1, [r7, #10]
 800ef3e:	2300      	movs	r3, #0
 800ef40:	9300      	str	r3, [sp, #0]
 800ef42:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ef46:	68f8      	ldr	r0, [r7, #12]
 800ef48:	f000 fbae 	bl	800f6a8 <I2C_TransferConfig>
 800ef4c:	e00f      	b.n	800ef6e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef52:	b29a      	uxth	r2, r3
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef5c:	b2da      	uxtb	r2, r3
 800ef5e:	8979      	ldrh	r1, [r7, #10]
 800ef60:	2300      	movs	r3, #0
 800ef62:	9300      	str	r3, [sp, #0]
 800ef64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ef68:	68f8      	ldr	r0, [r7, #12]
 800ef6a:	f000 fb9d 	bl	800f6a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef72:	b29b      	uxth	r3, r3
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d19e      	bne.n	800eeb6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ef78:	693a      	ldr	r2, [r7, #16]
 800ef7a:	6a39      	ldr	r1, [r7, #32]
 800ef7c:	68f8      	ldr	r0, [r7, #12]
 800ef7e:	f000 f9e3 	bl	800f348 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ef82:	4603      	mov	r3, r0
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d001      	beq.n	800ef8c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800ef88:	2301      	movs	r3, #1
 800ef8a:	e01a      	b.n	800efc2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	2220      	movs	r2, #32
 800ef92:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	6859      	ldr	r1, [r3, #4]
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	681a      	ldr	r2, [r3, #0]
 800ef9e:	4b0c      	ldr	r3, [pc, #48]	@ (800efd0 <HAL_I2C_Master_Transmit+0x22c>)
 800efa0:	400b      	ands	r3, r1
 800efa2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	2220      	movs	r2, #32
 800efa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	2200      	movs	r2, #0
 800efb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	2200      	movs	r2, #0
 800efb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800efbc:	2300      	movs	r3, #0
 800efbe:	e000      	b.n	800efc2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800efc0:	2302      	movs	r3, #2
  }
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3718      	adds	r7, #24
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}
 800efca:	bf00      	nop
 800efcc:	80002000 	.word	0x80002000
 800efd0:	fe00e800 	.word	0xfe00e800

0800efd4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b088      	sub	sp, #32
 800efd8:	af02      	add	r7, sp, #8
 800efda:	60f8      	str	r0, [r7, #12]
 800efdc:	607a      	str	r2, [r7, #4]
 800efde:	461a      	mov	r2, r3
 800efe0:	460b      	mov	r3, r1
 800efe2:	817b      	strh	r3, [r7, #10]
 800efe4:	4613      	mov	r3, r2
 800efe6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800efee:	b2db      	uxtb	r3, r3
 800eff0:	2b20      	cmp	r3, #32
 800eff2:	f040 80db 	bne.w	800f1ac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800effc:	2b01      	cmp	r3, #1
 800effe:	d101      	bne.n	800f004 <HAL_I2C_Master_Receive+0x30>
 800f000:	2302      	movs	r3, #2
 800f002:	e0d4      	b.n	800f1ae <HAL_I2C_Master_Receive+0x1da>
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2201      	movs	r2, #1
 800f008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f00c:	f7fc fc20 	bl	800b850 <HAL_GetTick>
 800f010:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	9300      	str	r3, [sp, #0]
 800f016:	2319      	movs	r3, #25
 800f018:	2201      	movs	r2, #1
 800f01a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f01e:	68f8      	ldr	r0, [r7, #12]
 800f020:	f000 f8f2 	bl	800f208 <I2C_WaitOnFlagUntilTimeout>
 800f024:	4603      	mov	r3, r0
 800f026:	2b00      	cmp	r3, #0
 800f028:	d001      	beq.n	800f02e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800f02a:	2301      	movs	r3, #1
 800f02c:	e0bf      	b.n	800f1ae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	2222      	movs	r2, #34	@ 0x22
 800f032:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	2210      	movs	r2, #16
 800f03a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	2200      	movs	r2, #0
 800f042:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	687a      	ldr	r2, [r7, #4]
 800f048:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	893a      	ldrh	r2, [r7, #8]
 800f04e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	2200      	movs	r2, #0
 800f054:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f05a:	b29b      	uxth	r3, r3
 800f05c:	2bff      	cmp	r3, #255	@ 0xff
 800f05e:	d90e      	bls.n	800f07e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	2201      	movs	r2, #1
 800f064:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f06a:	b2da      	uxtb	r2, r3
 800f06c:	8979      	ldrh	r1, [r7, #10]
 800f06e:	4b52      	ldr	r3, [pc, #328]	@ (800f1b8 <HAL_I2C_Master_Receive+0x1e4>)
 800f070:	9300      	str	r3, [sp, #0]
 800f072:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f076:	68f8      	ldr	r0, [r7, #12]
 800f078:	f000 fb16 	bl	800f6a8 <I2C_TransferConfig>
 800f07c:	e06d      	b.n	800f15a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f082:	b29a      	uxth	r2, r3
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f08c:	b2da      	uxtb	r2, r3
 800f08e:	8979      	ldrh	r1, [r7, #10]
 800f090:	4b49      	ldr	r3, [pc, #292]	@ (800f1b8 <HAL_I2C_Master_Receive+0x1e4>)
 800f092:	9300      	str	r3, [sp, #0]
 800f094:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f098:	68f8      	ldr	r0, [r7, #12]
 800f09a:	f000 fb05 	bl	800f6a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800f09e:	e05c      	b.n	800f15a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f0a0:	697a      	ldr	r2, [r7, #20]
 800f0a2:	6a39      	ldr	r1, [r7, #32]
 800f0a4:	68f8      	ldr	r0, [r7, #12]
 800f0a6:	f000 f993 	bl	800f3d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d001      	beq.n	800f0b4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	e07c      	b.n	800f1ae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0be:	b2d2      	uxtb	r2, r2
 800f0c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0c6:	1c5a      	adds	r2, r3, #1
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f0d0:	3b01      	subs	r3, #1
 800f0d2:	b29a      	uxth	r2, r3
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f0dc:	b29b      	uxth	r3, r3
 800f0de:	3b01      	subs	r3, #1
 800f0e0:	b29a      	uxth	r2, r3
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f0ea:	b29b      	uxth	r3, r3
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d034      	beq.n	800f15a <HAL_I2C_Master_Receive+0x186>
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d130      	bne.n	800f15a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800f0f8:	697b      	ldr	r3, [r7, #20]
 800f0fa:	9300      	str	r3, [sp, #0]
 800f0fc:	6a3b      	ldr	r3, [r7, #32]
 800f0fe:	2200      	movs	r2, #0
 800f100:	2180      	movs	r1, #128	@ 0x80
 800f102:	68f8      	ldr	r0, [r7, #12]
 800f104:	f000 f880 	bl	800f208 <I2C_WaitOnFlagUntilTimeout>
 800f108:	4603      	mov	r3, r0
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d001      	beq.n	800f112 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800f10e:	2301      	movs	r3, #1
 800f110:	e04d      	b.n	800f1ae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f116:	b29b      	uxth	r3, r3
 800f118:	2bff      	cmp	r3, #255	@ 0xff
 800f11a:	d90e      	bls.n	800f13a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	22ff      	movs	r2, #255	@ 0xff
 800f120:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f126:	b2da      	uxtb	r2, r3
 800f128:	8979      	ldrh	r1, [r7, #10]
 800f12a:	2300      	movs	r3, #0
 800f12c:	9300      	str	r3, [sp, #0]
 800f12e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f132:	68f8      	ldr	r0, [r7, #12]
 800f134:	f000 fab8 	bl	800f6a8 <I2C_TransferConfig>
 800f138:	e00f      	b.n	800f15a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f13e:	b29a      	uxth	r2, r3
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f148:	b2da      	uxtb	r2, r3
 800f14a:	8979      	ldrh	r1, [r7, #10]
 800f14c:	2300      	movs	r3, #0
 800f14e:	9300      	str	r3, [sp, #0]
 800f150:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f154:	68f8      	ldr	r0, [r7, #12]
 800f156:	f000 faa7 	bl	800f6a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f15e:	b29b      	uxth	r3, r3
 800f160:	2b00      	cmp	r3, #0
 800f162:	d19d      	bne.n	800f0a0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f164:	697a      	ldr	r2, [r7, #20]
 800f166:	6a39      	ldr	r1, [r7, #32]
 800f168:	68f8      	ldr	r0, [r7, #12]
 800f16a:	f000 f8ed 	bl	800f348 <I2C_WaitOnSTOPFlagUntilTimeout>
 800f16e:	4603      	mov	r3, r0
 800f170:	2b00      	cmp	r3, #0
 800f172:	d001      	beq.n	800f178 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800f174:	2301      	movs	r3, #1
 800f176:	e01a      	b.n	800f1ae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	2220      	movs	r2, #32
 800f17e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	6859      	ldr	r1, [r3, #4]
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681a      	ldr	r2, [r3, #0]
 800f18a:	4b0c      	ldr	r3, [pc, #48]	@ (800f1bc <HAL_I2C_Master_Receive+0x1e8>)
 800f18c:	400b      	ands	r3, r1
 800f18e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	2220      	movs	r2, #32
 800f194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	2200      	movs	r2, #0
 800f19c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	e000      	b.n	800f1ae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800f1ac:	2302      	movs	r3, #2
  }
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	3718      	adds	r7, #24
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}
 800f1b6:	bf00      	nop
 800f1b8:	80002400 	.word	0x80002400
 800f1bc:	fe00e800 	.word	0xfe00e800

0800f1c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b083      	sub	sp, #12
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	699b      	ldr	r3, [r3, #24]
 800f1ce:	f003 0302 	and.w	r3, r3, #2
 800f1d2:	2b02      	cmp	r3, #2
 800f1d4:	d103      	bne.n	800f1de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	2200      	movs	r2, #0
 800f1dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	699b      	ldr	r3, [r3, #24]
 800f1e4:	f003 0301 	and.w	r3, r3, #1
 800f1e8:	2b01      	cmp	r3, #1
 800f1ea:	d007      	beq.n	800f1fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	699a      	ldr	r2, [r3, #24]
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	f042 0201 	orr.w	r2, r2, #1
 800f1fa:	619a      	str	r2, [r3, #24]
  }
}
 800f1fc:	bf00      	nop
 800f1fe:	370c      	adds	r7, #12
 800f200:	46bd      	mov	sp, r7
 800f202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f206:	4770      	bx	lr

0800f208 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b084      	sub	sp, #16
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	60f8      	str	r0, [r7, #12]
 800f210:	60b9      	str	r1, [r7, #8]
 800f212:	603b      	str	r3, [r7, #0]
 800f214:	4613      	mov	r3, r2
 800f216:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f218:	e03b      	b.n	800f292 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800f21a:	69ba      	ldr	r2, [r7, #24]
 800f21c:	6839      	ldr	r1, [r7, #0]
 800f21e:	68f8      	ldr	r0, [r7, #12]
 800f220:	f000 f962 	bl	800f4e8 <I2C_IsErrorOccurred>
 800f224:	4603      	mov	r3, r0
 800f226:	2b00      	cmp	r3, #0
 800f228:	d001      	beq.n	800f22e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800f22a:	2301      	movs	r3, #1
 800f22c:	e041      	b.n	800f2b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f234:	d02d      	beq.n	800f292 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f236:	f7fc fb0b 	bl	800b850 <HAL_GetTick>
 800f23a:	4602      	mov	r2, r0
 800f23c:	69bb      	ldr	r3, [r7, #24]
 800f23e:	1ad3      	subs	r3, r2, r3
 800f240:	683a      	ldr	r2, [r7, #0]
 800f242:	429a      	cmp	r2, r3
 800f244:	d302      	bcc.n	800f24c <I2C_WaitOnFlagUntilTimeout+0x44>
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d122      	bne.n	800f292 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	699a      	ldr	r2, [r3, #24]
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	4013      	ands	r3, r2
 800f256:	68ba      	ldr	r2, [r7, #8]
 800f258:	429a      	cmp	r2, r3
 800f25a:	bf0c      	ite	eq
 800f25c:	2301      	moveq	r3, #1
 800f25e:	2300      	movne	r3, #0
 800f260:	b2db      	uxtb	r3, r3
 800f262:	461a      	mov	r2, r3
 800f264:	79fb      	ldrb	r3, [r7, #7]
 800f266:	429a      	cmp	r2, r3
 800f268:	d113      	bne.n	800f292 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f26e:	f043 0220 	orr.w	r2, r3, #32
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	2220      	movs	r2, #32
 800f27a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	2200      	movs	r2, #0
 800f282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	2200      	movs	r2, #0
 800f28a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800f28e:	2301      	movs	r3, #1
 800f290:	e00f      	b.n	800f2b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	699a      	ldr	r2, [r3, #24]
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	4013      	ands	r3, r2
 800f29c:	68ba      	ldr	r2, [r7, #8]
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	bf0c      	ite	eq
 800f2a2:	2301      	moveq	r3, #1
 800f2a4:	2300      	movne	r3, #0
 800f2a6:	b2db      	uxtb	r3, r3
 800f2a8:	461a      	mov	r2, r3
 800f2aa:	79fb      	ldrb	r3, [r7, #7]
 800f2ac:	429a      	cmp	r2, r3
 800f2ae:	d0b4      	beq.n	800f21a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f2b0:	2300      	movs	r3, #0
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3710      	adds	r7, #16
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}

0800f2ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800f2ba:	b580      	push	{r7, lr}
 800f2bc:	b084      	sub	sp, #16
 800f2be:	af00      	add	r7, sp, #0
 800f2c0:	60f8      	str	r0, [r7, #12]
 800f2c2:	60b9      	str	r1, [r7, #8]
 800f2c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800f2c6:	e033      	b.n	800f330 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800f2c8:	687a      	ldr	r2, [r7, #4]
 800f2ca:	68b9      	ldr	r1, [r7, #8]
 800f2cc:	68f8      	ldr	r0, [r7, #12]
 800f2ce:	f000 f90b 	bl	800f4e8 <I2C_IsErrorOccurred>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d001      	beq.n	800f2dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800f2d8:	2301      	movs	r3, #1
 800f2da:	e031      	b.n	800f340 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2e2:	d025      	beq.n	800f330 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f2e4:	f7fc fab4 	bl	800b850 <HAL_GetTick>
 800f2e8:	4602      	mov	r2, r0
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	1ad3      	subs	r3, r2, r3
 800f2ee:	68ba      	ldr	r2, [r7, #8]
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d302      	bcc.n	800f2fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d11a      	bne.n	800f330 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	699b      	ldr	r3, [r3, #24]
 800f300:	f003 0302 	and.w	r3, r3, #2
 800f304:	2b02      	cmp	r3, #2
 800f306:	d013      	beq.n	800f330 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f30c:	f043 0220 	orr.w	r2, r3, #32
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	2220      	movs	r2, #32
 800f318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	2200      	movs	r2, #0
 800f320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	2200      	movs	r2, #0
 800f328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800f32c:	2301      	movs	r3, #1
 800f32e:	e007      	b.n	800f340 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	699b      	ldr	r3, [r3, #24]
 800f336:	f003 0302 	and.w	r3, r3, #2
 800f33a:	2b02      	cmp	r3, #2
 800f33c:	d1c4      	bne.n	800f2c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800f33e:	2300      	movs	r3, #0
}
 800f340:	4618      	mov	r0, r3
 800f342:	3710      	adds	r7, #16
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}

0800f348 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b084      	sub	sp, #16
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	60b9      	str	r1, [r7, #8]
 800f352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800f354:	e02f      	b.n	800f3b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800f356:	687a      	ldr	r2, [r7, #4]
 800f358:	68b9      	ldr	r1, [r7, #8]
 800f35a:	68f8      	ldr	r0, [r7, #12]
 800f35c:	f000 f8c4 	bl	800f4e8 <I2C_IsErrorOccurred>
 800f360:	4603      	mov	r3, r0
 800f362:	2b00      	cmp	r3, #0
 800f364:	d001      	beq.n	800f36a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800f366:	2301      	movs	r3, #1
 800f368:	e02d      	b.n	800f3c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f36a:	f7fc fa71 	bl	800b850 <HAL_GetTick>
 800f36e:	4602      	mov	r2, r0
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	1ad3      	subs	r3, r2, r3
 800f374:	68ba      	ldr	r2, [r7, #8]
 800f376:	429a      	cmp	r2, r3
 800f378:	d302      	bcc.n	800f380 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d11a      	bne.n	800f3b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	699b      	ldr	r3, [r3, #24]
 800f386:	f003 0320 	and.w	r3, r3, #32
 800f38a:	2b20      	cmp	r3, #32
 800f38c:	d013      	beq.n	800f3b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f392:	f043 0220 	orr.w	r2, r3, #32
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	2220      	movs	r2, #32
 800f39e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	e007      	b.n	800f3c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	699b      	ldr	r3, [r3, #24]
 800f3bc:	f003 0320 	and.w	r3, r3, #32
 800f3c0:	2b20      	cmp	r3, #32
 800f3c2:	d1c8      	bne.n	800f356 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f3c4:	2300      	movs	r3, #0
}
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	3710      	adds	r7, #16
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}
	...

0800f3d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b086      	sub	sp, #24
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	60f8      	str	r0, [r7, #12]
 800f3d8:	60b9      	str	r1, [r7, #8]
 800f3da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f3dc:	2300      	movs	r3, #0
 800f3de:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800f3e0:	e071      	b.n	800f4c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800f3e2:	687a      	ldr	r2, [r7, #4]
 800f3e4:	68b9      	ldr	r1, [r7, #8]
 800f3e6:	68f8      	ldr	r0, [r7, #12]
 800f3e8:	f000 f87e 	bl	800f4e8 <I2C_IsErrorOccurred>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d001      	beq.n	800f3f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	699b      	ldr	r3, [r3, #24]
 800f3fc:	f003 0320 	and.w	r3, r3, #32
 800f400:	2b20      	cmp	r3, #32
 800f402:	d13b      	bne.n	800f47c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800f404:	7dfb      	ldrb	r3, [r7, #23]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d138      	bne.n	800f47c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	699b      	ldr	r3, [r3, #24]
 800f410:	f003 0304 	and.w	r3, r3, #4
 800f414:	2b04      	cmp	r3, #4
 800f416:	d105      	bne.n	800f424 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d001      	beq.n	800f424 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800f420:	2300      	movs	r3, #0
 800f422:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	699b      	ldr	r3, [r3, #24]
 800f42a:	f003 0310 	and.w	r3, r3, #16
 800f42e:	2b10      	cmp	r3, #16
 800f430:	d121      	bne.n	800f476 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	2210      	movs	r2, #16
 800f438:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	2204      	movs	r2, #4
 800f43e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	2220      	movs	r2, #32
 800f446:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	6859      	ldr	r1, [r3, #4]
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	681a      	ldr	r2, [r3, #0]
 800f452:	4b24      	ldr	r3, [pc, #144]	@ (800f4e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800f454:	400b      	ands	r3, r1
 800f456:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	2220      	movs	r2, #32
 800f45c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	2200      	movs	r2, #0
 800f464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	2200      	movs	r2, #0
 800f46c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800f470:	2301      	movs	r3, #1
 800f472:	75fb      	strb	r3, [r7, #23]
 800f474:	e002      	b.n	800f47c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	2200      	movs	r2, #0
 800f47a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800f47c:	f7fc f9e8 	bl	800b850 <HAL_GetTick>
 800f480:	4602      	mov	r2, r0
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	1ad3      	subs	r3, r2, r3
 800f486:	68ba      	ldr	r2, [r7, #8]
 800f488:	429a      	cmp	r2, r3
 800f48a:	d302      	bcc.n	800f492 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d119      	bne.n	800f4c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800f492:	7dfb      	ldrb	r3, [r7, #23]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d116      	bne.n	800f4c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	699b      	ldr	r3, [r3, #24]
 800f49e:	f003 0304 	and.w	r3, r3, #4
 800f4a2:	2b04      	cmp	r3, #4
 800f4a4:	d00f      	beq.n	800f4c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4aa:	f043 0220 	orr.w	r2, r3, #32
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	2220      	movs	r2, #32
 800f4b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	2200      	movs	r2, #0
 800f4be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	699b      	ldr	r3, [r3, #24]
 800f4cc:	f003 0304 	and.w	r3, r3, #4
 800f4d0:	2b04      	cmp	r3, #4
 800f4d2:	d002      	beq.n	800f4da <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800f4d4:	7dfb      	ldrb	r3, [r7, #23]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d083      	beq.n	800f3e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800f4da:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	3718      	adds	r7, #24
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}
 800f4e4:	fe00e800 	.word	0xfe00e800

0800f4e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b08a      	sub	sp, #40	@ 0x28
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	60f8      	str	r0, [r7, #12]
 800f4f0:	60b9      	str	r1, [r7, #8]
 800f4f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	699b      	ldr	r3, [r3, #24]
 800f500:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800f502:	2300      	movs	r3, #0
 800f504:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800f50a:	69bb      	ldr	r3, [r7, #24]
 800f50c:	f003 0310 	and.w	r3, r3, #16
 800f510:	2b00      	cmp	r3, #0
 800f512:	d068      	beq.n	800f5e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	2210      	movs	r2, #16
 800f51a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800f51c:	e049      	b.n	800f5b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f524:	d045      	beq.n	800f5b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800f526:	f7fc f993 	bl	800b850 <HAL_GetTick>
 800f52a:	4602      	mov	r2, r0
 800f52c:	69fb      	ldr	r3, [r7, #28]
 800f52e:	1ad3      	subs	r3, r2, r3
 800f530:	68ba      	ldr	r2, [r7, #8]
 800f532:	429a      	cmp	r2, r3
 800f534:	d302      	bcc.n	800f53c <I2C_IsErrorOccurred+0x54>
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d13a      	bne.n	800f5b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	685b      	ldr	r3, [r3, #4]
 800f542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f546:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f54e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	699b      	ldr	r3, [r3, #24]
 800f556:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f55a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f55e:	d121      	bne.n	800f5a4 <I2C_IsErrorOccurred+0xbc>
 800f560:	697b      	ldr	r3, [r7, #20]
 800f562:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f566:	d01d      	beq.n	800f5a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800f568:	7cfb      	ldrb	r3, [r7, #19]
 800f56a:	2b20      	cmp	r3, #32
 800f56c:	d01a      	beq.n	800f5a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	685a      	ldr	r2, [r3, #4]
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f57c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800f57e:	f7fc f967 	bl	800b850 <HAL_GetTick>
 800f582:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800f584:	e00e      	b.n	800f5a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800f586:	f7fc f963 	bl	800b850 <HAL_GetTick>
 800f58a:	4602      	mov	r2, r0
 800f58c:	69fb      	ldr	r3, [r7, #28]
 800f58e:	1ad3      	subs	r3, r2, r3
 800f590:	2b19      	cmp	r3, #25
 800f592:	d907      	bls.n	800f5a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800f594:	6a3b      	ldr	r3, [r7, #32]
 800f596:	f043 0320 	orr.w	r3, r3, #32
 800f59a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800f59c:	2301      	movs	r3, #1
 800f59e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800f5a2:	e006      	b.n	800f5b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	699b      	ldr	r3, [r3, #24]
 800f5aa:	f003 0320 	and.w	r3, r3, #32
 800f5ae:	2b20      	cmp	r3, #32
 800f5b0:	d1e9      	bne.n	800f586 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	699b      	ldr	r3, [r3, #24]
 800f5b8:	f003 0320 	and.w	r3, r3, #32
 800f5bc:	2b20      	cmp	r3, #32
 800f5be:	d003      	beq.n	800f5c8 <I2C_IsErrorOccurred+0xe0>
 800f5c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d0aa      	beq.n	800f51e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800f5c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d103      	bne.n	800f5d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	2220      	movs	r2, #32
 800f5d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800f5d8:	6a3b      	ldr	r3, [r7, #32]
 800f5da:	f043 0304 	orr.w	r3, r3, #4
 800f5de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	699b      	ldr	r3, [r3, #24]
 800f5ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800f5ee:	69bb      	ldr	r3, [r7, #24]
 800f5f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d00b      	beq.n	800f610 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800f5f8:	6a3b      	ldr	r3, [r7, #32]
 800f5fa:	f043 0301 	orr.w	r3, r3, #1
 800f5fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f608:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800f60a:	2301      	movs	r3, #1
 800f60c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800f610:	69bb      	ldr	r3, [r7, #24]
 800f612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f616:	2b00      	cmp	r3, #0
 800f618:	d00b      	beq.n	800f632 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800f61a:	6a3b      	ldr	r3, [r7, #32]
 800f61c:	f043 0308 	orr.w	r3, r3, #8
 800f620:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800f62a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800f62c:	2301      	movs	r3, #1
 800f62e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800f632:	69bb      	ldr	r3, [r7, #24]
 800f634:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d00b      	beq.n	800f654 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800f63c:	6a3b      	ldr	r3, [r7, #32]
 800f63e:	f043 0302 	orr.w	r3, r3, #2
 800f642:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f64c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800f64e:	2301      	movs	r3, #1
 800f650:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800f654:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d01c      	beq.n	800f696 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f65c:	68f8      	ldr	r0, [r7, #12]
 800f65e:	f7ff fdaf 	bl	800f1c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	6859      	ldr	r1, [r3, #4]
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	681a      	ldr	r2, [r3, #0]
 800f66c:	4b0d      	ldr	r3, [pc, #52]	@ (800f6a4 <I2C_IsErrorOccurred+0x1bc>)
 800f66e:	400b      	ands	r3, r1
 800f670:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f676:	6a3b      	ldr	r3, [r7, #32]
 800f678:	431a      	orrs	r2, r3
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	2220      	movs	r2, #32
 800f682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	2200      	movs	r2, #0
 800f68a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	2200      	movs	r2, #0
 800f692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800f696:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	3728      	adds	r7, #40	@ 0x28
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}
 800f6a2:	bf00      	nop
 800f6a4:	fe00e800 	.word	0xfe00e800

0800f6a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800f6a8:	b480      	push	{r7}
 800f6aa:	b087      	sub	sp, #28
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	60f8      	str	r0, [r7, #12]
 800f6b0:	607b      	str	r3, [r7, #4]
 800f6b2:	460b      	mov	r3, r1
 800f6b4:	817b      	strh	r3, [r7, #10]
 800f6b6:	4613      	mov	r3, r2
 800f6b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f6ba:	897b      	ldrh	r3, [r7, #10]
 800f6bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f6c0:	7a7b      	ldrb	r3, [r7, #9]
 800f6c2:	041b      	lsls	r3, r3, #16
 800f6c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f6c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f6ce:	6a3b      	ldr	r3, [r7, #32]
 800f6d0:	4313      	orrs	r3, r2
 800f6d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f6d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	685a      	ldr	r2, [r3, #4]
 800f6de:	6a3b      	ldr	r3, [r7, #32]
 800f6e0:	0d5b      	lsrs	r3, r3, #21
 800f6e2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800f6e6:	4b08      	ldr	r3, [pc, #32]	@ (800f708 <I2C_TransferConfig+0x60>)
 800f6e8:	430b      	orrs	r3, r1
 800f6ea:	43db      	mvns	r3, r3
 800f6ec:	ea02 0103 	and.w	r1, r2, r3
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	697a      	ldr	r2, [r7, #20]
 800f6f6:	430a      	orrs	r2, r1
 800f6f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800f6fa:	bf00      	nop
 800f6fc:	371c      	adds	r7, #28
 800f6fe:	46bd      	mov	sp, r7
 800f700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f704:	4770      	bx	lr
 800f706:	bf00      	nop
 800f708:	03ff63ff 	.word	0x03ff63ff

0800f70c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800f70c:	b480      	push	{r7}
 800f70e:	b083      	sub	sp, #12
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
 800f714:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f71c:	b2db      	uxtb	r3, r3
 800f71e:	2b20      	cmp	r3, #32
 800f720:	d138      	bne.n	800f794 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f728:	2b01      	cmp	r3, #1
 800f72a:	d101      	bne.n	800f730 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800f72c:	2302      	movs	r3, #2
 800f72e:	e032      	b.n	800f796 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2201      	movs	r2, #1
 800f734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2224      	movs	r2, #36	@ 0x24
 800f73c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	681a      	ldr	r2, [r3, #0]
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	f022 0201 	bic.w	r2, r2, #1
 800f74e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	681a      	ldr	r2, [r3, #0]
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800f75e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	6819      	ldr	r1, [r3, #0]
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	683a      	ldr	r2, [r7, #0]
 800f76c:	430a      	orrs	r2, r1
 800f76e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	681a      	ldr	r2, [r3, #0]
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	f042 0201 	orr.w	r2, r2, #1
 800f77e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2220      	movs	r2, #32
 800f784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2200      	movs	r2, #0
 800f78c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800f790:	2300      	movs	r3, #0
 800f792:	e000      	b.n	800f796 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f794:	2302      	movs	r3, #2
  }
}
 800f796:	4618      	mov	r0, r3
 800f798:	370c      	adds	r7, #12
 800f79a:	46bd      	mov	sp, r7
 800f79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a0:	4770      	bx	lr

0800f7a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800f7a2:	b480      	push	{r7}
 800f7a4:	b085      	sub	sp, #20
 800f7a6:	af00      	add	r7, sp, #0
 800f7a8:	6078      	str	r0, [r7, #4]
 800f7aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f7b2:	b2db      	uxtb	r3, r3
 800f7b4:	2b20      	cmp	r3, #32
 800f7b6:	d139      	bne.n	800f82c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f7be:	2b01      	cmp	r3, #1
 800f7c0:	d101      	bne.n	800f7c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800f7c2:	2302      	movs	r3, #2
 800f7c4:	e033      	b.n	800f82e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	2201      	movs	r2, #1
 800f7ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2224      	movs	r2, #36	@ 0x24
 800f7d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	681a      	ldr	r2, [r3, #0]
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	f022 0201 	bic.w	r2, r2, #1
 800f7e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800f7f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	021b      	lsls	r3, r3, #8
 800f7fa:	68fa      	ldr	r2, [r7, #12]
 800f7fc:	4313      	orrs	r3, r2
 800f7fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	68fa      	ldr	r2, [r7, #12]
 800f806:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	681a      	ldr	r2, [r3, #0]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	f042 0201 	orr.w	r2, r2, #1
 800f816:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2220      	movs	r2, #32
 800f81c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2200      	movs	r2, #0
 800f824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800f828:	2300      	movs	r3, #0
 800f82a:	e000      	b.n	800f82e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800f82c:	2302      	movs	r3, #2
  }
}
 800f82e:	4618      	mov	r0, r3
 800f830:	3714      	adds	r7, #20
 800f832:	46bd      	mov	sp, r7
 800f834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f838:	4770      	bx	lr
	...

0800f83c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800f83c:	b480      	push	{r7}
 800f83e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800f840:	4b04      	ldr	r3, [pc, #16]	@ (800f854 <HAL_PWREx_GetVoltageRange+0x18>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800f848:	4618      	mov	r0, r3
 800f84a:	46bd      	mov	sp, r7
 800f84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f850:	4770      	bx	lr
 800f852:	bf00      	nop
 800f854:	40007000 	.word	0x40007000

0800f858 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800f858:	b480      	push	{r7}
 800f85a:	b085      	sub	sp, #20
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f866:	d130      	bne.n	800f8ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800f868:	4b23      	ldr	r3, [pc, #140]	@ (800f8f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f874:	d038      	beq.n	800f8e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800f876:	4b20      	ldr	r3, [pc, #128]	@ (800f8f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800f87e:	4a1e      	ldr	r2, [pc, #120]	@ (800f8f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f880:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800f884:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800f886:	4b1d      	ldr	r3, [pc, #116]	@ (800f8fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	2232      	movs	r2, #50	@ 0x32
 800f88c:	fb02 f303 	mul.w	r3, r2, r3
 800f890:	4a1b      	ldr	r2, [pc, #108]	@ (800f900 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800f892:	fba2 2303 	umull	r2, r3, r2, r3
 800f896:	0c9b      	lsrs	r3, r3, #18
 800f898:	3301      	adds	r3, #1
 800f89a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f89c:	e002      	b.n	800f8a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	3b01      	subs	r3, #1
 800f8a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f8a4:	4b14      	ldr	r3, [pc, #80]	@ (800f8f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f8a6:	695b      	ldr	r3, [r3, #20]
 800f8a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f8ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f8b0:	d102      	bne.n	800f8b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d1f2      	bne.n	800f89e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800f8b8:	4b0f      	ldr	r3, [pc, #60]	@ (800f8f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f8ba:	695b      	ldr	r3, [r3, #20]
 800f8bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f8c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f8c4:	d110      	bne.n	800f8e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800f8c6:	2303      	movs	r3, #3
 800f8c8:	e00f      	b.n	800f8ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800f8ca:	4b0b      	ldr	r3, [pc, #44]	@ (800f8f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f8d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f8d6:	d007      	beq.n	800f8e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800f8d8:	4b07      	ldr	r3, [pc, #28]	@ (800f8f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800f8e0:	4a05      	ldr	r2, [pc, #20]	@ (800f8f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f8e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800f8e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800f8e8:	2300      	movs	r3, #0
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	3714      	adds	r7, #20
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f4:	4770      	bx	lr
 800f8f6:	bf00      	nop
 800f8f8:	40007000 	.word	0x40007000
 800f8fc:	20000000 	.word	0x20000000
 800f900:	431bde83 	.word	0x431bde83

0800f904 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b086      	sub	sp, #24
 800f908:	af02      	add	r7, sp, #8
 800f90a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f90c:	f7fb ffa0 	bl	800b850 <HAL_GetTick>
 800f910:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d101      	bne.n	800f91c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800f918:	2301      	movs	r3, #1
 800f91a:	e063      	b.n	800f9e4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f922:	b2db      	uxtb	r3, r3
 800f924:	2b00      	cmp	r3, #0
 800f926:	d10b      	bne.n	800f940 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2200      	movs	r2, #0
 800f92c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f7f8 fac7 	bl	8007ec4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800f936:	f241 3188 	movw	r1, #5000	@ 0x1388
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f000 fa68 	bl	800fe10 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	689b      	ldr	r3, [r3, #8]
 800f94e:	3b01      	subs	r3, #1
 800f950:	021a      	lsls	r2, r3, #8
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	430a      	orrs	r2, r1
 800f958:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f95e:	9300      	str	r3, [sp, #0]
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	2200      	movs	r2, #0
 800f964:	2120      	movs	r1, #32
 800f966:	6878      	ldr	r0, [r7, #4]
 800f968:	f000 fa60 	bl	800fe2c <QSPI_WaitFlagStateUntilTimeout>
 800f96c:	4603      	mov	r3, r0
 800f96e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800f970:	7afb      	ldrb	r3, [r7, #11]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d131      	bne.n	800f9da <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f980:	f023 0310 	bic.w	r3, r3, #16
 800f984:	687a      	ldr	r2, [r7, #4]
 800f986:	6852      	ldr	r2, [r2, #4]
 800f988:	0611      	lsls	r1, r2, #24
 800f98a:	687a      	ldr	r2, [r7, #4]
 800f98c:	68d2      	ldr	r2, [r2, #12]
 800f98e:	4311      	orrs	r1, r2
 800f990:	687a      	ldr	r2, [r7, #4]
 800f992:	6812      	ldr	r2, [r2, #0]
 800f994:	430b      	orrs	r3, r1
 800f996:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	685a      	ldr	r2, [r3, #4]
 800f99e:	4b13      	ldr	r3, [pc, #76]	@ (800f9ec <HAL_QSPI_Init+0xe8>)
 800f9a0:	4013      	ands	r3, r2
 800f9a2:	687a      	ldr	r2, [r7, #4]
 800f9a4:	6912      	ldr	r2, [r2, #16]
 800f9a6:	0411      	lsls	r1, r2, #16
 800f9a8:	687a      	ldr	r2, [r7, #4]
 800f9aa:	6952      	ldr	r2, [r2, #20]
 800f9ac:	4311      	orrs	r1, r2
 800f9ae:	687a      	ldr	r2, [r7, #4]
 800f9b0:	6992      	ldr	r2, [r2, #24]
 800f9b2:	4311      	orrs	r1, r2
 800f9b4:	687a      	ldr	r2, [r7, #4]
 800f9b6:	6812      	ldr	r2, [r2, #0]
 800f9b8:	430b      	orrs	r3, r1
 800f9ba:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	681a      	ldr	r2, [r3, #0]
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	f042 0201 	orr.w	r2, r2, #1
 800f9ca:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2201      	movs	r2, #1
 800f9d6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800f9e2:	7afb      	ldrb	r3, [r7, #11]
}
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	3710      	adds	r7, #16
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}
 800f9ec:	ffe0f8fe 	.word	0xffe0f8fe

0800f9f0 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b088      	sub	sp, #32
 800f9f4:	af02      	add	r7, sp, #8
 800f9f6:	60f8      	str	r0, [r7, #12]
 800f9f8:	60b9      	str	r1, [r7, #8]
 800f9fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f9fc:	f7fb ff28 	bl	800b850 <HAL_GetTick>
 800fa00:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fa08:	b2db      	uxtb	r3, r3
 800fa0a:	2b01      	cmp	r3, #1
 800fa0c:	d101      	bne.n	800fa12 <HAL_QSPI_Command+0x22>
 800fa0e:	2302      	movs	r3, #2
 800fa10:	e048      	b.n	800faa4 <HAL_QSPI_Command+0xb4>
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	2201      	movs	r2, #1
 800fa16:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800fa20:	b2db      	uxtb	r3, r3
 800fa22:	2b01      	cmp	r3, #1
 800fa24:	d137      	bne.n	800fa96 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	2202      	movs	r2, #2
 800fa30:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	9300      	str	r3, [sp, #0]
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	2120      	movs	r1, #32
 800fa3e:	68f8      	ldr	r0, [r7, #12]
 800fa40:	f000 f9f4 	bl	800fe2c <QSPI_WaitFlagStateUntilTimeout>
 800fa44:	4603      	mov	r3, r0
 800fa46:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800fa48:	7dfb      	ldrb	r3, [r7, #23]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d125      	bne.n	800fa9a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800fa4e:	2200      	movs	r2, #0
 800fa50:	68b9      	ldr	r1, [r7, #8]
 800fa52:	68f8      	ldr	r0, [r7, #12]
 800fa54:	f000 fa21 	bl	800fe9a <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d115      	bne.n	800fa8c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	9300      	str	r3, [sp, #0]
 800fa64:	693b      	ldr	r3, [r7, #16]
 800fa66:	2201      	movs	r2, #1
 800fa68:	2102      	movs	r1, #2
 800fa6a:	68f8      	ldr	r0, [r7, #12]
 800fa6c:	f000 f9de 	bl	800fe2c <QSPI_WaitFlagStateUntilTimeout>
 800fa70:	4603      	mov	r3, r0
 800fa72:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800fa74:	7dfb      	ldrb	r3, [r7, #23]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d10f      	bne.n	800fa9a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	2202      	movs	r2, #2
 800fa80:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	2201      	movs	r2, #1
 800fa86:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800fa8a:	e006      	b.n	800fa9a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	2201      	movs	r2, #1
 800fa90:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800fa94:	e001      	b.n	800fa9a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800fa96:	2302      	movs	r3, #2
 800fa98:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800faa2:	7dfb      	ldrb	r3, [r7, #23]
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3718      	adds	r7, #24
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}

0800faac <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b08a      	sub	sp, #40	@ 0x28
 800fab0:	af02      	add	r7, sp, #8
 800fab2:	60f8      	str	r0, [r7, #12]
 800fab4:	60b9      	str	r1, [r7, #8]
 800fab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fab8:	2300      	movs	r3, #0
 800faba:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800fabc:	f7fb fec8 	bl	800b850 <HAL_GetTick>
 800fac0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	3320      	adds	r3, #32
 800fac8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fad0:	b2db      	uxtb	r3, r3
 800fad2:	2b01      	cmp	r3, #1
 800fad4:	d101      	bne.n	800fada <HAL_QSPI_Transmit+0x2e>
 800fad6:	2302      	movs	r3, #2
 800fad8:	e07b      	b.n	800fbd2 <HAL_QSPI_Transmit+0x126>
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	2201      	movs	r2, #1
 800fade:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800fae8:	b2db      	uxtb	r3, r3
 800faea:	2b01      	cmp	r3, #1
 800faec:	d16a      	bne.n	800fbc4 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	2200      	movs	r2, #0
 800faf2:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d05b      	beq.n	800fbb2 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	2212      	movs	r2, #18
 800fafe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	691b      	ldr	r3, [r3, #16]
 800fb08:	1c5a      	adds	r2, r3, #1
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	625a      	str	r2, [r3, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	691b      	ldr	r3, [r3, #16]
 800fb14:	1c5a      	adds	r2, r3, #1
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	68ba      	ldr	r2, [r7, #8]
 800fb1e:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	695a      	ldr	r2, [r3, #20]
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800fb2e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800fb30:	e01b      	b.n	800fb6a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	9300      	str	r3, [sp, #0]
 800fb36:	69bb      	ldr	r3, [r7, #24]
 800fb38:	2201      	movs	r2, #1
 800fb3a:	2104      	movs	r1, #4
 800fb3c:	68f8      	ldr	r0, [r7, #12]
 800fb3e:	f000 f975 	bl	800fe2c <QSPI_WaitFlagStateUntilTimeout>
 800fb42:	4603      	mov	r3, r0
 800fb44:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800fb46:	7ffb      	ldrb	r3, [r7, #31]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d113      	bne.n	800fb74 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	69db      	ldr	r3, [r3, #28]
 800fb50:	781a      	ldrb	r2, [r3, #0]
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	69db      	ldr	r3, [r3, #28]
 800fb5a:	1c5a      	adds	r2, r3, #1
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb64:	1e5a      	subs	r2, r3, #1
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	625a      	str	r2, [r3, #36]	@ 0x24
      while(hqspi->TxXferCount > 0U)
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d1df      	bne.n	800fb32 <HAL_QSPI_Transmit+0x86>
 800fb72:	e000      	b.n	800fb76 <HAL_QSPI_Transmit+0xca>
          break;
 800fb74:	bf00      	nop
      }

      if (status == HAL_OK)
 800fb76:	7ffb      	ldrb	r3, [r7, #31]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d115      	bne.n	800fba8 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	9300      	str	r3, [sp, #0]
 800fb80:	69bb      	ldr	r3, [r7, #24]
 800fb82:	2201      	movs	r2, #1
 800fb84:	2102      	movs	r1, #2
 800fb86:	68f8      	ldr	r0, [r7, #12]
 800fb88:	f000 f950 	bl	800fe2c <QSPI_WaitFlagStateUntilTimeout>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800fb90:	7ffb      	ldrb	r3, [r7, #31]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d108      	bne.n	800fba8 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	2202      	movs	r2, #2
 800fb9c:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800fb9e:	68f8      	ldr	r0, [r7, #12]
 800fba0:	f000 f8bd 	bl	800fd1e <HAL_QSPI_Abort>
 800fba4:	4603      	mov	r3, r0
 800fba6:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	2201      	movs	r2, #1
 800fbac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800fbb0:	e00a      	b.n	800fbc8 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fbb6:	f043 0208 	orr.w	r2, r3, #8
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800fbbe:	2301      	movs	r3, #1
 800fbc0:	77fb      	strb	r3, [r7, #31]
 800fbc2:	e001      	b.n	800fbc8 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800fbc4:	2302      	movs	r3, #2
 800fbc6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	2200      	movs	r2, #0
 800fbcc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800fbd0:	7ffb      	ldrb	r3, [r7, #31]
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3720      	adds	r7, #32
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}

0800fbda <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800fbda:	b580      	push	{r7, lr}
 800fbdc:	b08a      	sub	sp, #40	@ 0x28
 800fbde:	af02      	add	r7, sp, #8
 800fbe0:	60f8      	str	r0, [r7, #12]
 800fbe2:	60b9      	str	r1, [r7, #8]
 800fbe4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800fbea:	f7fb fe31 	bl	800b850 <HAL_GetTick>
 800fbee:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	699b      	ldr	r3, [r3, #24]
 800fbf6:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	3320      	adds	r3, #32
 800fbfe:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fc06:	b2db      	uxtb	r3, r3
 800fc08:	2b01      	cmp	r3, #1
 800fc0a:	d101      	bne.n	800fc10 <HAL_QSPI_Receive+0x36>
 800fc0c:	2302      	movs	r3, #2
 800fc0e:	e082      	b.n	800fd16 <HAL_QSPI_Receive+0x13c>
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	2201      	movs	r2, #1
 800fc14:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800fc1e:	b2db      	uxtb	r3, r3
 800fc20:	2b01      	cmp	r3, #1
 800fc22:	d171      	bne.n	800fd08 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	2200      	movs	r2, #0
 800fc28:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800fc2a:	68bb      	ldr	r3, [r7, #8]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d062      	beq.n	800fcf6 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	2222      	movs	r2, #34	@ 0x22
 800fc34:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	691b      	ldr	r3, [r3, #16]
 800fc3e:	1c5a      	adds	r2, r3, #1
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	631a      	str	r2, [r3, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	691b      	ldr	r3, [r3, #16]
 800fc4a:	1c5a      	adds	r2, r3, #1
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->pRxBuffPtr = pData;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	68ba      	ldr	r2, [r7, #8]
 800fc54:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	695b      	ldr	r3, [r3, #20]
 800fc5c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800fc68:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	697a      	ldr	r2, [r7, #20]
 800fc70:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800fc72:	e01c      	b.n	800fcae <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	9300      	str	r3, [sp, #0]
 800fc78:	69bb      	ldr	r3, [r7, #24]
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	2106      	movs	r1, #6
 800fc7e:	68f8      	ldr	r0, [r7, #12]
 800fc80:	f000 f8d4 	bl	800fe2c <QSPI_WaitFlagStateUntilTimeout>
 800fc84:	4603      	mov	r3, r0
 800fc86:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800fc88:	7ffb      	ldrb	r3, [r7, #31]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d114      	bne.n	800fcb8 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc92:	693a      	ldr	r2, [r7, #16]
 800fc94:	7812      	ldrb	r2, [r2, #0]
 800fc96:	b2d2      	uxtb	r2, r2
 800fc98:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc9e:	1c5a      	adds	r2, r3, #1
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	629a      	str	r2, [r3, #40]	@ 0x28
        hqspi->RxXferCount--;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fca8:	1e5a      	subs	r2, r3, #1
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	631a      	str	r2, [r3, #48]	@ 0x30
      while(hqspi->RxXferCount > 0U)
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d1de      	bne.n	800fc74 <HAL_QSPI_Receive+0x9a>
 800fcb6:	e000      	b.n	800fcba <HAL_QSPI_Receive+0xe0>
          break;
 800fcb8:	bf00      	nop
      }

      if (status == HAL_OK)
 800fcba:	7ffb      	ldrb	r3, [r7, #31]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d115      	bne.n	800fcec <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	9300      	str	r3, [sp, #0]
 800fcc4:	69bb      	ldr	r3, [r7, #24]
 800fcc6:	2201      	movs	r2, #1
 800fcc8:	2102      	movs	r1, #2
 800fcca:	68f8      	ldr	r0, [r7, #12]
 800fccc:	f000 f8ae 	bl	800fe2c <QSPI_WaitFlagStateUntilTimeout>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800fcd4:	7ffb      	ldrb	r3, [r7, #31]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d108      	bne.n	800fcec <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	2202      	movs	r2, #2
 800fce0:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800fce2:	68f8      	ldr	r0, [r7, #12]
 800fce4:	f000 f81b 	bl	800fd1e <HAL_QSPI_Abort>
 800fce8:	4603      	mov	r3, r0
 800fcea:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	2201      	movs	r2, #1
 800fcf0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800fcf4:	e00a      	b.n	800fd0c <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fcfa:	f043 0208 	orr.w	r2, r3, #8
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800fd02:	2301      	movs	r3, #1
 800fd04:	77fb      	strb	r3, [r7, #31]
 800fd06:	e001      	b.n	800fd0c <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800fd08:	2302      	movs	r3, #2
 800fd0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	2200      	movs	r2, #0
 800fd10:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800fd14:	7ffb      	ldrb	r3, [r7, #31]
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	3720      	adds	r7, #32
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}

0800fd1e <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800fd1e:	b580      	push	{r7, lr}
 800fd20:	b086      	sub	sp, #24
 800fd22:	af02      	add	r7, sp, #8
 800fd24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fd26:	2300      	movs	r3, #0
 800fd28:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800fd2a:	f7fb fd91 	bl	800b850 <HAL_GetTick>
 800fd2e:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800fd36:	b2db      	uxtb	r3, r3
 800fd38:	f003 0302 	and.w	r3, r3, #2
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d062      	beq.n	800fe06 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2200      	movs	r2, #0
 800fd44:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	f003 0304 	and.w	r3, r3, #4
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d017      	beq.n	800fd86 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	681a      	ldr	r2, [r3, #0]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f022 0204 	bic.w	r2, r2, #4
 800fd64:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f7fd fdb6 	bl	800d8dc <HAL_DMA_Abort>
 800fd70:	4603      	mov	r3, r0
 800fd72:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800fd74:	7bfb      	ldrb	r3, [r7, #15]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d005      	beq.n	800fd86 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd7e:	f043 0204 	orr.w	r2, r3, #4
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	689b      	ldr	r3, [r3, #8]
 800fd8c:	f003 0320 	and.w	r3, r3, #32
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d034      	beq.n	800fdfe <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	681a      	ldr	r2, [r3, #0]
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	f042 0202 	orr.w	r2, r2, #2
 800fda2:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fda8:	9300      	str	r3, [sp, #0]
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	2201      	movs	r2, #1
 800fdae:	2102      	movs	r1, #2
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f000 f83b 	bl	800fe2c <QSPI_WaitFlagStateUntilTimeout>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 800fdba:	7bfb      	ldrb	r3, [r7, #15]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d10e      	bne.n	800fdde <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	2202      	movs	r2, #2
 800fdc6:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fdcc:	9300      	str	r3, [sp, #0]
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	2120      	movs	r1, #32
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f000 f829 	bl	800fe2c <QSPI_WaitFlagStateUntilTimeout>
 800fdda:	4603      	mov	r3, r0
 800fddc:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800fdde:	7bfb      	ldrb	r3, [r7, #15]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d110      	bne.n	800fe06 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	695a      	ldr	r2, [r3, #20]
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800fdf2:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800fdfc:	e003      	b.n	800fe06 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2201      	movs	r2, #1
 800fe02:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    }
  }

  return status;
 800fe06:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe08:	4618      	mov	r0, r3
 800fe0a:	3710      	adds	r7, #16
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}

0800fe10 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800fe10:	b480      	push	{r7}
 800fe12:	b083      	sub	sp, #12
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
 800fe18:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	683a      	ldr	r2, [r7, #0]
 800fe1e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800fe20:	bf00      	nop
 800fe22:	370c      	adds	r7, #12
 800fe24:	46bd      	mov	sp, r7
 800fe26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2a:	4770      	bx	lr

0800fe2c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b084      	sub	sp, #16
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	60f8      	str	r0, [r7, #12]
 800fe34:	60b9      	str	r1, [r7, #8]
 800fe36:	603b      	str	r3, [r7, #0]
 800fe38:	4613      	mov	r3, r2
 800fe3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800fe3c:	e01a      	b.n	800fe74 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fe3e:	69bb      	ldr	r3, [r7, #24]
 800fe40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe44:	d016      	beq.n	800fe74 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fe46:	f7fb fd03 	bl	800b850 <HAL_GetTick>
 800fe4a:	4602      	mov	r2, r0
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	1ad3      	subs	r3, r2, r3
 800fe50:	69ba      	ldr	r2, [r7, #24]
 800fe52:	429a      	cmp	r2, r3
 800fe54:	d302      	bcc.n	800fe5c <QSPI_WaitFlagStateUntilTimeout+0x30>
 800fe56:	69bb      	ldr	r3, [r7, #24]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d10b      	bne.n	800fe74 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	2204      	movs	r2, #4
 800fe60:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe68:	f043 0201 	orr.w	r2, r3, #1
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800fe70:	2301      	movs	r3, #1
 800fe72:	e00e      	b.n	800fe92 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	689a      	ldr	r2, [r3, #8]
 800fe7a:	68bb      	ldr	r3, [r7, #8]
 800fe7c:	4013      	ands	r3, r2
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	bf14      	ite	ne
 800fe82:	2301      	movne	r3, #1
 800fe84:	2300      	moveq	r3, #0
 800fe86:	b2db      	uxtb	r3, r3
 800fe88:	461a      	mov	r2, r3
 800fe8a:	79fb      	ldrb	r3, [r7, #7]
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d1d6      	bne.n	800fe3e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800fe90:	2300      	movs	r3, #0
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	3710      	adds	r7, #16
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}

0800fe9a <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800fe9a:	b480      	push	{r7}
 800fe9c:	b085      	sub	sp, #20
 800fe9e:	af00      	add	r7, sp, #0
 800fea0:	60f8      	str	r0, [r7, #12]
 800fea2:	60b9      	str	r1, [r7, #8]
 800fea4:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d009      	beq.n	800fec2 <QSPI_Config+0x28>
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800feb4:	d005      	beq.n	800fec2 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800feb6:	68bb      	ldr	r3, [r7, #8]
 800feb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	3a01      	subs	r2, #1
 800fec0:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800fec2:	68bb      	ldr	r3, [r7, #8]
 800fec4:	699b      	ldr	r3, [r3, #24]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	f000 80c1 	beq.w	801004e <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	6a1b      	ldr	r3, [r3, #32]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d063      	beq.n	800ff9c <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	68ba      	ldr	r2, [r7, #8]
 800feda:	6892      	ldr	r2, [r2, #8]
 800fedc:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800fede:	68bb      	ldr	r3, [r7, #8]
 800fee0:	69db      	ldr	r3, [r3, #28]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d031      	beq.n	800ff4a <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fee6:	68bb      	ldr	r3, [r7, #8]
 800fee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800feea:	68bb      	ldr	r3, [r7, #8]
 800feec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800feee:	431a      	orrs	r2, r3
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fef4:	431a      	orrs	r2, r3
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fefa:	431a      	orrs	r2, r3
 800fefc:	68bb      	ldr	r3, [r7, #8]
 800fefe:	695b      	ldr	r3, [r3, #20]
 800ff00:	049b      	lsls	r3, r3, #18
 800ff02:	431a      	orrs	r2, r3
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	691b      	ldr	r3, [r3, #16]
 800ff08:	431a      	orrs	r2, r3
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	6a1b      	ldr	r3, [r3, #32]
 800ff0e:	431a      	orrs	r2, r3
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	68db      	ldr	r3, [r3, #12]
 800ff14:	431a      	orrs	r2, r3
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	69db      	ldr	r3, [r3, #28]
 800ff1a:	431a      	orrs	r2, r3
 800ff1c:	68bb      	ldr	r3, [r7, #8]
 800ff1e:	699b      	ldr	r3, [r3, #24]
 800ff20:	431a      	orrs	r2, r3
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	ea42 0103 	orr.w	r1, r2, r3
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	687a      	ldr	r2, [r7, #4]
 800ff30:	430a      	orrs	r2, r1
 800ff32:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ff3a:	f000 813f 	beq.w	80101bc <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	68ba      	ldr	r2, [r7, #8]
 800ff44:	6852      	ldr	r2, [r2, #4]
 800ff46:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800ff48:	e138      	b.n	80101bc <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff4e:	68bb      	ldr	r3, [r7, #8]
 800ff50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff52:	431a      	orrs	r2, r3
 800ff54:	68bb      	ldr	r3, [r7, #8]
 800ff56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff58:	431a      	orrs	r2, r3
 800ff5a:	68bb      	ldr	r3, [r7, #8]
 800ff5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff5e:	431a      	orrs	r2, r3
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	695b      	ldr	r3, [r3, #20]
 800ff64:	049b      	lsls	r3, r3, #18
 800ff66:	431a      	orrs	r2, r3
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	691b      	ldr	r3, [r3, #16]
 800ff6c:	431a      	orrs	r2, r3
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	6a1b      	ldr	r3, [r3, #32]
 800ff72:	431a      	orrs	r2, r3
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	69db      	ldr	r3, [r3, #28]
 800ff78:	431a      	orrs	r2, r3
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	699b      	ldr	r3, [r3, #24]
 800ff7e:	431a      	orrs	r2, r3
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	ea42 0103 	orr.w	r1, r2, r3
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	687a      	ldr	r2, [r7, #4]
 800ff8e:	430a      	orrs	r2, r1
 800ff90:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	2200      	movs	r2, #0
 800ff98:	619a      	str	r2, [r3, #24]
}
 800ff9a:	e10f      	b.n	80101bc <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	69db      	ldr	r3, [r3, #28]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d02e      	beq.n	8010002 <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffac:	431a      	orrs	r2, r3
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ffb2:	431a      	orrs	r2, r3
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffb8:	431a      	orrs	r2, r3
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	695b      	ldr	r3, [r3, #20]
 800ffbe:	049b      	lsls	r3, r3, #18
 800ffc0:	431a      	orrs	r2, r3
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	6a1b      	ldr	r3, [r3, #32]
 800ffc6:	431a      	orrs	r2, r3
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	68db      	ldr	r3, [r3, #12]
 800ffcc:	431a      	orrs	r2, r3
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	69db      	ldr	r3, [r3, #28]
 800ffd2:	431a      	orrs	r2, r3
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	699b      	ldr	r3, [r3, #24]
 800ffd8:	431a      	orrs	r2, r3
 800ffda:	68bb      	ldr	r3, [r7, #8]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	ea42 0103 	orr.w	r1, r2, r3
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	687a      	ldr	r2, [r7, #4]
 800ffe8:	430a      	orrs	r2, r1
 800ffea:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800fff2:	f000 80e3 	beq.w	80101bc <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	68ba      	ldr	r2, [r7, #8]
 800fffc:	6852      	ldr	r2, [r2, #4]
 800fffe:	619a      	str	r2, [r3, #24]
}
 8010000:	e0dc      	b.n	80101bc <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010006:	68bb      	ldr	r3, [r7, #8]
 8010008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801000a:	431a      	orrs	r2, r3
 801000c:	68bb      	ldr	r3, [r7, #8]
 801000e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010010:	431a      	orrs	r2, r3
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010016:	431a      	orrs	r2, r3
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	695b      	ldr	r3, [r3, #20]
 801001c:	049b      	lsls	r3, r3, #18
 801001e:	431a      	orrs	r2, r3
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	6a1b      	ldr	r3, [r3, #32]
 8010024:	431a      	orrs	r2, r3
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	69db      	ldr	r3, [r3, #28]
 801002a:	431a      	orrs	r2, r3
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	699b      	ldr	r3, [r3, #24]
 8010030:	431a      	orrs	r2, r3
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	ea42 0103 	orr.w	r1, r2, r3
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	687a      	ldr	r2, [r7, #4]
 8010040:	430a      	orrs	r2, r1
 8010042:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	2200      	movs	r2, #0
 801004a:	619a      	str	r2, [r3, #24]
}
 801004c:	e0b6      	b.n	80101bc <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	6a1b      	ldr	r3, [r3, #32]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d05d      	beq.n	8010112 <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	68ba      	ldr	r2, [r7, #8]
 801005c:	6892      	ldr	r2, [r2, #8]
 801005e:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	69db      	ldr	r3, [r3, #28]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d02e      	beq.n	80100c6 <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010070:	431a      	orrs	r2, r3
 8010072:	68bb      	ldr	r3, [r7, #8]
 8010074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010076:	431a      	orrs	r2, r3
 8010078:	68bb      	ldr	r3, [r7, #8]
 801007a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801007c:	431a      	orrs	r2, r3
 801007e:	68bb      	ldr	r3, [r7, #8]
 8010080:	695b      	ldr	r3, [r3, #20]
 8010082:	049b      	lsls	r3, r3, #18
 8010084:	431a      	orrs	r2, r3
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	691b      	ldr	r3, [r3, #16]
 801008a:	431a      	orrs	r2, r3
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	6a1b      	ldr	r3, [r3, #32]
 8010090:	431a      	orrs	r2, r3
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	68db      	ldr	r3, [r3, #12]
 8010096:	431a      	orrs	r2, r3
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	69db      	ldr	r3, [r3, #28]
 801009c:	431a      	orrs	r2, r3
 801009e:	68bb      	ldr	r3, [r7, #8]
 80100a0:	699b      	ldr	r3, [r3, #24]
 80100a2:	ea42 0103 	orr.w	r1, r2, r3
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	687a      	ldr	r2, [r7, #4]
 80100ac:	430a      	orrs	r2, r1
 80100ae:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80100b6:	f000 8081 	beq.w	80101bc <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	68ba      	ldr	r2, [r7, #8]
 80100c0:	6852      	ldr	r2, [r2, #4]
 80100c2:	619a      	str	r2, [r3, #24]
}
 80100c4:	e07a      	b.n	80101bc <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100ca:	68bb      	ldr	r3, [r7, #8]
 80100cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100ce:	431a      	orrs	r2, r3
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80100d4:	431a      	orrs	r2, r3
 80100d6:	68bb      	ldr	r3, [r7, #8]
 80100d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100da:	431a      	orrs	r2, r3
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	695b      	ldr	r3, [r3, #20]
 80100e0:	049b      	lsls	r3, r3, #18
 80100e2:	431a      	orrs	r2, r3
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	691b      	ldr	r3, [r3, #16]
 80100e8:	431a      	orrs	r2, r3
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	6a1b      	ldr	r3, [r3, #32]
 80100ee:	431a      	orrs	r2, r3
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	69db      	ldr	r3, [r3, #28]
 80100f4:	431a      	orrs	r2, r3
 80100f6:	68bb      	ldr	r3, [r7, #8]
 80100f8:	699b      	ldr	r3, [r3, #24]
 80100fa:	ea42 0103 	orr.w	r1, r2, r3
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	687a      	ldr	r2, [r7, #4]
 8010104:	430a      	orrs	r2, r1
 8010106:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	2200      	movs	r2, #0
 801010e:	619a      	str	r2, [r3, #24]
}
 8010110:	e054      	b.n	80101bc <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8010112:	68bb      	ldr	r3, [r7, #8]
 8010114:	69db      	ldr	r3, [r3, #28]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d02a      	beq.n	8010170 <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801011a:	68bb      	ldr	r3, [r7, #8]
 801011c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801011e:	68bb      	ldr	r3, [r7, #8]
 8010120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010122:	431a      	orrs	r2, r3
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010128:	431a      	orrs	r2, r3
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801012e:	431a      	orrs	r2, r3
 8010130:	68bb      	ldr	r3, [r7, #8]
 8010132:	695b      	ldr	r3, [r3, #20]
 8010134:	049b      	lsls	r3, r3, #18
 8010136:	431a      	orrs	r2, r3
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	6a1b      	ldr	r3, [r3, #32]
 801013c:	431a      	orrs	r2, r3
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	68db      	ldr	r3, [r3, #12]
 8010142:	431a      	orrs	r2, r3
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	69db      	ldr	r3, [r3, #28]
 8010148:	431a      	orrs	r2, r3
 801014a:	68bb      	ldr	r3, [r7, #8]
 801014c:	699b      	ldr	r3, [r3, #24]
 801014e:	ea42 0103 	orr.w	r1, r2, r3
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	687a      	ldr	r2, [r7, #4]
 8010158:	430a      	orrs	r2, r1
 801015a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8010162:	d02b      	beq.n	80101bc <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	68ba      	ldr	r2, [r7, #8]
 801016a:	6852      	ldr	r2, [r2, #4]
 801016c:	619a      	str	r2, [r3, #24]
}
 801016e:	e025      	b.n	80101bc <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010174:	2b00      	cmp	r3, #0
 8010176:	d021      	beq.n	80101bc <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010180:	431a      	orrs	r2, r3
 8010182:	68bb      	ldr	r3, [r7, #8]
 8010184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010186:	431a      	orrs	r2, r3
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801018c:	431a      	orrs	r2, r3
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	695b      	ldr	r3, [r3, #20]
 8010192:	049b      	lsls	r3, r3, #18
 8010194:	431a      	orrs	r2, r3
 8010196:	68bb      	ldr	r3, [r7, #8]
 8010198:	6a1b      	ldr	r3, [r3, #32]
 801019a:	431a      	orrs	r2, r3
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	69db      	ldr	r3, [r3, #28]
 80101a0:	431a      	orrs	r2, r3
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	699b      	ldr	r3, [r3, #24]
 80101a6:	ea42 0103 	orr.w	r1, r2, r3
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	687a      	ldr	r2, [r7, #4]
 80101b0:	430a      	orrs	r2, r1
 80101b2:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	2200      	movs	r2, #0
 80101ba:	619a      	str	r2, [r3, #24]
}
 80101bc:	bf00      	nop
 80101be:	3714      	adds	r7, #20
 80101c0:	46bd      	mov	sp, r7
 80101c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c6:	4770      	bx	lr

080101c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b088      	sub	sp, #32
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d101      	bne.n	80101da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80101d6:	2301      	movs	r3, #1
 80101d8:	e3ca      	b.n	8010970 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80101da:	4b97      	ldr	r3, [pc, #604]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 80101dc:	689b      	ldr	r3, [r3, #8]
 80101de:	f003 030c 	and.w	r3, r3, #12
 80101e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80101e4:	4b94      	ldr	r3, [pc, #592]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 80101e6:	68db      	ldr	r3, [r3, #12]
 80101e8:	f003 0303 	and.w	r3, r3, #3
 80101ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	f003 0310 	and.w	r3, r3, #16
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	f000 80e4 	beq.w	80103c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80101fc:	69bb      	ldr	r3, [r7, #24]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d007      	beq.n	8010212 <HAL_RCC_OscConfig+0x4a>
 8010202:	69bb      	ldr	r3, [r7, #24]
 8010204:	2b0c      	cmp	r3, #12
 8010206:	f040 808b 	bne.w	8010320 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	2b01      	cmp	r3, #1
 801020e:	f040 8087 	bne.w	8010320 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8010212:	4b89      	ldr	r3, [pc, #548]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	f003 0302 	and.w	r3, r3, #2
 801021a:	2b00      	cmp	r3, #0
 801021c:	d005      	beq.n	801022a <HAL_RCC_OscConfig+0x62>
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	699b      	ldr	r3, [r3, #24]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d101      	bne.n	801022a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8010226:	2301      	movs	r3, #1
 8010228:	e3a2      	b.n	8010970 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6a1a      	ldr	r2, [r3, #32]
 801022e:	4b82      	ldr	r3, [pc, #520]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	f003 0308 	and.w	r3, r3, #8
 8010236:	2b00      	cmp	r3, #0
 8010238:	d004      	beq.n	8010244 <HAL_RCC_OscConfig+0x7c>
 801023a:	4b7f      	ldr	r3, [pc, #508]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010242:	e005      	b.n	8010250 <HAL_RCC_OscConfig+0x88>
 8010244:	4b7c      	ldr	r3, [pc, #496]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 8010246:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801024a:	091b      	lsrs	r3, r3, #4
 801024c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010250:	4293      	cmp	r3, r2
 8010252:	d223      	bcs.n	801029c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	6a1b      	ldr	r3, [r3, #32]
 8010258:	4618      	mov	r0, r3
 801025a:	f000 fd55 	bl	8010d08 <RCC_SetFlashLatencyFromMSIRange>
 801025e:	4603      	mov	r3, r0
 8010260:	2b00      	cmp	r3, #0
 8010262:	d001      	beq.n	8010268 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8010264:	2301      	movs	r3, #1
 8010266:	e383      	b.n	8010970 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010268:	4b73      	ldr	r3, [pc, #460]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	4a72      	ldr	r2, [pc, #456]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 801026e:	f043 0308 	orr.w	r3, r3, #8
 8010272:	6013      	str	r3, [r2, #0]
 8010274:	4b70      	ldr	r3, [pc, #448]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6a1b      	ldr	r3, [r3, #32]
 8010280:	496d      	ldr	r1, [pc, #436]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 8010282:	4313      	orrs	r3, r2
 8010284:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010286:	4b6c      	ldr	r3, [pc, #432]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 8010288:	685b      	ldr	r3, [r3, #4]
 801028a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	69db      	ldr	r3, [r3, #28]
 8010292:	021b      	lsls	r3, r3, #8
 8010294:	4968      	ldr	r1, [pc, #416]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 8010296:	4313      	orrs	r3, r2
 8010298:	604b      	str	r3, [r1, #4]
 801029a:	e025      	b.n	80102e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801029c:	4b66      	ldr	r3, [pc, #408]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	4a65      	ldr	r2, [pc, #404]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 80102a2:	f043 0308 	orr.w	r3, r3, #8
 80102a6:	6013      	str	r3, [r2, #0]
 80102a8:	4b63      	ldr	r3, [pc, #396]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	6a1b      	ldr	r3, [r3, #32]
 80102b4:	4960      	ldr	r1, [pc, #384]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 80102b6:	4313      	orrs	r3, r2
 80102b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80102ba:	4b5f      	ldr	r3, [pc, #380]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 80102bc:	685b      	ldr	r3, [r3, #4]
 80102be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	69db      	ldr	r3, [r3, #28]
 80102c6:	021b      	lsls	r3, r3, #8
 80102c8:	495b      	ldr	r1, [pc, #364]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 80102ca:	4313      	orrs	r3, r2
 80102cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80102ce:	69bb      	ldr	r3, [r7, #24]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d109      	bne.n	80102e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	6a1b      	ldr	r3, [r3, #32]
 80102d8:	4618      	mov	r0, r3
 80102da:	f000 fd15 	bl	8010d08 <RCC_SetFlashLatencyFromMSIRange>
 80102de:	4603      	mov	r3, r0
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d001      	beq.n	80102e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80102e4:	2301      	movs	r3, #1
 80102e6:	e343      	b.n	8010970 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80102e8:	f000 fc4a 	bl	8010b80 <HAL_RCC_GetSysClockFreq>
 80102ec:	4602      	mov	r2, r0
 80102ee:	4b52      	ldr	r3, [pc, #328]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 80102f0:	689b      	ldr	r3, [r3, #8]
 80102f2:	091b      	lsrs	r3, r3, #4
 80102f4:	f003 030f 	and.w	r3, r3, #15
 80102f8:	4950      	ldr	r1, [pc, #320]	@ (801043c <HAL_RCC_OscConfig+0x274>)
 80102fa:	5ccb      	ldrb	r3, [r1, r3]
 80102fc:	f003 031f 	and.w	r3, r3, #31
 8010300:	fa22 f303 	lsr.w	r3, r2, r3
 8010304:	4a4e      	ldr	r2, [pc, #312]	@ (8010440 <HAL_RCC_OscConfig+0x278>)
 8010306:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8010308:	4b4e      	ldr	r3, [pc, #312]	@ (8010444 <HAL_RCC_OscConfig+0x27c>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	4618      	mov	r0, r3
 801030e:	f7fb fa4f 	bl	800b7b0 <HAL_InitTick>
 8010312:	4603      	mov	r3, r0
 8010314:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8010316:	7bfb      	ldrb	r3, [r7, #15]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d052      	beq.n	80103c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 801031c:	7bfb      	ldrb	r3, [r7, #15]
 801031e:	e327      	b.n	8010970 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	699b      	ldr	r3, [r3, #24]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d032      	beq.n	801038e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8010328:	4b43      	ldr	r3, [pc, #268]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	4a42      	ldr	r2, [pc, #264]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 801032e:	f043 0301 	orr.w	r3, r3, #1
 8010332:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8010334:	f7fb fa8c 	bl	800b850 <HAL_GetTick>
 8010338:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801033a:	e008      	b.n	801034e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801033c:	f7fb fa88 	bl	800b850 <HAL_GetTick>
 8010340:	4602      	mov	r2, r0
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	1ad3      	subs	r3, r2, r3
 8010346:	2b02      	cmp	r3, #2
 8010348:	d901      	bls.n	801034e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 801034a:	2303      	movs	r3, #3
 801034c:	e310      	b.n	8010970 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801034e:	4b3a      	ldr	r3, [pc, #232]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	f003 0302 	and.w	r3, r3, #2
 8010356:	2b00      	cmp	r3, #0
 8010358:	d0f0      	beq.n	801033c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801035a:	4b37      	ldr	r3, [pc, #220]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	4a36      	ldr	r2, [pc, #216]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 8010360:	f043 0308 	orr.w	r3, r3, #8
 8010364:	6013      	str	r3, [r2, #0]
 8010366:	4b34      	ldr	r3, [pc, #208]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6a1b      	ldr	r3, [r3, #32]
 8010372:	4931      	ldr	r1, [pc, #196]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 8010374:	4313      	orrs	r3, r2
 8010376:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010378:	4b2f      	ldr	r3, [pc, #188]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 801037a:	685b      	ldr	r3, [r3, #4]
 801037c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	69db      	ldr	r3, [r3, #28]
 8010384:	021b      	lsls	r3, r3, #8
 8010386:	492c      	ldr	r1, [pc, #176]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 8010388:	4313      	orrs	r3, r2
 801038a:	604b      	str	r3, [r1, #4]
 801038c:	e01a      	b.n	80103c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801038e:	4b2a      	ldr	r3, [pc, #168]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	4a29      	ldr	r2, [pc, #164]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 8010394:	f023 0301 	bic.w	r3, r3, #1
 8010398:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 801039a:	f7fb fa59 	bl	800b850 <HAL_GetTick>
 801039e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80103a0:	e008      	b.n	80103b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80103a2:	f7fb fa55 	bl	800b850 <HAL_GetTick>
 80103a6:	4602      	mov	r2, r0
 80103a8:	693b      	ldr	r3, [r7, #16]
 80103aa:	1ad3      	subs	r3, r2, r3
 80103ac:	2b02      	cmp	r3, #2
 80103ae:	d901      	bls.n	80103b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80103b0:	2303      	movs	r3, #3
 80103b2:	e2dd      	b.n	8010970 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80103b4:	4b20      	ldr	r3, [pc, #128]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	f003 0302 	and.w	r3, r3, #2
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d1f0      	bne.n	80103a2 <HAL_RCC_OscConfig+0x1da>
 80103c0:	e000      	b.n	80103c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80103c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	f003 0301 	and.w	r3, r3, #1
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d074      	beq.n	80104ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80103d0:	69bb      	ldr	r3, [r7, #24]
 80103d2:	2b08      	cmp	r3, #8
 80103d4:	d005      	beq.n	80103e2 <HAL_RCC_OscConfig+0x21a>
 80103d6:	69bb      	ldr	r3, [r7, #24]
 80103d8:	2b0c      	cmp	r3, #12
 80103da:	d10e      	bne.n	80103fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	2b03      	cmp	r3, #3
 80103e0:	d10b      	bne.n	80103fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80103e2:	4b15      	ldr	r3, [pc, #84]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d064      	beq.n	80104b8 <HAL_RCC_OscConfig+0x2f0>
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	685b      	ldr	r3, [r3, #4]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d160      	bne.n	80104b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80103f6:	2301      	movs	r3, #1
 80103f8:	e2ba      	b.n	8010970 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	685b      	ldr	r3, [r3, #4]
 80103fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010402:	d106      	bne.n	8010412 <HAL_RCC_OscConfig+0x24a>
 8010404:	4b0c      	ldr	r3, [pc, #48]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	4a0b      	ldr	r2, [pc, #44]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 801040a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801040e:	6013      	str	r3, [r2, #0]
 8010410:	e026      	b.n	8010460 <HAL_RCC_OscConfig+0x298>
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	685b      	ldr	r3, [r3, #4]
 8010416:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801041a:	d115      	bne.n	8010448 <HAL_RCC_OscConfig+0x280>
 801041c:	4b06      	ldr	r3, [pc, #24]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	4a05      	ldr	r2, [pc, #20]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 8010422:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010426:	6013      	str	r3, [r2, #0]
 8010428:	4b03      	ldr	r3, [pc, #12]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	4a02      	ldr	r2, [pc, #8]	@ (8010438 <HAL_RCC_OscConfig+0x270>)
 801042e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010432:	6013      	str	r3, [r2, #0]
 8010434:	e014      	b.n	8010460 <HAL_RCC_OscConfig+0x298>
 8010436:	bf00      	nop
 8010438:	40021000 	.word	0x40021000
 801043c:	080183dc 	.word	0x080183dc
 8010440:	20000000 	.word	0x20000000
 8010444:	2000000c 	.word	0x2000000c
 8010448:	4ba0      	ldr	r3, [pc, #640]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	4a9f      	ldr	r2, [pc, #636]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 801044e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010452:	6013      	str	r3, [r2, #0]
 8010454:	4b9d      	ldr	r3, [pc, #628]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	4a9c      	ldr	r2, [pc, #624]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 801045a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801045e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	685b      	ldr	r3, [r3, #4]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d013      	beq.n	8010490 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010468:	f7fb f9f2 	bl	800b850 <HAL_GetTick>
 801046c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801046e:	e008      	b.n	8010482 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010470:	f7fb f9ee 	bl	800b850 <HAL_GetTick>
 8010474:	4602      	mov	r2, r0
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	1ad3      	subs	r3, r2, r3
 801047a:	2b64      	cmp	r3, #100	@ 0x64
 801047c:	d901      	bls.n	8010482 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 801047e:	2303      	movs	r3, #3
 8010480:	e276      	b.n	8010970 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8010482:	4b92      	ldr	r3, [pc, #584]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801048a:	2b00      	cmp	r3, #0
 801048c:	d0f0      	beq.n	8010470 <HAL_RCC_OscConfig+0x2a8>
 801048e:	e014      	b.n	80104ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010490:	f7fb f9de 	bl	800b850 <HAL_GetTick>
 8010494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8010496:	e008      	b.n	80104aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010498:	f7fb f9da 	bl	800b850 <HAL_GetTick>
 801049c:	4602      	mov	r2, r0
 801049e:	693b      	ldr	r3, [r7, #16]
 80104a0:	1ad3      	subs	r3, r2, r3
 80104a2:	2b64      	cmp	r3, #100	@ 0x64
 80104a4:	d901      	bls.n	80104aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80104a6:	2303      	movs	r3, #3
 80104a8:	e262      	b.n	8010970 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80104aa:	4b88      	ldr	r3, [pc, #544]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d1f0      	bne.n	8010498 <HAL_RCC_OscConfig+0x2d0>
 80104b6:	e000      	b.n	80104ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80104b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	f003 0302 	and.w	r3, r3, #2
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d060      	beq.n	8010588 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80104c6:	69bb      	ldr	r3, [r7, #24]
 80104c8:	2b04      	cmp	r3, #4
 80104ca:	d005      	beq.n	80104d8 <HAL_RCC_OscConfig+0x310>
 80104cc:	69bb      	ldr	r3, [r7, #24]
 80104ce:	2b0c      	cmp	r3, #12
 80104d0:	d119      	bne.n	8010506 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	2b02      	cmp	r3, #2
 80104d6:	d116      	bne.n	8010506 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80104d8:	4b7c      	ldr	r3, [pc, #496]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d005      	beq.n	80104f0 <HAL_RCC_OscConfig+0x328>
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	68db      	ldr	r3, [r3, #12]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d101      	bne.n	80104f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80104ec:	2301      	movs	r3, #1
 80104ee:	e23f      	b.n	8010970 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80104f0:	4b76      	ldr	r3, [pc, #472]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 80104f2:	685b      	ldr	r3, [r3, #4]
 80104f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	691b      	ldr	r3, [r3, #16]
 80104fc:	061b      	lsls	r3, r3, #24
 80104fe:	4973      	ldr	r1, [pc, #460]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 8010500:	4313      	orrs	r3, r2
 8010502:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010504:	e040      	b.n	8010588 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	68db      	ldr	r3, [r3, #12]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d023      	beq.n	8010556 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801050e:	4b6f      	ldr	r3, [pc, #444]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	4a6e      	ldr	r2, [pc, #440]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 8010514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801051a:	f7fb f999 	bl	800b850 <HAL_GetTick>
 801051e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010520:	e008      	b.n	8010534 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010522:	f7fb f995 	bl	800b850 <HAL_GetTick>
 8010526:	4602      	mov	r2, r0
 8010528:	693b      	ldr	r3, [r7, #16]
 801052a:	1ad3      	subs	r3, r2, r3
 801052c:	2b02      	cmp	r3, #2
 801052e:	d901      	bls.n	8010534 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8010530:	2303      	movs	r3, #3
 8010532:	e21d      	b.n	8010970 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010534:	4b65      	ldr	r3, [pc, #404]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801053c:	2b00      	cmp	r3, #0
 801053e:	d0f0      	beq.n	8010522 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010540:	4b62      	ldr	r3, [pc, #392]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 8010542:	685b      	ldr	r3, [r3, #4]
 8010544:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	691b      	ldr	r3, [r3, #16]
 801054c:	061b      	lsls	r3, r3, #24
 801054e:	495f      	ldr	r1, [pc, #380]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 8010550:	4313      	orrs	r3, r2
 8010552:	604b      	str	r3, [r1, #4]
 8010554:	e018      	b.n	8010588 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010556:	4b5d      	ldr	r3, [pc, #372]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	4a5c      	ldr	r2, [pc, #368]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 801055c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010562:	f7fb f975 	bl	800b850 <HAL_GetTick>
 8010566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8010568:	e008      	b.n	801057c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801056a:	f7fb f971 	bl	800b850 <HAL_GetTick>
 801056e:	4602      	mov	r2, r0
 8010570:	693b      	ldr	r3, [r7, #16]
 8010572:	1ad3      	subs	r3, r2, r3
 8010574:	2b02      	cmp	r3, #2
 8010576:	d901      	bls.n	801057c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8010578:	2303      	movs	r3, #3
 801057a:	e1f9      	b.n	8010970 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801057c:	4b53      	ldr	r3, [pc, #332]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010584:	2b00      	cmp	r3, #0
 8010586:	d1f0      	bne.n	801056a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	f003 0308 	and.w	r3, r3, #8
 8010590:	2b00      	cmp	r3, #0
 8010592:	d03c      	beq.n	801060e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	695b      	ldr	r3, [r3, #20]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d01c      	beq.n	80105d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801059c:	4b4b      	ldr	r3, [pc, #300]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 801059e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80105a2:	4a4a      	ldr	r2, [pc, #296]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 80105a4:	f043 0301 	orr.w	r3, r3, #1
 80105a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80105ac:	f7fb f950 	bl	800b850 <HAL_GetTick>
 80105b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80105b2:	e008      	b.n	80105c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80105b4:	f7fb f94c 	bl	800b850 <HAL_GetTick>
 80105b8:	4602      	mov	r2, r0
 80105ba:	693b      	ldr	r3, [r7, #16]
 80105bc:	1ad3      	subs	r3, r2, r3
 80105be:	2b02      	cmp	r3, #2
 80105c0:	d901      	bls.n	80105c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80105c2:	2303      	movs	r3, #3
 80105c4:	e1d4      	b.n	8010970 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80105c6:	4b41      	ldr	r3, [pc, #260]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 80105c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80105cc:	f003 0302 	and.w	r3, r3, #2
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d0ef      	beq.n	80105b4 <HAL_RCC_OscConfig+0x3ec>
 80105d4:	e01b      	b.n	801060e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80105d6:	4b3d      	ldr	r3, [pc, #244]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 80105d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80105dc:	4a3b      	ldr	r2, [pc, #236]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 80105de:	f023 0301 	bic.w	r3, r3, #1
 80105e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80105e6:	f7fb f933 	bl	800b850 <HAL_GetTick>
 80105ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80105ec:	e008      	b.n	8010600 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80105ee:	f7fb f92f 	bl	800b850 <HAL_GetTick>
 80105f2:	4602      	mov	r2, r0
 80105f4:	693b      	ldr	r3, [r7, #16]
 80105f6:	1ad3      	subs	r3, r2, r3
 80105f8:	2b02      	cmp	r3, #2
 80105fa:	d901      	bls.n	8010600 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80105fc:	2303      	movs	r3, #3
 80105fe:	e1b7      	b.n	8010970 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8010600:	4b32      	ldr	r3, [pc, #200]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 8010602:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010606:	f003 0302 	and.w	r3, r3, #2
 801060a:	2b00      	cmp	r3, #0
 801060c:	d1ef      	bne.n	80105ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	f003 0304 	and.w	r3, r3, #4
 8010616:	2b00      	cmp	r3, #0
 8010618:	f000 80a6 	beq.w	8010768 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 801061c:	2300      	movs	r3, #0
 801061e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8010620:	4b2a      	ldr	r3, [pc, #168]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 8010622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010628:	2b00      	cmp	r3, #0
 801062a:	d10d      	bne.n	8010648 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801062c:	4b27      	ldr	r3, [pc, #156]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 801062e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010630:	4a26      	ldr	r2, [pc, #152]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 8010632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010636:	6593      	str	r3, [r2, #88]	@ 0x58
 8010638:	4b24      	ldr	r3, [pc, #144]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 801063a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801063c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010640:	60bb      	str	r3, [r7, #8]
 8010642:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010644:	2301      	movs	r3, #1
 8010646:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010648:	4b21      	ldr	r3, [pc, #132]	@ (80106d0 <HAL_RCC_OscConfig+0x508>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010650:	2b00      	cmp	r3, #0
 8010652:	d118      	bne.n	8010686 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010654:	4b1e      	ldr	r3, [pc, #120]	@ (80106d0 <HAL_RCC_OscConfig+0x508>)
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	4a1d      	ldr	r2, [pc, #116]	@ (80106d0 <HAL_RCC_OscConfig+0x508>)
 801065a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801065e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010660:	f7fb f8f6 	bl	800b850 <HAL_GetTick>
 8010664:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010666:	e008      	b.n	801067a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010668:	f7fb f8f2 	bl	800b850 <HAL_GetTick>
 801066c:	4602      	mov	r2, r0
 801066e:	693b      	ldr	r3, [r7, #16]
 8010670:	1ad3      	subs	r3, r2, r3
 8010672:	2b02      	cmp	r3, #2
 8010674:	d901      	bls.n	801067a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8010676:	2303      	movs	r3, #3
 8010678:	e17a      	b.n	8010970 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801067a:	4b15      	ldr	r3, [pc, #84]	@ (80106d0 <HAL_RCC_OscConfig+0x508>)
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010682:	2b00      	cmp	r3, #0
 8010684:	d0f0      	beq.n	8010668 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	689b      	ldr	r3, [r3, #8]
 801068a:	2b01      	cmp	r3, #1
 801068c:	d108      	bne.n	80106a0 <HAL_RCC_OscConfig+0x4d8>
 801068e:	4b0f      	ldr	r3, [pc, #60]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 8010690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010694:	4a0d      	ldr	r2, [pc, #52]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 8010696:	f043 0301 	orr.w	r3, r3, #1
 801069a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 801069e:	e029      	b.n	80106f4 <HAL_RCC_OscConfig+0x52c>
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	689b      	ldr	r3, [r3, #8]
 80106a4:	2b05      	cmp	r3, #5
 80106a6:	d115      	bne.n	80106d4 <HAL_RCC_OscConfig+0x50c>
 80106a8:	4b08      	ldr	r3, [pc, #32]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 80106aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80106ae:	4a07      	ldr	r2, [pc, #28]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 80106b0:	f043 0304 	orr.w	r3, r3, #4
 80106b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80106b8:	4b04      	ldr	r3, [pc, #16]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 80106ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80106be:	4a03      	ldr	r2, [pc, #12]	@ (80106cc <HAL_RCC_OscConfig+0x504>)
 80106c0:	f043 0301 	orr.w	r3, r3, #1
 80106c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80106c8:	e014      	b.n	80106f4 <HAL_RCC_OscConfig+0x52c>
 80106ca:	bf00      	nop
 80106cc:	40021000 	.word	0x40021000
 80106d0:	40007000 	.word	0x40007000
 80106d4:	4b9c      	ldr	r3, [pc, #624]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 80106d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80106da:	4a9b      	ldr	r2, [pc, #620]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 80106dc:	f023 0301 	bic.w	r3, r3, #1
 80106e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80106e4:	4b98      	ldr	r3, [pc, #608]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 80106e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80106ea:	4a97      	ldr	r2, [pc, #604]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 80106ec:	f023 0304 	bic.w	r3, r3, #4
 80106f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	689b      	ldr	r3, [r3, #8]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d016      	beq.n	801072a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80106fc:	f7fb f8a8 	bl	800b850 <HAL_GetTick>
 8010700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010702:	e00a      	b.n	801071a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010704:	f7fb f8a4 	bl	800b850 <HAL_GetTick>
 8010708:	4602      	mov	r2, r0
 801070a:	693b      	ldr	r3, [r7, #16]
 801070c:	1ad3      	subs	r3, r2, r3
 801070e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010712:	4293      	cmp	r3, r2
 8010714:	d901      	bls.n	801071a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8010716:	2303      	movs	r3, #3
 8010718:	e12a      	b.n	8010970 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801071a:	4b8b      	ldr	r3, [pc, #556]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 801071c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010720:	f003 0302 	and.w	r3, r3, #2
 8010724:	2b00      	cmp	r3, #0
 8010726:	d0ed      	beq.n	8010704 <HAL_RCC_OscConfig+0x53c>
 8010728:	e015      	b.n	8010756 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801072a:	f7fb f891 	bl	800b850 <HAL_GetTick>
 801072e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8010730:	e00a      	b.n	8010748 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010732:	f7fb f88d 	bl	800b850 <HAL_GetTick>
 8010736:	4602      	mov	r2, r0
 8010738:	693b      	ldr	r3, [r7, #16]
 801073a:	1ad3      	subs	r3, r2, r3
 801073c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010740:	4293      	cmp	r3, r2
 8010742:	d901      	bls.n	8010748 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8010744:	2303      	movs	r3, #3
 8010746:	e113      	b.n	8010970 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8010748:	4b7f      	ldr	r3, [pc, #508]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 801074a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801074e:	f003 0302 	and.w	r3, r3, #2
 8010752:	2b00      	cmp	r3, #0
 8010754:	d1ed      	bne.n	8010732 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8010756:	7ffb      	ldrb	r3, [r7, #31]
 8010758:	2b01      	cmp	r3, #1
 801075a:	d105      	bne.n	8010768 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801075c:	4b7a      	ldr	r3, [pc, #488]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 801075e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010760:	4a79      	ldr	r2, [pc, #484]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 8010762:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010766:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801076c:	2b00      	cmp	r3, #0
 801076e:	f000 80fe 	beq.w	801096e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010776:	2b02      	cmp	r3, #2
 8010778:	f040 80d0 	bne.w	801091c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 801077c:	4b72      	ldr	r3, [pc, #456]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 801077e:	68db      	ldr	r3, [r3, #12]
 8010780:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8010782:	697b      	ldr	r3, [r7, #20]
 8010784:	f003 0203 	and.w	r2, r3, #3
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801078c:	429a      	cmp	r2, r3
 801078e:	d130      	bne.n	80107f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8010790:	697b      	ldr	r3, [r7, #20]
 8010792:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801079a:	3b01      	subs	r3, #1
 801079c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 801079e:	429a      	cmp	r2, r3
 80107a0:	d127      	bne.n	80107f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80107a2:	697b      	ldr	r3, [r7, #20]
 80107a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d11f      	bne.n	80107f2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80107b8:	687a      	ldr	r2, [r7, #4]
 80107ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80107bc:	2a07      	cmp	r2, #7
 80107be:	bf14      	ite	ne
 80107c0:	2201      	movne	r2, #1
 80107c2:	2200      	moveq	r2, #0
 80107c4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80107c6:	4293      	cmp	r3, r2
 80107c8:	d113      	bne.n	80107f2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80107ca:	697b      	ldr	r3, [r7, #20]
 80107cc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80107d4:	085b      	lsrs	r3, r3, #1
 80107d6:	3b01      	subs	r3, #1
 80107d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80107da:	429a      	cmp	r2, r3
 80107dc:	d109      	bne.n	80107f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80107e8:	085b      	lsrs	r3, r3, #1
 80107ea:	3b01      	subs	r3, #1
 80107ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80107ee:	429a      	cmp	r2, r3
 80107f0:	d06e      	beq.n	80108d0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80107f2:	69bb      	ldr	r3, [r7, #24]
 80107f4:	2b0c      	cmp	r3, #12
 80107f6:	d069      	beq.n	80108cc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80107f8:	4b53      	ldr	r3, [pc, #332]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010800:	2b00      	cmp	r3, #0
 8010802:	d105      	bne.n	8010810 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8010804:	4b50      	ldr	r3, [pc, #320]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801080c:	2b00      	cmp	r3, #0
 801080e:	d001      	beq.n	8010814 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8010810:	2301      	movs	r3, #1
 8010812:	e0ad      	b.n	8010970 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8010814:	4b4c      	ldr	r3, [pc, #304]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	4a4b      	ldr	r2, [pc, #300]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 801081a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801081e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8010820:	f7fb f816 	bl	800b850 <HAL_GetTick>
 8010824:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010826:	e008      	b.n	801083a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010828:	f7fb f812 	bl	800b850 <HAL_GetTick>
 801082c:	4602      	mov	r2, r0
 801082e:	693b      	ldr	r3, [r7, #16]
 8010830:	1ad3      	subs	r3, r2, r3
 8010832:	2b02      	cmp	r3, #2
 8010834:	d901      	bls.n	801083a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8010836:	2303      	movs	r3, #3
 8010838:	e09a      	b.n	8010970 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801083a:	4b43      	ldr	r3, [pc, #268]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010842:	2b00      	cmp	r3, #0
 8010844:	d1f0      	bne.n	8010828 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010846:	4b40      	ldr	r3, [pc, #256]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 8010848:	68da      	ldr	r2, [r3, #12]
 801084a:	4b40      	ldr	r3, [pc, #256]	@ (801094c <HAL_RCC_OscConfig+0x784>)
 801084c:	4013      	ands	r3, r2
 801084e:	687a      	ldr	r2, [r7, #4]
 8010850:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8010852:	687a      	ldr	r2, [r7, #4]
 8010854:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010856:	3a01      	subs	r2, #1
 8010858:	0112      	lsls	r2, r2, #4
 801085a:	4311      	orrs	r1, r2
 801085c:	687a      	ldr	r2, [r7, #4]
 801085e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8010860:	0212      	lsls	r2, r2, #8
 8010862:	4311      	orrs	r1, r2
 8010864:	687a      	ldr	r2, [r7, #4]
 8010866:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8010868:	0852      	lsrs	r2, r2, #1
 801086a:	3a01      	subs	r2, #1
 801086c:	0552      	lsls	r2, r2, #21
 801086e:	4311      	orrs	r1, r2
 8010870:	687a      	ldr	r2, [r7, #4]
 8010872:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8010874:	0852      	lsrs	r2, r2, #1
 8010876:	3a01      	subs	r2, #1
 8010878:	0652      	lsls	r2, r2, #25
 801087a:	4311      	orrs	r1, r2
 801087c:	687a      	ldr	r2, [r7, #4]
 801087e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8010880:	0912      	lsrs	r2, r2, #4
 8010882:	0452      	lsls	r2, r2, #17
 8010884:	430a      	orrs	r2, r1
 8010886:	4930      	ldr	r1, [pc, #192]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 8010888:	4313      	orrs	r3, r2
 801088a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 801088c:	4b2e      	ldr	r3, [pc, #184]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	4a2d      	ldr	r2, [pc, #180]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 8010892:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010896:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8010898:	4b2b      	ldr	r3, [pc, #172]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 801089a:	68db      	ldr	r3, [r3, #12]
 801089c:	4a2a      	ldr	r2, [pc, #168]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 801089e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80108a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80108a4:	f7fa ffd4 	bl	800b850 <HAL_GetTick>
 80108a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80108aa:	e008      	b.n	80108be <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80108ac:	f7fa ffd0 	bl	800b850 <HAL_GetTick>
 80108b0:	4602      	mov	r2, r0
 80108b2:	693b      	ldr	r3, [r7, #16]
 80108b4:	1ad3      	subs	r3, r2, r3
 80108b6:	2b02      	cmp	r3, #2
 80108b8:	d901      	bls.n	80108be <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80108ba:	2303      	movs	r3, #3
 80108bc:	e058      	b.n	8010970 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80108be:	4b22      	ldr	r3, [pc, #136]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d0f0      	beq.n	80108ac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80108ca:	e050      	b.n	801096e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80108cc:	2301      	movs	r3, #1
 80108ce:	e04f      	b.n	8010970 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80108d0:	4b1d      	ldr	r3, [pc, #116]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d148      	bne.n	801096e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80108dc:	4b1a      	ldr	r3, [pc, #104]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	4a19      	ldr	r2, [pc, #100]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 80108e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80108e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80108e8:	4b17      	ldr	r3, [pc, #92]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 80108ea:	68db      	ldr	r3, [r3, #12]
 80108ec:	4a16      	ldr	r2, [pc, #88]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 80108ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80108f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80108f4:	f7fa ffac 	bl	800b850 <HAL_GetTick>
 80108f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80108fa:	e008      	b.n	801090e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80108fc:	f7fa ffa8 	bl	800b850 <HAL_GetTick>
 8010900:	4602      	mov	r2, r0
 8010902:	693b      	ldr	r3, [r7, #16]
 8010904:	1ad3      	subs	r3, r2, r3
 8010906:	2b02      	cmp	r3, #2
 8010908:	d901      	bls.n	801090e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 801090a:	2303      	movs	r3, #3
 801090c:	e030      	b.n	8010970 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801090e:	4b0e      	ldr	r3, [pc, #56]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010916:	2b00      	cmp	r3, #0
 8010918:	d0f0      	beq.n	80108fc <HAL_RCC_OscConfig+0x734>
 801091a:	e028      	b.n	801096e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 801091c:	69bb      	ldr	r3, [r7, #24]
 801091e:	2b0c      	cmp	r3, #12
 8010920:	d023      	beq.n	801096a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010922:	4b09      	ldr	r3, [pc, #36]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	4a08      	ldr	r2, [pc, #32]	@ (8010948 <HAL_RCC_OscConfig+0x780>)
 8010928:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801092c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801092e:	f7fa ff8f 	bl	800b850 <HAL_GetTick>
 8010932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010934:	e00c      	b.n	8010950 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010936:	f7fa ff8b 	bl	800b850 <HAL_GetTick>
 801093a:	4602      	mov	r2, r0
 801093c:	693b      	ldr	r3, [r7, #16]
 801093e:	1ad3      	subs	r3, r2, r3
 8010940:	2b02      	cmp	r3, #2
 8010942:	d905      	bls.n	8010950 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8010944:	2303      	movs	r3, #3
 8010946:	e013      	b.n	8010970 <HAL_RCC_OscConfig+0x7a8>
 8010948:	40021000 	.word	0x40021000
 801094c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010950:	4b09      	ldr	r3, [pc, #36]	@ (8010978 <HAL_RCC_OscConfig+0x7b0>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010958:	2b00      	cmp	r3, #0
 801095a:	d1ec      	bne.n	8010936 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 801095c:	4b06      	ldr	r3, [pc, #24]	@ (8010978 <HAL_RCC_OscConfig+0x7b0>)
 801095e:	68da      	ldr	r2, [r3, #12]
 8010960:	4905      	ldr	r1, [pc, #20]	@ (8010978 <HAL_RCC_OscConfig+0x7b0>)
 8010962:	4b06      	ldr	r3, [pc, #24]	@ (801097c <HAL_RCC_OscConfig+0x7b4>)
 8010964:	4013      	ands	r3, r2
 8010966:	60cb      	str	r3, [r1, #12]
 8010968:	e001      	b.n	801096e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801096a:	2301      	movs	r3, #1
 801096c:	e000      	b.n	8010970 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 801096e:	2300      	movs	r3, #0
}
 8010970:	4618      	mov	r0, r3
 8010972:	3720      	adds	r7, #32
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}
 8010978:	40021000 	.word	0x40021000
 801097c:	feeefffc 	.word	0xfeeefffc

08010980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b084      	sub	sp, #16
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d101      	bne.n	8010994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010990:	2301      	movs	r3, #1
 8010992:	e0e7      	b.n	8010b64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010994:	4b75      	ldr	r3, [pc, #468]	@ (8010b6c <HAL_RCC_ClockConfig+0x1ec>)
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	f003 0307 	and.w	r3, r3, #7
 801099c:	683a      	ldr	r2, [r7, #0]
 801099e:	429a      	cmp	r2, r3
 80109a0:	d910      	bls.n	80109c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80109a2:	4b72      	ldr	r3, [pc, #456]	@ (8010b6c <HAL_RCC_ClockConfig+0x1ec>)
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	f023 0207 	bic.w	r2, r3, #7
 80109aa:	4970      	ldr	r1, [pc, #448]	@ (8010b6c <HAL_RCC_ClockConfig+0x1ec>)
 80109ac:	683b      	ldr	r3, [r7, #0]
 80109ae:	4313      	orrs	r3, r2
 80109b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80109b2:	4b6e      	ldr	r3, [pc, #440]	@ (8010b6c <HAL_RCC_ClockConfig+0x1ec>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	f003 0307 	and.w	r3, r3, #7
 80109ba:	683a      	ldr	r2, [r7, #0]
 80109bc:	429a      	cmp	r2, r3
 80109be:	d001      	beq.n	80109c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80109c0:	2301      	movs	r3, #1
 80109c2:	e0cf      	b.n	8010b64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	f003 0302 	and.w	r3, r3, #2
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d010      	beq.n	80109f2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	689a      	ldr	r2, [r3, #8]
 80109d4:	4b66      	ldr	r3, [pc, #408]	@ (8010b70 <HAL_RCC_ClockConfig+0x1f0>)
 80109d6:	689b      	ldr	r3, [r3, #8]
 80109d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80109dc:	429a      	cmp	r2, r3
 80109de:	d908      	bls.n	80109f2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80109e0:	4b63      	ldr	r3, [pc, #396]	@ (8010b70 <HAL_RCC_ClockConfig+0x1f0>)
 80109e2:	689b      	ldr	r3, [r3, #8]
 80109e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	689b      	ldr	r3, [r3, #8]
 80109ec:	4960      	ldr	r1, [pc, #384]	@ (8010b70 <HAL_RCC_ClockConfig+0x1f0>)
 80109ee:	4313      	orrs	r3, r2
 80109f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	f003 0301 	and.w	r3, r3, #1
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d04c      	beq.n	8010a98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	685b      	ldr	r3, [r3, #4]
 8010a02:	2b03      	cmp	r3, #3
 8010a04:	d107      	bne.n	8010a16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010a06:	4b5a      	ldr	r3, [pc, #360]	@ (8010b70 <HAL_RCC_ClockConfig+0x1f0>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d121      	bne.n	8010a56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8010a12:	2301      	movs	r3, #1
 8010a14:	e0a6      	b.n	8010b64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	685b      	ldr	r3, [r3, #4]
 8010a1a:	2b02      	cmp	r3, #2
 8010a1c:	d107      	bne.n	8010a2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8010a1e:	4b54      	ldr	r3, [pc, #336]	@ (8010b70 <HAL_RCC_ClockConfig+0x1f0>)
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d115      	bne.n	8010a56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	e09a      	b.n	8010b64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	685b      	ldr	r3, [r3, #4]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d107      	bne.n	8010a46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010a36:	4b4e      	ldr	r3, [pc, #312]	@ (8010b70 <HAL_RCC_ClockConfig+0x1f0>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	f003 0302 	and.w	r3, r3, #2
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d109      	bne.n	8010a56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8010a42:	2301      	movs	r3, #1
 8010a44:	e08e      	b.n	8010b64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010a46:	4b4a      	ldr	r3, [pc, #296]	@ (8010b70 <HAL_RCC_ClockConfig+0x1f0>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d101      	bne.n	8010a56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8010a52:	2301      	movs	r3, #1
 8010a54:	e086      	b.n	8010b64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010a56:	4b46      	ldr	r3, [pc, #280]	@ (8010b70 <HAL_RCC_ClockConfig+0x1f0>)
 8010a58:	689b      	ldr	r3, [r3, #8]
 8010a5a:	f023 0203 	bic.w	r2, r3, #3
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	685b      	ldr	r3, [r3, #4]
 8010a62:	4943      	ldr	r1, [pc, #268]	@ (8010b70 <HAL_RCC_ClockConfig+0x1f0>)
 8010a64:	4313      	orrs	r3, r2
 8010a66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010a68:	f7fa fef2 	bl	800b850 <HAL_GetTick>
 8010a6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010a6e:	e00a      	b.n	8010a86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010a70:	f7fa feee 	bl	800b850 <HAL_GetTick>
 8010a74:	4602      	mov	r2, r0
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	1ad3      	subs	r3, r2, r3
 8010a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010a7e:	4293      	cmp	r3, r2
 8010a80:	d901      	bls.n	8010a86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8010a82:	2303      	movs	r3, #3
 8010a84:	e06e      	b.n	8010b64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010a86:	4b3a      	ldr	r3, [pc, #232]	@ (8010b70 <HAL_RCC_ClockConfig+0x1f0>)
 8010a88:	689b      	ldr	r3, [r3, #8]
 8010a8a:	f003 020c 	and.w	r2, r3, #12
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	685b      	ldr	r3, [r3, #4]
 8010a92:	009b      	lsls	r3, r3, #2
 8010a94:	429a      	cmp	r2, r3
 8010a96:	d1eb      	bne.n	8010a70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	f003 0302 	and.w	r3, r3, #2
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d010      	beq.n	8010ac6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	689a      	ldr	r2, [r3, #8]
 8010aa8:	4b31      	ldr	r3, [pc, #196]	@ (8010b70 <HAL_RCC_ClockConfig+0x1f0>)
 8010aaa:	689b      	ldr	r3, [r3, #8]
 8010aac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010ab0:	429a      	cmp	r2, r3
 8010ab2:	d208      	bcs.n	8010ac6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8010b70 <HAL_RCC_ClockConfig+0x1f0>)
 8010ab6:	689b      	ldr	r3, [r3, #8]
 8010ab8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	689b      	ldr	r3, [r3, #8]
 8010ac0:	492b      	ldr	r1, [pc, #172]	@ (8010b70 <HAL_RCC_ClockConfig+0x1f0>)
 8010ac2:	4313      	orrs	r3, r2
 8010ac4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010ac6:	4b29      	ldr	r3, [pc, #164]	@ (8010b6c <HAL_RCC_ClockConfig+0x1ec>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	f003 0307 	and.w	r3, r3, #7
 8010ace:	683a      	ldr	r2, [r7, #0]
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d210      	bcs.n	8010af6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010ad4:	4b25      	ldr	r3, [pc, #148]	@ (8010b6c <HAL_RCC_ClockConfig+0x1ec>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	f023 0207 	bic.w	r2, r3, #7
 8010adc:	4923      	ldr	r1, [pc, #140]	@ (8010b6c <HAL_RCC_ClockConfig+0x1ec>)
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	4313      	orrs	r3, r2
 8010ae2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010ae4:	4b21      	ldr	r3, [pc, #132]	@ (8010b6c <HAL_RCC_ClockConfig+0x1ec>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	f003 0307 	and.w	r3, r3, #7
 8010aec:	683a      	ldr	r2, [r7, #0]
 8010aee:	429a      	cmp	r2, r3
 8010af0:	d001      	beq.n	8010af6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8010af2:	2301      	movs	r3, #1
 8010af4:	e036      	b.n	8010b64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	f003 0304 	and.w	r3, r3, #4
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d008      	beq.n	8010b14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010b02:	4b1b      	ldr	r3, [pc, #108]	@ (8010b70 <HAL_RCC_ClockConfig+0x1f0>)
 8010b04:	689b      	ldr	r3, [r3, #8]
 8010b06:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	68db      	ldr	r3, [r3, #12]
 8010b0e:	4918      	ldr	r1, [pc, #96]	@ (8010b70 <HAL_RCC_ClockConfig+0x1f0>)
 8010b10:	4313      	orrs	r3, r2
 8010b12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	f003 0308 	and.w	r3, r3, #8
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d009      	beq.n	8010b34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8010b20:	4b13      	ldr	r3, [pc, #76]	@ (8010b70 <HAL_RCC_ClockConfig+0x1f0>)
 8010b22:	689b      	ldr	r3, [r3, #8]
 8010b24:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	691b      	ldr	r3, [r3, #16]
 8010b2c:	00db      	lsls	r3, r3, #3
 8010b2e:	4910      	ldr	r1, [pc, #64]	@ (8010b70 <HAL_RCC_ClockConfig+0x1f0>)
 8010b30:	4313      	orrs	r3, r2
 8010b32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8010b34:	f000 f824 	bl	8010b80 <HAL_RCC_GetSysClockFreq>
 8010b38:	4602      	mov	r2, r0
 8010b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8010b70 <HAL_RCC_ClockConfig+0x1f0>)
 8010b3c:	689b      	ldr	r3, [r3, #8]
 8010b3e:	091b      	lsrs	r3, r3, #4
 8010b40:	f003 030f 	and.w	r3, r3, #15
 8010b44:	490b      	ldr	r1, [pc, #44]	@ (8010b74 <HAL_RCC_ClockConfig+0x1f4>)
 8010b46:	5ccb      	ldrb	r3, [r1, r3]
 8010b48:	f003 031f 	and.w	r3, r3, #31
 8010b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8010b50:	4a09      	ldr	r2, [pc, #36]	@ (8010b78 <HAL_RCC_ClockConfig+0x1f8>)
 8010b52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8010b54:	4b09      	ldr	r3, [pc, #36]	@ (8010b7c <HAL_RCC_ClockConfig+0x1fc>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f7fa fe29 	bl	800b7b0 <HAL_InitTick>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	72fb      	strb	r3, [r7, #11]

  return status;
 8010b62:	7afb      	ldrb	r3, [r7, #11]
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	3710      	adds	r7, #16
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}
 8010b6c:	40022000 	.word	0x40022000
 8010b70:	40021000 	.word	0x40021000
 8010b74:	080183dc 	.word	0x080183dc
 8010b78:	20000000 	.word	0x20000000
 8010b7c:	2000000c 	.word	0x2000000c

08010b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010b80:	b480      	push	{r7}
 8010b82:	b089      	sub	sp, #36	@ 0x24
 8010b84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8010b86:	2300      	movs	r3, #0
 8010b88:	61fb      	str	r3, [r7, #28]
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010b8e:	4b3e      	ldr	r3, [pc, #248]	@ (8010c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8010b90:	689b      	ldr	r3, [r3, #8]
 8010b92:	f003 030c 	and.w	r3, r3, #12
 8010b96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010b98:	4b3b      	ldr	r3, [pc, #236]	@ (8010c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8010b9a:	68db      	ldr	r3, [r3, #12]
 8010b9c:	f003 0303 	and.w	r3, r3, #3
 8010ba0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8010ba2:	693b      	ldr	r3, [r7, #16]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d005      	beq.n	8010bb4 <HAL_RCC_GetSysClockFreq+0x34>
 8010ba8:	693b      	ldr	r3, [r7, #16]
 8010baa:	2b0c      	cmp	r3, #12
 8010bac:	d121      	bne.n	8010bf2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	2b01      	cmp	r3, #1
 8010bb2:	d11e      	bne.n	8010bf2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8010bb4:	4b34      	ldr	r3, [pc, #208]	@ (8010c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	f003 0308 	and.w	r3, r3, #8
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d107      	bne.n	8010bd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8010bc0:	4b31      	ldr	r3, [pc, #196]	@ (8010c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8010bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010bc6:	0a1b      	lsrs	r3, r3, #8
 8010bc8:	f003 030f 	and.w	r3, r3, #15
 8010bcc:	61fb      	str	r3, [r7, #28]
 8010bce:	e005      	b.n	8010bdc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8010bd0:	4b2d      	ldr	r3, [pc, #180]	@ (8010c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	091b      	lsrs	r3, r3, #4
 8010bd6:	f003 030f 	and.w	r3, r3, #15
 8010bda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8010bdc:	4a2b      	ldr	r2, [pc, #172]	@ (8010c8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8010bde:	69fb      	ldr	r3, [r7, #28]
 8010be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010be4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8010be6:	693b      	ldr	r3, [r7, #16]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d10d      	bne.n	8010c08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8010bec:	69fb      	ldr	r3, [r7, #28]
 8010bee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8010bf0:	e00a      	b.n	8010c08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8010bf2:	693b      	ldr	r3, [r7, #16]
 8010bf4:	2b04      	cmp	r3, #4
 8010bf6:	d102      	bne.n	8010bfe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8010bf8:	4b25      	ldr	r3, [pc, #148]	@ (8010c90 <HAL_RCC_GetSysClockFreq+0x110>)
 8010bfa:	61bb      	str	r3, [r7, #24]
 8010bfc:	e004      	b.n	8010c08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	2b08      	cmp	r3, #8
 8010c02:	d101      	bne.n	8010c08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8010c04:	4b23      	ldr	r3, [pc, #140]	@ (8010c94 <HAL_RCC_GetSysClockFreq+0x114>)
 8010c06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8010c08:	693b      	ldr	r3, [r7, #16]
 8010c0a:	2b0c      	cmp	r3, #12
 8010c0c:	d134      	bne.n	8010c78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8010c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8010c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8010c10:	68db      	ldr	r3, [r3, #12]
 8010c12:	f003 0303 	and.w	r3, r3, #3
 8010c16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8010c18:	68bb      	ldr	r3, [r7, #8]
 8010c1a:	2b02      	cmp	r3, #2
 8010c1c:	d003      	beq.n	8010c26 <HAL_RCC_GetSysClockFreq+0xa6>
 8010c1e:	68bb      	ldr	r3, [r7, #8]
 8010c20:	2b03      	cmp	r3, #3
 8010c22:	d003      	beq.n	8010c2c <HAL_RCC_GetSysClockFreq+0xac>
 8010c24:	e005      	b.n	8010c32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8010c26:	4b1a      	ldr	r3, [pc, #104]	@ (8010c90 <HAL_RCC_GetSysClockFreq+0x110>)
 8010c28:	617b      	str	r3, [r7, #20]
      break;
 8010c2a:	e005      	b.n	8010c38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8010c2c:	4b19      	ldr	r3, [pc, #100]	@ (8010c94 <HAL_RCC_GetSysClockFreq+0x114>)
 8010c2e:	617b      	str	r3, [r7, #20]
      break;
 8010c30:	e002      	b.n	8010c38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8010c32:	69fb      	ldr	r3, [r7, #28]
 8010c34:	617b      	str	r3, [r7, #20]
      break;
 8010c36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8010c38:	4b13      	ldr	r3, [pc, #76]	@ (8010c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8010c3a:	68db      	ldr	r3, [r3, #12]
 8010c3c:	091b      	lsrs	r3, r3, #4
 8010c3e:	f003 0307 	and.w	r3, r3, #7
 8010c42:	3301      	adds	r3, #1
 8010c44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8010c46:	4b10      	ldr	r3, [pc, #64]	@ (8010c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8010c48:	68db      	ldr	r3, [r3, #12]
 8010c4a:	0a1b      	lsrs	r3, r3, #8
 8010c4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010c50:	697a      	ldr	r2, [r7, #20]
 8010c52:	fb03 f202 	mul.w	r2, r3, r2
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8010c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8010c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8010c60:	68db      	ldr	r3, [r3, #12]
 8010c62:	0e5b      	lsrs	r3, r3, #25
 8010c64:	f003 0303 	and.w	r3, r3, #3
 8010c68:	3301      	adds	r3, #1
 8010c6a:	005b      	lsls	r3, r3, #1
 8010c6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8010c6e:	697a      	ldr	r2, [r7, #20]
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8010c78:	69bb      	ldr	r3, [r7, #24]
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3724      	adds	r7, #36	@ 0x24
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c84:	4770      	bx	lr
 8010c86:	bf00      	nop
 8010c88:	40021000 	.word	0x40021000
 8010c8c:	080183f4 	.word	0x080183f4
 8010c90:	00f42400 	.word	0x00f42400
 8010c94:	007a1200 	.word	0x007a1200

08010c98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010c98:	b480      	push	{r7}
 8010c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010c9c:	4b03      	ldr	r3, [pc, #12]	@ (8010cac <HAL_RCC_GetHCLKFreq+0x14>)
 8010c9e:	681b      	ldr	r3, [r3, #0]
}
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca8:	4770      	bx	lr
 8010caa:	bf00      	nop
 8010cac:	20000000 	.word	0x20000000

08010cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8010cb4:	f7ff fff0 	bl	8010c98 <HAL_RCC_GetHCLKFreq>
 8010cb8:	4602      	mov	r2, r0
 8010cba:	4b06      	ldr	r3, [pc, #24]	@ (8010cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010cbc:	689b      	ldr	r3, [r3, #8]
 8010cbe:	0a1b      	lsrs	r3, r3, #8
 8010cc0:	f003 0307 	and.w	r3, r3, #7
 8010cc4:	4904      	ldr	r1, [pc, #16]	@ (8010cd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8010cc6:	5ccb      	ldrb	r3, [r1, r3]
 8010cc8:	f003 031f 	and.w	r3, r3, #31
 8010ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	bd80      	pop	{r7, pc}
 8010cd4:	40021000 	.word	0x40021000
 8010cd8:	080183ec 	.word	0x080183ec

08010cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8010ce0:	f7ff ffda 	bl	8010c98 <HAL_RCC_GetHCLKFreq>
 8010ce4:	4602      	mov	r2, r0
 8010ce6:	4b06      	ldr	r3, [pc, #24]	@ (8010d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010ce8:	689b      	ldr	r3, [r3, #8]
 8010cea:	0adb      	lsrs	r3, r3, #11
 8010cec:	f003 0307 	and.w	r3, r3, #7
 8010cf0:	4904      	ldr	r1, [pc, #16]	@ (8010d04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8010cf2:	5ccb      	ldrb	r3, [r1, r3]
 8010cf4:	f003 031f 	and.w	r3, r3, #31
 8010cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	bd80      	pop	{r7, pc}
 8010d00:	40021000 	.word	0x40021000
 8010d04:	080183ec 	.word	0x080183ec

08010d08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b086      	sub	sp, #24
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8010d10:	2300      	movs	r3, #0
 8010d12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8010d14:	4b2a      	ldr	r3, [pc, #168]	@ (8010dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010d18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d003      	beq.n	8010d28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8010d20:	f7fe fd8c 	bl	800f83c <HAL_PWREx_GetVoltageRange>
 8010d24:	6178      	str	r0, [r7, #20]
 8010d26:	e014      	b.n	8010d52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8010d28:	4b25      	ldr	r3, [pc, #148]	@ (8010dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010d2c:	4a24      	ldr	r2, [pc, #144]	@ (8010dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010d2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010d32:	6593      	str	r3, [r2, #88]	@ 0x58
 8010d34:	4b22      	ldr	r3, [pc, #136]	@ (8010dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010d38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010d3c:	60fb      	str	r3, [r7, #12]
 8010d3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8010d40:	f7fe fd7c 	bl	800f83c <HAL_PWREx_GetVoltageRange>
 8010d44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8010d46:	4b1e      	ldr	r3, [pc, #120]	@ (8010dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010d4a:	4a1d      	ldr	r2, [pc, #116]	@ (8010dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010d4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010d50:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010d58:	d10b      	bne.n	8010d72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	2b80      	cmp	r3, #128	@ 0x80
 8010d5e:	d919      	bls.n	8010d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	2ba0      	cmp	r3, #160	@ 0xa0
 8010d64:	d902      	bls.n	8010d6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8010d66:	2302      	movs	r3, #2
 8010d68:	613b      	str	r3, [r7, #16]
 8010d6a:	e013      	b.n	8010d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8010d6c:	2301      	movs	r3, #1
 8010d6e:	613b      	str	r3, [r7, #16]
 8010d70:	e010      	b.n	8010d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	2b80      	cmp	r3, #128	@ 0x80
 8010d76:	d902      	bls.n	8010d7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8010d78:	2303      	movs	r3, #3
 8010d7a:	613b      	str	r3, [r7, #16]
 8010d7c:	e00a      	b.n	8010d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2b80      	cmp	r3, #128	@ 0x80
 8010d82:	d102      	bne.n	8010d8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8010d84:	2302      	movs	r3, #2
 8010d86:	613b      	str	r3, [r7, #16]
 8010d88:	e004      	b.n	8010d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	2b70      	cmp	r3, #112	@ 0x70
 8010d8e:	d101      	bne.n	8010d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8010d90:	2301      	movs	r3, #1
 8010d92:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8010d94:	4b0b      	ldr	r3, [pc, #44]	@ (8010dc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	f023 0207 	bic.w	r2, r3, #7
 8010d9c:	4909      	ldr	r1, [pc, #36]	@ (8010dc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010d9e:	693b      	ldr	r3, [r7, #16]
 8010da0:	4313      	orrs	r3, r2
 8010da2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8010da4:	4b07      	ldr	r3, [pc, #28]	@ (8010dc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	f003 0307 	and.w	r3, r3, #7
 8010dac:	693a      	ldr	r2, [r7, #16]
 8010dae:	429a      	cmp	r2, r3
 8010db0:	d001      	beq.n	8010db6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8010db2:	2301      	movs	r3, #1
 8010db4:	e000      	b.n	8010db8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8010db6:	2300      	movs	r3, #0
}
 8010db8:	4618      	mov	r0, r3
 8010dba:	3718      	adds	r7, #24
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd80      	pop	{r7, pc}
 8010dc0:	40021000 	.word	0x40021000
 8010dc4:	40022000 	.word	0x40022000

08010dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b086      	sub	sp, #24
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d041      	beq.n	8010e68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010de8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8010dec:	d02a      	beq.n	8010e44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8010dee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8010df2:	d824      	bhi.n	8010e3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010df4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010df8:	d008      	beq.n	8010e0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8010dfa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010dfe:	d81e      	bhi.n	8010e3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d00a      	beq.n	8010e1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8010e04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010e08:	d010      	beq.n	8010e2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8010e0a:	e018      	b.n	8010e3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8010e0c:	4b86      	ldr	r3, [pc, #536]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010e0e:	68db      	ldr	r3, [r3, #12]
 8010e10:	4a85      	ldr	r2, [pc, #532]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010e12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010e16:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8010e18:	e015      	b.n	8010e46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	3304      	adds	r3, #4
 8010e1e:	2100      	movs	r1, #0
 8010e20:	4618      	mov	r0, r3
 8010e22:	f000 fabb 	bl	801139c <RCCEx_PLLSAI1_Config>
 8010e26:	4603      	mov	r3, r0
 8010e28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8010e2a:	e00c      	b.n	8010e46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	3320      	adds	r3, #32
 8010e30:	2100      	movs	r1, #0
 8010e32:	4618      	mov	r0, r3
 8010e34:	f000 fba6 	bl	8011584 <RCCEx_PLLSAI2_Config>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8010e3c:	e003      	b.n	8010e46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010e3e:	2301      	movs	r3, #1
 8010e40:	74fb      	strb	r3, [r7, #19]
      break;
 8010e42:	e000      	b.n	8010e46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8010e44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010e46:	7cfb      	ldrb	r3, [r7, #19]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d10b      	bne.n	8010e64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010e4c:	4b76      	ldr	r3, [pc, #472]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010e52:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010e5a:	4973      	ldr	r1, [pc, #460]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010e5c:	4313      	orrs	r3, r2
 8010e5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8010e62:	e001      	b.n	8010e68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010e64:	7cfb      	ldrb	r3, [r7, #19]
 8010e66:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d041      	beq.n	8010ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010e78:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010e7c:	d02a      	beq.n	8010ed4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8010e7e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010e82:	d824      	bhi.n	8010ece <HAL_RCCEx_PeriphCLKConfig+0x106>
 8010e84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010e88:	d008      	beq.n	8010e9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8010e8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010e8e:	d81e      	bhi.n	8010ece <HAL_RCCEx_PeriphCLKConfig+0x106>
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d00a      	beq.n	8010eaa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8010e94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010e98:	d010      	beq.n	8010ebc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8010e9a:	e018      	b.n	8010ece <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8010e9c:	4b62      	ldr	r3, [pc, #392]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010e9e:	68db      	ldr	r3, [r3, #12]
 8010ea0:	4a61      	ldr	r2, [pc, #388]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010ea2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010ea6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010ea8:	e015      	b.n	8010ed6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	3304      	adds	r3, #4
 8010eae:	2100      	movs	r1, #0
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f000 fa73 	bl	801139c <RCCEx_PLLSAI1_Config>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010eba:	e00c      	b.n	8010ed6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	3320      	adds	r3, #32
 8010ec0:	2100      	movs	r1, #0
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f000 fb5e 	bl	8011584 <RCCEx_PLLSAI2_Config>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010ecc:	e003      	b.n	8010ed6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010ece:	2301      	movs	r3, #1
 8010ed0:	74fb      	strb	r3, [r7, #19]
      break;
 8010ed2:	e000      	b.n	8010ed6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8010ed4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010ed6:	7cfb      	ldrb	r3, [r7, #19]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d10b      	bne.n	8010ef4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8010edc:	4b52      	ldr	r3, [pc, #328]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010ee2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010eea:	494f      	ldr	r1, [pc, #316]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010eec:	4313      	orrs	r3, r2
 8010eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8010ef2:	e001      	b.n	8010ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010ef4:	7cfb      	ldrb	r3, [r7, #19]
 8010ef6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	f000 80a0 	beq.w	8011046 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010f06:	2300      	movs	r3, #0
 8010f08:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8010f0a:	4b47      	ldr	r3, [pc, #284]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d101      	bne.n	8010f1a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8010f16:	2301      	movs	r3, #1
 8010f18:	e000      	b.n	8010f1c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d00d      	beq.n	8010f3c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010f20:	4b41      	ldr	r3, [pc, #260]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f24:	4a40      	ldr	r2, [pc, #256]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010f26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010f2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8010f2c:	4b3e      	ldr	r3, [pc, #248]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010f34:	60bb      	str	r3, [r7, #8]
 8010f36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010f38:	2301      	movs	r3, #1
 8010f3a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010f3c:	4b3b      	ldr	r3, [pc, #236]	@ (801102c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	4a3a      	ldr	r2, [pc, #232]	@ (801102c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8010f42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010f46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010f48:	f7fa fc82 	bl	800b850 <HAL_GetTick>
 8010f4c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8010f4e:	e009      	b.n	8010f64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010f50:	f7fa fc7e 	bl	800b850 <HAL_GetTick>
 8010f54:	4602      	mov	r2, r0
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	1ad3      	subs	r3, r2, r3
 8010f5a:	2b02      	cmp	r3, #2
 8010f5c:	d902      	bls.n	8010f64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8010f5e:	2303      	movs	r3, #3
 8010f60:	74fb      	strb	r3, [r7, #19]
        break;
 8010f62:	e005      	b.n	8010f70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8010f64:	4b31      	ldr	r3, [pc, #196]	@ (801102c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d0ef      	beq.n	8010f50 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8010f70:	7cfb      	ldrb	r3, [r7, #19]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d15c      	bne.n	8011030 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8010f76:	4b2c      	ldr	r3, [pc, #176]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010f7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010f80:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8010f82:	697b      	ldr	r3, [r7, #20]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d01f      	beq.n	8010fc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010f8e:	697a      	ldr	r2, [r7, #20]
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d019      	beq.n	8010fc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8010f94:	4b24      	ldr	r3, [pc, #144]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010f9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010f9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8010fa0:	4b21      	ldr	r3, [pc, #132]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010fa6:	4a20      	ldr	r2, [pc, #128]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010fac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010fb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010fbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8010fc0:	4a19      	ldr	r2, [pc, #100]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010fc2:	697b      	ldr	r3, [r7, #20]
 8010fc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8010fc8:	697b      	ldr	r3, [r7, #20]
 8010fca:	f003 0301 	and.w	r3, r3, #1
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d016      	beq.n	8011000 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010fd2:	f7fa fc3d 	bl	800b850 <HAL_GetTick>
 8010fd6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010fd8:	e00b      	b.n	8010ff2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010fda:	f7fa fc39 	bl	800b850 <HAL_GetTick>
 8010fde:	4602      	mov	r2, r0
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	1ad3      	subs	r3, r2, r3
 8010fe4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010fe8:	4293      	cmp	r3, r2
 8010fea:	d902      	bls.n	8010ff2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8010fec:	2303      	movs	r3, #3
 8010fee:	74fb      	strb	r3, [r7, #19]
            break;
 8010ff0:	e006      	b.n	8011000 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010ff8:	f003 0302 	and.w	r3, r3, #2
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d0ec      	beq.n	8010fda <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8011000:	7cfb      	ldrb	r3, [r7, #19]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d10c      	bne.n	8011020 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011006:	4b08      	ldr	r3, [pc, #32]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801100c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011016:	4904      	ldr	r1, [pc, #16]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011018:	4313      	orrs	r3, r2
 801101a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 801101e:	e009      	b.n	8011034 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8011020:	7cfb      	ldrb	r3, [r7, #19]
 8011022:	74bb      	strb	r3, [r7, #18]
 8011024:	e006      	b.n	8011034 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8011026:	bf00      	nop
 8011028:	40021000 	.word	0x40021000
 801102c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011030:	7cfb      	ldrb	r3, [r7, #19]
 8011032:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011034:	7c7b      	ldrb	r3, [r7, #17]
 8011036:	2b01      	cmp	r3, #1
 8011038:	d105      	bne.n	8011046 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801103a:	4b9e      	ldr	r3, [pc, #632]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801103c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801103e:	4a9d      	ldr	r2, [pc, #628]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011040:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011044:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	f003 0301 	and.w	r3, r3, #1
 801104e:	2b00      	cmp	r3, #0
 8011050:	d00a      	beq.n	8011068 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011052:	4b98      	ldr	r3, [pc, #608]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011058:	f023 0203 	bic.w	r2, r3, #3
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011060:	4994      	ldr	r1, [pc, #592]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011062:	4313      	orrs	r3, r2
 8011064:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	f003 0302 	and.w	r3, r3, #2
 8011070:	2b00      	cmp	r3, #0
 8011072:	d00a      	beq.n	801108a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011074:	4b8f      	ldr	r3, [pc, #572]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801107a:	f023 020c 	bic.w	r2, r3, #12
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011082:	498c      	ldr	r1, [pc, #560]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011084:	4313      	orrs	r3, r2
 8011086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	f003 0304 	and.w	r3, r3, #4
 8011092:	2b00      	cmp	r3, #0
 8011094:	d00a      	beq.n	80110ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011096:	4b87      	ldr	r3, [pc, #540]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801109c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80110a4:	4983      	ldr	r1, [pc, #524]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80110a6:	4313      	orrs	r3, r2
 80110a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	f003 0308 	and.w	r3, r3, #8
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d00a      	beq.n	80110ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80110b8:	4b7e      	ldr	r3, [pc, #504]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80110ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80110be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110c6:	497b      	ldr	r1, [pc, #492]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80110c8:	4313      	orrs	r3, r2
 80110ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	f003 0310 	and.w	r3, r3, #16
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d00a      	beq.n	80110f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80110da:	4b76      	ldr	r3, [pc, #472]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80110dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80110e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80110e8:	4972      	ldr	r1, [pc, #456]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80110ea:	4313      	orrs	r3, r2
 80110ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	f003 0320 	and.w	r3, r3, #32
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d00a      	beq.n	8011112 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80110fc:	4b6d      	ldr	r3, [pc, #436]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80110fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011102:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801110a:	496a      	ldr	r1, [pc, #424]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801110c:	4313      	orrs	r3, r2
 801110e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801111a:	2b00      	cmp	r3, #0
 801111c:	d00a      	beq.n	8011134 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801111e:	4b65      	ldr	r3, [pc, #404]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011124:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801112c:	4961      	ldr	r1, [pc, #388]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801112e:	4313      	orrs	r3, r2
 8011130:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801113c:	2b00      	cmp	r3, #0
 801113e:	d00a      	beq.n	8011156 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8011140:	4b5c      	ldr	r3, [pc, #368]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011146:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801114e:	4959      	ldr	r1, [pc, #356]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011150:	4313      	orrs	r3, r2
 8011152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801115e:	2b00      	cmp	r3, #0
 8011160:	d00a      	beq.n	8011178 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011162:	4b54      	ldr	r3, [pc, #336]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011168:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011170:	4950      	ldr	r1, [pc, #320]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011172:	4313      	orrs	r3, r2
 8011174:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011180:	2b00      	cmp	r3, #0
 8011182:	d00a      	beq.n	801119a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8011184:	4b4b      	ldr	r3, [pc, #300]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801118a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011192:	4948      	ldr	r1, [pc, #288]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011194:	4313      	orrs	r3, r2
 8011196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d00a      	beq.n	80111bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80111a6:	4b43      	ldr	r3, [pc, #268]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80111a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80111ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80111b4:	493f      	ldr	r1, [pc, #252]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80111b6:	4313      	orrs	r3, r2
 80111b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d028      	beq.n	801121a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80111c8:	4b3a      	ldr	r3, [pc, #232]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80111ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80111ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111d6:	4937      	ldr	r1, [pc, #220]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80111d8:	4313      	orrs	r3, r2
 80111da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80111e6:	d106      	bne.n	80111f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80111e8:	4b32      	ldr	r3, [pc, #200]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80111ea:	68db      	ldr	r3, [r3, #12]
 80111ec:	4a31      	ldr	r2, [pc, #196]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80111ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80111f2:	60d3      	str	r3, [r2, #12]
 80111f4:	e011      	b.n	801121a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80111fe:	d10c      	bne.n	801121a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	3304      	adds	r3, #4
 8011204:	2101      	movs	r1, #1
 8011206:	4618      	mov	r0, r3
 8011208:	f000 f8c8 	bl	801139c <RCCEx_PLLSAI1_Config>
 801120c:	4603      	mov	r3, r0
 801120e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8011210:	7cfb      	ldrb	r3, [r7, #19]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d001      	beq.n	801121a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8011216:	7cfb      	ldrb	r3, [r7, #19]
 8011218:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8011222:	2b00      	cmp	r3, #0
 8011224:	d028      	beq.n	8011278 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8011226:	4b23      	ldr	r3, [pc, #140]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801122c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011234:	491f      	ldr	r1, [pc, #124]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011236:	4313      	orrs	r3, r2
 8011238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011240:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011244:	d106      	bne.n	8011254 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011246:	4b1b      	ldr	r3, [pc, #108]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011248:	68db      	ldr	r3, [r3, #12]
 801124a:	4a1a      	ldr	r2, [pc, #104]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801124c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011250:	60d3      	str	r3, [r2, #12]
 8011252:	e011      	b.n	8011278 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011258:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801125c:	d10c      	bne.n	8011278 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	3304      	adds	r3, #4
 8011262:	2101      	movs	r1, #1
 8011264:	4618      	mov	r0, r3
 8011266:	f000 f899 	bl	801139c <RCCEx_PLLSAI1_Config>
 801126a:	4603      	mov	r3, r0
 801126c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801126e:	7cfb      	ldrb	r3, [r7, #19]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d001      	beq.n	8011278 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8011274:	7cfb      	ldrb	r3, [r7, #19]
 8011276:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8011280:	2b00      	cmp	r3, #0
 8011282:	d02b      	beq.n	80112dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8011284:	4b0b      	ldr	r3, [pc, #44]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801128a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011292:	4908      	ldr	r1, [pc, #32]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011294:	4313      	orrs	r3, r2
 8011296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801129e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80112a2:	d109      	bne.n	80112b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80112a4:	4b03      	ldr	r3, [pc, #12]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80112a6:	68db      	ldr	r3, [r3, #12]
 80112a8:	4a02      	ldr	r2, [pc, #8]	@ (80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80112aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80112ae:	60d3      	str	r3, [r2, #12]
 80112b0:	e014      	b.n	80112dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80112b2:	bf00      	nop
 80112b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80112bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80112c0:	d10c      	bne.n	80112dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	3304      	adds	r3, #4
 80112c6:	2101      	movs	r1, #1
 80112c8:	4618      	mov	r0, r3
 80112ca:	f000 f867 	bl	801139c <RCCEx_PLLSAI1_Config>
 80112ce:	4603      	mov	r3, r0
 80112d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80112d2:	7cfb      	ldrb	r3, [r7, #19]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d001      	beq.n	80112dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80112d8:	7cfb      	ldrb	r3, [r7, #19]
 80112da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d02f      	beq.n	8011348 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80112e8:	4b2b      	ldr	r3, [pc, #172]	@ (8011398 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80112ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80112ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80112f6:	4928      	ldr	r1, [pc, #160]	@ (8011398 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80112f8:	4313      	orrs	r3, r2
 80112fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011302:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011306:	d10d      	bne.n	8011324 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	3304      	adds	r3, #4
 801130c:	2102      	movs	r1, #2
 801130e:	4618      	mov	r0, r3
 8011310:	f000 f844 	bl	801139c <RCCEx_PLLSAI1_Config>
 8011314:	4603      	mov	r3, r0
 8011316:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8011318:	7cfb      	ldrb	r3, [r7, #19]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d014      	beq.n	8011348 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 801131e:	7cfb      	ldrb	r3, [r7, #19]
 8011320:	74bb      	strb	r3, [r7, #18]
 8011322:	e011      	b.n	8011348 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011328:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801132c:	d10c      	bne.n	8011348 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	3320      	adds	r3, #32
 8011332:	2102      	movs	r1, #2
 8011334:	4618      	mov	r0, r3
 8011336:	f000 f925 	bl	8011584 <RCCEx_PLLSAI2_Config>
 801133a:	4603      	mov	r3, r0
 801133c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801133e:	7cfb      	ldrb	r3, [r7, #19]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d001      	beq.n	8011348 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8011344:	7cfb      	ldrb	r3, [r7, #19]
 8011346:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011350:	2b00      	cmp	r3, #0
 8011352:	d00a      	beq.n	801136a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8011354:	4b10      	ldr	r3, [pc, #64]	@ (8011398 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8011356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801135a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011362:	490d      	ldr	r1, [pc, #52]	@ (8011398 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8011364:	4313      	orrs	r3, r2
 8011366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011372:	2b00      	cmp	r3, #0
 8011374:	d00b      	beq.n	801138e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8011376:	4b08      	ldr	r3, [pc, #32]	@ (8011398 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8011378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801137c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011386:	4904      	ldr	r1, [pc, #16]	@ (8011398 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8011388:	4313      	orrs	r3, r2
 801138a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 801138e:	7cbb      	ldrb	r3, [r7, #18]
}
 8011390:	4618      	mov	r0, r3
 8011392:	3718      	adds	r7, #24
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}
 8011398:	40021000 	.word	0x40021000

0801139c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b084      	sub	sp, #16
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
 80113a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80113a6:	2300      	movs	r3, #0
 80113a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80113aa:	4b75      	ldr	r3, [pc, #468]	@ (8011580 <RCCEx_PLLSAI1_Config+0x1e4>)
 80113ac:	68db      	ldr	r3, [r3, #12]
 80113ae:	f003 0303 	and.w	r3, r3, #3
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d018      	beq.n	80113e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80113b6:	4b72      	ldr	r3, [pc, #456]	@ (8011580 <RCCEx_PLLSAI1_Config+0x1e4>)
 80113b8:	68db      	ldr	r3, [r3, #12]
 80113ba:	f003 0203 	and.w	r2, r3, #3
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	429a      	cmp	r2, r3
 80113c4:	d10d      	bne.n	80113e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681b      	ldr	r3, [r3, #0]
       ||
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d009      	beq.n	80113e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80113ce:	4b6c      	ldr	r3, [pc, #432]	@ (8011580 <RCCEx_PLLSAI1_Config+0x1e4>)
 80113d0:	68db      	ldr	r3, [r3, #12]
 80113d2:	091b      	lsrs	r3, r3, #4
 80113d4:	f003 0307 	and.w	r3, r3, #7
 80113d8:	1c5a      	adds	r2, r3, #1
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	685b      	ldr	r3, [r3, #4]
       ||
 80113de:	429a      	cmp	r2, r3
 80113e0:	d047      	beq.n	8011472 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80113e2:	2301      	movs	r3, #1
 80113e4:	73fb      	strb	r3, [r7, #15]
 80113e6:	e044      	b.n	8011472 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	2b03      	cmp	r3, #3
 80113ee:	d018      	beq.n	8011422 <RCCEx_PLLSAI1_Config+0x86>
 80113f0:	2b03      	cmp	r3, #3
 80113f2:	d825      	bhi.n	8011440 <RCCEx_PLLSAI1_Config+0xa4>
 80113f4:	2b01      	cmp	r3, #1
 80113f6:	d002      	beq.n	80113fe <RCCEx_PLLSAI1_Config+0x62>
 80113f8:	2b02      	cmp	r3, #2
 80113fa:	d009      	beq.n	8011410 <RCCEx_PLLSAI1_Config+0x74>
 80113fc:	e020      	b.n	8011440 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80113fe:	4b60      	ldr	r3, [pc, #384]	@ (8011580 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	f003 0302 	and.w	r3, r3, #2
 8011406:	2b00      	cmp	r3, #0
 8011408:	d11d      	bne.n	8011446 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 801140a:	2301      	movs	r3, #1
 801140c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801140e:	e01a      	b.n	8011446 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8011410:	4b5b      	ldr	r3, [pc, #364]	@ (8011580 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8011418:	2b00      	cmp	r3, #0
 801141a:	d116      	bne.n	801144a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 801141c:	2301      	movs	r3, #1
 801141e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011420:	e013      	b.n	801144a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8011422:	4b57      	ldr	r3, [pc, #348]	@ (8011580 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801142a:	2b00      	cmp	r3, #0
 801142c:	d10f      	bne.n	801144e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 801142e:	4b54      	ldr	r3, [pc, #336]	@ (8011580 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8011436:	2b00      	cmp	r3, #0
 8011438:	d109      	bne.n	801144e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 801143a:	2301      	movs	r3, #1
 801143c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801143e:	e006      	b.n	801144e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8011440:	2301      	movs	r3, #1
 8011442:	73fb      	strb	r3, [r7, #15]
      break;
 8011444:	e004      	b.n	8011450 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8011446:	bf00      	nop
 8011448:	e002      	b.n	8011450 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801144a:	bf00      	nop
 801144c:	e000      	b.n	8011450 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801144e:	bf00      	nop
    }

    if(status == HAL_OK)
 8011450:	7bfb      	ldrb	r3, [r7, #15]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d10d      	bne.n	8011472 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8011456:	4b4a      	ldr	r3, [pc, #296]	@ (8011580 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011458:	68db      	ldr	r3, [r3, #12]
 801145a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	6819      	ldr	r1, [r3, #0]
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	685b      	ldr	r3, [r3, #4]
 8011466:	3b01      	subs	r3, #1
 8011468:	011b      	lsls	r3, r3, #4
 801146a:	430b      	orrs	r3, r1
 801146c:	4944      	ldr	r1, [pc, #272]	@ (8011580 <RCCEx_PLLSAI1_Config+0x1e4>)
 801146e:	4313      	orrs	r3, r2
 8011470:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8011472:	7bfb      	ldrb	r3, [r7, #15]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d17d      	bne.n	8011574 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8011478:	4b41      	ldr	r3, [pc, #260]	@ (8011580 <RCCEx_PLLSAI1_Config+0x1e4>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	4a40      	ldr	r2, [pc, #256]	@ (8011580 <RCCEx_PLLSAI1_Config+0x1e4>)
 801147e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011482:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011484:	f7fa f9e4 	bl	800b850 <HAL_GetTick>
 8011488:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801148a:	e009      	b.n	80114a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801148c:	f7fa f9e0 	bl	800b850 <HAL_GetTick>
 8011490:	4602      	mov	r2, r0
 8011492:	68bb      	ldr	r3, [r7, #8]
 8011494:	1ad3      	subs	r3, r2, r3
 8011496:	2b02      	cmp	r3, #2
 8011498:	d902      	bls.n	80114a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 801149a:	2303      	movs	r3, #3
 801149c:	73fb      	strb	r3, [r7, #15]
        break;
 801149e:	e005      	b.n	80114ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80114a0:	4b37      	ldr	r3, [pc, #220]	@ (8011580 <RCCEx_PLLSAI1_Config+0x1e4>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d1ef      	bne.n	801148c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80114ac:	7bfb      	ldrb	r3, [r7, #15]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d160      	bne.n	8011574 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d111      	bne.n	80114dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80114b8:	4b31      	ldr	r3, [pc, #196]	@ (8011580 <RCCEx_PLLSAI1_Config+0x1e4>)
 80114ba:	691b      	ldr	r3, [r3, #16]
 80114bc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80114c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80114c4:	687a      	ldr	r2, [r7, #4]
 80114c6:	6892      	ldr	r2, [r2, #8]
 80114c8:	0211      	lsls	r1, r2, #8
 80114ca:	687a      	ldr	r2, [r7, #4]
 80114cc:	68d2      	ldr	r2, [r2, #12]
 80114ce:	0912      	lsrs	r2, r2, #4
 80114d0:	0452      	lsls	r2, r2, #17
 80114d2:	430a      	orrs	r2, r1
 80114d4:	492a      	ldr	r1, [pc, #168]	@ (8011580 <RCCEx_PLLSAI1_Config+0x1e4>)
 80114d6:	4313      	orrs	r3, r2
 80114d8:	610b      	str	r3, [r1, #16]
 80114da:	e027      	b.n	801152c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80114dc:	683b      	ldr	r3, [r7, #0]
 80114de:	2b01      	cmp	r3, #1
 80114e0:	d112      	bne.n	8011508 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80114e2:	4b27      	ldr	r3, [pc, #156]	@ (8011580 <RCCEx_PLLSAI1_Config+0x1e4>)
 80114e4:	691b      	ldr	r3, [r3, #16]
 80114e6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80114ea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80114ee:	687a      	ldr	r2, [r7, #4]
 80114f0:	6892      	ldr	r2, [r2, #8]
 80114f2:	0211      	lsls	r1, r2, #8
 80114f4:	687a      	ldr	r2, [r7, #4]
 80114f6:	6912      	ldr	r2, [r2, #16]
 80114f8:	0852      	lsrs	r2, r2, #1
 80114fa:	3a01      	subs	r2, #1
 80114fc:	0552      	lsls	r2, r2, #21
 80114fe:	430a      	orrs	r2, r1
 8011500:	491f      	ldr	r1, [pc, #124]	@ (8011580 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011502:	4313      	orrs	r3, r2
 8011504:	610b      	str	r3, [r1, #16]
 8011506:	e011      	b.n	801152c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8011508:	4b1d      	ldr	r3, [pc, #116]	@ (8011580 <RCCEx_PLLSAI1_Config+0x1e4>)
 801150a:	691b      	ldr	r3, [r3, #16]
 801150c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8011510:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8011514:	687a      	ldr	r2, [r7, #4]
 8011516:	6892      	ldr	r2, [r2, #8]
 8011518:	0211      	lsls	r1, r2, #8
 801151a:	687a      	ldr	r2, [r7, #4]
 801151c:	6952      	ldr	r2, [r2, #20]
 801151e:	0852      	lsrs	r2, r2, #1
 8011520:	3a01      	subs	r2, #1
 8011522:	0652      	lsls	r2, r2, #25
 8011524:	430a      	orrs	r2, r1
 8011526:	4916      	ldr	r1, [pc, #88]	@ (8011580 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011528:	4313      	orrs	r3, r2
 801152a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 801152c:	4b14      	ldr	r3, [pc, #80]	@ (8011580 <RCCEx_PLLSAI1_Config+0x1e4>)
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	4a13      	ldr	r2, [pc, #76]	@ (8011580 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011532:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8011536:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011538:	f7fa f98a 	bl	800b850 <HAL_GetTick>
 801153c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801153e:	e009      	b.n	8011554 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8011540:	f7fa f986 	bl	800b850 <HAL_GetTick>
 8011544:	4602      	mov	r2, r0
 8011546:	68bb      	ldr	r3, [r7, #8]
 8011548:	1ad3      	subs	r3, r2, r3
 801154a:	2b02      	cmp	r3, #2
 801154c:	d902      	bls.n	8011554 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 801154e:	2303      	movs	r3, #3
 8011550:	73fb      	strb	r3, [r7, #15]
          break;
 8011552:	e005      	b.n	8011560 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8011554:	4b0a      	ldr	r3, [pc, #40]	@ (8011580 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801155c:	2b00      	cmp	r3, #0
 801155e:	d0ef      	beq.n	8011540 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8011560:	7bfb      	ldrb	r3, [r7, #15]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d106      	bne.n	8011574 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8011566:	4b06      	ldr	r3, [pc, #24]	@ (8011580 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011568:	691a      	ldr	r2, [r3, #16]
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	699b      	ldr	r3, [r3, #24]
 801156e:	4904      	ldr	r1, [pc, #16]	@ (8011580 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011570:	4313      	orrs	r3, r2
 8011572:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8011574:	7bfb      	ldrb	r3, [r7, #15]
}
 8011576:	4618      	mov	r0, r3
 8011578:	3710      	adds	r7, #16
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}
 801157e:	bf00      	nop
 8011580:	40021000 	.word	0x40021000

08011584 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b084      	sub	sp, #16
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
 801158c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801158e:	2300      	movs	r3, #0
 8011590:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8011592:	4b6a      	ldr	r3, [pc, #424]	@ (801173c <RCCEx_PLLSAI2_Config+0x1b8>)
 8011594:	68db      	ldr	r3, [r3, #12]
 8011596:	f003 0303 	and.w	r3, r3, #3
 801159a:	2b00      	cmp	r3, #0
 801159c:	d018      	beq.n	80115d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 801159e:	4b67      	ldr	r3, [pc, #412]	@ (801173c <RCCEx_PLLSAI2_Config+0x1b8>)
 80115a0:	68db      	ldr	r3, [r3, #12]
 80115a2:	f003 0203 	and.w	r2, r3, #3
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	429a      	cmp	r2, r3
 80115ac:	d10d      	bne.n	80115ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	681b      	ldr	r3, [r3, #0]
       ||
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d009      	beq.n	80115ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80115b6:	4b61      	ldr	r3, [pc, #388]	@ (801173c <RCCEx_PLLSAI2_Config+0x1b8>)
 80115b8:	68db      	ldr	r3, [r3, #12]
 80115ba:	091b      	lsrs	r3, r3, #4
 80115bc:	f003 0307 	and.w	r3, r3, #7
 80115c0:	1c5a      	adds	r2, r3, #1
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	685b      	ldr	r3, [r3, #4]
       ||
 80115c6:	429a      	cmp	r2, r3
 80115c8:	d047      	beq.n	801165a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80115ca:	2301      	movs	r3, #1
 80115cc:	73fb      	strb	r3, [r7, #15]
 80115ce:	e044      	b.n	801165a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	2b03      	cmp	r3, #3
 80115d6:	d018      	beq.n	801160a <RCCEx_PLLSAI2_Config+0x86>
 80115d8:	2b03      	cmp	r3, #3
 80115da:	d825      	bhi.n	8011628 <RCCEx_PLLSAI2_Config+0xa4>
 80115dc:	2b01      	cmp	r3, #1
 80115de:	d002      	beq.n	80115e6 <RCCEx_PLLSAI2_Config+0x62>
 80115e0:	2b02      	cmp	r3, #2
 80115e2:	d009      	beq.n	80115f8 <RCCEx_PLLSAI2_Config+0x74>
 80115e4:	e020      	b.n	8011628 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80115e6:	4b55      	ldr	r3, [pc, #340]	@ (801173c <RCCEx_PLLSAI2_Config+0x1b8>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	f003 0302 	and.w	r3, r3, #2
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d11d      	bne.n	801162e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80115f2:	2301      	movs	r3, #1
 80115f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80115f6:	e01a      	b.n	801162e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80115f8:	4b50      	ldr	r3, [pc, #320]	@ (801173c <RCCEx_PLLSAI2_Config+0x1b8>)
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8011600:	2b00      	cmp	r3, #0
 8011602:	d116      	bne.n	8011632 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8011604:	2301      	movs	r3, #1
 8011606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011608:	e013      	b.n	8011632 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801160a:	4b4c      	ldr	r3, [pc, #304]	@ (801173c <RCCEx_PLLSAI2_Config+0x1b8>)
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011612:	2b00      	cmp	r3, #0
 8011614:	d10f      	bne.n	8011636 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8011616:	4b49      	ldr	r3, [pc, #292]	@ (801173c <RCCEx_PLLSAI2_Config+0x1b8>)
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801161e:	2b00      	cmp	r3, #0
 8011620:	d109      	bne.n	8011636 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8011622:	2301      	movs	r3, #1
 8011624:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011626:	e006      	b.n	8011636 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8011628:	2301      	movs	r3, #1
 801162a:	73fb      	strb	r3, [r7, #15]
      break;
 801162c:	e004      	b.n	8011638 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 801162e:	bf00      	nop
 8011630:	e002      	b.n	8011638 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8011632:	bf00      	nop
 8011634:	e000      	b.n	8011638 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8011636:	bf00      	nop
    }

    if(status == HAL_OK)
 8011638:	7bfb      	ldrb	r3, [r7, #15]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d10d      	bne.n	801165a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 801163e:	4b3f      	ldr	r3, [pc, #252]	@ (801173c <RCCEx_PLLSAI2_Config+0x1b8>)
 8011640:	68db      	ldr	r3, [r3, #12]
 8011642:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	6819      	ldr	r1, [r3, #0]
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	685b      	ldr	r3, [r3, #4]
 801164e:	3b01      	subs	r3, #1
 8011650:	011b      	lsls	r3, r3, #4
 8011652:	430b      	orrs	r3, r1
 8011654:	4939      	ldr	r1, [pc, #228]	@ (801173c <RCCEx_PLLSAI2_Config+0x1b8>)
 8011656:	4313      	orrs	r3, r2
 8011658:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 801165a:	7bfb      	ldrb	r3, [r7, #15]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d167      	bne.n	8011730 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8011660:	4b36      	ldr	r3, [pc, #216]	@ (801173c <RCCEx_PLLSAI2_Config+0x1b8>)
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	4a35      	ldr	r2, [pc, #212]	@ (801173c <RCCEx_PLLSAI2_Config+0x1b8>)
 8011666:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801166a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801166c:	f7fa f8f0 	bl	800b850 <HAL_GetTick>
 8011670:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8011672:	e009      	b.n	8011688 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8011674:	f7fa f8ec 	bl	800b850 <HAL_GetTick>
 8011678:	4602      	mov	r2, r0
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	1ad3      	subs	r3, r2, r3
 801167e:	2b02      	cmp	r3, #2
 8011680:	d902      	bls.n	8011688 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8011682:	2303      	movs	r3, #3
 8011684:	73fb      	strb	r3, [r7, #15]
        break;
 8011686:	e005      	b.n	8011694 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8011688:	4b2c      	ldr	r3, [pc, #176]	@ (801173c <RCCEx_PLLSAI2_Config+0x1b8>)
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011690:	2b00      	cmp	r3, #0
 8011692:	d1ef      	bne.n	8011674 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8011694:	7bfb      	ldrb	r3, [r7, #15]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d14a      	bne.n	8011730 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d111      	bne.n	80116c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80116a0:	4b26      	ldr	r3, [pc, #152]	@ (801173c <RCCEx_PLLSAI2_Config+0x1b8>)
 80116a2:	695b      	ldr	r3, [r3, #20]
 80116a4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80116a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80116ac:	687a      	ldr	r2, [r7, #4]
 80116ae:	6892      	ldr	r2, [r2, #8]
 80116b0:	0211      	lsls	r1, r2, #8
 80116b2:	687a      	ldr	r2, [r7, #4]
 80116b4:	68d2      	ldr	r2, [r2, #12]
 80116b6:	0912      	lsrs	r2, r2, #4
 80116b8:	0452      	lsls	r2, r2, #17
 80116ba:	430a      	orrs	r2, r1
 80116bc:	491f      	ldr	r1, [pc, #124]	@ (801173c <RCCEx_PLLSAI2_Config+0x1b8>)
 80116be:	4313      	orrs	r3, r2
 80116c0:	614b      	str	r3, [r1, #20]
 80116c2:	e011      	b.n	80116e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80116c4:	4b1d      	ldr	r3, [pc, #116]	@ (801173c <RCCEx_PLLSAI2_Config+0x1b8>)
 80116c6:	695b      	ldr	r3, [r3, #20]
 80116c8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80116cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80116d0:	687a      	ldr	r2, [r7, #4]
 80116d2:	6892      	ldr	r2, [r2, #8]
 80116d4:	0211      	lsls	r1, r2, #8
 80116d6:	687a      	ldr	r2, [r7, #4]
 80116d8:	6912      	ldr	r2, [r2, #16]
 80116da:	0852      	lsrs	r2, r2, #1
 80116dc:	3a01      	subs	r2, #1
 80116de:	0652      	lsls	r2, r2, #25
 80116e0:	430a      	orrs	r2, r1
 80116e2:	4916      	ldr	r1, [pc, #88]	@ (801173c <RCCEx_PLLSAI2_Config+0x1b8>)
 80116e4:	4313      	orrs	r3, r2
 80116e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80116e8:	4b14      	ldr	r3, [pc, #80]	@ (801173c <RCCEx_PLLSAI2_Config+0x1b8>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	4a13      	ldr	r2, [pc, #76]	@ (801173c <RCCEx_PLLSAI2_Config+0x1b8>)
 80116ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80116f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80116f4:	f7fa f8ac 	bl	800b850 <HAL_GetTick>
 80116f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80116fa:	e009      	b.n	8011710 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80116fc:	f7fa f8a8 	bl	800b850 <HAL_GetTick>
 8011700:	4602      	mov	r2, r0
 8011702:	68bb      	ldr	r3, [r7, #8]
 8011704:	1ad3      	subs	r3, r2, r3
 8011706:	2b02      	cmp	r3, #2
 8011708:	d902      	bls.n	8011710 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 801170a:	2303      	movs	r3, #3
 801170c:	73fb      	strb	r3, [r7, #15]
          break;
 801170e:	e005      	b.n	801171c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8011710:	4b0a      	ldr	r3, [pc, #40]	@ (801173c <RCCEx_PLLSAI2_Config+0x1b8>)
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011718:	2b00      	cmp	r3, #0
 801171a:	d0ef      	beq.n	80116fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 801171c:	7bfb      	ldrb	r3, [r7, #15]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d106      	bne.n	8011730 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8011722:	4b06      	ldr	r3, [pc, #24]	@ (801173c <RCCEx_PLLSAI2_Config+0x1b8>)
 8011724:	695a      	ldr	r2, [r3, #20]
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	695b      	ldr	r3, [r3, #20]
 801172a:	4904      	ldr	r1, [pc, #16]	@ (801173c <RCCEx_PLLSAI2_Config+0x1b8>)
 801172c:	4313      	orrs	r3, r2
 801172e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8011730:	7bfb      	ldrb	r3, [r7, #15]
}
 8011732:	4618      	mov	r0, r3
 8011734:	3710      	adds	r7, #16
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}
 801173a:	bf00      	nop
 801173c:	40021000 	.word	0x40021000

08011740 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b084      	sub	sp, #16
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011748:	2301      	movs	r3, #1
 801174a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d079      	beq.n	8011846 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8011758:	b2db      	uxtb	r3, r3
 801175a:	2b00      	cmp	r3, #0
 801175c:	d106      	bne.n	801176c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	2200      	movs	r2, #0
 8011762:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8011766:	6878      	ldr	r0, [r7, #4]
 8011768:	f7f6 fc0e 	bl	8007f88 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	2202      	movs	r2, #2
 8011770:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	68db      	ldr	r3, [r3, #12]
 801177a:	f003 0310 	and.w	r3, r3, #16
 801177e:	2b10      	cmp	r3, #16
 8011780:	d058      	beq.n	8011834 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	22ca      	movs	r2, #202	@ 0xca
 8011788:	625a      	str	r2, [r3, #36]	@ 0x24
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	2253      	movs	r2, #83	@ 0x53
 8011790:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8011792:	6878      	ldr	r0, [r7, #4]
 8011794:	f000 fb82 	bl	8011e9c <RTC_EnterInitMode>
 8011798:	4603      	mov	r3, r0
 801179a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 801179c:	7bfb      	ldrb	r3, [r7, #15]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d127      	bne.n	80117f2 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	689b      	ldr	r3, [r3, #8]
 80117a8:	687a      	ldr	r2, [r7, #4]
 80117aa:	6812      	ldr	r2, [r2, #0]
 80117ac:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80117b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80117b4:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	6899      	ldr	r1, [r3, #8]
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	685a      	ldr	r2, [r3, #4]
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	691b      	ldr	r3, [r3, #16]
 80117c4:	431a      	orrs	r2, r3
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	699b      	ldr	r3, [r3, #24]
 80117ca:	431a      	orrs	r2, r3
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	430a      	orrs	r2, r1
 80117d2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	687a      	ldr	r2, [r7, #4]
 80117da:	68d2      	ldr	r2, [r2, #12]
 80117dc:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	6919      	ldr	r1, [r3, #16]
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	689b      	ldr	r3, [r3, #8]
 80117e8:	041a      	lsls	r2, r3, #16
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	430a      	orrs	r2, r1
 80117f0:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80117f2:	6878      	ldr	r0, [r7, #4]
 80117f4:	f000 fb86 	bl	8011f04 <RTC_ExitInitMode>
 80117f8:	4603      	mov	r3, r0
 80117fa:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80117fc:	7bfb      	ldrb	r3, [r7, #15]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d113      	bne.n	801182a <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	f022 0203 	bic.w	r2, r2, #3
 8011810:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	69da      	ldr	r2, [r3, #28]
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	695b      	ldr	r3, [r3, #20]
 8011820:	431a      	orrs	r2, r3
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	430a      	orrs	r2, r1
 8011828:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	22ff      	movs	r2, #255	@ 0xff
 8011830:	625a      	str	r2, [r3, #36]	@ 0x24
 8011832:	e001      	b.n	8011838 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8011834:	2300      	movs	r3, #0
 8011836:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8011838:	7bfb      	ldrb	r3, [r7, #15]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d103      	bne.n	8011846 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	2201      	movs	r2, #1
 8011842:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8011846:	7bfb      	ldrb	r3, [r7, #15]
}
 8011848:	4618      	mov	r0, r3
 801184a:	3710      	adds	r7, #16
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}

08011850 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011850:	b590      	push	{r4, r7, lr}
 8011852:	b087      	sub	sp, #28
 8011854:	af00      	add	r7, sp, #0
 8011856:	60f8      	str	r0, [r7, #12]
 8011858:	60b9      	str	r1, [r7, #8]
 801185a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011862:	2b01      	cmp	r3, #1
 8011864:	d101      	bne.n	801186a <HAL_RTC_SetTime+0x1a>
 8011866:	2302      	movs	r3, #2
 8011868:	e08b      	b.n	8011982 <HAL_RTC_SetTime+0x132>
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	2201      	movs	r2, #1
 801186e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	2202      	movs	r2, #2
 8011876:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	22ca      	movs	r2, #202	@ 0xca
 8011880:	625a      	str	r2, [r3, #36]	@ 0x24
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	2253      	movs	r2, #83	@ 0x53
 8011888:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801188a:	68f8      	ldr	r0, [r7, #12]
 801188c:	f000 fb06 	bl	8011e9c <RTC_EnterInitMode>
 8011890:	4603      	mov	r3, r0
 8011892:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011894:	7cfb      	ldrb	r3, [r7, #19]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d163      	bne.n	8011962 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d126      	bne.n	80118ee <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	689b      	ldr	r3, [r3, #8]
 80118a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d102      	bne.n	80118b4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80118ae:	68bb      	ldr	r3, [r7, #8]
 80118b0:	2200      	movs	r2, #0
 80118b2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80118b4:	68bb      	ldr	r3, [r7, #8]
 80118b6:	781b      	ldrb	r3, [r3, #0]
 80118b8:	4618      	mov	r0, r3
 80118ba:	f000 fb61 	bl	8011f80 <RTC_ByteToBcd2>
 80118be:	4603      	mov	r3, r0
 80118c0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	785b      	ldrb	r3, [r3, #1]
 80118c6:	4618      	mov	r0, r3
 80118c8:	f000 fb5a 	bl	8011f80 <RTC_ByteToBcd2>
 80118cc:	4603      	mov	r3, r0
 80118ce:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80118d0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	789b      	ldrb	r3, [r3, #2]
 80118d6:	4618      	mov	r0, r3
 80118d8:	f000 fb52 	bl	8011f80 <RTC_ByteToBcd2>
 80118dc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80118de:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	78db      	ldrb	r3, [r3, #3]
 80118e6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80118e8:	4313      	orrs	r3, r2
 80118ea:	617b      	str	r3, [r7, #20]
 80118ec:	e018      	b.n	8011920 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	689b      	ldr	r3, [r3, #8]
 80118f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d102      	bne.n	8011902 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80118fc:	68bb      	ldr	r3, [r7, #8]
 80118fe:	2200      	movs	r2, #0
 8011900:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011902:	68bb      	ldr	r3, [r7, #8]
 8011904:	781b      	ldrb	r3, [r3, #0]
 8011906:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011908:	68bb      	ldr	r3, [r7, #8]
 801190a:	785b      	ldrb	r3, [r3, #1]
 801190c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 801190e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8011910:	68ba      	ldr	r2, [r7, #8]
 8011912:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011914:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011916:	68bb      	ldr	r3, [r7, #8]
 8011918:	78db      	ldrb	r3, [r3, #3]
 801191a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 801191c:	4313      	orrs	r3, r2
 801191e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	681a      	ldr	r2, [r3, #0]
 8011924:	697b      	ldr	r3, [r7, #20]
 8011926:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 801192a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 801192e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	689a      	ldr	r2, [r3, #8]
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 801193e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	6899      	ldr	r1, [r3, #8]
 8011946:	68bb      	ldr	r3, [r7, #8]
 8011948:	68da      	ldr	r2, [r3, #12]
 801194a:	68bb      	ldr	r3, [r7, #8]
 801194c:	691b      	ldr	r3, [r3, #16]
 801194e:	431a      	orrs	r2, r3
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	430a      	orrs	r2, r1
 8011956:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011958:	68f8      	ldr	r0, [r7, #12]
 801195a:	f000 fad3 	bl	8011f04 <RTC_ExitInitMode>
 801195e:	4603      	mov	r3, r0
 8011960:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	22ff      	movs	r2, #255	@ 0xff
 8011968:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 801196a:	7cfb      	ldrb	r3, [r7, #19]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d103      	bne.n	8011978 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	2201      	movs	r2, #1
 8011974:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	2200      	movs	r2, #0
 801197c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011980:	7cfb      	ldrb	r3, [r7, #19]
}
 8011982:	4618      	mov	r0, r3
 8011984:	371c      	adds	r7, #28
 8011986:	46bd      	mov	sp, r7
 8011988:	bd90      	pop	{r4, r7, pc}

0801198a <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801198a:	b580      	push	{r7, lr}
 801198c:	b086      	sub	sp, #24
 801198e:	af00      	add	r7, sp, #0
 8011990:	60f8      	str	r0, [r7, #12]
 8011992:	60b9      	str	r1, [r7, #8]
 8011994:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801199c:	68bb      	ldr	r3, [r7, #8]
 801199e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	691b      	ldr	r3, [r3, #16]
 80119a6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80119aa:	68bb      	ldr	r3, [r7, #8]
 80119ac:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80119b8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80119bc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80119be:	697b      	ldr	r3, [r7, #20]
 80119c0:	0c1b      	lsrs	r3, r3, #16
 80119c2:	b2db      	uxtb	r3, r3
 80119c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80119c8:	b2da      	uxtb	r2, r3
 80119ca:	68bb      	ldr	r3, [r7, #8]
 80119cc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80119ce:	697b      	ldr	r3, [r7, #20]
 80119d0:	0a1b      	lsrs	r3, r3, #8
 80119d2:	b2db      	uxtb	r3, r3
 80119d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80119d8:	b2da      	uxtb	r2, r3
 80119da:	68bb      	ldr	r3, [r7, #8]
 80119dc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80119de:	697b      	ldr	r3, [r7, #20]
 80119e0:	b2db      	uxtb	r3, r3
 80119e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80119e6:	b2da      	uxtb	r2, r3
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80119ec:	697b      	ldr	r3, [r7, #20]
 80119ee:	0d9b      	lsrs	r3, r3, #22
 80119f0:	b2db      	uxtb	r3, r3
 80119f2:	f003 0301 	and.w	r3, r3, #1
 80119f6:	b2da      	uxtb	r2, r3
 80119f8:	68bb      	ldr	r3, [r7, #8]
 80119fa:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d11a      	bne.n	8011a38 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	781b      	ldrb	r3, [r3, #0]
 8011a06:	4618      	mov	r0, r3
 8011a08:	f000 fada 	bl	8011fc0 <RTC_Bcd2ToByte>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	461a      	mov	r2, r3
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011a14:	68bb      	ldr	r3, [r7, #8]
 8011a16:	785b      	ldrb	r3, [r3, #1]
 8011a18:	4618      	mov	r0, r3
 8011a1a:	f000 fad1 	bl	8011fc0 <RTC_Bcd2ToByte>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	461a      	mov	r2, r3
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8011a26:	68bb      	ldr	r3, [r7, #8]
 8011a28:	789b      	ldrb	r3, [r3, #2]
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f000 fac8 	bl	8011fc0 <RTC_Bcd2ToByte>
 8011a30:	4603      	mov	r3, r0
 8011a32:	461a      	mov	r2, r3
 8011a34:	68bb      	ldr	r3, [r7, #8]
 8011a36:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8011a38:	2300      	movs	r3, #0
}
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	3718      	adds	r7, #24
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	bd80      	pop	{r7, pc}

08011a42 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011a42:	b590      	push	{r4, r7, lr}
 8011a44:	b087      	sub	sp, #28
 8011a46:	af00      	add	r7, sp, #0
 8011a48:	60f8      	str	r0, [r7, #12]
 8011a4a:	60b9      	str	r1, [r7, #8]
 8011a4c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011a54:	2b01      	cmp	r3, #1
 8011a56:	d101      	bne.n	8011a5c <HAL_RTC_SetDate+0x1a>
 8011a58:	2302      	movs	r3, #2
 8011a5a:	e075      	b.n	8011b48 <HAL_RTC_SetDate+0x106>
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	2201      	movs	r2, #1
 8011a60:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	2202      	movs	r2, #2
 8011a68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d10e      	bne.n	8011a90 <HAL_RTC_SetDate+0x4e>
 8011a72:	68bb      	ldr	r3, [r7, #8]
 8011a74:	785b      	ldrb	r3, [r3, #1]
 8011a76:	f003 0310 	and.w	r3, r3, #16
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d008      	beq.n	8011a90 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	785b      	ldrb	r3, [r3, #1]
 8011a82:	f023 0310 	bic.w	r3, r3, #16
 8011a86:	b2db      	uxtb	r3, r3
 8011a88:	330a      	adds	r3, #10
 8011a8a:	b2da      	uxtb	r2, r3
 8011a8c:	68bb      	ldr	r3, [r7, #8]
 8011a8e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d11c      	bne.n	8011ad0 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	78db      	ldrb	r3, [r3, #3]
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f000 fa70 	bl	8011f80 <RTC_ByteToBcd2>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011aa4:	68bb      	ldr	r3, [r7, #8]
 8011aa6:	785b      	ldrb	r3, [r3, #1]
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	f000 fa69 	bl	8011f80 <RTC_ByteToBcd2>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8011ab2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	789b      	ldrb	r3, [r3, #2]
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f000 fa61 	bl	8011f80 <RTC_ByteToBcd2>
 8011abe:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011ac0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8011ac4:	68bb      	ldr	r3, [r7, #8]
 8011ac6:	781b      	ldrb	r3, [r3, #0]
 8011ac8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8011aca:	4313      	orrs	r3, r2
 8011acc:	617b      	str	r3, [r7, #20]
 8011ace:	e00e      	b.n	8011aee <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	78db      	ldrb	r3, [r3, #3]
 8011ad4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8011ad6:	68bb      	ldr	r3, [r7, #8]
 8011ad8:	785b      	ldrb	r3, [r3, #1]
 8011ada:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8011adc:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8011ade:	68ba      	ldr	r2, [r7, #8]
 8011ae0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8011ae2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8011ae4:	68bb      	ldr	r3, [r7, #8]
 8011ae6:	781b      	ldrb	r3, [r3, #0]
 8011ae8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8011aea:	4313      	orrs	r3, r2
 8011aec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	22ca      	movs	r2, #202	@ 0xca
 8011af4:	625a      	str	r2, [r3, #36]	@ 0x24
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	2253      	movs	r2, #83	@ 0x53
 8011afc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011afe:	68f8      	ldr	r0, [r7, #12]
 8011b00:	f000 f9cc 	bl	8011e9c <RTC_EnterInitMode>
 8011b04:	4603      	mov	r3, r0
 8011b06:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011b08:	7cfb      	ldrb	r3, [r7, #19]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d10c      	bne.n	8011b28 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	681a      	ldr	r2, [r3, #0]
 8011b12:	697b      	ldr	r3, [r7, #20]
 8011b14:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8011b18:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011b1c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011b1e:	68f8      	ldr	r0, [r7, #12]
 8011b20:	f000 f9f0 	bl	8011f04 <RTC_ExitInitMode>
 8011b24:	4603      	mov	r3, r0
 8011b26:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	22ff      	movs	r2, #255	@ 0xff
 8011b2e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8011b30:	7cfb      	ldrb	r3, [r7, #19]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d103      	bne.n	8011b3e <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	2201      	movs	r2, #1
 8011b3a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	2200      	movs	r2, #0
 8011b42:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011b46:	7cfb      	ldrb	r3, [r7, #19]
}
 8011b48:	4618      	mov	r0, r3
 8011b4a:	371c      	adds	r7, #28
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	bd90      	pop	{r4, r7, pc}

08011b50 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8011b50:	b590      	push	{r4, r7, lr}
 8011b52:	b089      	sub	sp, #36	@ 0x24
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	60f8      	str	r0, [r7, #12]
 8011b58:	60b9      	str	r1, [r7, #8]
 8011b5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011b62:	2b01      	cmp	r3, #1
 8011b64:	d101      	bne.n	8011b6a <HAL_RTC_SetAlarm_IT+0x1a>
 8011b66:	2302      	movs	r3, #2
 8011b68:	e127      	b.n	8011dba <HAL_RTC_SetAlarm_IT+0x26a>
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	2201      	movs	r2, #1
 8011b6e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	2202      	movs	r2, #2
 8011b76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d137      	bne.n	8011bf0 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	689b      	ldr	r3, [r3, #8]
 8011b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d102      	bne.n	8011b94 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8011b8e:	68bb      	ldr	r3, [r7, #8]
 8011b90:	2200      	movs	r2, #0
 8011b92:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	781b      	ldrb	r3, [r3, #0]
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f000 f9f1 	bl	8011f80 <RTC_ByteToBcd2>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8011ba2:	68bb      	ldr	r3, [r7, #8]
 8011ba4:	785b      	ldrb	r3, [r3, #1]
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f000 f9ea 	bl	8011f80 <RTC_ByteToBcd2>
 8011bac:	4603      	mov	r3, r0
 8011bae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011bb0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8011bb2:	68bb      	ldr	r3, [r7, #8]
 8011bb4:	789b      	ldrb	r3, [r3, #2]
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f000 f9e2 	bl	8011f80 <RTC_ByteToBcd2>
 8011bbc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8011bbe:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8011bc2:	68bb      	ldr	r3, [r7, #8]
 8011bc4:	78db      	ldrb	r3, [r3, #3]
 8011bc6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8011bc8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	f000 f9d4 	bl	8011f80 <RTC_ByteToBcd2>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8011bdc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8011be0:	68bb      	ldr	r3, [r7, #8]
 8011be2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8011be4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8011be6:	68bb      	ldr	r3, [r7, #8]
 8011be8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011bea:	4313      	orrs	r3, r2
 8011bec:	61fb      	str	r3, [r7, #28]
 8011bee:	e023      	b.n	8011c38 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	689b      	ldr	r3, [r3, #8]
 8011bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d102      	bne.n	8011c04 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8011bfe:	68bb      	ldr	r3, [r7, #8]
 8011c00:	2200      	movs	r2, #0
 8011c02:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011c04:	68bb      	ldr	r3, [r7, #8]
 8011c06:	781b      	ldrb	r3, [r3, #0]
 8011c08:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8011c0a:	68bb      	ldr	r3, [r7, #8]
 8011c0c:	785b      	ldrb	r3, [r3, #1]
 8011c0e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011c10:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8011c12:	68ba      	ldr	r2, [r7, #8]
 8011c14:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8011c16:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	78db      	ldrb	r3, [r3, #3]
 8011c1c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8011c1e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8011c20:	68bb      	ldr	r3, [r7, #8]
 8011c22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8011c26:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8011c28:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8011c2e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8011c30:	68bb      	ldr	r3, [r7, #8]
 8011c32:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011c34:	4313      	orrs	r3, r2
 8011c36:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8011c38:	68bb      	ldr	r3, [r7, #8]
 8011c3a:	685a      	ldr	r2, [r3, #4]
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	69db      	ldr	r3, [r3, #28]
 8011c40:	4313      	orrs	r3, r2
 8011c42:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	22ca      	movs	r2, #202	@ 0xca
 8011c4a:	625a      	str	r2, [r3, #36]	@ 0x24
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	2253      	movs	r2, #83	@ 0x53
 8011c52:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8011c54:	68bb      	ldr	r3, [r7, #8]
 8011c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011c5c:	d14a      	bne.n	8011cf4 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	689a      	ldr	r2, [r3, #8]
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011c6c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	68db      	ldr	r3, [r3, #12]
 8011c74:	b2da      	uxtb	r2, r3
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8011c7e:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8011c80:	f7f9 fde6 	bl	800b850 <HAL_GetTick>
 8011c84:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8011c86:	e015      	b.n	8011cb4 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011c88:	f7f9 fde2 	bl	800b850 <HAL_GetTick>
 8011c8c:	4602      	mov	r2, r0
 8011c8e:	693b      	ldr	r3, [r7, #16]
 8011c90:	1ad3      	subs	r3, r2, r3
 8011c92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011c96:	d90d      	bls.n	8011cb4 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	22ff      	movs	r2, #255	@ 0xff
 8011c9e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	2203      	movs	r2, #3
 8011ca4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	2200      	movs	r2, #0
 8011cac:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8011cb0:	2303      	movs	r3, #3
 8011cb2:	e082      	b.n	8011dba <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	68db      	ldr	r3, [r3, #12]
 8011cba:	f003 0301 	and.w	r3, r3, #1
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d0e2      	beq.n	8011c88 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	69fa      	ldr	r2, [r7, #28]
 8011cc8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	69ba      	ldr	r2, [r7, #24]
 8011cd0:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	689a      	ldr	r2, [r3, #8]
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011ce0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	689a      	ldr	r2, [r3, #8]
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011cf0:	609a      	str	r2, [r3, #8]
 8011cf2:	e049      	b.n	8011d88 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	689a      	ldr	r2, [r3, #8]
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8011d02:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	68db      	ldr	r3, [r3, #12]
 8011d0a:	b2da      	uxtb	r2, r3
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8011d14:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8011d16:	f7f9 fd9b 	bl	800b850 <HAL_GetTick>
 8011d1a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8011d1c:	e015      	b.n	8011d4a <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011d1e:	f7f9 fd97 	bl	800b850 <HAL_GetTick>
 8011d22:	4602      	mov	r2, r0
 8011d24:	697b      	ldr	r3, [r7, #20]
 8011d26:	1ad3      	subs	r3, r2, r3
 8011d28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011d2c:	d90d      	bls.n	8011d4a <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	22ff      	movs	r2, #255	@ 0xff
 8011d34:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	2203      	movs	r2, #3
 8011d3a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	2200      	movs	r2, #0
 8011d42:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8011d46:	2303      	movs	r3, #3
 8011d48:	e037      	b.n	8011dba <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	68db      	ldr	r3, [r3, #12]
 8011d50:	f003 0302 	and.w	r3, r3, #2
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d0e2      	beq.n	8011d1e <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	69fa      	ldr	r2, [r7, #28]
 8011d5e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	69ba      	ldr	r2, [r7, #24]
 8011d66:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	689a      	ldr	r2, [r3, #8]
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011d76:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	689a      	ldr	r2, [r3, #8]
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8011d86:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8011d88:	4b0e      	ldr	r3, [pc, #56]	@ (8011dc4 <HAL_RTC_SetAlarm_IT+0x274>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8011dc4 <HAL_RTC_SetAlarm_IT+0x274>)
 8011d8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011d92:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8011d94:	4b0b      	ldr	r3, [pc, #44]	@ (8011dc4 <HAL_RTC_SetAlarm_IT+0x274>)
 8011d96:	689b      	ldr	r3, [r3, #8]
 8011d98:	4a0a      	ldr	r2, [pc, #40]	@ (8011dc4 <HAL_RTC_SetAlarm_IT+0x274>)
 8011d9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011d9e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	22ff      	movs	r2, #255	@ 0xff
 8011da6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	2201      	movs	r2, #1
 8011dac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	2200      	movs	r2, #0
 8011db4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8011db8:	2300      	movs	r3, #0
}
 8011dba:	4618      	mov	r0, r3
 8011dbc:	3724      	adds	r7, #36	@ 0x24
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	bd90      	pop	{r4, r7, pc}
 8011dc2:	bf00      	nop
 8011dc4:	40010400 	.word	0x40010400

08011dc8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b082      	sub	sp, #8
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8011dd0:	4b1f      	ldr	r3, [pc, #124]	@ (8011e50 <HAL_RTC_AlarmIRQHandler+0x88>)
 8011dd2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8011dd6:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	689b      	ldr	r3, [r3, #8]
 8011dde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d012      	beq.n	8011e0c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	68db      	ldr	r3, [r3, #12]
 8011dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d00b      	beq.n	8011e0c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	68db      	ldr	r3, [r3, #12]
 8011dfa:	b2da      	uxtb	r2, r3
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8011e04:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8011e06:	6878      	ldr	r0, [r7, #4]
 8011e08:	f7f1 f8c8 	bl	8002f9c <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	689b      	ldr	r3, [r3, #8]
 8011e12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d012      	beq.n	8011e40 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	68db      	ldr	r3, [r3, #12]
 8011e20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d00b      	beq.n	8011e40 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	68db      	ldr	r3, [r3, #12]
 8011e2e:	b2da      	uxtb	r2, r3
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8011e38:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f000 f8da 	bl	8011ff4 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	2201      	movs	r2, #1
 8011e44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8011e48:	bf00      	nop
 8011e4a:	3708      	adds	r7, #8
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	bd80      	pop	{r7, pc}
 8011e50:	40010400 	.word	0x40010400

08011e54 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b084      	sub	sp, #16
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	4a0d      	ldr	r2, [pc, #52]	@ (8011e98 <HAL_RTC_WaitForSynchro+0x44>)
 8011e62:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8011e64:	f7f9 fcf4 	bl	800b850 <HAL_GetTick>
 8011e68:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011e6a:	e009      	b.n	8011e80 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011e6c:	f7f9 fcf0 	bl	800b850 <HAL_GetTick>
 8011e70:	4602      	mov	r2, r0
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	1ad3      	subs	r3, r2, r3
 8011e76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011e7a:	d901      	bls.n	8011e80 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8011e7c:	2303      	movs	r3, #3
 8011e7e:	e007      	b.n	8011e90 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	68db      	ldr	r3, [r3, #12]
 8011e86:	f003 0320 	and.w	r3, r3, #32
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d0ee      	beq.n	8011e6c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8011e8e:	2300      	movs	r3, #0
}
 8011e90:	4618      	mov	r0, r3
 8011e92:	3710      	adds	r7, #16
 8011e94:	46bd      	mov	sp, r7
 8011e96:	bd80      	pop	{r7, pc}
 8011e98:	0003ff5f 	.word	0x0003ff5f

08011e9c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b084      	sub	sp, #16
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	68db      	ldr	r3, [r3, #12]
 8011eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d120      	bne.n	8011ef8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	f04f 32ff 	mov.w	r2, #4294967295
 8011ebe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011ec0:	f7f9 fcc6 	bl	800b850 <HAL_GetTick>
 8011ec4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011ec6:	e00d      	b.n	8011ee4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011ec8:	f7f9 fcc2 	bl	800b850 <HAL_GetTick>
 8011ecc:	4602      	mov	r2, r0
 8011ece:	68bb      	ldr	r3, [r7, #8]
 8011ed0:	1ad3      	subs	r3, r2, r3
 8011ed2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011ed6:	d905      	bls.n	8011ee4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8011ed8:	2303      	movs	r3, #3
 8011eda:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	2203      	movs	r2, #3
 8011ee0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	68db      	ldr	r3, [r3, #12]
 8011eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d102      	bne.n	8011ef8 <RTC_EnterInitMode+0x5c>
 8011ef2:	7bfb      	ldrb	r3, [r7, #15]
 8011ef4:	2b03      	cmp	r3, #3
 8011ef6:	d1e7      	bne.n	8011ec8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8011ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011efa:	4618      	mov	r0, r3
 8011efc:	3710      	adds	r7, #16
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}
	...

08011f04 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b084      	sub	sp, #16
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8011f10:	4b1a      	ldr	r3, [pc, #104]	@ (8011f7c <RTC_ExitInitMode+0x78>)
 8011f12:	68db      	ldr	r3, [r3, #12]
 8011f14:	4a19      	ldr	r2, [pc, #100]	@ (8011f7c <RTC_ExitInitMode+0x78>)
 8011f16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011f1a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011f1c:	4b17      	ldr	r3, [pc, #92]	@ (8011f7c <RTC_ExitInitMode+0x78>)
 8011f1e:	689b      	ldr	r3, [r3, #8]
 8011f20:	f003 0320 	and.w	r3, r3, #32
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d10c      	bne.n	8011f42 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011f28:	6878      	ldr	r0, [r7, #4]
 8011f2a:	f7ff ff93 	bl	8011e54 <HAL_RTC_WaitForSynchro>
 8011f2e:	4603      	mov	r3, r0
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d01e      	beq.n	8011f72 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	2203      	movs	r2, #3
 8011f38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8011f3c:	2303      	movs	r3, #3
 8011f3e:	73fb      	strb	r3, [r7, #15]
 8011f40:	e017      	b.n	8011f72 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011f42:	4b0e      	ldr	r3, [pc, #56]	@ (8011f7c <RTC_ExitInitMode+0x78>)
 8011f44:	689b      	ldr	r3, [r3, #8]
 8011f46:	4a0d      	ldr	r2, [pc, #52]	@ (8011f7c <RTC_ExitInitMode+0x78>)
 8011f48:	f023 0320 	bic.w	r3, r3, #32
 8011f4c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011f4e:	6878      	ldr	r0, [r7, #4]
 8011f50:	f7ff ff80 	bl	8011e54 <HAL_RTC_WaitForSynchro>
 8011f54:	4603      	mov	r3, r0
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d005      	beq.n	8011f66 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	2203      	movs	r2, #3
 8011f5e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8011f62:	2303      	movs	r3, #3
 8011f64:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011f66:	4b05      	ldr	r3, [pc, #20]	@ (8011f7c <RTC_ExitInitMode+0x78>)
 8011f68:	689b      	ldr	r3, [r3, #8]
 8011f6a:	4a04      	ldr	r2, [pc, #16]	@ (8011f7c <RTC_ExitInitMode+0x78>)
 8011f6c:	f043 0320 	orr.w	r3, r3, #32
 8011f70:	6093      	str	r3, [r2, #8]
  }

  return status;
 8011f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f74:	4618      	mov	r0, r3
 8011f76:	3710      	adds	r7, #16
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}
 8011f7c:	40002800 	.word	0x40002800

08011f80 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8011f80:	b480      	push	{r7}
 8011f82:	b085      	sub	sp, #20
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	4603      	mov	r3, r0
 8011f88:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8011f8e:	79fb      	ldrb	r3, [r7, #7]
 8011f90:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8011f92:	e005      	b.n	8011fa0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	3301      	adds	r3, #1
 8011f98:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8011f9a:	7afb      	ldrb	r3, [r7, #11]
 8011f9c:	3b0a      	subs	r3, #10
 8011f9e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8011fa0:	7afb      	ldrb	r3, [r7, #11]
 8011fa2:	2b09      	cmp	r3, #9
 8011fa4:	d8f6      	bhi.n	8011f94 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	b2db      	uxtb	r3, r3
 8011faa:	011b      	lsls	r3, r3, #4
 8011fac:	b2da      	uxtb	r2, r3
 8011fae:	7afb      	ldrb	r3, [r7, #11]
 8011fb0:	4313      	orrs	r3, r2
 8011fb2:	b2db      	uxtb	r3, r3
}
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	3714      	adds	r7, #20
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbe:	4770      	bx	lr

08011fc0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011fc0:	b480      	push	{r7}
 8011fc2:	b085      	sub	sp, #20
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8011fca:	79fb      	ldrb	r3, [r7, #7]
 8011fcc:	091b      	lsrs	r3, r3, #4
 8011fce:	b2db      	uxtb	r3, r3
 8011fd0:	461a      	mov	r2, r3
 8011fd2:	0092      	lsls	r2, r2, #2
 8011fd4:	4413      	add	r3, r2
 8011fd6:	005b      	lsls	r3, r3, #1
 8011fd8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8011fda:	79fb      	ldrb	r3, [r7, #7]
 8011fdc:	f003 030f 	and.w	r3, r3, #15
 8011fe0:	b2da      	uxtb	r2, r3
 8011fe2:	7bfb      	ldrb	r3, [r7, #15]
 8011fe4:	4413      	add	r3, r2
 8011fe6:	b2db      	uxtb	r3, r3
}
 8011fe8:	4618      	mov	r0, r3
 8011fea:	3714      	adds	r7, #20
 8011fec:	46bd      	mov	sp, r7
 8011fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff2:	4770      	bx	lr

08011ff4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8011ff4:	b480      	push	{r7}
 8011ff6:	b083      	sub	sp, #12
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8011ffc:	bf00      	nop
 8011ffe:	370c      	adds	r7, #12
 8012000:	46bd      	mov	sp, r7
 8012002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012006:	4770      	bx	lr

08012008 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b084      	sub	sp, #16
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d101      	bne.n	801201a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012016:	2301      	movs	r3, #1
 8012018:	e095      	b.n	8012146 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801201e:	2b00      	cmp	r3, #0
 8012020:	d108      	bne.n	8012034 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	685b      	ldr	r3, [r3, #4]
 8012026:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801202a:	d009      	beq.n	8012040 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	2200      	movs	r2, #0
 8012030:	61da      	str	r2, [r3, #28]
 8012032:	e005      	b.n	8012040 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	2200      	movs	r2, #0
 8012038:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	2200      	movs	r2, #0
 801203e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	2200      	movs	r2, #0
 8012044:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801204c:	b2db      	uxtb	r3, r3
 801204e:	2b00      	cmp	r3, #0
 8012050:	d106      	bne.n	8012060 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	2200      	movs	r2, #0
 8012056:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801205a:	6878      	ldr	r0, [r7, #4]
 801205c:	f7f5 ffce 	bl	8007ffc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	2202      	movs	r2, #2
 8012064:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	681a      	ldr	r2, [r3, #0]
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012076:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	68db      	ldr	r3, [r3, #12]
 801207c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8012080:	d902      	bls.n	8012088 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8012082:	2300      	movs	r3, #0
 8012084:	60fb      	str	r3, [r7, #12]
 8012086:	e002      	b.n	801208e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8012088:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801208c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	68db      	ldr	r3, [r3, #12]
 8012092:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8012096:	d007      	beq.n	80120a8 <HAL_SPI_Init+0xa0>
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	68db      	ldr	r3, [r3, #12]
 801209c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80120a0:	d002      	beq.n	80120a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	2200      	movs	r2, #0
 80120a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	685b      	ldr	r3, [r3, #4]
 80120ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	689b      	ldr	r3, [r3, #8]
 80120b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80120b8:	431a      	orrs	r2, r3
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	691b      	ldr	r3, [r3, #16]
 80120be:	f003 0302 	and.w	r3, r3, #2
 80120c2:	431a      	orrs	r2, r3
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	695b      	ldr	r3, [r3, #20]
 80120c8:	f003 0301 	and.w	r3, r3, #1
 80120cc:	431a      	orrs	r2, r3
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	699b      	ldr	r3, [r3, #24]
 80120d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80120d6:	431a      	orrs	r2, r3
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	69db      	ldr	r3, [r3, #28]
 80120dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80120e0:	431a      	orrs	r2, r3
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	6a1b      	ldr	r3, [r3, #32]
 80120e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80120ea:	ea42 0103 	orr.w	r1, r2, r3
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80120f2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	430a      	orrs	r2, r1
 80120fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	699b      	ldr	r3, [r3, #24]
 8012102:	0c1b      	lsrs	r3, r3, #16
 8012104:	f003 0204 	and.w	r2, r3, #4
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801210c:	f003 0310 	and.w	r3, r3, #16
 8012110:	431a      	orrs	r2, r3
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012116:	f003 0308 	and.w	r3, r3, #8
 801211a:	431a      	orrs	r2, r3
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	68db      	ldr	r3, [r3, #12]
 8012120:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8012124:	ea42 0103 	orr.w	r1, r2, r3
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	430a      	orrs	r2, r1
 8012134:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	2200      	movs	r2, #0
 801213a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	2201      	movs	r2, #1
 8012140:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8012144:	2300      	movs	r3, #0
}
 8012146:	4618      	mov	r0, r3
 8012148:	3710      	adds	r7, #16
 801214a:	46bd      	mov	sp, r7
 801214c:	bd80      	pop	{r7, pc}

0801214e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801214e:	b580      	push	{r7, lr}
 8012150:	b088      	sub	sp, #32
 8012152:	af00      	add	r7, sp, #0
 8012154:	60f8      	str	r0, [r7, #12]
 8012156:	60b9      	str	r1, [r7, #8]
 8012158:	603b      	str	r3, [r7, #0]
 801215a:	4613      	mov	r3, r2
 801215c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801215e:	f7f9 fb77 	bl	800b850 <HAL_GetTick>
 8012162:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8012164:	88fb      	ldrh	r3, [r7, #6]
 8012166:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801216e:	b2db      	uxtb	r3, r3
 8012170:	2b01      	cmp	r3, #1
 8012172:	d001      	beq.n	8012178 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8012174:	2302      	movs	r3, #2
 8012176:	e15c      	b.n	8012432 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8012178:	68bb      	ldr	r3, [r7, #8]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d002      	beq.n	8012184 <HAL_SPI_Transmit+0x36>
 801217e:	88fb      	ldrh	r3, [r7, #6]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d101      	bne.n	8012188 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8012184:	2301      	movs	r3, #1
 8012186:	e154      	b.n	8012432 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 801218e:	2b01      	cmp	r3, #1
 8012190:	d101      	bne.n	8012196 <HAL_SPI_Transmit+0x48>
 8012192:	2302      	movs	r3, #2
 8012194:	e14d      	b.n	8012432 <HAL_SPI_Transmit+0x2e4>
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	2201      	movs	r2, #1
 801219a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	2203      	movs	r2, #3
 80121a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	2200      	movs	r2, #0
 80121aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	68ba      	ldr	r2, [r7, #8]
 80121b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	88fa      	ldrh	r2, [r7, #6]
 80121b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	88fa      	ldrh	r2, [r7, #6]
 80121bc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	2200      	movs	r2, #0
 80121c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	2200      	movs	r2, #0
 80121c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	2200      	movs	r2, #0
 80121d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	2200      	movs	r2, #0
 80121d8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	2200      	movs	r2, #0
 80121de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	689b      	ldr	r3, [r3, #8]
 80121e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80121e8:	d10f      	bne.n	801220a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	681a      	ldr	r2, [r3, #0]
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80121f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	681a      	ldr	r2, [r3, #0]
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8012208:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012214:	2b40      	cmp	r3, #64	@ 0x40
 8012216:	d007      	beq.n	8012228 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	681a      	ldr	r2, [r3, #0]
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012226:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	68db      	ldr	r3, [r3, #12]
 801222c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8012230:	d952      	bls.n	80122d8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	685b      	ldr	r3, [r3, #4]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d002      	beq.n	8012240 <HAL_SPI_Transmit+0xf2>
 801223a:	8b7b      	ldrh	r3, [r7, #26]
 801223c:	2b01      	cmp	r3, #1
 801223e:	d145      	bne.n	80122cc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012244:	881a      	ldrh	r2, [r3, #0]
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012250:	1c9a      	adds	r2, r3, #2
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801225a:	b29b      	uxth	r3, r3
 801225c:	3b01      	subs	r3, #1
 801225e:	b29a      	uxth	r2, r3
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8012264:	e032      	b.n	80122cc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	689b      	ldr	r3, [r3, #8]
 801226c:	f003 0302 	and.w	r3, r3, #2
 8012270:	2b02      	cmp	r3, #2
 8012272:	d112      	bne.n	801229a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012278:	881a      	ldrh	r2, [r3, #0]
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012284:	1c9a      	adds	r2, r3, #2
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801228e:	b29b      	uxth	r3, r3
 8012290:	3b01      	subs	r3, #1
 8012292:	b29a      	uxth	r2, r3
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8012298:	e018      	b.n	80122cc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801229a:	f7f9 fad9 	bl	800b850 <HAL_GetTick>
 801229e:	4602      	mov	r2, r0
 80122a0:	69fb      	ldr	r3, [r7, #28]
 80122a2:	1ad3      	subs	r3, r2, r3
 80122a4:	683a      	ldr	r2, [r7, #0]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d803      	bhi.n	80122b2 <HAL_SPI_Transmit+0x164>
 80122aa:	683b      	ldr	r3, [r7, #0]
 80122ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122b0:	d102      	bne.n	80122b8 <HAL_SPI_Transmit+0x16a>
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d109      	bne.n	80122cc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	2201      	movs	r2, #1
 80122bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	2200      	movs	r2, #0
 80122c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80122c8:	2303      	movs	r3, #3
 80122ca:	e0b2      	b.n	8012432 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80122d0:	b29b      	uxth	r3, r3
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d1c7      	bne.n	8012266 <HAL_SPI_Transmit+0x118>
 80122d6:	e083      	b.n	80123e0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	685b      	ldr	r3, [r3, #4]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d002      	beq.n	80122e6 <HAL_SPI_Transmit+0x198>
 80122e0:	8b7b      	ldrh	r3, [r7, #26]
 80122e2:	2b01      	cmp	r3, #1
 80122e4:	d177      	bne.n	80123d6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80122ea:	b29b      	uxth	r3, r3
 80122ec:	2b01      	cmp	r3, #1
 80122ee:	d912      	bls.n	8012316 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122f4:	881a      	ldrh	r2, [r3, #0]
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012300:	1c9a      	adds	r2, r3, #2
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801230a:	b29b      	uxth	r3, r3
 801230c:	3b02      	subs	r3, #2
 801230e:	b29a      	uxth	r2, r3
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8012314:	e05f      	b.n	80123d6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	330c      	adds	r3, #12
 8012320:	7812      	ldrb	r2, [r2, #0]
 8012322:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012328:	1c5a      	adds	r2, r3, #1
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012332:	b29b      	uxth	r3, r3
 8012334:	3b01      	subs	r3, #1
 8012336:	b29a      	uxth	r2, r3
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801233c:	e04b      	b.n	80123d6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	689b      	ldr	r3, [r3, #8]
 8012344:	f003 0302 	and.w	r3, r3, #2
 8012348:	2b02      	cmp	r3, #2
 801234a:	d12b      	bne.n	80123a4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012350:	b29b      	uxth	r3, r3
 8012352:	2b01      	cmp	r3, #1
 8012354:	d912      	bls.n	801237c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801235a:	881a      	ldrh	r2, [r3, #0]
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012366:	1c9a      	adds	r2, r3, #2
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012370:	b29b      	uxth	r3, r3
 8012372:	3b02      	subs	r3, #2
 8012374:	b29a      	uxth	r2, r3
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801237a:	e02c      	b.n	80123d6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	330c      	adds	r3, #12
 8012386:	7812      	ldrb	r2, [r2, #0]
 8012388:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801238e:	1c5a      	adds	r2, r3, #1
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012398:	b29b      	uxth	r3, r3
 801239a:	3b01      	subs	r3, #1
 801239c:	b29a      	uxth	r2, r3
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80123a2:	e018      	b.n	80123d6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80123a4:	f7f9 fa54 	bl	800b850 <HAL_GetTick>
 80123a8:	4602      	mov	r2, r0
 80123aa:	69fb      	ldr	r3, [r7, #28]
 80123ac:	1ad3      	subs	r3, r2, r3
 80123ae:	683a      	ldr	r2, [r7, #0]
 80123b0:	429a      	cmp	r2, r3
 80123b2:	d803      	bhi.n	80123bc <HAL_SPI_Transmit+0x26e>
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123ba:	d102      	bne.n	80123c2 <HAL_SPI_Transmit+0x274>
 80123bc:	683b      	ldr	r3, [r7, #0]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d109      	bne.n	80123d6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	2201      	movs	r2, #1
 80123c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	2200      	movs	r2, #0
 80123ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80123d2:	2303      	movs	r3, #3
 80123d4:	e02d      	b.n	8012432 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80123da:	b29b      	uxth	r3, r3
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d1ae      	bne.n	801233e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80123e0:	69fa      	ldr	r2, [r7, #28]
 80123e2:	6839      	ldr	r1, [r7, #0]
 80123e4:	68f8      	ldr	r0, [r7, #12]
 80123e6:	f000 fcf5 	bl	8012dd4 <SPI_EndRxTxTransaction>
 80123ea:	4603      	mov	r3, r0
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d002      	beq.n	80123f6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	2220      	movs	r2, #32
 80123f4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	689b      	ldr	r3, [r3, #8]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d10a      	bne.n	8012414 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80123fe:	2300      	movs	r3, #0
 8012400:	617b      	str	r3, [r7, #20]
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	68db      	ldr	r3, [r3, #12]
 8012408:	617b      	str	r3, [r7, #20]
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	689b      	ldr	r3, [r3, #8]
 8012410:	617b      	str	r3, [r7, #20]
 8012412:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	2201      	movs	r2, #1
 8012418:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	2200      	movs	r2, #0
 8012420:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012428:	2b00      	cmp	r3, #0
 801242a:	d001      	beq.n	8012430 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 801242c:	2301      	movs	r3, #1
 801242e:	e000      	b.n	8012432 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8012430:	2300      	movs	r3, #0
  }
}
 8012432:	4618      	mov	r0, r3
 8012434:	3720      	adds	r7, #32
 8012436:	46bd      	mov	sp, r7
 8012438:	bd80      	pop	{r7, pc}

0801243a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801243a:	b580      	push	{r7, lr}
 801243c:	b088      	sub	sp, #32
 801243e:	af02      	add	r7, sp, #8
 8012440:	60f8      	str	r0, [r7, #12]
 8012442:	60b9      	str	r1, [r7, #8]
 8012444:	603b      	str	r3, [r7, #0]
 8012446:	4613      	mov	r3, r2
 8012448:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8012450:	b2db      	uxtb	r3, r3
 8012452:	2b01      	cmp	r3, #1
 8012454:	d001      	beq.n	801245a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8012456:	2302      	movs	r3, #2
 8012458:	e123      	b.n	80126a2 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	685b      	ldr	r3, [r3, #4]
 801245e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012462:	d112      	bne.n	801248a <HAL_SPI_Receive+0x50>
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	689b      	ldr	r3, [r3, #8]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d10e      	bne.n	801248a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	2204      	movs	r2, #4
 8012470:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8012474:	88fa      	ldrh	r2, [r7, #6]
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	9300      	str	r3, [sp, #0]
 801247a:	4613      	mov	r3, r2
 801247c:	68ba      	ldr	r2, [r7, #8]
 801247e:	68b9      	ldr	r1, [r7, #8]
 8012480:	68f8      	ldr	r0, [r7, #12]
 8012482:	f000 f912 	bl	80126aa <HAL_SPI_TransmitReceive>
 8012486:	4603      	mov	r3, r0
 8012488:	e10b      	b.n	80126a2 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801248a:	f7f9 f9e1 	bl	800b850 <HAL_GetTick>
 801248e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8012490:	68bb      	ldr	r3, [r7, #8]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d002      	beq.n	801249c <HAL_SPI_Receive+0x62>
 8012496:	88fb      	ldrh	r3, [r7, #6]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d101      	bne.n	80124a0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 801249c:	2301      	movs	r3, #1
 801249e:	e100      	b.n	80126a2 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80124a6:	2b01      	cmp	r3, #1
 80124a8:	d101      	bne.n	80124ae <HAL_SPI_Receive+0x74>
 80124aa:	2302      	movs	r3, #2
 80124ac:	e0f9      	b.n	80126a2 <HAL_SPI_Receive+0x268>
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	2201      	movs	r2, #1
 80124b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	2204      	movs	r2, #4
 80124ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	2200      	movs	r2, #0
 80124c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	68ba      	ldr	r2, [r7, #8]
 80124c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	88fa      	ldrh	r2, [r7, #6]
 80124ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	88fa      	ldrh	r2, [r7, #6]
 80124d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	2200      	movs	r2, #0
 80124de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	2200      	movs	r2, #0
 80124e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	2200      	movs	r2, #0
 80124ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	2200      	movs	r2, #0
 80124f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	2200      	movs	r2, #0
 80124f6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	68db      	ldr	r3, [r3, #12]
 80124fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8012500:	d908      	bls.n	8012514 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	685a      	ldr	r2, [r3, #4]
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8012510:	605a      	str	r2, [r3, #4]
 8012512:	e007      	b.n	8012524 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	685a      	ldr	r2, [r3, #4]
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8012522:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	689b      	ldr	r3, [r3, #8]
 8012528:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801252c:	d10f      	bne.n	801254e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	681a      	ldr	r2, [r3, #0]
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801253c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	681a      	ldr	r2, [r3, #0]
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801254c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012558:	2b40      	cmp	r3, #64	@ 0x40
 801255a:	d007      	beq.n	801256c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	681a      	ldr	r2, [r3, #0]
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801256a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	68db      	ldr	r3, [r3, #12]
 8012570:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8012574:	d875      	bhi.n	8012662 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8012576:	e037      	b.n	80125e8 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	689b      	ldr	r3, [r3, #8]
 801257e:	f003 0301 	and.w	r3, r3, #1
 8012582:	2b01      	cmp	r3, #1
 8012584:	d117      	bne.n	80125b6 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	f103 020c 	add.w	r2, r3, #12
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012592:	7812      	ldrb	r2, [r2, #0]
 8012594:	b2d2      	uxtb	r2, r2
 8012596:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801259c:	1c5a      	adds	r2, r3, #1
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80125a8:	b29b      	uxth	r3, r3
 80125aa:	3b01      	subs	r3, #1
 80125ac:	b29a      	uxth	r2, r3
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80125b4:	e018      	b.n	80125e8 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80125b6:	f7f9 f94b 	bl	800b850 <HAL_GetTick>
 80125ba:	4602      	mov	r2, r0
 80125bc:	697b      	ldr	r3, [r7, #20]
 80125be:	1ad3      	subs	r3, r2, r3
 80125c0:	683a      	ldr	r2, [r7, #0]
 80125c2:	429a      	cmp	r2, r3
 80125c4:	d803      	bhi.n	80125ce <HAL_SPI_Receive+0x194>
 80125c6:	683b      	ldr	r3, [r7, #0]
 80125c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125cc:	d102      	bne.n	80125d4 <HAL_SPI_Receive+0x19a>
 80125ce:	683b      	ldr	r3, [r7, #0]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d109      	bne.n	80125e8 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	2201      	movs	r2, #1
 80125d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	2200      	movs	r2, #0
 80125e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80125e4:	2303      	movs	r3, #3
 80125e6:	e05c      	b.n	80126a2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80125ee:	b29b      	uxth	r3, r3
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d1c1      	bne.n	8012578 <HAL_SPI_Receive+0x13e>
 80125f4:	e03b      	b.n	801266e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	689b      	ldr	r3, [r3, #8]
 80125fc:	f003 0301 	and.w	r3, r3, #1
 8012600:	2b01      	cmp	r3, #1
 8012602:	d115      	bne.n	8012630 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	68da      	ldr	r2, [r3, #12]
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801260e:	b292      	uxth	r2, r2
 8012610:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012616:	1c9a      	adds	r2, r3, #2
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8012622:	b29b      	uxth	r3, r3
 8012624:	3b01      	subs	r3, #1
 8012626:	b29a      	uxth	r2, r3
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 801262e:	e018      	b.n	8012662 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012630:	f7f9 f90e 	bl	800b850 <HAL_GetTick>
 8012634:	4602      	mov	r2, r0
 8012636:	697b      	ldr	r3, [r7, #20]
 8012638:	1ad3      	subs	r3, r2, r3
 801263a:	683a      	ldr	r2, [r7, #0]
 801263c:	429a      	cmp	r2, r3
 801263e:	d803      	bhi.n	8012648 <HAL_SPI_Receive+0x20e>
 8012640:	683b      	ldr	r3, [r7, #0]
 8012642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012646:	d102      	bne.n	801264e <HAL_SPI_Receive+0x214>
 8012648:	683b      	ldr	r3, [r7, #0]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d109      	bne.n	8012662 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	2201      	movs	r2, #1
 8012652:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	2200      	movs	r2, #0
 801265a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 801265e:	2303      	movs	r3, #3
 8012660:	e01f      	b.n	80126a2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8012668:	b29b      	uxth	r3, r3
 801266a:	2b00      	cmp	r3, #0
 801266c:	d1c3      	bne.n	80125f6 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801266e:	697a      	ldr	r2, [r7, #20]
 8012670:	6839      	ldr	r1, [r7, #0]
 8012672:	68f8      	ldr	r0, [r7, #12]
 8012674:	f000 fb56 	bl	8012d24 <SPI_EndRxTransaction>
 8012678:	4603      	mov	r3, r0
 801267a:	2b00      	cmp	r3, #0
 801267c:	d002      	beq.n	8012684 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	2220      	movs	r2, #32
 8012682:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	2201      	movs	r2, #1
 8012688:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	2200      	movs	r2, #0
 8012690:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012698:	2b00      	cmp	r3, #0
 801269a:	d001      	beq.n	80126a0 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 801269c:	2301      	movs	r3, #1
 801269e:	e000      	b.n	80126a2 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80126a0:	2300      	movs	r3, #0
  }
}
 80126a2:	4618      	mov	r0, r3
 80126a4:	3718      	adds	r7, #24
 80126a6:	46bd      	mov	sp, r7
 80126a8:	bd80      	pop	{r7, pc}

080126aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80126aa:	b580      	push	{r7, lr}
 80126ac:	b08a      	sub	sp, #40	@ 0x28
 80126ae:	af00      	add	r7, sp, #0
 80126b0:	60f8      	str	r0, [r7, #12]
 80126b2:	60b9      	str	r1, [r7, #8]
 80126b4:	607a      	str	r2, [r7, #4]
 80126b6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80126b8:	2301      	movs	r3, #1
 80126ba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80126bc:	f7f9 f8c8 	bl	800b850 <HAL_GetTick>
 80126c0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80126c8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	685b      	ldr	r3, [r3, #4]
 80126ce:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80126d0:	887b      	ldrh	r3, [r7, #2]
 80126d2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80126d4:	887b      	ldrh	r3, [r7, #2]
 80126d6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80126d8:	7ffb      	ldrb	r3, [r7, #31]
 80126da:	2b01      	cmp	r3, #1
 80126dc:	d00c      	beq.n	80126f8 <HAL_SPI_TransmitReceive+0x4e>
 80126de:	69bb      	ldr	r3, [r7, #24]
 80126e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80126e4:	d106      	bne.n	80126f4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	689b      	ldr	r3, [r3, #8]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d102      	bne.n	80126f4 <HAL_SPI_TransmitReceive+0x4a>
 80126ee:	7ffb      	ldrb	r3, [r7, #31]
 80126f0:	2b04      	cmp	r3, #4
 80126f2:	d001      	beq.n	80126f8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80126f4:	2302      	movs	r3, #2
 80126f6:	e1f3      	b.n	8012ae0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80126f8:	68bb      	ldr	r3, [r7, #8]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d005      	beq.n	801270a <HAL_SPI_TransmitReceive+0x60>
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d002      	beq.n	801270a <HAL_SPI_TransmitReceive+0x60>
 8012704:	887b      	ldrh	r3, [r7, #2]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d101      	bne.n	801270e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 801270a:	2301      	movs	r3, #1
 801270c:	e1e8      	b.n	8012ae0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8012714:	2b01      	cmp	r3, #1
 8012716:	d101      	bne.n	801271c <HAL_SPI_TransmitReceive+0x72>
 8012718:	2302      	movs	r3, #2
 801271a:	e1e1      	b.n	8012ae0 <HAL_SPI_TransmitReceive+0x436>
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	2201      	movs	r2, #1
 8012720:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801272a:	b2db      	uxtb	r3, r3
 801272c:	2b04      	cmp	r3, #4
 801272e:	d003      	beq.n	8012738 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	2205      	movs	r2, #5
 8012734:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	2200      	movs	r2, #0
 801273c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	687a      	ldr	r2, [r7, #4]
 8012742:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	887a      	ldrh	r2, [r7, #2]
 8012748:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	887a      	ldrh	r2, [r7, #2]
 8012750:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	68ba      	ldr	r2, [r7, #8]
 8012758:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	887a      	ldrh	r2, [r7, #2]
 801275e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	887a      	ldrh	r2, [r7, #2]
 8012764:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	2200      	movs	r2, #0
 801276a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	2200      	movs	r2, #0
 8012770:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	68db      	ldr	r3, [r3, #12]
 8012776:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801277a:	d802      	bhi.n	8012782 <HAL_SPI_TransmitReceive+0xd8>
 801277c:	8abb      	ldrh	r3, [r7, #20]
 801277e:	2b01      	cmp	r3, #1
 8012780:	d908      	bls.n	8012794 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	685a      	ldr	r2, [r3, #4]
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8012790:	605a      	str	r2, [r3, #4]
 8012792:	e007      	b.n	80127a4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	685a      	ldr	r2, [r3, #4]
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80127a2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80127ae:	2b40      	cmp	r3, #64	@ 0x40
 80127b0:	d007      	beq.n	80127c2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	681a      	ldr	r2, [r3, #0]
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80127c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	68db      	ldr	r3, [r3, #12]
 80127c6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80127ca:	f240 8083 	bls.w	80128d4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	685b      	ldr	r3, [r3, #4]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d002      	beq.n	80127dc <HAL_SPI_TransmitReceive+0x132>
 80127d6:	8afb      	ldrh	r3, [r7, #22]
 80127d8:	2b01      	cmp	r3, #1
 80127da:	d16f      	bne.n	80128bc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80127e0:	881a      	ldrh	r2, [r3, #0]
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80127ec:	1c9a      	adds	r2, r3, #2
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80127f6:	b29b      	uxth	r3, r3
 80127f8:	3b01      	subs	r3, #1
 80127fa:	b29a      	uxth	r2, r3
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012800:	e05c      	b.n	80128bc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	689b      	ldr	r3, [r3, #8]
 8012808:	f003 0302 	and.w	r3, r3, #2
 801280c:	2b02      	cmp	r3, #2
 801280e:	d11b      	bne.n	8012848 <HAL_SPI_TransmitReceive+0x19e>
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012814:	b29b      	uxth	r3, r3
 8012816:	2b00      	cmp	r3, #0
 8012818:	d016      	beq.n	8012848 <HAL_SPI_TransmitReceive+0x19e>
 801281a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801281c:	2b01      	cmp	r3, #1
 801281e:	d113      	bne.n	8012848 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012824:	881a      	ldrh	r2, [r3, #0]
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012830:	1c9a      	adds	r2, r3, #2
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801283a:	b29b      	uxth	r3, r3
 801283c:	3b01      	subs	r3, #1
 801283e:	b29a      	uxth	r2, r3
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012844:	2300      	movs	r3, #0
 8012846:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	689b      	ldr	r3, [r3, #8]
 801284e:	f003 0301 	and.w	r3, r3, #1
 8012852:	2b01      	cmp	r3, #1
 8012854:	d11c      	bne.n	8012890 <HAL_SPI_TransmitReceive+0x1e6>
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801285c:	b29b      	uxth	r3, r3
 801285e:	2b00      	cmp	r3, #0
 8012860:	d016      	beq.n	8012890 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	68da      	ldr	r2, [r3, #12]
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801286c:	b292      	uxth	r2, r2
 801286e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012874:	1c9a      	adds	r2, r3, #2
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8012880:	b29b      	uxth	r3, r3
 8012882:	3b01      	subs	r3, #1
 8012884:	b29a      	uxth	r2, r3
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801288c:	2301      	movs	r3, #1
 801288e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8012890:	f7f8 ffde 	bl	800b850 <HAL_GetTick>
 8012894:	4602      	mov	r2, r0
 8012896:	6a3b      	ldr	r3, [r7, #32]
 8012898:	1ad3      	subs	r3, r2, r3
 801289a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801289c:	429a      	cmp	r2, r3
 801289e:	d80d      	bhi.n	80128bc <HAL_SPI_TransmitReceive+0x212>
 80128a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128a6:	d009      	beq.n	80128bc <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	2201      	movs	r2, #1
 80128ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	2200      	movs	r2, #0
 80128b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80128b8:	2303      	movs	r3, #3
 80128ba:	e111      	b.n	8012ae0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80128c0:	b29b      	uxth	r3, r3
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d19d      	bne.n	8012802 <HAL_SPI_TransmitReceive+0x158>
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80128cc:	b29b      	uxth	r3, r3
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d197      	bne.n	8012802 <HAL_SPI_TransmitReceive+0x158>
 80128d2:	e0e5      	b.n	8012aa0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	685b      	ldr	r3, [r3, #4]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d003      	beq.n	80128e4 <HAL_SPI_TransmitReceive+0x23a>
 80128dc:	8afb      	ldrh	r3, [r7, #22]
 80128de:	2b01      	cmp	r3, #1
 80128e0:	f040 80d1 	bne.w	8012a86 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80128e8:	b29b      	uxth	r3, r3
 80128ea:	2b01      	cmp	r3, #1
 80128ec:	d912      	bls.n	8012914 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80128f2:	881a      	ldrh	r2, [r3, #0]
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80128fe:	1c9a      	adds	r2, r3, #2
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012908:	b29b      	uxth	r3, r3
 801290a:	3b02      	subs	r3, #2
 801290c:	b29a      	uxth	r2, r3
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8012912:	e0b8      	b.n	8012a86 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	330c      	adds	r3, #12
 801291e:	7812      	ldrb	r2, [r2, #0]
 8012920:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012926:	1c5a      	adds	r2, r3, #1
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012930:	b29b      	uxth	r3, r3
 8012932:	3b01      	subs	r3, #1
 8012934:	b29a      	uxth	r2, r3
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801293a:	e0a4      	b.n	8012a86 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	689b      	ldr	r3, [r3, #8]
 8012942:	f003 0302 	and.w	r3, r3, #2
 8012946:	2b02      	cmp	r3, #2
 8012948:	d134      	bne.n	80129b4 <HAL_SPI_TransmitReceive+0x30a>
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801294e:	b29b      	uxth	r3, r3
 8012950:	2b00      	cmp	r3, #0
 8012952:	d02f      	beq.n	80129b4 <HAL_SPI_TransmitReceive+0x30a>
 8012954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012956:	2b01      	cmp	r3, #1
 8012958:	d12c      	bne.n	80129b4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801295e:	b29b      	uxth	r3, r3
 8012960:	2b01      	cmp	r3, #1
 8012962:	d912      	bls.n	801298a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012968:	881a      	ldrh	r2, [r3, #0]
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012974:	1c9a      	adds	r2, r3, #2
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801297e:	b29b      	uxth	r3, r3
 8012980:	3b02      	subs	r3, #2
 8012982:	b29a      	uxth	r2, r3
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8012988:	e012      	b.n	80129b0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	330c      	adds	r3, #12
 8012994:	7812      	ldrb	r2, [r2, #0]
 8012996:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801299c:	1c5a      	adds	r2, r3, #1
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80129a6:	b29b      	uxth	r3, r3
 80129a8:	3b01      	subs	r3, #1
 80129aa:	b29a      	uxth	r2, r3
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80129b0:	2300      	movs	r3, #0
 80129b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	689b      	ldr	r3, [r3, #8]
 80129ba:	f003 0301 	and.w	r3, r3, #1
 80129be:	2b01      	cmp	r3, #1
 80129c0:	d148      	bne.n	8012a54 <HAL_SPI_TransmitReceive+0x3aa>
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80129c8:	b29b      	uxth	r3, r3
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d042      	beq.n	8012a54 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80129d4:	b29b      	uxth	r3, r3
 80129d6:	2b01      	cmp	r3, #1
 80129d8:	d923      	bls.n	8012a22 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	68da      	ldr	r2, [r3, #12]
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80129e4:	b292      	uxth	r2, r2
 80129e6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80129ec:	1c9a      	adds	r2, r3, #2
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80129f8:	b29b      	uxth	r3, r3
 80129fa:	3b02      	subs	r3, #2
 80129fc:	b29a      	uxth	r2, r3
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8012a0a:	b29b      	uxth	r3, r3
 8012a0c:	2b01      	cmp	r3, #1
 8012a0e:	d81f      	bhi.n	8012a50 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	685a      	ldr	r2, [r3, #4]
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8012a1e:	605a      	str	r2, [r3, #4]
 8012a20:	e016      	b.n	8012a50 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	f103 020c 	add.w	r2, r3, #12
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012a2e:	7812      	ldrb	r2, [r2, #0]
 8012a30:	b2d2      	uxtb	r2, r2
 8012a32:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012a38:	1c5a      	adds	r2, r3, #1
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8012a44:	b29b      	uxth	r3, r3
 8012a46:	3b01      	subs	r3, #1
 8012a48:	b29a      	uxth	r2, r3
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8012a50:	2301      	movs	r3, #1
 8012a52:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8012a54:	f7f8 fefc 	bl	800b850 <HAL_GetTick>
 8012a58:	4602      	mov	r2, r0
 8012a5a:	6a3b      	ldr	r3, [r7, #32]
 8012a5c:	1ad3      	subs	r3, r2, r3
 8012a5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d803      	bhi.n	8012a6c <HAL_SPI_TransmitReceive+0x3c2>
 8012a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a6a:	d102      	bne.n	8012a72 <HAL_SPI_TransmitReceive+0x3c8>
 8012a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d109      	bne.n	8012a86 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	2201      	movs	r2, #1
 8012a76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8012a82:	2303      	movs	r3, #3
 8012a84:	e02c      	b.n	8012ae0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	f47f af55 	bne.w	801293c <HAL_SPI_TransmitReceive+0x292>
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8012a98:	b29b      	uxth	r3, r3
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	f47f af4e 	bne.w	801293c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012aa0:	6a3a      	ldr	r2, [r7, #32]
 8012aa2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012aa4:	68f8      	ldr	r0, [r7, #12]
 8012aa6:	f000 f995 	bl	8012dd4 <SPI_EndRxTxTransaction>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d008      	beq.n	8012ac2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	2220      	movs	r2, #32
 8012ab4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	2200      	movs	r2, #0
 8012aba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8012abe:	2301      	movs	r3, #1
 8012ac0:	e00e      	b.n	8012ae0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	2201      	movs	r2, #1
 8012ac6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	2200      	movs	r2, #0
 8012ace:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d001      	beq.n	8012ade <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8012ada:	2301      	movs	r3, #1
 8012adc:	e000      	b.n	8012ae0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8012ade:	2300      	movs	r3, #0
  }
}
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	3728      	adds	r7, #40	@ 0x28
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}

08012ae8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b088      	sub	sp, #32
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	60f8      	str	r0, [r7, #12]
 8012af0:	60b9      	str	r1, [r7, #8]
 8012af2:	603b      	str	r3, [r7, #0]
 8012af4:	4613      	mov	r3, r2
 8012af6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8012af8:	f7f8 feaa 	bl	800b850 <HAL_GetTick>
 8012afc:	4602      	mov	r2, r0
 8012afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b00:	1a9b      	subs	r3, r3, r2
 8012b02:	683a      	ldr	r2, [r7, #0]
 8012b04:	4413      	add	r3, r2
 8012b06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8012b08:	f7f8 fea2 	bl	800b850 <HAL_GetTick>
 8012b0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8012b0e:	4b39      	ldr	r3, [pc, #228]	@ (8012bf4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	015b      	lsls	r3, r3, #5
 8012b14:	0d1b      	lsrs	r3, r3, #20
 8012b16:	69fa      	ldr	r2, [r7, #28]
 8012b18:	fb02 f303 	mul.w	r3, r2, r3
 8012b1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8012b1e:	e054      	b.n	8012bca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b26:	d050      	beq.n	8012bca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8012b28:	f7f8 fe92 	bl	800b850 <HAL_GetTick>
 8012b2c:	4602      	mov	r2, r0
 8012b2e:	69bb      	ldr	r3, [r7, #24]
 8012b30:	1ad3      	subs	r3, r2, r3
 8012b32:	69fa      	ldr	r2, [r7, #28]
 8012b34:	429a      	cmp	r2, r3
 8012b36:	d902      	bls.n	8012b3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8012b38:	69fb      	ldr	r3, [r7, #28]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d13d      	bne.n	8012bba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	685a      	ldr	r2, [r3, #4]
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8012b4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	685b      	ldr	r3, [r3, #4]
 8012b52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012b56:	d111      	bne.n	8012b7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	689b      	ldr	r3, [r3, #8]
 8012b5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012b60:	d004      	beq.n	8012b6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	689b      	ldr	r3, [r3, #8]
 8012b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012b6a:	d107      	bne.n	8012b7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	681a      	ldr	r2, [r3, #0]
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012b7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012b84:	d10f      	bne.n	8012ba6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	681a      	ldr	r2, [r3, #0]
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8012b94:	601a      	str	r2, [r3, #0]
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	681a      	ldr	r2, [r3, #0]
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8012ba4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	2201      	movs	r2, #1
 8012baa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8012bb6:	2303      	movs	r3, #3
 8012bb8:	e017      	b.n	8012bea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8012bba:	697b      	ldr	r3, [r7, #20]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d101      	bne.n	8012bc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8012bc4:	697b      	ldr	r3, [r7, #20]
 8012bc6:	3b01      	subs	r3, #1
 8012bc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	689a      	ldr	r2, [r3, #8]
 8012bd0:	68bb      	ldr	r3, [r7, #8]
 8012bd2:	4013      	ands	r3, r2
 8012bd4:	68ba      	ldr	r2, [r7, #8]
 8012bd6:	429a      	cmp	r2, r3
 8012bd8:	bf0c      	ite	eq
 8012bda:	2301      	moveq	r3, #1
 8012bdc:	2300      	movne	r3, #0
 8012bde:	b2db      	uxtb	r3, r3
 8012be0:	461a      	mov	r2, r3
 8012be2:	79fb      	ldrb	r3, [r7, #7]
 8012be4:	429a      	cmp	r2, r3
 8012be6:	d19b      	bne.n	8012b20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8012be8:	2300      	movs	r3, #0
}
 8012bea:	4618      	mov	r0, r3
 8012bec:	3720      	adds	r7, #32
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bd80      	pop	{r7, pc}
 8012bf2:	bf00      	nop
 8012bf4:	20000000 	.word	0x20000000

08012bf8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b08a      	sub	sp, #40	@ 0x28
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	60f8      	str	r0, [r7, #12]
 8012c00:	60b9      	str	r1, [r7, #8]
 8012c02:	607a      	str	r2, [r7, #4]
 8012c04:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8012c06:	2300      	movs	r3, #0
 8012c08:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8012c0a:	f7f8 fe21 	bl	800b850 <HAL_GetTick>
 8012c0e:	4602      	mov	r2, r0
 8012c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c12:	1a9b      	subs	r3, r3, r2
 8012c14:	683a      	ldr	r2, [r7, #0]
 8012c16:	4413      	add	r3, r2
 8012c18:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8012c1a:	f7f8 fe19 	bl	800b850 <HAL_GetTick>
 8012c1e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	330c      	adds	r3, #12
 8012c26:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8012c28:	4b3d      	ldr	r3, [pc, #244]	@ (8012d20 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8012c2a:	681a      	ldr	r2, [r3, #0]
 8012c2c:	4613      	mov	r3, r2
 8012c2e:	009b      	lsls	r3, r3, #2
 8012c30:	4413      	add	r3, r2
 8012c32:	00da      	lsls	r2, r3, #3
 8012c34:	1ad3      	subs	r3, r2, r3
 8012c36:	0d1b      	lsrs	r3, r3, #20
 8012c38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012c3a:	fb02 f303 	mul.w	r3, r2, r3
 8012c3e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8012c40:	e060      	b.n	8012d04 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8012c42:	68bb      	ldr	r3, [r7, #8]
 8012c44:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8012c48:	d107      	bne.n	8012c5a <SPI_WaitFifoStateUntilTimeout+0x62>
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d104      	bne.n	8012c5a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8012c50:	69fb      	ldr	r3, [r7, #28]
 8012c52:	781b      	ldrb	r3, [r3, #0]
 8012c54:	b2db      	uxtb	r3, r3
 8012c56:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8012c58:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c60:	d050      	beq.n	8012d04 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8012c62:	f7f8 fdf5 	bl	800b850 <HAL_GetTick>
 8012c66:	4602      	mov	r2, r0
 8012c68:	6a3b      	ldr	r3, [r7, #32]
 8012c6a:	1ad3      	subs	r3, r2, r3
 8012c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012c6e:	429a      	cmp	r2, r3
 8012c70:	d902      	bls.n	8012c78 <SPI_WaitFifoStateUntilTimeout+0x80>
 8012c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d13d      	bne.n	8012cf4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	685a      	ldr	r2, [r3, #4]
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8012c86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	685b      	ldr	r3, [r3, #4]
 8012c8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012c90:	d111      	bne.n	8012cb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	689b      	ldr	r3, [r3, #8]
 8012c96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012c9a:	d004      	beq.n	8012ca6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	689b      	ldr	r3, [r3, #8]
 8012ca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012ca4:	d107      	bne.n	8012cb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	681a      	ldr	r2, [r3, #0]
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012cb4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012cba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012cbe:	d10f      	bne.n	8012ce0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	681a      	ldr	r2, [r3, #0]
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8012cce:	601a      	str	r2, [r3, #0]
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	681a      	ldr	r2, [r3, #0]
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8012cde:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	2201      	movs	r2, #1
 8012ce4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	2200      	movs	r2, #0
 8012cec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8012cf0:	2303      	movs	r3, #3
 8012cf2:	e010      	b.n	8012d16 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8012cf4:	69bb      	ldr	r3, [r7, #24]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d101      	bne.n	8012cfe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8012cfe:	69bb      	ldr	r3, [r7, #24]
 8012d00:	3b01      	subs	r3, #1
 8012d02:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	689a      	ldr	r2, [r3, #8]
 8012d0a:	68bb      	ldr	r3, [r7, #8]
 8012d0c:	4013      	ands	r3, r2
 8012d0e:	687a      	ldr	r2, [r7, #4]
 8012d10:	429a      	cmp	r2, r3
 8012d12:	d196      	bne.n	8012c42 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8012d14:	2300      	movs	r3, #0
}
 8012d16:	4618      	mov	r0, r3
 8012d18:	3728      	adds	r7, #40	@ 0x28
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}
 8012d1e:	bf00      	nop
 8012d20:	20000000 	.word	0x20000000

08012d24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b086      	sub	sp, #24
 8012d28:	af02      	add	r7, sp, #8
 8012d2a:	60f8      	str	r0, [r7, #12]
 8012d2c:	60b9      	str	r1, [r7, #8]
 8012d2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	685b      	ldr	r3, [r3, #4]
 8012d34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012d38:	d111      	bne.n	8012d5e <SPI_EndRxTransaction+0x3a>
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	689b      	ldr	r3, [r3, #8]
 8012d3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012d42:	d004      	beq.n	8012d4e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	689b      	ldr	r3, [r3, #8]
 8012d48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012d4c:	d107      	bne.n	8012d5e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	681a      	ldr	r2, [r3, #0]
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012d5c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	9300      	str	r3, [sp, #0]
 8012d62:	68bb      	ldr	r3, [r7, #8]
 8012d64:	2200      	movs	r2, #0
 8012d66:	2180      	movs	r1, #128	@ 0x80
 8012d68:	68f8      	ldr	r0, [r7, #12]
 8012d6a:	f7ff febd 	bl	8012ae8 <SPI_WaitFlagStateUntilTimeout>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d007      	beq.n	8012d84 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012d78:	f043 0220 	orr.w	r2, r3, #32
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8012d80:	2303      	movs	r3, #3
 8012d82:	e023      	b.n	8012dcc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	685b      	ldr	r3, [r3, #4]
 8012d88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012d8c:	d11d      	bne.n	8012dca <SPI_EndRxTransaction+0xa6>
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	689b      	ldr	r3, [r3, #8]
 8012d92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012d96:	d004      	beq.n	8012da2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	689b      	ldr	r3, [r3, #8]
 8012d9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012da0:	d113      	bne.n	8012dca <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	9300      	str	r3, [sp, #0]
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	2200      	movs	r2, #0
 8012daa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8012dae:	68f8      	ldr	r0, [r7, #12]
 8012db0:	f7ff ff22 	bl	8012bf8 <SPI_WaitFifoStateUntilTimeout>
 8012db4:	4603      	mov	r3, r0
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d007      	beq.n	8012dca <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012dbe:	f043 0220 	orr.w	r2, r3, #32
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8012dc6:	2303      	movs	r3, #3
 8012dc8:	e000      	b.n	8012dcc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8012dca:	2300      	movs	r3, #0
}
 8012dcc:	4618      	mov	r0, r3
 8012dce:	3710      	adds	r7, #16
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	bd80      	pop	{r7, pc}

08012dd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b086      	sub	sp, #24
 8012dd8:	af02      	add	r7, sp, #8
 8012dda:	60f8      	str	r0, [r7, #12]
 8012ddc:	60b9      	str	r1, [r7, #8]
 8012dde:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	9300      	str	r3, [sp, #0]
 8012de4:	68bb      	ldr	r3, [r7, #8]
 8012de6:	2200      	movs	r2, #0
 8012de8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8012dec:	68f8      	ldr	r0, [r7, #12]
 8012dee:	f7ff ff03 	bl	8012bf8 <SPI_WaitFifoStateUntilTimeout>
 8012df2:	4603      	mov	r3, r0
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d007      	beq.n	8012e08 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012dfc:	f043 0220 	orr.w	r2, r3, #32
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8012e04:	2303      	movs	r3, #3
 8012e06:	e027      	b.n	8012e58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	9300      	str	r3, [sp, #0]
 8012e0c:	68bb      	ldr	r3, [r7, #8]
 8012e0e:	2200      	movs	r2, #0
 8012e10:	2180      	movs	r1, #128	@ 0x80
 8012e12:	68f8      	ldr	r0, [r7, #12]
 8012e14:	f7ff fe68 	bl	8012ae8 <SPI_WaitFlagStateUntilTimeout>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d007      	beq.n	8012e2e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012e22:	f043 0220 	orr.w	r2, r3, #32
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8012e2a:	2303      	movs	r3, #3
 8012e2c:	e014      	b.n	8012e58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	9300      	str	r3, [sp, #0]
 8012e32:	68bb      	ldr	r3, [r7, #8]
 8012e34:	2200      	movs	r2, #0
 8012e36:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8012e3a:	68f8      	ldr	r0, [r7, #12]
 8012e3c:	f7ff fedc 	bl	8012bf8 <SPI_WaitFifoStateUntilTimeout>
 8012e40:	4603      	mov	r3, r0
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d007      	beq.n	8012e56 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012e4a:	f043 0220 	orr.w	r2, r3, #32
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8012e52:	2303      	movs	r3, #3
 8012e54:	e000      	b.n	8012e58 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8012e56:	2300      	movs	r3, #0
}
 8012e58:	4618      	mov	r0, r3
 8012e5a:	3710      	adds	r7, #16
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	bd80      	pop	{r7, pc}

08012e60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b082      	sub	sp, #8
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d101      	bne.n	8012e72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012e6e:	2301      	movs	r3, #1
 8012e70:	e049      	b.n	8012f06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012e78:	b2db      	uxtb	r3, r3
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d106      	bne.n	8012e8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	2200      	movs	r2, #0
 8012e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012e86:	6878      	ldr	r0, [r7, #4]
 8012e88:	f7f5 f990 	bl	80081ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	2202      	movs	r2, #2
 8012e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	681a      	ldr	r2, [r3, #0]
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	3304      	adds	r3, #4
 8012e9c:	4619      	mov	r1, r3
 8012e9e:	4610      	mov	r0, r2
 8012ea0:	f001 fa58 	bl	8014354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	2201      	movs	r2, #1
 8012ea8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	2201      	movs	r2, #1
 8012eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	2201      	movs	r2, #1
 8012eb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	2201      	movs	r2, #1
 8012ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	2201      	movs	r2, #1
 8012ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	2201      	movs	r2, #1
 8012ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	2201      	movs	r2, #1
 8012ed8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	2201      	movs	r2, #1
 8012ee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	2201      	movs	r2, #1
 8012ee8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	2201      	movs	r2, #1
 8012ef0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	2201      	movs	r2, #1
 8012ef8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	2201      	movs	r2, #1
 8012f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012f04:	2300      	movs	r3, #0
}
 8012f06:	4618      	mov	r0, r3
 8012f08:	3708      	adds	r7, #8
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bd80      	pop	{r7, pc}

08012f0e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8012f0e:	b580      	push	{r7, lr}
 8012f10:	b082      	sub	sp, #8
 8012f12:	af00      	add	r7, sp, #0
 8012f14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d101      	bne.n	8012f20 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8012f1c:	2301      	movs	r3, #1
 8012f1e:	e049      	b.n	8012fb4 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012f26:	b2db      	uxtb	r3, r3
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d106      	bne.n	8012f3a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2200      	movs	r2, #0
 8012f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8012f34:	6878      	ldr	r0, [r7, #4]
 8012f36:	f000 f841 	bl	8012fbc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	2202      	movs	r2, #2
 8012f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	681a      	ldr	r2, [r3, #0]
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	3304      	adds	r3, #4
 8012f4a:	4619      	mov	r1, r3
 8012f4c:	4610      	mov	r0, r2
 8012f4e:	f001 fa01 	bl	8014354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	2201      	movs	r2, #1
 8012f56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	2201      	movs	r2, #1
 8012f5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	2201      	movs	r2, #1
 8012f66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	2201      	movs	r2, #1
 8012f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	2201      	movs	r2, #1
 8012f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	2201      	movs	r2, #1
 8012f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	2201      	movs	r2, #1
 8012f86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	2201      	movs	r2, #1
 8012f8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	2201      	movs	r2, #1
 8012f96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	2201      	movs	r2, #1
 8012f9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	2201      	movs	r2, #1
 8012fa6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	2201      	movs	r2, #1
 8012fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012fb2:	2300      	movs	r3, #0
}
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	3708      	adds	r7, #8
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bd80      	pop	{r7, pc}

08012fbc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8012fbc:	b480      	push	{r7}
 8012fbe:	b083      	sub	sp, #12
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8012fc4:	bf00      	nop
 8012fc6:	370c      	adds	r7, #12
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fce:	4770      	bx	lr

08012fd0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b084      	sub	sp, #16
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
 8012fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012fda:	2300      	movs	r3, #0
 8012fdc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012fde:	683b      	ldr	r3, [r7, #0]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d109      	bne.n	8012ff8 <HAL_TIM_OC_Start_IT+0x28>
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012fea:	b2db      	uxtb	r3, r3
 8012fec:	2b01      	cmp	r3, #1
 8012fee:	bf14      	ite	ne
 8012ff0:	2301      	movne	r3, #1
 8012ff2:	2300      	moveq	r3, #0
 8012ff4:	b2db      	uxtb	r3, r3
 8012ff6:	e03c      	b.n	8013072 <HAL_TIM_OC_Start_IT+0xa2>
 8012ff8:	683b      	ldr	r3, [r7, #0]
 8012ffa:	2b04      	cmp	r3, #4
 8012ffc:	d109      	bne.n	8013012 <HAL_TIM_OC_Start_IT+0x42>
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8013004:	b2db      	uxtb	r3, r3
 8013006:	2b01      	cmp	r3, #1
 8013008:	bf14      	ite	ne
 801300a:	2301      	movne	r3, #1
 801300c:	2300      	moveq	r3, #0
 801300e:	b2db      	uxtb	r3, r3
 8013010:	e02f      	b.n	8013072 <HAL_TIM_OC_Start_IT+0xa2>
 8013012:	683b      	ldr	r3, [r7, #0]
 8013014:	2b08      	cmp	r3, #8
 8013016:	d109      	bne.n	801302c <HAL_TIM_OC_Start_IT+0x5c>
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801301e:	b2db      	uxtb	r3, r3
 8013020:	2b01      	cmp	r3, #1
 8013022:	bf14      	ite	ne
 8013024:	2301      	movne	r3, #1
 8013026:	2300      	moveq	r3, #0
 8013028:	b2db      	uxtb	r3, r3
 801302a:	e022      	b.n	8013072 <HAL_TIM_OC_Start_IT+0xa2>
 801302c:	683b      	ldr	r3, [r7, #0]
 801302e:	2b0c      	cmp	r3, #12
 8013030:	d109      	bne.n	8013046 <HAL_TIM_OC_Start_IT+0x76>
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013038:	b2db      	uxtb	r3, r3
 801303a:	2b01      	cmp	r3, #1
 801303c:	bf14      	ite	ne
 801303e:	2301      	movne	r3, #1
 8013040:	2300      	moveq	r3, #0
 8013042:	b2db      	uxtb	r3, r3
 8013044:	e015      	b.n	8013072 <HAL_TIM_OC_Start_IT+0xa2>
 8013046:	683b      	ldr	r3, [r7, #0]
 8013048:	2b10      	cmp	r3, #16
 801304a:	d109      	bne.n	8013060 <HAL_TIM_OC_Start_IT+0x90>
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013052:	b2db      	uxtb	r3, r3
 8013054:	2b01      	cmp	r3, #1
 8013056:	bf14      	ite	ne
 8013058:	2301      	movne	r3, #1
 801305a:	2300      	moveq	r3, #0
 801305c:	b2db      	uxtb	r3, r3
 801305e:	e008      	b.n	8013072 <HAL_TIM_OC_Start_IT+0xa2>
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013066:	b2db      	uxtb	r3, r3
 8013068:	2b01      	cmp	r3, #1
 801306a:	bf14      	ite	ne
 801306c:	2301      	movne	r3, #1
 801306e:	2300      	moveq	r3, #0
 8013070:	b2db      	uxtb	r3, r3
 8013072:	2b00      	cmp	r3, #0
 8013074:	d001      	beq.n	801307a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8013076:	2301      	movs	r3, #1
 8013078:	e0e7      	b.n	801324a <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801307a:	683b      	ldr	r3, [r7, #0]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d104      	bne.n	801308a <HAL_TIM_OC_Start_IT+0xba>
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	2202      	movs	r2, #2
 8013084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013088:	e023      	b.n	80130d2 <HAL_TIM_OC_Start_IT+0x102>
 801308a:	683b      	ldr	r3, [r7, #0]
 801308c:	2b04      	cmp	r3, #4
 801308e:	d104      	bne.n	801309a <HAL_TIM_OC_Start_IT+0xca>
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2202      	movs	r2, #2
 8013094:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013098:	e01b      	b.n	80130d2 <HAL_TIM_OC_Start_IT+0x102>
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	2b08      	cmp	r3, #8
 801309e:	d104      	bne.n	80130aa <HAL_TIM_OC_Start_IT+0xda>
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2202      	movs	r2, #2
 80130a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80130a8:	e013      	b.n	80130d2 <HAL_TIM_OC_Start_IT+0x102>
 80130aa:	683b      	ldr	r3, [r7, #0]
 80130ac:	2b0c      	cmp	r3, #12
 80130ae:	d104      	bne.n	80130ba <HAL_TIM_OC_Start_IT+0xea>
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	2202      	movs	r2, #2
 80130b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80130b8:	e00b      	b.n	80130d2 <HAL_TIM_OC_Start_IT+0x102>
 80130ba:	683b      	ldr	r3, [r7, #0]
 80130bc:	2b10      	cmp	r3, #16
 80130be:	d104      	bne.n	80130ca <HAL_TIM_OC_Start_IT+0xfa>
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	2202      	movs	r2, #2
 80130c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80130c8:	e003      	b.n	80130d2 <HAL_TIM_OC_Start_IT+0x102>
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	2202      	movs	r2, #2
 80130ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80130d2:	683b      	ldr	r3, [r7, #0]
 80130d4:	2b0c      	cmp	r3, #12
 80130d6:	d841      	bhi.n	801315c <HAL_TIM_OC_Start_IT+0x18c>
 80130d8:	a201      	add	r2, pc, #4	@ (adr r2, 80130e0 <HAL_TIM_OC_Start_IT+0x110>)
 80130da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130de:	bf00      	nop
 80130e0:	08013115 	.word	0x08013115
 80130e4:	0801315d 	.word	0x0801315d
 80130e8:	0801315d 	.word	0x0801315d
 80130ec:	0801315d 	.word	0x0801315d
 80130f0:	08013127 	.word	0x08013127
 80130f4:	0801315d 	.word	0x0801315d
 80130f8:	0801315d 	.word	0x0801315d
 80130fc:	0801315d 	.word	0x0801315d
 8013100:	08013139 	.word	0x08013139
 8013104:	0801315d 	.word	0x0801315d
 8013108:	0801315d 	.word	0x0801315d
 801310c:	0801315d 	.word	0x0801315d
 8013110:	0801314b 	.word	0x0801314b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	68da      	ldr	r2, [r3, #12]
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	f042 0202 	orr.w	r2, r2, #2
 8013122:	60da      	str	r2, [r3, #12]
      break;
 8013124:	e01d      	b.n	8013162 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	68da      	ldr	r2, [r3, #12]
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	f042 0204 	orr.w	r2, r2, #4
 8013134:	60da      	str	r2, [r3, #12]
      break;
 8013136:	e014      	b.n	8013162 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	68da      	ldr	r2, [r3, #12]
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	f042 0208 	orr.w	r2, r2, #8
 8013146:	60da      	str	r2, [r3, #12]
      break;
 8013148:	e00b      	b.n	8013162 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	68da      	ldr	r2, [r3, #12]
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	f042 0210 	orr.w	r2, r2, #16
 8013158:	60da      	str	r2, [r3, #12]
      break;
 801315a:	e002      	b.n	8013162 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 801315c:	2301      	movs	r3, #1
 801315e:	73fb      	strb	r3, [r7, #15]
      break;
 8013160:	bf00      	nop
  }

  if (status == HAL_OK)
 8013162:	7bfb      	ldrb	r3, [r7, #15]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d16f      	bne.n	8013248 <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	2201      	movs	r2, #1
 801316e:	6839      	ldr	r1, [r7, #0]
 8013170:	4618      	mov	r0, r3
 8013172:	f001 febd 	bl	8014ef0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	4a36      	ldr	r2, [pc, #216]	@ (8013254 <HAL_TIM_OC_Start_IT+0x284>)
 801317c:	4293      	cmp	r3, r2
 801317e:	d013      	beq.n	80131a8 <HAL_TIM_OC_Start_IT+0x1d8>
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	4a34      	ldr	r2, [pc, #208]	@ (8013258 <HAL_TIM_OC_Start_IT+0x288>)
 8013186:	4293      	cmp	r3, r2
 8013188:	d00e      	beq.n	80131a8 <HAL_TIM_OC_Start_IT+0x1d8>
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	4a33      	ldr	r2, [pc, #204]	@ (801325c <HAL_TIM_OC_Start_IT+0x28c>)
 8013190:	4293      	cmp	r3, r2
 8013192:	d009      	beq.n	80131a8 <HAL_TIM_OC_Start_IT+0x1d8>
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	4a31      	ldr	r2, [pc, #196]	@ (8013260 <HAL_TIM_OC_Start_IT+0x290>)
 801319a:	4293      	cmp	r3, r2
 801319c:	d004      	beq.n	80131a8 <HAL_TIM_OC_Start_IT+0x1d8>
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	4a30      	ldr	r2, [pc, #192]	@ (8013264 <HAL_TIM_OC_Start_IT+0x294>)
 80131a4:	4293      	cmp	r3, r2
 80131a6:	d101      	bne.n	80131ac <HAL_TIM_OC_Start_IT+0x1dc>
 80131a8:	2301      	movs	r3, #1
 80131aa:	e000      	b.n	80131ae <HAL_TIM_OC_Start_IT+0x1de>
 80131ac:	2300      	movs	r3, #0
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d007      	beq.n	80131c2 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80131c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	4a23      	ldr	r2, [pc, #140]	@ (8013254 <HAL_TIM_OC_Start_IT+0x284>)
 80131c8:	4293      	cmp	r3, r2
 80131ca:	d01d      	beq.n	8013208 <HAL_TIM_OC_Start_IT+0x238>
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80131d4:	d018      	beq.n	8013208 <HAL_TIM_OC_Start_IT+0x238>
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	4a23      	ldr	r2, [pc, #140]	@ (8013268 <HAL_TIM_OC_Start_IT+0x298>)
 80131dc:	4293      	cmp	r3, r2
 80131de:	d013      	beq.n	8013208 <HAL_TIM_OC_Start_IT+0x238>
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	4a21      	ldr	r2, [pc, #132]	@ (801326c <HAL_TIM_OC_Start_IT+0x29c>)
 80131e6:	4293      	cmp	r3, r2
 80131e8:	d00e      	beq.n	8013208 <HAL_TIM_OC_Start_IT+0x238>
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	4a20      	ldr	r2, [pc, #128]	@ (8013270 <HAL_TIM_OC_Start_IT+0x2a0>)
 80131f0:	4293      	cmp	r3, r2
 80131f2:	d009      	beq.n	8013208 <HAL_TIM_OC_Start_IT+0x238>
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	4a17      	ldr	r2, [pc, #92]	@ (8013258 <HAL_TIM_OC_Start_IT+0x288>)
 80131fa:	4293      	cmp	r3, r2
 80131fc:	d004      	beq.n	8013208 <HAL_TIM_OC_Start_IT+0x238>
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	4a16      	ldr	r2, [pc, #88]	@ (801325c <HAL_TIM_OC_Start_IT+0x28c>)
 8013204:	4293      	cmp	r3, r2
 8013206:	d115      	bne.n	8013234 <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	689a      	ldr	r2, [r3, #8]
 801320e:	4b19      	ldr	r3, [pc, #100]	@ (8013274 <HAL_TIM_OC_Start_IT+0x2a4>)
 8013210:	4013      	ands	r3, r2
 8013212:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013214:	68bb      	ldr	r3, [r7, #8]
 8013216:	2b06      	cmp	r3, #6
 8013218:	d015      	beq.n	8013246 <HAL_TIM_OC_Start_IT+0x276>
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013220:	d011      	beq.n	8013246 <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	681a      	ldr	r2, [r3, #0]
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	f042 0201 	orr.w	r2, r2, #1
 8013230:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013232:	e008      	b.n	8013246 <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	681a      	ldr	r2, [r3, #0]
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	f042 0201 	orr.w	r2, r2, #1
 8013242:	601a      	str	r2, [r3, #0]
 8013244:	e000      	b.n	8013248 <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013246:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8013248:	7bfb      	ldrb	r3, [r7, #15]
}
 801324a:	4618      	mov	r0, r3
 801324c:	3710      	adds	r7, #16
 801324e:	46bd      	mov	sp, r7
 8013250:	bd80      	pop	{r7, pc}
 8013252:	bf00      	nop
 8013254:	40012c00 	.word	0x40012c00
 8013258:	40013400 	.word	0x40013400
 801325c:	40014000 	.word	0x40014000
 8013260:	40014400 	.word	0x40014400
 8013264:	40014800 	.word	0x40014800
 8013268:	40000400 	.word	0x40000400
 801326c:	40000800 	.word	0x40000800
 8013270:	40000c00 	.word	0x40000c00
 8013274:	00010007 	.word	0x00010007

08013278 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b084      	sub	sp, #16
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
 8013280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013282:	2300      	movs	r3, #0
 8013284:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8013286:	683b      	ldr	r3, [r7, #0]
 8013288:	2b0c      	cmp	r3, #12
 801328a:	d841      	bhi.n	8013310 <HAL_TIM_OC_Stop_IT+0x98>
 801328c:	a201      	add	r2, pc, #4	@ (adr r2, 8013294 <HAL_TIM_OC_Stop_IT+0x1c>)
 801328e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013292:	bf00      	nop
 8013294:	080132c9 	.word	0x080132c9
 8013298:	08013311 	.word	0x08013311
 801329c:	08013311 	.word	0x08013311
 80132a0:	08013311 	.word	0x08013311
 80132a4:	080132db 	.word	0x080132db
 80132a8:	08013311 	.word	0x08013311
 80132ac:	08013311 	.word	0x08013311
 80132b0:	08013311 	.word	0x08013311
 80132b4:	080132ed 	.word	0x080132ed
 80132b8:	08013311 	.word	0x08013311
 80132bc:	08013311 	.word	0x08013311
 80132c0:	08013311 	.word	0x08013311
 80132c4:	080132ff 	.word	0x080132ff
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	68da      	ldr	r2, [r3, #12]
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	f022 0202 	bic.w	r2, r2, #2
 80132d6:	60da      	str	r2, [r3, #12]
      break;
 80132d8:	e01d      	b.n	8013316 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	68da      	ldr	r2, [r3, #12]
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	f022 0204 	bic.w	r2, r2, #4
 80132e8:	60da      	str	r2, [r3, #12]
      break;
 80132ea:	e014      	b.n	8013316 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	68da      	ldr	r2, [r3, #12]
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	f022 0208 	bic.w	r2, r2, #8
 80132fa:	60da      	str	r2, [r3, #12]
      break;
 80132fc:	e00b      	b.n	8013316 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	68da      	ldr	r2, [r3, #12]
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	f022 0210 	bic.w	r2, r2, #16
 801330c:	60da      	str	r2, [r3, #12]
      break;
 801330e:	e002      	b.n	8013316 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8013310:	2301      	movs	r3, #1
 8013312:	73fb      	strb	r3, [r7, #15]
      break;
 8013314:	bf00      	nop
  }

  if (status == HAL_OK)
 8013316:	7bfb      	ldrb	r3, [r7, #15]
 8013318:	2b00      	cmp	r3, #0
 801331a:	f040 8081 	bne.w	8013420 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	2200      	movs	r2, #0
 8013324:	6839      	ldr	r1, [r7, #0]
 8013326:	4618      	mov	r0, r3
 8013328:	f001 fde2 	bl	8014ef0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	4a3e      	ldr	r2, [pc, #248]	@ (801342c <HAL_TIM_OC_Stop_IT+0x1b4>)
 8013332:	4293      	cmp	r3, r2
 8013334:	d013      	beq.n	801335e <HAL_TIM_OC_Stop_IT+0xe6>
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	4a3d      	ldr	r2, [pc, #244]	@ (8013430 <HAL_TIM_OC_Stop_IT+0x1b8>)
 801333c:	4293      	cmp	r3, r2
 801333e:	d00e      	beq.n	801335e <HAL_TIM_OC_Stop_IT+0xe6>
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	4a3b      	ldr	r2, [pc, #236]	@ (8013434 <HAL_TIM_OC_Stop_IT+0x1bc>)
 8013346:	4293      	cmp	r3, r2
 8013348:	d009      	beq.n	801335e <HAL_TIM_OC_Stop_IT+0xe6>
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	4a3a      	ldr	r2, [pc, #232]	@ (8013438 <HAL_TIM_OC_Stop_IT+0x1c0>)
 8013350:	4293      	cmp	r3, r2
 8013352:	d004      	beq.n	801335e <HAL_TIM_OC_Stop_IT+0xe6>
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	4a38      	ldr	r2, [pc, #224]	@ (801343c <HAL_TIM_OC_Stop_IT+0x1c4>)
 801335a:	4293      	cmp	r3, r2
 801335c:	d101      	bne.n	8013362 <HAL_TIM_OC_Stop_IT+0xea>
 801335e:	2301      	movs	r3, #1
 8013360:	e000      	b.n	8013364 <HAL_TIM_OC_Stop_IT+0xec>
 8013362:	2300      	movs	r3, #0
 8013364:	2b00      	cmp	r3, #0
 8013366:	d017      	beq.n	8013398 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	6a1a      	ldr	r2, [r3, #32]
 801336e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8013372:	4013      	ands	r3, r2
 8013374:	2b00      	cmp	r3, #0
 8013376:	d10f      	bne.n	8013398 <HAL_TIM_OC_Stop_IT+0x120>
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	6a1a      	ldr	r2, [r3, #32]
 801337e:	f240 4344 	movw	r3, #1092	@ 0x444
 8013382:	4013      	ands	r3, r2
 8013384:	2b00      	cmp	r3, #0
 8013386:	d107      	bne.n	8013398 <HAL_TIM_OC_Stop_IT+0x120>
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8013396:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	6a1a      	ldr	r2, [r3, #32]
 801339e:	f241 1311 	movw	r3, #4369	@ 0x1111
 80133a2:	4013      	ands	r3, r2
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d10f      	bne.n	80133c8 <HAL_TIM_OC_Stop_IT+0x150>
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	6a1a      	ldr	r2, [r3, #32]
 80133ae:	f240 4344 	movw	r3, #1092	@ 0x444
 80133b2:	4013      	ands	r3, r2
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d107      	bne.n	80133c8 <HAL_TIM_OC_Stop_IT+0x150>
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	681a      	ldr	r2, [r3, #0]
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	f022 0201 	bic.w	r2, r2, #1
 80133c6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80133c8:	683b      	ldr	r3, [r7, #0]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d104      	bne.n	80133d8 <HAL_TIM_OC_Stop_IT+0x160>
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	2201      	movs	r2, #1
 80133d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80133d6:	e023      	b.n	8013420 <HAL_TIM_OC_Stop_IT+0x1a8>
 80133d8:	683b      	ldr	r3, [r7, #0]
 80133da:	2b04      	cmp	r3, #4
 80133dc:	d104      	bne.n	80133e8 <HAL_TIM_OC_Stop_IT+0x170>
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	2201      	movs	r2, #1
 80133e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80133e6:	e01b      	b.n	8013420 <HAL_TIM_OC_Stop_IT+0x1a8>
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	2b08      	cmp	r3, #8
 80133ec:	d104      	bne.n	80133f8 <HAL_TIM_OC_Stop_IT+0x180>
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	2201      	movs	r2, #1
 80133f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80133f6:	e013      	b.n	8013420 <HAL_TIM_OC_Stop_IT+0x1a8>
 80133f8:	683b      	ldr	r3, [r7, #0]
 80133fa:	2b0c      	cmp	r3, #12
 80133fc:	d104      	bne.n	8013408 <HAL_TIM_OC_Stop_IT+0x190>
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	2201      	movs	r2, #1
 8013402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013406:	e00b      	b.n	8013420 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013408:	683b      	ldr	r3, [r7, #0]
 801340a:	2b10      	cmp	r3, #16
 801340c:	d104      	bne.n	8013418 <HAL_TIM_OC_Stop_IT+0x1a0>
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	2201      	movs	r2, #1
 8013412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013416:	e003      	b.n	8013420 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	2201      	movs	r2, #1
 801341c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8013420:	7bfb      	ldrb	r3, [r7, #15]
}
 8013422:	4618      	mov	r0, r3
 8013424:	3710      	adds	r7, #16
 8013426:	46bd      	mov	sp, r7
 8013428:	bd80      	pop	{r7, pc}
 801342a:	bf00      	nop
 801342c:	40012c00 	.word	0x40012c00
 8013430:	40013400 	.word	0x40013400
 8013434:	40014000 	.word	0x40014000
 8013438:	40014400 	.word	0x40014400
 801343c:	40014800 	.word	0x40014800

08013440 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b082      	sub	sp, #8
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d101      	bne.n	8013452 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801344e:	2301      	movs	r3, #1
 8013450:	e049      	b.n	80134e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013458:	b2db      	uxtb	r3, r3
 801345a:	2b00      	cmp	r3, #0
 801345c:	d106      	bne.n	801346c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	2200      	movs	r2, #0
 8013462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8013466:	6878      	ldr	r0, [r7, #4]
 8013468:	f7f4 fe40 	bl	80080ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	2202      	movs	r2, #2
 8013470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	681a      	ldr	r2, [r3, #0]
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	3304      	adds	r3, #4
 801347c:	4619      	mov	r1, r3
 801347e:	4610      	mov	r0, r2
 8013480:	f000 ff68 	bl	8014354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	2201      	movs	r2, #1
 8013488:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	2201      	movs	r2, #1
 8013490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	2201      	movs	r2, #1
 8013498:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	2201      	movs	r2, #1
 80134a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	2201      	movs	r2, #1
 80134a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	2201      	movs	r2, #1
 80134b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	2201      	movs	r2, #1
 80134b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	2201      	movs	r2, #1
 80134c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	2201      	movs	r2, #1
 80134c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	2201      	movs	r2, #1
 80134d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	2201      	movs	r2, #1
 80134d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	2201      	movs	r2, #1
 80134e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80134e4:	2300      	movs	r3, #0
}
 80134e6:	4618      	mov	r0, r3
 80134e8:	3708      	adds	r7, #8
 80134ea:	46bd      	mov	sp, r7
 80134ec:	bd80      	pop	{r7, pc}
	...

080134f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b084      	sub	sp, #16
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
 80134f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80134fa:	683b      	ldr	r3, [r7, #0]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d109      	bne.n	8013514 <HAL_TIM_PWM_Start+0x24>
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8013506:	b2db      	uxtb	r3, r3
 8013508:	2b01      	cmp	r3, #1
 801350a:	bf14      	ite	ne
 801350c:	2301      	movne	r3, #1
 801350e:	2300      	moveq	r3, #0
 8013510:	b2db      	uxtb	r3, r3
 8013512:	e03c      	b.n	801358e <HAL_TIM_PWM_Start+0x9e>
 8013514:	683b      	ldr	r3, [r7, #0]
 8013516:	2b04      	cmp	r3, #4
 8013518:	d109      	bne.n	801352e <HAL_TIM_PWM_Start+0x3e>
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8013520:	b2db      	uxtb	r3, r3
 8013522:	2b01      	cmp	r3, #1
 8013524:	bf14      	ite	ne
 8013526:	2301      	movne	r3, #1
 8013528:	2300      	moveq	r3, #0
 801352a:	b2db      	uxtb	r3, r3
 801352c:	e02f      	b.n	801358e <HAL_TIM_PWM_Start+0x9e>
 801352e:	683b      	ldr	r3, [r7, #0]
 8013530:	2b08      	cmp	r3, #8
 8013532:	d109      	bne.n	8013548 <HAL_TIM_PWM_Start+0x58>
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801353a:	b2db      	uxtb	r3, r3
 801353c:	2b01      	cmp	r3, #1
 801353e:	bf14      	ite	ne
 8013540:	2301      	movne	r3, #1
 8013542:	2300      	moveq	r3, #0
 8013544:	b2db      	uxtb	r3, r3
 8013546:	e022      	b.n	801358e <HAL_TIM_PWM_Start+0x9e>
 8013548:	683b      	ldr	r3, [r7, #0]
 801354a:	2b0c      	cmp	r3, #12
 801354c:	d109      	bne.n	8013562 <HAL_TIM_PWM_Start+0x72>
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013554:	b2db      	uxtb	r3, r3
 8013556:	2b01      	cmp	r3, #1
 8013558:	bf14      	ite	ne
 801355a:	2301      	movne	r3, #1
 801355c:	2300      	moveq	r3, #0
 801355e:	b2db      	uxtb	r3, r3
 8013560:	e015      	b.n	801358e <HAL_TIM_PWM_Start+0x9e>
 8013562:	683b      	ldr	r3, [r7, #0]
 8013564:	2b10      	cmp	r3, #16
 8013566:	d109      	bne.n	801357c <HAL_TIM_PWM_Start+0x8c>
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801356e:	b2db      	uxtb	r3, r3
 8013570:	2b01      	cmp	r3, #1
 8013572:	bf14      	ite	ne
 8013574:	2301      	movne	r3, #1
 8013576:	2300      	moveq	r3, #0
 8013578:	b2db      	uxtb	r3, r3
 801357a:	e008      	b.n	801358e <HAL_TIM_PWM_Start+0x9e>
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013582:	b2db      	uxtb	r3, r3
 8013584:	2b01      	cmp	r3, #1
 8013586:	bf14      	ite	ne
 8013588:	2301      	movne	r3, #1
 801358a:	2300      	moveq	r3, #0
 801358c:	b2db      	uxtb	r3, r3
 801358e:	2b00      	cmp	r3, #0
 8013590:	d001      	beq.n	8013596 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8013592:	2301      	movs	r3, #1
 8013594:	e09c      	b.n	80136d0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d104      	bne.n	80135a6 <HAL_TIM_PWM_Start+0xb6>
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	2202      	movs	r2, #2
 80135a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80135a4:	e023      	b.n	80135ee <HAL_TIM_PWM_Start+0xfe>
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	2b04      	cmp	r3, #4
 80135aa:	d104      	bne.n	80135b6 <HAL_TIM_PWM_Start+0xc6>
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	2202      	movs	r2, #2
 80135b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80135b4:	e01b      	b.n	80135ee <HAL_TIM_PWM_Start+0xfe>
 80135b6:	683b      	ldr	r3, [r7, #0]
 80135b8:	2b08      	cmp	r3, #8
 80135ba:	d104      	bne.n	80135c6 <HAL_TIM_PWM_Start+0xd6>
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	2202      	movs	r2, #2
 80135c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80135c4:	e013      	b.n	80135ee <HAL_TIM_PWM_Start+0xfe>
 80135c6:	683b      	ldr	r3, [r7, #0]
 80135c8:	2b0c      	cmp	r3, #12
 80135ca:	d104      	bne.n	80135d6 <HAL_TIM_PWM_Start+0xe6>
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	2202      	movs	r2, #2
 80135d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80135d4:	e00b      	b.n	80135ee <HAL_TIM_PWM_Start+0xfe>
 80135d6:	683b      	ldr	r3, [r7, #0]
 80135d8:	2b10      	cmp	r3, #16
 80135da:	d104      	bne.n	80135e6 <HAL_TIM_PWM_Start+0xf6>
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	2202      	movs	r2, #2
 80135e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80135e4:	e003      	b.n	80135ee <HAL_TIM_PWM_Start+0xfe>
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	2202      	movs	r2, #2
 80135ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	2201      	movs	r2, #1
 80135f4:	6839      	ldr	r1, [r7, #0]
 80135f6:	4618      	mov	r0, r3
 80135f8:	f001 fc7a 	bl	8014ef0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	4a35      	ldr	r2, [pc, #212]	@ (80136d8 <HAL_TIM_PWM_Start+0x1e8>)
 8013602:	4293      	cmp	r3, r2
 8013604:	d013      	beq.n	801362e <HAL_TIM_PWM_Start+0x13e>
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	4a34      	ldr	r2, [pc, #208]	@ (80136dc <HAL_TIM_PWM_Start+0x1ec>)
 801360c:	4293      	cmp	r3, r2
 801360e:	d00e      	beq.n	801362e <HAL_TIM_PWM_Start+0x13e>
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	4a32      	ldr	r2, [pc, #200]	@ (80136e0 <HAL_TIM_PWM_Start+0x1f0>)
 8013616:	4293      	cmp	r3, r2
 8013618:	d009      	beq.n	801362e <HAL_TIM_PWM_Start+0x13e>
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	4a31      	ldr	r2, [pc, #196]	@ (80136e4 <HAL_TIM_PWM_Start+0x1f4>)
 8013620:	4293      	cmp	r3, r2
 8013622:	d004      	beq.n	801362e <HAL_TIM_PWM_Start+0x13e>
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	4a2f      	ldr	r2, [pc, #188]	@ (80136e8 <HAL_TIM_PWM_Start+0x1f8>)
 801362a:	4293      	cmp	r3, r2
 801362c:	d101      	bne.n	8013632 <HAL_TIM_PWM_Start+0x142>
 801362e:	2301      	movs	r3, #1
 8013630:	e000      	b.n	8013634 <HAL_TIM_PWM_Start+0x144>
 8013632:	2300      	movs	r3, #0
 8013634:	2b00      	cmp	r3, #0
 8013636:	d007      	beq.n	8013648 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8013646:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	4a22      	ldr	r2, [pc, #136]	@ (80136d8 <HAL_TIM_PWM_Start+0x1e8>)
 801364e:	4293      	cmp	r3, r2
 8013650:	d01d      	beq.n	801368e <HAL_TIM_PWM_Start+0x19e>
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801365a:	d018      	beq.n	801368e <HAL_TIM_PWM_Start+0x19e>
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	4a22      	ldr	r2, [pc, #136]	@ (80136ec <HAL_TIM_PWM_Start+0x1fc>)
 8013662:	4293      	cmp	r3, r2
 8013664:	d013      	beq.n	801368e <HAL_TIM_PWM_Start+0x19e>
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	4a21      	ldr	r2, [pc, #132]	@ (80136f0 <HAL_TIM_PWM_Start+0x200>)
 801366c:	4293      	cmp	r3, r2
 801366e:	d00e      	beq.n	801368e <HAL_TIM_PWM_Start+0x19e>
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	4a1f      	ldr	r2, [pc, #124]	@ (80136f4 <HAL_TIM_PWM_Start+0x204>)
 8013676:	4293      	cmp	r3, r2
 8013678:	d009      	beq.n	801368e <HAL_TIM_PWM_Start+0x19e>
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	4a17      	ldr	r2, [pc, #92]	@ (80136dc <HAL_TIM_PWM_Start+0x1ec>)
 8013680:	4293      	cmp	r3, r2
 8013682:	d004      	beq.n	801368e <HAL_TIM_PWM_Start+0x19e>
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	4a15      	ldr	r2, [pc, #84]	@ (80136e0 <HAL_TIM_PWM_Start+0x1f0>)
 801368a:	4293      	cmp	r3, r2
 801368c:	d115      	bne.n	80136ba <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	689a      	ldr	r2, [r3, #8]
 8013694:	4b18      	ldr	r3, [pc, #96]	@ (80136f8 <HAL_TIM_PWM_Start+0x208>)
 8013696:	4013      	ands	r3, r2
 8013698:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	2b06      	cmp	r3, #6
 801369e:	d015      	beq.n	80136cc <HAL_TIM_PWM_Start+0x1dc>
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80136a6:	d011      	beq.n	80136cc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	681a      	ldr	r2, [r3, #0]
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	f042 0201 	orr.w	r2, r2, #1
 80136b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80136b8:	e008      	b.n	80136cc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	681a      	ldr	r2, [r3, #0]
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	f042 0201 	orr.w	r2, r2, #1
 80136c8:	601a      	str	r2, [r3, #0]
 80136ca:	e000      	b.n	80136ce <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80136cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80136ce:	2300      	movs	r3, #0
}
 80136d0:	4618      	mov	r0, r3
 80136d2:	3710      	adds	r7, #16
 80136d4:	46bd      	mov	sp, r7
 80136d6:	bd80      	pop	{r7, pc}
 80136d8:	40012c00 	.word	0x40012c00
 80136dc:	40013400 	.word	0x40013400
 80136e0:	40014000 	.word	0x40014000
 80136e4:	40014400 	.word	0x40014400
 80136e8:	40014800 	.word	0x40014800
 80136ec:	40000400 	.word	0x40000400
 80136f0:	40000800 	.word	0x40000800
 80136f4:	40000c00 	.word	0x40000c00
 80136f8:	00010007 	.word	0x00010007

080136fc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b082      	sub	sp, #8
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
 8013704:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	2200      	movs	r2, #0
 801370c:	6839      	ldr	r1, [r7, #0]
 801370e:	4618      	mov	r0, r3
 8013710:	f001 fbee 	bl	8014ef0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	4a3e      	ldr	r2, [pc, #248]	@ (8013814 <HAL_TIM_PWM_Stop+0x118>)
 801371a:	4293      	cmp	r3, r2
 801371c:	d013      	beq.n	8013746 <HAL_TIM_PWM_Stop+0x4a>
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	4a3d      	ldr	r2, [pc, #244]	@ (8013818 <HAL_TIM_PWM_Stop+0x11c>)
 8013724:	4293      	cmp	r3, r2
 8013726:	d00e      	beq.n	8013746 <HAL_TIM_PWM_Stop+0x4a>
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	4a3b      	ldr	r2, [pc, #236]	@ (801381c <HAL_TIM_PWM_Stop+0x120>)
 801372e:	4293      	cmp	r3, r2
 8013730:	d009      	beq.n	8013746 <HAL_TIM_PWM_Stop+0x4a>
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	4a3a      	ldr	r2, [pc, #232]	@ (8013820 <HAL_TIM_PWM_Stop+0x124>)
 8013738:	4293      	cmp	r3, r2
 801373a:	d004      	beq.n	8013746 <HAL_TIM_PWM_Stop+0x4a>
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	4a38      	ldr	r2, [pc, #224]	@ (8013824 <HAL_TIM_PWM_Stop+0x128>)
 8013742:	4293      	cmp	r3, r2
 8013744:	d101      	bne.n	801374a <HAL_TIM_PWM_Stop+0x4e>
 8013746:	2301      	movs	r3, #1
 8013748:	e000      	b.n	801374c <HAL_TIM_PWM_Stop+0x50>
 801374a:	2300      	movs	r3, #0
 801374c:	2b00      	cmp	r3, #0
 801374e:	d017      	beq.n	8013780 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	6a1a      	ldr	r2, [r3, #32]
 8013756:	f241 1311 	movw	r3, #4369	@ 0x1111
 801375a:	4013      	ands	r3, r2
 801375c:	2b00      	cmp	r3, #0
 801375e:	d10f      	bne.n	8013780 <HAL_TIM_PWM_Stop+0x84>
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	6a1a      	ldr	r2, [r3, #32]
 8013766:	f240 4344 	movw	r3, #1092	@ 0x444
 801376a:	4013      	ands	r3, r2
 801376c:	2b00      	cmp	r3, #0
 801376e:	d107      	bne.n	8013780 <HAL_TIM_PWM_Stop+0x84>
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801377e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	6a1a      	ldr	r2, [r3, #32]
 8013786:	f241 1311 	movw	r3, #4369	@ 0x1111
 801378a:	4013      	ands	r3, r2
 801378c:	2b00      	cmp	r3, #0
 801378e:	d10f      	bne.n	80137b0 <HAL_TIM_PWM_Stop+0xb4>
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	6a1a      	ldr	r2, [r3, #32]
 8013796:	f240 4344 	movw	r3, #1092	@ 0x444
 801379a:	4013      	ands	r3, r2
 801379c:	2b00      	cmp	r3, #0
 801379e:	d107      	bne.n	80137b0 <HAL_TIM_PWM_Stop+0xb4>
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	681a      	ldr	r2, [r3, #0]
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	f022 0201 	bic.w	r2, r2, #1
 80137ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80137b0:	683b      	ldr	r3, [r7, #0]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d104      	bne.n	80137c0 <HAL_TIM_PWM_Stop+0xc4>
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	2201      	movs	r2, #1
 80137ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80137be:	e023      	b.n	8013808 <HAL_TIM_PWM_Stop+0x10c>
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	2b04      	cmp	r3, #4
 80137c4:	d104      	bne.n	80137d0 <HAL_TIM_PWM_Stop+0xd4>
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	2201      	movs	r2, #1
 80137ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80137ce:	e01b      	b.n	8013808 <HAL_TIM_PWM_Stop+0x10c>
 80137d0:	683b      	ldr	r3, [r7, #0]
 80137d2:	2b08      	cmp	r3, #8
 80137d4:	d104      	bne.n	80137e0 <HAL_TIM_PWM_Stop+0xe4>
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	2201      	movs	r2, #1
 80137da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80137de:	e013      	b.n	8013808 <HAL_TIM_PWM_Stop+0x10c>
 80137e0:	683b      	ldr	r3, [r7, #0]
 80137e2:	2b0c      	cmp	r3, #12
 80137e4:	d104      	bne.n	80137f0 <HAL_TIM_PWM_Stop+0xf4>
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	2201      	movs	r2, #1
 80137ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80137ee:	e00b      	b.n	8013808 <HAL_TIM_PWM_Stop+0x10c>
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	2b10      	cmp	r3, #16
 80137f4:	d104      	bne.n	8013800 <HAL_TIM_PWM_Stop+0x104>
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	2201      	movs	r2, #1
 80137fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80137fe:	e003      	b.n	8013808 <HAL_TIM_PWM_Stop+0x10c>
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	2201      	movs	r2, #1
 8013804:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8013808:	2300      	movs	r3, #0
}
 801380a:	4618      	mov	r0, r3
 801380c:	3708      	adds	r7, #8
 801380e:	46bd      	mov	sp, r7
 8013810:	bd80      	pop	{r7, pc}
 8013812:	bf00      	nop
 8013814:	40012c00 	.word	0x40012c00
 8013818:	40013400 	.word	0x40013400
 801381c:	40014000 	.word	0x40014000
 8013820:	40014400 	.word	0x40014400
 8013824:	40014800 	.word	0x40014800

08013828 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8013828:	b580      	push	{r7, lr}
 801382a:	b082      	sub	sp, #8
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d101      	bne.n	801383a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8013836:	2301      	movs	r3, #1
 8013838:	e049      	b.n	80138ce <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013840:	b2db      	uxtb	r3, r3
 8013842:	2b00      	cmp	r3, #0
 8013844:	d106      	bne.n	8013854 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	2200      	movs	r2, #0
 801384a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801384e:	6878      	ldr	r0, [r7, #4]
 8013850:	f7f4 fc6c 	bl	800812c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	2202      	movs	r2, #2
 8013858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	681a      	ldr	r2, [r3, #0]
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	3304      	adds	r3, #4
 8013864:	4619      	mov	r1, r3
 8013866:	4610      	mov	r0, r2
 8013868:	f000 fd74 	bl	8014354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	2201      	movs	r2, #1
 8013870:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	2201      	movs	r2, #1
 8013878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	2201      	movs	r2, #1
 8013880:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	2201      	movs	r2, #1
 8013888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	2201      	movs	r2, #1
 8013890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	2201      	movs	r2, #1
 8013898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	2201      	movs	r2, #1
 80138a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	2201      	movs	r2, #1
 80138a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	2201      	movs	r2, #1
 80138b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	2201      	movs	r2, #1
 80138b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	2201      	movs	r2, #1
 80138c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	2201      	movs	r2, #1
 80138c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80138cc:	2300      	movs	r3, #0
}
 80138ce:	4618      	mov	r0, r3
 80138d0:	3708      	adds	r7, #8
 80138d2:	46bd      	mov	sp, r7
 80138d4:	bd80      	pop	{r7, pc}
	...

080138d8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b084      	sub	sp, #16
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
 80138e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80138e2:	2300      	movs	r3, #0
 80138e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80138e6:	683b      	ldr	r3, [r7, #0]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d104      	bne.n	80138f6 <HAL_TIM_IC_Start_IT+0x1e>
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80138f2:	b2db      	uxtb	r3, r3
 80138f4:	e023      	b.n	801393e <HAL_TIM_IC_Start_IT+0x66>
 80138f6:	683b      	ldr	r3, [r7, #0]
 80138f8:	2b04      	cmp	r3, #4
 80138fa:	d104      	bne.n	8013906 <HAL_TIM_IC_Start_IT+0x2e>
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8013902:	b2db      	uxtb	r3, r3
 8013904:	e01b      	b.n	801393e <HAL_TIM_IC_Start_IT+0x66>
 8013906:	683b      	ldr	r3, [r7, #0]
 8013908:	2b08      	cmp	r3, #8
 801390a:	d104      	bne.n	8013916 <HAL_TIM_IC_Start_IT+0x3e>
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013912:	b2db      	uxtb	r3, r3
 8013914:	e013      	b.n	801393e <HAL_TIM_IC_Start_IT+0x66>
 8013916:	683b      	ldr	r3, [r7, #0]
 8013918:	2b0c      	cmp	r3, #12
 801391a:	d104      	bne.n	8013926 <HAL_TIM_IC_Start_IT+0x4e>
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013922:	b2db      	uxtb	r3, r3
 8013924:	e00b      	b.n	801393e <HAL_TIM_IC_Start_IT+0x66>
 8013926:	683b      	ldr	r3, [r7, #0]
 8013928:	2b10      	cmp	r3, #16
 801392a:	d104      	bne.n	8013936 <HAL_TIM_IC_Start_IT+0x5e>
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013932:	b2db      	uxtb	r3, r3
 8013934:	e003      	b.n	801393e <HAL_TIM_IC_Start_IT+0x66>
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801393c:	b2db      	uxtb	r3, r3
 801393e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8013940:	683b      	ldr	r3, [r7, #0]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d104      	bne.n	8013950 <HAL_TIM_IC_Start_IT+0x78>
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801394c:	b2db      	uxtb	r3, r3
 801394e:	e013      	b.n	8013978 <HAL_TIM_IC_Start_IT+0xa0>
 8013950:	683b      	ldr	r3, [r7, #0]
 8013952:	2b04      	cmp	r3, #4
 8013954:	d104      	bne.n	8013960 <HAL_TIM_IC_Start_IT+0x88>
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801395c:	b2db      	uxtb	r3, r3
 801395e:	e00b      	b.n	8013978 <HAL_TIM_IC_Start_IT+0xa0>
 8013960:	683b      	ldr	r3, [r7, #0]
 8013962:	2b08      	cmp	r3, #8
 8013964:	d104      	bne.n	8013970 <HAL_TIM_IC_Start_IT+0x98>
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 801396c:	b2db      	uxtb	r3, r3
 801396e:	e003      	b.n	8013978 <HAL_TIM_IC_Start_IT+0xa0>
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8013976:	b2db      	uxtb	r3, r3
 8013978:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801397a:	7bbb      	ldrb	r3, [r7, #14]
 801397c:	2b01      	cmp	r3, #1
 801397e:	d102      	bne.n	8013986 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8013980:	7b7b      	ldrb	r3, [r7, #13]
 8013982:	2b01      	cmp	r3, #1
 8013984:	d001      	beq.n	801398a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8013986:	2301      	movs	r3, #1
 8013988:	e0dd      	b.n	8013b46 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801398a:	683b      	ldr	r3, [r7, #0]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d104      	bne.n	801399a <HAL_TIM_IC_Start_IT+0xc2>
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	2202      	movs	r2, #2
 8013994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013998:	e023      	b.n	80139e2 <HAL_TIM_IC_Start_IT+0x10a>
 801399a:	683b      	ldr	r3, [r7, #0]
 801399c:	2b04      	cmp	r3, #4
 801399e:	d104      	bne.n	80139aa <HAL_TIM_IC_Start_IT+0xd2>
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	2202      	movs	r2, #2
 80139a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80139a8:	e01b      	b.n	80139e2 <HAL_TIM_IC_Start_IT+0x10a>
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	2b08      	cmp	r3, #8
 80139ae:	d104      	bne.n	80139ba <HAL_TIM_IC_Start_IT+0xe2>
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	2202      	movs	r2, #2
 80139b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80139b8:	e013      	b.n	80139e2 <HAL_TIM_IC_Start_IT+0x10a>
 80139ba:	683b      	ldr	r3, [r7, #0]
 80139bc:	2b0c      	cmp	r3, #12
 80139be:	d104      	bne.n	80139ca <HAL_TIM_IC_Start_IT+0xf2>
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	2202      	movs	r2, #2
 80139c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80139c8:	e00b      	b.n	80139e2 <HAL_TIM_IC_Start_IT+0x10a>
 80139ca:	683b      	ldr	r3, [r7, #0]
 80139cc:	2b10      	cmp	r3, #16
 80139ce:	d104      	bne.n	80139da <HAL_TIM_IC_Start_IT+0x102>
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	2202      	movs	r2, #2
 80139d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80139d8:	e003      	b.n	80139e2 <HAL_TIM_IC_Start_IT+0x10a>
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	2202      	movs	r2, #2
 80139de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d104      	bne.n	80139f2 <HAL_TIM_IC_Start_IT+0x11a>
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	2202      	movs	r2, #2
 80139ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80139f0:	e013      	b.n	8013a1a <HAL_TIM_IC_Start_IT+0x142>
 80139f2:	683b      	ldr	r3, [r7, #0]
 80139f4:	2b04      	cmp	r3, #4
 80139f6:	d104      	bne.n	8013a02 <HAL_TIM_IC_Start_IT+0x12a>
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	2202      	movs	r2, #2
 80139fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013a00:	e00b      	b.n	8013a1a <HAL_TIM_IC_Start_IT+0x142>
 8013a02:	683b      	ldr	r3, [r7, #0]
 8013a04:	2b08      	cmp	r3, #8
 8013a06:	d104      	bne.n	8013a12 <HAL_TIM_IC_Start_IT+0x13a>
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	2202      	movs	r2, #2
 8013a0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8013a10:	e003      	b.n	8013a1a <HAL_TIM_IC_Start_IT+0x142>
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	2202      	movs	r2, #2
 8013a16:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8013a1a:	683b      	ldr	r3, [r7, #0]
 8013a1c:	2b0c      	cmp	r3, #12
 8013a1e:	d841      	bhi.n	8013aa4 <HAL_TIM_IC_Start_IT+0x1cc>
 8013a20:	a201      	add	r2, pc, #4	@ (adr r2, 8013a28 <HAL_TIM_IC_Start_IT+0x150>)
 8013a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a26:	bf00      	nop
 8013a28:	08013a5d 	.word	0x08013a5d
 8013a2c:	08013aa5 	.word	0x08013aa5
 8013a30:	08013aa5 	.word	0x08013aa5
 8013a34:	08013aa5 	.word	0x08013aa5
 8013a38:	08013a6f 	.word	0x08013a6f
 8013a3c:	08013aa5 	.word	0x08013aa5
 8013a40:	08013aa5 	.word	0x08013aa5
 8013a44:	08013aa5 	.word	0x08013aa5
 8013a48:	08013a81 	.word	0x08013a81
 8013a4c:	08013aa5 	.word	0x08013aa5
 8013a50:	08013aa5 	.word	0x08013aa5
 8013a54:	08013aa5 	.word	0x08013aa5
 8013a58:	08013a93 	.word	0x08013a93
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	68da      	ldr	r2, [r3, #12]
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	f042 0202 	orr.w	r2, r2, #2
 8013a6a:	60da      	str	r2, [r3, #12]
      break;
 8013a6c:	e01d      	b.n	8013aaa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	68da      	ldr	r2, [r3, #12]
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	f042 0204 	orr.w	r2, r2, #4
 8013a7c:	60da      	str	r2, [r3, #12]
      break;
 8013a7e:	e014      	b.n	8013aaa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	68da      	ldr	r2, [r3, #12]
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	f042 0208 	orr.w	r2, r2, #8
 8013a8e:	60da      	str	r2, [r3, #12]
      break;
 8013a90:	e00b      	b.n	8013aaa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	68da      	ldr	r2, [r3, #12]
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	f042 0210 	orr.w	r2, r2, #16
 8013aa0:	60da      	str	r2, [r3, #12]
      break;
 8013aa2:	e002      	b.n	8013aaa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8013aa4:	2301      	movs	r3, #1
 8013aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8013aa8:	bf00      	nop
  }

  if (status == HAL_OK)
 8013aaa:	7bfb      	ldrb	r3, [r7, #15]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d149      	bne.n	8013b44 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	2201      	movs	r2, #1
 8013ab6:	6839      	ldr	r1, [r7, #0]
 8013ab8:	4618      	mov	r0, r3
 8013aba:	f001 fa19 	bl	8014ef0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	4a23      	ldr	r2, [pc, #140]	@ (8013b50 <HAL_TIM_IC_Start_IT+0x278>)
 8013ac4:	4293      	cmp	r3, r2
 8013ac6:	d01d      	beq.n	8013b04 <HAL_TIM_IC_Start_IT+0x22c>
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013ad0:	d018      	beq.n	8013b04 <HAL_TIM_IC_Start_IT+0x22c>
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	4a1f      	ldr	r2, [pc, #124]	@ (8013b54 <HAL_TIM_IC_Start_IT+0x27c>)
 8013ad8:	4293      	cmp	r3, r2
 8013ada:	d013      	beq.n	8013b04 <HAL_TIM_IC_Start_IT+0x22c>
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8013b58 <HAL_TIM_IC_Start_IT+0x280>)
 8013ae2:	4293      	cmp	r3, r2
 8013ae4:	d00e      	beq.n	8013b04 <HAL_TIM_IC_Start_IT+0x22c>
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	4a1c      	ldr	r2, [pc, #112]	@ (8013b5c <HAL_TIM_IC_Start_IT+0x284>)
 8013aec:	4293      	cmp	r3, r2
 8013aee:	d009      	beq.n	8013b04 <HAL_TIM_IC_Start_IT+0x22c>
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	4a1a      	ldr	r2, [pc, #104]	@ (8013b60 <HAL_TIM_IC_Start_IT+0x288>)
 8013af6:	4293      	cmp	r3, r2
 8013af8:	d004      	beq.n	8013b04 <HAL_TIM_IC_Start_IT+0x22c>
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	4a19      	ldr	r2, [pc, #100]	@ (8013b64 <HAL_TIM_IC_Start_IT+0x28c>)
 8013b00:	4293      	cmp	r3, r2
 8013b02:	d115      	bne.n	8013b30 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	689a      	ldr	r2, [r3, #8]
 8013b0a:	4b17      	ldr	r3, [pc, #92]	@ (8013b68 <HAL_TIM_IC_Start_IT+0x290>)
 8013b0c:	4013      	ands	r3, r2
 8013b0e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013b10:	68bb      	ldr	r3, [r7, #8]
 8013b12:	2b06      	cmp	r3, #6
 8013b14:	d015      	beq.n	8013b42 <HAL_TIM_IC_Start_IT+0x26a>
 8013b16:	68bb      	ldr	r3, [r7, #8]
 8013b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013b1c:	d011      	beq.n	8013b42 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	681a      	ldr	r2, [r3, #0]
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	f042 0201 	orr.w	r2, r2, #1
 8013b2c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013b2e:	e008      	b.n	8013b42 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	681a      	ldr	r2, [r3, #0]
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	f042 0201 	orr.w	r2, r2, #1
 8013b3e:	601a      	str	r2, [r3, #0]
 8013b40:	e000      	b.n	8013b44 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013b42:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8013b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b46:	4618      	mov	r0, r3
 8013b48:	3710      	adds	r7, #16
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	bd80      	pop	{r7, pc}
 8013b4e:	bf00      	nop
 8013b50:	40012c00 	.word	0x40012c00
 8013b54:	40000400 	.word	0x40000400
 8013b58:	40000800 	.word	0x40000800
 8013b5c:	40000c00 	.word	0x40000c00
 8013b60:	40013400 	.word	0x40013400
 8013b64:	40014000 	.word	0x40014000
 8013b68:	00010007 	.word	0x00010007

08013b6c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b084      	sub	sp, #16
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
 8013b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013b76:	2300      	movs	r3, #0
 8013b78:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8013b7a:	683b      	ldr	r3, [r7, #0]
 8013b7c:	2b0c      	cmp	r3, #12
 8013b7e:	d841      	bhi.n	8013c04 <HAL_TIM_IC_Stop_IT+0x98>
 8013b80:	a201      	add	r2, pc, #4	@ (adr r2, 8013b88 <HAL_TIM_IC_Stop_IT+0x1c>)
 8013b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b86:	bf00      	nop
 8013b88:	08013bbd 	.word	0x08013bbd
 8013b8c:	08013c05 	.word	0x08013c05
 8013b90:	08013c05 	.word	0x08013c05
 8013b94:	08013c05 	.word	0x08013c05
 8013b98:	08013bcf 	.word	0x08013bcf
 8013b9c:	08013c05 	.word	0x08013c05
 8013ba0:	08013c05 	.word	0x08013c05
 8013ba4:	08013c05 	.word	0x08013c05
 8013ba8:	08013be1 	.word	0x08013be1
 8013bac:	08013c05 	.word	0x08013c05
 8013bb0:	08013c05 	.word	0x08013c05
 8013bb4:	08013c05 	.word	0x08013c05
 8013bb8:	08013bf3 	.word	0x08013bf3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	68da      	ldr	r2, [r3, #12]
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	f022 0202 	bic.w	r2, r2, #2
 8013bca:	60da      	str	r2, [r3, #12]
      break;
 8013bcc:	e01d      	b.n	8013c0a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	68da      	ldr	r2, [r3, #12]
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	f022 0204 	bic.w	r2, r2, #4
 8013bdc:	60da      	str	r2, [r3, #12]
      break;
 8013bde:	e014      	b.n	8013c0a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	68da      	ldr	r2, [r3, #12]
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	f022 0208 	bic.w	r2, r2, #8
 8013bee:	60da      	str	r2, [r3, #12]
      break;
 8013bf0:	e00b      	b.n	8013c0a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	68da      	ldr	r2, [r3, #12]
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	f022 0210 	bic.w	r2, r2, #16
 8013c00:	60da      	str	r2, [r3, #12]
      break;
 8013c02:	e002      	b.n	8013c0a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8013c04:	2301      	movs	r3, #1
 8013c06:	73fb      	strb	r3, [r7, #15]
      break;
 8013c08:	bf00      	nop
  }

  if (status == HAL_OK)
 8013c0a:	7bfb      	ldrb	r3, [r7, #15]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d166      	bne.n	8013cde <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	2200      	movs	r2, #0
 8013c16:	6839      	ldr	r1, [r7, #0]
 8013c18:	4618      	mov	r0, r3
 8013c1a:	f001 f969 	bl	8014ef0 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	6a1a      	ldr	r2, [r3, #32]
 8013c24:	f241 1311 	movw	r3, #4369	@ 0x1111
 8013c28:	4013      	ands	r3, r2
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d10f      	bne.n	8013c4e <HAL_TIM_IC_Stop_IT+0xe2>
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	6a1a      	ldr	r2, [r3, #32]
 8013c34:	f240 4344 	movw	r3, #1092	@ 0x444
 8013c38:	4013      	ands	r3, r2
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d107      	bne.n	8013c4e <HAL_TIM_IC_Stop_IT+0xe2>
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	681a      	ldr	r2, [r3, #0]
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	f022 0201 	bic.w	r2, r2, #1
 8013c4c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8013c4e:	683b      	ldr	r3, [r7, #0]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d104      	bne.n	8013c5e <HAL_TIM_IC_Stop_IT+0xf2>
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	2201      	movs	r2, #1
 8013c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013c5c:	e023      	b.n	8013ca6 <HAL_TIM_IC_Stop_IT+0x13a>
 8013c5e:	683b      	ldr	r3, [r7, #0]
 8013c60:	2b04      	cmp	r3, #4
 8013c62:	d104      	bne.n	8013c6e <HAL_TIM_IC_Stop_IT+0x102>
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	2201      	movs	r2, #1
 8013c68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013c6c:	e01b      	b.n	8013ca6 <HAL_TIM_IC_Stop_IT+0x13a>
 8013c6e:	683b      	ldr	r3, [r7, #0]
 8013c70:	2b08      	cmp	r3, #8
 8013c72:	d104      	bne.n	8013c7e <HAL_TIM_IC_Stop_IT+0x112>
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	2201      	movs	r2, #1
 8013c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013c7c:	e013      	b.n	8013ca6 <HAL_TIM_IC_Stop_IT+0x13a>
 8013c7e:	683b      	ldr	r3, [r7, #0]
 8013c80:	2b0c      	cmp	r3, #12
 8013c82:	d104      	bne.n	8013c8e <HAL_TIM_IC_Stop_IT+0x122>
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	2201      	movs	r2, #1
 8013c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013c8c:	e00b      	b.n	8013ca6 <HAL_TIM_IC_Stop_IT+0x13a>
 8013c8e:	683b      	ldr	r3, [r7, #0]
 8013c90:	2b10      	cmp	r3, #16
 8013c92:	d104      	bne.n	8013c9e <HAL_TIM_IC_Stop_IT+0x132>
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	2201      	movs	r2, #1
 8013c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013c9c:	e003      	b.n	8013ca6 <HAL_TIM_IC_Stop_IT+0x13a>
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	2201      	movs	r2, #1
 8013ca2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8013ca6:	683b      	ldr	r3, [r7, #0]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d104      	bne.n	8013cb6 <HAL_TIM_IC_Stop_IT+0x14a>
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	2201      	movs	r2, #1
 8013cb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013cb4:	e013      	b.n	8013cde <HAL_TIM_IC_Stop_IT+0x172>
 8013cb6:	683b      	ldr	r3, [r7, #0]
 8013cb8:	2b04      	cmp	r3, #4
 8013cba:	d104      	bne.n	8013cc6 <HAL_TIM_IC_Stop_IT+0x15a>
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	2201      	movs	r2, #1
 8013cc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013cc4:	e00b      	b.n	8013cde <HAL_TIM_IC_Stop_IT+0x172>
 8013cc6:	683b      	ldr	r3, [r7, #0]
 8013cc8:	2b08      	cmp	r3, #8
 8013cca:	d104      	bne.n	8013cd6 <HAL_TIM_IC_Stop_IT+0x16a>
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	2201      	movs	r2, #1
 8013cd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8013cd4:	e003      	b.n	8013cde <HAL_TIM_IC_Stop_IT+0x172>
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	2201      	movs	r2, #1
 8013cda:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 8013cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	3710      	adds	r7, #16
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}

08013ce8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b086      	sub	sp, #24
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	60f8      	str	r0, [r7, #12]
 8013cf0:	60b9      	str	r1, [r7, #8]
 8013cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013cfe:	2b01      	cmp	r3, #1
 8013d00:	d101      	bne.n	8013d06 <HAL_TIM_OC_ConfigChannel+0x1e>
 8013d02:	2302      	movs	r3, #2
 8013d04:	e066      	b.n	8013dd4 <HAL_TIM_OC_ConfigChannel+0xec>
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	2201      	movs	r2, #1
 8013d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	2b14      	cmp	r3, #20
 8013d12:	d857      	bhi.n	8013dc4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8013d14:	a201      	add	r2, pc, #4	@ (adr r2, 8013d1c <HAL_TIM_OC_ConfigChannel+0x34>)
 8013d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d1a:	bf00      	nop
 8013d1c:	08013d71 	.word	0x08013d71
 8013d20:	08013dc5 	.word	0x08013dc5
 8013d24:	08013dc5 	.word	0x08013dc5
 8013d28:	08013dc5 	.word	0x08013dc5
 8013d2c:	08013d7f 	.word	0x08013d7f
 8013d30:	08013dc5 	.word	0x08013dc5
 8013d34:	08013dc5 	.word	0x08013dc5
 8013d38:	08013dc5 	.word	0x08013dc5
 8013d3c:	08013d8d 	.word	0x08013d8d
 8013d40:	08013dc5 	.word	0x08013dc5
 8013d44:	08013dc5 	.word	0x08013dc5
 8013d48:	08013dc5 	.word	0x08013dc5
 8013d4c:	08013d9b 	.word	0x08013d9b
 8013d50:	08013dc5 	.word	0x08013dc5
 8013d54:	08013dc5 	.word	0x08013dc5
 8013d58:	08013dc5 	.word	0x08013dc5
 8013d5c:	08013da9 	.word	0x08013da9
 8013d60:	08013dc5 	.word	0x08013dc5
 8013d64:	08013dc5 	.word	0x08013dc5
 8013d68:	08013dc5 	.word	0x08013dc5
 8013d6c:	08013db7 	.word	0x08013db7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	68b9      	ldr	r1, [r7, #8]
 8013d76:	4618      	mov	r0, r3
 8013d78:	f000 fb92 	bl	80144a0 <TIM_OC1_SetConfig>
      break;
 8013d7c:	e025      	b.n	8013dca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	68b9      	ldr	r1, [r7, #8]
 8013d84:	4618      	mov	r0, r3
 8013d86:	f000 fc1b 	bl	80145c0 <TIM_OC2_SetConfig>
      break;
 8013d8a:	e01e      	b.n	8013dca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	68b9      	ldr	r1, [r7, #8]
 8013d92:	4618      	mov	r0, r3
 8013d94:	f000 fc9e 	bl	80146d4 <TIM_OC3_SetConfig>
      break;
 8013d98:	e017      	b.n	8013dca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	68b9      	ldr	r1, [r7, #8]
 8013da0:	4618      	mov	r0, r3
 8013da2:	f000 fd1f 	bl	80147e4 <TIM_OC4_SetConfig>
      break;
 8013da6:	e010      	b.n	8013dca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	68b9      	ldr	r1, [r7, #8]
 8013dae:	4618      	mov	r0, r3
 8013db0:	f000 fd82 	bl	80148b8 <TIM_OC5_SetConfig>
      break;
 8013db4:	e009      	b.n	8013dca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	68b9      	ldr	r1, [r7, #8]
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	f000 fddf 	bl	8014980 <TIM_OC6_SetConfig>
      break;
 8013dc2:	e002      	b.n	8013dca <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8013dc4:	2301      	movs	r3, #1
 8013dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8013dc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	2200      	movs	r2, #0
 8013dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8013dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	3718      	adds	r7, #24
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	bd80      	pop	{r7, pc}

08013ddc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b086      	sub	sp, #24
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	60f8      	str	r0, [r7, #12]
 8013de4:	60b9      	str	r1, [r7, #8]
 8013de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013de8:	2300      	movs	r3, #0
 8013dea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013df2:	2b01      	cmp	r3, #1
 8013df4:	d101      	bne.n	8013dfa <HAL_TIM_IC_ConfigChannel+0x1e>
 8013df6:	2302      	movs	r3, #2
 8013df8:	e088      	b.n	8013f0c <HAL_TIM_IC_ConfigChannel+0x130>
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	2201      	movs	r2, #1
 8013dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d11b      	bne.n	8013e40 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8013e0c:	68bb      	ldr	r3, [r7, #8]
 8013e0e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8013e10:	68bb      	ldr	r3, [r7, #8]
 8013e12:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8013e14:	68bb      	ldr	r3, [r7, #8]
 8013e16:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8013e18:	f000 feac 	bl	8014b74 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	699a      	ldr	r2, [r3, #24]
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	f022 020c 	bic.w	r2, r2, #12
 8013e2a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	6999      	ldr	r1, [r3, #24]
 8013e32:	68bb      	ldr	r3, [r7, #8]
 8013e34:	689a      	ldr	r2, [r3, #8]
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	430a      	orrs	r2, r1
 8013e3c:	619a      	str	r2, [r3, #24]
 8013e3e:	e060      	b.n	8013f02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	2b04      	cmp	r3, #4
 8013e44:	d11c      	bne.n	8013e80 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8013e4a:	68bb      	ldr	r3, [r7, #8]
 8013e4c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8013e4e:	68bb      	ldr	r3, [r7, #8]
 8013e50:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8013e52:	68bb      	ldr	r3, [r7, #8]
 8013e54:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8013e56:	f000 ff2a 	bl	8014cae <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	699a      	ldr	r2, [r3, #24]
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8013e68:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	6999      	ldr	r1, [r3, #24]
 8013e70:	68bb      	ldr	r3, [r7, #8]
 8013e72:	689b      	ldr	r3, [r3, #8]
 8013e74:	021a      	lsls	r2, r3, #8
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	430a      	orrs	r2, r1
 8013e7c:	619a      	str	r2, [r3, #24]
 8013e7e:	e040      	b.n	8013f02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	2b08      	cmp	r3, #8
 8013e84:	d11b      	bne.n	8013ebe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8013e8a:	68bb      	ldr	r3, [r7, #8]
 8013e8c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8013e8e:	68bb      	ldr	r3, [r7, #8]
 8013e90:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8013e92:	68bb      	ldr	r3, [r7, #8]
 8013e94:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8013e96:	f000 ff77 	bl	8014d88 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	69da      	ldr	r2, [r3, #28]
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	f022 020c 	bic.w	r2, r2, #12
 8013ea8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	69d9      	ldr	r1, [r3, #28]
 8013eb0:	68bb      	ldr	r3, [r7, #8]
 8013eb2:	689a      	ldr	r2, [r3, #8]
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	430a      	orrs	r2, r1
 8013eba:	61da      	str	r2, [r3, #28]
 8013ebc:	e021      	b.n	8013f02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	2b0c      	cmp	r3, #12
 8013ec2:	d11c      	bne.n	8013efe <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8013ec8:	68bb      	ldr	r3, [r7, #8]
 8013eca:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8013ecc:	68bb      	ldr	r3, [r7, #8]
 8013ece:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8013ed0:	68bb      	ldr	r3, [r7, #8]
 8013ed2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8013ed4:	f000 ff94 	bl	8014e00 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	69da      	ldr	r2, [r3, #28]
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8013ee6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	69d9      	ldr	r1, [r3, #28]
 8013eee:	68bb      	ldr	r3, [r7, #8]
 8013ef0:	689b      	ldr	r3, [r3, #8]
 8013ef2:	021a      	lsls	r2, r3, #8
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	430a      	orrs	r2, r1
 8013efa:	61da      	str	r2, [r3, #28]
 8013efc:	e001      	b.n	8013f02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8013efe:	2301      	movs	r3, #1
 8013f00:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	2200      	movs	r2, #0
 8013f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8013f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	3718      	adds	r7, #24
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bd80      	pop	{r7, pc}

08013f14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b086      	sub	sp, #24
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	60f8      	str	r0, [r7, #12]
 8013f1c:	60b9      	str	r1, [r7, #8]
 8013f1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013f20:	2300      	movs	r3, #0
 8013f22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013f2a:	2b01      	cmp	r3, #1
 8013f2c:	d101      	bne.n	8013f32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8013f2e:	2302      	movs	r3, #2
 8013f30:	e0ff      	b.n	8014132 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	2201      	movs	r2, #1
 8013f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	2b14      	cmp	r3, #20
 8013f3e:	f200 80f0 	bhi.w	8014122 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8013f42:	a201      	add	r2, pc, #4	@ (adr r2, 8013f48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8013f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f48:	08013f9d 	.word	0x08013f9d
 8013f4c:	08014123 	.word	0x08014123
 8013f50:	08014123 	.word	0x08014123
 8013f54:	08014123 	.word	0x08014123
 8013f58:	08013fdd 	.word	0x08013fdd
 8013f5c:	08014123 	.word	0x08014123
 8013f60:	08014123 	.word	0x08014123
 8013f64:	08014123 	.word	0x08014123
 8013f68:	0801401f 	.word	0x0801401f
 8013f6c:	08014123 	.word	0x08014123
 8013f70:	08014123 	.word	0x08014123
 8013f74:	08014123 	.word	0x08014123
 8013f78:	0801405f 	.word	0x0801405f
 8013f7c:	08014123 	.word	0x08014123
 8013f80:	08014123 	.word	0x08014123
 8013f84:	08014123 	.word	0x08014123
 8013f88:	080140a1 	.word	0x080140a1
 8013f8c:	08014123 	.word	0x08014123
 8013f90:	08014123 	.word	0x08014123
 8013f94:	08014123 	.word	0x08014123
 8013f98:	080140e1 	.word	0x080140e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	68b9      	ldr	r1, [r7, #8]
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	f000 fa7c 	bl	80144a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	699a      	ldr	r2, [r3, #24]
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	f042 0208 	orr.w	r2, r2, #8
 8013fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	699a      	ldr	r2, [r3, #24]
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	f022 0204 	bic.w	r2, r2, #4
 8013fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	6999      	ldr	r1, [r3, #24]
 8013fce:	68bb      	ldr	r3, [r7, #8]
 8013fd0:	691a      	ldr	r2, [r3, #16]
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	430a      	orrs	r2, r1
 8013fd8:	619a      	str	r2, [r3, #24]
      break;
 8013fda:	e0a5      	b.n	8014128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	68b9      	ldr	r1, [r7, #8]
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	f000 faec 	bl	80145c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	699a      	ldr	r2, [r3, #24]
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8013ff6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	699a      	ldr	r2, [r3, #24]
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8014006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	6999      	ldr	r1, [r3, #24]
 801400e:	68bb      	ldr	r3, [r7, #8]
 8014010:	691b      	ldr	r3, [r3, #16]
 8014012:	021a      	lsls	r2, r3, #8
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	430a      	orrs	r2, r1
 801401a:	619a      	str	r2, [r3, #24]
      break;
 801401c:	e084      	b.n	8014128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	68b9      	ldr	r1, [r7, #8]
 8014024:	4618      	mov	r0, r3
 8014026:	f000 fb55 	bl	80146d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	69da      	ldr	r2, [r3, #28]
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	f042 0208 	orr.w	r2, r2, #8
 8014038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	69da      	ldr	r2, [r3, #28]
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	f022 0204 	bic.w	r2, r2, #4
 8014048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	69d9      	ldr	r1, [r3, #28]
 8014050:	68bb      	ldr	r3, [r7, #8]
 8014052:	691a      	ldr	r2, [r3, #16]
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	430a      	orrs	r2, r1
 801405a:	61da      	str	r2, [r3, #28]
      break;
 801405c:	e064      	b.n	8014128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	68b9      	ldr	r1, [r7, #8]
 8014064:	4618      	mov	r0, r3
 8014066:	f000 fbbd 	bl	80147e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	69da      	ldr	r2, [r3, #28]
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014078:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	69da      	ldr	r2, [r3, #28]
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8014088:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	69d9      	ldr	r1, [r3, #28]
 8014090:	68bb      	ldr	r3, [r7, #8]
 8014092:	691b      	ldr	r3, [r3, #16]
 8014094:	021a      	lsls	r2, r3, #8
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	430a      	orrs	r2, r1
 801409c:	61da      	str	r2, [r3, #28]
      break;
 801409e:	e043      	b.n	8014128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	68b9      	ldr	r1, [r7, #8]
 80140a6:	4618      	mov	r0, r3
 80140a8:	f000 fc06 	bl	80148b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	f042 0208 	orr.w	r2, r2, #8
 80140ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	f022 0204 	bic.w	r2, r2, #4
 80140ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80140d2:	68bb      	ldr	r3, [r7, #8]
 80140d4:	691a      	ldr	r2, [r3, #16]
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	430a      	orrs	r2, r1
 80140dc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80140de:	e023      	b.n	8014128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	68b9      	ldr	r1, [r7, #8]
 80140e6:	4618      	mov	r0, r3
 80140e8:	f000 fc4a 	bl	8014980 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80140fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801410a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8014112:	68bb      	ldr	r3, [r7, #8]
 8014114:	691b      	ldr	r3, [r3, #16]
 8014116:	021a      	lsls	r2, r3, #8
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	430a      	orrs	r2, r1
 801411e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8014120:	e002      	b.n	8014128 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8014122:	2301      	movs	r3, #1
 8014124:	75fb      	strb	r3, [r7, #23]
      break;
 8014126:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	2200      	movs	r2, #0
 801412c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8014130:	7dfb      	ldrb	r3, [r7, #23]
}
 8014132:	4618      	mov	r0, r3
 8014134:	3718      	adds	r7, #24
 8014136:	46bd      	mov	sp, r7
 8014138:	bd80      	pop	{r7, pc}
 801413a:	bf00      	nop

0801413c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b084      	sub	sp, #16
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
 8014144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014146:	2300      	movs	r3, #0
 8014148:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014150:	2b01      	cmp	r3, #1
 8014152:	d101      	bne.n	8014158 <HAL_TIM_ConfigClockSource+0x1c>
 8014154:	2302      	movs	r3, #2
 8014156:	e0b6      	b.n	80142c6 <HAL_TIM_ConfigClockSource+0x18a>
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	2201      	movs	r2, #1
 801415c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	2202      	movs	r2, #2
 8014164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	689b      	ldr	r3, [r3, #8]
 801416e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8014170:	68bb      	ldr	r3, [r7, #8]
 8014172:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8014176:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 801417a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801417c:	68bb      	ldr	r3, [r7, #8]
 801417e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8014182:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	68ba      	ldr	r2, [r7, #8]
 801418a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801418c:	683b      	ldr	r3, [r7, #0]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8014194:	d03e      	beq.n	8014214 <HAL_TIM_ConfigClockSource+0xd8>
 8014196:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801419a:	f200 8087 	bhi.w	80142ac <HAL_TIM_ConfigClockSource+0x170>
 801419e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80141a2:	f000 8086 	beq.w	80142b2 <HAL_TIM_ConfigClockSource+0x176>
 80141a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80141aa:	d87f      	bhi.n	80142ac <HAL_TIM_ConfigClockSource+0x170>
 80141ac:	2b70      	cmp	r3, #112	@ 0x70
 80141ae:	d01a      	beq.n	80141e6 <HAL_TIM_ConfigClockSource+0xaa>
 80141b0:	2b70      	cmp	r3, #112	@ 0x70
 80141b2:	d87b      	bhi.n	80142ac <HAL_TIM_ConfigClockSource+0x170>
 80141b4:	2b60      	cmp	r3, #96	@ 0x60
 80141b6:	d050      	beq.n	801425a <HAL_TIM_ConfigClockSource+0x11e>
 80141b8:	2b60      	cmp	r3, #96	@ 0x60
 80141ba:	d877      	bhi.n	80142ac <HAL_TIM_ConfigClockSource+0x170>
 80141bc:	2b50      	cmp	r3, #80	@ 0x50
 80141be:	d03c      	beq.n	801423a <HAL_TIM_ConfigClockSource+0xfe>
 80141c0:	2b50      	cmp	r3, #80	@ 0x50
 80141c2:	d873      	bhi.n	80142ac <HAL_TIM_ConfigClockSource+0x170>
 80141c4:	2b40      	cmp	r3, #64	@ 0x40
 80141c6:	d058      	beq.n	801427a <HAL_TIM_ConfigClockSource+0x13e>
 80141c8:	2b40      	cmp	r3, #64	@ 0x40
 80141ca:	d86f      	bhi.n	80142ac <HAL_TIM_ConfigClockSource+0x170>
 80141cc:	2b30      	cmp	r3, #48	@ 0x30
 80141ce:	d064      	beq.n	801429a <HAL_TIM_ConfigClockSource+0x15e>
 80141d0:	2b30      	cmp	r3, #48	@ 0x30
 80141d2:	d86b      	bhi.n	80142ac <HAL_TIM_ConfigClockSource+0x170>
 80141d4:	2b20      	cmp	r3, #32
 80141d6:	d060      	beq.n	801429a <HAL_TIM_ConfigClockSource+0x15e>
 80141d8:	2b20      	cmp	r3, #32
 80141da:	d867      	bhi.n	80142ac <HAL_TIM_ConfigClockSource+0x170>
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d05c      	beq.n	801429a <HAL_TIM_ConfigClockSource+0x15e>
 80141e0:	2b10      	cmp	r3, #16
 80141e2:	d05a      	beq.n	801429a <HAL_TIM_ConfigClockSource+0x15e>
 80141e4:	e062      	b.n	80142ac <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80141ea:	683b      	ldr	r3, [r7, #0]
 80141ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80141ee:	683b      	ldr	r3, [r7, #0]
 80141f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80141f2:	683b      	ldr	r3, [r7, #0]
 80141f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80141f6:	f000 fe5b 	bl	8014eb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	689b      	ldr	r3, [r3, #8]
 8014200:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8014202:	68bb      	ldr	r3, [r7, #8]
 8014204:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8014208:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	68ba      	ldr	r2, [r7, #8]
 8014210:	609a      	str	r2, [r3, #8]
      break;
 8014212:	e04f      	b.n	80142b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8014218:	683b      	ldr	r3, [r7, #0]
 801421a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801421c:	683b      	ldr	r3, [r7, #0]
 801421e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8014220:	683b      	ldr	r3, [r7, #0]
 8014222:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8014224:	f000 fe44 	bl	8014eb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	689a      	ldr	r2, [r3, #8]
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8014236:	609a      	str	r2, [r3, #8]
      break;
 8014238:	e03c      	b.n	80142b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801423e:	683b      	ldr	r3, [r7, #0]
 8014240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8014242:	683b      	ldr	r3, [r7, #0]
 8014244:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014246:	461a      	mov	r2, r3
 8014248:	f000 fd02 	bl	8014c50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	2150      	movs	r1, #80	@ 0x50
 8014252:	4618      	mov	r0, r3
 8014254:	f000 fe11 	bl	8014e7a <TIM_ITRx_SetConfig>
      break;
 8014258:	e02c      	b.n	80142b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801425e:	683b      	ldr	r3, [r7, #0]
 8014260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8014262:	683b      	ldr	r3, [r7, #0]
 8014264:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8014266:	461a      	mov	r2, r3
 8014268:	f000 fd5e 	bl	8014d28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	2160      	movs	r1, #96	@ 0x60
 8014272:	4618      	mov	r0, r3
 8014274:	f000 fe01 	bl	8014e7a <TIM_ITRx_SetConfig>
      break;
 8014278:	e01c      	b.n	80142b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801427e:	683b      	ldr	r3, [r7, #0]
 8014280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8014282:	683b      	ldr	r3, [r7, #0]
 8014284:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014286:	461a      	mov	r2, r3
 8014288:	f000 fce2 	bl	8014c50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	2140      	movs	r1, #64	@ 0x40
 8014292:	4618      	mov	r0, r3
 8014294:	f000 fdf1 	bl	8014e7a <TIM_ITRx_SetConfig>
      break;
 8014298:	e00c      	b.n	80142b4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	681a      	ldr	r2, [r3, #0]
 801429e:	683b      	ldr	r3, [r7, #0]
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	4619      	mov	r1, r3
 80142a4:	4610      	mov	r0, r2
 80142a6:	f000 fde8 	bl	8014e7a <TIM_ITRx_SetConfig>
      break;
 80142aa:	e003      	b.n	80142b4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80142ac:	2301      	movs	r3, #1
 80142ae:	73fb      	strb	r3, [r7, #15]
      break;
 80142b0:	e000      	b.n	80142b4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80142b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2201      	movs	r2, #1
 80142b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	2200      	movs	r2, #0
 80142c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80142c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80142c6:	4618      	mov	r0, r3
 80142c8:	3710      	adds	r7, #16
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bd80      	pop	{r7, pc}

080142ce <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80142ce:	b580      	push	{r7, lr}
 80142d0:	b082      	sub	sp, #8
 80142d2:	af00      	add	r7, sp, #0
 80142d4:	6078      	str	r0, [r7, #4]
 80142d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80142de:	2b01      	cmp	r3, #1
 80142e0:	d101      	bne.n	80142e6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80142e2:	2302      	movs	r3, #2
 80142e4:	e031      	b.n	801434a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	2201      	movs	r2, #1
 80142ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	2202      	movs	r2, #2
 80142f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80142f6:	6839      	ldr	r1, [r7, #0]
 80142f8:	6878      	ldr	r0, [r7, #4]
 80142fa:	f000 fba7 	bl	8014a4c <TIM_SlaveTimer_SetConfig>
 80142fe:	4603      	mov	r3, r0
 8014300:	2b00      	cmp	r3, #0
 8014302:	d009      	beq.n	8014318 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	2201      	movs	r2, #1
 8014308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	2200      	movs	r2, #0
 8014310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8014314:	2301      	movs	r3, #1
 8014316:	e018      	b.n	801434a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	68da      	ldr	r2, [r3, #12]
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8014326:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	68da      	ldr	r2, [r3, #12]
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8014336:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	2201      	movs	r2, #1
 801433c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	2200      	movs	r2, #0
 8014344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8014348:	2300      	movs	r3, #0
}
 801434a:	4618      	mov	r0, r3
 801434c:	3708      	adds	r7, #8
 801434e:	46bd      	mov	sp, r7
 8014350:	bd80      	pop	{r7, pc}
	...

08014354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8014354:	b480      	push	{r7}
 8014356:	b085      	sub	sp, #20
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
 801435c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	4a46      	ldr	r2, [pc, #280]	@ (8014480 <TIM_Base_SetConfig+0x12c>)
 8014368:	4293      	cmp	r3, r2
 801436a:	d013      	beq.n	8014394 <TIM_Base_SetConfig+0x40>
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014372:	d00f      	beq.n	8014394 <TIM_Base_SetConfig+0x40>
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	4a43      	ldr	r2, [pc, #268]	@ (8014484 <TIM_Base_SetConfig+0x130>)
 8014378:	4293      	cmp	r3, r2
 801437a:	d00b      	beq.n	8014394 <TIM_Base_SetConfig+0x40>
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	4a42      	ldr	r2, [pc, #264]	@ (8014488 <TIM_Base_SetConfig+0x134>)
 8014380:	4293      	cmp	r3, r2
 8014382:	d007      	beq.n	8014394 <TIM_Base_SetConfig+0x40>
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	4a41      	ldr	r2, [pc, #260]	@ (801448c <TIM_Base_SetConfig+0x138>)
 8014388:	4293      	cmp	r3, r2
 801438a:	d003      	beq.n	8014394 <TIM_Base_SetConfig+0x40>
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	4a40      	ldr	r2, [pc, #256]	@ (8014490 <TIM_Base_SetConfig+0x13c>)
 8014390:	4293      	cmp	r3, r2
 8014392:	d108      	bne.n	80143a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801439a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801439c:	683b      	ldr	r3, [r7, #0]
 801439e:	685b      	ldr	r3, [r3, #4]
 80143a0:	68fa      	ldr	r2, [r7, #12]
 80143a2:	4313      	orrs	r3, r2
 80143a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	4a35      	ldr	r2, [pc, #212]	@ (8014480 <TIM_Base_SetConfig+0x12c>)
 80143aa:	4293      	cmp	r3, r2
 80143ac:	d01f      	beq.n	80143ee <TIM_Base_SetConfig+0x9a>
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80143b4:	d01b      	beq.n	80143ee <TIM_Base_SetConfig+0x9a>
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	4a32      	ldr	r2, [pc, #200]	@ (8014484 <TIM_Base_SetConfig+0x130>)
 80143ba:	4293      	cmp	r3, r2
 80143bc:	d017      	beq.n	80143ee <TIM_Base_SetConfig+0x9a>
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	4a31      	ldr	r2, [pc, #196]	@ (8014488 <TIM_Base_SetConfig+0x134>)
 80143c2:	4293      	cmp	r3, r2
 80143c4:	d013      	beq.n	80143ee <TIM_Base_SetConfig+0x9a>
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	4a30      	ldr	r2, [pc, #192]	@ (801448c <TIM_Base_SetConfig+0x138>)
 80143ca:	4293      	cmp	r3, r2
 80143cc:	d00f      	beq.n	80143ee <TIM_Base_SetConfig+0x9a>
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	4a2f      	ldr	r2, [pc, #188]	@ (8014490 <TIM_Base_SetConfig+0x13c>)
 80143d2:	4293      	cmp	r3, r2
 80143d4:	d00b      	beq.n	80143ee <TIM_Base_SetConfig+0x9a>
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	4a2e      	ldr	r2, [pc, #184]	@ (8014494 <TIM_Base_SetConfig+0x140>)
 80143da:	4293      	cmp	r3, r2
 80143dc:	d007      	beq.n	80143ee <TIM_Base_SetConfig+0x9a>
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	4a2d      	ldr	r2, [pc, #180]	@ (8014498 <TIM_Base_SetConfig+0x144>)
 80143e2:	4293      	cmp	r3, r2
 80143e4:	d003      	beq.n	80143ee <TIM_Base_SetConfig+0x9a>
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	4a2c      	ldr	r2, [pc, #176]	@ (801449c <TIM_Base_SetConfig+0x148>)
 80143ea:	4293      	cmp	r3, r2
 80143ec:	d108      	bne.n	8014400 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80143f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80143f6:	683b      	ldr	r3, [r7, #0]
 80143f8:	68db      	ldr	r3, [r3, #12]
 80143fa:	68fa      	ldr	r2, [r7, #12]
 80143fc:	4313      	orrs	r3, r2
 80143fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8014406:	683b      	ldr	r3, [r7, #0]
 8014408:	695b      	ldr	r3, [r3, #20]
 801440a:	4313      	orrs	r3, r2
 801440c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	68fa      	ldr	r2, [r7, #12]
 8014412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014414:	683b      	ldr	r3, [r7, #0]
 8014416:	689a      	ldr	r2, [r3, #8]
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801441c:	683b      	ldr	r3, [r7, #0]
 801441e:	681a      	ldr	r2, [r3, #0]
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	4a16      	ldr	r2, [pc, #88]	@ (8014480 <TIM_Base_SetConfig+0x12c>)
 8014428:	4293      	cmp	r3, r2
 801442a:	d00f      	beq.n	801444c <TIM_Base_SetConfig+0xf8>
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	4a18      	ldr	r2, [pc, #96]	@ (8014490 <TIM_Base_SetConfig+0x13c>)
 8014430:	4293      	cmp	r3, r2
 8014432:	d00b      	beq.n	801444c <TIM_Base_SetConfig+0xf8>
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	4a17      	ldr	r2, [pc, #92]	@ (8014494 <TIM_Base_SetConfig+0x140>)
 8014438:	4293      	cmp	r3, r2
 801443a:	d007      	beq.n	801444c <TIM_Base_SetConfig+0xf8>
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	4a16      	ldr	r2, [pc, #88]	@ (8014498 <TIM_Base_SetConfig+0x144>)
 8014440:	4293      	cmp	r3, r2
 8014442:	d003      	beq.n	801444c <TIM_Base_SetConfig+0xf8>
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	4a15      	ldr	r2, [pc, #84]	@ (801449c <TIM_Base_SetConfig+0x148>)
 8014448:	4293      	cmp	r3, r2
 801444a:	d103      	bne.n	8014454 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801444c:	683b      	ldr	r3, [r7, #0]
 801444e:	691a      	ldr	r2, [r3, #16]
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	2201      	movs	r2, #1
 8014458:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	691b      	ldr	r3, [r3, #16]
 801445e:	f003 0301 	and.w	r3, r3, #1
 8014462:	2b01      	cmp	r3, #1
 8014464:	d105      	bne.n	8014472 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	691b      	ldr	r3, [r3, #16]
 801446a:	f023 0201 	bic.w	r2, r3, #1
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	611a      	str	r2, [r3, #16]
  }
}
 8014472:	bf00      	nop
 8014474:	3714      	adds	r7, #20
 8014476:	46bd      	mov	sp, r7
 8014478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447c:	4770      	bx	lr
 801447e:	bf00      	nop
 8014480:	40012c00 	.word	0x40012c00
 8014484:	40000400 	.word	0x40000400
 8014488:	40000800 	.word	0x40000800
 801448c:	40000c00 	.word	0x40000c00
 8014490:	40013400 	.word	0x40013400
 8014494:	40014000 	.word	0x40014000
 8014498:	40014400 	.word	0x40014400
 801449c:	40014800 	.word	0x40014800

080144a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80144a0:	b480      	push	{r7}
 80144a2:	b087      	sub	sp, #28
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
 80144a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	6a1b      	ldr	r3, [r3, #32]
 80144ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	6a1b      	ldr	r3, [r3, #32]
 80144b4:	f023 0201 	bic.w	r2, r3, #1
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	685b      	ldr	r3, [r3, #4]
 80144c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	699b      	ldr	r3, [r3, #24]
 80144c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80144ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80144d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	f023 0303 	bic.w	r3, r3, #3
 80144da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80144dc:	683b      	ldr	r3, [r7, #0]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	68fa      	ldr	r2, [r7, #12]
 80144e2:	4313      	orrs	r3, r2
 80144e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80144e6:	697b      	ldr	r3, [r7, #20]
 80144e8:	f023 0302 	bic.w	r3, r3, #2
 80144ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80144ee:	683b      	ldr	r3, [r7, #0]
 80144f0:	689b      	ldr	r3, [r3, #8]
 80144f2:	697a      	ldr	r2, [r7, #20]
 80144f4:	4313      	orrs	r3, r2
 80144f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	4a2c      	ldr	r2, [pc, #176]	@ (80145ac <TIM_OC1_SetConfig+0x10c>)
 80144fc:	4293      	cmp	r3, r2
 80144fe:	d00f      	beq.n	8014520 <TIM_OC1_SetConfig+0x80>
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	4a2b      	ldr	r2, [pc, #172]	@ (80145b0 <TIM_OC1_SetConfig+0x110>)
 8014504:	4293      	cmp	r3, r2
 8014506:	d00b      	beq.n	8014520 <TIM_OC1_SetConfig+0x80>
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	4a2a      	ldr	r2, [pc, #168]	@ (80145b4 <TIM_OC1_SetConfig+0x114>)
 801450c:	4293      	cmp	r3, r2
 801450e:	d007      	beq.n	8014520 <TIM_OC1_SetConfig+0x80>
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	4a29      	ldr	r2, [pc, #164]	@ (80145b8 <TIM_OC1_SetConfig+0x118>)
 8014514:	4293      	cmp	r3, r2
 8014516:	d003      	beq.n	8014520 <TIM_OC1_SetConfig+0x80>
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	4a28      	ldr	r2, [pc, #160]	@ (80145bc <TIM_OC1_SetConfig+0x11c>)
 801451c:	4293      	cmp	r3, r2
 801451e:	d10c      	bne.n	801453a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014520:	697b      	ldr	r3, [r7, #20]
 8014522:	f023 0308 	bic.w	r3, r3, #8
 8014526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014528:	683b      	ldr	r3, [r7, #0]
 801452a:	68db      	ldr	r3, [r3, #12]
 801452c:	697a      	ldr	r2, [r7, #20]
 801452e:	4313      	orrs	r3, r2
 8014530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8014532:	697b      	ldr	r3, [r7, #20]
 8014534:	f023 0304 	bic.w	r3, r3, #4
 8014538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	4a1b      	ldr	r2, [pc, #108]	@ (80145ac <TIM_OC1_SetConfig+0x10c>)
 801453e:	4293      	cmp	r3, r2
 8014540:	d00f      	beq.n	8014562 <TIM_OC1_SetConfig+0xc2>
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	4a1a      	ldr	r2, [pc, #104]	@ (80145b0 <TIM_OC1_SetConfig+0x110>)
 8014546:	4293      	cmp	r3, r2
 8014548:	d00b      	beq.n	8014562 <TIM_OC1_SetConfig+0xc2>
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	4a19      	ldr	r2, [pc, #100]	@ (80145b4 <TIM_OC1_SetConfig+0x114>)
 801454e:	4293      	cmp	r3, r2
 8014550:	d007      	beq.n	8014562 <TIM_OC1_SetConfig+0xc2>
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	4a18      	ldr	r2, [pc, #96]	@ (80145b8 <TIM_OC1_SetConfig+0x118>)
 8014556:	4293      	cmp	r3, r2
 8014558:	d003      	beq.n	8014562 <TIM_OC1_SetConfig+0xc2>
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	4a17      	ldr	r2, [pc, #92]	@ (80145bc <TIM_OC1_SetConfig+0x11c>)
 801455e:	4293      	cmp	r3, r2
 8014560:	d111      	bne.n	8014586 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014562:	693b      	ldr	r3, [r7, #16]
 8014564:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801456a:	693b      	ldr	r3, [r7, #16]
 801456c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8014570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014572:	683b      	ldr	r3, [r7, #0]
 8014574:	695b      	ldr	r3, [r3, #20]
 8014576:	693a      	ldr	r2, [r7, #16]
 8014578:	4313      	orrs	r3, r2
 801457a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801457c:	683b      	ldr	r3, [r7, #0]
 801457e:	699b      	ldr	r3, [r3, #24]
 8014580:	693a      	ldr	r2, [r7, #16]
 8014582:	4313      	orrs	r3, r2
 8014584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	693a      	ldr	r2, [r7, #16]
 801458a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	68fa      	ldr	r2, [r7, #12]
 8014590:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014592:	683b      	ldr	r3, [r7, #0]
 8014594:	685a      	ldr	r2, [r3, #4]
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	697a      	ldr	r2, [r7, #20]
 801459e:	621a      	str	r2, [r3, #32]
}
 80145a0:	bf00      	nop
 80145a2:	371c      	adds	r7, #28
 80145a4:	46bd      	mov	sp, r7
 80145a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145aa:	4770      	bx	lr
 80145ac:	40012c00 	.word	0x40012c00
 80145b0:	40013400 	.word	0x40013400
 80145b4:	40014000 	.word	0x40014000
 80145b8:	40014400 	.word	0x40014400
 80145bc:	40014800 	.word	0x40014800

080145c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80145c0:	b480      	push	{r7}
 80145c2:	b087      	sub	sp, #28
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
 80145c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	6a1b      	ldr	r3, [r3, #32]
 80145ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	6a1b      	ldr	r3, [r3, #32]
 80145d4:	f023 0210 	bic.w	r2, r3, #16
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	685b      	ldr	r3, [r3, #4]
 80145e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	699b      	ldr	r3, [r3, #24]
 80145e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80145ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80145f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80145fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80145fc:	683b      	ldr	r3, [r7, #0]
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	021b      	lsls	r3, r3, #8
 8014602:	68fa      	ldr	r2, [r7, #12]
 8014604:	4313      	orrs	r3, r2
 8014606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014608:	697b      	ldr	r3, [r7, #20]
 801460a:	f023 0320 	bic.w	r3, r3, #32
 801460e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014610:	683b      	ldr	r3, [r7, #0]
 8014612:	689b      	ldr	r3, [r3, #8]
 8014614:	011b      	lsls	r3, r3, #4
 8014616:	697a      	ldr	r2, [r7, #20]
 8014618:	4313      	orrs	r3, r2
 801461a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	4a28      	ldr	r2, [pc, #160]	@ (80146c0 <TIM_OC2_SetConfig+0x100>)
 8014620:	4293      	cmp	r3, r2
 8014622:	d003      	beq.n	801462c <TIM_OC2_SetConfig+0x6c>
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	4a27      	ldr	r2, [pc, #156]	@ (80146c4 <TIM_OC2_SetConfig+0x104>)
 8014628:	4293      	cmp	r3, r2
 801462a:	d10d      	bne.n	8014648 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801462c:	697b      	ldr	r3, [r7, #20]
 801462e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014634:	683b      	ldr	r3, [r7, #0]
 8014636:	68db      	ldr	r3, [r3, #12]
 8014638:	011b      	lsls	r3, r3, #4
 801463a:	697a      	ldr	r2, [r7, #20]
 801463c:	4313      	orrs	r3, r2
 801463e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014640:	697b      	ldr	r3, [r7, #20]
 8014642:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014646:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	4a1d      	ldr	r2, [pc, #116]	@ (80146c0 <TIM_OC2_SetConfig+0x100>)
 801464c:	4293      	cmp	r3, r2
 801464e:	d00f      	beq.n	8014670 <TIM_OC2_SetConfig+0xb0>
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	4a1c      	ldr	r2, [pc, #112]	@ (80146c4 <TIM_OC2_SetConfig+0x104>)
 8014654:	4293      	cmp	r3, r2
 8014656:	d00b      	beq.n	8014670 <TIM_OC2_SetConfig+0xb0>
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	4a1b      	ldr	r2, [pc, #108]	@ (80146c8 <TIM_OC2_SetConfig+0x108>)
 801465c:	4293      	cmp	r3, r2
 801465e:	d007      	beq.n	8014670 <TIM_OC2_SetConfig+0xb0>
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	4a1a      	ldr	r2, [pc, #104]	@ (80146cc <TIM_OC2_SetConfig+0x10c>)
 8014664:	4293      	cmp	r3, r2
 8014666:	d003      	beq.n	8014670 <TIM_OC2_SetConfig+0xb0>
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	4a19      	ldr	r2, [pc, #100]	@ (80146d0 <TIM_OC2_SetConfig+0x110>)
 801466c:	4293      	cmp	r3, r2
 801466e:	d113      	bne.n	8014698 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014670:	693b      	ldr	r3, [r7, #16]
 8014672:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8014676:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014678:	693b      	ldr	r3, [r7, #16]
 801467a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801467e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014680:	683b      	ldr	r3, [r7, #0]
 8014682:	695b      	ldr	r3, [r3, #20]
 8014684:	009b      	lsls	r3, r3, #2
 8014686:	693a      	ldr	r2, [r7, #16]
 8014688:	4313      	orrs	r3, r2
 801468a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	699b      	ldr	r3, [r3, #24]
 8014690:	009b      	lsls	r3, r3, #2
 8014692:	693a      	ldr	r2, [r7, #16]
 8014694:	4313      	orrs	r3, r2
 8014696:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	693a      	ldr	r2, [r7, #16]
 801469c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	68fa      	ldr	r2, [r7, #12]
 80146a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80146a4:	683b      	ldr	r3, [r7, #0]
 80146a6:	685a      	ldr	r2, [r3, #4]
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	697a      	ldr	r2, [r7, #20]
 80146b0:	621a      	str	r2, [r3, #32]
}
 80146b2:	bf00      	nop
 80146b4:	371c      	adds	r7, #28
 80146b6:	46bd      	mov	sp, r7
 80146b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146bc:	4770      	bx	lr
 80146be:	bf00      	nop
 80146c0:	40012c00 	.word	0x40012c00
 80146c4:	40013400 	.word	0x40013400
 80146c8:	40014000 	.word	0x40014000
 80146cc:	40014400 	.word	0x40014400
 80146d0:	40014800 	.word	0x40014800

080146d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80146d4:	b480      	push	{r7}
 80146d6:	b087      	sub	sp, #28
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
 80146dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	6a1b      	ldr	r3, [r3, #32]
 80146e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	6a1b      	ldr	r3, [r3, #32]
 80146e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	685b      	ldr	r3, [r3, #4]
 80146f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	69db      	ldr	r3, [r3, #28]
 80146fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8014702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	f023 0303 	bic.w	r3, r3, #3
 801470e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014710:	683b      	ldr	r3, [r7, #0]
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	68fa      	ldr	r2, [r7, #12]
 8014716:	4313      	orrs	r3, r2
 8014718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801471a:	697b      	ldr	r3, [r7, #20]
 801471c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8014720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014722:	683b      	ldr	r3, [r7, #0]
 8014724:	689b      	ldr	r3, [r3, #8]
 8014726:	021b      	lsls	r3, r3, #8
 8014728:	697a      	ldr	r2, [r7, #20]
 801472a:	4313      	orrs	r3, r2
 801472c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	4a27      	ldr	r2, [pc, #156]	@ (80147d0 <TIM_OC3_SetConfig+0xfc>)
 8014732:	4293      	cmp	r3, r2
 8014734:	d003      	beq.n	801473e <TIM_OC3_SetConfig+0x6a>
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	4a26      	ldr	r2, [pc, #152]	@ (80147d4 <TIM_OC3_SetConfig+0x100>)
 801473a:	4293      	cmp	r3, r2
 801473c:	d10d      	bne.n	801475a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801473e:	697b      	ldr	r3, [r7, #20]
 8014740:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8014744:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014746:	683b      	ldr	r3, [r7, #0]
 8014748:	68db      	ldr	r3, [r3, #12]
 801474a:	021b      	lsls	r3, r3, #8
 801474c:	697a      	ldr	r2, [r7, #20]
 801474e:	4313      	orrs	r3, r2
 8014750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8014752:	697b      	ldr	r3, [r7, #20]
 8014754:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8014758:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	4a1c      	ldr	r2, [pc, #112]	@ (80147d0 <TIM_OC3_SetConfig+0xfc>)
 801475e:	4293      	cmp	r3, r2
 8014760:	d00f      	beq.n	8014782 <TIM_OC3_SetConfig+0xae>
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	4a1b      	ldr	r2, [pc, #108]	@ (80147d4 <TIM_OC3_SetConfig+0x100>)
 8014766:	4293      	cmp	r3, r2
 8014768:	d00b      	beq.n	8014782 <TIM_OC3_SetConfig+0xae>
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	4a1a      	ldr	r2, [pc, #104]	@ (80147d8 <TIM_OC3_SetConfig+0x104>)
 801476e:	4293      	cmp	r3, r2
 8014770:	d007      	beq.n	8014782 <TIM_OC3_SetConfig+0xae>
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	4a19      	ldr	r2, [pc, #100]	@ (80147dc <TIM_OC3_SetConfig+0x108>)
 8014776:	4293      	cmp	r3, r2
 8014778:	d003      	beq.n	8014782 <TIM_OC3_SetConfig+0xae>
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	4a18      	ldr	r2, [pc, #96]	@ (80147e0 <TIM_OC3_SetConfig+0x10c>)
 801477e:	4293      	cmp	r3, r2
 8014780:	d113      	bne.n	80147aa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8014782:	693b      	ldr	r3, [r7, #16]
 8014784:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801478a:	693b      	ldr	r3, [r7, #16]
 801478c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8014790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8014792:	683b      	ldr	r3, [r7, #0]
 8014794:	695b      	ldr	r3, [r3, #20]
 8014796:	011b      	lsls	r3, r3, #4
 8014798:	693a      	ldr	r2, [r7, #16]
 801479a:	4313      	orrs	r3, r2
 801479c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801479e:	683b      	ldr	r3, [r7, #0]
 80147a0:	699b      	ldr	r3, [r3, #24]
 80147a2:	011b      	lsls	r3, r3, #4
 80147a4:	693a      	ldr	r2, [r7, #16]
 80147a6:	4313      	orrs	r3, r2
 80147a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	693a      	ldr	r2, [r7, #16]
 80147ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	68fa      	ldr	r2, [r7, #12]
 80147b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80147b6:	683b      	ldr	r3, [r7, #0]
 80147b8:	685a      	ldr	r2, [r3, #4]
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	697a      	ldr	r2, [r7, #20]
 80147c2:	621a      	str	r2, [r3, #32]
}
 80147c4:	bf00      	nop
 80147c6:	371c      	adds	r7, #28
 80147c8:	46bd      	mov	sp, r7
 80147ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ce:	4770      	bx	lr
 80147d0:	40012c00 	.word	0x40012c00
 80147d4:	40013400 	.word	0x40013400
 80147d8:	40014000 	.word	0x40014000
 80147dc:	40014400 	.word	0x40014400
 80147e0:	40014800 	.word	0x40014800

080147e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80147e4:	b480      	push	{r7}
 80147e6:	b087      	sub	sp, #28
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
 80147ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	6a1b      	ldr	r3, [r3, #32]
 80147f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	6a1b      	ldr	r3, [r3, #32]
 80147f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	685b      	ldr	r3, [r3, #4]
 8014804:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	69db      	ldr	r3, [r3, #28]
 801480a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8014812:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8014816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801481e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014820:	683b      	ldr	r3, [r7, #0]
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	021b      	lsls	r3, r3, #8
 8014826:	68fa      	ldr	r2, [r7, #12]
 8014828:	4313      	orrs	r3, r2
 801482a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801482c:	693b      	ldr	r3, [r7, #16]
 801482e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8014832:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	689b      	ldr	r3, [r3, #8]
 8014838:	031b      	lsls	r3, r3, #12
 801483a:	693a      	ldr	r2, [r7, #16]
 801483c:	4313      	orrs	r3, r2
 801483e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	4a18      	ldr	r2, [pc, #96]	@ (80148a4 <TIM_OC4_SetConfig+0xc0>)
 8014844:	4293      	cmp	r3, r2
 8014846:	d00f      	beq.n	8014868 <TIM_OC4_SetConfig+0x84>
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	4a17      	ldr	r2, [pc, #92]	@ (80148a8 <TIM_OC4_SetConfig+0xc4>)
 801484c:	4293      	cmp	r3, r2
 801484e:	d00b      	beq.n	8014868 <TIM_OC4_SetConfig+0x84>
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	4a16      	ldr	r2, [pc, #88]	@ (80148ac <TIM_OC4_SetConfig+0xc8>)
 8014854:	4293      	cmp	r3, r2
 8014856:	d007      	beq.n	8014868 <TIM_OC4_SetConfig+0x84>
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	4a15      	ldr	r2, [pc, #84]	@ (80148b0 <TIM_OC4_SetConfig+0xcc>)
 801485c:	4293      	cmp	r3, r2
 801485e:	d003      	beq.n	8014868 <TIM_OC4_SetConfig+0x84>
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	4a14      	ldr	r2, [pc, #80]	@ (80148b4 <TIM_OC4_SetConfig+0xd0>)
 8014864:	4293      	cmp	r3, r2
 8014866:	d109      	bne.n	801487c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014868:	697b      	ldr	r3, [r7, #20]
 801486a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801486e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014870:	683b      	ldr	r3, [r7, #0]
 8014872:	695b      	ldr	r3, [r3, #20]
 8014874:	019b      	lsls	r3, r3, #6
 8014876:	697a      	ldr	r2, [r7, #20]
 8014878:	4313      	orrs	r3, r2
 801487a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	697a      	ldr	r2, [r7, #20]
 8014880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	68fa      	ldr	r2, [r7, #12]
 8014886:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014888:	683b      	ldr	r3, [r7, #0]
 801488a:	685a      	ldr	r2, [r3, #4]
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	693a      	ldr	r2, [r7, #16]
 8014894:	621a      	str	r2, [r3, #32]
}
 8014896:	bf00      	nop
 8014898:	371c      	adds	r7, #28
 801489a:	46bd      	mov	sp, r7
 801489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a0:	4770      	bx	lr
 80148a2:	bf00      	nop
 80148a4:	40012c00 	.word	0x40012c00
 80148a8:	40013400 	.word	0x40013400
 80148ac:	40014000 	.word	0x40014000
 80148b0:	40014400 	.word	0x40014400
 80148b4:	40014800 	.word	0x40014800

080148b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80148b8:	b480      	push	{r7}
 80148ba:	b087      	sub	sp, #28
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
 80148c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	6a1b      	ldr	r3, [r3, #32]
 80148c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	6a1b      	ldr	r3, [r3, #32]
 80148cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	685b      	ldr	r3, [r3, #4]
 80148d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80148de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80148e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80148ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80148ec:	683b      	ldr	r3, [r7, #0]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	68fa      	ldr	r2, [r7, #12]
 80148f2:	4313      	orrs	r3, r2
 80148f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80148f6:	693b      	ldr	r3, [r7, #16]
 80148f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80148fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80148fe:	683b      	ldr	r3, [r7, #0]
 8014900:	689b      	ldr	r3, [r3, #8]
 8014902:	041b      	lsls	r3, r3, #16
 8014904:	693a      	ldr	r2, [r7, #16]
 8014906:	4313      	orrs	r3, r2
 8014908:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	4a17      	ldr	r2, [pc, #92]	@ (801496c <TIM_OC5_SetConfig+0xb4>)
 801490e:	4293      	cmp	r3, r2
 8014910:	d00f      	beq.n	8014932 <TIM_OC5_SetConfig+0x7a>
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	4a16      	ldr	r2, [pc, #88]	@ (8014970 <TIM_OC5_SetConfig+0xb8>)
 8014916:	4293      	cmp	r3, r2
 8014918:	d00b      	beq.n	8014932 <TIM_OC5_SetConfig+0x7a>
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	4a15      	ldr	r2, [pc, #84]	@ (8014974 <TIM_OC5_SetConfig+0xbc>)
 801491e:	4293      	cmp	r3, r2
 8014920:	d007      	beq.n	8014932 <TIM_OC5_SetConfig+0x7a>
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	4a14      	ldr	r2, [pc, #80]	@ (8014978 <TIM_OC5_SetConfig+0xc0>)
 8014926:	4293      	cmp	r3, r2
 8014928:	d003      	beq.n	8014932 <TIM_OC5_SetConfig+0x7a>
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	4a13      	ldr	r2, [pc, #76]	@ (801497c <TIM_OC5_SetConfig+0xc4>)
 801492e:	4293      	cmp	r3, r2
 8014930:	d109      	bne.n	8014946 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8014932:	697b      	ldr	r3, [r7, #20]
 8014934:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8014938:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801493a:	683b      	ldr	r3, [r7, #0]
 801493c:	695b      	ldr	r3, [r3, #20]
 801493e:	021b      	lsls	r3, r3, #8
 8014940:	697a      	ldr	r2, [r7, #20]
 8014942:	4313      	orrs	r3, r2
 8014944:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	697a      	ldr	r2, [r7, #20]
 801494a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	68fa      	ldr	r2, [r7, #12]
 8014950:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8014952:	683b      	ldr	r3, [r7, #0]
 8014954:	685a      	ldr	r2, [r3, #4]
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	693a      	ldr	r2, [r7, #16]
 801495e:	621a      	str	r2, [r3, #32]
}
 8014960:	bf00      	nop
 8014962:	371c      	adds	r7, #28
 8014964:	46bd      	mov	sp, r7
 8014966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801496a:	4770      	bx	lr
 801496c:	40012c00 	.word	0x40012c00
 8014970:	40013400 	.word	0x40013400
 8014974:	40014000 	.word	0x40014000
 8014978:	40014400 	.word	0x40014400
 801497c:	40014800 	.word	0x40014800

08014980 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8014980:	b480      	push	{r7}
 8014982:	b087      	sub	sp, #28
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
 8014988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	6a1b      	ldr	r3, [r3, #32]
 801498e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	6a1b      	ldr	r3, [r3, #32]
 8014994:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	685b      	ldr	r3, [r3, #4]
 80149a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80149a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80149ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80149b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80149b4:	683b      	ldr	r3, [r7, #0]
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	021b      	lsls	r3, r3, #8
 80149ba:	68fa      	ldr	r2, [r7, #12]
 80149bc:	4313      	orrs	r3, r2
 80149be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80149c0:	693b      	ldr	r3, [r7, #16]
 80149c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80149c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80149c8:	683b      	ldr	r3, [r7, #0]
 80149ca:	689b      	ldr	r3, [r3, #8]
 80149cc:	051b      	lsls	r3, r3, #20
 80149ce:	693a      	ldr	r2, [r7, #16]
 80149d0:	4313      	orrs	r3, r2
 80149d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	4a18      	ldr	r2, [pc, #96]	@ (8014a38 <TIM_OC6_SetConfig+0xb8>)
 80149d8:	4293      	cmp	r3, r2
 80149da:	d00f      	beq.n	80149fc <TIM_OC6_SetConfig+0x7c>
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	4a17      	ldr	r2, [pc, #92]	@ (8014a3c <TIM_OC6_SetConfig+0xbc>)
 80149e0:	4293      	cmp	r3, r2
 80149e2:	d00b      	beq.n	80149fc <TIM_OC6_SetConfig+0x7c>
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	4a16      	ldr	r2, [pc, #88]	@ (8014a40 <TIM_OC6_SetConfig+0xc0>)
 80149e8:	4293      	cmp	r3, r2
 80149ea:	d007      	beq.n	80149fc <TIM_OC6_SetConfig+0x7c>
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	4a15      	ldr	r2, [pc, #84]	@ (8014a44 <TIM_OC6_SetConfig+0xc4>)
 80149f0:	4293      	cmp	r3, r2
 80149f2:	d003      	beq.n	80149fc <TIM_OC6_SetConfig+0x7c>
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	4a14      	ldr	r2, [pc, #80]	@ (8014a48 <TIM_OC6_SetConfig+0xc8>)
 80149f8:	4293      	cmp	r3, r2
 80149fa:	d109      	bne.n	8014a10 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80149fc:	697b      	ldr	r3, [r7, #20]
 80149fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8014a02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8014a04:	683b      	ldr	r3, [r7, #0]
 8014a06:	695b      	ldr	r3, [r3, #20]
 8014a08:	029b      	lsls	r3, r3, #10
 8014a0a:	697a      	ldr	r2, [r7, #20]
 8014a0c:	4313      	orrs	r3, r2
 8014a0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	697a      	ldr	r2, [r7, #20]
 8014a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	68fa      	ldr	r2, [r7, #12]
 8014a1a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8014a1c:	683b      	ldr	r3, [r7, #0]
 8014a1e:	685a      	ldr	r2, [r3, #4]
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	693a      	ldr	r2, [r7, #16]
 8014a28:	621a      	str	r2, [r3, #32]
}
 8014a2a:	bf00      	nop
 8014a2c:	371c      	adds	r7, #28
 8014a2e:	46bd      	mov	sp, r7
 8014a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a34:	4770      	bx	lr
 8014a36:	bf00      	nop
 8014a38:	40012c00 	.word	0x40012c00
 8014a3c:	40013400 	.word	0x40013400
 8014a40:	40014000 	.word	0x40014000
 8014a44:	40014400 	.word	0x40014400
 8014a48:	40014800 	.word	0x40014800

08014a4c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b086      	sub	sp, #24
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	6078      	str	r0, [r7, #4]
 8014a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014a56:	2300      	movs	r3, #0
 8014a58:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	689b      	ldr	r3, [r3, #8]
 8014a60:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014a62:	693b      	ldr	r3, [r7, #16]
 8014a64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014a68:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8014a6a:	683b      	ldr	r3, [r7, #0]
 8014a6c:	685b      	ldr	r3, [r3, #4]
 8014a6e:	693a      	ldr	r2, [r7, #16]
 8014a70:	4313      	orrs	r3, r2
 8014a72:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8014a74:	693b      	ldr	r3, [r7, #16]
 8014a76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8014a7a:	f023 0307 	bic.w	r3, r3, #7
 8014a7e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8014a80:	683b      	ldr	r3, [r7, #0]
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	693a      	ldr	r2, [r7, #16]
 8014a86:	4313      	orrs	r3, r2
 8014a88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	693a      	ldr	r2, [r7, #16]
 8014a90:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8014a92:	683b      	ldr	r3, [r7, #0]
 8014a94:	685b      	ldr	r3, [r3, #4]
 8014a96:	2b70      	cmp	r3, #112	@ 0x70
 8014a98:	d01a      	beq.n	8014ad0 <TIM_SlaveTimer_SetConfig+0x84>
 8014a9a:	2b70      	cmp	r3, #112	@ 0x70
 8014a9c:	d860      	bhi.n	8014b60 <TIM_SlaveTimer_SetConfig+0x114>
 8014a9e:	2b60      	cmp	r3, #96	@ 0x60
 8014aa0:	d054      	beq.n	8014b4c <TIM_SlaveTimer_SetConfig+0x100>
 8014aa2:	2b60      	cmp	r3, #96	@ 0x60
 8014aa4:	d85c      	bhi.n	8014b60 <TIM_SlaveTimer_SetConfig+0x114>
 8014aa6:	2b50      	cmp	r3, #80	@ 0x50
 8014aa8:	d046      	beq.n	8014b38 <TIM_SlaveTimer_SetConfig+0xec>
 8014aaa:	2b50      	cmp	r3, #80	@ 0x50
 8014aac:	d858      	bhi.n	8014b60 <TIM_SlaveTimer_SetConfig+0x114>
 8014aae:	2b40      	cmp	r3, #64	@ 0x40
 8014ab0:	d019      	beq.n	8014ae6 <TIM_SlaveTimer_SetConfig+0x9a>
 8014ab2:	2b40      	cmp	r3, #64	@ 0x40
 8014ab4:	d854      	bhi.n	8014b60 <TIM_SlaveTimer_SetConfig+0x114>
 8014ab6:	2b30      	cmp	r3, #48	@ 0x30
 8014ab8:	d055      	beq.n	8014b66 <TIM_SlaveTimer_SetConfig+0x11a>
 8014aba:	2b30      	cmp	r3, #48	@ 0x30
 8014abc:	d850      	bhi.n	8014b60 <TIM_SlaveTimer_SetConfig+0x114>
 8014abe:	2b20      	cmp	r3, #32
 8014ac0:	d051      	beq.n	8014b66 <TIM_SlaveTimer_SetConfig+0x11a>
 8014ac2:	2b20      	cmp	r3, #32
 8014ac4:	d84c      	bhi.n	8014b60 <TIM_SlaveTimer_SetConfig+0x114>
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d04d      	beq.n	8014b66 <TIM_SlaveTimer_SetConfig+0x11a>
 8014aca:	2b10      	cmp	r3, #16
 8014acc:	d04b      	beq.n	8014b66 <TIM_SlaveTimer_SetConfig+0x11a>
 8014ace:	e047      	b.n	8014b60 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8014ad4:	683b      	ldr	r3, [r7, #0]
 8014ad6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8014ad8:	683b      	ldr	r3, [r7, #0]
 8014ada:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8014adc:	683b      	ldr	r3, [r7, #0]
 8014ade:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8014ae0:	f000 f9e6 	bl	8014eb0 <TIM_ETR_SetConfig>
      break;
 8014ae4:	e040      	b.n	8014b68 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8014ae6:	683b      	ldr	r3, [r7, #0]
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	2b05      	cmp	r3, #5
 8014aec:	d101      	bne.n	8014af2 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8014aee:	2301      	movs	r3, #1
 8014af0:	e03b      	b.n	8014b6a <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	6a1b      	ldr	r3, [r3, #32]
 8014af8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	6a1a      	ldr	r2, [r3, #32]
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	f022 0201 	bic.w	r2, r2, #1
 8014b08:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	699b      	ldr	r3, [r3, #24]
 8014b10:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014b12:	68bb      	ldr	r3, [r7, #8]
 8014b14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8014b18:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8014b1a:	683b      	ldr	r3, [r7, #0]
 8014b1c:	691b      	ldr	r3, [r3, #16]
 8014b1e:	011b      	lsls	r3, r3, #4
 8014b20:	68ba      	ldr	r2, [r7, #8]
 8014b22:	4313      	orrs	r3, r2
 8014b24:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	68ba      	ldr	r2, [r7, #8]
 8014b2c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	68fa      	ldr	r2, [r7, #12]
 8014b34:	621a      	str	r2, [r3, #32]
      break;
 8014b36:	e017      	b.n	8014b68 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8014b3c:	683b      	ldr	r3, [r7, #0]
 8014b3e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8014b40:	683b      	ldr	r3, [r7, #0]
 8014b42:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014b44:	461a      	mov	r2, r3
 8014b46:	f000 f883 	bl	8014c50 <TIM_TI1_ConfigInputStage>
      break;
 8014b4a:	e00d      	b.n	8014b68 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8014b50:	683b      	ldr	r3, [r7, #0]
 8014b52:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8014b54:	683b      	ldr	r3, [r7, #0]
 8014b56:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8014b58:	461a      	mov	r2, r3
 8014b5a:	f000 f8e5 	bl	8014d28 <TIM_TI2_ConfigInputStage>
      break;
 8014b5e:	e003      	b.n	8014b68 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8014b60:	2301      	movs	r3, #1
 8014b62:	75fb      	strb	r3, [r7, #23]
      break;
 8014b64:	e000      	b.n	8014b68 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8014b66:	bf00      	nop
  }

  return status;
 8014b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	3718      	adds	r7, #24
 8014b6e:	46bd      	mov	sp, r7
 8014b70:	bd80      	pop	{r7, pc}
	...

08014b74 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8014b74:	b480      	push	{r7}
 8014b76:	b087      	sub	sp, #28
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	60f8      	str	r0, [r7, #12]
 8014b7c:	60b9      	str	r1, [r7, #8]
 8014b7e:	607a      	str	r2, [r7, #4]
 8014b80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	6a1b      	ldr	r3, [r3, #32]
 8014b86:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	6a1b      	ldr	r3, [r3, #32]
 8014b8c:	f023 0201 	bic.w	r2, r3, #1
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	699b      	ldr	r3, [r3, #24]
 8014b98:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	4a26      	ldr	r2, [pc, #152]	@ (8014c38 <TIM_TI1_SetConfig+0xc4>)
 8014b9e:	4293      	cmp	r3, r2
 8014ba0:	d017      	beq.n	8014bd2 <TIM_TI1_SetConfig+0x5e>
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014ba8:	d013      	beq.n	8014bd2 <TIM_TI1_SetConfig+0x5e>
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	4a23      	ldr	r2, [pc, #140]	@ (8014c3c <TIM_TI1_SetConfig+0xc8>)
 8014bae:	4293      	cmp	r3, r2
 8014bb0:	d00f      	beq.n	8014bd2 <TIM_TI1_SetConfig+0x5e>
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	4a22      	ldr	r2, [pc, #136]	@ (8014c40 <TIM_TI1_SetConfig+0xcc>)
 8014bb6:	4293      	cmp	r3, r2
 8014bb8:	d00b      	beq.n	8014bd2 <TIM_TI1_SetConfig+0x5e>
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	4a21      	ldr	r2, [pc, #132]	@ (8014c44 <TIM_TI1_SetConfig+0xd0>)
 8014bbe:	4293      	cmp	r3, r2
 8014bc0:	d007      	beq.n	8014bd2 <TIM_TI1_SetConfig+0x5e>
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	4a20      	ldr	r2, [pc, #128]	@ (8014c48 <TIM_TI1_SetConfig+0xd4>)
 8014bc6:	4293      	cmp	r3, r2
 8014bc8:	d003      	beq.n	8014bd2 <TIM_TI1_SetConfig+0x5e>
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8014c4c <TIM_TI1_SetConfig+0xd8>)
 8014bce:	4293      	cmp	r3, r2
 8014bd0:	d101      	bne.n	8014bd6 <TIM_TI1_SetConfig+0x62>
 8014bd2:	2301      	movs	r3, #1
 8014bd4:	e000      	b.n	8014bd8 <TIM_TI1_SetConfig+0x64>
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d008      	beq.n	8014bee <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8014bdc:	697b      	ldr	r3, [r7, #20]
 8014bde:	f023 0303 	bic.w	r3, r3, #3
 8014be2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8014be4:	697a      	ldr	r2, [r7, #20]
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	4313      	orrs	r3, r2
 8014bea:	617b      	str	r3, [r7, #20]
 8014bec:	e003      	b.n	8014bf6 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8014bee:	697b      	ldr	r3, [r7, #20]
 8014bf0:	f043 0301 	orr.w	r3, r3, #1
 8014bf4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014bf6:	697b      	ldr	r3, [r7, #20]
 8014bf8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8014bfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8014bfe:	683b      	ldr	r3, [r7, #0]
 8014c00:	011b      	lsls	r3, r3, #4
 8014c02:	b2db      	uxtb	r3, r3
 8014c04:	697a      	ldr	r2, [r7, #20]
 8014c06:	4313      	orrs	r3, r2
 8014c08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014c0a:	693b      	ldr	r3, [r7, #16]
 8014c0c:	f023 030a 	bic.w	r3, r3, #10
 8014c10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8014c12:	68bb      	ldr	r3, [r7, #8]
 8014c14:	f003 030a 	and.w	r3, r3, #10
 8014c18:	693a      	ldr	r2, [r7, #16]
 8014c1a:	4313      	orrs	r3, r2
 8014c1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	697a      	ldr	r2, [r7, #20]
 8014c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	693a      	ldr	r2, [r7, #16]
 8014c28:	621a      	str	r2, [r3, #32]
}
 8014c2a:	bf00      	nop
 8014c2c:	371c      	adds	r7, #28
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c34:	4770      	bx	lr
 8014c36:	bf00      	nop
 8014c38:	40012c00 	.word	0x40012c00
 8014c3c:	40000400 	.word	0x40000400
 8014c40:	40000800 	.word	0x40000800
 8014c44:	40000c00 	.word	0x40000c00
 8014c48:	40013400 	.word	0x40013400
 8014c4c:	40014000 	.word	0x40014000

08014c50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014c50:	b480      	push	{r7}
 8014c52:	b087      	sub	sp, #28
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	60f8      	str	r0, [r7, #12]
 8014c58:	60b9      	str	r1, [r7, #8]
 8014c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	6a1b      	ldr	r3, [r3, #32]
 8014c60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	6a1b      	ldr	r3, [r3, #32]
 8014c66:	f023 0201 	bic.w	r2, r3, #1
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	699b      	ldr	r3, [r3, #24]
 8014c72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014c74:	693b      	ldr	r3, [r7, #16]
 8014c76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8014c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	011b      	lsls	r3, r3, #4
 8014c80:	693a      	ldr	r2, [r7, #16]
 8014c82:	4313      	orrs	r3, r2
 8014c84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014c86:	697b      	ldr	r3, [r7, #20]
 8014c88:	f023 030a 	bic.w	r3, r3, #10
 8014c8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8014c8e:	697a      	ldr	r2, [r7, #20]
 8014c90:	68bb      	ldr	r3, [r7, #8]
 8014c92:	4313      	orrs	r3, r2
 8014c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	693a      	ldr	r2, [r7, #16]
 8014c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	697a      	ldr	r2, [r7, #20]
 8014ca0:	621a      	str	r2, [r3, #32]
}
 8014ca2:	bf00      	nop
 8014ca4:	371c      	adds	r7, #28
 8014ca6:	46bd      	mov	sp, r7
 8014ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cac:	4770      	bx	lr

08014cae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8014cae:	b480      	push	{r7}
 8014cb0:	b087      	sub	sp, #28
 8014cb2:	af00      	add	r7, sp, #0
 8014cb4:	60f8      	str	r0, [r7, #12]
 8014cb6:	60b9      	str	r1, [r7, #8]
 8014cb8:	607a      	str	r2, [r7, #4]
 8014cba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	6a1b      	ldr	r3, [r3, #32]
 8014cc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	6a1b      	ldr	r3, [r3, #32]
 8014cc6:	f023 0210 	bic.w	r2, r3, #16
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	699b      	ldr	r3, [r3, #24]
 8014cd2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8014cd4:	693b      	ldr	r3, [r7, #16]
 8014cd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	021b      	lsls	r3, r3, #8
 8014ce0:	693a      	ldr	r2, [r7, #16]
 8014ce2:	4313      	orrs	r3, r2
 8014ce4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014ce6:	693b      	ldr	r3, [r7, #16]
 8014ce8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8014cec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8014cee:	683b      	ldr	r3, [r7, #0]
 8014cf0:	031b      	lsls	r3, r3, #12
 8014cf2:	b29b      	uxth	r3, r3
 8014cf4:	693a      	ldr	r2, [r7, #16]
 8014cf6:	4313      	orrs	r3, r2
 8014cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014cfa:	697b      	ldr	r3, [r7, #20]
 8014cfc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8014d00:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8014d02:	68bb      	ldr	r3, [r7, #8]
 8014d04:	011b      	lsls	r3, r3, #4
 8014d06:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8014d0a:	697a      	ldr	r2, [r7, #20]
 8014d0c:	4313      	orrs	r3, r2
 8014d0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	693a      	ldr	r2, [r7, #16]
 8014d14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	697a      	ldr	r2, [r7, #20]
 8014d1a:	621a      	str	r2, [r3, #32]
}
 8014d1c:	bf00      	nop
 8014d1e:	371c      	adds	r7, #28
 8014d20:	46bd      	mov	sp, r7
 8014d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d26:	4770      	bx	lr

08014d28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014d28:	b480      	push	{r7}
 8014d2a:	b087      	sub	sp, #28
 8014d2c:	af00      	add	r7, sp, #0
 8014d2e:	60f8      	str	r0, [r7, #12]
 8014d30:	60b9      	str	r1, [r7, #8]
 8014d32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	6a1b      	ldr	r3, [r3, #32]
 8014d38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	6a1b      	ldr	r3, [r3, #32]
 8014d3e:	f023 0210 	bic.w	r2, r3, #16
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	699b      	ldr	r3, [r3, #24]
 8014d4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014d4c:	693b      	ldr	r3, [r7, #16]
 8014d4e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8014d52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	031b      	lsls	r3, r3, #12
 8014d58:	693a      	ldr	r2, [r7, #16]
 8014d5a:	4313      	orrs	r3, r2
 8014d5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014d5e:	697b      	ldr	r3, [r7, #20]
 8014d60:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8014d64:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8014d66:	68bb      	ldr	r3, [r7, #8]
 8014d68:	011b      	lsls	r3, r3, #4
 8014d6a:	697a      	ldr	r2, [r7, #20]
 8014d6c:	4313      	orrs	r3, r2
 8014d6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	693a      	ldr	r2, [r7, #16]
 8014d74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	697a      	ldr	r2, [r7, #20]
 8014d7a:	621a      	str	r2, [r3, #32]
}
 8014d7c:	bf00      	nop
 8014d7e:	371c      	adds	r7, #28
 8014d80:	46bd      	mov	sp, r7
 8014d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d86:	4770      	bx	lr

08014d88 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8014d88:	b480      	push	{r7}
 8014d8a:	b087      	sub	sp, #28
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	60f8      	str	r0, [r7, #12]
 8014d90:	60b9      	str	r1, [r7, #8]
 8014d92:	607a      	str	r2, [r7, #4]
 8014d94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	6a1b      	ldr	r3, [r3, #32]
 8014d9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	6a1b      	ldr	r3, [r3, #32]
 8014da0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	69db      	ldr	r3, [r3, #28]
 8014dac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8014dae:	693b      	ldr	r3, [r7, #16]
 8014db0:	f023 0303 	bic.w	r3, r3, #3
 8014db4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8014db6:	693a      	ldr	r2, [r7, #16]
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	4313      	orrs	r3, r2
 8014dbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8014dbe:	693b      	ldr	r3, [r7, #16]
 8014dc0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8014dc4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8014dc6:	683b      	ldr	r3, [r7, #0]
 8014dc8:	011b      	lsls	r3, r3, #4
 8014dca:	b2db      	uxtb	r3, r3
 8014dcc:	693a      	ldr	r2, [r7, #16]
 8014dce:	4313      	orrs	r3, r2
 8014dd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8014dd2:	697b      	ldr	r3, [r7, #20]
 8014dd4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8014dd8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8014dda:	68bb      	ldr	r3, [r7, #8]
 8014ddc:	021b      	lsls	r3, r3, #8
 8014dde:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8014de2:	697a      	ldr	r2, [r7, #20]
 8014de4:	4313      	orrs	r3, r2
 8014de6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	693a      	ldr	r2, [r7, #16]
 8014dec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	697a      	ldr	r2, [r7, #20]
 8014df2:	621a      	str	r2, [r3, #32]
}
 8014df4:	bf00      	nop
 8014df6:	371c      	adds	r7, #28
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfe:	4770      	bx	lr

08014e00 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8014e00:	b480      	push	{r7}
 8014e02:	b087      	sub	sp, #28
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	60f8      	str	r0, [r7, #12]
 8014e08:	60b9      	str	r1, [r7, #8]
 8014e0a:	607a      	str	r2, [r7, #4]
 8014e0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	6a1b      	ldr	r3, [r3, #32]
 8014e12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	6a1b      	ldr	r3, [r3, #32]
 8014e18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	69db      	ldr	r3, [r3, #28]
 8014e24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8014e26:	693b      	ldr	r3, [r7, #16]
 8014e28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014e2c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	021b      	lsls	r3, r3, #8
 8014e32:	693a      	ldr	r2, [r7, #16]
 8014e34:	4313      	orrs	r3, r2
 8014e36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8014e38:	693b      	ldr	r3, [r7, #16]
 8014e3a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8014e3e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8014e40:	683b      	ldr	r3, [r7, #0]
 8014e42:	031b      	lsls	r3, r3, #12
 8014e44:	b29b      	uxth	r3, r3
 8014e46:	693a      	ldr	r2, [r7, #16]
 8014e48:	4313      	orrs	r3, r2
 8014e4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8014e4c:	697b      	ldr	r3, [r7, #20]
 8014e4e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8014e52:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8014e54:	68bb      	ldr	r3, [r7, #8]
 8014e56:	031b      	lsls	r3, r3, #12
 8014e58:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8014e5c:	697a      	ldr	r2, [r7, #20]
 8014e5e:	4313      	orrs	r3, r2
 8014e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	693a      	ldr	r2, [r7, #16]
 8014e66:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	697a      	ldr	r2, [r7, #20]
 8014e6c:	621a      	str	r2, [r3, #32]
}
 8014e6e:	bf00      	nop
 8014e70:	371c      	adds	r7, #28
 8014e72:	46bd      	mov	sp, r7
 8014e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e78:	4770      	bx	lr

08014e7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8014e7a:	b480      	push	{r7}
 8014e7c:	b085      	sub	sp, #20
 8014e7e:	af00      	add	r7, sp, #0
 8014e80:	6078      	str	r0, [r7, #4]
 8014e82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	689b      	ldr	r3, [r3, #8]
 8014e88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014e90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8014e92:	683a      	ldr	r2, [r7, #0]
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	4313      	orrs	r3, r2
 8014e98:	f043 0307 	orr.w	r3, r3, #7
 8014e9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	68fa      	ldr	r2, [r7, #12]
 8014ea2:	609a      	str	r2, [r3, #8]
}
 8014ea4:	bf00      	nop
 8014ea6:	3714      	adds	r7, #20
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eae:	4770      	bx	lr

08014eb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8014eb0:	b480      	push	{r7}
 8014eb2:	b087      	sub	sp, #28
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	60f8      	str	r0, [r7, #12]
 8014eb8:	60b9      	str	r1, [r7, #8]
 8014eba:	607a      	str	r2, [r7, #4]
 8014ebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	689b      	ldr	r3, [r3, #8]
 8014ec2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014ec4:	697b      	ldr	r3, [r7, #20]
 8014ec6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8014eca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8014ecc:	683b      	ldr	r3, [r7, #0]
 8014ece:	021a      	lsls	r2, r3, #8
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	431a      	orrs	r2, r3
 8014ed4:	68bb      	ldr	r3, [r7, #8]
 8014ed6:	4313      	orrs	r3, r2
 8014ed8:	697a      	ldr	r2, [r7, #20]
 8014eda:	4313      	orrs	r3, r2
 8014edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	697a      	ldr	r2, [r7, #20]
 8014ee2:	609a      	str	r2, [r3, #8]
}
 8014ee4:	bf00      	nop
 8014ee6:	371c      	adds	r7, #28
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eee:	4770      	bx	lr

08014ef0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8014ef0:	b480      	push	{r7}
 8014ef2:	b087      	sub	sp, #28
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	60f8      	str	r0, [r7, #12]
 8014ef8:	60b9      	str	r1, [r7, #8]
 8014efa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8014efc:	68bb      	ldr	r3, [r7, #8]
 8014efe:	f003 031f 	and.w	r3, r3, #31
 8014f02:	2201      	movs	r2, #1
 8014f04:	fa02 f303 	lsl.w	r3, r2, r3
 8014f08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	6a1a      	ldr	r2, [r3, #32]
 8014f0e:	697b      	ldr	r3, [r7, #20]
 8014f10:	43db      	mvns	r3, r3
 8014f12:	401a      	ands	r2, r3
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	6a1a      	ldr	r2, [r3, #32]
 8014f1c:	68bb      	ldr	r3, [r7, #8]
 8014f1e:	f003 031f 	and.w	r3, r3, #31
 8014f22:	6879      	ldr	r1, [r7, #4]
 8014f24:	fa01 f303 	lsl.w	r3, r1, r3
 8014f28:	431a      	orrs	r2, r3
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	621a      	str	r2, [r3, #32]
}
 8014f2e:	bf00      	nop
 8014f30:	371c      	adds	r7, #28
 8014f32:	46bd      	mov	sp, r7
 8014f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f38:	4770      	bx	lr
	...

08014f3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8014f3c:	b480      	push	{r7}
 8014f3e:	b085      	sub	sp, #20
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
 8014f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014f4c:	2b01      	cmp	r3, #1
 8014f4e:	d101      	bne.n	8014f54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014f50:	2302      	movs	r3, #2
 8014f52:	e068      	b.n	8015026 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	2201      	movs	r2, #1
 8014f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	2202      	movs	r2, #2
 8014f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	685b      	ldr	r3, [r3, #4]
 8014f6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	689b      	ldr	r3, [r3, #8]
 8014f72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	4a2e      	ldr	r2, [pc, #184]	@ (8015034 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8014f7a:	4293      	cmp	r3, r2
 8014f7c:	d004      	beq.n	8014f88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	4a2d      	ldr	r2, [pc, #180]	@ (8015038 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8014f84:	4293      	cmp	r3, r2
 8014f86:	d108      	bne.n	8014f9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8014f8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8014f90:	683b      	ldr	r3, [r7, #0]
 8014f92:	685b      	ldr	r3, [r3, #4]
 8014f94:	68fa      	ldr	r2, [r7, #12]
 8014f96:	4313      	orrs	r3, r2
 8014f98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014fa0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014fa2:	683b      	ldr	r3, [r7, #0]
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	68fa      	ldr	r2, [r7, #12]
 8014fa8:	4313      	orrs	r3, r2
 8014faa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	68fa      	ldr	r2, [r7, #12]
 8014fb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	4a1e      	ldr	r2, [pc, #120]	@ (8015034 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8014fba:	4293      	cmp	r3, r2
 8014fbc:	d01d      	beq.n	8014ffa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014fc6:	d018      	beq.n	8014ffa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	4a1b      	ldr	r2, [pc, #108]	@ (801503c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8014fce:	4293      	cmp	r3, r2
 8014fd0:	d013      	beq.n	8014ffa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	4a1a      	ldr	r2, [pc, #104]	@ (8015040 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8014fd8:	4293      	cmp	r3, r2
 8014fda:	d00e      	beq.n	8014ffa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	4a18      	ldr	r2, [pc, #96]	@ (8015044 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8014fe2:	4293      	cmp	r3, r2
 8014fe4:	d009      	beq.n	8014ffa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	4a13      	ldr	r2, [pc, #76]	@ (8015038 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8014fec:	4293      	cmp	r3, r2
 8014fee:	d004      	beq.n	8014ffa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	4a14      	ldr	r2, [pc, #80]	@ (8015048 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8014ff6:	4293      	cmp	r3, r2
 8014ff8:	d10c      	bne.n	8015014 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8014ffa:	68bb      	ldr	r3, [r7, #8]
 8014ffc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015000:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8015002:	683b      	ldr	r3, [r7, #0]
 8015004:	689b      	ldr	r3, [r3, #8]
 8015006:	68ba      	ldr	r2, [r7, #8]
 8015008:	4313      	orrs	r3, r2
 801500a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	68ba      	ldr	r2, [r7, #8]
 8015012:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	2201      	movs	r2, #1
 8015018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	2200      	movs	r2, #0
 8015020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8015024:	2300      	movs	r3, #0
}
 8015026:	4618      	mov	r0, r3
 8015028:	3714      	adds	r7, #20
 801502a:	46bd      	mov	sp, r7
 801502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015030:	4770      	bx	lr
 8015032:	bf00      	nop
 8015034:	40012c00 	.word	0x40012c00
 8015038:	40013400 	.word	0x40013400
 801503c:	40000400 	.word	0x40000400
 8015040:	40000800 	.word	0x40000800
 8015044:	40000c00 	.word	0x40000c00
 8015048:	40014000 	.word	0x40014000

0801504c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801504c:	b480      	push	{r7}
 801504e:	b085      	sub	sp, #20
 8015050:	af00      	add	r7, sp, #0
 8015052:	6078      	str	r0, [r7, #4]
 8015054:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8015056:	2300      	movs	r3, #0
 8015058:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8015060:	2b01      	cmp	r3, #1
 8015062:	d101      	bne.n	8015068 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8015064:	2302      	movs	r3, #2
 8015066:	e065      	b.n	8015134 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	2201      	movs	r2, #1
 801506c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8015076:	683b      	ldr	r3, [r7, #0]
 8015078:	68db      	ldr	r3, [r3, #12]
 801507a:	4313      	orrs	r3, r2
 801507c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8015084:	683b      	ldr	r3, [r7, #0]
 8015086:	689b      	ldr	r3, [r3, #8]
 8015088:	4313      	orrs	r3, r2
 801508a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8015092:	683b      	ldr	r3, [r7, #0]
 8015094:	685b      	ldr	r3, [r3, #4]
 8015096:	4313      	orrs	r3, r2
 8015098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80150a0:	683b      	ldr	r3, [r7, #0]
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	4313      	orrs	r3, r2
 80150a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80150ae:	683b      	ldr	r3, [r7, #0]
 80150b0:	691b      	ldr	r3, [r3, #16]
 80150b2:	4313      	orrs	r3, r2
 80150b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80150bc:	683b      	ldr	r3, [r7, #0]
 80150be:	695b      	ldr	r3, [r3, #20]
 80150c0:	4313      	orrs	r3, r2
 80150c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80150ca:	683b      	ldr	r3, [r7, #0]
 80150cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80150ce:	4313      	orrs	r3, r2
 80150d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80150d8:	683b      	ldr	r3, [r7, #0]
 80150da:	699b      	ldr	r3, [r3, #24]
 80150dc:	041b      	lsls	r3, r3, #16
 80150de:	4313      	orrs	r3, r2
 80150e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	4a16      	ldr	r2, [pc, #88]	@ (8015140 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80150e8:	4293      	cmp	r3, r2
 80150ea:	d004      	beq.n	80150f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	4a14      	ldr	r2, [pc, #80]	@ (8015144 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80150f2:	4293      	cmp	r3, r2
 80150f4:	d115      	bne.n	8015122 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80150fc:	683b      	ldr	r3, [r7, #0]
 80150fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015100:	051b      	lsls	r3, r3, #20
 8015102:	4313      	orrs	r3, r2
 8015104:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 801510c:	683b      	ldr	r3, [r7, #0]
 801510e:	69db      	ldr	r3, [r3, #28]
 8015110:	4313      	orrs	r3, r2
 8015112:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801511a:	683b      	ldr	r3, [r7, #0]
 801511c:	6a1b      	ldr	r3, [r3, #32]
 801511e:	4313      	orrs	r3, r2
 8015120:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	68fa      	ldr	r2, [r7, #12]
 8015128:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	2200      	movs	r2, #0
 801512e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8015132:	2300      	movs	r3, #0
}
 8015134:	4618      	mov	r0, r3
 8015136:	3714      	adds	r7, #20
 8015138:	46bd      	mov	sp, r7
 801513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801513e:	4770      	bx	lr
 8015140:	40012c00 	.word	0x40012c00
 8015144:	40013400 	.word	0x40013400

08015148 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b082      	sub	sp, #8
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d101      	bne.n	801515a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015156:	2301      	movs	r3, #1
 8015158:	e040      	b.n	80151dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801515e:	2b00      	cmp	r3, #0
 8015160:	d106      	bne.n	8015170 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	2200      	movs	r2, #0
 8015166:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801516a:	6878      	ldr	r0, [r7, #4]
 801516c:	f7f3 f8b0 	bl	80082d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	2224      	movs	r2, #36	@ 0x24
 8015174:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	681a      	ldr	r2, [r3, #0]
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	f022 0201 	bic.w	r2, r2, #1
 8015184:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801518a:	2b00      	cmp	r3, #0
 801518c:	d002      	beq.n	8015194 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 801518e:	6878      	ldr	r0, [r7, #4]
 8015190:	f000 fdb4 	bl	8015cfc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8015194:	6878      	ldr	r0, [r7, #4]
 8015196:	f000 faf9 	bl	801578c <UART_SetConfig>
 801519a:	4603      	mov	r3, r0
 801519c:	2b01      	cmp	r3, #1
 801519e:	d101      	bne.n	80151a4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80151a0:	2301      	movs	r3, #1
 80151a2:	e01b      	b.n	80151dc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	685a      	ldr	r2, [r3, #4]
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80151b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	689a      	ldr	r2, [r3, #8]
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80151c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	681a      	ldr	r2, [r3, #0]
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	f042 0201 	orr.w	r2, r2, #1
 80151d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80151d4:	6878      	ldr	r0, [r7, #4]
 80151d6:	f000 fe33 	bl	8015e40 <UART_CheckIdleState>
 80151da:	4603      	mov	r3, r0
}
 80151dc:	4618      	mov	r0, r3
 80151de:	3708      	adds	r7, #8
 80151e0:	46bd      	mov	sp, r7
 80151e2:	bd80      	pop	{r7, pc}

080151e4 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b082      	sub	sp, #8
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d101      	bne.n	80151f6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80151f2:	2301      	movs	r3, #1
 80151f4:	e048      	b.n	8015288 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d106      	bne.n	801520c <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	2200      	movs	r2, #0
 8015202:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015206:	6878      	ldr	r0, [r7, #4]
 8015208:	f7f3 f862 	bl	80082d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	2224      	movs	r2, #36	@ 0x24
 8015210:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	681a      	ldr	r2, [r3, #0]
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	f022 0201 	bic.w	r2, r2, #1
 8015220:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015226:	2b00      	cmp	r3, #0
 8015228:	d002      	beq.n	8015230 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 801522a:	6878      	ldr	r0, [r7, #4]
 801522c:	f000 fd66 	bl	8015cfc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8015230:	6878      	ldr	r0, [r7, #4]
 8015232:	f000 faab 	bl	801578c <UART_SetConfig>
 8015236:	4603      	mov	r3, r0
 8015238:	2b01      	cmp	r3, #1
 801523a:	d101      	bne.n	8015240 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 801523c:	2301      	movs	r3, #1
 801523e:	e023      	b.n	8015288 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	685a      	ldr	r2, [r3, #4]
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801524e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	689a      	ldr	r2, [r3, #8]
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 801525e:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	689a      	ldr	r2, [r3, #8]
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	f042 0208 	orr.w	r2, r2, #8
 801526e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	681a      	ldr	r2, [r3, #0]
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	f042 0201 	orr.w	r2, r2, #1
 801527e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8015280:	6878      	ldr	r0, [r7, #4]
 8015282:	f000 fddd 	bl	8015e40 <UART_CheckIdleState>
 8015286:	4603      	mov	r3, r0
}
 8015288:	4618      	mov	r0, r3
 801528a:	3708      	adds	r7, #8
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}

08015290 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b08a      	sub	sp, #40	@ 0x28
 8015294:	af02      	add	r7, sp, #8
 8015296:	60f8      	str	r0, [r7, #12]
 8015298:	60b9      	str	r1, [r7, #8]
 801529a:	603b      	str	r3, [r7, #0]
 801529c:	4613      	mov	r3, r2
 801529e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80152a4:	2b20      	cmp	r3, #32
 80152a6:	d177      	bne.n	8015398 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80152a8:	68bb      	ldr	r3, [r7, #8]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d002      	beq.n	80152b4 <HAL_UART_Transmit+0x24>
 80152ae:	88fb      	ldrh	r3, [r7, #6]
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d101      	bne.n	80152b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80152b4:	2301      	movs	r3, #1
 80152b6:	e070      	b.n	801539a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	2200      	movs	r2, #0
 80152bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	2221      	movs	r2, #33	@ 0x21
 80152c4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80152c6:	f7f6 fac3 	bl	800b850 <HAL_GetTick>
 80152ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	88fa      	ldrh	r2, [r7, #6]
 80152d0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	88fa      	ldrh	r2, [r7, #6]
 80152d8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	689b      	ldr	r3, [r3, #8]
 80152e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80152e4:	d108      	bne.n	80152f8 <HAL_UART_Transmit+0x68>
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	691b      	ldr	r3, [r3, #16]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d104      	bne.n	80152f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80152ee:	2300      	movs	r3, #0
 80152f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80152f2:	68bb      	ldr	r3, [r7, #8]
 80152f4:	61bb      	str	r3, [r7, #24]
 80152f6:	e003      	b.n	8015300 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80152f8:	68bb      	ldr	r3, [r7, #8]
 80152fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80152fc:	2300      	movs	r3, #0
 80152fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8015300:	e02f      	b.n	8015362 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015302:	683b      	ldr	r3, [r7, #0]
 8015304:	9300      	str	r3, [sp, #0]
 8015306:	697b      	ldr	r3, [r7, #20]
 8015308:	2200      	movs	r2, #0
 801530a:	2180      	movs	r1, #128	@ 0x80
 801530c:	68f8      	ldr	r0, [r7, #12]
 801530e:	f000 fe3f 	bl	8015f90 <UART_WaitOnFlagUntilTimeout>
 8015312:	4603      	mov	r3, r0
 8015314:	2b00      	cmp	r3, #0
 8015316:	d004      	beq.n	8015322 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	2220      	movs	r2, #32
 801531c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801531e:	2303      	movs	r3, #3
 8015320:	e03b      	b.n	801539a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8015322:	69fb      	ldr	r3, [r7, #28]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d10b      	bne.n	8015340 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015328:	69bb      	ldr	r3, [r7, #24]
 801532a:	881a      	ldrh	r2, [r3, #0]
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015334:	b292      	uxth	r2, r2
 8015336:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8015338:	69bb      	ldr	r3, [r7, #24]
 801533a:	3302      	adds	r3, #2
 801533c:	61bb      	str	r3, [r7, #24]
 801533e:	e007      	b.n	8015350 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8015340:	69fb      	ldr	r3, [r7, #28]
 8015342:	781a      	ldrb	r2, [r3, #0]
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801534a:	69fb      	ldr	r3, [r7, #28]
 801534c:	3301      	adds	r3, #1
 801534e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8015356:	b29b      	uxth	r3, r3
 8015358:	3b01      	subs	r3, #1
 801535a:	b29a      	uxth	r2, r3
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8015368:	b29b      	uxth	r3, r3
 801536a:	2b00      	cmp	r3, #0
 801536c:	d1c9      	bne.n	8015302 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801536e:	683b      	ldr	r3, [r7, #0]
 8015370:	9300      	str	r3, [sp, #0]
 8015372:	697b      	ldr	r3, [r7, #20]
 8015374:	2200      	movs	r2, #0
 8015376:	2140      	movs	r1, #64	@ 0x40
 8015378:	68f8      	ldr	r0, [r7, #12]
 801537a:	f000 fe09 	bl	8015f90 <UART_WaitOnFlagUntilTimeout>
 801537e:	4603      	mov	r3, r0
 8015380:	2b00      	cmp	r3, #0
 8015382:	d004      	beq.n	801538e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	2220      	movs	r2, #32
 8015388:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801538a:	2303      	movs	r3, #3
 801538c:	e005      	b.n	801539a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	2220      	movs	r2, #32
 8015392:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8015394:	2300      	movs	r3, #0
 8015396:	e000      	b.n	801539a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8015398:	2302      	movs	r3, #2
  }
}
 801539a:	4618      	mov	r0, r3
 801539c:	3720      	adds	r7, #32
 801539e:	46bd      	mov	sp, r7
 80153a0:	bd80      	pop	{r7, pc}

080153a2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80153a2:	b580      	push	{r7, lr}
 80153a4:	b08a      	sub	sp, #40	@ 0x28
 80153a6:	af02      	add	r7, sp, #8
 80153a8:	60f8      	str	r0, [r7, #12]
 80153aa:	60b9      	str	r1, [r7, #8]
 80153ac:	603b      	str	r3, [r7, #0]
 80153ae:	4613      	mov	r3, r2
 80153b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80153b8:	2b20      	cmp	r3, #32
 80153ba:	f040 80b6 	bne.w	801552a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80153be:	68bb      	ldr	r3, [r7, #8]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d002      	beq.n	80153ca <HAL_UART_Receive+0x28>
 80153c4:	88fb      	ldrh	r3, [r7, #6]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d101      	bne.n	80153ce <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80153ca:	2301      	movs	r3, #1
 80153cc:	e0ae      	b.n	801552c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	2200      	movs	r2, #0
 80153d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	2222      	movs	r2, #34	@ 0x22
 80153da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	2200      	movs	r2, #0
 80153e2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80153e4:	f7f6 fa34 	bl	800b850 <HAL_GetTick>
 80153e8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	88fa      	ldrh	r2, [r7, #6]
 80153ee:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	88fa      	ldrh	r2, [r7, #6]
 80153f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	689b      	ldr	r3, [r3, #8]
 80153fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015402:	d10e      	bne.n	8015422 <HAL_UART_Receive+0x80>
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	691b      	ldr	r3, [r3, #16]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d105      	bne.n	8015418 <HAL_UART_Receive+0x76>
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8015412:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015416:	e02d      	b.n	8015474 <HAL_UART_Receive+0xd2>
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	22ff      	movs	r2, #255	@ 0xff
 801541c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015420:	e028      	b.n	8015474 <HAL_UART_Receive+0xd2>
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	689b      	ldr	r3, [r3, #8]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d10d      	bne.n	8015446 <HAL_UART_Receive+0xa4>
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	691b      	ldr	r3, [r3, #16]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d104      	bne.n	801543c <HAL_UART_Receive+0x9a>
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	22ff      	movs	r2, #255	@ 0xff
 8015436:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801543a:	e01b      	b.n	8015474 <HAL_UART_Receive+0xd2>
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	227f      	movs	r2, #127	@ 0x7f
 8015440:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015444:	e016      	b.n	8015474 <HAL_UART_Receive+0xd2>
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	689b      	ldr	r3, [r3, #8]
 801544a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801544e:	d10d      	bne.n	801546c <HAL_UART_Receive+0xca>
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	691b      	ldr	r3, [r3, #16]
 8015454:	2b00      	cmp	r3, #0
 8015456:	d104      	bne.n	8015462 <HAL_UART_Receive+0xc0>
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	227f      	movs	r2, #127	@ 0x7f
 801545c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015460:	e008      	b.n	8015474 <HAL_UART_Receive+0xd2>
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	223f      	movs	r2, #63	@ 0x3f
 8015466:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801546a:	e003      	b.n	8015474 <HAL_UART_Receive+0xd2>
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	2200      	movs	r2, #0
 8015470:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801547a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	689b      	ldr	r3, [r3, #8]
 8015480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015484:	d108      	bne.n	8015498 <HAL_UART_Receive+0xf6>
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	691b      	ldr	r3, [r3, #16]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d104      	bne.n	8015498 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 801548e:	2300      	movs	r3, #0
 8015490:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015492:	68bb      	ldr	r3, [r7, #8]
 8015494:	61bb      	str	r3, [r7, #24]
 8015496:	e003      	b.n	80154a0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8015498:	68bb      	ldr	r3, [r7, #8]
 801549a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801549c:	2300      	movs	r3, #0
 801549e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80154a0:	e037      	b.n	8015512 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80154a2:	683b      	ldr	r3, [r7, #0]
 80154a4:	9300      	str	r3, [sp, #0]
 80154a6:	697b      	ldr	r3, [r7, #20]
 80154a8:	2200      	movs	r2, #0
 80154aa:	2120      	movs	r1, #32
 80154ac:	68f8      	ldr	r0, [r7, #12]
 80154ae:	f000 fd6f 	bl	8015f90 <UART_WaitOnFlagUntilTimeout>
 80154b2:	4603      	mov	r3, r0
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d005      	beq.n	80154c4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	2220      	movs	r2, #32
 80154bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80154c0:	2303      	movs	r3, #3
 80154c2:	e033      	b.n	801552c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80154c4:	69fb      	ldr	r3, [r7, #28]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d10c      	bne.n	80154e4 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80154d0:	b29a      	uxth	r2, r3
 80154d2:	8a7b      	ldrh	r3, [r7, #18]
 80154d4:	4013      	ands	r3, r2
 80154d6:	b29a      	uxth	r2, r3
 80154d8:	69bb      	ldr	r3, [r7, #24]
 80154da:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80154dc:	69bb      	ldr	r3, [r7, #24]
 80154de:	3302      	adds	r3, #2
 80154e0:	61bb      	str	r3, [r7, #24]
 80154e2:	e00d      	b.n	8015500 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80154ea:	b29b      	uxth	r3, r3
 80154ec:	b2da      	uxtb	r2, r3
 80154ee:	8a7b      	ldrh	r3, [r7, #18]
 80154f0:	b2db      	uxtb	r3, r3
 80154f2:	4013      	ands	r3, r2
 80154f4:	b2da      	uxtb	r2, r3
 80154f6:	69fb      	ldr	r3, [r7, #28]
 80154f8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80154fa:	69fb      	ldr	r3, [r7, #28]
 80154fc:	3301      	adds	r3, #1
 80154fe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015506:	b29b      	uxth	r3, r3
 8015508:	3b01      	subs	r3, #1
 801550a:	b29a      	uxth	r2, r3
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015518:	b29b      	uxth	r3, r3
 801551a:	2b00      	cmp	r3, #0
 801551c:	d1c1      	bne.n	80154a2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	2220      	movs	r2, #32
 8015522:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8015526:	2300      	movs	r3, #0
 8015528:	e000      	b.n	801552c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 801552a:	2302      	movs	r3, #2
  }
}
 801552c:	4618      	mov	r0, r3
 801552e:	3720      	adds	r7, #32
 8015530:	46bd      	mov	sp, r7
 8015532:	bd80      	pop	{r7, pc}

08015534 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8015534:	b580      	push	{r7, lr}
 8015536:	b08a      	sub	sp, #40	@ 0x28
 8015538:	af00      	add	r7, sp, #0
 801553a:	60f8      	str	r0, [r7, #12]
 801553c:	60b9      	str	r1, [r7, #8]
 801553e:	4613      	mov	r3, r2
 8015540:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015546:	2b20      	cmp	r3, #32
 8015548:	d165      	bne.n	8015616 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 801554a:	68bb      	ldr	r3, [r7, #8]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d002      	beq.n	8015556 <HAL_UART_Transmit_DMA+0x22>
 8015550:	88fb      	ldrh	r3, [r7, #6]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d101      	bne.n	801555a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8015556:	2301      	movs	r3, #1
 8015558:	e05e      	b.n	8015618 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	68ba      	ldr	r2, [r7, #8]
 801555e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	88fa      	ldrh	r2, [r7, #6]
 8015564:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	88fa      	ldrh	r2, [r7, #6]
 801556c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	2200      	movs	r2, #0
 8015574:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	2221      	movs	r2, #33	@ 0x21
 801557c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015582:	2b00      	cmp	r3, #0
 8015584:	d027      	beq.n	80155d6 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801558a:	4a25      	ldr	r2, [pc, #148]	@ (8015620 <HAL_UART_Transmit_DMA+0xec>)
 801558c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015592:	4a24      	ldr	r2, [pc, #144]	@ (8015624 <HAL_UART_Transmit_DMA+0xf0>)
 8015594:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801559a:	4a23      	ldr	r2, [pc, #140]	@ (8015628 <HAL_UART_Transmit_DMA+0xf4>)
 801559c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80155a2:	2200      	movs	r2, #0
 80155a4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80155ae:	4619      	mov	r1, r3
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	3328      	adds	r3, #40	@ 0x28
 80155b6:	461a      	mov	r2, r3
 80155b8:	88fb      	ldrh	r3, [r7, #6]
 80155ba:	f7f8 f92f 	bl	800d81c <HAL_DMA_Start_IT>
 80155be:	4603      	mov	r3, r0
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d008      	beq.n	80155d6 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	2210      	movs	r2, #16
 80155c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	2220      	movs	r2, #32
 80155d0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80155d2:	2301      	movs	r3, #1
 80155d4:	e020      	b.n	8015618 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	2240      	movs	r2, #64	@ 0x40
 80155dc:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	3308      	adds	r3, #8
 80155e4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80155e6:	697b      	ldr	r3, [r7, #20]
 80155e8:	e853 3f00 	ldrex	r3, [r3]
 80155ec:	613b      	str	r3, [r7, #16]
   return(result);
 80155ee:	693b      	ldr	r3, [r7, #16]
 80155f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80155f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	3308      	adds	r3, #8
 80155fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80155fe:	623a      	str	r2, [r7, #32]
 8015600:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015602:	69f9      	ldr	r1, [r7, #28]
 8015604:	6a3a      	ldr	r2, [r7, #32]
 8015606:	e841 2300 	strex	r3, r2, [r1]
 801560a:	61bb      	str	r3, [r7, #24]
   return(result);
 801560c:	69bb      	ldr	r3, [r7, #24]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d1e5      	bne.n	80155de <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8015612:	2300      	movs	r3, #0
 8015614:	e000      	b.n	8015618 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8015616:	2302      	movs	r3, #2
  }
}
 8015618:	4618      	mov	r0, r3
 801561a:	3728      	adds	r7, #40	@ 0x28
 801561c:	46bd      	mov	sp, r7
 801561e:	bd80      	pop	{r7, pc}
 8015620:	080162c1 	.word	0x080162c1
 8015624:	0801635b 	.word	0x0801635b
 8015628:	080164e1 	.word	0x080164e1

0801562c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 801562c:	b580      	push	{r7, lr}
 801562e:	b090      	sub	sp, #64	@ 0x40
 8015630:	af00      	add	r7, sp, #0
 8015632:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015638:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015640:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	689b      	ldr	r3, [r3, #8]
 8015648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801564c:	2b80      	cmp	r3, #128	@ 0x80
 801564e:	d139      	bne.n	80156c4 <HAL_UART_DMAStop+0x98>
 8015650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015652:	2b21      	cmp	r3, #33	@ 0x21
 8015654:	d136      	bne.n	80156c4 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	3308      	adds	r3, #8
 801565c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801565e:	6a3b      	ldr	r3, [r7, #32]
 8015660:	e853 3f00 	ldrex	r3, [r3]
 8015664:	61fb      	str	r3, [r7, #28]
   return(result);
 8015666:	69fb      	ldr	r3, [r7, #28]
 8015668:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801566c:	637b      	str	r3, [r7, #52]	@ 0x34
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	3308      	adds	r3, #8
 8015674:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015676:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8015678:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801567a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801567c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801567e:	e841 2300 	strex	r3, r2, [r1]
 8015682:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015686:	2b00      	cmp	r3, #0
 8015688:	d1e5      	bne.n	8015656 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801568e:	2b00      	cmp	r3, #0
 8015690:	d015      	beq.n	80156be <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015696:	4618      	mov	r0, r3
 8015698:	f7f8 f920 	bl	800d8dc <HAL_DMA_Abort>
 801569c:	4603      	mov	r3, r0
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d00d      	beq.n	80156be <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80156a6:	4618      	mov	r0, r3
 80156a8:	f7f8 fa05 	bl	800dab6 <HAL_DMA_GetError>
 80156ac:	4603      	mov	r3, r0
 80156ae:	2b20      	cmp	r3, #32
 80156b0:	d105      	bne.n	80156be <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	2210      	movs	r2, #16
 80156b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80156ba:	2303      	movs	r3, #3
 80156bc:	e044      	b.n	8015748 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80156be:	6878      	ldr	r0, [r7, #4]
 80156c0:	f000 fd74 	bl	80161ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	689b      	ldr	r3, [r3, #8]
 80156ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80156ce:	2b40      	cmp	r3, #64	@ 0x40
 80156d0:	d139      	bne.n	8015746 <HAL_UART_DMAStop+0x11a>
 80156d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156d4:	2b22      	cmp	r3, #34	@ 0x22
 80156d6:	d136      	bne.n	8015746 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	3308      	adds	r3, #8
 80156de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	e853 3f00 	ldrex	r3, [r3]
 80156e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80156e8:	68bb      	ldr	r3, [r7, #8]
 80156ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80156ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	3308      	adds	r3, #8
 80156f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80156f8:	61ba      	str	r2, [r7, #24]
 80156fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156fc:	6979      	ldr	r1, [r7, #20]
 80156fe:	69ba      	ldr	r2, [r7, #24]
 8015700:	e841 2300 	strex	r3, r2, [r1]
 8015704:	613b      	str	r3, [r7, #16]
   return(result);
 8015706:	693b      	ldr	r3, [r7, #16]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d1e5      	bne.n	80156d8 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015710:	2b00      	cmp	r3, #0
 8015712:	d015      	beq.n	8015740 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015718:	4618      	mov	r0, r3
 801571a:	f7f8 f8df 	bl	800d8dc <HAL_DMA_Abort>
 801571e:	4603      	mov	r3, r0
 8015720:	2b00      	cmp	r3, #0
 8015722:	d00d      	beq.n	8015740 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015728:	4618      	mov	r0, r3
 801572a:	f7f8 f9c4 	bl	800dab6 <HAL_DMA_GetError>
 801572e:	4603      	mov	r3, r0
 8015730:	2b20      	cmp	r3, #32
 8015732:	d105      	bne.n	8015740 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	2210      	movs	r2, #16
 8015738:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801573c:	2303      	movs	r3, #3
 801573e:	e003      	b.n	8015748 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8015740:	6878      	ldr	r0, [r7, #4]
 8015742:	f000 fd59 	bl	80161f8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8015746:	2300      	movs	r3, #0
}
 8015748:	4618      	mov	r0, r3
 801574a:	3740      	adds	r7, #64	@ 0x40
 801574c:	46bd      	mov	sp, r7
 801574e:	bd80      	pop	{r7, pc}

08015750 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8015750:	b480      	push	{r7}
 8015752:	b083      	sub	sp, #12
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8015758:	bf00      	nop
 801575a:	370c      	adds	r7, #12
 801575c:	46bd      	mov	sp, r7
 801575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015762:	4770      	bx	lr

08015764 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8015764:	b480      	push	{r7}
 8015766:	b083      	sub	sp, #12
 8015768:	af00      	add	r7, sp, #0
 801576a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801576c:	bf00      	nop
 801576e:	370c      	adds	r7, #12
 8015770:	46bd      	mov	sp, r7
 8015772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015776:	4770      	bx	lr

08015778 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8015778:	b480      	push	{r7}
 801577a:	b083      	sub	sp, #12
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8015780:	bf00      	nop
 8015782:	370c      	adds	r7, #12
 8015784:	46bd      	mov	sp, r7
 8015786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801578a:	4770      	bx	lr

0801578c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801578c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015790:	b08a      	sub	sp, #40	@ 0x28
 8015792:	af00      	add	r7, sp, #0
 8015794:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8015796:	2300      	movs	r3, #0
 8015798:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	689a      	ldr	r2, [r3, #8]
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	691b      	ldr	r3, [r3, #16]
 80157a4:	431a      	orrs	r2, r3
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	695b      	ldr	r3, [r3, #20]
 80157aa:	431a      	orrs	r2, r3
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	69db      	ldr	r3, [r3, #28]
 80157b0:	4313      	orrs	r3, r2
 80157b2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	681a      	ldr	r2, [r3, #0]
 80157ba:	4ba4      	ldr	r3, [pc, #656]	@ (8015a4c <UART_SetConfig+0x2c0>)
 80157bc:	4013      	ands	r3, r2
 80157be:	68fa      	ldr	r2, [r7, #12]
 80157c0:	6812      	ldr	r2, [r2, #0]
 80157c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80157c4:	430b      	orrs	r3, r1
 80157c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	685b      	ldr	r3, [r3, #4]
 80157ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	68da      	ldr	r2, [r3, #12]
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	430a      	orrs	r2, r1
 80157dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	699b      	ldr	r3, [r3, #24]
 80157e2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	4a99      	ldr	r2, [pc, #612]	@ (8015a50 <UART_SetConfig+0x2c4>)
 80157ea:	4293      	cmp	r3, r2
 80157ec:	d004      	beq.n	80157f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	6a1b      	ldr	r3, [r3, #32]
 80157f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80157f4:	4313      	orrs	r3, r2
 80157f6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	689b      	ldr	r3, [r3, #8]
 80157fe:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015808:	430a      	orrs	r2, r1
 801580a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	4a90      	ldr	r2, [pc, #576]	@ (8015a54 <UART_SetConfig+0x2c8>)
 8015812:	4293      	cmp	r3, r2
 8015814:	d126      	bne.n	8015864 <UART_SetConfig+0xd8>
 8015816:	4b90      	ldr	r3, [pc, #576]	@ (8015a58 <UART_SetConfig+0x2cc>)
 8015818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801581c:	f003 0303 	and.w	r3, r3, #3
 8015820:	2b03      	cmp	r3, #3
 8015822:	d81b      	bhi.n	801585c <UART_SetConfig+0xd0>
 8015824:	a201      	add	r2, pc, #4	@ (adr r2, 801582c <UART_SetConfig+0xa0>)
 8015826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801582a:	bf00      	nop
 801582c:	0801583d 	.word	0x0801583d
 8015830:	0801584d 	.word	0x0801584d
 8015834:	08015845 	.word	0x08015845
 8015838:	08015855 	.word	0x08015855
 801583c:	2301      	movs	r3, #1
 801583e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015842:	e116      	b.n	8015a72 <UART_SetConfig+0x2e6>
 8015844:	2302      	movs	r3, #2
 8015846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801584a:	e112      	b.n	8015a72 <UART_SetConfig+0x2e6>
 801584c:	2304      	movs	r3, #4
 801584e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015852:	e10e      	b.n	8015a72 <UART_SetConfig+0x2e6>
 8015854:	2308      	movs	r3, #8
 8015856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801585a:	e10a      	b.n	8015a72 <UART_SetConfig+0x2e6>
 801585c:	2310      	movs	r3, #16
 801585e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015862:	e106      	b.n	8015a72 <UART_SetConfig+0x2e6>
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	4a7c      	ldr	r2, [pc, #496]	@ (8015a5c <UART_SetConfig+0x2d0>)
 801586a:	4293      	cmp	r3, r2
 801586c:	d138      	bne.n	80158e0 <UART_SetConfig+0x154>
 801586e:	4b7a      	ldr	r3, [pc, #488]	@ (8015a58 <UART_SetConfig+0x2cc>)
 8015870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015874:	f003 030c 	and.w	r3, r3, #12
 8015878:	2b0c      	cmp	r3, #12
 801587a:	d82d      	bhi.n	80158d8 <UART_SetConfig+0x14c>
 801587c:	a201      	add	r2, pc, #4	@ (adr r2, 8015884 <UART_SetConfig+0xf8>)
 801587e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015882:	bf00      	nop
 8015884:	080158b9 	.word	0x080158b9
 8015888:	080158d9 	.word	0x080158d9
 801588c:	080158d9 	.word	0x080158d9
 8015890:	080158d9 	.word	0x080158d9
 8015894:	080158c9 	.word	0x080158c9
 8015898:	080158d9 	.word	0x080158d9
 801589c:	080158d9 	.word	0x080158d9
 80158a0:	080158d9 	.word	0x080158d9
 80158a4:	080158c1 	.word	0x080158c1
 80158a8:	080158d9 	.word	0x080158d9
 80158ac:	080158d9 	.word	0x080158d9
 80158b0:	080158d9 	.word	0x080158d9
 80158b4:	080158d1 	.word	0x080158d1
 80158b8:	2300      	movs	r3, #0
 80158ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80158be:	e0d8      	b.n	8015a72 <UART_SetConfig+0x2e6>
 80158c0:	2302      	movs	r3, #2
 80158c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80158c6:	e0d4      	b.n	8015a72 <UART_SetConfig+0x2e6>
 80158c8:	2304      	movs	r3, #4
 80158ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80158ce:	e0d0      	b.n	8015a72 <UART_SetConfig+0x2e6>
 80158d0:	2308      	movs	r3, #8
 80158d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80158d6:	e0cc      	b.n	8015a72 <UART_SetConfig+0x2e6>
 80158d8:	2310      	movs	r3, #16
 80158da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80158de:	e0c8      	b.n	8015a72 <UART_SetConfig+0x2e6>
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	4a5e      	ldr	r2, [pc, #376]	@ (8015a60 <UART_SetConfig+0x2d4>)
 80158e6:	4293      	cmp	r3, r2
 80158e8:	d125      	bne.n	8015936 <UART_SetConfig+0x1aa>
 80158ea:	4b5b      	ldr	r3, [pc, #364]	@ (8015a58 <UART_SetConfig+0x2cc>)
 80158ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80158f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80158f4:	2b30      	cmp	r3, #48	@ 0x30
 80158f6:	d016      	beq.n	8015926 <UART_SetConfig+0x19a>
 80158f8:	2b30      	cmp	r3, #48	@ 0x30
 80158fa:	d818      	bhi.n	801592e <UART_SetConfig+0x1a2>
 80158fc:	2b20      	cmp	r3, #32
 80158fe:	d00a      	beq.n	8015916 <UART_SetConfig+0x18a>
 8015900:	2b20      	cmp	r3, #32
 8015902:	d814      	bhi.n	801592e <UART_SetConfig+0x1a2>
 8015904:	2b00      	cmp	r3, #0
 8015906:	d002      	beq.n	801590e <UART_SetConfig+0x182>
 8015908:	2b10      	cmp	r3, #16
 801590a:	d008      	beq.n	801591e <UART_SetConfig+0x192>
 801590c:	e00f      	b.n	801592e <UART_SetConfig+0x1a2>
 801590e:	2300      	movs	r3, #0
 8015910:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015914:	e0ad      	b.n	8015a72 <UART_SetConfig+0x2e6>
 8015916:	2302      	movs	r3, #2
 8015918:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801591c:	e0a9      	b.n	8015a72 <UART_SetConfig+0x2e6>
 801591e:	2304      	movs	r3, #4
 8015920:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015924:	e0a5      	b.n	8015a72 <UART_SetConfig+0x2e6>
 8015926:	2308      	movs	r3, #8
 8015928:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801592c:	e0a1      	b.n	8015a72 <UART_SetConfig+0x2e6>
 801592e:	2310      	movs	r3, #16
 8015930:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015934:	e09d      	b.n	8015a72 <UART_SetConfig+0x2e6>
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	4a4a      	ldr	r2, [pc, #296]	@ (8015a64 <UART_SetConfig+0x2d8>)
 801593c:	4293      	cmp	r3, r2
 801593e:	d125      	bne.n	801598c <UART_SetConfig+0x200>
 8015940:	4b45      	ldr	r3, [pc, #276]	@ (8015a58 <UART_SetConfig+0x2cc>)
 8015942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015946:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801594a:	2bc0      	cmp	r3, #192	@ 0xc0
 801594c:	d016      	beq.n	801597c <UART_SetConfig+0x1f0>
 801594e:	2bc0      	cmp	r3, #192	@ 0xc0
 8015950:	d818      	bhi.n	8015984 <UART_SetConfig+0x1f8>
 8015952:	2b80      	cmp	r3, #128	@ 0x80
 8015954:	d00a      	beq.n	801596c <UART_SetConfig+0x1e0>
 8015956:	2b80      	cmp	r3, #128	@ 0x80
 8015958:	d814      	bhi.n	8015984 <UART_SetConfig+0x1f8>
 801595a:	2b00      	cmp	r3, #0
 801595c:	d002      	beq.n	8015964 <UART_SetConfig+0x1d8>
 801595e:	2b40      	cmp	r3, #64	@ 0x40
 8015960:	d008      	beq.n	8015974 <UART_SetConfig+0x1e8>
 8015962:	e00f      	b.n	8015984 <UART_SetConfig+0x1f8>
 8015964:	2300      	movs	r3, #0
 8015966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801596a:	e082      	b.n	8015a72 <UART_SetConfig+0x2e6>
 801596c:	2302      	movs	r3, #2
 801596e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015972:	e07e      	b.n	8015a72 <UART_SetConfig+0x2e6>
 8015974:	2304      	movs	r3, #4
 8015976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801597a:	e07a      	b.n	8015a72 <UART_SetConfig+0x2e6>
 801597c:	2308      	movs	r3, #8
 801597e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015982:	e076      	b.n	8015a72 <UART_SetConfig+0x2e6>
 8015984:	2310      	movs	r3, #16
 8015986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801598a:	e072      	b.n	8015a72 <UART_SetConfig+0x2e6>
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	4a35      	ldr	r2, [pc, #212]	@ (8015a68 <UART_SetConfig+0x2dc>)
 8015992:	4293      	cmp	r3, r2
 8015994:	d12a      	bne.n	80159ec <UART_SetConfig+0x260>
 8015996:	4b30      	ldr	r3, [pc, #192]	@ (8015a58 <UART_SetConfig+0x2cc>)
 8015998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801599c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80159a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80159a4:	d01a      	beq.n	80159dc <UART_SetConfig+0x250>
 80159a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80159aa:	d81b      	bhi.n	80159e4 <UART_SetConfig+0x258>
 80159ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80159b0:	d00c      	beq.n	80159cc <UART_SetConfig+0x240>
 80159b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80159b6:	d815      	bhi.n	80159e4 <UART_SetConfig+0x258>
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d003      	beq.n	80159c4 <UART_SetConfig+0x238>
 80159bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80159c0:	d008      	beq.n	80159d4 <UART_SetConfig+0x248>
 80159c2:	e00f      	b.n	80159e4 <UART_SetConfig+0x258>
 80159c4:	2300      	movs	r3, #0
 80159c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80159ca:	e052      	b.n	8015a72 <UART_SetConfig+0x2e6>
 80159cc:	2302      	movs	r3, #2
 80159ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80159d2:	e04e      	b.n	8015a72 <UART_SetConfig+0x2e6>
 80159d4:	2304      	movs	r3, #4
 80159d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80159da:	e04a      	b.n	8015a72 <UART_SetConfig+0x2e6>
 80159dc:	2308      	movs	r3, #8
 80159de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80159e2:	e046      	b.n	8015a72 <UART_SetConfig+0x2e6>
 80159e4:	2310      	movs	r3, #16
 80159e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80159ea:	e042      	b.n	8015a72 <UART_SetConfig+0x2e6>
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	4a17      	ldr	r2, [pc, #92]	@ (8015a50 <UART_SetConfig+0x2c4>)
 80159f2:	4293      	cmp	r3, r2
 80159f4:	d13a      	bne.n	8015a6c <UART_SetConfig+0x2e0>
 80159f6:	4b18      	ldr	r3, [pc, #96]	@ (8015a58 <UART_SetConfig+0x2cc>)
 80159f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80159fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8015a00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8015a04:	d01a      	beq.n	8015a3c <UART_SetConfig+0x2b0>
 8015a06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8015a0a:	d81b      	bhi.n	8015a44 <UART_SetConfig+0x2b8>
 8015a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015a10:	d00c      	beq.n	8015a2c <UART_SetConfig+0x2a0>
 8015a12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015a16:	d815      	bhi.n	8015a44 <UART_SetConfig+0x2b8>
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d003      	beq.n	8015a24 <UART_SetConfig+0x298>
 8015a1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015a20:	d008      	beq.n	8015a34 <UART_SetConfig+0x2a8>
 8015a22:	e00f      	b.n	8015a44 <UART_SetConfig+0x2b8>
 8015a24:	2300      	movs	r3, #0
 8015a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015a2a:	e022      	b.n	8015a72 <UART_SetConfig+0x2e6>
 8015a2c:	2302      	movs	r3, #2
 8015a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015a32:	e01e      	b.n	8015a72 <UART_SetConfig+0x2e6>
 8015a34:	2304      	movs	r3, #4
 8015a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015a3a:	e01a      	b.n	8015a72 <UART_SetConfig+0x2e6>
 8015a3c:	2308      	movs	r3, #8
 8015a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015a42:	e016      	b.n	8015a72 <UART_SetConfig+0x2e6>
 8015a44:	2310      	movs	r3, #16
 8015a46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015a4a:	e012      	b.n	8015a72 <UART_SetConfig+0x2e6>
 8015a4c:	efff69f3 	.word	0xefff69f3
 8015a50:	40008000 	.word	0x40008000
 8015a54:	40013800 	.word	0x40013800
 8015a58:	40021000 	.word	0x40021000
 8015a5c:	40004400 	.word	0x40004400
 8015a60:	40004800 	.word	0x40004800
 8015a64:	40004c00 	.word	0x40004c00
 8015a68:	40005000 	.word	0x40005000
 8015a6c:	2310      	movs	r3, #16
 8015a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	4a9f      	ldr	r2, [pc, #636]	@ (8015cf4 <UART_SetConfig+0x568>)
 8015a78:	4293      	cmp	r3, r2
 8015a7a:	d17a      	bne.n	8015b72 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8015a7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015a80:	2b08      	cmp	r3, #8
 8015a82:	d824      	bhi.n	8015ace <UART_SetConfig+0x342>
 8015a84:	a201      	add	r2, pc, #4	@ (adr r2, 8015a8c <UART_SetConfig+0x300>)
 8015a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a8a:	bf00      	nop
 8015a8c:	08015ab1 	.word	0x08015ab1
 8015a90:	08015acf 	.word	0x08015acf
 8015a94:	08015ab9 	.word	0x08015ab9
 8015a98:	08015acf 	.word	0x08015acf
 8015a9c:	08015abf 	.word	0x08015abf
 8015aa0:	08015acf 	.word	0x08015acf
 8015aa4:	08015acf 	.word	0x08015acf
 8015aa8:	08015acf 	.word	0x08015acf
 8015aac:	08015ac7 	.word	0x08015ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015ab0:	f7fb f8fe 	bl	8010cb0 <HAL_RCC_GetPCLK1Freq>
 8015ab4:	61f8      	str	r0, [r7, #28]
        break;
 8015ab6:	e010      	b.n	8015ada <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015ab8:	4b8f      	ldr	r3, [pc, #572]	@ (8015cf8 <UART_SetConfig+0x56c>)
 8015aba:	61fb      	str	r3, [r7, #28]
        break;
 8015abc:	e00d      	b.n	8015ada <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015abe:	f7fb f85f 	bl	8010b80 <HAL_RCC_GetSysClockFreq>
 8015ac2:	61f8      	str	r0, [r7, #28]
        break;
 8015ac4:	e009      	b.n	8015ada <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015ac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015aca:	61fb      	str	r3, [r7, #28]
        break;
 8015acc:	e005      	b.n	8015ada <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8015ace:	2300      	movs	r3, #0
 8015ad0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8015ad2:	2301      	movs	r3, #1
 8015ad4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8015ad8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8015ada:	69fb      	ldr	r3, [r7, #28]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	f000 80fb 	beq.w	8015cd8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	685a      	ldr	r2, [r3, #4]
 8015ae6:	4613      	mov	r3, r2
 8015ae8:	005b      	lsls	r3, r3, #1
 8015aea:	4413      	add	r3, r2
 8015aec:	69fa      	ldr	r2, [r7, #28]
 8015aee:	429a      	cmp	r2, r3
 8015af0:	d305      	bcc.n	8015afe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	685b      	ldr	r3, [r3, #4]
 8015af6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8015af8:	69fa      	ldr	r2, [r7, #28]
 8015afa:	429a      	cmp	r2, r3
 8015afc:	d903      	bls.n	8015b06 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8015afe:	2301      	movs	r3, #1
 8015b00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8015b04:	e0e8      	b.n	8015cd8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8015b06:	69fb      	ldr	r3, [r7, #28]
 8015b08:	2200      	movs	r2, #0
 8015b0a:	461c      	mov	r4, r3
 8015b0c:	4615      	mov	r5, r2
 8015b0e:	f04f 0200 	mov.w	r2, #0
 8015b12:	f04f 0300 	mov.w	r3, #0
 8015b16:	022b      	lsls	r3, r5, #8
 8015b18:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8015b1c:	0222      	lsls	r2, r4, #8
 8015b1e:	68f9      	ldr	r1, [r7, #12]
 8015b20:	6849      	ldr	r1, [r1, #4]
 8015b22:	0849      	lsrs	r1, r1, #1
 8015b24:	2000      	movs	r0, #0
 8015b26:	4688      	mov	r8, r1
 8015b28:	4681      	mov	r9, r0
 8015b2a:	eb12 0a08 	adds.w	sl, r2, r8
 8015b2e:	eb43 0b09 	adc.w	fp, r3, r9
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	685b      	ldr	r3, [r3, #4]
 8015b36:	2200      	movs	r2, #0
 8015b38:	603b      	str	r3, [r7, #0]
 8015b3a:	607a      	str	r2, [r7, #4]
 8015b3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015b40:	4650      	mov	r0, sl
 8015b42:	4659      	mov	r1, fp
 8015b44:	f7ea ff9a 	bl	8000a7c <__aeabi_uldivmod>
 8015b48:	4602      	mov	r2, r0
 8015b4a:	460b      	mov	r3, r1
 8015b4c:	4613      	mov	r3, r2
 8015b4e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015b50:	69bb      	ldr	r3, [r7, #24]
 8015b52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015b56:	d308      	bcc.n	8015b6a <UART_SetConfig+0x3de>
 8015b58:	69bb      	ldr	r3, [r7, #24]
 8015b5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015b5e:	d204      	bcs.n	8015b6a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	69ba      	ldr	r2, [r7, #24]
 8015b66:	60da      	str	r2, [r3, #12]
 8015b68:	e0b6      	b.n	8015cd8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8015b6a:	2301      	movs	r3, #1
 8015b6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8015b70:	e0b2      	b.n	8015cd8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	69db      	ldr	r3, [r3, #28]
 8015b76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015b7a:	d15e      	bne.n	8015c3a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8015b7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015b80:	2b08      	cmp	r3, #8
 8015b82:	d828      	bhi.n	8015bd6 <UART_SetConfig+0x44a>
 8015b84:	a201      	add	r2, pc, #4	@ (adr r2, 8015b8c <UART_SetConfig+0x400>)
 8015b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b8a:	bf00      	nop
 8015b8c:	08015bb1 	.word	0x08015bb1
 8015b90:	08015bb9 	.word	0x08015bb9
 8015b94:	08015bc1 	.word	0x08015bc1
 8015b98:	08015bd7 	.word	0x08015bd7
 8015b9c:	08015bc7 	.word	0x08015bc7
 8015ba0:	08015bd7 	.word	0x08015bd7
 8015ba4:	08015bd7 	.word	0x08015bd7
 8015ba8:	08015bd7 	.word	0x08015bd7
 8015bac:	08015bcf 	.word	0x08015bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015bb0:	f7fb f87e 	bl	8010cb0 <HAL_RCC_GetPCLK1Freq>
 8015bb4:	61f8      	str	r0, [r7, #28]
        break;
 8015bb6:	e014      	b.n	8015be2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015bb8:	f7fb f890 	bl	8010cdc <HAL_RCC_GetPCLK2Freq>
 8015bbc:	61f8      	str	r0, [r7, #28]
        break;
 8015bbe:	e010      	b.n	8015be2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015bc0:	4b4d      	ldr	r3, [pc, #308]	@ (8015cf8 <UART_SetConfig+0x56c>)
 8015bc2:	61fb      	str	r3, [r7, #28]
        break;
 8015bc4:	e00d      	b.n	8015be2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015bc6:	f7fa ffdb 	bl	8010b80 <HAL_RCC_GetSysClockFreq>
 8015bca:	61f8      	str	r0, [r7, #28]
        break;
 8015bcc:	e009      	b.n	8015be2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015bce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015bd2:	61fb      	str	r3, [r7, #28]
        break;
 8015bd4:	e005      	b.n	8015be2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8015bda:	2301      	movs	r3, #1
 8015bdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8015be0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8015be2:	69fb      	ldr	r3, [r7, #28]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d077      	beq.n	8015cd8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8015be8:	69fb      	ldr	r3, [r7, #28]
 8015bea:	005a      	lsls	r2, r3, #1
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	685b      	ldr	r3, [r3, #4]
 8015bf0:	085b      	lsrs	r3, r3, #1
 8015bf2:	441a      	add	r2, r3
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	685b      	ldr	r3, [r3, #4]
 8015bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8015bfc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015bfe:	69bb      	ldr	r3, [r7, #24]
 8015c00:	2b0f      	cmp	r3, #15
 8015c02:	d916      	bls.n	8015c32 <UART_SetConfig+0x4a6>
 8015c04:	69bb      	ldr	r3, [r7, #24]
 8015c06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015c0a:	d212      	bcs.n	8015c32 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8015c0c:	69bb      	ldr	r3, [r7, #24]
 8015c0e:	b29b      	uxth	r3, r3
 8015c10:	f023 030f 	bic.w	r3, r3, #15
 8015c14:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015c16:	69bb      	ldr	r3, [r7, #24]
 8015c18:	085b      	lsrs	r3, r3, #1
 8015c1a:	b29b      	uxth	r3, r3
 8015c1c:	f003 0307 	and.w	r3, r3, #7
 8015c20:	b29a      	uxth	r2, r3
 8015c22:	8afb      	ldrh	r3, [r7, #22]
 8015c24:	4313      	orrs	r3, r2
 8015c26:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	8afa      	ldrh	r2, [r7, #22]
 8015c2e:	60da      	str	r2, [r3, #12]
 8015c30:	e052      	b.n	8015cd8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8015c32:	2301      	movs	r3, #1
 8015c34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8015c38:	e04e      	b.n	8015cd8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8015c3a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015c3e:	2b08      	cmp	r3, #8
 8015c40:	d827      	bhi.n	8015c92 <UART_SetConfig+0x506>
 8015c42:	a201      	add	r2, pc, #4	@ (adr r2, 8015c48 <UART_SetConfig+0x4bc>)
 8015c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c48:	08015c6d 	.word	0x08015c6d
 8015c4c:	08015c75 	.word	0x08015c75
 8015c50:	08015c7d 	.word	0x08015c7d
 8015c54:	08015c93 	.word	0x08015c93
 8015c58:	08015c83 	.word	0x08015c83
 8015c5c:	08015c93 	.word	0x08015c93
 8015c60:	08015c93 	.word	0x08015c93
 8015c64:	08015c93 	.word	0x08015c93
 8015c68:	08015c8b 	.word	0x08015c8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015c6c:	f7fb f820 	bl	8010cb0 <HAL_RCC_GetPCLK1Freq>
 8015c70:	61f8      	str	r0, [r7, #28]
        break;
 8015c72:	e014      	b.n	8015c9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015c74:	f7fb f832 	bl	8010cdc <HAL_RCC_GetPCLK2Freq>
 8015c78:	61f8      	str	r0, [r7, #28]
        break;
 8015c7a:	e010      	b.n	8015c9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8015cf8 <UART_SetConfig+0x56c>)
 8015c7e:	61fb      	str	r3, [r7, #28]
        break;
 8015c80:	e00d      	b.n	8015c9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015c82:	f7fa ff7d 	bl	8010b80 <HAL_RCC_GetSysClockFreq>
 8015c86:	61f8      	str	r0, [r7, #28]
        break;
 8015c88:	e009      	b.n	8015c9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015c8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015c8e:	61fb      	str	r3, [r7, #28]
        break;
 8015c90:	e005      	b.n	8015c9e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8015c92:	2300      	movs	r3, #0
 8015c94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8015c96:	2301      	movs	r3, #1
 8015c98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8015c9c:	bf00      	nop
    }

    if (pclk != 0U)
 8015c9e:	69fb      	ldr	r3, [r7, #28]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d019      	beq.n	8015cd8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	685b      	ldr	r3, [r3, #4]
 8015ca8:	085a      	lsrs	r2, r3, #1
 8015caa:	69fb      	ldr	r3, [r7, #28]
 8015cac:	441a      	add	r2, r3
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	685b      	ldr	r3, [r3, #4]
 8015cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8015cb6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015cb8:	69bb      	ldr	r3, [r7, #24]
 8015cba:	2b0f      	cmp	r3, #15
 8015cbc:	d909      	bls.n	8015cd2 <UART_SetConfig+0x546>
 8015cbe:	69bb      	ldr	r3, [r7, #24]
 8015cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015cc4:	d205      	bcs.n	8015cd2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8015cc6:	69bb      	ldr	r3, [r7, #24]
 8015cc8:	b29a      	uxth	r2, r3
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	60da      	str	r2, [r3, #12]
 8015cd0:	e002      	b.n	8015cd8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8015cd2:	2301      	movs	r3, #1
 8015cd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	2200      	movs	r2, #0
 8015cdc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8015cde:	68fb      	ldr	r3, [r7, #12]
 8015ce0:	2200      	movs	r2, #0
 8015ce2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8015ce4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8015ce8:	4618      	mov	r0, r3
 8015cea:	3728      	adds	r7, #40	@ 0x28
 8015cec:	46bd      	mov	sp, r7
 8015cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015cf2:	bf00      	nop
 8015cf4:	40008000 	.word	0x40008000
 8015cf8:	00f42400 	.word	0x00f42400

08015cfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015cfc:	b480      	push	{r7}
 8015cfe:	b083      	sub	sp, #12
 8015d00:	af00      	add	r7, sp, #0
 8015d02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d08:	f003 0308 	and.w	r3, r3, #8
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d00a      	beq.n	8015d26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	685b      	ldr	r3, [r3, #4]
 8015d16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	430a      	orrs	r2, r1
 8015d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d2a:	f003 0301 	and.w	r3, r3, #1
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d00a      	beq.n	8015d48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	685b      	ldr	r3, [r3, #4]
 8015d38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	430a      	orrs	r2, r1
 8015d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d4c:	f003 0302 	and.w	r3, r3, #2
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d00a      	beq.n	8015d6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	685b      	ldr	r3, [r3, #4]
 8015d5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	430a      	orrs	r2, r1
 8015d68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d6e:	f003 0304 	and.w	r3, r3, #4
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d00a      	beq.n	8015d8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	685b      	ldr	r3, [r3, #4]
 8015d7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	430a      	orrs	r2, r1
 8015d8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d90:	f003 0310 	and.w	r3, r3, #16
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d00a      	beq.n	8015dae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	689b      	ldr	r3, [r3, #8]
 8015d9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	430a      	orrs	r2, r1
 8015dac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015db2:	f003 0320 	and.w	r3, r3, #32
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d00a      	beq.n	8015dd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	689b      	ldr	r3, [r3, #8]
 8015dc0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	430a      	orrs	r2, r1
 8015dce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d01a      	beq.n	8015e12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	685b      	ldr	r3, [r3, #4]
 8015de2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	430a      	orrs	r2, r1
 8015df0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015df6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015dfa:	d10a      	bne.n	8015e12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	685b      	ldr	r3, [r3, #4]
 8015e02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	430a      	orrs	r2, r1
 8015e10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d00a      	beq.n	8015e34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	685b      	ldr	r3, [r3, #4]
 8015e24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	430a      	orrs	r2, r1
 8015e32:	605a      	str	r2, [r3, #4]
  }
}
 8015e34:	bf00      	nop
 8015e36:	370c      	adds	r7, #12
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e3e:	4770      	bx	lr

08015e40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b098      	sub	sp, #96	@ 0x60
 8015e44:	af02      	add	r7, sp, #8
 8015e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015e50:	f7f5 fcfe 	bl	800b850 <HAL_GetTick>
 8015e54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	f003 0308 	and.w	r3, r3, #8
 8015e60:	2b08      	cmp	r3, #8
 8015e62:	d12e      	bne.n	8015ec2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015e64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8015e68:	9300      	str	r3, [sp, #0]
 8015e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015e6c:	2200      	movs	r2, #0
 8015e6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8015e72:	6878      	ldr	r0, [r7, #4]
 8015e74:	f000 f88c 	bl	8015f90 <UART_WaitOnFlagUntilTimeout>
 8015e78:	4603      	mov	r3, r0
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d021      	beq.n	8015ec2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e86:	e853 3f00 	ldrex	r3, [r3]
 8015e8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8015e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015e92:	653b      	str	r3, [r7, #80]	@ 0x50
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	461a      	mov	r2, r3
 8015e9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015e9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8015e9e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ea0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015ea2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015ea4:	e841 2300 	strex	r3, r2, [r1]
 8015ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8015eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d1e6      	bne.n	8015e7e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	2220      	movs	r2, #32
 8015eb4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	2200      	movs	r2, #0
 8015eba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015ebe:	2303      	movs	r3, #3
 8015ec0:	e062      	b.n	8015f88 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	f003 0304 	and.w	r3, r3, #4
 8015ecc:	2b04      	cmp	r3, #4
 8015ece:	d149      	bne.n	8015f64 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015ed0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8015ed4:	9300      	str	r3, [sp, #0]
 8015ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015ed8:	2200      	movs	r2, #0
 8015eda:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8015ede:	6878      	ldr	r0, [r7, #4]
 8015ee0:	f000 f856 	bl	8015f90 <UART_WaitOnFlagUntilTimeout>
 8015ee4:	4603      	mov	r3, r0
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d03c      	beq.n	8015f64 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ef2:	e853 3f00 	ldrex	r3, [r3]
 8015ef6:	623b      	str	r3, [r7, #32]
   return(result);
 8015ef8:	6a3b      	ldr	r3, [r7, #32]
 8015efa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8015efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	461a      	mov	r2, r3
 8015f06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015f08:	633b      	str	r3, [r7, #48]	@ 0x30
 8015f0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015f0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015f10:	e841 2300 	strex	r3, r2, [r1]
 8015f14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d1e6      	bne.n	8015eea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	3308      	adds	r3, #8
 8015f22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f24:	693b      	ldr	r3, [r7, #16]
 8015f26:	e853 3f00 	ldrex	r3, [r3]
 8015f2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	f023 0301 	bic.w	r3, r3, #1
 8015f32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	3308      	adds	r3, #8
 8015f3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015f3c:	61fa      	str	r2, [r7, #28]
 8015f3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f40:	69b9      	ldr	r1, [r7, #24]
 8015f42:	69fa      	ldr	r2, [r7, #28]
 8015f44:	e841 2300 	strex	r3, r2, [r1]
 8015f48:	617b      	str	r3, [r7, #20]
   return(result);
 8015f4a:	697b      	ldr	r3, [r7, #20]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d1e5      	bne.n	8015f1c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	2220      	movs	r2, #32
 8015f54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015f60:	2303      	movs	r3, #3
 8015f62:	e011      	b.n	8015f88 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	2220      	movs	r2, #32
 8015f68:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	2220      	movs	r2, #32
 8015f6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	2200      	movs	r2, #0
 8015f76:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	2200      	movs	r2, #0
 8015f7c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	2200      	movs	r2, #0
 8015f82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8015f86:	2300      	movs	r3, #0
}
 8015f88:	4618      	mov	r0, r3
 8015f8a:	3758      	adds	r7, #88	@ 0x58
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	bd80      	pop	{r7, pc}

08015f90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015f90:	b580      	push	{r7, lr}
 8015f92:	b084      	sub	sp, #16
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	60f8      	str	r0, [r7, #12]
 8015f98:	60b9      	str	r1, [r7, #8]
 8015f9a:	603b      	str	r3, [r7, #0]
 8015f9c:	4613      	mov	r3, r2
 8015f9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015fa0:	e04f      	b.n	8016042 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015fa2:	69bb      	ldr	r3, [r7, #24]
 8015fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fa8:	d04b      	beq.n	8016042 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015faa:	f7f5 fc51 	bl	800b850 <HAL_GetTick>
 8015fae:	4602      	mov	r2, r0
 8015fb0:	683b      	ldr	r3, [r7, #0]
 8015fb2:	1ad3      	subs	r3, r2, r3
 8015fb4:	69ba      	ldr	r2, [r7, #24]
 8015fb6:	429a      	cmp	r2, r3
 8015fb8:	d302      	bcc.n	8015fc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8015fba:	69bb      	ldr	r3, [r7, #24]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d101      	bne.n	8015fc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015fc0:	2303      	movs	r3, #3
 8015fc2:	e04e      	b.n	8016062 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	f003 0304 	and.w	r3, r3, #4
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d037      	beq.n	8016042 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015fd2:	68bb      	ldr	r3, [r7, #8]
 8015fd4:	2b80      	cmp	r3, #128	@ 0x80
 8015fd6:	d034      	beq.n	8016042 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015fd8:	68bb      	ldr	r3, [r7, #8]
 8015fda:	2b40      	cmp	r3, #64	@ 0x40
 8015fdc:	d031      	beq.n	8016042 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	69db      	ldr	r3, [r3, #28]
 8015fe4:	f003 0308 	and.w	r3, r3, #8
 8015fe8:	2b08      	cmp	r3, #8
 8015fea:	d110      	bne.n	801600e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	2208      	movs	r2, #8
 8015ff2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015ff4:	68f8      	ldr	r0, [r7, #12]
 8015ff6:	f000 f8ff 	bl	80161f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	2208      	movs	r2, #8
 8015ffe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	2200      	movs	r2, #0
 8016006:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 801600a:	2301      	movs	r3, #1
 801600c:	e029      	b.n	8016062 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	69db      	ldr	r3, [r3, #28]
 8016014:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8016018:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801601c:	d111      	bne.n	8016042 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016026:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8016028:	68f8      	ldr	r0, [r7, #12]
 801602a:	f000 f8e5 	bl	80161f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	2220      	movs	r2, #32
 8016032:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	2200      	movs	r2, #0
 801603a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 801603e:	2303      	movs	r3, #3
 8016040:	e00f      	b.n	8016062 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	69da      	ldr	r2, [r3, #28]
 8016048:	68bb      	ldr	r3, [r7, #8]
 801604a:	4013      	ands	r3, r2
 801604c:	68ba      	ldr	r2, [r7, #8]
 801604e:	429a      	cmp	r2, r3
 8016050:	bf0c      	ite	eq
 8016052:	2301      	moveq	r3, #1
 8016054:	2300      	movne	r3, #0
 8016056:	b2db      	uxtb	r3, r3
 8016058:	461a      	mov	r2, r3
 801605a:	79fb      	ldrb	r3, [r7, #7]
 801605c:	429a      	cmp	r2, r3
 801605e:	d0a0      	beq.n	8015fa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8016060:	2300      	movs	r3, #0
}
 8016062:	4618      	mov	r0, r3
 8016064:	3710      	adds	r7, #16
 8016066:	46bd      	mov	sp, r7
 8016068:	bd80      	pop	{r7, pc}
	...

0801606c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801606c:	b580      	push	{r7, lr}
 801606e:	b096      	sub	sp, #88	@ 0x58
 8016070:	af00      	add	r7, sp, #0
 8016072:	60f8      	str	r0, [r7, #12]
 8016074:	60b9      	str	r1, [r7, #8]
 8016076:	4613      	mov	r3, r2
 8016078:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	68ba      	ldr	r2, [r7, #8]
 801607e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	88fa      	ldrh	r2, [r7, #6]
 8016084:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	2200      	movs	r2, #0
 801608c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	2222      	movs	r2, #34	@ 0x22
 8016094:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801609c:	2b00      	cmp	r3, #0
 801609e:	d028      	beq.n	80160f2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80160a4:	4a3e      	ldr	r2, [pc, #248]	@ (80161a0 <UART_Start_Receive_DMA+0x134>)
 80160a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80160ac:	4a3d      	ldr	r2, [pc, #244]	@ (80161a4 <UART_Start_Receive_DMA+0x138>)
 80160ae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80160b4:	4a3c      	ldr	r2, [pc, #240]	@ (80161a8 <UART_Start_Receive_DMA+0x13c>)
 80160b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80160bc:	2200      	movs	r2, #0
 80160be:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	3324      	adds	r3, #36	@ 0x24
 80160ca:	4619      	mov	r1, r3
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80160d0:	461a      	mov	r2, r3
 80160d2:	88fb      	ldrh	r3, [r7, #6]
 80160d4:	f7f7 fba2 	bl	800d81c <HAL_DMA_Start_IT>
 80160d8:	4603      	mov	r3, r0
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d009      	beq.n	80160f2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	2210      	movs	r2, #16
 80160e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	2220      	movs	r2, #32
 80160ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80160ee:	2301      	movs	r3, #1
 80160f0:	e051      	b.n	8016196 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	691b      	ldr	r3, [r3, #16]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d018      	beq.n	801612c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016102:	e853 3f00 	ldrex	r3, [r3]
 8016106:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8016108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801610a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801610e:	657b      	str	r3, [r7, #84]	@ 0x54
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	461a      	mov	r2, r3
 8016116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016118:	64bb      	str	r3, [r7, #72]	@ 0x48
 801611a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801611c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801611e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016120:	e841 2300 	strex	r3, r2, [r1]
 8016124:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8016126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016128:	2b00      	cmp	r3, #0
 801612a:	d1e6      	bne.n	80160fa <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	3308      	adds	r3, #8
 8016132:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016136:	e853 3f00 	ldrex	r3, [r3]
 801613a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801613c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801613e:	f043 0301 	orr.w	r3, r3, #1
 8016142:	653b      	str	r3, [r7, #80]	@ 0x50
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	3308      	adds	r3, #8
 801614a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801614c:	637a      	str	r2, [r7, #52]	@ 0x34
 801614e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016150:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016152:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016154:	e841 2300 	strex	r3, r2, [r1]
 8016158:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801615a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801615c:	2b00      	cmp	r3, #0
 801615e:	d1e5      	bne.n	801612c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	3308      	adds	r3, #8
 8016166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016168:	697b      	ldr	r3, [r7, #20]
 801616a:	e853 3f00 	ldrex	r3, [r3]
 801616e:	613b      	str	r3, [r7, #16]
   return(result);
 8016170:	693b      	ldr	r3, [r7, #16]
 8016172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016176:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	3308      	adds	r3, #8
 801617e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8016180:	623a      	str	r2, [r7, #32]
 8016182:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016184:	69f9      	ldr	r1, [r7, #28]
 8016186:	6a3a      	ldr	r2, [r7, #32]
 8016188:	e841 2300 	strex	r3, r2, [r1]
 801618c:	61bb      	str	r3, [r7, #24]
   return(result);
 801618e:	69bb      	ldr	r3, [r7, #24]
 8016190:	2b00      	cmp	r3, #0
 8016192:	d1e5      	bne.n	8016160 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8016194:	2300      	movs	r3, #0
}
 8016196:	4618      	mov	r0, r3
 8016198:	3758      	adds	r7, #88	@ 0x58
 801619a:	46bd      	mov	sp, r7
 801619c:	bd80      	pop	{r7, pc}
 801619e:	bf00      	nop
 80161a0:	08016377 	.word	0x08016377
 80161a4:	080164a3 	.word	0x080164a3
 80161a8:	080164e1 	.word	0x080164e1

080161ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80161ac:	b480      	push	{r7}
 80161ae:	b089      	sub	sp, #36	@ 0x24
 80161b0:	af00      	add	r7, sp, #0
 80161b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	e853 3f00 	ldrex	r3, [r3]
 80161c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80161c2:	68bb      	ldr	r3, [r7, #8]
 80161c4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80161c8:	61fb      	str	r3, [r7, #28]
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	461a      	mov	r2, r3
 80161d0:	69fb      	ldr	r3, [r7, #28]
 80161d2:	61bb      	str	r3, [r7, #24]
 80161d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161d6:	6979      	ldr	r1, [r7, #20]
 80161d8:	69ba      	ldr	r2, [r7, #24]
 80161da:	e841 2300 	strex	r3, r2, [r1]
 80161de:	613b      	str	r3, [r7, #16]
   return(result);
 80161e0:	693b      	ldr	r3, [r7, #16]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d1e6      	bne.n	80161b4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	2220      	movs	r2, #32
 80161ea:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80161ec:	bf00      	nop
 80161ee:	3724      	adds	r7, #36	@ 0x24
 80161f0:	46bd      	mov	sp, r7
 80161f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f6:	4770      	bx	lr

080161f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80161f8:	b480      	push	{r7}
 80161fa:	b095      	sub	sp, #84	@ 0x54
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016208:	e853 3f00 	ldrex	r3, [r3]
 801620c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801620e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016210:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8016214:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	461a      	mov	r2, r3
 801621c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801621e:	643b      	str	r3, [r7, #64]	@ 0x40
 8016220:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016222:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8016224:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016226:	e841 2300 	strex	r3, r2, [r1]
 801622a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801622c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801622e:	2b00      	cmp	r3, #0
 8016230:	d1e6      	bne.n	8016200 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	3308      	adds	r3, #8
 8016238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801623a:	6a3b      	ldr	r3, [r7, #32]
 801623c:	e853 3f00 	ldrex	r3, [r3]
 8016240:	61fb      	str	r3, [r7, #28]
   return(result);
 8016242:	69fb      	ldr	r3, [r7, #28]
 8016244:	f023 0301 	bic.w	r3, r3, #1
 8016248:	64bb      	str	r3, [r7, #72]	@ 0x48
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	3308      	adds	r3, #8
 8016250:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016252:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8016254:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016256:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016258:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801625a:	e841 2300 	strex	r3, r2, [r1]
 801625e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8016260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016262:	2b00      	cmp	r3, #0
 8016264:	d1e5      	bne.n	8016232 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801626a:	2b01      	cmp	r3, #1
 801626c:	d118      	bne.n	80162a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	e853 3f00 	ldrex	r3, [r3]
 801627a:	60bb      	str	r3, [r7, #8]
   return(result);
 801627c:	68bb      	ldr	r3, [r7, #8]
 801627e:	f023 0310 	bic.w	r3, r3, #16
 8016282:	647b      	str	r3, [r7, #68]	@ 0x44
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	461a      	mov	r2, r3
 801628a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801628c:	61bb      	str	r3, [r7, #24]
 801628e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016290:	6979      	ldr	r1, [r7, #20]
 8016292:	69ba      	ldr	r2, [r7, #24]
 8016294:	e841 2300 	strex	r3, r2, [r1]
 8016298:	613b      	str	r3, [r7, #16]
   return(result);
 801629a:	693b      	ldr	r3, [r7, #16]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d1e6      	bne.n	801626e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	2220      	movs	r2, #32
 80162a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	2200      	movs	r2, #0
 80162ac:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	2200      	movs	r2, #0
 80162b2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80162b4:	bf00      	nop
 80162b6:	3754      	adds	r7, #84	@ 0x54
 80162b8:	46bd      	mov	sp, r7
 80162ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162be:	4770      	bx	lr

080162c0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80162c0:	b580      	push	{r7, lr}
 80162c2:	b090      	sub	sp, #64	@ 0x40
 80162c4:	af00      	add	r7, sp, #0
 80162c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80162cc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	f003 0320 	and.w	r3, r3, #32
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d137      	bne.n	801634c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80162dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80162de:	2200      	movs	r2, #0
 80162e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80162e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	3308      	adds	r3, #8
 80162ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162ee:	e853 3f00 	ldrex	r3, [r3]
 80162f2:	623b      	str	r3, [r7, #32]
   return(result);
 80162f4:	6a3b      	ldr	r3, [r7, #32]
 80162f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80162fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80162fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	3308      	adds	r3, #8
 8016302:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016304:	633a      	str	r2, [r7, #48]	@ 0x30
 8016306:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016308:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801630a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801630c:	e841 2300 	strex	r3, r2, [r1]
 8016310:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8016312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016314:	2b00      	cmp	r3, #0
 8016316:	d1e5      	bne.n	80162e4 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8016318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801631e:	693b      	ldr	r3, [r7, #16]
 8016320:	e853 3f00 	ldrex	r3, [r3]
 8016324:	60fb      	str	r3, [r7, #12]
   return(result);
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801632c:	637b      	str	r3, [r7, #52]	@ 0x34
 801632e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	461a      	mov	r2, r3
 8016334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016336:	61fb      	str	r3, [r7, #28]
 8016338:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801633a:	69b9      	ldr	r1, [r7, #24]
 801633c:	69fa      	ldr	r2, [r7, #28]
 801633e:	e841 2300 	strex	r3, r2, [r1]
 8016342:	617b      	str	r3, [r7, #20]
   return(result);
 8016344:	697b      	ldr	r3, [r7, #20]
 8016346:	2b00      	cmp	r3, #0
 8016348:	d1e6      	bne.n	8016318 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801634a:	e002      	b.n	8016352 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 801634c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801634e:	f7ec fde3 	bl	8002f18 <HAL_UART_TxCpltCallback>
}
 8016352:	bf00      	nop
 8016354:	3740      	adds	r7, #64	@ 0x40
 8016356:	46bd      	mov	sp, r7
 8016358:	bd80      	pop	{r7, pc}

0801635a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801635a:	b580      	push	{r7, lr}
 801635c:	b084      	sub	sp, #16
 801635e:	af00      	add	r7, sp, #0
 8016360:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016366:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8016368:	68f8      	ldr	r0, [r7, #12]
 801636a:	f7ff f9f1 	bl	8015750 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801636e:	bf00      	nop
 8016370:	3710      	adds	r7, #16
 8016372:	46bd      	mov	sp, r7
 8016374:	bd80      	pop	{r7, pc}

08016376 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8016376:	b580      	push	{r7, lr}
 8016378:	b09c      	sub	sp, #112	@ 0x70
 801637a:	af00      	add	r7, sp, #0
 801637c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016382:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	f003 0320 	and.w	r3, r3, #32
 801638e:	2b00      	cmp	r3, #0
 8016390:	d171      	bne.n	8016476 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8016392:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016394:	2200      	movs	r2, #0
 8016396:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801639a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80163a2:	e853 3f00 	ldrex	r3, [r3]
 80163a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80163a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80163aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80163ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80163b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	461a      	mov	r2, r3
 80163b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80163b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80163ba:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80163be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80163c0:	e841 2300 	strex	r3, r2, [r1]
 80163c4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80163c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d1e6      	bne.n	801639a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80163cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	3308      	adds	r3, #8
 80163d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80163d6:	e853 3f00 	ldrex	r3, [r3]
 80163da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80163dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80163de:	f023 0301 	bic.w	r3, r3, #1
 80163e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80163e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	3308      	adds	r3, #8
 80163ea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80163ec:	647a      	str	r2, [r7, #68]	@ 0x44
 80163ee:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80163f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80163f4:	e841 2300 	strex	r3, r2, [r1]
 80163f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80163fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d1e5      	bne.n	80163cc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016400:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	3308      	adds	r3, #8
 8016406:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801640a:	e853 3f00 	ldrex	r3, [r3]
 801640e:	623b      	str	r3, [r7, #32]
   return(result);
 8016410:	6a3b      	ldr	r3, [r7, #32]
 8016412:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016416:	663b      	str	r3, [r7, #96]	@ 0x60
 8016418:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	3308      	adds	r3, #8
 801641e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8016420:	633a      	str	r2, [r7, #48]	@ 0x30
 8016422:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016424:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016426:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016428:	e841 2300 	strex	r3, r2, [r1]
 801642c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801642e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016430:	2b00      	cmp	r3, #0
 8016432:	d1e5      	bne.n	8016400 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016436:	2220      	movs	r2, #32
 8016438:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801643c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801643e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016440:	2b01      	cmp	r3, #1
 8016442:	d118      	bne.n	8016476 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801644a:	693b      	ldr	r3, [r7, #16]
 801644c:	e853 3f00 	ldrex	r3, [r3]
 8016450:	60fb      	str	r3, [r7, #12]
   return(result);
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	f023 0310 	bic.w	r3, r3, #16
 8016458:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801645a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	461a      	mov	r2, r3
 8016460:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016462:	61fb      	str	r3, [r7, #28]
 8016464:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016466:	69b9      	ldr	r1, [r7, #24]
 8016468:	69fa      	ldr	r2, [r7, #28]
 801646a:	e841 2300 	strex	r3, r2, [r1]
 801646e:	617b      	str	r3, [r7, #20]
   return(result);
 8016470:	697b      	ldr	r3, [r7, #20]
 8016472:	2b00      	cmp	r3, #0
 8016474:	d1e6      	bne.n	8016444 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016476:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016478:	2200      	movs	r2, #0
 801647a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801647c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801647e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016480:	2b01      	cmp	r3, #1
 8016482:	d107      	bne.n	8016494 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016484:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016486:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801648a:	4619      	mov	r1, r3
 801648c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801648e:	f7ec fca5 	bl	8002ddc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8016492:	e002      	b.n	801649a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8016494:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8016496:	f7ec fd35 	bl	8002f04 <HAL_UART_RxCpltCallback>
}
 801649a:	bf00      	nop
 801649c:	3770      	adds	r7, #112	@ 0x70
 801649e:	46bd      	mov	sp, r7
 80164a0:	bd80      	pop	{r7, pc}

080164a2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80164a2:	b580      	push	{r7, lr}
 80164a4:	b084      	sub	sp, #16
 80164a6:	af00      	add	r7, sp, #0
 80164a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80164ae:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	2201      	movs	r2, #1
 80164b4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80164ba:	2b01      	cmp	r3, #1
 80164bc:	d109      	bne.n	80164d2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80164c4:	085b      	lsrs	r3, r3, #1
 80164c6:	b29b      	uxth	r3, r3
 80164c8:	4619      	mov	r1, r3
 80164ca:	68f8      	ldr	r0, [r7, #12]
 80164cc:	f7ec fc86 	bl	8002ddc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80164d0:	e002      	b.n	80164d8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80164d2:	68f8      	ldr	r0, [r7, #12]
 80164d4:	f7ff f946 	bl	8015764 <HAL_UART_RxHalfCpltCallback>
}
 80164d8:	bf00      	nop
 80164da:	3710      	adds	r7, #16
 80164dc:	46bd      	mov	sp, r7
 80164de:	bd80      	pop	{r7, pc}

080164e0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80164e0:	b580      	push	{r7, lr}
 80164e2:	b086      	sub	sp, #24
 80164e4:	af00      	add	r7, sp, #0
 80164e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80164ec:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80164ee:	697b      	ldr	r3, [r7, #20]
 80164f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80164f2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80164f4:	697b      	ldr	r3, [r7, #20]
 80164f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80164fa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80164fc:	697b      	ldr	r3, [r7, #20]
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	689b      	ldr	r3, [r3, #8]
 8016502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016506:	2b80      	cmp	r3, #128	@ 0x80
 8016508:	d109      	bne.n	801651e <UART_DMAError+0x3e>
 801650a:	693b      	ldr	r3, [r7, #16]
 801650c:	2b21      	cmp	r3, #33	@ 0x21
 801650e:	d106      	bne.n	801651e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8016510:	697b      	ldr	r3, [r7, #20]
 8016512:	2200      	movs	r2, #0
 8016514:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8016518:	6978      	ldr	r0, [r7, #20]
 801651a:	f7ff fe47 	bl	80161ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801651e:	697b      	ldr	r3, [r7, #20]
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	689b      	ldr	r3, [r3, #8]
 8016524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016528:	2b40      	cmp	r3, #64	@ 0x40
 801652a:	d109      	bne.n	8016540 <UART_DMAError+0x60>
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	2b22      	cmp	r3, #34	@ 0x22
 8016530:	d106      	bne.n	8016540 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8016532:	697b      	ldr	r3, [r7, #20]
 8016534:	2200      	movs	r2, #0
 8016536:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 801653a:	6978      	ldr	r0, [r7, #20]
 801653c:	f7ff fe5c 	bl	80161f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8016540:	697b      	ldr	r3, [r7, #20]
 8016542:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016546:	f043 0210 	orr.w	r2, r3, #16
 801654a:	697b      	ldr	r3, [r7, #20]
 801654c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8016550:	6978      	ldr	r0, [r7, #20]
 8016552:	f7ff f911 	bl	8015778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016556:	bf00      	nop
 8016558:	3718      	adds	r7, #24
 801655a:	46bd      	mov	sp, r7
 801655c:	bd80      	pop	{r7, pc}

0801655e <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 801655e:	b580      	push	{r7, lr}
 8016560:	b088      	sub	sp, #32
 8016562:	af00      	add	r7, sp, #0
 8016564:	60f8      	str	r0, [r7, #12]
 8016566:	60b9      	str	r1, [r7, #8]
 8016568:	603b      	str	r3, [r7, #0]
 801656a:	4613      	mov	r3, r2
 801656c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016574:	2b20      	cmp	r3, #32
 8016576:	f040 80f0 	bne.w	801675a <HAL_UARTEx_ReceiveToIdle+0x1fc>
  {
    if ((pData == NULL) || (Size == 0U))
 801657a:	68bb      	ldr	r3, [r7, #8]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d002      	beq.n	8016586 <HAL_UARTEx_ReceiveToIdle+0x28>
 8016580:	88fb      	ldrh	r3, [r7, #6]
 8016582:	2b00      	cmp	r3, #0
 8016584:	d101      	bne.n	801658a <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 8016586:	2301      	movs	r3, #1
 8016588:	e0e8      	b.n	801675c <HAL_UARTEx_ReceiveToIdle+0x1fe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	2200      	movs	r2, #0
 801658e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	2222      	movs	r2, #34	@ 0x22
 8016596:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	2201      	movs	r2, #1
 801659e:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	2200      	movs	r2, #0
 80165a4:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80165a6:	f7f5 f953 	bl	800b850 <HAL_GetTick>
 80165aa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	88fa      	ldrh	r2, [r7, #6]
 80165b0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	88fa      	ldrh	r2, [r7, #6]
 80165b8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	689b      	ldr	r3, [r3, #8]
 80165c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80165c4:	d10e      	bne.n	80165e4 <HAL_UARTEx_ReceiveToIdle+0x86>
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	691b      	ldr	r3, [r3, #16]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d105      	bne.n	80165da <HAL_UARTEx_ReceiveToIdle+0x7c>
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80165d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80165d8:	e02d      	b.n	8016636 <HAL_UARTEx_ReceiveToIdle+0xd8>
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	22ff      	movs	r2, #255	@ 0xff
 80165de:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80165e2:	e028      	b.n	8016636 <HAL_UARTEx_ReceiveToIdle+0xd8>
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	689b      	ldr	r3, [r3, #8]
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d10d      	bne.n	8016608 <HAL_UARTEx_ReceiveToIdle+0xaa>
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	691b      	ldr	r3, [r3, #16]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d104      	bne.n	80165fe <HAL_UARTEx_ReceiveToIdle+0xa0>
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	22ff      	movs	r2, #255	@ 0xff
 80165f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80165fc:	e01b      	b.n	8016636 <HAL_UARTEx_ReceiveToIdle+0xd8>
 80165fe:	68fb      	ldr	r3, [r7, #12]
 8016600:	227f      	movs	r2, #127	@ 0x7f
 8016602:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8016606:	e016      	b.n	8016636 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	689b      	ldr	r3, [r3, #8]
 801660c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016610:	d10d      	bne.n	801662e <HAL_UARTEx_ReceiveToIdle+0xd0>
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	691b      	ldr	r3, [r3, #16]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d104      	bne.n	8016624 <HAL_UARTEx_ReceiveToIdle+0xc6>
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	227f      	movs	r2, #127	@ 0x7f
 801661e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8016622:	e008      	b.n	8016636 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	223f      	movs	r2, #63	@ 0x3f
 8016628:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801662c:	e003      	b.n	8016636 <HAL_UARTEx_ReceiveToIdle+0xd8>
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	2200      	movs	r2, #0
 8016632:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801663c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801663e:	68fb      	ldr	r3, [r7, #12]
 8016640:	689b      	ldr	r3, [r3, #8]
 8016642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016646:	d108      	bne.n	801665a <HAL_UARTEx_ReceiveToIdle+0xfc>
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	691b      	ldr	r3, [r3, #16]
 801664c:	2b00      	cmp	r3, #0
 801664e:	d104      	bne.n	801665a <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 8016650:	2300      	movs	r3, #0
 8016652:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8016654:	68bb      	ldr	r3, [r7, #8]
 8016656:	61bb      	str	r3, [r7, #24]
 8016658:	e003      	b.n	8016662 <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 801665a:	68bb      	ldr	r3, [r7, #8]
 801665c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801665e:	2300      	movs	r3, #0
 8016660:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8016662:	683b      	ldr	r3, [r7, #0]
 8016664:	2200      	movs	r2, #0
 8016666:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8016668:	e060      	b.n	801672c <HAL_UARTEx_ReceiveToIdle+0x1ce>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	69db      	ldr	r3, [r3, #28]
 8016670:	f003 0310 	and.w	r3, r3, #16
 8016674:	2b10      	cmp	r3, #16
 8016676:	d110      	bne.n	801669a <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	2210      	movs	r2, #16
 801667e:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8016680:	683b      	ldr	r3, [r7, #0]
 8016682:	881b      	ldrh	r3, [r3, #0]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d008      	beq.n	801669a <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	2202      	movs	r2, #2
 801668c:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	2220      	movs	r2, #32
 8016692:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_OK;
 8016696:	2300      	movs	r3, #0
 8016698:	e060      	b.n	801675c <HAL_UARTEx_ReceiveToIdle+0x1fe>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	69db      	ldr	r3, [r3, #28]
 80166a0:	f003 0320 	and.w	r3, r3, #32
 80166a4:	2b20      	cmp	r3, #32
 80166a6:	d12c      	bne.n	8016702 <HAL_UARTEx_ReceiveToIdle+0x1a4>
      {
        if (pdata8bits == NULL)
 80166a8:	69fb      	ldr	r3, [r7, #28]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d10c      	bne.n	80166c8 <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80166b4:	b29a      	uxth	r2, r3
 80166b6:	8a7b      	ldrh	r3, [r7, #18]
 80166b8:	4013      	ands	r3, r2
 80166ba:	b29a      	uxth	r2, r3
 80166bc:	69bb      	ldr	r3, [r7, #24]
 80166be:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 80166c0:	69bb      	ldr	r3, [r7, #24]
 80166c2:	3302      	adds	r3, #2
 80166c4:	61bb      	str	r3, [r7, #24]
 80166c6:	e00d      	b.n	80166e4 <HAL_UARTEx_ReceiveToIdle+0x186>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80166ce:	b29b      	uxth	r3, r3
 80166d0:	b2da      	uxtb	r2, r3
 80166d2:	8a7b      	ldrh	r3, [r7, #18]
 80166d4:	b2db      	uxtb	r3, r3
 80166d6:	4013      	ands	r3, r2
 80166d8:	b2da      	uxtb	r2, r3
 80166da:	69fb      	ldr	r3, [r7, #28]
 80166dc:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 80166de:	69fb      	ldr	r3, [r7, #28]
 80166e0:	3301      	adds	r3, #1
 80166e2:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 80166e4:	683b      	ldr	r3, [r7, #0]
 80166e6:	881b      	ldrh	r3, [r3, #0]
 80166e8:	3301      	adds	r3, #1
 80166ea:	b29a      	uxth	r2, r3
 80166ec:	683b      	ldr	r3, [r7, #0]
 80166ee:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 80166f0:	68fb      	ldr	r3, [r7, #12]
 80166f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80166f6:	b29b      	uxth	r3, r3
 80166f8:	3b01      	subs	r3, #1
 80166fa:	b29a      	uxth	r2, r3
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8016702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016708:	d010      	beq.n	801672c <HAL_UARTEx_ReceiveToIdle+0x1ce>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801670a:	f7f5 f8a1 	bl	800b850 <HAL_GetTick>
 801670e:	4602      	mov	r2, r0
 8016710:	697b      	ldr	r3, [r7, #20]
 8016712:	1ad3      	subs	r3, r2, r3
 8016714:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016716:	429a      	cmp	r2, r3
 8016718:	d302      	bcc.n	8016720 <HAL_UARTEx_ReceiveToIdle+0x1c2>
 801671a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801671c:	2b00      	cmp	r3, #0
 801671e:	d105      	bne.n	801672c <HAL_UARTEx_ReceiveToIdle+0x1ce>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	2220      	movs	r2, #32
 8016724:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8016728:	2303      	movs	r3, #3
 801672a:	e017      	b.n	801675c <HAL_UARTEx_ReceiveToIdle+0x1fe>
    while (huart->RxXferCount > 0U)
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8016732:	b29b      	uxth	r3, r3
 8016734:	2b00      	cmp	r3, #0
 8016736:	d198      	bne.n	801666a <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8016744:	b29b      	uxth	r3, r3
 8016746:	1ad3      	subs	r3, r2, r3
 8016748:	b29a      	uxth	r2, r3
 801674a:	683b      	ldr	r3, [r7, #0]
 801674c:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	2220      	movs	r2, #32
 8016752:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8016756:	2300      	movs	r3, #0
 8016758:	e000      	b.n	801675c <HAL_UARTEx_ReceiveToIdle+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 801675a:	2302      	movs	r3, #2
  }
}
 801675c:	4618      	mov	r0, r3
 801675e:	3720      	adds	r7, #32
 8016760:	46bd      	mov	sp, r7
 8016762:	bd80      	pop	{r7, pc}

08016764 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016764:	b580      	push	{r7, lr}
 8016766:	b08c      	sub	sp, #48	@ 0x30
 8016768:	af00      	add	r7, sp, #0
 801676a:	60f8      	str	r0, [r7, #12]
 801676c:	60b9      	str	r1, [r7, #8]
 801676e:	4613      	mov	r3, r2
 8016770:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016778:	2b20      	cmp	r3, #32
 801677a:	d142      	bne.n	8016802 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 801677c:	68bb      	ldr	r3, [r7, #8]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d002      	beq.n	8016788 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8016782:	88fb      	ldrh	r3, [r7, #6]
 8016784:	2b00      	cmp	r3, #0
 8016786:	d101      	bne.n	801678c <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8016788:	2301      	movs	r3, #1
 801678a:	e03b      	b.n	8016804 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	2201      	movs	r2, #1
 8016790:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	2200      	movs	r2, #0
 8016796:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8016798:	88fb      	ldrh	r3, [r7, #6]
 801679a:	461a      	mov	r2, r3
 801679c:	68b9      	ldr	r1, [r7, #8]
 801679e:	68f8      	ldr	r0, [r7, #12]
 80167a0:	f7ff fc64 	bl	801606c <UART_Start_Receive_DMA>
 80167a4:	4603      	mov	r3, r0
 80167a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80167aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d124      	bne.n	80167fc <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80167b6:	2b01      	cmp	r3, #1
 80167b8:	d11d      	bne.n	80167f6 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	681b      	ldr	r3, [r3, #0]
 80167be:	2210      	movs	r2, #16
 80167c0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167c8:	69bb      	ldr	r3, [r7, #24]
 80167ca:	e853 3f00 	ldrex	r3, [r3]
 80167ce:	617b      	str	r3, [r7, #20]
   return(result);
 80167d0:	697b      	ldr	r3, [r7, #20]
 80167d2:	f043 0310 	orr.w	r3, r3, #16
 80167d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	461a      	mov	r2, r3
 80167de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80167e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80167e2:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167e4:	6a39      	ldr	r1, [r7, #32]
 80167e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80167e8:	e841 2300 	strex	r3, r2, [r1]
 80167ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80167ee:	69fb      	ldr	r3, [r7, #28]
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d1e6      	bne.n	80167c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80167f4:	e002      	b.n	80167fc <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80167f6:	2301      	movs	r3, #1
 80167f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80167fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8016800:	e000      	b.n	8016804 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8016802:	2302      	movs	r3, #2
  }
}
 8016804:	4618      	mov	r0, r3
 8016806:	3730      	adds	r7, #48	@ 0x30
 8016808:	46bd      	mov	sp, r7
 801680a:	bd80      	pop	{r7, pc}

0801680c <atoi>:
 801680c:	220a      	movs	r2, #10
 801680e:	2100      	movs	r1, #0
 8016810:	f000 b87c 	b.w	801690c <strtol>

08016814 <_strtol_l.isra.0>:
 8016814:	2b24      	cmp	r3, #36	@ 0x24
 8016816:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801681a:	4686      	mov	lr, r0
 801681c:	4690      	mov	r8, r2
 801681e:	d801      	bhi.n	8016824 <_strtol_l.isra.0+0x10>
 8016820:	2b01      	cmp	r3, #1
 8016822:	d106      	bne.n	8016832 <_strtol_l.isra.0+0x1e>
 8016824:	f000 f92c 	bl	8016a80 <__errno>
 8016828:	2316      	movs	r3, #22
 801682a:	6003      	str	r3, [r0, #0]
 801682c:	2000      	movs	r0, #0
 801682e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016832:	4834      	ldr	r0, [pc, #208]	@ (8016904 <_strtol_l.isra.0+0xf0>)
 8016834:	460d      	mov	r5, r1
 8016836:	462a      	mov	r2, r5
 8016838:	f815 4b01 	ldrb.w	r4, [r5], #1
 801683c:	5d06      	ldrb	r6, [r0, r4]
 801683e:	f016 0608 	ands.w	r6, r6, #8
 8016842:	d1f8      	bne.n	8016836 <_strtol_l.isra.0+0x22>
 8016844:	2c2d      	cmp	r4, #45	@ 0x2d
 8016846:	d110      	bne.n	801686a <_strtol_l.isra.0+0x56>
 8016848:	782c      	ldrb	r4, [r5, #0]
 801684a:	2601      	movs	r6, #1
 801684c:	1c95      	adds	r5, r2, #2
 801684e:	f033 0210 	bics.w	r2, r3, #16
 8016852:	d115      	bne.n	8016880 <_strtol_l.isra.0+0x6c>
 8016854:	2c30      	cmp	r4, #48	@ 0x30
 8016856:	d10d      	bne.n	8016874 <_strtol_l.isra.0+0x60>
 8016858:	782a      	ldrb	r2, [r5, #0]
 801685a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801685e:	2a58      	cmp	r2, #88	@ 0x58
 8016860:	d108      	bne.n	8016874 <_strtol_l.isra.0+0x60>
 8016862:	786c      	ldrb	r4, [r5, #1]
 8016864:	3502      	adds	r5, #2
 8016866:	2310      	movs	r3, #16
 8016868:	e00a      	b.n	8016880 <_strtol_l.isra.0+0x6c>
 801686a:	2c2b      	cmp	r4, #43	@ 0x2b
 801686c:	bf04      	itt	eq
 801686e:	782c      	ldrbeq	r4, [r5, #0]
 8016870:	1c95      	addeq	r5, r2, #2
 8016872:	e7ec      	b.n	801684e <_strtol_l.isra.0+0x3a>
 8016874:	2b00      	cmp	r3, #0
 8016876:	d1f6      	bne.n	8016866 <_strtol_l.isra.0+0x52>
 8016878:	2c30      	cmp	r4, #48	@ 0x30
 801687a:	bf14      	ite	ne
 801687c:	230a      	movne	r3, #10
 801687e:	2308      	moveq	r3, #8
 8016880:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016884:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016888:	2200      	movs	r2, #0
 801688a:	fbbc f9f3 	udiv	r9, ip, r3
 801688e:	4610      	mov	r0, r2
 8016890:	fb03 ca19 	mls	sl, r3, r9, ip
 8016894:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8016898:	2f09      	cmp	r7, #9
 801689a:	d80f      	bhi.n	80168bc <_strtol_l.isra.0+0xa8>
 801689c:	463c      	mov	r4, r7
 801689e:	42a3      	cmp	r3, r4
 80168a0:	dd1b      	ble.n	80168da <_strtol_l.isra.0+0xc6>
 80168a2:	1c57      	adds	r7, r2, #1
 80168a4:	d007      	beq.n	80168b6 <_strtol_l.isra.0+0xa2>
 80168a6:	4581      	cmp	r9, r0
 80168a8:	d314      	bcc.n	80168d4 <_strtol_l.isra.0+0xc0>
 80168aa:	d101      	bne.n	80168b0 <_strtol_l.isra.0+0x9c>
 80168ac:	45a2      	cmp	sl, r4
 80168ae:	db11      	blt.n	80168d4 <_strtol_l.isra.0+0xc0>
 80168b0:	fb00 4003 	mla	r0, r0, r3, r4
 80168b4:	2201      	movs	r2, #1
 80168b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80168ba:	e7eb      	b.n	8016894 <_strtol_l.isra.0+0x80>
 80168bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80168c0:	2f19      	cmp	r7, #25
 80168c2:	d801      	bhi.n	80168c8 <_strtol_l.isra.0+0xb4>
 80168c4:	3c37      	subs	r4, #55	@ 0x37
 80168c6:	e7ea      	b.n	801689e <_strtol_l.isra.0+0x8a>
 80168c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80168cc:	2f19      	cmp	r7, #25
 80168ce:	d804      	bhi.n	80168da <_strtol_l.isra.0+0xc6>
 80168d0:	3c57      	subs	r4, #87	@ 0x57
 80168d2:	e7e4      	b.n	801689e <_strtol_l.isra.0+0x8a>
 80168d4:	f04f 32ff 	mov.w	r2, #4294967295
 80168d8:	e7ed      	b.n	80168b6 <_strtol_l.isra.0+0xa2>
 80168da:	1c53      	adds	r3, r2, #1
 80168dc:	d108      	bne.n	80168f0 <_strtol_l.isra.0+0xdc>
 80168de:	2322      	movs	r3, #34	@ 0x22
 80168e0:	f8ce 3000 	str.w	r3, [lr]
 80168e4:	4660      	mov	r0, ip
 80168e6:	f1b8 0f00 	cmp.w	r8, #0
 80168ea:	d0a0      	beq.n	801682e <_strtol_l.isra.0+0x1a>
 80168ec:	1e69      	subs	r1, r5, #1
 80168ee:	e006      	b.n	80168fe <_strtol_l.isra.0+0xea>
 80168f0:	b106      	cbz	r6, 80168f4 <_strtol_l.isra.0+0xe0>
 80168f2:	4240      	negs	r0, r0
 80168f4:	f1b8 0f00 	cmp.w	r8, #0
 80168f8:	d099      	beq.n	801682e <_strtol_l.isra.0+0x1a>
 80168fa:	2a00      	cmp	r2, #0
 80168fc:	d1f6      	bne.n	80168ec <_strtol_l.isra.0+0xd8>
 80168fe:	f8c8 1000 	str.w	r1, [r8]
 8016902:	e794      	b.n	801682e <_strtol_l.isra.0+0x1a>
 8016904:	080184d3 	.word	0x080184d3

08016908 <_strtol_r>:
 8016908:	f7ff bf84 	b.w	8016814 <_strtol_l.isra.0>

0801690c <strtol>:
 801690c:	4613      	mov	r3, r2
 801690e:	460a      	mov	r2, r1
 8016910:	4601      	mov	r1, r0
 8016912:	4802      	ldr	r0, [pc, #8]	@ (801691c <strtol+0x10>)
 8016914:	6800      	ldr	r0, [r0, #0]
 8016916:	f7ff bf7d 	b.w	8016814 <_strtol_l.isra.0>
 801691a:	bf00      	nop
 801691c:	20000034 	.word	0x20000034

08016920 <siprintf>:
 8016920:	b40e      	push	{r1, r2, r3}
 8016922:	b510      	push	{r4, lr}
 8016924:	b09d      	sub	sp, #116	@ 0x74
 8016926:	ab1f      	add	r3, sp, #124	@ 0x7c
 8016928:	9002      	str	r0, [sp, #8]
 801692a:	9006      	str	r0, [sp, #24]
 801692c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016930:	480a      	ldr	r0, [pc, #40]	@ (801695c <siprintf+0x3c>)
 8016932:	9107      	str	r1, [sp, #28]
 8016934:	9104      	str	r1, [sp, #16]
 8016936:	490a      	ldr	r1, [pc, #40]	@ (8016960 <siprintf+0x40>)
 8016938:	f853 2b04 	ldr.w	r2, [r3], #4
 801693c:	9105      	str	r1, [sp, #20]
 801693e:	2400      	movs	r4, #0
 8016940:	a902      	add	r1, sp, #8
 8016942:	6800      	ldr	r0, [r0, #0]
 8016944:	9301      	str	r3, [sp, #4]
 8016946:	941b      	str	r4, [sp, #108]	@ 0x6c
 8016948:	f000 fa30 	bl	8016dac <_svfiprintf_r>
 801694c:	9b02      	ldr	r3, [sp, #8]
 801694e:	701c      	strb	r4, [r3, #0]
 8016950:	b01d      	add	sp, #116	@ 0x74
 8016952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016956:	b003      	add	sp, #12
 8016958:	4770      	bx	lr
 801695a:	bf00      	nop
 801695c:	20000034 	.word	0x20000034
 8016960:	ffff0208 	.word	0xffff0208

08016964 <siscanf>:
 8016964:	b40e      	push	{r1, r2, r3}
 8016966:	b570      	push	{r4, r5, r6, lr}
 8016968:	b09d      	sub	sp, #116	@ 0x74
 801696a:	ac21      	add	r4, sp, #132	@ 0x84
 801696c:	2500      	movs	r5, #0
 801696e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8016972:	f854 6b04 	ldr.w	r6, [r4], #4
 8016976:	f8ad 2014 	strh.w	r2, [sp, #20]
 801697a:	951b      	str	r5, [sp, #108]	@ 0x6c
 801697c:	9002      	str	r0, [sp, #8]
 801697e:	9006      	str	r0, [sp, #24]
 8016980:	f7e9 fc30 	bl	80001e4 <strlen>
 8016984:	4b0b      	ldr	r3, [pc, #44]	@ (80169b4 <siscanf+0x50>)
 8016986:	9003      	str	r0, [sp, #12]
 8016988:	9007      	str	r0, [sp, #28]
 801698a:	480b      	ldr	r0, [pc, #44]	@ (80169b8 <siscanf+0x54>)
 801698c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801698e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016992:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016996:	4632      	mov	r2, r6
 8016998:	4623      	mov	r3, r4
 801699a:	a902      	add	r1, sp, #8
 801699c:	6800      	ldr	r0, [r0, #0]
 801699e:	950f      	str	r5, [sp, #60]	@ 0x3c
 80169a0:	9514      	str	r5, [sp, #80]	@ 0x50
 80169a2:	9401      	str	r4, [sp, #4]
 80169a4:	f000 fb58 	bl	8017058 <__ssvfiscanf_r>
 80169a8:	b01d      	add	sp, #116	@ 0x74
 80169aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80169ae:	b003      	add	sp, #12
 80169b0:	4770      	bx	lr
 80169b2:	bf00      	nop
 80169b4:	080169bd 	.word	0x080169bd
 80169b8:	20000034 	.word	0x20000034

080169bc <__seofread>:
 80169bc:	2000      	movs	r0, #0
 80169be:	4770      	bx	lr

080169c0 <memcmp>:
 80169c0:	b510      	push	{r4, lr}
 80169c2:	3901      	subs	r1, #1
 80169c4:	4402      	add	r2, r0
 80169c6:	4290      	cmp	r0, r2
 80169c8:	d101      	bne.n	80169ce <memcmp+0xe>
 80169ca:	2000      	movs	r0, #0
 80169cc:	e005      	b.n	80169da <memcmp+0x1a>
 80169ce:	7803      	ldrb	r3, [r0, #0]
 80169d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80169d4:	42a3      	cmp	r3, r4
 80169d6:	d001      	beq.n	80169dc <memcmp+0x1c>
 80169d8:	1b18      	subs	r0, r3, r4
 80169da:	bd10      	pop	{r4, pc}
 80169dc:	3001      	adds	r0, #1
 80169de:	e7f2      	b.n	80169c6 <memcmp+0x6>

080169e0 <memset>:
 80169e0:	4402      	add	r2, r0
 80169e2:	4603      	mov	r3, r0
 80169e4:	4293      	cmp	r3, r2
 80169e6:	d100      	bne.n	80169ea <memset+0xa>
 80169e8:	4770      	bx	lr
 80169ea:	f803 1b01 	strb.w	r1, [r3], #1
 80169ee:	e7f9      	b.n	80169e4 <memset+0x4>

080169f0 <strchr>:
 80169f0:	b2c9      	uxtb	r1, r1
 80169f2:	4603      	mov	r3, r0
 80169f4:	4618      	mov	r0, r3
 80169f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80169fa:	b112      	cbz	r2, 8016a02 <strchr+0x12>
 80169fc:	428a      	cmp	r2, r1
 80169fe:	d1f9      	bne.n	80169f4 <strchr+0x4>
 8016a00:	4770      	bx	lr
 8016a02:	2900      	cmp	r1, #0
 8016a04:	bf18      	it	ne
 8016a06:	2000      	movne	r0, #0
 8016a08:	4770      	bx	lr

08016a0a <strncmp>:
 8016a0a:	b510      	push	{r4, lr}
 8016a0c:	b16a      	cbz	r2, 8016a2a <strncmp+0x20>
 8016a0e:	3901      	subs	r1, #1
 8016a10:	1884      	adds	r4, r0, r2
 8016a12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016a16:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016a1a:	429a      	cmp	r2, r3
 8016a1c:	d103      	bne.n	8016a26 <strncmp+0x1c>
 8016a1e:	42a0      	cmp	r0, r4
 8016a20:	d001      	beq.n	8016a26 <strncmp+0x1c>
 8016a22:	2a00      	cmp	r2, #0
 8016a24:	d1f5      	bne.n	8016a12 <strncmp+0x8>
 8016a26:	1ad0      	subs	r0, r2, r3
 8016a28:	bd10      	pop	{r4, pc}
 8016a2a:	4610      	mov	r0, r2
 8016a2c:	e7fc      	b.n	8016a28 <strncmp+0x1e>

08016a2e <strncpy>:
 8016a2e:	b510      	push	{r4, lr}
 8016a30:	3901      	subs	r1, #1
 8016a32:	4603      	mov	r3, r0
 8016a34:	b132      	cbz	r2, 8016a44 <strncpy+0x16>
 8016a36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016a3a:	f803 4b01 	strb.w	r4, [r3], #1
 8016a3e:	3a01      	subs	r2, #1
 8016a40:	2c00      	cmp	r4, #0
 8016a42:	d1f7      	bne.n	8016a34 <strncpy+0x6>
 8016a44:	441a      	add	r2, r3
 8016a46:	2100      	movs	r1, #0
 8016a48:	4293      	cmp	r3, r2
 8016a4a:	d100      	bne.n	8016a4e <strncpy+0x20>
 8016a4c:	bd10      	pop	{r4, pc}
 8016a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8016a52:	e7f9      	b.n	8016a48 <strncpy+0x1a>

08016a54 <strstr>:
 8016a54:	780a      	ldrb	r2, [r1, #0]
 8016a56:	b570      	push	{r4, r5, r6, lr}
 8016a58:	b96a      	cbnz	r2, 8016a76 <strstr+0x22>
 8016a5a:	bd70      	pop	{r4, r5, r6, pc}
 8016a5c:	429a      	cmp	r2, r3
 8016a5e:	d109      	bne.n	8016a74 <strstr+0x20>
 8016a60:	460c      	mov	r4, r1
 8016a62:	4605      	mov	r5, r0
 8016a64:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d0f6      	beq.n	8016a5a <strstr+0x6>
 8016a6c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8016a70:	429e      	cmp	r6, r3
 8016a72:	d0f7      	beq.n	8016a64 <strstr+0x10>
 8016a74:	3001      	adds	r0, #1
 8016a76:	7803      	ldrb	r3, [r0, #0]
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d1ef      	bne.n	8016a5c <strstr+0x8>
 8016a7c:	4618      	mov	r0, r3
 8016a7e:	e7ec      	b.n	8016a5a <strstr+0x6>

08016a80 <__errno>:
 8016a80:	4b01      	ldr	r3, [pc, #4]	@ (8016a88 <__errno+0x8>)
 8016a82:	6818      	ldr	r0, [r3, #0]
 8016a84:	4770      	bx	lr
 8016a86:	bf00      	nop
 8016a88:	20000034 	.word	0x20000034

08016a8c <__libc_init_array>:
 8016a8c:	b570      	push	{r4, r5, r6, lr}
 8016a8e:	4d0d      	ldr	r5, [pc, #52]	@ (8016ac4 <__libc_init_array+0x38>)
 8016a90:	4c0d      	ldr	r4, [pc, #52]	@ (8016ac8 <__libc_init_array+0x3c>)
 8016a92:	1b64      	subs	r4, r4, r5
 8016a94:	10a4      	asrs	r4, r4, #2
 8016a96:	2600      	movs	r6, #0
 8016a98:	42a6      	cmp	r6, r4
 8016a9a:	d109      	bne.n	8016ab0 <__libc_init_array+0x24>
 8016a9c:	4d0b      	ldr	r5, [pc, #44]	@ (8016acc <__libc_init_array+0x40>)
 8016a9e:	4c0c      	ldr	r4, [pc, #48]	@ (8016ad0 <__libc_init_array+0x44>)
 8016aa0:	f001 f86e 	bl	8017b80 <_init>
 8016aa4:	1b64      	subs	r4, r4, r5
 8016aa6:	10a4      	asrs	r4, r4, #2
 8016aa8:	2600      	movs	r6, #0
 8016aaa:	42a6      	cmp	r6, r4
 8016aac:	d105      	bne.n	8016aba <__libc_init_array+0x2e>
 8016aae:	bd70      	pop	{r4, r5, r6, pc}
 8016ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8016ab4:	4798      	blx	r3
 8016ab6:	3601      	adds	r6, #1
 8016ab8:	e7ee      	b.n	8016a98 <__libc_init_array+0xc>
 8016aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8016abe:	4798      	blx	r3
 8016ac0:	3601      	adds	r6, #1
 8016ac2:	e7f2      	b.n	8016aaa <__libc_init_array+0x1e>
 8016ac4:	0801862c 	.word	0x0801862c
 8016ac8:	0801862c 	.word	0x0801862c
 8016acc:	0801862c 	.word	0x0801862c
 8016ad0:	08018630 	.word	0x08018630

08016ad4 <__retarget_lock_acquire_recursive>:
 8016ad4:	4770      	bx	lr

08016ad6 <__retarget_lock_release_recursive>:
 8016ad6:	4770      	bx	lr

08016ad8 <strcpy>:
 8016ad8:	4603      	mov	r3, r0
 8016ada:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016ade:	f803 2b01 	strb.w	r2, [r3], #1
 8016ae2:	2a00      	cmp	r2, #0
 8016ae4:	d1f9      	bne.n	8016ada <strcpy+0x2>
 8016ae6:	4770      	bx	lr

08016ae8 <memcpy>:
 8016ae8:	440a      	add	r2, r1
 8016aea:	4291      	cmp	r1, r2
 8016aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8016af0:	d100      	bne.n	8016af4 <memcpy+0xc>
 8016af2:	4770      	bx	lr
 8016af4:	b510      	push	{r4, lr}
 8016af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016afa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016afe:	4291      	cmp	r1, r2
 8016b00:	d1f9      	bne.n	8016af6 <memcpy+0xe>
 8016b02:	bd10      	pop	{r4, pc}

08016b04 <_free_r>:
 8016b04:	b538      	push	{r3, r4, r5, lr}
 8016b06:	4605      	mov	r5, r0
 8016b08:	2900      	cmp	r1, #0
 8016b0a:	d041      	beq.n	8016b90 <_free_r+0x8c>
 8016b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b10:	1f0c      	subs	r4, r1, #4
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	bfb8      	it	lt
 8016b16:	18e4      	addlt	r4, r4, r3
 8016b18:	f000 f8e0 	bl	8016cdc <__malloc_lock>
 8016b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8016b94 <_free_r+0x90>)
 8016b1e:	6813      	ldr	r3, [r2, #0]
 8016b20:	b933      	cbnz	r3, 8016b30 <_free_r+0x2c>
 8016b22:	6063      	str	r3, [r4, #4]
 8016b24:	6014      	str	r4, [r2, #0]
 8016b26:	4628      	mov	r0, r5
 8016b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016b2c:	f000 b8dc 	b.w	8016ce8 <__malloc_unlock>
 8016b30:	42a3      	cmp	r3, r4
 8016b32:	d908      	bls.n	8016b46 <_free_r+0x42>
 8016b34:	6820      	ldr	r0, [r4, #0]
 8016b36:	1821      	adds	r1, r4, r0
 8016b38:	428b      	cmp	r3, r1
 8016b3a:	bf01      	itttt	eq
 8016b3c:	6819      	ldreq	r1, [r3, #0]
 8016b3e:	685b      	ldreq	r3, [r3, #4]
 8016b40:	1809      	addeq	r1, r1, r0
 8016b42:	6021      	streq	r1, [r4, #0]
 8016b44:	e7ed      	b.n	8016b22 <_free_r+0x1e>
 8016b46:	461a      	mov	r2, r3
 8016b48:	685b      	ldr	r3, [r3, #4]
 8016b4a:	b10b      	cbz	r3, 8016b50 <_free_r+0x4c>
 8016b4c:	42a3      	cmp	r3, r4
 8016b4e:	d9fa      	bls.n	8016b46 <_free_r+0x42>
 8016b50:	6811      	ldr	r1, [r2, #0]
 8016b52:	1850      	adds	r0, r2, r1
 8016b54:	42a0      	cmp	r0, r4
 8016b56:	d10b      	bne.n	8016b70 <_free_r+0x6c>
 8016b58:	6820      	ldr	r0, [r4, #0]
 8016b5a:	4401      	add	r1, r0
 8016b5c:	1850      	adds	r0, r2, r1
 8016b5e:	4283      	cmp	r3, r0
 8016b60:	6011      	str	r1, [r2, #0]
 8016b62:	d1e0      	bne.n	8016b26 <_free_r+0x22>
 8016b64:	6818      	ldr	r0, [r3, #0]
 8016b66:	685b      	ldr	r3, [r3, #4]
 8016b68:	6053      	str	r3, [r2, #4]
 8016b6a:	4408      	add	r0, r1
 8016b6c:	6010      	str	r0, [r2, #0]
 8016b6e:	e7da      	b.n	8016b26 <_free_r+0x22>
 8016b70:	d902      	bls.n	8016b78 <_free_r+0x74>
 8016b72:	230c      	movs	r3, #12
 8016b74:	602b      	str	r3, [r5, #0]
 8016b76:	e7d6      	b.n	8016b26 <_free_r+0x22>
 8016b78:	6820      	ldr	r0, [r4, #0]
 8016b7a:	1821      	adds	r1, r4, r0
 8016b7c:	428b      	cmp	r3, r1
 8016b7e:	bf04      	itt	eq
 8016b80:	6819      	ldreq	r1, [r3, #0]
 8016b82:	685b      	ldreq	r3, [r3, #4]
 8016b84:	6063      	str	r3, [r4, #4]
 8016b86:	bf04      	itt	eq
 8016b88:	1809      	addeq	r1, r1, r0
 8016b8a:	6021      	streq	r1, [r4, #0]
 8016b8c:	6054      	str	r4, [r2, #4]
 8016b8e:	e7ca      	b.n	8016b26 <_free_r+0x22>
 8016b90:	bd38      	pop	{r3, r4, r5, pc}
 8016b92:	bf00      	nop
 8016b94:	20005da4 	.word	0x20005da4

08016b98 <sbrk_aligned>:
 8016b98:	b570      	push	{r4, r5, r6, lr}
 8016b9a:	4e0f      	ldr	r6, [pc, #60]	@ (8016bd8 <sbrk_aligned+0x40>)
 8016b9c:	460c      	mov	r4, r1
 8016b9e:	6831      	ldr	r1, [r6, #0]
 8016ba0:	4605      	mov	r5, r0
 8016ba2:	b911      	cbnz	r1, 8016baa <sbrk_aligned+0x12>
 8016ba4:	f000 ff36 	bl	8017a14 <_sbrk_r>
 8016ba8:	6030      	str	r0, [r6, #0]
 8016baa:	4621      	mov	r1, r4
 8016bac:	4628      	mov	r0, r5
 8016bae:	f000 ff31 	bl	8017a14 <_sbrk_r>
 8016bb2:	1c43      	adds	r3, r0, #1
 8016bb4:	d103      	bne.n	8016bbe <sbrk_aligned+0x26>
 8016bb6:	f04f 34ff 	mov.w	r4, #4294967295
 8016bba:	4620      	mov	r0, r4
 8016bbc:	bd70      	pop	{r4, r5, r6, pc}
 8016bbe:	1cc4      	adds	r4, r0, #3
 8016bc0:	f024 0403 	bic.w	r4, r4, #3
 8016bc4:	42a0      	cmp	r0, r4
 8016bc6:	d0f8      	beq.n	8016bba <sbrk_aligned+0x22>
 8016bc8:	1a21      	subs	r1, r4, r0
 8016bca:	4628      	mov	r0, r5
 8016bcc:	f000 ff22 	bl	8017a14 <_sbrk_r>
 8016bd0:	3001      	adds	r0, #1
 8016bd2:	d1f2      	bne.n	8016bba <sbrk_aligned+0x22>
 8016bd4:	e7ef      	b.n	8016bb6 <sbrk_aligned+0x1e>
 8016bd6:	bf00      	nop
 8016bd8:	20005da0 	.word	0x20005da0

08016bdc <_malloc_r>:
 8016bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016be0:	1ccd      	adds	r5, r1, #3
 8016be2:	f025 0503 	bic.w	r5, r5, #3
 8016be6:	3508      	adds	r5, #8
 8016be8:	2d0c      	cmp	r5, #12
 8016bea:	bf38      	it	cc
 8016bec:	250c      	movcc	r5, #12
 8016bee:	2d00      	cmp	r5, #0
 8016bf0:	4606      	mov	r6, r0
 8016bf2:	db01      	blt.n	8016bf8 <_malloc_r+0x1c>
 8016bf4:	42a9      	cmp	r1, r5
 8016bf6:	d904      	bls.n	8016c02 <_malloc_r+0x26>
 8016bf8:	230c      	movs	r3, #12
 8016bfa:	6033      	str	r3, [r6, #0]
 8016bfc:	2000      	movs	r0, #0
 8016bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016cd8 <_malloc_r+0xfc>
 8016c06:	f000 f869 	bl	8016cdc <__malloc_lock>
 8016c0a:	f8d8 3000 	ldr.w	r3, [r8]
 8016c0e:	461c      	mov	r4, r3
 8016c10:	bb44      	cbnz	r4, 8016c64 <_malloc_r+0x88>
 8016c12:	4629      	mov	r1, r5
 8016c14:	4630      	mov	r0, r6
 8016c16:	f7ff ffbf 	bl	8016b98 <sbrk_aligned>
 8016c1a:	1c43      	adds	r3, r0, #1
 8016c1c:	4604      	mov	r4, r0
 8016c1e:	d158      	bne.n	8016cd2 <_malloc_r+0xf6>
 8016c20:	f8d8 4000 	ldr.w	r4, [r8]
 8016c24:	4627      	mov	r7, r4
 8016c26:	2f00      	cmp	r7, #0
 8016c28:	d143      	bne.n	8016cb2 <_malloc_r+0xd6>
 8016c2a:	2c00      	cmp	r4, #0
 8016c2c:	d04b      	beq.n	8016cc6 <_malloc_r+0xea>
 8016c2e:	6823      	ldr	r3, [r4, #0]
 8016c30:	4639      	mov	r1, r7
 8016c32:	4630      	mov	r0, r6
 8016c34:	eb04 0903 	add.w	r9, r4, r3
 8016c38:	f000 feec 	bl	8017a14 <_sbrk_r>
 8016c3c:	4581      	cmp	r9, r0
 8016c3e:	d142      	bne.n	8016cc6 <_malloc_r+0xea>
 8016c40:	6821      	ldr	r1, [r4, #0]
 8016c42:	1a6d      	subs	r5, r5, r1
 8016c44:	4629      	mov	r1, r5
 8016c46:	4630      	mov	r0, r6
 8016c48:	f7ff ffa6 	bl	8016b98 <sbrk_aligned>
 8016c4c:	3001      	adds	r0, #1
 8016c4e:	d03a      	beq.n	8016cc6 <_malloc_r+0xea>
 8016c50:	6823      	ldr	r3, [r4, #0]
 8016c52:	442b      	add	r3, r5
 8016c54:	6023      	str	r3, [r4, #0]
 8016c56:	f8d8 3000 	ldr.w	r3, [r8]
 8016c5a:	685a      	ldr	r2, [r3, #4]
 8016c5c:	bb62      	cbnz	r2, 8016cb8 <_malloc_r+0xdc>
 8016c5e:	f8c8 7000 	str.w	r7, [r8]
 8016c62:	e00f      	b.n	8016c84 <_malloc_r+0xa8>
 8016c64:	6822      	ldr	r2, [r4, #0]
 8016c66:	1b52      	subs	r2, r2, r5
 8016c68:	d420      	bmi.n	8016cac <_malloc_r+0xd0>
 8016c6a:	2a0b      	cmp	r2, #11
 8016c6c:	d917      	bls.n	8016c9e <_malloc_r+0xc2>
 8016c6e:	1961      	adds	r1, r4, r5
 8016c70:	42a3      	cmp	r3, r4
 8016c72:	6025      	str	r5, [r4, #0]
 8016c74:	bf18      	it	ne
 8016c76:	6059      	strne	r1, [r3, #4]
 8016c78:	6863      	ldr	r3, [r4, #4]
 8016c7a:	bf08      	it	eq
 8016c7c:	f8c8 1000 	streq.w	r1, [r8]
 8016c80:	5162      	str	r2, [r4, r5]
 8016c82:	604b      	str	r3, [r1, #4]
 8016c84:	4630      	mov	r0, r6
 8016c86:	f000 f82f 	bl	8016ce8 <__malloc_unlock>
 8016c8a:	f104 000b 	add.w	r0, r4, #11
 8016c8e:	1d23      	adds	r3, r4, #4
 8016c90:	f020 0007 	bic.w	r0, r0, #7
 8016c94:	1ac2      	subs	r2, r0, r3
 8016c96:	bf1c      	itt	ne
 8016c98:	1a1b      	subne	r3, r3, r0
 8016c9a:	50a3      	strne	r3, [r4, r2]
 8016c9c:	e7af      	b.n	8016bfe <_malloc_r+0x22>
 8016c9e:	6862      	ldr	r2, [r4, #4]
 8016ca0:	42a3      	cmp	r3, r4
 8016ca2:	bf0c      	ite	eq
 8016ca4:	f8c8 2000 	streq.w	r2, [r8]
 8016ca8:	605a      	strne	r2, [r3, #4]
 8016caa:	e7eb      	b.n	8016c84 <_malloc_r+0xa8>
 8016cac:	4623      	mov	r3, r4
 8016cae:	6864      	ldr	r4, [r4, #4]
 8016cb0:	e7ae      	b.n	8016c10 <_malloc_r+0x34>
 8016cb2:	463c      	mov	r4, r7
 8016cb4:	687f      	ldr	r7, [r7, #4]
 8016cb6:	e7b6      	b.n	8016c26 <_malloc_r+0x4a>
 8016cb8:	461a      	mov	r2, r3
 8016cba:	685b      	ldr	r3, [r3, #4]
 8016cbc:	42a3      	cmp	r3, r4
 8016cbe:	d1fb      	bne.n	8016cb8 <_malloc_r+0xdc>
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	6053      	str	r3, [r2, #4]
 8016cc4:	e7de      	b.n	8016c84 <_malloc_r+0xa8>
 8016cc6:	230c      	movs	r3, #12
 8016cc8:	6033      	str	r3, [r6, #0]
 8016cca:	4630      	mov	r0, r6
 8016ccc:	f000 f80c 	bl	8016ce8 <__malloc_unlock>
 8016cd0:	e794      	b.n	8016bfc <_malloc_r+0x20>
 8016cd2:	6005      	str	r5, [r0, #0]
 8016cd4:	e7d6      	b.n	8016c84 <_malloc_r+0xa8>
 8016cd6:	bf00      	nop
 8016cd8:	20005da4 	.word	0x20005da4

08016cdc <__malloc_lock>:
 8016cdc:	4801      	ldr	r0, [pc, #4]	@ (8016ce4 <__malloc_lock+0x8>)
 8016cde:	f7ff bef9 	b.w	8016ad4 <__retarget_lock_acquire_recursive>
 8016ce2:	bf00      	nop
 8016ce4:	20005d9c 	.word	0x20005d9c

08016ce8 <__malloc_unlock>:
 8016ce8:	4801      	ldr	r0, [pc, #4]	@ (8016cf0 <__malloc_unlock+0x8>)
 8016cea:	f7ff bef4 	b.w	8016ad6 <__retarget_lock_release_recursive>
 8016cee:	bf00      	nop
 8016cf0:	20005d9c 	.word	0x20005d9c

08016cf4 <__ssputs_r>:
 8016cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016cf8:	688e      	ldr	r6, [r1, #8]
 8016cfa:	461f      	mov	r7, r3
 8016cfc:	42be      	cmp	r6, r7
 8016cfe:	680b      	ldr	r3, [r1, #0]
 8016d00:	4682      	mov	sl, r0
 8016d02:	460c      	mov	r4, r1
 8016d04:	4690      	mov	r8, r2
 8016d06:	d82d      	bhi.n	8016d64 <__ssputs_r+0x70>
 8016d08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016d0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016d10:	d026      	beq.n	8016d60 <__ssputs_r+0x6c>
 8016d12:	6965      	ldr	r5, [r4, #20]
 8016d14:	6909      	ldr	r1, [r1, #16]
 8016d16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016d1a:	eba3 0901 	sub.w	r9, r3, r1
 8016d1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016d22:	1c7b      	adds	r3, r7, #1
 8016d24:	444b      	add	r3, r9
 8016d26:	106d      	asrs	r5, r5, #1
 8016d28:	429d      	cmp	r5, r3
 8016d2a:	bf38      	it	cc
 8016d2c:	461d      	movcc	r5, r3
 8016d2e:	0553      	lsls	r3, r2, #21
 8016d30:	d527      	bpl.n	8016d82 <__ssputs_r+0x8e>
 8016d32:	4629      	mov	r1, r5
 8016d34:	f7ff ff52 	bl	8016bdc <_malloc_r>
 8016d38:	4606      	mov	r6, r0
 8016d3a:	b360      	cbz	r0, 8016d96 <__ssputs_r+0xa2>
 8016d3c:	6921      	ldr	r1, [r4, #16]
 8016d3e:	464a      	mov	r2, r9
 8016d40:	f7ff fed2 	bl	8016ae8 <memcpy>
 8016d44:	89a3      	ldrh	r3, [r4, #12]
 8016d46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016d4e:	81a3      	strh	r3, [r4, #12]
 8016d50:	6126      	str	r6, [r4, #16]
 8016d52:	6165      	str	r5, [r4, #20]
 8016d54:	444e      	add	r6, r9
 8016d56:	eba5 0509 	sub.w	r5, r5, r9
 8016d5a:	6026      	str	r6, [r4, #0]
 8016d5c:	60a5      	str	r5, [r4, #8]
 8016d5e:	463e      	mov	r6, r7
 8016d60:	42be      	cmp	r6, r7
 8016d62:	d900      	bls.n	8016d66 <__ssputs_r+0x72>
 8016d64:	463e      	mov	r6, r7
 8016d66:	6820      	ldr	r0, [r4, #0]
 8016d68:	4632      	mov	r2, r6
 8016d6a:	4641      	mov	r1, r8
 8016d6c:	f000 fe37 	bl	80179de <memmove>
 8016d70:	68a3      	ldr	r3, [r4, #8]
 8016d72:	1b9b      	subs	r3, r3, r6
 8016d74:	60a3      	str	r3, [r4, #8]
 8016d76:	6823      	ldr	r3, [r4, #0]
 8016d78:	4433      	add	r3, r6
 8016d7a:	6023      	str	r3, [r4, #0]
 8016d7c:	2000      	movs	r0, #0
 8016d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d82:	462a      	mov	r2, r5
 8016d84:	f000 fe56 	bl	8017a34 <_realloc_r>
 8016d88:	4606      	mov	r6, r0
 8016d8a:	2800      	cmp	r0, #0
 8016d8c:	d1e0      	bne.n	8016d50 <__ssputs_r+0x5c>
 8016d8e:	6921      	ldr	r1, [r4, #16]
 8016d90:	4650      	mov	r0, sl
 8016d92:	f7ff feb7 	bl	8016b04 <_free_r>
 8016d96:	230c      	movs	r3, #12
 8016d98:	f8ca 3000 	str.w	r3, [sl]
 8016d9c:	89a3      	ldrh	r3, [r4, #12]
 8016d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016da2:	81a3      	strh	r3, [r4, #12]
 8016da4:	f04f 30ff 	mov.w	r0, #4294967295
 8016da8:	e7e9      	b.n	8016d7e <__ssputs_r+0x8a>
	...

08016dac <_svfiprintf_r>:
 8016dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016db0:	4698      	mov	r8, r3
 8016db2:	898b      	ldrh	r3, [r1, #12]
 8016db4:	061b      	lsls	r3, r3, #24
 8016db6:	b09d      	sub	sp, #116	@ 0x74
 8016db8:	4607      	mov	r7, r0
 8016dba:	460d      	mov	r5, r1
 8016dbc:	4614      	mov	r4, r2
 8016dbe:	d510      	bpl.n	8016de2 <_svfiprintf_r+0x36>
 8016dc0:	690b      	ldr	r3, [r1, #16]
 8016dc2:	b973      	cbnz	r3, 8016de2 <_svfiprintf_r+0x36>
 8016dc4:	2140      	movs	r1, #64	@ 0x40
 8016dc6:	f7ff ff09 	bl	8016bdc <_malloc_r>
 8016dca:	6028      	str	r0, [r5, #0]
 8016dcc:	6128      	str	r0, [r5, #16]
 8016dce:	b930      	cbnz	r0, 8016dde <_svfiprintf_r+0x32>
 8016dd0:	230c      	movs	r3, #12
 8016dd2:	603b      	str	r3, [r7, #0]
 8016dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8016dd8:	b01d      	add	sp, #116	@ 0x74
 8016dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dde:	2340      	movs	r3, #64	@ 0x40
 8016de0:	616b      	str	r3, [r5, #20]
 8016de2:	2300      	movs	r3, #0
 8016de4:	9309      	str	r3, [sp, #36]	@ 0x24
 8016de6:	2320      	movs	r3, #32
 8016de8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016dec:	f8cd 800c 	str.w	r8, [sp, #12]
 8016df0:	2330      	movs	r3, #48	@ 0x30
 8016df2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016f90 <_svfiprintf_r+0x1e4>
 8016df6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016dfa:	f04f 0901 	mov.w	r9, #1
 8016dfe:	4623      	mov	r3, r4
 8016e00:	469a      	mov	sl, r3
 8016e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016e06:	b10a      	cbz	r2, 8016e0c <_svfiprintf_r+0x60>
 8016e08:	2a25      	cmp	r2, #37	@ 0x25
 8016e0a:	d1f9      	bne.n	8016e00 <_svfiprintf_r+0x54>
 8016e0c:	ebba 0b04 	subs.w	fp, sl, r4
 8016e10:	d00b      	beq.n	8016e2a <_svfiprintf_r+0x7e>
 8016e12:	465b      	mov	r3, fp
 8016e14:	4622      	mov	r2, r4
 8016e16:	4629      	mov	r1, r5
 8016e18:	4638      	mov	r0, r7
 8016e1a:	f7ff ff6b 	bl	8016cf4 <__ssputs_r>
 8016e1e:	3001      	adds	r0, #1
 8016e20:	f000 80a7 	beq.w	8016f72 <_svfiprintf_r+0x1c6>
 8016e24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016e26:	445a      	add	r2, fp
 8016e28:	9209      	str	r2, [sp, #36]	@ 0x24
 8016e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	f000 809f 	beq.w	8016f72 <_svfiprintf_r+0x1c6>
 8016e34:	2300      	movs	r3, #0
 8016e36:	f04f 32ff 	mov.w	r2, #4294967295
 8016e3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e3e:	f10a 0a01 	add.w	sl, sl, #1
 8016e42:	9304      	str	r3, [sp, #16]
 8016e44:	9307      	str	r3, [sp, #28]
 8016e46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016e4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8016e4c:	4654      	mov	r4, sl
 8016e4e:	2205      	movs	r2, #5
 8016e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e54:	484e      	ldr	r0, [pc, #312]	@ (8016f90 <_svfiprintf_r+0x1e4>)
 8016e56:	f7e9 f9d3 	bl	8000200 <memchr>
 8016e5a:	9a04      	ldr	r2, [sp, #16]
 8016e5c:	b9d8      	cbnz	r0, 8016e96 <_svfiprintf_r+0xea>
 8016e5e:	06d0      	lsls	r0, r2, #27
 8016e60:	bf44      	itt	mi
 8016e62:	2320      	movmi	r3, #32
 8016e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016e68:	0711      	lsls	r1, r2, #28
 8016e6a:	bf44      	itt	mi
 8016e6c:	232b      	movmi	r3, #43	@ 0x2b
 8016e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016e72:	f89a 3000 	ldrb.w	r3, [sl]
 8016e76:	2b2a      	cmp	r3, #42	@ 0x2a
 8016e78:	d015      	beq.n	8016ea6 <_svfiprintf_r+0xfa>
 8016e7a:	9a07      	ldr	r2, [sp, #28]
 8016e7c:	4654      	mov	r4, sl
 8016e7e:	2000      	movs	r0, #0
 8016e80:	f04f 0c0a 	mov.w	ip, #10
 8016e84:	4621      	mov	r1, r4
 8016e86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e8a:	3b30      	subs	r3, #48	@ 0x30
 8016e8c:	2b09      	cmp	r3, #9
 8016e8e:	d94b      	bls.n	8016f28 <_svfiprintf_r+0x17c>
 8016e90:	b1b0      	cbz	r0, 8016ec0 <_svfiprintf_r+0x114>
 8016e92:	9207      	str	r2, [sp, #28]
 8016e94:	e014      	b.n	8016ec0 <_svfiprintf_r+0x114>
 8016e96:	eba0 0308 	sub.w	r3, r0, r8
 8016e9a:	fa09 f303 	lsl.w	r3, r9, r3
 8016e9e:	4313      	orrs	r3, r2
 8016ea0:	9304      	str	r3, [sp, #16]
 8016ea2:	46a2      	mov	sl, r4
 8016ea4:	e7d2      	b.n	8016e4c <_svfiprintf_r+0xa0>
 8016ea6:	9b03      	ldr	r3, [sp, #12]
 8016ea8:	1d19      	adds	r1, r3, #4
 8016eaa:	681b      	ldr	r3, [r3, #0]
 8016eac:	9103      	str	r1, [sp, #12]
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	bfbb      	ittet	lt
 8016eb2:	425b      	neglt	r3, r3
 8016eb4:	f042 0202 	orrlt.w	r2, r2, #2
 8016eb8:	9307      	strge	r3, [sp, #28]
 8016eba:	9307      	strlt	r3, [sp, #28]
 8016ebc:	bfb8      	it	lt
 8016ebe:	9204      	strlt	r2, [sp, #16]
 8016ec0:	7823      	ldrb	r3, [r4, #0]
 8016ec2:	2b2e      	cmp	r3, #46	@ 0x2e
 8016ec4:	d10a      	bne.n	8016edc <_svfiprintf_r+0x130>
 8016ec6:	7863      	ldrb	r3, [r4, #1]
 8016ec8:	2b2a      	cmp	r3, #42	@ 0x2a
 8016eca:	d132      	bne.n	8016f32 <_svfiprintf_r+0x186>
 8016ecc:	9b03      	ldr	r3, [sp, #12]
 8016ece:	1d1a      	adds	r2, r3, #4
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	9203      	str	r2, [sp, #12]
 8016ed4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016ed8:	3402      	adds	r4, #2
 8016eda:	9305      	str	r3, [sp, #20]
 8016edc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016fa0 <_svfiprintf_r+0x1f4>
 8016ee0:	7821      	ldrb	r1, [r4, #0]
 8016ee2:	2203      	movs	r2, #3
 8016ee4:	4650      	mov	r0, sl
 8016ee6:	f7e9 f98b 	bl	8000200 <memchr>
 8016eea:	b138      	cbz	r0, 8016efc <_svfiprintf_r+0x150>
 8016eec:	9b04      	ldr	r3, [sp, #16]
 8016eee:	eba0 000a 	sub.w	r0, r0, sl
 8016ef2:	2240      	movs	r2, #64	@ 0x40
 8016ef4:	4082      	lsls	r2, r0
 8016ef6:	4313      	orrs	r3, r2
 8016ef8:	3401      	adds	r4, #1
 8016efa:	9304      	str	r3, [sp, #16]
 8016efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f00:	4824      	ldr	r0, [pc, #144]	@ (8016f94 <_svfiprintf_r+0x1e8>)
 8016f02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016f06:	2206      	movs	r2, #6
 8016f08:	f7e9 f97a 	bl	8000200 <memchr>
 8016f0c:	2800      	cmp	r0, #0
 8016f0e:	d036      	beq.n	8016f7e <_svfiprintf_r+0x1d2>
 8016f10:	4b21      	ldr	r3, [pc, #132]	@ (8016f98 <_svfiprintf_r+0x1ec>)
 8016f12:	bb1b      	cbnz	r3, 8016f5c <_svfiprintf_r+0x1b0>
 8016f14:	9b03      	ldr	r3, [sp, #12]
 8016f16:	3307      	adds	r3, #7
 8016f18:	f023 0307 	bic.w	r3, r3, #7
 8016f1c:	3308      	adds	r3, #8
 8016f1e:	9303      	str	r3, [sp, #12]
 8016f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f22:	4433      	add	r3, r6
 8016f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8016f26:	e76a      	b.n	8016dfe <_svfiprintf_r+0x52>
 8016f28:	fb0c 3202 	mla	r2, ip, r2, r3
 8016f2c:	460c      	mov	r4, r1
 8016f2e:	2001      	movs	r0, #1
 8016f30:	e7a8      	b.n	8016e84 <_svfiprintf_r+0xd8>
 8016f32:	2300      	movs	r3, #0
 8016f34:	3401      	adds	r4, #1
 8016f36:	9305      	str	r3, [sp, #20]
 8016f38:	4619      	mov	r1, r3
 8016f3a:	f04f 0c0a 	mov.w	ip, #10
 8016f3e:	4620      	mov	r0, r4
 8016f40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f44:	3a30      	subs	r2, #48	@ 0x30
 8016f46:	2a09      	cmp	r2, #9
 8016f48:	d903      	bls.n	8016f52 <_svfiprintf_r+0x1a6>
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d0c6      	beq.n	8016edc <_svfiprintf_r+0x130>
 8016f4e:	9105      	str	r1, [sp, #20]
 8016f50:	e7c4      	b.n	8016edc <_svfiprintf_r+0x130>
 8016f52:	fb0c 2101 	mla	r1, ip, r1, r2
 8016f56:	4604      	mov	r4, r0
 8016f58:	2301      	movs	r3, #1
 8016f5a:	e7f0      	b.n	8016f3e <_svfiprintf_r+0x192>
 8016f5c:	ab03      	add	r3, sp, #12
 8016f5e:	9300      	str	r3, [sp, #0]
 8016f60:	462a      	mov	r2, r5
 8016f62:	4b0e      	ldr	r3, [pc, #56]	@ (8016f9c <_svfiprintf_r+0x1f0>)
 8016f64:	a904      	add	r1, sp, #16
 8016f66:	4638      	mov	r0, r7
 8016f68:	f3af 8000 	nop.w
 8016f6c:	1c42      	adds	r2, r0, #1
 8016f6e:	4606      	mov	r6, r0
 8016f70:	d1d6      	bne.n	8016f20 <_svfiprintf_r+0x174>
 8016f72:	89ab      	ldrh	r3, [r5, #12]
 8016f74:	065b      	lsls	r3, r3, #25
 8016f76:	f53f af2d 	bmi.w	8016dd4 <_svfiprintf_r+0x28>
 8016f7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016f7c:	e72c      	b.n	8016dd8 <_svfiprintf_r+0x2c>
 8016f7e:	ab03      	add	r3, sp, #12
 8016f80:	9300      	str	r3, [sp, #0]
 8016f82:	462a      	mov	r2, r5
 8016f84:	4b05      	ldr	r3, [pc, #20]	@ (8016f9c <_svfiprintf_r+0x1f0>)
 8016f86:	a904      	add	r1, sp, #16
 8016f88:	4638      	mov	r0, r7
 8016f8a:	f000 fa49 	bl	8017420 <_printf_i>
 8016f8e:	e7ed      	b.n	8016f6c <_svfiprintf_r+0x1c0>
 8016f90:	080185d3 	.word	0x080185d3
 8016f94:	080185dd 	.word	0x080185dd
 8016f98:	00000000 	.word	0x00000000
 8016f9c:	08016cf5 	.word	0x08016cf5
 8016fa0:	080185d9 	.word	0x080185d9

08016fa4 <_sungetc_r>:
 8016fa4:	b538      	push	{r3, r4, r5, lr}
 8016fa6:	1c4b      	adds	r3, r1, #1
 8016fa8:	4614      	mov	r4, r2
 8016faa:	d103      	bne.n	8016fb4 <_sungetc_r+0x10>
 8016fac:	f04f 35ff 	mov.w	r5, #4294967295
 8016fb0:	4628      	mov	r0, r5
 8016fb2:	bd38      	pop	{r3, r4, r5, pc}
 8016fb4:	8993      	ldrh	r3, [r2, #12]
 8016fb6:	f023 0320 	bic.w	r3, r3, #32
 8016fba:	8193      	strh	r3, [r2, #12]
 8016fbc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016fbe:	6852      	ldr	r2, [r2, #4]
 8016fc0:	b2cd      	uxtb	r5, r1
 8016fc2:	b18b      	cbz	r3, 8016fe8 <_sungetc_r+0x44>
 8016fc4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8016fc6:	4293      	cmp	r3, r2
 8016fc8:	dd08      	ble.n	8016fdc <_sungetc_r+0x38>
 8016fca:	6823      	ldr	r3, [r4, #0]
 8016fcc:	1e5a      	subs	r2, r3, #1
 8016fce:	6022      	str	r2, [r4, #0]
 8016fd0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016fd4:	6863      	ldr	r3, [r4, #4]
 8016fd6:	3301      	adds	r3, #1
 8016fd8:	6063      	str	r3, [r4, #4]
 8016fda:	e7e9      	b.n	8016fb0 <_sungetc_r+0xc>
 8016fdc:	4621      	mov	r1, r4
 8016fde:	f000 fcc4 	bl	801796a <__submore>
 8016fe2:	2800      	cmp	r0, #0
 8016fe4:	d0f1      	beq.n	8016fca <_sungetc_r+0x26>
 8016fe6:	e7e1      	b.n	8016fac <_sungetc_r+0x8>
 8016fe8:	6921      	ldr	r1, [r4, #16]
 8016fea:	6823      	ldr	r3, [r4, #0]
 8016fec:	b151      	cbz	r1, 8017004 <_sungetc_r+0x60>
 8016fee:	4299      	cmp	r1, r3
 8016ff0:	d208      	bcs.n	8017004 <_sungetc_r+0x60>
 8016ff2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016ff6:	42a9      	cmp	r1, r5
 8016ff8:	d104      	bne.n	8017004 <_sungetc_r+0x60>
 8016ffa:	3b01      	subs	r3, #1
 8016ffc:	3201      	adds	r2, #1
 8016ffe:	6023      	str	r3, [r4, #0]
 8017000:	6062      	str	r2, [r4, #4]
 8017002:	e7d5      	b.n	8016fb0 <_sungetc_r+0xc>
 8017004:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8017008:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801700c:	6363      	str	r3, [r4, #52]	@ 0x34
 801700e:	2303      	movs	r3, #3
 8017010:	63a3      	str	r3, [r4, #56]	@ 0x38
 8017012:	4623      	mov	r3, r4
 8017014:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017018:	6023      	str	r3, [r4, #0]
 801701a:	2301      	movs	r3, #1
 801701c:	e7dc      	b.n	8016fd8 <_sungetc_r+0x34>

0801701e <__ssrefill_r>:
 801701e:	b510      	push	{r4, lr}
 8017020:	460c      	mov	r4, r1
 8017022:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8017024:	b169      	cbz	r1, 8017042 <__ssrefill_r+0x24>
 8017026:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801702a:	4299      	cmp	r1, r3
 801702c:	d001      	beq.n	8017032 <__ssrefill_r+0x14>
 801702e:	f7ff fd69 	bl	8016b04 <_free_r>
 8017032:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017034:	6063      	str	r3, [r4, #4]
 8017036:	2000      	movs	r0, #0
 8017038:	6360      	str	r0, [r4, #52]	@ 0x34
 801703a:	b113      	cbz	r3, 8017042 <__ssrefill_r+0x24>
 801703c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801703e:	6023      	str	r3, [r4, #0]
 8017040:	bd10      	pop	{r4, pc}
 8017042:	6923      	ldr	r3, [r4, #16]
 8017044:	6023      	str	r3, [r4, #0]
 8017046:	2300      	movs	r3, #0
 8017048:	6063      	str	r3, [r4, #4]
 801704a:	89a3      	ldrh	r3, [r4, #12]
 801704c:	f043 0320 	orr.w	r3, r3, #32
 8017050:	81a3      	strh	r3, [r4, #12]
 8017052:	f04f 30ff 	mov.w	r0, #4294967295
 8017056:	e7f3      	b.n	8017040 <__ssrefill_r+0x22>

08017058 <__ssvfiscanf_r>:
 8017058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801705c:	460c      	mov	r4, r1
 801705e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8017062:	2100      	movs	r1, #0
 8017064:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8017068:	49a6      	ldr	r1, [pc, #664]	@ (8017304 <__ssvfiscanf_r+0x2ac>)
 801706a:	91a0      	str	r1, [sp, #640]	@ 0x280
 801706c:	f10d 0804 	add.w	r8, sp, #4
 8017070:	49a5      	ldr	r1, [pc, #660]	@ (8017308 <__ssvfiscanf_r+0x2b0>)
 8017072:	4fa6      	ldr	r7, [pc, #664]	@ (801730c <__ssvfiscanf_r+0x2b4>)
 8017074:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8017078:	4606      	mov	r6, r0
 801707a:	91a1      	str	r1, [sp, #644]	@ 0x284
 801707c:	9300      	str	r3, [sp, #0]
 801707e:	f892 9000 	ldrb.w	r9, [r2]
 8017082:	f1b9 0f00 	cmp.w	r9, #0
 8017086:	f000 8158 	beq.w	801733a <__ssvfiscanf_r+0x2e2>
 801708a:	f817 3009 	ldrb.w	r3, [r7, r9]
 801708e:	f013 0308 	ands.w	r3, r3, #8
 8017092:	f102 0501 	add.w	r5, r2, #1
 8017096:	d019      	beq.n	80170cc <__ssvfiscanf_r+0x74>
 8017098:	6863      	ldr	r3, [r4, #4]
 801709a:	2b00      	cmp	r3, #0
 801709c:	dd0f      	ble.n	80170be <__ssvfiscanf_r+0x66>
 801709e:	6823      	ldr	r3, [r4, #0]
 80170a0:	781a      	ldrb	r2, [r3, #0]
 80170a2:	5cba      	ldrb	r2, [r7, r2]
 80170a4:	0712      	lsls	r2, r2, #28
 80170a6:	d401      	bmi.n	80170ac <__ssvfiscanf_r+0x54>
 80170a8:	462a      	mov	r2, r5
 80170aa:	e7e8      	b.n	801707e <__ssvfiscanf_r+0x26>
 80170ac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80170ae:	3201      	adds	r2, #1
 80170b0:	9245      	str	r2, [sp, #276]	@ 0x114
 80170b2:	6862      	ldr	r2, [r4, #4]
 80170b4:	3301      	adds	r3, #1
 80170b6:	3a01      	subs	r2, #1
 80170b8:	6062      	str	r2, [r4, #4]
 80170ba:	6023      	str	r3, [r4, #0]
 80170bc:	e7ec      	b.n	8017098 <__ssvfiscanf_r+0x40>
 80170be:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80170c0:	4621      	mov	r1, r4
 80170c2:	4630      	mov	r0, r6
 80170c4:	4798      	blx	r3
 80170c6:	2800      	cmp	r0, #0
 80170c8:	d0e9      	beq.n	801709e <__ssvfiscanf_r+0x46>
 80170ca:	e7ed      	b.n	80170a8 <__ssvfiscanf_r+0x50>
 80170cc:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80170d0:	f040 8085 	bne.w	80171de <__ssvfiscanf_r+0x186>
 80170d4:	9341      	str	r3, [sp, #260]	@ 0x104
 80170d6:	9343      	str	r3, [sp, #268]	@ 0x10c
 80170d8:	7853      	ldrb	r3, [r2, #1]
 80170da:	2b2a      	cmp	r3, #42	@ 0x2a
 80170dc:	bf02      	ittt	eq
 80170de:	2310      	moveq	r3, #16
 80170e0:	1c95      	addeq	r5, r2, #2
 80170e2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80170e4:	220a      	movs	r2, #10
 80170e6:	46aa      	mov	sl, r5
 80170e8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80170ec:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80170f0:	2b09      	cmp	r3, #9
 80170f2:	d91e      	bls.n	8017132 <__ssvfiscanf_r+0xda>
 80170f4:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8017310 <__ssvfiscanf_r+0x2b8>
 80170f8:	2203      	movs	r2, #3
 80170fa:	4658      	mov	r0, fp
 80170fc:	f7e9 f880 	bl	8000200 <memchr>
 8017100:	b138      	cbz	r0, 8017112 <__ssvfiscanf_r+0xba>
 8017102:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8017104:	eba0 000b 	sub.w	r0, r0, fp
 8017108:	2301      	movs	r3, #1
 801710a:	4083      	lsls	r3, r0
 801710c:	4313      	orrs	r3, r2
 801710e:	9341      	str	r3, [sp, #260]	@ 0x104
 8017110:	4655      	mov	r5, sl
 8017112:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017116:	2b78      	cmp	r3, #120	@ 0x78
 8017118:	d806      	bhi.n	8017128 <__ssvfiscanf_r+0xd0>
 801711a:	2b57      	cmp	r3, #87	@ 0x57
 801711c:	d810      	bhi.n	8017140 <__ssvfiscanf_r+0xe8>
 801711e:	2b25      	cmp	r3, #37	@ 0x25
 8017120:	d05d      	beq.n	80171de <__ssvfiscanf_r+0x186>
 8017122:	d857      	bhi.n	80171d4 <__ssvfiscanf_r+0x17c>
 8017124:	2b00      	cmp	r3, #0
 8017126:	d075      	beq.n	8017214 <__ssvfiscanf_r+0x1bc>
 8017128:	2303      	movs	r3, #3
 801712a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801712c:	230a      	movs	r3, #10
 801712e:	9342      	str	r3, [sp, #264]	@ 0x108
 8017130:	e088      	b.n	8017244 <__ssvfiscanf_r+0x1ec>
 8017132:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8017134:	fb02 1103 	mla	r1, r2, r3, r1
 8017138:	3930      	subs	r1, #48	@ 0x30
 801713a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801713c:	4655      	mov	r5, sl
 801713e:	e7d2      	b.n	80170e6 <__ssvfiscanf_r+0x8e>
 8017140:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8017144:	2a20      	cmp	r2, #32
 8017146:	d8ef      	bhi.n	8017128 <__ssvfiscanf_r+0xd0>
 8017148:	a101      	add	r1, pc, #4	@ (adr r1, 8017150 <__ssvfiscanf_r+0xf8>)
 801714a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801714e:	bf00      	nop
 8017150:	08017223 	.word	0x08017223
 8017154:	08017129 	.word	0x08017129
 8017158:	08017129 	.word	0x08017129
 801715c:	0801727d 	.word	0x0801727d
 8017160:	08017129 	.word	0x08017129
 8017164:	08017129 	.word	0x08017129
 8017168:	08017129 	.word	0x08017129
 801716c:	08017129 	.word	0x08017129
 8017170:	08017129 	.word	0x08017129
 8017174:	08017129 	.word	0x08017129
 8017178:	08017129 	.word	0x08017129
 801717c:	08017293 	.word	0x08017293
 8017180:	08017279 	.word	0x08017279
 8017184:	080171db 	.word	0x080171db
 8017188:	080171db 	.word	0x080171db
 801718c:	080171db 	.word	0x080171db
 8017190:	08017129 	.word	0x08017129
 8017194:	08017235 	.word	0x08017235
 8017198:	08017129 	.word	0x08017129
 801719c:	08017129 	.word	0x08017129
 80171a0:	08017129 	.word	0x08017129
 80171a4:	08017129 	.word	0x08017129
 80171a8:	080172a3 	.word	0x080172a3
 80171ac:	0801723d 	.word	0x0801723d
 80171b0:	0801721b 	.word	0x0801721b
 80171b4:	08017129 	.word	0x08017129
 80171b8:	08017129 	.word	0x08017129
 80171bc:	0801729f 	.word	0x0801729f
 80171c0:	08017129 	.word	0x08017129
 80171c4:	08017279 	.word	0x08017279
 80171c8:	08017129 	.word	0x08017129
 80171cc:	08017129 	.word	0x08017129
 80171d0:	08017223 	.word	0x08017223
 80171d4:	3b45      	subs	r3, #69	@ 0x45
 80171d6:	2b02      	cmp	r3, #2
 80171d8:	d8a6      	bhi.n	8017128 <__ssvfiscanf_r+0xd0>
 80171da:	2305      	movs	r3, #5
 80171dc:	e031      	b.n	8017242 <__ssvfiscanf_r+0x1ea>
 80171de:	6863      	ldr	r3, [r4, #4]
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	dd0d      	ble.n	8017200 <__ssvfiscanf_r+0x1a8>
 80171e4:	6823      	ldr	r3, [r4, #0]
 80171e6:	781a      	ldrb	r2, [r3, #0]
 80171e8:	454a      	cmp	r2, r9
 80171ea:	f040 80a6 	bne.w	801733a <__ssvfiscanf_r+0x2e2>
 80171ee:	3301      	adds	r3, #1
 80171f0:	6862      	ldr	r2, [r4, #4]
 80171f2:	6023      	str	r3, [r4, #0]
 80171f4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80171f6:	3a01      	subs	r2, #1
 80171f8:	3301      	adds	r3, #1
 80171fa:	6062      	str	r2, [r4, #4]
 80171fc:	9345      	str	r3, [sp, #276]	@ 0x114
 80171fe:	e753      	b.n	80170a8 <__ssvfiscanf_r+0x50>
 8017200:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017202:	4621      	mov	r1, r4
 8017204:	4630      	mov	r0, r6
 8017206:	4798      	blx	r3
 8017208:	2800      	cmp	r0, #0
 801720a:	d0eb      	beq.n	80171e4 <__ssvfiscanf_r+0x18c>
 801720c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801720e:	2800      	cmp	r0, #0
 8017210:	f040 808b 	bne.w	801732a <__ssvfiscanf_r+0x2d2>
 8017214:	f04f 30ff 	mov.w	r0, #4294967295
 8017218:	e08b      	b.n	8017332 <__ssvfiscanf_r+0x2da>
 801721a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801721c:	f042 0220 	orr.w	r2, r2, #32
 8017220:	9241      	str	r2, [sp, #260]	@ 0x104
 8017222:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8017224:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8017228:	9241      	str	r2, [sp, #260]	@ 0x104
 801722a:	2210      	movs	r2, #16
 801722c:	2b6e      	cmp	r3, #110	@ 0x6e
 801722e:	9242      	str	r2, [sp, #264]	@ 0x108
 8017230:	d902      	bls.n	8017238 <__ssvfiscanf_r+0x1e0>
 8017232:	e005      	b.n	8017240 <__ssvfiscanf_r+0x1e8>
 8017234:	2300      	movs	r3, #0
 8017236:	9342      	str	r3, [sp, #264]	@ 0x108
 8017238:	2303      	movs	r3, #3
 801723a:	e002      	b.n	8017242 <__ssvfiscanf_r+0x1ea>
 801723c:	2308      	movs	r3, #8
 801723e:	9342      	str	r3, [sp, #264]	@ 0x108
 8017240:	2304      	movs	r3, #4
 8017242:	9347      	str	r3, [sp, #284]	@ 0x11c
 8017244:	6863      	ldr	r3, [r4, #4]
 8017246:	2b00      	cmp	r3, #0
 8017248:	dd39      	ble.n	80172be <__ssvfiscanf_r+0x266>
 801724a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801724c:	0659      	lsls	r1, r3, #25
 801724e:	d404      	bmi.n	801725a <__ssvfiscanf_r+0x202>
 8017250:	6823      	ldr	r3, [r4, #0]
 8017252:	781a      	ldrb	r2, [r3, #0]
 8017254:	5cba      	ldrb	r2, [r7, r2]
 8017256:	0712      	lsls	r2, r2, #28
 8017258:	d438      	bmi.n	80172cc <__ssvfiscanf_r+0x274>
 801725a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801725c:	2b02      	cmp	r3, #2
 801725e:	dc47      	bgt.n	80172f0 <__ssvfiscanf_r+0x298>
 8017260:	466b      	mov	r3, sp
 8017262:	4622      	mov	r2, r4
 8017264:	a941      	add	r1, sp, #260	@ 0x104
 8017266:	4630      	mov	r0, r6
 8017268:	f000 f9f8 	bl	801765c <_scanf_chars>
 801726c:	2801      	cmp	r0, #1
 801726e:	d064      	beq.n	801733a <__ssvfiscanf_r+0x2e2>
 8017270:	2802      	cmp	r0, #2
 8017272:	f47f af19 	bne.w	80170a8 <__ssvfiscanf_r+0x50>
 8017276:	e7c9      	b.n	801720c <__ssvfiscanf_r+0x1b4>
 8017278:	220a      	movs	r2, #10
 801727a:	e7d7      	b.n	801722c <__ssvfiscanf_r+0x1d4>
 801727c:	4629      	mov	r1, r5
 801727e:	4640      	mov	r0, r8
 8017280:	f000 fb3a 	bl	80178f8 <__sccl>
 8017284:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8017286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801728a:	9341      	str	r3, [sp, #260]	@ 0x104
 801728c:	4605      	mov	r5, r0
 801728e:	2301      	movs	r3, #1
 8017290:	e7d7      	b.n	8017242 <__ssvfiscanf_r+0x1ea>
 8017292:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8017294:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017298:	9341      	str	r3, [sp, #260]	@ 0x104
 801729a:	2300      	movs	r3, #0
 801729c:	e7d1      	b.n	8017242 <__ssvfiscanf_r+0x1ea>
 801729e:	2302      	movs	r3, #2
 80172a0:	e7cf      	b.n	8017242 <__ssvfiscanf_r+0x1ea>
 80172a2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80172a4:	06c3      	lsls	r3, r0, #27
 80172a6:	f53f aeff 	bmi.w	80170a8 <__ssvfiscanf_r+0x50>
 80172aa:	9b00      	ldr	r3, [sp, #0]
 80172ac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80172ae:	1d19      	adds	r1, r3, #4
 80172b0:	9100      	str	r1, [sp, #0]
 80172b2:	681b      	ldr	r3, [r3, #0]
 80172b4:	07c0      	lsls	r0, r0, #31
 80172b6:	bf4c      	ite	mi
 80172b8:	801a      	strhmi	r2, [r3, #0]
 80172ba:	601a      	strpl	r2, [r3, #0]
 80172bc:	e6f4      	b.n	80170a8 <__ssvfiscanf_r+0x50>
 80172be:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80172c0:	4621      	mov	r1, r4
 80172c2:	4630      	mov	r0, r6
 80172c4:	4798      	blx	r3
 80172c6:	2800      	cmp	r0, #0
 80172c8:	d0bf      	beq.n	801724a <__ssvfiscanf_r+0x1f2>
 80172ca:	e79f      	b.n	801720c <__ssvfiscanf_r+0x1b4>
 80172cc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80172ce:	3201      	adds	r2, #1
 80172d0:	9245      	str	r2, [sp, #276]	@ 0x114
 80172d2:	6862      	ldr	r2, [r4, #4]
 80172d4:	3a01      	subs	r2, #1
 80172d6:	2a00      	cmp	r2, #0
 80172d8:	6062      	str	r2, [r4, #4]
 80172da:	dd02      	ble.n	80172e2 <__ssvfiscanf_r+0x28a>
 80172dc:	3301      	adds	r3, #1
 80172de:	6023      	str	r3, [r4, #0]
 80172e0:	e7b6      	b.n	8017250 <__ssvfiscanf_r+0x1f8>
 80172e2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80172e4:	4621      	mov	r1, r4
 80172e6:	4630      	mov	r0, r6
 80172e8:	4798      	blx	r3
 80172ea:	2800      	cmp	r0, #0
 80172ec:	d0b0      	beq.n	8017250 <__ssvfiscanf_r+0x1f8>
 80172ee:	e78d      	b.n	801720c <__ssvfiscanf_r+0x1b4>
 80172f0:	2b04      	cmp	r3, #4
 80172f2:	dc0f      	bgt.n	8017314 <__ssvfiscanf_r+0x2bc>
 80172f4:	466b      	mov	r3, sp
 80172f6:	4622      	mov	r2, r4
 80172f8:	a941      	add	r1, sp, #260	@ 0x104
 80172fa:	4630      	mov	r0, r6
 80172fc:	f000 fa08 	bl	8017710 <_scanf_i>
 8017300:	e7b4      	b.n	801726c <__ssvfiscanf_r+0x214>
 8017302:	bf00      	nop
 8017304:	08016fa5 	.word	0x08016fa5
 8017308:	0801701f 	.word	0x0801701f
 801730c:	080184d3 	.word	0x080184d3
 8017310:	080185d9 	.word	0x080185d9
 8017314:	4b0a      	ldr	r3, [pc, #40]	@ (8017340 <__ssvfiscanf_r+0x2e8>)
 8017316:	2b00      	cmp	r3, #0
 8017318:	f43f aec6 	beq.w	80170a8 <__ssvfiscanf_r+0x50>
 801731c:	466b      	mov	r3, sp
 801731e:	4622      	mov	r2, r4
 8017320:	a941      	add	r1, sp, #260	@ 0x104
 8017322:	4630      	mov	r0, r6
 8017324:	f3af 8000 	nop.w
 8017328:	e7a0      	b.n	801726c <__ssvfiscanf_r+0x214>
 801732a:	89a3      	ldrh	r3, [r4, #12]
 801732c:	065b      	lsls	r3, r3, #25
 801732e:	f53f af71 	bmi.w	8017214 <__ssvfiscanf_r+0x1bc>
 8017332:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8017336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801733a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801733c:	e7f9      	b.n	8017332 <__ssvfiscanf_r+0x2da>
 801733e:	bf00      	nop
 8017340:	00000000 	.word	0x00000000

08017344 <_printf_common>:
 8017344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017348:	4616      	mov	r6, r2
 801734a:	4698      	mov	r8, r3
 801734c:	688a      	ldr	r2, [r1, #8]
 801734e:	690b      	ldr	r3, [r1, #16]
 8017350:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017354:	4293      	cmp	r3, r2
 8017356:	bfb8      	it	lt
 8017358:	4613      	movlt	r3, r2
 801735a:	6033      	str	r3, [r6, #0]
 801735c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017360:	4607      	mov	r7, r0
 8017362:	460c      	mov	r4, r1
 8017364:	b10a      	cbz	r2, 801736a <_printf_common+0x26>
 8017366:	3301      	adds	r3, #1
 8017368:	6033      	str	r3, [r6, #0]
 801736a:	6823      	ldr	r3, [r4, #0]
 801736c:	0699      	lsls	r1, r3, #26
 801736e:	bf42      	ittt	mi
 8017370:	6833      	ldrmi	r3, [r6, #0]
 8017372:	3302      	addmi	r3, #2
 8017374:	6033      	strmi	r3, [r6, #0]
 8017376:	6825      	ldr	r5, [r4, #0]
 8017378:	f015 0506 	ands.w	r5, r5, #6
 801737c:	d106      	bne.n	801738c <_printf_common+0x48>
 801737e:	f104 0a19 	add.w	sl, r4, #25
 8017382:	68e3      	ldr	r3, [r4, #12]
 8017384:	6832      	ldr	r2, [r6, #0]
 8017386:	1a9b      	subs	r3, r3, r2
 8017388:	42ab      	cmp	r3, r5
 801738a:	dc26      	bgt.n	80173da <_printf_common+0x96>
 801738c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017390:	6822      	ldr	r2, [r4, #0]
 8017392:	3b00      	subs	r3, #0
 8017394:	bf18      	it	ne
 8017396:	2301      	movne	r3, #1
 8017398:	0692      	lsls	r2, r2, #26
 801739a:	d42b      	bmi.n	80173f4 <_printf_common+0xb0>
 801739c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80173a0:	4641      	mov	r1, r8
 80173a2:	4638      	mov	r0, r7
 80173a4:	47c8      	blx	r9
 80173a6:	3001      	adds	r0, #1
 80173a8:	d01e      	beq.n	80173e8 <_printf_common+0xa4>
 80173aa:	6823      	ldr	r3, [r4, #0]
 80173ac:	6922      	ldr	r2, [r4, #16]
 80173ae:	f003 0306 	and.w	r3, r3, #6
 80173b2:	2b04      	cmp	r3, #4
 80173b4:	bf02      	ittt	eq
 80173b6:	68e5      	ldreq	r5, [r4, #12]
 80173b8:	6833      	ldreq	r3, [r6, #0]
 80173ba:	1aed      	subeq	r5, r5, r3
 80173bc:	68a3      	ldr	r3, [r4, #8]
 80173be:	bf0c      	ite	eq
 80173c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80173c4:	2500      	movne	r5, #0
 80173c6:	4293      	cmp	r3, r2
 80173c8:	bfc4      	itt	gt
 80173ca:	1a9b      	subgt	r3, r3, r2
 80173cc:	18ed      	addgt	r5, r5, r3
 80173ce:	2600      	movs	r6, #0
 80173d0:	341a      	adds	r4, #26
 80173d2:	42b5      	cmp	r5, r6
 80173d4:	d11a      	bne.n	801740c <_printf_common+0xc8>
 80173d6:	2000      	movs	r0, #0
 80173d8:	e008      	b.n	80173ec <_printf_common+0xa8>
 80173da:	2301      	movs	r3, #1
 80173dc:	4652      	mov	r2, sl
 80173de:	4641      	mov	r1, r8
 80173e0:	4638      	mov	r0, r7
 80173e2:	47c8      	blx	r9
 80173e4:	3001      	adds	r0, #1
 80173e6:	d103      	bne.n	80173f0 <_printf_common+0xac>
 80173e8:	f04f 30ff 	mov.w	r0, #4294967295
 80173ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173f0:	3501      	adds	r5, #1
 80173f2:	e7c6      	b.n	8017382 <_printf_common+0x3e>
 80173f4:	18e1      	adds	r1, r4, r3
 80173f6:	1c5a      	adds	r2, r3, #1
 80173f8:	2030      	movs	r0, #48	@ 0x30
 80173fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80173fe:	4422      	add	r2, r4
 8017400:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017404:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017408:	3302      	adds	r3, #2
 801740a:	e7c7      	b.n	801739c <_printf_common+0x58>
 801740c:	2301      	movs	r3, #1
 801740e:	4622      	mov	r2, r4
 8017410:	4641      	mov	r1, r8
 8017412:	4638      	mov	r0, r7
 8017414:	47c8      	blx	r9
 8017416:	3001      	adds	r0, #1
 8017418:	d0e6      	beq.n	80173e8 <_printf_common+0xa4>
 801741a:	3601      	adds	r6, #1
 801741c:	e7d9      	b.n	80173d2 <_printf_common+0x8e>
	...

08017420 <_printf_i>:
 8017420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017424:	7e0f      	ldrb	r7, [r1, #24]
 8017426:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017428:	2f78      	cmp	r7, #120	@ 0x78
 801742a:	4691      	mov	r9, r2
 801742c:	4680      	mov	r8, r0
 801742e:	460c      	mov	r4, r1
 8017430:	469a      	mov	sl, r3
 8017432:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017436:	d807      	bhi.n	8017448 <_printf_i+0x28>
 8017438:	2f62      	cmp	r7, #98	@ 0x62
 801743a:	d80a      	bhi.n	8017452 <_printf_i+0x32>
 801743c:	2f00      	cmp	r7, #0
 801743e:	f000 80d1 	beq.w	80175e4 <_printf_i+0x1c4>
 8017442:	2f58      	cmp	r7, #88	@ 0x58
 8017444:	f000 80b8 	beq.w	80175b8 <_printf_i+0x198>
 8017448:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801744c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017450:	e03a      	b.n	80174c8 <_printf_i+0xa8>
 8017452:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017456:	2b15      	cmp	r3, #21
 8017458:	d8f6      	bhi.n	8017448 <_printf_i+0x28>
 801745a:	a101      	add	r1, pc, #4	@ (adr r1, 8017460 <_printf_i+0x40>)
 801745c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017460:	080174b9 	.word	0x080174b9
 8017464:	080174cd 	.word	0x080174cd
 8017468:	08017449 	.word	0x08017449
 801746c:	08017449 	.word	0x08017449
 8017470:	08017449 	.word	0x08017449
 8017474:	08017449 	.word	0x08017449
 8017478:	080174cd 	.word	0x080174cd
 801747c:	08017449 	.word	0x08017449
 8017480:	08017449 	.word	0x08017449
 8017484:	08017449 	.word	0x08017449
 8017488:	08017449 	.word	0x08017449
 801748c:	080175cb 	.word	0x080175cb
 8017490:	080174f7 	.word	0x080174f7
 8017494:	08017585 	.word	0x08017585
 8017498:	08017449 	.word	0x08017449
 801749c:	08017449 	.word	0x08017449
 80174a0:	080175ed 	.word	0x080175ed
 80174a4:	08017449 	.word	0x08017449
 80174a8:	080174f7 	.word	0x080174f7
 80174ac:	08017449 	.word	0x08017449
 80174b0:	08017449 	.word	0x08017449
 80174b4:	0801758d 	.word	0x0801758d
 80174b8:	6833      	ldr	r3, [r6, #0]
 80174ba:	1d1a      	adds	r2, r3, #4
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	6032      	str	r2, [r6, #0]
 80174c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80174c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80174c8:	2301      	movs	r3, #1
 80174ca:	e09c      	b.n	8017606 <_printf_i+0x1e6>
 80174cc:	6833      	ldr	r3, [r6, #0]
 80174ce:	6820      	ldr	r0, [r4, #0]
 80174d0:	1d19      	adds	r1, r3, #4
 80174d2:	6031      	str	r1, [r6, #0]
 80174d4:	0606      	lsls	r6, r0, #24
 80174d6:	d501      	bpl.n	80174dc <_printf_i+0xbc>
 80174d8:	681d      	ldr	r5, [r3, #0]
 80174da:	e003      	b.n	80174e4 <_printf_i+0xc4>
 80174dc:	0645      	lsls	r5, r0, #25
 80174de:	d5fb      	bpl.n	80174d8 <_printf_i+0xb8>
 80174e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80174e4:	2d00      	cmp	r5, #0
 80174e6:	da03      	bge.n	80174f0 <_printf_i+0xd0>
 80174e8:	232d      	movs	r3, #45	@ 0x2d
 80174ea:	426d      	negs	r5, r5
 80174ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80174f0:	4858      	ldr	r0, [pc, #352]	@ (8017654 <_printf_i+0x234>)
 80174f2:	230a      	movs	r3, #10
 80174f4:	e011      	b.n	801751a <_printf_i+0xfa>
 80174f6:	6821      	ldr	r1, [r4, #0]
 80174f8:	6833      	ldr	r3, [r6, #0]
 80174fa:	0608      	lsls	r0, r1, #24
 80174fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8017500:	d402      	bmi.n	8017508 <_printf_i+0xe8>
 8017502:	0649      	lsls	r1, r1, #25
 8017504:	bf48      	it	mi
 8017506:	b2ad      	uxthmi	r5, r5
 8017508:	2f6f      	cmp	r7, #111	@ 0x6f
 801750a:	4852      	ldr	r0, [pc, #328]	@ (8017654 <_printf_i+0x234>)
 801750c:	6033      	str	r3, [r6, #0]
 801750e:	bf14      	ite	ne
 8017510:	230a      	movne	r3, #10
 8017512:	2308      	moveq	r3, #8
 8017514:	2100      	movs	r1, #0
 8017516:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801751a:	6866      	ldr	r6, [r4, #4]
 801751c:	60a6      	str	r6, [r4, #8]
 801751e:	2e00      	cmp	r6, #0
 8017520:	db05      	blt.n	801752e <_printf_i+0x10e>
 8017522:	6821      	ldr	r1, [r4, #0]
 8017524:	432e      	orrs	r6, r5
 8017526:	f021 0104 	bic.w	r1, r1, #4
 801752a:	6021      	str	r1, [r4, #0]
 801752c:	d04b      	beq.n	80175c6 <_printf_i+0x1a6>
 801752e:	4616      	mov	r6, r2
 8017530:	fbb5 f1f3 	udiv	r1, r5, r3
 8017534:	fb03 5711 	mls	r7, r3, r1, r5
 8017538:	5dc7      	ldrb	r7, [r0, r7]
 801753a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801753e:	462f      	mov	r7, r5
 8017540:	42bb      	cmp	r3, r7
 8017542:	460d      	mov	r5, r1
 8017544:	d9f4      	bls.n	8017530 <_printf_i+0x110>
 8017546:	2b08      	cmp	r3, #8
 8017548:	d10b      	bne.n	8017562 <_printf_i+0x142>
 801754a:	6823      	ldr	r3, [r4, #0]
 801754c:	07df      	lsls	r7, r3, #31
 801754e:	d508      	bpl.n	8017562 <_printf_i+0x142>
 8017550:	6923      	ldr	r3, [r4, #16]
 8017552:	6861      	ldr	r1, [r4, #4]
 8017554:	4299      	cmp	r1, r3
 8017556:	bfde      	ittt	le
 8017558:	2330      	movle	r3, #48	@ 0x30
 801755a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801755e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017562:	1b92      	subs	r2, r2, r6
 8017564:	6122      	str	r2, [r4, #16]
 8017566:	f8cd a000 	str.w	sl, [sp]
 801756a:	464b      	mov	r3, r9
 801756c:	aa03      	add	r2, sp, #12
 801756e:	4621      	mov	r1, r4
 8017570:	4640      	mov	r0, r8
 8017572:	f7ff fee7 	bl	8017344 <_printf_common>
 8017576:	3001      	adds	r0, #1
 8017578:	d14a      	bne.n	8017610 <_printf_i+0x1f0>
 801757a:	f04f 30ff 	mov.w	r0, #4294967295
 801757e:	b004      	add	sp, #16
 8017580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017584:	6823      	ldr	r3, [r4, #0]
 8017586:	f043 0320 	orr.w	r3, r3, #32
 801758a:	6023      	str	r3, [r4, #0]
 801758c:	4832      	ldr	r0, [pc, #200]	@ (8017658 <_printf_i+0x238>)
 801758e:	2778      	movs	r7, #120	@ 0x78
 8017590:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017594:	6823      	ldr	r3, [r4, #0]
 8017596:	6831      	ldr	r1, [r6, #0]
 8017598:	061f      	lsls	r7, r3, #24
 801759a:	f851 5b04 	ldr.w	r5, [r1], #4
 801759e:	d402      	bmi.n	80175a6 <_printf_i+0x186>
 80175a0:	065f      	lsls	r7, r3, #25
 80175a2:	bf48      	it	mi
 80175a4:	b2ad      	uxthmi	r5, r5
 80175a6:	6031      	str	r1, [r6, #0]
 80175a8:	07d9      	lsls	r1, r3, #31
 80175aa:	bf44      	itt	mi
 80175ac:	f043 0320 	orrmi.w	r3, r3, #32
 80175b0:	6023      	strmi	r3, [r4, #0]
 80175b2:	b11d      	cbz	r5, 80175bc <_printf_i+0x19c>
 80175b4:	2310      	movs	r3, #16
 80175b6:	e7ad      	b.n	8017514 <_printf_i+0xf4>
 80175b8:	4826      	ldr	r0, [pc, #152]	@ (8017654 <_printf_i+0x234>)
 80175ba:	e7e9      	b.n	8017590 <_printf_i+0x170>
 80175bc:	6823      	ldr	r3, [r4, #0]
 80175be:	f023 0320 	bic.w	r3, r3, #32
 80175c2:	6023      	str	r3, [r4, #0]
 80175c4:	e7f6      	b.n	80175b4 <_printf_i+0x194>
 80175c6:	4616      	mov	r6, r2
 80175c8:	e7bd      	b.n	8017546 <_printf_i+0x126>
 80175ca:	6833      	ldr	r3, [r6, #0]
 80175cc:	6825      	ldr	r5, [r4, #0]
 80175ce:	6961      	ldr	r1, [r4, #20]
 80175d0:	1d18      	adds	r0, r3, #4
 80175d2:	6030      	str	r0, [r6, #0]
 80175d4:	062e      	lsls	r6, r5, #24
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	d501      	bpl.n	80175de <_printf_i+0x1be>
 80175da:	6019      	str	r1, [r3, #0]
 80175dc:	e002      	b.n	80175e4 <_printf_i+0x1c4>
 80175de:	0668      	lsls	r0, r5, #25
 80175e0:	d5fb      	bpl.n	80175da <_printf_i+0x1ba>
 80175e2:	8019      	strh	r1, [r3, #0]
 80175e4:	2300      	movs	r3, #0
 80175e6:	6123      	str	r3, [r4, #16]
 80175e8:	4616      	mov	r6, r2
 80175ea:	e7bc      	b.n	8017566 <_printf_i+0x146>
 80175ec:	6833      	ldr	r3, [r6, #0]
 80175ee:	1d1a      	adds	r2, r3, #4
 80175f0:	6032      	str	r2, [r6, #0]
 80175f2:	681e      	ldr	r6, [r3, #0]
 80175f4:	6862      	ldr	r2, [r4, #4]
 80175f6:	2100      	movs	r1, #0
 80175f8:	4630      	mov	r0, r6
 80175fa:	f7e8 fe01 	bl	8000200 <memchr>
 80175fe:	b108      	cbz	r0, 8017604 <_printf_i+0x1e4>
 8017600:	1b80      	subs	r0, r0, r6
 8017602:	6060      	str	r0, [r4, #4]
 8017604:	6863      	ldr	r3, [r4, #4]
 8017606:	6123      	str	r3, [r4, #16]
 8017608:	2300      	movs	r3, #0
 801760a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801760e:	e7aa      	b.n	8017566 <_printf_i+0x146>
 8017610:	6923      	ldr	r3, [r4, #16]
 8017612:	4632      	mov	r2, r6
 8017614:	4649      	mov	r1, r9
 8017616:	4640      	mov	r0, r8
 8017618:	47d0      	blx	sl
 801761a:	3001      	adds	r0, #1
 801761c:	d0ad      	beq.n	801757a <_printf_i+0x15a>
 801761e:	6823      	ldr	r3, [r4, #0]
 8017620:	079b      	lsls	r3, r3, #30
 8017622:	d413      	bmi.n	801764c <_printf_i+0x22c>
 8017624:	68e0      	ldr	r0, [r4, #12]
 8017626:	9b03      	ldr	r3, [sp, #12]
 8017628:	4298      	cmp	r0, r3
 801762a:	bfb8      	it	lt
 801762c:	4618      	movlt	r0, r3
 801762e:	e7a6      	b.n	801757e <_printf_i+0x15e>
 8017630:	2301      	movs	r3, #1
 8017632:	4632      	mov	r2, r6
 8017634:	4649      	mov	r1, r9
 8017636:	4640      	mov	r0, r8
 8017638:	47d0      	blx	sl
 801763a:	3001      	adds	r0, #1
 801763c:	d09d      	beq.n	801757a <_printf_i+0x15a>
 801763e:	3501      	adds	r5, #1
 8017640:	68e3      	ldr	r3, [r4, #12]
 8017642:	9903      	ldr	r1, [sp, #12]
 8017644:	1a5b      	subs	r3, r3, r1
 8017646:	42ab      	cmp	r3, r5
 8017648:	dcf2      	bgt.n	8017630 <_printf_i+0x210>
 801764a:	e7eb      	b.n	8017624 <_printf_i+0x204>
 801764c:	2500      	movs	r5, #0
 801764e:	f104 0619 	add.w	r6, r4, #25
 8017652:	e7f5      	b.n	8017640 <_printf_i+0x220>
 8017654:	080185e4 	.word	0x080185e4
 8017658:	080185f5 	.word	0x080185f5

0801765c <_scanf_chars>:
 801765c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017660:	4615      	mov	r5, r2
 8017662:	688a      	ldr	r2, [r1, #8]
 8017664:	4680      	mov	r8, r0
 8017666:	460c      	mov	r4, r1
 8017668:	b932      	cbnz	r2, 8017678 <_scanf_chars+0x1c>
 801766a:	698a      	ldr	r2, [r1, #24]
 801766c:	2a00      	cmp	r2, #0
 801766e:	bf14      	ite	ne
 8017670:	f04f 32ff 	movne.w	r2, #4294967295
 8017674:	2201      	moveq	r2, #1
 8017676:	608a      	str	r2, [r1, #8]
 8017678:	6822      	ldr	r2, [r4, #0]
 801767a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801770c <_scanf_chars+0xb0>
 801767e:	06d1      	lsls	r1, r2, #27
 8017680:	bf5f      	itttt	pl
 8017682:	681a      	ldrpl	r2, [r3, #0]
 8017684:	1d11      	addpl	r1, r2, #4
 8017686:	6019      	strpl	r1, [r3, #0]
 8017688:	6816      	ldrpl	r6, [r2, #0]
 801768a:	2700      	movs	r7, #0
 801768c:	69a0      	ldr	r0, [r4, #24]
 801768e:	b188      	cbz	r0, 80176b4 <_scanf_chars+0x58>
 8017690:	2801      	cmp	r0, #1
 8017692:	d107      	bne.n	80176a4 <_scanf_chars+0x48>
 8017694:	682b      	ldr	r3, [r5, #0]
 8017696:	781a      	ldrb	r2, [r3, #0]
 8017698:	6963      	ldr	r3, [r4, #20]
 801769a:	5c9b      	ldrb	r3, [r3, r2]
 801769c:	b953      	cbnz	r3, 80176b4 <_scanf_chars+0x58>
 801769e:	2f00      	cmp	r7, #0
 80176a0:	d031      	beq.n	8017706 <_scanf_chars+0xaa>
 80176a2:	e022      	b.n	80176ea <_scanf_chars+0x8e>
 80176a4:	2802      	cmp	r0, #2
 80176a6:	d120      	bne.n	80176ea <_scanf_chars+0x8e>
 80176a8:	682b      	ldr	r3, [r5, #0]
 80176aa:	781b      	ldrb	r3, [r3, #0]
 80176ac:	f819 3003 	ldrb.w	r3, [r9, r3]
 80176b0:	071b      	lsls	r3, r3, #28
 80176b2:	d41a      	bmi.n	80176ea <_scanf_chars+0x8e>
 80176b4:	6823      	ldr	r3, [r4, #0]
 80176b6:	06da      	lsls	r2, r3, #27
 80176b8:	bf5e      	ittt	pl
 80176ba:	682b      	ldrpl	r3, [r5, #0]
 80176bc:	781b      	ldrbpl	r3, [r3, #0]
 80176be:	f806 3b01 	strbpl.w	r3, [r6], #1
 80176c2:	682a      	ldr	r2, [r5, #0]
 80176c4:	686b      	ldr	r3, [r5, #4]
 80176c6:	3201      	adds	r2, #1
 80176c8:	602a      	str	r2, [r5, #0]
 80176ca:	68a2      	ldr	r2, [r4, #8]
 80176cc:	3b01      	subs	r3, #1
 80176ce:	3a01      	subs	r2, #1
 80176d0:	606b      	str	r3, [r5, #4]
 80176d2:	3701      	adds	r7, #1
 80176d4:	60a2      	str	r2, [r4, #8]
 80176d6:	b142      	cbz	r2, 80176ea <_scanf_chars+0x8e>
 80176d8:	2b00      	cmp	r3, #0
 80176da:	dcd7      	bgt.n	801768c <_scanf_chars+0x30>
 80176dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80176e0:	4629      	mov	r1, r5
 80176e2:	4640      	mov	r0, r8
 80176e4:	4798      	blx	r3
 80176e6:	2800      	cmp	r0, #0
 80176e8:	d0d0      	beq.n	801768c <_scanf_chars+0x30>
 80176ea:	6823      	ldr	r3, [r4, #0]
 80176ec:	f013 0310 	ands.w	r3, r3, #16
 80176f0:	d105      	bne.n	80176fe <_scanf_chars+0xa2>
 80176f2:	68e2      	ldr	r2, [r4, #12]
 80176f4:	3201      	adds	r2, #1
 80176f6:	60e2      	str	r2, [r4, #12]
 80176f8:	69a2      	ldr	r2, [r4, #24]
 80176fa:	b102      	cbz	r2, 80176fe <_scanf_chars+0xa2>
 80176fc:	7033      	strb	r3, [r6, #0]
 80176fe:	6923      	ldr	r3, [r4, #16]
 8017700:	443b      	add	r3, r7
 8017702:	6123      	str	r3, [r4, #16]
 8017704:	2000      	movs	r0, #0
 8017706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801770a:	bf00      	nop
 801770c:	080184d3 	.word	0x080184d3

08017710 <_scanf_i>:
 8017710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017714:	4698      	mov	r8, r3
 8017716:	4b74      	ldr	r3, [pc, #464]	@ (80178e8 <_scanf_i+0x1d8>)
 8017718:	460c      	mov	r4, r1
 801771a:	4682      	mov	sl, r0
 801771c:	4616      	mov	r6, r2
 801771e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017722:	b087      	sub	sp, #28
 8017724:	ab03      	add	r3, sp, #12
 8017726:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801772a:	4b70      	ldr	r3, [pc, #448]	@ (80178ec <_scanf_i+0x1dc>)
 801772c:	69a1      	ldr	r1, [r4, #24]
 801772e:	4a70      	ldr	r2, [pc, #448]	@ (80178f0 <_scanf_i+0x1e0>)
 8017730:	2903      	cmp	r1, #3
 8017732:	bf08      	it	eq
 8017734:	461a      	moveq	r2, r3
 8017736:	68a3      	ldr	r3, [r4, #8]
 8017738:	9201      	str	r2, [sp, #4]
 801773a:	1e5a      	subs	r2, r3, #1
 801773c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8017740:	bf88      	it	hi
 8017742:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8017746:	4627      	mov	r7, r4
 8017748:	bf82      	ittt	hi
 801774a:	eb03 0905 	addhi.w	r9, r3, r5
 801774e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8017752:	60a3      	strhi	r3, [r4, #8]
 8017754:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017758:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801775c:	bf98      	it	ls
 801775e:	f04f 0900 	movls.w	r9, #0
 8017762:	6023      	str	r3, [r4, #0]
 8017764:	463d      	mov	r5, r7
 8017766:	f04f 0b00 	mov.w	fp, #0
 801776a:	6831      	ldr	r1, [r6, #0]
 801776c:	ab03      	add	r3, sp, #12
 801776e:	7809      	ldrb	r1, [r1, #0]
 8017770:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017774:	2202      	movs	r2, #2
 8017776:	f7e8 fd43 	bl	8000200 <memchr>
 801777a:	b328      	cbz	r0, 80177c8 <_scanf_i+0xb8>
 801777c:	f1bb 0f01 	cmp.w	fp, #1
 8017780:	d159      	bne.n	8017836 <_scanf_i+0x126>
 8017782:	6862      	ldr	r2, [r4, #4]
 8017784:	b92a      	cbnz	r2, 8017792 <_scanf_i+0x82>
 8017786:	6822      	ldr	r2, [r4, #0]
 8017788:	2108      	movs	r1, #8
 801778a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801778e:	6061      	str	r1, [r4, #4]
 8017790:	6022      	str	r2, [r4, #0]
 8017792:	6822      	ldr	r2, [r4, #0]
 8017794:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8017798:	6022      	str	r2, [r4, #0]
 801779a:	68a2      	ldr	r2, [r4, #8]
 801779c:	1e51      	subs	r1, r2, #1
 801779e:	60a1      	str	r1, [r4, #8]
 80177a0:	b192      	cbz	r2, 80177c8 <_scanf_i+0xb8>
 80177a2:	6832      	ldr	r2, [r6, #0]
 80177a4:	1c51      	adds	r1, r2, #1
 80177a6:	6031      	str	r1, [r6, #0]
 80177a8:	7812      	ldrb	r2, [r2, #0]
 80177aa:	f805 2b01 	strb.w	r2, [r5], #1
 80177ae:	6872      	ldr	r2, [r6, #4]
 80177b0:	3a01      	subs	r2, #1
 80177b2:	2a00      	cmp	r2, #0
 80177b4:	6072      	str	r2, [r6, #4]
 80177b6:	dc07      	bgt.n	80177c8 <_scanf_i+0xb8>
 80177b8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80177bc:	4631      	mov	r1, r6
 80177be:	4650      	mov	r0, sl
 80177c0:	4790      	blx	r2
 80177c2:	2800      	cmp	r0, #0
 80177c4:	f040 8085 	bne.w	80178d2 <_scanf_i+0x1c2>
 80177c8:	f10b 0b01 	add.w	fp, fp, #1
 80177cc:	f1bb 0f03 	cmp.w	fp, #3
 80177d0:	d1cb      	bne.n	801776a <_scanf_i+0x5a>
 80177d2:	6863      	ldr	r3, [r4, #4]
 80177d4:	b90b      	cbnz	r3, 80177da <_scanf_i+0xca>
 80177d6:	230a      	movs	r3, #10
 80177d8:	6063      	str	r3, [r4, #4]
 80177da:	6863      	ldr	r3, [r4, #4]
 80177dc:	4945      	ldr	r1, [pc, #276]	@ (80178f4 <_scanf_i+0x1e4>)
 80177de:	6960      	ldr	r0, [r4, #20]
 80177e0:	1ac9      	subs	r1, r1, r3
 80177e2:	f000 f889 	bl	80178f8 <__sccl>
 80177e6:	f04f 0b00 	mov.w	fp, #0
 80177ea:	68a3      	ldr	r3, [r4, #8]
 80177ec:	6822      	ldr	r2, [r4, #0]
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d03d      	beq.n	801786e <_scanf_i+0x15e>
 80177f2:	6831      	ldr	r1, [r6, #0]
 80177f4:	6960      	ldr	r0, [r4, #20]
 80177f6:	f891 c000 	ldrb.w	ip, [r1]
 80177fa:	f810 000c 	ldrb.w	r0, [r0, ip]
 80177fe:	2800      	cmp	r0, #0
 8017800:	d035      	beq.n	801786e <_scanf_i+0x15e>
 8017802:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8017806:	d124      	bne.n	8017852 <_scanf_i+0x142>
 8017808:	0510      	lsls	r0, r2, #20
 801780a:	d522      	bpl.n	8017852 <_scanf_i+0x142>
 801780c:	f10b 0b01 	add.w	fp, fp, #1
 8017810:	f1b9 0f00 	cmp.w	r9, #0
 8017814:	d003      	beq.n	801781e <_scanf_i+0x10e>
 8017816:	3301      	adds	r3, #1
 8017818:	f109 39ff 	add.w	r9, r9, #4294967295
 801781c:	60a3      	str	r3, [r4, #8]
 801781e:	6873      	ldr	r3, [r6, #4]
 8017820:	3b01      	subs	r3, #1
 8017822:	2b00      	cmp	r3, #0
 8017824:	6073      	str	r3, [r6, #4]
 8017826:	dd1b      	ble.n	8017860 <_scanf_i+0x150>
 8017828:	6833      	ldr	r3, [r6, #0]
 801782a:	3301      	adds	r3, #1
 801782c:	6033      	str	r3, [r6, #0]
 801782e:	68a3      	ldr	r3, [r4, #8]
 8017830:	3b01      	subs	r3, #1
 8017832:	60a3      	str	r3, [r4, #8]
 8017834:	e7d9      	b.n	80177ea <_scanf_i+0xda>
 8017836:	f1bb 0f02 	cmp.w	fp, #2
 801783a:	d1ae      	bne.n	801779a <_scanf_i+0x8a>
 801783c:	6822      	ldr	r2, [r4, #0]
 801783e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8017842:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8017846:	d1c4      	bne.n	80177d2 <_scanf_i+0xc2>
 8017848:	2110      	movs	r1, #16
 801784a:	6061      	str	r1, [r4, #4]
 801784c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8017850:	e7a2      	b.n	8017798 <_scanf_i+0x88>
 8017852:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8017856:	6022      	str	r2, [r4, #0]
 8017858:	780b      	ldrb	r3, [r1, #0]
 801785a:	f805 3b01 	strb.w	r3, [r5], #1
 801785e:	e7de      	b.n	801781e <_scanf_i+0x10e>
 8017860:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8017864:	4631      	mov	r1, r6
 8017866:	4650      	mov	r0, sl
 8017868:	4798      	blx	r3
 801786a:	2800      	cmp	r0, #0
 801786c:	d0df      	beq.n	801782e <_scanf_i+0x11e>
 801786e:	6823      	ldr	r3, [r4, #0]
 8017870:	05d9      	lsls	r1, r3, #23
 8017872:	d50d      	bpl.n	8017890 <_scanf_i+0x180>
 8017874:	42bd      	cmp	r5, r7
 8017876:	d909      	bls.n	801788c <_scanf_i+0x17c>
 8017878:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801787c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017880:	4632      	mov	r2, r6
 8017882:	4650      	mov	r0, sl
 8017884:	4798      	blx	r3
 8017886:	f105 39ff 	add.w	r9, r5, #4294967295
 801788a:	464d      	mov	r5, r9
 801788c:	42bd      	cmp	r5, r7
 801788e:	d028      	beq.n	80178e2 <_scanf_i+0x1d2>
 8017890:	6822      	ldr	r2, [r4, #0]
 8017892:	f012 0210 	ands.w	r2, r2, #16
 8017896:	d113      	bne.n	80178c0 <_scanf_i+0x1b0>
 8017898:	702a      	strb	r2, [r5, #0]
 801789a:	6863      	ldr	r3, [r4, #4]
 801789c:	9e01      	ldr	r6, [sp, #4]
 801789e:	4639      	mov	r1, r7
 80178a0:	4650      	mov	r0, sl
 80178a2:	47b0      	blx	r6
 80178a4:	f8d8 3000 	ldr.w	r3, [r8]
 80178a8:	6821      	ldr	r1, [r4, #0]
 80178aa:	1d1a      	adds	r2, r3, #4
 80178ac:	f8c8 2000 	str.w	r2, [r8]
 80178b0:	f011 0f20 	tst.w	r1, #32
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	d00f      	beq.n	80178d8 <_scanf_i+0x1c8>
 80178b8:	6018      	str	r0, [r3, #0]
 80178ba:	68e3      	ldr	r3, [r4, #12]
 80178bc:	3301      	adds	r3, #1
 80178be:	60e3      	str	r3, [r4, #12]
 80178c0:	6923      	ldr	r3, [r4, #16]
 80178c2:	1bed      	subs	r5, r5, r7
 80178c4:	445d      	add	r5, fp
 80178c6:	442b      	add	r3, r5
 80178c8:	6123      	str	r3, [r4, #16]
 80178ca:	2000      	movs	r0, #0
 80178cc:	b007      	add	sp, #28
 80178ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178d2:	f04f 0b00 	mov.w	fp, #0
 80178d6:	e7ca      	b.n	801786e <_scanf_i+0x15e>
 80178d8:	07ca      	lsls	r2, r1, #31
 80178da:	bf4c      	ite	mi
 80178dc:	8018      	strhmi	r0, [r3, #0]
 80178de:	6018      	strpl	r0, [r3, #0]
 80178e0:	e7eb      	b.n	80178ba <_scanf_i+0x1aa>
 80178e2:	2001      	movs	r0, #1
 80178e4:	e7f2      	b.n	80178cc <_scanf_i+0x1bc>
 80178e6:	bf00      	nop
 80178e8:	08018128 	.word	0x08018128
 80178ec:	08016909 	.word	0x08016909
 80178f0:	08017b6d 	.word	0x08017b6d
 80178f4:	08018616 	.word	0x08018616

080178f8 <__sccl>:
 80178f8:	b570      	push	{r4, r5, r6, lr}
 80178fa:	780b      	ldrb	r3, [r1, #0]
 80178fc:	4604      	mov	r4, r0
 80178fe:	2b5e      	cmp	r3, #94	@ 0x5e
 8017900:	bf0b      	itete	eq
 8017902:	784b      	ldrbeq	r3, [r1, #1]
 8017904:	1c4a      	addne	r2, r1, #1
 8017906:	1c8a      	addeq	r2, r1, #2
 8017908:	2100      	movne	r1, #0
 801790a:	bf08      	it	eq
 801790c:	2101      	moveq	r1, #1
 801790e:	3801      	subs	r0, #1
 8017910:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8017914:	f800 1f01 	strb.w	r1, [r0, #1]!
 8017918:	42a8      	cmp	r0, r5
 801791a:	d1fb      	bne.n	8017914 <__sccl+0x1c>
 801791c:	b90b      	cbnz	r3, 8017922 <__sccl+0x2a>
 801791e:	1e50      	subs	r0, r2, #1
 8017920:	bd70      	pop	{r4, r5, r6, pc}
 8017922:	f081 0101 	eor.w	r1, r1, #1
 8017926:	54e1      	strb	r1, [r4, r3]
 8017928:	4610      	mov	r0, r2
 801792a:	4602      	mov	r2, r0
 801792c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8017930:	2d2d      	cmp	r5, #45	@ 0x2d
 8017932:	d005      	beq.n	8017940 <__sccl+0x48>
 8017934:	2d5d      	cmp	r5, #93	@ 0x5d
 8017936:	d016      	beq.n	8017966 <__sccl+0x6e>
 8017938:	2d00      	cmp	r5, #0
 801793a:	d0f1      	beq.n	8017920 <__sccl+0x28>
 801793c:	462b      	mov	r3, r5
 801793e:	e7f2      	b.n	8017926 <__sccl+0x2e>
 8017940:	7846      	ldrb	r6, [r0, #1]
 8017942:	2e5d      	cmp	r6, #93	@ 0x5d
 8017944:	d0fa      	beq.n	801793c <__sccl+0x44>
 8017946:	42b3      	cmp	r3, r6
 8017948:	dcf8      	bgt.n	801793c <__sccl+0x44>
 801794a:	3002      	adds	r0, #2
 801794c:	461a      	mov	r2, r3
 801794e:	3201      	adds	r2, #1
 8017950:	4296      	cmp	r6, r2
 8017952:	54a1      	strb	r1, [r4, r2]
 8017954:	dcfb      	bgt.n	801794e <__sccl+0x56>
 8017956:	1af2      	subs	r2, r6, r3
 8017958:	3a01      	subs	r2, #1
 801795a:	1c5d      	adds	r5, r3, #1
 801795c:	42b3      	cmp	r3, r6
 801795e:	bfa8      	it	ge
 8017960:	2200      	movge	r2, #0
 8017962:	18ab      	adds	r3, r5, r2
 8017964:	e7e1      	b.n	801792a <__sccl+0x32>
 8017966:	4610      	mov	r0, r2
 8017968:	e7da      	b.n	8017920 <__sccl+0x28>

0801796a <__submore>:
 801796a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801796e:	460c      	mov	r4, r1
 8017970:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8017972:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017976:	4299      	cmp	r1, r3
 8017978:	d11d      	bne.n	80179b6 <__submore+0x4c>
 801797a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801797e:	f7ff f92d 	bl	8016bdc <_malloc_r>
 8017982:	b918      	cbnz	r0, 801798c <__submore+0x22>
 8017984:	f04f 30ff 	mov.w	r0, #4294967295
 8017988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801798c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017990:	63a3      	str	r3, [r4, #56]	@ 0x38
 8017992:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8017996:	6360      	str	r0, [r4, #52]	@ 0x34
 8017998:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801799c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80179a0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80179a4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80179a8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80179ac:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80179b0:	6020      	str	r0, [r4, #0]
 80179b2:	2000      	movs	r0, #0
 80179b4:	e7e8      	b.n	8017988 <__submore+0x1e>
 80179b6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80179b8:	0077      	lsls	r7, r6, #1
 80179ba:	463a      	mov	r2, r7
 80179bc:	f000 f83a 	bl	8017a34 <_realloc_r>
 80179c0:	4605      	mov	r5, r0
 80179c2:	2800      	cmp	r0, #0
 80179c4:	d0de      	beq.n	8017984 <__submore+0x1a>
 80179c6:	eb00 0806 	add.w	r8, r0, r6
 80179ca:	4601      	mov	r1, r0
 80179cc:	4632      	mov	r2, r6
 80179ce:	4640      	mov	r0, r8
 80179d0:	f7ff f88a 	bl	8016ae8 <memcpy>
 80179d4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80179d8:	f8c4 8000 	str.w	r8, [r4]
 80179dc:	e7e9      	b.n	80179b2 <__submore+0x48>

080179de <memmove>:
 80179de:	4288      	cmp	r0, r1
 80179e0:	b510      	push	{r4, lr}
 80179e2:	eb01 0402 	add.w	r4, r1, r2
 80179e6:	d902      	bls.n	80179ee <memmove+0x10>
 80179e8:	4284      	cmp	r4, r0
 80179ea:	4623      	mov	r3, r4
 80179ec:	d807      	bhi.n	80179fe <memmove+0x20>
 80179ee:	1e43      	subs	r3, r0, #1
 80179f0:	42a1      	cmp	r1, r4
 80179f2:	d008      	beq.n	8017a06 <memmove+0x28>
 80179f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80179f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80179fc:	e7f8      	b.n	80179f0 <memmove+0x12>
 80179fe:	4402      	add	r2, r0
 8017a00:	4601      	mov	r1, r0
 8017a02:	428a      	cmp	r2, r1
 8017a04:	d100      	bne.n	8017a08 <memmove+0x2a>
 8017a06:	bd10      	pop	{r4, pc}
 8017a08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017a0c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017a10:	e7f7      	b.n	8017a02 <memmove+0x24>
	...

08017a14 <_sbrk_r>:
 8017a14:	b538      	push	{r3, r4, r5, lr}
 8017a16:	4d06      	ldr	r5, [pc, #24]	@ (8017a30 <_sbrk_r+0x1c>)
 8017a18:	2300      	movs	r3, #0
 8017a1a:	4604      	mov	r4, r0
 8017a1c:	4608      	mov	r0, r1
 8017a1e:	602b      	str	r3, [r5, #0]
 8017a20:	f7f0 fdaa 	bl	8008578 <_sbrk>
 8017a24:	1c43      	adds	r3, r0, #1
 8017a26:	d102      	bne.n	8017a2e <_sbrk_r+0x1a>
 8017a28:	682b      	ldr	r3, [r5, #0]
 8017a2a:	b103      	cbz	r3, 8017a2e <_sbrk_r+0x1a>
 8017a2c:	6023      	str	r3, [r4, #0]
 8017a2e:	bd38      	pop	{r3, r4, r5, pc}
 8017a30:	20005d98 	.word	0x20005d98

08017a34 <_realloc_r>:
 8017a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a38:	4607      	mov	r7, r0
 8017a3a:	4614      	mov	r4, r2
 8017a3c:	460d      	mov	r5, r1
 8017a3e:	b921      	cbnz	r1, 8017a4a <_realloc_r+0x16>
 8017a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a44:	4611      	mov	r1, r2
 8017a46:	f7ff b8c9 	b.w	8016bdc <_malloc_r>
 8017a4a:	b92a      	cbnz	r2, 8017a58 <_realloc_r+0x24>
 8017a4c:	f7ff f85a 	bl	8016b04 <_free_r>
 8017a50:	4625      	mov	r5, r4
 8017a52:	4628      	mov	r0, r5
 8017a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a58:	f000 f88a 	bl	8017b70 <_malloc_usable_size_r>
 8017a5c:	4284      	cmp	r4, r0
 8017a5e:	4606      	mov	r6, r0
 8017a60:	d802      	bhi.n	8017a68 <_realloc_r+0x34>
 8017a62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017a66:	d8f4      	bhi.n	8017a52 <_realloc_r+0x1e>
 8017a68:	4621      	mov	r1, r4
 8017a6a:	4638      	mov	r0, r7
 8017a6c:	f7ff f8b6 	bl	8016bdc <_malloc_r>
 8017a70:	4680      	mov	r8, r0
 8017a72:	b908      	cbnz	r0, 8017a78 <_realloc_r+0x44>
 8017a74:	4645      	mov	r5, r8
 8017a76:	e7ec      	b.n	8017a52 <_realloc_r+0x1e>
 8017a78:	42b4      	cmp	r4, r6
 8017a7a:	4622      	mov	r2, r4
 8017a7c:	4629      	mov	r1, r5
 8017a7e:	bf28      	it	cs
 8017a80:	4632      	movcs	r2, r6
 8017a82:	f7ff f831 	bl	8016ae8 <memcpy>
 8017a86:	4629      	mov	r1, r5
 8017a88:	4638      	mov	r0, r7
 8017a8a:	f7ff f83b 	bl	8016b04 <_free_r>
 8017a8e:	e7f1      	b.n	8017a74 <_realloc_r+0x40>

08017a90 <_strtoul_l.isra.0>:
 8017a90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a94:	4e34      	ldr	r6, [pc, #208]	@ (8017b68 <_strtoul_l.isra.0+0xd8>)
 8017a96:	4686      	mov	lr, r0
 8017a98:	460d      	mov	r5, r1
 8017a9a:	4628      	mov	r0, r5
 8017a9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017aa0:	5d37      	ldrb	r7, [r6, r4]
 8017aa2:	f017 0708 	ands.w	r7, r7, #8
 8017aa6:	d1f8      	bne.n	8017a9a <_strtoul_l.isra.0+0xa>
 8017aa8:	2c2d      	cmp	r4, #45	@ 0x2d
 8017aaa:	d110      	bne.n	8017ace <_strtoul_l.isra.0+0x3e>
 8017aac:	782c      	ldrb	r4, [r5, #0]
 8017aae:	2701      	movs	r7, #1
 8017ab0:	1c85      	adds	r5, r0, #2
 8017ab2:	f033 0010 	bics.w	r0, r3, #16
 8017ab6:	d115      	bne.n	8017ae4 <_strtoul_l.isra.0+0x54>
 8017ab8:	2c30      	cmp	r4, #48	@ 0x30
 8017aba:	d10d      	bne.n	8017ad8 <_strtoul_l.isra.0+0x48>
 8017abc:	7828      	ldrb	r0, [r5, #0]
 8017abe:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8017ac2:	2858      	cmp	r0, #88	@ 0x58
 8017ac4:	d108      	bne.n	8017ad8 <_strtoul_l.isra.0+0x48>
 8017ac6:	786c      	ldrb	r4, [r5, #1]
 8017ac8:	3502      	adds	r5, #2
 8017aca:	2310      	movs	r3, #16
 8017acc:	e00a      	b.n	8017ae4 <_strtoul_l.isra.0+0x54>
 8017ace:	2c2b      	cmp	r4, #43	@ 0x2b
 8017ad0:	bf04      	itt	eq
 8017ad2:	782c      	ldrbeq	r4, [r5, #0]
 8017ad4:	1c85      	addeq	r5, r0, #2
 8017ad6:	e7ec      	b.n	8017ab2 <_strtoul_l.isra.0+0x22>
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d1f6      	bne.n	8017aca <_strtoul_l.isra.0+0x3a>
 8017adc:	2c30      	cmp	r4, #48	@ 0x30
 8017ade:	bf14      	ite	ne
 8017ae0:	230a      	movne	r3, #10
 8017ae2:	2308      	moveq	r3, #8
 8017ae4:	f04f 38ff 	mov.w	r8, #4294967295
 8017ae8:	2600      	movs	r6, #0
 8017aea:	fbb8 f8f3 	udiv	r8, r8, r3
 8017aee:	fb03 f908 	mul.w	r9, r3, r8
 8017af2:	ea6f 0909 	mvn.w	r9, r9
 8017af6:	4630      	mov	r0, r6
 8017af8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8017afc:	f1bc 0f09 	cmp.w	ip, #9
 8017b00:	d810      	bhi.n	8017b24 <_strtoul_l.isra.0+0x94>
 8017b02:	4664      	mov	r4, ip
 8017b04:	42a3      	cmp	r3, r4
 8017b06:	dd1e      	ble.n	8017b46 <_strtoul_l.isra.0+0xb6>
 8017b08:	f1b6 3fff 	cmp.w	r6, #4294967295
 8017b0c:	d007      	beq.n	8017b1e <_strtoul_l.isra.0+0x8e>
 8017b0e:	4580      	cmp	r8, r0
 8017b10:	d316      	bcc.n	8017b40 <_strtoul_l.isra.0+0xb0>
 8017b12:	d101      	bne.n	8017b18 <_strtoul_l.isra.0+0x88>
 8017b14:	45a1      	cmp	r9, r4
 8017b16:	db13      	blt.n	8017b40 <_strtoul_l.isra.0+0xb0>
 8017b18:	fb00 4003 	mla	r0, r0, r3, r4
 8017b1c:	2601      	movs	r6, #1
 8017b1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017b22:	e7e9      	b.n	8017af8 <_strtoul_l.isra.0+0x68>
 8017b24:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8017b28:	f1bc 0f19 	cmp.w	ip, #25
 8017b2c:	d801      	bhi.n	8017b32 <_strtoul_l.isra.0+0xa2>
 8017b2e:	3c37      	subs	r4, #55	@ 0x37
 8017b30:	e7e8      	b.n	8017b04 <_strtoul_l.isra.0+0x74>
 8017b32:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8017b36:	f1bc 0f19 	cmp.w	ip, #25
 8017b3a:	d804      	bhi.n	8017b46 <_strtoul_l.isra.0+0xb6>
 8017b3c:	3c57      	subs	r4, #87	@ 0x57
 8017b3e:	e7e1      	b.n	8017b04 <_strtoul_l.isra.0+0x74>
 8017b40:	f04f 36ff 	mov.w	r6, #4294967295
 8017b44:	e7eb      	b.n	8017b1e <_strtoul_l.isra.0+0x8e>
 8017b46:	1c73      	adds	r3, r6, #1
 8017b48:	d106      	bne.n	8017b58 <_strtoul_l.isra.0+0xc8>
 8017b4a:	2322      	movs	r3, #34	@ 0x22
 8017b4c:	f8ce 3000 	str.w	r3, [lr]
 8017b50:	4630      	mov	r0, r6
 8017b52:	b932      	cbnz	r2, 8017b62 <_strtoul_l.isra.0+0xd2>
 8017b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b58:	b107      	cbz	r7, 8017b5c <_strtoul_l.isra.0+0xcc>
 8017b5a:	4240      	negs	r0, r0
 8017b5c:	2a00      	cmp	r2, #0
 8017b5e:	d0f9      	beq.n	8017b54 <_strtoul_l.isra.0+0xc4>
 8017b60:	b106      	cbz	r6, 8017b64 <_strtoul_l.isra.0+0xd4>
 8017b62:	1e69      	subs	r1, r5, #1
 8017b64:	6011      	str	r1, [r2, #0]
 8017b66:	e7f5      	b.n	8017b54 <_strtoul_l.isra.0+0xc4>
 8017b68:	080184d3 	.word	0x080184d3

08017b6c <_strtoul_r>:
 8017b6c:	f7ff bf90 	b.w	8017a90 <_strtoul_l.isra.0>

08017b70 <_malloc_usable_size_r>:
 8017b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017b74:	1f18      	subs	r0, r3, #4
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	bfbc      	itt	lt
 8017b7a:	580b      	ldrlt	r3, [r1, r0]
 8017b7c:	18c0      	addlt	r0, r0, r3
 8017b7e:	4770      	bx	lr

08017b80 <_init>:
 8017b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b82:	bf00      	nop
 8017b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b86:	bc08      	pop	{r3}
 8017b88:	469e      	mov	lr, r3
 8017b8a:	4770      	bx	lr

08017b8c <_fini>:
 8017b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b8e:	bf00      	nop
 8017b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b92:	bc08      	pop	{r3}
 8017b94:	469e      	mov	lr, r3
 8017b96:	4770      	bx	lr
